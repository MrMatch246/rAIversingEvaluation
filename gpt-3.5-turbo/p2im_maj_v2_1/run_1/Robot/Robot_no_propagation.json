{
    "functions": {
        "FUN_08000110": {
            "additional_data": {
                "DAT_200009c8": {
                    "flag": 10,
                    "flag_variable": 3,
                    "status_flag": 1
                },
                "FUN_08000110": {
                    "initialize_flag": 23,
                    "initialize_flag_if_needed": 1,
                    "initialize_global_flag": 1,
                    "initialize_status": 1,
                    "set_flag_if_zero": 1,
                    "update_flag": 1,
                    "update_flag_and_return_input": 1,
                    "update_flag_if_null": 1,
                    "update_flag_if_zero": 1
                },
                "char": {
                    "flag": 1
                },
                "param_1": {
                    "input": 6,
                    "input_argument": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 19,
                    "status": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_global_flag_08000110(undefined4 input_value)\n\n{\n  if ((flag)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_global_flag_08000110",
            "entrypoint": "0x08000110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000110": "initialize_global_flag_08000110",
                "char": "flag",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000134": {
            "additional_data": {
                "FUN_08000134": {
                    "combine_parameters": 1,
                    "combine_params": 1,
                    "concatenate64": 1,
                    "concatenate_64_bit_values": 1,
                    "concatenate_64bit": 1,
                    "concatenate_64bit_nums": 1,
                    "concatenate_64bits": 1,
                    "concatenate_integers": 5,
                    "concatenate_numbers": 3,
                    "concatenate_param": 1,
                    "concatenate_parameters": 3,
                    "concatenate_params": 5,
                    "concatenate_uint64": 1,
                    "concatenate_uintegers": 1,
                    "concatenate_values": 5
                },
                "param_1": {
                    "first_integer": 3,
                    "first_num": 1,
                    "first_number": 2,
                    "first_param": 4,
                    "first_parameter": 4,
                    "first_uint32": 1,
                    "first_value": 1,
                    "input1": 4,
                    "input_1": 1,
                    "input_low": 1,
                    "integer1": 2,
                    "number1": 1,
                    "value1": 5
                },
                "param_2": {
                    "input2": 4,
                    "input_2": 1,
                    "input_high": 1,
                    "integer2": 2,
                    "number2": 1,
                    "second_integer": 3,
                    "second_num": 1,
                    "second_number": 2,
                    "second_param": 4,
                    "second_parameter": 4,
                    "second_uint32": 1,
                    "second_value": 1,
                    "value2": 5
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_64_bit_values_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "current_name": "concatenate_64_bit_values_08000134",
            "entrypoint": "0x08000134",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000134": "concatenate_64_bit_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000158": {
            "additional_data": {
                "FUN_08000158": {
                    "calculate": 6,
                    "calculate_bitwise_operations": 1,
                    "calculate_concatenation": 1,
                    "calculate_result": 7,
                    "calculate_sum": 1,
                    "calculate_x": 1,
                    "perform_arithmetic": 1,
                    "reverse_binary_operation": 2,
                    "reverse_bits": 2
                },
                "bVar13": {
                    "bool1": 2,
                    "bool_a": 1,
                    "carry_flag": 1,
                    "cond1": 1,
                    "condition1": 2,
                    "flag1": 9,
                    "flag_1": 1,
                    "is_condition1": 1,
                    "is_condition1_true": 1,
                    "is_condition_true1": 1,
                    "is_equal": 1,
                    "is_negative_diff": 1,
                    "is_zero": 3,
                    "is_zero1": 2,
                    "temp13": 2,
                    "temp_13": 1,
                    "temp_bool1": 1
                },
                "bVar14": {
                    "bool2": 2,
                    "bool_b": 1,
                    "cond2": 1,
                    "condition": 3,
                    "condition2": 2,
                    "condition_1": 1,
                    "flag2": 9,
                    "flag_2": 1,
                    "is_condition2": 1,
                    "is_condition2_true": 1,
                    "is_condition_true2": 1,
                    "is_negative": 1,
                    "is_zero": 1,
                    "is_zero2": 2,
                    "temp14": 2,
                    "temp_14": 1,
                    "temp_bool2": 1
                },
                "bVar15": {
                    "bool3": 2,
                    "bool_c": 1,
                    "cond3": 1,
                    "condition3": 2,
                    "condition_2": 1,
                    "flag3": 9,
                    "flag_3": 1,
                    "is_carry": 2,
                    "is_condition3": 1,
                    "is_condition3_true": 1,
                    "is_condition_true3": 1,
                    "is_negative": 5,
                    "temp15": 2,
                    "temp_15": 1,
                    "temp_bool3": 1
                },
                "bVar2": {
                    "bit": 1,
                    "bit_1": 1,
                    "carry": 6,
                    "carry1": 2,
                    "carry_check": 1,
                    "temp1": 1,
                    "temp12": 3,
                    "temp2": 1,
                    "temp_2": 1
                },
                "iVar1": {
                    "bit_shift_count_1": 1,
                    "first_shift": 1,
                    "index1": 3,
                    "result1": 2,
                    "shift1": 4,
                    "shift_amount": 1,
                    "shift_count1": 1,
                    "step1": 1,
                    "temp1": 2,
                    "temp10": 1,
                    "temp6": 4,
                    "temp_1": 1
                },
                "iVar8": {
                    "bit_shift_count_2": 1,
                    "index2": 3,
                    "result2": 2,
                    "second_shift": 1,
                    "shift": 2,
                    "shift2": 3,
                    "shift_amount": 2,
                    "shift_count": 1,
                    "shift_count2": 1,
                    "temp11": 1,
                    "temp4": 1,
                    "temp6": 6,
                    "temp7": 4,
                    "temp8": 1,
                    "temp_8": 1
                },
                "param_1": {
                    "a": 4,
                    "first_param": 1,
                    "input1": 19,
                    "input_1": 4,
                    "input_a": 1,
                    "num1": 1,
                    "x": 1
                },
                "param_2": {
                    "b": 4,
                    "input2": 19,
                    "input_2": 4,
                    "input_b": 1,
                    "num2": 1,
                    "second_param": 1,
                    "y": 1
                },
                "param_3": {
                    "c": 4,
                    "input3": 18,
                    "input_3": 4,
                    "input_c": 1,
                    "num3": 1,
                    "original_input1": 1,
                    "third_param": 1,
                    "z": 1
                },
                "param_4": {
                    "d": 4,
                    "fourth_param": 1,
                    "input4": 18,
                    "input_4": 4,
                    "input_d": 1,
                    "num4": 1,
                    "original_input2": 1,
                    "w": 1
                },
                "uVar10": {
                    "carry_temp": 1,
                    "count1": 1,
                    "data2": 1,
                    "masked_b": 1,
                    "result2": 1,
                    "result3": 1,
                    "result4": 1,
                    "result7": 1,
                    "shifted_input2": 1,
                    "temp1": 1,
                    "temp10": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 6,
                    "temp9": 3,
                    "temp_10": 1,
                    "temp_4": 1,
                    "temp_var_4": 1,
                    "temp_var_a": 1
                },
                "uVar11": {
                    "b_shifted": 1,
                    "count2": 1,
                    "data3": 1,
                    "diff": 2,
                    "masked_h": 1,
                    "modified_input3": 1,
                    "result3": 1,
                    "result4": 1,
                    "result5": 1,
                    "result_1": 1,
                    "result_low": 1,
                    "temp10": 3,
                    "temp11": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp8": 1,
                    "temp9": 6,
                    "temp_11": 1,
                    "temp_5": 1,
                    "temp_var_5": 1,
                    "temp_var_b": 1
                },
                "uVar12": {
                    "abs_diff": 1,
                    "carry4": 1,
                    "data4": 1,
                    "masked_i": 1,
                    "result": 1,
                    "result4": 2,
                    "result6": 1,
                    "shifted_param_1": 1,
                    "temp1": 1,
                    "temp10": 6,
                    "temp11": 3,
                    "temp12": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_12": 1,
                    "temp_6": 1,
                    "temp_result": 1,
                    "temp_var_c": 1
                },
                "uVar16": {
                    "shifted_result": 1
                },
                "uVar17": {
                    "shifted_carry": 1
                },
                "uVar3": {
                    "masked_c": 1,
                    "output1": 1,
                    "result1": 3,
                    "result3": 1,
                    "result_1": 1,
                    "result_a": 1,
                    "shifted_param_3": 1,
                    "temp1": 15,
                    "temp2": 2,
                    "temp3": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_3": 1,
                    "temp_var_1": 1
                },
                "uVar4": {
                    "a_masked": 1,
                    "bit_shifted_param_2": 1,
                    "lower_bits_concat": 1,
                    "mask1": 1,
                    "masked_d": 1,
                    "output2": 1,
                    "result1": 1,
                    "result2": 2,
                    "result4": 1,
                    "result_2": 1,
                    "result_b": 1,
                    "temp2": 14,
                    "temp3": 1,
                    "temp4": 2,
                    "temp9": 1,
                    "temp_4": 1
                },
                "uVar5": {
                    "carry_addition": 1,
                    "masked_e": 1,
                    "output3": 1,
                    "result2": 2,
                    "result3": 2,
                    "result5": 1,
                    "result_3": 1,
                    "sum1": 1,
                    "temp10": 1,
                    "temp3": 14,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_5": 1,
                    "temp_var_2": 1,
                    "temp_var_a": 1
                },
                "uVar6": {
                    "b_masked": 1,
                    "carry2": 1,
                    "masked_f": 1,
                    "modified_input4": 1,
                    "result1": 2,
                    "result3": 1,
                    "reversed": 1,
                    "shifted_param_2": 2,
                    "temp1": 4,
                    "temp4": 12,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_1": 1,
                    "temp_6": 1,
                    "temp_var_b": 1
                },
                "uVar7": {
                    "masked_g": 1,
                    "result2": 2,
                    "result6": 1,
                    "shifted_param_2_with_carry": 1,
                    "shifted_param_3": 1,
                    "sum2": 1,
                    "temp1": 1,
                    "temp11": 1,
                    "temp2": 3,
                    "temp3": 2,
                    "temp5": 12,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_2": 1,
                    "temp_7": 1,
                    "temp_var_c": 1
                },
                "uVar8": {
                    "temp12": 1,
                    "temp6": 1,
                    "temp7": 1
                },
                "uVar9": {
                    "a_shifted": 1,
                    "carry3": 1,
                    "data1": 1,
                    "masked_a": 1,
                    "modified_input2": 1,
                    "result1": 1,
                    "result3": 1,
                    "result4": 1,
                    "result_a": 1,
                    "result_high": 1,
                    "shifted": 1,
                    "shifted_input1": 1,
                    "temp2": 2,
                    "temp3": 2,
                    "temp6": 1,
                    "temp7": 6,
                    "temp8": 3,
                    "temp9": 1,
                    "temp_3": 1,
                    "temp_9": 1,
                    "temp_result": 1,
                    "temp_var_3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong calculate_result_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp6;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  uint temp10;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  temp7 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp7 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp6 = (int)temp7 >> 0x15;\n  if (!flag2) {\n    flag2 = temp6 == -1;\n  }\n  temp6 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp6 == -1;\n  }\n  if (flag2) {\n    if (temp6 == -1 || temp6 == -1) {\n      temp7 = temp4;\n      temp9 = input3;\n      if (temp6 == -1) {\n        temp7 = input2;\n        temp9 = input1;\n      }\n      if (temp6 != -1 || temp6 != -1) {\n        input3 = temp9;\n        temp4 = temp7;\n      }\n      flag2 = (temp9 | temp7 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp7 == temp4;\n      }\n      if (!flag2) {\n        temp7 = temp7 | 0x80000;\n      }\n      return CONCAT44(temp7,temp9);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp7 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (temp7 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (temp7 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp7 = temp7 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp9 = input4 - temp7;\n  flag2 = temp9 != 0;\n  if (input4 < temp7) {\n    temp9 = -temp9;\n  }\n  temp8 = input1;\n  temp5 = input2;\n  if (flag2 && temp7 <= input4) {\n    temp7 = temp7 + temp9;\n    temp8 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp9) {\n    return CONCAT44(temp5,temp8);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = temp8 != 0;\n    temp8 = -temp8;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (temp7 == temp9) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp7 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp7 = 1;\n    }\n    else {\n      temp9 = temp9 - 1;\n    }\n  }\n  temp4 = -temp9 + 0x20;\n  if ((int)temp9 < 0x21) {\n    temp10 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp9 & 0xff);\n    temp1 = temp8 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp8,input3) + ((int)temp5 >> (temp9 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp10 = temp5 << (-temp9 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp10 = temp10 | 2;\n    }\n    temp5 = (int)temp5 >> (temp9 - 0x20 & 0xff);\n    temp4 = temp8 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp8,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp9 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp10 == 0;\n    temp10 = -temp10;\n    temp9 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    temp9 = -(uint)(flag2 <= temp9) - temp2;\n  }\n  if (0xfffff < temp9) {\n    temp8 = temp7 - 1;\n    if (0x1fffff < temp9) {\n      temp8 = temp9 & 1;\n      temp9 = temp9 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(temp8 != 0) << 0x1f | temp4 >> 1;\n      temp10 = (uint)(carry & 1) << 0x1f | temp10 >> 1;\n      temp8 = temp7;\n      if (0xffbfffff < temp7 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    flag2 = 0x7fffffff < temp10;\n    if (temp10 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp9 + temp8 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (temp10 & 0x80000000) != 0;\n  temp10 = temp10 << 1;\n  temp8 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  temp9 = temp9 * 2 + (uint)(flag2 || CARRY4(temp8,(uint)flag1));\n  temp8 = temp7 - 2;\n  if ((temp9 & 0x100000) != 0) goto LAB_08000268;\n  temp5 = temp4;\n  temp7 = temp9;\n  if (temp9 == 0) {\n    temp5 = 0;\n    temp7 = temp4;\n  }\n  temp6 = LZCOUNT(temp7);\n  if (temp9 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp9 = temp6 - 0xb;\n  flag3 = SBORROW4(temp9,0x20);\n  temp4 = temp6 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)temp9 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    temp6 = temp6 + -0x1f;\n    flag2 = temp6 < 0;\n    flag1 = temp6 == 0;\n    temp4 = temp9;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = temp7 << (temp9 & 0xff);\n      temp7 = temp7 >> (0xcU - temp6 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp10 = 0x20 - temp4;\n  }\n  temp7 = temp7 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp7 = temp7 | temp5 >> (temp10 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp9 <= (int)temp8) {\n    return CONCAT44(temp7 + (temp8 - temp9) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(temp8 - temp9);\n  if ((int)temp4 < 0x1f) {\n    temp6 = temp4 - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | temp7 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | temp7 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | temp7 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,temp7 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_08000158",
            "entrypoint": "0x08000158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000158": "calculate_result_08000158",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "bVar2": "carry",
                "iVar1": "temp6",
                "iVar8": "temp6",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar9": "temp7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800015c": {
            "additional_data": {
                "FUN_0800015c": {
                    "calculate_bitwise_operation": 1,
                    "calculate_concated_values": 1,
                    "calculate_result": 5,
                    "calculate_shifted_sum": 2,
                    "calculate_sum": 1,
                    "calculate_unary_operation": 1,
                    "calculate_unsigned_sum": 1,
                    "combine_numbers": 1,
                    "more_descriptive_function": 1,
                    "perform_arithmetic_operation": 1,
                    "reverse_binary_operation": 1,
                    "reverse_binary_operations": 1,
                    "reverse_bits": 2,
                    "reverse_unsigned_big_int": 1,
                    "reverse_unsigned_long_long": 1
                },
                "bVar13": {
                    "b_var1": 1,
                    "bit_set": 1,
                    "boolean1": 1,
                    "carry_flag": 1,
                    "check_result_bit": 1,
                    "condition_1": 2,
                    "flag1": 2,
                    "flag_1": 2,
                    "has_carry": 1,
                    "is_condition1_met": 1,
                    "is_equal": 4,
                    "is_equal_operands": 1,
                    "is_equal_shifted": 1,
                    "is_inputs_equal": 1,
                    "is_true": 1,
                    "is_zero": 3,
                    "overflow": 1,
                    "satisfied_condition": 1,
                    "temp_13": 2,
                    "var13": 1
                },
                "bVar14": {
                    "b_var2": 1,
                    "bit_set": 1,
                    "boolean2": 1,
                    "condition": 1,
                    "condition_1": 1,
                    "condition_2": 2,
                    "flag2": 2,
                    "flag_2": 2,
                    "is_carry": 1,
                    "is_condition2_met": 1,
                    "is_condition_met": 1,
                    "is_equal": 4,
                    "is_true2": 1,
                    "is_zero": 4,
                    "is_zero_result": 1,
                    "less_than_or_equal": 1,
                    "overflow_carry": 1,
                    "temp_14": 2,
                    "var14": 1
                },
                "bVar15": {
                    "b_var3": 1,
                    "boolean3": 1,
                    "carry_flag": 1,
                    "condition_2": 1,
                    "condition_3": 1,
                    "flag": 1,
                    "flag3": 2,
                    "flag_3": 2,
                    "is_carry": 2,
                    "is_carry_set": 1,
                    "is_condition3_met": 1,
                    "is_negative": 4,
                    "is_negative_result": 1,
                    "is_shift_negative": 1,
                    "negative_difference": 1,
                    "overflow": 1,
                    "overflow_condition": 1,
                    "overflow_flag": 1,
                    "sign_flag": 1,
                    "temp_15": 2,
                    "var15": 1
                },
                "bVar2": {
                    "bit_set": 1,
                    "carry": 8,
                    "carry_1": 1,
                    "carry_bit": 6,
                    "carry_flag": 1,
                    "temp1_lsb": 1,
                    "temp_2": 2,
                    "var2": 1
                },
                "iVar1": {
                    "bit_shift1": 2,
                    "d_shift_negative": 1,
                    "d_shifted_signed": 1,
                    "left_shifted_input2": 1,
                    "result_1": 1,
                    "shift": 1,
                    "shift_1": 1,
                    "shift_amount2": 1,
                    "shift_right1": 2,
                    "shifted3_count": 1,
                    "shifted_4_count": 1,
                    "shifted_b": 1,
                    "shifted_input2": 1,
                    "shifted_input4_divided": 1,
                    "shifted_input_2": 1,
                    "shifted_num2": 1,
                    "shifted_sum_2": 1,
                    "shifted_value_2": 1,
                    "temp1": 1,
                    "temp_1": 2,
                    "var1": 1
                },
                "iVar6": {
                    "bit_check": 1,
                    "bit_shift2": 2,
                    "i_var6": 1,
                    "left_shifted_input4": 1,
                    "result_2": 1,
                    "shift1": 1,
                    "shift2": 1,
                    "shift_2": 1,
                    "shift_amount1": 2,
                    "shift_amount_2": 1,
                    "shift_count1": 1,
                    "shift_count_1": 1,
                    "shift_left_count": 1,
                    "shift_right2": 2,
                    "shifted1": 1,
                    "shifted_2_count": 1,
                    "shifted_d": 1,
                    "shifted_input2_divided": 1,
                    "shifted_input4": 1,
                    "shifted_input_4": 1,
                    "shifted_num4": 1,
                    "shifted_value_4": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_4": 1,
                    "temp_6": 2,
                    "var6": 1
                },
                "param_1": {
                    "a": 4,
                    "input1": 15,
                    "input_1": 9,
                    "num1": 1,
                    "operand1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "b": 4,
                    "input2": 15,
                    "input_2": 9,
                    "num2": 1,
                    "operand2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "c": 4,
                    "input3": 14,
                    "input_3": 9,
                    "num3": 1,
                    "operand3": 1,
                    "u3": 1,
                    "value_3": 1
                },
                "param_4": {
                    "d": 4,
                    "input4": 14,
                    "input_4": 9,
                    "num4": 1,
                    "operand4": 1,
                    "u1": 1,
                    "value_4": 1
                },
                "uCARRY4": {
                    "carry_bit_check": 1
                },
                "uVar10": {
                    "difference": 6,
                    "result2": 1,
                    "result6": 1,
                    "result_4": 1,
                    "result_low_temp": 1,
                    "shifted_b": 1,
                    "shifted_input3": 1,
                    "shifted_result4": 2,
                    "shifted_temp2": 1,
                    "sum_lower": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_10": 2,
                    "temp_7": 1,
                    "temp_8": 1,
                    "u_var10": 2,
                    "u_var7": 1,
                    "var10": 1,
                    "var3": 1
                },
                "uVar11": {
                    "bit_check": 1,
                    "carry_bit": 1,
                    "overflow_right_shifted_diff": 1,
                    "result": 1,
                    "result3": 1,
                    "result7": 1,
                    "result_lower": 1,
                    "shifted_result1": 1,
                    "shifted_temp3": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 3,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_1": 1,
                    "temp_11": 2,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_8": 1,
                    "temp_9": 1,
                    "temp_bit": 1,
                    "temp_result_shifted": 1,
                    "u_var11": 1,
                    "var11": 1
                },
                "uVar12": {
                    "carry": 1,
                    "result4": 1,
                    "result8": 1,
                    "result_low": 1,
                    "shifted_input_4": 1,
                    "shifted_result3": 1,
                    "sum_upper": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp6": 3,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_10": 1,
                    "temp_12": 2,
                    "temp_2": 1,
                    "temp_4": 1,
                    "temp_5": 1,
                    "temp_9": 1,
                    "temp_result": 3,
                    "u_var12": 2,
                    "u_var8": 1,
                    "var12": 1
                },
                "uVar13": {
                    "check1": 1,
                    "result2": 1
                },
                "uVar14": {
                    "check2": 1
                },
                "uVar15": {
                    "check3": 1
                },
                "uVar3": {
                    "result1": 4,
                    "result_low_part": 1,
                    "shifted2": 1,
                    "sum": 2,
                    "sum1": 1,
                    "sum_1": 2,
                    "sum_lower": 1,
                    "temp1": 10,
                    "temp2_upper": 1,
                    "temp_1": 5,
                    "temp_3": 2,
                    "var3": 1
                },
                "uVar4": {
                    "carry": 1,
                    "result2": 4,
                    "result_high_part": 1,
                    "shifted4": 1,
                    "shifted_sum_2": 1,
                    "sum2": 1,
                    "sum_2": 1,
                    "sum_middle": 1,
                    "temp": 1,
                    "temp2": 10,
                    "temp2_lower": 1,
                    "temp_2": 5,
                    "temp_4": 2,
                    "var4": 1
                },
                "uVar5": {
                    "a": 1,
                    "input2_masked": 1,
                    "result2": 1,
                    "result3": 3,
                    "shifted_input_2": 1,
                    "shifted_sum_1": 1,
                    "temp1": 3,
                    "temp2": 2,
                    "temp3": 7,
                    "temp_1": 1,
                    "temp_3": 3,
                    "temp_5": 2,
                    "temp_input_2": 1,
                    "temp_result_upper": 1,
                    "u_var5": 1,
                    "var2": 1,
                    "var5": 1
                },
                "uVar7": {
                    "b_shift": 1,
                    "bitwise_and": 1,
                    "input2_shifted": 1,
                    "shift_left1": 1,
                    "shifted2": 1,
                    "shifted_2": 1,
                    "shifted_b": 1,
                    "shifted_diff": 1,
                    "shifted_input2": 5,
                    "shifted_input_2": 4,
                    "shifted_operand2": 1,
                    "shifted_value_2": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_4": 1,
                    "temp_5": 1,
                    "temp_7": 2,
                    "temp_result_lower": 1,
                    "var1": 1,
                    "var7": 1
                },
                "uVar8": {
                    "a_updated": 1,
                    "input1_masked": 1,
                    "is_negative": 1,
                    "result": 1,
                    "result4": 1,
                    "shift_amount_1": 1,
                    "shift_left2": 1,
                    "shifted_d": 1,
                    "shifted_input1": 1,
                    "shifted_input4": 3,
                    "shifted_input_4": 2,
                    "shifted_operand4": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_5": 1,
                    "temp_6": 1,
                    "temp_8": 2,
                    "temp_input_1": 1,
                    "u1": 1,
                    "var1": 1,
                    "var2": 1,
                    "var8": 1
                },
                "uVar9": {
                    "a": 1,
                    "b_updated": 1,
                    "input4_shifted": 1,
                    "result1": 2,
                    "result5": 1,
                    "result_3": 1,
                    "result_high_temp": 1,
                    "shifted3": 1,
                    "shifted_4": 1,
                    "shifted_d": 1,
                    "shifted_input4": 2,
                    "shifted_input_1": 1,
                    "shifted_input_4": 2,
                    "shifted_result2": 2,
                    "shifted_temp1": 1,
                    "shifted_value_4": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_6": 1,
                    "temp_7": 1,
                    "temp_9": 2,
                    "u_var9": 1,
                    "var9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838"
            ],
            "code": "\nulonglong calculate_result_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int bit_shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift_amount1;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint shifted_result2;\n  uint difference;\n  uint temp5;\n  uint temp_result;\n  bool is_equal;\n  bool is_equal;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_result2 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_equal = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_equal = (shifted_input2 | input1) == 0;\n  }\n  if (!is_equal) {\n    is_equal = (shifted_result2 | input3) == 0;\n  }\n  shift_amount1 = (int)shifted_input2 >> 0x15;\n  if (!is_equal) {\n    is_equal = shift_amount1 == -1;\n  }\n  bit_shift1 = (int)shifted_result2 >> 0x15;\n  if (!is_equal) {\n    is_equal = bit_shift1 == -1;\n  }\n  if (is_equal) {\n    if (shift_amount1 == -1 || bit_shift1 == -1) {\n      shifted_result2 = input4;\n      shifted_input2 = input3;\n      if (shift_amount1 == -1) {\n        shifted_result2 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift_amount1 != -1 || bit_shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_result2;\n      }\n      is_equal = (shifted_input2 | shifted_result2 << 0xc) == 0;\n      if (is_equal) {\n        is_equal = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_result2 == input4;\n      }\n      if (!is_equal) {\n        shifted_result2 = shifted_result2 | 0x80000;\n      }\n      return CONCAT44(shifted_result2,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_equal = (input1 & 0x80000000) != 0;\n      shifted_result2 = input2 * 2 + (uint)is_equal;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_equal)) {\n        shifted_result2 = shifted_result2 | 0x80000000;\n      }\n      return CONCAT44(shifted_result2,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_result2 = shifted_result2 >> 0x15;\n  difference = shifted_result2 - shifted_input2;\n  is_equal = difference != 0;\n  if (shifted_result2 < shifted_input2) {\n    difference = -difference;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_equal && shifted_input2 <= shifted_result2) {\n    shifted_input2 = shifted_input2 + difference;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  shifted_result2 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_equal = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    shifted_result2 = -shifted_result2 - (uint)is_equal;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_equal = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_equal;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_result2 = shifted_result2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp_result = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp5 = input3 << (temp_result & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (temp_result & 0xff);\n    temp_result = temp1 + temp2;\n    shifted_result2 = shifted_result2 + CARRY4(shifted_input4,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp5 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp5 = temp5 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp_result = shifted_input4 + temp3;\n    shifted_result2 = shifted_result2 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_input4,temp3);\n  }\n  input2 = shifted_result2 & 0x80000000;\n  difference = shifted_result2;\n  if ((int)shifted_result2 < 0) {\n    is_equal = temp5 == 0;\n    temp5 = -temp5;\n    difference = -temp_result;\n    temp_result = -(uint)!is_equal - temp_result;\n    difference = -(uint)(is_equal <= difference) - shifted_result2;\n  }\n  if (0xfffff < difference) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_result2 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp_result;\n      temp_result = (uint)(shifted_result2 != 0) << 0x1f | temp_result >> 1;\n      temp5 = (uint)(carry & 1) << 0x1f | temp5 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    is_equal = 0x7fffffff < temp5;\n    if (temp5 == 0x80000000) {\n      is_equal = (temp_result & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input4 * 0x100000 + (uint)CARRY4(temp_result,(uint)is_equal) | input2,\n                    temp_result + is_equal);\n  }\n  is_equal = (temp5 & 0x80000000) != 0;\n  temp5 = temp5 << 1;\n  shifted_input4 = temp_result * 2;\n  is_equal = CARRY4(temp_result,temp_result);\n  temp_result = temp_result * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_equal || CARRY4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  temp3 = temp_result;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = temp_result;\n  }\n  shift_amount1 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift_amount1 = shift_amount1 + 0x20;\n  }\n  temp_result = shift_amount1 - 0xb;\n  is_negative = SBORROW4(temp_result,0x20);\n  difference = shift_amount1 - 0x2b;\n  is_equal = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)temp_result < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift_amount1 = shift_amount1 + -0x1f;\n    is_equal = shift_amount1 < 0;\n    is_equal = shift_amount1 == 0;\n    difference = temp_result;\n    if (!is_equal && is_equal == is_negative) {\n      temp3 = shifted_input2 << (temp_result & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift_amount1 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_equal || is_equal != is_negative) {\n    temp5 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_equal != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp5 & 0xff);\n  }\n  if (is_equal || is_equal != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)temp_result <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - temp_result) * 0x100000 | input2,temp3);\n  }\n  difference = ~(shifted_input4 - temp_result);\n  if ((int)difference < 0x1f) {\n    shift_amount1 = difference - 0x13;\n    if (shift_amount1 != 0 && shift_amount1 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_result2,temp3 >> (0x20 - (0xcU - shift_amount1) & 0xff) | shifted_input2 << (0xcU - shift_amount1 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_result2,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_0800015c",
            "entrypoint": "0x0800015c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800015c": "calculate_result_0800015c",
                "bVar13": "is_equal",
                "bVar14": "is_equal",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "bit_shift1",
                "iVar6": "shift_amount1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "temp5",
                "uVar12": "temp_result",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "shifted_result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003d4": {
            "additional_data": {
                "0U": {
                    "zero": 1
                },
                "0x13": {
                    "constant": 1
                },
                "0x15": {
                    "21": 1
                },
                "0x1e": {
                    "limit": 1
                },
                "0x20": {
                    "32": 1
                },
                "0x432": {
                    "1074": 1,
                    "shift_threshold": 1
                },
                "0xc": {
                    "12": 1
                },
                "0xcU": {
                    "bit_length": 1
                },
                "CONCAT44": {
                    "combine": 1,
                    "combine_numbers": 1,
                    "concatenate_64bit": 1
                },
                "FUN_080003d4": {
                    "bit_shift_and_concat": 1,
                    "bitwise_shift": 5,
                    "bitwise_shift_and_concat": 1,
                    "convert_number": 1,
                    "convert_to_uint64": 1,
                    "reverse_bits": 9,
                    "reverse_shift": 1,
                    "shift_and_combine": 1,
                    "shift_and_combine_bits": 1,
                    "shift_and_concat": 1,
                    "shift_and_concatenate": 7,
                    "shift_and_concatenate_bits": 1
                },
                "LAB_080002e0": {
                    "after_shift_label": 1,
                    "calculate": 1,
                    "end_label": 2,
                    "perform_shift": 1,
                    "shift_and_return_result": 1,
                    "shift_complete": 1,
                    "shift_label": 1,
                    "shift_labels": 1,
                    "shift_operations": 1
                },
                "LZCOUNT": {
                    "leading_zeros_count": 1
                },
                "SCARRY4": {
                    "signed_subtraction_carry": 1
                },
                "bVar5": {
                    "is_negative": 28,
                    "is_negative_shift": 2,
                    "is_zero_or_negative_shift": 1
                },
                "bVar6": {
                    "is_zero": 27,
                    "is_zero_shift": 4
                },
                "bVar7": {
                    "borrow": 1,
                    "has_carry": 2,
                    "has_overflow": 3,
                    "is_adjusted_negative": 1,
                    "is_carry": 8,
                    "is_greater": 1,
                    "is_negative_overflow": 1,
                    "is_overflow": 4,
                    "is_overflowed": 1,
                    "is_subtracted": 1,
                    "is_subtraction": 1,
                    "is_subtraction_borrow": 1,
                    "is_subtraction_overflow": 1,
                    "overflow": 3,
                    "overflow_check": 1,
                    "overflow_flag": 1
                },
                "iVar3": {
                    "bit_count": 5,
                    "count": 7,
                    "leading_zeroes": 1,
                    "leading_zeros": 13,
                    "lzcount_result": 3,
                    "num_bits": 1,
                    "number_of_leading_zeros": 1
                },
                "in_r12": {
                    "const1": 1,
                    "in_r12": 1,
                    "mask": 2,
                    "num_bits_remaining": 1,
                    "remainder": 2,
                    "remaining_bits": 14,
                    "remaining_bits_after_shift": 1,
                    "remaining_shift": 1,
                    "shift_diff": 1,
                    "shift_difference": 1,
                    "shift_mask": 1,
                    "shift_value": 1,
                    "shifted_value1": 1,
                    "temp": 3
                },
                "param_1": {
                    "input": 22,
                    "input_number": 1,
                    "input_value": 7,
                    "number": 1
                },
                "uVar1": {
                    "combined_upper": 1,
                    "concatenated_value": 3,
                    "lower_bits": 1,
                    "lower_part": 1,
                    "output": 1,
                    "output1": 2,
                    "output_high": 1,
                    "output_value": 1,
                    "result": 6,
                    "result1": 4,
                    "result64": 1,
                    "result_high": 1,
                    "result_low": 1,
                    "result_upper": 1,
                    "shifted_input_high": 1,
                    "shifted_part": 1,
                    "shifted_result_upper": 1,
                    "shifted_value": 1,
                    "upper_bits": 2
                },
                "uVar2": {
                    "bit_count": 1,
                    "combined_lower": 1,
                    "lower_bits": 1,
                    "output2": 1,
                    "result2": 4,
                    "shift": 2,
                    "shift_amount": 14,
                    "shift_bits": 1,
                    "temp": 1
                },
                "uVar4": {
                    "added_value": 1,
                    "adjusted_leading_zeros": 1,
                    "adjusted_shift": 1,
                    "modified_shift": 1,
                    "offset": 1,
                    "shift": 2,
                    "shift_amount": 12,
                    "shift_count": 2,
                    "shift_limit": 1,
                    "shift_plus_constant": 1,
                    "shift_threshold": 1,
                    "shifted_amount": 1,
                    "shifted_count": 1,
                    "shifted_input_low": 1,
                    "shifted_result_lower": 1,
                    "total_bits": 2,
                    "total_shift": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nulonglong reverse_bits_080003d4(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  leading_zeros = leading_zeros_count(input);\n  shift_amount = leading_zeros + 0x15;\n  is_carry = SBORROW4(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_carry = signed_subtraction_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_carry == false) {\n      result = input << shift_amount;\n      input = input >> (bit_length - (leading_zeros + 1) & 0xff);\n      goto end_label;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    input = input | zero >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nend_label:\n  if (shift_amount < 0x433) {\n    return concatenate_64bit(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != signed_subtraction_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate_64bit(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (bit_length - leading_zeros) & 0xff) | input << (bit_length - leading_zeros & 0xff));\n}\n\n",
            "current_name": "reverse_bits_080003d4",
            "entrypoint": "0x080003d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zero",
                "0xcU": "bit_length",
                "CONCAT44": "concatenate_64bit",
                "FUN_080003d4": "reverse_bits_080003d4",
                "LAB_080002e0": "end_label",
                "LZCOUNT": "leading_zeros_count",
                "SCARRY4": "signed_subtraction_carry",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_carry",
                "iVar3": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003f4": {
            "additional_data": {
                "0x100000": {
                    "shift_by_20": 1
                },
                "0x13": {
                    "limit_2": 1
                },
                "0x15": {
                    "shift_const": 1
                },
                "0x1e": {
                    "limit_1": 1
                },
                "0x20": {
                    "bits_in_unsigned_int": 1,
                    "bits_per_uint": 1
                },
                "0x432": {
                    "max_shift_value": 1
                },
                "0x80000000": {
                    "max_unsigned_int": 1,
                    "sign_mask": 1
                },
                "0xc": {
                    "shift_amount": 1
                },
                "CONCAT44": {
                    "combine": 1
                },
                "FUN_080003f4": {
                    "bitwise_shift": 2,
                    "bitwise_shift_with_overflow_handling": 1,
                    "calculate_hash": 1,
                    "convert_unsigned_int_to_unsigned_long_long": 1,
                    "reverse_and_shift": 1,
                    "reverse_and_shift_bits": 2,
                    "reverse_bit_concatenation": 1,
                    "reverse_bits": 21
                },
                "LAB_080002e0": {
                    "bit_shift_end": 1,
                    "end_shift": 1,
                    "shift_left": 1
                },
                "LZCOUNT": {
                    "count_leading_zeroes": 1,
                    "leading_zero_bits": 1,
                    "leading_zeros_count": 1
                },
                "Param_1": {
                    "input": 1
                },
                "SCARRY4": {
                    "is_subtraction_carry": 1,
                    "signed_carry_4": 1
                },
                "bVar7": {
                    "is_less_than_zero": 1,
                    "is_negative": 19,
                    "is_negative_case1": 1,
                    "is_negative_shift": 1,
                    "is_positive": 1,
                    "leading_zero_negative": 1,
                    "leading_zeros_negative": 2,
                    "less_than_zero": 1,
                    "negative_shift": 1,
                    "positive_count": 1,
                    "shift_is_negative": 1
                },
                "bVar8": {
                    "is_equal_zero": 1,
                    "is_zero": 23,
                    "is_zero_shift": 1,
                    "leading_zero_zero": 1,
                    "leading_zeros_zero": 2,
                    "shift_is_zero": 1,
                    "zero_shift": 1
                },
                "bVar9": {
                    "carry": 1,
                    "carry_bit": 1,
                    "carry_flag": 3,
                    "carry_overflow": 1,
                    "is_carry": 8,
                    "is_negative": 1,
                    "is_negative_case2": 1,
                    "is_negative_overflow": 1,
                    "is_overflow": 3,
                    "is_signed_overflow": 1,
                    "leading_zero_negative_overflow": 1,
                    "leading_zeros_carry": 1,
                    "leading_zeros_overflow": 1,
                    "need_logical_shift": 1,
                    "needs_masking": 1,
                    "overflow": 2,
                    "overflow_flag": 1,
                    "shift_carry": 1
                },
                "iVar4": {
                    "bit_count": 2,
                    "count": 1,
                    "leading_zero_count": 2,
                    "leading_zeroes": 5,
                    "leading_zeros": 20,
                    "temp3": 1
                },
                "iVar4_1": {
                    "leading_zeroes": 1
                },
                "in_r12": {
                    "bit_width": 1,
                    "bits_to_shift": 1,
                    "filler_bits": 1,
                    "inverted_shift_amt": 1,
                    "mask": 1,
                    "mask_length": 1,
                    "remainder": 1,
                    "remaining_bits": 19,
                    "shift_amount": 1,
                    "shifted_sign_bit": 1,
                    "shifted_value": 1,
                    "temp": 1
                },
                "in_r12_1": {
                    "remaining_bits": 1
                },
                "newParam1": {
                    "new_param1": 1
                },
                "newVar1": {
                    "new_var1": 1
                },
                "newVar2": {
                    "new_var2": 1
                },
                "newVar3": {
                    "new_var3": 1
                },
                "param_1": {
                    "input": 24,
                    "input_value": 3,
                    "num": 1,
                    "number": 2,
                    "value": 1
                },
                "uVar1": {
                    "bit_count": 3,
                    "bit_count_offset": 1,
                    "bits_count": 1,
                    "count": 2,
                    "count_set_bits": 1,
                    "leading_zeros": 1,
                    "modified_bits": 1,
                    "output": 1,
                    "output1": 1,
                    "output_high": 1,
                    "result": 7,
                    "result1": 2,
                    "result_high": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_result": 1,
                    "shifted_bits": 1,
                    "shifted_left_value": 1,
                    "shifted_value": 3
                },
                "uVar1_1": {
                    "result": 1
                },
                "uVar2": {
                    "abs_input": 13,
                    "abs_num": 1,
                    "abs_number": 2,
                    "abs_value": 3,
                    "absolute_input": 1,
                    "absolute_value": 3,
                    "result": 1,
                    "rotated_value": 1,
                    "temp": 1,
                    "temp1": 3,
                    "temp_1": 1,
                    "temp_var": 1
                },
                "uVar2_1": {
                    "abs_input": 1
                },
                "uVar3": {
                    "bit_offset": 1,
                    "effective_shift": 1,
                    "positive_shift": 1,
                    "remaining_bits": 1,
                    "right_shift": 1,
                    "shift": 4,
                    "shift_amount": 14,
                    "shift_count": 1,
                    "shifted_bits": 1,
                    "shifted_count": 1,
                    "temp": 1,
                    "temp2": 3
                },
                "uVar3_1": {
                    "effective_shift": 1
                },
                "uVar5": {
                    "adjusted_bit_count": 1,
                    "adjusted_count": 3,
                    "adjusted_shift": 3,
                    "bit_count": 1,
                    "computed_shift": 1,
                    "final_shift_amount": 1,
                    "mask": 1,
                    "shift": 1,
                    "shift_amount": 2,
                    "shift_amt1": 2,
                    "shifted_amount": 1,
                    "shifted_bits": 1,
                    "shifted_bits_minus_b": 1,
                    "shifted_leading_zeros": 1,
                    "shifted_result": 1,
                    "temp": 1,
                    "total_bits": 6,
                    "total_shift": 3
                },
                "uVar5_1": {
                    "shift_amount": 1
                },
                "uVar6": {
                    "combined_bits": 1,
                    "concatenated_bits": 1,
                    "is_negative": 2,
                    "sign": 2,
                    "sign_bit": 25
                },
                "uVar6_1": {
                    "sign_bit": 1
                },
                "uVar9": {
                    "result2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong reverse_and_shift_bits_080003f4(uint input)\n\n{\n  uint result;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  result = 0;\n  leading_zeros = leading_zero_bits(abs_input);\n  total_bits = leading_zeros + 0x15;\n  is_carry = SBORROW4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_carry = is_subtraction_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_carry == false) {\n      result = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto end_shift;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nend_shift:\n  if (total_bits < 0x433) {\n    return combine(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return combine(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != is_subtraction_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine(sign_bit | abs_input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return combine(input,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_and_shift_bits_080003f4",
            "entrypoint": "0x080003f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine",
                "FUN_080003f4": "reverse_and_shift_bits_080003f4",
                "LAB_080002e0": "end_shift",
                "LZCOUNT": "leading_zero_bits",
                "SCARRY4": "is_subtraction_carry",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000418": {
            "additional_data": {
                "FUN_08000418": {
                    "calculate_shifted_value": 1,
                    "convert_bytes_to_u_int64": 1,
                    "convert_to64bit": 1,
                    "decode_flags": 1,
                    "decode_integer": 1,
                    "decode_value": 1,
                    "extract_and_shift_bits": 1,
                    "reverse_bit_pattern": 2,
                    "reverse_bits": 19,
                    "reverse_unsigned_long_long": 1
                },
                "bVar10": {
                    "carry": 2,
                    "carry_flag": 1,
                    "carry_overflow": 1,
                    "check_upper_bytes": 1,
                    "flag3": 1,
                    "is_carry": 2,
                    "is_greater_or_equal": 1,
                    "is_leading_zeros_negative": 1,
                    "is_less_than": 1,
                    "is_lesser31": 1,
                    "is_negative": 3,
                    "is_negative_input": 1,
                    "is_negative_shift": 3,
                    "is_out_range": 1,
                    "is_overflow": 1,
                    "is_positive": 1,
                    "is_result_negative": 1,
                    "is_shift_amount_all_ones": 1,
                    "is_shift_negative": 1,
                    "is_shift_right": 1,
                    "is_shifted": 1,
                    "shift_to_left": 1,
                    "temp_bool": 1,
                    "var3": 1
                },
                "bVar8": {
                    "carry": 2,
                    "conditionally_shift": 1,
                    "flag1": 1,
                    "is_counter_zero": 1,
                    "is_equal": 1,
                    "is_negative": 8,
                    "is_negative_count": 1,
                    "is_negative_shift": 1,
                    "is_negative_shift_amount": 1,
                    "is_output_signed": 1,
                    "is_shift_right": 1,
                    "is_shift_zero": 2,
                    "is_zero": 3,
                    "is_zero_shift": 4,
                    "no_shift_needed": 1,
                    "var1": 1
                },
                "bVar9": {
                    "check_mask_bits": 1,
                    "check_upper_bytes": 1,
                    "flag2": 1,
                    "has_zero_byte": 1,
                    "is_data_size_zero": 1,
                    "is_equal": 2,
                    "is_ff000000": 2,
                    "is_flag_zero": 1,
                    "is_full_mask": 1,
                    "is_input_value_all_ones": 1,
                    "is_leading_zeros_zero": 1,
                    "is_mask_zero": 2,
                    "is_masked": 2,
                    "is_value_zero": 1,
                    "is_zero": 8,
                    "is_zero_input": 1,
                    "is_zero_mask": 2,
                    "var2": 1
                },
                "bitCount": {
                    "bit_count": 1
                },
                "checkMaskBits": {
                    "check_mask_bits": 1
                },
                "highBitMask": {
                    "high_bit_mask": 1
                },
                "iVar6": {
                    "bit_count": 6,
                    "bit_position": 1,
                    "count": 10,
                    "counter": 1,
                    "leading_zeros": 4,
                    "lz_count": 1,
                    "lzcount": 1,
                    "num_bits": 1,
                    "num_leading_zeros": 1,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "trailing_zeros": 1
                },
                "in_r12": {
                    "adjustment": 1,
                    "alignment": 1,
                    "carry_shift": 1,
                    "constant": 2,
                    "constant_value": 1,
                    "remainder": 2,
                    "remaining": 1,
                    "remaining_bits": 12,
                    "shift_amount": 1,
                    "shifted_bits": 1,
                    "shifted_mask": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_value": 1,
                    "temp_variable": 1,
                    "unused_var4": 1
                },
                "mask": {
                    "mask": 1
                },
                "new_variable_name": {
                    "old_variable_name": 1
                },
                "noShiftNeeded": {
                    "no_shift_needed": 1
                },
                "output": {
                    "output": 1
                },
                "param_1": {
                    "flags": 1,
                    "input": 26,
                    "input_value": 3,
                    "value": 1
                },
                "param_2": {
                    "param2": 4,
                    "param_2": 2,
                    "param_a": 1,
                    "unused": 3,
                    "unused1": 3,
                    "unused_1": 1,
                    "unused_param": 1,
                    "unused_param2": 1,
                    "unused_var": 1,
                    "var2": 1
                },
                "param_3": {
                    "param3": 4,
                    "param_3": 2,
                    "param_b": 1,
                    "unused": 3,
                    "unused2": 3,
                    "unused_2": 1,
                    "unused_param": 1,
                    "unused_param3": 1,
                    "unused_var2": 1,
                    "var3": 1
                },
                "param_4": {
                    "check_value": 2,
                    "data_size": 1,
                    "flag": 2,
                    "mask": 14,
                    "param4": 1,
                    "param_4": 2,
                    "param_c": 1,
                    "unused": 1,
                    "unused3": 3,
                    "unused_3": 1,
                    "unused_param": 1,
                    "unused_param4": 1,
                    "unused_var3": 1
                },
                "remainder": {
                    "remainder": 1
                },
                "shiftAmount": {
                    "shift_amount": 1
                },
                "shiftToLeft": {
                    "shift_to_left": 1
                },
                "shiftedInput": {
                    "shifted_input": 1
                },
                "temp1": {
                    "temp1": 1
                },
                "temp2": {
                    "temp2": 1
                },
                "uVar1": {
                    "bit30": 1,
                    "bit31": 4,
                    "bit31_shifted": 1,
                    "high_bit": 1,
                    "high_bit_mask": 2,
                    "msb": 2,
                    "msb_flag": 2,
                    "msb_mask": 2,
                    "msb_set": 1,
                    "msb_shifted": 1,
                    "shifted_bit": 1,
                    "shifted_sign_bit": 1,
                    "sign_bit": 6,
                    "sign_extension": 2,
                    "sign_flag": 1,
                    "sign_mask": 2,
                    "upper_bit": 1
                },
                "uVar2": {
                    "output": 2,
                    "output0": 1,
                    "output_front": 1,
                    "output_hi": 1,
                    "result": 1,
                    "result_high": 1,
                    "shifted_input": 2,
                    "shifted_input_value": 1,
                    "temp": 9,
                    "temp1": 4,
                    "temp_val": 1,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "upper_bits": 1,
                    "value_right": 1,
                    "var2": 1
                },
                "uVar3": {
                    "bit_mask": 1,
                    "high_bits": 1,
                    "output": 3,
                    "output1": 2,
                    "output_hi_mask": 1,
                    "output_high": 1,
                    "result": 12,
                    "result1": 2,
                    "result_high": 2,
                    "result_high_updated": 1,
                    "result_msb": 1,
                    "result_part1": 1,
                    "result_right": 1,
                    "result_upper": 1,
                    "shifted_mask": 1
                },
                "uVar4": {
                    "msb": 1,
                    "shift": 2,
                    "shift_amount": 5,
                    "shift_amount1": 1,
                    "shift_count": 1,
                    "shifted": 4,
                    "shifted_bit_count": 1,
                    "shifted_data_size": 1,
                    "shifted_flags": 1,
                    "shifted_input": 7,
                    "shifted_input_div8": 1,
                    "shifted_input_value": 1,
                    "shifted_val": 1,
                    "shifted_value": 2,
                    "temp2": 1
                },
                "uVar5": {
                    "bit_count": 1,
                    "input_copy": 1,
                    "result_low": 1,
                    "shift_amount2": 1,
                    "shifted2": 1,
                    "shifted_input": 8,
                    "shifted_input2": 1,
                    "shifted_input_2": 1,
                    "shifted_input_value2": 1,
                    "shifted_input_value_updated": 1,
                    "shifted_mask": 1,
                    "temp": 3,
                    "temp2": 5,
                    "temp_value": 2,
                    "temp_var2": 1,
                    "tmp": 1,
                    "u_var5": 1
                },
                "uVar7": {
                    "adjusted_bit_count": 2,
                    "adjusted_count": 1,
                    "bit_difference": 1,
                    "diff": 2,
                    "shift_amount": 11,
                    "shift_count": 2,
                    "shift_value": 1,
                    "shifted": 1,
                    "shifted_bits": 1,
                    "shifted_count": 1,
                    "shifted_input_value_minus_shift_amount": 1,
                    "shifted_leading_zeros": 1,
                    "shifted_mask": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp_shifted_value": 1,
                    "trailing_zeros": 1,
                    "var7": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "code": "\nulonglong reverse_bits_08000418(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint sign_bit;\n  uint temp;\n  uint result;\n  uint shifted_input;\n  uint shifted_input;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input = input << 1;\n  is_zero = shifted_input == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_input >> 3) >> 1;\n  result = sign_bit | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = shifted_input & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp = input;\n  shifted_input = shifted_input;\n  if (shifted_input == 0) {\n    temp = 0;\n    shifted_input = input;\n  }\n  count = LZCOUNT(shifted_input);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  is_negative = SBORROW4(shift_amount,0x20);\n  shifted_input = count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_negative = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = SCARRY4(shifted_input,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_negative = count == 0;\n    shifted_input = shift_amount;\n    if (!is_negative && is_zero == is_negative) {\n      temp = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_negative || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  shifted_input = shifted_input << (shifted_input & 0xff);\n  if (is_negative || is_zero != is_negative) {\n    shifted_input = shifted_input | temp >> (remaining_bits & 0xff);\n  }\n  if (is_negative || is_zero != is_negative) {\n    temp = temp << (shifted_input & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(shifted_input + (0x380 - shift_amount) * 0x100000 | sign_bit,temp);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result,shifted_input >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shifted_input - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(sign_bit | shifted_input >> (shifted_input & 0xff),\n                    temp >> (shifted_input & 0xff) | shifted_input << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,temp >> (0x20 - (0xcU - count) & 0xff) | shifted_input << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08000418",
            "entrypoint": "0x08000418",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000418": "reverse_bits_08000418",
                "bVar10": "is_negative",
                "bVar8": "is_negative",
                "bVar9": "is_zero",
                "iVar6": "count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "sign_bit",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "shifted_input",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004c8": {
            "additional_data": {
                "FUN_080004c8": {
                    "calculate": 1,
                    "calculate_exponent": 1,
                    "calculate_floating_point": 2,
                    "calculate_product": 5,
                    "calculate_result": 13,
                    "calculate_sum": 2,
                    "multiply_and_shift": 1,
                    "perform_calculation": 1
                },
                "bVar10": {
                    "bool_op2": 1,
                    "carry_flag": 1,
                    "check2": 1,
                    "condition2": 3,
                    "flag2": 15,
                    "flag_2": 1,
                    "is_condition_true2": 1,
                    "is_less": 1,
                    "is_negative": 2,
                    "is_negative1": 1,
                    "is_overflow": 1,
                    "temp_bool2": 1,
                    "temp_flag2": 1
                },
                "bVar11": {
                    "bool_op3": 1,
                    "borrow": 1,
                    "check3": 1,
                    "condition3": 3,
                    "flag3": 15,
                    "flag_3": 1,
                    "is_borrow": 1,
                    "is_condition_true3": 1,
                    "is_negative": 1,
                    "is_negative2": 1,
                    "is_overflow": 1,
                    "signed_flag": 1,
                    "temp_bool3": 1,
                    "temp_flag3": 1
                },
                "bVar9": {
                    "bool_op1": 1,
                    "check1": 1,
                    "condition1": 3,
                    "flag1": 15,
                    "flag_1": 1,
                    "is_condition_true1": 1,
                    "is_variable": 1,
                    "is_zero": 5,
                    "temp_bool1": 1,
                    "temp_flag1": 1
                },
                "iVar5": {
                    "exponent_sum": 1,
                    "result5": 1,
                    "sum": 6,
                    "temp3": 13,
                    "temp5": 5,
                    "temp_var3": 1,
                    "temp_var_4": 1,
                    "var3": 1
                },
                "lVar2": {
                    "product": 2,
                    "result2": 15,
                    "result_high": 1,
                    "temp": 1,
                    "temp2": 5,
                    "temp_result": 1,
                    "temp_var": 4,
                    "tmp": 1
                },
                "param_1": {
                    "a": 2,
                    "input1": 21,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value1": 1,
                    "sign": 2,
                    "value1": 3
                },
                "param_2": {
                    "b": 2,
                    "exponent_bits": 2,
                    "input2": 21,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "value2": 3
                },
                "param_3": {
                    "c": 2,
                    "input3": 21,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_value3": 1,
                    "mantissa_bits": 1,
                    "significand_bits": 1,
                    "value3": 3
                },
                "param_4": {
                    "control_bits": 1,
                    "d": 2,
                    "float_bits": 1,
                    "input4": 21,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_value4": 1,
                    "value4": 3
                },
                "uVar1": {
                    "high_product": 1,
                    "product": 1,
                    "result": 6,
                    "result1": 15,
                    "result_low": 1,
                    "significand": 1,
                    "temp1": 5
                },
                "uVar12": {
                    "combined": 1,
                    "combined_input": 11,
                    "combined_input_params": 1,
                    "combined_inputs": 2,
                    "combined_result": 1,
                    "combined_values": 1,
                    "concat_result": 1,
                    "concatenated_result": 1,
                    "concatenated_value": 2,
                    "concatenated_vars": 1,
                    "input": 1,
                    "input_mix": 1,
                    "result": 3,
                    "temp10": 1,
                    "temp8": 2
                },
                "uVar3": {
                    "bitwise_op1": 1,
                    "exponent": 2,
                    "mask1": 2,
                    "result3": 1,
                    "temp1": 14,
                    "temp1_low": 1,
                    "temp3": 5,
                    "temp_var1": 1,
                    "temp_var_2": 1,
                    "var1": 1,
                    "x": 1
                },
                "uVar4": {
                    "bitwise_op2": 1,
                    "exponent_bits_mask": 1,
                    "mask2": 2,
                    "result4": 1,
                    "temp": 1,
                    "temp1_high": 1,
                    "temp2": 14,
                    "temp4": 5,
                    "temp_var2": 1,
                    "temp_var_3": 1,
                    "var2": 1,
                    "y": 1
                },
                "uVar6": {
                    "bitwise_op3": 1,
                    "diff": 4,
                    "result6": 1,
                    "temp2_low": 1,
                    "temp3": 1,
                    "temp4": 13,
                    "temp6": 5,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var_5": 1,
                    "var4": 1
                },
                "uVar7": {
                    "bitwise_op4": 1,
                    "carry": 1,
                    "result8": 1,
                    "rounded_exponent": 1,
                    "sevenff": 1,
                    "shift_amount": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 13,
                    "temp8": 4,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "u_mask": 1,
                    "var6": 1
                },
                "uVar8": {
                    "bitwise_op5": 1,
                    "leading_bit": 1,
                    "partial_result": 1,
                    "result9": 1,
                    "rounded_control_bits": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp7": 13,
                    "temp9": 5,
                    "temp_var4": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1,
                    "var7": 1,
                    "z": 1
                },
                "unaff_r5": {
                    "control_bits_exponent": 1,
                    "mask3": 1,
                    "result7": 1,
                    "temp2_high": 1,
                    "temp4": 1,
                    "temp5": 13,
                    "temp7": 5,
                    "temp_var5": 1,
                    "u": 1,
                    "unaff_bitwise_op": 1,
                    "unaff_r5": 1,
                    "var5": 1
                }
            },
            "called": [
                "FUN_080006a4"
            ],
            "calling": [
                "FUN_08004d78",
                "FUN_080096e0",
                "FUN_080079e8",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong calculate_result_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = FUN_080006a4();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_080004c8",
            "entrypoint": "0x080004c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006a4": {
            "additional_data": {
                "FUN_080006a4": {
                    "calculate_bitwise_difference": 1,
                    "calculate_bitwise_xor": 1,
                    "calculate_checksum": 1,
                    "calculate_result": 1,
                    "calculate_shifted_value": 1,
                    "convert_to_ieee_format": 1,
                    "decode_and_convert": 1,
                    "extract_bit": 1,
                    "extract_bit_range": 1,
                    "extract_bitfield": 1,
                    "extract_bits_from_params": 1,
                    "extract_bitwise_operations": 1,
                    "reverse_and_check_bits": 1,
                    "reverse_binary": 1,
                    "reverse_bit_pattern": 1,
                    "reverse_bits": 6,
                    "reverse_bitwise_operation": 1,
                    "reverse_bitwise_operations": 1,
                    "reverse_conversion": 1,
                    "reverse_integer_operations": 1
                },
                "bVar4": {
                    "are_inputs_zero": 1,
                    "flag": 2,
                    "flag_var": 1,
                    "is_zero": 26
                },
                "in_r12": {
                    "bit5": 4,
                    "bit_5": 2,
                    "constant": 2,
                    "constant_1": 2,
                    "input_12": 1,
                    "input_register_12": 1,
                    "mask": 5,
                    "temp2": 4,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_2": 2,
                    "temp_5": 1,
                    "temp_input2": 1,
                    "temp_var5": 1,
                    "temp_var_2": 2
                },
                "param_1": {
                    "first_input": 1,
                    "input1": 14,
                    "input_1": 11,
                    "input_a": 2,
                    "input_param_1": 1,
                    "input_val_1": 1,
                    "num1": 1
                },
                "param_2": {
                    "input2": 14,
                    "input_2": 11,
                    "input_b": 2,
                    "input_param_2": 1,
                    "input_val_2": 1,
                    "num2": 1,
                    "second_input": 1
                },
                "param_3": {
                    "input3": 14,
                    "input_3": 11,
                    "input_c": 2,
                    "input_param_3": 1,
                    "input_val_3": 1,
                    "num3": 1,
                    "third_input": 1
                },
                "param_4": {
                    "fourth_input": 1,
                    "input4": 14,
                    "input_4": 11,
                    "input_d": 2,
                    "input_param_4": 1,
                    "input_val_4": 1,
                    "num4": 1
                },
                "return": {
                    "result": 1
                },
                "uVar": {
                    "temp1": 1
                },
                "uVar1": {
                    "bit1": 8,
                    "bit_1": 4,
                    "bit_31_input_1": 1,
                    "bitcheck_1": 1,
                    "carry": 1,
                    "input_1_bit": 1,
                    "shifted_param_1": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp_1": 1,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_result1": 1,
                    "temp_var1": 1,
                    "temp_var_3": 2,
                    "tmp_var_1": 1
                },
                "uVar2": {
                    "bit2": 2,
                    "bit3": 4,
                    "bit_2": 2,
                    "bit_20_in_r12_and_param_4": 1,
                    "bit_3": 2,
                    "bitcheck_2": 1,
                    "condition_2": 1,
                    "result2": 1,
                    "result_2": 1,
                    "shifted_bit2": 1,
                    "shifted_input_4": 1,
                    "shifted_param_3": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_result2": 1,
                    "temp_var3": 1,
                    "temp_var_4": 2,
                    "tmp_var_2": 1
                },
                "uVar3": {
                    "bit3": 2,
                    "bit4": 4,
                    "bit_3": 3,
                    "bit_31_input_2": 1,
                    "bit_4": 2,
                    "bitcheck_3": 1,
                    "result": 1,
                    "result1": 1,
                    "result_3": 1,
                    "shifted_param_4": 1,
                    "temp": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_4": 1,
                    "temp_5": 1,
                    "temp_result3": 1,
                    "temp_var4": 1,
                    "temp_var_5": 1,
                    "tmp_var_3": 1,
                    "updated_input2": 1
                },
                "uVar4": {
                    "shifted_value": 1
                },
                "uVar5": {
                    "shifted_bit": 1,
                    "shifted_input_2": 1
                },
                "uVar6": {
                    "result_bit": 1,
                    "u_var6": 1
                },
                "uVar7": {
                    "u_var7": 1
                },
                "uVar_1": {
                    "temp2": 1
                },
                "unaff_r4": {
                    "bit2": 5,
                    "bit_2": 2,
                    "check_var": 1,
                    "condition_1": 1,
                    "input2_temp": 1,
                    "original_r4": 1,
                    "shifted_param_2": 1,
                    "temp1": 8,
                    "temp_1": 4,
                    "temp_2": 1,
                    "temp_input1": 1,
                    "temp_var2": 1,
                    "temp_var_1": 2,
                    "unaff_input_4": 1,
                    "unaffected_r4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080004c8"
            ],
            "code": "\nulonglong reverse_and_check_bits_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit3;\n  uint bit4;\n  uint mask;\n  bool is_zero;\n  \n  bit3 = mask & input4 >> 0x14;\n  if (temp1 != mask && bit3 != mask) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      bit4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | bit4;\n      if (bit3 != 0) {\n        result CONCAT44(input2,input1);\n      }\n    }\n    do {\n      bit3 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit3 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result CONCAT44(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  bit4 = input2;\n  if (((!is_zero) && ((temp1 != mask || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit3 != mask || (input1 = input3, bit4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    result (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_and_check_bits_080006a4",
            "entrypoint": "0x080006a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080006a4": "reverse_and_check_bits_080006a4",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "return": "result",
                "uVar": "temp1",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800071c": {
            "additional_data": {
                "FUN_0800071c": {
                    "calculate": 1,
                    "calculate_double_precision_floating_point": 1,
                    "calculate_float": 5,
                    "calculate_floating_point": 10,
                    "calculate_floating_point_operation": 1,
                    "calculate_floating_point_value": 1,
                    "convert_to_double_precision": 1,
                    "decode_and_process": 1,
                    "reverse_binary_calculation": 1
                },
                "FUN_0800088a": {
                    "calculate_float_helper": 1,
                    "sub_function": 1
                },
                "bVar14": {
                    "b_var14": 1,
                    "bool1": 2,
                    "condition1": 3,
                    "condition_1": 1,
                    "flag1": 13,
                    "is_condition_true": 1,
                    "is_equal": 1,
                    "is_zero": 7,
                    "is_zero1": 1,
                    "is_zero_bits1": 1
                },
                "bVar15": {
                    "b_var15": 1,
                    "bool2": 2,
                    "condition2": 3,
                    "condition_2": 1,
                    "flag2": 13,
                    "is_condition_false": 1,
                    "is_equal": 5,
                    "is_less_than": 1,
                    "is_negative": 2,
                    "is_zero2": 1,
                    "is_zero_bits2": 1
                },
                "bVar16": {
                    "b_var16": 1,
                    "bool3": 2,
                    "carry": 1,
                    "condition3": 3,
                    "condition_3": 1,
                    "flag3": 12,
                    "flag4": 1,
                    "is_carry": 1,
                    "is_inf": 1,
                    "is_negative": 3,
                    "is_overflow": 4,
                    "overflow": 1
                },
                "iVar8": {
                    "diff": 3,
                    "diff_exp": 1,
                    "difference": 6,
                    "exponent_diff": 3,
                    "exponent_diff_abs": 1,
                    "exponent_difference": 2,
                    "i_var8": 1,
                    "temp8": 11,
                    "var8": 3
                },
                "param_1": {
                    "bit_pattern_param1": 1,
                    "first_param": 1,
                    "fractional_bits": 1,
                    "input1": 8,
                    "input_a": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "num1": 1,
                    "param1": 1,
                    "param_1": 1,
                    "sign": 8,
                    "sign_bit": 1,
                    "sign_bits": 1,
                    "value1": 3,
                    "value_bits": 1
                },
                "param_2": {
                    "bit_pattern_param2": 1,
                    "exponent": 7,
                    "exponent_bits": 3,
                    "high_bits": 1,
                    "input2": 8,
                    "input_b": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "num2": 1,
                    "param2": 1,
                    "second_param": 1,
                    "sign_and_exp_bits": 1,
                    "sign_exponent": 1,
                    "value2": 3
                },
                "param_3": {
                    "bit_pattern1": 1,
                    "bit_pattern_param3": 1,
                    "dst_exp": 1,
                    "fraction_bits": 1,
                    "guard_bits": 1,
                    "high_mantissa": 1,
                    "input3": 8,
                    "input_c": 1,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "mantissa": 2,
                    "mantissa1": 2,
                    "mantissa_bits1": 1,
                    "mantissa_high": 2,
                    "num3": 1,
                    "param3": 1,
                    "parameter1": 1,
                    "third_param": 1,
                    "value3": 3
                },
                "param_4": {
                    "bit_pattern2": 1,
                    "bit_pattern_param4": 1,
                    "fourth_param": 1,
                    "fraction_bits": 1,
                    "fraction_bits_2": 1,
                    "input4": 8,
                    "input_d": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "low_mantissa": 1,
                    "mantissa2": 3,
                    "mantissa_bits2": 1,
                    "mantissa_low": 2,
                    "num4": 1,
                    "param4": 1,
                    "parameter2": 1,
                    "second_sign_exponent": 1,
                    "src_exp": 1,
                    "value4": 3
                },
                "uVar1": {
                    "bit_mask1": 1,
                    "exponent1": 2,
                    "exponent_bit1": 1,
                    "exponent_bits_temp_1": 1,
                    "exponent_diff": 1,
                    "is_first_exponent_zero": 1,
                    "mantissa_bits": 1,
                    "remainder": 1,
                    "sign_and_exp": 1,
                    "sign_bit": 1,
                    "temp1": 15,
                    "temp_var1": 1,
                    "var1": 3,
                    "x1": 1
                },
                "uVar10": {
                    "bit_pattern1": 1,
                    "exponent1_shifted": 1,
                    "mantissa1_normalized": 1,
                    "mantissa_bits1_normalized": 1,
                    "mantissa_sum": 1,
                    "normalized_low_mantissa": 1,
                    "result2": 1,
                    "result_part2": 1,
                    "shifted_exponent2": 1,
                    "src_and_exp_bits": 1,
                    "temp10": 5,
                    "temp11": 8,
                    "temp2": 1,
                    "temp_sign_exponent": 1,
                    "temporary_variable_1": 1,
                    "u_var10": 1,
                    "var11": 3,
                    "x8": 1
                },
                "uVar11": {
                    "combined_mantissa": 1,
                    "mantissa1_normalized": 1,
                    "mantissa2_normalized": 1,
                    "output_exponent": 1,
                    "result": 2,
                    "result1": 1,
                    "result3": 1,
                    "result_part3": 1,
                    "shifted_sum": 1,
                    "significand": 1,
                    "temp11": 3,
                    "temp12": 8,
                    "temp_result_mantissa": 1,
                    "temporary_variable_2": 1,
                    "val1": 1,
                    "value_mant_bits": 1,
                    "var12": 3,
                    "x9": 1
                },
                "uVar12": {
                    "dst_mant_bits": 1,
                    "fraction_difference": 1,
                    "mantissa_bits2_normalized": 1,
                    "mantissa_diff": 1,
                    "mantissa_difference": 1,
                    "remaining_mantissa": 1,
                    "result4": 1,
                    "result_part4": 1,
                    "temp12": 5,
                    "temp13": 8,
                    "temp_exponent_diff": 1,
                    "temp_mantissa_diff": 1,
                    "temp_var12": 1,
                    "temporary_variable_3": 1,
                    "u_var12": 1,
                    "val2": 1,
                    "var13": 3,
                    "x10": 1
                },
                "uVar13": {
                    "infinity": 1,
                    "mask1": 1,
                    "max": 1,
                    "max_exp": 1,
                    "max_exponent": 1,
                    "max_value": 1,
                    "overflow": 1,
                    "overflow_mask": 2,
                    "remaining_exponent": 1,
                    "result": 1,
                    "result5": 1,
                    "src_mant_bits": 1,
                    "temp13": 4,
                    "temp14": 8,
                    "temp3": 1,
                    "temp_mantissa_diff": 1,
                    "u_var13": 1,
                    "var14": 3
                },
                "uVar17": {
                    "combined_result": 1,
                    "concatenated_bits": 1,
                    "concatenated_value": 1,
                    "normalized_float": 1,
                    "output": 1,
                    "result": 19,
                    "return_value": 1,
                    "some_var": 1,
                    "temp": 1,
                    "temp15": 1,
                    "temp_result": 1,
                    "temp_variable": 1,
                    "u_var17": 1
                },
                "uVar2": {
                    "bit_mask2": 1,
                    "exponent2": 2,
                    "exponent_bit2": 1,
                    "exponent_bits": 2,
                    "exponent_bits_temp_2": 1,
                    "exponent_mask": 1,
                    "is_second_exponent_zero": 1,
                    "temp1": 1,
                    "temp2": 15,
                    "temp_var2": 1,
                    "u_var2": 1,
                    "var2": 3,
                    "x2": 1
                },
                "uVar3": {
                    "bit_mask3": 1,
                    "combined_exponent": 1,
                    "exponent_difference": 1,
                    "fraction_bits_temp_1": 1,
                    "is_current_exponent_zero": 1,
                    "mantissa1": 1,
                    "mantissa1_bits": 1,
                    "mantissa1_shift": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 15,
                    "temp_var3": 1,
                    "u_var3": 1,
                    "var3": 3,
                    "x3": 1
                },
                "uVar4": {
                    "bit_mask4": 1,
                    "fraction_bits_temp_2": 1,
                    "is_current_exponent_max": 1,
                    "mantissa1_shifted": 1,
                    "mantissa2_bits": 1,
                    "mantissa3": 1,
                    "mantissa_bits1_shifted": 1,
                    "mantissa_mask": 1,
                    "shifted_high_mantissa": 1,
                    "temp3": 1,
                    "temp4": 15,
                    "temp_var4": 1,
                    "u_var4": 1,
                    "var4": 3,
                    "x4": 1
                },
                "uVar5": {
                    "bit_mask5": 1,
                    "exponent_difference": 1,
                    "fraction_bits_temp_3": 1,
                    "is_second_exponent_max": 1,
                    "mantissa2_shift": 1,
                    "mantissa_bits2_shifted": 1,
                    "mask": 1,
                    "shifted_low_mantissa": 1,
                    "temp1": 1,
                    "temp4": 1,
                    "temp5": 15,
                    "temp_var5": 1,
                    "u_var5": 1,
                    "var5": 3,
                    "x5": 1
                },
                "uVar6": {
                    "bit_mask6": 1,
                    "carry": 1,
                    "exponent_shift": 1,
                    "fraction_bits_temp_4": 1,
                    "is_current_exponent_max": 1,
                    "mantissa2_shifted": 1,
                    "mantissa_result": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp6": 15,
                    "temp_var6": 1,
                    "u_var6": 1,
                    "var6": 3,
                    "x6": 1
                },
                "uVar7": {
                    "float_bits": 1,
                    "overflow": 1,
                    "result": 2,
                    "result_sign": 3,
                    "result_sign_exponent": 1,
                    "sign_bits_temp": 1,
                    "temp7": 14,
                    "temp_var7": 1,
                    "u_var7": 3,
                    "var7": 3,
                    "x7": 1
                },
                "uVar9": {
                    "adjusted_exponent": 1,
                    "exponent": 1,
                    "exponent_diff_abs": 1,
                    "exponent_sum": 1,
                    "normalized_exponent": 2,
                    "result1": 1,
                    "result_part1": 1,
                    "shifted_exponent": 1,
                    "sum": 3,
                    "sum_exp": 1,
                    "temp": 1,
                    "temp9": 12,
                    "temp_result_exponent": 1,
                    "u_var9": 1,
                    "var9": 3
                },
                "unaff_r5": {
                    "dst_exp_bits": 1,
                    "mantissa1_shifted": 1,
                    "mantissa2_bits_copy": 1,
                    "mantissa_diff": 1,
                    "mantissa_diff_abs": 1,
                    "normalized_exponent_2": 1,
                    "normalized_high_mantissa": 1,
                    "second_mantissa": 1,
                    "temp10": 8,
                    "unaff_r5": 3,
                    "unaffected_r5": 1,
                    "unaffected_register5": 1,
                    "value5": 1,
                    "var10": 3
                }
            },
            "called": [
                "FUN_0800088a"
            ],
            "calling": [
                "FUN_08004d78",
                "FUN_080079e8",
                "FUN_080059f0",
                "FUN_08004bd8",
                "FUN_08005838"
            ],
            "code": "\nulonglong calculate_floating_point_value_0800071c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = FUN_0800088a();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_value_0800071c",
            "entrypoint": "0x0800071c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_value_0800071c",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "temp8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800088a": {
            "additional_data": {
                "FUN_0800088a": {
                    "calculate_double": 1,
                    "calculate_double_precision": 1,
                    "calculate_float": 1,
                    "calculate_float_representation": 1,
                    "calculate_floating_point_value": 2,
                    "convert_to_double": 1,
                    "extract_bits": 3,
                    "extract_bits_from_numbers": 1,
                    "parse_binary_operands": 1,
                    "reverse_binary": 1,
                    "reverse_bits": 4,
                    "reverse_bits_and_combine": 1,
                    "reverse_bits_to_float": 1,
                    "reverse_float_bits": 1
                },
                "LAB_080006c0": {
                    "return_condition2": 1,
                    "return_second_case": 1
                },
                "LAB_080006fc": {
                    "return_condition1": 1,
                    "return_first_case": 1
                },
                "bVar4": {
                    "check_flag": 1,
                    "condition": 1,
                    "flag": 3,
                    "flag1": 1,
                    "is_zero": 17,
                    "is_zero_condition": 1,
                    "temp_6": 1,
                    "temp_var6": 1,
                    "temp_var_4": 1,
                    "zero_check": 1
                },
                "in_r12": {
                    "bit": 1,
                    "bit12": 1,
                    "bit5": 1,
                    "bit_e": 1,
                    "bit_temp4": 1,
                    "constant": 4,
                    "constant_val": 1,
                    "constant_value": 2,
                    "divider": 1,
                    "exponent_bits": 1,
                    "in_r12": 1,
                    "mask": 4,
                    "register_12": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_2": 1,
                    "temp_var5": 1,
                    "temp_var_1": 1,
                    "var2": 2
                },
                "param_1": {
                    "32bit_integer_part": 1,
                    "dividend": 1,
                    "input1": 17,
                    "input_1": 3,
                    "input_a": 1,
                    "input_param1": 1,
                    "input_value_1": 1,
                    "num1": 1,
                    "number1": 1,
                    "number_1": 1,
                    "operand1": 1,
                    "shifted_input1": 1,
                    "signed_exponent": 1
                },
                "param_2": {
                    "32bit_fractional_part": 1,
                    "divisor": 1,
                    "input2": 17,
                    "input_2": 3,
                    "input_b": 1,
                    "input_param2": 1,
                    "input_value_2": 1,
                    "mantissa": 1,
                    "num2": 1,
                    "number2": 1,
                    "number_2": 1,
                    "operand2": 1,
                    "shifted_input2": 1
                },
                "param_3": {
                    "64bit_integer_part": 1,
                    "dividend2": 1,
                    "input3": 17,
                    "input_3": 3,
                    "input_c": 1,
                    "input_param3": 1,
                    "input_value_3": 1,
                    "num3": 1,
                    "number3": 1,
                    "number_3": 1,
                    "operand3": 1,
                    "shifted_input3": 1,
                    "signed_exponent2": 1
                },
                "param_4": {
                    "64bit_fractional_part": 1,
                    "divisor2": 1,
                    "input4": 17,
                    "input_4": 3,
                    "input_d": 1,
                    "input_param4": 1,
                    "input_value_4": 1,
                    "mantissa2": 1,
                    "num4": 1,
                    "number4": 1,
                    "number_4": 1,
                    "operand4": 1,
                    "shifted_input4": 1
                },
                "uVar1": {
                    "bit": 1,
                    "bit1": 9,
                    "bit_1": 1,
                    "bit_a": 1,
                    "bit_check_1": 1,
                    "bit_mask1": 1,
                    "bit_temp1": 1,
                    "bit_value_1": 1,
                    "first_bit_input1": 1,
                    "mask1": 2,
                    "temp1": 2,
                    "temp2": 3,
                    "temp_3": 1,
                    "temp_var1": 2,
                    "temp_var_1": 1
                },
                "uVar2": {
                    "bit2": 3,
                    "bit3": 1,
                    "bit_2": 1,
                    "bit_c": 1,
                    "bit_temp2": 1,
                    "bit_value_2": 1,
                    "extracted_bits": 1,
                    "mask": 1,
                    "mask2": 1,
                    "masked_input4": 1,
                    "shifted_integer_mask": 1,
                    "shifted_mask": 1,
                    "shifted_masked_exponent": 1,
                    "shifted_value": 1,
                    "temp1": 1,
                    "temp2": 4,
                    "temp3": 4,
                    "temp_4": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "upper_bits": 1
                },
                "uVar3": {
                    "bit2": 1,
                    "bit3": 3,
                    "bit4": 1,
                    "bit_3": 1,
                    "bit_d": 1,
                    "bit_temp3": 1,
                    "fractional_temp": 1,
                    "modified_input_2": 1,
                    "number_copy": 1,
                    "result": 3,
                    "shifted_mantissa2": 1,
                    "temp2": 1,
                    "temp3": 4,
                    "temp4": 4,
                    "temp_5": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var_3": 1,
                    "u_var3": 1,
                    "var3": 1
                },
                "uVar5": {
                    "bit_check_2": 1,
                    "shifted_bits": 1
                },
                "unaff_r4": {
                    "bit2": 3,
                    "bit4": 1,
                    "bit_b": 1,
                    "comparison_number": 1,
                    "condition": 1,
                    "dividend_copy": 1,
                    "exponent_mask": 1,
                    "input_number": 1,
                    "integer_mask": 1,
                    "mask2": 1,
                    "register_4": 1,
                    "temp1": 9,
                    "temp2": 1,
                    "temp_1": 1,
                    "temp_var2": 1,
                    "unaff_r4": 1,
                    "unaffected_r4": 2,
                    "unused_var": 1,
                    "var1": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0800071c"
            ],
            "code": "\nulonglong reverse_bits_and_combine_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint temp2;\n  uint temp4;\n  uint mask;\n  bool is_zero;\n  \n  temp2 = mask & input4 >> 0x14;\n  temp4 = input2;\n  if (temp1 != mask || temp2 != mask) {\n    if (temp1 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp4 = input4, temp2 != mask)\n         ) {\nreturn_first_case:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (temp2 == mask) {\n      input1 = input3;\n      temp4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nreturn_condition2:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          temp4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp4;\n          if (temp2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto return_first_case;\n      if ((input3 | input4 << 1) != 0) goto return_condition2;\n    }\n  }\n  return CONCAT44(temp4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_and_combine_0800088a",
            "entrypoint": "0x0800088a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800088a": "reverse_bits_and_combine_0800088a",
                "LAB_080006c0": "return_condition2",
                "LAB_080006fc": "return_first_case",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "temp2",
                "uVar3": "temp4",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008fc": {
            "additional_data": {
                "0x1f": {
                    "shift_amount": 1
                },
                "FUN_080008fc": {
                    "check_conditions": 2,
                    "check_equality": 6,
                    "check_equality_with_shift_and_xor": 1,
                    "check_identical_values": 1,
                    "check_overlap": 1,
                    "check_parameters": 7,
                    "check_parameters_equal": 1,
                    "check_parameters_equality": 1,
                    "check_params": 1,
                    "check_params_and_equality": 1,
                    "check_params_equality": 1,
                    "compare_and_bitwise_operations": 1,
                    "compare_and_operate": 1,
                    "compare_and_return_result": 2,
                    "compare_params": 2,
                    "compare_variables_and_flags": 1,
                    "determine_equality": 1
                },
                "bVar2": {
                    "are_input_variables_zero": 1,
                    "are_inputs_zero": 1,
                    "are_parameters_zero": 1,
                    "are_values_zero": 2,
                    "check1": 1,
                    "condition_check_1": 1,
                    "has_zero_values": 1,
                    "is_condition1_met": 1,
                    "is_equal": 3,
                    "is_valid": 1,
                    "is_value1_value2_equal": 1,
                    "is_values_zero": 1,
                    "is_zero": 13,
                    "is_zero_1": 2,
                    "is_zero_check": 1
                },
                "bVar3": {
                    "check2": 1,
                    "condition_check_2": 1,
                    "is_condition2_met": 1,
                    "is_condition_true": 1,
                    "is_greater": 1,
                    "is_greater_or_equal": 1,
                    "is_invalid": 1,
                    "is_less": 1,
                    "is_less_or_equal": 3,
                    "is_less_than_or_equal": 2,
                    "is_less_than_or_equal_to_zero": 1,
                    "is_negative": 6,
                    "is_negative_check": 1,
                    "is_negative_or_equal": 1,
                    "is_param4_greater_than_param2": 1,
                    "is_param4_less_than_or_equal_param2": 1,
                    "is_param4_less_than_param2": 1,
                    "is_result_negative": 1,
                    "is_result_zero": 1,
                    "is_smaller": 1,
                    "is_value3_value4_equal": 1,
                    "is_zero_2": 2
                },
                "param_1": {
                    "a": 1,
                    "first_input": 1,
                    "first_param": 1,
                    "first_parameter": 1,
                    "input1": 5,
                    "input_1": 2,
                    "num1": 3,
                    "shifted_param1": 1,
                    "shifted_val3": 1,
                    "value1": 10,
                    "value_1": 4,
                    "var1": 1
                },
                "param_2": {
                    "b": 1,
                    "input2": 5,
                    "input_2": 2,
                    "num2": 3,
                    "second_input": 1,
                    "second_param": 1,
                    "second_parameter": 1,
                    "shifted_param2": 1,
                    "value2": 11,
                    "value_2": 4,
                    "var2": 1
                },
                "param_3": {
                    "c": 1,
                    "input3": 5,
                    "input_3": 2,
                    "num3": 3,
                    "shifted_param3": 1,
                    "third_input": 1,
                    "third_param": 1,
                    "third_parameter": 1,
                    "value3": 11,
                    "value_3": 4,
                    "var3": 1
                },
                "param_4": {
                    "d": 1,
                    "final_result": 1,
                    "fourth_input": 1,
                    "fourth_param": 1,
                    "fourth_parameter": 1,
                    "input4": 5,
                    "input_4": 2,
                    "num4": 3,
                    "shifted_param4": 1,
                    "shifted_val4": 1,
                    "value4": 9,
                    "value_4": 4,
                    "var4": 1
                },
                "param_4m": {
                    "sign_mask": 1
                },
                "return": {
                    "result": 1,
                    "return_value": 1
                },
                "uVar1": {
                    "param_xor": 1,
                    "result": 14,
                    "temp": 1,
                    "temp1": 1,
                    "temp_var1": 1,
                    "xor_of_param2_and_param4": 1,
                    "xor_result": 12
                }
            },
            "called": [],
            "calling": [
                "FUN_08000988"
            ],
            "code": "\nuint check_parameters_equality_080008fc(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    return_value 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    return_value value4 | 1;\n  }\n  return_value 0;\n}\n\n",
            "current_name": "check_parameters_equality_080008fc",
            "entrypoint": "0x080008fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008fc": "check_parameters_equality_080008fc",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "return_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000978": {
            "additional_data": {
                "FUN_08000978": {
                    "call_function": 1,
                    "call_function_with_params": 2,
                    "call_other_function": 1,
                    "call_sub_function": 3,
                    "call_sub_functions": 2,
                    "execute_function": 13,
                    "execute_main_function": 1,
                    "execute_operation": 1,
                    "execute_reverse_operation": 1,
                    "initialize": 1,
                    "initialize_function": 1,
                    "perform_operation": 1,
                    "process_function": 1,
                    "process_parameters": 1
                },
                "FUN_08000988": {
                    "call_sub_function": 2,
                    "execute_sub_function": 1,
                    "invoke_sub_function": 1,
                    "perform_action": 2,
                    "perform_reverse_operation": 1,
                    "process_data": 4,
                    "process_params": 1,
                    "process_sub_function": 1,
                    "reverse_operation": 1,
                    "sub_function": 8
                },
                "param_1": {
                    "arg1": 13,
                    "argument1": 4,
                    "data1": 1,
                    "func_param_1": 1,
                    "input1": 6,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "param1": 2,
                    "sub_param1": 1
                },
                "param_2": {
                    "arg2": 13,
                    "argument2": 4,
                    "data2": 1,
                    "func_param_2": 1,
                    "input2": 5,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "param2": 3
                },
                "param_3": {
                    "arg3": 13,
                    "argument3": 4,
                    "data1": 1,
                    "func_param_3": 1,
                    "input1": 1,
                    "input2": 1,
                    "input3": 3,
                    "input_param3": 2,
                    "input_param_3": 1,
                    "param3": 3,
                    "temp1": 1
                },
                "param_4": {
                    "arg4": 13,
                    "argument4": 4,
                    "data2": 1,
                    "func_param_4": 1,
                    "input2": 1,
                    "input4": 3,
                    "input_param4": 2,
                    "input_param_4": 1,
                    "param4": 3,
                    "temp2": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080009e8",
                "FUN_080009d4"
            ],
            "code": "\nvoid execute_main_function_08000978(undefined4 arg1,undefined4 arg2,undefined4 arg3,undefined4 arg4)\n\n{\n  FUN_08000988(arg3,arg4,arg1,arg2);\n  return;\n}\n\n",
            "current_name": "execute_main_function_08000978",
            "entrypoint": "0x08000978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000978": "execute_main_function_08000978",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000988": {
            "additional_data": {
                "FUN_080008fc": {
                    "another_function": 1,
                    "execute_function": 1,
                    "execute_generic_function": 1,
                    "execute_operation": 1,
                    "execute_specific_operation": 1,
                    "execute_subfunction": 1,
                    "perform_calculation": 2,
                    "perform_computation": 1,
                    "perform_operation": 9,
                    "perform_operation_on_values": 1,
                    "perform_sub_operations": 1,
                    "process": 1,
                    "process_data": 4,
                    "process_parameters": 1,
                    "reverse_data": 1,
                    "sub_function": 1
                },
                "FUN_08000988": {
                    "execute_and_return": 5,
                    "execute_and_return_param": 2,
                    "execute_function": 2,
                    "execute_main_function": 1,
                    "execute_operation": 1,
                    "execute_task": 1,
                    "initialize": 8,
                    "initialize_and_return": 4,
                    "initialize_function": 1,
                    "process_data": 1,
                    "process_param": 1
                },
                "param_1": {
                    "arg": 1,
                    "input": 7,
                    "input_data": 1,
                    "input_param": 6,
                    "input_parameter": 2,
                    "input_value": 7,
                    "operand_1": 1,
                    "param_1": 1,
                    "result": 1,
                    "task_param": 1,
                    "value": 3
                },
                "param_2": {
                    "computation_param_1": 1,
                    "generic_param_1": 1,
                    "input1": 1,
                    "num1": 1,
                    "op_param_1": 2,
                    "operand1": 1,
                    "operand_1": 1,
                    "operand_2": 1,
                    "operation_param_1": 1,
                    "param1": 1,
                    "param2": 2,
                    "param_2": 3,
                    "param_a": 1,
                    "parameter_1": 1,
                    "sub_function_parameter1": 1,
                    "value1": 2,
                    "var1": 1
                },
                "param_3": {
                    "computation_param_2": 1,
                    "generic_param_2": 1,
                    "input2": 1,
                    "num2": 1,
                    "op_param_2": 2,
                    "operand2": 1,
                    "operand_2": 1,
                    "operand_3": 1,
                    "operation_param_2": 1,
                    "param2": 1,
                    "param3": 2,
                    "param_3": 3,
                    "param_b": 1,
                    "parameter_2": 1,
                    "sub_function_parameter2": 1,
                    "value2": 2,
                    "var2": 1
                },
                "param_4": {
                    "computation_param_3": 1,
                    "generic_param_3": 1,
                    "input3": 1,
                    "num3": 1,
                    "op_param_3": 2,
                    "operand3": 1,
                    "operand_3": 1,
                    "operand_4": 1,
                    "operation_param_3": 1,
                    "param3": 1,
                    "param4": 2,
                    "param_4": 3,
                    "param_c": 1,
                    "parameter_3": 1,
                    "sub_function_parameter3": 1,
                    "value3": 2,
                    "var3": 1
                }
            },
            "called": [
                "FUN_080008fc"
            ],
            "calling": [
                "FUN_08000978",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_080009ac"
            ],
            "code": "\nundefined4 initialize_and_return_08000988(undefined4 input)\n\n{\n  FUN_080008fc();\n  return input;\n}\n\n",
            "current_name": "initialize_and_return_08000988",
            "entrypoint": "0x08000988",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000988": "initialize_and_return_08000988",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000998": {
            "additional_data": {
                "FUN_08000988": {
                    "initialize_function": 1
                },
                "FUN_08000998": {
                    "check_flag": 2,
                    "check_if_char_not_null": 3,
                    "check_if_character_not_null": 1,
                    "check_if_initialized": 1,
                    "check_if_input_is_valid": 1,
                    "check_if_non_empty": 1,
                    "check_if_non_empty_char": 1,
                    "check_if_nonzero": 1,
                    "check_if_not_empty": 1,
                    "check_if_not_null": 2,
                    "check_if_pointer_is_null": 1,
                    "check_if_valid": 1,
                    "check_if_zero": 2,
                    "check_in_zr_not_null": 1,
                    "check_input": 2,
                    "check_non_null_character": 1,
                    "check_zero_termination": 1,
                    "is_char_not_null": 1,
                    "is_character_not_null": 1,
                    "is_in_zr_not_null": 1,
                    "is_nonempty": 2,
                    "is_nonzero_character": 2,
                    "is_not_null_character": 1
                },
                "in_ZR": {
                    "character": 4,
                    "character_not_null": 1,
                    "flag_checked": 1,
                    "input_char": 10,
                    "input_is_valid": 1,
                    "is_empty": 1,
                    "is_flag_set": 1,
                    "is_initialized": 1,
                    "is_not_empty": 1,
                    "is_valid": 1,
                    "is_zero_not_null": 1,
                    "is_zero_return": 1,
                    "result": 6,
                    "termination_flag": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_char_not_null_08000998(void)\n\n{\n  char input_char;\n  \n  FUN_08000988();\n  return input_char != '\\0';\n}\n\n",
            "current_name": "check_if_char_not_null_08000998",
            "entrypoint": "0x08000998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000998": "check_if_char_not_null_08000998",
                "in_ZR": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009ac": {
            "additional_data": {
                "FUN_08000988": {
                    "initialize_cy": 3,
                    "initialize_function": 1,
                    "initialize_variables": 1
                },
                "FUN_080009ac": {
                    "check_cy": 1,
                    "check_for_null_termination": 1,
                    "check_if_char_is_null": 1,
                    "check_if_char_null": 1,
                    "check_if_cy_is_empty": 1,
                    "check_if_cy_is_null": 1,
                    "check_if_empty": 1,
                    "check_if_in_cy_is_null": 2,
                    "check_if_input_empty": 1,
                    "check_if_input_is_empty": 2,
                    "check_if_null_terminated": 4,
                    "check_if_string_empty": 1,
                    "check_input_is_empty": 1,
                    "check_null_character": 1,
                    "check_null_terminated": 2,
                    "check_null_termination": 2,
                    "is_cy_null": 2,
                    "is_function_returning_zero": 1,
                    "is_input_null": 1,
                    "is_null_terminated": 3,
                    "is_string_terminated": 1
                },
                "in_CY": {
                    "char_checked": 1,
                    "character": 1,
                    "current_char": 1,
                    "cy": 1,
                    "cy_variable": 1,
                    "input_char": 12,
                    "input_character": 11,
                    "is_null": 1,
                    "last_character": 1,
                    "null_termination_char": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_string_empty_080009ac(void)\n\n{\n  char input_char;\n  \n  FUN_08000988();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_string_empty_080009ac",
            "entrypoint": "0x080009ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009ac": "check_if_string_empty_080009ac",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c0": {
            "additional_data": {
                "FUN_08000988": {
                    "do_initialization": 1,
                    "do_something": 1,
                    "execute_sub_function": 1,
                    "execute_subfunction": 1,
                    "initialize": 3,
                    "initialize_cy": 1,
                    "initialize_data": 1,
                    "initialize_flags": 1,
                    "initialize_registers": 1,
                    "initialize_subroutine": 1,
                    "initialize_values": 1,
                    "initialize_variables": 3,
                    "perform_additional_checks": 1,
                    "perform_initial_checks": 1,
                    "perform_initialization": 1,
                    "reset_variables": 1,
                    "set_cy_and_zr": 1
                },
                "FUN_080009c0": {
                    "check_carry_and_zero": 2,
                    "check_carry_and_zero_flags": 1,
                    "check_carry_or_zero": 1,
                    "check_carry_zero": 1,
                    "check_condition": 3,
                    "check_condition_and_return": 1,
                    "check_conditions": 4,
                    "check_conditions_and_return": 2,
                    "check_cy_and_zr": 3,
                    "check_cy_and_zr_flags": 1,
                    "check_cy_zr": 2,
                    "check_cy_zr_conditions": 1,
                    "check_flag_conditions": 1,
                    "check_flags": 2,
                    "check_for_zero_flags": 1,
                    "check_for_zero_result": 1,
                    "check_for_zeroes": 1,
                    "check_if_zero_or_carry": 1,
                    "check_zero_flag": 1,
                    "evaluate_conditions": 1
                },
                "in_CY": {
                    "carry_condition": 1,
                    "carry_flag": 16,
                    "condition_cy": 1,
                    "is_carry": 3,
                    "is_carry_set": 2
                },
                "in_ZR": {
                    "condition_zr": 1,
                    "is_zero": 1,
                    "is_zero_result": 2,
                    "is_zero_return": 1,
                    "is_zero_returned": 1,
                    "zero_condition": 1,
                    "zero_flag": 15,
                    "zero_result": 1
                },
                "param_1": {
                    "input_param": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nbool check_cy_and_zr_flags_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000988();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_cy_and_zr_flags_080009c0",
            "entrypoint": "0x080009c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c0": "check_cy_and_zr_flags_080009c0",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009d4": {
            "additional_data": {
                "FUN_08000978": {
                    "execute_additional_operations": 1,
                    "execute_sub_functions": 1,
                    "initialize_flags": 1,
                    "initialize_parameters": 3,
                    "initialize_params": 2,
                    "initialize_registers": 1,
                    "initialize_variables": 3,
                    "perform_initialization": 4
                },
                "FUN_080009d4": {
                    "check_carry_or_zero": 1,
                    "check_condition": 1,
                    "check_conditions": 3,
                    "check_conditions_and_return": 1,
                    "check_cy_and_zr": 7,
                    "check_cy_and_zr_flags": 1,
                    "check_cy_zr": 6,
                    "check_cy_zr_conditions": 1,
                    "check_error_conditions": 1,
                    "check_flags": 1,
                    "check_for_zero_values": 2,
                    "check_if_zero_or_carry": 1,
                    "check_zero": 1,
                    "check_zero_flag": 1,
                    "check_zr_or_cy": 1,
                    "is_carry_or_zero_set": 1,
                    "is_cy_or_zr_zero": 1
                },
                "in_CY": {
                    "carry_flag": 17,
                    "condition_cy": 1,
                    "input_cy": 1,
                    "is_carry": 2,
                    "is_carry_set": 1
                },
                "in_ZR": {
                    "condition_zr": 1,
                    "input_zr": 1,
                    "is_zero": 2,
                    "is_zero_result": 1,
                    "zero_flag": 13,
                    "zero_result": 4
                },
                "param_1": {
                    "arg_1": 1,
                    "code1": 1
                },
                "param_2": {
                    "arg_2": 1,
                    "code2": 1
                },
                "param_3": {
                    "arg_3": 1,
                    "code3": 1
                },
                "param_4": {
                    "arg_4": 1,
                    "code4": 1
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nbool check_cy_and_zr_flags_080009d4(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_08000978();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_cy_and_zr_flags_080009d4",
            "entrypoint": "0x080009d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009d4": "check_cy_and_zr_flags_080009d4",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009e8": {
            "additional_data": {
                "FUN_08000978": {
                    "call_function": 1,
                    "execute_unknown_function": 1,
                    "initialize_parameters": 1,
                    "initialize_params": 1,
                    "initialize_variables": 3
                },
                "FUN_080009e8": {
                    "check_c_in_mode": 1,
                    "check_if_in_cy_is_null": 1,
                    "check_if_input_empty": 4,
                    "check_if_input_is_empty": 1,
                    "check_if_null": 1,
                    "check_if_null_character": 2,
                    "check_if_null_terminated": 3,
                    "check_if_string_empty": 2,
                    "check_is_null_terminated": 1,
                    "check_null_terminated": 1,
                    "check_null_termination": 2,
                    "check_null_terminator": 1,
                    "is_c_string_terminated": 1,
                    "is_cy_null": 3,
                    "is_in_cy_null": 1,
                    "is_input_string_empty": 1,
                    "is_null_terminated": 4,
                    "is_null_terminator": 1
                },
                "in_CY": {
                    "char_input": 1,
                    "character": 4,
                    "current_char": 1,
                    "current_character": 1,
                    "cy": 1,
                    "input_char": 9,
                    "input_character": 12,
                    "is_cy_null": 1,
                    "termination_char": 1
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_080059f0",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_in_cy_is_null_080009e8(void)\n\n{\n  char input_character;\n  \n  FUN_08000978();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_in_cy_is_null_080009e8",
            "entrypoint": "0x080009e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009e8": "check_if_in_cy_is_null_080009e8",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009fc": {
            "additional_data": {
                "FUN_080009fc": {
                    "calculate_float": 7,
                    "calculate_float_bits": 2,
                    "calculate_float_exponent": 1,
                    "calculate_float_value": 5,
                    "calculate_floating_point": 4,
                    "calculate_floating_point_value": 2,
                    "calculate_modified_value": 1,
                    "calculate_normalized_float": 1,
                    "calculate_result": 1,
                    "calculate_shifted_value": 1,
                    "calculate_square_root": 1,
                    "compute_floating_point": 1,
                    "convert_float_to_binary": 1,
                    "decode_float": 1,
                    "reverse_bits": 1,
                    "reverse_integer_bits": 1
                },
                "SCARRY4": {
                    "check_overflow": 1,
                    "signed_carry": 1,
                    "signed_carry4": 1
                },
                "bVar4": {
                    "check": 1,
                    "is_special_case": 3,
                    "is_zero": 23,
                    "is_zero_result": 1,
                    "special_case": 1
                },
                "bVar5": {
                    "compare": 1,
                    "condition": 2,
                    "is_in_range": 4,
                    "is_less_than": 7,
                    "is_less_than0x70000000": 1,
                    "is_less_than70000000": 1,
                    "is_less_than700_m": 1,
                    "is_less_than_max": 1,
                    "is_less_than_threshold": 2,
                    "is_less_than_treshold": 1,
                    "is_negative": 1,
                    "is_normal_float": 1,
                    "is_small": 2,
                    "is_small_value": 1,
                    "is_smaller_than_threshold": 1,
                    "less_than_threshold": 2
                },
                "in_r12": {
                    "add_result2": 1,
                    "additional_offset": 1,
                    "adjusted_double_multiplier": 1,
                    "alternative_multiplier": 1,
                    "condition": 1,
                    "condition_check": 1,
                    "conditional_value": 2,
                    "final_result": 1,
                    "in_r12": 1,
                    "max_value": 1,
                    "modified_multiplier_without_offset": 1,
                    "temp": 1,
                    "temp3": 7,
                    "temp_val": 1,
                    "temp_value": 2,
                    "temp_value3": 1,
                    "temp_var3": 1,
                    "temp_variable": 1,
                    "temporary_value": 1,
                    "temporary_variable": 1,
                    "tmp_val": 1,
                    "tmp_var": 1
                },
                "param_1": {
                    "float_number": 1,
                    "float_value": 1,
                    "input": 1,
                    "input1": 5,
                    "input_float": 6,
                    "input_num": 1,
                    "input_value": 11,
                    "input_value1": 2,
                    "value1": 2,
                    "value_a": 1
                },
                "param_2": {
                    "bit_pattern": 1,
                    "float_bits": 2,
                    "input2": 5,
                    "input_bits": 2,
                    "input_exponent": 2,
                    "input_flag": 1,
                    "input_float_bits": 2,
                    "input_mask": 1,
                    "input_param": 1,
                    "input_value2": 2,
                    "multiplier": 4,
                    "operation": 1,
                    "operation_code": 1,
                    "precision": 1,
                    "shift_amount": 1,
                    "shift_val": 1,
                    "value2": 2,
                    "value_b": 1
                },
                "uVar1": {
                    "output_bits": 1,
                    "output_float_bits": 1,
                    "output_value": 1,
                    "result": 25,
                    "result1": 1,
                    "result_float_bits": 1
                },
                "uVar2": {
                    "bits_multiplied_by_two": 1,
                    "double_exponent": 1,
                    "double_input_bits": 1,
                    "double_multiplier": 2,
                    "doubled_multiplier": 1,
                    "doubled_value2": 1,
                    "exponent_shifted": 1,
                    "input2_times2": 1,
                    "input_float_bits_multiplied": 1,
                    "input_float_bits_shifted": 1,
                    "mul_result": 1,
                    "multiplied_value": 1,
                    "multiplied_value_b": 1,
                    "scaled_bits": 1,
                    "scaled_value": 1,
                    "shifted_bits": 1,
                    "shifted_mask": 1,
                    "shifted_pattern": 1,
                    "shifted_val": 1,
                    "shifted_value": 1,
                    "temp1": 7,
                    "temp_value1": 1,
                    "temp_var1": 1
                },
                "uVar3": {
                    "add_result": 1,
                    "adjusted_bits": 3,
                    "adjusted_multiplier": 1,
                    "adjusted_val": 1,
                    "converted_bits": 1,
                    "exponent_added": 1,
                    "extended_pattern": 1,
                    "modified_input_float_bits": 1,
                    "modified_multiplier": 1,
                    "modified_shifted_value": 1,
                    "modified_value_b": 1,
                    "new_value": 1,
                    "offset": 1,
                    "scaled_sum": 1,
                    "shifted_exponent": 1,
                    "shifted_float_bits": 1,
                    "shifted_plus": 1,
                    "sum": 1,
                    "temp2": 7,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "u_var2_plus0x90000000": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_float_value_080009fc(uint input_value,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = input2 * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input_value | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != check_overflow(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input_value >> (temp1 & 0xff);\n    if (input_value << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input_value = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input_value >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input_value * 8);\n  if (input_value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_float_value_080009fc",
            "entrypoint": "0x080009fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009fc": "calculate_float_value_080009fc",
                "SCARRY4": "check_overflow",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "in_r12": "temp3",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "additional_data": {
                "FUN_08000aa4": {
                    "calculate_float": 4,
                    "calculate_floating_point": 7,
                    "calculate_modified_float": 2,
                    "calculate_new_float_value": 1,
                    "calculate_new_value": 1,
                    "calculate_next_float": 1,
                    "calculate_normalized_float": 1,
                    "calculate_precision": 1,
                    "calculate_result": 1,
                    "calculate_shifted_value": 4,
                    "decomp_func": 1,
                    "perform_arithmetic": 1,
                    "perform_calculation": 1,
                    "perform_unsigned_division": 1,
                    "reverse_bits": 3
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "bVar8": {
                    "check": 2,
                    "compare_flag": 1,
                    "condition": 1,
                    "equal_flag": 1,
                    "flag": 2,
                    "is_condition_met": 3,
                    "is_condition_satisfied": 1,
                    "is_equal": 14,
                    "is_true": 2,
                    "is_zero": 4
                },
                "iVar1": {
                    "dividend_shifted_right24": 1,
                    "input_sign": 2,
                    "integer_var1": 1,
                    "left_shifted_mantissa": 1,
                    "msb_input_value_shifted": 1,
                    "msb_shifted_value": 1,
                    "shift": 1,
                    "shift1": 1,
                    "shift_1": 1,
                    "shift_amount": 1,
                    "shift_amount1": 1,
                    "shift_amount_a": 1,
                    "shift_count": 1,
                    "shift_right_val": 1,
                    "shift_value": 2,
                    "shifted_bits_count": 1,
                    "shifted_float": 1,
                    "shifted_input1": 1,
                    "shifted_input1_shifted": 1,
                    "shifted_input1_signed": 1,
                    "shifted_input_1": 1,
                    "shifted_input_a": 1,
                    "shifted_input_value": 1,
                    "shifted_input_value_1_signed": 1,
                    "shifted_num_1": 1,
                    "shifted_value1": 1,
                    "signed_input_number": 1
                },
                "iVar2": {
                    "divisor_shifted_right24": 1,
                    "integer_var2": 1,
                    "msb_input_mask": 1,
                    "msb_shifted_mask": 1,
                    "new_input_sign": 1,
                    "right_shifted_mantissa": 1,
                    "second_shifted_bits_count": 1,
                    "shift2": 1,
                    "shift_2": 1,
                    "shift_amount2": 1,
                    "shift_amount_b": 1,
                    "shift_right_val2": 1,
                    "shift_value_2": 1,
                    "shifted_difference": 1,
                    "shifted_float2": 1,
                    "shifted_input2": 1,
                    "shifted_input2_shifted": 1,
                    "shifted_input2_signed": 1,
                    "shifted_input_2": 1,
                    "shifted_input_b": 1,
                    "shifted_input_value_2_signed": 1,
                    "shifted_num": 1,
                    "shifted_num_2": 1,
                    "shifted_sign": 2,
                    "shifted_value": 1,
                    "shifted_value2": 1,
                    "signed_key": 1,
                    "temp": 1
                },
                "param_1": {
                    "dividend": 1,
                    "input": 4,
                    "input1": 6,
                    "input_1": 1,
                    "input_a": 2,
                    "input_float": 2,
                    "input_num_1": 1,
                    "input_number": 1,
                    "input_value": 7,
                    "input_value_1": 1,
                    "mantissa": 1,
                    "num1": 1,
                    "value1": 2,
                    "value_1": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_pattern": 1,
                    "divisor": 1,
                    "exponent": 1,
                    "flag": 2,
                    "input2": 6,
                    "input_2": 1,
                    "input_b": 2,
                    "input_float_2": 1,
                    "input_integer": 1,
                    "input_mask": 1,
                    "input_num_2": 1,
                    "input_sign": 1,
                    "input_value_2": 1,
                    "key": 1,
                    "mask": 4,
                    "num2": 1,
                    "rounding_mode": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "param_3": {
                    "bit_shift_num": 1,
                    "constant_param": 1,
                    "flag": 1,
                    "input3": 4,
                    "input_3": 1,
                    "input_c": 2,
                    "input_data": 1,
                    "input_value_3": 1,
                    "mask": 1,
                    "num3": 1,
                    "param": 1,
                    "param3": 3,
                    "param_3": 3,
                    "rounding_mode": 1,
                    "some_value": 1,
                    "temp1": 1,
                    "undefined": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "value3": 1,
                    "value_3": 1,
                    "variable_a": 1
                },
                "param_4": {
                    "control_word": 1,
                    "exponent_bias": 1,
                    "input4": 4,
                    "input_4": 1,
                    "input_d": 2,
                    "input_value_4": 1,
                    "mask": 1,
                    "num4": 1,
                    "output_value": 2,
                    "param4": 3,
                    "param_4": 3,
                    "result": 3,
                    "shifts": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_result": 1,
                    "unused_parameter": 1,
                    "value4": 1,
                    "value_4": 1,
                    "variable_b": 1
                },
                "uVar3": {
                    "abs_value": 1,
                    "bitwise_op1": 1,
                    "bitwise_xor": 1,
                    "bitwise_xor1": 1,
                    "bitwise_xor_result": 1,
                    "dividend_xor": 1,
                    "fixed_num": 1,
                    "flipped_input2": 1,
                    "input_copy": 1,
                    "input_mantissa": 1,
                    "input_xor_mask": 1,
                    "inverted_mask": 1,
                    "mantissa_xor": 1,
                    "mask_negate": 1,
                    "masked_input": 1,
                    "masked_input_b": 1,
                    "modified_input": 1,
                    "modified_value": 1,
                    "output_number": 1,
                    "result": 2,
                    "result1": 2,
                    "result_1": 2,
                    "rounding_mode_negation": 1,
                    "temp_a": 1,
                    "temp_value1": 2,
                    "xor_result": 1,
                    "xored_input_value_2": 1
                },
                "uVar4": {
                    "abs_input": 1,
                    "abs_mask": 1,
                    "bitwise_op2": 1,
                    "divisor_positive": 1,
                    "flipped_input1": 1,
                    "mask_num": 1,
                    "masked_input_a": 1,
                    "masked_shifted_value": 1,
                    "modified_input_2": 1,
                    "new_input_mantissa": 1,
                    "result": 1,
                    "result2": 2,
                    "result_2": 2,
                    "result_shifted": 1,
                    "shifted_bitwise_xor": 1,
                    "shifted_float_abs": 1,
                    "shifted_input": 1,
                    "shifted_input2": 1,
                    "shifted_input_value_2": 1,
                    "shifted_mask": 2,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_b": 1,
                    "temp_result": 1,
                    "temp_value2": 2,
                    "temp_var1": 1,
                    "u_var4": 1
                },
                "uVar5": {
                    "abs_result": 1,
                    "bit_pattern_sign": 1,
                    "dividend_shifted_left1": 1,
                    "input_value": 1,
                    "input_value_shifted": 2,
                    "modified_float1": 1,
                    "num1_shifted": 1,
                    "result": 1,
                    "result_a": 2,
                    "result_value": 1,
                    "shift_left_result": 1,
                    "shifted_input": 2,
                    "shifted_input1": 4,
                    "shifted_input_value": 1,
                    "shifted_input_value_1": 1,
                    "shifted_mantissa": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "temp1": 1,
                    "temp_2": 1,
                    "temp_num_1": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "value_1": 1,
                    "value_a": 1
                },
                "uVar6": {
                    "bit_pattern_exponent": 1,
                    "condition": 1,
                    "diff": 1,
                    "difference": 1,
                    "dividend_minus_divisor": 1,
                    "merged_inputs": 1,
                    "new_shifted_input": 1,
                    "num2_shifted": 1,
                    "result_b": 2,
                    "shift_amount": 1,
                    "shift_amt": 1,
                    "shift_counter": 1,
                    "shift_result": 1,
                    "shifted_input1_after_shift": 1,
                    "shifted_output": 1,
                    "shifted_value": 3,
                    "temp2": 1,
                    "temp_3": 1,
                    "temp_num_2": 1,
                    "temp_value3": 2,
                    "temp_var_2": 1,
                    "u_var6": 2,
                    "updated_shift_left_result": 1,
                    "updated_shifted_input1": 2,
                    "value_2": 1
                },
                "uVar7": {
                    "abs_difference": 1,
                    "diff": 1,
                    "diff_shift": 1,
                    "difference": 21,
                    "gap": 1,
                    "shift_count": 1,
                    "shift_difference": 1,
                    "temp3": 1,
                    "temp_4": 1,
                    "temp_value4": 1,
                    "value_3": 1
                },
                "uVar8": {
                    "updated_bitwise_xor_result": 1
                },
                "uVar9": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_floating_point_08000aa4(uint input_value,uint input2,undefined4 input3,uint input4)\n\n{\n  int input_sign;\n  int shifted_sign;\n  uint result;\n  uint shifted_mask;\n  uint shifted_input1;\n  uint shifted_value;\n  uint difference;\n  bool is_equal;\n  \n  result = input2 ^ 0x80000000;\n  shifted_input1 = input_value << 1;\n  is_equal = shifted_input1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input1 == input4;\n  }\n  input_sign = (int)shifted_input1 >> 0x18;\n  if (!is_equal) {\n    is_equal = input_sign == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_sign = (int)(input2 << 1) >> 0x18;\n    if (input_sign == -1 || shifted_sign == -1) {\n      shifted_input1 = result;\n      if (input_sign == -1) {\n        shifted_input1 = input_value;\n      }\n      if (input_sign != -1 || shifted_sign != -1) {\n        result = shifted_input1;\n      }\n      is_equal = (shifted_input1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (result & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input1 == result;\n      }\n      if (!is_equal) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input_value ^ result) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input_value = result;\n      }\n      return input_value;\n    }\n    if (input_value != result) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      result = input_value << 1;\n      if ((input_value & 0x80000000) != 0) {\n        result = result | 0x80000000;\n      }\n      return result;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input_value + 0x800000;\n    }\n    input_value = input_value & 0x80000000;\nLAB_08000bde:\n    return input_value | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input1;\n  is_equal = difference != 0;\n  shifted_value = shifted_input1;\n  if (is_equal && shifted_input1 <= input4) {\n    shifted_value = shifted_input1 + difference;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    result = result ^ input_value;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    input_value = input_value ^ result;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    result = result ^ input_value;\n  }\n  if (input4 < shifted_input1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input_value;\n  }\n  shifted_input1 = input_value & 0xffffff | 0x800000;\n  if ((input_value & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  shifted_mask = result & 0xffffff | 0x800000;\n  if ((result & 0x80000000) != 0) {\n    shifted_mask = -shifted_mask;\n  }\n  if (shifted_value == difference) {\n    shifted_mask = shifted_mask ^ 0x800000;\n    if (shifted_value == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      shifted_value = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)shifted_mask >> (difference & 0xff));\n  shifted_mask = shifted_mask << (0x20 - difference & 0xff);\n  input_value = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    is_equal = shifted_mask != 0;\n    shifted_mask = -shifted_mask;\n    shifted_input1 = -shifted_input1 - (uint)is_equal;\n  }\n  if (shifted_input1 < 0x800000) {\n    result = shifted_mask & 0x80000000;\n    shifted_mask = shifted_mask << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(result != 0);\n    result = shifted_value - 2;\n    if ((shifted_input1 & 0x800000) == 0) {\n      difference = leading_zero_count(shifted_input1) - 8;\n      shifted_input1 = shifted_input1 << (difference & 0xff);\n      if ((int)result < (int)difference) {\n        shifted_input1 = shifted_input1 >> (-(result - difference) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (result - difference) * 0x800000;\n      }\n      return shifted_input1 | input_value;\n    }\n  }\n  else {\n    result = shifted_value - 1;\n    if (0xffffff < shifted_input1) {\n      result = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      shifted_mask = (uint)(result != 0) << 0x1f | shifted_mask >> 1;\n      result = shifted_value;\n      if (0xfd < shifted_value) goto LAB_08000bde;\n    }\n  }\n  shifted_input1 = shifted_input1 + result * 0x800000 + (uint)(0x7fffffff < shifted_mask);\n  if (shifted_mask == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input_value;\n}\n\n",
            "current_name": "calculate_floating_point_08000aa4",
            "entrypoint": "0x08000aa4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa4": "calculate_floating_point_08000aa4",
                "LZCOUNT": "leading_zero_count",
                "bVar8": "is_equal",
                "iVar1": "input_sign",
                "iVar2": "shifted_sign",
                "param_1": "input_value",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result",
                "uVar4": "shifted_mask",
                "uVar5": "shifted_input1",
                "uVar6": "shifted_value",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "additional_data": {
                "FUN_08000aa8": {
                    "calculate_float": 19,
                    "calculate_floating_point": 2,
                    "calculate_new_float": 1,
                    "extract_float_from_int": 1,
                    "perform_arithmetic": 1,
                    "perform_arithmetic_operation": 3,
                    "perform_floating_point_calculation": 1,
                    "process_numbers": 1,
                    "reverse_float": 1,
                    "simplified_float_calculation": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 2,
                    "leading_zeros_count": 2
                },
                "bVar7": {
                    "check_flag": 2,
                    "comparison_flag": 1,
                    "flag": 1,
                    "is_condition_met": 1,
                    "is_equal": 10,
                    "is_equal_bits": 1,
                    "is_normalized_input_diff_zero": 1,
                    "is_positive": 1,
                    "is_zero": 13
                },
                "iVar1": {
                    "a_msb": 1,
                    "dividend_sign": 1,
                    "divisor": 1,
                    "high_bits1": 1,
                    "high_byte1": 1,
                    "i_var1": 1,
                    "input1_shifted": 1,
                    "shift_amount": 2,
                    "shift_bits1": 1,
                    "shift_count": 1,
                    "shifted1": 2,
                    "shifted_by24_1": 1,
                    "shifted_input1": 8,
                    "shifted_input_1": 2,
                    "shifted_input_float1": 1,
                    "shifted_value1": 2,
                    "sign1": 1,
                    "sign_bit1": 1
                },
                "iVar2": {
                    "b_msb": 1,
                    "divisor_sign": 1,
                    "high_bits2": 1,
                    "high_byte2": 1,
                    "i_var2": 1,
                    "input2_shifted": 1,
                    "second_byte": 1,
                    "second_shift_amount": 1,
                    "shift_amount2": 1,
                    "shift_bits2": 1,
                    "shifted2": 2,
                    "shifted_by24_2": 1,
                    "shifted_input": 1,
                    "shifted_input2": 8,
                    "shifted_input_2": 2,
                    "shifted_result": 1,
                    "shifted_value2": 2,
                    "sign2": 1,
                    "sign_bit2": 1
                },
                "param_1": {
                    "a": 1,
                    "dividend": 1,
                    "input1": 18,
                    "input_1": 3,
                    "input_float1": 2,
                    "input_float_1": 1,
                    "input_value1": 1,
                    "num1": 1,
                    "operand1": 1,
                    "value1": 2
                },
                "param_2": {
                    "b": 1,
                    "divisor": 1,
                    "input2": 18,
                    "input_2": 3,
                    "input_float2": 2,
                    "input_float_2": 1,
                    "input_value2": 1,
                    "num2": 1,
                    "operand2": 1,
                    "value2": 2
                },
                "param_3": {
                    "c": 1,
                    "input3": 11,
                    "input_3": 2,
                    "input_flag": 1,
                    "input_integer1": 1,
                    "input_param_3": 1,
                    "modifier": 2,
                    "param3": 4,
                    "param_3": 1,
                    "precision": 1,
                    "rounding_mode": 1,
                    "sign1": 1,
                    "some_value": 1,
                    "undefined_param": 1,
                    "value": 1,
                    "value3": 1
                },
                "param_4": {
                    "current_value": 1,
                    "d": 1,
                    "flag": 1,
                    "input3": 1,
                    "input4": 11,
                    "input_3": 1,
                    "input_4": 2,
                    "input_float3": 1,
                    "input_float_4": 1,
                    "input_integer2": 1,
                    "input_value3": 1,
                    "operation": 1,
                    "param4": 3,
                    "param_4": 1,
                    "result": 1,
                    "shift_value": 1,
                    "sign2": 1,
                    "value4": 1
                },
                "uVar3": {
                    "abs_dividend": 1,
                    "b_shifted": 1,
                    "bit_mask": 1,
                    "converted_input1": 1,
                    "float1": 1,
                    "fractional_part1": 1,
                    "input1_float_bits": 1,
                    "input_float2_shifted": 1,
                    "mantissa1": 1,
                    "normalized_input1": 2,
                    "result": 4,
                    "result1": 3,
                    "result_1": 1,
                    "result_float_1": 1,
                    "result_value1": 2,
                    "shifted_input2": 1,
                    "shifted_result": 2,
                    "shifted_temp": 1,
                    "temp1": 2,
                    "u_var3": 1,
                    "value1": 1,
                    "value1_mantissa": 1
                },
                "uVar4": {
                    "a_shifted": 1,
                    "abs_result": 1,
                    "converted_input2": 1,
                    "float2": 1,
                    "fractional_part2": 1,
                    "input1_float_bits_shifted": 1,
                    "input_1_shifted": 1,
                    "input_float1_shifted": 1,
                    "mantissa2": 1,
                    "normalized_input2": 2,
                    "param1_shifted": 1,
                    "result": 3,
                    "result1": 1,
                    "result2": 3,
                    "result_2": 1,
                    "result_shifted1": 1,
                    "result_value2": 1,
                    "shifted_input1": 2,
                    "temp1": 2,
                    "temp2": 1,
                    "temp_1": 1,
                    "temp_float_1": 1,
                    "temp_value1": 1,
                    "value2": 1
                },
                "uVar5": {
                    "abs_shift": 1,
                    "count": 2,
                    "count1": 1,
                    "exponent": 1,
                    "loop_counter": 1,
                    "min_val": 1,
                    "normalized_input_diff": 1,
                    "result2": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shifted_bit_diff": 1,
                    "shifted_bits": 1,
                    "shifted_input1": 1,
                    "shifted_input1_corrected": 1,
                    "shifted_input_count": 1,
                    "shifted_mantissa": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_2": 1,
                    "temp_float_2": 1,
                    "temp_result": 1,
                    "temp_value1": 1,
                    "temp_value2": 1,
                    "temporary1": 1,
                    "u_var5": 4
                },
                "uVar6": {
                    "abs_bit_diff": 1,
                    "abs_diff": 1,
                    "abs_normalized_input_diff": 1,
                    "count2": 1,
                    "diff": 1,
                    "difference": 12,
                    "shift_difference": 1,
                    "shifted_diff": 1,
                    "shifted_input2": 1,
                    "shifted_input_offset": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "temporary2": 1,
                    "u_var6": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nuint calculate_new_float_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result;\n  uint result;\n  uint u_var5;\n  uint difference;\n  bool is_zero;\n  \n  result = input1 << 1;\n  is_zero = result == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result == input4;\n  }\n  shifted_input1 = (int)result >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result = input2;\n      if (shifted_input1 == -1) {\n        result = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result;\n      }\n      is_zero = (result & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result == input2;\n      }\n      if (!is_zero) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      result = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result = result | 0x80000000;\n      }\n      return result;\n    }\n    if (result < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result;\n  is_zero = difference != 0;\n  u_var5 = result;\n  if (is_zero && result <= input4) {\n    u_var5 = result + difference;\n  }\n  if (is_zero && result <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (u_var5 == difference) {\n    result = result ^ 0x800000;\n    if (u_var5 == 0) {\n      result = result ^ 0x800000;\n      u_var5 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_zero = result != 0;\n    result = -result;\n    result = -result - (uint)is_zero;\n  }\n  if (result < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    result = result * 2 + (uint)(difference != 0);\n    difference = u_var5 - 2;\n    if ((result & 0x800000) == 0) {\n      u_var5 = leading_zero_count(result) - 8;\n      result = result << (u_var5 & 0xff);\n      if ((int)difference < (int)u_var5) {\n        result = result >> (-(difference - u_var5) & 0xff);\n      }\n      else {\n        result = result + (difference - u_var5) * 0x800000;\n      }\n      return result | input1;\n    }\n  }\n  else {\n    difference = u_var5 - 1;\n    if (0xffffff < result) {\n      difference = result & 1;\n      result = result >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = u_var5;\n      if (0xfd < u_var5) goto LAB_08000bde;\n    }\n  }\n  result = result + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input1;\n}\n\n",
            "current_name": "calculate_new_float_08000aa8",
            "entrypoint": "0x08000aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa8": "calculate_new_float_08000aa8",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result",
                "uVar4": "result",
                "uVar5": "u_var5",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c08": {
            "additional_data": {
                "FUN_08000c08": {
                    "calculate_bitwise_shift": 1,
                    "calculate_modified_value": 3,
                    "calculate_new_number": 1,
                    "calculate_new_value": 2,
                    "calculate_output_value": 1,
                    "calculate_result": 3,
                    "calculate_shifted_value": 1,
                    "calculate_unsigned_value": 1,
                    "calculate_value": 2,
                    "compute_hash": 1,
                    "count_and_shift": 1,
                    "count_bits": 1,
                    "count_leading_zeros": 1,
                    "count_trailing_zeros": 1,
                    "decode_and_adjust_value": 1,
                    "decode_integer": 3,
                    "decompress_data": 1,
                    "extract_and_process_bits": 1,
                    "process_data": 1,
                    "reverse_bits": 4
                },
                "decoded_integer": {
                    "result": 1
                },
                "iVar3": {
                    "adjustment_value": 1,
                    "base_offset": 1,
                    "base_value": 2,
                    "constant": 11,
                    "constant_factor": 1,
                    "constant_offset": 3,
                    "constant_value": 3,
                    "intermediate_value": 1,
                    "offset": 7,
                    "shift_multiplier": 1
                },
                "padded_shift": {
                    "shift_padded": 1
                },
                "param_1": {
                    "input": 11,
                    "input_data": 1,
                    "input_number": 1,
                    "input_value": 17,
                    "number": 1
                },
                "uVar1": {
                    "decompressed_data": 1,
                    "final_result": 2,
                    "leading_zero_count": 9,
                    "leading_zeroes": 4,
                    "leading_zeros": 10,
                    "modified_result": 1,
                    "result": 3,
                    "updated_value": 1
                },
                "uVar12": {
                    "shifted_value": 1
                },
                "uVar1_original": {
                    "leading_zeros_original": 1
                },
                "uVar2": {
                    "result": 1,
                    "shift": 1,
                    "shift_amount": 21,
                    "shift_count": 1,
                    "shift_value": 1,
                    "shifted_data": 1,
                    "shifted_input": 3,
                    "shifted_value": 1,
                    "temp2": 1
                },
                "uVar2_original": {
                    "shift_original": 1
                },
                "uVar3": {
                    "result": 1
                },
                "uVar4": {
                    "bit_check": 1,
                    "bit_mask": 2,
                    "carry": 1,
                    "carry_bit": 1,
                    "carry_flag": 1,
                    "check_value": 1,
                    "comparison_result": 1,
                    "comparison_value": 1,
                    "conditional_value": 1,
                    "flag": 1,
                    "mask": 12,
                    "mask_value": 1,
                    "overflow_check": 1,
                    "shifted_value": 1,
                    "temp": 2,
                    "temp_flag": 1,
                    "temp_value": 2
                },
                "uVar5": {
                    "result": 4,
                    "shifted_input": 1
                },
                "uVar6": {
                    "final_result": 1,
                    "result": 1,
                    "temp1": 1,
                    "temp_var": 1
                },
                "uVar7": {
                    "flag": 1,
                    "temp2": 1
                },
                "uVar8": {
                    "mask": 1
                },
                "uVar9": {
                    "shifted_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_modified_value_08000c08(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_modified_value_08000c08",
            "entrypoint": "0x08000c08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c08": "calculate_modified_value_08000c08",
                "iVar3": "constant",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c10": {
            "additional_data": {
                "FUN_08000c10": {
                    "calculate": 1,
                    "calculate_integer_result": 1,
                    "calculate_offset": 2,
                    "calculate_twos_complement": 1,
                    "calculate_unsigned": 1,
                    "compute_inverse": 1,
                    "compute_modified_value": 1,
                    "count_and_shift": 1,
                    "count_bits": 1,
                    "count_bits_with_conditions": 1,
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 3,
                    "count_ones_complement": 1,
                    "count_set_bits": 1,
                    "decode_and_transform": 2,
                    "decode_integer": 1,
                    "decode_number": 1,
                    "find_highest_bit_position": 1,
                    "reverse_and_scale": 1,
                    "reverse_and_shift_bits": 1,
                    "reverse_bits": 5,
                    "unsigned_to_signed": 2
                },
                "LZCOUNT": {
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 1
                },
                "iVar4": {
                    "computed_value": 1,
                    "intermediate_result": 1,
                    "intermediate_value": 1,
                    "offset": 2,
                    "result": 26
                },
                "param_1": {
                    "input": 16,
                    "input_number": 5,
                    "input_value": 7,
                    "number": 2,
                    "value": 1
                },
                "uVar1": {
                    "bit_count": 2,
                    "bit_position": 1,
                    "bits_count": 1,
                    "count": 2,
                    "leading_zeroes": 4,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 16,
                    "leading_zeros_count": 1,
                    "left_shifted": 1,
                    "mask": 1,
                    "num_bits": 1
                },
                "uVar2": {
                    "shift": 4,
                    "shift_amount": 24,
                    "shift_count": 1,
                    "shift_factor": 1,
                    "shifted_bits": 1
                },
                "uVar3": {
                    "is_negative": 6,
                    "sign": 2,
                    "sign_bit": 18,
                    "sign_mask": 1,
                    "signed_bit": 1,
                    "temp3": 1,
                    "temp_result": 1,
                    "truncate_result": 1
                },
                "uVar5": {
                    "temp_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "code": "\nuint reverse_and_shift_bits_08000c10(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "reverse_and_shift_bits_08000c10",
            "entrypoint": "0x08000c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c10": "reverse_and_shift_bits_08000c10",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "additional_data": {
                "FUN_08000cb8": {
                    "calculate_exponent": 1,
                    "calculate_float": 9,
                    "calculate_float_value": 3,
                    "calculate_floating_point": 9,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_value": 1,
                    "perform_float_operation": 1,
                    "perform_floating_point_operation": 1
                },
                "bVar10": {
                    "check_2": 1,
                    "cond2": 1,
                    "condition2": 5,
                    "condition_2": 1,
                    "flag2": 1,
                    "is_adjustment_needed": 1,
                    "is_borrow": 1,
                    "is_exponent_overflow": 1,
                    "is_negative": 14,
                    "is_negative_sum": 1,
                    "is_zero2": 1,
                    "overflow_flag": 1
                },
                "bVar9": {
                    "check_1": 1,
                    "cond1": 1,
                    "condition1": 5,
                    "condition_1": 1,
                    "flag1": 1,
                    "is_zero": 16,
                    "is_zero1": 2,
                    "is_zero_exponent": 1,
                    "is_zero_or_ff1": 1,
                    "is_zero_shift1": 1
                },
                "iVar4": {
                    "exponent_sum": 1,
                    "shifted_num1_plus_param4": 1,
                    "shifted_sum": 2,
                    "sum": 17,
                    "sum1": 1,
                    "sum_bits": 2,
                    "sum_of_shifted_bits": 1,
                    "sum_of_shifted_values": 1,
                    "sum_shift": 1,
                    "sum_shifted": 1,
                    "temp1": 1,
                    "temp2": 1
                },
                "iVar5": {
                    "adjusted_sum": 1,
                    "diff": 6,
                    "diff_bits": 2,
                    "diff_from127": 1,
                    "difference": 8,
                    "exponent_diff": 1,
                    "normalized_sum": 1,
                    "offset1": 1,
                    "shift2": 1,
                    "shifted_diff": 1,
                    "shifted_sum": 1,
                    "sum_adjusted": 1,
                    "sum_diff": 1,
                    "sum_shift_adjusted": 1,
                    "sum_temp": 1,
                    "temp2": 1,
                    "temp3": 1
                },
                "iVar7": {
                    "adjusted_sum_copy": 1,
                    "count": 1,
                    "diff2": 2,
                    "diff_from255": 1,
                    "diff_shifted": 1,
                    "difference2": 1,
                    "exponent_diff_abs": 1,
                    "loop_counter": 1,
                    "mul_diff_bits": 1,
                    "normalized_sum": 1,
                    "offset": 1,
                    "offset2": 1,
                    "remaining_bits": 1,
                    "shift2": 1,
                    "shift3": 1,
                    "shift_amount": 3,
                    "shift_amount2": 1,
                    "shifted_difference": 1,
                    "sum_diff_abs": 1,
                    "sum_shift_adjusted_normalized": 1,
                    "sum_temp2": 1,
                    "temp": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_difference": 2,
                    "temp_var": 1
                },
                "lVar1": {
                    "long_multiplication_result": 1,
                    "long_result": 1,
                    "product": 2,
                    "result1": 2
                },
                "param_1": {
                    "exponent1": 1,
                    "input1": 15,
                    "input_1": 2,
                    "input_a": 1,
                    "input_value1": 1,
                    "num1": 3,
                    "number1": 1,
                    "operand1": 2,
                    "value1": 5
                },
                "param_2": {
                    "exponent2": 1,
                    "input2": 15,
                    "input_2": 2,
                    "input_b": 1,
                    "input_value2": 1,
                    "num2": 3,
                    "number2": 1,
                    "operand2": 2,
                    "value2": 5
                },
                "param_3": {
                    "flag": 1,
                    "flag1": 1,
                    "input3": 11,
                    "input_c": 1,
                    "input_value3": 1,
                    "operation": 1,
                    "param3": 6,
                    "parameter3": 1,
                    "parameter_3": 1,
                    "rounding_mode": 1,
                    "temp1": 1,
                    "undefined": 1,
                    "undefined_param": 1,
                    "unused": 1,
                    "value3": 2
                },
                "param_4": {
                    "exception_flags": 1,
                    "flag2": 1,
                    "flags": 1,
                    "fraction": 1,
                    "input4": 11,
                    "input_3": 1,
                    "input_d": 1,
                    "num3": 1,
                    "operand3": 1,
                    "param4": 7,
                    "parameter4": 1,
                    "parameter_4": 1,
                    "temp2": 1,
                    "value4": 2
                },
                "uVar2": {
                    "result": 27,
                    "result2": 2,
                    "value2": 1
                },
                "uVar3": {
                    "bitwise_shifted1": 1,
                    "check_val_1": 1,
                    "exponent1": 1,
                    "exponent_operand1": 1,
                    "high_bits1": 1,
                    "input1_bit": 1,
                    "input1_shifted": 2,
                    "input_1_shifted": 1,
                    "operand1_high_byte": 1,
                    "result3": 1,
                    "shift1": 3,
                    "shift_amount1": 2,
                    "shift_bits": 1,
                    "shift_result1": 1,
                    "shift_value1": 1,
                    "shifted_a": 1,
                    "shifted_bits1": 1,
                    "shifted_num1": 1,
                    "shifted_value1": 3,
                    "temp1": 3,
                    "value1": 1,
                    "value1_shifted": 1
                },
                "uVar6": {
                    "calc_val_1": 1,
                    "low_bits": 1,
                    "mul_result": 1,
                    "mult_result": 2,
                    "multiplication_result": 3,
                    "multiplied_bits": 1,
                    "multiplied_result": 2,
                    "multiplied_value": 2,
                    "product": 3,
                    "product_lsb": 1,
                    "shifted_value1": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_product": 1,
                    "temp_result": 3
                },
                "uVar8": {
                    "adjusted_value": 1,
                    "bitwise_shifted2": 1,
                    "calc_val_2": 1,
                    "combined_result": 1,
                    "combined_value": 1,
                    "final_result": 2,
                    "masked_result": 2,
                    "product_msb": 1,
                    "result": 1,
                    "shift_value2": 1,
                    "shifted_bits": 1,
                    "shifted_input": 1,
                    "shifted_input2": 1,
                    "shifted_result": 1,
                    "shifted_value2": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_result": 6,
                    "temp_result_shifted": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_float_value_08000cb8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint shifted_value1;\n  int sum;\n  int difference;\n  uint temp2;\n  int shift_amount;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_value1 = input1 >> 0x17 & 0xff;\n  is_zero = shifted_value1 == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_value1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shifted_value1 == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((shifted_value1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = shifted_value1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      shifted_value1 = shifted_value1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shifted_value1 + input4;\n  temp_result = input1 ^ input2;\n  shifted_value1 = input1 << 9;\n  is_zero = shifted_value1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (shifted_value1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    shift_amount = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,difference);\n      shift_amount = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && shift_amount < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && shift_amount < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    temp2 = 0;\n    is_negative = SBORROW4(difference,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    shifted_value1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(shifted_value1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    temp2 = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | temp2 >> 0x1f;\n      temp2 = temp2 << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    shifted_value1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < temp2);\n      if (temp2 == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)shifted_value1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == SCARRY4(temp_result,0x19)) {\n      shifted_value1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      shifted_value1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shifted_value1 >> 1) + (uint)((byte)shifted_value1 & 1);\n      if ((temp2 | temp_result << 1) == 0) {\n        shifted_value1 = shifted_value1 & ~(temp_result >> 0x1f);\n      }\n      return shifted_value1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_value_08000cb8",
            "entrypoint": "0x08000cb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cb8": "calculate_float_value_08000cb8",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "shift_amount",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "shifted_value1",
                "uVar6": "temp2",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e20": {
            "additional_data": {
                "FUN_08000e20": {
                    "calculate_float": 9,
                    "calculate_float_from_int": 1,
                    "calculate_floating_point": 9,
                    "calculate_floating_point_value": 2,
                    "compute_floating_point": 1,
                    "convert_to_float": 1,
                    "floating_point_conversion": 1,
                    "perform_floating_point_operation": 1,
                    "process_float": 1,
                    "reverse_float": 1,
                    "reverse_float_bits": 1
                },
                "SBORROW4": {
                    "signed_borrow": 1
                },
                "SCARRY4": {
                    "signed_carry": 1
                },
                "bVar7": {
                    "check": 1,
                    "condition": 2,
                    "condition1": 8,
                    "flag1": 7,
                    "flag_1": 1,
                    "flag_var1": 1,
                    "is_upper_bit_value1_zero": 1,
                    "is_zero": 10
                },
                "bVar8": {
                    "b_var8": 1,
                    "carry_flag": 1,
                    "compare": 1,
                    "condition2": 9,
                    "flag2": 7,
                    "flag_2": 1,
                    "flag_var2": 1,
                    "is_carry": 1,
                    "is_neg": 1,
                    "is_negative": 3,
                    "is_overflow": 3,
                    "is_sum_overflow": 1,
                    "is_zerox_ff": 1
                },
                "bVar9": {
                    "b_var9": 1,
                    "borrow_flag": 1,
                    "carry": 2,
                    "condition": 1,
                    "condition3": 9,
                    "flag3": 7,
                    "flag_3": 1,
                    "flag_var3": 1,
                    "is_borrow": 2,
                    "is_carry": 3,
                    "is_carry_present": 1,
                    "is_underflow": 1,
                    "overflow": 1
                },
                "iVar10": {
                    "temp": 1
                },
                "iVar3": {
                    "bit_difference": 2,
                    "byte_difference": 1,
                    "diff": 4,
                    "diff_exponent": 1,
                    "difference": 10,
                    "exp_diff": 1,
                    "msb_difference": 1,
                    "temp3": 4,
                    "temp_3": 2,
                    "temp_int1": 1,
                    "temp_var3": 3,
                    "var3": 1
                },
                "iVar5": {
                    "adjusted_msb_difference": 1,
                    "bit_sum": 1,
                    "carry_result": 1,
                    "increment_value": 1,
                    "new_exp": 1,
                    "sum": 7,
                    "sum_difference": 1,
                    "sum_exponent": 1,
                    "sum_plus127": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp5": 4,
                    "temp_5": 2,
                    "temp_int2": 1,
                    "temp_var3": 1,
                    "temp_var5": 3,
                    "var2": 1,
                    "var5": 1
                },
                "param_1": {
                    "first_float": 1,
                    "first_param": 1,
                    "float1": 3,
                    "float_1": 1,
                    "float_a": 1,
                    "input1": 9,
                    "input_a": 3,
                    "input_float1": 1,
                    "input_value1": 4,
                    "mantissa_a": 1,
                    "num1": 2,
                    "value1": 4
                },
                "param_2": {
                    "float2": 3,
                    "float_2": 1,
                    "float_b": 1,
                    "input2": 9,
                    "input_b": 3,
                    "input_float2": 1,
                    "input_value2": 4,
                    "mantissa_b": 1,
                    "num2": 2,
                    "second_float": 1,
                    "second_param": 1,
                    "value2": 4
                },
                "param_3": {
                    "exponent_a": 1,
                    "input3": 4,
                    "input_c": 2,
                    "input_value3": 1,
                    "mask": 1,
                    "num3": 1,
                    "param3": 7,
                    "param_3": 2,
                    "param_c": 1,
                    "some_value": 1,
                    "temp1": 1,
                    "third_param": 1,
                    "undefined_parameter": 1,
                    "unknown": 1,
                    "unknown_parameter1": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "val1": 1,
                    "var3": 1
                },
                "param_4": {
                    "another_value": 1,
                    "control": 1,
                    "exponent_b": 1,
                    "flag": 1,
                    "float3": 1,
                    "float_3": 1,
                    "float_c": 1,
                    "fourth_param": 1,
                    "input3": 1,
                    "input4": 4,
                    "input_d": 2,
                    "input_value4": 1,
                    "num4": 1,
                    "param4": 5,
                    "param_4": 1,
                    "second_float_byte": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "temp2": 1,
                    "unknown_parameter2": 1,
                    "unused_parameter2": 1,
                    "val2": 1,
                    "var4": 1
                },
                "uVar1": {
                    "bit_mask1": 2,
                    "bitmask1": 1,
                    "dividend": 1,
                    "increment": 1,
                    "mask1": 1,
                    "msb_input_float2": 1,
                    "normalized_input2": 1,
                    "normalized_value1": 1,
                    "quotient": 2,
                    "remainder": 1,
                    "shifted_mant_a": 1,
                    "shifted_num2": 1,
                    "shifted_second_float": 1,
                    "shifted_value2": 2,
                    "temp1": 6,
                    "temp_1": 2,
                    "temp_uint1": 1,
                    "temp_var1": 4,
                    "var1": 1
                },
                "uVar11": {
                    "result": 1
                },
                "uVar12": {
                    "temp1": 1
                },
                "uVar13": {
                    "temp2": 1
                },
                "uVar14": {
                    "temp3": 1
                },
                "uVar2": {
                    "bit_mask2": 2,
                    "bitmask2": 1,
                    "exp1": 1,
                    "exponent1": 2,
                    "first_float_byte": 1,
                    "mask2": 1,
                    "msb_input_float1": 1,
                    "n1_bits": 1,
                    "normalized_input1": 1,
                    "normalized_value2": 1,
                    "shifted_input1": 1,
                    "shifted_mant_b": 1,
                    "shifted_num1": 1,
                    "shifted_value1": 1,
                    "temp1": 1,
                    "temp2": 5,
                    "temp_2": 2,
                    "temp_uint2": 1,
                    "temp_var2": 3,
                    "upper_bit_value2": 1,
                    "var2": 1
                },
                "uVar4": {
                    "byte_diff": 1,
                    "carry": 1,
                    "compare_value": 1,
                    "exponent2": 2,
                    "normalized_input1_shifted": 1,
                    "overflow_bits": 1,
                    "shifted_input2": 1,
                    "shifted_msb_difference": 1,
                    "shifted_value": 1,
                    "sum": 2,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 4,
                    "temp_4": 2,
                    "temp_uint3": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var4": 3,
                    "var1": 1,
                    "var4": 1
                },
                "uVar6": {
                    "result": 20,
                    "temp6": 4,
                    "temp_6": 2,
                    "temp_uint4": 1,
                    "temp_var6": 3,
                    "var6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004d78",
                "FUN_080049cc"
            ],
            "code": "\nuint calculate_floating_point_value_08000e20(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int sum;\n  uint result;\n  bool is_zero;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = signed_carry(difference,0x7f);\n      sum = difference + 0x7f;\n      is_zero = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && is_zero == condition3) {\n        condition3 = signed_borrow(0xff,sum);\n        is_zero = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && is_zero == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && is_zero == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow(sum,1);\n      temp4 = difference + 0x7e;\n      is_zero = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= temp2;\n      if (!is_zero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        is_zero = temp2 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      condition2 = signed_borrow(temp4,0xfd);\n      is_zero = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != condition2) {\n      is_zero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || is_zero != signed_carry(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || is_zero != signed_carry(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_value_08000e20",
            "entrypoint": "0x08000e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_value_08000e20",
                "SBORROW4": "signed_borrow",
                "SCARRY4": "signed_carry",
                "bVar7": "is_zero",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "iVar3": "difference",
                "iVar5": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f68": {
            "additional_data": {
                "FUN_08000f68": {
                    "calculate_bitwise_operators": 1,
                    "calculate_bitwise_result": 1,
                    "calculate_modulus_with_divisions": 1,
                    "calculate_param": 1,
                    "calculate_parameters": 1,
                    "calculate_result": 3,
                    "check_and_modify_params": 1,
                    "check_arithmetic_overflow": 1,
                    "check_integer_overflow": 2,
                    "check_multiplication_overflow": 1,
                    "check_overflow": 8,
                    "check_overflow_and_sign": 1,
                    "check_parameters": 1,
                    "check_unsigned_overflow": 1,
                    "compute_result": 1,
                    "double_uint_check": 1,
                    "multiply_and_check": 1,
                    "multiply_and_compare": 3,
                    "perform_integer_operations": 1
                },
                "bVar1": {
                    "dividend_negative": 1,
                    "is_combined_input_positive": 1,
                    "is_combined_negative": 3,
                    "is_negative": 17,
                    "is_negative_diff": 1,
                    "is_negative_result": 3,
                    "is_negative_value": 1,
                    "is_overflow": 2,
                    "is_positive": 1,
                    "is_xor_negative": 1
                },
                "bVar5": {
                    "are_inputs_zero": 1,
                    "dividend_modulus_zero": 1,
                    "is_combined_zero": 6,
                    "is_result_zero": 1,
                    "is_zero": 19,
                    "is_zero_combined_doubled_inputs": 1,
                    "is_zero_result": 1,
                    "is_zero_value": 1
                },
                "param_1": {
                    "a": 1,
                    "dividend": 1,
                    "input1": 7,
                    "input_1": 12,
                    "input_num_1": 1,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "num1": 1,
                    "number1": 1,
                    "output": 2,
                    "result": 2,
                    "value_1": 1
                },
                "param_1_doubled": {
                    "input_1_doubled_minus_2times_input_2": 1
                },
                "param_1_result": {
                    "result": 1
                },
                "param_1_shifted": {
                    "shifted_input1_based_on_input2_sign": 1
                },
                "param_2": {
                    "b": 1,
                    "divisor": 1,
                    "input2": 8,
                    "input_2": 12,
                    "input_num_2": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "num2": 2,
                    "number2": 1,
                    "output": 1,
                    "output_masked": 1,
                    "value_2": 1
                },
                "return": {
                    "result": 5
                },
                "return_value": {
                    "result": 1
                },
                "return_variable": {
                    "result": 1
                },
                "uVar2": {
                    "a_times_2": 1,
                    "dividend_multiplied": 1,
                    "double_input1": 2,
                    "double_input_1": 3,
                    "double_value_1": 1,
                    "doubled_input1": 2,
                    "doubled_input_1": 5,
                    "doubled_input_value_1": 1,
                    "input1_doubled": 1,
                    "input1_multiplied_by_2": 1,
                    "input1_times2": 1,
                    "input1_times_2": 1,
                    "input_1_double": 1,
                    "input_1_doubled": 1,
                    "input_1_multiplied": 1,
                    "input_1_times_2": 1,
                    "input_1_times_two": 1,
                    "multiplied_input1": 1,
                    "num1_doubled": 2,
                    "number1_doubled": 1,
                    "result_1": 1,
                    "shifted_num_1": 1
                },
                "uVar3": {
                    "b_times_2": 1,
                    "divisor_multiplied": 1,
                    "double_input2": 2,
                    "double_input_2": 3,
                    "double_value_2": 1,
                    "doubled_input2": 2,
                    "doubled_input_2": 5,
                    "doubled_input_value_2": 1,
                    "input2_doubled": 1,
                    "input2_multiplied_by_2": 1,
                    "input2_times2": 1,
                    "input2_times_2": 1,
                    "input_2_double": 1,
                    "input_2_doubled": 1,
                    "input_2_multiplied": 1,
                    "input_2_times_2": 1,
                    "input_2_times_two": 1,
                    "multiplied_input2": 1,
                    "num2_doubled": 2,
                    "number2_doubled": 1,
                    "result_2": 1,
                    "shifted_num_2": 1
                },
                "uVar4": {
                    "combined": 2,
                    "combined_doubled_inputs": 1,
                    "combined_input": 4,
                    "combined_inputs": 12,
                    "combined_nums": 2,
                    "combined_result": 1,
                    "combined_value": 1,
                    "combined_values": 2,
                    "combined_vars": 2,
                    "dividend_modulus": 1,
                    "merged_numbers": 1,
                    "merged_result": 1,
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08000fd0"
            ],
            "code": "\nuint check_integer_overflow_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint doubled_input_1;\n  uint doubled_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  doubled_input_1 = input_1 * 2;\n  doubled_input_2 = input_2 * 2;\n  if (((int)doubled_input_1 >> 0x18 == -1 || (int)doubled_input_2 >> 0x18 == -1) &&\n     ((((int)doubled_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)doubled_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = doubled_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = doubled_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && doubled_input_2 <= doubled_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || doubled_input_2 > doubled_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_integer_overflow_08000f68",
            "entrypoint": "0x08000f68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f68": "check_integer_overflow_08000f68",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "doubled_input_1",
                "uVar3": "doubled_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "additional_data": {
                "FUN_08000fc8": {
                    "call_other_function": 1,
                    "call_sub_function": 2,
                    "copy_and_return": 1,
                    "copy_function_arguments": 1,
                    "copy_parameters": 2,
                    "execute_function": 11,
                    "execute_translation": 1,
                    "extract_data": 1,
                    "perform_function": 1,
                    "reverse": 1,
                    "reverse_and_return": 1,
                    "reverse_params": 1
                },
                "FUN_08000fd0": {
                    "apply_transformation": 1,
                    "call_another_function": 1,
                    "call_sub_function": 2,
                    "call_subfunction": 1,
                    "copy_contents": 1,
                    "copy_data": 2,
                    "copy_memory": 1,
                    "copy_params": 1,
                    "execute_sub_function": 1,
                    "perform_operation": 1,
                    "perform_translation": 1,
                    "process_data": 2,
                    "reverse_helper": 1
                },
                "param_1": {
                    "arg1": 7,
                    "arg_1": 1,
                    "argument1": 1,
                    "argument_1": 1,
                    "data": 1,
                    "first_param": 1,
                    "input1": 6,
                    "input_1": 2,
                    "input_param": 2,
                    "input_param1": 1,
                    "input_parameter": 1,
                    "param1": 1,
                    "source": 4,
                    "source_param": 1,
                    "translation_param1": 1
                },
                "param_2": {
                    "arg2": 7,
                    "arg_2": 1,
                    "argument2": 1,
                    "argument_2": 1,
                    "destination": 4,
                    "destination_param": 1,
                    "input2": 6,
                    "input_2": 2,
                    "input_param2": 1,
                    "output_param": 2,
                    "output_parameter": 1,
                    "param2": 1,
                    "second_param": 1,
                    "target": 1,
                    "translation_param2": 1
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08001030"
            ],
            "code": "\nvoid execute_function_08000fc8(undefined4 arg1,undefined4 arg2)\n\n{\n  FUN_08000fd0(arg2,arg1);\n  return;\n}\n\n",
            "current_name": "execute_function_08000fc8",
            "entrypoint": "0x08000fc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fc8": "execute_function_08000fc8",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "additional_data": {
                "FUN_08000f68": {
                    "calculate_integer_concatenation": 1,
                    "combine_parameters": 3,
                    "combine_params": 6,
                    "combine_uint_params": 1,
                    "combine_values": 2,
                    "concatenate_numbers": 1,
                    "concatenate_values": 4,
                    "fun_call": 1,
                    "merge_params": 1,
                    "perform_concatenation": 5,
                    "reverse_bits": 1
                },
                "FUN_08000f68_param_1": {
                    "value1": 1
                },
                "FUN_08000f68_param_2": {
                    "value2": 1
                },
                "FUN_08000fd0": {
                    "combine_parameters": 2,
                    "concat_param": 1,
                    "concat_uint64": 1,
                    "concatenate_integers": 1,
                    "concatenate_param": 1,
                    "concatenate_parameters": 6,
                    "concatenate_params": 19
                },
                "param_1": {
                    "first_param": 14,
                    "first_parameter": 5,
                    "first_uint": 1,
                    "input_param": 1,
                    "int_param": 1,
                    "integer1": 1,
                    "param1": 3,
                    "param_1": 1,
                    "param_a": 1,
                    "parameter1": 1,
                    "value_1": 2
                },
                "param_2": {
                    "another_int_param": 1,
                    "integer2": 1,
                    "param2": 3,
                    "param_2": 1,
                    "param_b": 1,
                    "parameter2": 1,
                    "second_param": 14,
                    "second_parameter": 5,
                    "second_uint": 1,
                    "value_2": 2,
                    "value_param": 1
                }
            },
            "called": [
                "FUN_08000f68"
            ],
            "calling": [
                "FUN_08000ff4",
                "FUN_08000fc8"
            ],
            "code": "\nundefined8 concatenate_params_08000fd0(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_08000f68();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_08000fd0",
            "entrypoint": "0x08000fd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fd0": "concatenate_params_08000fd0",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "additional_data": {
                "FUN_08000fd0": {
                    "call_fun_08000fd0": 1,
                    "execute_subfunction": 1,
                    "initialize": 2,
                    "initialize_in_cy": 1,
                    "initialize_input_string": 1,
                    "initialize_parameters": 1,
                    "initialize_variables": 2
                },
                "FUN_08000ff4": {
                    "check_for_null": 1,
                    "check_for_null_termination": 2,
                    "check_if_char_is_null": 1,
                    "check_if_in_cy_is_null": 3,
                    "check_if_input_is_empty": 1,
                    "check_if_null_terminated": 2,
                    "check_if_string_empty": 2,
                    "check_if_string_is_empty": 1,
                    "check_null_terminated": 1,
                    "check_termination": 1,
                    "is_cy_null": 6,
                    "is_in_cy_null": 2,
                    "is_input_string_empty": 1,
                    "is_null_byte_present": 1,
                    "is_null_terminated": 3,
                    "is_string_empty": 1
                },
                "in_CY": {
                    "char_in_cy": 1,
                    "char_to_check": 2,
                    "character": 1,
                    "current_char": 1,
                    "cy": 1,
                    "input_char": 8,
                    "input_character": 12,
                    "input_cy": 1,
                    "input_string": 1,
                    "input_value": 1,
                    "input_variable": 1,
                    "is_null": 1
                },
                "param_1": {
                    "param_1": 1
                },
                "param_2": {
                    "param_2": 1
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool check_if_in_cy_is_null_08000ff4(void)\n\n{\n  char input_character;\n  \n  FUN_08000fd0();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_in_cy_is_null_08000ff4",
            "entrypoint": "0x08000ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ff4": "check_if_in_cy_is_null_08000ff4",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001030": {
            "additional_data": {
                "FUN_08000fc8": {
                    "call_some_function": 1,
                    "initialize": 2,
                    "initialize_cy": 1,
                    "perform_additional_operations": 1
                },
                "FUN_08001030": {
                    "check_if_char_is_null": 1,
                    "check_if_cy_is_null": 2,
                    "check_if_empty": 1,
                    "check_if_empty_string": 1,
                    "check_if_input_empty": 2,
                    "check_if_input_is_empty": 3,
                    "check_if_input_is_null": 1,
                    "check_if_null_terminated": 2,
                    "check_if_null_terminator": 1,
                    "check_if_null_terminator_present": 1,
                    "check_if_string_empty": 1,
                    "check_if_string_is_empty": 1,
                    "check_null_termination": 3,
                    "check_string_null_terminated": 1,
                    "check_value": 1,
                    "is_cy_null": 4,
                    "is_end_of_input": 1,
                    "is_in_cy_null": 2,
                    "is_null_terminated": 1,
                    "is_string_empty": 1
                },
                "in_CY": {
                    "char_value": 1,
                    "character": 1,
                    "cy": 2,
                    "cy_flag": 1,
                    "in_cy": 1,
                    "input": 1,
                    "input_char": 7,
                    "input_character": 15,
                    "input_cy": 1,
                    "input_string": 1
                },
                "param_1": {
                    "parameter_1": 1
                },
                "param_2": {
                    "parameter_2": 1
                }
            },
            "called": [
                "FUN_08000fc8"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool check_if_char_is_null_08001030(void)\n\n{\n  char input_character;\n  \n  FUN_08000fc8();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_char_is_null_08001030",
            "entrypoint": "0x08001030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001030": "check_if_char_is_null_08001030",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001044": {
            "additional_data": {
                "0x18": {
                    "shift_amount": 1
                },
                "0x7f000000": {
                    "maximum_value": 1
                },
                "0x7fffff": {
                    "mask_remaining_bits": 1
                },
                "0x80000000": {
                    "constant_b": 1
                },
                "0x9e": {
                    "constant_a": 1
                },
                "0xff": {
                    "mask_lsb": 1
                },
                "0xffffff9f": {
                    "comparison": 1
                },
                "FUN_08001044": {
                    "binary_shift_and_mask": 1,
                    "calculate_shifted_result": 1,
                    "calculate_shifted_value": 6,
                    "check_and_shift": 1,
                    "check_overflow": 1,
                    "decode_and_extract_value": 1,
                    "decode_and_shift": 1,
                    "decode_integer": 1,
                    "decode_number": 2,
                    "decode_value": 2,
                    "extract_and_shift_bits": 1,
                    "extract_bitfield": 1,
                    "extract_bits": 2,
                    "reverse_and_shift": 1,
                    "reverse_bits": 6,
                    "reverse_shift": 1,
                    "shift_and_mask": 1
                },
                "param_1": {
                    "input": 10,
                    "input_number": 2,
                    "input_value": 18,
                    "value": 1
                },
                "uVar1": {
                    "result": 4,
                    "shift_amount": 20,
                    "shift_bits": 1,
                    "shift_count": 2,
                    "shifted_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint extract_and_shift_bits_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "extract_and_shift_bits_08001044",
            "entrypoint": "0x08001044",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001044": "extract_and_shift_bits_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001084": {
            "additional_data": {
                "FUN_08001084": {
                    "copy_buffer_data": 1,
                    "copy_data": 2,
                    "copy_memory": 27
                },
                "LAB_08001108": {
                    "copy_half": 1,
                    "copy_remaining_bytes": 1,
                    "tail_memory_copy": 1
                },
                "bVar6": {
                    "": 1,
                    "continue_loop": 1,
                    "copy_flag": 1,
                    "is_copy_needed": 1,
                    "is_copy_possible": 1,
                    "is_inner_count_zero": 1,
                    "is_looping": 1,
                    "is_rem_len_positive": 1,
                    "is_remainder": 1,
                    "is_remaining": 6,
                    "is_remaining_length_divisible_by16": 1,
                    "is_remaining_size": 2,
                    "is_remaining_size_positive": 2,
                    "is_tail": 1,
                    "loop_condition": 9,
                    "loop_done": 1
                },
                "param_1": {
                    "dest": 4,
                    "destination": 27
                },
                "param_2": {
                    "source": 27,
                    "src": 4
                },
                "param_3": {
                    "bytes_to_copy": 1,
                    "count": 1,
                    "length": 9,
                    "num_bytes": 1,
                    "size": 19
                },
                "puVar1": {
                    "": 1,
                    "d_ptr": 1,
                    "dest": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 20,
                    "destination_ptr": 1,
                    "dst_ptr": 5
                },
                "puVar2": {
                    "d_curr_ptr": 1,
                    "dest": 2,
                    "dest_end_ptr": 1,
                    "dest_iter": 1,
                    "dest_next_ptr": 1,
                    "dest_ptr": 5,
                    "dest_ptr_end": 2,
                    "dest_ptr_next": 1,
                    "dest_ptr_start": 1,
                    "dest_ptr_temp": 2,
                    "dest_start": 1,
                    "dest_start_ptr": 1,
                    "dst": 4,
                    "dst_ptr_aligned": 2,
                    "dst_ptr_end": 1,
                    "new_dest_ptr": 1,
                    "source_ptr": 1,
                    "src_pointer": 1,
                    "src_ptr": 2
                },
                "puVar3": {
                    "dst_end": 1,
                    "s_curr_ptr": 1,
                    "source_ptr": 2,
                    "src": 6,
                    "src_iter": 1,
                    "src_pointer": 1,
                    "src_ptr": 15,
                    "src_start_ptr": 1,
                    "temp_ptr": 2,
                    "tmp_pointer": 1
                },
                "uVar4": {
                    "bytes_remaining": 2,
                    "loop_count": 1,
                    "remainder_size": 1,
                    "remaining": 3,
                    "remaining_bytes": 2,
                    "remaining_length": 5,
                    "remaining_size": 15,
                    "repeated_blocks": 1,
                    "temp_count": 1
                },
                "uVar5": {
                    "byte_count": 1,
                    "bytes_copied": 1,
                    "bytes_to_copy": 3,
                    "bytes_to_move": 1,
                    "copy_length": 1,
                    "copy_size": 3,
                    "cpy_size": 1,
                    "inner_count": 1,
                    "inner_remaining_size": 1,
                    "loop_count": 1,
                    "loop_size": 2,
                    "offset": 1,
                    "rem_len": 1,
                    "remainder_size": 1,
                    "remaining_bytes2": 1,
                    "remaining_bytes_mod4": 1,
                    "remaining_length_mod16": 1,
                    "remaining_size": 2,
                    "remaining_temp": 1,
                    "tail_length": 1,
                    "temp_length": 1,
                    "temp_size": 1,
                    "tmp_size": 1,
                    "unrolled_size": 1,
                    "unrolling_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009120",
                "FUN_080079e8",
                "FUN_080097cc"
            ],
            "code": "\nundefined4 * copy_memory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint bytes_to_copy;\n  bool loop_condition;\n  \n  dest_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      bytes_to_copy = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = dest_ptr;\n          loop_condition = bytes_to_copy != 0;\n          bytes_to_copy = bytes_to_copy - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto tail_memory_copy;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      bytes_to_copy = 4 - ((uint)destination & 3);\n      size = size - bytes_to_copy;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_ptr = dest_ptr;\n      source = src_ptr;\n      if ((bytes_to_copy & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest_ptr = *source;\n    dest_ptr[1] = source[1];\n    dest_ptr[2] = source[2];\n    dest_ptr[3] = source[3];\n    dest_ptr[4] = source[4];\n    dest_ptr[5] = source[5];\n    dest_ptr[6] = source[6];\n    dest_ptr[7] = source[7];\n    dest_ptr[8] = source[8];\n    dest_ptr[9] = source[9];\n    dest_ptr[10] = source[10];\n    dest_ptr[0xb] = source[0xb];\n    dest_ptr[0xc] = source[0xc];\n    dest_ptr[0xd] = source[0xd];\n    dest_ptr[0xe] = source[0xe];\n    dest_ptr[0xf] = source[0xf];\n    dest_ptr = dest_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest_ptr = *source;\n      dest_ptr[1] = source[1];\n      dest_ptr[2] = source[2];\n      dest_ptr[3] = source[3];\n      dest_ptr = dest_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  bytes_to_copy = remaining_size + 0xc;\n  src_ptr = dest_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < bytes_to_copy;\n      bytes_to_copy = bytes_to_copy - 4;\n      dest_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ntail_memory_copy:\n  if (bytes_to_copy + 4 != 0) {\n    dest_ptr = dest_ptr;\n    src_ptr = source;\n    if ((bytes_to_copy & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = *(undefined *)source;\n    }\n    if ((bytes_to_copy + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_08001084",
            "entrypoint": "0x08001084",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001084": "copy_memory_08001084",
                "LAB_08001108": "tail_memory_copy",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "bytes_to_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001170": {
            "additional_data": {
                "FUNC_checkParameters": {
                    "check_parameters": 1
                },
                "FUN_08001170": {
                    "check_bit_pattern": 1,
                    "check_conditions": 1,
                    "check_input_parameters": 1,
                    "check_param_validity": 1,
                    "check_parameters": 14,
                    "check_parameters_validity": 1,
                    "check_params": 6,
                    "check_params_and_return": 1,
                    "check_valid_input": 1,
                    "is_valid_parameters": 1,
                    "is_valid_params": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 7,
                    "input_1": 5,
                    "input_bit_1": 1,
                    "input_param": 1,
                    "input_value_1": 1,
                    "num1": 2,
                    "param1": 1,
                    "value1": 7,
                    "value_1": 5
                },
                "param_2": {
                    "input2": 7,
                    "input_2": 5,
                    "input_bit_2": 1,
                    "input_value_2": 1,
                    "num2": 2,
                    "param2": 1,
                    "second_param": 1,
                    "shifted_param": 1,
                    "value2": 7,
                    "value_2": 5
                },
                "param_3": {
                    "additional_param": 1,
                    "input3": 7,
                    "input_3": 5,
                    "input_bit_3": 1,
                    "input_value_3": 1,
                    "num3": 2,
                    "param3": 1,
                    "third_param": 1,
                    "value3": 7,
                    "value_3": 5
                },
                "param_4": {
                    "fourth_param": 1,
                    "input4": 7,
                    "input_4": 5,
                    "input_bit_4": 1,
                    "input_value_4": 1,
                    "num4": 2,
                    "param4": 1,
                    "shifted_additional_param": 1,
                    "value4": 7,
                    "value_4": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 check_parameters_validity_08001170(uint value1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((value1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_validity_08001170",
            "entrypoint": "0x08001170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001170": "check_parameters_validity_08001170",
                "param_1": "value1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800119c": {
            "additional_data": {
                "FUN_0800119c": {
                    "calculate": 1,
                    "calculate_capped_division": 1,
                    "calculate_parameter_value": 1,
                    "calculate_result": 1,
                    "calculate_shift_amount": 1,
                    "calculate_unsigned_division": 1,
                    "calculate_value": 1,
                    "convert_and_scale": 1,
                    "convert_integer": 1,
                    "convert_to_integer": 1,
                    "convert_uint": 1,
                    "convert_unsigned_to_signed": 1,
                    "convert_value": 1,
                    "extract_and_convert": 1,
                    "filter_values": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_calculation": 2,
                    "reverse_and_normalize": 1,
                    "reverse_bits": 4,
                    "reverse_calculation": 2,
                    "reverse_computation": 1,
                    "transform_values": 1
                },
                "iVar2": {
                    "adjusted_divisor": 1,
                    "adjusted_value": 1,
                    "calculated_value": 1,
                    "calculation": 1,
                    "calculation_result": 1,
                    "modified_param_2": 1,
                    "multiplied_value": 4,
                    "multiplier": 1,
                    "offset": 3,
                    "result2": 2,
                    "scaled_result": 1,
                    "shifted_offset": 1,
                    "shifted_sum": 1,
                    "shifted_value": 2,
                    "shifted_value2": 1,
                    "shifted_value_plus": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_var1": 2,
                    "temp_var2": 1
                },
                "param_1": {
                    "dividend": 2,
                    "input1": 9,
                    "input_1": 1,
                    "input_param_1": 1,
                    "input_parameter1": 1,
                    "input_value": 6,
                    "input_value1": 7,
                    "input_value_1": 1,
                    "num1": 1,
                    "number": 1,
                    "value1": 1
                },
                "param_2": {
                    "bit_count": 2,
                    "divisor": 2,
                    "input2": 9,
                    "input_param_2": 1,
                    "input_shift": 1,
                    "input_value2": 3,
                    "input_value_2": 1,
                    "max_int": 1,
                    "modified_input_value2": 1,
                    "modified_value": 1,
                    "multiplier": 2,
                    "new_value": 1,
                    "num2": 1,
                    "result12": 1,
                    "result7": 1,
                    "shift_count": 1,
                    "shift_value": 1,
                    "updated_parameter2": 1
                },
                "uVar1": {
                    "modified_result": 1,
                    "quotient": 1,
                    "result": 5,
                    "result1": 1,
                    "result2": 1,
                    "result6": 1,
                    "scaled_value": 1,
                    "shift_amount": 1,
                    "shifted_input": 1,
                    "shifted_quotient": 1,
                    "shifted_result": 2,
                    "shifted_value": 6,
                    "temp1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "transformed_value": 1,
                    "updated_result1": 1
                },
                "uVar3": {
                    "adjusted_value": 2,
                    "constrained_value": 1,
                    "mask_value": 1,
                    "modified_value": 1,
                    "new_offset": 1,
                    "new_result": 1,
                    "normalized_offset": 1,
                    "offset": 1,
                    "overflow_check": 1,
                    "result11": 1,
                    "result3": 1,
                    "result5": 1,
                    "result_modification": 1,
                    "shift": 1,
                    "shift_amount": 4,
                    "shifted_difference": 2,
                    "shifted_remainder": 1,
                    "temp3": 1,
                    "temp_value": 1,
                    "temp_var3": 2,
                    "threshold": 1,
                    "updated_result3": 1
                },
                "uVar4": {
                    "masked_shifted_value": 1,
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nuint reverse_bits_0800119c(uint input1,uint input2)\n\n{\n  uint shifted_value;\n  int multiplied_value;\n  uint shift_amount;\n  \n  multiplied_value = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < multiplied_value) {\n      return 0;\n    }\n    shifted_value = multiplied_value >> 0x15;\n    shift_amount = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "current_name": "reverse_bits_0800119c",
            "entrypoint": "0x0800119c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800119c": "reverse_bits_0800119c",
                "iVar2": "multiplied_value",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shifted_value",
                "uVar3": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011ec": {
            "additional_data": {
                "CONCAT44": {
                    "combine_integers": 1,
                    "combine_params": 1
                },
                "FUN_080011ec": {
                    "check_and_return_result": 1,
                    "check_error_code": 1,
                    "check_parameters": 3,
                    "combine_params": 2,
                    "concat_params": 1,
                    "concatenate_params": 2,
                    "concatenate_values": 1,
                    "extract_result": 1,
                    "extracted_data": 2,
                    "get_concatenated_params": 3,
                    "get_concatenated_values": 1,
                    "merge_params": 1,
                    "process_parameters": 3,
                    "process_params": 5,
                    "reverse_and_combine_params": 1,
                    "reverse_and_combine_values": 1
                },
                "FUN_0800121c": {
                    "calculate_result": 3,
                    "concatenate_params": 1,
                    "helper_function": 1,
                    "process_data": 2
                },
                "param_1": {
                    "error_code1": 1,
                    "first_param": 2,
                    "first_parameter": 1,
                    "input1": 12,
                    "input_1": 2,
                    "input_param_1": 2,
                    "input_value_1": 1,
                    "item1": 1,
                    "value1": 6,
                    "value_1": 2,
                    "width": 1
                },
                "param_2": {
                    "error_code2": 1,
                    "height": 1,
                    "input2": 12,
                    "input_2": 2,
                    "input_param_2": 2,
                    "input_value_2": 1,
                    "item2": 1,
                    "second_param": 2,
                    "second_parameter": 1,
                    "value2": 6,
                    "value_2": 2
                },
                "param_3": {
                    "condition1": 2,
                    "error_code3": 1,
                    "input3": 8,
                    "input_3": 2,
                    "input_param_3": 2,
                    "input_value_3": 1,
                    "item3": 1,
                    "param3": 2,
                    "param_a": 1,
                    "third_param": 2,
                    "third_parameter": 1,
                    "value3": 6,
                    "value_3": 2
                },
                "param_4": {
                    "condition2": 2,
                    "error_code4": 1,
                    "fourth_param": 2,
                    "fourth_parameter": 1,
                    "input4": 8,
                    "input_4": 2,
                    "input_param_4": 2,
                    "input_value_4": 1,
                    "item4": 1,
                    "param4": 2,
                    "param_b": 1,
                    "value4": 6,
                    "value_4": 2
                },
                "uVar1": {
                    "concatenated_values": 1,
                    "result": 20
                }
            },
            "called": [
                "FUN_0800121c"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 process_params_080011ec(int input1,int input2,int input3,int input4)\n\n{\n  undefined8 result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input2 = -1;\n      input1 = -1;\n    }\n    return combine_params(input2,input1);\n  }\n  result = FUN_0800121c();\n  return result;\n}\n\n",
            "current_name": "process_params_080011ec",
            "entrypoint": "0x080011ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_params",
                "FUN_080011ec": "process_params_080011ec",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800121c": {
            "additional_data": {
                "FUN_0800121c": {
                    "calculate_bitwise_operations": 1,
                    "calculate_div_mod": 2,
                    "calculate_division": 5,
                    "calculate_division_and_remainder": 4,
                    "calculate_division_remainder": 2,
                    "calculate_parameters": 1,
                    "calculate_quotient_and_remainder": 1,
                    "calculate_quotient_remainder": 1,
                    "calculate_remainder": 3,
                    "calculate_unsigned_division": 1,
                    "compute_remainder_and_quotient": 1,
                    "div_mod": 2,
                    "modified_function": 1,
                    "perform_division": 5,
                    "perform_unsigned_division": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jump_table": 3
                },
                "bVar13": {
                    "carry": 6,
                    "carry_bit": 1,
                    "carry_bool": 1,
                    "carry_flag": 14,
                    "has_carry": 1,
                    "is_carry": 2
                },
                "bVar14": {
                    "is_lower_part_carry": 1
                },
                "bVar15": {
                    "is_upper_part_carry": 1
                },
                "iVar5": {
                    "bit_count": 1,
                    "bit_shift_count": 1,
                    "bits_shifted": 1,
                    "leading_zero_count": 1,
                    "shift": 3,
                    "shift_amount": 9,
                    "shift_bits": 1,
                    "shift_count": 5
                },
                "param_1": {
                    "dividend": 28,
                    "input1": 1,
                    "input_1": 1,
                    "input_dividend": 1
                },
                "param_2": {
                    "dividend_high": 4,
                    "dividend_low": 3,
                    "dividend_lower": 1,
                    "dividend_lower_16": 1,
                    "dividend_lower_32": 1,
                    "dividend_lower_half": 1,
                    "dividend_temp": 1,
                    "dividend_upper": 4,
                    "dividend_upper32": 1,
                    "dividend_upper_bits": 1,
                    "divisor": 9,
                    "divisor1": 1,
                    "input2": 1,
                    "input_2": 1,
                    "input_divisor": 1
                },
                "param_3": {
                    "bit_size": 1,
                    "dividend_low": 1,
                    "divisor": 15,
                    "divisor2": 1,
                    "divisor_high": 2,
                    "divisor_lower16": 1,
                    "divisor_lower_32": 1,
                    "divisor_upper_half": 1,
                    "quotient": 5,
                    "quotient1": 1,
                    "shift_divisor": 1,
                    "shift_value": 1
                },
                "param_4": {
                    "compare_value": 1,
                    "comparison_val": 1,
                    "divider": 1,
                    "divisor": 1,
                    "divisor_copy": 1,
                    "divisor_high": 4,
                    "divisor_low": 3,
                    "divisor_lower": 1,
                    "divisor_lower_16": 1,
                    "divisor_lower_half": 1,
                    "divisor_mask": 1,
                    "divisor_upper": 3,
                    "divisor_upper16": 1,
                    "divisor_upper_32": 1,
                    "divisor_upper_bits": 1,
                    "quotient2": 1,
                    "remainder": 5,
                    "remainder_divisor1": 1,
                    "shift_subtraction": 1
                },
                "param_5": {
                    "new_dividend_remainder": 1,
                    "output": 3,
                    "quotient": 1,
                    "quotient_and_remainder": 1,
                    "quotient_and_remainder_array": 1,
                    "quotient_remainder": 1,
                    "remainder": 15,
                    "remainder_and_quotient": 1,
                    "remainder_quotient": 1,
                    "result": 4,
                    "result_array": 2
                },
                "puVar9": {
                    "pointer_result_array": 1,
                    "remainder_ptr": 1
                },
                "uVar1": {
                    "division_result": 1,
                    "mul_result": 1,
                    "multiply_result": 1,
                    "numerator": 1,
                    "partial_quotient": 1,
                    "prod": 1,
                    "product": 8,
                    "quotient": 4,
                    "quotient_and_remainder": 1,
                    "quotient_high": 1,
                    "result": 1,
                    "result_value": 1,
                    "temp": 5,
                    "temp_mul": 1,
                    "temp_result": 2,
                    "temp_var_1": 1
                },
                "uVar10": {
                    "dividend_low": 1,
                    "first_quotient": 1,
                    "operand3": 1,
                    "partial_quotient": 2,
                    "preliminary_quotient": 1,
                    "quotient1": 4,
                    "quotient1_2": 1,
                    "quotient4": 1,
                    "quotient_half2": 1,
                    "quotient_low1": 1,
                    "quotient_low2": 1,
                    "quotient_part": 1,
                    "quotient_partial_1": 1,
                    "temp2": 3,
                    "temp3": 2,
                    "temp_10": 1,
                    "temp_mul2": 1,
                    "temp_quotient1": 2,
                    "temp_quotient_low": 1,
                    "temp_var_6": 1,
                    "temp_variable_5": 1
                },
                "uVar11": {
                    "dividend_half": 1,
                    "dividend_high": 1,
                    "divisor_high": 1,
                    "divisor_high_shifted": 1,
                    "divisor_upper16": 1,
                    "mult_result1": 1,
                    "operand4": 1,
                    "partial_remainder": 1,
                    "product1": 1,
                    "quotient1_high": 1,
                    "quotient2": 2,
                    "quotient_high2": 1,
                    "quotient_low2": 1,
                    "quotient_partial_2": 1,
                    "quotient_remainder": 1,
                    "remainder_combined": 1,
                    "second_quotient": 1,
                    "temp2_low": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_11": 1,
                    "temp_divisor": 1,
                    "temp_divisor_upper": 1,
                    "temp_mul3": 1,
                    "temp_quotient2": 1,
                    "temp_var_7": 1,
                    "temp_variable_6": 1,
                    "u_var11": 1
                },
                "uVar12": {
                    "dividend_temp2": 1,
                    "divisor_high_product": 1,
                    "mult_result2": 1,
                    "numerator_part1": 1,
                    "operand5": 1,
                    "product2": 1,
                    "product_high": 1,
                    "quotient2_2": 1,
                    "quotient_half_temp": 1,
                    "quotient_low3": 1,
                    "remainder_partial_1": 1,
                    "temp2": 1,
                    "temp2_high": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_12": 1,
                    "temp_diff2": 1,
                    "temp_low2": 1,
                    "temp_quotient": 1,
                    "temp_quotient1": 1,
                    "temp_quotient2": 1,
                    "temp_quotient3": 1,
                    "temp_quotient_high": 1,
                    "temp_quotient_upper": 1,
                    "temp_remainder": 1,
                    "temp_var_8": 1,
                    "temp_variable_7": 1
                },
                "uVar13": {
                    "carry_flag": 1,
                    "numerator_part2": 1,
                    "remainder_low": 1,
                    "temp": 1
                },
                "uVar14": {
                    "final_result": 1,
                    "remainder_high": 1,
                    "result": 18,
                    "return_val": 1,
                    "return_value": 6,
                    "u_var14": 1
                },
                "uVar2": {
                    "dividend_low": 2,
                    "dividend_lower": 1,
                    "dividend_quotient": 1,
                    "dividend_shifted": 1,
                    "divider1_16bits": 1,
                    "numerator_upper": 1,
                    "quotient": 7,
                    "quotient1": 4,
                    "quotient_half": 1,
                    "quotient_low": 5,
                    "quotient_lower_32": 1,
                    "quotient_step1": 1,
                    "quotient_upper_half": 1,
                    "result_lower": 1,
                    "shifted_divisor": 1,
                    "temp_quotient": 1,
                    "temp_var_2": 1
                },
                "uVar3": {
                    "dividend_ext": 1,
                    "dividend_temp": 1,
                    "divider2_16bits": 1,
                    "divisor_shifted": 1,
                    "partial_remainder": 1,
                    "quotient": 2,
                    "quotient2": 4,
                    "quotient_high": 4,
                    "quotient_low": 1,
                    "quotient_lower": 1,
                    "quotient_lower_half": 1,
                    "quotient_step2": 1,
                    "quotient_temp": 1,
                    "quotient_upper_32": 1,
                    "remainder": 1,
                    "remainder_quotient": 1,
                    "result_upper": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp_quotient1": 1,
                    "temp_remainder": 1,
                    "temp_value1": 1,
                    "temp_var_3": 1
                },
                "uVar4": {
                    "carry": 1,
                    "dividend_temp_high": 1,
                    "divisor_ext": 1,
                    "divisor_low": 1,
                    "divisor_lower": 1,
                    "divisor_remainder": 1,
                    "product_mask": 1,
                    "quotient3": 3,
                    "quotient_step3": 1,
                    "quotient_upper": 1,
                    "remainder": 2,
                    "temp": 1,
                    "temp2": 4,
                    "temp_32": 1,
                    "temp_divisor": 1,
                    "temp_high": 1,
                    "temp_low": 1,
                    "temp_product": 1,
                    "temp_quotient": 1,
                    "temp_quotient2": 1,
                    "temp_result": 1,
                    "temp_var_4": 1,
                    "temp_variable_1": 1,
                    "u_var4": 1
                },
                "uVar5": {
                    "dividend_bit_count": 1,
                    "mask": 1,
                    "shift_amount": 1,
                    "temp1": 1,
                    "temp_16": 1,
                    "temp_quotient": 1,
                    "temp_value2": 1
                },
                "uVar6": {
                    "combination_32": 1,
                    "combined_quotient": 2,
                    "combined_quotients": 2,
                    "combined_shifted": 1,
                    "final_quotient": 1,
                    "quotient": 5,
                    "quotient_bit_count": 1,
                    "quotient_combined": 1,
                    "quotient_combo": 1,
                    "quotient_full": 1,
                    "quotient_high": 1,
                    "quotient_low": 2,
                    "quotient_lower": 1,
                    "quotient_product": 1,
                    "result": 4,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_var1": 1,
                    "temp_variable_2": 1
                },
                "uVar7": {
                    "combination_16": 1,
                    "dividend": 1,
                    "dividend_full": 1,
                    "dividend_high": 1,
                    "dividend_parts": 1,
                    "divisor_combined": 1,
                    "divisor_extended": 1,
                    "divisor_product": 1,
                    "full_divisor_high": 1,
                    "mask_shifted": 1,
                    "operand1": 1,
                    "partial_quotient": 1,
                    "quotient_ext": 1,
                    "quotient_upper": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_dividend": 1,
                    "temp_divisor": 1,
                    "temp_divisor1": 1,
                    "temp_low": 1,
                    "temp_var2": 1,
                    "temp_var_5": 1,
                    "temp_variable_3": 1,
                    "u_var7": 1
                },
                "uVar8": {
                    "combined_remainders": 1,
                    "dividend_shifted": 1,
                    "dividend_temp": 1,
                    "divisor_extended_temp": 1,
                    "final_remainder_quotient": 1,
                    "full_divisor": 1,
                    "operand2": 1,
                    "quotient_high": 1,
                    "remainder": 1,
                    "remainder_low": 1,
                    "remainder_lower": 2,
                    "remainder_shifted": 1,
                    "temp": 2,
                    "temp2": 3,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_diff": 1,
                    "temp_divisor2": 1,
                    "temp_remainder": 1,
                    "temp_remainder_32": 1,
                    "temp_reversed": 1,
                    "temp_var3": 1,
                    "temp_variable_4": 1,
                    "u_var8": 1
                },
                "uVar9": {
                    "carry": 1,
                    "divisor_low_product": 1,
                    "multiplication_result": 1,
                    "quotient_high": 1,
                    "temp5": 1,
                    "temp_remainder_16": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080011ec"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_and_remainder_0800121c(uint dividend,uint divisor,uint divisor,uint remainder,uint *remainder)\n\n{\n  code *jump_table;\n  ulonglong product;\n  uint quotient;\n  uint quotient2;\n  uint temp2;\n  int shift_amount;\n  uint quotient;\n  uint temp1;\n  uint temp2;\n  uint *pointer_result_array;\n  uint quotient1;\n  uint quotient2;\n  uint temp4;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (remainder == 0) {\n    if (divisor < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      temp1 = divisor;\n      if (shift_amount != 0) {\n        temp1 = divisor << shift_amount;\n        divisor = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        dividend = dividend << shift_amount;\n      }\n      quotient2 = temp1 >> 0x10;\n      temp2 = divisor / quotient2;\n      quotient1 = temp2 * (temp1 & 0xffff);\n      quotient = dividend >> 0x10 | (divisor - quotient2 * temp2) * 0x10000;\n      quotient2 = temp2;\n      if (quotient <= quotient1 && quotient1 - quotient != 0) {\n        carry_flag = CARRY4(temp1,quotient);\n        quotient = temp1 + quotient;\n        quotient2 = temp2 - 1;\n        if ((carry_flag == false) && (quotient <= quotient1 && quotient1 - quotient != 0)) {\n          quotient2 = temp2 - 2;\n          quotient = quotient + temp1;\n        }\n      }\n      quotient = (quotient - quotient1) / quotient2;\n      temp2 = quotient * (temp1 & 0xffff);\n      temp2 = dividend & 0xffff | ((quotient - quotient1) - quotient2 * quotient) * 0x10000;\n      quotient = quotient;\n      if (temp2 <= temp2 && temp2 - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = quotient - 1;\n        if ((carry_flag == false) && (temp2 <= temp2 && temp2 - temp2 != 0)) {\n          quotient = quotient - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      quotient = quotient | quotient2 << 0x10;\n      pointer_result_array = (uint *)0x0;\n      temp2 = temp2 - temp2;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jump_table = (code *)software_udf(0xff,0x8001302);\n        result = (*jump_table)();\n        return result;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        pointer_result_array = (uint *)0x1;\n        divisor = divisor - divisor;\n        quotient2 = divisor >> 0x10;\n        quotient = divisor & 0xffff;\n        temp1 = divisor;\n      }\n      else {\n        temp1 = divisor << shift_amount;\n        quotient = divisor >> (0x20U - shift_amount & 0xff);\n        quotient2 = temp1 >> 0x10;\n        quotient1 = quotient / quotient2;\n        quotient = temp1 & 0xffff;\n        temp2 = quotient1 * quotient;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | divisor << shift_amount;\n        quotient2 = temp2 >> 0x10 | (quotient - quotient2 * quotient1) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient = quotient1;\n        if (quotient2 <= temp2 && temp2 - quotient2 != 0) {\n          carry_flag = CARRY4(temp1,quotient2);\n          quotient2 = temp1 + quotient2;\n          quotient = quotient1 - 1;\n          if ((carry_flag == false) && (quotient2 <= temp2 && temp2 - quotient2 != 0)) {\n            quotient = quotient1 - 2;\n            quotient2 = quotient2 + temp1;\n          }\n        }\n        quotient1 = (quotient2 - temp2) / quotient2;\n        temp4 = quotient1 * quotient;\n        divisor = temp2 & 0xffff | ((quotient2 - temp2) - quotient2 * quotient1) * 0x10000;\n        quotient2 = quotient1;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          carry_flag = CARRY4(temp1,divisor);\n          divisor = temp1 + divisor;\n          quotient2 = quotient1 - 1;\n          if ((carry_flag == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            quotient2 = quotient1 - 2;\n            divisor = divisor + temp1;\n          }\n        }\n        divisor = divisor - temp4;\n        pointer_result_array = (uint *)(quotient2 | quotient << 0x10);\n      }\n      quotient1 = divisor / quotient2;\n      quotient = quotient * quotient1;\n      temp2 = dividend >> 0x10 | (divisor - quotient2 * quotient1) * 0x10000;\n      quotient2 = quotient1;\n      if (temp2 <= quotient && quotient - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient2 = quotient1 - 1;\n        if ((carry_flag == false) && (temp2 <= quotient && quotient - temp2 != 0)) {\n          quotient2 = quotient1 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      quotient1 = (temp2 - quotient) / quotient2;\n      quotient = quotient * quotient1;\n      temp2 = dividend & 0xffff | ((temp2 - quotient) - quotient2 * quotient1) * 0x10000;\n      quotient = quotient1;\n      if (temp2 <= quotient && quotient - temp2 != 0) {\n        carry_flag = CARRY4(temp1,temp2);\n        temp2 = temp1 + temp2;\n        quotient = quotient1 - 1;\n        if ((carry_flag == false) && (temp2 <= quotient && quotient - temp2 != 0)) {\n          quotient = quotient1 - 2;\n          temp2 = temp2 + temp1;\n        }\n      }\n      temp2 = temp2 - quotient;\n      quotient = quotient | quotient2 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp2 >> LZCOUNT(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    pointer_result_array = remainder;\n    if (divisor < remainder) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      shift_amount = LZCOUNT(remainder);\n      if (shift_amount == 0) {\n        if ((remainder < divisor) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          divisor = (divisor - remainder) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        pointer_result_array = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        temp2 = 0x20 - shift_amount;\n        quotient = divisor >> (temp2 & 0xff) | remainder << shift_amount;\n        temp1 = divisor >> (temp2 & 0xff);\n        temp2 = quotient >> 0x10;\n        quotient1 = temp1 / temp2;\n        quotient2 = quotient1 * (quotient & 0xffff);\n        quotient = divisor << shift_amount | dividend >> (temp2 & 0xff);\n        quotient2 = quotient >> 0x10 | (temp1 - temp2 * quotient1) * 0x10000;\n        dividend = dividend << shift_amount;\n        temp1 = quotient1;\n        if (quotient2 <= quotient2 && quotient2 - quotient2 != 0) {\n          carry_flag = CARRY4(quotient,quotient2);\n          quotient2 = quotient + quotient2;\n          temp1 = quotient1 - 1;\n          if ((carry_flag == false) && (quotient2 <= quotient2 && quotient2 - quotient2 != 0)) {\n            temp1 = quotient1 - 2;\n            quotient2 = quotient2 + quotient;\n          }\n        }\n        quotient1 = (quotient2 - quotient2) / temp2;\n        temp4 = quotient1 * (quotient & 0xffff);\n        quotient2 = quotient & 0xffff | ((quotient2 - quotient2) - temp2 * quotient1) * 0x10000;\n        quotient = quotient1;\n        if (quotient2 <= temp4 && temp4 - quotient2 != 0) {\n          carry_flag = CARRY4(quotient,quotient2);\n          quotient2 = quotient + quotient2;\n          quotient = quotient1 - 1;\n          if ((carry_flag == false) && (quotient2 <= temp4 && temp4 - quotient2 != 0)) {\n            quotient = quotient1 - 2;\n            quotient2 = quotient2 + quotient;\n          }\n        }\n        quotient = quotient | temp1 << 0x10;\n        product = (ulonglong)quotient * (ulonglong)(divisor << shift_amount);\n        if (CONCAT44(quotient2 - temp4,dividend) < product) {\n          quotient = quotient - 1;\n          product = product - CONCAT44(quotient,divisor << shift_amount);\n        }\n        if (remainder != (uint *)0x0) {\n          temp1 = ((quotient2 - temp4) - (int)(product >> 0x20)) - (uint)(dividend < (uint)product);\n          *remainder = temp1 << (temp2 & 0xff) | dividend - (uint)product >> shift_amount;\n          remainder[1] = temp1 >> shift_amount;\n          pointer_result_array = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(pointer_result_array,quotient);\n}\n\n",
            "current_name": "calculate_division_and_remainder_0800121c",
            "entrypoint": "0x0800121c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800121c": "calculate_division_and_remainder_0800121c",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "bVar13": "carry_flag",
                "iVar5": "shift_amount",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divisor",
                "param_4": "remainder",
                "param_5": "remainder",
                "puVar9": "pointer_result_array",
                "uVar1": "product",
                "uVar10": "quotient1",
                "uVar11": "quotient2",
                "uVar12": "temp4",
                "uVar14": "result",
                "uVar2": "quotient",
                "uVar3": "quotient2",
                "uVar4": "temp2",
                "uVar6": "quotient",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "quotient_high"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014f0": {
            "additional_data": {
                "0x10": {
                    "hardware_flag": 1
                },
                "0xf": {
                    "set_flag_mask": 1
                },
                "3": {
                    "log_message_warning": 1
                },
                "DAT_40022000": {
                    "data_flag": 1
                },
                "FUNC_08002d8a": {
                    "do_additional_processing": 1,
                    "execute": 1,
                    "execute_additional_logic": 1,
                    "execute_additional_operations": 1,
                    "execute_system_call": 1,
                    "perform_action": 8,
                    "perform_additional_task": 1,
                    "perform_additional_tasks": 3,
                    "perform_cleanup": 2,
                    "perform_custom_operation": 1,
                    "perform_device_action": 1,
                    "perform_initialization": 1,
                    "perform_operation": 3,
                    "perform_task": 6
                },
                "FUN_080014f0": {
                    "configure_device": 2,
                    "enable_flag_and_call_functions": 1,
                    "enable_hardware_features": 1,
                    "enable_peripheral": 1,
                    "initialize": 4,
                    "initialize_device": 2,
                    "initialize_hardware": 6,
                    "initialize_system": 5,
                    "set_data_flag_and_call_functions": 1,
                    "set_flag_and_call_functions": 1,
                    "set_flag_and_output_values": 1,
                    "set_flag_and_run_functions": 1,
                    "set_flags_and_call_functions": 3,
                    "set_flags_and_execute_operations": 1,
                    "update_device_status": 1
                },
                "FUN_0800151c": {
                    "configure": 1,
                    "configure_hardware": 1,
                    "set_bitmask": 2,
                    "set_configuration": 4,
                    "set_device_mode": 1,
                    "set_device_options": 1,
                    "set_flag": 6,
                    "set_flags": 3,
                    "set_interrupt_flags": 1,
                    "set_mode": 5,
                    "set_output_value": 1,
                    "set_parameter": 1,
                    "set_status_code": 1,
                    "set_value": 2,
                    "update_status": 1
                },
                "FUN_08001714": {
                    "configure_device": 1,
                    "display_message": 1,
                    "do_something": 1,
                    "execute_function": 1,
                    "execute_operation": 1,
                    "initialize": 4,
                    "initialize_counter": 1,
                    "initialize_device": 2,
                    "initialize_subsystems": 1,
                    "initialize_system": 1,
                    "log_error": 1,
                    "log_message": 5,
                    "log_status": 1,
                    "perform_action": 2,
                    "perform_task": 1,
                    "print_message": 2,
                    "process_data": 1,
                    "set_configuration": 1,
                    "set_flag": 1,
                    "set_mode": 1,
                    "verify_condition": 1
                },
                "_DAT_40022000": {
                    "flags_register": 1,
                    "register_value": 1
                },
                "param_1": {
                    "action_param": 1,
                    "bitmask": 1,
                    "flag": 3,
                    "flag_value": 2,
                    "flags": 2,
                    "mode": 5,
                    "param": 1,
                    "param_1": 1,
                    "status_code": 1,
                    "value": 1
                },
                "param_2": {
                    "action_param": 1,
                    "configuration": 1
                },
                "undefined4": {
                    "void": 1
                }
            },
            "called": [
                "FUN_0800151c",
                "FUN_08002d8a",
                "FUN_08001714"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nvoid initialize_hardware_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  FUN_08001714(3);\n  FUN_0800151c(0xf);\n  FUNC_08002d8a();\n  return 0;\n}\n\n",
            "current_name": "initialize_hardware_080014f0",
            "entrypoint": "0x080014f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014f0": "initialize_hardware_080014f0",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800151c": {
            "additional_data": {
                "DAT_20000000": {
                    "error_param": 1,
                    "last_param": 1,
                    "saved_value": 1,
                    "stored_parameter": 1,
                    "system_initialized": 1,
                    "threshold": 1
                },
                "DAT_20000004": {
                    "constant2": 2,
                    "constant_b": 1,
                    "data2": 1,
                    "data_2": 1,
                    "divisor": 1,
                    "interval": 1,
                    "second_data_value": 1,
                    "time_constant": 1,
                    "unit_ratio": 1
                },
                "DAT_20000018": {
                    "constant1": 2,
                    "constant_a": 1,
                    "data1": 1,
                    "data_1": 1,
                    "dividend": 1,
                    "first_data_value": 1,
                    "interval_constant": 1,
                    "time": 1,
                    "total_time": 1
                },
                "FUN_0800151c": {
                    "calculate_delay": 2,
                    "calculate_time": 2,
                    "calculate_wait_time": 1,
                    "check_and_set_data": 3,
                    "check_and_set_data_limit": 1,
                    "check_and_set_param": 8,
                    "check_and_set_parameter": 4,
                    "check_and_set_parameter_value": 1,
                    "check_and_set_threshold": 2,
                    "check_param": 2,
                    "check_parameter_validity": 2,
                    "check_threshold": 1,
                    "initialize_system": 1,
                    "validate_param": 1
                },
                "FUN_0800172a": {
                    "display_error_message": 1,
                    "handle_error": 3,
                    "log_error": 3,
                    "log_error_message": 1,
                    "print_error_message": 2,
                    "print_message": 1,
                    "report_error": 1
                },
                "FUN_08001762": {
                    "calculate_division": 3,
                    "calculate_divisor": 1,
                    "calculate_factor": 1,
                    "calculate_interval": 2,
                    "calculate_ratio": 6
                },
                "iVar1": {
                    "delay": 1,
                    "division_result": 2,
                    "result": 27
                },
                "param_1": {
                    "duration_ms": 1,
                    "error_flag": 1,
                    "error_type": 2,
                    "input": 1,
                    "input_param": 4,
                    "input_parameter": 3,
                    "input_value": 6,
                    "limit": 1,
                    "param": 5,
                    "parameter": 3,
                    "threshold": 2,
                    "time_input": 1,
                    "value": 1
                },
                "param_2": {
                    "error_code": 4,
                    "error_flag": 1,
                    "param2": 1
                },
                "param_3": {
                    "error_type": 1,
                    "param3": 1,
                    "unknown": 1
                },
                "uVar2": {
                    "is_invalid": 1,
                    "is_success": 1,
                    "is_successful": 1,
                    "is_threshold_set": 1,
                    "is_valid": 6,
                    "return_value": 4,
                    "status": 9,
                    "success": 6,
                    "success_status": 1
                }
            },
            "called": [
                "FUN_08001762",
                "FUN_0800172a"
            ],
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "code": "\nundefined4 check_and_set_param_0800151c(uint input_value)\n\n{\n  int result;\n  undefined4 status;\n  \n  result = FUN_08001762((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (result == 0) {\n    if (input_value < 0x10) {\n      FUN_0800172a(0xffffffff,input_value,0);\n      status = 0;\n      DAT_20000000 = input_value;\n    }\n    else {\n      status = 1;\n    }\n  }\n  else {\n    status = 1;\n  }\n  return status;\n}\n\n",
            "current_name": "check_and_set_param_0800151c",
            "entrypoint": "0x0800151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800151c": "check_and_set_param_0800151c",
                "iVar1": "result",
                "param_1": "input_value",
                "uVar2": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800157c": {
            "additional_data": {
                "DAT_20000004": {
                    "addition": 1,
                    "addition_value": 1,
                    "amount": 1,
                    "constant": 1,
                    "dat20000004": 1,
                    "delta": 1,
                    "increment": 5,
                    "increment_amount": 3,
                    "increment_value": 4,
                    "input_value": 2,
                    "local_data": 1,
                    "local_variable": 1,
                    "value": 5,
                    "value_to_add": 4
                },
                "DAT_20000a48": {
                    "accumulated_value": 1,
                    "accumulator": 2,
                    "counter": 1,
                    "current_value": 2,
                    "data": 5,
                    "data_to_increment": 1,
                    "data_value": 4,
                    "global_data": 1,
                    "global_value": 2,
                    "global_variable": 2,
                    "new_value": 1,
                    "result": 2,
                    "sum": 1,
                    "sum20000a48": 1,
                    "sum_of_pointers": 1,
                    "total": 3,
                    "total_value": 1
                },
                "FUN_0800157c": {
                    "accumulate_data": 1,
                    "add_dat20000a48_with_dat20000004": 1,
                    "add_data_to_global": 1,
                    "add_data_to_pointer": 1,
                    "add_pointer_and_integer": 1,
                    "add_value_to_global": 1,
                    "add_value_to_global_variable": 1,
                    "increase_da_tvalue": 1,
                    "increase_data_value": 1,
                    "increase_global_value": 1,
                    "increase_total": 1,
                    "increase_value": 1,
                    "increment_data": 3,
                    "increment_data_and_return": 1,
                    "increment_data_variable": 1,
                    "increment_data_with_constant": 1,
                    "increment_global_variable": 1,
                    "increment_sum": 1,
                    "increment_value": 2,
                    "increment_variable": 1,
                    "update_counter": 1,
                    "update_data": 5,
                    "update_value_and_return": 1,
                    "update_variables": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid increment_data_and_return_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "current_name": "increment_data_and_return_0800157c",
            "entrypoint": "0x0800157c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800157c": "increment_data_and_return_0800157c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015a0": {
            "additional_data": {
                "DAT_20000a48": {
                    "data": 11,
                    "data_constant": 1,
                    "data_from_memory": 1,
                    "data_value": 5,
                    "global_data": 3,
                    "global_value": 2,
                    "global_variable": 1,
                    "global_variable_value": 1
                },
                "FUN_080015a0": {
                    "get_data": 10,
                    "get_data_constant": 1,
                    "get_data_from_address": 1,
                    "get_data_from_memory": 1,
                    "get_data_value": 9,
                    "get_global_data": 3,
                    "get_global_value": 3,
                    "get_global_variable": 2,
                    "get_global_variable_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d98",
                "FUN_08001ccc",
                "FUN_08002c2e",
                "FUN_08003260",
                "FUN_08002ad8",
                "FUN_08002bb4",
                "FUN_08001f6c",
                "FUN_08004f2c",
                "FUN_08004436",
                "FUN_08002ca8",
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "code": "\nundefined4 get_data_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "current_name": "get_data_value_080015a0",
            "entrypoint": "0x080015a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015a0": "get_data_value_080015a0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b4": {
            "additional_data": {
                "0x5fa0000": {
                    "constant": 2
                },
                "0xf8ff": {
                    "bitmask": 1,
                    "mask": 1
                },
                "FUN_080015b4": {
                    "configure_display": 1,
                    "configure_register": 1,
                    "mask_and_set_bits": 1,
                    "set_active_display": 1,
                    "set_bit_in_configuration": 1,
                    "set_color_from_param": 1,
                    "set_config_bits": 2,
                    "set_configuration": 2,
                    "set_configuration_register": 1,
                    "set_configuration_value": 1,
                    "set_control_register_bits": 1,
                    "set_data_register_value": 1,
                    "set_display_mode": 1,
                    "set_memory_bank_config": 1,
                    "set_memory_configuration": 1,
                    "set_mode_and_value": 1,
                    "set_output_mode": 1,
                    "set_register_value": 1,
                    "update_configuration": 1,
                    "update_control_register": 4,
                    "update_display_configuration": 1,
                    "update_display_mode": 1,
                    "update_flags": 1,
                    "update_reg_value": 1,
                    "update_register": 1,
                    "update_register_value": 1
                },
                "_DAT_e000ed0c": {
                    "color_value": 1,
                    "configuration": 1,
                    "configuration_register": 4,
                    "control_register": 5,
                    "data_register": 1,
                    "display_config": 1,
                    "display_control": 1,
                    "display_control_register": 2,
                    "flags": 1,
                    "memory_bank_config": 1,
                    "memory_config_register": 1,
                    "output_register": 1,
                    "register": 2,
                    "register_value": 3
                },
                "param_1": {
                    "bank_config": 1,
                    "bit_config": 1,
                    "bit_value": 1,
                    "config": 1,
                    "config_value": 2,
                    "configuration": 2,
                    "configuration_value": 2,
                    "control_bits": 1,
                    "display_config": 1,
                    "display_id": 1,
                    "display_mode": 2,
                    "input_value": 7,
                    "memory_configuration": 1,
                    "mode": 1,
                    "new_value": 3,
                    "param": 2,
                    "register_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08001714"
            ],
            "code": "\n\n\nvoid update_control_register_080015b4(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_control_register_080015b4",
            "entrypoint": "0x080015b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015b4": "update_control_register_080015b4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015fc": {
            "additional_data": {
                "DAT_e000ed0c": {
                    "register_value": 1,
                    "value": 1
                },
                "FUN_080015fc": {
                    "extract_bit": 1,
                    "extract_bit_pattern": 1,
                    "extract_bits_from_register": 4,
                    "extracted_bits": 1,
                    "get_bit_data": 1,
                    "get_bit_pattern": 1,
                    "get_bit_range": 1,
                    "get_bit_value": 1,
                    "get_bitmask_value": 1,
                    "get_bits_from_register": 7,
                    "get_bitwise_shifted_value": 1,
                    "get_most_significant_bits": 1,
                    "get_shifted_bit_value": 1,
                    "get_shifted_bits": 3,
                    "get_shifted_value": 3,
                    "get_three_least_significant_bits": 2
                },
                "_ADDR_e000ed0c": {
                    "_interrupt_status_register": 1
                },
                "_DAT_e000ed0c": {
                    "bit_data": 1,
                    "data": 1,
                    "data_register": 5,
                    "data_value": 1,
                    "input_data": 4,
                    "input_value": 1,
                    "original_value": 2,
                    "register_value": 12,
                    "shifted_data": 1
                },
                "_interrupt_status_register": {
                    "_interrupt_status_register": 1
                },
                "_interrupt_status_register_shifted": {
                    "_masked_interrupt_status": 1
                },
                "_masked_interrupt_status": {
                    "_masked_interrupt_status": 1
                },
                "return": {
                    "bit_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\n\n\nuint get_bits_from_register_080015fc(void)\n\n{\n  bit_value _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_bits_from_register_080015fc",
            "entrypoint": "0x080015fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015fc": "get_bits_from_register_080015fc",
                "return": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001618": {
            "additional_data": {
                "0x1fff1c00": {
                    "memory_address2": 1,
                    "memory_address_2": 1,
                    "memory_location_2": 1
                },
                "0xe000ed14": {
                    "memory_address_1": 1,
                    "memory_location_1": 1
                },
                "0xf": {
                    "mask": 1
                },
                "FUN_08001618": {
                    "set_byte_value": 1,
                    "set_parameter_value": 1,
                    "store_byte": 1,
                    "store_byte_in_memory": 2,
                    "store_data": 1,
                    "store_data_to_memory": 1,
                    "store_param_value": 1,
                    "store_shifted_byte": 1,
                    "store_shifted_value": 1,
                    "store_to_memory": 1,
                    "update_data": 1,
                    "update_hex_value": 1,
                    "update_memory": 4,
                    "update_memory_value": 2,
                    "write_byte": 1,
                    "write_byte_to_memory": 8,
                    "write_to_memory": 3
                },
                "byte": {
                    "input_byte": 1
                },
                "byteToWrite": {
                    "byte_to_write": 1
                },
                "char": {
                    "byte_value": 1,
                    "character": 1
                },
                "character": {
                    "character": 1
                },
                "e000ed14": {
                    "memory_address1": 1
                },
                "new_variable_name_1": {
                    "address": 1,
                    "byte_shifted_value": 1
                },
                "new_variable_name_2": {
                    "memory_address_offset": 1,
                    "shifted_value": 1
                },
                "param_1": {
                    "address": 7,
                    "address_offset": 1,
                    "byte_address": 1,
                    "byte_code": 1,
                    "byte_to_write": 1,
                    "byte_value": 4,
                    "data": 2,
                    "input": 1,
                    "input_byte": 10,
                    "input_value": 2,
                    "offset": 1
                },
                "param_2": {
                    "byte_to_store": 1,
                    "byte_value": 1,
                    "data": 8,
                    "input_value": 4,
                    "new_value": 1,
                    "numeric_value": 1,
                    "output_value": 2,
                    "param_value": 1,
                    "update_value": 1,
                    "value": 8,
                    "value_to_store": 2,
                    "value_to_write": 1
                },
                "param_3": {
                    "memory_address": 1,
                    "new_data": 1
                },
                "param_4": {
                    "masked_data": 1,
                    "offset": 1
                },
                "uint": {
                    "value": 1
                },
                "value": {
                    "value": 1
                },
                "var_1": {
                    "mask": 1
                },
                "var_2": {
                    "address": 1
                },
                "writeByte": {
                    "write_byte": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080016d0",
                "FUN_0800172a"
            ],
            "code": "\nvoid write_byte_to_memory_08001618(input_byte input_byte,value value)\n\n{\n  if ((byte_value)input_byte < '\\0') {\n    *(byte_value *)((input_byte & 0xf) + 0xe000ed14) = (byte_value)((value & 0xff) << 4);\n  }\n  else {\n    *(byte_value *)((byte_value)input_byte + -0x1fff1c00) = (byte_value)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_08001618",
            "entrypoint": "0x08001618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001618": "write_byte_to_memory_08001618",
                "byte": "input_byte",
                "char": "byte_value",
                "param_1": "input_byte",
                "param_2": "value",
                "uint": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800166c": {
            "additional_data": {
                "FUN_0800166c": {
                    "apply_bit_mask": 3,
                    "apply_bitmask": 1,
                    "apply_bitwise_operations": 2,
                    "apply_mask_and_shift": 2,
                    "bitwise_combination": 3,
                    "bitwise_combine": 1,
                    "bitwise_mask": 1,
                    "bitwise_merge": 1,
                    "bitwise_operation": 12,
                    "bitwise_operations": 2,
                    "bitwise_update_bits": 1,
                    "mask_bits": 1,
                    "mask_bits_with_shifted_value": 1
                },
                "bits_to_keep": {
                    "bitmask": 1
                },
                "param_1": {
                    "bit_count": 1,
                    "bit_flag": 1,
                    "bit_offset": 3,
                    "bit_position": 7,
                    "bitmask": 2,
                    "bits_to_keep": 1,
                    "input_a": 1,
                    "input_bitmask": 1,
                    "input_flags": 1,
                    "input_mask": 3,
                    "input_value": 2,
                    "modified_bits": 1,
                    "num_bits": 1,
                    "num_bits_to_keep": 1,
                    "num_bits_to_shift": 2,
                    "shifted_flag": 1,
                    "temp2": 1,
                    "value1": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bitmask": 1,
                    "bitmask_value": 1,
                    "bits_to_move": 1,
                    "bitwise_value": 1,
                    "corrected_input": 1,
                    "data1": 1,
                    "first_bit_pattern": 1,
                    "input1": 1,
                    "input2": 1,
                    "input_b": 1,
                    "input_data": 2,
                    "input_value": 3,
                    "input_value1": 1,
                    "mask": 2,
                    "mask1": 2,
                    "source_value": 2,
                    "value": 2,
                    "value1": 3,
                    "value2": 1,
                    "value_to_shift": 1
                },
                "param_3": {
                    "data": 2,
                    "data2": 1,
                    "data_value": 1,
                    "input2": 1,
                    "input3": 1,
                    "input_c": 1,
                    "input_mask": 1,
                    "input_value": 1,
                    "mask": 1,
                    "original_bits": 2,
                    "original_value": 2,
                    "output_data": 1,
                    "output_value": 3,
                    "result": 3,
                    "result_flag": 1,
                    "second_bit_pattern": 1,
                    "target_value": 3,
                    "value": 1,
                    "value2": 3,
                    "value3": 1
                },
                "return_value": {
                    "result": 1
                },
                "uVar1": {
                    "bit_difference": 2,
                    "bit_mask": 1,
                    "bitmask_difference": 1,
                    "bits_to_shift": 2,
                    "corrected_merge": 1,
                    "difference": 2,
                    "num_bits": 1,
                    "num_bits_to_keep": 1,
                    "num_bits_to_shift": 2,
                    "remaining_bits": 6,
                    "shift_amount": 7,
                    "shifted_bits": 1,
                    "shifted_mask": 1,
                    "temp1": 1
                },
                "uVar2": {
                    "mask2": 1,
                    "shifted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\nuint bitwise_operation_0800166c(uint bit_position,uint input_value,uint value2)\n\n{\n  uint shift_amount;\n  \n  bit_position = bit_position & 7;\n  shift_amount = 7 - bit_position;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_position + 4 < 7) {\n    bit_position = 0;\n  }\n  else {\n    bit_position = bit_position - 3;\n  }\n  return value2 & ~(-1 << (bit_position & 0xff)) |\n         (~(-1 << (shift_amount & 0xff)) & input_value) << (bit_position & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_0800166c",
            "entrypoint": "0x0800166c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "bit_position",
                "param_2": "input_value",
                "param_3": "value2",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016d0": {
            "additional_data": {
                "FUN_08001618": {
                    "apply_flags": 1,
                    "process_data": 1,
                    "set_bit_value": 1,
                    "set_byte": 1,
                    "set_byte_and_value": 1,
                    "set_bytes": 1,
                    "set_configuration": 1,
                    "set_default_value": 1,
                    "set_flag": 1,
                    "set_initial_values": 2,
                    "set_parameters": 1,
                    "set_values": 6
                },
                "FUN_080016d0": {
                    "check_and_initialize": 8,
                    "check_and_initialize_param": 1,
                    "check_and_initialize_parameters": 1,
                    "check_and_initialize_value": 1,
                    "check_and_set_data": 1,
                    "check_and_set_flag": 2,
                    "check_and_set_param": 2,
                    "check_and_set_parameter": 1,
                    "check_and_set_parameters": 1,
                    "check_and_set_params": 2,
                    "check_and_set_values": 2,
                    "check_and_update_param": 1,
                    "check_param_range": 1,
                    "check_parameter_validity": 1,
                    "check_range_and_initialize": 1,
                    "check_valid_param": 1,
                    "is_param_valid": 1,
                    "perform_operation": 1,
                    "process_param": 1,
                    "reverse_and_initialize": 1
                },
                "_DAT_e000e010": {
                    "config_flag": 1,
                    "constant_value": 1,
                    "converted_value3": 1,
                    "counter": 1,
                    "data2": 1,
                    "flag2": 1,
                    "initialized_flag2": 1,
                    "memory_value2": 1,
                    "new_var2": 1,
                    "other_value": 1,
                    "status_value": 1,
                    "updated_value3": 1,
                    "value2": 4
                },
                "_DAT_e000e014": {
                    "adjusted_value": 2,
                    "calculated_value": 1,
                    "converted_value1": 1,
                    "modified_input_value": 1,
                    "modified_param": 2,
                    "modified_value": 1,
                    "new_input": 1,
                    "new_param": 1,
                    "previous_input": 1,
                    "updated_param": 1,
                    "updated_value": 2,
                    "updated_value1": 1,
                    "value_minus_one": 1
                },
                "_DAT_e000e018": {
                    "configuration_value": 1,
                    "converted_value2": 1,
                    "data1": 1,
                    "flag1": 1,
                    "flag_value": 1,
                    "initialized_flag1": 1,
                    "initialized_value": 2,
                    "memory_value1": 1,
                    "new_var1": 1,
                    "some_value": 1,
                    "updated_value2": 1,
                    "value1": 4
                },
                "bVar1": {
                    "is_in_range": 6,
                    "is_input_valid": 7,
                    "is_less_than": 2,
                    "is_less_than_one_million": 2,
                    "is_less_than_threshold": 2,
                    "is_param_valid": 1,
                    "is_valid": 5,
                    "is_valid_input": 1,
                    "is_value_in_range": 1,
                    "is_value_valid": 2,
                    "is_within_range": 2
                },
                "param_1": {
                    "byte_data": 1,
                    "byte_param": 2,
                    "byte_value": 5,
                    "flag_byte": 1,
                    "input": 2,
                    "input_param": 3,
                    "input_value": 15,
                    "value": 2
                },
                "param_1_08001618": {
                    "byte_value": 1
                },
                "param_2": {
                    "bit_value": 1,
                    "bitmask": 1,
                    "byte_param": 1,
                    "byte_value": 2,
                    "flag_value": 1,
                    "int_value": 1,
                    "mask": 1,
                    "uint_param": 2,
                    "uint_value": 1,
                    "value": 2
                },
                "param_2_08001618": {
                    "uint_value": 1
                }
            },
            "called": [
                "FUN_08001618"
            ],
            "calling": [
                "FUN_08001762"
            ],
            "code": "\n\n\nbool check_and_initialize_param_080016d0(int input_value)\n\n{\n  bool is_input_valid;\n  \n  is_input_valid = input_value - 1U < 0x1000000;\n  if (is_input_valid) {\n    _DAT_e000e014 = input_value + -1;\n    FUN_08001618(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_input_valid;\n}\n\n",
            "current_name": "check_and_initialize_param_080016d0",
            "entrypoint": "0x080016d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016d0": "check_and_initialize_param_080016d0",
                "bVar1": "is_input_valid",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001714": {
            "additional_data": {
                "FUN_080015b4": {
                    "configure_component": 1,
                    "decode_data": 1,
                    "execute_operation": 2,
                    "execute_sub_function": 3,
                    "execute_task": 1,
                    "initialize": 1,
                    "initialize_system": 1,
                    "load_component_data": 1,
                    "perform_action": 1,
                    "perform_cleanup": 1,
                    "perform_initialization": 5,
                    "perform_initialization_routine": 1,
                    "perform_task": 1,
                    "process_data": 4,
                    "process_initialization_data": 1,
                    "reverse_data": 1
                },
                "FUN_08001714": {
                    "execute_cleanup": 1,
                    "execute_function": 6,
                    "execute_initialization": 7,
                    "execute_main_function": 3,
                    "execute_param_function": 1,
                    "execute_process": 1,
                    "initialize": 4,
                    "initialize_application": 1,
                    "initialize_component": 1,
                    "initialize_components": 1,
                    "initialize_function": 1,
                    "initialize_program": 1,
                    "process_data": 2,
                    "run_main_function": 1
                },
                "param_1": {
                    "arg": 1,
                    "component": 1,
                    "component_data": 1,
                    "data": 5,
                    "function_parameter": 1,
                    "init_param": 1,
                    "initialization_data": 1,
                    "initialization_parameter": 1,
                    "input_param": 1,
                    "input_parameter": 4,
                    "input_value": 5,
                    "param": 5,
                    "parameter": 2,
                    "process_input": 1,
                    "sub_argument": 1
                }
            },
            "called": [
                "FUN_080015b4"
            ],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid execute_main_function_08001714(undefined4 param)\n\n{\n  FUN_080015b4(param);\n  return;\n}\n\n",
            "current_name": "execute_main_function_08001714",
            "entrypoint": "0x08001714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001714": "execute_main_function_08001714",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800172a": {
            "additional_data": {
                "FUN_080015fc": {
                    "fetch_data": 1,
                    "generate_result": 1,
                    "get_first_value": 2,
                    "get_initial_value": 17,
                    "get_value": 3
                },
                "FUN_08001618": {
                    "output_result": 5,
                    "print_result": 1,
                    "print_value": 1,
                    "save_data": 2,
                    "save_processed_data": 1,
                    "save_result": 1,
                    "send_data": 1,
                    "store_data": 3,
                    "store_processed_data": 2,
                    "store_result": 3,
                    "update_data": 2,
                    "update_database": 1,
                    "update_output": 1
                },
                "FUN_0800166c": {
                    "calculate_new_value": 3,
                    "calculate_result": 3,
                    "calculate_value": 3,
                    "combine_values": 1,
                    "manipulate_data": 1,
                    "manipulate_values": 3,
                    "perform_calculation": 5,
                    "perform_calculations": 1,
                    "process_params": 1,
                    "process_values": 3
                },
                "FUN_0800172a": {
                    "execute_function": 1,
                    "process_and_send_data": 1,
                    "process_and_store_data": 2,
                    "process_char": 1,
                    "process_data": 20,
                    "process_function": 1,
                    "process_input": 1,
                    "reverse_and_load_data": 1,
                    "reverse_and_save_data": 1,
                    "update_data": 1,
                    "update_function": 1
                },
                "param_1": {
                    "character": 3,
                    "data": 10,
                    "data_char": 1,
                    "data_param": 1,
                    "input": 5,
                    "input_byte": 8,
                    "input_char": 1,
                    "input_data": 1,
                    "input_value": 1
                },
                "param_2": {
                    "arg1": 2,
                    "first_argument": 1,
                    "first_param": 1,
                    "input_num1": 1,
                    "param": 1,
                    "param1": 13,
                    "param2": 2,
                    "param_a": 2,
                    "value1": 7,
                    "var1": 1
                },
                "param_3": {
                    "arg2": 2,
                    "count": 1,
                    "input_num2": 1,
                    "param2": 13,
                    "param3": 2,
                    "param_b": 2,
                    "second_argument": 1,
                    "second_param": 1,
                    "value2": 7,
                    "var2": 1
                },
                "uVar1": {
                    "result": 23,
                    "result1": 2,
                    "return_value": 3
                }
            },
            "called": [
                "FUN_080015fc",
                "FUN_0800166c",
                "FUN_08001618"
            ],
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "code": "\nvoid process_and_store_data_0800172a(char data,undefined4 param1,undefined4 param2)\n\n{\n  undefined4 result;\n  \n  result = FUN_080015fc();\n  result = FUN_0800166c(result,param1,param2);\n  FUN_08001618((int)data,result);\n  return;\n}\n\n",
            "current_name": "process_and_store_data_0800172a",
            "entrypoint": "0x0800172a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800172a": "process_and_store_data_0800172a",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001762": {
            "additional_data": {
                "FUN_080016d0": {
                    "check_data": 2,
                    "check_valid_input": 1,
                    "check_validity": 2,
                    "is_valid": 1,
                    "sub_function": 1,
                    "validate_data": 1
                },
                "FUN_08001762": {
                    "extract_data": 2,
                    "extracted_function": 1,
                    "perform_operation": 1,
                    "process": 1,
                    "process_data": 13,
                    "process_function": 1,
                    "process_input": 1
                },
                "param_1": {
                    "data": 4,
                    "input": 13,
                    "input_data": 6,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 4
                },
                "uVar1": {
                    "result": 21,
                    "return_value": 2
                }
            },
            "called": [
                "FUN_080016d0"
            ],
            "calling": [
                "FUN_080052a0",
                "FUN_0800151c"
            ],
            "code": "\nundefined4 process_data_08001762(undefined4 input)\n\n{\n  undefined4 result;\n  \n  result = FUN_080016d0(input);\n  return result;\n}\n\n",
            "current_name": "process_data_08001762",
            "entrypoint": "0x08001762",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001762": "process_data_08001762",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800177c": {
            "additional_data": {
                "4": {
                    "flag_constant": 1
                },
                "FUN_0800177c": {
                    "set_bit": 1,
                    "set_bit_in_register": 1,
                    "set_bitmask": 1,
                    "set_e000e010_bit": 1,
                    "set_flag": 9,
                    "set_flag_if_equal_to4": 1,
                    "set_flag_if_equal_to_four": 1,
                    "set_flag_if_param_equals_four": 1,
                    "set_flag_if_param_is_four": 2,
                    "set_flag_value": 1,
                    "set_fourth_flag": 1,
                    "update_data_with_flag": 1,
                    "update_e000e010_bit": 3,
                    "update_flag": 3,
                    "update_reg_bit": 1,
                    "update_register": 1,
                    "update_register_flag": 1,
                    "update_status": 1
                },
                "_DAT_e000e010": {
                    "control_register": 3,
                    "data_register": 2,
                    "flag": 2,
                    "flag_register": 5,
                    "flags": 1,
                    "flags_register": 1,
                    "register": 1,
                    "register_e000e010": 1,
                    "register_flag": 1,
                    "register_value": 8,
                    "status": 1,
                    "status_register": 3
                },
                "param_1": {
                    "bit_number": 1,
                    "bit_value": 2,
                    "flag": 2,
                    "flag_value": 9,
                    "input": 1,
                    "input_value": 1,
                    "param": 1,
                    "status": 1,
                    "value": 13
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nvoid set_flag_if_param_is_four_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "set_flag_if_param_is_four_0800177c",
            "entrypoint": "0x0800177c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800177c": "set_flag_if_param_is_four_0800177c",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017b4": {
            "additional_data": {
                "FUN_080017b4": {
                    "initialize": 14,
                    "initialize_application": 5,
                    "initialize_components": 1,
                    "initialize_function": 3,
                    "initialize_hardware": 1,
                    "initialize_program": 1,
                    "initialize_system": 6
                },
                "FUN_08004f78": {
                    "activate_module": 1,
                    "call_sub_function": 3,
                    "call_subfunction": 1,
                    "configure_settings": 1,
                    "display_welcome_screen": 1,
                    "execute_initialization": 2,
                    "execute_process": 1,
                    "execute_startup_routine": 1,
                    "execute_stored_data": 1,
                    "execute_sub_function": 2,
                    "execute_subfunction": 1,
                    "execute_task": 3,
                    "function1": 1,
                    "initialize_component": 1,
                    "perform_action": 1,
                    "perform_initialization": 3,
                    "perform_operation": 1,
                    "reset_application": 1,
                    "run_initialization": 1,
                    "run_sub_function": 1,
                    "set_default_value": 1,
                    "set_hardware_state": 1,
                    "set_mode": 1
                }
            },
            "called": [
                "FUN_08004f78"
            ],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid initialize_system_080017b4(void)\n\n{\n  FUN_08004f78(0);\n  return;\n}\n\n",
            "current_name": "initialize_system_080017b4",
            "entrypoint": "0x080017b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017b4": "initialize_system_080017b4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017c4": {
            "additional_data": {
                "FUN_080017c4": {
                    "handle_bitwise_operations": 1,
                    "update_bitmask": 7,
                    "update_bits": 4,
                    "update_config": 2,
                    "update_configuration": 4,
                    "update_flag_bits": 1,
                    "update_flags": 2,
                    "update_flags_and_data": 1,
                    "update_flags_and_registers": 1,
                    "update_flags_and_values": 3,
                    "update_memory_locations": 1,
                    "update_param_flags": 1,
                    "update_parameter": 1,
                    "update_register_values": 1,
                    "update_registers": 1
                },
                "_DAT_40010400": {
                    "register_b": 1
                },
                "_DAT_40010404": {
                    "register_c": 1
                },
                "_DAT_40010408": {
                    "register_d": 1
                },
                "_DAT_4001040c": {
                    "register_e": 1
                },
                "_DAT_40021018": {
                    "register_a": 1
                },
                "iVar5": {
                    "array_index": 2,
                    "config_index": 1,
                    "data_index": 1,
                    "device_index": 1,
                    "index": 18,
                    "memory_index": 1,
                    "offset": 1,
                    "output_index": 1,
                    "region_index": 1,
                    "register_index": 1,
                    "target_index": 2,
                    "var_index": 1
                },
                "local_10": {
                    "bit_value": 2,
                    "config_update": 1,
                    "new_bitmask_value": 1,
                    "new_bits": 1,
                    "new_config_value": 2,
                    "new_flag_value": 1,
                    "new_value": 15,
                    "offset": 1,
                    "output_value": 1,
                    "shifted_value": 1,
                    "update_value": 1,
                    "updated_location": 1,
                    "updated_value": 1,
                    "value_to_add": 1,
                    "value_to_set": 1
                },
                "local_c": {
                    "bit_count": 1,
                    "bit_index": 10,
                    "bit_pos": 1,
                    "bit_position": 3,
                    "config_index": 3,
                    "count": 1,
                    "counter": 6,
                    "index": 2,
                    "input_index": 1,
                    "instruction_index": 1,
                    "loop_counter": 1,
                    "loop_index": 1
                },
                "param_1": {
                    "bit_array1": 1,
                    "bitmask1": 1,
                    "bitmask_array": 3,
                    "config_array": 1,
                    "config_array1": 1,
                    "config_ptr": 1,
                    "config_table": 1,
                    "device_config": 1,
                    "flag_array": 2,
                    "flags": 2,
                    "input_array": 1,
                    "original_array": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_bitmask": 1,
                    "output_bits": 1,
                    "output_flags": 1,
                    "output_params": 1,
                    "register1": 2,
                    "register_array": 1,
                    "register_array1": 1,
                    "target": 3,
                    "target_config": 1,
                    "target_memory": 1
                },
                "param_2": {
                    "bit_array2": 1,
                    "bitmask2": 1,
                    "config_array": 1,
                    "config_array2": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "flag_table": 1,
                    "flags_array": 1,
                    "input": 3,
                    "input_array": 3,
                    "input_bitmask": 1,
                    "input_bits": 1,
                    "input_config": 1,
                    "input_flags": 1,
                    "input_parameters": 1,
                    "input_params": 1,
                    "instruction": 1,
                    "param_array": 1,
                    "register2": 2,
                    "register_array2": 1,
                    "source": 3,
                    "source_config": 1,
                    "source_memory": 1,
                    "update_array": 1
                },
                "puVar4": {
                    "array_ptr": 1,
                    "bit_array_ptr": 1,
                    "bitmask_pointer": 1,
                    "bitmask_ptr": 2,
                    "config_array": 1,
                    "config_pointer": 1,
                    "config_ptr": 3,
                    "flag_ptr": 1,
                    "flags_ptr": 2,
                    "output_bitmask_ptr": 1,
                    "output_ptr": 3,
                    "output_values": 1,
                    "pointer": 1,
                    "ptr": 2,
                    "ptr_to_output_params": 1,
                    "ptr_to_register1": 1,
                    "ptr_to_update": 1,
                    "register_ptr": 2,
                    "target_array": 2,
                    "target_memory_address": 1,
                    "target_ptr": 1,
                    "updated_array": 1
                },
                "uVar1": {
                    "bit": 1,
                    "bit_mask": 21,
                    "bit_position": 3,
                    "bit_value": 1,
                    "bitmask": 2,
                    "mask": 3
                },
                "uVar2": {
                    "bit": 2,
                    "bit_check": 7,
                    "bit_comparison": 1,
                    "bit_comparison_result": 1,
                    "bit_mask": 2,
                    "bit_result": 2,
                    "bit_value": 7,
                    "check_bit": 1,
                    "config_value": 1,
                    "data_bit": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "input_bit": 2,
                    "temp_variable": 1
                },
                "uVar3": {
                    "action_code": 1,
                    "command": 1,
                    "condition": 3,
                    "config_type": 2,
                    "config_value": 2,
                    "control_value": 2,
                    "data_type": 1,
                    "flag": 1,
                    "instruction": 1,
                    "instruction_type": 1,
                    "mode": 2,
                    "opcode": 8,
                    "param_value": 1,
                    "update_value": 1,
                    "value": 3,
                    "value_check": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005680",
                "FUN_080055f4"
            ],
            "code": "\n\n\nvoid update_bitmask_080017c4(uint *target,uint *input)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  uint opcode;\n  uint *config_ptr;\n  int index;\n  uint new_value;\n  uint bit_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input & bit_mask;\n    if (bit_check == bit_mask) {\n      opcode = input[1];\n      if (opcode == 0x12) {\n        new_value = input[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = input[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            new_value = input[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = input[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (input[2] == 0) {\n          new_value = 4;\n        }\n        else if (input[2] == 1) {\n          new_value = 8;\n          target[4] = bit_mask;\n        }\n        else {\n          new_value = 8;\n          target[5] = bit_mask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bit_check < 0x100) {\n        bit_mask = bit_index << 2;\n        config_ptr = target;\n      }\n      else {\n        config_ptr = target + 1;\n        bit_mask = (bit_index - 8) * 4;\n      }\n      *config_ptr = *config_ptr & ~(0xf << (bit_mask & 0xff)) | new_value << (bit_mask & 0xff);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (target == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (target == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (target == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (target == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bit_index & 3) << 2) |\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000);\n        if ((input[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bit_check & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bit_check | _DAT_40010400;\n        }\n        if ((input[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bit_check & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bit_check | _DAT_40010404;\n        }\n        if ((input[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bit_check & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bit_check | _DAT_40010408;\n        }\n        if ((input[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bit_check & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_bitmask_080017c4",
            "entrypoint": "0x080017c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017c4": "update_bitmask_080017c4",
                "iVar5": "index",
                "local_10": "new_value",
                "local_c": "bit_index",
                "param_1": "target",
                "param_2": "input",
                "puVar4": "config_ptr",
                "uVar1": "bit_mask",
                "uVar2": "bit_check",
                "uVar3": "opcode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a80": {
            "additional_data": {
                "FUN_08001a80": {
                    "convert_and_set_param_value": 1,
                    "convert_and_store_param2": 1,
                    "convert_and_store_value": 1,
                    "convert_param_to_value": 1,
                    "save_data_to_memory": 1,
                    "set_param": 4,
                    "set_param_after_check": 1,
                    "set_param_value": 10,
                    "set_parameter_value": 2,
                    "store_param2": 1,
                    "store_parameter_value": 1,
                    "store_value_in_memory": 1,
                    "update_data": 2,
                    "update_param": 1,
                    "update_param_value": 1,
                    "update_parameter": 1,
                    "update_parameter_value": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 9,
                    "data_pointer": 2,
                    "input_ptr": 1,
                    "memory_address": 3,
                    "object_address": 6,
                    "object_pointer": 2,
                    "param_address": 1,
                    "param_base": 1,
                    "param_holder": 1,
                    "parameter": 1,
                    "parameter_address": 1,
                    "ptr": 2
                },
                "param_2": {
                    "data": 1,
                    "new_data": 1,
                    "new_value": 5,
                    "param_value": 2,
                    "value": 18,
                    "value_to_convert": 1,
                    "value_to_convert_and_store": 1,
                    "value_to_set": 1,
                    "value_to_store": 1
                },
                "param_3": {
                    "check_flag": 1,
                    "condition": 3,
                    "flag": 6,
                    "is_high_word": 1,
                    "is_large_value": 1,
                    "is_param_null": 1,
                    "is_shifted": 11,
                    "is_shifted_data": 1,
                    "is_unicode": 1,
                    "should_update": 1,
                    "store_as16_bit": 1,
                    "use_high_bits": 1,
                    "use_higher_bits": 1,
                    "use_upper_bits": 1
                },
                "uchar": {
                    "character": 1
                },
                "uint": {
                    "unsigned_int": 2
                },
                "value": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "code": "\nvoid convert_and_set_param_value_08001a80(int base_address,ushort value,char is_shifted)\n\n{\n  if (is_shifted == '\\0') {\n    *(unsigned_int *)(base_address + 0x10) = (unsigned_int)value << 0x10;\n  }\n  else {\n    *(unsigned_int *)(base_address + 0x10) = (unsigned_int)value;\n  }\n  return;\n}\n\n",
            "current_name": "convert_and_set_param_value_08001a80",
            "entrypoint": "0x08001a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a80": "convert_and_set_param_value_08001a80",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "FUNC_08001cb8": {
                    "do_something": 1,
                    "function_1cb8": 1,
                    "function_one": 1,
                    "handle_condition": 1,
                    "initialization_function": 1,
                    "initialize": 1,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "initialize_parameter": 1,
                    "initialize_parameters": 1,
                    "initialize_params": 4,
                    "initialize_value": 1,
                    "process_function": 1,
                    "reset_values": 1,
                    "setup": 1
                },
                "FUN_08001ab0": {
                    "calculate_metrics": 1,
                    "calculate_new_values": 1,
                    "calculate_parameter": 1,
                    "calculate_parameters": 8,
                    "calculate_params": 2,
                    "calculate_result": 1,
                    "calculate_threshold": 1,
                    "calculate_values": 2,
                    "compute_parameters": 1,
                    "initialize_param": 1,
                    "initialize_parameter": 1,
                    "initialize_parameters": 3,
                    "initialize_values": 1,
                    "process_and_initialize": 1,
                    "process_binary_data": 1,
                    "process_param": 1,
                    "process_parameter": 1
                },
                "FUN_08003518": {
                    "calculate": 1,
                    "calculate_value": 2,
                    "function_3518": 1,
                    "function_two": 1,
                    "generate_random_number": 2,
                    "get_input_value": 1,
                    "get_random_number": 9,
                    "get_some_value": 1
                },
                "bVar5": {
                    "bool_flag": 2,
                    "bool_var": 1,
                    "check": 1,
                    "check_result": 1,
                    "is_temp_zero": 1,
                    "is_zero": 25
                },
                "cVar2": {
                    "char_flag": 1,
                    "char_var": 1,
                    "condition": 4,
                    "flag": 8,
                    "is_greater_than_threshold": 1,
                    "is_in_range": 3,
                    "is_less_than_threshold": 1,
                    "is_valid": 9,
                    "temp_var2": 1,
                    "valid_flag": 1,
                    "validity_flag": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 2,
                    "input_array": 3,
                    "input_data": 1,
                    "input_params": 2,
                    "input_pointer": 1,
                    "input_values": 1,
                    "param": 1,
                    "param_array": 1,
                    "parameter": 3,
                    "parameter_array": 1,
                    "parameters": 10,
                    "params": 2
                },
                "uVar1": {
                    "random_number": 1,
                    "random_value": 1,
                    "result": 22,
                    "result1": 4,
                    "temp_var1": 3
                },
                "uVar3": {
                    "is_success": 1,
                    "result": 3,
                    "return_val": 2,
                    "return_value": 22,
                    "status": 3
                },
                "uVar4": {
                    "calc_val": 1,
                    "calculation": 1,
                    "computed_value": 2,
                    "result2": 4,
                    "temp": 11,
                    "temp_var": 7,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "temp_variable": 1,
                    "tmp_var": 1
                }
            },
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_08005348"
            ],
            "code": "\nundefined4 calculate_parameters_08001ab0(uint **parameters)\n\n{\n  uint result;\n  char is_valid;\n  undefined4 return_value;\n  uint temp;\n  bool is_zero;\n  \n  if (parameters == (uint **)0x0) {\n    return_value = 1;\n  }\n  else {\n    if (*(char *)((int)parameters + 0x3d) == '\\0') {\n      *(undefined *)(parameters + 0xf) = 0;\n      FUNC_08001cb8(parameters);\n    }\n    *(undefined *)((int)parameters + 0x3d) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    result = FUN_08003518();\n    if (parameters[1] < (uint *)0x186a1) {\n      temp = result;\n      if (result < 2000000) {\n        temp = 1;\n      }\n      is_valid = (char)temp;\n      if (1999999 < result) {\n        is_valid = '\\0';\n      }\n    }\n    else {\n      temp = result;\n      if (result < 4000000) {\n        temp = 1;\n      }\n      is_valid = (char)temp;\n      if (3999999 < result) {\n        is_valid = '\\0';\n      }\n    }\n    if (is_valid == '\\0') {\n      temp = result / 1000000;\n      (*parameters)[1] = temp;\n      if ((uint *)0x186a0 < parameters[1]) {\n        temp = (temp * 300) / 1000;\n      }\n      (*parameters)[8] = temp + 1;\n      if (parameters[1] < (uint *)0x186a1) {\n        result = (result - 1) / (uint)((int)parameters[1] << 1) + 1 & 0xfff;\n        if (result < 4) {\n          result = 4;\n        }\n      }\n      else {\n        if (parameters[2] == (uint *)0x0) {\n          temp = (result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff;\n          is_zero = temp == 0;\n          if (is_zero) {\n            temp = 1;\n          }\n          is_valid = (char)temp;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        else {\n          temp = (result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff;\n          is_zero = temp == 0;\n          if (is_zero) {\n            temp = 1;\n          }\n          is_valid = (char)temp;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        if (is_valid == '\\0') {\n          if (parameters[2] == (uint *)0x0) {\n            result = (result - 1) / (uint)((int)parameters[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            result = (result - 1) / (uint)((int)parameters[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          result = 1;\n        }\n      }\n      (*parameters)[7] = result;\n      **parameters = (uint)parameters[8] | (uint)parameters[7];\n      (*parameters)[2] = (uint)parameters[3] | (uint)parameters[4];\n      (*parameters)[3] = (uint)parameters[6] | (uint)parameters[5];\n      **parameters = **parameters | 1;\n      parameters[0x10] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3d) = 0x20;\n      parameters[0xc] = (uint *)0x0;\n      *(undefined *)((int)parameters + 0x3e) = 0;\n      return_value = 0;\n    }\n    else {\n      return_value = 1;\n    }\n  }\n  return return_value;\n}\n\n",
            "current_name": "calculate_parameters_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ab0": "calculate_parameters_08001ab0",
                "bVar5": "is_zero",
                "cVar2": "is_valid",
                "param_1": "parameters",
                "uVar1": "result",
                "uVar3": "return_value",
                "uVar4": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "called": [],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001cb8",
            "entrypoint": "0x08001cb8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001ccc": {
            "additional_data": {
                "FUN_080015a0": {
                    "calculate_value": 1,
                    "get_current_time": 1,
                    "get_current_value": 1,
                    "get_elapsed_time": 1,
                    "get_initial_value": 4,
                    "get_random_value": 3,
                    "get_some_value": 1,
                    "get_time": 1
                },
                "FUN_08001ccc": {
                    "check_and_process_data": 1,
                    "check_and_update_parameters": 1,
                    "check_input": 1,
                    "decode_data": 1,
                    "execute_task": 1,
                    "parse_data": 2,
                    "parse_input": 1,
                    "parse_params": 1,
                    "perform_operation": 1,
                    "process_data": 17,
                    "process_input_data": 1
                },
                "FUN_08002640": {
                    "main_function": 1,
                    "perform_operation": 2,
                    "process_data": 3,
                    "process_data_sub1": 1,
                    "reverse_data": 1,
                    "some_operation": 1,
                    "sub_function3": 1
                },
                "FUN_08002bb4": {
                    "another_operation": 1,
                    "calculate_value1": 1,
                    "check_condition": 1,
                    "check_condition_one": 1,
                    "check_data": 1,
                    "check_validity": 1,
                    "check_value": 1,
                    "process_data_sub2": 1,
                    "process_sub_function2": 1,
                    "sub_function2": 1
                },
                "FUN_08002c2e": {
                    "calculate_value2": 1,
                    "check_condition_two": 1,
                    "final_operation": 1,
                    "perform_action": 1,
                    "process_data_sub3": 1,
                    "process_remaining_data": 1,
                    "process_sub_function1": 1,
                    "reverse_data": 1,
                    "reverse_flag": 1,
                    "sub_function1": 1
                },
                "LAB_08001d9c": {
                    "check_condition": 1,
                    "label1": 1
                },
                "iVar1": {
                    "current_value": 1,
                    "func_result1": 1,
                    "func_return_value": 1,
                    "random_value1": 1,
                    "result": 3,
                    "result1": 12,
                    "result_1": 2,
                    "result_a": 1,
                    "return_value": 1,
                    "value1": 6,
                    "value5": 1,
                    "var1": 1
                },
                "iVar2": {
                    "check": 1,
                    "counter": 1,
                    "func_result2": 1,
                    "loop_index": 1,
                    "random_value2": 1,
                    "result2": 12,
                    "result_2": 2,
                    "result_b": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "value": 1,
                    "value2": 6,
                    "value6": 1,
                    "var2": 1
                },
                "param_1": {
                    "data": 17,
                    "data_array": 2,
                    "data_ptr": 1,
                    "input_array": 1,
                    "input_data": 2,
                    "input_params": 1,
                    "input_ptr": 1,
                    "param_array": 1,
                    "param_pointers": 1,
                    "parameter1": 1,
                    "parameters": 1,
                    "params": 1,
                    "task_data": 1
                },
                "param_2": {
                    "arg1": 3,
                    "param1": 8,
                    "param2": 8,
                    "param_2": 1,
                    "param_2_short": 1,
                    "param_a": 2,
                    "param_x": 1,
                    "parameter2": 1,
                    "value1": 6
                },
                "param_3": {
                    "arg2": 3,
                    "param2": 8,
                    "param3": 8,
                    "param_3": 1,
                    "param_3_short": 1,
                    "param_b": 2,
                    "param_y": 1,
                    "parameter3": 1,
                    "value2": 6
                },
                "param_4": {
                    "arg3": 3,
                    "param3": 8,
                    "param4": 8,
                    "param_4": 1,
                    "param_4_short": 1,
                    "param_c": 2,
                    "param_z": 1,
                    "parameter4": 1,
                    "value3": 6
                },
                "param_5": {
                    "arg4": 3,
                    "array": 2,
                    "buffer": 2,
                    "data": 1,
                    "data_ptr": 3,
                    "param4": 5,
                    "param5": 8,
                    "param_array": 2,
                    "param_d": 1,
                    "param_pointer": 1,
                    "parameter5": 1,
                    "ptr": 1,
                    "result_array": 1
                },
                "param_6": {
                    "arg5": 3,
                    "param4": 3,
                    "param5": 5,
                    "param6": 8,
                    "param_6": 1,
                    "param_6_short": 1,
                    "param_a": 1,
                    "param_d": 1,
                    "param_e": 1,
                    "parameter6": 1,
                    "value4": 6
                },
                "param_7": {
                    "arg6": 3,
                    "param5": 3,
                    "param6": 5,
                    "param7": 8,
                    "param_7": 2,
                    "param_b": 1,
                    "param_e": 1,
                    "param_f": 1,
                    "parameter7": 1,
                    "result": 5,
                    "return_value": 1
                },
                "puVar4": {
                    "byte_ptr": 5,
                    "data_ptr_2": 1,
                    "pointer": 3,
                    "pointer_var": 3,
                    "pointer_variable": 1,
                    "ptr": 3,
                    "ptr4": 1,
                    "ptr_byte": 1,
                    "ptr_value": 1,
                    "ptr_var": 2,
                    "ptr_var4": 1,
                    "temp_array": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 2,
                    "temp_value": 1,
                    "temp_var": 3
                },
                "uVar3": {
                    "output": 1,
                    "result": 7,
                    "result3": 2,
                    "return_val": 1,
                    "return_value": 19,
                    "status": 1
                }
            },
            "called": [
                "FUN_08002c2e",
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "calling": [
                "FUN_08004ea4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\ncheck_and_process_data_08001ccc(uint **data,undefined2 param2,undefined2 param2,undefined2 param4,uint *param5,\n            undefined2 param6,undefined4 param7)\n\n{\n  int result1;\n  int result2;\n  undefined4 return_value;\n  uint *byte_ptr;\n  \n  result1 = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result2 = 0;\n        goto label1;\n      }\n      result2 = FUN_080015a0();\n    } while ((uint)(result2 - result1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result2 = 3;\nlabel1:\n    if (result2 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param5;\n        *(undefined2 *)((int)data + 0x2a) = param6;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result2 = FUN_08002640(data,param2,param2,param4,param7,result1);\n        if (result2 == 0) {\n          while (*(short *)(data + 10) != 0) {\n            result2 = FUN_08002bb4(data,param7,result1);\n            if (result2 != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_ptr = data[9];\n            data[9] = (uint *)((int)byte_ptr + 1);\n            (*data)[4] = (uint)*(byte *)byte_ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              byte_ptr = data[9];\n              data[9] = (uint *)((int)byte_ptr + 1);\n              (*data)[4] = (uint)*(byte *)byte_ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          result1 = FUN_08002c2e(data,param7,result1);\n          if (result1 == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            return_value = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            return_value = 1;\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "current_name": "check_and_process_data_08001ccc",
            "entrypoint": "0x08001ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ccc": "check_and_process_data_08001ccc",
                "LAB_08001d9c": "label1",
                "iVar1": "result1",
                "iVar2": "result2",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param2",
                "param_4": "param4",
                "param_5": "param5",
                "param_6": "param6",
                "param_7": "param7",
                "puVar4": "byte_ptr",
                "uVar3": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "additional_data": {
                "0x10": {
                    "ptr2": 1
                },
                "0x20": {
                    "char5": 1
                },
                "0x200": {
                    "flag3": 1
                },
                "0x22": {
                    "char3": 1
                },
                "0x2a": {
                    "flag2": 1
                },
                "0x3d": {
                    "char1": 1
                },
                "0x3e": {
                    "char2": 1
                },
                "0x4": {
                    "flag8": 1
                },
                "0x40": {
                    "char4": 1
                },
                "0x400": {
                    "flag5": 1
                },
                "0x5": {
                    "flag7": 1
                },
                "0x800": {
                    "flag4": 1
                },
                "0xb": {
                    "ptr3": 1
                },
                "0xc": {
                    "ptr1": 1
                },
                "0xf": {
                    "flag": 1
                },
                "0xffff0000": {
                    "value5": 1
                },
                "0xfffffbff": {
                    "flag6": 1
                },
                "0xffffffff": {
                    "value6": 1
                },
                "FUN_080015a0": {
                    "get_current_time": 5,
                    "get_current_value": 1,
                    "get_time": 1,
                    "get_timer_count": 1,
                    "get_timer_value": 1,
                    "get_timestamp": 1,
                    "sub_function2": 1
                },
                "FUN_08001f6c": {
                    "check_and_process_data": 1,
                    "decode_and_process_data": 2,
                    "execute_command": 3,
                    "process_data": 15,
                    "process_input": 4,
                    "process_param": 1
                },
                "FUN_080027f4": {
                    "data_processing": 1,
                    "execute_task": 1,
                    "perform_action": 1,
                    "perform_operation": 3,
                    "process_data_internal": 1,
                    "process_input": 1,
                    "send_data": 1,
                    "sub_function3": 1
                },
                "FUN_08002ca8": {
                    "check_condition": 1,
                    "do_something": 1,
                    "execute_operation": 2,
                    "process_data": 1,
                    "process_data2": 2,
                    "process_value": 1,
                    "send_data": 1,
                    "sub_function1": 1
                },
                "LAB_08002040": {
                    "label1": 3
                },
                "LAB_080022fa": {
                    "label2": 3
                },
                "LAB_08002418": {
                    "label3": 3
                },
                "LAB_0800250a": {
                    "label4": 3
                },
                "disableIRQinterrupts": {
                    "disable_interrupts": 3,
                    "disable_irq": 1
                },
                "enableIRQinterrupts": {
                    "enable_interrupts": 3,
                    "enable_irq": 1
                },
                "iVar1": {
                    "current_time": 1,
                    "current_value": 1,
                    "initial_value": 2,
                    "int_value1": 1,
                    "random_var1": 1,
                    "result": 4,
                    "result1": 6,
                    "result_var_1": 1,
                    "return_value": 2,
                    "return_value1": 2,
                    "some_value": 1,
                    "start_time": 3,
                    "start_value": 2,
                    "value1": 3,
                    "var1": 1
                },
                "iVar3": {
                    "comparison": 1,
                    "condition": 1,
                    "counter": 2,
                    "end_time": 1,
                    "int_value3": 1,
                    "loop_counter": 1,
                    "loop_value": 1,
                    "random_var3": 1,
                    "result": 4,
                    "result3": 6,
                    "result_var_3": 1,
                    "return_value3": 2,
                    "status": 1,
                    "temp": 1,
                    "temp_var2": 2,
                    "value3": 3,
                    "var2": 1,
                    "var3": 1
                },
                "param_1": {
                    "command": 1,
                    "command_params": 2,
                    "data": 13,
                    "data_array": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input_array": 4,
                    "input_data": 2,
                    "input_params": 2,
                    "param_list": 1,
                    "param_ptr": 1,
                    "parameter1": 1,
                    "parameter_list": 1
                },
                "param_2": {
                    "arg1": 1,
                    "header": 1,
                    "param1": 14,
                    "param2": 5,
                    "param_a": 3,
                    "parameter2": 2,
                    "start": 1,
                    "value1": 4
                },
                "param_3": {
                    "arg2": 1,
                    "end": 1,
                    "param2": 14,
                    "param3": 5,
                    "param_3": 1,
                    "param_b": 3,
                    "parameter3": 2,
                    "value2": 4
                },
                "param_4": {
                    "arg3": 1,
                    "length": 1,
                    "param3": 14,
                    "param4": 5,
                    "param_4": 1,
                    "param_c": 3,
                    "parameter4": 2,
                    "value3": 4
                },
                "param_5": {
                    "array": 2,
                    "buffer": 4,
                    "data": 1,
                    "data_ptr": 1,
                    "header_ptr": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "output_array": 1,
                    "param4": 11,
                    "param5": 3,
                    "param_d": 2,
                    "param_list_2": 1,
                    "parameter5": 2
                },
                "param_6": {
                    "arg4": 1,
                    "output_data": 1,
                    "param4": 3,
                    "param5": 11,
                    "param6": 5,
                    "param_6": 1,
                    "param_d": 1,
                    "param_e": 2,
                    "parameter6": 2,
                    "value4": 4
                },
                "param_7": {
                    "arg5": 1,
                    "count": 1,
                    "flag": 1,
                    "limit": 1,
                    "num": 1,
                    "param5": 3,
                    "param6": 10,
                    "param7": 5,
                    "param_7": 1,
                    "param_e": 1,
                    "param_f": 2,
                    "parameter7": 2,
                    "timeout": 2
                },
                "puVar5": {
                    "data_ptr": 1,
                    "data_ptr_temp": 1,
                    "pointer": 6,
                    "pointer_var1": 1,
                    "pointer_var_1": 1,
                    "pointer_variable": 1,
                    "ptr": 7,
                    "ptr_var": 2,
                    "pu_var": 1,
                    "random_var5": 1,
                    "result5": 4,
                    "return_value5": 2,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_var3": 1
                },
                "uVar2": {
                    "another_value": 1,
                    "current_value": 1,
                    "data": 1,
                    "random_var2": 1,
                    "result2": 6,
                    "result_var_2": 1,
                    "return_value2": 2,
                    "temp": 2,
                    "temp_value": 4,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "uint_value2": 1,
                    "value": 3,
                    "value2": 3,
                    "var1": 1,
                    "var2": 1
                },
                "uVar4": {
                    "output": 1,
                    "random_var4": 1,
                    "result": 9,
                    "result4": 5,
                    "result_value": 1,
                    "result_var_4": 1,
                    "return_value": 11,
                    "return_value4": 2
                }
            },
            "called": [
                "FUN_08002ca8",
                "FUN_080015a0",
                "FUN_080027f4"
            ],
            "calling": [
                "FUN_08004ee8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\ndecode_and_process_data_08001f6c(uint **data,undefined2 param1,undefined2 param2,undefined2 param3,uint *param4,\n            undefined2 param5,uint param6)\n\n{\n  int result1;\n  uint result2;\n  int result3;\n  undefined4 return_value;\n  uint *ptr;\n  \n  result1 = FUN_080015a0();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        result3 = 0;\n        goto label1;\n      }\n      result3 = FUN_080015a0();\n    } while ((uint)(result3 - result1) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    result3 = 3;\nlabel1:\n    if (result3 == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        return_value = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = param4;\n        *(undefined2 *)((int)data + 0x2a) = param5;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        result3 = FUN_080027f4(data,param1,param2,param3,param6,result1);\n        if (result3 == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disable_interrupts();\n            **data = **data | 0x200;\n            enable_interrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disable_interrupts();\n            **data = **data & 0xfffffbff;\n            enable_interrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                result3 = FUN_08002ca8(data,param6,result1);\n                if (result3 != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                result2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)result2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result3 = 0;\n                    goto label2;\n                  }\n                } while ((param6 == 0xffffffff) ||\n                        ((param6 != 0 && (result3 = FUN_080015a0(), (uint)(result3 - result1) <= param6)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result3 = 3;\nlabel2:\n                if (result3 != 0) {\n                  return 3;\n                }\n                disable_interrupts();\n                **data = **data | 0x200;\n                result2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)result2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                result2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)result2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result3 = 0;\n                    goto label3;\n                  }\n                } while ((param6 == 0xffffffff) ||\n                        ((param6 != 0 && (result3 = FUN_080015a0(), (uint)(result3 - result1) <= param6)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result3 = 3;\nlabel3:\n                if (result3 != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disable_interrupts();\n                result2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)result2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    result3 = 0;\n                    goto label4;\n                  }\n                } while ((param6 == 0xffffffff) ||\n                        ((param6 != 0 && (result3 = FUN_080015a0(), (uint)(result3 - result1) <= param6)\n                         )));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                result3 = 3;\nlabel4:\n                if (result3 != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                result2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)result2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_interrupts();\n                result2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)result2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              result3 = FUN_08002ca8(data,param6,result1);\n              if (result3 != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              result2 = (*data)[4];\n              ptr = data[9];\n              data[9] = (uint *)((int)ptr + 1);\n              *(char *)ptr = (char)result2;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                result2 = (*data)[4];\n                ptr = data[9];\n                data[9] = (uint *)((int)ptr + 1);\n                *(char *)ptr = (char)result2;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          return_value = 3;\n        }\n      }\n    }\n    else {\n      return_value = 2;\n    }\n  }\n  else {\n    return_value = 2;\n  }\n  return return_value;\n}\n\n",
            "current_name": "decode_and_process_data_08001f6c",
            "entrypoint": "0x08001f6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f6c": "decode_and_process_data_08001f6c",
                "LAB_08002040": "label1",
                "LAB_080022fa": "label2",
                "LAB_08002418": "label3",
                "LAB_0800250a": "label4",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts",
                "iVar1": "result1",
                "iVar3": "result3",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "param2",
                "param_4": "param3",
                "param_5": "param4",
                "param_6": "param5",
                "param_7": "param6",
                "puVar5": "ptr",
                "uVar2": "result2",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002640": {
            "additional_data": {
                "DAT_080028f3": {
                    "constant1": 1
                },
                "DAT_08002a01": {
                    "constant2": 1
                },
                "FUN_080015a0": {
                    "calculate_difference": 1,
                    "calculate_value": 1,
                    "get_difference": 1,
                    "get_offset": 1
                },
                "FUN_08002640": {
                    "handle_data_processing": 1,
                    "handle_input": 1,
                    "initialize_communication": 1,
                    "initialize_data": 1,
                    "process_data": 17,
                    "process_input": 2,
                    "update_data": 1,
                    "update_flag_and_check": 1,
                    "update_flag_with_condition": 1,
                    "update_flags_and_check": 1,
                    "update_flags_and_check_condition": 1,
                    "update_status_and_check": 1
                },
                "FUN_08002ad8": {
                    "perform_operation": 1,
                    "perform_task1": 1,
                    "process_data_part1": 1
                },
                "FUN_08002bb4": {
                    "perform_task2": 1,
                    "process_data_part2": 1,
                    "validate_data": 1
                },
                "FrmLnf0680": {
                    "result": 1
                },
                "iVar1": {
                    "comparison_result": 1,
                    "condition": 1,
                    "error_code": 1,
                    "result": 22,
                    "status": 5
                },
                "param_1": {
                    "communication_ptr": 1,
                    "data": 14,
                    "data_ptr": 5,
                    "input": 1,
                    "input_array": 3,
                    "input_data": 3,
                    "input_ptr": 1,
                    "param_array": 1,
                    "ptr": 1,
                    "status": 1
                },
                "param_2": {
                    "byte_val": 1,
                    "byte_value": 6,
                    "flag": 21,
                    "flags": 1,
                    "mode": 1,
                    "new_flag_value": 1
                },
                "param_3": {
                    "byte_value2": 1,
                    "code": 3,
                    "data": 2,
                    "mode": 1,
                    "new_value": 1,
                    "short_val": 1,
                    "short_value": 5,
                    "val1": 1,
                    "value": 12,
                    "value1": 4
                },
                "param_4": {
                    "check": 1,
                    "choice": 1,
                    "condition": 10,
                    "condition_value": 2,
                    "flag": 2,
                    "flag_value": 1,
                    "length": 2,
                    "mode": 1,
                    "opcode": 1,
                    "option": 2,
                    "short_value": 1,
                    "type": 2,
                    "val2": 1,
                    "value": 1,
                    "value2": 3
                },
                "param_5": {
                    "count": 1,
                    "length": 1,
                    "limit": 18,
                    "max": 1,
                    "max_tries": 1,
                    "max_value": 2,
                    "maximum": 1,
                    "size_limit": 1,
                    "uint_value": 2,
                    "val3": 1,
                    "value2": 1,
                    "value3": 1
                },
                "param_6": {
                    "comp_value": 1,
                    "comparison_value": 3,
                    "counter": 1,
                    "current_try": 1,
                    "current_value": 1,
                    "index": 1,
                    "int_value": 2,
                    "limit": 1,
                    "minimum": 1,
                    "param": 1,
                    "reference": 1,
                    "target": 2,
                    "threshold": 11,
                    "val4": 1,
                    "value": 2,
                    "value4": 1
                },
                "uVar2": {
                    "output": 2,
                    "result": 7,
                    "ret_val": 1,
                    "return_val": 1,
                    "return_value": 17,
                    "status": 2
                }
            },
            "called": [
                "FUN_08002ad8",
                "FUN_08002bb4",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nundefined4\nprocess_data_08002640(uint **data,byte flag,undefined2 value,short condition,uint limit,int threshold)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **data = **data | 0x100;\n  do {\n    if ((~(*data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - threshold) <= limit))));\n  data[0xc] = (uint *)0x0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)((int)data + 0x3e) = 0;\n  *(undefined *)(data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*data)[4] = flag & 0xfe;\n    result = FUN_08002ad8(data,0x10002,limit,threshold);\n    if (result == 0) {\n      result = FUN_08002bb4(data,limit,threshold,(*data)[6]);\n      if (result == 0) {\n        if (condition == 1) {\n          (*data)[4] = (uint)(byte)value;\n        }\n        else {\n          (*data)[4] = (uint)(byte)((ushort)value >> 8);\n          result = FUN_08002bb4(data,limit,threshold);\n          if (result != 0) {\n            if (data[0x10] == (uint *)0x4) {\n              **data = **data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*data)[4] = (uint)(byte)value;\n        }\n        return_value = 0;\n      }\n      else if (data[0x10] == (uint *)0x4) {\n        **data = **data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_data_08002640",
            "entrypoint": "0x08002640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002640": "process_data_08002640",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "flag",
                "param_3": "value",
                "param_4": "condition",
                "param_5": "limit",
                "param_6": "threshold",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080027f4": {
            "additional_data": {
                "FUNK_080015a0": {
                    "calculate_difference": 1
                },
                "FUN_080015a0": {
                    "calculate_difference": 1,
                    "check_condition": 1,
                    "get_difference": 1,
                    "helper_function_3": 1,
                    "sub_function": 1,
                    "sub_function_1": 1,
                    "sub_function_3": 1
                },
                "FUN_080027f4": {
                    "decode_and_process_data": 1,
                    "execute_function": 1,
                    "execute_operation": 1,
                    "execute_process": 1,
                    "initialize_communication": 1,
                    "perform_operation": 3,
                    "process_data": 7,
                    "update_flags_and_process": 1,
                    "update_permissions": 1
                },
                "FUN_08002ad8": {
                    "execute_operation": 1,
                    "helper_function_1": 1,
                    "perform_operation": 1,
                    "process_data1": 1,
                    "sub_function_1": 1,
                    "sub_function_2": 2
                },
                "FUN_08002bb4": {
                    "check_condition": 1,
                    "helper_function_2": 1,
                    "perform_operation": 1,
                    "process_data2": 1,
                    "sub_function_2": 1,
                    "sub_function_3": 2
                },
                "flag": {
                    "flag": 1
                },
                "iVar1": {
                    "condition": 1,
                    "condition_variable": 1,
                    "counter": 1,
                    "error_code": 1,
                    "loop_condition": 1,
                    "loop_counter": 4,
                    "result": 19,
                    "result_value": 1,
                    "value": 1,
                    "var1": 1
                },
                "input": {
                    "input": 1
                },
                "limit": {
                    "limit": 1
                },
                "option": {
                    "option": 1
                },
                "param_1": {
                    "buffer": 1,
                    "communication_buffer": 1,
                    "data": 4,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "input": 2,
                    "input_array": 4,
                    "input_params": 2,
                    "input_pointer": 1,
                    "operand": 1,
                    "operation_params": 1,
                    "parameter1": 1,
                    "parameter_1": 1,
                    "parameter_array": 1,
                    "parameter_ptr": 1,
                    "permissions": 1,
                    "pointer": 1,
                    "pointer_array": 2,
                    "pointer_list": 1,
                    "process_params": 1
                },
                "param_2": {
                    "bitmask": 1,
                    "byte_code": 1,
                    "byte_param": 2,
                    "byte_parameter": 1,
                    "byte_val": 2,
                    "byte_value": 7,
                    "flag": 12,
                    "flags": 1,
                    "input_byte": 1,
                    "new_permission": 1,
                    "param_byte": 1,
                    "parameter_2": 1
                },
                "param_3": {
                    "byte_value_2": 1,
                    "data": 2,
                    "data_code": 1,
                    "data_mask": 1,
                    "flag": 1,
                    "input_word": 1,
                    "mode": 1,
                    "param1": 1,
                    "param_short": 2,
                    "parameter_3": 1,
                    "short_param": 2,
                    "short_parameter": 1,
                    "short_val": 2,
                    "short_value": 5,
                    "value": 5,
                    "value1": 4
                },
                "param_4": {
                    "condition_value": 2,
                    "flag": 4,
                    "flag_value": 1,
                    "input_short": 1,
                    "input_type": 1,
                    "length": 1,
                    "offset": 1,
                    "option": 4,
                    "param": 1,
                    "param2": 1,
                    "param_4": 3,
                    "param_one_or_two": 1,
                    "param_two": 1,
                    "parameter_4": 1,
                    "second_short_param": 1,
                    "short_value": 2,
                    "size_multiplier": 1,
                    "value2": 4
                },
                "param_5": {
                    "input_uint": 1,
                    "limit": 16,
                    "limit_value": 2,
                    "param1": 1,
                    "param3": 1,
                    "param_5": 1,
                    "param_uint": 2,
                    "parameter_5": 1,
                    "timeout": 1,
                    "uint_param": 1,
                    "uint_parameter": 1,
                    "uint_val": 1,
                    "uint_value": 1,
                    "value_threshold": 1
                },
                "param_6": {
                    "comparison_value": 2,
                    "current_position": 1,
                    "input_int": 1,
                    "int_param": 1,
                    "int_parameter": 1,
                    "int_value": 1,
                    "param": 1,
                    "param2": 1,
                    "param4": 1,
                    "param6": 1,
                    "param_6": 3,
                    "param_int": 2,
                    "parameter_6": 1,
                    "target": 1,
                    "threshold": 10,
                    "value": 3
                },
                "threshold": {
                    "threshold": 1
                },
                "uVar2": {
                    "output": 2,
                    "result": 9,
                    "result_code": 1,
                    "return_val": 4,
                    "return_value": 11,
                    "status": 4
                },
                "value": {
                    "value": 1
                }
            },
            "called": [
                "FUN_08002ad8",
                "FUN_08002bb4",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\ndecode_and_process_data_080027f4(uint **input_array,byte flag,undefined2 short_value,short value2,uint limit,int threshold)\n\n{\n  int result;\n  undefined4 return_value;\n  \n  **input_array = **input_array | 0x400;\n  **input_array = **input_array | 0x100;\n  do {\n    if ((~(*input_array)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - threshold) <= limit))));\n  input_array[0xc] = (uint *)0x0;\n  *(undefined *)((int)input_array + 0x3d) = 0x20;\n  *(undefined *)((int)input_array + 0x3e) = 0;\n  *(undefined *)(input_array + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*input_array)[4] = flag & 0xfe;\n    result = FUN_08002ad8(input_array,0x10002,limit,threshold);\n    if (result == 0) {\n      result = FUN_08002bb4(input_array,limit,threshold,(*input_array)[6]);\n      if (result == 0) {\n        if (value2 == 1) {\n          (*input_array)[4] = (uint)(byte)short_value;\n        }\n        else {\n          (*input_array)[4] = (uint)(byte)((ushort)short_value >> 8);\n          result = FUN_08002bb4(input_array,limit,threshold);\n          if (result != 0) {\n            if (input_array[0x10] == (uint *)0x4) {\n              **input_array = **input_array | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*input_array)[4] = (uint)(byte)short_value;\n        }\n        result = FUN_08002bb4(input_array,limit,threshold);\n        if (result == 0) {\n          **input_array = **input_array | 0x100;\n          do {\n            if ((~(*input_array)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((limit == 0xffffffff) ||\n                  ((limit != 0 && (result = FUN_080015a0(), (uint)(result - threshold) <= limit))));\n          input_array[0xc] = (uint *)0x0;\n          *(undefined *)((int)input_array + 0x3d) = 0x20;\n          *(undefined *)((int)input_array + 0x3e) = 0;\n          *(undefined *)(input_array + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*input_array)[4] = (uint)(flag | 1);\n            result = FUN_08002ad8(input_array,0x10002,limit,threshold);\n            if (result == 0) {\n              return_value = 0;\n            }\n            else if (input_array[0x10] == (uint *)0x4) {\n              return_value = 1;\n            }\n            else {\n              return_value = 3;\n            }\n          }\n          else {\n            return_value = 3;\n          }\n        }\n        else if (input_array[0x10] == (uint *)0x4) {\n          **input_array = **input_array | 0x200;\n          return_value = 1;\n        }\n        else {\n          return_value = 3;\n        }\n      }\n      else if (input_array[0x10] == (uint *)0x4) {\n        **input_array = **input_array | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (input_array[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "decode_and_process_data_080027f4",
            "entrypoint": "0x080027f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080027f4": "decode_and_process_data_080027f4",
                "iVar1": "result",
                "param_1": "input_array",
                "param_2": "flag",
                "param_3": "short_value",
                "param_4": "value2",
                "param_5": "limit",
                "param_6": "threshold",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "additional_data": {
                "$param_1_5": {
                    "parameter_array_5": 1
                },
                "$param_1_6": {
                    "parameter_array_6": 1
                },
                "0x10": {
                    "index1": 1
                },
                "0xc": {
                    "index2": 1
                },
                "FUN_080015a0": {
                    "get_current_permission": 1,
                    "get_value": 1
                },
                "FUN_08002ad8": {
                    "check_access": 1,
                    "check_and_modify": 1,
                    "check_and_modify_data": 2,
                    "check_and_modify_flags": 1,
                    "check_and_set_flag": 1,
                    "check_and_update_flag": 1,
                    "check_and_update_param": 1,
                    "check_and_update_params": 1,
                    "check_and_update_permissions": 1,
                    "check_condition_and_modify_data": 1,
                    "check_condition_and_update": 1,
                    "check_conditions_and_update": 1,
                    "check_param": 1,
                    "check_permission": 3,
                    "check_permissions": 1,
                    "check_valid_permission": 1,
                    "check_value_and_update": 1,
                    "process_data": 1,
                    "process_input": 2,
                    "validate_and_update_permissions": 1,
                    "validate_input": 3
                },
                "bVar4": {
                    "flag_not_zero": 1,
                    "flag_set": 1,
                    "is_flag_set": 1,
                    "is_modified": 7,
                    "is_non_zero": 8,
                    "is_nonzero": 3,
                    "is_not_zero": 1,
                    "is_permission_modified": 1,
                    "is_result_nonzero": 1,
                    "is_updated": 2,
                    "non_zero_flag": 1,
                    "nonzero": 1,
                    "nonzero_flag": 1,
                    "not_zero": 1,
                    "temp_bool": 1
                },
                "cVar2": {
                    "access_granted": 1,
                    "char_value": 7,
                    "condition": 1,
                    "condition_flag": 1,
                    "converted_value": 1,
                    "flag": 7,
                    "flag_as_char": 1,
                    "flag_char": 2,
                    "has_permission": 2,
                    "is_valid": 1,
                    "modified_permission_char": 1,
                    "result": 4,
                    "result_char": 1,
                    "return_value": 1
                },
                "iVar1": {
                    "comparison_result": 1,
                    "current_permission": 1,
                    "difference": 1,
                    "result": 24,
                    "return_value": 3,
                    "temp_var": 1
                },
                "param_1": {
                    "access_data": 1,
                    "data": 3,
                    "data_pointer": 2,
                    "input_array": 3,
                    "input_data": 1,
                    "input_params": 1,
                    "param_array": 2,
                    "param_list": 1,
                    "parameter_array": 1,
                    "parameter_collection": 1,
                    "parameter_list": 1,
                    "parameters": 2,
                    "params": 1,
                    "permission_array": 1,
                    "permissions": 4,
                    "permissions_array": 1,
                    "pointer_array": 5
                },
                "param_2": {
                    "condition_value": 1,
                    "flag": 7,
                    "flag1": 1,
                    "flag_value": 2,
                    "flags": 1,
                    "input_value": 1,
                    "mode": 1,
                    "parameter_value1": 1,
                    "permission_flag": 2,
                    "permission_flags": 1,
                    "permission_value": 2,
                    "permissions": 1,
                    "value": 8,
                    "value1": 1,
                    "value_1": 1
                },
                "param_3": {
                    "condition": 1,
                    "counter": 1,
                    "flag2": 1,
                    "limit": 16,
                    "limit_value": 2,
                    "max_difference": 1,
                    "max_value": 1,
                    "parameter_value2": 1,
                    "size": 1,
                    "size_limit": 1,
                    "threshold": 2,
                    "threshold_value": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_4": {
                    "compare_value": 1,
                    "comparison": 1,
                    "comparison_value": 10,
                    "condition": 1,
                    "current_mode": 1,
                    "current_value": 1,
                    "parameter_value3": 1,
                    "reference_value": 1,
                    "required_permission": 3,
                    "target": 2,
                    "threshold": 7,
                    "value": 1,
                    "value3": 1
                },
                "uVar3": {
                    "masked_flag": 1,
                    "masked_value": 4,
                    "modified_flag": 2,
                    "modified_permission": 1,
                    "modified_value": 7,
                    "new_mode": 1,
                    "result_temp": 1,
                    "temp": 1,
                    "temp_value": 5,
                    "temp_var": 3,
                    "updated_flag_value": 1,
                    "updated_permission": 1,
                    "updated_value": 2,
                    "var1": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "code": "\nundefined4 check_and_update_params_08002ad8(uint **pointer_array,uint value,uint limit,int comparison_value)\n\n{\n  int result;\n  char char_value;\n  uint modified_value;\n  bool is_non_zero;\n  \n  do {\n    if ((value >> 0x10 & 0xff) == 1) {\n      modified_value = value & ~(*pointer_array)[5] & 0xffff;\n      is_non_zero = modified_value != 0;\n      if (is_non_zero) {\n        modified_value = 1;\n      }\n      char_value = (char)modified_value;\n      if (!is_non_zero) {\n        char_value = '\\0';\n      }\n    }\n    else {\n      modified_value = value & ~(*pointer_array)[6] & 0xffff;\n      is_non_zero = modified_value != 0;\n      if (is_non_zero) {\n        modified_value = 1;\n      }\n      char_value = (char)modified_value;\n      if (!is_non_zero) {\n        char_value = '\\0';\n      }\n    }\n    if (char_value == '\\0') {\n      return 0;\n    }\n    if (((*pointer_array)[5] & 0x400) == 0x400) {\n      **pointer_array = **pointer_array | 0x200;\n      (*pointer_array)[5] = 0xfffffbff;\n      pointer_array[0x10] = (uint *)0x4;\n      pointer_array[0xc] = (uint *)0x0;\n      *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n      *(undefined *)(pointer_array + 0xf) = 0;\n      return 1;\n    }\n  } while ((limit == 0xffffffff) ||\n          ((limit != 0 && (result = FUN_080015a0(), (uint)(result - comparison_value) <= limit))));\n  pointer_array[0xc] = (uint *)0x0;\n  *(undefined *)((int)pointer_array + 0x3d) = 0x20;\n  *(undefined *)(pointer_array + 0xf) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_and_update_params_08002ad8",
            "entrypoint": "0x08002ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad8": "check_and_update_params_08002ad8",
                "bVar4": "is_non_zero",
                "cVar2": "char_value",
                "iVar1": "result",
                "param_1": "pointer_array",
                "param_2": "value",
                "param_3": "limit",
                "param_4": "comparison_value",
                "uVar3": "modified_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "additional_data": {
                "0": {
                    "min_size": 1
                },
                "0x14": {
                    "access_flag": 1
                },
                "0x80": {
                    "has_access": 1
                },
                "0xffffffff": {
                    "max_size": 1
                },
                "FUN_080015a0": {
                    "calculate_size": 1,
                    "get_array_size": 3,
                    "get_available_memory": 4,
                    "get_available_space": 2,
                    "get_buffer_length": 1,
                    "get_difference": 1,
                    "get_flag_size": 1,
                    "get_length": 1,
                    "get_limit": 2,
                    "get_max_size": 1,
                    "get_max_value": 1,
                    "get_memory_size": 3,
                    "get_some_value": 1,
                    "get_sub_value": 1,
                    "get_system_status": 1,
                    "get_threshold": 3,
                    "get_value": 3
                },
                "FUN_08002bb4": {
                    "check_access": 2,
                    "check_and_handle_condition": 1,
                    "check_and_modify_flags": 1,
                    "check_and_modify_param": 1,
                    "check_and_modify_params": 1,
                    "check_and_modify_status": 2,
                    "check_and_set_flag": 1,
                    "check_and_update_flag": 1,
                    "check_and_update_flags": 1,
                    "check_condition": 2,
                    "check_condition_and_modify": 1,
                    "check_condition_and_return": 1,
                    "check_condition_and_update": 1,
                    "check_cpu_compatibility": 1,
                    "check_flag": 1,
                    "check_flag_and_set": 1,
                    "check_flag_status": 4,
                    "check_flags_and_conditions": 1,
                    "check_memory_access": 3,
                    "check_status": 2,
                    "perform_check": 1,
                    "process_data": 1
                },
                "FUN_08002d3c": {
                    "check_accessibility": 1,
                    "check_condition": 10,
                    "check_flag": 3,
                    "check_flag_value": 3,
                    "check_memory_permission": 1,
                    "check_something": 1,
                    "check_status": 2,
                    "is_condition_met": 1,
                    "is_cpu_compatible": 1,
                    "is_flag_set": 4,
                    "is_memory_access_allowed": 1,
                    "validate_flag": 1
                },
                "F_080015a0": {
                    "get_function_range": 1
                },
                "F_08002d3c": {
                    "check_flag": 1
                },
                "FucN_08002d3c": {
                    "get_flag": 1
                },
                "iVar1": {
                    "result": 24,
                    "return_value": 2,
                    "sub_func_result": 1
                },
                "param_1": {
                    "array": 5,
                    "array_ptr": 2,
                    "cpu_registers": 1,
                    "data": 4,
                    "data_array": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "flag": 1,
                    "flag_address": 1,
                    "flag_pointer": 1,
                    "input_array": 3,
                    "memory_access_params": 1,
                    "memory_address": 2,
                    "param": 1,
                    "param_array": 1,
                    "pointer": 2,
                    "ptr_array": 1,
                    "status_ptr": 1
                },
                "param_2": {
                    "array_size": 2,
                    "cpu_limit": 1,
                    "file_size": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "length": 2,
                    "limit": 3,
                    "max_param": 1,
                    "max_value": 3,
                    "memory_size": 2,
                    "param_value": 1,
                    "size": 7,
                    "size_limit": 3,
                    "value": 3
                },
                "param_3": {
                    "base_value": 1,
                    "buffer_offset": 1,
                    "comparison_value": 1,
                    "current_param": 1,
                    "current_value": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "element_size": 1,
                    "offset": 15,
                    "param_diff": 1,
                    "required_memory": 1,
                    "size": 1,
                    "stack_offset": 1,
                    "threshold": 2,
                    "value": 2
                }
            },
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc",
                "FUN_08002640",
                "FUN_080027f4"
            ],
            "code": "\nundefined4 check_flag_status_08002bb4(int *array,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*array + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    result = FUN_08002d3c(array);\n    if (result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (result = FUN_080015a0(), size < (uint)(result - offset))))) {\n      array[0x10] = array[0x10] | 0x20;\n      array[0xc] = 0;\n      *(undefined *)((int)array + 0x3d) = 0x20;\n      *(undefined *)(array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_flag_status_08002bb4",
            "entrypoint": "0x08002bb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002bb4": "check_flag_status_08002bb4",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "additional_data": {
                "FUN_080015a0": {
                    "get_array_length": 1,
                    "get_array_size": 2,
                    "get_available_memory": 4,
                    "get_available_size": 1,
                    "get_available_space": 1,
                    "get_block_size": 1,
                    "get_buffer_size": 1,
                    "get_difference": 1,
                    "get_function_result": 1,
                    "get_limit": 1,
                    "get_max_length": 1,
                    "get_max_value": 1,
                    "get_maximum_length": 1,
                    "get_memory_block_size": 2,
                    "get_memory_size": 4,
                    "get_result": 1,
                    "get_some_value": 1,
                    "get_threshold": 1,
                    "get_threshold_value": 1,
                    "get_total_length": 1,
                    "get_total_size": 1
                },
                "FUN_08002c2e": {
                    "check_and_modify_data": 1,
                    "check_and_modify_flags": 2,
                    "check_and_modify_parameters": 1,
                    "check_and_modify_state": 1,
                    "check_and_process_data": 2,
                    "check_and_set_flags": 1,
                    "check_and_update_flags": 1,
                    "check_and_update_status": 1,
                    "check_condition": 1,
                    "check_condition_and_handle": 1,
                    "check_condition_and_return": 1,
                    "check_conditions_and_process": 1,
                    "check_flag_and_update": 1,
                    "check_flags_and_bounds": 1,
                    "check_flags_validity": 1,
                    "check_for_completion": 1,
                    "check_for_flag": 1,
                    "check_if_flag_set": 1,
                    "check_input_validity": 1,
                    "check_memory_access": 6,
                    "check_memory_permissions": 1,
                    "check_permissions": 1,
                    "check_status": 1,
                    "check_status_and_handle_error": 1
                },
                "FUN_08002d3c": {
                    "check_condition": 10,
                    "check_data": 1,
                    "check_flag": 6,
                    "check_flags": 1,
                    "check_function": 1,
                    "check_memory_block_readability": 1,
                    "check_memory_condition": 1,
                    "check_permission": 1,
                    "check_status": 1,
                    "check_valid_memory": 1,
                    "has_memory_error": 1,
                    "is_flag_set": 2,
                    "is_memory_valid": 1,
                    "is_ready": 1
                },
                "iVar1": {
                    "error": 1,
                    "error_code": 1,
                    "result": 18,
                    "return_value": 6,
                    "status": 1
                },
                "param_1": {
                    "arg_list": 1,
                    "array": 3,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "data": 4,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "flags": 1,
                    "input_array": 5,
                    "memory": 2,
                    "memory_address": 1,
                    "memory_array": 1,
                    "memory_block": 1,
                    "memory_data": 1,
                    "memory_pointer": 1,
                    "param_array": 2,
                    "parameter_array": 1,
                    "pointer_to_data": 1,
                    "target": 1
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 2,
                    "data_length": 1,
                    "data_size": 1,
                    "flag": 2,
                    "input_length": 1,
                    "input_value": 1,
                    "length": 1,
                    "limit": 2,
                    "memory_size": 2,
                    "param_value": 2,
                    "size": 10,
                    "size_limit": 4,
                    "value": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "comparison_value": 1,
                    "current_size": 1,
                    "element_size": 1,
                    "offset": 17,
                    "param_threshold": 1,
                    "required_size": 1,
                    "start_index": 2,
                    "threshold": 3,
                    "value": 2,
                    "value_to_compare": 1
                }
            },
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\nundefined4 check_memory_access_08002c2e(int *input_array,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*input_array + 0x14) & 4) == 4) {\n      return 0;\n    }\n    result = FUN_08002d3c(input_array);\n    if (result != 0) break;\n    if ((size != 0xffffffff) &&\n       ((size == 0 || (result = FUN_080015a0(), size < (uint)(result - offset))))) {\n      input_array[0x10] = input_array[0x10] | 0x20;\n      input_array[0xc] = 0;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)(input_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_memory_access_08002c2e",
            "entrypoint": "0x08002c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c2e": "check_memory_access_08002c2e",
                "iVar1": "result",
                "param_1": "input_array",
                "param_2": "size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "additional_data": {
                "FUN_080015a0": {
                    "get_array_size": 1,
                    "get_current_size": 1,
                    "get_cutoff": 1,
                    "get_expected_value": 1,
                    "get_required_size": 1,
                    "get_threshold_value": 1
                },
                "FUN_08002ca8": {
                    "check_access": 2,
                    "check_and_modify_flags": 1,
                    "check_and_modify_value": 1,
                    "check_and_process_data": 1,
                    "check_and_set_flags": 1,
                    "check_and_update_status": 5,
                    "check_condition": 1,
                    "check_conditions": 1,
                    "check_flag_and_calculate": 1,
                    "check_flag_and_return": 1,
                    "check_flag_status": 1,
                    "check_flag_validity": 2,
                    "check_flags": 3,
                    "check_function": 2,
                    "check_memory": 1,
                    "check_permissions": 2,
                    "check_status": 3,
                    "check_validity": 1,
                    "process_input": 1
                },
                "F_080015a0": {
                    "get_offset": 1
                },
                "iVar1": {
                    "current_size": 1,
                    "data_size": 1,
                    "func_result": 1,
                    "function_result": 3,
                    "min_value": 1,
                    "offset_diff": 1,
                    "required_size": 3,
                    "result": 12,
                    "return_value": 4,
                    "sub_func_result": 1,
                    "sub_function_result": 1,
                    "sub_result": 1
                },
                "param_1": {
                    "access_info": 2,
                    "array": 2,
                    "data": 2,
                    "data_ptr": 1,
                    "flag": 1,
                    "flag_array": 2,
                    "flag_pointer": 1,
                    "flags": 3,
                    "function_pointer": 1,
                    "input_array": 3,
                    "input_data": 1,
                    "input_ptr": 1,
                    "memory_address": 1,
                    "params": 1,
                    "permissions": 2,
                    "pointer": 1,
                    "ptr": 2,
                    "status_array": 2,
                    "status_data": 1,
                    "status_info": 1
                },
                "param_2": {
                    "array_size": 2,
                    "data_length": 1,
                    "file_size": 1,
                    "input_value": 3,
                    "max_size": 1,
                    "memory_size": 1,
                    "size": 21,
                    "value": 1
                },
                "param_3": {
                    "comparison_value": 1,
                    "current_size": 1,
                    "difference": 1,
                    "file_offset": 1,
                    "limit": 1,
                    "offset": 18,
                    "required_size": 1,
                    "start_index": 1,
                    "threshold": 3,
                    "value": 3
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\nundefined4 check_and_update_status_08002ca8(int *input_array,uint size,int offset)\n\n{\n  int result;\n  \n  while( true ) {\n    if ((*(uint *)(*input_array + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*input_array + 0x14) & 0x10) == 0x10) break;\n    if ((size == 0) || (result = FUN_080015a0(), size < (uint)(result - offset))) {\n      input_array[0x10] = input_array[0x10] | 0x20;\n      *(undefined *)((int)input_array + 0x3d) = 0x20;\n      *(undefined *)(input_array + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*input_array + 0x14) = 0xffffffef;\n  input_array[0x10] = 0;\n  input_array[0xc] = 0;\n  *(undefined *)((int)input_array + 0x3d) = 0x20;\n  *(undefined *)(input_array + 0xf) = 0;\n  return 1;\n}\n\n",
            "current_name": "check_and_update_status_08002ca8",
            "entrypoint": "0x08002ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ca8": "check_and_update_status_08002ca8",
                "iVar1": "result",
                "param_1": "input_array",
                "param_2": "size",
                "param_3": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "additional_data": {
                "0": {
                    "value2": 1
                },
                "0x10": {
                    "value1_offset": 1
                },
                "0x14": {
                    "flag_offset": 1,
                    "offset_value": 1
                },
                "0x20": {
                    "flag_char_value": 1
                },
                "0x3d": {
                    "flag_char_offset": 1
                },
                "0x400": {
                    "bit_mask": 1,
                    "flag_mask": 1
                },
                "0xc": {
                    "value2_offset": 1
                },
                "0xf": {
                    "value3_offset": 1
                },
                "0xfffffbff": {
                    "reset_flag": 1
                },
                "4": {
                    "value1": 1
                },
                "FUN_08002d3c": {
                    "check_and_modify_flag": 1,
                    "check_and_set_flag": 1,
                    "check_bit_value": 1,
                    "check_condition": 1,
                    "check_flag": 8,
                    "check_flag_and_set_values": 2,
                    "check_flag_status": 7,
                    "check_flagged_bit": 2,
                    "is_flag_set": 1,
                    "process_param": 1,
                    "reset_flag_if_set": 1,
                    "set_flag_and_values": 1,
                    "update_flags": 1,
                    "update_flags_and_settings": 1,
                    "update_param": 2
                },
                "bVar1": {
                    "has_flag": 1,
                    "is_bit_set": 2,
                    "is_condition_true": 1,
                    "is_flag_on": 1,
                    "is_flag_set": 23,
                    "is_set": 1,
                    "result": 1
                },
                "param_1": {
                    "array": 2,
                    "data": 2,
                    "data_array": 1,
                    "flag": 4,
                    "flag_address": 1,
                    "flag_array": 1,
                    "flag_pointer": 4,
                    "flag_ptr": 2,
                    "flag_status": 1,
                    "function_params": 1,
                    "input": 2,
                    "input_array": 3,
                    "param": 4,
                    "param_array": 1,
                    "params": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002c2e",
                "FUN_08002bb4"
            ],
            "code": "\nbool check_flag_status_08002d3c(int *flag)\n\n{\n  bool is_flag_set;\n  \n  is_flag_set = (*(uint *)(*flag + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(undefined4 *)(*flag + 0x14) = 0xfffffbff;\n    flag[0x10] = 4;\n    flag[0xc] = 0;\n    *(undefined *)((int)flag + 0x3d) = 0x20;\n    *(undefined *)(flag + 0xf) = 0;\n  }\n  return is_flag_set;\n}\n\n",
            "current_name": "check_flag_status_08002d3c",
            "entrypoint": "0x08002d3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "bVar1": "is_flag_set",
                "param_1": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "called": [],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002d8a",
            "entrypoint": "0x08002d8a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002d98": {
            "additional_data": {
                "100": {
                    "time_threshold1": 1
                },
                "2": {
                    "time_threshold2": 1
                },
                "5000": {
                    "time_threshold3": 1
                },
                "FUN_080015a0": {
                    "get_current_time": 6,
                    "get_elapsed_time": 1,
                    "get_tick_count": 1,
                    "get_time": 2,
                    "get_time_difference": 1,
                    "get_time_elapsed": 1
                },
                "FUN_08002d98": {
                    "check_and_control": 1,
                    "check_and_modify_settings": 1,
                    "check_flag_states": 1,
                    "check_flags": 2,
                    "check_status": 1,
                    "perform_operation": 1,
                    "perform_operations": 1,
                    "process_flags": 6,
                    "process_state_flags": 1
                },
                "FUN_08003568": {
                    "enable_function": 1,
                    "perform_operation": 1,
                    "set_flag": 2
                },
                "PTR_FUN_08003568": {
                    "execute_operation": 1,
                    "set_flag": 1
                },
                "_DAT_40007000": {
                    "hardware_status_register": 1,
                    "other_register": 1,
                    "register2": 1,
                    "register5": 1,
                    "register7": 1,
                    "register_4": 1,
                    "register_value5": 1,
                    "status_register": 1,
                    "system_status_register": 1,
                    "timer_register": 1
                },
                "_DAT_40021000": {
                    "control_register": 2,
                    "control_register1": 1,
                    "control_register2": 1,
                    "device_control_register": 1,
                    "reg2": 1,
                    "register16": 1,
                    "register2": 4,
                    "register_2": 1,
                    "register_value2": 1
                },
                "_DAT_40021004": {
                    "control_register3": 1,
                    "device_status_register": 1,
                    "reg1": 1,
                    "register1": 3,
                    "register18": 1,
                    "register8": 1,
                    "register_1": 1,
                    "register_value": 2,
                    "register_value1": 1,
                    "status_register": 1
                },
                "_DAT_4002101c": {
                    "control_register2": 1,
                    "register6": 1,
                    "register7": 1,
                    "register9": 1,
                    "register_value4": 1,
                    "status_control_register": 1,
                    "status_register": 1,
                    "status_register2": 1
                },
                "_DAT_40021020": {
                    "control_register3": 1,
                    "more_registers": 1,
                    "reg6": 1,
                    "register3": 2,
                    "register6": 1,
                    "register8": 1,
                    "register_value6": 1,
                    "status_register3": 1,
                    "status_register_2": 1,
                    "system_control_register": 1
                },
                "_DAT_40021024": {
                    "extra_register": 1,
                    "flag2": 1,
                    "flag_register": 1,
                    "hardware_status_register2": 1,
                    "register4": 1,
                    "register5": 1,
                    "register_value3": 1,
                    "status_register1": 1,
                    "system_flags2": 1
                },
                "_DAT_42420000": {
                    "data1": 1,
                    "flag": 1,
                    "flag1": 5,
                    "register3": 2,
                    "var1": 1,
                    "variable1": 1
                },
                "_DAT_42420060": {
                    "flag3": 3,
                    "flag_3": 1,
                    "register9": 1,
                    "var3": 1,
                    "variable2": 1
                },
                "_DAT_42420480": {
                    "data2": 1,
                    "flag2": 4,
                    "flag3": 1,
                    "flag_2": 1,
                    "register4": 1,
                    "var2": 1
                },
                "bVar4": {
                    "flag": 4,
                    "flag_set": 1,
                    "is_bit4_clear": 1,
                    "is_bit_set": 2,
                    "is_condition_met": 5,
                    "is_condition_true": 3,
                    "is_flag_bit_set": 1,
                    "is_flag_cleared": 1,
                    "is_flag_set": 9,
                    "original_flag": 1,
                    "original_flag_state": 1,
                    "was_set": 1
                },
                "control_register1": {
                    "_dat_40021000": 1
                },
                "iVar1": {
                    "current_time": 1,
                    "first_loop_counter": 1,
                    "initial_value": 6,
                    "iteration_start": 1,
                    "loop_start": 1,
                    "previous_time": 1,
                    "start_time": 18,
                    "start_value": 1
                },
                "iVar2": {
                    "current_time": 17,
                    "current_value": 7,
                    "end_time": 2,
                    "iteration_end": 1,
                    "loop_end": 1,
                    "new_time": 1,
                    "second_loop_counter": 1
                },
                "param_1": {
                    "data": 1,
                    "flags": 13,
                    "input_array": 1,
                    "input_data": 1,
                    "input_params": 2,
                    "param": 4,
                    "param_array": 1,
                    "parameters": 4,
                    "params": 1,
                    "settings": 1,
                    "state_flags": 1,
                    "status": 1
                },
                "status_register": {
                    "_dat_40021004": 1
                },
                "uVar3": {
                    "result": 23,
                    "return_value": 7
                }
            },
            "called": [
                "FUN_08003568",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 process_state_flags_08002d98(uint *flags)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool is_flag_set;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (flags[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      if (flags[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (flags[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (flags[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (flags[1] == 0) {\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n      else {\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = FUN_080015a0();\n          if (100 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (flags[4] != 1)) {\n        return 1;\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (flags[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      _DAT_40021000 = flags[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = FUN_080015a0();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (2 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n      FUN_08003568(1);\n    }\n  }\n  if ((*flags & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = FUN_080015a0();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = FUN_080015a0();\n        if (100 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (flags[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (flags[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (flags[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (flags[3] == 0) {\n      start_time = FUN_080015a0();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      start_time = FUN_080015a0();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = FUN_080015a0();\n        if (5000 < (uint)(current_time - start_time)) {\n          return 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (flags[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (flags[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (flags[8] == 0x10000) {\n          _DAT_40021004 = flags[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = flags[9] | flags[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        start_time = FUN_080015a0();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          current_time = FUN_080015a0();\n          if (2 < (uint)(current_time - start_time)) {\n            return 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = FUN_080015a0();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      current_time = FUN_080015a0();\n    } while ((uint)(current_time - start_time) < 3);\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "process_state_flags_08002d98",
            "entrypoint": "0x08002d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d98": "process_state_flags_08002d98",
                "bVar4": "is_flag_set",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "flags",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003260": {
            "additional_data": {
                "0x1389": {
                    "max_iterations": 1
                },
                "0xc": {
                    "bit_multiplier": 1
                },
                "0xf": {
                    "bit_mask": 1
                },
                "3": {
                    "error_value": 1
                },
                "DAT_08009eb0": {
                    "bitset": 1,
                    "data_4": 1,
                    "lookup_table": 3,
                    "shift_table": 1
                },
                "DAT_20000018": {
                    "data": 1,
                    "data_3": 1,
                    "data_register": 2,
                    "data_result": 1,
                    "extracted_value": 1,
                    "output_data": 2,
                    "output_value": 1,
                    "result": 1,
                    "result_data": 1,
                    "updated_permission": 1
                },
                "FUN_0800151c": {
                    "log_to_system": 1,
                    "perform_update": 1,
                    "print_info": 1,
                    "print_message": 1,
                    "print_status": 1,
                    "print_value": 1,
                    "reverse_bits": 1,
                    "set_flag": 1
                },
                "FUN_080015a0": {
                    "calculate_diff": 1,
                    "calculate_time": 1,
                    "calculate_time_difference": 1,
                    "get_current_time": 1,
                    "get_tick_count": 1,
                    "get_time_elapsed": 1
                },
                "FUN_08003260": {
                    "configure_memory": 1,
                    "handle_memory_access": 1,
                    "initialize_memory": 1,
                    "process_data": 1,
                    "reverse_bits_and_set_data": 1,
                    "update_config": 1,
                    "update_data": 5,
                    "update_memory": 2,
                    "update_memory_and_flag": 1,
                    "update_memory_and_register": 1,
                    "update_memory_config": 3,
                    "update_memory_configuration": 2,
                    "update_memory_permissions": 2,
                    "update_memory_settings": 1,
                    "update_memory_with_params": 1,
                    "update_param_and_call_function": 1,
                    "update_parameter": 2,
                    "update_parameters": 1,
                    "update_value": 1
                },
                "FUN_08003440": {
                    "calculate_data": 1,
                    "calculate_result": 2,
                    "calculate_shift": 1,
                    "calculate_value": 1,
                    "get_number": 1,
                    "get_permission": 1,
                    "get_shifted_data": 1
                },
                "LAB_08003394": {
                    "flag_handler": 1
                },
                "_DAT_40021000": {
                    "config": 1,
                    "constant_value": 1,
                    "data_config": 1,
                    "flag": 1,
                    "flag4": 1,
                    "hardware_flags": 1,
                    "status_register": 1
                },
                "_DAT_40021004": {
                    "control_register": 4,
                    "data_2": 1,
                    "data_ctrl": 1,
                    "flag2": 1,
                    "hardware_settings": 1,
                    "memory_config": 1,
                    "modified_parameter": 1,
                    "output": 1,
                    "register_info": 1
                },
                "_DAT_40022000": {
                    "config_register": 1,
                    "current_memory_size": 1,
                    "data": 1,
                    "data_1": 1,
                    "data_flag": 1,
                    "data_register": 1,
                    "flag1": 1,
                    "memory_config": 1,
                    "memory_flags": 1,
                    "memory_info": 1,
                    "memory_permission": 1,
                    "original_parameter": 1
                },
                "iVar1": {
                    "first_value": 1,
                    "init_value": 1,
                    "initial_value": 10,
                    "initial_value1": 1,
                    "start": 2,
                    "start_time": 7,
                    "start_value": 4,
                    "value1": 1
                },
                "iVar2": {
                    "curr_time": 2,
                    "current": 2,
                    "current_time": 5,
                    "current_value": 15,
                    "initial_value2": 1,
                    "second_value": 1,
                    "value2": 1
                },
                "param_1": {
                    "config": 1,
                    "config_data": 2,
                    "data": 3,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "flags": 5,
                    "input_array": 3,
                    "input_value": 1,
                    "memory": 1,
                    "memory_config": 1,
                    "memory_params": 3,
                    "memory_permissions": 1,
                    "memory_settings": 1,
                    "memory_status": 1,
                    "param_array": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "pointers": 1,
                    "settings": 1
                },
                "param_2": {
                    "array_length": 1,
                    "config_size": 3,
                    "data_length": 1,
                    "data_size": 1,
                    "input_size": 1,
                    "input_value": 1,
                    "length": 2,
                    "new_flag": 1,
                    "new_memory_size": 1,
                    "new_permissions": 1,
                    "new_value": 2,
                    "param_value": 1,
                    "size": 13,
                    "value": 2
                },
                "uVar3": {
                    "compressed_value": 1,
                    "result": 18,
                    "result_value": 3,
                    "shifted": 1,
                    "shifted_data": 1,
                    "shifted_value": 2,
                    "temp_value": 2,
                    "temp_var": 1
                },
                "uVar4": {
                    "error_code": 2,
                    "error_flag": 1,
                    "result": 6,
                    "ret_value": 1,
                    "return_val": 1,
                    "return_value": 12,
                    "status": 6,
                    "success": 1,
                    "update_status": 1
                }
            },
            "called": [
                "FUN_0800151c",
                "FUN_08003440",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 update_memory_config_08003260(uint *flags,uint size)\n\n{\n  int initial_value;\n  int current_value;\n  uint result;\n  undefined4 return_value;\n  \n  if (((_DAT_40022000 & 7) < size) &&\n     (_DAT_40022000 = size | _DAT_40022000 & 0xfffffff8, size != (size & 7))) {\n    return_value = 1;\n  }\n  else {\n    if ((*flags & 2) != 0) {\n      _DAT_40021004 = flags[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*flags & 1) == 0) {\nflag_handler:\n      if ((size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = size | _DAT_40022000 & 0xfffffff8, size != (size & 7))) {\n        return_value = 1;\n      }\n      else {\n        if ((*flags & 4) != 0) {\n          _DAT_40021004 = flags[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*flags & 8) != 0) {\n          _DAT_40021004 = flags[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        result = FUN_08003440();\n        DAT_20000018 = result >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        FUN_0800151c(0xf);\n        return_value = 0;\n      }\n    }\n    else {\n      if (flags[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((flags[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = flags[1] | _DAT_40021004 & 0xfffffffc;\n      initial_value = FUN_080015a0();\n      if (flags[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto flag_handler;\n          current_value = FUN_080015a0();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        return_value = 3;\n      }\n      else if (flags[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto flag_handler;\n          current_value = FUN_080015a0();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        return_value = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto flag_handler;\n          current_value = FUN_080015a0();\n        } while ((uint)(current_value - initial_value) < 0x1389);\n        return_value = 3;\n      }\n    }\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_memory_config_08003260",
            "entrypoint": "0x08003260",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003260": "update_memory_config_08003260",
                "LAB_08003394": "flag_handler",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "param_1": "flags",
                "param_2": "size",
                "uVar3": "result",
                "uVar4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003440": {
            "additional_data": {
                "FUN_08003440": {
                    "calculate_clock_speed": 4,
                    "calculate_delay": 7,
                    "calculate_execution_time": 17,
                    "calculate_frequency": 1,
                    "calculate_local_time": 1,
                    "get_execution_time": 1
                },
                "_DAT_40021004": {
                    "data_value": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "register_value": 2
                },
                "local_10": {
                    "clock_speed": 3,
                    "delay": 4,
                    "delay_value": 1,
                    "execution_time": 11,
                    "execution_time_result": 1,
                    "final_clock_speed": 1,
                    "final_execution_time": 1,
                    "final_time": 1,
                    "final_value": 1,
                    "frequency": 1,
                    "local_time": 1,
                    "result": 1,
                    "result_value": 2,
                    "total_execution_time": 1
                },
                "local_14": {
                    "another_value": 1,
                    "config_register": 1,
                    "constant": 1,
                    "dat_40021004": 4,
                    "data": 3,
                    "data_register": 1,
                    "data_value": 2,
                    "external_data": 1,
                    "flag": 2,
                    "global_value": 1,
                    "input_data": 1,
                    "parameter3": 1,
                    "register_data": 1,
                    "register_value": 4,
                    "status": 2,
                    "temp2": 2,
                    "value3": 1,
                    "variable3": 1
                },
                "local_18": {
                    "calculated_value_2": 1,
                    "conditional_value2": 1,
                    "constant_e": 1,
                    "counter": 1,
                    "parameter2": 1,
                    "task_offset": 1,
                    "temp": 7,
                    "temp1": 3,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_variable_b": 1,
                    "temporary2": 1,
                    "time_2": 1,
                    "unused_variable": 4,
                    "value2": 1,
                    "variable2": 1
                },
                "local_1c": {
                    "byte_value": 2,
                    "calculated_value_1": 1,
                    "clock_speed": 1,
                    "conditional_value1": 2,
                    "delay_multiplier": 1,
                    "delay_value": 1,
                    "memory_alignment": 1,
                    "multiplier": 2,
                    "offset": 1,
                    "parameter1": 1,
                    "result": 8,
                    "task_multiplier": 1,
                    "temp1": 1,
                    "temp_value3": 1,
                    "temp_variable_a": 1,
                    "temporary1": 1,
                    "time_1": 1,
                    "time_delay": 2,
                    "value1": 1,
                    "variable1": 1
                },
                "local_2c": {
                    "base_value1": 1,
                    "constant1": 13,
                    "constant_a": 3,
                    "default_time": 1,
                    "default_value1": 1,
                    "input1": 1,
                    "memory_size": 1,
                    "parameter_2": 1,
                    "some_value1": 1,
                    "task_value1": 1,
                    "value1": 6,
                    "value_1": 1
                },
                "local_30": {
                    "additional_value": 1,
                    "adjustment_value": 1,
                    "clock_multiplier": 1,
                    "clock_speed_multiplier": 1,
                    "config_value": 1,
                    "counter1": 1,
                    "counter_register": 1,
                    "delay_factor": 1,
                    "delay_multiplier": 2,
                    "error_code": 1,
                    "execution_time": 3,
                    "execution_time_constant": 1,
                    "execution_time_in_memory": 1,
                    "execution_time_in_seconds": 1,
                    "execution_time_result": 1,
                    "execution_time_step": 1,
                    "execution_time_unit": 1,
                    "flags": 1,
                    "input_value": 1,
                    "multiplier": 1,
                    "parameter_1": 1,
                    "shift_amount": 1,
                    "stack_offset": 1,
                    "task_priority": 1,
                    "time_code": 1,
                    "timeout_value": 1,
                    "timezone_offset": 1,
                    "value2": 1
                },
                "local_c": {
                    "calculated_delay": 1,
                    "calculated_speed": 1,
                    "calculation_result": 1,
                    "conditional_value2": 1,
                    "execution_time": 3,
                    "multiplier": 2,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_delay": 1,
                    "temp_execution_time": 1,
                    "temp_time": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var_2": 1,
                    "temporary_value": 1,
                    "time_3": 1,
                    "variable4": 1
                },
                "uStack_20": {
                    "base_value4": 1,
                    "constant4": 13,
                    "constant_d": 3,
                    "default_value4": 1,
                    "input4": 1,
                    "parameter3": 1,
                    "parameter_5": 1,
                    "some_value4": 1,
                    "stack_value3": 1,
                    "task_value4": 1,
                    "value4": 5,
                    "value_4": 1
                },
                "uStack_24": {
                    "base_value3": 1,
                    "constant3": 13,
                    "constant_c": 3,
                    "default_value3": 1,
                    "input3": 1,
                    "parameter2": 1,
                    "parameter_4": 1,
                    "some_value3": 1,
                    "stack_value2": 1,
                    "task_value3": 1,
                    "value3": 5,
                    "value_3": 1
                },
                "uStack_28": {
                    "base_value2": 1,
                    "constant2": 13,
                    "constant_b": 3,
                    "default_value2": 1,
                    "input2": 1,
                    "parameter1": 1,
                    "parameter_3": 1,
                    "some_value2": 1,
                    "stack_value1": 1,
                    "task_value2": 1,
                    "value2": 5,
                    "value_2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003260"
            ],
            "code": "\n\n\nuint calculate_execution_time_08003440(void)\n\n{\n  undefined2 execution_time;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint result;\n  undefined4 temp;\n  uint dat_40021004;\n  uint execution_time;\n  uint execution_time;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  execution_time = 0x201;\n  temp = 0;\n  execution_time = 0;\n  result = 0;\n  execution_time = 0;\n  dat_40021004 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    execution_time = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      execution_time = result * 4000000;\n    }\n    else {\n      execution_time = (result * 8000000) / (uint)*(byte *)((int)&execution_time + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    execution_time = execution_time;\n  }\n  else {\n    execution_time = 8000000;\n  }\n  return execution_time;\n}\n\n",
            "current_name": "calculate_execution_time_08003440",
            "entrypoint": "0x08003440",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_10": "execution_time",
                "local_14": "dat_40021004",
                "local_18": "temp",
                "local_1c": "result",
                "local_2c": "constant1",
                "local_30": "execution_time",
                "local_c": "execution_time",
                "uStack_20": "constant4",
                "uStack_24": "constant3",
                "uStack_28": "constant2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003504": {
            "additional_data": {
                "DAT_20000018": {
                    "constant_value": 1,
                    "dat_value": 1,
                    "data": 14,
                    "data_address": 2,
                    "data_from_memory": 1,
                    "data_offset": 1,
                    "global_data": 1,
                    "global_value": 2,
                    "global_variable": 1,
                    "result": 1
                },
                "FUN_08003504": {
                    "get_dat_value": 1,
                    "get_data": 11,
                    "get_data_20000018": 1,
                    "get_data_address": 2,
                    "get_data_constant": 1,
                    "get_data_from_address": 1,
                    "get_data_from_memory": 4,
                    "get_data_offset": 1,
                    "get_data_pointer": 1,
                    "get_data_value": 3,
                    "get_global_data": 1,
                    "get_global_data_value": 1,
                    "get_global_value": 2,
                    "get_global_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0",
                "FUN_08003540",
                "FUN_08003518"
            ],
            "code": "\nundefined4 get_data_from_memory_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_from_memory_08003504",
            "entrypoint": "0x08003504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003504": "get_data_from_memory_08003504"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003518": {
            "additional_data": {
                "DAT_08009ec0": {
                    "data_offset": 1,
                    "data_pointer": 1,
                    "offset": 1
                },
                "FIND_SHIFTED_RESULT": {
                    "calculate_shifted_result": 1
                },
                "FUN_08003504": {
                    "get_divisible_number": 1,
                    "get_extracted_value": 1,
                    "get_function_result": 1,
                    "get_initial_value": 3,
                    "get_input_data": 1,
                    "get_original_value": 2,
                    "get_return_value": 1,
                    "get_shifted_value": 1,
                    "get_uint_value": 1,
                    "get_unsigned_value": 2,
                    "get_value": 7,
                    "retrieve_data": 1
                },
                "FUN_08003518": {
                    "calculate_shifted_result": 1,
                    "extracted_bits": 1,
                    "extracted_function": 1,
                    "extracted_value_shifted": 1,
                    "get_shifted_value": 2,
                    "shift_and_return": 1,
                    "shift_and_return_result": 3,
                    "shift_by_byte_value": 1,
                    "shift_result_based_on_value": 1,
                    "shift_result_by_bit_value": 1,
                    "shift_result_by_offset": 2,
                    "shift_right_and_return": 2,
                    "shift_right_by_bits": 1,
                    "shift_right_by_offset": 1,
                    "shift_uint": 1,
                    "shift_value": 1,
                    "shift_value_based_on_offset": 1,
                    "shifted_result": 2,
                    "shifted_return_value": 1,
                    "shifted_value": 4
                },
                "F_UNDECODE_BITS": {
                    "decode_bits": 1
                },
                "_DAT_40021004": {
                    "data_value": 2,
                    "input": 1,
                    "input_value": 3,
                    "shift_amount": 2,
                    "some_value": 1,
                    "value": 1,
                    "value1": 1
                },
                "int": {
                    "integer_value": 1
                },
                "sbyte": {
                    "byte_offset": 2,
                    "byte_value": 2,
                    "shift_value": 2
                },
                "sbyte_1": {
                    "shift_amount": 1
                },
                "uVar1": {
                    "function_result": 2,
                    "initial_value": 1,
                    "result": 11,
                    "result_of_sub_function": 1,
                    "unsigned_value": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "code": "\n\n\nuinteger_value get_shifted_value_08003518(void)\n\n{\n  uinteger_value result;\n  \n  result = FUN_08003504();\n  return result >> *(byte_value *)((integer_value)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "current_name": "get_shifted_value_08003518",
            "entrypoint": "0x08003518",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003518": "get_shifted_value_08003518",
                "int": "integer_value",
                "sbyte": "byte_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003540": {
            "additional_data": {
                "DAT_08009ec0": {
                    "data": 2,
                    "data_variable": 1
                },
                "FUN_08003504": {
                    "get_data": 2,
                    "get_extracted_value": 1,
                    "get_initial_value": 2,
                    "get_input_value": 1,
                    "get_original_value": 1,
                    "get_result": 1,
                    "get_return_value": 1,
                    "get_unsigned_value": 5,
                    "get_value": 5,
                    "get_value_from_subfunction": 1
                },
                "FUN_08003540": {
                    "bitshift_function": 1,
                    "calculate_shifted_result": 2,
                    "extracted_function": 1,
                    "extracted_value_with_shift": 1,
                    "get_shifted_result": 2,
                    "get_shifted_value": 1,
                    "right_shift_function": 1,
                    "shift_and_return": 4,
                    "shift_and_return_result": 2,
                    "shift_bits_based_on_value": 1,
                    "shift_return_value": 2,
                    "shift_right_and_return": 1,
                    "shifted_result": 4,
                    "shifted_return_value": 2,
                    "shifted_right_value": 1,
                    "shifted_value": 4,
                    "shifted_value_from_function": 1
                },
                "_DAT_40021004": {
                    "data_value": 1,
                    "input": 1,
                    "input_value": 2,
                    "shift_value": 2,
                    "shifted_value": 1,
                    "source_value": 1,
                    "value": 1
                },
                "sbyte": {
                    "byte": 1,
                    "offset": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_value": 2,
                    "signed_byte": 1,
                    "value": 1
                },
                "sbyte_08009ec0": {
                    "shift_amount": 1,
                    "shift_number": 1,
                    "shift_value": 2
                },
                "sbyte_var": {
                    "shift_amount": 1
                },
                "uVar1": {
                    "data_value": 1,
                    "extracted_value": 2,
                    "function_return_value": 1,
                    "initial_value": 1,
                    "input_value": 1,
                    "original_value": 1,
                    "result": 8,
                    "result_from_function": 1,
                    "return_value": 3,
                    "value": 1
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_080046ec"
            ],
            "code": "\n\n\nuint shift_right_and_return_08003540(void)\n\n{\n  uint result;\n  \n  result = FUN_08003504();\n  return result >> *(shift_value *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "current_name": "shift_right_and_return_08003540",
            "entrypoint": "0x08003540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003540": "shift_right_and_return_08003540",
                "sbyte": "shift_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003568": {
            "additional_data": {
                "FUN_08003568": {
                    "calculate_and_wait": 1,
                    "calculate_cycles_for_delay": 1,
                    "calculate_delay": 11,
                    "calculate_iterations": 13,
                    "calculate_time": 1,
                    "delay_function": 3
                },
                "bVar1": {
                    "condition_met": 1,
                    "continue_loop": 2,
                    "is_adjusted_value_non_zero": 2,
                    "is_delay_complete": 1,
                    "is_non_zero": 1,
                    "is_not_zero": 1,
                    "is_value_not_zero": 1
                },
                "local_c": {
                    "adjusted_value": 3,
                    "calculated_iterations": 1,
                    "calculated_value": 3,
                    "count": 1,
                    "counter": 1,
                    "cycles_remaining": 1,
                    "delay": 2,
                    "delay_count": 7,
                    "delay_counter": 1,
                    "delay_cycles": 1,
                    "delay_iterations": 1,
                    "iteration_count": 3,
                    "iterations": 2,
                    "multiplied_value": 1,
                    "num_iterations": 1,
                    "result": 1
                },
                "param_1": {
                    "delay_milliseconds": 1,
                    "input": 6,
                    "input_number": 1,
                    "input_value": 21,
                    "time_in_milliseconds": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d98"
            ],
            "code": "\nvoid calculate_iterations_08003568(int input_value)\n\n{\n  bool is_adjusted_value_non_zero;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000018 / 8000);\n  do {\n    is_adjusted_value_non_zero = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (is_adjusted_value_non_zero);\n  return;\n}\n\n",
            "current_name": "calculate_iterations_08003568",
            "entrypoint": "0x08003568",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003568": "calculate_iterations_08003568",
                "bVar1": "is_adjusted_value_non_zero",
                "local_c": "delay_count",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035a4": {
            "additional_data": {
                "FUNC_080035fa": {
                    "initialize_data": 2,
                    "initialize_param": 4,
                    "process_data": 8,
                    "process_input": 1,
                    "reset_data": 1,
                    "update_data": 2,
                    "update_function": 2,
                    "update_status": 1
                },
                "FUN_080035a4": {
                    "check_and_execute": 1,
                    "check_and_process_data": 11,
                    "check_and_process_param": 1,
                    "check_and_update_data": 2,
                    "check_and_update_flag": 1,
                    "check_and_update_param": 2,
                    "check_and_update_parameters": 1,
                    "check_and_update_status": 3,
                    "check_param": 1,
                    "handle_param": 1,
                    "process_data": 1,
                    "process_param": 1,
                    "validate_and_process_data": 2,
                    "validate_input": 1,
                    "validate_param": 1,
                    "verify_input": 1
                },
                "FUN_08003c94": {
                    "calculate_checksum": 2,
                    "copy_data": 2,
                    "perform_operation": 2,
                    "process_data": 7,
                    "process_data_section": 1,
                    "process_param": 2,
                    "process_pointers": 1,
                    "update_data": 2,
                    "update_values": 1
                },
                "param_1": {
                    "data": 9,
                    "data_pointer": 2,
                    "data_ptr": 7,
                    "input_array": 1,
                    "input_data": 3,
                    "input_param": 1,
                    "param": 5,
                    "param_1": 1,
                    "parameters": 1,
                    "status_ptr": 1
                },
                "param_2": {
                    "additional_data": 1,
                    "data_ptr_2": 1,
                    "next_data_ptr": 1,
                    "output_data": 1,
                    "param_2": 1
                },
                "uVar1": {
                    "result": 15,
                    "return_code": 1,
                    "return_value": 7,
                    "status": 7,
                    "success": 1
                }
            },
            "called": [
                "FUN_08003c94",
                "FUN_080035fa"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 check_and_process_data_080035a4(undefined4 *data)\n\n{\n  undefined4 result;\n  \n  if (data == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x3d) == '\\0') {\n      *(undefined *)(data + 0xf) = 0;\n      FUNC_080035fa(data);\n    }\n    *(undefined *)((int)data + 0x3d) = 2;\n    FUN_08003c94(*data,data + 1);\n    *(undefined *)((int)data + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_process_data_080035a4",
            "entrypoint": "0x080035a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035a4": "check_and_process_data_080035a4",
                "param_1": "data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035fa": {
            "called": [],
            "calling": [
                "FUN_080035a4"
            ],
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080035fa",
            "entrypoint": "0x080035fa",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800360c": {
            "additional_data": {
                "FUN_0800360c": {
                    "set_bit": 2,
                    "set_bit_and_return_zero": 1,
                    "set_bit_as_one": 1,
                    "set_bit_flags": 4,
                    "set_bit_in_array": 3,
                    "set_bit_values": 1,
                    "set_bitwise_or": 3,
                    "set_flag": 2,
                    "set_flag_bits": 2,
                    "set_flags": 7,
                    "set_flags_and_update_value": 1,
                    "set_flags_and_values": 3,
                    "update_bitwise_or": 1
                },
                "array": {
                    "array_pointer": 1
                },
                "data": {
                    "data": 1
                },
                "original_variable_name_1": {
                    "flag1": 1
                },
                "original_variable_name_2": {
                    "flag2": 1
                },
                "param_1": {
                    "array": 3,
                    "array_pointer": 3,
                    "array_ptr": 3,
                    "bit_array": 2,
                    "data": 5,
                    "data_pointer": 1,
                    "flag_ptr": 1,
                    "flags": 1,
                    "flags_ptr": 1,
                    "input": 2,
                    "input_array": 1,
                    "input_pointer": 1,
                    "param": 2,
                    "param_array": 1,
                    "parameter": 1,
                    "parameter_array": 1,
                    "pointer": 1,
                    "pointer_array": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 set_bit_flags_0800360c(uint **data)\n\n{\n  (*data)[3] = (*data)[3] | 1;\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "current_name": "set_bit_flags_0800360c",
            "entrypoint": "0x0800360c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800360c": "set_bit_flags_0800360c",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003640": {
            "additional_data": {
                "FUCN_08003696": {
                    "reset_data": 1
                },
                "FUC_08003696": {
                    "initialize_data": 1
                },
                "FUNCH_08003696": {
                    "process_parameter": 1
                },
                "FUNC_08003696": {
                    "execute_task": 1,
                    "initialize_data": 3,
                    "initialize_param": 2,
                    "perform_action": 1,
                    "perform_initialization": 1,
                    "perform_reverse_operation": 1,
                    "process_data": 6,
                    "process_param": 4,
                    "reset_data": 1,
                    "update_data": 1
                },
                "FUN_08003640": {
                    "check_and_process_data": 8,
                    "check_and_process_param": 3,
                    "check_and_process_parameter": 1,
                    "check_and_process_state": 1,
                    "check_and_update_data": 1,
                    "check_and_update_status": 3,
                    "check_param": 1,
                    "initialize_data": 1,
                    "initialize_flag": 1,
                    "initialize_function": 1,
                    "process_data": 2,
                    "process_input": 1,
                    "validate_and_process_data": 2,
                    "validate_and_process_param": 1,
                    "validate_param": 3,
                    "verify_and_execute": 1
                },
                "FUN_08003c94": {
                    "apply_data_changes": 1,
                    "copy_data": 1,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "process_arguments": 1,
                    "process_data": 11,
                    "process_param": 2,
                    "process_parameters": 1,
                    "process_params": 1,
                    "update_data": 1
                },
                "F_08003c94": {
                    "process_param": 1
                },
                "char_0x3d": {
                    "flag": 1
                },
                "param_1": {
                    "arguments": 1,
                    "data": 5,
                    "data_pointer": 1,
                    "data_ptr": 9,
                    "input": 1,
                    "input_data": 2,
                    "param": 8,
                    "param1_ptr": 1,
                    "parameter": 1,
                    "state": 1,
                    "status_ptr": 1
                },
                "param_2": {
                    "data_ptr2": 2,
                    "next_argument": 1,
                    "next_data_ptr": 1,
                    "next_param": 1,
                    "next_parameter": 1,
                    "output": 1,
                    "param2_ptr": 1
                },
                "uVar1": {
                    "error_code": 1,
                    "result": 26,
                    "return_value": 3,
                    "status": 1
                },
                "uint_ptr": {
                    "data_ptr": 1
                }
            },
            "called": [
                "FUN_08003c94",
                "FUN_08003696"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 check_and_process_data_08003640(undefined4 *data_ptr)\n\n{\n  undefined4 result;\n  \n  if (data_ptr == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data_ptr + 0x3d) == '\\0') {\n      *(undefined *)(data_ptr + 0xf) = 0;\n      FUNC_08003696(data_ptr);\n    }\n    *(undefined *)((int)data_ptr + 0x3d) = 2;\n    FUN_08003c94(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "check_and_process_data_08003640",
            "entrypoint": "0x08003640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003640": "check_and_process_data_08003640",
                "param_1": "data_ptr",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003696": {
            "called": [],
            "calling": [
                "FUN_08003640"
            ],
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003696",
            "entrypoint": "0x08003696",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080036a8": {
            "additional_data": {
                "0": {
                    "success": 1
                },
                "0x11": {
                    "index": 3
                },
                "0x40012c00": {
                    "check_value": 1,
                    "constant": 1,
                    "constant_value": 1
                },
                "0x8000": {
                    "flag_mask": 1
                },
                "DAT_0800565b": {
                    "condition": 1
                },
                "FUN_080036a8": {
                    "initialize_flags": 1,
                    "process_function": 1,
                    "set_flag_and_bit": 1,
                    "set_flag_and_bitmask": 1,
                    "set_flag_and_mask": 1,
                    "set_flag_and_permissions": 1,
                    "set_flag_and_set_bit": 1,
                    "set_flag_and_value": 1,
                    "set_flags_and_permissions": 1,
                    "set_flags_and_status": 1,
                    "update_and_set_flag": 1,
                    "update_data": 2,
                    "update_flags": 3,
                    "update_flags_and_data": 1,
                    "update_flags_and_status": 1,
                    "update_flags_and_value": 3,
                    "update_flags_and_values": 7,
                    "update_param_and_flag": 1,
                    "update_param_value": 1,
                    "update_parameter": 1
                },
                "FUN_080041ea": {
                    "modify_data": 1,
                    "modify_value": 1,
                    "perform_operation": 1,
                    "reverse_bits": 1,
                    "set_flag": 2,
                    "update_data": 1,
                    "update_value_with_flag": 1
                },
                "PTR_FUN_080041ea": {
                    "update_values_and_flag": 1
                },
                "data_ptr": {
                    "data_pointer": 1
                },
                "param_1": {
                    "array": 2,
                    "data": 6,
                    "data_pointer": 5,
                    "flag_array": 1,
                    "flags": 1,
                    "input_array": 1,
                    "param": 1,
                    "param_list": 2,
                    "param_ptr": 1,
                    "parameter": 1,
                    "pointer": 3,
                    "pointer_to_data": 1,
                    "pointer_to_uint": 1,
                    "ptrs": 1,
                    "values": 4
                },
                "param_1_080041ea": {
                    "value": 1
                },
                "param_2": {
                    "flag": 8,
                    "new_value": 2,
                    "param_value": 1,
                    "uint_value": 1,
                    "value": 19
                },
                "param_2_080041ea": {
                    "mask": 1
                },
                "param_3": {
                    "flag": 9,
                    "flag_index": 1,
                    "flag_value": 1,
                    "int_value": 1,
                    "param": 1,
                    "param3": 1,
                    "param_3": 4,
                    "size": 1,
                    "status": 2,
                    "value": 2
                },
                "param_3_080041ea": {
                    "shift": 1
                },
                "uint": {
                    "unsigned_int": 2
                }
            },
            "called": [
                "FUN_080041ea"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 update_flags_and_values_080036a8(unsigned_int **data,undefined4 value)\n\n{\n  FUN_080041ea(*data,value,1);\n  if (*data == (unsigned_int *)0x40012c00) {\n    (*data)[0x11] = (*data)[0x11] | 0x8000;\n  }\n  **data = **data | 1;\n  return 0;\n}\n\n",
            "current_name": "update_flags_and_values_080036a8",
            "entrypoint": "0x080036a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036a8": "update_flags_and_values_080036a8",
                "param_1": "data",
                "param_2": "value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f8": {
            "additional_data": {
                "FUNC_08003c4a": {
                    "do_something_a": 1,
                    "execute_a": 1,
                    "execute_func1": 1,
                    "execute_func3": 1,
                    "execute_function1": 1,
                    "execute_step": 1,
                    "execute_subfunc1": 1,
                    "handle_case1": 1,
                    "handle_flag0": 1,
                    "handle_flag1": 1,
                    "initialize_function_1": 1,
                    "operation4": 1,
                    "perform_action1": 3,
                    "perform_action_a": 2,
                    "perform_operation6": 1,
                    "perform_operation_e": 1,
                    "perform_task_a": 3,
                    "perform_task_f": 1,
                    "process_function_six": 1,
                    "reverse_bit2": 1,
                    "reverse_func7": 1,
                    "reverse_operation7": 1
                },
                "FUNC_08003c5c": {
                    "do_something_c": 1,
                    "execute_c": 1,
                    "execute_condition": 1,
                    "execute_func1": 1,
                    "execute_func3": 1,
                    "execute_function2": 1,
                    "execute_subfunc3": 1,
                    "handle_case3": 1,
                    "handle_flag0x2": 1,
                    "handle_flag2": 1,
                    "operation1": 1,
                    "perform_action3": 3,
                    "perform_action_c": 2,
                    "perform_operation3": 1,
                    "perform_operation_2": 1,
                    "perform_operation_b": 1,
                    "perform_task_b": 1,
                    "perform_task_c": 3,
                    "process_function_three": 1,
                    "reverse_bit4": 1,
                    "reverse_func4": 1,
                    "reverse_operation4": 1
                },
                "FUNC_08003c6e": {
                    "do_something_b": 1,
                    "execute_b": 1,
                    "execute_func2": 2,
                    "execute_function3": 1,
                    "execute_subfunc2": 1,
                    "handle_case2": 1,
                    "handle_flag0x1": 1,
                    "handle_flag3": 1,
                    "operation3": 1,
                    "perform_action": 1,
                    "perform_action2": 3,
                    "perform_action_b": 2,
                    "perform_operation5": 1,
                    "perform_operation_1": 1,
                    "perform_operation_d": 1,
                    "perform_task_b": 2,
                    "perform_task_c": 1,
                    "perform_task_e": 1,
                    "process_function_five": 1,
                    "reverse_bit3": 1,
                    "reverse_func6": 1,
                    "reverse_operation6": 1
                },
                "FUNC_08003c80": {
                    "do_something_d": 1,
                    "execute_d": 1,
                    "execute_func4": 1,
                    "execute_function4": 1,
                    "execute_other_action": 1,
                    "execute_subfunc6": 1,
                    "handle_case4": 1,
                    "handle_flag0x40": 1,
                    "handle_flag4": 1,
                    "modify_data": 1,
                    "perform_action4": 3,
                    "perform_action_d": 1,
                    "perform_action_f": 1,
                    "perform_operation2": 1,
                    "perform_operation_3": 1,
                    "perform_operation_a": 1,
                    "perform_task_b": 1,
                    "perform_task_d": 3,
                    "process_function_two": 1,
                    "reverse_bit6": 1,
                    "reverse_func3": 1,
                    "reverse_operation3": 2
                },
                "FUNC_08004366": {
                    "execute_e": 1,
                    "execute_func5": 1,
                    "execute_function5": 1,
                    "execute_subfunc7": 1,
                    "handle_case5": 1,
                    "handle_flag0x20": 1,
                    "handle_flag5": 1,
                    "perform_action5": 3,
                    "perform_action_e": 1,
                    "perform_action_g": 1,
                    "perform_operation_4": 1,
                    "perform_task_e": 3,
                    "reverse_bit1": 1,
                    "reverse_bits": 4,
                    "reverse_data": 1,
                    "reverse_func1": 1,
                    "reverse_operation1": 2,
                    "reverse_other_condition": 1
                },
                "FUNC_08004378": {
                    "execute_func7": 1,
                    "execute_function6": 1,
                    "execute_g": 1,
                    "execute_subfunc5": 1,
                    "handle_flag0x80": 1,
                    "handle_flag6": 1,
                    "operation2": 1,
                    "perform_action_e": 1,
                    "perform_action_g": 1,
                    "perform_operation4": 1,
                    "perform_operation_c": 1,
                    "perform_task_d": 1,
                    "perform_task_f": 1,
                    "perform_task_g": 1,
                    "process_data": 1,
                    "process_function_four": 1,
                    "reverse_bit8": 1,
                    "reverse_condition": 1,
                    "reverse_data2": 2,
                    "reverse_data_2": 1,
                    "reverse_flags2": 2,
                    "reverse_func5": 1,
                    "reverse_operation5": 1,
                    "reverse_something_else": 1,
                    "reverse_task_b": 1
                },
                "FUNC_08004f78": {
                    "execute_subfunc4": 1,
                    "handle_flag7": 1,
                    "perform_action_d": 1,
                    "reverse_action": 1
                },
                "FUN_080036f8": {
                    "analyze_data": 1,
                    "check_and_execute_function": 1,
                    "check_and_execute_functions": 2,
                    "check_and_process_flags": 1,
                    "execute_conditions": 1,
                    "handle_flags": 1,
                    "process_data": 5,
                    "process_flags": 6,
                    "process_function": 1,
                    "process_param": 1,
                    "process_parameters": 2,
                    "process_params": 3,
                    "update_data": 1,
                    "update_params_and_call_functions": 1
                },
                "FUN_08004f78": {
                    "do_something_to_input": 1,
                    "execute_f": 1,
                    "execute_func6": 1,
                    "execute_function7": 1,
                    "handle_flag0x1": 1,
                    "perform_action_f": 1,
                    "perform_operation1": 1,
                    "perform_task_a": 1,
                    "perform_task_f": 1,
                    "perform_task_g": 1,
                    "process_function_one": 1,
                    "reverse_array": 1,
                    "reverse_bit7": 1,
                    "reverse_data": 1,
                    "reverse_data1": 1,
                    "reverse_data_1": 1,
                    "reverse_flags": 1,
                    "reverse_flags1": 1,
                    "reverse_func2": 1,
                    "reverse_operation2": 2,
                    "reverse_something": 1,
                    "reverse_task_a": 1
                },
                "param_1": {
                    "data": 5,
                    "data_array": 1,
                    "data_ptr": 2,
                    "flags": 5,
                    "flags_ptr": 1,
                    "function_params": 1,
                    "input": 1,
                    "input_array": 1,
                    "input_data": 1,
                    "input_params": 1,
                    "param": 1,
                    "param_array": 1,
                    "param_list": 1,
                    "parameter": 1,
                    "parameters": 3,
                    "params": 3,
                    "ptr": 1
                }
            },
            "called": [
                "FUN_08004366",
                "FUN_08004f78",
                "FUN_08003c80",
                "FUN_08003c5c",
                "FUN_08004378",
                "FUN_08003c6e",
                "FUN_08003c4a"
            ],
            "calling": [
                "FUN_08005714"
            ],
            "code": "\nvoid check_and_process_flags_080036f8(int *data)\n\n{\n  if (((*(uint *)(*data + 0x10) & 2) == 2) && ((*(uint *)(*data + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffd;\n    *(undefined *)(data + 7) = 1;\n    if ((*(uint *)(*data + 0x18) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 4) == 4) && ((*(uint *)(*data + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffb;\n    *(undefined *)(data + 7) = 2;\n    if ((*(uint *)(*data + 0x18) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 8) == 8) && ((*(uint *)(*data + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffff7;\n    *(undefined *)(data + 7) = 4;\n    if ((*(uint *)(*data + 0x1c) & 3) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 0x10) == 0x10) && ((*(uint *)(*data + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffef;\n    *(undefined *)(data + 7) = 8;\n    if ((*(uint *)(*data + 0x1c) & 0x300) == 0) {\n      FUNC_08003c4a(data);\n      FUNC_08003c6e(data);\n    }\n    else {\n      FUNC_08003c5c(data);\n    }\n    *(undefined *)(data + 7) = 0;\n  }\n  if (((*(uint *)(*data + 0x10) & 1) == 1) && ((*(uint *)(*data + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*data + 0x10) = 0xfffffffe;\n    FUN_08004f78(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x80) == 0x80) && ((*(uint *)(*data + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffff7f;\n    FUNC_08004378(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x40) == 0x40) && ((*(uint *)(*data + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffbf;\n    FUNC_08003c80(data);\n  }\n  if (((*(uint *)(*data + 0x10) & 0x20) == 0x20) && ((*(uint *)(*data + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*data + 0x10) = 0xffffffdf;\n    FUNC_08004366(data);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_process_flags_080036f8",
            "entrypoint": "0x080036f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f8": "check_and_process_flags_080036f8",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003908": {
            "additional_data": {
                "0": {
                    "flag_0": 1
                },
                "0xc": {
                    "flag_c": 1
                },
                "4": {
                    "flag_4": 1
                },
                "8": {
                    "flag_8": 1
                },
                "FUN_08003908": {
                    "check_and_modify_param": 1,
                    "check_and_update_flags": 1,
                    "check_and_update_status": 1,
                    "check_flag": 1,
                    "handle_function": 1,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "process_data": 8,
                    "process_function": 2,
                    "process_input": 1,
                    "process_parameter": 1,
                    "update_configuration": 1,
                    "update_data": 1,
                    "update_flag_value": 2,
                    "update_flags_and_return": 1,
                    "update_flags_based_on_condition": 1,
                    "update_permissions": 2,
                    "update_settings": 1,
                    "update_status": 1,
                    "update_value": 1
                },
                "FUN_08003d60": {
                    "apply_mask": 1,
                    "apply_option_a": 1,
                    "function0": 1,
                    "modify_input_type_0": 1,
                    "modify_param_case_0": 1,
                    "update_flags_case0": 1,
                    "update_status_type_a": 1,
                    "update_value_case0": 1,
                    "update_variable_option_a": 1
                },
                "FUN_08003e38": {
                    "apply_option_b": 1,
                    "function4": 1,
                    "modify_input_type_4": 1,
                    "modify_param_case_4": 1,
                    "shift_bits": 1,
                    "update_flags_case4": 1,
                    "update_status_type_b": 1,
                    "update_value_case4": 1,
                    "update_variable_option_b": 1
                },
                "FUN_08003f18": {
                    "apply_option_d": 1,
                    "combine_values": 1,
                    "function8": 1,
                    "modify_input_type_8": 1,
                    "modify_param_case_8": 1,
                    "update_flags_case8": 1,
                    "update_status_type_d": 1,
                    "update_value_case8": 1,
                    "update_variable_option_d": 1
                },
                "FUN_08003ff8": {
                    "apply_option_c": 1,
                    "function_c": 1,
                    "modify_input_type_12": 1,
                    "modify_param_case_12": 1,
                    "reverse_bits": 1,
                    "update_flags_case0x_c": 1,
                    "update_status_type_c": 1,
                    "update_value_case12": 1,
                    "update_variable_option_c": 1
                },
                "param_1": {
                    "array": 3,
                    "config": 1,
                    "data": 13,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "flag_array": 1,
                    "input_array": 4,
                    "param_array_ptr": 1,
                    "parameter_array": 1,
                    "permission_array": 1,
                    "permissions": 1,
                    "settings": 1,
                    "status_data": 1,
                    "values": 1
                },
                "param_2": {
                    "index": 1,
                    "input_data": 1,
                    "input_size": 1,
                    "input_value": 1,
                    "length": 3,
                    "num": 1,
                    "param": 3,
                    "param_index": 1,
                    "param_value": 4,
                    "size": 3,
                    "value": 12
                },
                "param_3": {
                    "action": 1,
                    "case_value": 2,
                    "command": 1,
                    "condition": 1,
                    "flag": 3,
                    "flag_code": 1,
                    "flag_type": 1,
                    "input_type": 1,
                    "opcode": 1,
                    "operation": 1,
                    "operation_type": 1,
                    "option": 7,
                    "param_index": 1,
                    "permission_type": 1,
                    "selection": 1,
                    "status": 1,
                    "switch_case": 2,
                    "switch_value": 1,
                    "type": 2,
                    "update_type": 1
                },
                "uVar1": {
                    "result": 20,
                    "return_value": 10
                }
            },
            "called": [
                "FUN_08003ff8",
                "FUN_08003e38",
                "FUN_08003d60",
                "FUN_08003f18"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 process_data_08003908(int *data,int value,undefined4 option)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(data + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(data + 0xf) = 1;\n    *(undefined *)((int)data + 0x3d) = 2;\n    switch(option) {\n    case 0:\n      FUN_08003d60(*data,value);\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 8;\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffffb;\n      *(uint *)(*data + 0x18) = *(uint *)(value + 0x10) | *(uint *)(*data + 0x18);\n      break;\n    case 4:\n      FUN_08003e38(*data,value);\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) | 0x800;\n      *(uint *)(*data + 0x18) = *(uint *)(*data + 0x18) & 0xfffffbff;\n      *(uint *)(*data + 0x18) = *(int *)(value + 0x10) << 8 | *(uint *)(*data + 0x18);\n      break;\n    case 8:\n      FUN_08003f18(*data,value);\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 8;\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffffb;\n      *(uint *)(*data + 0x1c) = *(uint *)(value + 0x10) | *(uint *)(*data + 0x1c);\n      break;\n    case 0xc:\n      FUN_08003ff8(*data,value);\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) | 0x800;\n      *(uint *)(*data + 0x1c) = *(uint *)(*data + 0x1c) & 0xfffffbff;\n      *(uint *)(*data + 0x1c) = *(int *)(value + 0x10) << 8 | *(uint *)(*data + 0x1c);\n    }\n    *(undefined *)((int)data + 0x3d) = 1;\n    *(undefined *)(data + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08003908",
            "entrypoint": "0x08003908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003908": "process_data_08003908",
                "param_1": "data",
                "param_2": "value",
                "param_3": "option",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a94": {
            "additional_data": {
                "FUN_08003a94": {
                    "handle_param": 1,
                    "improve_binary_processing": 1,
                    "perform_action": 1,
                    "process_data": 14,
                    "process_function": 2,
                    "process_input": 2,
                    "process_input_data": 1,
                    "process_logic": 1,
                    "process_params": 1,
                    "set_flags": 1,
                    "update_configuration": 1,
                    "update_device_settings": 1,
                    "update_parameters": 1,
                    "update_params": 1,
                    "update_value": 1
                },
                "FUN_080040a0": {
                    "do_another_thing": 1,
                    "execute_command": 1,
                    "execute_function_b": 1,
                    "execute_task": 1,
                    "modify_data": 1,
                    "perform_action2": 1,
                    "perform_action3": 1,
                    "perform_action_b": 1,
                    "perform_action_c": 1,
                    "perform_operation2": 1,
                    "perform_operation_b": 1,
                    "perform_operation_type_50": 1,
                    "process_info_1": 1,
                    "process_input_data_values": 1,
                    "set_parameters2": 1,
                    "update_parameter_uint": 1,
                    "update_params_with_value": 1,
                    "update_status_with_values": 1,
                    "update_value1": 1,
                    "update_value_function": 1
                },
                "FUN_08004104": {
                    "calculate_value_function": 1,
                    "do_something": 1,
                    "execute_function_a": 1,
                    "perform_action": 2,
                    "perform_action1": 1,
                    "perform_action2": 1,
                    "perform_action_a": 1,
                    "perform_action_b": 1,
                    "perform_operation1": 1,
                    "perform_operation_a": 1,
                    "perform_operation_type_60": 1,
                    "process_info_3": 1,
                    "process_input_values": 1,
                    "process_value": 1,
                    "set_parameters1": 1,
                    "update_parameter_three_ints": 1,
                    "update_params_with_two_values": 1,
                    "update_status_32": 1,
                    "update_value3": 1
                },
                "FUN_0800416a": {
                    "handle_value": 1,
                    "perform_action1": 1,
                    "perform_action_a": 1,
                    "process_info_2": 1,
                    "process_input_value": 1,
                    "set_flag": 1,
                    "set_mode": 2,
                    "set_operation_type": 1,
                    "set_parameter_type": 1,
                    "set_params": 1,
                    "set_state": 1,
                    "set_status": 1,
                    "set_value_function": 1,
                    "set_value_type": 1,
                    "update_data": 1,
                    "update_parameter_ushort": 1,
                    "update_status": 1,
                    "update_status_16": 1,
                    "update_value2": 1
                },
                "FUN_080041a8": {
                    "do_additional_processing": 1,
                    "execute_action": 1,
                    "execute_function_c": 1,
                    "manipulate_value_function": 1,
                    "perform_action": 1,
                    "perform_action3": 1,
                    "perform_action4": 1,
                    "perform_action_c": 1,
                    "perform_action_d": 1,
                    "perform_operation3": 1,
                    "perform_operation_c": 1,
                    "perform_operation_type_70": 1,
                    "process_info_4": 1,
                    "reverse_input_values": 1,
                    "reverse_something": 1,
                    "set_parameters3": 1,
                    "update_parameter_four_uint": 1,
                    "update_params_with_three_values": 1,
                    "update_status_with_multiple_values": 1,
                    "update_value4": 1
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 1,
                    "configuration": 1,
                    "data": 3,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 3,
                    "device_settings": 1,
                    "input_array": 11,
                    "input_data": 2,
                    "input_params": 1,
                    "input_values": 1,
                    "param_array": 1,
                    "param_pointer": 1,
                    "params": 1,
                    "value_ptr": 1
                },
                "param_2": {
                    "action_array": 1,
                    "additional_data": 1,
                    "command_buffer": 1,
                    "config_values": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "flags": 1,
                    "flags_array": 1,
                    "info_ptr": 3,
                    "input_array": 1,
                    "input_array_lengths": 1,
                    "input_data": 1,
                    "input_values": 4,
                    "param_array": 3,
                    "params": 1,
                    "value_array": 1,
                    "value_ptr": 1,
                    "values": 6
                },
                "uVar1": {
                    "output_value": 1,
                    "result": 25,
                    "return_value": 5
                },
                "uVar2": {
                    "action": 1,
                    "command": 1,
                    "config_value": 1,
                    "data_type": 1,
                    "data_value": 2,
                    "flag": 1,
                    "flag_value": 1,
                    "info_value": 3,
                    "input_value": 5,
                    "param_value": 4,
                    "type": 1,
                    "value": 10
                }
            },
            "called": [
                "FUN_0800416a",
                "FUN_08004104",
                "FUN_080040a0",
                "FUN_080041a8"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 process_input_data_08003a94(int *input_array,uint *values)\n\n{\n  undefined4 result;\n  uint value;\n  \n  if (*(char *)(input_array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(input_array + 0xf) = 1;\n    *(undefined *)((int)input_array + 0x3d) = 2;\n    *(uint *)(*input_array + 8) = *(uint *)(*input_array + 8) & 0xffff0088;\n    value = *values;\n    if (value == 0x40) {\n      FUN_080040a0(*input_array,values[1],values[3]);\n      FUN_0800416a(*input_array,0x40);\n    }\n    else if (value < 0x41) {\n      if (value == 0x10) {\n        FUN_0800416a(*input_array,0x10);\n      }\n      else if (value < 0x11) {\n        if (value == 0) {\n          FUN_0800416a(*input_array,0);\n        }\n      }\n      else if (value == 0x20) {\n        FUN_0800416a(*input_array,0x20);\n      }\n      else if (value == 0x30) {\n        FUN_0800416a(*input_array,0x30);\n      }\n    }\n    else if (value == 0x70) {\n      FUN_080041a8(*input_array,values[2],values[1],values[3]);\n      *(uint *)(*input_array + 8) = *(uint *)(*input_array + 8) & 0xffffff88 | 0x77;\n    }\n    else if (value < 0x71) {\n      if (value == 0x50) {\n        FUN_080040a0(*input_array,values[1],values[3]);\n        FUN_0800416a(*input_array,0x50);\n      }\n      else if (value == 0x60) {\n        FUN_08004104(*input_array,values[1],values[3]);\n        FUN_0800416a(*input_array,0x60);\n      }\n    }\n    else if (value == 0x1000) {\n      *(uint *)(*input_array + 8) = *(uint *)(*input_array + 8) & 0xfffffff8;\n    }\n    else if (value == 0x2000) {\n      FUN_080041a8(*input_array,values[2],values[1],values[3]);\n      *(uint *)(*input_array + 8) = *(uint *)(*input_array + 8) | 0x4000;\n    }\n    *(undefined *)((int)input_array + 0x3d) = 1;\n    *(undefined *)(input_array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "process_input_data_08003a94",
            "entrypoint": "0x08003a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a94": "process_input_data_08003a94",
                "param_1": "input_array",
                "param_2": "values",
                "uVar1": "result",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c4a",
            "entrypoint": "0x08003c4a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c5c": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c5c",
            "entrypoint": "0x08003c5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c6e": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c6e",
            "entrypoint": "0x08003c6e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c80": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c80",
            "entrypoint": "0x08003c80",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c94": {
            "additional_data": {
                "FUN_08003c94": {
                    "update_config": 4,
                    "update_config_values": 1,
                    "update_configuration": 2,
                    "update_configuration_registers": 1,
                    "update_data": 1,
                    "update_flags_and_values": 1,
                    "update_memory": 7,
                    "update_memory_addresses": 2,
                    "update_memory_block": 1,
                    "update_memory_regions": 1,
                    "update_memory_registers": 2,
                    "update_memory_values": 3,
                    "update_memory_with_values": 1,
                    "update_param_values": 2,
                    "update_parameters": 1
                },
                "F_unscramble_param": {
                    "unscramble_parameters": 1
                },
                "local_c": {
                    "combined_params": 1,
                    "config_value": 1,
                    "current_config": 1,
                    "current_value": 11,
                    "old_value": 1,
                    "original_content": 1,
                    "original_value": 4,
                    "target_data": 1,
                    "temp": 1,
                    "temp_value": 6,
                    "temp_var": 1,
                    "updated_data": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "address_to_modify": 1,
                    "base_address": 1,
                    "config": 3,
                    "config_pointer": 1,
                    "config_ptr": 2,
                    "config_register": 1,
                    "configuration": 1,
                    "input_memory": 1,
                    "input_param": 1,
                    "input_params": 1,
                    "mem_address": 1,
                    "memory_address": 3,
                    "memory_address1": 1,
                    "memory_block": 1,
                    "memory_location": 1,
                    "memory_pointer": 1,
                    "memory_region_1": 1,
                    "memory_registers": 2,
                    "old_data": 1,
                    "old_values": 1,
                    "original_params": 1,
                    "target_address": 2,
                    "target_addresses": 1,
                    "target_memory": 1
                },
                "param_2": {
                    "data": 2,
                    "data_registers": 1,
                    "input_registers": 1,
                    "memory_address2": 1,
                    "memory_region_2": 1,
                    "new_config": 4,
                    "new_config_ptr": 1,
                    "new_data": 2,
                    "new_params": 1,
                    "new_value": 1,
                    "new_value_ptr": 1,
                    "new_values": 6,
                    "new_values_array": 1,
                    "scrambled_param": 1,
                    "source_addresses": 1,
                    "source_data": 2,
                    "source_memory": 1,
                    "updated_params": 1,
                    "values": 2
                },
                "uRam40012c30": {
                    "auxiliary_var": 1,
                    "data40012c30": 1,
                    "global_var": 1,
                    "memory_address1_val2": 1,
                    "memory_value": 2,
                    "ram_value": 1,
                    "register_value": 1,
                    "saved_config": 1,
                    "special_value": 4,
                    "value_at40012c30": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "code": "\nvoid update_memory_with_values_08003c94(uint *memory_address,uint *new_values)\n\n{\n  uint current_value;\n  \n  current_value = *memory_address;\n  if ((((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n      (memory_address == (uint *)0x40000400)) || (memory_address == (uint *)0x40000800)) {\n    current_value = new_values[1] | current_value & 0xffffff8f;\n  }\n  if (((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n     ((memory_address == (uint *)0x40000400 || (memory_address == (uint *)0x40000800)))) {\n    current_value = new_values[3] | current_value & 0xfffffcff;\n  }\n  *memory_address = new_values[5] | current_value & 0xffffff7f;\n  memory_address[0xb] = new_values[2];\n  memory_address[10] = *new_values;\n  if (memory_address == (uint *)0x40012c00) {\n    special_value = new_values[4];\n  }\n  memory_address[5] = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_with_values_08003c94",
            "entrypoint": "0x08003c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c94": "update_memory_with_values_08003c94",
                "local_c": "current_value",
                "param_1": "memory_address",
                "param_2": "new_values",
                "uRam40012c30": "special_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003d60": {
            "additional_data": {
                "FUN_08003d60": {
                    "update_config": 3,
                    "update_configuration": 4,
                    "update_data": 5,
                    "update_data_fields": 1,
                    "update_data_struct": 1,
                    "update_flags_and_values": 1,
                    "update_info": 1,
                    "update_memory": 1,
                    "update_param": 1,
                    "update_parameters": 6,
                    "update_params": 5,
                    "update_register": 1,
                    "update_registers": 1
                },
                "local_10": {
                    "current_value": 1,
                    "local_data": 1,
                    "local_value": 15,
                    "local_variable": 1,
                    "local_variable1": 2,
                    "old_value": 1,
                    "original_value": 2,
                    "temp_data": 1,
                    "temp_value": 5,
                    "temp_var3": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 4,
                    "config_address": 5,
                    "config_pointer": 1,
                    "configuration_address": 1,
                    "data_address": 3,
                    "data_struct_address": 1,
                    "function_address": 1,
                    "info_address": 1,
                    "input_param": 1,
                    "param_address": 7,
                    "parameter1": 1,
                    "register_address": 1
                },
                "param_2": {
                    "config_data": 3,
                    "config_values": 1,
                    "data": 4,
                    "data_array": 2,
                    "data_values": 1,
                    "input_data": 2,
                    "new_config": 1,
                    "new_values": 1,
                    "param_array": 4,
                    "param_values": 3,
                    "parameter2": 1,
                    "parameter_array": 1,
                    "parameters": 3,
                    "register_values": 1,
                    "update_param": 1,
                    "values": 2
                },
                "uVar1": {
                    "config_value1": 1,
                    "first_data": 2,
                    "first_value": 2,
                    "input_value1": 1,
                    "new_value": 2,
                    "new_value1": 8,
                    "temp_var1": 1,
                    "updated_var1": 1,
                    "value1": 12,
                    "var1": 1
                },
                "uVar2": {
                    "config_value2": 1,
                    "input_value2": 1,
                    "new_value2": 8,
                    "second_data": 2,
                    "second_value": 2,
                    "temp_var2": 1,
                    "updated_value": 2,
                    "updated_var2": 1,
                    "value2": 12,
                    "var2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_fields_08003d60(int param_address,uint *data)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(param_address + 0x20) = *(uint *)(param_address + 0x20) & 0xfffffffe;\n  local_value = *(uint *)(param_address + 4);\n  value1 = *data;\n  value2 = data[2] | *(uint *)(param_address + 0x20) & 0xfffffffd;\n  if (param_address == 0x40012c00) {\n    value2 = (data[3] | value2 & 0xfffffff7) & 0xfffffffb;\n    local_value = data[6] | data[5] | local_value & 0xfffffcff;\n  }\n  *(uint *)(param_address + 4) = local_value;\n  *(uint *)(param_address + 0x18) = value1 | *(uint *)(param_address + 0x18) & 0xffffff8c;\n  *(uint *)(param_address + 0x34) = data[1];\n  *(uint *)(param_address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_data_fields_08003d60",
            "entrypoint": "0x08003d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003d60": "update_data_fields_08003d60",
                "local_10": "local_value",
                "param_1": "param_address",
                "param_2": "data",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e38": {
            "additional_data": {
                "0x18": {
                    "mask2": 1
                },
                "0x20": {
                    "offset2": 1
                },
                "0x38": {
                    "mask3": 1
                },
                "0x40012c00": {
                    "special_address": 1
                },
                "4": {
                    "offset1": 1
                },
                "FUN_08003e38": {
                    "update_config": 1,
                    "update_configuration": 1,
                    "update_data": 15,
                    "update_info": 1,
                    "update_param": 1,
                    "update_parameter": 1,
                    "update_parameters": 7,
                    "update_params": 3,
                    "update_register_values": 1
                },
                "iVar1": {
                    "info_value": 1,
                    "input_value": 1,
                    "input_var1": 1,
                    "new_value": 1,
                    "param1": 1,
                    "param1_value": 2,
                    "temp_var1": 6,
                    "value": 10,
                    "value1": 6,
                    "value_1": 1,
                    "var1": 1
                },
                "local_10": {
                    "flags": 1,
                    "local_data": 1,
                    "local_value": 5,
                    "local_var": 2,
                    "local_var1": 1,
                    "local_var10": 1,
                    "local_variable": 1,
                    "mask": 1,
                    "masked_value": 1,
                    "modified_value": 1,
                    "new_value": 1,
                    "original_value": 2,
                    "stored_value": 1,
                    "temp_value": 3,
                    "temp_var3": 2,
                    "value3": 5,
                    "value_3": 1,
                    "var3": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 7,
                    "config_address": 2,
                    "data": 1,
                    "data_address": 13,
                    "info_address": 1,
                    "param_address": 2,
                    "param_base_addr": 1,
                    "param_ptr": 1,
                    "parameter_1": 1,
                    "register_address": 1
                },
                "param_2": {
                    "config_data": 1,
                    "data": 3,
                    "data_array": 4,
                    "data_values": 1,
                    "info": 1,
                    "input_array": 2,
                    "input_params": 1,
                    "param_array": 2,
                    "param_values": 1,
                    "parameter_2": 1,
                    "parameters": 6,
                    "params": 2,
                    "params_array": 5,
                    "register_values": 1
                },
                "uVar2": {
                    "flags": 1,
                    "modified_value": 2,
                    "modified_var": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "temp_var2": 3,
                    "updated_value": 12,
                    "updated_var2": 2,
                    "value2": 6,
                    "value_2": 1,
                    "var2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003e38(int data_address,int *parameters)\n\n{\n  int value;\n  uint updated_value;\n  uint value3;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffffef;\n  value3 = *(uint *)(data_address + 4);\n  value = *parameters;\n  updated_value = parameters[2] << 4 | *(uint *)(data_address + 0x20) & 0xffffffdf;\n  if (data_address == 0x40012c00) {\n    updated_value = (parameters[3] << 4 | updated_value & 0xffffff7f) & 0xffffffbf;\n    value3 = parameters[6] << 2 | parameters[5] << 2 | value3 & 0xfffff3ff;\n  }\n  *(uint *)(data_address + 4) = value3;\n  *(uint *)(data_address + 0x18) = value << 8 | *(uint *)(data_address + 0x18) & 0xffff8cff;\n  *(int *)(data_address + 0x38) = parameters[1];\n  *(uint *)(data_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_data_08003e38",
            "entrypoint": "0x08003e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e38": "update_data_08003e38",
                "iVar1": "value",
                "local_10": "value3",
                "param_1": "data_address",
                "param_2": "parameters",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f18": {
            "additional_data": {
                "0x1c": {
                    "address_offset3": 1,
                    "offset2": 1,
                    "setting3_offset": 1,
                    "value1_offset": 1
                },
                "0x20": {
                    "address_offset2": 1,
                    "mask1": 1,
                    "setting1_offset": 1,
                    "value3_offset": 1
                },
                "0x3c": {
                    "address_offset4": 1,
                    "offset3": 1,
                    "setting4_offset": 1,
                    "value2_offset": 1
                },
                "0x40012c00": {
                    "magic_address": 1,
                    "special_address": 3
                },
                "0xffffcfff": {
                    "constant5": 1,
                    "mask4": 2,
                    "special_setting1_mask": 1
                },
                "0xfffff7ff": {
                    "constant3": 1,
                    "mask3": 2,
                    "special_mask": 1
                },
                "0xfffffbff": {
                    "constant4": 1,
                    "special_mask2": 1
                },
                "0xfffffdff": {
                    "constant2": 1,
                    "mask2": 2,
                    "setting2_mask": 1
                },
                "0xfffffeff": {
                    "constant1": 1,
                    "mask1": 2,
                    "setting1_mask": 1
                },
                "0xffffff8c": {
                    "constant6": 1,
                    "mask5": 2,
                    "setting3_mask": 1
                },
                "1": {
                    "offset4": 1,
                    "param_offset": 1,
                    "setting4_value_offset": 1
                },
                "2": {
                    "offset2": 1
                },
                "3": {
                    "offset3": 1,
                    "value2_offset": 1
                },
                "4": {
                    "offset1": 2,
                    "setting2_offset": 1,
                    "value_offset": 1
                },
                "5": {
                    "offset5": 1,
                    "special_setting2_offset": 1,
                    "value3_offset": 1
                },
                "6": {
                    "offset4": 1,
                    "special_setting1_offset": 1,
                    "value4_offset": 1
                },
                "FUN_08003f18": {
                    "update_config": 2,
                    "update_configuration": 6,
                    "update_control_register": 1,
                    "update_data": 8,
                    "update_flags_and_values": 1,
                    "update_param": 1,
                    "update_param_values": 1,
                    "update_parameters": 7,
                    "update_params": 1,
                    "update_registers": 1,
                    "update_settings": 1,
                    "update_value": 1
                },
                "local_10": {
                    "current_value": 3,
                    "local_data": 2,
                    "local_value": 5,
                    "local_var1": 1,
                    "local_variable": 2,
                    "old_value": 1,
                    "original_local_value": 2,
                    "original_setting": 1,
                    "original_value": 1,
                    "temp": 2,
                    "temp_value": 7,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "value3": 1,
                    "var3": 1
                },
                "mask2": {
                    "mask2": 1
                },
                "param_1": {
                    "address": 5,
                    "base_address": 8,
                    "config_address": 5,
                    "configuration_address": 3,
                    "control_address": 1,
                    "data_address": 5,
                    "param": 2,
                    "param_address": 1,
                    "settings_address": 1
                },
                "param_2": {
                    "config_data": 4,
                    "configuration_data": 1,
                    "data": 5,
                    "data_array": 2,
                    "data_values": 1,
                    "input_data": 3,
                    "input_params": 1,
                    "new_config": 1,
                    "param_arr": 1,
                    "param_array": 1,
                    "param_values": 2,
                    "parameters": 4,
                    "parameters_array": 1,
                    "register_values": 1,
                    "values": 3
                },
                "uVar1": {
                    "first_data": 1,
                    "first_param": 1,
                    "first_parameter": 1,
                    "first_value": 3,
                    "input_data1": 1,
                    "input_data_value": 1,
                    "new_data1": 1,
                    "new_value": 2,
                    "new_value1": 5,
                    "new_var1": 1,
                    "original_config_value": 1,
                    "param2_value": 1,
                    "temp_var1": 1,
                    "updated_value1": 1,
                    "value": 2,
                    "value1": 7,
                    "var1": 1
                },
                "uVar2": {
                    "computed_value": 1,
                    "modified_control_value": 1,
                    "modified_value": 2,
                    "new_data2": 1,
                    "new_value2": 5,
                    "new_var2": 1,
                    "second_param": 1,
                    "second_parameter": 1,
                    "second_value": 3,
                    "temp_var2": 1,
                    "updated_config_value": 1,
                    "updated_data": 1,
                    "updated_value": 3,
                    "updated_value2": 1,
                    "value2": 7,
                    "var2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003f18(int base_address,uint *data)\n\n{\n  uint value1;\n  uint value2;\n  uint temp_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  temp_value = *(uint *)(base_address + 4);\n  value1 = *data;\n  value2 = data[2] << 8 | *(uint *)(base_address + 0x20) & 0xfffffdff;\n  if (base_address == 0x40012c00) {\n    value2 = (data[3] << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    temp_value = data[6] << 4 | data[5] << 4 | temp_value & 0xffffcfff;\n  }\n  *(uint *)(base_address + 4) = temp_value;\n  *(uint *)(base_address + 0x1c) = value1 | *(uint *)(base_address + 0x1c) & 0xffffff8c;\n  *(uint *)(base_address + 0x3c) = data[1];\n  *(uint *)(base_address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_data_08003f18",
            "entrypoint": "0x08003f18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f18": "update_data_08003f18",
                "local_10": "temp_value",
                "param_1": "base_address",
                "param_2": "data",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "additional_data": {
                "0x1c": {
                    "mask2_address": 1
                },
                "0x20": {
                    "mask1_address": 1
                },
                "0x40": {
                    "param1_address": 1
                },
                "0x40012c00": {
                    "special_address": 1
                },
                "0xffff8cff": {
                    "mask3": 1
                },
                "0xffffbfff": {
                    "mask2": 1
                },
                "0xffffefff": {
                    "mask1": 1
                },
                "5": {
                    "special_param": 1
                },
                "6": {
                    "shift_amount": 1
                },
                "FUN_08003ff8": {
                    "update_configuration": 3,
                    "update_data": 9,
                    "update_flags": 1,
                    "update_flags_and_values": 5,
                    "update_function": 1,
                    "update_memory": 1,
                    "update_memory_and_registers": 1,
                    "update_memory_data": 1,
                    "update_param": 1,
                    "update_param_values": 1,
                    "update_parameter": 1,
                    "update_parameters": 3,
                    "update_params": 2,
                    "update_values": 1
                },
                "iVar1": {
                    "first_value": 1,
                    "new_value1": 2,
                    "param1": 1,
                    "param1_value": 4,
                    "param_value1": 2,
                    "parameter1": 2,
                    "register1": 1,
                    "value1": 11,
                    "value2": 2,
                    "value_1": 1,
                    "var1": 2,
                    "variable1": 1
                },
                "iVar2": {
                    "new_value2": 2,
                    "param2": 1,
                    "param2_value": 4,
                    "param_value2": 2,
                    "parameter2": 2,
                    "register2": 1,
                    "second_value": 1,
                    "value2": 11,
                    "value3": 2,
                    "value_2": 1,
                    "var2": 2,
                    "variable2": 1
                },
                "local_c": {
                    "config_flags": 1,
                    "config_value": 2,
                    "current_value": 1,
                    "flag": 2,
                    "local_value": 4,
                    "local_var": 1,
                    "local_variable": 1,
                    "local_variable1": 2,
                    "masked_value": 1,
                    "modified_value": 1,
                    "new_value": 1,
                    "temp_value": 3,
                    "updated_value": 2,
                    "value": 6,
                    "value1": 2,
                    "value3": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 8,
                    "config_address": 2,
                    "config_base_address": 1,
                    "data_address": 7,
                    "data_ptr": 1,
                    "function_address": 1,
                    "memory_address": 1,
                    "memory_pointer": 1,
                    "param1": 1,
                    "param_address": 3,
                    "param_base": 1,
                    "param_base_address": 1
                },
                "param_2": {
                    "config_data": 2,
                    "config_values": 1,
                    "data": 3,
                    "data_array": 1,
                    "data_values": 1,
                    "input_arr": 1,
                    "param2": 1,
                    "param_array": 3,
                    "param_list": 1,
                    "param_values": 1,
                    "parameters": 9,
                    "params": 3,
                    "params_array": 3,
                    "register_array": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_memory_data_08003ff8(int base_address,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  value = *(uint *)(base_address + 4);\n  value1 = *parameters;\n  value2 = parameters[2];\n  if (base_address == 0x40012c00) {\n    value = parameters[5] << 6 | value & 0xffffbfff;\n  }\n  *(uint *)(base_address + 4) = value;\n  *(uint *)(base_address + 0x1c) = value1 << 8 | *(uint *)(base_address + 0x1c) & 0xffff8cff;\n  *(int *)(base_address + 0x40) = parameters[1];\n  *(uint *)(base_address + 0x20) = value2 << 0xc | *(uint *)(base_address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "current_name": "update_memory_data_08003ff8",
            "entrypoint": "0x08003ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ff8": "update_memory_data_08003ff8",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "value",
                "param_1": "base_address",
                "param_2": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040a0": {
            "additional_data": {
                "0x18": {
                    "offset2": 1,
                    "value_offset": 1
                },
                "0x20": {
                    "flag_offset": 1,
                    "offset1": 1
                },
                "FUN_080040a0": {
                    "clear_and_update_bits": 1,
                    "modify_data": 1,
                    "modify_param": 1,
                    "modify_parameters": 1,
                    "set_flags_and_values": 1,
                    "set_parameters": 1,
                    "update_bitwise_values": 1,
                    "update_data": 2,
                    "update_flags_and_values": 3,
                    "update_param": 1,
                    "update_param_and_flag": 1,
                    "update_param_values": 1,
                    "update_parameter": 2,
                    "update_parameter_values": 2,
                    "update_parameters": 6,
                    "update_params": 2,
                    "update_values": 4
                },
                "c": {
                    "new_mask": 1
                },
                "param_1": {
                    "address": 6,
                    "base_addr": 1,
                    "base_address": 10,
                    "context_pointer": 1,
                    "data_address": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input_pointer": 2,
                    "param1": 1,
                    "param_address": 1,
                    "param_ptr": 2,
                    "param_start_address": 1,
                    "ptr": 1,
                    "ptr1": 1
                },
                "param_2": {
                    "mask": 3,
                    "mask_val": 1,
                    "new_data": 1,
                    "new_flag_value": 1,
                    "new_flags": 1,
                    "new_value": 12,
                    "param2": 1,
                    "param_bitmask": 1,
                    "param_flag": 1,
                    "param_mask": 1,
                    "param_value": 1,
                    "value": 4,
                    "value1": 3
                },
                "param_3": {
                    "data_val": 1,
                    "flag": 2,
                    "param": 1,
                    "param3": 1,
                    "param_value": 3,
                    "shift_amount": 7,
                    "shift_value": 8,
                    "shifted_value": 1,
                    "value": 4,
                    "value2": 3
                },
                "uVar1": {
                    "current_val": 1,
                    "current_value": 2,
                    "existing_data": 1,
                    "existing_value": 1,
                    "flags": 1,
                    "old_flag_value": 1,
                    "old_flags": 1,
                    "old_value": 2,
                    "orig_flag_value": 1,
                    "original_mask": 1,
                    "original_value": 1,
                    "pre_value": 1,
                    "prev_param_value": 1,
                    "prev_value": 2,
                    "previous_value": 4,
                    "saved_value": 1,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "temp_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_flags_and_values_080040a0(int base_address,uint new_value,int shift_value)\n\n{\n  uint previous_value;\n  \n  previous_value = *(uint *)(base_address + 0x20);\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  *(uint *)(base_address + 0x18) = shift_value << 4 | *(uint *)(base_address + 0x18) & 0xffffff0f;\n  *(uint *)(base_address + 0x20) = new_value | previous_value & 0xfffffff5;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_080040a0",
            "entrypoint": "0x080040a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040a0": "update_flags_and_values_080040a0",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "shift_value",
                "uVar1": "previous_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004104": {
            "additional_data": {
                "0x18": {
                    "value_mask": 1
                },
                "0x20": {
                    "mask": 1
                },
                "0x5f": {
                    "bit_mask": 1
                },
                "0xefffffff": {
                    "clear_mask": 1
                },
                "0xffff0fff": {
                    "clear_bits": 1
                },
                "FUN_08004104": {
                    "clear_bit_fields": 1,
                    "clear_bits_and_set_values": 1,
                    "clear_flags": 2,
                    "clear_flags_and_set_values": 1,
                    "modify_param": 1,
                    "modify_params": 1,
                    "set_bits_in_memory": 1,
                    "set_bits_in_register": 1,
                    "update_flags": 8,
                    "update_flags_and_values": 6,
                    "update_parameters": 5,
                    "update_params": 2,
                    "update_permissions": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "base_address": 14,
                    "data": 4,
                    "data_address": 3,
                    "data_ptr": 2,
                    "memory_address": 1,
                    "obj_address": 1,
                    "object_address": 1,
                    "ptr": 1,
                    "register": 1,
                    "user_data": 1
                },
                "param_2": {
                    "arg2": 1,
                    "bit_value": 1,
                    "bitmask": 1,
                    "bits_to_set": 1,
                    "flag_value": 1,
                    "flags": 1,
                    "mask": 1,
                    "new_param2": 1,
                    "new_permission": 1,
                    "param2": 2,
                    "param_a": 2,
                    "value": 5,
                    "value1": 10,
                    "value_a": 1,
                    "value_to_add": 1,
                    "value_to_shift": 1
                },
                "param_3": {
                    "arg3": 1,
                    "bit_position": 1,
                    "bits_to_set": 1,
                    "bits_to_shift": 1,
                    "mask": 1,
                    "new_param3": 1,
                    "param3": 2,
                    "param_b": 2,
                    "permission_flag": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shifted_value": 2,
                    "value": 2,
                    "value2": 10,
                    "value_b": 1,
                    "value_to_combine": 1,
                    "value_to_shift": 2
                },
                "param_4": {
                    "bits_to_shift": 1
                },
                "param_5": {
                    "bits_to_clear": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_flags_and_values_08004104(int base_address,int value1,int value2)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  *(uint *)(base_address + 0x18) = value2 << 0xc | *(uint *)(base_address + 0x18) & 0xffff0fff;\n  *(uint *)(base_address + 0x20) = value1 << 4 | *(uint *)(base_address + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_08004104",
            "entrypoint": "0x08004104",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800416a": {
            "additional_data": {
                "0xffffff8f": {
                    "bit_mask": 1,
                    "bitmask": 1,
                    "mask": 1
                },
                "7": {
                    "bit_mask": 1,
                    "bitwise_or_value": 1
                },
                "8": {
                    "offset": 2
                },
                "DAT_": {
                    "": 1
                },
                "FUN_0800416a": {
                    "modify_memory_location": 1,
                    "set_lowest_bits": 1,
                    "set_param_bit": 1,
                    "update_bitmask": 1,
                    "update_data": 2,
                    "update_data_with_param": 1,
                    "update_flag_in_memory": 1,
                    "update_flags": 2,
                    "update_memory": 2,
                    "update_memory_and_masking": 1,
                    "update_memory_value": 4,
                    "update_param_and_store_value": 1,
                    "update_param_value": 1,
                    "update_param_with_bits": 1,
                    "update_param_with_flag": 1,
                    "update_parameter": 1,
                    "update_parameter_flags": 1,
                    "update_parameter_value": 1,
                    "update_parameter_with_value": 1,
                    "update_register_value": 1,
                    "update_register_with_flag": 1,
                    "update_value": 1,
                    "update_value_in_memory": 1,
                    "update_value_with_bit_pattern": 1,
                    "update_value_with_mask": 1
                },
                "PTR_": {
                    "": 1
                },
                "dataAddress": {
                    "base_address": 1
                },
                "local_1": {
                    "value": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 12,
                    "data_address": 3,
                    "data_pointer": 3,
                    "memory_address": 9,
                    "object_address": 1,
                    "param_address": 1
                },
                "param_2": {
                    "bit_pattern": 1,
                    "data": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "flags": 1,
                    "new_bits": 3,
                    "new_data": 5,
                    "new_memory_value": 1,
                    "new_value": 10,
                    "value": 4,
                    "value_to_update": 2
                },
                "param_3": {
                    "mask": 1,
                    "register_value": 1,
                    "updated_data": 1
                },
                "uint": {
                    "unsigned_int": 2,
                    "unsigned_integer": 2
                },
                "valueToUpdate": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_value_in_memory_0800416a(int base_address,ushort new_value)\n\n{\n  *(unsigned_integer *)(base_address + 8) = *(unsigned_integer *)(base_address + 8) & 0xffffff8f | (unsigned_integer)(new_value | 7);\n  return;\n}\n\n",
            "current_name": "update_value_in_memory_0800416a",
            "entrypoint": "0x0800416a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800416a": "update_value_in_memory_0800416a",
                "param_1": "base_address",
                "param_2": "new_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a8": {
            "additional_data": {
                "0xffff00ff": {
                    "mask": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_080041a8": {
                    "apply_bitwise_operations": 2,
                    "modify_params": 1,
                    "set_combined_values": 1,
                    "set_param_bits": 2,
                    "set_param_value": 1,
                    "update_and_merge_values": 1,
                    "update_data": 2,
                    "update_flags": 1,
                    "update_param": 1,
                    "update_param_and_apply_mask": 1,
                    "update_param_values": 1,
                    "update_parameter": 5,
                    "update_parameter_value": 4,
                    "update_parameters": 3,
                    "update_params": 1,
                    "update_register": 1,
                    "update_register_value": 1,
                    "update_value": 1,
                    "update_value_with_bitwise_operations": 1
                },
                "PTR_": {
                    "": 1
                },
                "param_1": {
                    "address": 4,
                    "base_addr": 1,
                    "base_address": 7,
                    "buffer": 1,
                    "data": 2,
                    "data_address": 3,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "input_address": 1,
                    "input_data_address": 1,
                    "memory_address": 1,
                    "param_address": 1,
                    "parameter": 1,
                    "parameter1": 1,
                    "ptr": 1,
                    "register_address": 2
                },
                "param_2": {
                    "bits_to_set": 1,
                    "bitwise_or_value_a": 1,
                    "data1": 3,
                    "first_bits": 1,
                    "new_value": 2,
                    "new_value1": 1,
                    "new_value_1": 1,
                    "value": 1,
                    "value1": 20
                },
                "param_3": {
                    "bits_to_or": 1,
                    "bitwise_or_value_b": 1,
                    "data2": 3,
                    "last_bits": 1,
                    "mask": 1,
                    "mask1": 2,
                    "new_value2": 1,
                    "new_value_2": 1,
                    "value2": 20
                },
                "param_4": {
                    "data3": 3,
                    "mask2": 1,
                    "middle_bits": 1,
                    "new_value3": 1,
                    "parameter4": 1,
                    "shift": 2,
                    "shift_amount": 2,
                    "shift_amt": 1,
                    "shift_value": 1,
                    "value3": 18
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameter_value_080041a8(int base_address,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(base_address + 8) = value1 | value3 << 8 | value2 | *(uint *)(base_address + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_080041a8",
            "entrypoint": "0x080041a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a8": "update_parameter_value_080041a8",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041ea": {
            "additional_data": {
                "FUN_080041ea": {
                    "clear_bit_and_set_bit": 1,
                    "set_bit": 1,
                    "set_bit_value": 1,
                    "toggle_bit": 1,
                    "update_bit": 6,
                    "update_bit_field": 1,
                    "update_bit_in_integer": 1,
                    "update_bit_in_value": 1,
                    "update_bit_in_variable": 1,
                    "update_bit_value": 4,
                    "update_bits": 3,
                    "update_bitwise": 1,
                    "update_bitwise_flags": 1,
                    "update_bitwise_operation": 1,
                    "update_bitwise_operations": 1,
                    "update_bitwise_operators": 1,
                    "update_bitwise_value": 4,
                    "update_value_in_memory": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 22,
                    "data": 1,
                    "data_address": 1,
                    "data_array": 1,
                    "data_ptr": 2,
                    "target": 1,
                    "target_address": 1,
                    "variable_address": 1
                },
                "param_2": {
                    "bit_index": 3,
                    "bit_position": 28
                },
                "param_3": {
                    "bit_value": 12,
                    "data": 1,
                    "new_bit_value": 1,
                    "new_value": 12,
                    "value": 3,
                    "value_to_set": 1,
                    "value_to_update": 1
                },
                "param_4": {
                    "mask": 2
                },
                "param_5": {
                    "shifted_value": 2
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080036a8"
            ],
            "code": "\nvoid update_bit_in_value_080041ea(int base_address,unsigned_int bit_position,int new_value)\n\n{\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(unsigned_int *)(base_address + 0x20) = *(unsigned_int *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bit_in_value_080041ea",
            "entrypoint": "0x080041ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041ea": "update_bit_in_value_080041ea",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800422e": {
            "additional_data": {
                "FUN_0800422e": {
                    "check_and_update_status": 1,
                    "check_and_update_value": 1,
                    "convert_param_to_integer": 1,
                    "initialize_flags": 1,
                    "reverse_and_update_data": 1,
                    "set_flag": 1,
                    "set_flag_and_assign_value": 1,
                    "set_flag_and_calculate_value": 1,
                    "set_flag_if_value_one": 1,
                    "set_flag_or_value": 2,
                    "set_param_value": 1,
                    "toggle_flag": 1,
                    "update_data": 3,
                    "update_flag_and_set_value": 1,
                    "update_flag_and_value": 1,
                    "update_flag_and_values": 1,
                    "update_flags": 1,
                    "update_flags_and_return": 1,
                    "update_param": 1,
                    "update_param_and_return": 1,
                    "update_param_with_flag": 1,
                    "update_parameter": 3,
                    "update_parameter_value": 1,
                    "update_status": 1,
                    "update_value": 2
                },
                "param_1": {
                    "array": 2,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "config": 1,
                    "data": 2,
                    "data_array": 1,
                    "data_ptr": 1,
                    "flag": 1,
                    "flag_array": 2,
                    "flags": 1,
                    "flags_array": 1,
                    "input": 1,
                    "input_array": 3,
                    "input_parameter": 1,
                    "param_array": 6,
                    "param_list": 1,
                    "parameter1": 1,
                    "parameter_array": 1,
                    "status": 1,
                    "status_array": 1,
                    "value_array": 1
                },
                "param_2": {
                    "conversion_array": 1,
                    "data": 4,
                    "data_array": 4,
                    "data_list": 1,
                    "data_pointer": 1,
                    "input_array": 2,
                    "param_array": 2,
                    "param_data": 1,
                    "param_values": 3,
                    "parameter2": 1,
                    "update_array": 1,
                    "update_values": 1,
                    "value_array": 2,
                    "values": 5,
                    "values_array": 2
                },
                "uVar1": {
                    "result": 8,
                    "return_val": 1,
                    "return_value": 18,
                    "status": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 update_parameter_value_0800422e(int *param_array,uint *values)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(param_array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(param_array + 0xf) = 1;\n    *(uint *)(*param_array + 0x44) =\n         values[6] |\n         (values[6] |\n         (values[5] |\n         (values[4] |\n         (*values | (values[1] | (values[2] | values[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(param_array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_parameter_value_0800422e",
            "entrypoint": "0x0800422e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800422e": "update_parameter_value_0800422e",
                "param_1": "param_array",
                "param_2": "values",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042de": {
            "additional_data": {
                "DAT_1": {
                    "dat_1": 1
                },
                "DAT_2": {
                    "dat_2": 1
                },
                "DAT_3": {
                    "dat_3": 1
                },
                "FUN_080042de": {
                    "check_and_update_flag": 2,
                    "check_and_update_flags": 1,
                    "check_flag": 2,
                    "process_data": 2,
                    "process_input": 2,
                    "process_parameter": 1,
                    "update_flag_and_value": 3,
                    "update_flag_and_values": 1,
                    "update_flags_and_return": 3,
                    "update_flags_and_return_status": 1,
                    "update_flags_and_values": 3,
                    "update_memory": 1,
                    "update_parameter": 2,
                    "update_parameters": 1,
                    "update_permissions": 4,
                    "update_status": 1,
                    "update_value": 1
                },
                "param_1": {
                    "arr_ptr": 1,
                    "array": 6,
                    "array_pointer": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "flag": 2,
                    "flag_addr": 1,
                    "flag_array": 1,
                    "flags": 2,
                    "info": 1,
                    "input_array": 3,
                    "input_values": 1,
                    "memory_pointer": 1,
                    "param_array": 1,
                    "parameter": 1,
                    "parameter1": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "permission_array": 1,
                    "permissions": 1,
                    "permissions_array": 2
                },
                "param_2": {
                    "bit_mask": 1,
                    "bitmask": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "flag_array": 1,
                    "flags": 1,
                    "flags_array": 1,
                    "flags_pointer": 1,
                    "mask": 2,
                    "new_permissions": 3,
                    "new_value_array": 1,
                    "parameter2": 1,
                    "update_array": 1,
                    "updated_values": 1,
                    "val_ptr": 1,
                    "value": 3,
                    "value_array": 2,
                    "values": 8
                },
                "ptr_1": {
                    "ptr_1": 1
                },
                "ptr_2": {
                    "ptr_2": 1
                },
                "ptr_3": {
                    "ptr_3": 1
                },
                "uVar1": {
                    "result": 18,
                    "return_value": 12,
                    "status": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 update_flags_and_return_status_080042de(int *array,uint *values)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xffffff8f;\n    *(uint *)(*array + 4) = *values | *(uint *)(*array + 4);\n    *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xffffff7f;\n    *(uint *)(*array + 8) = values[1] | *(uint *)(*array + 8);\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_flags_and_return_status_080042de",
            "entrypoint": "0x080042de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042de": "update_flags_and_return_status_080042de",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004366": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004366",
            "entrypoint": "0x08004366",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004378": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004378",
            "entrypoint": "0x08004378",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800438a": {
            "additional_data": {
                "FUNC_08004424": {
                    "do_something": 1,
                    "initialize": 3,
                    "initialize_data": 4,
                    "initialize_function": 1,
                    "initialize_memory": 1,
                    "initialize_process": 1,
                    "initialize_subsystem": 1,
                    "perform_action": 1,
                    "perform_initialization": 1,
                    "perform_operation": 2,
                    "process_data": 2,
                    "process_input": 1,
                    "reset_data": 2,
                    "reset_device": 1,
                    "update_data": 1
                },
                "FUN_0800438a": {
                    "check_and_modify_data": 1,
                    "check_and_process_data": 1,
                    "check_and_update_function": 1,
                    "check_validity": 1,
                    "initialize": 1,
                    "initialize_context": 1,
                    "initialize_data": 1,
                    "initialize_data_structure": 2,
                    "initialize_data_structures": 1,
                    "initialize_device": 1,
                    "initialize_flags": 1,
                    "initialize_function": 2,
                    "initialize_memory": 2,
                    "initialize_param": 1,
                    "initialize_parameter": 1,
                    "initialize_params": 1,
                    "initialize_variable": 1,
                    "process_data": 2,
                    "update_data": 1,
                    "validate_and_initialize_data": 1,
                    "validate_and_modify_data": 2,
                    "validate_and_update_data": 1,
                    "validate_input": 3,
                    "verify_input": 1
                },
                "FUN_080046ec": {
                    "configure_device": 1,
                    "configure_memory": 1,
                    "execute_algorithm": 1,
                    "execute_function": 1,
                    "modify_data_conditionally": 1,
                    "perform_calculations": 1,
                    "perform_operation": 1,
                    "process_data": 4,
                    "process_input": 2,
                    "process_sub_data": 2,
                    "reverse_data_flow": 1,
                    "update_data": 2,
                    "update_memory": 1,
                    "update_param": 1,
                    "update_settings": 1,
                    "update_variable": 1
                },
                "char_val": {
                    "character_value": 1
                },
                "param_1": {
                    "array": 1,
                    "context": 1,
                    "data": 5,
                    "data_array": 1,
                    "data_ptr": 4,
                    "data_struct_ptr": 1,
                    "data_structure": 1,
                    "data_structure_ptr": 1,
                    "device": 1,
                    "function_data": 1,
                    "function_params": 1,
                    "input": 1,
                    "input_array": 4,
                    "input_ptr": 2,
                    "memory_block": 1,
                    "memory_pointer": 1,
                    "param": 2,
                    "params": 1,
                    "pointer": 1
                },
                "uVar1": {
                    "result": 24,
                    "return_status": 1,
                    "return_value": 6
                }
            },
            "called": [
                "FUN_080046ec",
                "FUN_08004424"
            ],
            "calling": [
                "FUN_08005598"
            ],
            "code": "\nundefined4 validate_and_initialize_data_0800438a(int *data)\n\n{\n  undefined4 result;\n  \n  if (data == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      FUNC_08004424(data);\n    }\n    *(undefined *)((int)data + 0x39) = 0x24;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    FUN_080046ec(data);\n    *(uint *)(*data + 0x10) = *(uint *)(*data + 0x10) & 0xffffb7ff;\n    *(uint *)(*data + 0x14) = *(uint *)(*data + 0x14) & 0xffffffd5;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) | 0x2000;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x39) = 0x20;\n    *(undefined *)((int)data + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "validate_and_initialize_data_0800438a",
            "entrypoint": "0x0800438a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800438a": "validate_and_initialize_data_0800438a",
                "param_1": "data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004424": {
            "called": [],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004424",
            "entrypoint": "0x08004424",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004436": {
            "additional_data": {
                "FUN_080015a0": {
                    "get_current_time": 2
                },
                "FUN_08004436": {
                    "check_and_process_params": 1,
                    "check_and_update_param": 1,
                    "check_input": 1,
                    "check_input_valid": 1,
                    "decode_binary": 1,
                    "extract_data": 1,
                    "parse_data": 2,
                    "process_data": 16,
                    "process_input": 5
                },
                "iVar1": {
                    "index_i": 1,
                    "initial_value": 1,
                    "initial_value1": 1,
                    "inner_loop_iteration_count": 1,
                    "result": 7,
                    "result1": 1,
                    "temp1": 1,
                    "temp_var1": 4,
                    "temp_var_1": 1
                },
                "iVar2": {
                    "compare_result": 1,
                    "comparison": 2,
                    "current_value": 1,
                    "index_j": 1,
                    "initial_value2": 1,
                    "result": 1,
                    "result2": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_result": 3,
                    "temp_var2": 4,
                    "temp_var_2": 1
                },
                "local_58": {
                    "current_char": 2,
                    "current_data": 4,
                    "current_elem": 1,
                    "current_element": 6,
                    "current_input": 9,
                    "current_ushort": 2,
                    "data_ptr": 1,
                    "input_ptr": 1,
                    "ptr_to_param_2_inner_loop": 1,
                    "short_ptr": 1,
                    "source_data_ptr": 1,
                    "string_ptr": 1,
                    "ushort_pointer": 1
                },
                "param_1": {
                    "data": 10,
                    "data_pointer": 4,
                    "data_ptr": 4,
                    "decode_buffer": 1,
                    "input": 2,
                    "input_array": 2,
                    "input_data": 1,
                    "input_pointer": 1,
                    "input_ptr": 2,
                    "param_ptr": 1,
                    "params": 1,
                    "ptr_array": 1,
                    "ptr_to_param_1": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data": 3,
                    "input": 6,
                    "input_array": 9,
                    "input_data": 3,
                    "input_string": 2,
                    "param_shorts": 1,
                    "ptr_to_param_2": 1,
                    "source_data": 2,
                    "ushort_array": 3
                },
                "param_3": {
                    "array_length": 6,
                    "buffer_size": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "input_array_size": 2,
                    "input_length": 6,
                    "input_size": 4,
                    "num_elements": 1,
                    "num_shorts": 1,
                    "size": 2,
                    "source_length": 1,
                    "string_length": 2,
                    "ushort_array_size": 1
                },
                "param_4": {
                    "limit": 1,
                    "max_attempts": 1,
                    "max_iter": 1,
                    "max_iterations": 2,
                    "max_time": 1,
                    "threshold": 2,
                    "time_limit": 5,
                    "time_threshold": 1,
                    "timeout": 17
                },
                "uVar3": {
                    "error_code": 1,
                    "final_result": 1,
                    "result": 12,
                    "return_value": 8,
                    "status": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004f3c"
            ],
            "code": "\nundefined4 process_data_08004436(uint **data,ushort *input_array,short array_length,uint timeout)\n\n{\n  int result;\n  int temp_var2;\n  undefined4 result;\n  ushort *current_input;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input_array == (ushort *)0x0) || (array_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      result = FUN_080015a0();\n      *(short *)(data + 9) = array_length;\n      *(short *)((int)data + 0x26) = array_length;\n      current_input = input_array;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              temp_var2 = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp_var2 = FUN_080015a0(), (uint)(temp_var2 - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          temp_var2 = 3;\nLAB_0800454c:\n          if (temp_var2 != 0) {\n            return 3;\n          }\n          (*data)[1] = *current_input & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            current_input = current_input + 1;\n          }\n          else {\n            current_input = (ushort *)((int)current_input + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              temp_var2 = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (temp_var2 = FUN_080015a0(), (uint)(temp_var2 - result) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          temp_var2 = 3;\nLAB_08004614:\n          if (temp_var2 != 0) {\n            return 3;\n          }\n          (*data)[1] = (uint)*(byte *)current_input;\n          current_input = (ushort *)((int)current_input + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          result = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (temp_var2 = FUN_080015a0(), (uint)(temp_var2 - result) <= timeout))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      result = 3;\nLAB_080046c6:\n      if (result == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_08004436",
            "entrypoint": "0x08004436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004436": "process_data_08004436",
                "iVar1": "result",
                "iVar2": "temp_var2",
                "local_58": "current_input",
                "param_1": "data",
                "param_2": "input_array",
                "param_3": "array_length",
                "param_4": "timeout",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046ec": {
            "additional_data": {
                "0x40013800": {
                    "constant_value": 1
                },
                "100": {
                    "division_factor": 1
                },
                "FUN_08003518": {
                    "calculate_result2": 1,
                    "calculate_value2": 1,
                    "calculate_value_b": 1,
                    "get_alternate_sensor_reading": 1,
                    "get_alternative_value": 1,
                    "get_another_random_number": 1,
                    "get_dec_result": 1,
                    "get_factor2": 1,
                    "get_function_result2": 2,
                    "get_second_value": 1,
                    "get_uint_value_alternative": 1,
                    "perform_calculation2": 1
                },
                "FUN_08003540": {
                    "calculate_result1": 1,
                    "calculate_value1": 1,
                    "calculate_value_a": 1,
                    "get_factor1": 1,
                    "get_first_value": 1,
                    "get_function_result1": 2,
                    "get_initial_value": 1,
                    "get_int_result": 1,
                    "get_random_number": 1,
                    "get_sensor_reading": 1,
                    "get_uint_value": 1,
                    "perform_calculation1": 1
                },
                "FUN_080046ec": {
                    "apply_settings": 1,
                    "calculate_values": 2,
                    "update_config": 1,
                    "update_configuration": 5,
                    "update_data_values": 1,
                    "update_param_values": 2,
                    "update_parameters": 5,
                    "update_params": 1,
                    "update_permissions": 1,
                    "update_settings": 3,
                    "update_values": 6
                },
                "iVar2": {
                    "calculated_value1": 1,
                    "calculated_value2": 1,
                    "calculation2": 1,
                    "calculation_result1": 1,
                    "division_result1": 1,
                    "function_result1": 1,
                    "num1": 1,
                    "quotient1": 1,
                    "result1": 7,
                    "result2": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp_a": 1,
                    "temp_var": 1,
                    "temp_var1": 5,
                    "temp_var2": 3,
                    "updated_value2": 1
                },
                "iVar2_initial": {
                    "quotient1_initial": 1
                },
                "iVar3": {
                    "argument1": 1,
                    "array_val1": 1,
                    "calculation3": 1,
                    "function_result2": 1,
                    "i_var3": 3,
                    "length": 1,
                    "loop_val1": 1,
                    "multiplier": 1,
                    "num2": 1,
                    "param1": 1,
                    "param1_val": 1,
                    "result2": 1,
                    "result3": 1,
                    "settings_value1": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp_b": 1,
                    "temp_var2": 5,
                    "temp_var3": 3,
                    "updated_value3": 1,
                    "var1": 1
                },
                "iVar3_initial": {
                    "i_var3_initial": 1
                },
                "iVar5": {
                    "argument2": 1,
                    "array_val2": 1,
                    "calculation5": 1,
                    "divisor": 1,
                    "function_result3": 1,
                    "i_var5": 3,
                    "loop_val2": 1,
                    "num4": 1,
                    "param2": 1,
                    "param3_val": 1,
                    "result2": 1,
                    "result4": 1,
                    "result5": 1,
                    "settings_value2": 1,
                    "temp3": 3,
                    "temp5": 1,
                    "temp_c": 1,
                    "temp_var3": 2,
                    "temp_var4": 3,
                    "temp_var5": 3,
                    "updated_value5": 1,
                    "var3": 1
                },
                "param_1": {
                    "arguments": 2,
                    "config": 4,
                    "config_pointer": 1,
                    "configuration": 1,
                    "data": 1,
                    "input_array": 4,
                    "param": 1,
                    "param_array": 1,
                    "param_values": 1,
                    "parameters": 7,
                    "params": 2,
                    "permissions": 1,
                    "settings": 4
                },
                "uVar1": {
                    "calculated_value": 2,
                    "calculated_value1": 1,
                    "calculation1": 1,
                    "divided_value": 1,
                    "dividend": 3,
                    "division_result": 4,
                    "division_result1": 1,
                    "divisor": 1,
                    "quotient": 5,
                    "quotient1": 1,
                    "result": 1,
                    "result1": 4,
                    "result_a": 1,
                    "temp1": 1,
                    "temp_var1": 3,
                    "updated_value1": 1
                },
                "uVar4": {
                    "calculated_value4": 1,
                    "calculation4": 1,
                    "calculation_result": 1,
                    "calculation_result2": 1,
                    "constant_val1": 1,
                    "num3": 1,
                    "param2_val": 1,
                    "remainder": 1,
                    "result": 2,
                    "result2": 4,
                    "result3": 1,
                    "result4": 1,
                    "result_b": 1,
                    "temp4": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "temp_var3": 3,
                    "temp_var4": 3,
                    "u_var4": 2,
                    "updated_value4": 1,
                    "var1": 1,
                    "var2": 1
                },
                "uVar4_initial": {
                    "remainder_initial": 1
                },
                "uVar6": {
                    "calculation_result3": 1,
                    "function_result": 4,
                    "get_result": 1,
                    "random_value": 3,
                    "result": 9,
                    "result2": 3,
                    "result3": 2,
                    "result_c": 1,
                    "return_value": 5,
                    "returned_value": 1,
                    "temp_var6": 1
                },
                "uVar6_initial": {
                    "result_initial": 1
                }
            },
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid update_param_values_080046ec(int *parameters)\n\n{\n  ulonglong quotient;\n  int result1;\n  int temp_var2;\n  uint result2;\n  int temp_var5;\n  undefined8 result;\n  \n  *(uint *)(*parameters + 0x10) = parameters[3] | *(uint *)(*parameters + 0x10) & 0xffffcfff;\n  *(uint *)(*parameters + 0xc) =\n       *(uint *)(*parameters + 0xc) & 0xffffe9f3 | parameters[5] | parameters[2] | parameters[4];\n  *(uint *)(*parameters + 0x14) = parameters[6] | *(uint *)(*parameters + 0x14) & 0xfffffcff;\n  if (*parameters == 0x40013800) {\n    result = FUN_08003540();\n    quotient = (ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    result1 = FUN_08003540((int)result,(int)((ulonglong)result >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = parameters[1];\n    result = FUN_08003540();\n    result2 = ((uint)(result1 * 0x19) / (uint)(temp_var2 << 2) +\n            (int)(((ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003540((int)result,(int)((ulonglong)result >> 0x20),result2 * 0x51eb851f);\n    temp_var5 = parameters[1];\n    temp_var2 = FUN_08003540();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(temp_var5 << 2) +\n           (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (result2 / 100 & 0xf0);\n  }\n  else {\n    result = FUN_08003518();\n    quotient = (ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(parameters[1] << 2);\n    result1 = FUN_08003518((int)result,(int)((ulonglong)result >> 0x20),(int)(quotient * 0x51eb851f));\n    temp_var2 = parameters[1];\n    result = FUN_08003518();\n    result2 = ((uint)(result1 * 0x19) / (uint)(temp_var2 << 2) +\n            (int)(((ulonglong)(uint)((int)result * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    result1 = FUN_08003518((int)result,(int)((ulonglong)result >> 0x20),result2 * 0x51eb851f);\n    temp_var5 = parameters[1];\n    temp_var2 = FUN_08003518();\n    *(uint *)(*parameters + 8) =\n         ((((uint)(result1 * 0x19) / (uint)(temp_var5 << 2) +\n           (int)(((ulonglong)(uint)(temp_var2 * 0x19) / (ulonglong)(uint)(parameters[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(quotient / 100) * 0x10 + (result2 / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "current_name": "update_param_values_080046ec",
            "entrypoint": "0x080046ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046ec": "update_param_values_080046ec",
                "iVar2": "result1",
                "iVar3": "temp_var2",
                "iVar5": "temp_var5",
                "param_1": "parameters",
                "uVar1": "quotient",
                "uVar4": "result2",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800491c": {
            "additional_data": {
                "FUN_0800491c": {
                    "initialize_data": 12,
                    "initialize_memory": 2,
                    "initialize_param": 5,
                    "initialize_parameters": 10,
                    "initialize_params": 2
                },
                "FUN_080049cc": {
                    "process_data": 4,
                    "process_param_array": 1,
                    "process_parameters": 1
                },
                "local_11": {
                    "array": 2,
                    "buffer": 3,
                    "buffer3": 2,
                    "byte_array": 4,
                    "data": 1,
                    "data_buffer": 1,
                    "flag_array": 2,
                    "local_array": 2,
                    "placeholder_3": 1,
                    "temp3": 1,
                    "temp_array": 3,
                    "third_byte": 1,
                    "value3": 2,
                    "value_3": 1,
                    "value_array": 1,
                    "values": 1,
                    "var3": 1,
                    "variable3": 2
                },
                "local_12": {
                    "block_size": 1,
                    "buffer2": 2,
                    "buffer_size": 1,
                    "byte_size": 2,
                    "byte_value": 1,
                    "byte_value_2": 1,
                    "constant_value": 1,
                    "flag2": 2,
                    "local_variable2": 1,
                    "placeholder_2": 1,
                    "second_byte": 1,
                    "size": 5,
                    "temp2": 2,
                    "temp_byte2": 1,
                    "temp_var_2": 1,
                    "value": 1,
                    "value2": 2,
                    "value_2": 2,
                    "var2": 1,
                    "variable2": 2
                },
                "local_13": {
                    "buffer1": 2,
                    "byte_value": 2,
                    "byte_value_1": 1,
                    "first_byte": 1,
                    "flag": 2,
                    "flag1": 2,
                    "local_variable1": 1,
                    "placeholder_1": 1,
                    "temp1": 2,
                    "temp_byte1": 1,
                    "temp_var_1": 1,
                    "unused": 1,
                    "value1": 2,
                    "value_1": 2,
                    "var1": 1,
                    "variable1": 2,
                    "zero": 4,
                    "zero1": 1,
                    "zero_byte1": 1,
                    "zero_init_value": 1
                },
                "param_1": {
                    "data": 1,
                    "data_array": 3,
                    "data_buffer": 2,
                    "data_pointer": 3,
                    "memory": 1,
                    "output_array": 5,
                    "output_params": 1,
                    "param": 2,
                    "param_array": 3,
                    "parameters": 4,
                    "parameters_array": 1,
                    "params": 3,
                    "result_array": 2
                }
            },
            "called": [
                "FUN_080049cc"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_data_0800491c(undefined4 *output_array)\n\n{\n  undefined zero;\n  undefined size;\n  undefined byte_array [5];\n  \n  zero = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&zero,1);\n  size = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&size,1);\n  byte_array[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,byte_array,1);\n  *output_array = 0;\n  output_array[1] = 0;\n  output_array[2] = 0;\n  output_array[3] = 0;\n  output_array[4] = 0;\n  output_array[5] = 0;\n  output_array[6] = 0;\n  output_array[7] = 0;\n  output_array[8] = 0;\n  output_array[9] = 0;\n  output_array[10] = 0;\n  FUN_080049cc(output_array);\n  return;\n}\n\n",
            "current_name": "initialize_data_0800491c",
            "entrypoint": "0x0800491c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800491c": "initialize_data_0800491c",
                "local_11": "byte_array",
                "local_12": "size",
                "local_13": "zero",
                "param_1": "output_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049cc": {
            "additional_data": {
                "FUN_08000aa8": {
                    "accumulate_sums": 1,
                    "add_to_average": 1,
                    "calculate_average": 1,
                    "calculate_max_with_sum": 1,
                    "calculate_partial_sum": 1,
                    "calculate_sum": 2,
                    "calculate_sum_with_parameter": 1,
                    "compare_values": 1,
                    "find_max": 1,
                    "get_max": 1
                },
                "FUN_08000c10": {
                    "calculate_average": 3,
                    "calculate_factor": 1,
                    "calculate_max": 1,
                    "calculate_size": 1,
                    "calculate_total_sum": 1,
                    "get_array_size": 1,
                    "get_average": 1,
                    "get_multiplier": 1,
                    "get_sum": 1
                },
                "FUN_08000e20": {
                    "calculate_average": 2,
                    "calculate_division": 1,
                    "calculate_sum_with_two_parameters": 1,
                    "calculate_weighted_average": 2,
                    "calculate_with_max": 1,
                    "combine_sums": 1,
                    "get_new_sum": 1,
                    "multiply_average": 1,
                    "multiply_values": 1
                },
                "FUN_080049cc": {
                    "calculate_average": 1,
                    "calculate_averages": 8,
                    "calculate_checksum": 1,
                    "calculate_checksums": 1,
                    "calculate_data": 1,
                    "calculate_metrics": 2,
                    "calculate_result": 1,
                    "calculate_results": 2,
                    "calculate_statistics": 4,
                    "calculate_stats": 3,
                    "calculate_sum": 2,
                    "calculate_sums": 1,
                    "calculate_totals": 3
                },
                "FUN_08004ae0": {
                    "calculate_variables": 1,
                    "execute_utterance": 1,
                    "get_data": 2,
                    "get_values": 1,
                    "initialize_array": 1,
                    "initialize_param": 1,
                    "initialize_params": 1,
                    "initialize_values": 1,
                    "perform_operation": 1,
                    "prepare_data": 1
                },
                "FUN_08004d78": {
                    "calculate_results": 1,
                    "calculate_sum": 1,
                    "calculate_sums": 5,
                    "calculate_values": 1,
                    "get_min_max": 1,
                    "get_sum": 1,
                    "get_sums": 1
                },
                "local_10": {
                    "average3": 1,
                    "average_variable3": 1,
                    "average_variable_3": 1,
                    "checksum2": 1,
                    "max_data1": 1,
                    "max_data_1": 1,
                    "max_data_a": 1,
                    "max_input_val": 1,
                    "max_param1": 1,
                    "max_value5": 1,
                    "min_x": 1,
                    "partial_sum_c": 1,
                    "result2": 1,
                    "sum2": 6,
                    "sum3": 2,
                    "sum_param_2": 1,
                    "sum_val2": 1,
                    "sum_value2": 1,
                    "sum_var4": 1,
                    "sum_var5": 1,
                    "sum_variable4": 1,
                    "total2": 1,
                    "total_a": 1,
                    "value2": 1,
                    "var_x": 1
                },
                "local_14": {
                    "average1": 1,
                    "average2": 1,
                    "average_variable2": 1,
                    "average_variable_2": 1,
                    "max1": 3,
                    "max_b": 1,
                    "max_metric2": 1,
                    "max_sum2": 2,
                    "max_sum_2": 1,
                    "max_sum_b": 1,
                    "max_value4": 1,
                    "max_y": 1,
                    "partial_sum_b": 1,
                    "result3": 1,
                    "sum2": 2,
                    "sum3": 3,
                    "sum_local_1": 1,
                    "sum_val1": 1,
                    "sum_value1": 1,
                    "sum_var1": 1,
                    "sum_var4": 1,
                    "sum_variable3": 1,
                    "sum_w": 1,
                    "temp3": 1,
                    "total1": 1
                },
                "local_18": {
                    "average1": 1,
                    "average2": 1,
                    "average_variable1": 1,
                    "average_variable_1": 1,
                    "max2": 3,
                    "max_a": 1,
                    "max_metric1": 1,
                    "max_sum1": 2,
                    "max_sum_1": 1,
                    "max_sum_a": 1,
                    "max_value": 1,
                    "max_value3": 1,
                    "max_x": 1,
                    "partial_sum_a": 1,
                    "result4": 1,
                    "sum1": 2,
                    "sum4": 3,
                    "sum_local_2": 1,
                    "sum_var2": 1,
                    "sum_var3": 1,
                    "sum_z": 1,
                    "temp4": 1,
                    "total2": 1
                },
                "local_1c": {
                    "count": 1,
                    "counter": 7,
                    "current": 1,
                    "current_iteration": 2,
                    "i": 6,
                    "index": 2,
                    "iteration": 6,
                    "iteration_count": 2,
                    "iteration_index": 1,
                    "loop_counter": 2
                },
                "local_20": {
                    "array_length": 4,
                    "array_size": 1,
                    "count": 9,
                    "counter": 1,
                    "iteration_count": 5,
                    "iterations": 3,
                    "loop_counter": 1,
                    "num_elements": 1,
                    "num_iterations": 4,
                    "size": 1,
                    "total2": 1
                },
                "local_24": {
                    "current_time": 8,
                    "current_timestamp": 1,
                    "function_pointer": 1,
                    "get_current_time": 3,
                    "get_time": 7,
                    "get_time_function_ptr": 1,
                    "get_timestamp": 1,
                    "time": 1,
                    "time_func_result": 1,
                    "time_variable": 1,
                    "timestamp": 3,
                    "var3": 1
                },
                "local_28": {
                    "max_value2": 1,
                    "metric2": 1,
                    "min_val": 1,
                    "min_value": 1,
                    "result1": 2,
                    "sum1": 2,
                    "sum2": 3,
                    "sum_1": 1,
                    "sum_2": 1,
                    "sum_a": 1,
                    "sum_b": 2,
                    "sum_var2": 1,
                    "sum_variable2": 2,
                    "sum_variable_1": 1,
                    "sum_y": 2,
                    "temp1": 3,
                    "temp_var1": 2,
                    "value1": 1,
                    "var2": 1,
                    "variable1": 1
                },
                "local_2c": {
                    "max_val": 1,
                    "max_value": 1,
                    "max_value1": 1,
                    "metric1": 1,
                    "result2": 2,
                    "sum1": 3,
                    "sum2": 2,
                    "sum_1": 1,
                    "sum_2": 1,
                    "sum_a": 2,
                    "sum_b": 1,
                    "sum_var1": 1,
                    "sum_variable1": 2,
                    "sum_variable_2": 1,
                    "sum_x": 2,
                    "temp2": 3,
                    "temp_var2": 2,
                    "value2": 1,
                    "var1": 1,
                    "variable2": 1
                },
                "local_c": {
                    "average_variable_4": 1,
                    "checksum1": 1,
                    "local_variable": 1,
                    "max_data2": 1,
                    "max_data_2": 1,
                    "max_data_b": 1,
                    "max_input_val2": 1,
                    "max_param2": 1,
                    "min_y": 1,
                    "param1_value": 1,
                    "partial_sum_d": 1,
                    "result1": 1,
                    "sum1": 6,
                    "sum4": 2,
                    "sum_data": 1,
                    "sum_param_1": 1,
                    "sum_var3": 1,
                    "sum_var6": 1,
                    "sum_variable5": 1,
                    "total1": 2,
                    "total_b": 1,
                    "value1": 2,
                    "var_y": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 11,
                    "data_array": 3,
                    "input": 4,
                    "input_array": 3,
                    "input_data": 3,
                    "input_param": 2,
                    "input_value": 2,
                    "user_data": 1,
                    "utterance": 1
                },
                "param_2": {
                    "operand2": 1
                },
                "param_3": {
                    "sum2": 1
                },
                "param_4": {
                    "operand4": 1
                },
                "uVar1": {
                    "average": 1,
                    "average_var": 1,
                    "calculated_value": 1,
                    "result": 8
                }
            },
            "called": [
                "FUN_08004d78",
                "FUN_08000e20",
                "FUN_08000c10",
                "FUN_08004ae0",
                "FUN_08000aa8"
            ],
            "calling": [
                "FUN_0800491c"
            ],
            "code": "\nvoid calculate_averages_080049cc(int data)\n\n{\n  undefined4 result;\n  undefined4 temp2;\n  undefined4 temp1;\n  undefined4 current_time;\n  int count;\n  int counter;\n  undefined4 sum4;\n  undefined4 max1;\n  undefined4 sum2;\n  undefined4 sum1;\n  \n  count = 1;\n  sum1 = 0;\n  sum2 = 0;\n  max1 = 0;\n  sum4 = 0;\n  current_time = (*DAT_20000a50)();\n  counter = 0;\n  while( true ) {\n    if (count <= counter) break;\n    temp1 = 0;\n    temp2 = 0;\n    FUN_08004ae0(data);\n    FUN_08004d78(data,&temp1,&temp2);\n    max1 = FUN_08000aa8(max1,temp1);\n    sum4 = FUN_08000aa8(sum4,temp2);\n    sum1 = FUN_08000aa8(sum1,*(undefined4 *)(data + 0x10));\n    sum2 = FUN_08000aa8(sum2,*(undefined4 *)(data + 0x14));\n    current_time = (*DAT_20000a50)();\n    counter = counter + 1;\n  }\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(sum1,result);\n  *(undefined4 *)(data + 0x1c) = result;\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(sum2,result);\n  *(undefined4 *)(data + 0x20) = result;\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(max1,result);\n  *(undefined4 *)(data + 0x24) = result;\n  result = FUN_08000c10(count);\n  result = FUN_08000e20(sum4,result);\n  *(undefined4 *)(data + 0x28) = result;\n  return;\n}\n\n",
            "current_name": "calculate_averages_080049cc",
            "entrypoint": "0x080049cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049cc": "calculate_averages_080049cc",
                "local_10": "sum2",
                "local_14": "max1",
                "local_18": "sum4",
                "local_1c": "counter",
                "local_20": "count",
                "local_24": "current_time",
                "local_28": "temp1",
                "local_2c": "temp2",
                "local_c": "sum1",
                "param_1": "data",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "additional_data": {
                "CONCAT11": {
                    "concatenate_hex_values": 1,
                    "concatenate_two_bytes": 1
                },
                "FUN_08000c10": {
                    "compute_value": 1,
                    "convert_to_uint": 2,
                    "convert_to_unsigned_int": 1,
                    "convert_value": 1,
                    "obtain_reversed_value": 1,
                    "process_data": 2,
                    "process_value": 2,
                    "reverse_bits": 1,
                    "reverse_data": 1,
                    "reverse_input": 1,
                    "reverse_operation": 1,
                    "reverse_uint": 1,
                    "some_transformation_function": 1,
                    "transform_data": 1
                },
                "FUN_08004ae0": {
                    "copy_and_convert_data": 1,
                    "copy_data_to_param": 1,
                    "copy_to_param1": 1,
                    "extract_and_assign_data": 1,
                    "extract_and_assign_values": 2,
                    "extract_and_store_data": 3,
                    "extract_data": 4,
                    "fill_array_with_data": 1,
                    "initialize_data": 2,
                    "initialize_function": 1,
                    "initialize_memory": 1,
                    "initialize_param": 1,
                    "initialize_param_array": 3,
                    "initialize_parameters": 5,
                    "initialize_params": 1,
                    "load_data_into_array": 1,
                    "reverse_and_assign_values": 1,
                    "store_values": 1
                },
                "local_14": {
                    "combined_var6": 1,
                    "data20": 1,
                    "data6": 1,
                    "data_6": 1,
                    "extracted_value_6": 1,
                    "fifth_value": 1,
                    "input5": 1,
                    "param1_short6": 1,
                    "short6": 1,
                    "short_6": 2,
                    "short_var6": 1,
                    "sixth_short": 1,
                    "temp20": 2,
                    "temp_19": 1,
                    "temp_20": 1,
                    "temp_data_6": 1,
                    "temp_var14": 1,
                    "u_var_local6": 1,
                    "value19": 2,
                    "value22": 1,
                    "value6": 1,
                    "value_1": 1,
                    "var19": 1,
                    "var20": 2,
                    "var_20": 1
                },
                "local_16": {
                    "combined_var5": 1,
                    "data19": 1,
                    "data5": 1,
                    "data_5": 1,
                    "extracted_value_5": 1,
                    "fifth_short": 1,
                    "fourth_value": 1,
                    "input4": 1,
                    "param1_short5": 1,
                    "short5": 1,
                    "short_5": 2,
                    "short_var5": 1,
                    "temp19": 2,
                    "temp_18": 1,
                    "temp_19": 1,
                    "temp_data_5": 1,
                    "temp_var16": 1,
                    "u_var_local5": 1,
                    "value18": 2,
                    "value20": 1,
                    "value5": 1,
                    "value_2": 1,
                    "var18": 1,
                    "var19": 2,
                    "var_19": 1
                },
                "local_18": {
                    "combined_var4": 1,
                    "data18": 1,
                    "data4": 1,
                    "data_4": 1,
                    "extracted_value_4": 1,
                    "fourth_short": 1,
                    "input3": 1,
                    "param1_short4": 1,
                    "short4": 1,
                    "short_4": 2,
                    "short_var4": 1,
                    "temp18": 2,
                    "temp_17": 1,
                    "temp_18": 1,
                    "temp_data_4": 1,
                    "temp_var18": 1,
                    "third_value": 1,
                    "u_var_local4": 1,
                    "value17": 2,
                    "value18": 1,
                    "value4": 1,
                    "value_3": 1,
                    "var17": 1,
                    "var18": 2,
                    "var_18": 1
                },
                "local_1a": {
                    "combined_var3": 1,
                    "data17": 1,
                    "data3": 1,
                    "data_3": 1,
                    "extracted_value_3": 1,
                    "param1_short3": 1,
                    "short3": 1,
                    "short_3": 2,
                    "short_var3": 1,
                    "temp17": 2,
                    "temp_16": 1,
                    "temp_17": 1,
                    "temp_data_3": 1,
                    "third_short": 1,
                    "u_var_local3": 1,
                    "value3": 1,
                    "var17": 2,
                    "var_17": 1
                },
                "local_1c": {
                    "combined_var2": 1,
                    "data16": 1,
                    "data2": 1,
                    "data_2": 1,
                    "extracted_value_2": 1,
                    "input2": 1,
                    "param1_short2": 1,
                    "second_short": 1,
                    "second_value": 1,
                    "short2": 1,
                    "short_2": 2,
                    "short_var2": 1,
                    "temp16": 2,
                    "temp_13": 1,
                    "temp_15": 1,
                    "temp_16": 1,
                    "temp_data_2": 1,
                    "temp_var1_c": 1,
                    "u_var_local2": 1,
                    "value16": 3,
                    "value2": 1,
                    "value_5": 1,
                    "var16": 3,
                    "var_16": 1
                },
                "local_1e": {
                    "combined_var1": 1,
                    "data1": 1,
                    "data15": 1,
                    "data_1": 1,
                    "extracted_value_1": 1,
                    "first_short": 1,
                    "first_value": 1,
                    "input1": 1,
                    "param1_short1": 1,
                    "short1": 1,
                    "short_1": 2,
                    "short_var1": 1,
                    "temp15": 2,
                    "temp_14": 2,
                    "temp_15": 1,
                    "temp_data_1": 1,
                    "temp_var1_e": 1,
                    "u_var_local1": 1,
                    "value1": 1,
                    "value14": 1,
                    "value15": 2,
                    "value_7": 1,
                    "var15": 3,
                    "var_15": 1
                },
                "local_1f": {
                    "byte_14": 1,
                    "data14": 1,
                    "fourteenth_byte": 1,
                    "param7_local2": 1,
                    "temp14": 6,
                    "temp_13": 1,
                    "temp_14": 4,
                    "temp_15": 1,
                    "temp_buffer_14": 1,
                    "temp_value14": 1,
                    "temp_var14": 3,
                    "temp_var1_f": 1,
                    "unused13": 1,
                    "value13": 1,
                    "value14": 2,
                    "var14": 3,
                    "var_14": 2
                },
                "local_20": {
                    "byte_13": 1,
                    "data13": 1,
                    "param7_local1": 1,
                    "temp13": 6,
                    "temp_0": 1,
                    "temp_12": 1,
                    "temp_13": 4,
                    "temp_buffer_13": 1,
                    "temp_value13": 1,
                    "temp_var13": 3,
                    "temp_var20": 1,
                    "thirteenth_byte": 1,
                    "unused12": 1,
                    "value12": 1,
                    "value13": 2,
                    "var13": 3,
                    "var_13": 2
                },
                "local_21": {
                    "byte_12": 1,
                    "data12": 1,
                    "param6_local2": 1,
                    "temp12": 6,
                    "temp_1": 1,
                    "temp_11": 1,
                    "temp_12": 4,
                    "temp_buffer_12": 1,
                    "temp_value12": 1,
                    "temp_var12": 3,
                    "temp_var21": 1,
                    "twelfth_byte": 1,
                    "unused11": 1,
                    "value11": 1,
                    "value12": 2,
                    "var12": 3,
                    "var_12": 2
                },
                "local_22": {
                    "byte_11": 1,
                    "data11": 1,
                    "eleventh_byte": 1,
                    "param6_local1": 1,
                    "temp11": 6,
                    "temp_10": 1,
                    "temp_11": 4,
                    "temp_2": 1,
                    "temp_buffer_11": 1,
                    "temp_value11": 1,
                    "temp_var11": 3,
                    "temp_var22": 1,
                    "unused10": 1,
                    "value10": 1,
                    "value11": 2,
                    "var11": 3,
                    "var_11": 2
                },
                "local_23": {
                    "byte_10": 1,
                    "data10": 1,
                    "param5_local2": 1,
                    "temp10": 6,
                    "temp_10": 4,
                    "temp_3": 1,
                    "temp_9": 1,
                    "temp_buffer_10": 1,
                    "temp_value10": 1,
                    "temp_var10": 3,
                    "temp_var23": 1,
                    "tenth_byte": 1,
                    "unused9": 1,
                    "value10": 2,
                    "value9": 1,
                    "var10": 3,
                    "var_10": 2
                },
                "local_24": {
                    "byte_9": 1,
                    "data9": 1,
                    "ninth_byte": 1,
                    "param5_local1": 1,
                    "temp9": 6,
                    "temp_4": 1,
                    "temp_8": 1,
                    "temp_9": 4,
                    "temp_buffer_9": 1,
                    "temp_value9": 1,
                    "temp_var24": 1,
                    "temp_var9": 3,
                    "unused8": 1,
                    "value8": 1,
                    "value9": 2,
                    "var9": 3,
                    "var_9": 2
                },
                "local_25": {
                    "byte_8": 1,
                    "data8": 1,
                    "eighth_byte": 1,
                    "param4_local2": 1,
                    "temp8": 6,
                    "temp_5": 1,
                    "temp_7": 1,
                    "temp_8": 4,
                    "temp_buffer_8": 1,
                    "temp_value8": 1,
                    "temp_var25": 1,
                    "temp_var8": 3,
                    "unused7": 1,
                    "value7": 1,
                    "value8": 2,
                    "var8": 3,
                    "var_8": 2
                },
                "local_26": {
                    "byte_7": 1,
                    "data7": 1,
                    "param4_local1": 1,
                    "seventh_byte": 1,
                    "temp7": 6,
                    "temp_6": 2,
                    "temp_7": 4,
                    "temp_buffer_7": 1,
                    "temp_value7": 1,
                    "temp_var26": 1,
                    "temp_var7": 3,
                    "unused6": 1,
                    "value6": 1,
                    "value7": 2,
                    "var7": 3,
                    "var_7": 2
                },
                "local_27": {
                    "byte_6": 1,
                    "data6": 1,
                    "param3_local2": 1,
                    "sixth_byte": 1,
                    "temp6": 6,
                    "temp_5": 1,
                    "temp_6": 4,
                    "temp_7": 1,
                    "temp_buffer_6": 1,
                    "temp_value6": 1,
                    "temp_var27": 1,
                    "temp_var6": 3,
                    "unused5": 1,
                    "value5": 1,
                    "value6": 2,
                    "var6": 3,
                    "var_6": 2
                },
                "local_28": {
                    "byte_5": 1,
                    "data5": 1,
                    "fifth_byte": 1,
                    "param3_local1": 1,
                    "temp5": 6,
                    "temp_4": 1,
                    "temp_5": 4,
                    "temp_8": 1,
                    "temp_buffer_5": 1,
                    "temp_value5": 1,
                    "temp_var28": 1,
                    "temp_var5": 3,
                    "unused4": 1,
                    "value4": 1,
                    "value5": 2,
                    "var5": 3,
                    "var_5": 2
                },
                "local_29": {
                    "byte_4": 1,
                    "data4": 1,
                    "fourth_byte": 1,
                    "param2_local2": 1,
                    "temp4": 6,
                    "temp_3": 1,
                    "temp_4": 4,
                    "temp_9": 1,
                    "temp_buffer_4": 1,
                    "temp_value4": 1,
                    "temp_var29": 1,
                    "temp_var4": 3,
                    "unused3": 1,
                    "value3": 1,
                    "value4": 2,
                    "var4": 3,
                    "var_4": 2
                },
                "local_2a": {
                    "byte_3": 1,
                    "data3": 1,
                    "param2_local1": 1,
                    "temp3": 6,
                    "temp_10": 1,
                    "temp_2": 1,
                    "temp_3": 4,
                    "temp_buffer_3": 1,
                    "temp_value3": 1,
                    "temp_var2_a": 1,
                    "temp_var3": 3,
                    "third_byte": 1,
                    "unused2": 1,
                    "value2": 1,
                    "value3": 2,
                    "var3": 3,
                    "var_3": 2
                },
                "local_2b": {
                    "byte_2": 1,
                    "data2": 1,
                    "param1_local2": 1,
                    "second_byte": 1,
                    "temp2": 6,
                    "temp_1": 1,
                    "temp_11": 1,
                    "temp_2": 4,
                    "temp_buffer_2": 1,
                    "temp_value2": 1,
                    "temp_var2": 3,
                    "temp_var2_b": 1,
                    "unused1": 1,
                    "value1": 1,
                    "value2": 2,
                    "var2": 3,
                    "var_2": 2
                },
                "local_2c": {
                    "byte_1": 1,
                    "data1": 1,
                    "first_byte": 1,
                    "param1_local1": 1,
                    "result_1": 1,
                    "temp1": 6,
                    "temp_0": 1,
                    "temp_1": 4,
                    "temp_12": 1,
                    "temp_buffer_1": 1,
                    "temp_value1": 1,
                    "temp_var1": 3,
                    "temp_var2_c": 1,
                    "value0": 1,
                    "value1": 2,
                    "var1": 3,
                    "var_1": 2
                },
                "param_1": {
                    "data_array": 1,
                    "data_buffer": 1,
                    "output": 1,
                    "output_array": 18,
                    "output_buffer": 1,
                    "output_data": 1,
                    "param": 1,
                    "param_array": 2,
                    "parameters": 1,
                    "result_array": 3
                },
                "uVar1": {
                    "result": 3
                }
            },
            "called": [
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nvoid extract_and_store_data_08004ae0(undefined4 *output_array)\n\n{\n  undefined4 result;\n  undefined temp1;\n  undefined temp2;\n  undefined temp3;\n  undefined temp4;\n  undefined temp5;\n  undefined temp6;\n  undefined temp7;\n  undefined temp8;\n  undefined temp9;\n  undefined temp10;\n  undefined temp11;\n  undefined temp12;\n  undefined temp13;\n  undefined temp14;\n  short var15;\n  short var16;\n  short var17;\n  short value17;\n  short var19;\n  short temp20;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&temp1,0xe);\n  temp20 = concatenate_two_bytes(temp3,temp4);\n  var19 = concatenate_two_bytes(temp5,temp6);\n  value17 = concatenate_two_bytes(temp7,temp8);\n  var17 = concatenate_two_bytes(temp9,temp10);\n  var16 = concatenate_two_bytes(temp11,temp12);\n  var15 = concatenate_two_bytes(temp13,temp14);\n  result = FUN_08000c10((int)concatenate_two_bytes(temp1,temp2));\n  *output_array = result;\n  result = FUN_08000c10((int)temp20);\n  output_array[1] = result;\n  result = FUN_08000c10((int)var19);\n  output_array[2] = result;\n  result = FUN_08000c10((int)value17);\n  output_array[3] = result;\n  result = FUN_08000c10((int)var17);\n  output_array[4] = result;\n  result = FUN_08000c10((int)var16);\n  output_array[5] = result;\n  result = FUN_08000c10((int)var15);\n  output_array[6] = result;\n  return;\n}\n\n",
            "current_name": "extract_and_store_data_08004ae0",
            "entrypoint": "0x08004ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT11": "concatenate_two_bytes",
                "FUN_08004ae0": "extract_and_store_data_08004ae0",
                "local_14": "temp20",
                "local_16": "var19",
                "local_18": "value17",
                "local_1a": "var17",
                "local_1c": "var16",
                "local_1e": "var15",
                "local_1f": "temp14",
                "local_20": "temp13",
                "local_21": "temp12",
                "local_22": "temp11",
                "local_23": "temp10",
                "local_24": "temp9",
                "local_25": "temp8",
                "local_26": "temp7",
                "local_27": "temp6",
                "local_28": "temp5",
                "local_29": "temp4",
                "local_2a": "temp3",
                "local_2b": "temp2",
                "local_2c": "temp1",
                "param_1": "output_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "additional_data": {
                "FUN_08000158": {
                    "calculate_result_6": 1,
                    "combine_values": 1
                },
                "FUN_0800015c": {
                    "calculate_result_2": 1,
                    "combine_results": 1
                },
                "FUN_08000418": {
                    "get_result_2": 1,
                    "get_value": 1
                },
                "FUN_080004c8": {
                    "calculate_result_1": 1,
                    "modify_result": 1
                },
                "FUN_0800071c": {
                    "adjust_result": 1,
                    "calculate_result_4": 1
                },
                "FUN_080009fc": {
                    "calculate_result_3": 1,
                    "compute_hash": 1
                },
                "FUN_08000aa4": {
                    "get_result_1": 1,
                    "perform_calculation": 1
                },
                "FUN_08004bd8": {
                    "calculate_data": 1,
                    "calculate_result": 6,
                    "extract_data": 1,
                    "process_data": 3,
                    "process_input": 1,
                    "update_data": 1
                },
                "param_1": {
                    "base": 1,
                    "input": 8,
                    "input1": 1,
                    "input_data": 3,
                    "input_param": 11,
                    "input_param1": 1,
                    "input_parameter": 3,
                    "input_value": 1,
                    "param": 1,
                    "param1": 1
                },
                "param_2": {
                    "output": 9,
                    "output_data": 3,
                    "output_param": 11,
                    "output_param1": 1,
                    "output_parameter": 3,
                    "output_value": 1,
                    "param2": 1,
                    "result": 2
                },
                "thunk_FUN_08005838": {
                    "calculate_result_5": 1,
                    "process_values": 1
                },
                "uVar1": {
                    "result1": 24,
                    "result_1": 5,
                    "value1": 2
                },
                "uVar2": {
                    "result2": 24,
                    "result_2": 5,
                    "value2": 2
                },
                "uVar3": {
                    "result3": 24,
                    "result_3": 5,
                    "value3": 2
                }
            },
            "called": [
                "FUN_080009fc",
                "FUN_0800015c",
                "FUN_08000aa4",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000418",
                "thunk_FUN_08005838",
                "FUN_08000158"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid calculate_result_08004bd8(int input_param,undefined4 *output_param)\n\n{\n  undefined4 result1;\n  undefined8 result2;\n  undefined8 result3;\n  \n  result1 = FUN_08000aa4(*(undefined4 *)(input_param + 0x10),*(undefined4 *)(input_param + 0x1c));\n  result2 = FUN_08000418(DAT_200009e4);\n  result3 = FUN_08000418(result1);\n  result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x83f5c366,0x3f340215);\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = FUN_08000418(*(undefined4 *)(input_param + 4));\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40b00000);\n  result3 = FUN_08000418(*(undefined4 *)(input_param + 8));\n  result3 = FUN_0800071c((int)result3,(int)((ulonglong)result3 >> 0x20),0,0x40b00000);\n  result2 = thunk_FUN_08005838((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                             (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40668000);\n  result2 = FUN_0800071c((int)result2,(int)((ulonglong)result2 >> 0x20),0x54442d18,0x400921fb);\n  result3 = FUN_08000418(*(undefined4 *)(input_param + 0x24));\n  result2 = FUN_08000158((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40568000);\n  result1 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    result2 = FUN_08000418(DAT_200009e4);\n    result2 = FUN_080004c8((int)result2,(int)((ulonglong)result2 >> 0x20),0x9999999a,0x3fe99999);\n    result3 = FUN_08000418(result1);\n    result3 = FUN_080004c8((int)result3,(int)((ulonglong)result3 >> 0x20),0x9999999a,0x3fc99999);\n    result2 = FUN_0800015c((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                         (int)((ulonglong)result3 >> 0x20));\n    DAT_200009e4 = FUN_080009fc((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = result1;\n  }\n  *output_param = DAT_200009e4;\n  return;\n}\n\n",
            "current_name": "calculate_result_08004bd8",
            "entrypoint": "0x08004bd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input_param",
                "param_2": "output_param",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d78": {
            "additional_data": {
                "FUN_08000418": {
                    "process_value": 2,
                    "reverse": 1,
                    "transform_value": 1
                },
                "FUN_080004c8": {
                    "calculate_sum": 1,
                    "multiply_numbers": 1,
                    "process_values": 1
                },
                "FUN_0800071c": {
                    "add_numbers": 1,
                    "calculate_product": 1,
                    "process_more_values": 1
                },
                "FUN_080009fc": {
                    "calculate_final_value": 1,
                    "finalize_result": 1,
                    "get_output": 1
                },
                "FUN_08000e20": {
                    "calculate": 1,
                    "calculate_value": 3
                },
                "FUN_08004d78": {
                    "calculate_and_assign_values": 1,
                    "calculate_coefficients": 1,
                    "calculate_intermediate_values": 1,
                    "calculate_numbers": 1,
                    "calculate_parameters": 4,
                    "calculate_params": 1,
                    "calculate_result": 9,
                    "calculate_results": 5,
                    "calculate_values": 6,
                    "calculate_values_and_store": 1,
                    "process_data": 1
                },
                "param_1": {
                    "array": 1,
                    "input1": 1,
                    "input_array": 15,
                    "input_vals": 1,
                    "input_values": 7,
                    "values": 6
                },
                "param_2": {
                    "output1": 3,
                    "output_param1": 1,
                    "output_val1": 1,
                    "output_value1": 6,
                    "output_value2": 1,
                    "output_var1": 3,
                    "param1": 1,
                    "result1": 10,
                    "result2": 1,
                    "result_1": 2,
                    "result_a": 1,
                    "value1": 1
                },
                "param_3": {
                    "output2": 3,
                    "output_param2": 1,
                    "output_val2": 1,
                    "output_value1": 1,
                    "output_value2": 6,
                    "output_var2": 3,
                    "result2": 11,
                    "result3": 1,
                    "result_2": 2,
                    "result_b": 1,
                    "value2": 1
                },
                "thunk_FUN_08005838": {
                    "combine_numbers": 1,
                    "combine_values": 2,
                    "thunk_transform": 1
                },
                "uVar1": {
                    "calc1": 2,
                    "calculated_value1": 1,
                    "calculated_value_1": 1,
                    "calculated_var1": 1,
                    "calculation1": 1,
                    "number1": 1,
                    "result1": 16,
                    "result_1_zero": 1,
                    "temp1": 3,
                    "value1": 4
                },
                "uVar2": {
                    "calc2": 2,
                    "calculated_value2": 1,
                    "calculated_value_2": 1,
                    "calculated_var2": 1,
                    "calculation2": 1,
                    "number2": 1,
                    "result2": 16,
                    "result_1_one": 1,
                    "temp2": 3,
                    "value2": 4
                },
                "uVar3": {
                    "calc3": 2,
                    "calculated_value3": 1,
                    "calculated_value_3": 1,
                    "calculated_var3": 1,
                    "calculation3": 1,
                    "number3": 1,
                    "result3": 16,
                    "result_2_zero": 1,
                    "temp3": 3,
                    "value3": 4
                },
                "uVar4": {
                    "intermediate_result1": 1,
                    "intermediate_var1": 1,
                    "result_value1": 1,
                    "temp1": 12,
                    "temp4": 3,
                    "temp_1": 1,
                    "temp_result1": 5,
                    "temp_value1": 2,
                    "temp_value_1": 1,
                    "temp_var1": 4
                },
                "uVar5": {
                    "intermediate_result2": 1,
                    "intermediate_var2": 1,
                    "result_value2": 1,
                    "temp2": 12,
                    "temp5": 3,
                    "temp_2": 1,
                    "temp_result2": 5,
                    "temp_value2": 2,
                    "temp_value_2": 1,
                    "temp_var2": 4
                }
            },
            "called": [
                "FUN_080009fc",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_08000e20",
                "FUN_08000418",
                "thunk_FUN_08005838"
            ],
            "calling": [
                "FUN_080049cc"
            ],
            "code": "\nvoid calculate_result_08004d78(undefined4 *input_array,undefined4 *result1,undefined4 *result2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  result1 = FUN_08000e20(*input_array,0x45800000);\n  result2 = FUN_08000e20(input_array[1],0x45800000);\n  result3 = FUN_08000e20(input_array[2],0x45800000);\n  temp1 = FUN_08000418(result2);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result2 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  temp1 = FUN_08000418(result1);\n  temp2 = FUN_08000418(result3);\n  temp1 = thunk_FUN_08005838((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                             (int)((ulonglong)temp2 >> 0x20));\n  temp1 = FUN_080004c8((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = FUN_0800071c((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  result1 = FUN_080009fc((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  *result1 = result2;\n  *result2 = result1;\n  return;\n}\n\n",
            "current_name": "calculate_result_08004d78",
            "entrypoint": "0x08004d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d78": "calculate_result_08004d78",
                "param_1": "input_array",
                "param_2": "result1",
                "param_3": "result2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "temp1",
                "uVar5": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "additional_data": {
                "0x3f": {
                    "syscall_number": 1
                },
                "FUN_08004e6c": {
                    "execute_interrupt": 1,
                    "execute_software_interrupt": 4,
                    "execute_syscall": 1,
                    "execute_system_call": 8,
                    "execute_system_interrupt": 3,
                    "get_software_interrupt": 1,
                    "invoke_system_interrupt": 5,
                    "perform_system_interrupt": 1,
                    "send_software_interrupt": 2,
                    "trigger_software_interrupt": 5
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_variable_name_1": {
                    "new_variable_name_1": 1
                },
                "software_interrupt": {
                    "call_interrupt": 1,
                    "call_kernel": 1,
                    "execute_interrupt": 2,
                    "interrupt": 1,
                    "interrupt_code": 1,
                    "invoke_interrupt": 6,
                    "invoke_software_interrupt": 1,
                    "invoke_system_call": 1,
                    "invoke_system_interrupt": 1,
                    "perform_interrupt": 4,
                    "trigger_interrupt": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nvoid execute_system_call_08004e6c(void)\n\n{\n  trigger_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_system_call_08004e6c",
            "entrypoint": "0x08004e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e6c": "execute_system_call_08004e6c",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e74": {
            "additional_data": {
                "FUN_08004e6c": {
                    "process_data": 1
                },
                "FUN_08004e74": {
                    "check_initialization": 1,
                    "execute_function": 2,
                    "execute_initialization": 1,
                    "initialize": 6,
                    "initialize_check": 1,
                    "initialize_data": 8,
                    "initialize_function": 2,
                    "initialize_if_needed": 1,
                    "initialize_if_not_done": 1,
                    "initialize_if_zero": 3,
                    "initialize_process": 1,
                    "initialize_state": 1,
                    "initialize_value": 1,
                    "process_data": 2
                },
                "param_1": {
                    "arg": 3,
                    "argument": 2,
                    "data": 2,
                    "data_to_initialize": 1,
                    "input": 5,
                    "input_data": 2,
                    "input_flag": 1,
                    "input_param": 2,
                    "input_parameter": 4,
                    "input_value": 6,
                    "param": 1,
                    "parameter": 1,
                    "value": 1
                },
                "uVar1": {
                    "result": 15,
                    "return_value": 16
                }
            },
            "called": [
                "FUN_08004e6c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 initialize_data_08004e74(undefined4 input_value)\n\n{\n  undefined4 return_value;\n  \n  if (DAT_200009f0 == 0) {\n    return_value = FUN_08004e6c(1,input_value,0);\n  }\n  else {\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "initialize_data_08004e74",
            "entrypoint": "0x08004e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e74": "initialize_data_08004e74",
                "param_1": "input_value",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "additional_data": {
                "FUN_08001ccc": {
                    "call_first_function": 1,
                    "call_subfunction": 1,
                    "copy_data": 1,
                    "perform_data_operation": 1,
                    "process_data": 4,
                    "retrieve_data": 1,
                    "transfer_data": 1
                },
                "FUN_08004ea4": {
                    "call_function_with_params": 1,
                    "call_second_function": 1,
                    "execute_binary_function": 1,
                    "execute_data_operation": 1,
                    "execute_data_processing": 4,
                    "execute_data_transfer": 1,
                    "execute_function": 7,
                    "execute_initialization_step": 1,
                    "execute_main_function": 2,
                    "execute_process": 2,
                    "extract_data_from_binary": 1,
                    "initialize_data": 5,
                    "perform_data_processing": 1
                },
                "param_1": {
                    "buffer": 1,
                    "data": 1,
                    "data_array": 11,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "data_structure": 1,
                    "destination_buffer": 1,
                    "function_array": 1,
                    "function_data": 2,
                    "function_list": 1,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "function_ptr_list": 1,
                    "input_data": 1,
                    "param_list": 1,
                    "pointer_array": 1,
                    "source_ptr": 1
                },
                "param_2": {
                    "arg1": 2,
                    "data_array": 1,
                    "data_item": 1,
                    "input1": 8,
                    "input_1": 1,
                    "input_param_1": 3,
                    "input_value_1": 1,
                    "param2": 3,
                    "param_1": 1,
                    "param_2": 3,
                    "param_value1": 1,
                    "param_value_1": 1,
                    "parameter_2": 1,
                    "source_buffer": 1,
                    "value1": 1,
                    "value_1": 2
                },
                "param_3": {
                    "arg2": 2,
                    "count": 1,
                    "data_size": 1,
                    "input2": 8,
                    "input_2": 1,
                    "input_param_2": 3,
                    "input_value_2": 1,
                    "length": 1,
                    "param3": 3,
                    "param_2": 1,
                    "param_3": 3,
                    "param_value2": 1,
                    "param_value_2": 1,
                    "parameter_3": 1,
                    "value2": 1,
                    "value_2": 2
                },
                "param_4": {
                    "arg3": 2,
                    "data_value": 1,
                    "flags": 1,
                    "input3": 8,
                    "input_3": 1,
                    "input_param_3": 3,
                    "input_value_3": 1,
                    "operation": 1,
                    "param4": 3,
                    "param_3": 1,
                    "param_4": 3,
                    "param_value3": 1,
                    "param_value_3": 1,
                    "parameter_4": 1,
                    "value3": 1,
                    "value_3": 2
                },
                "param_5": {
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "dest_ptr": 1,
                    "input_array": 1,
                    "options": 1,
                    "output_data": 1,
                    "output_param": 1,
                    "result": 1
                }
            },
            "called": [
                "FUN_08001ccc"
            ],
            "calling": [],
            "code": "\nvoid execute_main_function_08004ea4(undefined data_array,undefined input1,undefined4 input2,undefined2 input3)\n\n{\n  FUN_08001ccc(&DAT_20000a88,data_array,input1,1,input2,input3,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "execute_main_function_08004ea4",
            "entrypoint": "0x08004ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ea4": "execute_main_function_08004ea4",
                "param_1": "data_array",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "additional_data": {
                "DAT_20000008": {
                    "constant": 1,
                    "global_data": 1
                },
                "DAT_20000a88": {
                    "data_array_ptr": 1,
                    "data_ptr": 1
                },
                "FUN_08001f6c": {
                    "call_sub_function": 1,
                    "copy_data": 1,
                    "process_data": 4,
                    "process_sub_function": 1,
                    "sub_function": 2,
                    "transfer_data": 1,
                    "update_data": 2
                },
                "FUN_08004ee8": {
                    "execute_binary_function": 1,
                    "execute_data_transfer": 1,
                    "execute_data_transformation": 1,
                    "execute_function": 7,
                    "execute_initialization": 1,
                    "execute_task": 4,
                    "extract_and_process_data": 1,
                    "extract_data": 1,
                    "initialize_data": 4,
                    "process_data": 6
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 4,
                    "data": 2,
                    "data_array": 9,
                    "data_array_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 7,
                    "function_array": 3,
                    "function_data": 1,
                    "function_param": 1,
                    "function_pointer": 1
                },
                "param_2": {
                    "data_array": 1,
                    "data_len": 1,
                    "data_length": 1,
                    "data_param": 1,
                    "data_size": 1,
                    "input1": 1,
                    "input_1": 6,
                    "input_2": 1,
                    "input_param1": 1,
                    "length": 1,
                    "param1": 1,
                    "param_2": 5,
                    "param_2_value": 1,
                    "parameter_1": 1,
                    "sub_param2": 1,
                    "sub_param_1": 1,
                    "val_1": 1,
                    "value1": 1,
                    "value_1": 2,
                    "value_2": 1,
                    "value_ptr": 1
                },
                "param_3": {
                    "count": 1,
                    "counter": 1,
                    "input2": 1,
                    "input_2": 6,
                    "input_3": 1,
                    "input_param2": 1,
                    "length": 1,
                    "length_param": 1,
                    "param2": 1,
                    "param_3": 5,
                    "param_3_value": 1,
                    "param_value_1": 1,
                    "parameter_2": 1,
                    "sub_param3": 1,
                    "sub_param_2": 1,
                    "val_2": 1,
                    "value1": 1,
                    "value2": 1,
                    "value_1": 1,
                    "value_2": 2,
                    "value_3": 1
                },
                "param_4": {
                    "index": 1,
                    "input3": 1,
                    "input_3": 6,
                    "input_4": 1,
                    "input_param3": 1,
                    "mode_param": 1,
                    "param3": 1,
                    "param_4": 7,
                    "param_4_value": 1,
                    "param_value_2": 1,
                    "parameter_3": 1,
                    "sub_param4": 1,
                    "sub_param_3": 1,
                    "val_3": 1,
                    "value2": 1,
                    "value3": 1,
                    "value_2": 1,
                    "value_3": 2,
                    "value_4": 1
                },
                "param_5": {
                    "data_pointer": 2,
                    "destination_array": 1,
                    "extra_data_ptr": 1,
                    "input_5": 1,
                    "input_param4": 1,
                    "output_array": 1,
                    "param_value_3": 1,
                    "parameter_array": 1,
                    "ptr": 2,
                    "ptr_param": 1,
                    "sub_param5": 1,
                    "sub_param_4": 1
                }
            },
            "called": [
                "FUN_08001f6c"
            ],
            "calling": [],
            "code": "\nvoid execute_binary_function_08004ee8(undefined data_array,undefined input_1,undefined4 input_2,undefined2 param_4)\n\n{\n  FUN_08001f6c(&DAT_20000a88,data_array,input_1,1,input_2,param_4,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "execute_binary_function_08004ee8",
            "entrypoint": "0x08004ee8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ee8": "execute_binary_function_08004ee8",
                "param_1": "data_array",
                "param_2": "input_1",
                "param_3": "input_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "additional_data": {
                "FUN_080015a0": {
                    "calculate_value": 1,
                    "fetch_data": 4,
                    "get_application_status": 1,
                    "get_data": 4,
                    "get_function_result": 1,
                    "get_initial_value": 1,
                    "get_initialization_value": 1,
                    "get_result": 2,
                    "get_return_value": 2,
                    "get_system_status": 1,
                    "get_task_result": 1,
                    "get_value": 1,
                    "perform_initialization": 1,
                    "perform_operation": 2,
                    "retrieve_data": 6
                },
                "FUN_08004f2c": {
                    "execute_application": 1,
                    "execute_main_function": 7,
                    "execute_operations": 1,
                    "execute_task": 1,
                    "extract_value_from_binary": 1,
                    "get_return_value": 6,
                    "get_some_value": 1,
                    "initialize": 3,
                    "initialize_app": 1,
                    "initialize_application": 1,
                    "initialize_function": 1,
                    "initialize_system": 2,
                    "perform_initialization": 1,
                    "retrieve_data": 2
                },
                "uVar1": {
                    "extracted_value": 1,
                    "result": 1,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [],
            "code": "\nundefined4 execute_main_function_08004f2c(void)\n\n{\n  undefined4 return_value;\n  \n  return_value = FUN_080015a0();\n  return return_value;\n}\n\n",
            "current_name": "execute_main_function_08004f2c",
            "entrypoint": "0x08004f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f2c": "execute_main_function_08004f2c",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "additional_data": {
                "DAT_20000adc": {
                    "data": 1
                },
                "FUN_08004436": {
                    "copy_data": 8,
                    "execute_sub_function": 1,
                    "execute_subfunction": 1,
                    "initialize_data": 2,
                    "process_data": 16,
                    "process_task": 1,
                    "update_data": 1
                },
                "FUN_08004f3c": {
                    "execute_data_processing": 1,
                    "execute_function": 2,
                    "execute_initialization": 1,
                    "execute_task": 1,
                    "extract_and_process_data": 1,
                    "initialize_data": 24,
                    "initialize_data_structures": 1
                },
                "param_1": {
                    "data": 1,
                    "data_array": 9,
                    "data_pointer": 12,
                    "data_ptr": 4,
                    "data_structure_ptr": 1,
                    "function_pointer": 1,
                    "pointer_array": 2,
                    "pointer_to_data": 1
                },
                "param_2": {
                    "character_array": 1,
                    "data": 2,
                    "data_array": 1,
                    "data_array_indices": 1,
                    "data_buffer": 2,
                    "data_pointer": 1,
                    "data_string": 1,
                    "data_value": 1,
                    "input": 1,
                    "input_array": 3,
                    "input_data": 2,
                    "input_data_ptr": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "input_string": 1,
                    "input_value": 1,
                    "short_array": 1,
                    "source_data": 1,
                    "string_array": 1,
                    "string_data": 1,
                    "string_parameter": 1,
                    "string_pointer": 2,
                    "task_name": 1,
                    "ushort_pointer": 1,
                    "value_ptr": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "data_length": 3,
                    "data_size": 4,
                    "input_count": 1,
                    "input_length": 3,
                    "input_value": 1,
                    "length": 3,
                    "numeric_value": 1,
                    "offset": 1,
                    "short_data": 1,
                    "short_value": 1,
                    "task_code": 1,
                    "value": 1
                },
                "param_4": {
                    "constant": 1,
                    "constant_value": 7,
                    "copy_count": 1,
                    "copy_size": 2,
                    "data_offset": 3,
                    "flag": 1,
                    "length": 1,
                    "length_to_copy": 1,
                    "parameter_value": 1,
                    "process_flag": 1,
                    "size": 3,
                    "task_length": 1,
                    "uint_value": 1
                }
            },
            "called": [
                "FUN_08004436"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid initialize_data_structures_08004f3c(undefined4 data_pointer,undefined2 input_array)\n\n{\n  FUN_08004436(&DAT_20000adc,data_pointer,input_array,0x32);\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_08004f3c",
            "entrypoint": "0x08004f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f3c": "initialize_data_structures_08004f3c",
                "param_1": "data_pointer",
                "param_2": "input_array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f60": {
            "additional_data": {
                "FUN_08004f60": {
                    "initialize_data": 18,
                    "initialize_data_buffer": 2,
                    "initialize_data_section": 1,
                    "initialize_memory": 10
                },
                "FUN_08005d68": {
                    "copy_data": 7,
                    "copy_memory": 4,
                    "fill_data_buffer": 1,
                    "init_memory": 1,
                    "initialize_memory": 2,
                    "memset_data": 1,
                    "set_array_values": 1
                },
                "data_pointer": {
                    "new_data_pointer": 1
                },
                "param_1": {
                    "array": 2,
                    "array_ptr": 1,
                    "buffer": 1,
                    "data_array": 1,
                    "data_buffer": 2,
                    "data_destination": 2,
                    "data_pointer": 7,
                    "data_ptr": 2,
                    "data_section_ptr": 1,
                    "destination": 7,
                    "memory_address": 1,
                    "memory_pointer": 2,
                    "target_array": 1
                },
                "param_2": {
                    "default_value": 1,
                    "dummy_param": 1,
                    "fill_byte": 1,
                    "fill_value": 3,
                    "flag": 1,
                    "initialize_value": 1,
                    "new_param_2": 1,
                    "offset": 2,
                    "padding": 1,
                    "padding_byte": 1,
                    "padding_value": 1,
                    "param": 2,
                    "param2": 1,
                    "param_two": 1,
                    "undefined_param": 1,
                    "undefined_value": 3,
                    "unused": 2,
                    "unused_param": 1,
                    "value": 5
                },
                "param_3": {
                    "array_size": 1,
                    "buffer_size": 1,
                    "data_size": 2,
                    "length": 1,
                    "new_size": 1,
                    "param_three": 1,
                    "section_size": 1,
                    "size": 22
                }
            },
            "called": [
                "FUN_08005d68"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid initialize_data_buffer_08004f60(void)\n\n{\n  FUN_08005d68(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_data_buffer_08004f60",
            "entrypoint": "0x08004f60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f60": "initialize_data_buffer_08004f60"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f78": {
            "additional_data": {
                "FUN_08000418": {
                    "calculate_pitch": 14,
                    "calculate_value": 4,
                    "calculate_value_alt": 1,
                    "extract_value": 1,
                    "get_pitch": 3,
                    "get_pitch_value": 2,
                    "get_sensor_data": 1
                },
                "FUN_08000aa4": {
                    "calculate_hash": 1,
                    "calculate_result": 1,
                    "calculate_value": 6,
                    "calculate_variable4": 1,
                    "compute_value": 3,
                    "compute_value1": 1,
                    "compute_value_c": 1,
                    "get_data": 1,
                    "get_pitch_data": 1,
                    "initialize_value_a": 1,
                    "perform_action1": 1,
                    "perform_calculation": 1,
                    "perform_operation": 3,
                    "process_data": 1,
                    "process_input": 1
                },
                "FUN_08000aa8": {
                    "calculate_other_value": 1,
                    "calculate_parameter_alt": 1,
                    "calculate_product": 1,
                    "calculate_result": 1,
                    "calculate_var2": 1,
                    "calculate_variable7": 1,
                    "compute_value": 1,
                    "compute_value2": 1,
                    "compute_value3": 1,
                    "compute_value_e": 1,
                    "initialize_value_d": 1,
                    "modify_result": 1,
                    "modify_value": 1,
                    "perform_action3": 1,
                    "perform_another_action": 1,
                    "perform_another_calculation": 1,
                    "perform_operation": 1,
                    "perform_transform": 1,
                    "update_result": 1,
                    "update_value": 2
                },
                "FUN_08000c08": {
                    "calculate_value": 1,
                    "calculate_variable1": 1,
                    "compute_value_a": 1
                },
                "FUN_08000c10": {
                    "calculate_input": 1,
                    "calculate_parameter": 1,
                    "calculate_var3": 1,
                    "compute_value_b": 1,
                    "fetch_data": 1,
                    "find_value": 1,
                    "get_constant": 1,
                    "get_constant_value": 1,
                    "get_data": 4,
                    "get_number": 1,
                    "get_param": 1,
                    "get_value": 4,
                    "get_variable": 1,
                    "get_variable2": 1,
                    "get_variable_value": 1,
                    "initialize_value": 1,
                    "initialize_value_b": 1,
                    "load_value": 1
                },
                "FUN_08000cb8": {
                    "calculate_output": 1,
                    "calculate_result": 2,
                    "calculate_result_alt": 1,
                    "calculate_var": 1,
                    "calculate_variable5": 1,
                    "combine_values": 1,
                    "compute_result": 2,
                    "compute_value2": 1,
                    "compute_value_d": 1,
                    "initialize_value_c": 1,
                    "perform_action": 2,
                    "perform_action2": 1,
                    "perform_another_operation": 1,
                    "perform_calculation": 1,
                    "perform_calculations": 1,
                    "perform_computation": 1,
                    "perform_operation": 1,
                    "perform_operations": 1,
                    "process_data": 1,
                    "process_value": 2
                },
                "FUN_08000ff4": {
                    "check_condition": 13,
                    "check_condition1": 1,
                    "check_result": 1,
                    "check_state": 1,
                    "check_status": 1,
                    "check_value": 3,
                    "check_var": 1,
                    "compare_data": 1,
                    "is_result_zero": 1,
                    "is_variable_false": 1
                },
                "FUN_08001030": {
                    "check_condition": 1,
                    "check_condition2": 1,
                    "check_condition_with_variable": 1,
                    "check_data": 1,
                    "check_equal": 1,
                    "check_equality": 1,
                    "check_result": 2,
                    "check_status": 2,
                    "check_value": 3,
                    "check_value2": 1,
                    "check_var2": 1,
                    "compare_value": 3,
                    "is_valid_value": 1,
                    "is_value_zero": 1,
                    "is_variable_equal": 1,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "validate": 1
                },
                "FUN_08001044": {
                    "apply_operation": 1,
                    "apply_transformation": 1,
                    "calculate_checksum": 1,
                    "calculate_local_value": 2,
                    "calculate_local_variable": 1,
                    "calculate_value": 1,
                    "calculate_variable3": 1,
                    "compress_value": 1,
                    "extract_data": 1,
                    "extract_value": 1,
                    "generate_random_number": 1,
                    "get_data_after_condition": 1,
                    "get_local_value": 1,
                    "manipulate_data": 1,
                    "parse_data": 1,
                    "perform_transformation": 1,
                    "process_value": 1,
                    "reverse": 1,
                    "reverse_value": 4,
                    "reverse_var": 1
                },
                "FUN_08001a80": {
                    "execute_command": 1,
                    "log_message": 1,
                    "perform_action": 1,
                    "print_value": 1,
                    "process_data": 1,
                    "send_data": 1,
                    "set_flag": 5,
                    "set_result": 2,
                    "set_variable": 1,
                    "show_status": 1,
                    "update_flag": 2,
                    "update_parameter": 1,
                    "update_status": 3,
                    "update_value": 2,
                    "update_var": 1
                },
                "FUN_08004ae0": {
                    "initialize": 1,
                    "initialize_audio_data": 1,
                    "initialize_buffer": 1,
                    "initialize_data": 14,
                    "initialize_data1": 1,
                    "initialize_global_data": 1,
                    "initialize_pointer": 1,
                    "initialize_pointers": 1,
                    "initialize_sound": 1,
                    "initialize_variable": 1,
                    "load_data": 1,
                    "structure_initialization": 1,
                    "update_data": 1
                },
                "FUN_08004bd8": {
                    "copy_data": 7,
                    "copy_data_to_buffer": 2,
                    "copy_string": 1,
                    "copy_variable_data": 1,
                    "extract_data": 1,
                    "init_data": 1,
                    "initialize_data": 5,
                    "initialize_data2": 1,
                    "initialize_variables": 1,
                    "load_audio": 1,
                    "load_audio_data": 1,
                    "load_config_data": 1,
                    "populate_parameter": 1,
                    "set_pointers": 1,
                    "update_data": 1
                },
                "FUN_08004f3c": {
                    "display_output": 2,
                    "display_user_input": 1,
                    "modify_data": 1,
                    "print_data": 1,
                    "print_result": 1,
                    "print_value": 1,
                    "process_message": 1,
                    "set_float_value": 1,
                    "set_output": 1,
                    "set_pitch": 5,
                    "set_pitch_data": 1,
                    "set_sensor_data": 1,
                    "set_u_var1": 1,
                    "set_value": 1,
                    "set_volume": 1,
                    "store_value": 1,
                    "update_pitch": 1,
                    "update_variable": 1
                },
                "FUN_08004f60": {
                    "configure_audio_settings": 1,
                    "execute_step": 1,
                    "initialize": 3,
                    "initialize_playback": 1,
                    "perform_action": 3,
                    "perform_calculation": 2,
                    "perform_operation": 1,
                    "perform_preprocessing": 1,
                    "perform_some_action": 2,
                    "play_background_music": 1,
                    "play_sound": 1,
                    "prepare_data": 1,
                    "reset_audio": 1,
                    "reset_data": 2,
                    "reset_pitch": 1,
                    "reset_sensor_data": 1,
                    "reset_values": 1,
                    "setup_audio": 2
                },
                "FUN_08004f78": {
                    "calculate_pitch": 4,
                    "extract_pitch": 1,
                    "extract_pitch_value": 1,
                    "function_name": 1,
                    "initialize_audio": 6,
                    "initialize_audio_system": 1,
                    "initialize_pitch": 1,
                    "initialize_sensor_data": 1,
                    "output_pitch_info": 1,
                    "process_audio_data": 6,
                    "process_pitch_data": 1,
                    "update_pitch": 3,
                    "update_pitch_information": 1,
                    "update_pitch_value": 1
                },
                "FUN_08005dfc": {
                    "print_formatted_value": 1,
                    "print_message": 4,
                    "print_pitch": 17,
                    "print_pitch_value": 2,
                    "print_sensor_data": 1,
                    "print_value": 1
                },
                "FUN_08005e40": {
                    "calculate_value": 1,
                    "calculate_variable6": 1,
                    "calculate_volume": 1,
                    "convert_pitch_to_string": 1,
                    "count_pitch": 1,
                    "format_message": 1,
                    "get_float_value": 1,
                    "get_input": 1,
                    "get_message_length": 1,
                    "get_num_sensor_data": 1,
                    "get_pitch": 4,
                    "get_pitch_value": 1,
                    "get_result": 1,
                    "get_string_length": 4,
                    "get_u_var1": 1,
                    "get_user_input": 1,
                    "get_value": 4
                },
                "iVar2": {
                    "status": 4,
                    "status2": 1,
                    "temp_var2": 1
                },
                "local_11": {
                    "local_var1": 1,
                    "output_value": 1,
                    "pitch": 4,
                    "pitch_byte": 1,
                    "pitch_value": 1
                },
                "uVar1": {
                    "result": 3,
                    "return_value": 1,
                    "status1": 1,
                    "temp_var1": 1
                },
                "uVar3": {
                    "status3": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_var3": 1,
                    "value": 2
                },
                "uVar4": {
                    "flipped_value": 1,
                    "mask": 1,
                    "masked_value": 1,
                    "temp_var": 1,
                    "temp_var4": 1,
                    "u_var4": 1
                },
                "uVar5": {
                    "pitch": 2,
                    "pitch_value": 3,
                    "temp_var5": 1
                }
            },
            "called": [
                "FUN_08000c08",
                "FUN_08001030",
                "FUN_08000c10",
                "FUN_08004bd8",
                "FUN_08004ae0",
                "FUN_08001044",
                "FUN_08000aa4",
                "FUN_08000ff4",
                "FUN_08001a80",
                "FUN_08000cb8",
                "FUN_08005dfc",
                "FUN_08000418",
                "FUN_08005e40",
                "FUN_08004f60",
                "FUN_08000aa8",
                "FUN_08004f3c"
            ],
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "code": "\nvoid initialize_audio_system_08004f78(void)\n\n{\n  undefined4 result;\n  int status;\n  undefined4 value;\n  uint temp_var4;\n  undefined8 pitch_value;\n  byte pitch;\n  \n  FUN_08004ae0(&DAT_20000a5c);\n  FUN_08004bd8(&DAT_20000a5c,&DAT_20000ba0);\n  FUN_08004f60();\n  pitch_value = FUN_08000418(DAT_20000ba0);\n  FUN_08005dfc(&DAT_20000ba8,\"Pitch: %f\\n\",(int)pitch_value,(int)((ulonglong)pitch_value >> 0x20));\n  result = FUN_08005e40(&DAT_20000ba8);\n  FUN_08004f3c(&DAT_20000ba8,result);\n  DAT_200009f8 = FUN_08000aa4(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = FUN_08000cb8(DAT_20000a00,DAT_200009f8);\n  result = FUN_08000cb8(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = FUN_08000aa8(result,DAT_20000b5c);\n  result = FUN_08000c10(DAT_20000010);\n  status = FUN_08000ff4(result,DAT_20000b5c);\n  if (status == 0) {\n    result = FUN_08000c10(DAT_200009f4);\n    status = FUN_08001030(result,DAT_20000b5c);\n    if (status != 0) {\n      DAT_20000b5c = FUN_08000c08(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = FUN_08000c08(DAT_20000010);\n  }\n  temp_var4 = DAT_20000a08 ^ 0x80000000;\n  result = FUN_08000aa4(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = FUN_08000cb8(temp_var4,result);\n  result = FUN_08000aa8(DAT_20000be8,DAT_20000b5c);\n  result = FUN_08000aa8(result,DAT_20000a58);\n  value = FUN_08000c10(DAT_20000010);\n  status = FUN_08001030(result,value);\n  if (status == 0) {\n    value = FUN_08000c10(DAT_200009f4);\n    status = FUN_08000ff4(result,value);\n    if (status == 0) {\n      pitch = FUN_08001044(result);\n    }\n    else {\n      pitch = DAT_200009f4;\n    }\n  }\n  else {\n    pitch = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,2,status != 0);\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,4,status == 0);\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,8,status != 0);\n  status = FUN_08001030(DAT_200009f8,0);\n  FUN_08001a80(0x40010800,0x10,status == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitch;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitch;\n  return;\n}\n\n",
            "current_name": "initialize_audio_system_08004f78",
            "entrypoint": "0x08004f78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f78": "initialize_audio_system_08004f78",
                "iVar2": "status",
                "local_11": "pitch",
                "uVar1": "result",
                "uVar3": "value",
                "uVar4": "temp_var4",
                "uVar5": "pitch_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005224": {
            "additional_data": {
                "FUN_080014f0": {
                    "configure_audio": 1,
                    "initialize_components": 3,
                    "initialize_data": 1,
                    "initialize_devices": 1,
                    "initialize_functions": 1,
                    "initialize_graphics": 2,
                    "initialize_hardware": 1,
                    "initialize_library": 2,
                    "initialize_module1": 1,
                    "initialize_network": 1,
                    "initialize_networking": 1,
                    "initialize_peripherals": 1,
                    "initialize_resources": 1,
                    "initialize_subsystem": 2,
                    "initialize_subsystem1": 1,
                    "initialize_subsystem_a": 1,
                    "initialize_system": 3,
                    "load_configuration": 1,
                    "load_data": 1,
                    "perform_pre_setup": 1,
                    "perform_setup": 1
                },
                "FUN_0800360c": {
                    "calculate_values": 1,
                    "configure_subsystem2": 1,
                    "configure_timer": 1,
                    "display_instructions": 1,
                    "initialize_buffer": 2,
                    "initialize_data": 1,
                    "initialize_data3": 1,
                    "initialize_display": 3,
                    "initialize_gui": 4,
                    "initialize_input": 2,
                    "initialize_pointer_b": 1,
                    "initialize_subsystem_b": 1,
                    "load_configuration": 3,
                    "prepare_display": 1,
                    "prepare_scene": 1,
                    "print_variable": 1,
                    "process_data_file": 1,
                    "process_pointer": 1,
                    "reset_memory": 1,
                    "setup_config": 1,
                    "update_buffer": 1
                },
                "FUN_080036a8": {
                    "allocate_memory": 8,
                    "configure_components": 1,
                    "configure_memory": 1,
                    "configure_subsystem": 1,
                    "initialize_buffer": 1,
                    "initialize_data": 3,
                    "initialize_data2": 1,
                    "initialize_memory": 1,
                    "initialize_pointer": 1,
                    "set_global_variable": 1,
                    "set_initial_value": 1,
                    "set_memory": 3,
                    "set_memory_location": 1,
                    "set_memory_value": 2,
                    "set_option": 1,
                    "set_pointer": 2,
                    "set_variable": 1
                },
                "FUN_0800491c": {
                    "configure_network": 1,
                    "configure_settings": 1,
                    "initialize_buffer": 1,
                    "initialize_configuration": 1,
                    "initialize_data": 12,
                    "initialize_data1": 1,
                    "initialize_data_structure": 1,
                    "initialize_memory": 1,
                    "initialize_settings": 2,
                    "initialize_subsystem8": 1,
                    "initialize_variables": 1,
                    "load_configuration": 1,
                    "load_data": 2,
                    "load_resources": 1,
                    "perform_task_b": 1
                },
                "FUN_08004e74": {
                    "disable_interrupts": 4,
                    "do_nothing_loop": 1,
                    "halt_execution": 1,
                    "halt_program": 1,
                    "halt_system": 1,
                    "keep_running": 1,
                    "reset_function": 1,
                    "run": 1,
                    "run_loop": 2,
                    "set_initial_state": 1,
                    "set_interrupt": 1,
                    "shutdown_program": 1,
                    "shutdown_system": 1,
                    "terminate_application": 1,
                    "wait_for_exit": 1
                },
                "FUN_08005224": {
                    "initialize": 4,
                    "initialize_application": 5,
                    "initialize_program": 10,
                    "initialize_system": 11,
                    "run_application": 1
                },
                "FUN_080052a0": {
                    "configure_display": 1,
                    "configure_hardware": 1,
                    "configure_input": 1,
                    "configure_io": 1,
                    "initialize_components": 1,
                    "initialize_data_structures": 1,
                    "initialize_graphics": 4,
                    "initialize_module2": 1,
                    "initialize_subsystem2": 1,
                    "load_configuration": 4,
                    "load_settings": 1,
                    "perform_first_task": 1,
                    "perform_initialization": 2,
                    "perform_preprocessing": 1,
                    "perform_setup": 1,
                    "perform_task_a": 1,
                    "setup_configuration": 1,
                    "setup_display": 1,
                    "setup_graphics": 3,
                    "setup_initial_config": 1,
                    "setup_networking": 1,
                    "validate_credentials": 1
                },
                "FUN_08005348": {
                    "configure_input": 1,
                    "configure_network": 1,
                    "configure_settings": 1,
                    "execute_action": 1,
                    "execute_task3": 1,
                    "handle_input": 1,
                    "initialize_audio": 1,
                    "initialize_display": 2,
                    "initialize_graphics": 1,
                    "initialize_gui": 1,
                    "initialize_input": 2,
                    "initialize_logging": 1,
                    "initialize_module4": 1,
                    "initialize_networking": 1,
                    "initialize_peripherals": 1,
                    "initialize_subsystem4": 1,
                    "initialize_subsystem_e": 1,
                    "initialize_timers": 1,
                    "initialize_uart": 1,
                    "load_game_assets": 1,
                    "normalize_data": 1,
                    "perform_action": 1,
                    "perform_startup_checks": 1,
                    "perform_task_e": 1,
                    "perform_third_task": 1,
                    "process_data": 1,
                    "setup_networking": 1,
                    "update_display": 1,
                    "validate_data": 1
                },
                "FUN_080053b0": {
                    "configure_audio": 1,
                    "configure_interrupts": 1,
                    "display_output": 1,
                    "execute_task2": 1,
                    "export_results": 1,
                    "handle_input": 1,
                    "initialize_audio": 4,
                    "initialize_graphics": 2,
                    "initialize_interrupts": 1,
                    "initialize_logging": 1,
                    "initialize_memory": 1,
                    "initialize_module7": 1,
                    "initialize_network": 1,
                    "initialize_networking": 3,
                    "initialize_subsystem7": 1,
                    "initialize_subsystem_d": 1,
                    "initialize_ui": 1,
                    "perform_sixth_task": 1,
                    "perform_task_d": 1,
                    "process_data": 2,
                    "process_input": 2,
                    "update_physics": 1,
                    "validate_data": 1
                },
                "FUN_08005500": {
                    "cleanup": 1,
                    "cleanup_resources": 1,
                    "configure_input": 1,
                    "configure_system": 1,
                    "execute_task5": 1,
                    "finalize_application": 1,
                    "generate_report": 1,
                    "initialize_game": 1,
                    "initialize_gui": 1,
                    "initialize_hardware": 1,
                    "initialize_input": 2,
                    "initialize_interrupts": 2,
                    "initialize_memory": 2,
                    "initialize_module6": 1,
                    "initialize_networking": 2,
                    "initialize_subsystem6": 1,
                    "initialize_subsystem_g": 1,
                    "initialize_timer": 1,
                    "initialize_timers": 1,
                    "load_user_data": 1,
                    "perform_fifth_task": 1,
                    "perform_task_g": 1,
                    "play_sound": 1,
                    "process_data": 1,
                    "render_graphics": 1,
                    "verify_data": 1,
                    "visualize_data": 1
                },
                "FUN_08005598": {
                    "analyze_data": 1,
                    "check_status": 1,
                    "display_menu": 3,
                    "execute_task1": 1,
                    "handle_input": 1,
                    "initialize_audio": 4,
                    "initialize_graphics": 2,
                    "initialize_input": 1,
                    "initialize_module5": 1,
                    "initialize_modules": 1,
                    "initialize_networking": 1,
                    "initialize_subsystem5": 1,
                    "initialize_subsystem_c": 1,
                    "initialize_timer": 1,
                    "load_configuration": 1,
                    "load_data": 2,
                    "load_resources": 2,
                    "perform_analysis": 1,
                    "perform_fourth_task": 1,
                    "perform_task_c": 1,
                    "render_objects": 1,
                    "setup_controls": 1,
                    "setup_database": 1
                },
                "FUN_080055f4": {
                    "configure_devices": 1,
                    "configure_settings": 2,
                    "execute_task4": 1,
                    "generate_output": 1,
                    "initialize_components": 1,
                    "initialize_display": 1,
                    "initialize_gui": 1,
                    "initialize_input": 1,
                    "initialize_module3": 1,
                    "initialize_network": 1,
                    "initialize_networking": 1,
                    "initialize_peripherals": 1,
                    "initialize_subsystem3": 1,
                    "initialize_subsystem_f": 1,
                    "initialize_timers": 1,
                    "initialize_video": 1,
                    "load_assets": 1,
                    "load_configuration": 2,
                    "load_configurations": 1,
                    "load_data": 1,
                    "load_settings": 2,
                    "perform_action": 1,
                    "perform_second_task": 1,
                    "perform_task": 1,
                    "perform_task_f": 1,
                    "update_animations": 1,
                    "update_screen": 1,
                    "validate_input": 1
                },
                "param_1": {
                    "subsystem_array": 1
                },
                "param_2": {
                    "value": 1
                }
            },
            "called": [
                "FUN_08004e74",
                "FUN_080052a0",
                "FUN_0800491c",
                "FUN_080036a8",
                "FUN_080014f0",
                "FUN_0800360c",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005348",
                "FUN_080055f4",
                "FUN_08005500"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid initialize_system_08005224(void)\n\n{\n  FUN_080014f0();\n  FUN_080052a0();\n  FUN_080055f4();\n  FUN_08005348();\n  FUN_08005598();\n  FUN_08005500();\n  FUN_080053b0();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  FUN_080036a8(&DAT_20000b1c,0);\n  FUN_080036a8(&DAT_20000b1c,0xc);\n  FUN_0800491c(&DAT_20000a5c);\n  FUN_0800360c(&DAT_20000b60);\n  FUN_08004e74(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_08005224",
            "entrypoint": "0x08005224",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005224": "initialize_system_08005224"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052a0": {
            "additional_data": {
                "FUN_0800172a": {
                    "function2": 1,
                    "initialize_buffer": 1,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "initialize_something": 1,
                    "initialize_system": 1,
                    "initialize_timer": 1,
                    "reset_data": 1,
                    "reset_state": 1,
                    "set_configuration": 1,
                    "set_parameters": 1,
                    "set_values": 2,
                    "update_status": 1
                },
                "FUN_08001762": {
                    "calculate_result": 2,
                    "calculate_value": 4,
                    "convert_execution_time": 1,
                    "convert_to_milliseconds": 1,
                    "format_and_print": 1,
                    "format_timestamp": 1,
                    "log_time": 1,
                    "print_timestamp": 1,
                    "process_data": 1,
                    "process_value": 1
                },
                "FUN_0800177c": {
                    "configure_system": 1,
                    "display_output": 1,
                    "do_something": 1,
                    "function1": 1,
                    "log_message": 1,
                    "perform_action": 2,
                    "print_message": 2,
                    "print_result": 1,
                    "print_value": 2,
                    "set_condition": 1,
                    "set_mode": 1
                },
                "FUN_08002d98": {
                    "check_condition": 1,
                    "check_flag": 2,
                    "check_flag1": 1,
                    "check_initial_condition": 1,
                    "check_initialization": 1,
                    "check_limit": 1,
                    "check_loop_counter": 1,
                    "check_value": 1,
                    "initialize_value": 1,
                    "initialize_variable": 2,
                    "validate_condition": 1
                },
                "FUN_08003260": {
                    "check_condition": 1,
                    "check_flag": 1,
                    "check_flag2": 1,
                    "check_threshold": 1,
                    "check_validity": 1,
                    "modify_variable": 1,
                    "perform_operation": 3,
                    "process_data": 4,
                    "process_params": 1
                },
                "FUN_08003504": {
                    "get_current_time": 2,
                    "get_elapsed_time": 1,
                    "get_execution_time": 1,
                    "get_random_value": 2,
                    "get_timestamp": 6,
                    "get_value": 2
                },
                "FUN_080052a0": {
                    "initialize": 1,
                    "initialize_and_display_data": 1,
                    "initialize_and_execute": 1,
                    "initialize_and_print": 1,
                    "initialize_app": 1,
                    "initialize_application": 5,
                    "initialize_function": 1,
                    "initialize_program": 15,
                    "initialize_system": 3,
                    "initiate_process": 1
                },
                "FUN_08005674": {
                    "display_error": 1,
                    "handle_error": 3,
                    "log_error": 1,
                    "print_error": 1,
                    "print_error_message": 4,
                    "report_error": 1,
                    "show_error_message": 1
                },
                "iVar1": {
                    "result": 15,
                    "return_value": 1
                },
                "local_10": {
                    "buffer_size": 1,
                    "constant1": 1,
                    "constant10000": 1,
                    "constant2": 1,
                    "constant3": 2,
                    "constant4": 1,
                    "constant6": 1,
                    "constant_5": 1,
                    "constant_d": 1,
                    "flag6": 1,
                    "init_value5": 1,
                    "initialize_size": 1,
                    "limit": 2,
                    "max_value": 1,
                    "offset": 1,
                    "option6": 1,
                    "param6": 1,
                    "temp4": 1,
                    "value2": 1,
                    "value6": 1,
                    "value_f": 1,
                    "variable6": 1,
                    "variable_f": 1
                },
                "local_14": {
                    "constant1": 1,
                    "constant2": 2,
                    "constant3": 1,
                    "constant5": 1,
                    "constant_4": 1,
                    "constant_c": 1,
                    "constant_two": 1,
                    "flag3": 1,
                    "flag5": 1,
                    "init_value4": 1,
                    "initialize_count": 1,
                    "option5": 1,
                    "param5": 1,
                    "status_code2": 1,
                    "temp3": 1,
                    "value": 2,
                    "value1": 1,
                    "value5": 1,
                    "value_e": 1,
                    "variable5": 1,
                    "variable_e": 1
                },
                "local_20": {
                    "constant1": 1,
                    "constant2": 1,
                    "constant4": 1,
                    "constant_3": 1,
                    "constant_b": 1,
                    "constant_one": 1,
                    "count": 1,
                    "data_size": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag4": 1,
                    "increment": 3,
                    "init_value3": 1,
                    "initialize_offset": 1,
                    "option4": 1,
                    "param4": 1,
                    "status_code1": 1,
                    "temp2": 1,
                    "value4": 1,
                    "value_d": 1,
                    "variable4": 1,
                    "variable_d": 1
                },
                "local_28": {
                    "constant3": 1,
                    "constant_2": 1,
                    "counter": 2,
                    "current_attempt": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "index": 1,
                    "init_value2": 1,
                    "initialize_counter": 1,
                    "initialize_index": 1,
                    "option3": 1,
                    "param3": 1,
                    "temp1": 1,
                    "value3": 1,
                    "value_c": 1,
                    "variable3": 1,
                    "variable_c": 1
                },
                "local_2c": {
                    "buffer_size": 1,
                    "constant": 1,
                    "constant1": 2,
                    "constant10000": 1,
                    "constant2": 1,
                    "constant_1": 1,
                    "constant_a": 1,
                    "flag2": 1,
                    "init_value1": 1,
                    "limit": 1,
                    "loop_limit": 1,
                    "max_attempts": 1,
                    "max_value": 1,
                    "option2": 1,
                    "param2": 1,
                    "user_input2": 1,
                    "value2": 1,
                    "value_b": 1,
                    "variable2": 1,
                    "variable_b": 1
                },
                "local_30": {
                    "constant1": 1,
                    "constant_one": 1,
                    "counter": 1,
                    "flag": 2,
                    "flag1": 2,
                    "flag_value": 1,
                    "init_status": 1,
                    "initialize_flag": 1,
                    "initialize_value": 1,
                    "is_initialized": 1,
                    "loop_counter": 1,
                    "mode": 1,
                    "option1": 1,
                    "param1": 1,
                    "total_attempts": 1,
                    "user_input1": 1,
                    "value1": 1,
                    "value_a": 1,
                    "variable1": 1,
                    "variable_a": 1
                },
                "local_34": {
                    "command_flag4": 1,
                    "constant_e": 1,
                    "counter2": 2,
                    "default_offset": 1,
                    "error_code5": 1,
                    "flag5": 3,
                    "index": 1,
                    "offset": 1,
                    "param4": 1,
                    "param5": 2,
                    "temp_var2": 1,
                    "value4": 1,
                    "value5": 4,
                    "value_e": 1,
                    "var5": 1
                },
                "local_38": {
                    "command_flag3": 1,
                    "constant_d": 1,
                    "count": 2,
                    "counter": 1,
                    "counter1": 1,
                    "default_index": 1,
                    "error_code4": 1,
                    "flag4": 4,
                    "param3": 1,
                    "param4": 2,
                    "temp_var1": 1,
                    "value3": 1,
                    "value4": 4,
                    "value_d": 1,
                    "var4": 1
                },
                "local_3c": {
                    "buffer_size": 2,
                    "command_flag2": 1,
                    "constant2": 1,
                    "constant80": 1,
                    "constant_c": 1,
                    "default_size": 1,
                    "error_code3": 1,
                    "flag2": 1,
                    "flag3": 4,
                    "length": 1,
                    "mask": 1,
                    "param2": 1,
                    "param3": 4,
                    "size": 1,
                    "threshold": 1,
                    "value": 1,
                    "value2": 1,
                    "value3": 4,
                    "value_c": 1,
                    "var3": 1
                },
                "local_40": {
                    "command_value": 1,
                    "constant_b": 1,
                    "constant_two": 1,
                    "count": 1,
                    "default_count": 1,
                    "error_code2": 1,
                    "flag": 2,
                    "flag2": 4,
                    "min_value": 1,
                    "param1": 1,
                    "param2": 4,
                    "value": 3,
                    "value1": 1,
                    "value2": 5,
                    "value_b": 1,
                    "var2": 1
                },
                "local_44": {
                    "bit_mask": 1,
                    "command_flag": 1,
                    "constant_a": 1,
                    "constant_f": 1,
                    "default_flag": 1,
                    "error_code": 4,
                    "error_code1": 1,
                    "flag": 2,
                    "flag1": 4,
                    "flag_value": 1,
                    "flags": 1,
                    "mask": 1,
                    "max_value": 1,
                    "param1": 4,
                    "value1": 4,
                    "value_a": 1,
                    "var1": 1
                },
                "local_c": {
                    "address": 1,
                    "constant1c0000": 1,
                    "constant2": 1,
                    "constant3": 1,
                    "constant4": 2,
                    "constant5": 1,
                    "constant7": 1,
                    "constant_6": 1,
                    "constant_e": 1,
                    "data": 1,
                    "flag7": 1,
                    "init_value6": 1,
                    "initialize_address": 1,
                    "limit_value": 1,
                    "memory_size": 1,
                    "option7": 1,
                    "param7": 1,
                    "size": 1,
                    "temp5": 1,
                    "value3": 1,
                    "value7": 1,
                    "value_g": 1,
                    "variable7": 1,
                    "variable_g": 1
                },
                "option1": {
                    "flag1": 1
                },
                "option2": {
                    "flag2": 1
                },
                "option3": {
                    "flag3": 1
                },
                "option4": {
                    "flag4": 1
                },
                "option5": {
                    "flag5": 1
                },
                "option6": {
                    "flag6": 1
                },
                "option7": {
                    "flag7": 1
                },
                "param_1": {
                    "param1": 2,
                    "pointer": 1,
                    "ptr_value1": 1,
                    "status": 1,
                    "system_status": 1
                },
                "param_2": {
                    "param2": 2,
                    "param_value1": 1
                },
                "param_3": {
                    "param3": 2,
                    "param_value2": 1
                },
                "param_4": {
                    "param4": 1
                },
                "uVar2": {
                    "current_value": 1,
                    "time": 2,
                    "time_val": 1,
                    "time_value": 2,
                    "timer_value": 1,
                    "timestamp": 5,
                    "unsigned_var": 1
                },
                "value1": {
                    "flags": 1
                },
                "value2": {
                    "param2": 1
                },
                "value3": {
                    "param3": 1
                },
                "value4": {
                    "param4": 1
                },
                "value5": {
                    "param5": 1
                }
            },
            "called": [
                "FUN_08002d98",
                "FUN_08003260",
                "FUN_0800177c",
                "FUN_08005674",
                "FUN_08003504",
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_program_080052a0(void)\n\n{\n  int result;\n  undefined8 timestamp;\n  undefined4 error_code;\n  undefined4 value2;\n  undefined4 param3;\n  undefined4 flag4;\n  undefined4 value5;\n  undefined4 flag;\n  undefined4 constant1;\n  undefined4 counter;\n  undefined4 increment;\n  undefined4 constant2;\n  undefined4 limit;\n  undefined4 constant4;\n  \n  flag = 1;\n  constant1 = 0x10000;\n  counter = 0;\n  increment = 1;\n  constant2 = 2;\n  limit = 0x10000;\n  constant4 = 0x1c0000;\n  result = FUN_08002d98(&flag);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x151);\n  }\n  error_code = 0xf;\n  value2 = 2;\n  param3 = 0x80;\n  flag4 = 0;\n  value5 = 0;\n  result = FUN_08003260(&error_code,2);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x15e);\n  }\n  timestamp = FUN_08003504();\n  FUN_08001762((uint)timestamp / 1000,(int)((ulonglong)timestamp >> 0x20),(uint)timestamp * 0x10624dd3);\n  FUN_0800177c(4);\n  FUN_0800172a(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_program_080052a0",
            "entrypoint": "0x080052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052a0": "initialize_program_080052a0",
                "iVar1": "result",
                "local_10": "limit",
                "local_14": "constant2",
                "local_20": "increment",
                "local_28": "counter",
                "local_2c": "constant1",
                "local_30": "flag",
                "local_34": "value5",
                "local_38": "flag4",
                "local_3c": "param3",
                "local_40": "value2",
                "local_44": "error_code",
                "local_c": "constant4",
                "uVar2": "timestamp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005348": {
            "additional_data": {
                "FUN_08001ab0": {
                    "check_data": 1,
                    "check_data_validity": 1,
                    "check_if_valid_address": 1,
                    "check_initialization": 1,
                    "check_memory": 2,
                    "check_memory_allocation": 3,
                    "check_pointer": 2,
                    "check_pointer_validity": 1,
                    "check_value": 1,
                    "get_parameter": 1,
                    "get_pointer": 1,
                    "handle_data": 1,
                    "initialize_data": 1,
                    "initialize_memory": 1,
                    "initialize_pointer": 3
                },
                "FUN_08005348": {
                    "initialize_data": 21,
                    "initialize_function": 1,
                    "initialize_global_variables": 1,
                    "initialize_variables": 8
                },
                "FUN_08005674": {
                    "display_error": 7,
                    "error_handling": 1,
                    "handle_error": 2,
                    "log_error": 3,
                    "print_error": 3,
                    "print_error_message": 3,
                    "report_error": 2
                },
                "iVar1": {
                    "result": 18,
                    "return_value": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "input_data": 1
                }
            },
            "called": [
                "FUN_08001ab0",
                "FUN_08005674"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_data_08005348(void)\n\n{\n  int result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  result = FUN_08001ab0(&DAT_20000a88);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08005348",
            "entrypoint": "0x08005348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005348": "initialize_data_08005348",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053b0": {
            "additional_data": {
                "DAT_20000b1c": {
                    "data": 1,
                    "data1": 2,
                    "data_pointer": 1,
                    "input_data": 1,
                    "parameter1": 1,
                    "ptr1": 1,
                    "ptr_var1": 1,
                    "system_data": 1,
                    "variable1": 1
                },
                "DAT_20000b20": {
                    "constant1": 1,
                    "constant_a": 1,
                    "data2": 2,
                    "global_var1": 1,
                    "parameter2": 1,
                    "ptr2": 1,
                    "value1": 2,
                    "variable2": 1
                },
                "DAT_20000b24": {
                    "constant2": 1,
                    "constant_b": 1,
                    "data3": 2,
                    "global_var2": 1,
                    "parameter3": 1,
                    "ptr3": 1,
                    "value2": 2,
                    "variable3": 1
                },
                "DAT_20000b28": {
                    "constant3": 1,
                    "constant_c": 1,
                    "data4": 2,
                    "global_var3": 1,
                    "parameter4": 1,
                    "ptr4": 1,
                    "value3": 2,
                    "variable4": 1
                },
                "DAT_20000b2c": {
                    "constant4": 1,
                    "constant_d": 1,
                    "data5": 2,
                    "global_var4": 1,
                    "parameter5": 1,
                    "ptr5": 1,
                    "value4": 2,
                    "variable5": 1
                },
                "DAT_20000b30": {
                    "constant5": 1,
                    "constant_e": 1,
                    "data6": 2,
                    "global_var5": 1,
                    "parameter6": 1,
                    "ptr6": 1,
                    "value5": 2,
                    "variable6": 1
                },
                "DAT_20000b34": {
                    "constant6": 1,
                    "constant_f": 1,
                    "data7": 2,
                    "global_var6": 1,
                    "parameter7": 1,
                    "ptr7": 1,
                    "value6": 2,
                    "variable7": 1
                },
                "FUN_080035a4": {
                    "check_function1": 1,
                    "check_initialization": 1,
                    "check_memory": 1,
                    "check_resource_file": 1,
                    "initialize_resources": 1
                },
                "FUN_08003640": {
                    "check_connection": 1,
                    "check_function3": 1,
                    "check_initialization": 2,
                    "initialize_graphics": 1
                },
                "FUN_08003908": {
                    "check_function5": 1,
                    "configure_settings": 2,
                    "initialize_memory": 1,
                    "set_texture_parameters": 1
                },
                "FUN_08003a94": {
                    "check_function2": 1,
                    "initialize_data": 2,
                    "initialize_memory": 1,
                    "load_data": 1
                },
                "FUN_0800422e": {
                    "check_function6": 1,
                    "initialize_registers": 1,
                    "load_configuration": 1,
                    "load_data": 1,
                    "process_data": 1
                },
                "FUN_080042de": {
                    "check_function4": 1,
                    "initialize_buffer": 1,
                    "initialize_values": 1,
                    "load_data": 1,
                    "load_texture": 1
                },
                "FUN_080053b0": {
                    "initialize": 1,
                    "initialize_and_configure": 1,
                    "initialize_app": 1,
                    "initialize_application": 7,
                    "initialize_program": 18,
                    "initialize_system": 3
                },
                "FUN_08005674": {
                    "log_error": 1,
                    "print_error_message": 2,
                    "report_error": 2
                },
                "FUN_08005680": {
                    "cleanup": 1,
                    "cleanup_resources": 3,
                    "finalize_program": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 3,
                    "return_value": 1
                },
                "local_18": {
                    "array": 2,
                    "array1": 1,
                    "array_var1": 1,
                    "buffer": 4,
                    "buffer_array": 2,
                    "buffer_size": 2,
                    "buffer_sizes": 1,
                    "empty_array": 1,
                    "error_code_array": 1,
                    "file_array": 1,
                    "flags": 1,
                    "flags_array": 1,
                    "local_array": 1,
                    "page_sizes": 1,
                    "param_list": 1,
                    "row_count_buffer": 1,
                    "size_array": 1,
                    "values": 1,
                    "values_array": 1,
                    "var_arr": 1,
                    "var_array": 1
                },
                "local_1c": {
                    "buffer16": 2,
                    "data": 1,
                    "error_code": 1,
                    "error_code13": 1,
                    "error_code14": 1,
                    "file_p": 1,
                    "flag16": 1,
                    "flag2": 1,
                    "flag6": 1,
                    "height": 1,
                    "index": 1,
                    "local_var15": 1,
                    "memory_check_flag": 1,
                    "result": 2,
                    "size_m": 1,
                    "temp13": 1,
                    "total": 1,
                    "unused_var13": 1,
                    "value10": 1,
                    "value16": 2,
                    "value2": 1,
                    "var14": 1,
                    "var16": 2,
                    "variable2": 1,
                    "x8": 1
                },
                "local_20": {
                    "buffer15": 2,
                    "count": 2,
                    "count_var": 1,
                    "counter": 2,
                    "error_code13": 1,
                    "file_o": 1,
                    "flag1": 1,
                    "flag15": 1,
                    "initialized_flag": 1,
                    "local_var14": 1,
                    "offset7": 1,
                    "row_count": 1,
                    "size_l": 1,
                    "temp12": 2,
                    "value": 1,
                    "value1": 1,
                    "value15": 2,
                    "value9": 1,
                    "var13": 1,
                    "var15": 2,
                    "variable1": 1,
                    "width": 1,
                    "x7": 1
                },
                "local_24": {
                    "antialiasing_level": 1,
                    "buffer14": 2,
                    "error_code": 1,
                    "error_code12": 2,
                    "file_n": 1,
                    "flag14": 1,
                    "flag5": 1,
                    "length": 1,
                    "local_var13": 1,
                    "offset6": 1,
                    "param6": 1,
                    "param7": 1,
                    "size_k": 1,
                    "temp11": 2,
                    "unused_var12": 1,
                    "value14": 2,
                    "value8": 1,
                    "var12": 1,
                    "var14": 2,
                    "variable9": 1,
                    "widget14": 1,
                    "x6": 1
                },
                "local_28": {
                    "buffer13": 2,
                    "error_code": 1,
                    "error_code11": 2,
                    "file_m": 1,
                    "flag13": 1,
                    "flag4": 1,
                    "local_var12": 1,
                    "offset5": 1,
                    "param5": 1,
                    "param6": 1,
                    "size_j": 1,
                    "stencil_bits": 1,
                    "temp10": 2,
                    "unused_var11": 1,
                    "value": 1,
                    "value13": 2,
                    "value7": 1,
                    "var11": 1,
                    "var13": 2,
                    "variable8": 1,
                    "widget13": 1,
                    "x5": 1
                },
                "local_2c": {
                    "buffer12": 2,
                    "depth_bits": 1,
                    "error_code": 1,
                    "error_code10": 2,
                    "file_l": 1,
                    "flag12": 1,
                    "flag3": 1,
                    "local_var11": 1,
                    "offset4": 1,
                    "param4": 1,
                    "param5": 1,
                    "position": 1,
                    "size_i": 1,
                    "temp9": 2,
                    "unused_var10": 1,
                    "value12": 2,
                    "value6": 1,
                    "var10": 1,
                    "var12": 2,
                    "variable7": 1,
                    "widget12": 1,
                    "x4": 1
                },
                "local_30": {
                    "buffer11": 2,
                    "color_bits": 1,
                    "error_code": 1,
                    "error_code9": 2,
                    "file_k": 1,
                    "flag11": 1,
                    "flag2": 1,
                    "local_var10": 1,
                    "offset": 1,
                    "offset3": 1,
                    "param3": 1,
                    "param4": 1,
                    "size_h": 1,
                    "temp8": 2,
                    "unused_var9": 1,
                    "value11": 2,
                    "value5": 1,
                    "var11": 2,
                    "var9": 1,
                    "variable6": 1,
                    "widget11": 1,
                    "x3": 1
                },
                "local_34": {
                    "buffer10": 2,
                    "buffer_width": 1,
                    "end": 1,
                    "error_code": 1,
                    "error_code8": 1,
                    "file_j": 1,
                    "flag1": 1,
                    "flag10": 1,
                    "local_var9": 1,
                    "offset2": 1,
                    "param2": 1,
                    "param3": 1,
                    "size_g": 1,
                    "temp7": 2,
                    "unused_var8": 1,
                    "value10": 2,
                    "value4": 1,
                    "var10": 2,
                    "var8": 1,
                    "variable5": 1,
                    "widget10": 1,
                    "x2": 1
                },
                "local_38": {
                    "buffer9": 2,
                    "buffer_height": 1,
                    "error_code": 1,
                    "error_code7": 1,
                    "file_i": 1,
                    "flag9": 1,
                    "local_var8": 1,
                    "offset1": 1,
                    "param1": 1,
                    "param2": 1,
                    "size": 1,
                    "size_f": 1,
                    "start": 1,
                    "temp6": 2,
                    "unused_var7": 1,
                    "value3": 1,
                    "value9": 2,
                    "var7": 1,
                    "var9": 2,
                    "variable4": 1,
                    "widget9": 1,
                    "x1": 1
                },
                "local_3c": {
                    "array_size": 1,
                    "buffer": 2,
                    "buffer8": 2,
                    "buffer_size": 3,
                    "buffer_size2": 1,
                    "bytes_read": 1,
                    "file_h": 1,
                    "flag8": 1,
                    "local_var7": 1,
                    "param1": 1,
                    "size": 4,
                    "size1": 1,
                    "size_e": 1,
                    "value2": 1,
                    "value8": 2,
                    "var8": 2,
                    "variable3": 1,
                    "widget8": 1
                },
                "local_40": {
                    "buffer7": 2,
                    "buffer_offset": 1,
                    "context_settings": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_code6": 4,
                    "error_code7": 1,
                    "file_g": 1,
                    "flag": 1,
                    "flag7": 1,
                    "flag8": 1,
                    "local_var6": 1,
                    "result6": 1,
                    "size_d": 1,
                    "temp5": 2,
                    "unused_var6": 1,
                    "value7": 2,
                    "var6": 1,
                    "var7": 2,
                    "variable16": 1,
                    "widget7": 1
                },
                "local_44": {
                    "buffer": 2,
                    "buffer6": 2,
                    "buffer_size": 8,
                    "error_code6": 1,
                    "file_f": 1,
                    "flag6": 1,
                    "local_var5": 1,
                    "result5": 1,
                    "size": 1,
                    "size2": 1,
                    "size_c": 1,
                    "title": 1,
                    "value1": 1,
                    "value6": 2,
                    "var6": 2,
                    "variable15": 1,
                    "widget6": 1
                },
                "local_48": {
                    "buffer5": 2,
                    "data_offset2": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_code5": 6,
                    "file_e": 1,
                    "flag5": 1,
                    "flag7": 1,
                    "increment": 1,
                    "local_var4": 1,
                    "result4": 1,
                    "size_b": 1,
                    "temp4": 2,
                    "unused_var5": 1,
                    "value5": 2,
                    "var5": 3,
                    "variable14": 1,
                    "widget5": 1,
                    "window_height": 1
                },
                "local_4c": {
                    "buffer4": 2,
                    "data_offset": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_code4": 6,
                    "file_d": 1,
                    "flag4": 1,
                    "flag6": 1,
                    "limit": 1,
                    "local_var3": 1,
                    "result3": 1,
                    "size_a": 1,
                    "temp3": 2,
                    "unused_var4": 1,
                    "value4": 2,
                    "var4": 3,
                    "variable13": 1,
                    "widget4": 1,
                    "window_width": 1
                },
                "local_50": {
                    "buffer3": 2,
                    "data_size": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_code3": 6,
                    "file_c": 1,
                    "flag3": 1,
                    "flag5": 1,
                    "index": 1,
                    "local_var2": 1,
                    "result2": 1,
                    "size_z": 1,
                    "temp2": 2,
                    "unused_var3": 1,
                    "value3": 2,
                    "var3": 3,
                    "variable12": 1,
                    "widget3": 1,
                    "window_style": 1
                },
                "local_54": {
                    "buffer2": 2,
                    "data_count": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_code2": 6,
                    "file_b": 1,
                    "flag2": 1,
                    "flag4": 1,
                    "local_var1": 1,
                    "minor_version": 1,
                    "result1": 1,
                    "size_y": 1,
                    "temp": 1,
                    "temp1": 2,
                    "unused_var2": 1,
                    "value2": 2,
                    "var2": 3,
                    "variable11": 1,
                    "widget2": 1
                },
                "local_58": {
                    "buffer1": 2,
                    "data_flag": 1,
                    "error": 1,
                    "error_code": 2,
                    "error_code1": 5,
                    "error_code8": 1,
                    "file_a": 1,
                    "flag1": 1,
                    "flag3": 1,
                    "flags": 1,
                    "major_version": 1,
                    "result": 2,
                    "size_x": 1,
                    "unused_var1": 1,
                    "value1": 2,
                    "var1": 4,
                    "variable10": 1,
                    "widget1": 1
                }
            },
            "called": [
                "FUN_08003640",
                "FUN_08003908",
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_0800422e",
                "FUN_08005680",
                "FUN_08003a94"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_program_080053b0(void)\n\n{\n  int result;\n  undefined4 error_code1;\n  undefined4 error_code2;\n  undefined4 error_code3;\n  undefined4 error_code4;\n  undefined4 error_code5;\n  undefined4 buffer_size;\n  undefined4 error_code6;\n  undefined4 size;\n  undefined4 value9;\n  undefined4 var10;\n  undefined4 buffer11;\n  undefined4 error_code10;\n  undefined4 error_code11;\n  undefined4 buffer14;\n  undefined4 counter;\n  undefined4 result;\n  undefined4 buffer [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  result = FUN_080035a4(&DAT_20000b1c);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",399);\n  }\n  buffer[0] = 0x1000;\n  result = FUN_08003a94(&DAT_20000b1c,buffer);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x194);\n  }\n  result = FUN_08003640(&DAT_20000b1c);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x198);\n  }\n  counter = 0;\n  result = 0;\n  result = FUN_080042de(&DAT_20000b1c,&counter);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x19f);\n  }\n  size = 0x60;\n  value9 = 0;\n  var10 = 0;\n  buffer11 = 0;\n  error_code10 = 0;\n  error_code11 = 0;\n  buffer14 = 0;\n  result = FUN_08003908(&DAT_20000b1c,&size,0);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ab);\n  }\n  result = FUN_08003908(&DAT_20000b1c,&size,0xc);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1b0);\n  }\n  error_code1 = 0;\n  error_code2 = 0;\n  error_code3 = 0;\n  error_code4 = 0;\n  error_code5 = 0;\n  buffer_size = 0x2000;\n  error_code6 = 0;\n  result = FUN_0800422e(&DAT_20000b1c,&error_code1);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1bc);\n  }\n  FUN_08005680(&DAT_20000b1c);\n  return;\n}\n\n",
            "current_name": "initialize_program_080053b0",
            "entrypoint": "0x080053b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053b0": "initialize_program_080053b0",
                "iVar1": "result",
                "local_18": "buffer",
                "local_1c": "result",
                "local_20": "counter",
                "local_24": "buffer14",
                "local_28": "error_code11",
                "local_2c": "error_code10",
                "local_30": "buffer11",
                "local_34": "var10",
                "local_38": "value9",
                "local_3c": "size",
                "local_40": "error_code6",
                "local_44": "buffer_size",
                "local_48": "error_code5",
                "local_4c": "error_code4",
                "local_50": "error_code3",
                "local_54": "error_code2",
                "local_58": "error_code1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005500": {
            "additional_data": {
                "FUN_080035a4": {
                    "check_data": 3,
                    "check_data1": 1,
                    "check_data_size": 2,
                    "check_first_setting": 1,
                    "check_memory": 7,
                    "check_memory_allocation": 3,
                    "check_memory_init": 1
                },
                "FUN_08003a94": {
                    "allocate_memory": 4,
                    "check_data": 1,
                    "check_data2": 1,
                    "check_memory_initialization": 1,
                    "check_second_setting": 1,
                    "initialize_block": 1,
                    "initialize_memory": 3,
                    "load_modules": 1,
                    "process_data": 2,
                    "process_memory": 1,
                    "process_values": 1,
                    "read_config_values": 1
                },
                "FUN_080042de": {
                    "allocate_memory": 1,
                    "configure_third_setting": 1,
                    "do_something": 1,
                    "load_data": 1,
                    "modify_data": 1,
                    "parse_buffer": 1,
                    "process_data": 2,
                    "read_buffer": 2,
                    "read_data": 3,
                    "read_memory": 1,
                    "set_parameters": 1,
                    "update_data": 2,
                    "update_values": 1
                },
                "FUN_08005500": {
                    "initialize": 3,
                    "initialize_application": 1,
                    "initialize_data": 22,
                    "initialize_game_data": 1,
                    "initialize_memory": 1,
                    "initialize_program": 1,
                    "initialize_settings": 2
                },
                "FUN_08005674": {
                    "display_error_message": 1,
                    "log_error": 7,
                    "log_error_message": 1,
                    "print_error": 3,
                    "print_error_message": 3,
                    "report_error": 2
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 8,
                    "return_value": 1
                },
                "local_18": {
                    "array": 1,
                    "array_lengths": 1,
                    "array_size": 1,
                    "array_sizes": 4,
                    "buffer": 3,
                    "buffer_size": 1,
                    "buffer_sizes": 1,
                    "chunk_sizes": 1,
                    "config_values": 1,
                    "flags": 1,
                    "memory_block": 1,
                    "memory_blocks": 1,
                    "memory_size": 1,
                    "module_sizes": 1,
                    "page_sizes": 1,
                    "parameters": 4,
                    "settings_array": 1,
                    "size_array": 2,
                    "sizes": 1,
                    "values": 1
                },
                "local_1c": {
                    "buffer": 1,
                    "buffer_count": 1,
                    "buffer_position": 1,
                    "byte_offset": 1,
                    "count": 5,
                    "counter": 3,
                    "current_index": 1,
                    "flag": 1,
                    "offset": 5,
                    "value2": 1,
                    "zero": 1,
                    "zero_offset": 1
                },
                "local_20": {
                    "buffer_size": 17,
                    "byte_size": 1,
                    "chunk_size": 1,
                    "data_size": 1,
                    "length": 1,
                    "size": 5,
                    "value": 1,
                    "value1": 1
                }
            },
            "called": [
                "FUN_080035a4",
                "FUN_080042de",
                "FUN_08005674",
                "FUN_08003a94"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_game_data_08005500(void)\n\n{\n  int result;\n  undefined4 buffer_size;\n  undefined4 offset;\n  undefined4 parameters [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  result = FUN_080035a4(&DAT_20000b60);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d0);\n  }\n  parameters[0] = 0x1000;\n  result = FUN_08003a94(&DAT_20000b60,parameters);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1d5);\n  }\n  buffer_size = 0x20;\n  offset = 0;\n  result = FUN_080042de(&DAT_20000b60,&buffer_size);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_game_data_08005500",
            "entrypoint": "0x08005500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005500": "initialize_game_data_08005500",
                "iVar1": "result",
                "local_18": "parameters",
                "local_1c": "offset",
                "local_20": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005598": {
            "additional_data": {
                "FUN_0800438a": {
                    "check_data": 9,
                    "check_data_validity": 6,
                    "check_initialization": 1,
                    "check_memory": 4,
                    "check_pointer": 1,
                    "get_memory_status": 1,
                    "initialize_memory": 1,
                    "read_data": 1,
                    "verify_data": 2
                },
                "FUN_08005598": {
                    "initialize_data": 28,
                    "initialize_variables": 3
                },
                "FUN_08005674": {
                    "display_error": 5,
                    "display_error_message": 1,
                    "handle_error": 1,
                    "log_error": 8,
                    "print_error": 3,
                    "print_error_message": 5,
                    "report_error": 2,
                    "show_error": 1
                },
                "iVar1": {
                    "result": 15,
                    "return_value": 4
                },
                "param_1": {
                    "data_buffer": 1,
                    "data_ptr": 1
                }
            },
            "called": [
                "FUN_0800438a",
                "FUN_08005674"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_data_08005598(void)\n\n{\n  int result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  result = FUN_0800438a(&DAT_20000adc);\n  if (result != 0) {\n    FUN_08005674(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_08005598",
            "entrypoint": "0x08005598",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005598": "initialize_data_08005598",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055f4": {
            "additional_data": {
                "FUN_080017c4": {
                    "copy_buffer": 1,
                    "copy_memory": 1,
                    "pass_data": 1,
                    "print_data": 2,
                    "process_data": 3,
                    "send_data": 1,
                    "update_data": 1
                },
                "FUN_08001a80": {
                    "modify_data": 1,
                    "set_bit": 1,
                    "set_data": 2,
                    "set_flag": 1,
                    "set_flag_in_buffer": 1,
                    "set_memory": 1,
                    "set_memory_settings": 1,
                    "set_parameters": 1,
                    "setup_device": 1
                },
                "FUN_080055f4": {
                    "configure_device": 1,
                    "configure_hardware": 1,
                    "initialize": 2,
                    "initialize_and_set_flag": 1,
                    "initialize_data": 13,
                    "initialize_data_and_call_functions": 1,
                    "initialize_device": 1,
                    "initialize_function": 1,
                    "initialize_hardware": 3,
                    "initialize_memory": 2,
                    "initialize_registers": 2,
                    "initialize_variables": 1,
                    "set_flag_and_call_functions": 1,
                    "update_configuration": 1
                },
                "_DAT_40021018": {
                    "flag": 1,
                    "hardware_status": 1,
                    "register": 1,
                    "register_flag": 1,
                    "register_value": 3
                },
                "local_14": {
                    "argument1": 1,
                    "config_index": 1,
                    "data_type": 1,
                    "data_value": 1,
                    "flag": 12,
                    "increment_value": 1,
                    "local_var1": 1,
                    "new_flag": 1,
                    "param1": 2,
                    "param_3": 1,
                    "parameter2": 1,
                    "retry_limit": 1,
                    "value": 1,
                    "value1": 3,
                    "variable1": 1,
                    "variable2": 1
                },
                "local_18": {
                    "buffer_size": 4,
                    "count": 1,
                    "data_length": 4,
                    "data_size": 7,
                    "length": 3,
                    "length_value": 1,
                    "memory_size": 1,
                    "new_length": 1,
                    "num": 1,
                    "num_configurations": 1,
                    "num_iterations": 1,
                    "packet_size": 1,
                    "parameter1": 1,
                    "size": 1,
                    "size_value": 1,
                    "variable1": 1
                },
                "local_c": {
                    "argument2": 1,
                    "backoff_time": 1,
                    "config_type": 1,
                    "constant": 1,
                    "constant_value": 1,
                    "count": 4,
                    "counter": 1,
                    "data_format": 1,
                    "data_offset": 1,
                    "flag": 1,
                    "local_var2": 1,
                    "new_variable": 1,
                    "param2": 2,
                    "parameter3": 1,
                    "value": 7,
                    "value2": 3,
                    "variable2": 1,
                    "variable3": 1
                },
                "param_1": {
                    "address": 6,
                    "base_address": 1,
                    "buffer": 1,
                    "buffer_address": 1,
                    "data_address": 2,
                    "device_address": 1,
                    "source_buffer": 1
                },
                "param_2": {
                    "buffer_size": 1,
                    "data": 2,
                    "data_pointer": 1,
                    "data_size": 1,
                    "destination_buffer": 1,
                    "length": 6,
                    "size": 1
                },
                "param_3": {
                    "device_flag": 1,
                    "flag": 8,
                    "param3": 1
                }
            },
            "called": [
                "FUN_08001a80",
                "FUN_080017c4"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nvoid initialize_data_and_call_functions_080055f4(void)\n\n{\n  undefined4 data_size;\n  undefined4 flag;\n  undefined4 value;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  FUN_08001a80(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  data_size = 0x1e;\n  flag = 1;\n  value = 2;\n  FUN_080017c4(0x40010800,&data_size);\n  return;\n}\n\n",
            "current_name": "initialize_data_and_call_functions_080055f4",
            "entrypoint": "0x080055f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055f4": "initialize_data_and_call_functions_080055f4",
                "local_14": "flag",
                "local_18": "data_size",
                "local_c": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005674": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1
                },
                "DAT_XXXX": {
                    "unchanged": 1
                },
                "FUN_08005674": {
                    "endless_loop": 1,
                    "infinite_loop": 27,
                    "run_endless_loop": 1,
                    "run_infinite_loop": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "PTR_XXXX": {
                    "unchanged": 1
                },
                "do": {
                    "infinite_loop_block": 1,
                    "while": 1
                },
                "do_nothing_block": {
                    "do_nothing_block": 1
                },
                "infiniteLoop": {
                    "infinite_loop": 1
                },
                "original_function_name": {
                    "more_descriptive_function_name": 1
                },
                "original_variable_name_1": {
                    "counter": 1,
                    "infinite_loop_count": 1
                },
                "true": {
                    "true": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005348",
                "FUN_08005500"
            ],
            "code": "\nvoid run_infinite_loop_08005674(void)\n\n{\n  while {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_08005674",
            "entrypoint": "0x08005674",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005674": "run_infinite_loop_08005674",
                "do": "while"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005680": {
            "additional_data": {
                "FUN_080017c4": {
                    "configure_device": 1,
                    "configure_subsystem": 1,
                    "perform_operation": 1,
                    "process_data": 1,
                    "process_resource": 1,
                    "send_data": 1,
                    "set_configuration": 1,
                    "update_data": 2,
                    "update_settings": 4,
                    "update_value": 1,
                    "update_values": 1
                },
                "FUN_08005680": {
                    "check_and_execute_action": 1,
                    "check_and_initialize": 1,
                    "check_and_process_value": 1,
                    "check_and_update_param": 1,
                    "check_and_update_value": 1,
                    "check_param_value": 1,
                    "check_parameter_and_call_function": 1,
                    "handle_param": 1,
                    "handle_param1": 1,
                    "initialize_configuration": 2,
                    "initialize_memory": 1,
                    "initialize_parameters": 1,
                    "initialize_resources": 2,
                    "initialize_settings": 8,
                    "process_data": 1,
                    "process_function": 1,
                    "process_input": 1,
                    "process_param": 4,
                    "process_parameter": 1
                },
                "local_14": {
                    "count": 8,
                    "counter": 4,
                    "flag1": 2,
                    "multiplier": 1,
                    "new_value2": 1,
                    "num_attempts": 1,
                    "output_param2": 1,
                    "param1_copy": 1,
                    "parameter1": 1,
                    "resource_type": 1,
                    "resource_value2": 1,
                    "retry_count": 1,
                    "setting2": 3,
                    "setting_flag1": 1,
                    "value1": 1,
                    "value2": 1,
                    "value_b": 1,
                    "value_two": 1
                },
                "local_18": {
                    "action_value": 1,
                    "code": 1,
                    "config_value": 1,
                    "constant_value": 2,
                    "error_code": 2,
                    "initial_value": 1,
                    "new_val": 1,
                    "new_value1": 1,
                    "output_param1": 1,
                    "output_value": 2,
                    "resource_value": 1,
                    "resource_value1": 1,
                    "result": 1,
                    "setting1": 3,
                    "setting_value": 1,
                    "size": 2,
                    "threshold": 1,
                    "timeout_value": 1,
                    "value": 3,
                    "value1": 1,
                    "value_a": 2,
                    "value_one": 1
                },
                "local_c": {
                    "counter": 1,
                    "flag": 3,
                    "flag2": 2,
                    "index": 2,
                    "limit": 2,
                    "max_retry": 1,
                    "new_value3": 1,
                    "output_param3": 1,
                    "param2_copy": 1,
                    "parameter2": 1,
                    "resource_count": 1,
                    "resource_value3": 1,
                    "retry_limit": 1,
                    "setting3": 3,
                    "setting_flag2": 1,
                    "threshold": 1,
                    "value": 4,
                    "value2": 1,
                    "value3": 1,
                    "value_c": 1,
                    "value_three": 1
                },
                "param_1": {
                    "action": 1,
                    "config_params": 1,
                    "configuration": 2,
                    "data_ptr": 1,
                    "input": 2,
                    "input_param": 2,
                    "input_ptr": 1,
                    "input_value": 1,
                    "memory_pointer": 1,
                    "param": 5,
                    "param_pointer": 1,
                    "parameter": 2,
                    "parameter_ptr": 1,
                    "resource_input": 1,
                    "resource_ptr": 1,
                    "settings": 5,
                    "settings_ptr": 1,
                    "value": 1,
                    "value_ptr": 1
                },
                "param_2": {
                    "resource_output": 1,
                    "result_buffer": 1,
                    "value_ptr": 1
                }
            },
            "called": [
                "FUN_080017c4"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nvoid initialize_settings_08005680(int *settings)\n\n{\n  undefined4 setting1;\n  undefined4 count;\n  undefined4 value;\n  \n  if (*settings == 0x40012c00) {\n    setting1 = 0x900;\n    count = 2;\n    value = 2;\n    FUN_080017c4(0x40010800,&setting1);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_settings_08005680",
            "entrypoint": "0x08005680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005680": "initialize_settings_08005680",
                "local_14": "count",
                "local_18": "setting1",
                "local_c": "value",
                "param_1": "settings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005704": {
            "additional_data": {
                "FUN_0800157c": {
                    "configure_settings": 1,
                    "do_additional_tasks": 1,
                    "execute_initialization": 1,
                    "execute_subroutine": 1,
                    "initialize_component1": 1,
                    "initialize_component_a": 1,
                    "initialize_components": 1,
                    "initialize_data": 1,
                    "initialize_devices": 1,
                    "initialize_first_subfunction": 1,
                    "initialize_primary": 1,
                    "initialize_subsystem": 1,
                    "initialize_system": 1,
                    "load_configuration": 1,
                    "perform_additional_tasks": 1,
                    "perform_first_operation": 1,
                    "perform_first_task": 1,
                    "perform_initial_setup": 1,
                    "perform_initialization": 3,
                    "perform_primary_action": 1,
                    "perform_primary_task": 3,
                    "perform_task_2": 1,
                    "perform_task_b": 3,
                    "setup_components": 1,
                    "step_1": 1
                },
                "FUN_080017b4": {
                    "configure_application": 1,
                    "configure_network": 1,
                    "configure_settings": 1,
                    "do_something": 1,
                    "execute_additional_tasks": 1,
                    "initialize_component2": 1,
                    "initialize_component_b": 1,
                    "initialize_second_subfunction": 1,
                    "initialize_secondary": 1,
                    "perform_additional_tasks": 5,
                    "perform_cleanup": 2,
                    "perform_initialization": 1,
                    "perform_operation": 1,
                    "perform_second_operation": 1,
                    "perform_second_task": 1,
                    "perform_secondary_action": 1,
                    "perform_secondary_task": 3,
                    "perform_subtask": 1,
                    "perform_task": 1,
                    "perform_task_1": 1,
                    "perform_task_a": 3,
                    "step_2": 1
                },
                "FUN_08005704": {
                    "call_initialization_functions": 1,
                    "execute_initialization": 2,
                    "execute_initialization_routine": 1,
                    "initialize": 2,
                    "initialize_and_execute": 2,
                    "initialize_and_run": 1,
                    "initialize_app": 1,
                    "initialize_application": 3,
                    "initialize_binary": 1,
                    "initialize_components": 1,
                    "initialize_program": 5,
                    "initialize_system": 10,
                    "initiate_program": 1
                }
            },
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "calling": [],
            "code": "\nvoid initialize_system_08005704(void)\n\n{\n  FUN_0800157c();\n  FUN_080017b4();\n  return;\n}\n\n",
            "current_name": "initialize_system_08005704",
            "entrypoint": "0x08005704",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005704": "initialize_system_08005704"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "FUN_080036f8": {
                    "initialize_array": 1,
                    "initialize_param": 1,
                    "initialize_parameter": 3,
                    "initialize_pointer": 2,
                    "initialize_ptr_data": 1,
                    "load_data": 1,
                    "populate_data": 2,
                    "process_data": 4,
                    "read_data": 1,
                    "set_param": 1,
                    "update_data": 3
                },
                "FUN_08005714": {
                    "initialize_data": 25,
                    "initialize_data_structure": 4,
                    "initialize_data_structures": 1,
                    "initiate_data_processing": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 1,
                    "data_array": 2,
                    "data_pointer": 3,
                    "data_ptr": 6,
                    "data_structure": 1
                }
            },
            "called": [
                "FUN_080036f8"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_structure_08005714(void)\n\n{\n  FUN_080036f8(&DAT_20000b60);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "initialize_data_structure_08005714"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005728": {
            "additional_data": {
                "DAT_20000a10": {
                    "current_memory": 2
                },
                "DAT_20000c18": {
                    "default_memory": 1
                },
                "FUN_08005728": {
                    "allocate_memory": 27,
                    "allocate_memory_block": 2,
                    "extract_data": 1,
                    "update_data_pointer": 1
                },
                "FUN_08005d14": {
                    "allocate_memory": 1,
                    "get_memory_block": 1
                },
                "auStack_18": {
                    "buffer": 4,
                    "limit": 2,
                    "local_buffer": 1,
                    "stack_array": 1,
                    "stack_buffer": 10,
                    "stack_memory": 3,
                    "temp": 1,
                    "temp_buffer": 3,
                    "temp_stack": 1,
                    "temporary": 1,
                    "temporary_buffer": 2
                },
                "local_14": {
                    "buffer_size": 1,
                    "local_size": 2,
                    "new_size": 1,
                    "remaining": 2,
                    "remaining_size": 23,
                    "remaining_space": 1,
                    "temp_size": 1
                },
                "local_c": {
                    "current": 2,
                    "current_block": 2,
                    "current_block_size": 1,
                    "current_buffer": 2,
                    "current_chunk": 1,
                    "current_data_pointer": 1,
                    "current_location": 2,
                    "current_memory": 9,
                    "current_pointer": 2,
                    "current_position": 2,
                    "current_ptr": 2,
                    "initial_memory": 1,
                    "memory_block": 1,
                    "memory_start": 3
                },
                "param_1": {
                    "block_size": 1,
                    "data_size": 1,
                    "size": 27,
                    "size_in_bytes": 2
                },
                "puVar1": {
                    "allocated_memory": 1,
                    "buffer": 1,
                    "mem_ptr": 1,
                    "memory_location": 1,
                    "new_block": 4,
                    "new_buffer": 1,
                    "new_chunk": 1,
                    "new_memory": 6,
                    "new_memory_block": 2,
                    "new_value_ptr": 1,
                    "ptr": 9,
                    "result": 2,
                    "result_ptr": 1
                },
                "puVar2": {
                    "allocated_block": 1,
                    "allocated_memory": 1,
                    "allocation": 1,
                    "pointer": 2,
                    "result": 22,
                    "result_ptr": 1,
                    "return_value": 3
                }
            },
            "called": [
                "FUN_08005d14"
            ],
            "calling": [
                "FUN_08009744"
            ],
            "code": "\nundefined * allocate_memory_block_08005728(int size)\n\n{\n  undefined4 *ptr;\n  undefined *result;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *current_memory;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_memory = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    ptr = (undefined4 *)FUN_08005d14();\n    *ptr = 0xc;\n    result = (undefined *)0xffffffff;\n  }\n  else {\n    result = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return result;\n}\n\n",
            "current_name": "allocate_memory_block_08005728",
            "entrypoint": "0x08005728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005728": "allocate_memory_block_08005728",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "current_memory",
                "param_1": "size",
                "puVar1": "ptr",
                "puVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005780": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_08005780": {
                    "configure_hardware": 1,
                    "configure_peripheral": 1,
                    "initialize_hardware": 6,
                    "initialize_memory": 8,
                    "initialize_memory_layout": 1,
                    "initialize_peripheral": 1,
                    "initialize_peripheral_devices": 1,
                    "initialize_peripherals": 1,
                    "initialize_registers": 6,
                    "initialize_system": 4,
                    "set_memory_configuration": 1
                },
                "_DAT_40021000": {
                    "config_reg1": 1,
                    "config_register": 1,
                    "control_register": 6,
                    "control_register1": 3,
                    "flags_register": 1,
                    "hardware_config1": 1,
                    "memory_config_1": 1,
                    "memory_config_register": 1,
                    "memory_flags": 1,
                    "memory_layout_register1": 1,
                    "memory_register1": 1,
                    "peripheral_config1": 1,
                    "peripheral_control_register": 1,
                    "peripheral_control_register1": 2,
                    "port_control_register": 1,
                    "register_1": 2,
                    "register_a": 1,
                    "system_config_register": 1,
                    "system_control_register": 1,
                    "system_flags": 1
                },
                "_DAT_40021004": {
                    "bitmap": 1,
                    "config_reg2": 1,
                    "configuration_register": 3,
                    "control_register2": 3,
                    "data_direction_register": 1,
                    "data_register": 2,
                    "hardware_config2": 1,
                    "mask_register": 2,
                    "mask_value": 1,
                    "memory_config_2": 1,
                    "memory_control_register": 1,
                    "memory_layout_register2": 1,
                    "memory_register2": 1,
                    "peripheral_config2": 1,
                    "peripheral_control_register2": 2,
                    "peripheral_trigger_register": 1,
                    "register_2": 2,
                    "register_b": 1,
                    "status_register": 1,
                    "system_config": 1,
                    "system_memory_config": 1
                },
                "_DAT_40021008": {
                    "base_address": 1,
                    "buf_size_register": 1,
                    "buffer_size": 1,
                    "data_register": 4,
                    "data_transfer_register": 1,
                    "hardware_config3": 1,
                    "interrupt_config": 1,
                    "interrupt_enable_register": 1,
                    "interrupt_mask": 1,
                    "interrupt_register": 1,
                    "memory_address": 1,
                    "memory_config_3": 1,
                    "memory_layout_register3": 1,
                    "memory_load_address": 1,
                    "memory_register3": 1,
                    "memory_size": 2,
                    "peripheral_configuration_register": 1,
                    "peripheral_control_register3": 1,
                    "register_3": 2,
                    "register_c": 1,
                    "some_constant": 1,
                    "system_config": 1,
                    "system_settings": 1,
                    "timer_config": 1,
                    "timer_config_register": 1,
                    "timer_value": 1
                },
                "_DAT_e000ed08": {
                    "another_constant": 1,
                    "exception_config": 1,
                    "exception_flag_register": 1,
                    "interrupt_config": 4,
                    "interrupt_config_register": 1,
                    "interrupt_control_register": 3,
                    "interrupt_enable_reg": 1,
                    "interrupt_enable_register": 1,
                    "interrupt_flags": 1,
                    "interrupt_register": 6,
                    "interrupt_register1": 1,
                    "interruption_register": 1,
                    "memory_base": 1,
                    "memory_config_4": 1,
                    "memory_register4": 1,
                    "processor_interrupt_register": 1,
                    "register_4": 2,
                    "register_d": 1,
                    "system_control": 1,
                    "system_control_register": 1
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_memory_layout_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_layout_08005780",
            "entrypoint": "0x08005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005780": "initialize_memory_layout_08005780"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005838": {
            "additional_data": {
                "FNU_0800015c": {
                    "calculate_modified_result": 1
                },
                "FUNC_08005d0c": {
                    "additional_function": 2,
                    "additional_operation": 2,
                    "additional_process": 1,
                    "additional_processing": 1,
                    "do_something": 2,
                    "function_e": 1,
                    "helper": 1,
                    "perform_action": 1,
                    "perform_additional_operations": 1,
                    "perform_another_operation": 1,
                    "reset_variables": 1
                },
                "FUN_08000158": {
                    "apply_operations": 1,
                    "calculate_4": 1,
                    "calculate_hash": 1,
                    "calculate_result3": 1,
                    "calculate_result4": 1,
                    "calculate_value3": 1,
                    "calculate_value_c": 1,
                    "compute_final_result": 1,
                    "function_d": 1,
                    "perform_another_operation": 1,
                    "perform_calculation3": 1,
                    "perform_operations": 1,
                    "perform_transformation": 1
                },
                "FUN_0800015c": {
                    "calculate_1": 1,
                    "calculate_result1": 2,
                    "calculate_value": 1,
                    "calculate_value1": 1,
                    "calculate_value_a": 1,
                    "compute_intermediate_result": 1,
                    "function_a": 1,
                    "multiply_inputs": 1,
                    "perform_calculation1": 1,
                    "reverse_bytes": 1,
                    "reverse_something": 1
                },
                "FUN_0800071c": {
                    "calculate_3": 1,
                    "calculate_result2": 1,
                    "calculate_result3": 1,
                    "calculate_sum": 2,
                    "calculate_value2": 1,
                    "calculate_value_b": 1,
                    "compute_checksum": 1,
                    "function_c": 1,
                    "perform_calculation": 1,
                    "perform_calculation4": 1,
                    "perform_computation": 1,
                    "reverse_something_else": 1
                },
                "FUN_08005838": {
                    "calculate_float_value": 1,
                    "calculate_result": 7,
                    "calculate_return_value": 2,
                    "calculate_value": 1,
                    "compute_result": 2,
                    "math_operation": 1,
                    "process_data": 1,
                    "process_input": 1
                },
                "FUN_080059f0": {
                    "calculate_2": 1,
                    "calculate_result2": 1,
                    "function_b": 1,
                    "get_final_value": 1,
                    "get_special_value": 1,
                    "handle_special_case": 1,
                    "handle_special_cases": 1,
                    "handle_special_conditions": 1,
                    "handle_zero_inputs": 1,
                    "handle_zero_params": 1,
                    "perform_calculation2": 1,
                    "perform_operation": 2
                },
                "F_08000158": {
                    "reverse_operation3": 1
                },
                "F_0800015c": {
                    "reverse_operation1": 1
                },
                "F_0800071c": {
                    "reverse_operation2": 1
                },
                "F_080059f0": {
                    "special_case_operation": 1
                },
                "SCARRY4": {
                    "signed_carry_addition": 1
                },
                "iVar1": {
                    "condition": 1,
                    "difference": 19,
                    "param_diff": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_var": 1,
                    "temp_var1": 5
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 25,
                    "input_1": 1,
                    "input_param1": 1,
                    "num1": 2,
                    "value1": 1
                },
                "param_2": {
                    "input2": 25,
                    "input_2": 1,
                    "input_param2": 1,
                    "num2": 2,
                    "second_param": 1,
                    "value2": 1
                },
                "param_3": {
                    "input3": 25,
                    "input_3": 1,
                    "input_param3": 1,
                    "num3": 2,
                    "third_param": 1,
                    "value3": 1
                },
                "param_4": {
                    "fourth_param": 1,
                    "input4": 25,
                    "input_4": 1,
                    "input_param4": 1,
                    "num4": 2,
                    "value4": 1
                },
                "uVar2": {
                    "high_result": 1,
                    "result": 1,
                    "result1": 3,
                    "result2": 1,
                    "result_high": 4,
                    "result_high_bits": 1,
                    "result_lower": 1,
                    "result_msb": 1,
                    "result_upper": 4,
                    "result_upper32": 1,
                    "result_upper_bits": 1,
                    "result_var1": 2,
                    "temp_result1": 1,
                    "temp_var2": 2,
                    "u_var2": 1,
                    "upper_bits": 2,
                    "upper_result": 1
                },
                "uVar3": {
                    "bitwise_op": 1,
                    "combined_bit_shift": 1,
                    "combined_inputs": 1,
                    "comparison": 1,
                    "condition": 4,
                    "flag": 4,
                    "modified_variable1": 1,
                    "param3_bits": 1,
                    "result2": 2,
                    "result_var2": 2,
                    "shifted": 1,
                    "shifted_bits": 2,
                    "shifted_params": 1,
                    "shifted_params_check": 1,
                    "shifted_value": 3,
                    "sign_flags": 1,
                    "temp_result2": 1,
                    "temp_var3": 2,
                    "var": 1
                },
                "uVar4": {
                    "clamped_input4": 1,
                    "filtered_input4": 1,
                    "lower_result": 1,
                    "masked_num4": 2,
                    "masked_param4": 1,
                    "masked_value": 1,
                    "modified_fourth_param": 1,
                    "modified_input1": 1,
                    "modified_input4": 2,
                    "modified_param4": 4,
                    "param4_masked": 4,
                    "param4_modified": 1,
                    "param4_positive": 1,
                    "positive_input4": 1,
                    "positive_param4": 1,
                    "result": 1,
                    "result3": 2,
                    "result_var3": 2,
                    "temp_result3": 1,
                    "temp_var4": 2
                },
                "uVar5": {
                    "clamped_input2": 1,
                    "filtered_input2": 1,
                    "masked_num2": 2,
                    "masked_param2": 1,
                    "masked_value2": 1,
                    "modified_input2": 4,
                    "modified_param2": 4,
                    "modified_second_param": 1,
                    "param2_masked": 4,
                    "param2_modified": 1,
                    "param2_positive": 1,
                    "positive_input2": 1,
                    "positive_input_2": 1,
                    "positive_param2": 1,
                    "result4": 2,
                    "result_var4": 2,
                    "temp_result4": 1,
                    "temp_var5": 2
                },
                "uVar6": {
                    "computed_result": 1,
                    "intermediate_result": 1,
                    "result": 20,
                    "result2": 1,
                    "result5": 1,
                    "result_var5": 2,
                    "temp2": 1,
                    "temp_result": 1,
                    "temp_result5": 1,
                    "temp_var6": 2
                }
            },
            "called": [
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_080059f0",
                "FUN_08000158",
                "FUN_08005d0c"
            ],
            "calling": [
                "thunk_FUN_08005838"
            ],
            "code": "\nuint calculate_result_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result_upper;\n  uint flag;\n  uint modified_param4;\n  uint param2_masked;\n  undefined8 result;\n  \n  modified_param4 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (modified_param4 | (-input3 | input3) >> 0x1f)) ||\n     (param2_masked = input2 & 0x7fffffff, 0x7ff00000 < (param2_masked | (-input1 | input1) >> 0x1f))) {\n    modified_param4 = FUN_0800015c(input3,input4,input1,input2);\n    return modified_param4;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    modified_param4 = FUN_080059f0();\n    return modified_param4;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((param2_masked | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((modified_param4 | input3) != 0) {\n    if (modified_param4 == 0x7ff00000) {\n      if (param2_masked == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (param2_masked != 0x7ff00000) {\n      difference = (int)(param2_masked - modified_param4) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != signed_carry_addition(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = FUN_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result_upper = (undefined4)((ulonglong)result >> 0x20);\n      modified_param4 = (uint)result;\n      if (flag == 1) {\n        return modified_param4;\n      }\n      if (flag == 2) {\n        result = FUN_08000158(modified_param4,result_upper,0x33145c07,0x3ca1a626);\n        modified_param4 = FUN_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return modified_param4;\n      }\n      if (flag != 0) {\n        result = FUN_08000158(modified_param4,result_upper,0x33145c07,0x3ca1a626);\n        modified_param4 = FUN_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return modified_param4;\n      }\n      return modified_param4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "calculate_result_08005838",
            "entrypoint": "0x08005838",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "SCARRY4": "signed_carry_addition",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result_upper",
                "uVar3": "flag",
                "uVar4": "modified_param4",
                "uVar5": "param2_masked",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f0": {
            "additional_data": {
                "FUNC_08005d0c": {
                    "get_value": 1,
                    "get_values": 2
                },
                "FUN_08000158": {
                    "calculate4": 1,
                    "calculate_result": 1,
                    "calculate_value3": 1
                },
                "FUN_0800015c": {
                    "calculate1": 1,
                    "calculate_value1": 1,
                    "calculate_weights": 1
                },
                "FUN_080004c8": {
                    "calculate2": 1,
                    "calculate_value": 1,
                    "calculate_value2": 1
                },
                "FUN_0800071c": {
                    "calculate3": 1,
                    "perform_operation": 1,
                    "sum_values": 1
                },
                "FUN_080009e8": {
                    "check_condition": 1,
                    "check_validity": 1,
                    "check_value": 1
                },
                "FUN_080059f0": {
                    "calculate_result": 17,
                    "calculate_value": 2,
                    "perform_calculation": 1,
                    "perform_calculations": 1,
                    "reengineer_function": 1
                },
                "iVar8": {
                    "condition": 1,
                    "condition_result": 1,
                    "flag": 1,
                    "index": 2,
                    "int_var": 1,
                    "loop_counter": 1,
                    "operation": 2,
                    "operation_type": 1,
                    "option": 1,
                    "result": 8,
                    "result_code": 1,
                    "result_index": 4,
                    "status": 1,
                    "switch_case": 2,
                    "temp2": 3,
                    "var8": 1
                },
                "param_1": {
                    "input1": 17,
                    "input_param": 2,
                    "input_param1": 3,
                    "input_value": 1,
                    "input_value1": 3,
                    "input_value_1": 1,
                    "number1": 1,
                    "value1": 3
                },
                "param_2": {
                    "flag": 2,
                    "flags": 1,
                    "input2": 17,
                    "input_param2": 3,
                    "input_value2": 3,
                    "input_value_2": 1,
                    "number2": 1,
                    "value2": 3
                },
                "param_3": {
                    "code1": 1,
                    "constant1": 8,
                    "constant_1": 2,
                    "input3": 8,
                    "input_param3": 2,
                    "input_value3": 1,
                    "param3": 4,
                    "param_3": 1,
                    "unused_param": 2,
                    "value3": 2
                },
                "param_4": {
                    "code2": 1,
                    "constant2": 8,
                    "constant_2": 2,
                    "input4": 8,
                    "input_param4": 2,
                    "input_value4": 1,
                    "param4": 4,
                    "param_4": 1,
                    "unused_param": 1,
                    "unused_param2": 1,
                    "value4": 2
                },
                "uVar1": {
                    "result1": 14,
                    "temp1": 11,
                    "temp_1": 1,
                    "temp_value_1": 1,
                    "temp_var1": 1,
                    "var1": 3
                },
                "uVar10": {
                    "calculation_result": 1,
                    "combined": 1,
                    "combined_result": 1,
                    "final_result": 6,
                    "final_result2": 4,
                    "output": 1,
                    "result": 4,
                    "result10": 1,
                    "result2": 3,
                    "result8": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_result2": 2,
                    "temp_result_2": 1,
                    "temp_var2": 1,
                    "var10": 1
                },
                "uVar2": {
                    "result2": 14,
                    "temp2": 11,
                    "temp_2": 1,
                    "temp_value_2": 1,
                    "temp_var2": 1,
                    "var2": 3
                },
                "uVar3": {
                    "result3": 14,
                    "temp3": 11,
                    "temp_3": 1,
                    "temp_value_3": 1,
                    "temp_var3": 1,
                    "var3": 3
                },
                "uVar4": {
                    "result4": 14,
                    "temp4": 11,
                    "temp_4": 1,
                    "temp_value_4": 1,
                    "temp_var4": 1,
                    "var4": 3
                },
                "uVar5": {
                    "result5": 14,
                    "temp5": 11,
                    "temp_5": 1,
                    "temp_value_5": 1,
                    "temp_var5": 1,
                    "var5": 3
                },
                "uVar6": {
                    "result6": 14,
                    "temp6": 11,
                    "temp_6": 1,
                    "temp_value_6": 1,
                    "temp_var6": 1,
                    "var6": 3
                },
                "uVar7": {
                    "abs_input2": 3,
                    "abs_input_value2": 1,
                    "abs_input_value_2": 1,
                    "abs_value": 1,
                    "abs_value2": 2,
                    "absolute_value": 1,
                    "absolute_value_param2": 1,
                    "flag_normalized": 1,
                    "input2_modified": 1,
                    "length": 1,
                    "mask": 1,
                    "param2_modified": 1,
                    "positive_input2": 2,
                    "positive_number": 1,
                    "positive_value": 1,
                    "temp1": 4,
                    "temp7": 2,
                    "temp_var": 1,
                    "unsigned_input2": 2,
                    "unsigned_var": 1,
                    "var7": 2
                },
                "uVar9": {
                    "calculation_result": 1,
                    "final_result": 1,
                    "final_result1": 4,
                    "result1": 3,
                    "result7": 1,
                    "result9": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp7": 1,
                    "temp_result": 9,
                    "temp_result1": 2,
                    "temp_result_1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "var9": 1
                }
            },
            "called": [
                "FUN_0800015c",
                "FUN_080004c8",
                "FUN_080009e8",
                "FUN_0800071c",
                "FUN_08000158",
                "FUN_08005d0c"
            ],
            "calling": [
                "FUN_08005838"
            ],
            "code": "\nundefined8 calculate_result_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint temp1;\n  int result;\n  undefined8 temp_result;\n  undefined8 final_result;\n  \n  final_result = CONCAT44(input2,input1);\n  temp1 = input2 & 0x7fffffff;\n  if (temp1 < 0x44100000) {\n    if (temp1 < 0x3fdc0000) {\n      if (temp1 < 0x3e200000) {\n        temp_result = FUN_0800015c(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = FUN_080009e8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      result = -1;\n    }\n    else {\n      final_result = FUNC_08005d0c();\n      result4 = (undefined4)((ulonglong)final_result >> 0x20);\n      result1 = (undefined4)final_result;\n      if (temp1 < 0x3ff30000) {\n        if (temp1 < 0x3fe60000) {\n          final_result = FUN_0800015c(result1,result4,result1,result4);\n          final_result = FUN_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          temp_result = FUN_0800015c(result1,result4,0,0x40000000);\n          final_result = FUN_0800071c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                                (int)((ulonglong)temp_result >> 0x20));\n          result = 0;\n        }\n        else {\n          final_result = FUN_08000158(result1,result4,0,0x3ff00000);\n          temp_result = FUN_0800015c(result1,result4,0,0x3ff00000);\n          final_result = FUN_0800071c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                                (int)((ulonglong)temp_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp1 < 0x40038000) {\n        final_result = FUN_08000158(result1,result4,0,0x3ff80000);\n        temp_result = FUN_080004c8(result1,result4,0,0x3ff80000);\n        temp_result = FUN_0800015c((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        final_result = FUN_0800071c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                              (int)((ulonglong)temp_result >> 0x20));\n        result = 2;\n      }\n      else {\n        final_result = FUN_0800071c(0,0xbff00000,result1,result4);\n        result = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)final_result >> 0x20);\n    result5 = (undefined4)final_result;\n    final_result = FUN_080004c8(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)final_result >> 0x20);\n    result1 = (undefined4)final_result;\n    final_result = FUN_080004c8(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)final_result >> 0x20);\n    result4 = (undefined4)final_result;\n    final_result = FUN_080004c8(result4,result3,0xe322da11,0x3f90ad3a);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result1,result2);\n    temp_result = FUN_080004c8(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = FUN_08000158((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = FUN_080004c8((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    final_result = FUN_0800015c((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n    final_result = FUN_080004c8((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)final_result >> 0x20);\n    if (result == -1) {\n      final_result = FUN_08000158(result5,result6,(int)final_result,result1);\n      return final_result;\n    }\n    result = result * 8;\n    final_result = FUN_08000158((int)final_result,result1,*(undefined4 *)(&UNK_08009ee8 + result),\n                          *(undefined4 *)(&UNK_08009eec + result));\n    final_result = FUN_08000158((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    final_result = FUN_08000158(*(undefined4 *)(&UNK_08009ec8 + result),\n                          *(undefined4 *)(&UNK_08009ecc + result),(int)final_result,\n                          (int)((ulonglong)final_result >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n    }\n  }\n  else {\n    if ((temp1 < 0x7ff00001) && ((temp1 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    final_result = FUN_0800015c(input1,input2,input1,input2,input4);\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_result_080059f0",
            "entrypoint": "0x080059f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "iVar8": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar10": "final_result",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "temp1",
                "uVar9": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005d0c",
            "entrypoint": "0x08005d0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005d14": {
            "additional_data": {
                "DAT_2000001c": {
                    "dat_value": 1,
                    "data": 11,
                    "data_address": 1,
                    "data_offset": 1,
                    "data_value": 2,
                    "global_data": 2,
                    "global_variable": 2
                },
                "FUN_08005d14": {
                    "get_dat_value": 1,
                    "get_data": 13,
                    "get_data_address": 1,
                    "get_data_offset": 1,
                    "get_data_value": 7,
                    "get_global_data": 1,
                    "get_global_variable": 5,
                    "get_global_variable_value": 1,
                    "get_value_from_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005728"
            ],
            "code": "\nundefined4 get_value_from_data_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "current_name": "get_value_from_data_08005d14",
            "entrypoint": "0x08005d14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d14": "get_value_from_data_08005d14"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d20": {
            "additional_data": {
                "FUC_08009e68": {
                    "initialize": 1
                },
                "FUNC_080078a0": {
                    "perform_task": 1,
                    "sub_function1": 3,
                    "sub_function_one": 1
                },
                "FUNC_08009e68": {
                    "initialize": 10,
                    "initialize_resources": 1
                },
                "FUN_08000134": {
                    "execute_operation": 1,
                    "perform_operation": 1,
                    "sub_function2": 3,
                    "sub_function_two": 1
                },
                "FUN_08005d20": {
                    "execute_function_set": 1,
                    "execute_function_set_twice": 1,
                    "execute_multiple_functions": 1,
                    "execute_sub_functions": 21,
                    "execute_subfunctions": 5,
                    "execute_two_sub_functions": 1
                },
                "FUN_080078a0": {
                    "execute_function_a": 1
                },
                "FUN_08009e68": {
                    "initialize": 1
                },
                "iVar1": {
                    "counter": 14,
                    "iteration": 1,
                    "iteration_count": 12,
                    "iteration_counter": 1,
                    "sub_function_counter": 1
                },
                "ppcVar2": {
                    "function_array": 2,
                    "function_list": 2,
                    "function_pointer": 9,
                    "function_pointer_array": 4,
                    "function_pointer_list": 1,
                    "function_pointers": 8,
                    "function_ptr_array": 1,
                    "function_ptrs": 1
                },
                "ppcpVar2": {
                    "function_pointer": 1
                }
            },
            "called": [
                "FUN_08009e68",
                "FUN_080078a0",
                "FUN_08000134"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid execute_two_sub_functions_08005d20(void)\n\n{\n  int counter;\n  code **function_pointer;\n  \n  FUNC_08009e68();\n  counter = 0;\n  function_pointer = (code **)&DAT_0800a198;\n  do {\n    counter = counter + 1;\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  } while (counter != 2);\n  return;\n}\n\n",
            "current_name": "execute_two_sub_functions_08005d20",
            "entrypoint": "0x08005d20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d20": "execute_two_sub_functions_08005d20",
                "iVar1": "counter",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d68": {
            "additional_data": {
                "FUN_08005d68": {
                    "fill_buffer_with_byte": 1,
                    "fill_memory": 11,
                    "fill_memory_block": 1,
                    "fill_memory_with_byte": 2,
                    "fill_with_byte": 1,
                    "initialize_memory": 5,
                    "memset": 5,
                    "memset_with_pattern": 2,
                    "memset_with_value": 3
                },
                "LAB_08005de4": {
                    "end": 1,
                    "end_label": 1,
                    "end_of_loop": 1
                },
                "bVar5": {
                    "is_count_zero": 2,
                    "is_empty": 1,
                    "is_end": 3,
                    "is_end_of_dest_addr": 1,
                    "is_finished": 2,
                    "is_length_zero": 1,
                    "is_remaining_zero": 1,
                    "is_size_zero": 7,
                    "is_small": 1,
                    "is_zero": 4,
                    "is_zero_count": 1,
                    "is_zero_remaining_size": 1,
                    "is_zero_size": 4,
                    "size_greater_than_three": 1
                },
                "param_1": {
                    "array": 1,
                    "buffer": 3,
                    "dest": 14,
                    "destination": 10,
                    "dst": 1,
                    "ptr": 2
                },
                "param_2": {
                    "byte": 2,
                    "byte_to_fill": 1,
                    "pattern": 2,
                    "value": 26
                },
                "param_3": {
                    "count": 6,
                    "length": 2,
                    "num_bytes": 1,
                    "size": 22
                },
                "puVar1": {
                    "buffer_ptr": 1,
                    "current": 3,
                    "current_ptr": 3,
                    "dest_head": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 16,
                    "dst": 1,
                    "dst_ptr": 2,
                    "src": 1,
                    "temp_ptr": 1
                },
                "puVar2": {
                    "current_dest": 1,
                    "dest_ptr_update": 1,
                    "dst": 1,
                    "next": 3,
                    "next_dest": 1,
                    "next_dest_ptr": 12,
                    "next_dst": 1,
                    "next_dst_ptr": 1,
                    "next_ptr": 6,
                    "ptr": 1,
                    "temp_ptr": 2
                },
                "uVar3": {
                    "count_update": 1,
                    "remaining": 4,
                    "remaining_bytes": 1,
                    "remaining_count": 4,
                    "remaining_length": 2,
                    "remaining_size": 18
                },
                "uVar4": {
                    "byte_pattern": 2,
                    "concatenated_value": 1,
                    "fill_value": 5,
                    "four_byte_value": 1,
                    "four_times_value": 1,
                    "mem_value": 1,
                    "new_value": 1,
                    "pattern": 4,
                    "pattern32": 1,
                    "pattern_concatenated": 1,
                    "value32": 6,
                    "value_32bit": 1,
                    "value_32bits": 1,
                    "value_concat": 3,
                    "value_to_fill": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "code": "\nvoid fill_memory_with_byte_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  uint remaining_size;\n  undefined4 value32;\n  bool is_size_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_size_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value32;\n        dest_ptr[-3] = value32;\n        dest_ptr[-2] = value32;\n        dest_ptr[-1] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end;\n    }\n    do {\n      size = size - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while ((undefined4 *)(size + (int)dest) != next_dest_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_byte_08005d68",
            "entrypoint": "0x08005d68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d68": "fill_memory_with_byte_08005d68",
                "LAB_08005de4": "end",
                "bVar5": "is_size_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "remaining_size",
                "uVar4": "value32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "additional_data": {
                "DAT_2000001c": {
                    "constant": 1
                },
                "FUNC_08005e9c": {
                    "decode_data": 1,
                    "process_data": 5,
                    "reverse_bytes": 1
                },
                "FUN_08005dfc": {
                    "clear_and_initialize_buffer": 1,
                    "clear_buffer": 2,
                    "clear_data": 1,
                    "clear_local_memory": 2,
                    "clear_memory": 14,
                    "clear_string": 1,
                    "initialize_and_clear_memory": 2,
                    "initialize_and_reset": 1,
                    "initialize_buffer": 1,
                    "initialize_data": 1,
                    "initialize_memory": 1,
                    "initialize_parameters": 1,
                    "process_data": 1,
                    "reverse_and_clear_memory": 1,
                    "zero_out_pointer_and_return": 1
                },
                "local_6c": {
                    "constant1": 1,
                    "initial_size": 1,
                    "local_min": 1,
                    "local_size2": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "max_int": 1,
                    "max_limit": 1,
                    "max_size": 6,
                    "max_value": 3,
                    "max_value1": 1,
                    "max_value2": 3,
                    "min_length": 1,
                    "min_size": 1,
                    "min_value": 1,
                    "min_value1": 1,
                    "size_limit2": 1,
                    "var3": 3
                },
                "local_70": {
                    "buffer_pointer": 1,
                    "buffer_ptr2": 1,
                    "buffer_ptr_copy": 1,
                    "current_buffer": 3,
                    "current_buffer_ptr": 1,
                    "current_data": 2,
                    "current_pointer": 4,
                    "current_string": 1,
                    "data_ptr": 1,
                    "local_buffer": 1,
                    "local_data_ptr2": 1,
                    "local_pointer": 1,
                    "local_ptr": 1,
                    "local_var3": 1,
                    "memory_block_copy": 1,
                    "ptr_temp": 1,
                    "string_ptr2": 1,
                    "temp_buffer": 2,
                    "temp_buffer2": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 1
                },
                "local_78": {
                    "buffer_size": 1,
                    "default_value": 1,
                    "limit1": 1,
                    "local_78": 1,
                    "local_size": 1,
                    "local_size1": 3,
                    "local_var1": 3,
                    "local_variable1": 2,
                    "max_length1": 1,
                    "max_size": 2,
                    "max_size1": 1,
                    "max_value": 2,
                    "max_value1": 3,
                    "min_int": 1,
                    "size_limit1": 1,
                    "temp_variable1": 1,
                    "var1": 3,
                    "variable1": 1
                },
                "local_80": {
                    "buffer": 2,
                    "buffer_array": 1,
                    "buffer_ptr": 3,
                    "data_array": 1,
                    "local_array": 3,
                    "local_buffer": 4,
                    "local_buffers": 1,
                    "local_data_ptr": 1,
                    "local_memory": 1,
                    "local_pointers": 1,
                    "mem_ptr_array": 1,
                    "pointer_array": 1,
                    "pointers": 1,
                    "ptr_array": 1,
                    "string_array": 2,
                    "temp_array": 2,
                    "temp_buffer": 1,
                    "temporary_buffer": 1
                },
                "param_1": {
                    "buffer": 9,
                    "buffer_pointer": 1,
                    "data": 2,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "data_ptr": 2,
                    "input_array": 2,
                    "input_buffer": 2,
                    "input_data": 2,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "mem_ptr": 1,
                    "memory": 1,
                    "memory_block": 1,
                    "string_ptr": 1,
                    "target": 1
                },
                "param_2": {
                    "int_ptr": 1,
                    "length": 2,
                    "length1": 1,
                    "size": 22,
                    "size1": 1,
                    "value1": 4
                },
                "param_3": {
                    "constant1": 1,
                    "int_ptr": 1,
                    "length2": 1,
                    "param1": 1,
                    "param3": 8,
                    "param_3": 4,
                    "param_a": 2,
                    "parameter1": 1,
                    "size2": 1,
                    "stack_value1": 1,
                    "val1": 1,
                    "value1": 4,
                    "value2": 4,
                    "var1": 1
                },
                "param_4": {
                    "constant2": 1,
                    "param2": 1,
                    "param4": 8,
                    "param_4": 4,
                    "param_b": 2,
                    "parameter2": 1,
                    "parameters": 1,
                    "ptr_ptr": 1,
                    "size3": 1,
                    "stack_value2": 1,
                    "val2": 1,
                    "value2": 4,
                    "value3": 4,
                    "var2": 1
                },
                "uStack_4": {
                    "constant_value3": 1,
                    "local_var5": 1,
                    "local_var6": 1,
                    "param4_copy": 4,
                    "param4_modified": 1,
                    "param4_value": 1,
                    "param4copy": 1,
                    "param_4_copy": 3,
                    "param_b_value": 1,
                    "size3_copy": 1,
                    "stack_value4": 1,
                    "temp_variable4": 1,
                    "value3": 1,
                    "var4": 1,
                    "var5": 1,
                    "variable4": 1
                },
                "uStack_74": {
                    "constant": 2,
                    "constant_value": 1,
                    "limit2": 1,
                    "local_size2": 2,
                    "local_var2": 3,
                    "local_variable2": 2,
                    "magic_number": 2,
                    "max_size2": 1,
                    "max_value2": 1,
                    "stack_val": 1,
                    "temp_variable2": 1,
                    "u_stack_74": 1,
                    "u_stack_var": 1,
                    "value1": 1,
                    "var2": 3,
                    "variable2": 1
                },
                "uStack_8": {
                    "constant_value2": 1,
                    "local_var4": 1,
                    "local_var5": 1,
                    "max_value2": 1,
                    "param3_copy": 4,
                    "param3_modified": 1,
                    "param3_value": 1,
                    "param3copy": 1,
                    "param_3_copy": 3,
                    "param_a_value": 1,
                    "parameter3": 1,
                    "size2_copy": 1,
                    "stack_value3": 1,
                    "temp_variable3": 1,
                    "value2": 1,
                    "var3": 1,
                    "var4": 1,
                    "variable3": 1
                }
            },
            "called": [
                "FUN_08005e9c"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid clear_local_memory_08005dfc(undefined *buffer,undefined4 size,undefined4 param3,undefined4 param4)\n\n{\n  undefined *local_buffer [2];\n  undefined4 max_value1;\n  undefined4 local_var2;\n  undefined *current_pointer;\n  undefined4 max_size;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  max_size = 0x7fffffff;\n  max_value1 = 0x7fffffff;\n  local_var2 = 0xffff0208;\n  local_buffer[0] = buffer;\n  current_pointer = buffer;\n  param3_copy = param3;\n  param4_copy = param4;\n  FUNC_08005e9c(DAT_2000001c,local_buffer,size,&param3_copy);\n  *local_buffer[0] = 0;\n  return;\n}\n\n",
            "current_name": "clear_local_memory_08005dfc",
            "entrypoint": "0x08005dfc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005dfc": "clear_local_memory_08005dfc",
                "local_6c": "max_size",
                "local_70": "current_pointer",
                "local_78": "max_value1",
                "local_80": "local_buffer",
                "param_1": "buffer",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_4": "param4_copy",
                "uStack_74": "local_var2",
                "uStack_8": "param3_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e40": {
            "additional_data": {
                "FUN_08005e40": {
                    "calculate_leading_zeros": 1,
                    "calculate_lz_count": 3,
                    "calculate_lzcount": 4,
                    "calculate_offset": 2,
                    "calculate_reverse_bit_count": 1,
                    "calculate_shift_count": 1,
                    "calculate_shift_offset": 1,
                    "count_leading_zeros": 4,
                    "count_trailing_zeros": 1,
                    "detect_leading_zeros": 1,
                    "find_last_nonzero_byte_index": 1,
                    "find_last_set_bit": 2,
                    "find_last_zero_byte_index": 1,
                    "find_lz_count": 1,
                    "find_padding_size": 1,
                    "get_last_set_bit_index": 1,
                    "reverse_and_count_leading_zeros": 1,
                    "reverse_bits_count": 1,
                    "reverse_count_leading_zeroes": 1,
                    "reverse_count_leading_zeros": 2
                },
                "LZCOUNT": {
                    "leading_zero_count": 5,
                    "leading_zeros_count": 1
                },
                "iVar1": {
                    "alignment_offset": 1,
                    "bit_count": 2,
                    "bit_offset": 1,
                    "bit_shift": 1,
                    "byte_offset": 1,
                    "count": 1,
                    "index": 2,
                    "leading_zeros": 8,
                    "offset": 4,
                    "padding": 2,
                    "remain_bytes": 1,
                    "remainder": 2,
                    "shift": 1,
                    "shift_count": 1,
                    "shift_offset": 1,
                    "trailing_zeros": 1
                },
                "param_1": {
                    "input": 16,
                    "input_num": 1,
                    "input_number": 3,
                    "input_size": 1,
                    "input_value": 7,
                    "num": 1,
                    "offset": 1,
                    "value": 1
                },
                "puVar2": {
                    "aligned_pointer": 1,
                    "buffer": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 4,
                    "p": 1,
                    "p_number": 1,
                    "pointer": 2,
                    "ptr": 16,
                    "ptr_uint": 1
                },
                "uVar3": {
                    "bitmask": 1,
                    "bitwise_result": 1,
                    "byte_value": 1,
                    "current_data": 4,
                    "current_value": 2,
                    "data": 2,
                    "mask": 3,
                    "temp_value": 1,
                    "value": 15
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "code": "\nint reverse_and_count_leading_zeros_08005e40(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    leading_zeros = leading_zeros + 4;\n  }\n  return leading_zeros + (0x1fU - leading_zero_count(value & -value) >> 3);\n}\n\n",
            "current_name": "reverse_and_count_leading_zeros_08005e40",
            "entrypoint": "0x08005e40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005e40": "reverse_and_count_leading_zeros_08005e40",
                "LZCOUNT": "leading_zero_count",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "called": [
                "FUN_080088ec",
                "FUN_080003f4",
                "FUN_080009c0",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_0800119c",
                "FUN_08001170",
                "FUN_080004c8",
                "FUN_080009e8",
                "FUN_080096e0",
                "FUN_080011ec",
                "FUN_080079e8",
                "FUN_080097cc",
                "FUN_08008ad4",
                "FUN_08005e40",
                "FUN_0800901c",
                "FUN_08008af8",
                "FUN_08000998",
                "FUN_080009ac"
            ],
            "calling": [
                "FUN_08005dfc"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)FUN_08008ad4();\n  local_114 = *ppiVar2;\n  local_118 = (int *)FUN_08005e40(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = FUN_08008af8(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = FUN_08008ad4(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)FUN_08005e40(local_110);\n      local_104 = piVar24;\n      iVar3 = FUN_08008ad4(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = FUN_08001170(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) && (iVar3 = FUN_080009c0(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)\n         ) {\n        iVar3 = FUN_080009ac(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = FUN_08001170(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)FUN_08008af8(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = FUN_080096e0(local_128,uVar19,&local_f0);\n          local_150 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = FUN_08000998((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                               local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)FUN_080079e8(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = FUN_08000998(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)FUN_08005e40(piVar23);\n        }\n        else {\n          iVar3 = FUN_0800901c(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        FUN_080011ec(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          FUN_08009768(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = FUN_080011ec(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    FUN_080097cc(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = FUN_08000998((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = FUN_080004c8((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = FUN_0800119c();\n    uVar34 = FUN_080003f4();\n    uVar33 = FUN_08000158((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                          (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = FUN_080009e8((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = FUN_08000998((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = FUN_080097cc(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = FUN_08000998(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = FUN_080097cc(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = FUN_080097cc(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = FUN_080097cc(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = FUN_080097cc(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = FUN_080097cc(local_16c,local_160,&local_d8), iVar3 == 0))\n  {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      FUN_080088ec(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    FUN_080088ec(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "current_name": "FUNC_08005e9c",
            "entrypoint": "0x08005e9c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078a0": {
            "called": [
                "FUN_080098c0"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080078a0",
            "entrypoint": "0x080078a0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078c0": {
            "additional_data": {
                "FUN_080078c0": {
                    "calculate_divide": 1,
                    "calculate_division": 10,
                    "calculate_divisor": 2,
                    "calculate_quotient": 9,
                    "calculate_ratio": 1,
                    "find_divisor": 1,
                    "perform_calculation": 1,
                    "perform_division": 2
                },
                "FUN_080094f8": {
                    "get_length": 1
                },
                "iVar3": {
                    "carries": 1,
                    "carry": 24,
                    "quotient": 1,
                    "remainder": 1,
                    "temp2": 2,
                    "value": 1
                },
                "iVar4": {
                    "array1_length": 1,
                    "denominator_count": 1,
                    "denominator_length": 1,
                    "denominator_size": 1,
                    "dividend_size": 1,
                    "divisor_length": 6,
                    "divisor_size": 1,
                    "input_len": 1,
                    "len1": 1,
                    "length": 1,
                    "num_size": 1,
                    "numerator_len": 1,
                    "numerator_length": 6,
                    "numerator_size": 1,
                    "offset": 1,
                    "output_length": 1,
                    "param_array_size": 1,
                    "size": 1,
                    "target_size": 1,
                    "temp": 1
                },
                "iVar5": {
                    "current_index": 1,
                    "denominator_len": 1,
                    "denominator_length": 1,
                    "denominator_size": 1,
                    "dividend_length": 1,
                    "divisor_size": 1,
                    "index": 12,
                    "last_index": 5,
                    "last_non_zero_index": 1,
                    "len2": 1,
                    "new_divisor_length": 1,
                    "numerator_length": 1,
                    "process_index": 1,
                    "remainder_length": 1,
                    "updated_index": 1
                },
                "param_1": {
                    "array1": 1,
                    "dividend": 10,
                    "input_array": 3,
                    "input_array1": 2,
                    "input_param": 1,
                    "numerator": 13,
                    "numerator_array": 1
                },
                "param_2": {
                    "array2": 1,
                    "denominator": 13,
                    "denominator_array": 1,
                    "divisor": 10,
                    "input_array2": 2,
                    "output_array": 1,
                    "output_param": 1,
                    "param_array": 1,
                    "target_array": 1
                },
                "puRax2": {
                    "quotient_ptr": 1
                },
                "puRbx11": {
                    "temp_ptr": 1
                },
                "puRbx12": {
                    "temp_ptr2": 1
                },
                "puRdi9": {
                    "new_divisor_ptr": 1
                },
                "puRdx8": {
                    "dividend_ptr": 1
                },
                "puRsi7": {
                    "divisor_ptr": 1
                },
                "puVar11": {
                    "carry_ptr_next": 1,
                    "current_denominator": 1,
                    "current_denominator_ptr": 3,
                    "current_divisor": 1,
                    "current_divisor_ptr": 1,
                    "denom_val_ptr": 1,
                    "denominator_array_ptr": 1,
                    "denominator_ptr": 5,
                    "denominator_ptr_copy": 1,
                    "dividend_ptr": 1,
                    "divisor_next_ptr": 1,
                    "divisor_ptr_copy2": 1,
                    "divisor_ptr_temp": 2,
                    "next_param_array_ptr": 1,
                    "p_array2_copy": 1,
                    "ptr2": 1,
                    "ptr5": 1,
                    "ptr_current_element2": 1,
                    "remainder_ptr_temp": 1,
                    "target_buffer_ptr": 1,
                    "temp4": 1
                },
                "puVar12": {
                    "carry_ptr_current": 1,
                    "denominator_array_next_ptr": 1,
                    "denominator_ptr": 1,
                    "denominator_ptr_copy2": 1,
                    "divisor_current_ptr": 1,
                    "divisor_ptr_copy3": 1,
                    "divisor_ptr_temp": 1,
                    "divisor_ptr_temp2": 2,
                    "next_den_ptr": 1,
                    "next_denom_val_ptr": 1,
                    "next_denominator": 2,
                    "next_denominator_ptr": 4,
                    "next_divisor": 1,
                    "next_divisor_ptr": 2,
                    "next_element": 1,
                    "next_element_ptr": 1,
                    "next_input_array_ptr": 1,
                    "next_ptr": 1,
                    "next_target_buffer_ptr": 1,
                    "ptr6": 1,
                    "ptr_next_element2": 1,
                    "temp5": 1
                },
                "puVar2": {
                    "dividend_pointer": 1,
                    "dividend_ptr": 5,
                    "input_ptr": 2,
                    "num_ptr": 1,
                    "numerator_pointer": 1,
                    "numerator_ptr": 11,
                    "p_array1": 1,
                    "ptr1": 2,
                    "ptr_result1": 1,
                    "source_ptr": 1,
                    "temp3": 1
                },
                "puVar7": {
                    "carry_ptr": 1,
                    "den_ptr": 1,
                    "denom_ptr": 1,
                    "denominator_pointer": 1,
                    "denominator_ptr": 8,
                    "divisor_array": 1,
                    "divisor_pointer": 1,
                    "divisor_ptr": 7,
                    "output_array": 1,
                    "p_array2": 1,
                    "param_array_ptr": 1,
                    "ptr2": 1,
                    "ptr_array2": 1,
                    "remainder_ptr": 1,
                    "target_ptr": 1
                },
                "puVar8": {
                    "dividend_array": 2,
                    "dividend_ptr": 3,
                    "dividend_ptr_copy": 1,
                    "dividend_ptr_end": 1,
                    "dividend_remainder_ptr": 1,
                    "input_array": 1,
                    "input_array_ptr": 1,
                    "input_buffer": 1,
                    "num_ptr": 1,
                    "numerator": 1,
                    "numerator_array": 5,
                    "numerator_ptr": 5,
                    "output_ptr": 1,
                    "p_array1_copy": 1,
                    "ptr3": 1,
                    "ptr_array1": 1,
                    "remainder_ptr": 1
                },
                "puVar9": {
                    "carry_end_ptr": 1,
                    "denominator": 1,
                    "denominator_array": 5,
                    "denominator_end_ptr": 1,
                    "divisor_array": 1,
                    "divisor_end_ptr": 3,
                    "divisor_ptr_copy": 1,
                    "divisor_ptr_end": 2,
                    "last_denom_ptr": 1,
                    "last_denominator_ptr": 1,
                    "last_divisor": 1,
                    "last_divisor_ptr": 1,
                    "last_element_ptr": 1,
                    "last_index_ptr": 1,
                    "last_non_zero_ptr": 1,
                    "last_ptr": 1,
                    "p_array2_end": 1,
                    "param_end_ptr": 1,
                    "ptr4": 1,
                    "ptr_last_element": 1,
                    "target_buffer": 1
                },
                "uVar1": {
                    "carry": 1,
                    "quotient": 19,
                    "result": 4,
                    "sum": 1,
                    "temp": 3,
                    "temp1": 2
                },
                "uVar10": {
                    "carry": 1,
                    "carry2": 4,
                    "carry_high": 1,
                    "carry_temp": 1,
                    "denom_carry": 1,
                    "divisor_high": 1,
                    "partial_quotient": 1,
                    "quotient_carry": 1,
                    "quotient_high": 1,
                    "temp": 10,
                    "temp2": 1,
                    "term": 1,
                    "tmp_dividend": 1
                },
                "uVar6": {
                    "divisor": 6,
                    "divisor_factor": 1,
                    "quotient": 5,
                    "quotient_factor": 1,
                    "quotient_increment": 1,
                    "result": 16
                }
            },
            "called": [
                "FUN_080094f8"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nuint calculate_division_080078c0(int numerator,int denominator)\n\n{\n  uint quotient;\n  uint *numerator_ptr;\n  int carry;\n  int numerator_length;\n  int index;\n  uint result;\n  uint *denominator_ptr;\n  uint *numerator_array;\n  uint *denominator_array;\n  uint temp;\n  uint *denominator_ptr;\n  uint *next_denominator_ptr;\n  \n  numerator_length = *(int *)(denominator + 0x10);\n  if (*(int *)(numerator + 0x10) < numerator_length) {\n    return 0;\n  }\n  index = numerator_length + -1;\n  denominator_ptr = (uint *)(denominator + 0x14);\n  numerator_array = (uint *)(numerator + 0x14);\n  result = numerator_array[index] / (denominator_ptr[index] + 1);\n  denominator_array = denominator_ptr + index;\n  if (result != 0) {\n    quotient = 0;\n    carry = 0;\n    numerator_ptr = numerator_array;\n    denominator_ptr = denominator_ptr;\n    do {\n      next_denominator_ptr = denominator_ptr + 1;\n      quotient = result * (*denominator_ptr & 0xffff) + quotient;\n      temp = result * (*denominator_ptr >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*numerator_ptr & 0xffff);\n      carry = ((*numerator_ptr >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *numerator_ptr = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      numerator_ptr = numerator_ptr + 1;\n      denominator_ptr = next_denominator_ptr;\n    } while (next_denominator_ptr <= denominator_array);\n    if (numerator_array[index] == 0) {\n      if ((numerator_array < numerator_array + numerator_length + -2) && (numerator_array[numerator_length + -2] == 0)) {\n        numerator_ptr = numerator_array + numerator_length + -3;\n        do {\n          index = index + -1;\n          if (numerator_ptr <= numerator_array) break;\n          quotient = *numerator_ptr;\n          numerator_ptr = numerator_ptr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = index;\n    }\n  }\n  numerator_length = FUN_080094f8();\n  if (-1 < numerator_length) {\n    numerator_length = 0;\n    result = result + 1;\n    numerator_ptr = numerator_array;\n    do {\n      denominator_ptr = denominator_ptr + 1;\n      quotient = (numerator_length - (*denominator_ptr & 0xffff)) + (*numerator_ptr & 0xffff);\n      numerator_length = ((*numerator_ptr >> 0x10) - (*denominator_ptr >> 0x10)) + ((int)quotient >> 0x10);\n      *numerator_ptr = quotient & 0xffff | numerator_length * 0x10000;\n      numerator_length = numerator_length >> 0x10;\n      numerator_ptr = numerator_ptr + 1;\n      denominator_ptr = denominator_ptr;\n    } while (denominator_ptr <= denominator_array);\n    if (numerator_array[index] == 0) {\n      if ((numerator_array < numerator_array + index + -1) && (numerator_array[index + -1] == 0)) {\n        denominator_ptr = numerator_array + index + -2;\n        do {\n          index = index + -1;\n          if (denominator_ptr <= numerator_array) break;\n          quotient = *denominator_ptr;\n          denominator_ptr = denominator_ptr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(numerator + 0x10) = index;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_division_080078c0",
            "entrypoint": "0x080078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078c0": "calculate_division_080078c0",
                "iVar3": "carry",
                "iVar4": "numerator_length",
                "iVar5": "index",
                "param_1": "numerator",
                "param_2": "denominator",
                "puVar11": "denominator_ptr",
                "puVar12": "next_denominator_ptr",
                "puVar2": "numerator_ptr",
                "puVar7": "denominator_ptr",
                "puVar8": "numerator_array",
                "puVar9": "denominator_array",
                "uVar1": "quotient",
                "uVar10": "temp",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e8": {
            "additional_data": {
                "FUN_080079e8": {
                    "convert_float_to_char": 1,
                    "convert_float_to_decimal": 1,
                    "convert_float_to_decimal_string": 1,
                    "convert_float_to_scientific_notation": 1,
                    "convert_float_to_string": 8,
                    "convert_to_float_string": 1,
                    "display_floating_point_number": 1,
                    "float_to_string": 1,
                    "format_float": 4,
                    "format_float_to_string": 1,
                    "format_floating_point_number": 1,
                    "format_number": 2,
                    "formatted_number": 1,
                    "parse_float": 2,
                    "parse_floating_point": 1,
                    "parse_floating_point_number_to_string": 1
                },
                "IParam17": {
                    "lowest_loop_shift": 1
                },
                "bVar1": {
                    "bool1": 1,
                    "bool_1": 1,
                    "boolean_1": 1,
                    "has_decimal_point": 1,
                    "has_integer_part": 1,
                    "has_sign": 1,
                    "has_valid_integer_part": 1,
                    "is_decimal_format": 1,
                    "is_denormal": 1,
                    "is_infinity": 8,
                    "is_less_than6": 1,
                    "is_less_than_10": 1,
                    "is_less_than_6": 1,
                    "is_less_than_one": 1,
                    "is_less_than_six": 1,
                    "is_negative": 2,
                    "is_non_finite": 1,
                    "is_scientific": 1,
                    "is_small": 1,
                    "is_zero": 1,
                    "precision_less_than_6": 1,
                    "temp_bool2": 1
                },
                "bVar2": {
                    "bool2": 1,
                    "bool_2": 1,
                    "boolean_2": 1,
                    "decrement_exponent": 1,
                    "double_exponent32": 1,
                    "exact_precision_reached": 1,
                    "is_big": 1,
                    "is_exponent_negative": 1,
                    "is_exponent_zero": 1,
                    "is_exponential_format": 1,
                    "is_greater_than_9": 1,
                    "is_greater_than_or_equal_to24": 1,
                    "is_infinite": 1,
                    "is_infinity_or_na_n": 1,
                    "is_less_than_one": 1,
                    "is_nan": 1,
                    "is_negative": 2,
                    "is_zero": 6,
                    "less_than17": 1,
                    "lower_bound": 1,
                    "more_than_9_digits": 1,
                    "temp_bool3": 1,
                    "truncate_zeros": 1,
                    "use_exp_notation": 1
                },
                "bVar25": {
                    "bool4": 1,
                    "bool_var1": 1,
                    "boolean_5": 1,
                    "has_valid_digit": 1,
                    "is_less_than_zero": 1,
                    "is_negative": 1,
                    "is_negative_exponent": 2,
                    "is_negative_temp": 1,
                    "should_increase_digit": 1,
                    "temp3": 1,
                    "temp_bool": 1,
                    "temp_bool1": 1,
                    "var_5_a": 1
                },
                "bVar3": {
                    "add_decimal_point": 1,
                    "add_leading_zero": 1,
                    "add_plus_sign": 1,
                    "bool3": 1,
                    "bool_3": 1,
                    "boolean_3": 1,
                    "exponent_is_negative": 1,
                    "exponent_not_zero": 1,
                    "generate_decimal": 1,
                    "has_plus_sign": 1,
                    "in_subroutine": 1,
                    "is_double": 1,
                    "is_equal_2": 1,
                    "is_greater_than4": 1,
                    "is_greater_than_zero": 1,
                    "is_negative": 2,
                    "is_new_format": 1,
                    "is_positive": 2,
                    "is_rounding": 1,
                    "is_scientific_notation": 1,
                    "is_true": 1,
                    "is_zero": 1,
                    "round_result": 1,
                    "should_round_up": 1,
                    "temp_bool4": 1,
                    "upper_bound": 1,
                    "use_exponential_notation": 1,
                    "use_hex": 1
                },
                "bVar5": {
                    "boolean_4": 1,
                    "byte_1": 1,
                    "byte_tmp": 1,
                    "byte_value": 2,
                    "byte_var": 2,
                    "carry": 9,
                    "carry_flag": 1,
                    "convert_char": 1,
                    "decimal_digit": 1,
                    "digit": 1,
                    "is_digit": 1,
                    "is_negative": 1,
                    "is_odd": 1,
                    "normalization_flag": 1,
                    "overflow": 2,
                    "overflow_flag": 1,
                    "temp_bool": 1,
                    "temp_byte": 1,
                    "valid_integer": 1
                },
                "cVar4": {
                    "char_1": 1,
                    "char_tmp": 1,
                    "char_var": 3,
                    "character": 2,
                    "current_char": 1,
                    "digit": 15,
                    "digit_char": 3,
                    "digit_character": 1,
                    "remainder": 1,
                    "temp_char": 2
                },
                "exp_digits": {
                    "exponent_digits": 1
                },
                "exp_len": {
                    "exponent_length": 1
                },
                "exp_val": {
                    "exponent_value": 1
                },
                "i": {
                    "power": 1,
                    "temp6": 1
                },
                "iParam16": {
                    "temp": 1
                },
                "iVar100": {
                    "num_digits": 1
                },
                "iVar14": {
                    "buffer_len": 1,
                    "char_index": 1,
                    "current_position": 1,
                    "decimal_point_index": 1,
                    "digit_count": 1,
                    "exp_offset": 1,
                    "exponent": 1,
                    "exponent_diff": 1,
                    "exponent_value": 1,
                    "exponent_width": 1,
                    "factor": 1,
                    "index": 1,
                    "input_string_length": 1,
                    "int_val1": 1,
                    "int_var4": 1,
                    "integer_var4": 1,
                    "max_digits": 1,
                    "result": 2,
                    "significant_digits": 1,
                    "start_index": 1,
                    "temp1": 1,
                    "temp_value2": 1,
                    "temp_var10": 1,
                    "temp_var_1": 1,
                    "tmp": 1,
                    "tmp1": 1,
                    "var_2_c": 1,
                    "zero_pad_length": 1
                },
                "iVar15": {
                    "digit_index": 1,
                    "digit_offset": 1,
                    "effective_exp": 1,
                    "exp_shift": 1,
                    "formatted_length": 1,
                    "fractional_digits_needed": 1,
                    "i": 1,
                    "int_val2": 1,
                    "int_var5": 1,
                    "integer_digits": 1,
                    "integer_var5": 1,
                    "integral_part_length": 1,
                    "new_width": 1,
                    "num_digits_to_print": 1,
                    "number_of_digits": 1,
                    "shift_count": 1,
                    "significand_to_string_index": 1,
                    "significant_digits": 1,
                    "temp5": 1,
                    "temp_val5": 1,
                    "temp_value3": 1,
                    "temp_var9": 1,
                    "temp_var_2": 1,
                    "tmp2": 1,
                    "total_length": 1,
                    "total_width": 1,
                    "value": 1,
                    "var_28": 1,
                    "zero_padding": 1
                },
                "iVar19": {
                    "convert_count_tmp": 1,
                    "exp": 1,
                    "exponent": 1,
                    "exponent_bias": 1,
                    "exponent_diff": 2,
                    "exponent_divisor": 1,
                    "exponent_offset": 2,
                    "exponent_to_string_index": 1,
                    "int_part_size": 1,
                    "int_var6": 1,
                    "integer_var6": 1,
                    "num_digits": 1,
                    "num_exponent_digits_needed": 1,
                    "shift": 1,
                    "temp3": 1,
                    "temp_index": 1,
                    "temp_value4": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var8": 1,
                    "temp_var_3": 1,
                    "total_digits": 1,
                    "use_rounding": 1,
                    "var_20": 1
                },
                "iVar24": {
                    "carry_index": 1,
                    "ch": 1,
                    "ch_index": 1,
                    "char_offset": 1,
                    "digit": 2,
                    "digit_adjusted": 1,
                    "digit_char": 1,
                    "digit_count": 2,
                    "digit_value": 1,
                    "exponent_width_temp2": 1,
                    "extra_digit": 1,
                    "int_var7": 1,
                    "integer_var7": 1,
                    "last_digit": 1,
                    "mantissa_length": 1,
                    "new_digit": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_length": 1,
                    "temp_value5": 1,
                    "temp_var10": 1,
                    "temp_var11": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "temp_var_4": 1,
                    "tmp4": 1,
                    "var_5_b": 1
                },
                "iVar25": {
                    "is_exponent_negative": 1,
                    "shift": 1,
                    "shift_amount": 1
                },
                "iVar49": {
                    "shifted_significand": 1
                },
                "iVar7": {
                    "amount_copied": 1,
                    "carry_count": 1,
                    "count": 1,
                    "counter1": 1,
                    "decimal_index": 1,
                    "digit_index": 1,
                    "exponent_shift": 1,
                    "i": 7,
                    "int_var1": 1,
                    "integer_value": 1,
                    "integer_var1": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "new_var_1": 1,
                    "num": 1,
                    "num1_length": 1,
                    "num_digits": 2,
                    "num_trailing_digits": 1,
                    "number_of_digits": 1,
                    "temp_val6": 1,
                    "temp_var5": 1,
                    "tmp": 1
                },
                "iVar79": {
                    "buffer_size": 1
                },
                "iVar8": {
                    "accumulator": 1,
                    "carry_index": 1,
                    "counter2": 1,
                    "digit_count": 1,
                    "digit_index2": 1,
                    "i": 1,
                    "index": 1,
                    "inner_loop_index": 1,
                    "int_var2": 1,
                    "integer_var2": 1,
                    "j": 2,
                    "last_non_zero_index": 1,
                    "leading_zeros": 1,
                    "new_var_2": 1,
                    "normalized_size": 1,
                    "num2_length": 1,
                    "num_digits": 1,
                    "num_leading_digits": 1,
                    "overflow_index": 1,
                    "result": 1,
                    "result_length": 1,
                    "result_var": 1,
                    "return_value": 1,
                    "retval_1": 1,
                    "rounding_digit": 1,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "truncate": 1
                },
                "iVar9": {
                    "carry": 1,
                    "comparison_result": 1,
                    "convert_status": 1,
                    "counter3": 1,
                    "err": 1,
                    "error_message": 1,
                    "exp": 1,
                    "fractional_part_length": 1,
                    "i": 1,
                    "int_var3": 1,
                    "integer_part": 1,
                    "integer_var3": 1,
                    "k": 1,
                    "new_var_3": 1,
                    "normalized_exponent": 1,
                    "result": 1,
                    "retval_2": 1,
                    "status": 4,
                    "string_index": 1,
                    "temp_index": 1,
                    "temp_value": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "total_digits": 1,
                    "var_54": 1
                },
                "iVar99": {
                    "scratch_val": 1
                },
                "j": {
                    "exp_diff": 1
                },
                "k": {
                    "shift_count": 1
                },
                "local_2c": {
                    "exponent_array": 1,
                    "exponent_width_temp": 1,
                    "flag_array": 1,
                    "int_vars_array": 1,
                    "local_array": 1,
                    "local_array_var": 1,
                    "local_var_13": 1,
                    "local_var_array": 1,
                    "loop_values_array": 1,
                    "offsets": 1,
                    "power_width_unsigned": 1,
                    "round_power_div_10": 1,
                    "temp8": 1,
                    "temp_array": 4,
                    "temp_int_array": 1,
                    "temp_parameters": 1,
                    "temp_value_array2": 1,
                    "value_14": 1
                },
                "local_30": {
                    "adjusted_decimal_display": 1,
                    "digits_found": 1,
                    "exp_value4": 1,
                    "exponent_difference": 1,
                    "format_position": 1,
                    "local_var12": 2,
                    "local_var_12": 1,
                    "local_var_13": 1,
                    "num_exponent_digits_parsed": 1,
                    "num_literal_digits": 1,
                    "offset": 1,
                    "power_width": 1,
                    "preserve_status": 1,
                    "rounding_loop_count": 1,
                    "rounding_mode": 1,
                    "status": 1,
                    "temp7": 1,
                    "temp_int": 1,
                    "temp_value15": 1,
                    "temp_var16": 1,
                    "temp_variable11": 1,
                    "temporary_variable1": 1,
                    "value_13": 1
                },
                "local_34": {
                    "additional_decimals": 1,
                    "adjusted_decimal_length": 1,
                    "exp": 1,
                    "exp_value3": 1,
                    "exponent_bits": 1,
                    "extended_precision": 1,
                    "flags_temp": 1,
                    "fractional_part_length": 1,
                    "local_var11": 2,
                    "local_var_11": 1,
                    "local_var_12": 1,
                    "loop_count": 1,
                    "max_exponent": 1,
                    "num_digits": 1,
                    "num_of_decimal_places": 1,
                    "round_index": 1,
                    "speical_case": 1,
                    "temp_exponent": 1,
                    "temp_u_int6": 1,
                    "temp_variable10": 1,
                    "temporary_variable2": 1,
                    "truncate_digits": 1,
                    "value_12": 1
                },
                "local_38": {
                    "additional_decimals": 1,
                    "buffer_size_exp": 1,
                    "exp_padding": 1,
                    "exponent_divisor": 1,
                    "exponent_width": 2,
                    "leading_digits": 1,
                    "local_var10": 2,
                    "local_var_10": 1,
                    "local_var_11": 1,
                    "masks": 1,
                    "max_decimal_places": 1,
                    "max_digits": 1,
                    "min_exponent": 1,
                    "num_significand_digits": 1,
                    "padding_adjustment": 1,
                    "param3_size": 1,
                    "rounding_count": 1,
                    "target_exponent": 1,
                    "temp_int4": 1,
                    "temp_variable9": 1,
                    "temporary_variable3": 1,
                    "value_11": 1
                },
                "local_48": {
                    "ch_value": 1,
                    "decimal_precise": 1,
                    "digit_count": 1,
                    "exp_digits": 1,
                    "exp_width": 1,
                    "formatting_count": 1,
                    "i": 1,
                    "int_value": 1,
                    "local_var9": 2,
                    "local_var_9": 2,
                    "lower_bound_exponent": 1,
                    "num_digits_temp2": 1,
                    "parse_state": 1,
                    "round_mask": 1,
                    "rounding_type": 1,
                    "set_length": 1,
                    "shifted_significand": 1,
                    "temp_u_int4": 1,
                    "temp_value13": 1,
                    "temporary_variable4": 1,
                    "value_9": 1
                },
                "local_58": {
                    "digit_count": 1,
                    "exponent_digits_read": 1,
                    "format_width_temp": 1,
                    "integer_digits": 1,
                    "is_exponent_negative": 1,
                    "leading_zeros3": 1,
                    "leading_zeros_before_point": 1,
                    "leading_zeros_exponent_unsigned": 1,
                    "local_var8": 2,
                    "local_var_8": 2,
                    "min_digits": 1,
                    "num_leading_digits": 1,
                    "num_trailing_zeros": 1,
                    "pad_width": 1,
                    "rounding_digit": 1,
                    "scientific_notation_offset": 1,
                    "signif_width": 1,
                    "temp_value12": 1,
                    "temp_var15": 1,
                    "temp_variable8": 1,
                    "temporary_variable5": 1,
                    "trailing_zeroes": 1,
                    "upper_bound_digit": 1,
                    "value_8": 1
                },
                "local_5c": {
                    "decimal_offset_temp": 1,
                    "digit_count": 1,
                    "digit_offset": 1,
                    "expected_exponent": 1,
                    "exponent_length": 1,
                    "exponent_part": 1,
                    "exponent_width_exponent": 1,
                    "leading_zeros": 1,
                    "leading_zeros2": 1,
                    "leading_zeros_exponent": 1,
                    "local_var7": 2,
                    "local_var_7": 2,
                    "mantissa_index": 1,
                    "num_parsed_significand_digits": 1,
                    "num_trailing_digits": 1,
                    "number_of_leading_zeroes": 1,
                    "round_index_offset": 1,
                    "temp_value11": 1,
                    "temp_variable7": 1,
                    "temporary_variable6": 1,
                    "truncate_low_digits": 1,
                    "value_7": 1,
                    "whole_number_digits_value": 1,
                    "zero_offset_abs": 1
                },
                "local_60": {
                    "digit_index": 1,
                    "digit_position": 1,
                    "exp_value": 1,
                    "exponent_padding_count": 1,
                    "fraction_digits": 1,
                    "last_non_zero_digit_index": 1,
                    "leading_zeros": 2,
                    "local_var6": 2,
                    "local_var_6": 2,
                    "mantissa_exponent_diff": 1,
                    "max_length": 1,
                    "num_int_digits": 1,
                    "overflow_index_offset": 1,
                    "shift_amount": 1,
                    "static_rounder_idx": 1,
                    "temp_value10": 1,
                    "temp_var14": 1,
                    "temp_variable6": 1,
                    "temporary_variable7": 1,
                    "total_width_exponent": 1,
                    "value_6": 1,
                    "zero_offset": 1,
                    "zero_padding": 1
                },
                "local_68": {
                    "desired_precision": 1,
                    "digit_index_offset": 1,
                    "digit_num": 1,
                    "fraction_width": 1,
                    "int_precise": 1,
                    "leading_zeros_unsigned": 1,
                    "local_var5": 2,
                    "local_var_5": 2,
                    "max_digits_value": 1,
                    "min_int_part_size": 1,
                    "min_width": 1,
                    "num_digits": 1,
                    "num_digits_exp_notation": 1,
                    "num_digits_temp": 1,
                    "num_parsed_fractional_digits": 1,
                    "output_decimal_places": 1,
                    "precision_exponent": 1,
                    "significant_digits_count": 1,
                    "temp_index": 1,
                    "temp_variable5": 1,
                    "temporary_variable8": 1,
                    "value_5": 1,
                    "width": 1
                },
                "local_6c": {
                    "num_digits_padding": 1
                },
                "local_70": {
                    "adjusted_exponent": 1,
                    "carry_index": 1,
                    "digit_count": 1,
                    "digit_index_offset": 1,
                    "digit_offset": 1,
                    "digit_offset_temp": 1,
                    "exp_value2": 1,
                    "exponent": 1,
                    "exponent_offset": 1,
                    "fraction_high": 1,
                    "leading_zeroes": 1,
                    "leading_zeros": 1,
                    "local_var4": 2,
                    "local_var_4": 2,
                    "num_leading_zeros": 1,
                    "num_of_leading_zeros": 1,
                    "num_parsed_exponent_digits": 1,
                    "shifted_width": 1,
                    "temp_var13": 1,
                    "temp_variable4": 1,
                    "temporary_variable9": 1,
                    "value_4": 1,
                    "zero_padding_count": 1
                },
                "local_74": {
                    "error_code": 1,
                    "exponent": 1,
                    "exponent_err": 1,
                    "exponent_result": 1,
                    "format_buffer3": 1,
                    "formatted_digits": 1,
                    "formatted_length": 1,
                    "infinite_nan": 1,
                    "infinite_nan_sign": 1,
                    "is_infinity": 1,
                    "is_infinity_or_na_n": 1,
                    "local_var3": 2,
                    "local_var_3": 2,
                    "num_digits": 1,
                    "num_digits_value": 1,
                    "num_precision_digits": 1,
                    "num_trailing_zeros": 1,
                    "overflow_index": 1,
                    "short_str_size": 1,
                    "str_len": 1,
                    "temp_var5": 1,
                    "temp_variable3": 1,
                    "temporary_variable10": 1,
                    "value_3": 1
                },
                "local_7c": {
                    "abs_exponent": 1,
                    "exponent": 4,
                    "exponent_temp": 1,
                    "exponent_value": 2,
                    "format_buffer2": 1,
                    "fraction": 1,
                    "fraction_bitmask": 1,
                    "fraction_low": 1,
                    "local_var2": 2,
                    "local_var_2": 2,
                    "num_digits_tmp": 1,
                    "param3_copy": 1,
                    "raw_decimal_string": 1,
                    "result_width_unsigned": 1,
                    "temp_value9": 1,
                    "temp_var4": 1,
                    "temp_variable2": 1,
                    "temporary_variable11": 1,
                    "value_2": 1
                },
                "local_80": {
                    "converted_integer_part": 1,
                    "format_buffer1": 1,
                    "formatted_number2": 1,
                    "fraction_int": 1,
                    "fraction_shifted": 1,
                    "fractional_value_high": 1,
                    "int_part_str": 1,
                    "integer_part2": 1,
                    "local_decimal_string": 1,
                    "local_var1": 2,
                    "local_var_1": 2,
                    "lower_bound_digit": 1,
                    "normalized_int_part": 1,
                    "output_exponent": 1,
                    "param_6_temp": 1,
                    "result_width": 1,
                    "short_str": 1,
                    "sign_exp": 1,
                    "significand": 1,
                    "temp": 1,
                    "temp_fraction": 1,
                    "temp_variable1": 1,
                    "temporary_variable12": 1
                },
                "local_8c": {
                    "buffer_idx": 1
                },
                "num_digits": {
                    "digit_count": 1
                },
                "out_exp_len": {
                    "out_exponent_length": 1
                },
                "out_exp_val": {
                    "out_exponent_value": 1
                },
                "param_1": {
                    "data": 2,
                    "float": 1,
                    "float_value": 3,
                    "function_parameter1": 1,
                    "input": 8,
                    "input1": 1,
                    "input_float": 1,
                    "input_param": 1,
                    "input_string": 2,
                    "input_value": 1,
                    "num": 1,
                    "number": 3,
                    "precision": 1,
                    "value": 5
                },
                "param_2": {
                    "arg2": 1,
                    "decimal_places": 1,
                    "flags": 7,
                    "function_parameter2": 1,
                    "input2": 1,
                    "input_value_formatted": 1,
                    "int_part": 1,
                    "param": 1,
                    "param1": 2,
                    "param2": 2,
                    "param_2": 3,
                    "precision": 6,
                    "sign": 2,
                    "start_idx": 1,
                    "width": 1
                },
                "param_3": {
                    "exponent": 2,
                    "f_exp_bias": 1,
                    "function_parameter3": 1,
                    "input3": 1,
                    "input_value_sign_bit": 1,
                    "integer_part": 2,
                    "mantissa": 1,
                    "mantissa_high": 1,
                    "num_1": 1,
                    "param2": 2,
                    "param3": 1,
                    "param_3": 2,
                    "precision": 1,
                    "sign": 8,
                    "sign_bit": 2,
                    "sign_value": 1,
                    "significand": 2,
                    "significand_hi": 1
                },
                "param_4": {
                    "exponent": 12,
                    "exponent_bits": 1,
                    "exponent_marker": 1,
                    "flags": 1,
                    "fraction": 1,
                    "fractional_part": 2,
                    "function_parameter4": 1,
                    "input4": 1,
                    "input_value_exponent": 1,
                    "mantissa_low": 1,
                    "n_sign_mask": 1,
                    "num_2": 1,
                    "param3": 2,
                    "param4": 1,
                    "param_4": 2,
                    "significand": 1,
                    "significand_lo": 1
                },
                "param_5": {
                    "align": 1,
                    "cch_buf_length": 1,
                    "decimal_places": 1,
                    "digits_before_decimal": 1,
                    "exponent": 1,
                    "format_width": 1,
                    "fraction_bits": 1,
                    "fractional_part_width": 1,
                    "function_parameter5": 1,
                    "input5": 1,
                    "input_value_exponent_sign": 1,
                    "mantissa": 1,
                    "mantissa_precise": 1,
                    "min_int_digits": 1,
                    "min_significant_digits": 1,
                    "min_width": 5,
                    "num_3": 1,
                    "num_fractional_digits": 1,
                    "param4": 2,
                    "param5": 1,
                    "param_5": 2,
                    "precision": 2,
                    "total_width": 1,
                    "whole_number_digits": 1
                },
                "param_6": {
                    "c_exponent_length": 1,
                    "decimal_places": 1,
                    "digits_after_decimal": 1,
                    "exponent": 1,
                    "fill": 1,
                    "flags": 1,
                    "format_flags": 1,
                    "function_parameter6": 1,
                    "input6": 1,
                    "input_value_mantissa": 1,
                    "max_digits": 1,
                    "max_significant_digits": 1,
                    "max_width": 1,
                    "min_frac_digits": 1,
                    "min_width": 1,
                    "num_4": 1,
                    "num_exponent_digits": 1,
                    "pad_char": 1,
                    "param5": 2,
                    "param6": 1,
                    "param_6": 1,
                    "precision": 3,
                    "precision_width": 1,
                    "rounding_mode": 2,
                    "significant_digits": 1,
                    "total_width": 1
                },
                "param_7": {
                    "digits": 1,
                    "error": 1,
                    "error_code": 1,
                    "exponent_out": 1,
                    "function_parameter7": 1,
                    "integer_part_length": 1,
                    "length": 1,
                    "length_ptr": 1,
                    "num_chars": 1,
                    "num_digits": 2,
                    "num_parsed_digits": 1,
                    "out_string_length": 1,
                    "out_width": 1,
                    "output1": 1,
                    "output_error_code": 1,
                    "output_len": 1,
                    "output_length": 5,
                    "output_size": 3,
                    "pn_fields": 1,
                    "precision": 1,
                    "status": 2,
                    "string_length": 2
                },
                "param_8": {
                    "conversion_status": 1,
                    "function_parameter8": 1,
                    "has_sign": 1,
                    "is_negative": 15,
                    "negative_flag": 1,
                    "negative_ptr": 1,
                    "out_is_negative": 1,
                    "out_sign": 1,
                    "output2": 1,
                    "output_sign": 1,
                    "output_sign_bit": 1,
                    "overflow": 2,
                    "param8": 1,
                    "pul_exponent": 1,
                    "sign": 1,
                    "sign_out": 1
                },
                "param_9": {
                    "decimal_part": 1,
                    "decimal_string": 1,
                    "formatted_float": 1,
                    "formatted_number": 2,
                    "formatted_ptr": 1,
                    "formatted_result": 1,
                    "formatted_string": 1,
                    "formatted_value": 1,
                    "fraction_out": 1,
                    "function_parameter9": 1,
                    "out_string": 1,
                    "out_value": 1,
                    "output": 6,
                    "output3": 1,
                    "output_str": 1,
                    "output_string": 6,
                    "ppsz_exponent": 1,
                    "str": 1,
                    "string_value": 2
                },
                "pcVar10": {
                    "char_ptr1": 1,
                    "formatted_number": 1,
                    "output": 1,
                    "output_str_ptr": 1,
                    "output_value": 1,
                    "pointer_var1": 1,
                    "result": 1,
                    "result_ptr": 1,
                    "result_string": 2
                },
                "pcVar20": {
                    "char_ptr2": 1,
                    "loop_iterator": 1,
                    "result_character": 1,
                    "temp_value6": 1,
                    "var_24": 1
                },
                "pcVar21": {
                    "char_ptr3": 1,
                    "result_character_pointer": 1,
                    "string_iterator": 1,
                    "temp_value7": 1,
                    "var_2_f": 1
                },
                "puVar22": {
                    "decimal_bits": 1,
                    "digit_table": 1,
                    "exponent_test": 1,
                    "ptr_var": 1,
                    "rounding_table": 1,
                    "temp_value_array": 1,
                    "uint_ptr": 1,
                    "var_1_c": 1
                },
                "uStack_44": {
                    "decimal_offset_temp2": 1,
                    "discard_decimal": 1,
                    "exponent_digits": 1,
                    "exponent_shift": 1,
                    "local_var_10": 1,
                    "result": 1,
                    "shifted_significand_unsigned": 1,
                    "stack_var1": 1,
                    "temp_exponent": 1,
                    "temp_fraction": 1,
                    "temp_u_int5": 1,
                    "temp_value14": 1,
                    "temp_value4": 1,
                    "temp_var6": 1,
                    "u_stack": 1,
                    "u_stack_44": 1,
                    "unsigned_stack_var": 1,
                    "upper_bound_exponent": 1,
                    "value_10": 1,
                    "var_3_c": 1
                },
                "uVar11": {
                    "carry_overflow": 1,
                    "carry_value": 1,
                    "digit_tmp": 1,
                    "digit_value": 1,
                    "exponent_mask": 1,
                    "flag_value": 1,
                    "is_negative": 1,
                    "is_negative_fractional_part": 1,
                    "local_exponent": 1,
                    "mantissa": 1,
                    "num_digits": 1,
                    "overflow_flag": 1,
                    "shifted": 1,
                    "temp": 1,
                    "temp_exponent": 1,
                    "temp_num": 1,
                    "temp_result": 1,
                    "temp_u_int1": 1,
                    "temp_value": 2,
                    "temp_var11": 1,
                    "temp_var_6": 1,
                    "u_value1": 1,
                    "uint_var": 1,
                    "unsigned_var2": 1,
                    "value": 1
                },
                "uVar12": {
                    "arg7": 1,
                    "biased_exp_mask": 1,
                    "constant": 1,
                    "constant1": 2,
                    "div_result": 1,
                    "exp_digits_msb": 1,
                    "exponent_msb": 1,
                    "float_exp_part": 1,
                    "high_part_digit": 1,
                    "iter_step1": 1,
                    "leading_zero": 1,
                    "local_decimal": 1,
                    "low_mantissa_part": 1,
                    "real_exponent": 1,
                    "sign_mask": 1,
                    "significand": 1,
                    "temp_flag": 1,
                    "temp_u_int2": 1,
                    "temp_var12": 1,
                    "u_value2": 1,
                    "u_var12": 1,
                    "uint_var1": 1,
                    "unknown_num_1": 1,
                    "unsigned_var3": 1,
                    "var_34": 1
                },
                "uVar13": {
                    "arg8": 1,
                    "constant2": 1,
                    "div_remainder": 1,
                    "exp_digits_lsb": 1,
                    "high_bit_shifted": 1,
                    "high_mantissa_part": 1,
                    "high_word_decimal": 1,
                    "iter_step2": 1,
                    "low_part_digit": 1,
                    "num6": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_exponent": 1,
                    "temp_flag2": 1,
                    "temp_u_int3": 1,
                    "temp_upper": 1,
                    "temp_val_upper": 1,
                    "temp_value": 1,
                    "temp_value_high": 1,
                    "temp_var13": 1,
                    "temp_var_7": 1,
                    "u_value3": 1,
                    "uint_var2": 1,
                    "unknown_num_2": 1,
                    "unsigned_var4": 1,
                    "upper_32bits": 1,
                    "var_30": 1,
                    "zero_constant": 1
                },
                "uVar16": {
                    "add_result": 1,
                    "adjustment_decimal": 1,
                    "constant": 1,
                    "exp_value": 1,
                    "exponent_value_high": 1,
                    "iter_step3": 1,
                    "low_exponent_part": 1,
                    "low_word_decimal": 1,
                    "mantissa_mask": 1,
                    "num_digits": 1,
                    "result_exp_msb": 1,
                    "shifted_exponent": 1,
                    "temp2": 1,
                    "temp_val1": 1,
                    "temp_val_lower": 1,
                    "temp_var": 1,
                    "temp_var14": 1,
                    "temp_var_8": 1,
                    "u_value4": 1,
                    "u_var16": 2,
                    "uint_var3": 1,
                    "unknown_num_3": 1
                },
                "uVar17": {
                    "exponenet_less_than_0": 1,
                    "exponent_mask": 1,
                    "float_bits": 1,
                    "fraction": 1,
                    "high_exponent_part": 1,
                    "is_negative": 1,
                    "mantissa": 1,
                    "normalized_exponent": 1,
                    "normalized_value": 1,
                    "positive_mantissa": 1,
                    "result_exp_lsb": 1,
                    "sign_bit": 1,
                    "significand_bits": 1,
                    "temp3": 1,
                    "temp_exponent": 1,
                    "temp_flag3": 1,
                    "temp_mask": 1,
                    "temp_val2": 1,
                    "temp_var15": 1,
                    "temp_var_9": 1,
                    "u_value5": 1,
                    "u_var17": 2,
                    "uint_var4": 1
                },
                "uVar18": {
                    "abs_exp": 1,
                    "absolute_exponent": 1,
                    "exponent": 1,
                    "exponent_bits": 1,
                    "exponent_temp2": 1,
                    "exponent_value": 1,
                    "fractional_part": 1,
                    "mantissa_tmp": 1,
                    "sign_bits": 1,
                    "temp": 3,
                    "temp4": 1,
                    "temp_exponent": 2,
                    "temp_flag4": 1,
                    "temp_mask_2": 1,
                    "temp_uint": 1,
                    "temp_val3": 1,
                    "temp_var": 2,
                    "temp_var_10": 1,
                    "tmp5": 1,
                    "u_value6": 1,
                    "uint_var5": 1
                },
                "uVar19": {
                    "end_index": 1,
                    "exponent_val": 1,
                    "maximum_decimal_exponent": 1
                },
                "uVar23": {
                    "arg12": 1,
                    "carry_decimal": 1,
                    "digit_exp_lsb": 1,
                    "divisor": 2,
                    "exp_bits": 1,
                    "high_bits": 1,
                    "high_part": 1,
                    "high_part_exponent": 1,
                    "integer_part": 1,
                    "param_1": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp5": 1,
                    "temp_decimal": 1,
                    "temp_val4": 1,
                    "temp_value_low": 1,
                    "temp_var_11": 1,
                    "u_value7": 1,
                    "u_var23": 2,
                    "uint_var6": 1,
                    "var_1_b": 1
                },
                "uVar26": {
                    "calculation_result": 1,
                    "num3": 1,
                    "p_floating_point": 1,
                    "result": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp64": 1,
                    "temp_result": 1,
                    "temp_ulonglong": 1,
                    "temp_val": 1,
                    "temp_val7": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "temp_var2": 1,
                    "temp_var_12": 1,
                    "tmp_result": 1,
                    "u_value8": 1,
                    "u_var26": 2,
                    "ulonglong_var1": 1,
                    "unsigned_var5": 1,
                    "value": 1,
                    "var_58": 1
                },
                "uVar27": {
                    "exp_tmp": 1,
                    "exponent_result": 1,
                    "num4": 1,
                    "p_floating_point_exp_sum": 1,
                    "pow_value": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_decimal": 1,
                    "temp_exponent": 1,
                    "temp_result1": 1,
                    "temp_ulonglong2": 1,
                    "temp_val8": 1,
                    "temp_val_2": 1,
                    "temp_value2": 2,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_var_13": 1,
                    "u_value9": 1,
                    "u_var27": 2,
                    "ulonglong_var2": 1,
                    "unsigned_var6": 1,
                    "var_56": 1
                },
                "uVar28": {
                    "exp_tmp_prev": 1,
                    "num5": 1,
                    "p_floating_to_integer": 1,
                    "result": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp64": 1,
                    "temp8": 1,
                    "temp_result2": 2,
                    "temp_ulonglong3": 1,
                    "temp_val9": 1,
                    "temp_val_3": 1,
                    "temp_value3": 2,
                    "temp_value8": 1,
                    "temp_var3": 3,
                    "temp_var_14": 1,
                    "u_var28": 2,
                    "ulonglong_var3": 1,
                    "unsigned_var7": 1,
                    "var_54": 1
                },
                "uVar6": {
                    "exponent": 1,
                    "float_parts": 1,
                    "float_to_fixed_point": 1,
                    "floating_point_value": 1,
                    "fp_int_value": 1,
                    "integral_part": 1,
                    "mul": 1,
                    "normalized": 1,
                    "normalized_number": 1,
                    "normalized_significand": 1,
                    "num1": 1,
                    "num_value": 1,
                    "output": 1,
                    "power": 1,
                    "real_decimal": 1,
                    "result": 6,
                    "result64": 1,
                    "result_ptr": 1,
                    "temp": 1,
                    "temp_val": 1,
                    "temp_value": 2,
                    "temp_var4": 1,
                    "temp_var_5": 1,
                    "unsigned_var1": 1
                }
            },
            "called": [
                "FUN_08009530",
                "FUN_08009244",
                "FUN_08009120",
                "FUN_0800015c",
                "FUN_080090c0",
                "FUN_080093a4",
                "FUN_080003d4",
                "FUN_080003f4",
                "FUN_080009d4",
                "FUN_08000158",
                "FUN_0800910c",
                "FUN_08001084",
                "FUN_080091a4",
                "FUN_0800119c",
                "FUN_080094f8",
                "FUN_080004c8",
                "FUN_080009e8",
                "FUN_0800071c",
                "FUN_08009444",
                "FUN_080078c0",
                "FUN_08009630",
                "FUN_08000998",
                "FUN_08009258",
                "FUN_080009ac"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nchar * convert_float_to_decimal_string_080079e8(temp6nt input,undeftemp6ned4 flags,utemp6nt sign,utemp6nt exponent,utemp6nt min_width,\n                   utemp6nt precision,temp6nt *output_length,utemp6nt *is_negative,char **output_string)\n\n{\n  bool is_infinity;\n  bool is_zero;\n  bool is_positive;\n  char digit;\n  byte carry;\n  undeftemp6ned4 result;\n  temp6nt i;\n  temp6nt j;\n  temp6nt status;\n  char *result_string;\n  utemp6nt temp_value;\n  undeftemp6ned4 constant1;\n  undeftemp6ned4 temp_var13;\n  temp6nt result;\n  temp6nt int_val2;\n  undeftemp6ned4 u_var16;\n  utemp6nt u_var17;\n  utemp6nt temp;\n  temp6nt exponent_offset;\n  char *char_ptr2;\n  char *string_iterator;\n  undeftemp6ned4 *uint_ptr;\n  undeftemp6ned4 u_var23;\n  temp6nt digit_count;\n  bool is_negative_exponent;\n  undeftemp6ned8 u_var26;\n  undeftemp6ned8 temp_var2;\n  undeftemp6ned8 temp_var3;\n  utemp6nt local_var1;\n  utemp6nt exponent;\n  utemp6nt local_var_3;\n  temp6nt local_var4;\n  utemp6nt local_var_5;\n  temp6nt local_var6;\n  temp6nt local_var_7;\n  utemp6nt local_var8;\n  utemp6nt local_var_9;\n  utemp6nt temp_var6;\n  utemp6nt local_var10;\n  utemp6nt local_var11;\n  temp6nt local_var12;\n  temp6nt temp_array [2];\n  \n  result = *(temp6nt *)(input + 0x40);\n  temp6f (result != 0) {\n    temp = *(utemp6nt *)(input + 0x44);\n    *(utemp6nt *)(result + 4) = temp;\n    *(temp6nt *)(result + 8) = 1 << (temp & 0xff);\n    FUN_0800910c(input,result);\n    *(undeftemp6ned4 *)(input + 0x40) = 0;\n  }\n  is_negative_exponent = (temp6nt)exponent < 0;\n  temp = exponent;\n  temp6f (is_negative_exponent) {\n    temp = exponent & 0x7fffffff;\n  }\n  *is_negative = (utemp6nt)is_negative_exponent;\n  exponent = exponent;\n  temp6f (is_negative_exponent) {\n    exponent = temp;\n  }\n  u_var17 = exponent;\n  temp6f ((~temp & 0x7ff00000) == 0) {\n    *output_length = 9999;\n    temp6f ((sign == 0) && ((temp & 0xfffff) == 0)) {\n      result_string = \"Inftemp6ntemp6ty\";\n      temp6f (output_string == (char **)0x0) {\n        return result_string;\n      }\n      string_iterator = \"\";\n    }\n    else {\n      result_string = \"NaN\";\n      temp6f (output_string == (char **)0x0) {\n        return result_string;\n      }\n      string_iterator = \"\";\n    }\n    *output_string = string_iterator;\n    return result_string;\n  }\n  u_var26 = FUN_08000998(sign,exponent,0,0);\n  temp6f ((temp6nt)u_var26 != 0) {\n    *output_length = 1;\n    temp6f (output_string != (char **)0x0) {\n      *output_string = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  result = FUN_08009630(input,(temp6nt)((ulonglong)u_var26 >> 0x20),sign,exponent,temp_array,&local_var12)\n  ;\n  result = local_var12;\n  temp6f (temp >> 0x14 == 0) {\n    exponent_offset = temp_array[0] + local_var12;\n    int_val2 = exponent_offset + 0x432;\n    temp6f (int_val2 < 0x21) {\n      temp = sign << (0x20U - int_val2 & 0xff);\n    }\n    else {\n      temp = sign >> (exponent_offset + 0x412U & 0xff) | temp << (0x40U - int_val2 & 0xff);\n    }\n    u_var26 = FUN_080003d4(temp);\n    exponent_offset = exponent_offset + -1;\n    is_negative_exponent = true;\n    temp_value = (temp6nt)((ulonglong)u_var26 >> 0x20) + 0xfe100000;\n    temp = (utemp6nt)u_var26;\n  }\n  else {\n    exponent_offset = (temp >> 0x14) - 0x3ff;\n    temp_value = exponent & 0xfffff | 0x3ff00000;\n    is_negative_exponent = false;\n    temp = sign;\n  }\n  u_var26 = FUN_08000158(temp,temp_value,0,0x3ff80000);\n  u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0x636f4361,0x3fd287a7);\n  u_var26 = FUN_0800015c((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp_var2 = FUN_080003f4(exponent_offset);\n  temp_var2 = FUN_080004c8((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),0x509f79fb,0x3fd34413);\n  u_var26 = FUN_0800015c((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),(temp6nt)temp_var2,\n                        (temp6nt)((ulonglong)temp_var2 >> 0x20));\n  temp_var13 = (undeftemp6ned4)((ulonglong)u_var26 >> 0x20);\n  local_var_3 = FUN_0800119c();\n  int_val2 = FUN_080009ac((temp6nt)u_var26,temp_var13,0,0);\n  temp6f (int_val2 != 0) {\n    temp_var2 = FUN_080003f4(local_var_3);\n    int_val2 = FUN_08000998((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),(temp6nt)u_var26,temp_var13);\n    temp6f (int_val2 == 0) {\n      local_var_3 = local_var_3 - 1;\n    }\n  }\n  temp6f (local_var_3 < 0x17) {\n    int_val2 = FUN_080009e8(*(undeftemp6ned4 *)(&DAT_08009fa8 + local_var_3 * 8),\n                          *(undeftemp6ned4 *)(&DAT_08009fac + local_var_3 * 8),sign,exponent);\n    temp6f (int_val2 == 0) {\n      is_zero = false;\n    }\n    else {\n      local_var_3 = local_var_3 - 1;\n      is_zero = false;\n    }\n  }\n  else {\n    is_zero = true;\n  }\n  int_val2 = (result - exponent_offset) + -1;\n  temp6f (int_val2 < 0) {\n    local_var4 = 1 - (result - exponent_offset);\n    int_val2 = 0;\n  }\n  else {\n    local_var4 = 0;\n  }\n  temp6f ((temp6nt)local_var_3 < 0) {\n    local_var8 = 0;\n    local_var4 = local_var4 - local_var_3;\n    local_var_7 = -local_var_3;\n  }\n  else {\n    int_val2 = int_val2 + local_var_3;\n    local_var8 = local_var_3;\n    local_var_7 = 0;\n  }\n  temp6f (9 < min_width) {\n    local_var10 = 0xffffffff;\n    is_infinity = true;\n    local_var_5 = 0xffffffff;\n    is_positive = true;\n    min_width = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  is_infinity = (temp6nt)min_width < 6;\n  temp6f (!is_infinity) {\n    min_width = min_width - 4;\n  }\n  swtemp6tch(min_width) {\n  case 2:\n    is_positive = false;\n    breashift_count;\n  case 3:\n    is_positive = false;\n    goto LAB_08008300;\n  case 4:\n    is_positive = true;\n    breashift_count;\n  case 5:\n    is_positive = true;\nLAB_08008300:\n    local_var10 = local_var_3 + precision;\n    local_var_5 = local_var10 + 1;\n    temp = local_var_5;\n    temp6f ((temp6nt)local_var_5 < 1) {\n      temp = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(undeftemp6ned4 *)(input + 0x44) = 0;\n    result_string = (char *)FUN_080090c0(input,0);\n    local_var10 = 0xffffffff;\n    local_var_5 = 0xffffffff;\n    precision = 0;\n    *(char **)(input + 0x40) = result_string;\n    is_positive = true;\n    goto LAB_08007e36;\n  }\n  temp6f ((temp6nt)precision < 1) {\n    local_var10 = 1;\n    precision = 1;\n    local_var_5 = 1;\nLAB_08007c24:\n    *(undeftemp6ned4 *)(input + 0x44) = 0;\n    temp_value = local_var10;\n  }\n  else {\n    local_var10 = precision;\n    local_var_5 = precision;\n    temp = precision;\nLAB_08008314:\n    *(undeftemp6ned4 *)(input + 0x44) = 0;\n    temp_value = local_var_5;\n    temp6f (0x17 < (temp6nt)temp) {\n      exponent_offset = 4;\n      result = 1;\n      do {\n        i = result;\n        exponent_offset = exponent_offset * 2;\n        result = i + 1;\n      } whtemp6le (exponent_offset + 0x14U <= temp);\n      *(temp6nt *)(input + 0x44) = i;\n    }\n  }\n  result_string = (char *)FUN_080090c0(input);\n  *(char **)(input + 0x40) = result_string;\n  temp6f ((temp_value < 0xf) && (is_infinity)) {\n    temp6f ((temp6nt)local_var_3 < 1) {\n      temp6f (local_var_3 == 0) {\n        result = 2;\n        local_var1 = sign;\n      }\n      else {\n        result = (-local_var_3 & 0xf) * 8;\n        u_var26 = FUN_080004c8(sign,exponent,*(undeftemp6ned4 *)(&DAT_08009fa8 + result),\n                              *(undeftemp6ned4 *)(&DAT_08009fac + result));\n        exponent = (utemp6nt)((ulonglong)u_var26 >> 0x20);\n        local_var1 = (utemp6nt)u_var26;\n        exponent_offset = (temp6nt)-local_var_3 >> 4;\n        temp6f (exponent_offset == 0) {\n          result = 2;\n        }\n        else {\n          is_infinity = false;\n          result = 2;\n          uint_ptr = &DAT_08009f80;\n          do {\n            temp6f (exponent_offset << 0x1f < 0) {\n              u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),*uint_ptr,uint_ptr[1]\n                                   );\n              is_infinity = true;\n              result = result + 1;\n            }\n            exponent_offset = exponent_offset >> 1;\n            uint_ptr = uint_ptr + 2;\n          } whtemp6le (exponent_offset != 0);\n          temp6f (is_infinity) {\n            local_var1 = (utemp6nt)u_var26;\n            exponent = (utemp6nt)((ulonglong)u_var26 >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      temp = (temp6nt)local_var_3 >> 4;\n      temp_var2 = *(undeftemp6ned8 *)(&DAT_08009fa8 + (local_var_3 & 0xf) * 8);\n      u_var26 = *(undeftemp6ned8 *)(&DAT_08009fa8 + (local_var_3 & 0xf) * 8);\n      temp6f ((temp6nt)(temp << 0x1b) < 0) {\n        temp_var3 = FUN_0800071c(sign,exponent,0x7f73bf3c,0x75154fdd);\n        temp_var6 = (utemp6nt)((ulonglong)temp_var3 >> 0x20);\n        local_var_9 = (utemp6nt)temp_var3;\n        result = 3;\n        temp = temp & 0xf;\n      }\n      else {\n        result = 2;\n        temp_var6 = exponent;\n        local_var_9 = sign;\n      }\n      temp6f (temp != 0) {\n        uint_ptr = &DAT_08009f80;\n        do {\n          temp6f ((temp6nt)(temp << 0x1f) < 0) {\n            u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),*uint_ptr,uint_ptr[1]);\n            result = result + 1;\n          }\n          temp = (temp6nt)temp >> 1;\n          uint_ptr = uint_ptr + 2;\n          temp_var2 = u_var26;\n        } whtemp6le (temp != 0);\n      }\n      exponent = (utemp6nt)((ulonglong)temp_var2 >> 0x20);\n      local_var1 = (utemp6nt)temp_var2;\n      u_var26 = FUN_0800071c(local_var_9,temp_var6,local_var1,exponent);\n      local_var1 = (utemp6nt)u_var26;\n      exponent = (utemp6nt)((ulonglong)u_var26 >> 0x20);\n    }\n    u_var26 = CONCAT44(exponent,local_var1);\n    temp6f ((is_zero) && (exponent_offset = FUN_080009ac(local_var1,exponent,0,0x3ff00000), exponent_offset != 0)) {\n      temp6f (local_var_5 == 0) {\n        u_var26 = FUN_080003f4(result);\n        u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),local_var1,exponent);\n        u_var26 = FUN_0800015c((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0,0x401c0000);\n        temp_var13 = (undeftemp6ned4)u_var26;\n        result = (temp6nt)((ulonglong)u_var26 >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      temp6f (0 < (temp6nt)local_var10) {\n        u_var26 = FUN_080004c8(local_var1,exponent,0,0x40240000);\n        temp_var2 = FUN_080003f4(result + 1);\n        temp_var2 = FUN_080004c8((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),(temp6nt)u_var26,\n                              (temp6nt)((ulonglong)u_var26 >> 0x20));\n        temp_var2 = FUN_0800015c((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),0,0x401c0000);\n        temp_var13 = (undeftemp6ned4)temp_var2;\n        local_var_9 = local_var10;\n        local_var11 = local_var_3 - 1;\n        result = (temp6nt)((ulonglong)temp_var2 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp_var2 = FUN_080003f4(result);\n    temp_var2 = FUN_080004c8((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),local_var1,exponent);\n    temp_var2 = FUN_0800015c((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),0,0x401c0000);\n    temp_var13 = (undeftemp6ned4)temp_var2;\n    result = (temp6nt)((ulonglong)temp_var2 >> 0x20) + -0x3400000;\n    temp6f (local_var_5 != 0) {\n      local_var11 = local_var_3;\n      local_var_9 = local_var_5;\nLAB_08007cfa:\n      exponent = (utemp6nt)((ulonglong)u_var26 >> 0x20);\n      local_var1 = (utemp6nt)u_var26;\n      digit = FUN_0800119c(local_var1,exponent);\n      digit = digit + '0';\n      u_var16 = (&DAT_08009fa0)[local_var_9 * 2];\n      constant1 = (&DAT_08009fa4)[local_var_9 * 2];\n      u_var26 = FUN_080003f4();\n      u_var26 = FUN_08000158(local_var1,exponent,(temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20));\n      u_var23 = (undeftemp6ned4)((ulonglong)u_var26 >> 0x20);\n      string_iterator = result_string + 1;\n      temp6f (is_positive) {\n        temp_var2 = FUN_0800071c(0,0x3fe00000,u_var16,constant1);\n        temp_var2 = FUN_08000158((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),temp_var13,result);\n        temp_var13 = (undeftemp6ned4)((ulonglong)temp_var2 >> 0x20);\n        *result_string = digit;\n        result = FUN_080009e8((temp6nt)temp_var2,temp_var13,(temp6nt)u_var26,u_var23);\n        temp6f (result != 0) {\nLAB_08008784:\n          local_var_3 = local_var11;\n          goto LAB_08008294;\n        }\n        temp_var3 = FUN_08000158(0,0x3ff00000,(temp6nt)u_var26,u_var23);\n        result = FUN_080009e8((temp6nt)temp_var2,temp_var13,(temp6nt)temp_var3,(temp6nt)((ulonglong)temp_var3 >> 0x20));\n        temp6f (result == 0) {\n          temp6f (local_var_9 != 1) {\n            char_ptr2 = string_iterator;\n            do {\n              temp_var2 = FUN_080004c8((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),0,0x40240000);\n              temp_var13 = (undeftemp6ned4)((ulonglong)temp_var2 >> 0x20);\n              u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0,0x40240000);\n              digit = FUN_0800119c();\n              temp_var3 = FUN_080003f4();\n              u_var26 = FUN_08000158((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),(temp6nt)temp_var3,\n                                    (temp6nt)((ulonglong)temp_var3 >> 0x20));\n              u_var16 = (undeftemp6ned4)((ulonglong)u_var26 >> 0x20);\n              digit = digit + '0';\n              string_iterator = char_ptr2 + 1;\n              *char_ptr2 = digit;\n              result = FUN_080009ac((temp6nt)u_var26,u_var16,(temp6nt)temp_var2,temp_var13);\n              temp6f (result != 0) {\n                local_var_3 = local_var11;\n                goto LAB_08008294;\n              }\n              temp_var3 = FUN_08000158(0,0x3ff00000,(temp6nt)u_var26,u_var16);\n              result = FUN_080009ac((temp6nt)temp_var3,(temp6nt)((ulonglong)temp_var3 >> 0x20),(temp6nt)temp_var2,temp_var13)\n              ;\n              temp6f (result != 0) goto LAB_08008798;\n              char_ptr2 = string_iterator;\n            } whtemp6le (string_iterator != result_string + local_var_9);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        local_var_3 = local_var11;\n      }\n      else {\n        temp_var2 = FUN_080004c8(temp_var13,result,u_var16,constant1);\n        temp_var13 = (undeftemp6ned4)((ulonglong)temp_var2 >> 0x20);\n        *result_string = digit;\n        temp6f (local_var_9 != 1) {\n          char_ptr2 = string_iterator;\n          do {\n            u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0,0x40240000);\n            digit = FUN_0800119c();\n            temp_var3 = FUN_080003f4();\n            u_var26 = FUN_08000158((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),(temp6nt)temp_var3,\n                                  (temp6nt)((ulonglong)temp_var3 >> 0x20));\n            string_iterator = char_ptr2 + 1;\n            *char_ptr2 = digit + '0';\n            char_ptr2 = string_iterator;\n          } whtemp6le (string_iterator != result_string + local_var_9);\n        }\n        u_var16 = (undeftemp6ned4)((ulonglong)u_var26 >> 0x20);\n        temp_var3 = FUN_0800015c((temp6nt)temp_var2,temp_var13,0,0x3fe00000);\n        result = FUN_080009ac((temp6nt)temp_var3,(temp6nt)((ulonglong)temp_var3 >> 0x20),(temp6nt)u_var26,u_var16);\n        temp6f (result == 0) {\n          temp_var2 = FUN_08000158(0,0x3fe00000,(temp6nt)temp_var2,temp_var13);\n          result = FUN_080009e8((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),(temp6nt)u_var26,u_var16);\n          char_ptr2 = string_iterator;\n          temp6f (result == 0) goto LAB_08007e36;\n          do {\n            string_iterator = char_ptr2;\n            char_ptr2 = string_iterator + -1;\n          } whtemp6le (string_iterator[-1] == '0');\n          goto LAB_08008784;\n        }\n        local_var_3 = local_var11;\n        digit = string_iterator[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    u_var26 = FUN_08000158(local_var1,exponent,0,0x40140000);\n    u_var16 = (undeftemp6ned4)((ulonglong)u_var26 >> 0x20);\n    exponent_offset = FUN_080009e8((temp6nt)u_var26,u_var16,temp_var13,result);\n    temp6f (exponent_offset == 0) {\n      result = FUN_080009ac((temp6nt)u_var26,u_var16,temp_var13,result + -0x80000000);\n      temp6f (result == 0) goto LAB_08007e36;\n      exponent_offset = 0;\n      result = 0;\n      string_iterator = result_string;\n      goto LAB_080084f0;\n    }\n    int_val2 = 0;\n    i = 0;\nLAB_08008406:\n    *result_string = '1';\n    local_var_3 = local_var_3 + 1;\n    string_iterator = result_string + 1;\n    exponent_offset = i;\n    result = int_val2;\nLAB_08008416:\n    FUN_0800910c(input,result);\n    temp6f (exponent_offset == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    string_iterator = result_string;\n    temp6f ((-1 < temp_array[0]) && ((temp6nt)local_var_3 < 0xf)) {\n      temp_var13 = *(undeftemp6ned4 *)(&DAT_08009fa8 + local_var_3 * 8);\n      u_var16 = *(undeftemp6ned4 *)(&DAT_08009fac + local_var_3 * 8);\n      temp6f ((-1 < (temp6nt)precision) || (0 < (temp6nt)local_var_5)) {\n        FUN_0800071c(sign,u_var17,temp_var13,u_var16);\n        carry = FUN_0800119c();\n        u_var26 = FUN_080003f4();\n        u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),temp_var13,u_var16);\n        u_var26 = FUN_08000158(sign,u_var17,(temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20));\n        *result_string = carry + 0x30;\n        string_iterator = result_string + 1;\n        temp6f (local_var_5 != 1) {\n          u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0,0x40240000);\n          result = FUN_08000998((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0,0);\n          whtemp6le (result == 0) {\n            u_var23 = (undeftemp6ned4)((ulonglong)u_var26 >> 0x20);\n            FUN_0800071c((temp6nt)u_var26,u_var23,temp_var13,u_var16);\n            carry = FUN_0800119c();\n            temp_var2 = FUN_080003f4();\n            temp_var2 = FUN_080004c8((temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20),temp_var13,u_var16);\n            u_var26 = FUN_08000158((temp6nt)u_var26,u_var23,(temp6nt)temp_var2,(temp6nt)((ulonglong)temp_var2 >> 0x20));\n            char_ptr2 = string_iterator + 1;\n            *string_iterator = carry + 0x30;\n            string_iterator = char_ptr2;\n            temp6f (local_var_5 == (temp6nt)char_ptr2 - (temp6nt)result_string) goto LAB_08007f3a;\n            u_var26 = FUN_080004c8((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0,0x40240000);\n            result = FUN_08000998((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        u_var26 = FUN_0800015c((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20));\n        u_var23 = (undeftemp6ned4)((ulonglong)u_var26 >> 0x20);\n        result = FUN_080009e8((temp6nt)u_var26,u_var23,temp_var13,u_var16);\n        temp6f ((result == 0) &&\n           ((result = FUN_08000998((temp6nt)u_var26,u_var23,temp_var13,u_var16), result == 0 ||\n            ((carry & 1) == 0)))) goto LAB_08008294;\n        digit = string_iterator[-1];\nLAB_08007f7c:\n        whtemp6le (char_ptr2 = string_iterator + -1, digit == '9') {\n          temp6f (result_string == char_ptr2) {\n            *result_string = '0';\n            digit = string_iterator[-1];\n            local_var_3 = local_var_3 + 1;\n            char_ptr2 = result_string;\n            breashift_count;\n          }\n          digit = string_iterator[-2];\n          string_iterator = char_ptr2;\n        }\n        *char_ptr2 = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      temp6f (local_var_5 == 0) {\n        u_var26 = FUN_080004c8(temp_var13,u_var16,0,0x40140000);\n        status = FUN_080009d4((temp6nt)u_var26,(temp6nt)((ulonglong)u_var26 >> 0x20),sign,u_var17);\n        exponent_offset = 0;\n        int_val2 = 0;\n        i = 0;\n        result = 0;\n        temp6f (status == 0) goto LAB_08008406;\n      }\n      else {\n        exponent_offset = 0;\n        result = 0;\n      }\nLAB_080084f0:\n      local_var_3 = ~precision;\n      result_string = string_iterator;\n      goto LAB_08008416;\n    }\n    result = local_var_7;\n    temp6f (is_positive) {\n      temp6f ((temp6nt)min_width < 2) {\n        temp6f (is_negative_exponent) {\n          local_var6 = local_var4;\n          local_var4 = local_var4 + temp_array[0] + 0x433;\n          int_val2 = int_val2 + temp_array[0] + 0x433;\n        }\n        else {\n          local_var6 = local_var4;\n          local_var4 = local_var4 + (0x36 - local_var12);\n          int_val2 = int_val2 + (0x36 - local_var12);\n        }\n      }\n      else {\n        exponent_offset = local_var_5 - 1;\n        temp6f (local_var_7 < exponent_offset) {\n          local_var8 = local_var8 + (exponent_offset - local_var_7);\n          result = 0;\n          local_var_7 = exponent_offset;\n        }\n        else {\n          result = local_var_7 - exponent_offset;\n        }\n        temp6f ((temp6nt)local_var_5 < 0) {\n          local_var6 = local_var4 - local_var_5;\n        }\n        else {\n          int_val2 = int_val2 + local_var_5;\n          local_var6 = local_var4;\n          local_var4 = local_var4 + local_var_5;\n        }\n      }\n      exponent_offset = FUN_08009244(input,1);\n    }\n    else {\n      local_var6 = local_var4;\n      exponent_offset = 0;\n    }\n    temp6f ((0 < local_var6) && (0 < int_val2)) {\n      i = local_var6;\n      temp6f (int_val2 <= local_var6) {\n        i = int_val2;\n      }\n      int_val2 = int_val2 - i;\n      local_var4 = local_var4 - i;\n      local_var6 = local_var6 - i;\n    }\n    temp6f (local_var_7 != 0) {\n      temp6f (is_positive) {\n        temp_var13 = result;\n        temp6f (result != 0) {\n          exponent_offset = FUN_080093a4(input,exponent_offset,result);\n          temp_var13 = FUN_08009258(input,exponent_offset,result);\n          FUN_0800910c(input,result);\n          result = temp_var13;\n          temp6f (local_var_7 - result == 0) goto LAB_08008062;\n        }\n        result = FUN_080093a4(input,temp_var13,local_var_7 - result);\n      }\n      else {\n        result = FUN_080093a4(input,result,local_var_7);\n      }\n    }\nLAB_08008062:\n    result = FUN_08009244(input,1);\n    temp6f (local_var8 == 0) {\n      temp6f (((temp6nt)min_width < 2) && (sign == 0)) {\nLAB_0800835a:\n        temp6f ((u_var17 & 0xfffff) == 0) {\n          u_var17 = u_var17 & 0x7ff00000;\n          temp6f (u_var17 != 0) {\n            int_val2 = int_val2 + 1;\n            local_var4 = local_var4 + 1;\n            u_var17 = 1;\n          }\n        }\n        else {\n          u_var17 = 0;\n        }\n        is_negative_exponent = local_var8 != 0;\n        temp = sign;\n        local_var8 = u_var17;\n        temp6f (is_negative_exponent) goto LAB_080082d4;\n      }\n      i = 1;\n    }\n    else {\n      u_var26 = FUN_080093a4(input,result);\n      result = (temp6nt)u_var26;\n      temp6f (((temp6nt)min_width < 2) && (sign == 0)) goto LAB_0800835a;\n      local_var8 = 0;\n      temp = (utemp6nt)((ulonglong)u_var26 >> 0x20);\nLAB_080082d4:\n      i = FUN_080091a4(*(undeftemp6ned4 *)(result + *(temp6nt *)(result + 0x10) * 4 + 0x10),temp);\n      i = 0x20 - i;\n    }\n    temp = i + int_val2 & 0x1f;\n    temp6f (temp == 0) {\n      i = 0x1c;\nLAB_08008096:\n      int_val2 = int_val2 + i;\n      local_var4 = local_var4 + i;\n      local_var6 = local_var6 + i;\n    }\n    else {\n      temp6f (4 < (temp6nt)(0x20 - temp)) {\n        i = 0x1c - temp;\n        goto LAB_08008096;\n      }\n      temp6f (0x20 - temp != 4) {\n        i = 0x3c - temp;\n        goto LAB_08008096;\n      }\n    }\n    temp6f (0 < local_var4) {\n      result = FUN_08009444(input,result,local_var4);\n    }\n    temp6f (0 < int_val2) {\n      result = FUN_08009444(input,result,int_val2);\n    }\n    char_ptr2 = result_string;\n    temp6f ((is_zero) && (int_val2 = FUN_080094f8(result,result), int_val2 < 0)) {\n      local_var_3 = local_var_3 - 1;\n      result = FUN_08009120(input,result,10,0);\n      temp6f (is_positive) {\n        exponent_offset = FUN_08009120(input,exponent_offset,10,0);\n        temp6f ((0 < (temp6nt)local_var10) || ((temp6nt)min_width < 3)) {\n          local_var_5 = local_var10;\n          goto LAB_080080de;\n        }\n      }\n      else temp6f ((0 < (temp6nt)local_var10) || ((temp6nt)min_width < 3)) {\n        local_var_5 = local_var10;\n        goto LAB_0800820a;\n      }\n      local_var_5 = local_var10;\nLAB_080084e8:\n      temp6f (local_var_5 == 0) {\n        int_val2 = FUN_08009120(input,result,5);\n        status = FUN_080094f8(result,int_val2);\n        i = exponent_offset;\n        result = int_val2;\n        temp6f (0 < status) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    temp6f (((temp6nt)local_var_5 < 1) && (2 < (temp6nt)min_width)) goto LAB_080084e8;\n    temp6f (is_positive) {\nLAB_080080de:\n      local_var1 = exponent_offset;\n      temp6f (0 < local_var6) {\n        local_var1 = FUN_08009444(input,exponent_offset,local_var6);\n      }\n      exponent_offset = local_var1;\n      temp6f (local_var8 != 0) {\n        exponent_offset = FUN_080090c0(input,*(undeftemp6ned4 *)(local_var1 + 4));\n        FUN_08001084(exponent_offset + 0xc,local_var1 + 0xc,(*(temp6nt *)(local_var1 + 0x10) + 2) * 4);\n        exponent_offset = FUN_08009444(input,exponent_offset,1);\n      }\nLAB_08008108:\n      int_val2 = FUN_080078c0(result,result);\n      i = FUN_080094f8(result,local_var1);\n      status = FUN_08009530(input,result,exponent_offset);\n      digit_count = int_val2 + 0x30;\n      temp6f (*(temp6nt *)(status + 0xc) == 0) {\n        j = FUN_080094f8(result);\n        FUN_0800910c(input,status);\n        temp6f ((j != 0) || (min_width != 0)) goto LAB_0800815a;\n        temp6f ((sign & 1) != 0) {\n          j = 0;\n          goto LAB_0800815a;\n        }\n        temp6f (digit_count != 0x39) {\n          temp6f (0 < i) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        string_iterator = char_ptr2 + 1;\n        digit = '9';\n        *char_ptr2 = '9';\n        goto LAB_08008268;\n      }\n      FUN_0800910c(input,status);\n      j = 1;\nLAB_0800815a:\n      temp6f ((i < 0) || (((i == 0 && (min_width == 0)) && ((sign & 1) == 0)))) {\n        temp6f (0 < j) {\n          result = FUN_08009444(input,result,1);\n          i = FUN_080094f8(result,result);\n          temp6f ((0 < i) || ((i == 0 && (int_val2 << 0x1f < 0)))) {\n            temp6f (digit_count == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            digit_count = int_val2 + 0x31;\n          }\n        }\nLAB_080085a4:\n        string_iterator = char_ptr2 + 1;\n        *char_ptr2 = (char)digit_count;\n        goto LAB_08008274;\n      }\n      string_iterator = char_ptr2 + 1;\n      temp6f (0 < j) {\n        temp6f (digit_count == 0x39) goto LAB_08008752;\n        *char_ptr2 = (char)int_val2 + '1';\n        goto LAB_08008274;\n      }\n      *char_ptr2 = (char)digit_count;\n      temp6f (result_string + (local_var_5 - 1) != char_ptr2) {\n        result = FUN_08009120(input,result,10,0);\n        char_ptr2 = string_iterator;\n        temp6f (local_var1 == exponent_offset) {\n          local_var1 = FUN_08009120(input,local_var1,10,0);\n          exponent_offset = local_var1;\n        }\n        else {\n          local_var1 = FUN_08009120(input,local_var1,10,0);\n          exponent_offset = FUN_08009120(input,exponent_offset,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      whtemp6le( true ) {\n        digit_count = FUN_080078c0(result,result);\n        digit_count = digit_count + 0x30;\n        string_iterator = char_ptr2 + 1;\n        *char_ptr2 = (char)digit_count;\n        temp6f ((temp6nt)local_var_5 <= (temp6nt)string_iterator - (temp6nt)result_string) breashift_count;\n        result = FUN_08009120(input,result,10,0);\n        char_ptr2 = string_iterator;\n      }\n      local_var1 = 0;\n    }\n    result = FUN_08009444(input,result,1);\n    int_val2 = FUN_080094f8(result,result);\n    digit = string_iterator[-1];\n    temp6f ((0 < int_val2) || ((int_val2 == 0 && (digit_count << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        char_ptr2 = string_iterator + -1;\n        temp6f (digit != '9') goto code_r0x08008270;\n        temp6f (result_string == char_ptr2) {\n          *result_string = '1';\n          local_var_3 = local_var_3 + 1;\n          goto LAB_08008274;\n        }\n        digit = string_iterator[-2];\n        string_iterator = char_ptr2;\n      } whtemp6le( true );\n    }\n    whtemp6le (digit == '0') {\n      digit = string_iterator[-2];\n      string_iterator = string_iterator + -1;\n    }\nLAB_08008274:\n    FUN_0800910c(input,result);\n    temp6f (exponent_offset == 0) goto LAB_08008294;\n    temp6f ((local_var1 != 0) && (local_var1 != exponent_offset)) {\n      FUN_0800910c(input);\n    }\n  }\n  FUN_0800910c(input,exponent_offset);\nLAB_08008294:\n  FUN_0800910c(input,result);\n  *string_iterator = '\\0';\n  *output_length = local_var_3 + 1;\n  temp6f (output_string == (char **)0x0) {\n    return result_string;\n  }\n  *output_string = string_iterator;\n  return result_string;\ncode_r0x08008270:\n  *char_ptr2 = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "current_name": "convert_float_to_decimal_string_080079e8",
            "entrypoint": "0x080079e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e8": "convert_float_to_decimal_string_080079e8",
                "bVar1": "is_infinity",
                "bVar2": "is_zero",
                "bVar25": "is_negative_exponent",
                "bVar3": "is_positive",
                "bVar5": "carry",
                "cVar4": "digit",
                "i": "temp6",
                "iVar14": "result",
                "iVar15": "int_val2",
                "iVar19": "exponent_offset",
                "iVar24": "digit_count",
                "iVar7": "i",
                "iVar8": "j",
                "iVar9": "status",
                "k": "shift_count",
                "local_2c": "temp_array",
                "local_30": "local_var12",
                "local_34": "local_var11",
                "local_38": "local_var10",
                "local_48": "local_var_9",
                "local_58": "local_var8",
                "local_5c": "local_var_7",
                "local_60": "local_var6",
                "local_68": "local_var_5",
                "local_70": "local_var4",
                "local_74": "local_var_3",
                "local_7c": "exponent",
                "local_80": "local_var1",
                "param_1": "input",
                "param_2": "flags",
                "param_3": "sign",
                "param_4": "exponent",
                "param_5": "min_width",
                "param_6": "precision",
                "param_7": "output_length",
                "param_8": "is_negative",
                "param_9": "output_string",
                "pcVar10": "result_string",
                "pcVar20": "char_ptr2",
                "pcVar21": "string_iterator",
                "puVar22": "uint_ptr",
                "uStack_44": "temp_var6",
                "uVar11": "temp_value",
                "uVar12": "constant1",
                "uVar13": "temp_var13",
                "uVar16": "u_var16",
                "uVar17": "u_var17",
                "uVar18": "temp",
                "uVar23": "u_var23",
                "uVar26": "u_var26",
                "uVar27": "temp_var2",
                "uVar28": "temp_var3",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800884c": {
            "additional_data": {
                "DAT_20000454": {
                    "base_address": 4,
                    "constant_data": 1,
                    "constant_value_a": 1,
                    "data": 1,
                    "data1": 1,
                    "data_1": 1,
                    "data_address": 1,
                    "data_ptr": 2,
                    "memory_address": 1,
                    "memory_block": 2,
                    "memory_start": 1,
                    "memory_start_address": 1
                },
                "DAT_20000854": {
                    "aligned_base_address": 1,
                    "constant": 1,
                    "data3": 1,
                    "data_offset": 1,
                    "initial_offset": 1,
                    "memory_offset": 1,
                    "reference_data": 1,
                    "subtracted_constant_data": 1,
                    "uninitialized_memory_size": 1,
                    "variable2": 2
                },
                "DAT_20000a14": {
                    "adjusted_size": 1,
                    "current_address": 1,
                    "current_offset": 1,
                    "data2": 1,
                    "data_2": 1,
                    "data_adjustment": 1,
                    "memory_allocation_counter": 1,
                    "memory_offset": 1,
                    "new_data_ptr": 1,
                    "output": 1,
                    "total_allocated": 1,
                    "total_allocated_size": 1,
                    "total_size": 1,
                    "updated_constant_data": 1,
                    "updated_data": 1,
                    "variable1": 2
                },
                "FUN_0800884c": {
                    "allocate_memory": 3,
                    "allocate_memory_block": 3,
                    "decompress_data": 1,
                    "map_memory_region": 1,
                    "memory_allocation": 1,
                    "optimize_memory_allocation": 1,
                    "reverse_binary_extraction": 1,
                    "reverse_mem_operation": 1,
                    "update_memory": 1
                },
                "FUN_080090a8": {
                    "initialization_function": 1,
                    "initialize": 8,
                    "initialize_data": 1,
                    "initialize_memory": 2,
                    "initialize_memory_block": 1,
                    "initialize_memory_manager": 2,
                    "initialize_system": 1
                },
                "FUN_080090b4": {
                    "cleanup": 3,
                    "cleanup_data": 1,
                    "cleanup_memory": 2,
                    "cleanup_memory_manager": 1,
                    "cleanup_system": 1,
                    "deinitialize_memory_manager": 1,
                    "finalize": 2,
                    "perform_action": 1
                },
                "FUN_08009744": {
                    "allocate_additional_memory": 1,
                    "allocate_memory": 3,
                    "calculate": 1,
                    "calculate_address": 1,
                    "calculate_offset": 1,
                    "execute_operation": 1,
                    "find_difference": 1,
                    "find_free_block": 1,
                    "perform_operation": 2,
                    "process_data": 1,
                    "read_memory": 1,
                    "reposition_memory": 1,
                    "write_memory_block": 1
                },
                "iVar1": {
                    "allocated_address": 1,
                    "allocation_result": 1,
                    "first_allocation": 1,
                    "result": 18,
                    "result1": 5,
                    "result_1": 2,
                    "temp1": 1
                },
                "iVar2": {
                    "adjusted_address": 6,
                    "adjusted_offset": 3,
                    "aligned_address": 5,
                    "base_address": 3,
                    "calculated_address": 1,
                    "calculated_offset": 1,
                    "mem_addr": 1,
                    "new_block": 1,
                    "result2": 5,
                    "result_2": 2,
                    "second_allocation": 1,
                    "temp2": 1,
                    "updated_address": 1
                },
                "param_1": {
                    "arg1": 2,
                    "block_ptr": 1,
                    "buffer": 3,
                    "data": 1,
                    "data_ptr": 1,
                    "input": 4,
                    "input1": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_param": 5,
                    "input_parameter": 2,
                    "input_ptr": 1,
                    "memory_block": 1,
                    "output_buffer": 1,
                    "output_value": 1,
                    "param1": 1,
                    "param_1": 1,
                    "param_address": 1,
                    "ptr_to_data": 1,
                    "ptr_to_memory": 1
                },
                "param_2": {
                    "arg2": 2,
                    "block_size": 1,
                    "input2": 1,
                    "input_size": 1,
                    "input_value": 2,
                    "num_iterations": 1,
                    "offset": 14,
                    "param2": 1,
                    "size": 5,
                    "size_needed": 1,
                    "size_of_allocation": 1,
                    "size_to_reserve": 1
                },
                "uVar3": {
                    "address_masked": 1,
                    "aligned_size": 3,
                    "alignment": 1,
                    "alignment_mask": 1,
                    "bitmasked_address": 1,
                    "block_header": 1,
                    "block_size": 2,
                    "data_offset": 1,
                    "data_size": 1,
                    "data_value": 1,
                    "header_data": 1,
                    "mask": 1,
                    "masked_u_var": 1,
                    "masked_value": 8,
                    "memory_flags": 1,
                    "memory_type": 1,
                    "page_size": 1,
                    "ptr_value": 1,
                    "size": 1,
                    "temp3": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_08009744",
                "FUN_080090a8",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_080088ec"
            ],
            "code": "\nundefined4 allocate_memory_block_0800884c(undefined4 input_param,int offset)\n\n{\n  int result;\n  int adjusted_address;\n  uint masked_value;\n  \n  FUN_080090a8();\n  masked_value = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  adjusted_address = ((0xfef - offset) + masked_value & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_address) {\n    result = FUN_08009744(input_param,0);\n    if (result == DAT_20000454 + masked_value) {\n      result = FUN_08009744(input_param,-adjusted_address);\n      if (result != -1) {\n        DAT_20000a14 = DAT_20000a14 - adjusted_address;\n        *(uint *)(DAT_20000454 + 4) = masked_value - adjusted_address | 1;\n        FUN_080090b4(input_param);\n        return 1;\n      }\n      adjusted_address = FUN_08009744(input_param,0);\n      if (0xf < adjusted_address - DAT_20000454) {\n        DAT_20000a14 = adjusted_address - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = adjusted_address - DAT_20000454 | 1;\n      }\n    }\n  }\n  FUN_080090b4(input_param);\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_block_0800884c",
            "entrypoint": "0x0800884c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "iVar1": "result",
                "iVar2": "adjusted_address",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar3": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080088ec": {
            "additional_data": {
                "DAT_20000444": {
                    "entry": 1
                },
                "DAT_2000044c": {
                    "table": 1
                },
                "DAT_20000450": {
                    "mask": 1,
                    "size_class": 1
                },
                "DAT_20000454": {
                    "data1": 2,
                    "global_chunk_header": 1
                },
                "DAT_2000045c": {
                    "data4": 1,
                    "last_allocated_chunk": 1
                },
                "DAT_20000460": {
                    "data5": 1,
                    "first_allocated_chunk": 1
                },
                "DAT_20000858": {
                    "data2": 2,
                    "limit": 1
                },
                "DAT_20000a44": {
                    "data3": 2,
                    "error_code": 1
                },
                "FUN_0800884c": {
                    "function2": 1
                },
                "FUN_080088ec": {
                    "decompiled_function": 1,
                    "process_memory": 1,
                    "reallocate_memory": 1,
                    "rearrange_binary": 1,
                    "rearrange_memory_blocks": 2,
                    "reorder_and_update_memory_block": 1,
                    "reorganize_memory": 2,
                    "reorganize_memory_blocks": 2
                },
                "FUN_080090a8": {
                    "initialize": 1
                },
                "FUN_080090b4": {
                    "function3": 1
                },
                "LAB_080089f0": {
                    "label1": 1
                },
                "iVar1": {
                    "count": 1,
                    "counter": 1,
                    "index": 24,
                    "index1": 1,
                    "initial_size": 1,
                    "loop_index": 1,
                    "temp1": 1,
                    "temp_var_1": 1
                },
                "iVar10": {
                    "block_index": 2,
                    "chunk_index": 1,
                    "count": 7,
                    "counter": 3,
                    "division": 1,
                    "index": 2,
                    "index2": 1,
                    "integer1": 1,
                    "length": 1,
                    "loop_var": 1,
                    "num_blocks": 1,
                    "size_index": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_var": 1,
                    "temp_var_2": 1,
                    "var1": 1,
                    "var3": 3,
                    "var_10": 1
                },
                "param_1": {
                    "arg1": 8,
                    "argument1": 1,
                    "context": 1,
                    "func_ptr": 1,
                    "input1": 1,
                    "input_param": 2,
                    "mem_ptr": 1,
                    "new_param": 1,
                    "output": 1,
                    "param1": 12,
                    "param_1": 1,
                    "reversed_param": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 7,
                    "argument2": 1,
                    "array_length": 1,
                    "binary_data": 1,
                    "block_start": 1,
                    "data_size": 1,
                    "input": 1,
                    "input2": 1,
                    "input_param": 1,
                    "input_size": 1,
                    "length": 1,
                    "memory_block": 1,
                    "param2": 10,
                    "size": 1,
                    "target": 1
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 8,
                    "argument3": 1,
                    "data_ptr": 1,
                    "input3": 1,
                    "param3": 13,
                    "param_3": 4,
                    "size_param_1": 1,
                    "unused1": 1
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 8,
                    "argument4": 1,
                    "input4": 1,
                    "param4": 13,
                    "param_4": 4,
                    "size_param_2": 1,
                    "unused": 1,
                    "unused2": 1
                },
                "puVar2": {
                    "chunk_header": 1,
                    "curr_ptr": 2,
                    "current_block": 3,
                    "current_pointer": 2,
                    "current_ptr": 3,
                    "mem_start": 1,
                    "pointer1": 4,
                    "prev_block": 1,
                    "ptr1": 12,
                    "ptr_2": 1,
                    "ptr_var_1": 1
                },
                "puVar3": {
                    "curr_block": 1,
                    "mem_end": 1,
                    "next_block": 3,
                    "next_chunk_header": 1,
                    "next_pointer": 2,
                    "next_ptr": 5,
                    "pointer2": 4,
                    "ptr2": 12,
                    "ptr_3": 1,
                    "ptr_var_2": 1
                },
                "puVar4": {
                    "block_ptr": 1,
                    "pointer": 1,
                    "pointer3": 3,
                    "prev_block": 2,
                    "prev_ptr": 1,
                    "ptr1": 2,
                    "ptr3": 12,
                    "ptr_4": 1,
                    "ptr_var_3": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 5,
                    "undefined_pointer1": 1
                },
                "puVar7": {
                    "block_ptr": 1,
                    "current_pointer2": 1,
                    "next_chunk": 1,
                    "pointer4": 3,
                    "prev_chunk_header": 1,
                    "prev_ptr": 2,
                    "ptr1": 1,
                    "ptr2": 2,
                    "ptr4": 11,
                    "ptr_7": 1,
                    "ptr_var_4": 1,
                    "temp1": 1,
                    "temp_block": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "undefined_pointer2": 1
                },
                "puVar8": {
                    "last_ptr": 1,
                    "next_ptr": 1,
                    "pointer5": 3,
                    "prev_chunk": 1,
                    "prev_chunk_ptr": 1,
                    "prev_ptr": 2,
                    "previous_pointer": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr5": 11,
                    "ptr_8": 1,
                    "ptr_var_5": 1,
                    "temp2": 1,
                    "temp_next_block": 1,
                    "temp_pointer3": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_2": 1,
                    "undefined_pointer3": 1
                },
                "puVar9": {
                    "dat_ptr": 1,
                    "header_ptr": 1,
                    "next_ptr": 1,
                    "pointer3": 1,
                    "pointer6": 3,
                    "pointer_address": 1,
                    "prev_chunk": 1,
                    "ptr3": 1,
                    "ptr4": 1,
                    "ptr6": 11,
                    "ptr_9": 1,
                    "ptr_var_6": 1,
                    "target_ptr": 1,
                    "temp3": 1,
                    "temp_pointer4": 1,
                    "temp_prev_block": 1,
                    "temp_ptr": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_3": 1
                },
                "uVar11": {
                    "block_flag": 1,
                    "flag": 9,
                    "flag1": 7,
                    "flag_1": 1,
                    "flag_var_1": 1,
                    "temp1": 2,
                    "temp4": 1,
                    "temp_value": 1,
                    "value3": 2,
                    "var3": 2,
                    "var4": 3,
                    "var_11": 1
                },
                "uVar12": {
                    "address": 1,
                    "block_offset": 1,
                    "data": 1,
                    "flag2": 7,
                    "flag_2": 1,
                    "flag_var_2": 1,
                    "header_flag": 1,
                    "pointer_address2": 1,
                    "temp2": 2,
                    "temp5": 1,
                    "temp_flag": 1,
                    "temp_value": 2,
                    "temp_value2": 1,
                    "value": 2,
                    "value4": 2,
                    "var4": 2,
                    "var5": 3,
                    "var_12": 1
                },
                "uVar5": {
                    "block_size": 3,
                    "current_size": 1,
                    "length": 1,
                    "size": 6,
                    "size1": 2,
                    "size_var_1": 1,
                    "temp1": 1,
                    "total_size": 4,
                    "value1": 5,
                    "var1": 6,
                    "var_5": 1
                },
                "uVar6": {
                    "block_size": 2,
                    "chunk_size": 1,
                    "entry_size": 1,
                    "next_block_size": 3,
                    "next_size": 3,
                    "offset": 2,
                    "size": 1,
                    "size2": 4,
                    "size_var_2": 1,
                    "temp2": 1,
                    "value2": 5,
                    "var2": 6,
                    "var_6": 1
                }
            },
            "called": [
                "FUN_080090a8",
                "FUN_0800884c",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08008af8",
                "FUN_08005e9c"
            ],
            "code": "\nvoid reorganize_memory_blocks_080088ec(undefined4 param1,int param2,undefined4 param3,undefined4 param4)\n\n{\n  int index;\n  uint *ptr1;\n  uint *ptr2;\n  undefined *ptr3;\n  uint var1;\n  uint var2;\n  undefined *ptr4;\n  undefined *ptr5;\n  undefined4 *ptr6;\n  int count;\n  uint flag;\n  uint flag2;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUN_080090a8();\n  flag = *(uint *)(param2 + -4);\n  ptr1 = (uint *)(param2 + -8);\n  var1 = flag & 0xfffffffe;\n  ptr2 = (uint *)((int)ptr1 + var1);\n  var2 = ptr2[1] & 0xfffffffc;\n  if (DAT_20000454 == ptr2) {\n    var1 = var1 + var2;\n    if ((flag & 1) == 0) {\n      ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n      var2 = ptr1[2];\n      flag = ptr1[3];\n      var1 = var1 + *(int *)(param2 + -8);\n      *(uint *)(var2 + 0xc) = flag;\n      *(uint *)(flag + 8) = var2;\n    }\n    var2 = DAT_20000858;\n    ptr1[1] = var1 | 1;\n    DAT_20000454 = ptr1;\n    if (var2 <= var1) {\n      FUN_0800884c(param1,DAT_20000a44);\n    }\nlabel1:\n    FUN_080090b4(param1);\n    return;\n  }\n  ptr2[1] = var2;\n  if ((flag & 1) == 0) {\n    ptr1 = (uint *)((int)ptr1 - *(int *)(param2 + -8));\n    ptr6 = (undefined4 *)ptr1[2];\n    var1 = var1 + *(int *)(param2 + -8);\n    flag = *(uint *)((int)ptr2 + var2 + 4) & 1;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      if (flag == 0) {\n        flag = ptr2[2];\n        flag2 = ptr2[3];\n        var1 = var1 + var2;\n        *(uint *)(flag + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag;\n        ptr1[1] = var1 | 1;\n        *(uint *)((int)ptr1 + var1) = var1;\n      }\n      else {\n        ptr1[1] = var1 | 1;\n        *ptr2 = var1;\n      }\n      goto label1;\n    }\n    flag2 = ptr1[3];\n    ptr6[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = ptr6;\n  }\n  else {\n    flag = *(uint *)((int)ptr2 + var2 + 4) & 1;\n  }\n  if (flag == 0) {\n    ptr6 = (undefined4 *)ptr2[2];\n    var1 = var1 + var2;\n    if ((uint **)ptr6 == &DAT_20000454) {\n      DAT_2000045c = ptr1;\n      DAT_20000460 = ptr1;\n      ptr1[2] = (uint)&DAT_20000454;\n      ptr1[3] = (uint)&DAT_20000454;\n      ptr1[1] = var1 | 1;\n      *(uint *)((int)ptr1 + var1) = var1;\n      goto label1;\n    }\n    var2 = ptr2[3];\n    ptr6[3] = var2;\n    *(undefined4 **)(var2 + 8) = ptr6;\n    ptr1[1] = var1 | 1;\n    *(uint *)((int)ptr1 + var1) = var1;\n  }\n  else {\n    ptr1[1] = var1 | 1;\n    *(uint *)((int)ptr1 + var1) = var1;\n  }\n  if (var1 < 0x200) {\n    count = (var1 >> 3) + 1;\n    var1 = 1 << ((int)(var1 >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    var2 = *(uint *)(&DAT_2000044c + count * 8);\n    ptr1[2] = var2;\n    ptr1[3] = (uint)(&DAT_20000444 + count * 8);\n    DAT_20000450 = (undefined *)var1;\n    *(uint **)(&DAT_2000044c + count * 8) = ptr1;\n    *(uint **)(var2 + 0xc) = ptr1;\n    FUN_080090b4(param1,ptr1,var1,param4);\n    return;\n  }\n  var2 = var1 >> 9;\n  if (var2 < 5) {\n    count = ((var1 >> 6) + 0x39) * 8;\n    index = (var1 >> 6) + 0x38;\n  }\n  else if (var2 < 0x15) {\n    count = (var2 + 0x5c) * 8;\n    index = var2 + 0x5b;\n  }\n  else if (var2 < 0x55) {\n    count = ((var1 >> 0xc) + 0x6f) * 8;\n    index = (var1 >> 0xc) + 0x6e;\n  }\n  else if (var2 < 0x155) {\n    count = ((var1 >> 0xf) + 0x78) * 8;\n    index = (var1 >> 0xf) + 0x77;\n  }\n  else if (var2 < 0x555) {\n    count = ((var1 >> 0x12) + 0x7d) * 8;\n    index = (var1 >> 0x12) + 0x7c;\n  }\n  else {\n    count = 0x3f8;\n    index = 0x7e;\n  }\n  ptr3 = *(undefined **)(&DAT_2000044c + count);\n  ptr4 = &DAT_20000444 + count;\n  if (ptr4 == ptr3) {\n    ptr3 = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    ptr5 = ptr4;\n    DAT_20000450 = ptr3;\n  }\n  else {\n    do {\n      ptr5 = ptr3;\n      if ((*(uint *)(ptr3 + 4) & 0xfffffffc) <= var1) break;\n      ptr3 = *(undefined **)(ptr3 + 8);\n      ptr5 = ptr4;\n    } while (ptr4 != ptr3);\n    ptr4 = *(undefined **)(ptr5 + 0xc);\n  }\n  ptr1[2] = (uint)ptr5;\n  ptr1[3] = (uint)ptr4;\n  *(uint **)(ptr4 + 8) = ptr1;\n  *(uint **)(ptr5 + 0xc) = ptr1;\n  FUN_080090b4(param1,ptr1,ptr3,param4);\n  return;\n}\n\n",
            "current_name": "reorganize_memory_blocks_080088ec",
            "entrypoint": "0x080088ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080088ec": "reorganize_memory_blocks_080088ec",
                "LAB_080089f0": "label1",
                "iVar1": "index",
                "iVar10": "count",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "puVar2": "ptr1",
                "puVar3": "ptr2",
                "puVar4": "ptr3",
                "puVar7": "ptr4",
                "puVar8": "ptr5",
                "puVar9": "ptr6",
                "uVar11": "flag",
                "uVar12": "flag2",
                "uVar5": "var1",
                "uVar6": "var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "additional_data": {
                "0x2000085c": {
                    "default_address": 3,
                    "default_base_address": 1,
                    "default_offset": 4,
                    "default_return_value": 1,
                    "default_value": 4
                },
                "0x34": {
                    "offset": 2
                },
                "0xf0": {
                    "additional_offset": 2,
                    "offset": 3
                },
                "DAT_2000001c": {
                    "base_address": 2,
                    "data": 2
                },
                "FUN_08008ad4": {
                    "calculate_adjusted_value": 7,
                    "calculate_base_address": 4,
                    "calculate_final_value": 2,
                    "calculate_modified_value": 3,
                    "calculate_offset": 4,
                    "calculate_updated_value": 4,
                    "get_adjusted_address": 1,
                    "get_adjusted_value": 2,
                    "get_firmware_address": 1,
                    "get_start_address": 1,
                    "get_updated_value": 2
                },
                "PTR_08008ad4": {
                    "pointer": 1
                },
                "iVar1": {
                    "address": 2,
                    "base_address": 3,
                    "current_offset": 1,
                    "current_value": 8,
                    "offset": 3,
                    "original_value": 2,
                    "start_address_offset": 1,
                    "temp_value": 1,
                    "value": 9,
                    "value_to_check": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nint calculate_adjusted_value_08008ad4(void)\n\n{\n  int value;\n  \n  value = *(int *)(DAT_2000001c + 0x34);\n  if (value == 0) {\n    value = 0x2000085c;\n  }\n  return value + 0xf0;\n}\n\n",
            "current_name": "calculate_adjusted_value_08008ad4",
            "entrypoint": "0x08008ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ad4": "calculate_adjusted_value_08008ad4",
                "iVar1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "called": [],
            "calling": [
                "FUN_080090a8",
                "FUN_080098c0"
            ],
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af4": {
            "called": [],
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af4",
            "entrypoint": "0x08008af4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af8": {
            "additional_data": {
                "DAT_20000444": {
                    "free_start": 1
                },
                "DAT_2000044c": {
                    "first_used_category": 1,
                    "free_end": 1,
                    "small_page_list": 1
                },
                "DAT_20000450": {
                    "mask_bit": 1,
                    "page_size": 1,
                    "used_categories": 1
                },
                "DAT_20000454": {
                    "free_list": 1,
                    "heap_start": 1,
                    "memory_pool_start": 1
                },
                "DAT_20000458": {
                    "free_next": 1,
                    "large_page_list": 1,
                    "unused_categories": 1
                },
                "DAT_2000045c": {
                    "allocated_memory_list": 1,
                    "first_free_block": 1,
                    "header_list": 1
                },
                "DAT_20000460": {
                    "header_list_end": 1,
                    "last_free_block": 1,
                    "memory_pool_end": 1
                },
                "DAT_20000854": {
                    "last_allocated_memory": 1,
                    "prev_allocated_block": 1,
                    "prev_chunk_end": 1
                },
                "DAT_20000a14": {
                    "next_avail": 1,
                    "pool_end_diff": 1,
                    "real_start": 1
                },
                "DAT_20000a3c": {
                    "highest_allocated_block": 1,
                    "max_allocated_memory": 1,
                    "max_avail": 1
                },
                "DAT_20000a40": {
                    "high_watermark": 1,
                    "highest_block": 1,
                    "max_pool_memory": 1
                },
                "DAT_20000a44": {
                    "chunk_offset": 1,
                    "pool_start_diff": 1
                },
                "FUN_08008af8": {
                    "allocate_memory": 20,
                    "allocate_memory_block": 10,
                    "allocate_memory_chunk": 1
                },
                "iVar14": {
                    "current_size": 1,
                    "index2": 2,
                    "loop_variable_4": 1,
                    "new_header_ptr": 1,
                    "new_index": 1,
                    "next_offset": 1,
                    "previous_block_index": 1,
                    "start_index": 1,
                    "temp": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp8": 2,
                    "temp_11": 1,
                    "temp_14": 1,
                    "temp_index": 1,
                    "temp_offset": 1,
                    "temp_value8": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "tmp_var": 1,
                    "var8": 1
                },
                "iVar4": {
                    "block_index": 1,
                    "header_size": 1,
                    "index": 8,
                    "index1": 1,
                    "length": 1,
                    "loop_counter": 1,
                    "loop_variable_1": 1,
                    "offset": 3,
                    "temp3": 3,
                    "temp_4": 2,
                    "temp_offset2": 1,
                    "temp_value3": 1,
                    "temp_var": 2,
                    "temp_var_2": 1,
                    "var3": 2,
                    "var_4": 1
                },
                "param_1": {
                    "block_address": 1,
                    "error_code": 1,
                    "input_ptr": 1,
                    "memory": 1,
                    "memory_block": 1,
                    "memory_block_ptr": 1,
                    "memory_location": 2,
                    "output_pointer": 1,
                    "output_ptr": 2,
                    "param_pointer": 2,
                    "pointer_to_block": 1,
                    "ptr": 2,
                    "ptr_array": 1,
                    "ptr_flags": 1,
                    "ptr_length": 1,
                    "ptr_to_memory": 1,
                    "result": 7,
                    "size": 1,
                    "size_ptr": 1,
                    "start_address": 1
                },
                "param_2": {
                    "block_size": 3,
                    "input_size": 1,
                    "num_bytes": 1,
                    "num_units": 1,
                    "requested_size": 2,
                    "size": 21,
                    "size_requested": 1
                },
                "piVar11": {
                    "allocated_memory": 1,
                    "header_ptr": 1,
                    "memory_block_pointer": 1,
                    "new_pointer": 1,
                    "ptr6": 1,
                    "ptr_new": 1,
                    "ptr_result": 1,
                    "result": 9,
                    "result2": 2,
                    "result_pointer": 3,
                    "result_ptr": 6,
                    "returned_ptr": 1
                },
                "puVar1": {
                    "current_block": 2,
                    "end_address": 1,
                    "pointer": 4,
                    "pointer1": 1,
                    "ptr": 3,
                    "ptr1": 6,
                    "ptr_1": 1,
                    "ptr_temp1": 1,
                    "ptr_temp_1": 1,
                    "start_block": 1,
                    "temp_1": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 2,
                    "temp_ptr1": 1
                },
                "puVar10": {
                    "block": 2,
                    "block_address": 1,
                    "block_ptr": 1,
                    "current_block": 1,
                    "current_pointer": 1,
                    "iterator": 1,
                    "loop_pointer_4": 1,
                    "node": 1,
                    "pointer5": 1,
                    "prev_block": 1,
                    "ptr1": 1,
                    "ptr4": 1,
                    "ptr5": 7,
                    "ptr_5": 1,
                    "ptr_current": 1,
                    "ptr_temp_10": 1,
                    "temp_10": 1,
                    "temp_pointer3": 1,
                    "temp_pointer4": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_5": 1
                },
                "puVar15": {
                    "block_header": 3,
                    "buffer_ptr": 1,
                    "current_block": 1,
                    "first_block": 1,
                    "free_block": 1,
                    "freed_block": 1,
                    "new_block_header": 1,
                    "new_header_ptr": 1,
                    "new_node": 1,
                    "new_pointer": 1,
                    "new_pointer2": 1,
                    "pointer6": 1,
                    "prev_free_block": 1,
                    "ptr6": 5,
                    "ptr7": 1,
                    "ptr_6": 1,
                    "ptr_temp5": 1,
                    "ptr_temp_15": 1,
                    "result_ptr2": 1,
                    "temp_12": 1,
                    "temp_ptr5": 1,
                    "temp_ptr6": 1,
                    "temp_ptr_6": 1,
                    "temporary_ptr1": 1
                },
                "puVar16": {
                    "category_iterator": 1,
                    "cur_free_block": 1,
                    "current_block2": 1,
                    "current_pointer": 1,
                    "freed_block_end": 1,
                    "last_block": 1,
                    "loop_pointer_5": 1,
                    "new_pointer3": 1,
                    "pointer7": 1,
                    "prev_block_header": 1,
                    "ptr7": 5,
                    "ptr8": 1,
                    "ptr_7": 1,
                    "ptr_temp6": 1,
                    "ptr_temp_16": 1,
                    "result_ptr3": 1,
                    "temp_13": 1,
                    "temp_block": 1,
                    "temp_header_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr2": 1,
                    "temp_ptr6": 1,
                    "temp_ptr7": 1,
                    "temp_ptr_3": 1,
                    "temp_ptr_7": 1,
                    "temporary_ptr2": 1
                },
                "puVar5": {
                    "block": 2,
                    "block_end": 1,
                    "current_block": 2,
                    "end_address": 1,
                    "header_ptr": 1,
                    "loop_pointer_1": 1,
                    "next_block": 1,
                    "node_next": 1,
                    "pointer2": 2,
                    "ptr2": 8,
                    "ptr_2": 1,
                    "ptr_temp2": 1,
                    "ptr_temp_5": 1,
                    "temp_5": 1,
                    "temp_pointer1": 1,
                    "temp_pointer4": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_2": 1
                },
                "puVar8": {
                    "current_block_header": 1,
                    "loop_pointer_2": 1,
                    "pointer3": 1,
                    "prev_block": 2,
                    "previous_block": 1,
                    "ptr3": 7,
                    "ptr5": 1,
                    "ptr_3": 1,
                    "ptr_iterator": 1,
                    "ptr_temp3": 1,
                    "ptr_temp_8": 1,
                    "temp_8": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr3": 2,
                    "temp_ptr_2": 1,
                    "temp_ptr_3": 1
                },
                "puVar9": {
                    "base_address": 1,
                    "final_ptr": 1,
                    "loop_pointer_3": 1,
                    "new_block": 3,
                    "new_block_address": 1,
                    "new_block_start": 1,
                    "next_block": 1,
                    "pointer3": 1,
                    "pointer4": 1,
                    "ptr3": 1,
                    "ptr4": 7,
                    "ptr_4": 1,
                    "ptr_temp4": 1,
                    "ptr_temp_9": 1,
                    "temp_9": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_ptr4": 2,
                    "temp_ptr_4": 1
                },
                "uVar12": {
                    "adjusted_block_size": 2,
                    "adjusted_size": 13,
                    "new_size": 1,
                    "rounded_size": 1,
                    "size2": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_size": 1,
                    "temp_value6": 1,
                    "temp_var_1": 1,
                    "total_size": 1,
                    "var12": 1,
                    "var6": 2
                },
                "uVar13": {
                    "adjusted_size2": 1,
                    "adjusted_size_rounded": 1,
                    "aligned_block_size": 2,
                    "aligned_size": 13,
                    "rounded_size": 1,
                    "rounded_size_aligned": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_value7": 1,
                    "temp_var_2": 1,
                    "var13": 1,
                    "var7": 2
                },
                "uVar14": {
                    "var8": 1
                },
                "uVar2": {
                    "block_size": 1,
                    "category": 1,
                    "count": 1,
                    "counter": 1,
                    "index": 3,
                    "mask": 1,
                    "shifted_size": 1,
                    "temp1": 7,
                    "temp_2": 2,
                    "temp_size": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_variable_1": 1,
                    "u1": 1,
                    "units_per_block": 1,
                    "var1": 3,
                    "var_2": 1
                },
                "uVar3": {
                    "difference": 1,
                    "offset": 1,
                    "remaining_size": 2,
                    "remaining_units": 1,
                    "temp": 3,
                    "temp2": 7,
                    "temp_3": 2,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_variable_2": 1,
                    "u2": 1,
                    "unused": 1,
                    "var2": 3,
                    "var_3": 1
                },
                "uVar6": {
                    "block_size": 1,
                    "category_index": 1,
                    "cutoff": 1,
                    "index2": 1,
                    "loop_var": 1,
                    "loop_variable_2": 1,
                    "mask": 1,
                    "shift": 2,
                    "shift_count": 1,
                    "temp": 1,
                    "temp3": 4,
                    "temp4": 3,
                    "temp_6": 2,
                    "temp_counter": 1,
                    "temp_size_2": 1,
                    "temp_value4": 1,
                    "temp_var3": 1,
                    "u3": 1,
                    "var3": 1,
                    "var4": 2,
                    "var6": 1,
                    "var_6": 1
                },
                "uVar7": {
                    "block_size": 1,
                    "loop_var2": 1,
                    "loop_variable_3": 1,
                    "mask": 1,
                    "target_block_size": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp4": 4,
                    "temp5": 3,
                    "temp_7": 2,
                    "temp_size": 1,
                    "temp_value5": 1,
                    "temp_var4": 1,
                    "temp_var_3": 1,
                    "tmp_value": 1,
                    "u4": 1,
                    "var4": 1,
                    "var5": 2,
                    "var7": 1,
                    "var_7": 1
                }
            },
            "called": [
                "FUN_08009744",
                "FUN_080090a8",
                "FUN_080088ec",
                "FUN_080090b4"
            ],
            "calling": [
                "FUN_08009980",
                "FUN_080097cc",
                "FUN_08009adc",
                "FUN_08005e9c"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_08008af8(undefined4 *result,uint size)\n\n{\n  undefined *ptr1;\n  uint temp1;\n  uint temp2;\n  int index;\n  undefined *ptr2;\n  uint temp3;\n  uint temp4;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result;\n  uint adjusted_size;\n  uint aligned_size;\n  int index2;\n  undefined4 *ptr6;\n  undefined4 *ptr7;\n  \n  adjusted_size = size + 0xb;\n  if (adjusted_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    FUN_080090a8();\n    aligned_size = 0x10;\n    index = 0x18;\n    adjusted_size = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index);\n    if ((ptr5 != &DAT_20000444 + index) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index), &DAT_2000044c + index != ptr5)) {\n      index = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      adjusted_size = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      index2 = *(int *)(ptr5 + 8);\n      *(int *)(index2 + 0xc) = index;\n      *(int *)(index + 8) = index2;\n      *(uint *)(ptr2 + 4) = adjusted_size | 1;\n      FUN_080090b4(result);\n      return (int *)(ptr5 + 8);\n    }\n    adjusted_size = adjusted_size + 2;\n  }\n  else {\n    aligned_size = adjusted_size & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_08008c7a:\n      *result = 0xc;\n      return (int *)0x0;\n    }\n    FUN_080090a8();\n    if (aligned_size < 0x1f8) {\n      adjusted_size = adjusted_size >> 3;\n      index = aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    temp1 = adjusted_size >> 9;\n    if (temp1 == 0) {\n      index = 0x200;\n      temp3 = 0x40;\n      temp1 = 0x3f;\n    }\n    else if (temp1 < 5) {\n      temp3 = (adjusted_size >> 6) + 0x39;\n      temp1 = (adjusted_size >> 6) + 0x38;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x15) {\n      temp3 = temp1 + 0x5c;\n      temp1 = temp1 + 0x5b;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x55) {\n      temp3 = (adjusted_size >> 0xc) + 0x6f;\n      temp1 = (adjusted_size >> 0xc) + 0x6e;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x155) {\n      temp3 = (adjusted_size >> 0xf) + 0x78;\n      temp1 = (adjusted_size >> 0xf) + 0x77;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x555) {\n      temp3 = (adjusted_size >> 0x12) + 0x7d;\n      temp1 = (adjusted_size >> 0x12) + 0x7c;\n      index = temp3 * 8;\n    }\n    else {\n      index = 0x3f8;\n      temp3 = 0x7f;\n      temp1 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index); adjusted_size = temp3,\n        &DAT_20000444 + index != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      index2 = (*(uint *)(ptr5 + 4) & 0xfffffffc) - aligned_size;\n      adjusted_size = temp1;\n      if (0xf < index2) break;\n      if (-1 < index2) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        adjusted_size = *(uint *)(ptr2 + 4);\n        index = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  ptr6 = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    temp3 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    temp1 = DAT_20000450;\n    if (temp3 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    temp3 = DAT_2000045c[1];\n    temp4 = temp3 & 0xfffffffc;\n    temp1 = temp4 - aligned_size;\n    if (0xf < (int)temp1) {\n      ptr7 = (undefined4 *)(aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = aligned_size | 1;\n      DAT_2000045c = ptr7;\n      DAT_20000460 = ptr7;\n      ptr7[2] = &DAT_20000454;\n      ptr7[3] = &DAT_20000454;\n      ptr7[1] = temp1 | 1;\n      *(uint *)((int)ptr6 + temp4) = temp1;\n      FUN_080090b4(result);\n      return ptr6 + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp1) {\n      *(uint *)((int)ptr6 + temp4 + 4) = *(uint *)((int)ptr6 + temp4 + 4) | 1;\n      FUN_080090b4(result);\n      return ptr6 + 2;\n    }\n    if (temp4 < 0x200) {\n      index = (temp3 >> 3) + 1;\n      index2 = *(int *)(&DAT_2000044c + index * 8);\n      temp1 = 1 << ((int)(temp3 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      ptr6[2] = index2;\n      ptr6[3] = &DAT_20000444 + index * 8;\n      DAT_20000450 = temp1;\n      *(undefined4 **)(&DAT_2000044c + index * 8) = ptr6;\n      *(undefined4 **)(index2 + 0xc) = ptr6;\n    }\n    else {\n      temp1 = temp3 >> 9;\n      if (temp1 < 5) {\n        index = ((temp3 >> 6) + 0x39) * 8;\n        index2 = (temp3 >> 6) + 0x38;\n      }\n      else if (temp1 < 0x15) {\n        index = (temp1 + 0x5c) * 8;\n        index2 = temp1 + 0x5b;\n      }\n      else if (temp1 < 0x55) {\n        index = ((temp3 >> 0xc) + 0x6f) * 8;\n        index2 = (temp3 >> 0xc) + 0x6e;\n      }\n      else if (temp1 < 0x155) {\n        index = ((temp3 >> 0xf) + 0x78) * 8;\n        index2 = (temp3 >> 0xf) + 0x77;\n      }\n      else if (temp1 < 0x555) {\n        index = ((temp3 >> 0x12) + 0x7d) * 8;\n        index2 = (temp3 >> 0x12) + 0x7c;\n      }\n      else {\n        index = 0x3f8;\n        index2 = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index);\n      ptr2 = &DAT_20000444 + index;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (index2 >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= temp4) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      temp1 = DAT_20000450;\n      ptr6[2] = ptr5;\n      ptr6[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = ptr6;\n      *(undefined4 **)(ptr5 + 0xc) = ptr6;\n    }\n    temp3 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    if (temp3 <= temp1) {\nLAB_08008c06:\n      if ((temp3 & temp1) == 0) {\n        adjusted_size = adjusted_size & 0xfffffffc;\n        do {\n          temp3 = temp3 << 1;\n          adjusted_size = adjusted_size + 4;\n        } while ((temp3 & temp1) == 0);\n      }\n      do {\n        ptr7 = (undefined4 *)(&DAT_2000044c + adjusted_size * 8);\n        temp1 = adjusted_size;\n        ptr6 = ptr7;\n        do {\n          for (ptr3 = (undefined4 *)ptr6[3]; ptr6 != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            temp4 = ptr3[1] & 0xfffffffc;\n            temp2 = temp4 - aligned_size;\n            if (0xf < (int)temp2) {\n              index2 = ptr3[2];\n              index = ptr3[3];\n              ptr6 = (undefined4 *)(aligned_size + (int)ptr3);\n              ptr3[1] = aligned_size | 1;\n              *(int *)(index2 + 0xc) = index;\n              *(int *)(index + 8) = index2;\n              DAT_2000045c = ptr6;\n              DAT_20000460 = ptr6;\n              ptr6[2] = &DAT_20000454;\n              ptr6[3] = &DAT_20000454;\n              ptr6[1] = temp2 | 1;\n              *(uint *)((int)ptr3 + temp4) = temp2;\n              FUN_080090b4(result);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)temp2) {\n              index = ptr3[3];\n              index2 = ptr3[2];\n              *(uint *)((int)ptr3 + temp4 + 4) = *(uint *)((int)ptr3 + temp4 + 4) | 1;\n              *(int *)(index2 + 0xc) = index;\n              *(int *)(index + 8) = index2;\n              FUN_080090b4(result);\n              return ptr3 + 2;\n            }\n          }\n          temp1 = temp1 + 1;\n          ptr6 = ptr6 + 2;\n        } while ((temp1 & 3) != 0);\n        do {\n          temp4 = adjusted_size & 3;\n          ptr6 = ptr7 + -2;\n          adjusted_size = adjusted_size - 1;\n          if (temp4 == 0) {\n            DAT_20000450 = DAT_20000450 & ~temp3;\n            break;\n          }\n          ptr7 = (undefined4 *)*ptr7;\n        } while (ptr7 == ptr6);\n        temp3 = temp3 * 2;\n        if ((DAT_20000450 <= temp3 && temp3 - DAT_20000450 != 0) || (adjusted_size = temp1, temp3 == 0))\n        break;\n        for (; (temp3 & DAT_20000450) == 0; temp3 = temp3 << 1) {\n          adjusted_size = adjusted_size + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  adjusted_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((aligned_size <= adjusted_size) && (temp1 = adjusted_size - aligned_size, 0xf < (int)temp1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp1 = aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp1 = aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)FUN_08009744(result,temp1);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + adjusted_size;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + temp1;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = adjusted_size + temp1 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp1;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      temp3 = (uint)ptr2 & 7;\n      if (temp3 == 0) {\n        index = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - temp3);\n        index = 0x1008 - temp3;\n      }\n      index = index - ((uint)(ptr2 + temp1) & 0xfff);\n      index2 = FUN_08009744(result,index);\n      if (index2 == -1) {\n        temp1 = 1;\n        index = 0;\n      }\n      else {\n        temp1 = (index2 - (int)ptr2) + index | 1;\n      }\n      ptr4 = DAT_20000a14 + index;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = temp1;\n      if (ptr5 != &DAT_2000044c) {\n        if (adjusted_size < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        adjusted_size = adjusted_size - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | adjusted_size;\n        *(undefined4 *)(ptr5 + adjusted_size + 4) = 5;\n        *(undefined4 *)(ptr5 + adjusted_size + 8) = 5;\n        if (0xf < adjusted_size) {\n          FUN_080088ec(result,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  temp1 = (adjusted_size & 0xfffffffc) - aligned_size;\n  if ((aligned_size <= (adjusted_size & 0xfffffffc)) && (0xf < (int)temp1)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + aligned_size;\n    *(uint *)(DAT_20000454 + 4) = aligned_size | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = temp1 | 1;\n    FUN_080090b4(result);\n    return result;\n  }\nLAB_08008eee:\n  FUN_080090b4(result);\n  return (int *)0x0;\n}\n\n",
            "current_name": "allocate_memory_block_08008af8",
            "entrypoint": "0x08008af8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af8": "allocate_memory_block_08008af8",
                "iVar14": "index2",
                "iVar4": "index",
                "param_1": "result",
                "param_2": "size",
                "piVar11": "result",
                "puVar1": "ptr1",
                "puVar10": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar5": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar12": "adjusted_size",
                "uVar13": "aligned_size",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800901c": {
            "additional_data": {
                "FUN_0800901c": {
                    "find_by_value": 1,
                    "find_byte": 1,
                    "find_byte_in_buffer": 1,
                    "find_byte_sequence": 15,
                    "find_char_sequence": 1,
                    "find_first_byte": 2,
                    "find_first_occurrence": 3,
                    "find_next_match": 1,
                    "find_next_uint": 1,
                    "find_pattern": 1,
                    "find_uint_sequence": 1,
                    "find_value_in_buffer": 1,
                    "reverse_bytes": 1,
                    "reverse_filter_bytes": 1
                },
                "LAB_0800904a": {
                    "check_alignment": 1
                },
                "LAB_08009050": {
                    "continue_search": 1
                },
                "LAB_0800906c": {
                    "end_search": 1
                },
                "bVar5": {
                    "end_flag": 1,
                    "is_empty": 2,
                    "is_end": 8,
                    "is_end_of_data": 1,
                    "is_end_of_loop": 1,
                    "is_end_reached": 3,
                    "is_final_iteration": 1,
                    "is_last_byte": 1,
                    "is_length_zero": 5,
                    "is_zero": 4,
                    "is_zero_length": 2,
                    "loop_condition": 1
                },
                "param_1": {
                    "array": 2,
                    "buffer": 5,
                    "byte_array": 1,
                    "byte_sequence": 1,
                    "data": 8,
                    "data_array": 3,
                    "data_ptr": 1,
                    "input": 2,
                    "input_array": 6,
                    "input_data": 1,
                    "sequence": 1
                },
                "param_2": {
                    "byte": 1,
                    "byte_sequence": 2,
                    "byte_to_find": 9,
                    "char": 1,
                    "length": 1,
                    "match_byte": 1,
                    "pattern": 3,
                    "search_byte": 3,
                    "search_value": 3,
                    "sequence": 2,
                    "sequence_length": 1,
                    "value": 4
                },
                "param_3": {
                    "array_length": 9,
                    "buffer_length": 2,
                    "buffer_size": 1,
                    "data_length": 1,
                    "input_length": 1,
                    "length": 13,
                    "sequence_length": 1,
                    "size": 3
                },
                "puVar3": {
                    "current": 2,
                    "current_byte": 9,
                    "current_data": 1,
                    "current_data_ptr": 1,
                    "current_element": 1,
                    "current_pointer": 1,
                    "current_position": 2,
                    "current_ptr": 5,
                    "ptr": 8
                },
                "uVar1": {
                    "filtered_byte": 1,
                    "result": 5,
                    "temp": 6,
                    "temp_result": 1,
                    "temp_val": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "tmp": 1,
                    "xor_result": 10,
                    "xored_val": 1,
                    "xored_value": 2
                },
                "uVar2": {
                    "byte_result": 1,
                    "byte_to_find_concat": 1,
                    "combined": 1,
                    "combined_byte": 1,
                    "combined_byte_sequence": 1,
                    "combined_bytes": 1,
                    "combined_pattern": 2,
                    "combined_val": 1,
                    "combined_value": 6,
                    "concatenated_byte": 1,
                    "concatenated_sequence": 1,
                    "concatenation": 1,
                    "remaining_length": 1,
                    "shifted_byte": 2,
                    "shifted_byte_to_find": 1,
                    "shifted_pattern": 1,
                    "shifted_search_value": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp_value2": 1,
                    "tmp2": 1,
                    "value16": 1
                },
                "uVar4": {
                    "byte": 2,
                    "byte_mask": 1,
                    "byte_value": 1,
                    "char_mask": 1,
                    "filtered_byte": 2,
                    "first_byte": 2,
                    "first_element": 1,
                    "lower_byte": 1,
                    "mask": 1,
                    "masked_byte": 6,
                    "masked_byte_to_find": 2,
                    "masked_pattern": 1,
                    "masked_search_value": 1,
                    "masked_value": 3,
                    "pattern_byte": 1,
                    "search_byte": 1,
                    "search_byte_mask": 1,
                    "search_byte_temp": 1,
                    "target_byte": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nuint * find_byte_sequence_0800901c(uint *data,uint byte_to_find,uint length)\n\n{\n  uint xor_result;\n  uint combined_value;\n  uint *current_byte;\n  uint masked_byte;\n  bool is_end;\n  \n  masked_byte = byte_to_find & 0xff;\n  if (((uint)data & 3) == 0) {\ncheck_alignment:\n    if (3 < length) {\n      combined_value = (byte_to_find & 0xff) << 8 | masked_byte;\n      current_byte = data;\n      do {\n        xor_result = *current_byte ^ (combined_value | combined_value << 0x10);\n        data = current_byte + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto continue_search;\n        length = length - 4;\n        current_byte = data;\n      } while (3 < length);\n    }\n    current_byte = data;\n    if (length == 0) {\n      data = (uint *)0x0;\n    }\n    else {\ncontinue_search:\n      data = current_byte;\n      if (*(byte *)data != masked_byte) {\n        current_byte = (uint *)(length + (int)data);\n        do {\n          data = (uint *)((int)data + 1);\n          if (current_byte == data) goto end_search;\n        } while (*(byte *)data != masked_byte);\n      }\n    }\n  }\n  else {\n    combined_value = length - 1;\n    if (length == 0) {\nend_search:\n      data = (uint *)0x0;\n    }\n    else if (*(byte *)data != masked_byte) {\n      current_byte = (uint *)((int)data + 1);\n      do {\n        data = current_byte;\n        length = combined_value;\n        if (((uint)data & 3) == 0) goto check_alignment;\n        is_end = combined_value == 0;\n        combined_value = combined_value - 1;\n        if (is_end) goto end_search;\n        current_byte = (uint *)((int)data + 1);\n      } while (*(byte *)data != masked_byte);\n    }\n  }\n  return data;\n}\n\n",
            "current_name": "find_byte_sequence_0800901c",
            "entrypoint": "0x0800901c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "LAB_0800904a": "check_alignment",
                "LAB_08009050": "continue_search",
                "LAB_0800906c": "end_search",
                "bVar5": "is_end",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "length",
                "puVar3": "current_byte",
                "uVar1": "xor_result",
                "uVar2": "combined_value",
                "uVar4": "masked_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090a8": {
            "additional_data": {
                "FUNC_08008af0": {
                    "initialize_data": 2,
                    "perform_initialization": 1,
                    "process_data": 25,
                    "set_data": 1,
                    "update_data_pointer": 1
                },
                "FUN_080090a8": {
                    "execute_initialization": 2,
                    "initialize_data": 25,
                    "initialize_data_structure": 2,
                    "initialize_data_structures": 2
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_080088ec",
                "FUN_0800884c",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "code": "\nvoid initialize_data_structure_080090a8(void)\n\n{\n  FUNC_08008af0(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_080090a8",
            "entrypoint": "0x080090a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090a8": "initialize_data_structure_080090a8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090b4": {
            "additional_data": {
                "FUNC_08008af4": {
                    "called_function": 1,
                    "configure_data": 1,
                    "func_initialize_data": 1,
                    "function1": 1,
                    "initialize_data": 3,
                    "process_data": 23
                },
                "FUN_080090b4": {
                    "execute_initialization": 1,
                    "initialize": 1,
                    "initialize_data": 25,
                    "initialize_data_structures": 3,
                    "process_data": 1
                }
            },
            "called": [
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "code": "\nvoid initialize_data_structures_080090b4(void)\n\n{\n  FUNC_08008af4(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_080090b4",
            "entrypoint": "0x080090b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090b4": "initialize_data_structures_080090b4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090c0": {
            "additional_data": {
                "FUN_080090c0": {
                    "find_or_create_element": 1,
                    "find_or_create_entry": 3,
                    "find_or_create_item": 1,
                    "get_data_at_index": 1,
                    "get_entry": 1,
                    "get_or_create_data": 3,
                    "get_or_create_data_entry": 2,
                    "get_or_create_entry": 5,
                    "get_or_create_item": 1,
                    "get_or_create_value": 8,
                    "retrieve_or_create_data_element": 1,
                    "reverse_lookup_entry": 1
                },
                "FUN_08009980": {
                    "allocate_memory": 7
                },
                "iVar2": {
                    "array_pointer": 2,
                    "array_ptr": 2,
                    "data": 1,
                    "data_element": 1,
                    "data_entry": 1,
                    "data_offset": 1,
                    "data_ptr": 1,
                    "element_list_size": 1,
                    "entry_cache": 1,
                    "entry_index": 3,
                    "entry_list_pointer": 1,
                    "entry_offset": 3,
                    "entry_pointer": 1,
                    "entry_ptr": 1,
                    "entry_set_ptr": 1,
                    "index": 1,
                    "item_list_address": 1,
                    "list_address": 1,
                    "list_ptr": 1,
                    "ptr_value": 1,
                    "structure_ptr": 1,
                    "table_index": 1,
                    "temp_var1": 1,
                    "value": 1,
                    "value_ptr": 1
                },
                "param_1": {
                    "base_address": 3,
                    "data": 2,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "data_structure": 3,
                    "element_list": 1,
                    "entry": 4,
                    "entry_list": 2,
                    "entry_set": 1,
                    "entry_table": 1,
                    "initial_value": 1,
                    "input": 1,
                    "input1": 1,
                    "input_param": 2,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "item_table": 1,
                    "lookup_table": 1,
                    "object_ptr": 1,
                    "original_value": 1,
                    "value_array": 1
                },
                "param_2": {
                    "entry_index": 1,
                    "index": 27,
                    "item_index": 1,
                    "offset": 1,
                    "size_param": 1
                },
                "param_3": {
                    "size": 2
                },
                "puVar1": {
                    "data_ptr": 3,
                    "element_pointer": 2,
                    "entry": 5,
                    "entry_pointer": 2,
                    "entry_ptr": 4,
                    "existing_entry": 1,
                    "existing_ptr": 1,
                    "existing_value": 1,
                    "item_address": 1,
                    "item_pointer": 1,
                    "pointer_to_data": 1,
                    "ptr_var": 1,
                    "result_ptr": 1,
                    "value": 1,
                    "value_pointer": 3,
                    "value_ptr": 3
                }
            },
            "called": [
                "FUN_08009980"
            ],
            "calling": [
                "FUN_08009530",
                "FUN_08009244",
                "FUN_08009120",
                "FUN_080093a4",
                "FUN_08009444",
                "FUN_080079e8",
                "FUN_08009630",
                "FUN_08009258"
            ],
            "code": "\nundefined4 * get_or_create_data_entry_080090c0(int entry,uint index)\n\n{\n  undefined4 *entry;\n  int entry_offset;\n  \n  entry_offset = *(int *)(entry + 0x4c);\n  if (entry_offset == 0) {\n    entry_offset = FUN_08009980(entry,4,0x21);\n    *(int *)(entry + 0x4c) = entry_offset;\n    if (entry_offset == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  entry = *(undefined4 **)(entry_offset + index * 4);\n  if (entry == (undefined4 *)0x0) {\n    entry_offset = 1 << (index & 0xff);\n    entry = (undefined4 *)FUN_08009980(entry,1,(entry_offset + 5) * 4);\n    if (entry == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    entry[1] = index;\n    entry[2] = entry_offset;\n  }\n  else {\n    *(undefined4 *)(entry_offset + index * 4) = *entry;\n  }\n  entry[3] = 0;\n  entry[4] = 0;\n  return entry;\n}\n\n",
            "current_name": "get_or_create_data_entry_080090c0",
            "entrypoint": "0x080090c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090c0": "get_or_create_data_entry_080090c0",
                "iVar2": "entry_offset",
                "param_1": "entry",
                "param_2": "index",
                "puVar1": "entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800910c": {
            "additional_data": {
                "FUN_0800910c": {
                    "copy_and_replace_value": 1,
                    "copy_and_store_value": 1,
                    "copy_and_update_value": 1,
                    "copy_from_pointer": 1,
                    "copy_value": 1,
                    "copy_value_and_swap": 1,
                    "copy_value_by_index": 1,
                    "copy_value_to_pointer": 1,
                    "extract_and_assign_value": 4,
                    "extract_and_assign_value_to_pointer": 1,
                    "extract_and_store_value": 2,
                    "extract_and_swap_data": 1,
                    "extract_and_swap_values": 1,
                    "extract_data": 3,
                    "extract_data_and_swap": 1,
                    "extract_element_and_swap": 1,
                    "extract_value_and_assign": 1,
                    "extract_value_and_swap": 6,
                    "extract_value_and_update": 1,
                    "extract_value_and_update_list": 1
                },
                "iVar1": {
                    "address_offset": 1,
                    "array_address": 1,
                    "array_base_address": 1,
                    "array_offset": 2,
                    "base_address": 1,
                    "base_var": 1,
                    "buffer_offset": 1,
                    "data_address": 3,
                    "data_array": 2,
                    "data_offset": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_start_index": 1,
                    "destination_address": 1,
                    "destination_offset": 1,
                    "list_address": 1,
                    "offset": 1,
                    "temp_var1": 1,
                    "temp_variable": 1,
                    "temporary_variable": 1
                },
                "param_1": {
                    "array_base": 1,
                    "base_addr": 1,
                    "base_address": 5,
                    "data_offset": 2,
                    "data_pointer": 1,
                    "index": 1,
                    "input_address": 2,
                    "input_array_address": 1,
                    "input_offset": 3,
                    "input_pointer": 2,
                    "input_ptr": 1,
                    "input_value": 1,
                    "list_base_address": 1,
                    "memory_address": 1,
                    "offset": 2,
                    "param_offset": 1,
                    "source_address": 1,
                    "source_offset": 3,
                    "source_pointer": 1
                },
                "param_2": {
                    "data_pointer": 1,
                    "dest_address": 1,
                    "destination_offset": 1,
                    "destination_pointer": 3,
                    "output": 1,
                    "output_array": 3,
                    "output_pointer": 9,
                    "output_ptr": 3,
                    "output_value_address": 1,
                    "pointer": 1,
                    "target_array": 1,
                    "target_data": 1,
                    "target_value": 1,
                    "value_pointer": 2,
                    "value_ptr": 1,
                    "values": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid extract_and_assign_value_to_pointer_0800910c(int base_address,undefined4 *output_pointer)\n\n{\n  int data_address;\n  \n  if (output_pointer != (undefined4 *)0x0) {\n    data_address = *(int *)(base_address + 0x4c);\n    *output_pointer = *(undefined4 *)(data_address + output_pointer[1] * 4);\n    *(undefined4 **)(data_address + output_pointer[1] * 4) = output_pointer;\n  }\n  return;\n}\n\n",
            "current_name": "extract_and_assign_value_to_pointer_0800910c",
            "entrypoint": "0x0800910c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800910c": "extract_and_assign_value_to_pointer_0800910c",
                "iVar1": "data_address",
                "param_1": "base_address",
                "param_2": "output_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009120": {
            "additional_data": {
                "FUN_08001084": {
                    "copy_data": 5,
                    "copy_memory": 2
                },
                "FUN_080090c0": {
                    "allocate_memory": 7
                },
                "FUN_08009120": {
                    "calculate_checksum": 13,
                    "calculate_hash": 2,
                    "calculate_product": 1,
                    "decode_and_modify": 1,
                    "decode_data": 1,
                    "perform_calculation": 2,
                    "process_data": 1,
                    "update_array_with_multiplication": 1,
                    "update_array_with_multiplier": 2
                },
                "iVar3": {
                    "args_length": 1,
                    "array_length": 13,
                    "array_size": 5,
                    "buffer_size": 1,
                    "checksum_array_size": 1,
                    "data_length": 1,
                    "length": 3,
                    "num_elements": 3,
                    "num_iterations": 1,
                    "num_words": 1,
                    "output_data_length": 1
                },
                "iVar5": {
                    "count": 2,
                    "counter": 18,
                    "i": 1,
                    "index": 9,
                    "iterator": 1
                },
                "param_1": {
                    "array_size": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "input": 7,
                    "input1": 1,
                    "input_data": 1,
                    "input_int": 1,
                    "input_length": 2,
                    "input_param": 4,
                    "input_size": 5,
                    "input_value": 4,
                    "num_iterations": 1
                },
                "param_2": {
                    "array": 4,
                    "checksum_array": 2,
                    "data": 3,
                    "data_pointer": 1,
                    "function_args": 1,
                    "hash_array": 1,
                    "input_array": 10,
                    "input_buffer": 1,
                    "output": 4,
                    "output_array": 2,
                    "output_data": 1,
                    "output_param": 1
                },
                "param_3": {
                    "multiplier": 30,
                    "scaling_factor": 1
                },
                "param_4": {
                    "accumulator": 3,
                    "carry": 12,
                    "carryover": 1,
                    "checksum": 8,
                    "hash": 1,
                    "initial_checksum": 2,
                    "initial_value": 4
                },
                "puVar1": {
                    "checksum_array_ptr": 1,
                    "output_array": 2,
                    "output_data_ptr": 1,
                    "result": 13,
                    "result_array": 9,
                    "result_ptr": 2,
                    "updated_array": 3
                },
                "puVar4": {
                    "args_ptr": 1,
                    "array_iterator": 1,
                    "array_pointer": 8,
                    "array_ptr": 2,
                    "buffer_ptr": 1,
                    "current_element": 7,
                    "data_ptr": 5,
                    "hash_pointer": 1,
                    "output_data_iterator": 1,
                    "p_data": 1,
                    "ptr": 3
                },
                "uVar2": {
                    "carry": 7,
                    "carry_extension": 2,
                    "carry_temp": 1,
                    "temp": 6,
                    "temp_calculation": 1,
                    "temp_hash": 1,
                    "temp_result": 2,
                    "temp_value": 3,
                    "temp_variable": 2,
                    "tmp": 1,
                    "u_var2": 1,
                    "upper_carry": 2,
                    "upper_checksum": 1,
                    "upper_result": 1
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * calculate_checksum_08009120(int input,undefined4 *input_array,int multiplier,uint carry)\n\n{\n  undefined4 *result;\n  uint carry;\n  int array_length;\n  uint *array_pointer;\n  int counter;\n  \n  counter = 0;\n  array_length = input_array[4];\n  array_pointer = input_array + 5;\n  do {\n    counter = counter + 1;\n    carry = multiplier * (*array_pointer & 0xffff) + carry;\n    carry = multiplier * (*array_pointer >> 0x10) + (carry >> 0x10);\n    *array_pointer = (carry & 0xffff) + carry * 0x10000;\n    carry = carry >> 0x10;\n    array_pointer = array_pointer + 1;\n  } while (counter < array_length);\n  result = input_array;\n  if (carry != 0) {\n    if ((int)input_array[2] <= array_length) {\n      result = (undefined4 *)FUN_080090c0(input,input_array[1] + 1);\n      FUN_08001084(result + 3,input_array + 3,(input_array[4] + 2) * 4);\n      counter = *(int *)(input + 0x4c);\n      *input_array = *(undefined4 *)(counter + input_array[1] * 4);\n      *(undefined4 **)(counter + input_array[1] * 4) = input_array;\n    }\n    result[array_length + 5] = carry;\n    result[4] = array_length + 1;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_checksum_08009120",
            "entrypoint": "0x08009120",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "iVar3": "array_length",
                "iVar5": "counter",
                "param_1": "input",
                "param_2": "input_array",
                "param_3": "multiplier",
                "param_4": "carry",
                "puVar1": "result",
                "puVar4": "array_pointer",
                "uVar2": "carry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091a4": {
            "additional_data": {
                "0x20": {
                    "32": 1,
                    "max_bit_length": 1
                },
                "0xc0000000": {
                    "mask4": 1,
                    "mask_30_bit": 1
                },
                "0xf0000000": {
                    "mask3": 1,
                    "mask_28_bit": 1
                },
                "0xff000000": {
                    "mask2": 1,
                    "mask_24_bit": 1
                },
                "0xffff0000": {
                    "mask1": 1,
                    "mask_16_bit": 1
                },
                "FUN_080091a4": {
                    "calculate_shift": 1,
                    "count_leading_zeros": 24,
                    "find_first_bit_set": 1,
                    "find_highest_bit": 1,
                    "find_highest_bit_position": 3,
                    "get_leading_zeros": 1
                },
                "iVar1": {
                    "bit_position": 3,
                    "count": 1,
                    "highest_bit_position": 1,
                    "leading_zeros": 19,
                    "leading_zeros_count": 5,
                    "num_bits": 1,
                    "shift_count": 1
                },
                "param_1": {
                    "input": 12,
                    "input_value": 2,
                    "num": 4,
                    "number": 12,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08009630"
            ],
            "code": "\nint count_leading_zeros_080091a4(uint input)\n\n{\n  int leading_zeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leading_zeros = 0x10;\n  }\n  else {\n    leading_zeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leading_zeros = leading_zeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leading_zeros = leading_zeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leading_zeros = leading_zeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leading_zeros + 1;\n    }\n    leading_zeros = 0x20;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_080091a4",
            "entrypoint": "0x080091a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "iVar1": "leading_zeros",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091e4": {
            "additional_data": {
                "0xf": {
                    "mask3": 1
                },
                "0xff": {
                    "mask2": 1
                },
                "0xffff": {
                    "mask1": 1
                },
                "3": {
                    "mask4": 1
                },
                "FUN_080091e4": {
                    "count_leading_zeros": 14,
                    "count_rightmost_zeros": 1,
                    "count_trailing_zeros": 8,
                    "find_highest_bit_position": 1,
                    "find_highest_bit_set": 1,
                    "find_highest_set_bit": 2,
                    "find_highest_set_bit_position": 1,
                    "find_set_bit": 1,
                    "find_trailing_zeros": 1,
                    "reverse_bits": 1
                },
                "iVar1": {
                    "bit_index": 1,
                    "bit_position": 3,
                    "count": 6,
                    "leading_zeros": 12,
                    "leading_zeros_count": 1,
                    "num_bits": 1,
                    "result": 3,
                    "total_bits_reversed": 1,
                    "trailing_zeros": 1,
                    "trailing_zeros_count": 2
                },
                "param_1": {
                    "bits_to_reverse": 1,
                    "input": 6,
                    "input_value": 1,
                    "num": 9,
                    "num_ptr": 6,
                    "number": 5,
                    "value": 3
                },
                "uVar2": {
                    "bit_value": 1,
                    "num": 6,
                    "number": 1,
                    "temp": 5,
                    "temp_value": 2,
                    "value": 16
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630"
            ],
            "code": "\nint count_leading_zeros_080091e4(uint *num)\n\n{\n  int leading_zeros;\n  uint value;\n  \n  value = *num;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leading_zeros = 0x10;\n    }\n    else {\n      leading_zeros = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leading_zeros = leading_zeros + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leading_zeros = leading_zeros + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leading_zeros = leading_zeros + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leading_zeros = leading_zeros + 1;\n    }\n    *num = value;\n    return leading_zeros;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *num = value >> 2;\n    return 2;\n  }\n  *num = value >> 1;\n  return 1;\n}\n\n",
            "current_name": "count_leading_zeros_080091e4",
            "entrypoint": "0x080091e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "iVar1": "leading_zeros",
                "param_1": "num",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009244": {
            "additional_data": {
                "FUN_080090c0": {
                    "allocate_memory": 2,
                    "calculate_value": 1,
                    "get_address": 1,
                    "get_memory_address": 1,
                    "get_memory_location": 2,
                    "get_user_data": 1
                },
                "FUN_08009244": {
                    "initialize_data": 15,
                    "initialize_data_structure": 1,
                    "initialize_param": 1,
                    "initialize_params": 1,
                    "set_flag_and_value": 1,
                    "set_param": 2,
                    "set_param_and_value": 1,
                    "set_param_value": 2,
                    "set_param_values": 4,
                    "set_parameter_value": 1,
                    "set_parameters": 1,
                    "set_variable_values": 1
                },
                "iVar1": {
                    "buffer_index": 1,
                    "data_address": 2,
                    "data_pointer": 2,
                    "result": 21,
                    "result_address": 1,
                    "result_index": 1,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "temp_var": 1
                },
                "param_1": {
                    "arg1": 1,
                    "argument1": 1,
                    "data": 1,
                    "data1": 1,
                    "data_buffer": 1,
                    "data_parameter": 1,
                    "data_pointer": 3,
                    "data_pointer1": 1,
                    "data_ptr": 1,
                    "data_structure_ptr": 1,
                    "input": 4,
                    "input1": 1,
                    "input_data": 2,
                    "input_param": 3,
                    "input_param1": 1,
                    "input_param_one": 1,
                    "input_parameter1": 1,
                    "input_value": 1,
                    "param1": 2,
                    "value": 1,
                    "value1": 1,
                    "value_address": 1
                },
                "param_2": {
                    "arg2": 1,
                    "argument2": 1,
                    "data2": 1,
                    "data_value": 1,
                    "input2": 1,
                    "input_param2": 1,
                    "input_param_two": 1,
                    "input_parameter2": 1,
                    "new_value": 6,
                    "output_param": 1,
                    "param": 1,
                    "param2": 2,
                    "value": 12,
                    "value2": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid initialize_data_structure_08009244(undefined4 input,undefined4 value)\n\n{\n  int result;\n  \n  result = FUN_080090c0(input,1);\n  *(undefined4 *)(result + 0x10) = 1;\n  *(undefined4 *)(result + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08009244",
            "entrypoint": "0x08009244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009244": "initialize_data_structure_08009244",
                "iVar1": "result",
                "param_1": "input",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009258": {
            "additional_data": {
                "FUN_080090c0": {
                    "calculate_result_size": 1
                },
                "FUN_08009258": {
                    "calculate_checksum": 3,
                    "initialize_array": 3,
                    "initialize_arrays": 1,
                    "initialize_matrix": 3,
                    "process_data": 1,
                    "reorder_and_calculate": 1,
                    "reverse_input": 1,
                    "update_array": 2,
                    "update_values": 1
                },
                "iVar10": {
                    "inner_loop_temp2": 1,
                    "length2": 3,
                    "max_matrix_len": 1,
                    "max_size": 1,
                    "min": 1,
                    "min_array_length": 1,
                    "min_index": 1,
                    "min_length": 3,
                    "min_size": 5,
                    "shorter_length": 1,
                    "size2": 2,
                    "temp": 2,
                    "temp_size": 3,
                    "temp_variable_3": 1,
                    "value_4": 1,
                    "var10": 1,
                    "var2": 1,
                    "var6": 2
                },
                "iVar12": {
                    "arr1_offset": 1,
                    "array1_length": 1,
                    "end2": 1,
                    "inner_loop_temp4": 1,
                    "iteration_var2": 1,
                    "larger_size": 1,
                    "length1": 3,
                    "length1_copy": 1,
                    "length1_temp": 1,
                    "matrix_len1": 1,
                    "max_size": 1,
                    "min_size": 1,
                    "size1": 3,
                    "size1_2": 1,
                    "size1_copy": 2,
                    "size_a": 1,
                    "start_index2": 1,
                    "temp5": 1,
                    "temp_size1": 1,
                    "temp_variable_5": 1,
                    "val1": 1,
                    "value_2": 1,
                    "var12": 1,
                    "var4": 1,
                    "var8": 2
                },
                "iVar13": {
                    "arr2_offset": 1,
                    "array1_2": 1,
                    "array2_length": 1,
                    "array_a": 1,
                    "inner_loop_temp5": 1,
                    "input1_copy": 1,
                    "input_1": 1,
                    "iteration_var4": 1,
                    "length2": 1,
                    "longer_array": 1,
                    "matrix1_ptr": 1,
                    "max_length": 1,
                    "min_array": 1,
                    "param_2_copy": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "shorter_array": 1,
                    "size2": 2,
                    "size2_copy": 1,
                    "source_temp": 1,
                    "temp2": 1,
                    "temp6": 1,
                    "temp_size2": 1,
                    "temp_variable_6": 1,
                    "val2": 1,
                    "value_3": 1,
                    "var13": 1,
                    "var5": 1,
                    "var9": 2
                },
                "iVar3": {
                    "additional_size": 1,
                    "checksum": 1,
                    "extra": 1,
                    "extra_size": 1,
                    "extra_value": 1,
                    "index": 4,
                    "length": 5,
                    "matrix_len": 1,
                    "new_array_size": 1,
                    "num_iterations": 1,
                    "offset": 1,
                    "result": 3,
                    "result_size": 1,
                    "size1": 1,
                    "source_pointer": 1,
                    "sum": 1,
                    "temp_var": 1,
                    "temp_variable_1": 1,
                    "total_size": 1,
                    "var1": 2,
                    "var3": 1
                },
                "iVar9": {
                    "array1_length": 1,
                    "array2_size": 1,
                    "array_len_1": 1,
                    "end_index2": 1,
                    "iteration_var1": 1,
                    "length1": 3,
                    "length2": 2,
                    "length2_temp": 1,
                    "max": 1,
                    "max_array_length": 1,
                    "max_size": 2,
                    "min_matrix_len": 1,
                    "min_size": 2,
                    "size1": 2,
                    "size2": 2,
                    "size_b": 1,
                    "smaller_size": 1,
                    "start2": 1,
                    "temp_size": 1,
                    "temp_variable_2": 1,
                    "var1": 1,
                    "var5": 2,
                    "var9": 1
                },
                "ioVar8": {
                    "temp_result": 1
                },
                "param_1": {
                    "arg1": 1,
                    "arg_1": 1,
                    "argument_1": 1,
                    "buffer": 1,
                    "config": 1,
                    "data": 2,
                    "input": 7,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "param1": 7,
                    "param_1": 2,
                    "ptr": 2,
                    "result_ptr": 1,
                    "source": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "argument_2": 1,
                    "array1": 5,
                    "array1_start": 1,
                    "array_1": 1,
                    "array_length1": 1,
                    "array_size_a": 1,
                    "input1": 3,
                    "input2": 1,
                    "input_1": 1,
                    "input_1_size": 1,
                    "input_array1": 1,
                    "input_size": 1,
                    "matrix1": 1,
                    "param2": 3,
                    "size1": 6,
                    "start_index": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "argument_3": 1,
                    "array2": 5,
                    "array2_start": 1,
                    "array_2": 1,
                    "array_length2": 1,
                    "array_size_b": 1,
                    "end_index": 1,
                    "input2": 3,
                    "input3": 1,
                    "input_2": 1,
                    "input_2_size": 1,
                    "input_array2": 1,
                    "matrix2": 1,
                    "output_size": 1,
                    "param3": 3,
                    "size2": 6
                },
                "puVar1": {
                    "array_ptr1": 1,
                    "current_element1": 1,
                    "current_val1": 1,
                    "inner_ptr": 1,
                    "pointer1": 3,
                    "pointer_1": 2,
                    "ptr1": 14,
                    "ptr1_copy": 1,
                    "ptr_array_a_index_temp": 1,
                    "ptr_temp1": 1,
                    "source_ptr": 1,
                    "temp_pointer2": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1
                },
                "puVar14": {
                    "array_pointer1": 1,
                    "array_pointer_3": 1,
                    "array_ptr1": 1,
                    "checksum_ptr": 1,
                    "data2": 1,
                    "inner_loop_ptr1": 1,
                    "iteration_ptr1": 1,
                    "matrix_pointer_temp2": 1,
                    "nested_ptr": 1,
                    "output_element": 1,
                    "pointer_3": 1,
                    "ptr14": 1,
                    "ptr1_iter": 1,
                    "ptr5": 7,
                    "ptr_array_c_temp": 1,
                    "ptr_temp3": 1,
                    "result_array_ptr2": 1,
                    "src_ptr": 1,
                    "sub_array_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1
                },
                "puVar15": {
                    "array_pointer2": 1,
                    "array_pointer_4": 1,
                    "array_ptr2": 1,
                    "inner_loop_ptr2": 1,
                    "iteration_ptr2": 1,
                    "matrix_pointer_temp": 1,
                    "nested_next_ptr": 1,
                    "output_element2": 1,
                    "pointer_4": 1,
                    "ptr15": 1,
                    "ptr1_next": 1,
                    "ptr2_iter": 1,
                    "ptr3": 1,
                    "ptr6": 7,
                    "ptr_array_a_temp2": 1,
                    "ptr_temp4": 1,
                    "src_ptr2": 1,
                    "sub_array_ptr2": 1,
                    "temp_array_ptr2": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr6": 1,
                    "temp_ptr8": 1
                },
                "puVar16": {
                    "array1_pointer": 1,
                    "array_pointer3": 1,
                    "array_pointer_5": 1,
                    "current_element": 1,
                    "current_val1_ptr": 1,
                    "inner_loop_ptr": 1,
                    "loop_ptr": 1,
                    "memory_ptr2": 1,
                    "pointer3": 1,
                    "pointer_5": 1,
                    "ptr16": 1,
                    "ptr1_ptr": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr4": 2,
                    "ptr7": 7,
                    "ptr_array_a_index": 1,
                    "ptr_temp5": 1,
                    "source_pointer_temp": 1,
                    "temp_array_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_ptr3": 1
                },
                "puVar17": {
                    "array_2_ptr": 1,
                    "array_end_pointer": 1,
                    "array_pointer_6": 1,
                    "checksum_ptr2": 1,
                    "current_val2_ptr": 1,
                    "dest_ptr2": 1,
                    "end_array_ptr2": 1,
                    "end_of_output": 1,
                    "end_pointer": 1,
                    "end_pointer2": 1,
                    "end_ptr": 2,
                    "pointer4": 1,
                    "pointer_6": 1,
                    "ptr17": 1,
                    "ptr1_end": 1,
                    "ptr2_ptr": 1,
                    "ptr5": 1,
                    "ptr8": 7,
                    "ptr_end": 2,
                    "ptr_temp6": 1,
                    "pu_var17": 1,
                    "temp_array2": 1
                },
                "puVar18": {
                    "array_1_ptr": 1,
                    "array_pointer_7": 1,
                    "array_ptr3": 1,
                    "array_start_pointer": 1,
                    "checksum_ptr1": 1,
                    "current_ptr": 1,
                    "dest_ptr1": 1,
                    "matrix": 1,
                    "matrix2_iter": 1,
                    "output_array_element": 1,
                    "pointer_7": 1,
                    "ptr": 1,
                    "ptr18": 1,
                    "ptr2_end": 1,
                    "ptr2_next": 1,
                    "ptr6": 1,
                    "ptr9": 7,
                    "ptr_array_c": 1,
                    "ptr_temp7": 1,
                    "pu_var18": 1,
                    "result_array_ptr1": 1,
                    "result_ptr": 1,
                    "temp_array1": 1,
                    "temp_pointer3": 1
                },
                "puVar2": {
                    "array_ptr2": 1,
                    "current_element2": 1,
                    "current_val2": 1,
                    "dest_ptr": 1,
                    "matrix_pointer_temp3": 1,
                    "next_ptr": 1,
                    "pointer2": 3,
                    "pointer_2": 2,
                    "ptr2": 15,
                    "ptr_array_a_temp": 1,
                    "ptr_temp2": 1,
                    "temp_ptr5": 1,
                    "temp_ptr7": 1
                },
                "puVar5": {
                    "array1": 2,
                    "array_pointer": 1,
                    "array_pointer_1": 1,
                    "array_ptr": 2,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "data1": 1,
                    "data_ptr": 1,
                    "matrix_pointer": 1,
                    "output_array": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr1_iter": 1,
                    "ptr3": 7,
                    "ptr5": 1,
                    "ptr_array1": 1,
                    "ptr_array_c_index": 1,
                    "result_array_ptr": 1,
                    "source_ptr2": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1
                },
                "puVar7": {
                    "array2": 2,
                    "array_pointer_2": 1,
                    "dest_ptr": 1,
                    "end_array_ptr1": 1,
                    "end_pointer": 1,
                    "end_ptr": 1,
                    "loop_condition": 1,
                    "memory_ptr1": 1,
                    "ptr2_iter": 1,
                    "ptr3": 1,
                    "ptr4": 7,
                    "ptr7": 1,
                    "ptr_array2": 1,
                    "ptr_end_adjusted": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "upper_bound": 1
                },
                "realVar1": {
                    "i": 1
                },
                "realVar2": {
                    "j": 1
                },
                "uVar11": {
                    "current_result": 1,
                    "end": 3,
                    "end1": 1,
                    "end_address": 1,
                    "end_offset": 3,
                    "end_ptr": 1,
                    "iteration_var3": 1,
                    "loop_counter1": 1,
                    "max_length_temp": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 4,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_variable_4": 1,
                    "value_1": 1,
                    "var11": 1,
                    "var2": 1,
                    "var3": 1,
                    "var7": 2
                },
                "uVar4": {
                    "carry": 5,
                    "partial_product16": 1,
                    "partial_sum": 1,
                    "temp": 1,
                    "temp1": 10,
                    "temp2": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_variable_7": 1,
                    "value_temp2": 1,
                    "var2": 2,
                    "var4": 2
                },
                "uVar6": {
                    "address": 1,
                    "current_index": 1,
                    "current_offset": 1,
                    "current_value": 1,
                    "index1": 1,
                    "offset": 2,
                    "source_value": 1,
                    "start": 5,
                    "start1": 1,
                    "start_offset": 1,
                    "start_ptr": 1,
                    "temp": 1,
                    "temp2": 5,
                    "temp_value": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_variable_8": 1,
                    "u_var1": 1,
                    "var1": 1,
                    "var3": 2,
                    "var6": 1
                },
                "uVar8": {
                    "index2": 1,
                    "inner_loop_temp1": 1,
                    "partial_sum": 1,
                    "result_temp": 1,
                    "temp1": 2,
                    "temp2": 5,
                    "temp3": 4,
                    "temp_result": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_variable_9": 1,
                    "tmp_value": 1,
                    "u_var2": 1,
                    "value_temp": 1,
                    "var3": 1,
                    "var4": 2,
                    "var8": 1
                },
                "uVar9": {
                    "temp_var": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080093a4",
                "FUN_080079e8"
            ],
            "code": "\nvoid initialize_arrays_08009258(undefined4 input,int size1,int size2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int length;\n  uint temp1;\n  uint *ptr3;\n  uint start;\n  uint *ptr4;\n  uint temp2;\n  int length1;\n  int min_size;\n  uint temp4;\n  int length1;\n  int var9;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  length1 = *(int *)(size1 + 0x10);\n  length1 = *(int *)(size2 + 0x10);\n  min_size = length1;\n  var9 = size1;\n  if (length1 < length1) {\n    min_size = length1;\n    length1 = length1;\n    var9 = size2;\n    size2 = size1;\n  }\n  length1 = length1 + min_size;\n  length = *(int *)(var9 + 4);\n  if (*(int *)(var9 + 8) < length1) {\n    length = length + 1;\n  }\n  length = FUN_080090c0(input,length);\n  ptr9 = (uint *)(length + 0x14);\n  ptr8 = ptr9 + length1;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start = size2 + 0x14;\n  temp4 = start + min_size * 4;\n  ptr3 = (uint *)(var9 + 0x14);\n  if (start < temp4) {\n    ptr4 = (uint *)(start + ((temp4 - size2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(size2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        start = *ptr7 & 0xffff;\n        if (start != 0) break;\n        start = *ptr7 >> 0x10;\n        if (start == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp2 = *ptr9;\n        temp1 = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        temp4 = temp2;\n        do {\n          ptr6 = ptr5;\n          temp1 = temp1 + start * *(ushort *)ptr1 + (temp4 >> 0x10);\n          *ptr6 = temp2 & 0xffff | temp1 * 0x10000;\n          ptr2 = ptr1 + 1;\n          temp4 = ptr6[1];\n          temp2 = start * (*ptr1 >> 0x10) + (temp4 & 0xffff) + (temp1 >> 0x10);\n          temp1 = temp2 >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + length1);\n        ptr6[1] = temp2;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      temp4 = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp2 = start * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + temp4;\n        temp1 = start * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp2 >> 0x10);\n        temp4 = temp1 >> 0x10;\n        *ptr2 = temp2 & 0xffff | temp1 * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + length1);\n      ptr2[1] = temp4;\n      start = *ptr7 >> 0x10;\n      if (start != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < length1) {\n    start = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start == 0 && (length1 = length1 + -1, length1 != 0))) {\n      ptr8 = ptr8 + -1;\n      start = *ptr8;\n    }\n  }\n  *(int *)(length + 0x10) = length1;\n  return;\n}\n\n",
            "current_name": "initialize_arrays_08009258",
            "entrypoint": "0x08009258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009258": "initialize_arrays_08009258",
                "iVar10": "min_size",
                "iVar12": "length1",
                "iVar13": "var9",
                "iVar3": "length",
                "iVar9": "length1",
                "param_1": "input",
                "param_2": "size1",
                "param_3": "size2",
                "puVar1": "ptr1",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9",
                "puVar2": "ptr2",
                "puVar5": "ptr3",
                "puVar7": "ptr4",
                "uVar11": "temp4",
                "uVar4": "temp1",
                "uVar6": "start",
                "uVar8": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080093a4": {
            "additional_data": {
                "FUN_080090c0": {
                    "allocate_memory": 3,
                    "create_array": 1,
                    "create_data_array": 1,
                    "create_new_array": 2,
                    "create_new_buffer": 1,
                    "reverse_helper2": 1
                },
                "FUN_08009120": {
                    "copy_array_with_offset": 1,
                    "copy_elements": 1,
                    "process_data": 1,
                    "process_element": 1,
                    "process_partial_data": 2,
                    "process_size": 1,
                    "reverse_array": 1,
                    "reverse_helper1": 1
                },
                "FUN_08009258": {
                    "allocate_memory": 1,
                    "create_array": 1,
                    "create_node": 1,
                    "get_array_element": 1,
                    "insert_element": 1,
                    "reverse_helper3": 1,
                    "reverse_segment": 1,
                    "update_data": 1,
                    "update_pointer": 1
                },
                "FUN_080093a4": {
                    "parse_and_process_data": 1,
                    "process_data": 9,
                    "reorder_and_merge_arrays": 1,
                    "update_array": 1
                },
                "iVar1": {
                    "array_index": 1,
                    "counter1": 1,
                    "index": 13,
                    "index1": 3,
                    "temp1": 1,
                    "temp_var1": 9,
                    "temp_var_1": 1,
                    "temporary_variable1": 1
                },
                "iVar2": {
                    "array_length": 1,
                    "counter2": 1,
                    "divided_size": 1,
                    "index2": 3,
                    "loop_var": 1,
                    "num_iterations": 8,
                    "num_loops": 1,
                    "num_words": 1,
                    "shift_count": 1,
                    "size_divided_by4": 1,
                    "temp2": 1,
                    "temp_var2": 9,
                    "temporary_variable2": 1
                },
                "param_1": {
                    "arg1": 1,
                    "array": 1,
                    "data_pointer": 1,
                    "data_size": 2,
                    "error_code": 1,
                    "input": 5,
                    "input1": 6,
                    "input_array": 2,
                    "input_integer": 1,
                    "input_num": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_size": 2,
                    "input_value": 1,
                    "original_param": 1,
                    "ptr_to_struct": 1
                },
                "param_2": {
                    "arg2": 1,
                    "array": 1,
                    "array_ptr": 1,
                    "buffer": 1,
                    "data": 2,
                    "input2": 4,
                    "input_array": 3,
                    "new_param": 1,
                    "output": 6,
                    "output_array": 4,
                    "output_param": 2,
                    "output_parameter": 1,
                    "output_pointer": 1,
                    "result_pointer": 1,
                    "updated_array": 1
                },
                "param_3": {
                    "arg3": 1,
                    "array_length": 4,
                    "data_length": 1,
                    "flags": 3,
                    "input3": 2,
                    "input_index": 1,
                    "input_size": 1,
                    "length": 6,
                    "num_elements": 1,
                    "size": 10
                },
                "param_4": {
                    "temp_param": 1
                },
                "puVar3": {
                    "current_array": 1,
                    "current_data": 2,
                    "current_element": 2,
                    "current_node": 1,
                    "current_ptr": 1,
                    "new_element": 1,
                    "pointer_var1": 1,
                    "ptr1": 1,
                    "ptr_1": 1,
                    "result_array": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp_array_ptr": 1,
                    "temp_buffer": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 3,
                    "temp_ptr1": 5,
                    "temp_var1": 1,
                    "temp_var3": 2,
                    "temporary_pointer1": 1
                },
                "puVar4": {
                    "data_array": 1,
                    "dynamic_array": 1,
                    "new_array": 1,
                    "new_buffer": 1,
                    "new_element": 1,
                    "new_node": 1,
                    "new_ptr": 1,
                    "pointer_var2": 1,
                    "prev_ptr": 1,
                    "ptr2": 1,
                    "ptr_2": 1,
                    "ptr_array": 1,
                    "temp2": 2,
                    "temp_array_ptr2": 1,
                    "temp_data": 2,
                    "temp_element": 1,
                    "temp_pointer2": 1,
                    "temp_ptr2": 7,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "temporary_pointer2": 1
                }
            },
            "called": [
                "FUN_08009120",
                "FUN_080090c0",
                "FUN_08009258"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * parse_and_process_data_080093a4(int input1,undefined4 *output,uint size)\n\n{\n  int index;\n  int temp_var2;\n  undefined4 *temp_ptr1;\n  undefined4 *temp_ptr2;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              FUN_08009120(input1,output,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),\n                           0);\n  }\n  temp_var2 = (int)size >> 2;\n  if (temp_var2 != 0) {\n    temp_ptr2 = *(undefined4 **)(input1 + 0x48);\n    if (temp_ptr2 == (undefined4 *)0x0) {\n      temp_ptr2 = (undefined4 *)FUN_080090c0(input1,1);\n      temp_ptr2[4] = 1;\n      temp_ptr2[5] = 0x271;\n      *(undefined4 **)(input1 + 0x48) = temp_ptr2;\n      *temp_ptr2 = 0;\n    }\n    temp_ptr1 = output;\n    if (temp_var2 << 0x1f < 0) goto LAB_080093d2;\nLAB_080093c4:\n    temp_var2 = temp_var2 >> 1;\n    temp_ptr1 = temp_ptr2;\n    if (temp_var2 != 0) {\n      while( true ) {\n        temp_ptr2 = (undefined4 *)*temp_ptr1;\n        if (temp_ptr2 == (undefined4 *)0x0) {\n          temp_ptr2 = (undefined4 *)FUN_08009258(input1,temp_ptr1,temp_ptr1);\n          *temp_ptr1 = temp_ptr2;\n          *temp_ptr2 = 0;\n        }\n        temp_ptr1 = output;\n        if (-1 < temp_var2 << 0x1f) break;\nLAB_080093d2:\n        output = (undefined4 *)FUN_08009258(input1,temp_ptr1,temp_ptr2);\n        if (temp_ptr1 == (undefined4 *)0x0) break;\n        index = *(int *)(input1 + 0x4c);\n        temp_var2 = temp_var2 >> 1;\n        *temp_ptr1 = *(undefined4 *)(index + temp_ptr1[1] * 4);\n        *(undefined4 **)(index + temp_ptr1[1] * 4) = temp_ptr1;\n        temp_ptr1 = temp_ptr2;\n        if (temp_var2 == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "current_name": "parse_and_process_data_080093a4",
            "entrypoint": "0x080093a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080093a4": "parse_and_process_data_080093a4",
                "iVar1": "index",
                "iVar2": "temp_var2",
                "param_1": "input1",
                "param_2": "output",
                "param_3": "size",
                "puVar3": "temp_ptr1",
                "puVar4": "temp_ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009444": {
            "additional_data": {
                "FUN_080090c0": {
                    "get_metadata_value": 1,
                    "get_param_value": 1,
                    "get_processed_value": 1
                },
                "FUN_08009444": {
                    "decode_and_move_bits": 1,
                    "decode_and_update_array": 1,
                    "process_data": 3,
                    "reverse_and_copy_bits": 2,
                    "reverse_and_copy_data": 1,
                    "reverse_and_modify_bits": 1,
                    "reverse_binary_conversion": 1,
                    "reverse_bits": 5,
                    "reverse_bits_and_copy": 1,
                    "reverse_bits_and_store": 1
                },
                "iVar1": {
                    "bit_count": 1,
                    "increment": 1,
                    "increment_1": 1,
                    "temp1": 16,
                    "temp_var1": 12
                },
                "iVar12": {
                    "bit_shift": 1,
                    "calculated_var1": 1,
                    "count": 2,
                    "divided_value": 1,
                    "num_bytes": 1,
                    "num_iterations": 1,
                    "num_words": 1,
                    "shift": 4,
                    "shift_amount": 8,
                    "shift_amt": 1,
                    "shift_bits": 1,
                    "shift_count": 2,
                    "shift_div": 1,
                    "shift_var": 1,
                    "shifted_bit_count": 1,
                    "shifted_index": 1,
                    "shifted_value": 1,
                    "temp_var7": 1,
                    "var8": 1
                },
                "iVar13": {
                    "calculated_var2": 1,
                    "loop_end_offset": 1,
                    "new_array_size": 1,
                    "new_buffer_size": 1,
                    "new_count": 1,
                    "new_num_words": 1,
                    "new_size": 2,
                    "new_value": 2,
                    "new_var1": 1,
                    "new_var2": 1,
                    "num_bytes_plus": 1,
                    "result": 4,
                    "result_size": 1,
                    "shift_sum": 1,
                    "shifted_value": 1,
                    "shifted_var": 1,
                    "size_with_shift": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_var8": 1,
                    "updated_accumulated": 1,
                    "updated_length": 1,
                    "updated_size": 1,
                    "updated_value": 1,
                    "updated_var": 1,
                    "var9": 1
                },
                "iVar2": {
                    "increment_2": 1,
                    "multiplier": 1,
                    "shifted_bits": 1,
                    "temp2": 16,
                    "temp_var2": 12
                },
                "iVar3": {
                    "accumulated": 1,
                    "counter": 1,
                    "i_var3": 1,
                    "index": 1,
                    "temp3": 15,
                    "temp_var3": 12
                },
                "iVar5": {
                    "array_length": 1,
                    "array_ptr": 1,
                    "array_size": 3,
                    "buffer_size": 1,
                    "counter_var": 1,
                    "i_var5": 3,
                    "input_offset": 1,
                    "offset": 4,
                    "param2_4": 1,
                    "temp5": 6,
                    "temp_var5": 8,
                    "var1": 1
                },
                "iVar6": {
                    "i_var6": 2,
                    "temp": 1,
                    "temp2": 1,
                    "temp5": 4,
                    "temp6": 8,
                    "temp_var5": 4,
                    "temp_var6": 8,
                    "updated_increment_2": 1,
                    "var2": 2
                },
                "param_1": {
                    "arg1": 1,
                    "argument_one": 1,
                    "array": 1,
                    "input": 17,
                    "input_address": 1,
                    "input_data": 1,
                    "input_int": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_size": 1,
                    "input_value": 3
                },
                "param_2": {
                    "arg2": 1,
                    "array": 3,
                    "array_param": 2,
                    "array_parameter": 1,
                    "array_pointer": 1,
                    "data_array": 3,
                    "data_pointer": 1,
                    "input_array": 1,
                    "metadata": 1,
                    "output": 6,
                    "output_array": 3,
                    "output_buffer": 1,
                    "output_data": 2,
                    "parameters": 2,
                    "params": 2,
                    "params_array": 1
                },
                "param_3": {
                    "arg3": 1,
                    "array_length": 2,
                    "bit_count": 6,
                    "bit_length": 1,
                    "count": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "length": 4,
                    "length_param": 1,
                    "num_bits": 6,
                    "size": 6,
                    "size_param": 1
                },
                "puVar10": {
                    "current_src": 1,
                    "loop_end": 1,
                    "new_metadata_ptr2": 1,
                    "pointer3": 1,
                    "pointer4": 1,
                    "pointer_var4": 1,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr4": 5,
                    "ptr_var10": 1,
                    "ptr_var4": 2,
                    "source_end": 1,
                    "src_array_ptr": 1,
                    "src_array_ptr2": 1,
                    "src_ptr": 1,
                    "temp_array2": 1,
                    "temp_pointer1": 1,
                    "temp_pointer2": 1,
                    "temp_pointer_3": 1,
                    "temp_ptr2": 5,
                    "var6": 1
                },
                "puVar11": {
                    "array_ptr2": 1,
                    "data_array_ptr": 1,
                    "end_pointer": 1,
                    "end_ptr": 3,
                    "loop_ptr": 2,
                    "loop_start": 1,
                    "pointer4": 1,
                    "pointer5": 1,
                    "pointer_var5": 1,
                    "ptr3": 1,
                    "ptr4": 2,
                    "ptr5": 5,
                    "ptr_var11": 1,
                    "ptr_var5": 2,
                    "source_start": 1,
                    "src_end": 1,
                    "temp_array3": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 1,
                    "temp_ptr3": 2,
                    "var7": 1
                },
                "puVar7": {
                    "array_ptr": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "dest_array": 3,
                    "dest_array_ptr": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 3,
                    "output_pointer": 1,
                    "output_ptr": 3,
                    "pointer1": 2,
                    "pointer_var1": 1,
                    "ptr1": 7,
                    "ptr_var1": 2,
                    "ptr_var7": 1,
                    "target_array": 1,
                    "var3": 1,
                    "write_ptr": 1
                },
                "puVar8": {
                    "array_pointer": 1,
                    "input_ptr": 1,
                    "metadata_ptr": 1,
                    "pointer2": 2,
                    "pointer_var2": 1,
                    "ptr2": 7,
                    "ptr_var2": 2,
                    "ptr_var8": 1,
                    "read_ptr": 1,
                    "source_array": 1,
                    "source_ptr": 3,
                    "src_array": 3,
                    "src_array_ptr": 1,
                    "src_pointer": 1,
                    "src_ptr": 2,
                    "start_ptr": 1,
                    "temp_pointer": 1,
                    "var4": 1
                },
                "puVar9": {
                    "current_dest": 1,
                    "dest_array_ptr": 1,
                    "dest_array_ptr2": 1,
                    "dest_ptr": 2,
                    "new_metadata_ptr": 1,
                    "pointer3": 1,
                    "pointer_var3": 1,
                    "ptr1": 1,
                    "ptr3": 5,
                    "ptr5": 2,
                    "ptr_var3": 2,
                    "ptr_var9": 1,
                    "temp_array": 1,
                    "temp_pointer": 1,
                    "temp_pointer3": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 3,
                    "var5": 1
                },
                "return": {
                    "": 1
                },
                "reverseAndImprove": {
                    "new_function": 1
                },
                "uVar14": {
                    "carry": 8,
                    "carry_bit": 1,
                    "carry_bits": 2,
                    "carry_over": 3,
                    "carry_over_bit": 1,
                    "carryover": 1,
                    "carryover_value": 1,
                    "new_var2": 1,
                    "overflow": 1,
                    "remaining_bits": 1,
                    "shift": 2,
                    "shifted_bits": 2,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_shift": 1,
                    "temp_value": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "var10": 1
                },
                "uVar4": {
                    "result": 2,
                    "result_var": 1,
                    "temp": 1,
                    "temp4": 14,
                    "temp_var4": 11,
                    "u_var4": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid reverse_bits_and_copy_08009444(int input,undefined4 *output,uint bit_count)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  undefined4 temp4;\n  int temp_var5;\n  int temp_var6;\n  uint *ptr1;\n  uint *ptr2;\n  uint *temp_ptr2;\n  uint *ptr5;\n  int shift_amount;\n  int result;\n  uint carry;\n  uint *ptr3;\n  \n  temp_var5 = output[4];\n  shift_amount = (int)bit_count >> 5;\n  result = shift_amount + temp_var5 + 1;\n  temp3 = output[1];\n  temp2 = output[2];\n  if ((int)output[2] < result) {\n    do {\n      temp_var6 = temp2 * 2;\n      temp1 = temp2 * -2;\n      temp3 = temp3 + 1;\n      temp2 = temp_var6;\n    } while (result != temp_var6 && result + temp1 < 0 == SBORROW4(result,temp_var6));\n  }\n  temp2 = FUN_080090c0(input,temp3);\n  ptr1 = (uint *)(temp2 + 0x14);\n  if (0 < shift_amount) {\n    ptr5 = ptr1 + shift_amount;\n    ptr2 = ptr1;\n    do {\n      ptr3 = ptr2 + 1;\n      *ptr2 = 0;\n      ptr1 = ptr5;\n      ptr2 = ptr3;\n    } while (ptr3 != ptr5);\n  }\n  temp3 = output[4];\n  ptr2 = output + 5;\n  bit_count = bit_count & 0x1f;\n  if (bit_count == 0) {\n    ptr1 = ptr1 + -1;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr5 + 1;\n      ptr1 = ptr1 + 1;\n      *ptr1 = *ptr5;\n      ptr5 = ptr3;\n    } while (ptr3 < ptr2 + temp3);\n  }\n  else {\n    carry = 0;\n    ptr5 = ptr2;\n    do {\n      ptr3 = ptr1;\n      *ptr3 = *ptr5 << bit_count | carry;\n      temp_ptr2 = ptr5 + 1;\n      carry = *ptr5 >> (0x20 - bit_count & 0xff);\n      ptr1 = ptr3 + 1;\n      ptr5 = temp_ptr2;\n    } while (temp_ptr2 < ptr2 + temp3);\n    ptr3[1] = carry;\n    if (carry != 0) {\n      result = shift_amount + temp_var5 + 2;\n    }\n  }\n  temp_var5 = *(int *)(input + 0x4c);\n  temp3 = output[1];\n  temp4 = *(undefined4 *)(temp_var5 + temp3 * 4);\n  *(int *)(temp2 + 0x10) = result + -1;\n  *output = temp4;\n  *(undefined4 **)(temp_var5 + temp3 * 4) = output;\n  return;\n}\n\n",
            "current_name": "reverse_bits_and_copy_08009444",
            "entrypoint": "0x08009444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009444": "reverse_bits_and_copy_08009444",
                "iVar1": "temp1",
                "iVar12": "shift_amount",
                "iVar13": "result",
                "iVar2": "temp2",
                "iVar3": "temp3",
                "iVar5": "temp_var5",
                "iVar6": "temp_var6",
                "param_1": "input",
                "param_2": "output",
                "param_3": "bit_count",
                "puVar10": "temp_ptr2",
                "puVar11": "ptr5",
                "puVar7": "ptr1",
                "puVar8": "ptr2",
                "puVar9": "ptr3",
                "uVar14": "carry",
                "uVar4": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094f8": {
            "additional_data": {
                "FUN_080094f8": {
                    "compare_arrays": 31
                },
                "iVar1": {
                    "array1_length_diff": 1,
                    "array_diff": 2,
                    "array_difference": 4,
                    "array_size_difference": 2,
                    "diff": 1,
                    "difference": 16,
                    "length_difference": 4,
                    "size_difference": 1
                },
                "iVar3": {
                    "array2_length": 8,
                    "array2_offset": 9,
                    "array2_size": 2,
                    "array2_start": 1,
                    "array2_start_index": 3,
                    "array_2_starting_index": 1,
                    "common_length": 1,
                    "offset": 4,
                    "start_index": 2
                },
                "param_1": {
                    "array1": 22,
                    "array1_address": 1,
                    "array1_base": 1,
                    "array1_ptr": 1,
                    "array1_start": 1,
                    "array1_start_addr": 1,
                    "array_1": 4
                },
                "param_2": {
                    "array2": 22,
                    "array2_address": 1,
                    "array2_base": 1,
                    "array2_ptr": 1,
                    "array2_start": 1,
                    "array2_start_addr": 1,
                    "array_2": 4
                },
                "puVar2": {
                    "array2_element": 2,
                    "array2_element_ptr": 1,
                    "array2_pointer": 1,
                    "array2_ptr": 5,
                    "current_item_array_2": 1,
                    "current_value_array2": 1,
                    "ptr1": 2,
                    "ptr2": 11,
                    "ptr_2": 1,
                    "ptr_array2": 5,
                    "ptr_to_elem_array2": 1
                },
                "puVar4": {
                    "array1_element": 2,
                    "array1_element_ptr": 1,
                    "array1_pointer": 1,
                    "array1_ptr": 5,
                    "current_item_array_1": 1,
                    "current_value_array1": 1,
                    "ptr1": 11,
                    "ptr2": 2,
                    "ptr_1": 1,
                    "ptr_array1": 5,
                    "ptr_to_elem_array1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "code": "\nint compare_arrays_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *ptr2;\n  int array2_offset;\n  uint *ptr1;\n  \n  array2_offset = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array2_offset;\n  if (difference == 0) {\n    ptr2 = (uint *)(array2 + 0x14 + array2_offset * 4);\n    ptr1 = (uint *)(array1 + 0x14) + array2_offset;\n    do {\n      ptr1 = ptr1 + -1;\n      ptr2 = ptr2 + -1;\n      if (*ptr1 != *ptr2) {\n        if (*ptr2 <= *ptr1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr1);\n  }\n  return difference;\n}\n\n",
            "current_name": "compare_arrays_080094f8",
            "entrypoint": "0x080094f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094f8": "compare_arrays_080094f8",
                "iVar1": "difference",
                "iVar3": "array2_offset",
                "param_1": "array1",
                "param_2": "array2",
                "puVar2": "ptr2",
                "puVar4": "ptr1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009530": {
            "additional_data": {
                "FUN_08009530": {
                    "check_and_assign": 1,
                    "check_arrays_and_compare": 1,
                    "check_arrays_and_set_result": 1,
                    "check_matching_arrays": 1,
                    "find_differences": 1,
                    "validate_and_compare_arrays": 1,
                    "validate_and_process_data": 1,
                    "validate_data": 1,
                    "verify_and_calculate_checksum": 1,
                    "verify_arrays": 2,
                    "verify_checksum": 2
                },
                "iVar1": {
                    "comparison_result": 1,
                    "index": 1,
                    "iter_count": 1,
                    "output_variable": 1,
                    "result": 22,
                    "result1": 3,
                    "result_handler": 1,
                    "result_var1": 1
                },
                "iVar12": {
                    "carry": 10,
                    "carry2": 1,
                    "carry_over": 2,
                    "carry_sum": 1,
                    "carry_value": 2,
                    "count": 1,
                    "counter": 2,
                    "index": 1,
                    "loop_counter": 1,
                    "loop_variable": 1,
                    "result2": 3,
                    "temp": 1,
                    "temp_result": 2,
                    "temp_var": 1,
                    "var10": 1,
                    "var11": 1
                },
                "param_1": {
                    "arg": 1,
                    "input": 9,
                    "input1": 5,
                    "input_1": 1,
                    "input_flag": 1,
                    "input_flags": 1,
                    "input_param": 2,
                    "input_value": 4,
                    "input_value1": 1,
                    "param1": 3,
                    "param_1": 1,
                    "status": 1,
                    "status_code": 1
                },
                "param_2": {
                    "array1": 11,
                    "array_1": 1,
                    "checksum1": 1,
                    "data1": 1,
                    "first_array": 1,
                    "input1": 1,
                    "input2": 3,
                    "input_array": 2,
                    "input_array1": 3,
                    "input_array_1": 1,
                    "input_data": 1,
                    "input_data1": 1,
                    "input_ptr1": 1,
                    "source": 1,
                    "source_array": 2
                },
                "param_3": {
                    "array2": 11,
                    "array_2": 1,
                    "checksum2": 1,
                    "compare_to_data": 1,
                    "data2": 1,
                    "input2": 1,
                    "input3": 3,
                    "input_array2": 3,
                    "input_array_2": 1,
                    "input_data2": 1,
                    "input_ptr2": 1,
                    "output_array": 2,
                    "second_array": 1,
                    "target": 1,
                    "target_array": 2
                },
                "param_4": {
                    "additional_param": 1,
                    "additional_value": 1,
                    "arg2": 1,
                    "extra_data": 1,
                    "extra_parameter": 1,
                    "input2": 1,
                    "input4": 5,
                    "input_4": 1,
                    "input_param2": 1,
                    "input_size": 1,
                    "input_val": 1,
                    "input_value2": 1,
                    "option": 2,
                    "param": 1,
                    "param4": 4,
                    "param_4": 3,
                    "param_value": 1,
                    "parameter": 1,
                    "size": 1,
                    "unknown_param": 1,
                    "unused_param": 1
                },
                "puVar10": {
                    "array2_iterator": 1,
                    "array2_ptr": 1,
                    "array2_temp": 1,
                    "compare_to_data_pointer_temp2": 1,
                    "loop_variable_3": 1,
                    "output_ptr2": 1,
                    "ptr4": 3,
                    "ptr5": 3,
                    "ptr6": 4,
                    "ptr8": 1,
                    "ptr_10": 1,
                    "ptr_array2_iter": 1,
                    "ptr_counter2": 1,
                    "ptr_temp2": 1,
                    "pu_var6": 1,
                    "source_ptr4": 1,
                    "start2": 1,
                    "target_array_element_pointer": 1,
                    "temp_ptr2": 1,
                    "temp_ptr5": 1,
                    "temp_ptr6": 1,
                    "temp_source_ptr": 1,
                    "var8": 1,
                    "var9": 1
                },
                "puVar11": {
                    "array1_iterator": 1,
                    "array1_start": 1,
                    "array2_end": 1,
                    "end1": 2,
                    "end_ptr": 1,
                    "end_ptr1": 1,
                    "incremented_calculated_value_pointer": 1,
                    "input_data_pointer_temp3": 1,
                    "input_ptr1": 1,
                    "ptr5": 2,
                    "ptr6": 3,
                    "ptr7": 4,
                    "ptr_11": 1,
                    "ptr_array2_5": 1,
                    "ptr_array2_end": 1,
                    "ptr_end_array1": 1,
                    "ptr_end_loop": 1,
                    "pu_var10": 1,
                    "source_end": 1,
                    "target_ptr2": 1,
                    "temp_ptr6": 1,
                    "temp_ptr7": 1,
                    "var10": 1,
                    "var9": 1
                },
                "puVar13": {
                    "array1_start": 1,
                    "array2": 1,
                    "array2_iterator": 1,
                    "compare_to_data_pointer_temp3": 1,
                    "end2": 1,
                    "end_ptr2": 1,
                    "output_ptr1": 1,
                    "ptr6": 2,
                    "ptr7": 3,
                    "ptr8": 4,
                    "ptr_13": 1,
                    "ptr_array2": 1,
                    "ptr_array2_begin": 1,
                    "ptr_second_array_plus_5": 1,
                    "pu_var8": 1,
                    "source_array_start_pointer": 1,
                    "source_start": 1,
                    "start_pointer2": 1,
                    "target_end": 1,
                    "temp_ptr3": 1,
                    "temp_ptr7": 1,
                    "temp_ptr8": 1,
                    "var11": 1,
                    "var12": 1
                },
                "puVar15": {
                    "ptr5": 1
                },
                "puVar2": {
                    "array2_end": 1,
                    "array2_ptr": 1,
                    "array_ptr": 1,
                    "compare_to_data_pointer": 1,
                    "pointer1": 1,
                    "ptr1": 11,
                    "ptr_2": 1,
                    "ptr_array1": 2,
                    "ptr_array1_4": 1,
                    "ptr_array1_elem": 1,
                    "ptr_array2": 1,
                    "ptr_second_array": 1,
                    "ptr_x": 1,
                    "pu_var1": 1,
                    "source_array_element": 1,
                    "source_ptr": 1,
                    "target_end": 1,
                    "temp_ptr1": 1,
                    "var1": 2
                },
                "puVar3": {
                    "ptr2": 1
                },
                "puVar6": {
                    "array1_end": 1,
                    "calculated_value_pointer": 1,
                    "compare_to_data_pointer_temp": 1,
                    "input_ptr": 1,
                    "pointer2": 1,
                    "ptr1": 3,
                    "ptr1_copy": 1,
                    "ptr1_temp": 1,
                    "ptr2": 7,
                    "ptr3": 1,
                    "ptr_6": 1,
                    "ptr_array2_4": 1,
                    "ptr_array2_elem": 1,
                    "ptr_result": 3,
                    "pu_var3": 1,
                    "result_ptr": 1,
                    "target_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr2": 1,
                    "var5": 2
                },
                "puVar7": {
                    "array1": 1,
                    "current1": 1,
                    "input_data_pointer": 1,
                    "output_ptr": 1,
                    "ptr1": 1,
                    "ptr1_iterator": 1,
                    "ptr1_temp2": 1,
                    "ptr2": 4,
                    "ptr3": 7,
                    "ptr_7": 1,
                    "ptr_array1": 2,
                    "ptr_array1_5": 1,
                    "ptr_first_array": 1,
                    "pu_var4": 1,
                    "source_array_pointer": 1,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 1,
                    "var6": 2
                },
                "puVar8": {
                    "array1_ptr": 1,
                    "current2": 1,
                    "incremented_source_array_pointer": 1,
                    "input_data_pointer_temp": 1,
                    "loop_variable_2": 1,
                    "ptr2_iterator": 1,
                    "ptr3": 3,
                    "ptr4": 4,
                    "ptr7": 1,
                    "ptr8": 1,
                    "ptr_8": 1,
                    "ptr_result": 1,
                    "ptr_temp3": 1,
                    "pu_var9": 1,
                    "result_iterator": 1,
                    "source_ptr2": 1,
                    "temp_ptr": 5,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "var13": 1,
                    "var7": 1
                },
                "puVar9": {
                    "array1_iterator": 1,
                    "array1_temp": 1,
                    "array2_start": 1,
                    "input_data_pointer_temp2": 1,
                    "input_ptr2": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr4": 5,
                    "ptr5": 4,
                    "ptr_9": 1,
                    "ptr_array1": 1,
                    "ptr_array1_iter": 1,
                    "ptr_array2": 1,
                    "ptr_counter1": 1,
                    "ptr_temp1": 1,
                    "pu_var5": 1,
                    "source_ptr3": 1,
                    "start1": 1,
                    "target_array_pointer": 1,
                    "target_ptr": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "var7": 1,
                    "var8": 1
                },
                "uVar14": {
                    "array1_size": 2,
                    "array2_length": 1,
                    "checksum": 1,
                    "count": 1,
                    "input_data_length_temp": 1,
                    "length": 2,
                    "length2": 1,
                    "length_array1": 1,
                    "output_len": 1,
                    "result_size": 1,
                    "size": 2,
                    "size2": 1,
                    "size_array1": 1,
                    "size_result": 1,
                    "size_second_array": 1,
                    "target_array_element_value": 1,
                    "target_length": 2,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_val": 1,
                    "value3": 2,
                    "var12": 1,
                    "var13": 1,
                    "var3": 1,
                    "var_14": 1
                },
                "uVar16": {
                    "new_array_length": 1
                },
                "uVar3": {
                    "array1_length": 1,
                    "array1_size": 2,
                    "array2_size": 1,
                    "input2_length": 1,
                    "input_data_length": 1,
                    "input_len": 1,
                    "length1": 1,
                    "length_array2": 1,
                    "size1": 2,
                    "size_array1": 1,
                    "size_array1_4": 1,
                    "size_first_array": 1,
                    "source_array_element_value": 1,
                    "source_length": 2,
                    "temp1": 4,
                    "temp_var1": 1,
                    "val1": 1,
                    "value1": 3,
                    "var1": 1,
                    "var2": 2,
                    "var_3": 1
                },
                "uVar4": {
                    "calculated_value": 1,
                    "carry": 3,
                    "result_elem": 1,
                    "sum": 3,
                    "temp": 3,
                    "temp1": 3,
                    "temp2": 5,
                    "temp_value": 2,
                    "temp_var2": 1,
                    "temp_variable_1": 1,
                    "val2": 1,
                    "value2": 3,
                    "var2": 1,
                    "var3": 2,
                    "var_4": 1
                },
                "uVar5": {
                    "comparison": 1,
                    "comparison_result": 1,
                    "condition_flag": 1,
                    "flag": 15,
                    "is_equal": 3,
                    "is_greater": 1,
                    "is_match": 1,
                    "is_size_mismatch": 1,
                    "result": 1,
                    "temp2": 2,
                    "temp_variable_2": 1,
                    "var4": 2,
                    "var_5": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid verify_and_calculate_checksum_08009530(undefined4 input,uint *array1,uint *array2,undefined4 input4)\n\n{\n  int result;\n  uint *ptr1;\n  uint temp1;\n  uint temp2;\n  undefined4 flag;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr6;\n  uint *ptr7;\n  int carry;\n  uint *ptr8;\n  uint target_length;\n  uint *temp_ptr;\n  \n  ptr1 = (uint *)array2[4];\n  ptr7 = array1 + 5;\n  ptr8 = array2 + 5;\n  ptr3 = ptr7;\n  ptr4 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = ptr7 + (int)ptr1;\n    ptr1 = ptr8 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= ptr7) {\n        carry = FUN_080090c0(input,0,ptr2,ptr1,input4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    flag = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  flag = 1;\n  ptr2 = ptr7;\n  ptr1 = array1;\n  ptr3 = ptr8;\n  ptr4 = array2;\n  array2 = array1;\n  ptr8 = ptr7;\nLAB_08009578:\n  result = FUN_080090c0(input,ptr4[1],ptr2,ptr1,input4);\n  carry = 0;\n  target_length = ptr4[4];\n  temp1 = array2[4];\n  *(undefined4 *)(result + 0xc) = flag;\n  ptr7 = ptr3 + target_length;\n  ptr1 = (uint *)(result + 0x14);\n  ptr4 = ptr8;\n  do {\n    temp_ptr = ptr3 + 1;\n    ptr6 = ptr4 + 1;\n    temp2 = ((*ptr3 & 0xffff) + carry) - (*ptr4 & 0xffff);\n    carry = ((*ptr3 >> 0x10) - (*ptr4 >> 0x10)) + ((int)temp2 >> 0x10);\n    temp2 = temp2 & 0xffff | carry * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = temp2;\n    carry = carry >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = temp_ptr;\n    ptr4 = ptr6;\n  } while (ptr6 < ptr8 + temp1);\n  ptr1 = temp_ptr;\n  ptr3 = ptr2;\n  if (temp_ptr < ptr7) {\n    do {\n      ptr4 = ptr1 + 1;\n      temp1 = (*ptr1 & 0xffff) + carry;\n      carry = ((int)temp1 >> 0x10) + (*ptr1 >> 0x10);\n      temp2 = temp1 & 0xffff | carry * 0x10000;\n      *ptr3 = temp2;\n      carry = carry >> 0x10;\n      ptr1 = ptr4;\n      ptr3 = ptr3 + 1;\n    } while (ptr4 < ptr7);\n    ptr2 = (uint *)((int)ptr2 + ((int)ptr7 + ~(uint)temp_ptr & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (temp2 == 0) {\n    ptr2 = ptr2 + -1;\n    target_length = target_length - 1;\n    temp2 = *ptr2;\n  }\n  *(uint *)(result + 0x10) = target_length;\n  return;\n}\n\n",
            "current_name": "verify_and_calculate_checksum_08009530",
            "entrypoint": "0x08009530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009530": "verify_and_calculate_checksum_08009530",
                "iVar1": "result",
                "iVar12": "carry",
                "param_1": "input",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "input4",
                "puVar10": "ptr6",
                "puVar11": "ptr7",
                "puVar13": "ptr8",
                "puVar2": "ptr1",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar8": "temp_ptr",
                "puVar9": "ptr4",
                "uVar14": "target_length",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009630": {
            "additional_data": {
                "F1": {
                    "decoded_value": 1
                },
                "FUN_080090c0": {
                    "initialize_struct": 1
                },
                "FUN_080091a4": {
                    "perform_operation": 1
                },
                "FUN_080091e4": {
                    "calculate_value": 1
                },
                "FUN_08009630": {
                    "calculate_result": 1,
                    "calculate_value": 1,
                    "calculate_values": 1,
                    "decode_and_calculate": 1,
                    "decode_and_compute": 1,
                    "decode_and_extract_data": 1,
                    "decode_and_transform_data": 1,
                    "decode_binary": 1,
                    "decode_data": 3,
                    "decode_parameters": 1,
                    "extract_and_calculate": 1,
                    "extract_bits": 2,
                    "extract_data": 2,
                    "extract_information": 1,
                    "extract_numbers": 1,
                    "parse_arguments": 1,
                    "process_data": 1,
                    "reverse_binary": 1,
                    "reverse_binary_data": 1
                },
                "iVar1": {
                    "function_result": 1,
                    "output_1": 1,
                    "result": 28
                },
                "iVar3": {
                    "sub_result1": 1,
                    "sub_result_1": 1,
                    "temp1": 7,
                    "temp2": 3,
                    "temp_1": 2,
                    "temp_2": 4,
                    "temp_result1": 1,
                    "temp_var1": 2,
                    "temp_var2": 4,
                    "temp_var_1": 2,
                    "temp_var_2": 1,
                    "var2": 3
                },
                "iVar4": {
                    "sub_result2": 1,
                    "sub_result_2": 1,
                    "temp2": 7,
                    "temp3": 3,
                    "temp_2": 2,
                    "temp_3": 4,
                    "temp_result2": 1,
                    "temp_var2": 2,
                    "temp_var3": 4,
                    "temp_var_2": 2,
                    "temp_var_3": 1,
                    "var3": 3
                },
                "local_1c": {
                    "data_2": 1,
                    "input2": 1,
                    "local2": 3,
                    "local_condition_2": 1,
                    "local_value": 1,
                    "local_value2": 3,
                    "local_var2": 4,
                    "modified_num": 1,
                    "modified_param4": 1,
                    "temp8": 1,
                    "temp_2": 1,
                    "temp_7": 1,
                    "temp_8": 3,
                    "temp_output": 1,
                    "temp_param_4": 1,
                    "temp_value2": 1,
                    "temp_var6": 1,
                    "temp_var8": 2,
                    "temp_var_8": 1,
                    "transformed_value": 1,
                    "var_1": 1
                },
                "local_20": {
                    "data_1": 1,
                    "input1": 1,
                    "local1": 3,
                    "local_condition_1": 1,
                    "local_input": 1,
                    "local_num": 1,
                    "local_value1": 3,
                    "local_var1": 4,
                    "temp7": 1,
                    "temp_1": 1,
                    "temp_6": 1,
                    "temp_7": 3,
                    "temp_input": 1,
                    "temp_param_3": 1,
                    "temp_value1": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_var_7": 1
                },
                "param_1": {
                    "arg1": 7,
                    "first_param": 1,
                    "input1": 5,
                    "input_1": 5,
                    "input_flag": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 3,
                    "input_value_1": 1,
                    "input_x": 1,
                    "param1": 2,
                    "param_1": 2,
                    "value_1": 1
                },
                "param_2": {
                    "arg2": 7,
                    "flag_param": 1,
                    "input2": 5,
                    "input_2": 5,
                    "input_param2": 1,
                    "input_param_2": 3,
                    "input_value_2": 1,
                    "input_y": 1,
                    "param2": 2,
                    "param_2": 3,
                    "second_param": 1,
                    "value_2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "bit_offset": 1,
                    "condition_1": 1,
                    "data1": 1,
                    "first_input": 1,
                    "flag_data": 1,
                    "input1": 4,
                    "input_1": 1,
                    "input_a": 1,
                    "input_data_1": 1,
                    "input_param1": 1,
                    "input_param3": 1,
                    "input_param_3": 3,
                    "input_size": 1,
                    "input_value": 1,
                    "input_value_1": 2,
                    "number1": 1,
                    "number_1": 1,
                    "param1": 1,
                    "param_size": 1,
                    "value1": 3,
                    "value_1": 2
                },
                "param_4": {
                    "arg4": 1,
                    "bit_mask": 1,
                    "bit_value": 1,
                    "condition_2": 1,
                    "data2": 1,
                    "flag": 1,
                    "input2": 4,
                    "input_2": 1,
                    "input_b": 1,
                    "input_data_2": 1,
                    "input_param2": 1,
                    "input_param4": 1,
                    "input_param_4": 3,
                    "input_value_2": 2,
                    "number2": 1,
                    "number_2": 1,
                    "param2": 1,
                    "param_val": 1,
                    "second_input": 1,
                    "shift_amount": 1,
                    "value2": 3,
                    "value_2": 2
                },
                "param_5": {
                    "out_1": 1,
                    "output1": 11,
                    "output_1": 5,
                    "output_param1": 3,
                    "output_param_1": 4,
                    "output_ptr_1": 1,
                    "output_value1": 1,
                    "output_value_1": 2,
                    "result1": 1,
                    "result_1": 2
                },
                "param_6": {
                    "out_2": 1,
                    "output2": 11,
                    "output_2": 5,
                    "output_param2": 3,
                    "output_param_2": 4,
                    "output_ptr_2": 1,
                    "output_value2": 1,
                    "output_value_2": 2,
                    "result2": 1,
                    "result_2": 2
                },
                "uVar2": {
                    "computed_value": 1,
                    "offset": 1,
                    "output_2": 1,
                    "shifted_input": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "temp": 3,
                    "temp1": 4,
                    "temp3": 1,
                    "temp_1": 4,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var1": 5,
                    "value": 1,
                    "var1": 4
                },
                "uVar5": {
                    "mask": 1,
                    "shifted_output": 1,
                    "shifted_result": 1,
                    "shifted_val": 1,
                    "shifted_value": 3,
                    "shifted_var": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 4,
                    "temp_3": 1,
                    "temp_4": 4,
                    "temp_var3": 2,
                    "temp_var4": 4,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "var4": 3
                },
                "uVar6": {
                    "flag": 1,
                    "flag_val": 1,
                    "shift": 1,
                    "shift_amount": 7,
                    "shift_bits": 1,
                    "shift_count": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 4,
                    "temp_4": 1,
                    "temp_5": 4,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var_5": 1,
                    "var5": 3
                },
                "uVar7": {
                    "concatenated_values": 1,
                    "func_result": 1,
                    "function_result": 2,
                    "result2": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp5": 2,
                    "temp6": 4,
                    "temp_5": 1,
                    "temp_6": 4,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var6": 2,
                    "temp_var_6": 1,
                    "var6": 3
                }
            },
            "called": [
                "FUN_080091e4",
                "FUN_080091a4",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nint decode_and_transform_data_08009630(undefined4 arg1,undefined4 arg2,uint input1,uint input2,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint temp_var1;\n  int temp1;\n  int temp2;\n  uint temp4;\n  uint shift_amount;\n  undefined8 temp_6;\n  uint local_var1;\n  uint local_var2;\n  \n  result = FUN_080090c0(arg1,1);\n  shift_amount = (input2 << 1) >> 0x15;\n  local_var2 = input2 & 0xfffff;\n  if (shift_amount != 0) {\n    local_var2 = local_var2 | 0x100000;\n  }\n  if (input1 == 0) {\n    temp1 = FUN_080091e4(&local_var2);\n    temp2 = 1;\n    temp_var1 = temp1 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = local_var2;\n  }\n  else {\n    local_var1 = input1;\n    temp_var1 = FUN_080091e4(&local_var1);\n    if (temp_var1 == 0) {\n      *(uint *)(result + 0x14) = local_var1;\n    }\n    else {\n      temp4 = local_var2 << (0x20 - temp_var1 & 0xff);\n      local_var2 = local_var2 >> (temp_var1 & 0xff);\n      *(uint *)(result + 0x14) = temp4 | local_var1;\n    }\n    if (local_var2 == 0) {\n      temp2 = 1;\n    }\n    else {\n      temp2 = 2;\n    }\n    *(uint *)(result + 0x18) = local_var2;\n    *(int *)(result + 0x10) = temp2;\n  }\n  if (shift_amount == 0) {\n    *output1 = temp_var1 - 0x432;\n    temp_6 = FUN_080091a4(*(undefined4 *)(result + temp2 * 4 + 0x10));\n    *output2 = (int)((ulonglong)temp_6 >> 0x20) * 0x20 - (int)temp_6;\n    return result;\n  }\n  *output1 = (shift_amount - 0x433) + temp_var1;\n  *output2 = 0x35 - temp_var1;\n  return result;\n}\n\n",
            "current_name": "decode_and_transform_data_08009630",
            "entrypoint": "0x08009630",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009630": "decode_and_transform_data_08009630",
                "iVar1": "result",
                "iVar3": "temp1",
                "iVar4": "temp2",
                "local_1c": "local_var2",
                "local_20": "local_var1",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "input1",
                "param_4": "input2",
                "param_5": "output1",
                "param_6": "output2",
                "uVar2": "temp_var1",
                "uVar5": "temp4",
                "uVar6": "shift_amount",
                "uVar7": "temp_6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e0": {
            "additional_data": {
                "FUNK_080004c8": {
                    "reverse_params": 1
                },
                "FUN_080004c8": {
                    "calculate_value": 1,
                    "convert_to_float_helper": 1,
                    "perform_calculation": 1
                },
                "FUN_080096e0": {
                    "calculate_exponent": 2,
                    "calculate_float": 1,
                    "calculate_float_exponent": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 2,
                    "calculate_floating_point_value": 2,
                    "convert_float_to_binary": 1,
                    "convert_float_to_int": 1,
                    "convert_float_to_integer": 1,
                    "convert_float_to_uint": 2,
                    "convert_floating_point": 1,
                    "convert_to_float": 4,
                    "convert_to_ieee754": 1,
                    "decode_and_convert_float": 1,
                    "decode_float": 2,
                    "process_floating_point": 2,
                    "reverse_float_bits": 1,
                    "unpack_float": 1
                },
                "iVar1": {
                    "additional_value": 1,
                    "additional_variable1": 1,
                    "counter": 8,
                    "error": 1,
                    "index_var": 1,
                    "iteration": 1,
                    "iteration_count": 1,
                    "iteration_index": 1,
                    "offset": 11,
                    "shift": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "temp_variable": 1,
                    "temp_variable_1": 1
                },
                "param_1": {
                    "exponent": 1,
                    "float_bits": 1,
                    "float_param": 1,
                    "float_part": 1,
                    "float_value": 2,
                    "input1": 7,
                    "input_1": 1,
                    "input_float": 1,
                    "input_param1": 2,
                    "input_value1": 2,
                    "integer_part": 4,
                    "mantissa": 3,
                    "number": 1,
                    "output_float_low_bits": 1,
                    "packed_value_1": 1,
                    "value1": 1,
                    "x": 1
                },
                "param_2": {
                    "exponent": 4,
                    "exponent_bits": 1,
                    "exponent_value": 1,
                    "float_param2": 1,
                    "fraction_part": 1,
                    "fractional_part": 3,
                    "input2": 7,
                    "input_2": 1,
                    "input_float_high": 1,
                    "input_param2": 2,
                    "input_value2": 2,
                    "int_part": 1,
                    "int_value": 1,
                    "mantissa": 1,
                    "output_float_high_bits": 1,
                    "packed_value_2": 1,
                    "value2": 1,
                    "y": 1
                },
                "param_3": {
                    "constant1": 1,
                    "exponent": 6,
                    "mask_param": 1,
                    "output": 4,
                    "output_data": 1,
                    "output_exponent": 1,
                    "output_integer": 1,
                    "output_param": 1,
                    "output_value": 2,
                    "result": 11,
                    "result_pointer": 1,
                    "unpacked_exponent": 1
                },
                "param_4": {
                    "additional_value": 1,
                    "config": 1,
                    "constant": 4,
                    "constant2": 1,
                    "default_param": 1,
                    "extra_param": 3,
                    "flag": 1,
                    "input_value3": 1,
                    "param4": 5,
                    "param_4": 8,
                    "precision": 1,
                    "special_value": 1,
                    "temp": 1,
                    "unknown": 1,
                    "z": 1
                },
                "uVar2": {
                    "abs_exponent": 3,
                    "abs_input2": 3,
                    "abs_int_part": 1,
                    "abs_int_value": 1,
                    "cleaned_fraction_part": 1,
                    "cleared_float_param2": 1,
                    "exponent_mask": 1,
                    "fractional_part_mask": 1,
                    "fractional_part_masked": 1,
                    "input_float_high_masked": 1,
                    "masked_input": 1,
                    "masked_input2": 1,
                    "masked_input_value2": 1,
                    "masked_param2": 1,
                    "modified_exponent": 1,
                    "modified_float_high_bits": 1,
                    "modified_input2": 2,
                    "modified_y_value": 1,
                    "normalized_exponent": 1,
                    "positive_input2": 1,
                    "positive_mantissa": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "temp_variable_2": 1,
                    "unsigned_value": 1,
                    "unsigned_var": 1
                },
                "uVar3": {
                    "combined": 1,
                    "combined_float": 1,
                    "combined_float_params": 1,
                    "combined_input": 3,
                    "combined_inputs": 3,
                    "combined_params": 2,
                    "combined_value": 4,
                    "combined_values": 1,
                    "combined_xy": 1,
                    "concat_value": 1,
                    "concatenated_float": 1,
                    "concatenated_value": 1,
                    "concatenated_values": 3,
                    "converted_float": 2,
                    "converted_value": 1,
                    "decoded_float": 1,
                    "float_value": 1,
                    "floating_point_value": 2,
                    "unpacked_value": 1
                }
            },
            "called": [
                "FUN_080004c8"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 convert_float_to_uint_080096e0(uint input1,uint input2,int *result,undefined4 param_4)\n\n{\n  int offset;\n  uint abs_exponent;\n  undefined8 combined_value;\n  \n  combined_value = CONCAT44(input2,input1);\n  offset = 0;\n  abs_exponent = input2 & 0x7fffffff;\n  *result = 0;\n  if ((abs_exponent < 0x7ff00000) && ((abs_exponent | input1) != 0)) {\n    if (abs_exponent < 0x100000) {\n      combined_value = FUN_080004c8(input1,input2,0,0x43500000,param_4);\n      offset = -0x36;\n      abs_exponent = (uint)((ulonglong)combined_value >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)combined_value;\n    input2 = (uint)((ulonglong)combined_value >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)abs_exponent >> 0x14) + -0x3fe + offset;\n  }\n  return CONCAT44(input2,input1);\n}\n\n",
            "current_name": "convert_float_to_uint_080096e0",
            "entrypoint": "0x080096e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e0": "convert_float_to_uint_080096e0",
                "iVar1": "offset",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "result",
                "uVar2": "abs_exponent",
                "uVar3": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009744": {
            "additional_data": {
                "DAT_20000c10": {
                    "error_value": 1,
                    "extracted_data": 1,
                    "latest_result": 1
                },
                "FUN_08009744": {
                    "check_and_set_return_value": 1,
                    "check_result_and_assign": 1,
                    "extract_and_assign_value": 1,
                    "extract_data": 7,
                    "extract_integer_from_binary": 1,
                    "extract_return_value": 1,
                    "extract_value": 1,
                    "find_and_assign_value": 1,
                    "find_error_value": 1,
                    "process_and_return_result": 1,
                    "process_data": 10,
                    "reverse_and_assign_value": 1,
                    "update_param_value": 1,
                    "update_result": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 12,
                    "result_check": 1,
                    "return_value": 9,
                    "status": 3,
                    "status_code": 1,
                    "sub_function_result": 2
                },
                "param_1": {
                    "output": 10,
                    "output_ptr": 1,
                    "output_value": 3,
                    "param_value": 1,
                    "result": 14,
                    "result_array": 1,
                    "result_pointer": 1
                },
                "param_2": {
                    "input": 18,
                    "input_data": 1,
                    "input_value": 12
                }
            },
            "called": [
                "FUN_08005728"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "code": "\nvoid process_data_08009744(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_20000c10 = 0;\n  result = FUN_08005728(input);\n  if ((result == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_08009744",
            "entrypoint": "0x08009744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009744": "process_data_08009744",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009768": {
            "additional_data": {
                "FUN_08009768": {
                    "copy_and_clean_string": 1,
                    "copy_and_clear_buffer": 1,
                    "copy_and_clear_string": 1,
                    "copy_and_filter_data": 1,
                    "copy_and_terminate_string": 1,
                    "copy_array": 1,
                    "copy_safe_string": 1,
                    "copy_string": 18,
                    "copy_string_with_null_terminator": 1,
                    "copy_to_destination": 1,
                    "copy_to_new_array": 1,
                    "copy_uint_array_without_nonprintable": 1,
                    "copy_valid_characters": 1,
                    "extract_and_copy_chars": 1
                },
                "cVar1": {
                    "ch": 3,
                    "char_temp": 1,
                    "char_val": 2,
                    "character": 2,
                    "current_byte": 2,
                    "current_char": 15,
                    "current_character": 3,
                    "next_char": 1
                },
                "param_1": {
                    "dest": 13,
                    "dest_array": 1,
                    "dest_ptr": 1,
                    "destination": 7,
                    "dst": 2,
                    "source": 2,
                    "source_array": 2,
                    "source_buffer": 1,
                    "src": 1,
                    "src_ptr": 1
                },
                "param_2": {
                    "dest": 1,
                    "dest_ptr": 1,
                    "destination": 2,
                    "destination_array": 2,
                    "destination_buffer": 1,
                    "source": 7,
                    "src": 15,
                    "src_array": 1,
                    "src_ptr": 1
                },
                "param_3": {
                    "array_length": 1,
                    "buffer_size": 1,
                    "length": 20,
                    "num_bytes": 1,
                    "num_chars": 2,
                    "size": 6
                },
                "puVar2": {
                    "current_src": 1,
                    "dest_ptr_temp": 1,
                    "destination_ptr": 1,
                    "source_ptr": 4,
                    "src": 1,
                    "src_pointer": 1,
                    "src_ptr": 22
                },
                "puVar3": {
                    "current_dest": 1,
                    "dest": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 19,
                    "destination_ptr": 4,
                    "dst_ptr": 3,
                    "source_ptr": 1,
                    "src_ptr_temp": 1
                },
                "uVar4": {
                    "ch": 1,
                    "char_value": 1,
                    "curr_char": 1,
                    "current_byte": 2,
                    "current_char": 6,
                    "current_value": 5,
                    "current_word": 3,
                    "data_temp": 1,
                    "temp": 4,
                    "temp_value": 1,
                    "value": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nvoid copy_safe_string_08009768(uint *dest,uint *src,uint length)\n\n{\n  char current_char;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_char;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (dest_ptr = dest, src_ptr = src, 3 < length)) {\n    do {\n      src = src_ptr + 1;\n      current_char = *src_ptr;\n      dest = dest_ptr;\n      if ((current_char + 0xfefefeff & ~current_char & 0x80808080) != 0) goto LAB_0800979c;\n      length = length - 4;\n      dest = dest_ptr + 1;\n      *dest_ptr = current_char;\n      dest_ptr = dest;\n      src_ptr = src;\n    } while (3 < length);\n  }\n  src_ptr = src;\n  if (length != 0) {\nLAB_0800979c:\n    current_char = *(char *)src_ptr;\n    *(char *)dest = current_char;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      length = length - 1;\n      if (current_char == '\\0') break;\n      if (length == 0) {\n        return;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)dest = current_char;\n    }\n    if (length != 0) {\n      src_ptr = dest;\n      do {\n        dest_ptr = (uint *)((int)src_ptr + 1);\n        *(char *)src_ptr = '\\0';\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (uint *)(length + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_safe_string_08009768",
            "entrypoint": "0x08009768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009768": "copy_safe_string_08009768",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080097cc": {
            "additional_data": {
                "FUN_08001084": {
                    "copy_data": 11,
                    "process_buffer": 1
                },
                "FUN_080088ec": {
                    "apply_change": 1,
                    "do_something": 1,
                    "handle_error": 2,
                    "handle_exception": 1,
                    "initialize_data": 1,
                    "initialize_result": 1,
                    "process_data_2": 1,
                    "process_result": 1,
                    "reverse_data": 1,
                    "reverse_operation": 2
                },
                "FUN_08008af8": {
                    "allocate_buffer": 5,
                    "allocate_memory": 1,
                    "increase_memory": 1,
                    "request_memory": 1,
                    "resize_array": 1,
                    "resize_buffer": 1,
                    "resize_memory": 2
                },
                "FUN_080097cc": {
                    "extract_and_process_data": 1,
                    "process_binary_data": 1,
                    "process_data": 23
                },
                "FUN_08009a18": {
                    "apply_data": 1,
                    "handle_data": 1,
                    "modify_data": 1,
                    "process_data": 2,
                    "process_entry": 1,
                    "process_input": 1,
                    "process_value": 2,
                    "update_buffer": 1,
                    "update_data": 2
                },
                "FUN_08009adc": {
                    "allocate_memory": 11,
                    "allocate_memory_2": 1
                },
                "iVar1": {
                    "count": 1,
                    "counter": 1,
                    "current": 1,
                    "current_data": 1,
                    "current_index": 5,
                    "current_value": 5,
                    "index": 1,
                    "input_buffer_length": 1,
                    "input_value": 4,
                    "input_var1": 1,
                    "new_data_offset": 1,
                    "new_input_data": 1,
                    "source_array_index": 1,
                    "start_index": 1,
                    "temp_var1": 2,
                    "total": 2,
                    "value1": 2
                },
                "iVar3": {
                    "new_data": 1,
                    "new_index": 2,
                    "new_offset": 1,
                    "new_value": 1,
                    "new_variable": 1,
                    "remaining_offset": 1,
                    "result": 10,
                    "result_value": 1,
                    "reverse_result": 1,
                    "temp": 1,
                    "temp_data": 1,
                    "temp_index": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "temp_var_2": 1,
                    "value3": 2
                },
                "iVar4": {
                    "diff": 1,
                    "offset": 10,
                    "offset_diff": 1,
                    "remaining_count": 1,
                    "remaining_data_length": 1,
                    "temp": 1,
                    "temp_offset": 1,
                    "temp_result": 1,
                    "temp_size": 1,
                    "temp_value": 1,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "temp_var4": 2,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "temp_variable": 1,
                    "tmp_value": 1,
                    "value4": 2
                },
                "param_1": {
                    "output": 4,
                    "output_array": 13,
                    "output_buffer": 3,
                    "output_data": 2,
                    "result": 9
                },
                "param_2": {
                    "data": 7,
                    "data1": 1,
                    "input1": 3,
                    "input_arr": 1,
                    "input_array": 10,
                    "input_array1": 2,
                    "input_buffer": 3,
                    "input_data": 3,
                    "source_array": 1
                },
                "param_3": {
                    "buffer": 2,
                    "bytes": 1,
                    "control_array": 5,
                    "control_buffer": 2,
                    "counter_array": 1,
                    "data2": 1,
                    "data_array": 2,
                    "helper_array": 1,
                    "info": 4,
                    "info_data": 1,
                    "input2": 3,
                    "input_array2": 2,
                    "metadata": 1,
                    "output_arr": 1,
                    "param": 1,
                    "size": 1,
                    "size_array": 1,
                    "temp_array": 1
                },
                "puVar7": {
                    "current_data": 2,
                    "current_element": 1,
                    "current_entry": 1,
                    "current_input_byte": 1,
                    "current_pointer": 2,
                    "current_ptr": 2,
                    "next_array": 1,
                    "next_array_ptr": 1,
                    "next_control_data": 1,
                    "next_data": 3,
                    "next_entry": 1,
                    "next_ptr": 1,
                    "pointer1": 1,
                    "pointer_var1": 1,
                    "pointer_var_1": 1,
                    "pointer_var_7": 1,
                    "ptr": 2,
                    "ptr1": 2,
                    "ptr_var1": 2,
                    "temp_pointer1": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 1
                },
                "puVar8": {
                    "control_data": 1,
                    "current_array": 1,
                    "current_control_byte_pointer": 1,
                    "current_data": 3,
                    "current_entry": 1,
                    "current_ptr": 2,
                    "next_data": 2,
                    "next_element": 1,
                    "next_entry": 1,
                    "next_pointer": 2,
                    "next_ptr": 2,
                    "pointer2": 1,
                    "pointer_var2": 1,
                    "pointer_var_2": 1,
                    "pointer_var_8": 1,
                    "ptr2": 2,
                    "ptr_next": 1,
                    "ptr_var2": 2,
                    "temp_array_ptr": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2
                },
                "uVar2": {
                    "count": 3,
                    "counter": 1,
                    "current_control_byte": 1,
                    "current_count": 1,
                    "current_size": 2,
                    "current_value": 1,
                    "input_var2": 1,
                    "new_data_size": 1,
                    "remaining_length": 1,
                    "temp": 1,
                    "temp_val": 1,
                    "temp_value": 4,
                    "temp_var": 2,
                    "temp_var1": 3,
                    "temp_var2": 2,
                    "temp_var_1": 1,
                    "temp_var_2": 1,
                    "temp_variable_2": 1,
                    "value": 1,
                    "value2": 2
                },
                "uVar5": {
                    "buffer_size": 2,
                    "limit": 1,
                    "max_data_size": 1,
                    "max_index": 1,
                    "max_input_length": 1,
                    "max_offset": 1,
                    "max_size": 2,
                    "max_value": 3,
                    "new_count": 2,
                    "new_length": 1,
                    "new_size": 3,
                    "new_value": 1,
                    "size": 2,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_var5": 2,
                    "temp_var_4": 1,
                    "temp_var_5": 1,
                    "temp_variable_4": 1,
                    "value5": 2
                },
                "uVar6": {
                    "bytes_read": 1,
                    "bytes_remaining": 1,
                    "count": 2,
                    "current_index": 1,
                    "current_size": 1,
                    "data_offset": 1,
                    "data_value": 1,
                    "entry_size": 1,
                    "input_length": 1,
                    "num_elements": 1,
                    "offset": 1,
                    "temp_count": 2,
                    "temp_size": 1,
                    "temp_size2": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "temp_var6": 2,
                    "temp_var_5": 1,
                    "temp_var_6": 1,
                    "temp_variable_3": 1,
                    "update_value": 1,
                    "value": 1,
                    "value6": 2
                },
                "uVar9": {
                    "current_val": 1,
                    "current_value": 1,
                    "current_value2": 1,
                    "current_var": 1,
                    "data_length": 1,
                    "entry_value": 1,
                    "temp": 3,
                    "temp_value": 4,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "temp_var_6": 1,
                    "temp_var_9": 1,
                    "temp_variable_5": 1,
                    "tmp_result": 1,
                    "value": 5,
                    "value7": 2
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_08009adc",
                "FUN_08008af8"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 extract_and_process_data_080097cc(undefined4 *output_array,int *input_array,int *control_array)\n\n{\n  int current_value;\n  uint temp_value;\n  int result;\n  int offset;\n  uint new_size;\n  uint temp_var6;\n  undefined4 *next_data;\n  undefined4 *current_data;\n  undefined4 value;\n  \n  if (control_array[2] != 0) {\n    current_value = *input_array;\n    new_size = input_array[2];\n    current_data = (undefined4 *)*control_array;\n    do {\n      do {\n        next_data = current_data + 2;\n        value = *current_data;\n        temp_var6 = current_data[1];\n        current_data = next_data;\n      } while (temp_var6 == 0);\n      temp_value = temp_var6;\n      if ((new_size <= temp_var6) && (temp_value = new_size, (*(ushort *)(input_array + 3) & 0x480) != 0)) {\n        offset = current_value - input_array[4];\n        new_size = (input_array[5] * 3) / 2;\n        temp_value = temp_var6 + 1 + offset;\n        if (new_size < temp_value) {\n          new_size = temp_value;\n        }\n        if ((int)((uint)*(ushort *)(input_array + 3) << 0x15) < 0) {\n          result = FUN_08008af8(output_array,new_size);\n          if (result == 0) {\nLAB_08009896:\n            *output_array = 0xc;\n            *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) | 0x40;\n            control_array[1] = 0;\n            control_array[2] = 0;\n            return 0xffffffff;\n          }\n          FUN_08001084(result,input_array[4],offset);\n          *(ushort *)(input_array + 3) = *(ushort *)(input_array + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          result = FUN_08009adc(output_array);\n          if (result == 0) {\n            FUN_080088ec(output_array,input_array[4]);\n            goto LAB_08009896;\n          }\n        }\n        current_value = result + offset;\n        input_array[5] = new_size;\n        input_array[4] = result;\n        *input_array = current_value;\n        input_array[2] = new_size - offset;\n        temp_value = temp_var6;\n      }\n      FUN_08009a18(current_value,value,temp_value);\n      offset = control_array[2];\n      new_size = input_array[2] - temp_value;\n      current_value = *input_array + temp_value;\n      input_array[2] = new_size;\n      *input_array = current_value;\n      control_array[2] = offset - temp_var6;\n    } while (offset - temp_var6 != 0);\n  }\n  control_array[1] = 0;\n  return 0;\n}\n\n",
            "current_name": "extract_and_process_data_080097cc",
            "entrypoint": "0x080097cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080097cc": "extract_and_process_data_080097cc",
                "iVar1": "current_value",
                "iVar3": "result",
                "iVar4": "offset",
                "param_1": "output_array",
                "param_2": "input_array",
                "param_3": "control_array",
                "puVar7": "next_data",
                "puVar8": "current_data",
                "uVar2": "temp_value",
                "uVar5": "new_size",
                "uVar6": "temp_var6",
                "uVar9": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098c0": {
            "additional_data": {
                "FUNC_08008af0": {
                    "initialize": 2,
                    "initialize_data": 1,
                    "initialize_memory": 1
                },
                "FUNC_08008af4": {
                    "cleanup": 2,
                    "cleanup_data": 1,
                    "deallocate_memory": 1
                },
                "FUN_080098c0": {
                    "process_data": 3,
                    "process_input": 2,
                    "update_configuration": 1,
                    "update_data": 22,
                    "update_data_record": 1,
                    "update_element": 1,
                    "update_values": 1
                },
                "param_1": {
                    "action": 3,
                    "action_type": 1,
                    "condition": 1,
                    "config_type": 1,
                    "data_type": 3,
                    "element_type": 1,
                    "flag": 2,
                    "input_type": 6,
                    "mode": 1,
                    "record_type": 1,
                    "status": 2,
                    "type": 9
                },
                "param_2": {
                    "data": 5,
                    "data1": 5,
                    "data_value": 3,
                    "new_data": 2,
                    "new_value": 3,
                    "param2": 1,
                    "value": 9,
                    "value1": 3
                },
                "param_3": {
                    "data1": 5,
                    "data2": 5,
                    "data_1": 1,
                    "data_value": 1,
                    "data_value1": 1,
                    "info1": 1,
                    "new_value1": 2,
                    "param1": 2,
                    "param1_value": 1,
                    "param3": 4,
                    "record_flag": 1,
                    "value1": 4,
                    "value2": 3
                },
                "param_4": {
                    "additional_data": 1,
                    "data2": 5,
                    "data3": 5,
                    "data_2": 1,
                    "data_value2": 1,
                    "info2": 1,
                    "new_value2": 2,
                    "param2": 2,
                    "param2_value": 1,
                    "param4": 5,
                    "value2": 4,
                    "value3": 3
                },
                "puVar1": {
                    "config_data": 1,
                    "current_ptr": 1,
                    "data_buffer": 2,
                    "data_pointer": 6,
                    "data_ptr": 15,
                    "ptr": 2,
                    "ptr1": 1,
                    "ptr_data": 2,
                    "record_ptr": 1
                },
                "uVar2": {
                    "result": 8,
                    "return_val": 1,
                    "return_value": 22
                },
                "uVar3": {
                    "bit": 1,
                    "bit_mask": 24,
                    "bit_shift": 2,
                    "bitmask": 1,
                    "flag": 1,
                    "mask": 1,
                    "shifted_value": 1
                },
                "uVar4": {
                    "count": 10,
                    "counter": 3,
                    "current_count": 2,
                    "data_count": 6,
                    "data_index": 2,
                    "index": 3,
                    "num_configs": 1,
                    "num_elements": 2,
                    "record_index": 1,
                    "size": 1
                }
            },
            "called": [
                "FUN_08008af4",
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_080078a0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 update_data_record_080098c0(int type,undefined4 value,undefined4 data1,undefined4 param4)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  FUNC_08008af0(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = param4;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    *(uint *)(data_ptr + 4) = count + 1;\n    return_value = DAT_20000448;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = value;\n    FUNC_08008af4(return_value);\n    return_value = 0;\n  }\n  else {\n    FUNC_08008af4(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_record_080098c0",
            "entrypoint": "0x080098c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098c0": "update_data_record_080098c0",
                "param_1": "type",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "param4",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009980": {
            "additional_data": {
                "FUN_08005d68": {
                    "clear_memory": 4,
                    "initialize_memory": 2,
                    "zero_out_memory": 1
                },
                "FUN_08008af8": {
                    "allocate_memory": 6,
                    "allocate_memory_block": 1
                },
                "FUN_08009980": {
                    "allocate_and_initialize": 1,
                    "allocate_and_initialize_array": 2,
                    "allocate_and_initialize_memory": 3,
                    "allocate_memory": 6,
                    "initialize_array": 3,
                    "initialize_memory": 14,
                    "process_data": 1,
                    "resize_memory_block": 1
                },
                "param_1": {
                    "array": 3,
                    "array_element": 1,
                    "buffer": 3,
                    "data": 6,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_size": 1,
                    "destination": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_pointer": 2,
                    "input_ptr": 1,
                    "mem_address": 2,
                    "param_1": 1,
                    "ptr": 5,
                    "size": 1
                },
                "param_2": {
                    "element_size": 1,
                    "length": 1,
                    "num_elements": 1,
                    "num_rows": 3,
                    "row_size": 2,
                    "rows": 6,
                    "size": 2,
                    "size1": 3,
                    "size_1": 3,
                    "size_of_array": 1,
                    "size_of_element": 1,
                    "width": 7
                },
                "param_3": {
                    "cols": 3,
                    "column_size": 2,
                    "columns": 3,
                    "count": 2,
                    "element_size": 1,
                    "height": 7,
                    "num_cols": 2,
                    "num_columns": 1,
                    "num_elements": 2,
                    "number_of_elements": 1,
                    "size": 1,
                    "size2": 3,
                    "size_2": 3
                },
                "puVar1": {
                    "allocated_array": 4,
                    "allocated_buffer": 2,
                    "allocated_data": 1,
                    "allocated_mem_ptr": 1,
                    "allocated_memory": 10,
                    "allocated_ptr": 1,
                    "array_ptr": 1,
                    "memory_block": 1,
                    "memory_ptr": 6,
                    "new_block": 1,
                    "ptr": 3
                },
                "puVar3": {
                    "current_position": 1,
                    "end_block": 1,
                    "end_of_memory": 1,
                    "final_memory": 1,
                    "final_ptr": 1,
                    "initialized_array": 1,
                    "initialized_memory": 4,
                    "initialized_ptr": 1,
                    "last_element": 1,
                    "memory_end_ptr": 1,
                    "modified_memory": 1,
                    "modified_memory_ptr": 1,
                    "new_ptr": 1,
                    "next_position": 1,
                    "next_ptr": 1,
                    "output_pointer": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr_end": 1,
                    "ptr_to_fill_with_zeros": 1,
                    "ptr_to_initialized_buffer": 1,
                    "ptr_to_return": 1,
                    "result": 2,
                    "result_ptr": 1,
                    "updated_buffer": 1,
                    "updated_memory": 1
                },
                "uVar": {
                    "array_length": 1
                },
                "uVar2": {
                    "adjusted_size": 10,
                    "allocated_size": 3,
                    "array_length": 2,
                    "array_size": 2,
                    "block_size": 2,
                    "buffer_size": 2,
                    "mem_size": 1,
                    "memory_size": 1,
                    "size": 5,
                    "size_minus_four": 1,
                    "total_size": 1
                }
            },
            "called": [
                "FUN_08005d68",
                "FUN_08008af8"
            ],
            "calling": [
                "FUN_080090c0"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_08009980(undefined4 data,int width,int height)\n\n{\n  undefined4 *allocated_memory;\n  uint adjusted_size;\n  undefined4 *initialized_memory;\n  \n  allocated_memory = (undefined4 *)FUN_08008af8(data,height * width);\n  if (allocated_memory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjusted_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (adjusted_size < 0x25) {\n    initialized_memory = allocated_memory;\n    if (0x13 < adjusted_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < adjusted_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (adjusted_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          initialized_memory = allocated_memory + 6;\n        }\n        else {\n          initialized_memory = allocated_memory + 4;\n        }\n        *initialized_memory = 0;\n        initialized_memory[1] = 0;\n        initialized_memory[2] = 0;\n        return allocated_memory;\n      }\n      initialized_memory = allocated_memory + 2;\n    }\n    *initialized_memory = 0;\n    initialized_memory[1] = 0;\n    initialized_memory[2] = 0;\n    return allocated_memory;\n  }\n  FUN_08005d68(allocated_memory,0);\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009980",
            "entrypoint": "0x08009980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "param_1": "data",
                "param_2": "width",
                "param_3": "height",
                "puVar1": "allocated_memory",
                "puVar3": "initialized_memory",
                "uVar": "array_length",
                "uVar2": "adjusted_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009a18": {
            "additional_data": {
                "FUN_08009a18": {
                    "copy_and_shift_memory": 1,
                    "copy_buffer": 1,
                    "copy_data": 1,
                    "copy_memory": 22,
                    "copy_memory_reverse": 1,
                    "copy_range": 1,
                    "mem_copy": 1,
                    "reverse_copy": 2,
                    "reverse_copy_memory": 1
                },
                "LAB_08009abc": {
                    "copy_single_bytes": 1
                },
                "iVar3": {
                    "block_count": 1,
                    "copy_count": 1,
                    "i": 1,
                    "index": 1,
                    "iteration": 12,
                    "iteration_count": 1,
                    "iterator": 1,
                    "loop_counter": 2,
                    "loop_index": 1,
                    "num_blocks": 1,
                    "num_copies": 2,
                    "num_iterations": 2,
                    "num_loops": 1,
                    "num_words": 1
                },
                "param_1": {
                    "dest": 12,
                    "dest_pointer": 1,
                    "destination": 13,
                    "destination_pointer": 1,
                    "source": 2,
                    "source_start": 1,
                    "src": 1
                },
                "param_2": {
                    "dest": 1,
                    "destination": 2,
                    "source": 13,
                    "source_end": 1,
                    "source_pointer": 1,
                    "src": 12,
                    "src_pointer": 1
                },
                "param_3": {
                    "length": 7,
                    "num_bytes": 2,
                    "size": 22
                },
                "puVar1": {
                    "dest_ptr": 24,
                    "dst_ptr": 1,
                    "source_ptr": 1,
                    "src_ptr": 2
                },
                "puVar2": {
                    "dest_ptr": 2,
                    "dst_ptr": 1,
                    "src_ptr": 25
                },
                "puVar4": {
                    "dest": 1,
                    "dest_byte": 4,
                    "dest_byte_ptr": 4,
                    "dest_char_ptr": 1,
                    "dest_end": 8,
                    "dest_end_ptr": 3,
                    "dest_last_ptr": 1,
                    "dest_ptr_byte": 1,
                    "dest_temp": 1,
                    "dst_byte_ptr": 1,
                    "src_byte": 1,
                    "src_byte_ptr": 1,
                    "temp_ptr": 1
                },
                "puVar5": {
                    "dest_byte_ptr": 1,
                    "dst_byte": 1,
                    "src": 1,
                    "src_byte": 4,
                    "src_byte_ptr": 5,
                    "src_char_ptr": 1,
                    "src_end": 7,
                    "src_end_ptr": 3,
                    "src_last_ptr": 1,
                    "src_ptr_byte": 1,
                    "src_temp": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1
                },
                "uVar6": {
                    "copy_remaining": 1,
                    "count": 1,
                    "num_bytes": 1,
                    "remainder": 1,
                    "remaining": 1,
                    "remaining_bytes": 2,
                    "remaining_length": 2,
                    "remaining_size": 16,
                    "temp": 1,
                    "temp_size": 1,
                    "temp_value": 1
                },
                "uVar7": {
                    "adjusted_length": 1,
                    "adjusted_size": 3,
                    "aligned_size": 2,
                    "copy_size": 2,
                    "count": 1,
                    "last_bytes": 1,
                    "num_copied": 1,
                    "partial_size": 1,
                    "remainder": 2,
                    "remaining": 1,
                    "remaining_bytes": 3,
                    "remaining_length": 1,
                    "remaining_size": 5,
                    "remaining_size_aligned": 1,
                    "remaining_words": 1,
                    "temp_size": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "code": "\nvoid copy_memory_reverse_08009a18(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_end;\n  undefined4 *src_end;\n  uint remaining_size;\n  uint remaining_size;\n  \n  if ((source < destination) && (src_ptr = (undefined4 *)((int)source + size), destination < src_ptr)) {\n    dest_end = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_end = dest_end + -1;\n        *dest_end = *(undefined *)src_ptr;\n      } while (source != src_ptr);\n    }\n  }\n  else {\n    remaining_size = size;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto copy_single_bytes;\n      src_ptr = source + 4;\n      dest_ptr = destination + 4;\n      do {\n        src_end = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_end;\n        dest_ptr = dest_ptr + 4;\n      } while (src_end != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      remaining_size = size & 0xf;\n      source = source + iteration * 4;\n      destination = destination + iteration * 4;\n      if (3 < remaining_size) {\n        src_ptr = destination + -1;\n        remaining_size = remaining_size;\n        dest_ptr = source;\n        do {\n          remaining_size = remaining_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_size);\n        iteration = (remaining_size - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + iteration);\n        source = (undefined4 *)((int)source + iteration);\n        remaining_size = size & 3;\n      }\n    }\n    size = remaining_size;\n    if (remaining_size != 0) {\ncopy_single_bytes:\n      dest_end = (undefined *)((int)destination + -1);\n      src_ptr = source;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_end = dest_end + 1;\n        *dest_end = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_memory_reverse_08009a18",
            "entrypoint": "0x08009a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009a18": "copy_memory_reverse_08009a18",
                "LAB_08009abc": "copy_single_bytes",
                "iVar3": "iteration",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar4": "dest_end",
                "puVar5": "src_end",
                "uVar6": "remaining_size",
                "uVar7": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009adc": {
            "additional_data": {
                "DAT_20000454": {
                    "base_address": 1,
                    "data": 2,
                    "data_ptr": 1,
                    "global_ptr": 1,
                    "memory_size": 1
                },
                "FUN_080088ec": {
                    "process_memory": 1
                },
                "FUN_08008af8": {
                    "allocate_memory": 1
                },
                "FUN_080090a8": {
                    "initialize": 1
                },
                "FUN_080090b4": {
                    "cleanup": 1
                },
                "FUN_08009a18": {
                    "copy_memory": 1
                },
                "FUN_08009adc": {
                    "allocate_memory": 13,
                    "decompile_and_improve": 1,
                    "decompiled_function": 1,
                    "improved_code": 1,
                    "reallocate_memory": 1
                },
                "iVar11": {
                    "aligned_end": 1,
                    "alignment": 1,
                    "end": 1,
                    "end_ptr": 1,
                    "final_offset": 1,
                    "offset": 1,
                    "ptr1": 1,
                    "ptr_offset2": 1,
                    "temp10": 1,
                    "temp_6": 1,
                    "temp_int3": 2,
                    "temp_integer3": 1,
                    "temp_value8": 1,
                    "temp_var11": 3,
                    "temp_var2": 2,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var8": 2,
                    "temp_var_11": 1,
                    "temp_var_8": 1,
                    "var11": 5,
                    "var8": 1
                },
                "iVar2": {
                    "counter": 1,
                    "offset": 1,
                    "result": 1,
                    "temp": 5,
                    "temp1": 1,
                    "temp_int1": 2,
                    "temp_integer1": 1,
                    "temp_value1": 1,
                    "temp_var": 2,
                    "temp_var1": 3,
                    "temp_var2": 4,
                    "temp_var_1": 1,
                    "temp_var_2": 1,
                    "temp_variable": 1,
                    "var1": 2,
                    "var2": 4
                },
                "iVar5": {
                    "temp2": 4,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_int2": 2,
                    "temp_integer2": 1,
                    "temp_offset": 1,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var3": 4,
                    "temp_var5": 4,
                    "temp_var_3": 1,
                    "temp_var_5": 1,
                    "var1": 1,
                    "var3": 2,
                    "var5": 4
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "buffer": 3,
                    "buffer_address": 1,
                    "config": 1,
                    "input": 1,
                    "input_array": 7,
                    "input_buffer": 1,
                    "output_ptr": 1,
                    "param1": 1,
                    "param_address": 1,
                    "param_array": 2,
                    "param_ptr": 2,
                    "parameter_1": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_param": 1,
                    "ptr_to_data": 1,
                    "ptr_to_integer": 1,
                    "source_pointer": 1
                },
                "param_2": {
                    "arg2": 1,
                    "array": 1,
                    "array_ptr": 1,
                    "buffer": 3,
                    "data": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "destination_pointer": 1,
                    "existing_array": 1,
                    "existing_memory": 2,
                    "input_array": 1,
                    "input_ptr": 1,
                    "memory_block": 1,
                    "memory_buffer": 1,
                    "output_array": 5,
                    "output_buffer": 1,
                    "param2": 1,
                    "parameter_2": 1,
                    "previous_buffer": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr_data": 1,
                    "ptr_to_array": 1,
                    "ptr_to_buffer": 1
                },
                "param_3": {
                    "arg3": 1,
                    "array_len": 1,
                    "array_length": 2,
                    "array_size": 3,
                    "block_size": 1,
                    "buffer_size": 4,
                    "data_length": 1,
                    "data_size": 1,
                    "input_value": 1,
                    "length": 2,
                    "param3": 1,
                    "size": 13
                },
                "param_4": {
                    "new_param_4": 1
                },
                "piVar1": {
                    "new_address": 1,
                    "new_memory": 1,
                    "output_ptr_temp": 1,
                    "previous_buffer": 1,
                    "ptr": 1,
                    "ptr1": 5,
                    "ptr_result": 1,
                    "result": 3,
                    "result_pointer": 1,
                    "temp_array1": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 3,
                    "temp_ptr": 3,
                    "temp_ptr1": 4,
                    "temp_ptr_1": 2,
                    "temp_var1": 2
                },
                "piVar3": {
                    "allocated_memory": 1,
                    "buffer_ptr": 1,
                    "input_ptr_temp": 1,
                    "memory": 1,
                    "new_buffer": 2,
                    "new_pointer": 1,
                    "new_ptr": 1,
                    "ptr2": 5,
                    "ptr_buffer": 1,
                    "result": 2,
                    "temp2": 1,
                    "temp_array2": 1,
                    "temp_pointer1": 1,
                    "temp_pointer2": 3,
                    "temp_ptr2": 4,
                    "temp_ptr_2": 1,
                    "temp_ptr_3": 1,
                    "temp_var3": 2,
                    "updated_memory": 1
                },
                "piVar7": {
                    "new_pointer2": 1,
                    "ptr3": 5,
                    "result2": 1,
                    "temp6": 1,
                    "temp_array3": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 3,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "temp_ptr3": 4,
                    "temp_ptr_3": 1,
                    "temp_ptr_7": 1,
                    "temp_var7": 2,
                    "updated_memory2": 1,
                    "var5": 1,
                    "var7": 1
                },
                "uVar10": {
                    "aligned_new_length": 1,
                    "aligned_remainder": 1,
                    "aligned_size3": 1,
                    "aligned_temp2_size": 1,
                    "current_length": 1,
                    "final_size": 1,
                    "ptr_offset": 1,
                    "size2": 1,
                    "temp4": 1,
                    "temp9": 1,
                    "temp_5": 1,
                    "temp_size3": 1,
                    "temp_u_int5": 2,
                    "temp_unsigned5": 1,
                    "temp_value5": 1,
                    "temp_value7": 1,
                    "temp_var10": 2,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var7": 2,
                    "temp_var_10": 1,
                    "temp_var_7": 1,
                    "u_var10": 1,
                    "var10": 4,
                    "var7": 1
                },
                "uVar4": {
                    "ptr_mask": 1,
                    "size": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_size": 4,
                    "temp_u_int1": 2,
                    "temp_unsigned1": 1,
                    "temp_value1": 1,
                    "temp_value2": 1,
                    "temp_var2": 4,
                    "temp_var4": 4,
                    "temp_var_2": 1,
                    "temp_var_4": 1,
                    "tmp": 1,
                    "u_var4": 1,
                    "var2": 2,
                    "var4": 3
                },
                "uVar6": {
                    "buffer_size_var": 1,
                    "flag": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_3": 1,
                    "temp_size": 1,
                    "temp_size2": 2,
                    "temp_u_int2": 2,
                    "temp_unsigned2": 1,
                    "temp_value2": 1,
                    "temp_value4": 1,
                    "temp_var4": 3,
                    "temp_var6": 4,
                    "temp_var_4": 1,
                    "temp_var_6": 1,
                    "u": 1,
                    "u_var1": 1,
                    "u_var6": 1,
                    "var4": 2,
                    "var6": 4
                },
                "uVar8": {
                    "adjusted_size": 1,
                    "aligned_buffer_size": 2,
                    "aligned_length": 2,
                    "aligned_size": 7,
                    "new_size": 1,
                    "rounded_size": 1,
                    "temp7": 1,
                    "temp_u_int3": 2,
                    "temp_unsigned3": 1,
                    "temp_value3": 1,
                    "temp_value5": 1,
                    "temp_var5": 2,
                    "temp_var8": 2,
                    "temp_var_5": 1,
                    "u_var8": 1,
                    "var5": 1,
                    "var8": 4
                },
                "uVar9": {
                    "adjusted_length": 1,
                    "adjusted_size2": 1,
                    "aligned_block_size": 1,
                    "aligned_buffer_var": 1,
                    "aligned_input_size": 1,
                    "aligned_offset": 1,
                    "aligned_previous_length": 1,
                    "aligned_size2": 2,
                    "aligned_temp_size": 2,
                    "mask": 1,
                    "temp8": 1,
                    "temp_4": 1,
                    "temp_u_int4": 2,
                    "temp_unsigned4": 1,
                    "temp_value4": 1,
                    "temp_value6": 1,
                    "temp_var6": 2,
                    "temp_var9": 2,
                    "temp_var_6": 1,
                    "temp_var_9": 1,
                    "u_var9": 1,
                    "var6": 1,
                    "var9": 4
                }
            },
            "called": [
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_080090a8",
                "FUN_080090b4",
                "FUN_08008af8"
            ],
            "calling": [
                "FUN_080097cc"
            ],
            "code": "\nint * allocate_memory_08009adc(undefined4 *input_array,int *output_array,uint size)\n\n{\n  int *ptr1;\n  int temp;\n  int *ptr2;\n  uint temp_var4;\n  int temp2;\n  uint temp_var6;\n  int *ptr3;\n  uint aligned_size;\n  uint var9;\n  uint var10;\n  int var11;\n  \n  if (output_array == (int *)0x0) {\n    ptr2 = (int *)FUN_08008af8(input_array,size);\n    return ptr2;\n  }\n  FUN_080090a8();\n  temp_var6 = output_array[-1];\n  var9 = temp_var6 & 0xfffffffc;\n  ptr2 = output_array + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < size) {\nLAB_08009b8e:\n    *input_array = 0xc;\n    return (int *)0x0;\n  }\n  var11 = (int)ptr2 + var9;\n  var10 = var9;\n  if ((int)var9 < (int)aligned_size) {\n    if (DAT_20000454 == var11) {\n      var11 = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + var9;\n      if ((int)(aligned_size + 0x10) <= var11) {\n        DAT_20000454 = (int)ptr2 + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = var11 - aligned_size | 1;\n        output_array[-1] = aligned_size | output_array[-1] & 1U;\n        FUN_080090b4(input_array);\n        return output_array;\n      }\n      if (-1 < (int)(temp_var6 << 0x1f)) {\n        ptr1 = (int *)((int)ptr2 - output_array[-2]);\n        temp_var6 = ptr1[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(var11 + temp_var6)) {\n          temp2 = ptr1[3];\n          ptr2 = ptr1 + 2;\n          temp = *ptr2;\n          var9 = var9 - 4;\n          *(int *)(temp + 0xc) = temp2;\n          *(int *)(temp2 + 8) = temp;\n          if (var9 < 0x25) {\n            temp = *output_array;\n            ptr3 = ptr2;\n            if (0x13 < var9) {\n              ptr1[2] = temp;\n              ptr1[3] = output_array[1];\n              temp = output_array[2];\n              if (var9 < 0x1c) {\n                output_array = output_array + 2;\n                ptr3 = ptr1 + 4;\n              }\n              else {\n                ptr1[4] = temp;\n                ptr1[5] = output_array[3];\n                temp = output_array[4];\n                if (var9 == 0x24) {\n                  ptr1[6] = temp;\n                  ptr1[7] = output_array[5];\n                  temp = output_array[6];\n                  output_array = output_array + 6;\n                  ptr3 = ptr1 + 8;\n                }\n                else {\n                  output_array = output_array + 4;\n                  ptr3 = ptr1 + 6;\n                }\n              }\n            }\n            *ptr3 = temp;\n            ptr3[1] = output_array[1];\n            ptr3[2] = output_array[2];\n          }\n          else {\n            FUN_08009a18(ptr2,output_array);\n          }\n          DAT_20000454 = (int)ptr1 + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (var11 + temp_var6) - aligned_size | 1;\n          ptr1[1] = aligned_size | ptr1[1] & 1U;\n          FUN_080090b4(input_array);\n          return ptr2;\n        }\nLAB_08009bb0:\n        var10 = var9 + temp_var6;\n        if ((int)aligned_size <= (int)var10) {\n          temp2 = ptr1[3];\n          ptr3 = ptr1 + 2;\n          temp = *ptr3;\n          *(int *)(temp + 0xc) = temp2;\n          var11 = (int)ptr1 + var10;\n          *(int *)(temp2 + 8) = temp;\n          ptr2 = ptr1;\n          if (var9 - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          FUN_08009a18(ptr3,output_array);\n          output_array = ptr3;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(var11 + 4) & 0xfffffffe) + var11 + 4) << 0x1f) {\n        temp_var4 = *(uint *)(var11 + 4) & 0xfffffffc;\n        var10 = var9 + temp_var4;\n        if ((int)var10 < (int)aligned_size) {\n          if ((int)(temp_var6 << 0x1f) < 0) goto LAB_08009b36;\n          ptr1 = (int *)((int)ptr2 - output_array[-2]);\n          temp_var6 = ptr1[1] & 0xfffffffc;\n          var10 = temp_var4 + temp_var6 + var9;\n          if ((int)var10 < (int)aligned_size) goto LAB_08009bb0;\n          temp = *(int *)(var11 + 8);\n          var11 = *(int *)(var11 + 0xc);\n          *(int *)(temp + 0xc) = var11;\n          *(int *)(var11 + 8) = temp;\n          ptr3 = ptr1 + 2;\n          temp = *ptr3;\n          temp2 = ptr1[3];\n          *(int *)(temp + 0xc) = temp2;\n          var11 = (int)ptr1 + var10;\n          *(int *)(temp2 + 8) = temp;\n          ptr2 = ptr1;\n          if (0x24 < var9 - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          var9 = var9 - 4;\n          temp = *output_array;\n          ptr1 = ptr3;\n          if (0x13 < var9) {\n            ptr2[2] = temp;\n            ptr2[3] = output_array[1];\n            temp = output_array[2];\n            if (var9 < 0x1c) {\n              output_array = output_array + 2;\n              ptr1 = ptr2 + 4;\n            }\n            else {\n              ptr2[4] = temp;\n              ptr2[5] = output_array[3];\n              temp = output_array[4];\n              if (var9 == 0x24) {\n                ptr2[6] = temp;\n                ptr2[7] = output_array[5];\n                temp = output_array[6];\n                output_array = output_array + 6;\n                ptr1 = ptr2 + 8;\n              }\n              else {\n                output_array = output_array + 4;\n                ptr1 = ptr2 + 6;\n              }\n            }\n          }\n          *ptr1 = temp;\n          ptr1[1] = output_array[1];\n          ptr1[2] = output_array[2];\n          output_array = ptr3;\n        }\n        else {\n          temp = *(int *)(var11 + 8);\n          temp2 = *(int *)(var11 + 0xc);\n          *(int *)(temp + 0xc) = temp2;\n          var11 = (int)ptr2 + var10;\n          *(int *)(temp2 + 8) = temp;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(temp_var6 << 0x1f)) {\n        ptr1 = (int *)((int)ptr2 - output_array[-2]);\n        temp_var6 = ptr1[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    ptr1 = (int *)FUN_08008af8(input_array,size);\n    if (ptr1 != (int *)0x0) {\n      if ((int *)((output_array[-1] & 0xfffffffeU) + (int)ptr2) == ptr1 + -2) {\n        var10 = var9 + (ptr1[-1] & 0xfffffffcU);\n        var11 = (int)ptr2 + var10;\n        goto LAB_08009c00;\n      }\n      var9 = var9 - 4;\n      if (var9 < 0x25) {\n        var11 = *output_array;\n        ptr2 = output_array;\n        ptr3 = ptr1;\n        if (0x13 < var9) {\n          *ptr1 = var11;\n          ptr1[1] = output_array[1];\n          if (var9 < 0x1c) {\n            var11 = output_array[2];\n            ptr2 = output_array + 2;\n            ptr3 = ptr1 + 2;\n          }\n          else {\n            ptr1[2] = output_array[2];\n            ptr1[3] = output_array[3];\n            if (var9 == 0x24) {\n              ptr1[4] = output_array[4];\n              ptr1[5] = output_array[5];\n              var11 = output_array[6];\n              ptr2 = output_array + 6;\n              ptr3 = ptr1 + 6;\n            }\n            else {\n              var11 = output_array[4];\n              ptr2 = output_array + 4;\n              ptr3 = ptr1 + 4;\n            }\n          }\n        }\n        *ptr3 = var11;\n        ptr3[1] = ptr2[1];\n        ptr3[2] = ptr2[2];\n      }\n      else {\n        FUN_08009a18(ptr1,output_array);\n      }\n      FUN_080088ec(input_array,output_array);\n    }\n    FUN_080090b4(input_array);\n    output_array = ptr1;\n  }\n  else {\nLAB_08009c00:\n    if (var10 - aligned_size < 0x10) {\n      ptr2[1] = ptr2[1] & 1U | var10;\n      *(uint *)(var11 + 4) = *(uint *)(var11 + 4) | 1;\n    }\n    else {\n      ptr2[1] = ptr2[1] & 1U | aligned_size;\n      *(uint *)((int)ptr2 + aligned_size + 4) = var10 - aligned_size | 1;\n      *(uint *)(var11 + 4) = *(uint *)(var11 + 4) | 1;\n      FUN_080088ec(input_array,(int)ptr2 + aligned_size + 8);\n    }\n    FUN_080090b4(input_array);\n  }\n  return output_array;\n}\n\n",
            "current_name": "allocate_memory_08009adc",
            "entrypoint": "0x08009adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009adc": "allocate_memory_08009adc",
                "iVar11": "var11",
                "iVar2": "temp",
                "iVar5": "temp2",
                "param_1": "input_array",
                "param_2": "output_array",
                "param_3": "size",
                "piVar1": "ptr1",
                "piVar3": "ptr2",
                "piVar7": "ptr3",
                "uVar10": "var10",
                "uVar4": "temp_var4",
                "uVar6": "temp_var6",
                "uVar8": "aligned_size",
                "uVar9": "var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009e68": {
            "called": [],
            "calling": [
                "FUN_08000134",
                "FUN_08005d20",
                "FUN_08000110"
            ],
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e68",
            "entrypoint": "0x08009e68",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08009e74": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e74",
            "entrypoint": "0x08009e74",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_08005780",
                "FUN_08005d20",
                "FUN_08005224"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_200009c8; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800a1a4);\n  }\n  for (puVar2 = &DAT_200009c8; puVar2 < &DAT_20000c14; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  FUN_08005780();\n  FUN_08005d20();\n  UNRECOVERED_JUMPTABLE = (code *)0x800581a;\n  FUN_08005224();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x080057e8",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08005838": {
            "additional_data": {
                "0x33145c07": {
                    "constant_d": 1,
                    "operation_param_1": 1
                },
                "0x3ca1a626": {
                    "constant_e": 1,
                    "operation_param_2": 1
                },
                "0x3d": {
                    "limit": 1
                },
                "0x3ff921fb54442d18": {
                    "constant_f": 1,
                    "large_result": 1
                },
                "0x400921fb": {
                    "operation_param_3": 1
                },
                "0x54442d18": {
                    "constant_b": 1,
                    "default_result": 1
                },
                "0x7f3321d2": {
                    "constant_c": 1
                },
                "0x7ff00000": {
                    "float_nan": 1,
                    "pos_inf": 1
                },
                "0x7fffffff": {
                    "max_int": 1
                },
                "0xc0100000": {
                    "constant_a": 1,
                    "special_case_flag": 1
                },
                "FUNC_08005d0c": {
                    "additional_calculation": 1,
                    "additional_computation": 1,
                    "additional_process1": 1,
                    "additional_processing": 2,
                    "calculate_result4": 1,
                    "cleanup": 1,
                    "cleanup_calculation": 1,
                    "do_some_processing": 1,
                    "function_4": 1,
                    "process_data": 1
                },
                "FUN_08000158": {
                    "additional_process2": 1,
                    "calculate_bitwise_operation": 1,
                    "calculate_result5": 1,
                    "calculate_result_case3": 1,
                    "calculate_result_helper_3": 1,
                    "combine_values": 1,
                    "function_5": 1,
                    "perform_advanced_operation": 1,
                    "perform_computation": 1,
                    "perform_operation": 1,
                    "perform_some_calculation": 1
                },
                "FUN_0800015c": {
                    "calculate_result1": 1,
                    "calculate_result_case1": 1,
                    "calculate_result_helper_1": 1,
                    "function_1": 1,
                    "get_result_a": 1,
                    "handle_error_case": 1,
                    "handle_invalid_input": 1,
                    "handle_masked_inputs": 1,
                    "handle_na_n": 1,
                    "process_case_param_4": 1,
                    "process_condition1": 1
                },
                "FUN_0800071c": {
                    "calculate_difference": 2,
                    "calculate_result3": 1,
                    "compute_something": 1,
                    "function_3": 1,
                    "perform_calculation": 4,
                    "perform_operation": 1,
                    "process_condition3": 1
                },
                "FUN_080059f0": {
                    "calculate_result2": 1,
                    "calculate_result_case2": 1,
                    "calculate_result_helper_2": 1,
                    "function_2": 1,
                    "get_result_b": 1,
                    "handle_infinity": 1,
                    "handle_special_case": 1,
                    "handle_zero_input": 1,
                    "handle_zero_inputs": 1,
                    "process_case_param_2": 1,
                    "process_condition2": 1
                },
                "F_08000158": {
                    "manipulate_result": 1
                },
                "F_0800015c": {
                    "check_special_cases": 1
                },
                "F_0800071c": {
                    "perform_calculation": 1
                },
                "F_080059f0": {
                    "handle_zero_input": 1
                },
                "F_08005d0c": {
                    "clean_up": 1
                },
                "SCARRY4": {
                    "calculate_signed_carry": 1
                },
                "iVar1": {
                    "diff": 1,
                    "difference": 22,
                    "integer_var_1": 1,
                    "shifted_difference": 1,
                    "temp1": 1,
                    "temp_var1": 1
                },
                "param_1": {
                    "a": 1,
                    "float_param_1": 1,
                    "input1": 15,
                    "input_1": 12,
                    "input_param_1": 1,
                    "integer_part": 1
                },
                "param_2": {
                    "b": 1,
                    "float_param_2": 1,
                    "fractional_part": 1,
                    "input2": 15,
                    "input_2": 12,
                    "input_param_2": 1
                },
                "param_3": {
                    "c": 1,
                    "exponent_part": 1,
                    "float_param_3": 1,
                    "input3": 15,
                    "input_3": 12,
                    "input_param_3": 1
                },
                "param_4": {
                    "d": 1,
                    "float_param_4": 1,
                    "input4": 15,
                    "input_4": 12,
                    "input_param_4": 1,
                    "sign": 1
                },
                "thunk_FUN_08005838": {
                    "calculate_result": 16,
                    "evaluate_parameters": 1,
                    "float_to_integer_conversion": 1,
                    "improved_calculate_result": 1,
                    "perform_calculation": 1,
                    "process_params": 1,
                    "reversed_float_to_integer": 1
                },
                "uVar2": {
                    "converted_float_upper_bits": 1,
                    "high_bit": 1,
                    "high_bits": 1,
                    "high_part": 1,
                    "high_result": 1,
                    "integer_var_2": 1,
                    "result1": 2,
                    "result32": 1,
                    "result_high": 4,
                    "result_upper": 6,
                    "temp1": 1,
                    "upper_bits": 1,
                    "upper_half": 1,
                    "upper_result": 3
                },
                "uVar3": {
                    "bit_mask": 1,
                    "bitwise_operation": 1,
                    "bitwise_result": 1,
                    "combination": 1,
                    "combined_masks": 1,
                    "condition": 2,
                    "condition1": 1,
                    "condition_upper": 1,
                    "context": 1,
                    "flag": 4,
                    "input_condition": 1,
                    "integer_var_3": 1,
                    "logical_condition": 1,
                    "modifier": 1,
                    "param_bits": 1,
                    "param_flag": 1,
                    "param_indicator": 1,
                    "parameter_flags": 1,
                    "result2": 1,
                    "shift_value": 1,
                    "shifted_flags": 1,
                    "shifted_input": 1,
                    "shifted_var": 1,
                    "shifted_variables": 1,
                    "sign_and_fractional_masked": 1,
                    "sign_bits": 1,
                    "sign_flag": 1
                },
                "uVar4": {
                    "adjusted_input4": 1,
                    "clean_param_4": 1,
                    "input4_masked": 1,
                    "integer_var_4": 1,
                    "mask_param_4": 2,
                    "masked_input4": 1,
                    "masked_input_4": 2,
                    "modified_input4": 2,
                    "modified_input_4": 1,
                    "normalized_input4": 1,
                    "normalized_input_4": 1,
                    "param4_masked": 3,
                    "param4_positive": 2,
                    "param_4_filtered": 1,
                    "param_4_masked": 1,
                    "param_4_mod": 1,
                    "param_4_unsigned": 1,
                    "positive_input4": 1,
                    "positive_input_4": 2,
                    "result": 1,
                    "result3": 1,
                    "result_lower": 1,
                    "sign_masked": 1,
                    "temp_a": 1
                },
                "uVar5": {
                    "adjusted_input2": 1,
                    "clean_param_2": 1,
                    "condition_lower": 1,
                    "fractional_masked": 1,
                    "input2_masked": 1,
                    "integer_var_5": 1,
                    "mask_param_2": 2,
                    "masked_input2": 1,
                    "masked_input_2": 2,
                    "modified_input2": 2,
                    "modified_input_2": 1,
                    "normalized_input2": 1,
                    "normalized_input_2": 1,
                    "param2_masked": 3,
                    "param2_positive": 2,
                    "param_2_filtered": 1,
                    "param_2_masked": 1,
                    "param_2_mod": 1,
                    "param_2_unsigned": 1,
                    "positive_input2": 1,
                    "positive_input_2": 2,
                    "result4": 1,
                    "temp": 1,
                    "temp_b": 1
                },
                "uVar6": {
                    "calculated_value": 1,
                    "calculation_result": 1,
                    "converted_float": 1,
                    "integer_var_6": 1,
                    "result": 21,
                    "result5": 1,
                    "result64": 2,
                    "result_combined": 1,
                    "temp_result": 2
                }
            },
            "called": [
                "FUN_08005838"
            ],
            "calling": [
                "FUN_08004d78",
                "FUN_08004bd8"
            ],
            "code": "\nuint improved_calculate_result_thunk_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result_upper;\n  uint flag;\n  uint param4_masked;\n  uint param2_masked;\n  undefined8 result;\n  \n  param4_masked = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (param4_masked | (-input3 | input3) >> 0x1f)) ||\n     (param2_masked = input2 & 0x7fffffff, 0x7ff00000 < (param2_masked | (-input1 | input1) >> 0x1f))) {\n    param4_masked = FUN_0800015c(input3,input4,input1,input2);\n    return param4_masked;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    param4_masked = FUN_080059f0();\n    return param4_masked;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((param2_masked | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((param4_masked | input3) != 0) {\n    if (param4_masked == 0x7ff00000) {\n      if (param2_masked == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (param2_masked != 0x7ff00000) {\n      difference = (int)(param2_masked - param4_masked) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != calculate_signed_carry(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          FUN_0800071c(input1,input2,input3,input4,input4);\n          FUNC_08005d0c();\n          result = FUN_080059f0();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result_upper = (undefined4)((ulonglong)result >> 0x20);\n      param4_masked = (uint)result;\n      if (flag == 1) {\n        return param4_masked;\n      }\n      if (flag == 2) {\n        result = FUN_08000158(param4_masked,result_upper,0x33145c07,0x3ca1a626);\n        param4_masked = FUN_08000158(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return param4_masked;\n      }\n      if (flag != 0) {\n        result = FUN_08000158(param4_masked,result_upper,0x33145c07,0x3ca1a626);\n        param4_masked = FUN_08000158((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return param4_masked;\n      }\n      return param4_masked;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "improved_calculate_result_thunk_08005838",
            "entrypoint": "0x08005834",
            "imported": false,
            "improved": true,
            "renaming": {
                "SCARRY4": "calculate_signed_carry",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "thunk_FUN_08005838": "improved_calculate_result_thunk_08005838",
                "uVar2": "result_upper",
                "uVar3": "flag",
                "uVar4": "param4_masked",
                "uVar5": "param2_masked",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080004c8",
            "FUN_080006a4",
            "FUN_0800071c",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "thunk_FUN_08005838",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 680470
}