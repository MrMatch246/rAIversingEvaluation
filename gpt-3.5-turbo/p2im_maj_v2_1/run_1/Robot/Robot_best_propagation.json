{
    "functions": {
        "FUN_08000110": {
            "additional_data": {
                "DAT_200009c8": {
                    "data_flag": 2,
                    "flag": 17,
                    "flag_value": 1,
                    "flag_variable": 2
                },
                "FUN_08000110": {
                    "initialize_data": 1,
                    "initialize_flag": 25,
                    "initialize_flag_if_false": 1,
                    "update_data_flag": 1,
                    "update_flag": 2,
                    "update_flag_value": 1
                },
                "param_1": {
                    "flag": 1,
                    "input": 15,
                    "input_data": 2,
                    "input_parameter": 1,
                    "input_val": 1,
                    "input_value": 8,
                    "parameter": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_if_false_08000110(undefined4 input)\n\n{\n  if ((char)DAT_200009c8 == '\\0') {\n    DAT_200009c8._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_if_false_08000110",
            "entrypoint": "0x08000110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000110": "initialize_flag_if_false_08000110",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000134": {
            "additional_data": {
                "FUN_08000134": {
                    "combine_params": 1,
                    "concatenate": 2,
                    "concatenate_integers": 5,
                    "concatenate_ints": 1,
                    "concatenate_numbers": 2,
                    "concatenate_parameters": 8,
                    "concatenate_params": 7,
                    "concatenate_values": 4,
                    "concatenate_variables": 1
                },
                "param_1": {
                    "first_int": 1,
                    "first_integer": 2,
                    "first_number": 1,
                    "first_param": 5,
                    "first_parameter": 9,
                    "input1": 1,
                    "input_value1": 1,
                    "integer1": 3,
                    "number1": 1,
                    "param1": 3,
                    "value1": 4
                },
                "param_2": {
                    "input2": 1,
                    "input_value2": 1,
                    "integer2": 3,
                    "number2": 1,
                    "param2": 3,
                    "second_int": 1,
                    "second_integer": 2,
                    "second_number": 1,
                    "second_param": 5,
                    "second_parameter": 9,
                    "value2": 4
                }
            },
            "called": [
                "FUN_08009e68"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_parameters_08000134(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_parameters_08000134",
            "entrypoint": "0x08000134",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000134": "concatenate_parameters_08000134",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000158": {
            "additional_data": {
                "FUN_08000158": {
                    "calculate": 3,
                    "calculate_modified_result": 1,
                    "calculate_result": 5,
                    "calculate_unsigned_division": 1,
                    "calculate_unsigned_multiplication": 1,
                    "perform_bitwise_operations": 1,
                    "perform_unsigned_arithmetic": 1,
                    "reverse_binary_operation": 2,
                    "reverse_binary_operations": 1,
                    "reverse_bits": 2,
                    "reverse_complicated_calculation": 1
                },
                "Fibonacci": {
                    "compute_fibonacci": 1
                },
                "bVar13": {
                    "bool1": 2,
                    "bool_result1": 1,
                    "condition1": 7,
                    "flag1": 5,
                    "flag_1": 3,
                    "is_all_ones": 1,
                    "is_condition_true": 1,
                    "is_equal": 1,
                    "is_input2_zero": 1,
                    "is_temp1_equal_to_temp3": 1,
                    "is_true1": 1,
                    "is_zero": 4,
                    "is_zero_or_positive": 1,
                    "temp13": 1,
                    "temp_bool2": 1
                },
                "bVar14": {
                    "bool2": 2,
                    "bool_result2": 1,
                    "condition": 2,
                    "condition2": 7,
                    "flag2": 5,
                    "flag_2": 3,
                    "is_condition_met": 2,
                    "is_condition_true": 1,
                    "is_negative": 1,
                    "is_result_valid": 1,
                    "is_result_zero": 1,
                    "is_temp1_zero_or_input1_equal_to_input3": 1,
                    "is_true2": 1,
                    "is_zero": 1,
                    "temp14": 1,
                    "temp_bool3": 1
                },
                "bVar15": {
                    "bool3": 2,
                    "bool_result3": 1,
                    "borrow": 1,
                    "condition3": 7,
                    "flag3": 5,
                    "flag_3": 3,
                    "is_borrow": 1,
                    "is_carry": 1,
                    "is_negative": 1,
                    "is_negative_overflow": 1,
                    "is_overflow": 2,
                    "is_shift_count_negative": 1,
                    "is_subtraction_overflow": 1,
                    "is_true3": 1,
                    "overflow_sub": 1,
                    "temp15": 1,
                    "temp_bool4": 1
                },
                "bVar2": {
                    "b": 1,
                    "carry": 3,
                    "carry_bit": 1,
                    "carry_flag": 3,
                    "flag": 1,
                    "lsb": 1,
                    "lsb_bit": 1,
                    "result2": 1,
                    "temp11": 1,
                    "temp2": 3,
                    "temp_2": 1,
                    "temp_6": 1,
                    "temp_bit": 1,
                    "temp_bool1": 2
                },
                "iVar1": {
                    "counter1": 1,
                    "division_result1": 1,
                    "index1": 1,
                    "result1": 1,
                    "right_shifted_modified_input4": 1,
                    "shift1": 5,
                    "shift_amount": 1,
                    "shift_amount1": 2,
                    "shifted_d": 1,
                    "shifted_input2": 1,
                    "shifted_input4": 2,
                    "shifted_output2": 1,
                    "shifted_result_upper": 1,
                    "temp1": 4,
                    "temp5": 1,
                    "temp_1": 1,
                    "temp_10": 1,
                    "temp_5": 1
                },
                "iVar8": {
                    "counter2": 1,
                    "division_result2": 1,
                    "index2": 1,
                    "result3": 1,
                    "result8": 1,
                    "right_shifted_modified_input2": 1,
                    "shift2": 5,
                    "shift_amount": 3,
                    "shift_amount2": 3,
                    "shifted_b": 1,
                    "shifted_input4": 1,
                    "shifted_input4_result": 1,
                    "shifted_output1": 1,
                    "shifted_temp2": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_11": 2,
                    "temp_8": 1,
                    "var8": 1
                },
                "param_1": {
                    "dividend": 1,
                    "input1": 22,
                    "input_1": 4,
                    "input_a": 2,
                    "input_param1": 1,
                    "operand1": 1
                },
                "param_2": {
                    "divider": 1,
                    "input2": 22,
                    "input_2": 4,
                    "input_b": 2,
                    "input_param2": 1,
                    "operand2": 1
                },
                "param_3": {
                    "input3": 22,
                    "input_3": 4,
                    "input_c": 2,
                    "input_param3": 1,
                    "operand3": 1,
                    "quotient": 1
                },
                "param_4": {
                    "input4": 22,
                    "input_4": 4,
                    "input_d": 2,
                    "input_param4": 1,
                    "operand4": 1,
                    "remainder": 1
                },
                "uVar10": {
                    "mask_d": 1,
                    "overflow2": 1,
                    "quotient": 1,
                    "result10": 1,
                    "result2": 2,
                    "result5": 1,
                    "shift": 1,
                    "temp": 1,
                    "temp10": 2,
                    "temp4": 4,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_10": 1,
                    "temp_7": 1,
                    "temp_value": 1,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "value2": 1,
                    "var10": 1,
                    "var3": 1
                },
                "uVar11": {
                    "carry_and_result_lower": 1,
                    "difference": 1,
                    "modified_input3": 1,
                    "operation_result": 1,
                    "output2": 1,
                    "remainder": 1,
                    "remaining_bits": 1,
                    "result": 1,
                    "result1": 2,
                    "result11": 1,
                    "result3": 3,
                    "result6": 1,
                    "result_low": 1,
                    "temp1": 1,
                    "temp10": 1,
                    "temp11": 2,
                    "temp3": 1,
                    "temp5": 2,
                    "temp9": 1,
                    "temp_11": 1,
                    "temp_3": 1,
                    "temp_8": 1,
                    "temp_var8": 2,
                    "var11": 1,
                    "var4": 1
                },
                "uVar12": {
                    "carry2": 1,
                    "mask": 1,
                    "output1": 1,
                    "overflow": 1,
                    "result": 1,
                    "result12": 1,
                    "result2": 2,
                    "result4": 2,
                    "result7": 1,
                    "result_high": 1,
                    "result_upper_with_carry": 1,
                    "shifted_input3": 1,
                    "temp": 1,
                    "temp10": 1,
                    "temp11": 1,
                    "temp12": 2,
                    "temp2": 1,
                    "temp4": 1,
                    "temp6": 2,
                    "temp_12": 1,
                    "temp_4": 1,
                    "temp_9": 1,
                    "temp_result": 1,
                    "temp_var9": 2,
                    "var12": 1,
                    "var5": 1
                },
                "uVar13": {
                    "is_temp1_zero": 1,
                    "temp_result_borrow": 1
                },
                "uVar14": {
                    "is_temp3_zero": 1
                },
                "uVar15": {
                    "is_result_lower_zero": 1
                },
                "uVar16": {
                    "shift_count": 1
                },
                "uVar3": {
                    "carry": 2,
                    "result": 2,
                    "result1": 1,
                    "result2": 1,
                    "result3": 1,
                    "shifted_value": 1,
                    "sum": 1,
                    "sum1": 2,
                    "temp1": 7,
                    "temp2": 1,
                    "temp3": 3,
                    "temp5": 1,
                    "temp_1": 1,
                    "temp_3": 1,
                    "temp_7": 1,
                    "temp_var1": 3,
                    "var3": 1
                },
                "uVar4": {
                    "mask1": 2,
                    "mask_a": 1,
                    "modified_input2": 1,
                    "result": 1,
                    "result2": 1,
                    "result3": 1,
                    "result4": 1,
                    "result_lower": 1,
                    "sum2": 1,
                    "temp1": 1,
                    "temp2": 7,
                    "temp3": 1,
                    "temp4": 3,
                    "temp6": 1,
                    "temp_2": 1,
                    "temp_4": 1,
                    "temp_8": 1,
                    "temp_var2": 3,
                    "var4": 1
                },
                "uVar5": {
                    "mask2": 2,
                    "mask_b": 1,
                    "result3": 1,
                    "result4": 1,
                    "result5": 1,
                    "result_upper": 1,
                    "sum": 1,
                    "sum2": 1,
                    "sum3": 1,
                    "temp2": 1,
                    "temp3": 7,
                    "temp4": 1,
                    "temp5": 3,
                    "temp7": 1,
                    "temp_3": 1,
                    "temp_5": 1,
                    "temp_9": 1,
                    "temp_var3": 3,
                    "var5": 1
                },
                "uVar6": {
                    "flipped_bits": 1,
                    "flipped_d": 1,
                    "input4_xor": 1,
                    "input4_xor_with_signed_bit": 1,
                    "modified_input4": 2,
                    "operand1": 1,
                    "result1": 4,
                    "result6": 1,
                    "temp1": 4,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_1": 2,
                    "temp_4": 1,
                    "temp_6": 1,
                    "temp_var4": 3,
                    "var1": 1,
                    "var6": 1
                },
                "uVar7": {
                    "mask_c": 1,
                    "modified_input2": 1,
                    "operand2": 1,
                    "result1": 1,
                    "result2": 4,
                    "result7": 1,
                    "temp2": 3,
                    "temp4": 4,
                    "temp5": 2,
                    "temp6": 1,
                    "temp7": 2,
                    "temp8": 1,
                    "temp_10": 1,
                    "temp_2": 1,
                    "temp_5": 1,
                    "temp_7": 1,
                    "temp_var5": 3,
                    "var7": 1
                },
                "uVar9": {
                    "dividend_shifted": 1,
                    "input2_shifted": 1,
                    "mask": 1,
                    "modified_input2": 1,
                    "overflow1": 1,
                    "result1": 2,
                    "result4": 1,
                    "result9": 1,
                    "result_and_carry": 1,
                    "shifted_b": 1,
                    "shifted_input2": 4,
                    "shifted_result": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_2": 1,
                    "temp_6": 1,
                    "temp_9": 1,
                    "temp_var6": 2,
                    "value1": 1,
                    "var2": 1,
                    "var9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong calculate_modified_result_08000158(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte temp2;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp1;\n  uint temp4;\n  int shift2;\n  uint shifted_input2;\n  uint temp4;\n  uint result3;\n  uint temp_var9;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp1 = input4 ^ 0x80000000;\n  shifted_input2 = input2 << 1;\n  input4 = input4 << 1;\n  condition1 = ((input2 ^ temp1) & 0x7fffffff) == 0;\n  condition2 = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    condition2 = (shifted_input2 | input1) == 0;\n  }\n  if (!condition2) {\n    condition2 = (input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!condition2) {\n    condition2 = shift2 == -1;\n  }\n  shift1 = (int)input4 >> 0x15;\n  if (!condition2) {\n    condition2 = shift1 == -1;\n  }\n  if (condition2) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input2 = temp1;\n      result3 = input3;\n      if (shift2 == -1) {\n        shifted_input2 = input2;\n        result3 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = result3;\n        temp1 = shifted_input2;\n      }\n      condition2 = (result3 | shifted_input2 << 0xc) == 0;\n      if (condition2) {\n        condition2 = (input3 | temp1 << 0xc) == 0;\n      }\n      if (condition2) {\n        condition2 = shifted_input2 == temp1;\n      }\n      if (!condition2) {\n        shifted_input2 = shifted_input2 | 0x80000;\n      }\n      return CONCAT44(shifted_input2,result3);\n    }\n    if (((input2 ^ temp1) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = temp1;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp1) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      condition2 = (input1 & 0x80000000) != 0;\n      temp1 = input2 * 2 + (uint)condition2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)condition2)) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return CONCAT44(temp1,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - shifted_input2;\n  condition2 = result3 != 0;\n  if (input4 < shifted_input2) {\n    result3 = -result3;\n  }\n  temp4 = input1;\n  temp4 = input2;\n  if (condition2 && shifted_input2 <= input4) {\n    shifted_input2 = shifted_input2 + result3;\n    temp4 = input3;\n    temp4 = temp1;\n    input3 = input1;\n    temp1 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp4,temp4);\n  }\n  temp2 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    condition2 = temp4 != 0;\n    temp4 = -temp4;\n    temp2 = -temp2 - (uint)condition2;\n  }\n  temp4 = temp1 & 0xfffff | 0x100000;\n  if ((temp1 & 0x80000000) != 0) {\n    condition2 = input3 != 0;\n    input3 = -input3;\n    temp4 = -temp4 - (uint)condition2;\n  }\n  if (shifted_input2 == result3) {\n    temp4 = temp4 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp1 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    temp_var9 = input3 << (temp1 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = temp4 + input3;\n    temp3 = temp4 << (temp1 & 0xff);\n    temp1 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp4,input3) + ((int)temp4 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp_var9 = temp4 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp_var9 = temp_var9 | 2;\n    }\n    temp4 = (int)temp4 >> (result3 - 0x20 & 0xff);\n    temp1 = temp4 + temp4;\n    temp2 = temp2 + ((int)temp4 >> 0x1f) + (uint)CARRY4(temp4,temp4);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    condition2 = temp_var9 == 0;\n    temp_var9 = -temp_var9;\n    result3 = -temp1;\n    temp1 = -(uint)!condition2 - temp1;\n    result3 = -(uint)(condition2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    temp4 = shifted_input2 - 1;\n    if (0x1fffff < result3) {\n      temp4 = result3 & 1;\n      result3 = result3 >> 1;\n      temp2 = (byte)temp1;\n      temp1 = (uint)(temp4 != 0) << 0x1f | temp1 >> 1;\n      temp_var9 = (uint)(temp2 & 1) << 0x1f | temp_var9 >> 1;\n      temp4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    condition2 = 0x7fffffff < temp_var9;\n    if (temp_var9 == 0x80000000) {\n      condition2 = (temp1 & 1) != 0;\n    }\n    return CONCAT44(result3 + temp4 * 0x100000 + (uint)CARRY4(temp1,(uint)condition2) | input2,\n                    temp1 + condition2);\n  }\n  condition1 = (temp_var9 & 0x80000000) != 0;\n  temp_var9 = temp_var9 << 1;\n  temp4 = temp1 * 2;\n  condition2 = CARRY4(temp1,temp1);\n  temp1 = temp1 * 2 + (uint)condition1;\n  result3 = result3 * 2 + (uint)(condition2 || CARRY4(temp4,(uint)condition1));\n  temp4 = shifted_input2 - 2;\n  if ((result3 & 0x100000) != 0) goto LAB_08000268;\n  temp4 = temp1;\n  shifted_input2 = result3;\n  if (result3 == 0) {\n    temp4 = 0;\n    shifted_input2 = temp1;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (result3 == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  result3 = shift2 - 0xb;\n  condition3 = SBORROW4(result3,0x20);\n  temp1 = shift2 - 0x2b;\n  condition2 = (int)temp1 < 0;\n  condition1 = temp1 == 0;\n  if ((int)result3 < 0x20) {\n    condition3 = SCARRY4(temp1,0xc);\n    shift2 = shift2 + -0x1f;\n    condition2 = shift2 < 0;\n    condition1 = shift2 == 0;\n    temp1 = result3;\n    if (!condition1 && condition2 == condition3) {\n      temp4 = shifted_input2 << (result3 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (condition1 || condition2 != condition3) {\n    temp_var9 = 0x20 - temp1;\n  }\n  shifted_input2 = shifted_input2 << (temp1 & 0xff);\n  if (condition1 || condition2 != condition3) {\n    shifted_input2 = shifted_input2 | temp4 >> (temp_var9 & 0xff);\n  }\n  if (condition1 || condition2 != condition3) {\n    temp4 = temp4 << (temp1 & 0xff);\n  }\nLAB_080002e0:\n  if ((int)result3 <= (int)temp4) {\n    return CONCAT44(shifted_input2 + (temp4 - result3) * 0x100000 | input2,temp4);\n  }\n  temp1 = ~(temp4 - result3);\n  if ((int)temp1 < 0x1f) {\n    shift2 = temp1 - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(temp1 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp4 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp1 = temp1 + 1;\n    return CONCAT44(input2 | shifted_input2 >> (temp1 & 0xff),\n                    temp4 >> (temp1 & 0xff) | shifted_input2 << (0x20 - temp1 & 0xff));\n  }\n  return CONCAT44(temp2,shifted_input2 >> (temp1 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_modified_result_08000158",
            "entrypoint": "0x08000158",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000158": "calculate_modified_result_08000158",
                "bVar13": "condition1",
                "bVar14": "condition2",
                "bVar15": "condition3",
                "bVar2": "temp2",
                "iVar1": "shift1",
                "iVar8": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "temp4",
                "uVar11": "result3",
                "uVar12": "temp_var9",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp1",
                "uVar7": "temp4",
                "uVar9": "shifted_input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800015c": {
            "additional_data": {
                "FUN_0800015c": {
                    "calculate": 2,
                    "calculate_aligned_float": 1,
                    "calculate_concated_values": 1,
                    "calculate_extended_addition": 1,
                    "calculate_multiply": 1,
                    "calculate_result": 6,
                    "calculate_unsigned_division": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_calculation": 2,
                    "perform_operation": 1,
                    "reverse_binary_operation": 2,
                    "reverse_bits": 2
                },
                "bVar13": {
                    "bool1": 1,
                    "bool_1": 1,
                    "bool_var1": 1,
                    "check_condition_1": 1,
                    "check_flag_1": 1,
                    "condition1": 1,
                    "flag1": 3,
                    "input_2_and_4_equal": 1,
                    "inputs_equal": 1,
                    "is_all_set": 1,
                    "is_both_inputs_same": 1,
                    "is_condition_met1": 1,
                    "is_condition_met_a": 1,
                    "is_equal": 6,
                    "is_equal_1": 1,
                    "is_matching_inputs": 1,
                    "is_positive_addition": 1,
                    "is_remainder_minus_one": 1,
                    "is_same_sign": 1,
                    "same_modulo": 1,
                    "temp13": 1,
                    "tmp8": 1,
                    "xored_results": 1
                },
                "bVar13_1": {
                    "b_flag3": 1
                },
                "bVar14": {
                    "bool2": 1,
                    "bool_2": 1,
                    "bool_var2": 1,
                    "check_condition_2": 1,
                    "check_flag_2": 1,
                    "check_passed": 1,
                    "comparison_result": 1,
                    "condition": 2,
                    "condition1": 1,
                    "condition2": 1,
                    "condition_1": 1,
                    "flag2": 3,
                    "is_condition_met": 1,
                    "is_condition_met2": 1,
                    "is_condition_met_b": 1,
                    "is_condition_true": 1,
                    "is_equal_2": 1,
                    "is_negative_sum": 1,
                    "is_special_case": 1,
                    "is_zero": 4,
                    "is_zero_input2_4_or_input1_3": 1,
                    "result": 1,
                    "same_modulo_and_input": 1,
                    "temp14": 1
                },
                "bVar141": {
                    "b_flag5": 1
                },
                "bVar14_1": {
                    "b_flag2": 1
                },
                "bVar15": {
                    "b_flag1": 1,
                    "bool3": 1,
                    "bool_3": 1,
                    "bool_var3": 1,
                    "carry": 1,
                    "carry_bit": 1,
                    "carry_overflow": 1,
                    "check_flag_3": 1,
                    "comparison_result": 1,
                    "condition2": 1,
                    "flag3": 2,
                    "is_carry_set": 1,
                    "is_condition_met3": 1,
                    "is_less_than_zero": 1,
                    "is_negative": 3,
                    "is_negative_difference": 1,
                    "is_negative_overflow": 1,
                    "is_overflow": 1,
                    "is_shift_amount_minus_one": 1,
                    "is_subtraction_carry": 1,
                    "is_sum_zero": 1,
                    "negative_shift_flag": 1,
                    "overflow": 2,
                    "overflow_condition": 1,
                    "subtraction_carry": 1,
                    "temp15": 1
                },
                "bVar151": {
                    "b_flag4": 1
                },
                "bVar2": {
                    "b_flag": 1,
                    "byte_var": 1,
                    "carry": 7,
                    "carry1": 2,
                    "carry_bit": 2,
                    "carry_flag": 4,
                    "is_carry_bit_set": 1,
                    "lsb_input1_output": 1,
                    "quotient_not_minus_one": 1,
                    "temp2": 1
                },
                "highBitsFourthInput": {
                    "updated_high_bits_fourth_input": 1
                },
                "highBitsSecondInput": {
                    "updated_high_bits_second_input": 1
                },
                "iVar1": {
                    "d_shifted_shifted_neg": 1,
                    "half_of_b": 1,
                    "input4_shifted_shifted": 1,
                    "left_shifted_input2": 1,
                    "mid_bit_shifted_param_2": 1,
                    "num_shifted_bits_1": 1,
                    "quotient_shift": 1,
                    "shift1": 3,
                    "shift2": 1,
                    "shift_1": 1,
                    "shift_2": 1,
                    "shift_amount2": 1,
                    "shift_right_amount1": 1,
                    "shifted_amount_2": 1,
                    "shifted_b_msb": 1,
                    "shifted_bits_1": 1,
                    "shifted_bits_a": 1,
                    "shifted_input4_right_shifted": 1,
                    "shifted_input_2": 1,
                    "shifted_input_4_signed": 1,
                    "shifted_num2": 1,
                    "temp1": 1,
                    "temp_var1": 1
                },
                "iVar101": {
                    "shift8": 1
                },
                "iVar120": {
                    "shift9": 1
                },
                "iVar14": {
                    "shift4": 1
                },
                "iVar15": {
                    "shift11": 1
                },
                "iVar50": {
                    "shift10": 1
                },
                "iVar6": {
                    "b_shifted_shifted_neg": 1,
                    "half_of_d": 1,
                    "input2_shifted_shifted": 1,
                    "left_shifted_input4": 1,
                    "mid_bit_shifted_param_4": 1,
                    "num_shifted_bits_2": 1,
                    "remainder_shift": 1,
                    "shift1": 1,
                    "shift2": 3,
                    "shift_2": 1,
                    "shift_3": 1,
                    "shift_amount": 1,
                    "shift_amount1": 1,
                    "shift_amt_a": 1,
                    "shift_count_1": 1,
                    "shift_right_amount2": 1,
                    "shifted_amount_1": 1,
                    "shifted_bits_2": 1,
                    "shifted_d_msb": 1,
                    "shifted_input2": 1,
                    "shifted_input_2_signed": 1,
                    "shifted_input_4": 1,
                    "shifted_num4": 1,
                    "temp4": 2,
                    "temp6": 1,
                    "temp_var5": 1,
                    "updated_shifted_first_input": 1
                },
                "iVar61": {
                    "shift3": 1
                },
                "iVar90": {
                    "shift12": 1
                },
                "param_1": {
                    "a": 4,
                    "dividend": 1,
                    "first_input": 1,
                    "input1": 13,
                    "input_1": 9,
                    "num1": 1,
                    "num_a": 1
                },
                "param_2": {
                    "b": 4,
                    "divisor": 1,
                    "input2": 13,
                    "input_2": 9,
                    "num2": 1,
                    "num_b": 1,
                    "second_input": 1
                },
                "param_3": {
                    "c": 4,
                    "input3": 13,
                    "input_3": 9,
                    "num3": 1,
                    "num_c": 1,
                    "quotient": 1,
                    "third_input": 1
                },
                "param_4": {
                    "d": 4,
                    "fourth_input": 1,
                    "input4": 13,
                    "input_4": 9,
                    "num4": 1,
                    "num_d": 1,
                    "remainder": 1
                },
                "resultHighBits": {
                    "updated_result_high_bits": 1
                },
                "resultLowBits": {
                    "updated_result_low_bits": 1
                },
                "shiftedFirstInput": {
                    "updated_shifted_first_input": 1
                },
                "shiftedFourthInput": {
                    "updated_shifted_fourth_input": 1
                },
                "shiftedInput": {
                    "updated_shifted_input": 1
                },
                "shiftedSecondInput": {
                    "updated_shifted_second_input": 1
                },
                "tempResult1": {
                    "updated_temp_result1": 1
                },
                "tempResult2": {
                    "updated_temp_result2": 1
                },
                "uVar10": {
                    "absolute_diff_of_shifted_inputs": 1,
                    "diff": 1,
                    "diff_b_a_lsb": 1,
                    "difference": 3,
                    "num_shifts": 1,
                    "output2": 1,
                    "quotient_temp": 1,
                    "result3": 1,
                    "result_2": 1,
                    "result_b": 1,
                    "result_bit_0_31": 1,
                    "result_hi": 1,
                    "result_high": 1,
                    "shifted_diff_sum_input": 1,
                    "shifted_temp1": 1,
                    "temp10": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp8": 1,
                    "temp_7": 2,
                    "temp_result_shifted": 1,
                    "temp_var9": 1,
                    "tmp13": 1,
                    "u_var10": 2,
                    "updated_result_low_bits": 1
                },
                "uVar100": {
                    "temp_var1": 1
                },
                "uVar101": {
                    "temp_var": 1
                },
                "uVar10_1": {
                    "shift5": 1
                },
                "uVar11": {
                    "a_with_d": 1,
                    "carry2": 1,
                    "carry_shifted_input_2": 1,
                    "modified_a": 1,
                    "remainder_temp": 1,
                    "result4": 1,
                    "result_lower": 1,
                    "shiftable_lsb": 1,
                    "shifted_input2": 1,
                    "shifted_input2_fixed": 1,
                    "shifted_result_bit_0": 1,
                    "shifted_temp2": 1,
                    "temp11": 1,
                    "temp4": 1,
                    "temp6": 2,
                    "temp7": 2,
                    "temp9": 1,
                    "temp_4": 1,
                    "temp_8": 2,
                    "temp_result1_shifted": 1,
                    "temp_result_1": 1,
                    "temp_var10": 1,
                    "tmp14": 1,
                    "u_var11": 2,
                    "updated_temp_result1": 1,
                    "var5": 1
                },
                "uVar11000": {
                    "mask1": 1
                },
                "uVar111": {
                    "mask2": 1
                },
                "uVar12": {
                    "modified_b": 1,
                    "negated_shift": 1,
                    "result": 1,
                    "result5": 1,
                    "result_high_1": 1,
                    "result_upper": 1,
                    "shifted_diff_sum_input": 1,
                    "shifted_input1_fixed": 1,
                    "shifted_sum": 1,
                    "shifted_temp3": 1,
                    "sum_a_b_msb": 1,
                    "temp10": 1,
                    "temp12": 1,
                    "temp5": 1,
                    "temp7": 2,
                    "temp8": 2,
                    "temp_5": 1,
                    "temp_6": 1,
                    "temp_9": 2,
                    "temp_result": 1,
                    "temp_result_2": 1,
                    "temp_var11": 1,
                    "tmp15": 1,
                    "u_var12": 2,
                    "updated_temp_result2": 1,
                    "var6": 1
                },
                "uVar120000": {
                    "mask": 1
                },
                "uVar12_1": {
                    "remainder": 1
                },
                "uVar3": {
                    "a_with_c": 1,
                    "result_1": 1,
                    "result_bit_31": 1,
                    "result_low_1": 1,
                    "shifted_result_a": 1,
                    "shifted_second_input": 1,
                    "sum_a_c_lsb": 1,
                    "sum_input1": 1,
                    "sum_of_input1_and_shifted_input3": 1,
                    "temp1": 10,
                    "temp3": 1,
                    "temp_1": 5,
                    "temp_result1": 1,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "tmp1": 1,
                    "var3": 1
                },
                "uVar4": {
                    "c_with_d": 1,
                    "result_2": 1,
                    "result_bit_0": 1,
                    "result_low_2": 1,
                    "shifted_fourth_input": 1,
                    "shifted_result_b": 1,
                    "sum_b_d_lsb": 1,
                    "sum_input2": 1,
                    "sum_of_input2_and_shifted_input4": 1,
                    "temp2": 10,
                    "temp4": 1,
                    "temp_2": 5,
                    "temp_result2": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "tmp2": 1,
                    "var4": 1
                },
                "uVar5": {
                    "a_value": 1,
                    "b_with_zero": 1,
                    "input2_fixed": 1,
                    "modified_param_2": 1,
                    "result1": 1,
                    "result_3": 1,
                    "shifted_bits_b": 1,
                    "shifted_input": 1,
                    "shifted_input3": 1,
                    "shifted_input_2": 1,
                    "temp3": 8,
                    "temp5": 1,
                    "temp_3": 4,
                    "temp_input4_shifted": 1,
                    "temp_var4": 1,
                    "tmp10": 1,
                    "u_var5": 2,
                    "var2": 1
                },
                "uVar6": {
                    "shifted_input4": 1
                },
                "uVar7": {
                    "b_shifted": 2,
                    "high_bits_second_input": 1,
                    "input2_shifted": 1,
                    "shifted_2": 1,
                    "shifted_a": 1,
                    "shifted_b": 2,
                    "shifted_input2": 3,
                    "shifted_input_1": 1,
                    "shifted_input_2": 2,
                    "shifted_input_2_1": 1,
                    "shifted_inputs_combined": 1,
                    "shifted_num2_shifted": 1,
                    "shifted_param_2": 2,
                    "temp1": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_4": 3,
                    "temp_var6": 1,
                    "tmp11": 1,
                    "u_var7": 1
                },
                "uVar71": {
                    "shift7": 1
                },
                "uVar8": {
                    "a_after_addition": 1,
                    "b_value": 1,
                    "input1_fixed": 1,
                    "result_1": 1,
                    "result_4": 1,
                    "result_low_3": 1,
                    "shifted_b": 1,
                    "shifted_d": 2,
                    "shifted_input1": 2,
                    "shifted_input4": 1,
                    "shifted_input_2": 1,
                    "shifted_num4_shifted": 1,
                    "shifted_param_4": 1,
                    "temp4": 2,
                    "temp5": 2,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_5": 3,
                    "temp_var7": 1,
                    "tmp9": 1,
                    "u_var8": 2,
                    "updated_high_bits_fourth_input": 1,
                    "var1": 1
                },
                "uVar81": {
                    "shift6": 1
                },
                "uVar9": {
                    "a_shifted_with_c": 1,
                    "d_shifted": 1,
                    "divisor_temp": 1,
                    "input4_shifted": 1,
                    "output1": 1,
                    "result2": 1,
                    "result_a": 1,
                    "result_bit_32_63": 1,
                    "result_lo": 1,
                    "result_low": 1,
                    "shifted_4": 1,
                    "shifted_d": 1,
                    "shifted_input1": 1,
                    "shifted_input4": 1,
                    "shifted_input_4": 2,
                    "shifted_input_4_1": 1,
                    "shifted_param_4": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_6": 2,
                    "temp_var8": 1,
                    "tmp6": 1,
                    "u_var9": 2,
                    "updated_high_bits": 1
                },
                "uVar90": {
                    "var7": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_08004bd8"
            ],
            "code": "\nulonglong calculate_result_0800015c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint temp_5;\n  uint temp_6;\n  uint difference;\n  uint temp_8;\n  uint u_var12;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  temp_6 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (temp_6 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)temp_6 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      temp_6 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        temp_6 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = temp_6;\n      }\n      is_zero = (shifted_input2 | temp_6 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = temp_6 == input4;\n      }\n      if (!is_zero) {\n        temp_6 = temp_6 | 0x80000;\n      }\n      return CONCAT44(temp_6,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      temp_6 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        temp_6 = temp_6 | 0x80000000;\n      }\n      return CONCAT44(temp_6,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_0800039c:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  temp_6 = temp_6 >> 0x15;\n  difference = temp_6 - shifted_input2;\n  is_zero = difference != 0;\n  if (temp_6 < shifted_input2) {\n    difference = -difference;\n  }\n  temp_5 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= temp_6) {\n    shifted_input2 = shifted_input2 + difference;\n    temp_5 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,temp_5);\n  }\n  temp_6 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = temp_5 != 0;\n    temp_5 = -temp_5;\n    temp_6 = -temp_6 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      temp_6 = temp_6 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  u_var12 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp_8 = input3 << (u_var12 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = temp_5 + input3;\n    temp2 = temp3 << (u_var12 & 0xff);\n    u_var12 = temp1 + temp2;\n    temp_6 = temp_6 + CARRY4(temp_5,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp_8 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp_8 = temp_8 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    u_var12 = temp_5 + temp3;\n    temp_6 = temp_6 + ((int)temp3 >> 0x1f) + (uint)CARRY4(temp_5,temp3);\n  }\n  input2 = temp_6 & 0x80000000;\n  difference = temp_6;\n  if ((int)temp_6 < 0) {\n    is_zero = temp_8 == 0;\n    temp_8 = -temp_8;\n    difference = -u_var12;\n    u_var12 = -(uint)!is_zero - u_var12;\n    difference = -(uint)(is_zero <= difference) - temp_6;\n  }\n  if (0xfffff < difference) {\n    temp_5 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      temp_6 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)u_var12;\n      u_var12 = (uint)(temp_6 != 0) << 0x1f | u_var12 >> 1;\n      temp_8 = (uint)(carry & 1) << 0x1f | temp_8 >> 1;\n      temp_5 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_0800039c;\n    }\nLAB_08000268:\n    is_zero = 0x7fffffff < temp_8;\n    if (temp_8 == 0x80000000) {\n      is_zero = (u_var12 & 1) != 0;\n    }\n    return CONCAT44(difference + temp_5 * 0x100000 + (uint)CARRY4(u_var12,(uint)is_zero) | input2,\n                    u_var12 + is_zero);\n  }\n  is_equal = (temp_8 & 0x80000000) != 0;\n  temp_8 = temp_8 << 1;\n  temp_5 = u_var12 * 2;\n  is_zero = CARRY4(u_var12,u_var12);\n  u_var12 = u_var12 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(temp_5,(uint)is_equal));\n  temp_5 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000268;\n  temp3 = u_var12;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = u_var12;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  u_var12 = shift2 - 0xb;\n  is_negative = SBORROW4(u_var12,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)u_var12 < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = u_var12;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (u_var12 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp_8 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp_8 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002e0:\n  if ((int)u_var12 <= (int)temp_5) {\n    return CONCAT44(shifted_input2 + (temp_5 - u_var12) * 0x100000 | input2,temp3);\n  }\n  difference = ~(temp_5 - u_var12);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(temp_6,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(temp_6,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_0800015c",
            "entrypoint": "0x0800015c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800015c": "calculate_result_0800015c",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "temp_8",
                "uVar12": "u_var12",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "temp_5",
                "uVar9": "temp_6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003d4": {
            "additional_data": {
                "0": {
                    "zero": 1
                },
                "0U": {
                    "mask_zero": 1,
                    "zero": 1,
                    "zero_bits": 1
                },
                "0x13": {
                    "threshold_below": 1
                },
                "0x15": {
                    "initial_shift": 1,
                    "shift_constant_1": 1
                },
                "0x1e": {
                    "shift_threshold": 1,
                    "threshold": 1
                },
                "0x20": {
                    "bit_length_max": 1,
                    "bit_size": 1
                },
                "0x433": {
                    "max_threshold": 1,
                    "threshold": 2
                },
                "0xb": {
                    "constant_shift": 1,
                    "shift_constant_2": 1
                },
                "0xc": {
                    "constant_value": 1,
                    "shift_constant_3": 1
                },
                "CONCAT44": {
                    "combine": 1,
                    "combine_lower_and_upper": 1,
                    "combine_shifted_values": 1,
                    "combine_values": 2,
                    "concatenate": 2
                },
                "ConCAT44": {
                    "join_words": 1
                },
                "FUN_080003d4": {
                    "bit_shift_function": 1,
                    "bit_shift_operation": 2,
                    "bit_shifting": 1,
                    "bit_shifting_function": 1,
                    "bitshift_and_concat": 1,
                    "bitwise_shift": 3,
                    "convert_bits_to_word": 1,
                    "decode_shift": 1,
                    "reverse_bit_pattern": 1,
                    "reverse_bits": 8,
                    "shift_and_combine": 1,
                    "shift_and_concat": 5,
                    "shift_and_concatenate": 2,
                    "shift_and_merge": 1,
                    "unsigned_long_long_function": 1
                },
                "LAB_080002e0": {
                    "apply_shift": 1,
                    "bit_shift": 1,
                    "carry_logic": 1,
                    "end_of_algorithm": 1,
                    "end_of_function": 1,
                    "merge_values": 1,
                    "perform_shift": 1,
                    "shift_and_concatenate": 1,
                    "shift_bitwise": 1,
                    "shift_labels": 1,
                    "shift_left": 1,
                    "shift_operations": 1,
                    "skip_shift": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "SCARRY4": {
                    "signed_carry": 1
                },
                "bVar5": {
                    "check1": 1,
                    "is_less_than_zero": 3,
                    "is_negative": 25,
                    "is_negative_shift": 1,
                    "is_temp_var_negative": 1
                },
                "bVar6": {
                    "check2": 1,
                    "is_equal": 1,
                    "is_equal_to_zero": 1,
                    "is_equal_zero": 1,
                    "is_temp_var_zero": 1,
                    "is_zero": 25,
                    "is_zero_shift": 1
                },
                "bVar7": {
                    "borrow_flag": 1,
                    "carry": 3,
                    "carry_flag": 1,
                    "check3": 1,
                    "contains_one_bits": 1,
                    "has_carry": 2,
                    "is_borrow": 4,
                    "is_carry": 10,
                    "is_less_than_threshold": 1,
                    "is_overflow": 5,
                    "is_subtraction": 2
                },
                "iVar3": {
                    "bit_count": 4,
                    "bit_length": 1,
                    "count": 11,
                    "input_bits": 1,
                    "leading_zero_count": 1,
                    "leading_zeroes": 2,
                    "leading_zeros": 8,
                    "lzcount_output": 1,
                    "lzcount_result": 1,
                    "number_of_bits": 1
                },
                "in_r12": {
                    "bit_mask": 1,
                    "mask": 2,
                    "remainder": 1,
                    "remaining": 1,
                    "remaining_bits": 12,
                    "remaining_shift": 4,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_diff": 1,
                    "shift_value": 1,
                    "temp": 5,
                    "temp_var": 1
                },
                "param_1": {
                    "bit_sequence": 1,
                    "input": 22,
                    "input_value": 7,
                    "value": 1
                },
                "uVar1": {
                    "concatenated_value": 2,
                    "lower_result": 1,
                    "output": 1,
                    "output1": 2,
                    "output_high": 2,
                    "output_upper": 1,
                    "output_value": 1,
                    "result": 6,
                    "result1": 3,
                    "result_high": 1,
                    "result_lower": 1,
                    "result_shifted": 1,
                    "shifted": 1,
                    "shifted_result": 1,
                    "shifted_value": 3,
                    "upper_bits": 1,
                    "upper_part": 2,
                    "word_upper": 1
                },
                "uVar2": {
                    "bit_offset": 1,
                    "lower_part": 1,
                    "output2": 2,
                    "result2": 2,
                    "shift": 2,
                    "shift_amount": 13,
                    "shift_amt": 2,
                    "shift_count": 1,
                    "shifted": 1,
                    "temp_var": 1,
                    "word_lower": 1
                },
                "uVar4": {
                    "addition": 1,
                    "adjusted_bit_count": 1,
                    "adjusted_bit_length": 1,
                    "adjusted_count": 3,
                    "adjusted_shift": 1,
                    "adjusted_shift_amount": 1,
                    "calculation_result": 1,
                    "final_shift": 1,
                    "offset": 1,
                    "shift": 1,
                    "shift_amount": 10,
                    "shift_amt": 1,
                    "shift_amt2": 1,
                    "shift_limit": 1,
                    "shifted_subtracted": 1,
                    "sum": 1,
                    "temp": 2,
                    "upper_bound": 1,
                    "upper_limit": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nulonglong reverse_bits_080003d4(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  count = leading_zero_count(input);\n  shift_amount = count + 0x15;\n  is_carry = SBORROW4(shift_amount,0x20);\n  shift_amount = count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_carry = signed_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = count + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_carry == false) {\n      result = input << shift_amount;\n      input = input >> (0xcU - (count + 1) & 0xff);\n      goto merge_values;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    input = input | mask_zero >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nmerge_values:\n  if (shift_amount < 0x433) {\n    return concatenate(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  count = shift_amount - 0x13;\n  if (count == 0 || count < 0 != signed_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - count) & 0xff) | input << (0xcU - count & 0xff));\n}\n\n",
            "current_name": "reverse_bits_080003d4",
            "entrypoint": "0x080003d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "mask_zero",
                "CONCAT44": "concatenate",
                "FUN_080003d4": "reverse_bits_080003d4",
                "LAB_080002e0": "merge_values",
                "LZCOUNT": "leading_zero_count",
                "SCARRY4": "signed_carry",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_carry",
                "iVar3": "count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003f4": {
            "additional_data": {
                "CONCAT44": {
                    "combine_values": 2
                },
                "FUN_080003f4": {
                    "bit_shift_function": 1,
                    "bitwise_shift_and_concat": 1,
                    "bitwise_shift_extraction": 1,
                    "bitwise_shift_operation": 1,
                    "calculate_bit_shift": 1,
                    "calculate_shifted_value": 1,
                    "reverse_and_shift": 2,
                    "reverse_and_shift_bits": 1,
                    "reverse_bits": 16,
                    "reverse_bits_to_u_long": 1,
                    "reverse_bits_with_offset": 1,
                    "reverse_integer": 1,
                    "reverse_shift": 1,
                    "shift_and_rearrange_bits": 1,
                    "unsigned_long_reverse_bits": 1
                },
                "LAB_080002e0": {
                    "calculate_result": 1,
                    "shift_left": 1,
                    "shift_operations": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1,
                    "leading_zeros_count_function": 1
                },
                "SBORROW4": {
                    "signed_subtraction_borrow_function": 1
                },
                "SCARRY4": {
                    "signed_subtraction_carry_function": 1
                },
                "bVar7": {
                    "bit_test1": 1,
                    "has_leading_zero": 1,
                    "is_count2_negative": 1,
                    "is_less_than_zero": 1,
                    "is_neg_bit_count": 1,
                    "is_negative": 17,
                    "is_negative_shift_count": 1,
                    "is_shift_less_than_zero": 1,
                    "is_zero_shift": 1,
                    "leading_zeros_negative": 1,
                    "needs_additional_shift": 1,
                    "negative_case": 1,
                    "negative_shift": 2,
                    "shift_is_negative": 1
                },
                "bVar8": {
                    "bit_test2": 1,
                    "equal_to_zero_case": 1,
                    "has_no_shifts": 1,
                    "is_count2_zero": 1,
                    "is_equal_zero": 1,
                    "is_shift_zero": 1,
                    "is_zero": 17,
                    "is_zero_bit_count": 1,
                    "is_zero_shift_complete": 1,
                    "is_zero_shift_count": 1,
                    "leading_zeros_zero": 1,
                    "needs_zero_shift": 1,
                    "shift_is_zero": 1,
                    "zero_shift": 2
                },
                "bVar9": {
                    "carry": 3,
                    "carry_flag": 3,
                    "carry_status": 1,
                    "is_carry": 7,
                    "is_carry_bit_count": 1,
                    "is_carry_set": 2,
                    "is_negative": 1,
                    "is_overflow": 4,
                    "is_shift_negative": 1,
                    "is_shift_required": 1,
                    "leading_zeros_overflow": 1,
                    "needs_carry": 2,
                    "overflow_case": 1,
                    "overflow_flag": 1,
                    "shift_overflow": 1,
                    "should_invert_bits": 1
                },
                "iVar4": {
                    "count": 1,
                    "count_diff": 1,
                    "leading_zero_count": 2,
                    "leading_zeroes": 3,
                    "leading_zeros": 21,
                    "leading_zeros_count": 1,
                    "lz_count": 1,
                    "number_of_leading_zeros": 1
                },
                "in_r12": {
                    "bit_mask": 4,
                    "in_r12": 1,
                    "mask": 1,
                    "remainder": 1,
                    "remaining_bits": 17,
                    "remaining_shift_amount": 1,
                    "remaining_shift_offset": 1,
                    "shift_mask": 1,
                    "shifted_out_value": 1,
                    "temp": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "input": 21,
                    "input_num": 1,
                    "input_number": 1,
                    "input_value": 5,
                    "num": 1,
                    "number": 1,
                    "value": 1
                },
                "uVar1": {
                    "bit_count": 6,
                    "count1": 1,
                    "leading_zeroes": 1,
                    "output_high": 3,
                    "result": 5,
                    "result1": 1,
                    "shift_count": 6,
                    "shifted_bits": 2,
                    "shifted_input": 1,
                    "shifted_number": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "zero_count": 2
                },
                "uVar2": {
                    "abs_input": 11,
                    "abs_input_num": 1,
                    "abs_input_value": 2,
                    "abs_num": 1,
                    "abs_number": 1,
                    "abs_value": 3,
                    "absolute_input": 2,
                    "absolute_value": 2,
                    "input_abs": 1,
                    "mask": 1,
                    "output_low": 1,
                    "shifted_input": 1,
                    "temp": 1,
                    "temp_input": 1,
                    "temp_value": 1,
                    "unsigned_value": 1
                },
                "uVar3": {
                    "count2": 1,
                    "num_shifts": 1,
                    "reverse_shift_count": 1,
                    "shift": 3,
                    "shift_amount": 22,
                    "shift_amt": 1,
                    "shift_count": 2
                },
                "uVar5": {
                    "adjusted_bit_count": 2,
                    "adjusted_shift_amount": 1,
                    "adjusted_shift_count": 1,
                    "bits_to_shift": 1,
                    "combined_shift": 1,
                    "constant_offset": 1,
                    "final_shift": 3,
                    "masked_shift": 1,
                    "original_shift": 1,
                    "required_shift": 1,
                    "shift_amount1": 1,
                    "shift_constant": 1,
                    "shift_difference": 1,
                    "shift_limit": 1,
                    "shifted_amount": 2,
                    "shifted_bit_count": 1,
                    "shifted_bits": 2,
                    "shifted_count": 1,
                    "shifted_value": 1,
                    "target_bit_count": 1,
                    "total_bits": 5,
                    "total_shifts": 1
                },
                "uVar6": {
                    "input_mask": 1,
                    "input_sign": 1,
                    "is_negative": 1,
                    "original_sign": 3,
                    "sign": 1,
                    "sign_bit": 24
                },
                "uVar7": {
                    "result": 1
                },
                "uVar8": {
                    "upper_bits": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nulonglong reverse_bits_to_u_long_080003f4(uint input)\n\n{\n  uint shift_count;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shift_count = 0;\n  leading_zeros = leading_zeros_count_function(abs_input);\n  total_bits = leading_zeros + 0x15;\n  is_carry = signed_subtraction_borrow_function(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    is_carry = signed_subtraction_carry_function(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && is_carry == false) {\n      shift_count = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_left;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    shift_count = 0 << (shift_amount & 0xff);\n  }\nshift_left:\n  if (total_bits < 0x433) {\n    return combine_values(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,shift_count);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return combine_values(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != signed_subtraction_carry_function(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_values(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shift_count >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return combine_values(input,shift_count >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_to_u_long_080003f4",
            "entrypoint": "0x080003f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_080003f4": "reverse_bits_to_u_long_080003f4",
                "LAB_080002e0": "shift_left",
                "LZCOUNT": "leading_zeros_count_function",
                "SBORROW4": "signed_subtraction_borrow_function",
                "SCARRY4": "signed_subtraction_carry_function",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_carry",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "shift_count",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000418": {
            "additional_data": {
                "FUN_08000418": {
                    "calculate_shifted_value": 1,
                    "convert_to_fixed_point": 1,
                    "decode_and_combine_values": 1,
                    "decode_and_transform": 1,
                    "decode_unsigned_long_long": 1,
                    "reverse_bit_pattern": 1,
                    "reverse_bits": 18,
                    "reverse_bitwise_operations": 2,
                    "shift_left_with_conditions": 1,
                    "transform_bits_to_u_int64": 1
                },
                "LZCOUNT": {
                    "count_leading_zeros": 1,
                    "leading_zero_count": 1
                },
                "SBORROW4": {
                    "is_subtraction_overflow": 1
                },
                "SCARRY4": {
                    "is_carry": 1
                },
                "_iVar6": {
                    "count": 1
                },
                "bVar10": {
                    "borrow": 2,
                    "carry": 2,
                    "carry_flag": 1,
                    "carry_underflow": 1,
                    "check2": 1,
                    "check3": 1,
                    "comparison_result3": 1,
                    "condition2": 1,
                    "condition3": 1,
                    "conditional_value": 1,
                    "has_carry": 1,
                    "is_condition3": 1,
                    "is_high_bits_overflow": 1,
                    "is_less_than32": 1,
                    "is_less_than_zero2": 1,
                    "is_negative": 5,
                    "is_scarry": 1,
                    "is_shift_carry": 1,
                    "is_shift_count_negative": 1,
                    "is_shift_in_bounds": 1,
                    "is_shift_negative_overflow": 1,
                    "is_shift_positive": 1,
                    "is_subtraction_overflow": 1,
                    "overflow_flag": 1
                },
                "bVar8": {
                    "carry": 2,
                    "carry_flag": 2,
                    "check1": 1,
                    "comparison_result1": 1,
                    "condition1": 1,
                    "is_bit_count_positive": 1,
                    "is_condition1": 1,
                    "is_left_shift": 1,
                    "is_less_than_zero": 1,
                    "is_less_than_zero1": 1,
                    "is_negative": 2,
                    "is_negative_1": 1,
                    "is_negative_shift": 2,
                    "is_shift_negative": 1,
                    "is_shifted_count_zero": 1,
                    "is_small_shift": 1,
                    "is_zero": 6,
                    "less_than_zero": 1,
                    "lower_bits_condition": 1,
                    "negative_shift": 1,
                    "overflow": 1
                },
                "bVar9": {
                    "bit_test_result": 1,
                    "check1": 1,
                    "check2": 1,
                    "check_mask": 1,
                    "comparison_result2": 1,
                    "condition1": 1,
                    "condition2": 1,
                    "equal_zero": 1,
                    "flag": 1,
                    "highest_bits_condition": 1,
                    "is_all_ones": 1,
                    "is_condition2": 1,
                    "is_ff": 1,
                    "is_full_byte": 1,
                    "is_high_byte": 1,
                    "is_input_zero": 3,
                    "is_mask_full": 1,
                    "is_masked": 1,
                    "is_param4_zero": 1,
                    "is_shifted_input_zero": 1,
                    "is_zero": 5,
                    "is_zero1": 1,
                    "is_zero_or_ff": 1,
                    "zero_flag": 1
                },
                "iVar6": {
                    "bit_count": 9,
                    "bit_index": 1,
                    "count": 7,
                    "l_zcount": 1,
                    "leading_zeros": 4,
                    "lzcnt_result": 1,
                    "num_bits": 1,
                    "num_leading_zeros": 1,
                    "shift_amount": 2,
                    "shift_count": 3
                },
                "in_r12": {
                    "bit_shift": 1,
                    "bit_width": 1,
                    "constant": 3,
                    "extra_bits": 1,
                    "in_r12": 2,
                    "inverse_shift_count": 1,
                    "mask": 1,
                    "r12": 1,
                    "remainder": 1,
                    "remaining_bits": 7,
                    "remaining_shift_amount": 1,
                    "remaining_shift_count": 1,
                    "residue": 1,
                    "shift_amount": 1,
                    "shift_mask": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp3": 2
                },
                "new_variable_name_1": {
                    "shifted_input": 1
                },
                "new_variable_name_2": {
                    "bit_mask": 1
                },
                "new_variable_name_3": {
                    "shift_adjustment": 1
                },
                "new_variable_name_4": {
                    "shifted_output": 1
                },
                "new_variable_name_5": {
                    "carried_over_bits": 1
                },
                "param_1": {
                    "input": 22,
                    "input_number": 3,
                    "input_value": 4,
                    "number": 1,
                    "value": 1
                },
                "param_2": {
                    "param2": 8,
                    "temp_var_1": 1,
                    "unknown": 1,
                    "unused": 3,
                    "unused1": 2,
                    "unused_param": 2,
                    "unused_param1": 1,
                    "value_2": 1
                },
                "param_3": {
                    "param3": 8,
                    "temp_var_2": 1,
                    "unknown": 1,
                    "unused": 3,
                    "unused2": 2,
                    "unused_param": 1,
                    "unused_param2": 1,
                    "unused_param_2": 1,
                    "value_3": 1
                },
                "param_4": {
                    "alignment": 1,
                    "check_value": 2,
                    "flag": 1,
                    "input_mask": 1,
                    "mask": 9,
                    "param": 1,
                    "param4": 8,
                    "shift": 1,
                    "temp_var_3": 1,
                    "unused3": 2,
                    "unused_param": 1,
                    "unused_param3": 1,
                    "unused_param_3": 1,
                    "value_4": 1
                },
                "uVar1": {
                    "bit31": 5,
                    "bit_31": 2,
                    "bit_mask": 1,
                    "bit_shifted": 1,
                    "first_bit": 1,
                    "flag": 1,
                    "high_bit_mask": 1,
                    "msb": 2,
                    "msb_bit": 1,
                    "msb_mask": 2,
                    "set_msb": 1,
                    "shifted_input_number_msb": 1,
                    "sign_bit": 6,
                    "sign_extension": 3,
                    "sign_flag": 1,
                    "upper_bit": 2
                },
                "uVar2": {
                    "lower_bits": 1,
                    "output": 2,
                    "result": 6,
                    "result_shifted": 1,
                    "shifted_bits": 1,
                    "shifted_input": 6,
                    "shifted_number": 1,
                    "temp": 3,
                    "temp1": 5,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "temp_var_4": 1,
                    "u_var2": 1
                },
                "uVar3": {
                    "bit31_and_bit3": 1,
                    "combined_result": 1,
                    "combined_values": 1,
                    "high_bits": 2,
                    "output": 1,
                    "output_high": 1,
                    "result": 13,
                    "result1": 2,
                    "result_high": 3,
                    "result_msb": 1,
                    "result_shifted": 1,
                    "result_upper": 1,
                    "reverse": 1,
                    "sign_bit": 1
                },
                "uVar4": {
                    "bit3to4": 1,
                    "shift": 1,
                    "shift_amount": 6,
                    "shift_amount1": 1,
                    "shift_bits": 1,
                    "shift_count": 1,
                    "shifted": 1,
                    "shifted_bits": 2,
                    "shifted_divided_input": 1,
                    "shifted_flag": 1,
                    "shifted_input": 8,
                    "shifted_input_adjusted": 1,
                    "shifted_input_div8": 1,
                    "shifted_input_number": 1,
                    "shifted_value": 2
                },
                "uVar5": {
                    "double_input": 1,
                    "doubled_input": 2,
                    "input_shifted": 3,
                    "masked_input": 1,
                    "modified_input": 1,
                    "multiplied": 1,
                    "shifted_input": 3,
                    "shifted_input2": 1,
                    "shifted_input_doubled": 1,
                    "shifted_input_number_doubled": 1,
                    "shifted_input_times_two": 2,
                    "shifted_input_with_zero": 1,
                    "shifted_number": 1,
                    "temp": 5,
                    "temp2": 2,
                    "temp_input": 1,
                    "temp_var2": 2,
                    "temp_var_5": 1
                },
                "uVar7": {
                    "bit_count": 1,
                    "lz_count": 1,
                    "num_bits": 1,
                    "offset": 1,
                    "remainder": 1,
                    "shift": 2,
                    "shift_amount": 10,
                    "shift_amount2": 1,
                    "shift_count_minus11": 1,
                    "shift_offset": 1,
                    "shifted": 1,
                    "shifted_amount": 1,
                    "shifted_bits": 1,
                    "shifted_count": 1,
                    "shifted_input_minus11": 1,
                    "shifted_shift_count": 1,
                    "shifted_temp_var": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_shift": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nulonglong reverse_bits_08000418(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint sign_bit;\n  uint shifted_input;\n  uint result;\n  uint shifted_input;\n  uint temp;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_zero;\n  bool is_negative;\n  \n  temp = input << 1;\n  is_zero = temp == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)temp >> 3) >> 1;\n  result = sign_bit | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = temp & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((temp & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  shifted_input = input;\n  temp = shifted_input;\n  if (shifted_input == 0) {\n    shifted_input = 0;\n    temp = input;\n  }\n  bit_count = leading_zero_count(temp);\n  if (shifted_input == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = is_subtraction_overflow(shift_amount,0x20);\n  shifted_input = bit_count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = is_carry(shifted_input,0xc);\n    bit_count = bit_count + -0x1f;\n    is_zero = bit_count < 0;\n    is_zero = bit_count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_zero == is_negative) {\n      shifted_input = temp << (shift_amount & 0xff);\n      temp = temp >> (0xcU - bit_count & 0xff);\n      goto LAB_080002e0;\n    }\n  }\n  if (is_zero || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  temp = temp << (shifted_input & 0xff);\n  if (is_zero || is_zero != is_negative) {\n    temp = temp | shifted_input >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_zero != is_negative) {\n    shifted_input = shifted_input << (shifted_input & 0xff);\n  }\nLAB_080002e0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp + (0x380 - shift_amount) * 0x100000 | sign_bit,shifted_input);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result,temp >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shifted_input - 0x13;\n  if (bit_count == 0 || bit_count < 0 != is_carry(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(sign_bit | temp >> (shifted_input & 0xff),\n                    shifted_input >> (shifted_input & 0xff) | temp << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,shifted_input >> (0x20 - (0xcU - bit_count) & 0xff) | temp << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_08000418",
            "entrypoint": "0x08000418",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000418": "reverse_bits_08000418",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "is_subtraction_overflow",
                "SCARRY4": "is_carry",
                "bVar10": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "iVar6": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "sign_bit",
                "uVar2": "shifted_input",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "temp",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004c8": {
            "additional_data": {
                "FUN_080004c8": {
                    "calculate": 2,
                    "calculate_exponent": 1,
                    "calculate_product": 1,
                    "calculate_product_and_sum": 1,
                    "calculate_result": 19,
                    "calculate_sum": 1,
                    "compute_result": 1,
                    "process_data": 1,
                    "reverse_bits_and_concat": 1
                },
                "bVar10": {
                    "carry_flag": 1,
                    "check2": 1,
                    "condition2": 2,
                    "flag1": 1,
                    "flag2": 17,
                    "is_carry": 1,
                    "is_condition2": 1,
                    "is_greater": 1,
                    "is_negative": 3,
                    "temp11": 1
                },
                "bVar11": {
                    "check3": 1,
                    "condition3": 2,
                    "flag2": 1,
                    "flag3": 17,
                    "is_condition3": 1,
                    "is_negative": 3,
                    "is_negative2": 1,
                    "is_overflow": 1,
                    "overflow_flag": 1,
                    "temp12": 1
                },
                "bVar9": {
                    "all_zero_flag": 1,
                    "check1": 1,
                    "condition1": 2,
                    "flag": 1,
                    "flag1": 16,
                    "is_condition1": 1,
                    "is_equal": 1,
                    "is_zero": 5,
                    "temp10": 1
                },
                "iVar5": {
                    "i_var5": 1,
                    "new_value3": 1,
                    "result5": 1,
                    "result_5": 1,
                    "sum": 3,
                    "temp3": 12,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_3": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "var3": 3,
                    "variable3": 1
                },
                "lVar2": {
                    "intermediate_value": 1,
                    "product2": 1,
                    "result": 1,
                    "result2": 8,
                    "result_2": 2,
                    "sum1": 1,
                    "temp": 8,
                    "temp1": 2,
                    "temp2": 3,
                    "temp_var": 4
                },
                "param_1": {
                    "a": 1,
                    "arg1": 1,
                    "input1": 22,
                    "input_1": 3,
                    "input_param1": 1,
                    "input_val_1": 1,
                    "value1": 1,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "b": 1,
                    "input2": 22,
                    "input_2": 3,
                    "input_param2": 1,
                    "input_val_2": 1,
                    "value2": 1,
                    "var2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "c": 1,
                    "input3": 22,
                    "input_3": 3,
                    "input_param3": 1,
                    "input_val_3": 1,
                    "value3": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "d": 1,
                    "input4": 22,
                    "input_4": 3,
                    "input_param4": 1,
                    "input_val_4": 1,
                    "value4": 1,
                    "var4": 1
                },
                "reverse_bits_and_concat_080006a4": {
                    "reverse_and_concatenate": 1,
                    "reverse_bits_and_concat": 1
                },
                "uVar1": {
                    "product": 1,
                    "product1": 2,
                    "result": 14,
                    "result1": 8,
                    "result_1": 2,
                    "result_high": 1,
                    "temp1": 3
                },
                "uVar12": {
                    "combined_input": 4,
                    "combined_inputs": 1,
                    "combined_param": 1,
                    "combined_params": 2,
                    "combined_result": 2,
                    "combined_value": 1,
                    "combined_vars": 1,
                    "concatenated": 3,
                    "concatenated_input": 5,
                    "concatenated_inputs": 1,
                    "concatenated_vars": 1,
                    "new_value8": 1,
                    "product_and_sum": 1,
                    "temp13": 1,
                    "temp8": 1,
                    "temp9": 1
                },
                "uVar3": {
                    "high_bits": 1,
                    "mask_x": 1,
                    "new_value1": 1,
                    "result3": 1,
                    "result_3": 1,
                    "temp1": 12,
                    "temp2": 2,
                    "temp3": 3,
                    "temp_1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "u_var3": 1,
                    "var1": 3,
                    "variable1": 1,
                    "x": 1
                },
                "uVar4": {
                    "mask_y": 1,
                    "new_value2": 1,
                    "result4": 1,
                    "result_4": 1,
                    "temp2": 12,
                    "temp3": 2,
                    "temp4": 3,
                    "temp_2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "u_var4": 2,
                    "var2": 3,
                    "variable2": 1,
                    "y": 1
                },
                "uVar6": {
                    "carry": 2,
                    "diff": 1,
                    "new_value4": 1,
                    "result6": 1,
                    "result_6": 1,
                    "temp4": 12,
                    "temp5": 2,
                    "temp6": 3,
                    "temp_4": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "u_var6": 1,
                    "var4": 3,
                    "variable4": 1
                },
                "uVar7": {
                    "bit_mask": 1,
                    "carry": 1,
                    "new_value6": 1,
                    "result": 1,
                    "result7": 1,
                    "result_8": 1,
                    "sum2": 1,
                    "temp5": 2,
                    "temp6": 7,
                    "temp7": 4,
                    "temp8": 1,
                    "temp_5": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "u_var7": 1,
                    "upper_bits": 1,
                    "upper_bits_mask": 1,
                    "var5": 2,
                    "var6": 1,
                    "variable5": 1
                },
                "uVar8": {
                    "bit_shifted": 1,
                    "new_value7": 1,
                    "product2": 1,
                    "result8": 1,
                    "result_9": 1,
                    "result_low": 1,
                    "temp6": 2,
                    "temp7": 9,
                    "temp8": 4,
                    "temp9": 1,
                    "temp_6": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "u_var8": 2,
                    "var6": 2,
                    "var7": 1,
                    "variable6": 1
                },
                "unaff_r5": {
                    "new_value5": 1,
                    "result_7": 1,
                    "temp5": 10,
                    "temp6": 2,
                    "temp7": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "unaff_r5": 1,
                    "var5": 1
                }
            },
            "called": [
                "FUN_080006a4"
            ],
            "calling": [
                "FUN_080096e0",
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08004bd8",
                "FUN_08005e9c",
                "FUN_08004d78"
            ],
            "code": "\nulonglong calculate_result_080004c8(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong concatenated_input;\n  \n  concatenated_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    concatenated_input = reverse_and_concatenate();\n  }\n  temp1 = (uint)(concatenated_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)concatenated_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)concatenated_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result = (concatenated_input & 0xffffffff) * (ulonglong)input3;\n    concatenated_input = (concatenated_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result >> 0x20);\n    temp7 = (uint)concatenated_input;\n    temp = (ulonglong)temp1 * (ulonglong)input4 + (concatenated_input >> 0x20);\n    temp6 = (uint)temp;\n    temp1 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      temp = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input3 = (uint)temp << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_080004c8",
            "entrypoint": "0x080004c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004c8": "calculate_result_080004c8",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "temp",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_and_concat_080006a4": "reverse_and_concatenate",
                "uVar1": "result",
                "uVar12": "concatenated_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006a4": {
            "additional_data": {
                "CONCAT44": {
                    "combine_bits": 1
                },
                "FUN_080006a4": {
                    "bitwise_operation": 2,
                    "calculate_bitwise_and_shift": 2,
                    "calculate_bitwise_or": 1,
                    "calculate_bitwise_xor": 1,
                    "calculate_checksum": 1,
                    "calculate_result": 1,
                    "calculate_shifted_value": 1,
                    "check_and_shift_bits": 1,
                    "convert_to_double": 1,
                    "reverse_bit_operations": 2,
                    "reverse_bits": 8,
                    "reverse_bits_and_concat": 1,
                    "reverse_bitwise_operation": 1,
                    "reverse_bitwise_operations": 3,
                    "reverse_computation": 1
                },
                "bVar4": {
                    "check_result": 1,
                    "condition": 1,
                    "flag": 2,
                    "is_input_zero": 1,
                    "is_zero": 26
                },
                "in_r12": {
                    "bit3": 1,
                    "bit5": 4,
                    "bit_5": 3,
                    "bit_e": 1,
                    "comparison_constant": 1,
                    "condition2": 1,
                    "constant": 5,
                    "mask": 1,
                    "register12": 1,
                    "temp2": 4,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_5": 2,
                    "temp_var5": 2,
                    "temp_var_2": 1
                },
                "param_1": {
                    "data1": 1,
                    "first_operand": 1,
                    "input1": 16,
                    "input_1": 9,
                    "input_a": 1,
                    "input_param1": 1,
                    "input_value1": 1,
                    "shifted_input1": 1
                },
                "param_2": {
                    "data2": 1,
                    "input2": 16,
                    "input_2": 9,
                    "input_b": 1,
                    "input_param2": 1,
                    "input_value2": 1,
                    "second_operand": 1,
                    "shifted_input3": 1
                },
                "param_3": {
                    "data3": 1,
                    "input3": 17,
                    "input_3": 9,
                    "input_c": 1,
                    "input_param3": 1,
                    "input_value3": 1,
                    "third_operand": 1
                },
                "param_4": {
                    "data4": 1,
                    "fourth_operand": 1,
                    "input4": 17,
                    "input_4": 9,
                    "input_d": 1,
                    "input_param4": 1,
                    "input_value4": 1
                },
                "return": {
                    "result": 1
                },
                "uVar1": {
                    "bit1": 5,
                    "bit_1": 4,
                    "bit_32": 1,
                    "bit_a": 1,
                    "data1_shifted": 1,
                    "first_operand_shifted": 1,
                    "is_negative1": 1,
                    "output_1": 1,
                    "shifted_bit1": 1,
                    "temp1": 4,
                    "temp2": 1,
                    "temp3": 2,
                    "temp5": 1,
                    "temp_1": 2,
                    "temp_3": 1,
                    "temp_bit_flag": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "var3": 1
                },
                "uVar2": {
                    "bit2": 2,
                    "bit3": 2,
                    "bit_2": 2,
                    "bit_20_32": 1,
                    "bit_3": 2,
                    "bit_c": 1,
                    "masked_variable": 1,
                    "shifted_bit3": 1,
                    "shifted_input4": 1,
                    "shifted_input_5": 1,
                    "shifted_result": 1,
                    "temp2": 5,
                    "temp3": 2,
                    "temp4": 2,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_var1": 1,
                    "temp_var3": 2,
                    "var1": 1
                },
                "uVar3": {
                    "bit3": 2,
                    "bit4": 2,
                    "bit_3": 2,
                    "bit_32_64": 1,
                    "bit_4": 2,
                    "bit_d": 1,
                    "final_result": 1,
                    "output_2": 1,
                    "result1": 1,
                    "shifted_bit4": 1,
                    "shifted_input2": 1,
                    "temp3": 5,
                    "temp4": 2,
                    "temp5": 2,
                    "temp_4": 2,
                    "temp_5": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temporary_value": 1,
                    "var2": 1
                },
                "uVar4": {
                    "result2": 1
                },
                "uVar5": {
                    "bit_mask": 1,
                    "mask": 2,
                    "shifted_bit": 1
                },
                "uVar6": {
                    "result": 2
                },
                "unaff_r4": {
                    "bit2": 4,
                    "bit4": 1,
                    "bit_2": 2,
                    "bit_4": 1,
                    "bit_b": 1,
                    "comparison_operand": 1,
                    "condition1": 1,
                    "flag_1": 1,
                    "input_5": 1,
                    "output1": 1,
                    "shifted_bit2": 1,
                    "temp1": 7,
                    "temp2": 1,
                    "temp_1": 1,
                    "temp_2": 2,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "unaff_variable1": 1,
                    "unaffected_register4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080004c8"
            ],
            "code": "\nulonglong reverse_bits_and_concat_080006a4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint constant;\n  bool is_zero;\n  \n  temp2 = constant & input4 >> 0x14;\n  if (temp1 != constant && temp2 != constant) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      result (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      temp3 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp3;\n      if (temp2 != 0) {\n        result combine_bits(input2,input1);\n      }\n    }\n    do {\n      temp2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(temp2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    result combine_bits(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp3 = input2;\n  if (((!is_zero) && ((temp1 != constant || ((input1 | input2 << 0xc) == 0)))) &&\n     ((temp2 != constant || (input1 = input3, temp3 = input4, (input3 | input4 << 0xc) == 0)))) {\n    result (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  result combine_bits(temp3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_and_concat_080006a4",
            "entrypoint": "0x080006a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_bits",
                "FUN_080006a4": "reverse_bits_and_concat_080006a4",
                "bVar4": "is_zero",
                "in_r12": "constant",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "return": "result",
                "uVar1": "bit1",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800071c": {
            "additional_data": {
                "FUN_0800071c": {
                    "calculate_double": 5,
                    "calculate_double_from_bits": 2,
                    "calculate_double_from_float": 2,
                    "calculate_double_from_parameters": 1,
                    "calculate_double_value": 1,
                    "calculate_floating_point": 9,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_value": 2,
                    "improved_code": 1
                },
                "bVar14": {
                    "bool1": 2,
                    "computed_bool1": 1,
                    "condition1": 2,
                    "flag1": 17,
                    "flag6": 1,
                    "is_condition1": 1,
                    "is_true1": 1,
                    "is_zero": 4,
                    "is_zero1": 1,
                    "temp_bool1": 1
                },
                "bVar15": {
                    "bool2": 2,
                    "computed_bool2": 1,
                    "condition2": 2,
                    "flag2": 17,
                    "flag7": 1,
                    "is_condition2": 1,
                    "is_equal": 4,
                    "is_equal1": 1,
                    "is_true2": 1,
                    "temp_bool2": 1
                },
                "bVar16": {
                    "bool3": 2,
                    "carry": 1,
                    "computed_bool3": 1,
                    "condition3": 2,
                    "flag3": 17,
                    "flag8": 1,
                    "is_carry1": 1,
                    "is_condition3": 1,
                    "is_negative": 2,
                    "is_overflow": 1,
                    "is_true3": 1,
                    "temp_bool3": 1
                },
                "bVar17": {
                    "carry": 1,
                    "flag4": 3,
                    "is_condition4": 1
                },
                "bVar18": {
                    "flag5": 1
                },
                "bVar19": {
                    "flag6": 1
                },
                "iVar8": {
                    "computed_int": 1,
                    "difference": 5,
                    "exponent1": 1,
                    "result_difference": 1,
                    "temp8": 21,
                    "var8": 1
                },
                "param_1": {
                    "arg1": 1,
                    "fractional_part": 1,
                    "input1": 25,
                    "input_1": 1,
                    "param1": 1,
                    "value1": 2
                },
                "param_2": {
                    "arg2": 1,
                    "exponent": 1,
                    "flags1": 1,
                    "input2": 24,
                    "input_2": 1,
                    "param2": 1,
                    "value2": 2
                },
                "param_3": {
                    "arg3": 1,
                    "flags2": 1,
                    "input1": 1,
                    "input3": 24,
                    "input_3": 1,
                    "param3": 1,
                    "value3": 2
                },
                "param_4": {
                    "arg4": 1,
                    "flags3": 1,
                    "input2": 1,
                    "input4": 24,
                    "input_4": 1,
                    "param4": 1,
                    "value4": 2
                },
                "reverse_bits_to_double_0800088a": {
                    "reverse_bits_to_double": 2
                },
                "uVar1": {
                    "bit_mask": 2,
                    "bit_mask1": 2,
                    "bit_shifted_value1": 1,
                    "computed_u_int1": 1,
                    "mask": 1,
                    "sign_bit": 1,
                    "temp1": 21,
                    "value26": 1,
                    "var1": 1
                },
                "uVar10": {
                    "computed_u_int10": 1,
                    "exponent2": 1,
                    "exponent3": 1,
                    "second_part": 1,
                    "shifted_input": 1,
                    "sign_mask2": 1,
                    "temp1": 1,
                    "temp10": 4,
                    "temp11": 16,
                    "temp2": 1,
                    "temp8": 1,
                    "value28": 1,
                    "var10": 1
                },
                "uVar11": {
                    "computed_u_int11": 1,
                    "exponent": 1,
                    "fractional_part_shifted": 1,
                    "mantissa": 1,
                    "mantissa1": 1,
                    "result1": 1,
                    "result_sign_bit": 1,
                    "temp11": 4,
                    "temp12": 16,
                    "temp2": 1,
                    "temp9": 1,
                    "value59": 1,
                    "var11": 1
                },
                "uVar12": {
                    "computed_u_int12": 1,
                    "difference2": 1,
                    "mantissa2": 1,
                    "result2": 1,
                    "result_fraction_part1": 1,
                    "temp10": 1,
                    "temp12": 5,
                    "temp13": 16,
                    "temp3": 1,
                    "temp_value": 1,
                    "value11": 1,
                    "var12": 1
                },
                "uVar13": {
                    "computed_u_int13": 1,
                    "constant": 1,
                    "max_u_int": 1,
                    "result_fraction_part2": 1,
                    "temp11": 1,
                    "temp13": 5,
                    "temp14": 16,
                    "temp4": 1,
                    "temp_mask": 1,
                    "u_var13": 1,
                    "value29": 1,
                    "var13": 1
                },
                "uVar17": {
                    "combined_input": 1,
                    "combined_params": 1,
                    "combined_value": 1,
                    "combined_vars": 1,
                    "computed_unsigned_long_long": 1,
                    "concatenated_result": 1,
                    "double_value": 1,
                    "result": 7,
                    "reversed_bits": 3,
                    "reversed_bits_to_double": 1,
                    "reversed_double": 1,
                    "reversed_double1": 1,
                    "temp15": 2,
                    "var17": 1
                },
                "uVar18": {
                    "output1": 1,
                    "result1": 3
                },
                "uVar19": {
                    "output2": 1,
                    "result2": 3
                },
                "uVar2": {
                    "bit_mask2": 3,
                    "bit_shifted_value2": 1,
                    "computed_u_int2": 1,
                    "exponent_part": 1,
                    "normalize": 1,
                    "temp2": 21,
                    "u_var2": 1,
                    "value56": 1,
                    "var2": 1
                },
                "uVar20": {
                    "result": 1,
                    "result3": 1
                },
                "uVar21": {
                    "result4": 1
                },
                "uVar22": {
                    "result5": 1
                },
                "uVar23": {
                    "result6": 1
                },
                "uVar24": {
                    "result7": 1
                },
                "uVar25": {
                    "result8": 1
                },
                "uVar26": {
                    "result9": 1
                },
                "uVar27": {
                    "result10": 1
                },
                "uVar28": {
                    "result11": 1
                },
                "uVar29": {
                    "result12": 1
                },
                "uVar3": {
                    "bit_mask3": 2,
                    "computed_u_int3": 1,
                    "exponent": 1,
                    "fraction_part1": 1,
                    "temp1": 1,
                    "temp3": 21,
                    "temp_value1": 1,
                    "u_var3": 1,
                    "value58": 1,
                    "var3": 1
                },
                "uVar30": {
                    "result13": 1
                },
                "uVar31": {
                    "result14": 1
                },
                "uVar32": {
                    "result15": 1
                },
                "uVar33": {
                    "result16": 1
                },
                "uVar34": {
                    "result17": 1
                },
                "uVar35": {
                    "result18": 1
                },
                "uVar36": {
                    "result19": 1
                },
                "uVar37": {
                    "result20": 1
                },
                "uVar38": {
                    "result21": 1
                },
                "uVar39": {
                    "result22": 1
                },
                "uVar4": {
                    "bit_mask4": 2,
                    "computed_u_int4": 1,
                    "fraction": 1,
                    "fraction_part2": 1,
                    "temp2": 1,
                    "temp4": 21,
                    "temp_value2": 1,
                    "u_var4": 1,
                    "value57": 1,
                    "var4": 1
                },
                "uVar40": {
                    "result23": 1
                },
                "uVar5": {
                    "bit_mask5": 2,
                    "computed_u_int5": 1,
                    "fraction_part3": 1,
                    "temp3": 1,
                    "temp5": 21,
                    "temp_value3": 1,
                    "u_var5": 2,
                    "value18": 1,
                    "var5": 1
                },
                "uVar6": {
                    "bit_mask6": 2,
                    "computed_u_int6": 1,
                    "fraction_part4": 1,
                    "temp4": 1,
                    "temp6": 21,
                    "temp_value4": 1,
                    "u_var6": 2,
                    "value55": 1,
                    "var6": 1
                },
                "uVar7": {
                    "bit_mask7": 1,
                    "computed_u_int7": 1,
                    "exponent_masked": 1,
                    "temp1": 1,
                    "temp5": 1,
                    "temp7": 21,
                    "temp_value5": 1,
                    "u_var7": 2,
                    "value50": 1,
                    "var7": 1
                },
                "uVar8": {
                    "temp6": 1
                },
                "uVar9": {
                    "biased_exponent": 1,
                    "computed_u_int8": 1,
                    "exponent": 1,
                    "exponent1": 2,
                    "exponent2": 1,
                    "exponent_shifted": 1,
                    "first_part": 1,
                    "sign_mask1": 1,
                    "temp7": 1,
                    "temp9": 19,
                    "value60": 1,
                    "var9": 1
                },
                "unaff_r5": {
                    "computed_u_int9": 1,
                    "exponent2": 1,
                    "exponent_diff": 1,
                    "input2_masked": 1,
                    "second_exponent": 1,
                    "temp10": 16,
                    "unaff_r5": 1,
                    "value3": 1,
                    "value5": 1
                }
            },
            "called": [
                "FUN_0800088a"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005838",
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nulonglong calculate_floating_point_value_0800071c(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = reverse_bits_to_double();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_0800083a;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_0800083a:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_value_0800071c",
            "entrypoint": "0x0800071c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800071c": "calculate_floating_point_value_0800071c",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "temp8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_to_double_0800088a": "reverse_bits_to_double",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800088a": {
            "additional_data": {
                "FUN_0800088a": {
                    "calculate_float": 1,
                    "calculate_float_bits": 1,
                    "calculate_product": 1,
                    "convert_float_to_double": 1,
                    "convert_to_double": 3,
                    "decode_float": 1,
                    "decompile_code": 1,
                    "extract_bits": 1,
                    "extract_float_from_bits": 1,
                    "extracted_data": 1,
                    "extracted_float_from_binary": 1,
                    "perform_calculation": 1,
                    "reverse_binary_operation": 2,
                    "reverse_binary_operations": 1,
                    "reverse_bits": 6,
                    "reverse_bits_to_double": 1,
                    "reverse_bitwise_operations": 1,
                    "reverse_func": 1
                },
                "bVar4": {
                    "check": 2,
                    "check_zero_condition": 1,
                    "flag": 4,
                    "is_zero": 21,
                    "temp_6": 1,
                    "tmp_6": 1
                },
                "in_r12": {
                    "bit5": 2,
                    "bit_length": 1,
                    "bit_value5": 1,
                    "constant": 1,
                    "constant1": 1,
                    "constant2": 2,
                    "constant_integer": 1,
                    "mask": 4,
                    "mask_bit": 1,
                    "mask_value": 1,
                    "max_sign_bit": 1,
                    "operand2": 1,
                    "output_float2": 1,
                    "register_12": 1,
                    "temp2": 3,
                    "temp4": 3,
                    "temp5": 2,
                    "temp_2": 1,
                    "temp_5": 1,
                    "tmp_5": 1
                },
                "param_1": {
                    "input1": 16,
                    "input_1": 4,
                    "input_a": 1,
                    "input_float1": 1,
                    "input_integer1": 1,
                    "input_param_1": 1,
                    "input_value1": 1,
                    "modified_input_value2": 1,
                    "number1": 1,
                    "sign": 1,
                    "significant_bits": 1,
                    "value": 1
                },
                "param_2": {
                    "exponent": 2,
                    "exponent_bits": 1,
                    "input2": 16,
                    "input_2": 4,
                    "input_b": 1,
                    "input_float2": 1,
                    "input_integer2": 1,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "modified_input_value3": 1,
                    "number2": 1
                },
                "param_3": {
                    "input3": 16,
                    "input_3": 4,
                    "input_c": 1,
                    "input_float3": 1,
                    "input_integer3": 1,
                    "input_param_3": 1,
                    "input_value3": 1,
                    "mantissa": 2,
                    "modified_input_value4": 1,
                    "number3": 1,
                    "significant_bits_2": 1
                },
                "param_4": {
                    "bits": 1,
                    "exponent_bits_2": 1,
                    "input4": 16,
                    "input_4": 4,
                    "input_d": 1,
                    "input_float4": 1,
                    "input_integer4": 1,
                    "input_param_4": 1,
                    "input_value4": 1,
                    "modified_input_value5": 1,
                    "number4": 1,
                    "sign": 1
                },
                "uVar1": {
                    "bit1": 10,
                    "bit_1": 2,
                    "bit_value1": 1,
                    "bitwise_check1": 1,
                    "bitwise_integer1": 1,
                    "shifted_bit1": 1,
                    "shifted_input1": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_1": 1,
                    "temp_3": 1,
                    "temp_value_1": 1,
                    "tmp_1": 1,
                    "u_var1": 1,
                    "value_bit": 1
                },
                "uVar2": {
                    "bit2": 5,
                    "bit3": 2,
                    "bit_2": 2,
                    "bit_value3": 1,
                    "bitwise_check3": 1,
                    "bitwise_integer2": 1,
                    "masked_bit": 2,
                    "masked_constant": 1,
                    "result_1": 1,
                    "shifted_bit2": 1,
                    "shifted_bits": 1,
                    "shifted_sign_bit": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp3": 3,
                    "temp4": 1,
                    "temp_3": 1,
                    "temp_value_2": 1,
                    "tmp_3": 1
                },
                "uVar3": {
                    "bit3": 5,
                    "bit4": 2,
                    "bit_3": 1,
                    "exponent_bits_copy": 1,
                    "exponent_copy": 1,
                    "modified_input_value": 1,
                    "output_float1": 1,
                    "result": 2,
                    "result_2": 1,
                    "shifted_input2": 1,
                    "temp2": 2,
                    "temp3": 3,
                    "temp4": 3,
                    "temp5": 1,
                    "temp_4": 1,
                    "temp_value_3": 1,
                    "temp_variable2": 1,
                    "tmp_4": 1,
                    "tmp_exponent": 1
                },
                "unaff_r4": {
                    "bit2": 2,
                    "bit4": 1,
                    "bit_value2": 1,
                    "bitwise_check2": 1,
                    "comparison_bit": 1,
                    "constant": 2,
                    "constant2": 1,
                    "input1": 1,
                    "operand1": 1,
                    "sign_bit": 1,
                    "significant_bits_copy": 1,
                    "temp1": 8,
                    "temp2": 2,
                    "temp_1": 1,
                    "temp_2": 1,
                    "temp_variable1": 1,
                    "temporary_value_1": 1,
                    "tmp_2": 1,
                    "unaff_r4": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0800071c"
            ],
            "code": "\nulonglong reverse_bits_to_double_0800088a(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint mask;\n  bool is_zero;\n  \n  bit2 = mask & input4 >> 0x14;\n  bit3 = input2;\n  if (temp1 != mask || bit2 != mask) {\n    if (temp1 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != mask)\n         ) {\nLAB_080006fc:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == mask) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c0:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_080006fc;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c0;\n    }\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_to_double_0800088a",
            "entrypoint": "0x0800088a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800088a": "reverse_bits_to_double_0800088a",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080008fc": {
            "additional_data": {
                "FUN_080008fc": {
                    "check_equal_params": 1,
                    "check_equality": 4,
                    "check_equality_and_comparison": 1,
                    "check_equality_and_order": 1,
                    "check_parameters": 9,
                    "check_parameters_equality": 2,
                    "check_parameters_equivalence": 1,
                    "check_params": 1,
                    "check_params_equal": 1,
                    "check_params_equality": 1,
                    "check_repeated_params": 1,
                    "compare_parameters": 2,
                    "compare_params": 1,
                    "compare_values": 2,
                    "determine_equality": 2
                },
                "bVar2": {
                    "are_inputs_zero": 2,
                    "are_parameters_zero": 1,
                    "are_values_equal": 1,
                    "are_values_zero": 1,
                    "check_condition1": 1,
                    "conditions_met": 1,
                    "has_zero_params": 1,
                    "is_all_zero": 1,
                    "is_equal": 3,
                    "is_same": 1,
                    "is_zero": 16,
                    "is_zero1": 2
                },
                "bVar3": {
                    "check_condition2": 1,
                    "condition_satisfied": 1,
                    "is_condition_satisfied": 1,
                    "is_greater_than_or_equal": 1,
                    "is_leq": 1,
                    "is_less": 1,
                    "is_less_or_equal": 5,
                    "is_negative": 11,
                    "is_negative_or_equal": 2,
                    "is_param4_smaller_or_equal_than_param2": 1,
                    "is_parameter_4_smaller_than_parameter_2": 1,
                    "is_result_negative": 1,
                    "is_result_non_negative": 1,
                    "is_second_condition_true": 1,
                    "is_zero2": 2
                },
                "i": {
                    "shifted_param2": 1
                },
                "j": {
                    "shifted_param4": 1
                },
                "param_1": {
                    "a": 1,
                    "first_param": 4,
                    "first_parameter": 1,
                    "input1": 1,
                    "input_1": 3,
                    "operand1": 1,
                    "user_input1": 1,
                    "value1": 17,
                    "value_1": 2
                },
                "param_2": {
                    "b": 1,
                    "input2": 1,
                    "input_2": 3,
                    "operand2": 1,
                    "second_param": 4,
                    "second_parameter": 1,
                    "user_input2": 1,
                    "value2": 17,
                    "value_2": 2
                },
                "param_3": {
                    "c": 1,
                    "input3": 1,
                    "input_3": 3,
                    "operand3": 1,
                    "third_param": 4,
                    "third_parameter": 1,
                    "user_input3": 1,
                    "value3": 17,
                    "value_3": 2
                },
                "param_4": {
                    "d": 1,
                    "fourth_param": 4,
                    "fourth_parameter": 1,
                    "input4": 1,
                    "input_4": 3,
                    "operand4": 1,
                    "shifted_param4": 1,
                    "user_input4": 1,
                    "value4": 16,
                    "value_4": 2
                },
                "return": {
                    "result": 1
                },
                "return_val": {
                    "return_value": 1
                },
                "uVar1": {
                    "param2_xor_param4": 1,
                    "param_difference": 1,
                    "result": 17,
                    "result_xor": 1,
                    "temp_result": 2,
                    "temp_var1": 1,
                    "value_xor": 1,
                    "xor_result": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_08000988"
            ],
            "code": "\nushifted_param2nt check_parameters_equality_080008fc(ushifted_param2nt value1,ushifted_param2nt value2,ushifted_param2nt value3,ushifted_param2nt value4)\n\n{\n  ushifted_param2nt result;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_param2f (((shifted_param2nt)(value2 << 1) >> 0x15 == -1 || (shifted_param2nt)(value4 << 1) >> 0x15 == -1) &&\n     ((((shifted_param2nt)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((shifted_param2nt)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  shifted_param2f (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  shifted_param2f (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  shifted_param2f (is_zero) {\n    is_zero = value1 == value3;\n  }\n  shifted_param2f (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    shifted_param2f (-1 < (shifted_param2nt)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (shifted_param2nt)result && value4 <= value2;\n    shifted_param2f (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (shifted_param2nt)value4 >> 0x1f;\n    shifted_param2f (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_parameters_equality_080008fc",
            "entrypoint": "0x080008fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080008fc": "check_parameters_equality_080008fc",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "i": "shifted_param2",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000978": {
            "additional_data": {
                "FUN_08000978": {
                    "check_equality": 1,
                    "compare_and_assign": 2,
                    "compare_and_return": 3,
                    "compare_double_values": 2,
                    "compare_float_values": 1,
                    "compare_floating_point": 1,
                    "compare_floating_point_numbers": 4,
                    "compare_floating_point_values": 4,
                    "compare_floats": 11,
                    "compare_values": 1,
                    "perform_comparison": 1
                },
                "FUN_08000988": {
                    "check_equality": 1,
                    "convert_to_unsigned_value": 1
                },
                "__aeabi_cdcmpeq": {
                    "compare_floats": 1
                },
                "param_1": {
                    "a": 1,
                    "arg1": 1,
                    "arg_1": 1,
                    "comparison_result": 4,
                    "first_float": 1,
                    "input_param1": 1,
                    "num1": 1,
                    "result": 14,
                    "undefined_param1": 1,
                    "unused": 1,
                    "value1": 2
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "b": 1,
                    "compare_value": 1,
                    "comparison_status": 1,
                    "dummy_param": 1,
                    "flag": 1,
                    "ignore": 1,
                    "ignored_param": 1,
                    "input_param2": 1,
                    "num2": 1,
                    "result_size": 1,
                    "second_float": 1,
                    "status": 7,
                    "temp": 1,
                    "undefined_param2": 1,
                    "unused": 2,
                    "unused1": 1,
                    "unused_param": 1,
                    "value2": 2
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "c": 1,
                    "compare_value1": 1,
                    "comparison_param1": 1,
                    "double_value1": 1,
                    "first_float": 1,
                    "float1": 3,
                    "float_a": 2,
                    "float_value1": 2,
                    "input_1": 1,
                    "num1": 2,
                    "num3": 1,
                    "operand_1": 1,
                    "target_value_1": 1,
                    "value1": 9,
                    "value3": 1,
                    "value_1": 1
                },
                "param_4": {
                    "arg4": 1,
                    "arg_4": 1,
                    "compare_value2": 1,
                    "comparison_param2": 1,
                    "d": 1,
                    "double_value2": 1,
                    "float2": 3,
                    "float_b": 2,
                    "float_value2": 2,
                    "input_2": 1,
                    "num2": 2,
                    "num4": 1,
                    "operand_2": 1,
                    "second_float": 1,
                    "target_value_2": 1,
                    "value2": 9,
                    "value4": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080009d4",
                "FUN_080009e8"
            ],
            "code": "\nvoid compare_floats_08000978(undefined4 result,undefined4 status,undefined4 value1,undefined4 value2)\n\n{\n  compare_floats_08000978(value1,value2,result,status);\n  return;\n}\n\n",
            "current_name": "compare_floats_08000978",
            "entrypoint": "0x08000978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000978": "compare_floats_08000978",
                "__aeabi_cdcmpeq": "compare_floats",
                "param_1": "result",
                "param_2": "status",
                "param_3": "value1",
                "param_4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000988": {
            "additional_data": {
                "FUN_080008fc": {
                    "calculate": 1,
                    "calculate_result": 4,
                    "combine_and_calculate": 1,
                    "combine_data": 1,
                    "combine_integers": 1,
                    "combine_numbers": 1,
                    "combine_uint": 1,
                    "combine_values": 1,
                    "compute_unsigned_integer": 1,
                    "convert_and_concatenate": 1,
                    "perform_arithmetic": 1,
                    "perform_arithmetic_operation": 2,
                    "perform_computation": 2,
                    "perform_operation": 4,
                    "sum_of_four_numbers": 1
                },
                "FUN_08000988": {
                    "calculate": 1,
                    "calculate_result": 3,
                    "convert_f2": 1,
                    "convert_float_to_int": 2,
                    "convert_float_to_undefined": 4,
                    "convert_float_to_undefined4": 1,
                    "convert_float_to_unsigned": 1,
                    "convert_to_float": 5,
                    "convert_to_undefined": 1,
                    "convert_to_undefined4": 1,
                    "convert_undefined_float_to_undefined_four": 1,
                    "convert_undefined_to4_bytes": 1,
                    "convert_undefined_to_unsigned": 1,
                    "convert_unsigned_to_float": 1,
                    "execute_operation": 1,
                    "process_data": 4,
                    "process_input": 1
                },
                "__nedf2": {
                    "convert_float": 1,
                    "convert_float_to_double": 1,
                    "helper_function": 1
                },
                "param_1": {
                    "a": 1,
                    "input": 4,
                    "input1": 1,
                    "input_data": 1,
                    "input_float": 1,
                    "input_value": 7,
                    "num1": 3,
                    "operand1": 2,
                    "param": 1,
                    "param1": 2,
                    "val1": 1,
                    "value": 2,
                    "value1": 4,
                    "value_1": 1
                },
                "param_2": {
                    "b": 1,
                    "input1": 1,
                    "input2": 1,
                    "num1": 2,
                    "num2": 3,
                    "operand2": 2,
                    "operand_1": 1,
                    "param2": 4,
                    "val2": 1,
                    "value1": 2,
                    "value2": 4,
                    "value_2": 1
                },
                "param_3": {
                    "c": 1,
                    "input2": 1,
                    "input3": 1,
                    "num2": 2,
                    "num3": 3,
                    "operand3": 2,
                    "operand_2": 1,
                    "param3": 4,
                    "val3": 1,
                    "value2": 2,
                    "value3": 4,
                    "value_3": 1
                },
                "param_4": {
                    "d": 1,
                    "input3": 1,
                    "input4": 1,
                    "num3": 2,
                    "num4": 3,
                    "operand4": 2,
                    "operand_3": 1,
                    "param4": 4,
                    "val4": 1,
                    "value3": 2,
                    "value4": 4,
                    "value_4": 1
                }
            },
            "called": [
                "FUN_080008fc"
            ],
            "calling": [
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_080009ac",
                "FUN_08000978"
            ],
            "code": "\nundefined4 convert_undefined_float_to_undefined_four_08000988(undefined4 input_value)\n\n{\n  convert_float();\n  return input_value;\n}\n\n",
            "current_name": "convert_undefined_float_to_undefined_four_08000988",
            "entrypoint": "0x08000988",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000988": "convert_undefined_float_to_undefined_four_08000988",
                "__nedf2": "convert_float",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000998": {
            "additional_data": {
                "FUN_08000988": {
                    "sub_function": 1
                },
                "FUN_08000998": {
                    "check_comparison_result": 3,
                    "check_condition": 8,
                    "check_equality": 1,
                    "check_if_non_zero": 1,
                    "check_if_not_zero": 6,
                    "check_neq_zero": 1,
                    "check_nonzero_value": 1,
                    "check_not_zero": 2,
                    "check_zero_compare": 1,
                    "check_zr_value": 1,
                    "compare_characters": 1,
                    "compare_non_null_character": 1,
                    "has_non_zero_value": 1,
                    "is_input_not_zero": 1,
                    "is_not_zero": 2
                },
                "in_ZR": {
                    "comparison_result": 5,
                    "condition_result": 2,
                    "input": 1,
                    "input_char": 4,
                    "input_character": 2,
                    "input_value": 1,
                    "input_zr": 1,
                    "is_not_zero": 3,
                    "is_zero": 1,
                    "result": 10,
                    "zr_value": 1
                },
                "param_1": {
                    "input_param": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_non_zero_08000998(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_non_zero_08000998",
            "entrypoint": "0x08000998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000998": "check_if_non_zero_08000998",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009ac": {
            "additional_data": {
                "FUN_08000988": {
                    "check_parameters": 1,
                    "modify_parameter": 1,
                    "perform_operation": 1,
                    "process_param_1": 1
                },
                "FUN_080009ac": {
                    "check_if_carry_flag_is_cleared": 1,
                    "check_if_char_is_null": 2,
                    "check_if_character_null": 1,
                    "check_if_cy_is_null": 3,
                    "check_if_cy_is_zero": 1,
                    "check_if_equal_to_null": 1,
                    "check_if_in_cy_is_zero": 1,
                    "check_if_input_is_null": 1,
                    "check_if_not_null": 1,
                    "check_if_null": 5,
                    "check_if_null_character": 1,
                    "check_if_string_is_empty": 1,
                    "check_if_zero": 1,
                    "check_input": 1,
                    "is_cy_null": 6,
                    "is_cy_zero": 1,
                    "is_in_cy_null": 1,
                    "is_null": 1,
                    "is_string_empty": 1
                },
                "__aeabi_cdcmpeq": {
                    "compare_cd": 1,
                    "compare_char": 1,
                    "compare_cy_with_zero": 1,
                    "compare_double_and_set_carry_flag": 1,
                    "compare_double_equality": 1,
                    "compare_input_with_zero": 1,
                    "compare_signs": 1,
                    "compare_strings": 1,
                    "compare_using_cdcmpeq": 1
                },
                "in_CY": {
                    "carry_flag_is_cleared": 1,
                    "character": 1,
                    "condition": 1,
                    "cy": 3,
                    "cy_value": 2,
                    "input_char": 10,
                    "input_character": 9,
                    "input_string": 1,
                    "input_value": 1,
                    "is_null": 1,
                    "is_zero": 1
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_cy_is_null_080009ac(void)\n\n{\n  char input_char;\n  \n  compare_signs();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_cy_is_null_080009ac",
            "entrypoint": "0x080009ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009ac": "check_if_cy_is_null_080009ac",
                "__aeabi_cdcmpeq": "compare_signs",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c0": {
            "additional_data": {
                "FUN_08000988": {
                    "perform_cdcmpeq_operation": 1,
                    "perform_comparison": 1,
                    "subtract_numbers": 1
                },
                "FUN_080009c0": {
                    "check_abi_parameters": 1,
                    "check_carry_and_zero": 1,
                    "check_carry_zero_condition": 1,
                    "check_cdcmpeq_result": 1,
                    "check_cdequal_zero": 1,
                    "check_condition": 3,
                    "check_eq_or_zero": 1,
                    "check_equal_conditions": 1,
                    "check_equal_or_zero": 1,
                    "check_equality": 7,
                    "check_equality_of_float": 1,
                    "check_for_equal_condition": 1,
                    "check_for_equality": 1,
                    "check_zero_and_carry": 1,
                    "check_zero_carry": 1,
                    "check_zero_condition": 2,
                    "check_zero_flag": 1,
                    "compare_and_return": 1,
                    "compare_condition": 1,
                    "is_carry_zero_or_result_zero": 1,
                    "is_carry_zero_or_zero": 1,
                    "is_cdcmpeq_result_false": 1
                },
                "in_CY": {
                    "carry": 1,
                    "carry_bit": 1,
                    "carry_flag": 16,
                    "is_carry": 5,
                    "is_carry_result": 1,
                    "is_carry_set": 3,
                    "is_condition_true": 1,
                    "is_equal": 1,
                    "zero_flag": 1
                },
                "in_ZR": {
                    "carry_zero": 1,
                    "is_result_zero": 1,
                    "is_zero": 5,
                    "is_zero_result": 6,
                    "zero": 1,
                    "zero_flag": 12,
                    "zero_result": 4
                }
            },
            "called": [
                "FUN_08000988"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nbool check_for_equality_080009c0(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cdcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_for_equality_080009c0",
            "entrypoint": "0x080009c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c0": "check_for_equality_080009c0",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009d4": {
            "additional_data": {
                "FUN_08000978": {
                    "compare_values": 1,
                    "perform_comparison": 2,
                    "perform_comparisons": 1,
                    "perform_computation": 1,
                    "process_data": 1
                },
                "FUN_080009d4": {
                    "check_abi_conditions": 1,
                    "check_abi_ordering": 1,
                    "check_cdr_cmple": 1,
                    "check_comparison_result": 2,
                    "check_condition": 10,
                    "check_conditions": 2,
                    "check_if_less_or_equal": 1,
                    "check_if_zero_or_negative": 1,
                    "check_less_or_equal": 2,
                    "check_order": 2,
                    "check_order_of_arguments": 1,
                    "check_zero_condition": 1,
                    "is_cdrcmple_false": 1,
                    "is_comparable": 1,
                    "is_comparison_result_valid": 1,
                    "is_condition_met": 1,
                    "is_greater_or_equal": 1,
                    "is_less_or_equal": 1
                },
                "in_CY": {
                    "carry_flag": 2,
                    "carry_set": 1,
                    "comparison_overflow": 1,
                    "condition_carry": 1,
                    "condition_failed": 1,
                    "condition_met": 1,
                    "is_carry": 11,
                    "is_carry_result": 1,
                    "is_carry_set": 3,
                    "is_comparison_result": 1,
                    "is_cy_set": 1,
                    "is_ge_ordered": 1,
                    "is_less_or_equal": 1,
                    "is_less_than_or_equal_to": 1,
                    "is_less_than_or_equal_to_zero": 1
                },
                "in_ZR": {
                    "condition_passed": 1,
                    "condition_zero": 1,
                    "condition_zero_result": 1,
                    "is_le_ordered": 1,
                    "is_zero": 15,
                    "is_zero_result": 4,
                    "is_zero_set": 1,
                    "is_zr_set": 1,
                    "result_of_comparison": 1,
                    "zero_flag": 1,
                    "zero_result": 1
                },
                "param_1": {
                    "arg1": 8,
                    "argument_1": 1,
                    "comparison_param_1": 1,
                    "first_param": 1,
                    "input_param_1": 1,
                    "param1": 1,
                    "undefined_param_1": 1,
                    "unused_param_1": 3,
                    "value_1": 1
                },
                "param_2": {
                    "arg2": 8,
                    "argument_2": 1,
                    "comparison_param_2": 1,
                    "input_param_2": 1,
                    "param2": 1,
                    "second_param": 1,
                    "undefined_param_2": 1,
                    "unused_param_2": 3,
                    "value_2": 1
                },
                "param_3": {
                    "arg3": 8,
                    "argument_3": 1,
                    "comparison_param_3": 1,
                    "param3": 1,
                    "third_param": 1,
                    "undefined_param_3": 1,
                    "unused_param_3": 3,
                    "value_3": 1
                },
                "param_4": {
                    "arg4": 8,
                    "argument_4": 1,
                    "comparison_param_4": 1,
                    "fourth_param": 1,
                    "input_param_3": 1,
                    "param4": 1,
                    "undefined_param_4": 1,
                    "unused_param_4": 3,
                    "value_4": 1
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nbool check_zero_condition_080009d4(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  __aeabi_cdrcmple();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "current_name": "check_zero_condition_080009d4",
            "entrypoint": "0x080009d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009d4": "check_zero_condition_080009d4",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009e8": {
            "additional_data": {
                "FUN_08000978": {
                    "process_data": 1
                },
                "FUN_080009e8": {
                    "check_for_null_terminated": 1,
                    "check_for_null_termination": 1,
                    "check_if_character_null": 1,
                    "check_if_empty": 3,
                    "check_if_in_cy_is_null": 1,
                    "check_if_input_is_empty": 2,
                    "check_if_null": 5,
                    "check_if_null_byte": 1,
                    "check_if_null_terminated": 1,
                    "check_if_null_terminator": 1,
                    "check_if_string_empty": 1,
                    "is_character_null": 1,
                    "is_equal_to_null": 1,
                    "is_in_cy_null": 1,
                    "is_input_empty": 3,
                    "is_null_character": 1,
                    "is_null_pointer": 1,
                    "is_null_terminated": 1,
                    "is_null_terminated_string": 1,
                    "is_null_terminator_present": 1,
                    "is_string_empty": 1,
                    "is_zero_check": 1
                },
                "__aeabi_cdrcmple": {
                    "compare_and_return_result": 1
                },
                "in_CY": {
                    "character": 3,
                    "input_char": 16,
                    "input_character": 11,
                    "is_null": 1
                },
                "param_1": {
                    "arg1": 1
                },
                "param_2": {
                    "arg2": 1
                },
                "param_3": {
                    "arg3": 1
                },
                "param_4": {
                    "arg4": 1
                }
            },
            "called": [
                "FUN_08000978"
            ],
            "calling": [
                "FUN_080059f0",
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nbool check_if_input_is_empty_080009e8(void)\n\n{\n  char input_char;\n  \n  compare_and_return_result();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_input_is_empty_080009e8",
            "entrypoint": "0x080009e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009e8": "check_if_input_is_empty_080009e8",
                "__aeabi_cdrcmple": "compare_and_return_result",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009fc": {
            "additional_data": {
                "FUN_080009fc": {
                    "calculate_float": 4,
                    "calculate_float32": 1,
                    "calculate_float_bits": 2,
                    "calculate_float_from_int": 1,
                    "calculate_float_from_integer": 1,
                    "calculate_float_from_u_int": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_bits": 1,
                    "calculate_floating_point_value": 2,
                    "calculate_precision_bits": 1,
                    "convert_float_to_fixed_point": 1,
                    "convert_float_to_hex": 1,
                    "convert_float_to_unsigned_int": 1,
                    "convert_floating_point_to_binary": 1,
                    "convert_to_float": 1,
                    "decode_float": 2,
                    "extracted_value": 1,
                    "reverse_bits": 1
                },
                "SCARRY4": {
                    "carry_overflow": 1,
                    "is_carry": 1,
                    "is_overflow": 1,
                    "is_unsigned_carry4": 1,
                    "signed_carry_check": 1,
                    "subtract_carry4": 1
                },
                "bVar4": {
                    "is_condition_met": 2,
                    "is_normal": 1,
                    "is_special_na_n": 1,
                    "is_zero": 27
                },
                "bVar5": {
                    "is_exponent_less_than_max": 1,
                    "is_in_range": 1,
                    "is_less_than": 4,
                    "is_less_than70000000": 2,
                    "is_less_than_max": 1,
                    "is_less_than_threshold": 9,
                    "is_lower": 1,
                    "is_normalized": 1,
                    "is_positive": 1,
                    "is_small": 3,
                    "is_small_enough": 1,
                    "is_small_exponent": 1,
                    "is_small_mantissa": 1,
                    "is_valid": 2,
                    "is_valid_exponent": 1,
                    "under_threshold": 1
                },
                "in_r12": {
                    "adjusted_mantissa2": 1,
                    "adjusted_result": 1,
                    "adjusted_value": 1,
                    "alternative_result": 1,
                    "alternative_value": 1,
                    "check_value": 1,
                    "comparison_value": 1,
                    "conditional_float_bits": 1,
                    "extra_value": 1,
                    "masked_plus": 1,
                    "normalized_shifted_bit_pattern": 1,
                    "result": 1,
                    "result2": 1,
                    "scaled_max_value": 1,
                    "shifted_value2": 1,
                    "temp": 1,
                    "temp3": 5,
                    "temp_bits": 1,
                    "temp_value": 5,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temporary_var": 1,
                    "temporary_variable": 1
                },
                "param_1": {
                    "exponent": 1,
                    "float_value": 3,
                    "input": 5,
                    "input1": 4,
                    "input_bits": 1,
                    "input_float": 1,
                    "input_int": 1,
                    "input_value": 5,
                    "input_value1": 1,
                    "integer_part": 1,
                    "num1": 1,
                    "number": 2,
                    "unsigned_int": 1,
                    "value": 2,
                    "value1": 2
                },
                "param_2": {
                    "bit_pattern": 1,
                    "bitwise_flag": 1,
                    "control_value": 1,
                    "exponent": 2,
                    "flags": 1,
                    "float_bits": 2,
                    "fractional_part": 1,
                    "input2": 4,
                    "input_exponent": 2,
                    "input_flags": 1,
                    "input_multiplier": 1,
                    "input_value2": 1,
                    "integer_bits": 1,
                    "mantissa": 1,
                    "mask": 4,
                    "modifier": 1,
                    "multiplier": 1,
                    "num2": 1,
                    "shift_amount": 1,
                    "sign": 1,
                    "value2": 2
                },
                "return": {
                    "result": 1
                },
                "uVar1": {
                    "converted_bits": 1,
                    "exponent": 2,
                    "final_result": 1,
                    "fixed_point_value": 1,
                    "output_bits": 1,
                    "output_value": 1,
                    "result": 23
                },
                "uVar2": {
                    "adjusted_mask": 1,
                    "double_float_bits": 1,
                    "double_value": 1,
                    "exponent_times_two": 2,
                    "fractional_part_times2": 1,
                    "input2_times2": 1,
                    "multiplied_value": 4,
                    "multiplier": 2,
                    "multiplier_times_two": 1,
                    "scaled_exponent": 1,
                    "scaled_integer": 1,
                    "scaled_mantissa": 1,
                    "shifted_bit_pattern": 1,
                    "shifted_exponent_twice": 1,
                    "shifted_mask": 2,
                    "shifted_value": 2,
                    "temp": 1,
                    "temp1": 5,
                    "temp_var1": 1,
                    "twice_float_bits": 1
                },
                "uVar3": {
                    "added_value": 1,
                    "adjusted_bits": 1,
                    "adjusted_exponent": 2,
                    "adjusted_mantissa": 1,
                    "adjusted_multiplier": 1,
                    "adjusted_value": 4,
                    "fractional_part_plus_constant": 1,
                    "modified_value": 1,
                    "normalized_bit_pattern": 1,
                    "offset": 1,
                    "result1": 1,
                    "scaled_bits": 1,
                    "shifted_exponent": 1,
                    "shifted_fraction": 1,
                    "shifted_mask_plus": 1,
                    "shifted_value": 2,
                    "sum_float_bits": 1,
                    "temp2": 5,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "updated_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_floating_point_value_080009fc(uint input,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp_value;\n  bool is_zero;\n  bool is_less_than_threshold;\n  \n  temp1 = input2 * 2;\n  is_less_than_threshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than_threshold) {\n    temp_value = temp1 + 0x8fe00000;\n    result = temp_value;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_threshold && temp2 >= 0x200000) {\n    is_zero = temp_value == 0x1fc00000;\n  }\n  if (((is_less_than_threshold || temp2 < 0x200000) || 0x1fc00000 < temp_value) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input | input2 << 0xc) != 0)) {\n        result 0x7fc00000;\n      }\n      result input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != carry_overflow(temp2,0x2e00000)) {\n      result input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input >> (temp1 & 0xff);\n    if (input << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input * 8);\n  if (input * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  result result;\n}\n\n",
            "current_name": "calculate_floating_point_value_080009fc",
            "entrypoint": "0x080009fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009fc": "calculate_floating_point_value_080009fc",
                "SCARRY4": "carry_overflow",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_threshold",
                "in_r12": "temp_value",
                "param_1": "input",
                "param_2": "input2",
                "return": "result",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa4": {
            "additional_data": {
                "FUN_08000aa4": {
                    "calculate": 2,
                    "calculate_division": 1,
                    "calculate_float": 5,
                    "calculate_floating_point": 5,
                    "calculate_leading_bit": 1,
                    "calculate_modified_float": 1,
                    "calculate_modified_int": 1,
                    "calculate_modified_value": 1,
                    "calculate_nearest_float": 1,
                    "calculate_new_value": 1,
                    "calculate_normalized_difference": 1,
                    "calculate_pseudo_float": 1,
                    "calculate_updated_value": 1,
                    "perform_arithmetic": 1,
                    "perform_calculation": 1,
                    "perform_floating_point_operation": 1,
                    "reverse_bits": 3,
                    "reverse_bitwise_operation": 2,
                    "reverse_bitwise_operations": 1
                },
                "bVar8": {
                    "check": 2,
                    "check_flag": 1,
                    "compare_result": 1,
                    "flag": 1,
                    "flag_check": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_difference_zero": 1,
                    "is_equal": 12,
                    "is_same_sign": 1,
                    "is_true": 7,
                    "is_zero": 2
                },
                "iVar1": {
                    "input1_shifted": 1,
                    "input_flag_shifted": 1,
                    "leading_bit_1": 1,
                    "left_shifted_float1": 1,
                    "msb_input1": 1,
                    "quotient": 1,
                    "shift_amount": 1,
                    "shift_right": 1,
                    "shift_right_amount1": 1,
                    "shift_value_1": 1,
                    "shifted_input": 2,
                    "shifted_input1": 7,
                    "shifted_input_1": 1,
                    "shifted_input_val1": 1,
                    "shifted_input_value_high": 1,
                    "shifted_num": 1,
                    "shifted_value1": 3,
                    "shifted_value_1": 1,
                    "shifted_x": 1,
                    "upper_bits1": 1
                },
                "iVar2": {
                    "input2_shifted": 1,
                    "input_flag_shifted2": 1,
                    "leading_bit_2": 1,
                    "left_shifted_float2": 1,
                    "msb_shifted_input2": 1,
                    "second_shift_right": 1,
                    "shift_right_amount2": 1,
                    "shift_value_2": 1,
                    "shifted_input2": 7,
                    "shifted_input_2": 1,
                    "shifted_input_flag_high": 1,
                    "shifted_input_val2": 1,
                    "shifted_key": 1,
                    "shifted_mask": 2,
                    "shifted_value": 1,
                    "shifted_value2": 3,
                    "shifted_value_2": 1,
                    "shifted_y": 1,
                    "unused": 1,
                    "upper_bits2": 1
                },
                "new_variable_name_1": {
                    "new_value": 1
                },
                "new_variable_name_2": {
                    "new_value2": 1
                },
                "param_1": {
                    "dividend": 1,
                    "float_value1": 1,
                    "input": 2,
                    "input1": 12,
                    "input_1": 2,
                    "input_float1": 2,
                    "input_num": 1,
                    "input_val1": 1,
                    "input_value": 3,
                    "input_value1": 2,
                    "numerator": 1,
                    "value": 1,
                    "value_1": 1,
                    "x": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "denominator": 1,
                    "difference": 1,
                    "divisor": 1,
                    "float_value2": 1,
                    "input2": 12,
                    "input_2": 2,
                    "input_flag": 2,
                    "input_float2": 2,
                    "input_val2": 1,
                    "input_value2": 2,
                    "key": 1,
                    "mask": 2,
                    "value_2": 1,
                    "y": 1
                },
                "param_3": {
                    "constant": 2,
                    "extra_param": 1,
                    "flag": 2,
                    "flags": 1,
                    "float_param3": 1,
                    "input3": 6,
                    "input_3": 1,
                    "input_flag": 1,
                    "input_val1": 1,
                    "input_value1": 1,
                    "input_value3": 1,
                    "offset": 1,
                    "param3": 1,
                    "some_value": 1,
                    "temp_value": 1,
                    "undefined_input": 1,
                    "unused": 4,
                    "unused_param": 1,
                    "value_3": 1,
                    "z": 1
                },
                "param_4": {
                    "another_value": 1,
                    "comparison_value": 1,
                    "flags": 1,
                    "float_param4": 1,
                    "input4": 6,
                    "input_4": 1,
                    "input_mask": 1,
                    "input_val2": 1,
                    "input_value2": 1,
                    "input_value4": 1,
                    "mask": 2,
                    "output": 2,
                    "output_flag": 1,
                    "output_num": 1,
                    "param4": 1,
                    "result": 5,
                    "shift_value": 1,
                    "unused": 1,
                    "value_4": 1,
                    "w": 1
                },
                "uVar15": {
                    "abs_result": 1
                },
                "uVar16": {
                    "abs_shifted_value": 1
                },
                "uVar17": {
                    "abs_shifted_input_value": 1
                },
                "uVar18": {
                    "shifted_input_flag_add": 1
                },
                "uVar19": {
                    "temp_shifted_input_flag_minus": 1
                },
                "uVar20": {
                    "shifted_input_flag_minus_8": 1
                },
                "uVar21": {
                    "temp_input_value": 1
                },
                "uVar22": {
                    "result": 1
                },
                "uVar23": {
                    "temp_abs_value": 1
                },
                "uVar24": {
                    "shifted_input_value": 1
                },
                "uVar25": {
                    "temp_shifted_input_value": 1
                },
                "uVar3": {
                    "abs_dividend": 1,
                    "bitwise_xor": 1,
                    "bitwise_xor_1": 1,
                    "flipped_input": 1,
                    "flipped_input2": 1,
                    "input1_normalized": 1,
                    "input_flag_xor": 1,
                    "inverse_input2": 1,
                    "masked_input2": 1,
                    "masked_num": 1,
                    "modified_input2": 2,
                    "modified_input_1": 1,
                    "modified_input_val2": 1,
                    "modified_param_2": 1,
                    "modified_value1": 1,
                    "output_value": 1,
                    "result1": 2,
                    "result_1": 1,
                    "shifted_input2_xor": 1,
                    "shifted_xor": 1,
                    "temp1": 3,
                    "temp_numerator": 1,
                    "temp_value_1": 1,
                    "temp_var1": 1,
                    "value_2_xor": 1,
                    "xor_result": 2
                },
                "uVar4": {
                    "abs_divisor": 1,
                    "abs_input1": 1,
                    "abs_shifted_input_flag": 1,
                    "bitwise_xor_2": 1,
                    "flipped_mask": 1,
                    "flipped_result": 1,
                    "input1_xor": 1,
                    "input2_normalized": 1,
                    "masked_input1": 1,
                    "masked_input_value": 1,
                    "masked_key": 1,
                    "modified_input1": 2,
                    "modified_input_2": 1,
                    "modified_input_val1": 1,
                    "modified_shifted_value": 1,
                    "modified_value2": 1,
                    "result2": 2,
                    "result_2": 1,
                    "shifted_result": 1,
                    "temp1": 2,
                    "temp2": 3,
                    "temp_denominator": 1,
                    "temp_value_2": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "value_2_shifted": 1
                },
                "uVar5": {
                    "abs_xor": 1,
                    "adjusted_dividend": 1,
                    "calculated_value1": 1,
                    "final_result": 1,
                    "input_shifted": 1,
                    "left_shifted_input1": 1,
                    "left_shifted_value": 1,
                    "left_shifted_x": 1,
                    "masked_output_value": 1,
                    "modified_input_value1": 1,
                    "modified_value3": 1,
                    "new_num": 1,
                    "output_value_1": 1,
                    "result": 1,
                    "result1": 3,
                    "rounded_numerator": 1,
                    "shifted_input_value": 1,
                    "shifted_result1": 1,
                    "temp1": 3,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_val1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "value_1_shifted": 1
                },
                "uVar6": {
                    "abs_difference": 1,
                    "added_value": 1,
                    "adjusted_quotient": 1,
                    "calculated_value2": 1,
                    "counter": 1,
                    "loop_counter": 2,
                    "modified_value4": 1,
                    "modified_value_1": 1,
                    "output_value_2": 1,
                    "result2": 2,
                    "shift_amount": 1,
                    "shift_amt": 1,
                    "shifted_sum": 2,
                    "temp2": 3,
                    "temp3": 3,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_calculation_1": 1,
                    "temp_val2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "updated_input1": 1,
                    "updated_result1": 1,
                    "updated_value": 1
                },
                "uVar7": {
                    "diff": 2,
                    "difference": 17,
                    "difference_result": 1,
                    "modified_value5": 1,
                    "output_value_3": 1,
                    "shift_difference": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_3": 1,
                    "temp_calculation_2": 1,
                    "temp_diff": 1,
                    "temp_value": 1,
                    "temp_var5": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004bd8"
            ],
            "code": "\nuint calculate_nearest_float_08000aa4(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  temp1 = input1 << 1;\n  is_equal = temp1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = temp1 == input4;\n  }\n  shifted_input1 = (int)temp1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp1 = temp1;\n      if (shifted_input1 == -1) {\n        temp1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = temp1;\n      }\n      is_equal = (temp1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = temp1 == temp1;\n      }\n      if (!is_equal) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  is_equal = difference != 0;\n  temp2 = temp1;\n  if (is_equal && temp1 <= input4) {\n    temp2 = temp1 + difference;\n  }\n  if (is_equal && temp1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && temp1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && temp1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (temp2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    temp1 = -temp1 - (uint)is_equal;\n  }\n  if (temp1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    temp1 = temp1 * 2 + (uint)(temp1 != 0);\n    temp1 = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      difference = LZCOUNT(temp1) - 8;\n      temp1 = temp1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        temp1 = temp1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (temp1 - difference) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    temp1 = temp2 - 1;\n    if (0xffffff < temp1) {\n      temp1 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = temp2;\n      if (0xfd < temp2) goto LAB_08000bde;\n    }\n  }\n  temp1 = temp1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "current_name": "calculate_nearest_float_08000aa4",
            "entrypoint": "0x08000aa4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa4": "calculate_nearest_float_08000aa4",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000aa8": {
            "additional_data": {
                "FUN_08000aa8": {
                    "apply_bitwise_operations": 1,
                    "calculate_float": 10,
                    "calculate_float_from_int": 1,
                    "calculate_float_result": 2,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_value": 1,
                    "calculate_fused_value": 1,
                    "calculate_magnitude": 1,
                    "perform_arithmetic": 1,
                    "perform_calculation": 1,
                    "reverse_bits": 3,
                    "reverse_math_operation": 1
                },
                "LZCOUNT": {
                    "leading_zero_bits_count": 1,
                    "leading_zero_count": 3,
                    "leading_zeros_count": 1
                },
                "bVar7": {
                    "check_condition": 1,
                    "condition": 2,
                    "condition_check": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_equal": 8,
                    "is_zero": 17
                },
                "calculateFloat": {
                    "calculate_normalized_float": 1
                },
                "iVar1": {
                    "bits_msb1": 1,
                    "dividend_shifted": 1,
                    "is_input1_negative": 1,
                    "left_shifted_x": 1,
                    "msb_input1": 1,
                    "result1": 1,
                    "shift1": 1,
                    "shift_amount": 2,
                    "shifted_by24_bits": 1,
                    "shifted_input1": 12,
                    "shifted_input1_sign": 1,
                    "shifted_input_1_signed_shifted_right_0x18": 1,
                    "shifted_input_a": 1,
                    "shifted_num1": 1,
                    "shifted_value1": 2,
                    "sign_bit1": 1,
                    "sign_shifted_input1": 1,
                    "upper_byte_float1": 1
                },
                "iVar2": {
                    "bits_msb2": 1,
                    "divisor_shifted": 1,
                    "integer": 1,
                    "is_input2_negative": 1,
                    "left_shifted_y": 1,
                    "msb_input2": 1,
                    "result2": 1,
                    "shift2": 1,
                    "shift_result": 1,
                    "shifted_by24_bits_divided_by2": 1,
                    "shifted_input2": 12,
                    "shifted_input2_sign": 1,
                    "shifted_input_2_signed_shifted_right_0x18": 1,
                    "shifted_input_b": 1,
                    "shifted_num2": 1,
                    "shifted_value2": 2,
                    "sign_bit2": 1,
                    "sign_shifted_input2": 1,
                    "upper_byte_float2": 1
                },
                "param_1": {
                    "dividend": 1,
                    "exponent1": 1,
                    "input1": 19,
                    "input_1": 2,
                    "input_a": 1,
                    "input_float1": 1,
                    "input_value1": 2,
                    "num1": 2,
                    "number1": 1,
                    "x": 1
                },
                "param_2": {
                    "divisor": 1,
                    "exponent2": 1,
                    "input2": 19,
                    "input_2": 2,
                    "input_b": 1,
                    "input_float2": 1,
                    "input_value2": 2,
                    "num2": 2,
                    "number2": 1,
                    "y": 1
                },
                "param_3": {
                    "flag": 1,
                    "flags": 1,
                    "fraction1": 1,
                    "input3": 15,
                    "input_3": 2,
                    "input_c": 1,
                    "input_value3": 2,
                    "param3": 2,
                    "round_mode": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "val1": 1,
                    "z": 1
                },
                "param_4": {
                    "divisor_shift": 1,
                    "fraction2": 1,
                    "input4": 15,
                    "input_4": 1,
                    "input_d": 1,
                    "input_value4": 2,
                    "num_bits_shifted": 1,
                    "output": 1,
                    "param4": 2,
                    "result": 2,
                    "unused": 1,
                    "unused_param2": 1,
                    "val2": 1,
                    "w": 1
                },
                "uVar3": {
                    "abs_num1": 1,
                    "converted_float1": 1,
                    "dividend_abs": 1,
                    "fraction2_shifted": 1,
                    "fraction_1": 1,
                    "input1_fraction": 1,
                    "mask1": 2,
                    "normalized_input1": 1,
                    "output": 1,
                    "res1": 1,
                    "result": 2,
                    "result1": 6,
                    "result_x": 1,
                    "shifted_input2": 2,
                    "shifted_input_2": 1,
                    "shifted_result": 1,
                    "shifted_val1_with_sign": 1,
                    "temp1": 1,
                    "temp_a": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "value1": 2
                },
                "uVar4": {
                    "abs_num2": 1,
                    "converted_float2": 1,
                    "divisor_abs": 1,
                    "exponent1_shifted": 1,
                    "fraction_2": 1,
                    "input1_modified": 1,
                    "input1_shifted": 1,
                    "mask2": 2,
                    "normalized_input2": 1,
                    "res2": 1,
                    "result2": 4,
                    "result_y": 1,
                    "shifted_input1": 4,
                    "shifted_input_1": 1,
                    "shifted_result": 1,
                    "shifted_result1": 1,
                    "shifted_val1": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp_b": 1,
                    "temp_var2": 1,
                    "value2": 2
                },
                "uVar5": {
                    "abs_diff": 1,
                    "absolute_value1": 1,
                    "counter": 1,
                    "dividend_zero": 1,
                    "input2_fraction": 1,
                    "iteration": 1,
                    "loop_counter": 2,
                    "mask3": 1,
                    "new_shifted_input1": 1,
                    "result1": 1,
                    "result3": 1,
                    "shift_amount": 2,
                    "shifted_divisor": 1,
                    "shifted_input2": 1,
                    "shifted_input_1_signed": 1,
                    "shifted_result2": 1,
                    "shifted_val2": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_c": 1,
                    "temp_result1": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "tmp1": 1,
                    "u_var5": 1,
                    "value3": 1
                },
                "uVar6": {
                    "diff": 1,
                    "difference": 16,
                    "divisor_diff": 1,
                    "mask4": 1,
                    "result2": 1,
                    "result4": 1,
                    "shifted_difference": 1,
                    "shifted_input_difference": 1,
                    "temp2": 2,
                    "temp4": 1,
                    "temp_d": 1,
                    "temp_result2": 1,
                    "temp_var4": 1,
                    "tmp2": 1,
                    "u_var6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nuint calculate_float_result_08000aa8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint shifted_input1;\n  uint temp1;\n  uint difference;\n  bool is_zero;\n  \n  shifted_input1 = input1 << 1;\n  is_zero = shifted_input1 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_input1 == input4;\n  }\n  shifted_input1 = (int)shifted_input1 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      shifted_input1 = input2;\n      if (shifted_input1 == -1) {\n        shifted_input1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = shifted_input1;\n      }\n      is_zero = (shifted_input1 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input1 == input2;\n      }\n      if (!is_zero) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      shifted_input1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        shifted_input1 = shifted_input1 | 0x80000000;\n      }\n      return shifted_input1;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000bde:\n    return input1 | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input1;\n  is_zero = difference != 0;\n  temp1 = shifted_input1;\n  if (is_zero && shifted_input1 <= input4) {\n    temp1 = shifted_input1 + difference;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && shifted_input1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < shifted_input1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    shifted_input1 = -shifted_input1 - (uint)is_zero;\n  }\n  if (shifted_input1 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(difference != 0);\n    difference = temp1 - 2;\n    if ((shifted_input1 & 0x800000) == 0) {\n      temp1 = leading_zero_count(shifted_input1) - 8;\n      shifted_input1 = shifted_input1 << (temp1 & 0xff);\n      if ((int)difference < (int)temp1) {\n        shifted_input1 = shifted_input1 >> (-(difference - temp1) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (difference - temp1) * 0x800000;\n      }\n      return shifted_input1 | input1;\n    }\n  }\n  else {\n    difference = temp1 - 1;\n    if (0xffffff < shifted_input1) {\n      difference = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp1;\n      if (0xfd < temp1) goto LAB_08000bde;\n    }\n  }\n  shifted_input1 = shifted_input1 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input1;\n}\n\n",
            "current_name": "calculate_float_result_08000aa8",
            "entrypoint": "0x08000aa8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000aa8": "calculate_float_result_08000aa8",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "shifted_input1",
                "uVar5": "temp1",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c08": {
            "additional_data": {
                "FUN_08000c08": {
                    "calculate_checksum": 1,
                    "calculate_hash": 2,
                    "calculate_modified_value": 2,
                    "calculate_new_value": 2,
                    "calculate_output": 2,
                    "calculate_result": 3,
                    "calculate_value": 4,
                    "compute_value": 1,
                    "count_bits": 2,
                    "count_exponent_bits": 1,
                    "decode_integer": 1,
                    "decode_number": 2,
                    "decode_uint": 1,
                    "extract_bits": 1,
                    "rearrange_bits": 1,
                    "reverse_bits": 2,
                    "reverse_shift_multiply": 1
                },
                "iVar3": {
                    "base_value": 3,
                    "constant": 5,
                    "constant_a": 1,
                    "constant_offset": 1,
                    "constant_value": 5,
                    "intermediate_result": 1,
                    "intermediate_value": 1,
                    "multiplier": 1,
                    "offset": 11,
                    "offset_value": 1,
                    "temp": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 7,
                    "input_number": 3,
                    "input_value": 19,
                    "number": 1
                },
                "param_1_shifted": {
                    "input_shifted": 1
                },
                "uVar": {
                    "result": 1
                },
                "uVar1": {
                    "bit_count": 1,
                    "count": 1,
                    "hash": 1,
                    "leading_zero_count": 2,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 18,
                    "leading_zeros_count": 1,
                    "num_bits": 1,
                    "num_leading_zeros": 1,
                    "result": 3,
                    "shift_count": 1
                },
                "uVar1_OR": {
                    "final_result": 1
                },
                "uVar1_after_shift": {
                    "shifted_value": 1
                },
                "uVar1_overflow": {
                    "leading_zeros_overflow": 1
                },
                "uVar1_plus": {
                    "leading_zeros_plus24": 1
                },
                "uVar1_present": {
                    "leading_zeros_greater_than7": 1
                },
                "uVar1_result": {
                    "leading_zeros_result": 1
                },
                "uVar1_result_shifted": {
                    "leading_zeros_result_shifted": 1
                },
                "uVar1_shift_minus": {
                    "shifted_number_minus31": 1
                },
                "uVar1_shifted": {
                    "leading_zeros_shifted": 1
                },
                "uVar1_shifted_plus_offset": {
                    "result1": 1
                },
                "uVar1_temp": {
                    "leading_zeros_temp": 1
                },
                "uVar2": {
                    "modified_input": 1,
                    "shift": 2,
                    "shift2": 1,
                    "shift_amount": 16,
                    "shift_count": 3,
                    "shift_dist": 1,
                    "shift_value": 3,
                    "shifted_count": 1,
                    "shifted_value": 3
                },
                "uVar2_AND": {
                    "masked_number": 1
                },
                "uVar2_AND_7FFFFFFF": {
                    "shifted_number_positive": 1
                },
                "uVar2_AND_7ff": {
                    "masked_number_greater_than15": 1
                },
                "uVar2_AND_f": {
                    "comparison_mask": 1
                },
                "uVar2_final": {
                    "shift_final": 1
                },
                "uVar2_final_middle": {
                    "shift_final_middle": 1
                },
                "uVar2_final_middle_overflow": {
                    "shift_final_middle_overflow": 1
                },
                "uVar2_final_overflow": {
                    "shift_final_overflow": 1
                },
                "uVar2_final_shifted": {
                    "shift_final_shifted": 1
                },
                "uVar2_masked": {
                    "masked_input": 1
                },
                "uVar2_masked_for_equality": {
                    "masked_value": 1
                },
                "uVar2_masked_for_equality_negated": {
                    "mask_negated": 1
                },
                "uVar2_masked_for_equality_shifted": {
                    "shifted_masked_value": 1
                },
                "uVar2_masked_for_equality_shifted_for_comparison": {
                    "comparison_value": 1
                },
                "uVar2_masked_plus_offset": {
                    "result2": 1
                },
                "uVar2_middle": {
                    "shift_middle": 1
                },
                "uVar2_overflow": {
                    "shift_overflow": 1
                },
                "uVar2_result": {
                    "shift_result": 1
                },
                "uVar2_result_overflow": {
                    "shift_result_overflow": 1
                },
                "uVar2_result_shifted": {
                    "shift_result_shifted": 1
                },
                "uVar2_shift": {
                    "shifted_number": 1
                },
                "uVar2_shifted": {
                    "shift_shifted": 1,
                    "shifted_input": 1
                },
                "uVar2_temp": {
                    "shift_temp": 1
                },
                "uVar3": {
                    "result": 1
                },
                "uVar4": {
                    "bit_mask": 1,
                    "carry": 2,
                    "carry_value": 1,
                    "check_value": 3,
                    "comparison_value": 2,
                    "condition": 1,
                    "condition_value": 1,
                    "mask": 8,
                    "mask_value": 1,
                    "masked_value": 4,
                    "max_value": 1,
                    "overflow": 1,
                    "temp": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "zero_flag": 1
                },
                "uVar4_equal": {
                    "comparison_value_equal_to_max_int": 1
                },
                "uVar5": {
                    "hash_value": 1,
                    "result": 4,
                    "shifted_value": 1,
                    "sign_extension": 1
                },
                "uVar6": {
                    "adjusted_value": 1,
                    "check_limit": 1,
                    "mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_modified_value_08000c08(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int offset;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  offset = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = offset + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = offset + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_modified_value_08000c08",
            "entrypoint": "0x08000c08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c08": "calculate_modified_value_08000c08",
                "iVar3": "offset",
                "param_1": "input_value",
                "uVar": "result",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c10": {
            "additional_data": {
                "0": {
                    "zero": 1
                },
                "FUN_08000c10": {
                    "bits_to_int": 1,
                    "bitwise_arithmetic": 1,
                    "bitwise_reverse": 1,
                    "calculate_modulus": 1,
                    "calculate_result": 1,
                    "calculate_shifted_value": 1,
                    "calculate_unsigned_division": 1,
                    "calculate_unsigned_value": 2,
                    "convert_unsigned_to_twos_complement": 1,
                    "count_bits": 1,
                    "count_bits_set": 2,
                    "count_leading_zeros": 6,
                    "decode_number": 1,
                    "decode_unsigned": 1,
                    "decode_unsigned_integer": 4,
                    "extract_bits": 1,
                    "get_unsigned_result": 1,
                    "reverse_bits": 4
                },
                "LZCOUNT": {
                    "builtin_function": 1,
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 1
                },
                "U": {
                    "result": 1
                },
                "iParam_1": {
                    "input_val": 1
                },
                "iVar4": {
                    "adjusted_value": 2,
                    "calculation_result": 1,
                    "factor": 1,
                    "modified_value": 1,
                    "result": 23,
                    "result_offset": 1,
                    "shifted_value": 1,
                    "signed_value": 1
                },
                "param_1": {
                    "input": 8,
                    "input_num": 4,
                    "input_number": 1,
                    "input_val": 1,
                    "input_value": 13,
                    "num": 2,
                    "unsigned_integer": 1,
                    "value": 1
                },
                "uParam_1": {
                    "input_val": 1
                },
                "uVar1": {
                    "bit_count": 1,
                    "count": 1,
                    "leading_zeroes": 6,
                    "leading_zeros": 22,
                    "temp_mask": 1
                },
                "uVar101": {
                    "shifted_value1": 1
                },
                "uVar111": {
                    "shifted_value2": 1
                },
                "uVar121": {
                    "shifted_value3": 1
                },
                "uVar1_2": {
                    "mask": 1
                },
                "uVar1_3": {
                    "mask": 1
                },
                "uVar1_temp": {
                    "temp": 1
                },
                "uVar2": {
                    "shift": 3,
                    "shift_amount": 26,
                    "shift_value": 1,
                    "temp_result": 1
                },
                "uVar222": {
                    "final_result": 1
                },
                "uVar2_2": {
                    "shift_amount": 1
                },
                "uVar2_3": {
                    "shift_amount": 1
                },
                "uVar2_4": {
                    "shift_amount": 1
                },
                "uVar2_5": {
                    "shift_amount": 1
                },
                "uVar3": {
                    "final_result": 1,
                    "is_negative": 3,
                    "negative_flag": 1,
                    "result": 1,
                    "sign": 3,
                    "sign_bit": 22
                },
                "uVar31": {
                    "mask1": 1
                },
                "uVar3_2": {
                    "temp": 1
                },
                "uVar3_3": {
                    "temp": 1
                },
                "uVar3_4": {
                    "temp": 1
                },
                "uVar3_5": {
                    "temp": 1
                },
                "uVar3_6": {
                    "temp": 1
                },
                "uVar3_7": {
                    "temp": 1
                },
                "uVar3_temp": {
                    "temp2": 1
                },
                "uVar3_temp_2": {
                    "temp3": 1
                },
                "uVar4": {
                    "temp": 1
                },
                "uVar41": {
                    "mask2": 1
                },
                "uVar5": {
                    "mask": 1,
                    "shift_mask": 1
                },
                "uVar51": {
                    "mask3": 1
                },
                "uVar6": {
                    "overflow_check": 1,
                    "shifted_input": 1
                },
                "uVar61": {
                    "mask4": 1
                },
                "uVar7": {
                    "bit_check": 1
                },
                "uVar71": {
                    "mask5": 1
                },
                "uVar8": {
                    "check_result": 1
                },
                "uVar81": {
                    "mask6": 1
                },
                "uVar9": {
                    "adjusted_result": 1
                },
                "uVar91": {
                    "mask7": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08004ae0",
                "FUN_080049cc"
            ],
            "code": "\nuint count_leading_zeros_08000c10(uint YLHJresultresultALYresult)\n\n{\n  uint resultFCMYQresultQDP;\n  uint shift_amount;\n  uint sign_bit;\n  int CXERIAresultPXQ;\n  \n  sign_bit = YLHJresultresultALYresult & 0x80000000;\n  if ((int)sign_bit < 0) {\n    YLHJresultresultALYresult = -YLHJresultresultALYresult;\n  }\n  if (YLHJresultresultALYresult == 0) {\n    return 0;\n  }\n  resultFCMYQresultQDP = count_leading_zeroes(YLHJresultresultALYresult);\n  shift_amount = resultFCMYQresultQDP - 8;\n  CXERIAresultPXQ = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < resultFCMYQresultQDP) {\n    resultFCMYQresultQDP = 0 << (shift_amount & 0xff);\n    sign_bit = CXERIAresultPXQ + (YLHJresultresultALYresult << (shift_amount & 0xff)) +\n            (0result >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < resultFCMYQresultQDP);\n    if (resultFCMYQresultQDP == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = YLHJresultresultALYresult << resultFCMYQresultQDP + 0x18;\n  sign_bit = CXERIAresultPXQ + ((YLHJresultresultALYresult >> (0x20 - (resultFCMYQresultQDP + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_leading_zeros_08000c10",
            "entrypoint": "0x08000c10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c10": "count_leading_zeros_08000c10",
                "LZCOUNT": "count_leading_zeroes",
                "U": "result",
                "iVar4": "result",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cb8": {
            "additional_data": {
                "FUN_08000cb8": {
                    "binary_arithmetic": 1,
                    "calculate_float": 7,
                    "calculate_float_value": 2,
                    "calculate_floating_point": 8,
                    "calculate_floating_point_value": 4,
                    "perform_calculation": 2,
                    "perform_float_operation": 1,
                    "process_numbers": 1,
                    "reverse_float": 1
                },
                "SBORROW4": {
                    "subtract_with_borrow": 1
                },
                "SCARRY4": {
                    "subtract_with_carry": 1
                },
                "bVar10": {
                    "borrow_flag": 1,
                    "carry_bit": 1,
                    "check2": 1,
                    "check_condition2": 1,
                    "condition2": 3,
                    "condition_2": 1,
                    "is_carry": 2,
                    "is_carry_flag_set": 1,
                    "is_equal_zero2": 1,
                    "is_negative": 13,
                    "is_negative1": 2,
                    "is_overflow": 1,
                    "is_s_borrow": 1,
                    "is_zero_shift2": 1,
                    "overflow": 1
                },
                "bVar9": {
                    "check1": 1,
                    "check_condition1": 1,
                    "condition": 1,
                    "condition1": 3,
                    "is_condition_met": 1,
                    "is_equal_zero1": 1,
                    "is_first_value_zero": 1,
                    "is_input1_msb_zero": 1,
                    "is_input1_zero": 1,
                    "is_negative2": 1,
                    "is_true": 1,
                    "is_zero": 10,
                    "is_zero1": 4,
                    "is_zero_check": 1,
                    "is_zero_or_all_ones": 1,
                    "is_zero_shift1": 1,
                    "is_zero_shifted_input1": 1
                },
                "iVar4": {
                    "add_result": 1,
                    "exponent_sum": 1,
                    "operand_sum": 1,
                    "shift_sum": 1,
                    "shifted_sum": 1,
                    "sum": 16,
                    "sum1": 1,
                    "sum_bits": 1,
                    "sum_exponents": 1,
                    "sum_of_bits25_to31": 1,
                    "sum_of_ms_bs": 1,
                    "sum_of_significands": 1,
                    "sum_of_signs": 1,
                    "sum_result": 1,
                    "sum_val": 1,
                    "temp1": 1
                },
                "iVar5": {
                    "add_result_adjusted": 1,
                    "diff": 4,
                    "diff_from127": 1,
                    "diff_val": 1,
                    "difference": 7,
                    "difference_of_bits25_to31": 1,
                    "exponent_diff": 1,
                    "msb_difference": 1,
                    "normalized_shift": 2,
                    "shift_count": 1,
                    "shifted_diff": 1,
                    "shifted_difference": 1,
                    "shifted_sum": 1,
                    "shifted_sum_of_signs": 1,
                    "sum_bits_adjusted": 1,
                    "sum_diff": 3,
                    "sum_minus_one": 1,
                    "temp2": 1,
                    "temp_sum": 1
                },
                "iVar7": {
                    "add_result_adjusted2": 1,
                    "carry_minus_one": 1,
                    "diff2": 1,
                    "diff_negative": 1,
                    "difference_shifted": 1,
                    "difference_temp": 1,
                    "float_difference_nr_bits": 1,
                    "loop_counter": 1,
                    "new_diff": 1,
                    "new_msb": 1,
                    "normalized_shift_inverse": 1,
                    "num2_sign_exponent": 1,
                    "offset": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_value_2": 1,
                    "shifted_diff2": 1,
                    "sum2": 1,
                    "sum_bits_adjusted_neg": 1,
                    "sum_diff2": 3,
                    "sum_diff_val": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_diff": 1,
                    "temp_difference": 1,
                    "temp_shift": 1,
                    "temp_shifted_sum": 1,
                    "temp_var": 1
                },
                "lVar1": {
                    "long_product": 1,
                    "long_result": 2,
                    "multiply_result": 1,
                    "product": 3,
                    "result": 2,
                    "temp_long_var": 1,
                    "temp_product": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var1": 1
                },
                "param_1": {
                    "bitwise1": 1,
                    "double_value1": 1,
                    "first_float": 1,
                    "first_value": 1,
                    "input1": 13,
                    "input_1": 2,
                    "input_a": 1,
                    "input_number1": 1,
                    "input_val1": 1,
                    "input_value1": 2,
                    "num1": 3,
                    "number1": 2,
                    "operand1": 1,
                    "value1": 1
                },
                "param_2": {
                    "bitwise2": 1,
                    "double_value2": 1,
                    "input2": 13,
                    "input_2": 2,
                    "input_b": 1,
                    "input_number2": 1,
                    "input_val2": 1,
                    "input_value2": 2,
                    "num2": 3,
                    "number2": 2,
                    "operand2": 1,
                    "second_float": 1,
                    "second_value": 1,
                    "value2": 1
                },
                "param_3": {
                    "flag": 2,
                    "flag1": 1,
                    "float_value": 1,
                    "input3": 8,
                    "input_3": 2,
                    "input_val3": 1,
                    "input_value3": 1,
                    "mask_a": 1,
                    "num3": 1,
                    "param3": 6,
                    "parameter3": 1,
                    "third_value": 1,
                    "undefined_param": 1,
                    "unknown_param": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "value3": 1
                },
                "param_4": {
                    "bitwise3": 1,
                    "flag2": 2,
                    "fourth_value": 1,
                    "input2_msb": 1,
                    "input4": 5,
                    "input_4": 2,
                    "input_val4": 1,
                    "input_value4": 1,
                    "int_value": 1,
                    "mask_b": 1,
                    "num4": 1,
                    "param4": 5,
                    "parameter4": 1,
                    "result": 1,
                    "shifted_bits2": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "unknown_param2": 1,
                    "unused2": 1,
                    "unused_param2": 1,
                    "value4": 1
                },
                "uVar2": {
                    "exponent2": 1,
                    "final_result": 1,
                    "float_bits": 1,
                    "float_result": 1,
                    "normalized_result": 1,
                    "param2_extr_value": 1,
                    "result": 18,
                    "result1": 3,
                    "result_float": 1,
                    "shifted_bits2": 1,
                    "temp3": 1,
                    "temp5": 1
                },
                "uVar3": {
                    "bits1": 1,
                    "byte1": 1,
                    "byte_result1": 1,
                    "exponent1": 1,
                    "first_float_sign": 1,
                    "first_value_shifted": 1,
                    "input1_byte": 1,
                    "input1_msb": 1,
                    "input1_significand": 1,
                    "input_value1_bit25_to31": 1,
                    "num1_sign_exponent": 1,
                    "operand1_sign": 1,
                    "param1_extr_value": 1,
                    "shift": 1,
                    "shift1": 1,
                    "shift_a": 1,
                    "shift_amount1": 1,
                    "shift_bits": 1,
                    "shift_val1": 1,
                    "shift_value_1": 1,
                    "shifted_bits1": 3,
                    "shifted_input1": 1,
                    "shifted_num1": 1,
                    "shifted_val1": 2,
                    "temp": 1,
                    "temp3": 1,
                    "temp_var2": 1,
                    "value1": 1
                },
                "uVar6": {
                    "mul_result": 3,
                    "multiplication_result": 1,
                    "multiplied_result": 3,
                    "multiplied_val": 1,
                    "product": 5,
                    "product1": 1,
                    "product_low": 3,
                    "result2": 2,
                    "result3": 1,
                    "shift_val2": 1,
                    "shifted_input1": 1,
                    "temp1": 1,
                    "temp6": 1,
                    "temp_result": 2,
                    "temp_result1": 1,
                    "temporary_result": 1,
                    "uint_result": 1
                },
                "uVar8": {
                    "input2_modified": 1,
                    "modified_result": 1,
                    "modified_value": 1,
                    "new_value": 1,
                    "num1_sign_product_high": 1,
                    "operand1": 1,
                    "result": 2,
                    "result1": 1,
                    "result2": 2,
                    "result3": 1,
                    "shift_amount2": 1,
                    "shifted_input2": 1,
                    "shifted_result": 1,
                    "shifted_val2": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_float": 1,
                    "temp_result": 4,
                    "temp_result2": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temporary_value": 1,
                    "xored_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint calculate_floating_point_value_08000cb8(uint input1,uint input2,undefined4 input3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint shifted_bits1;\n  int sum;\n  int difference;\n  uint product;\n  int sum_diff2;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_bits1 = input1 >> 0x17 & 0xff;\n  is_zero = shifted_bits1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_bits1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (shifted_bits1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((shifted_bits1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e08;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = shifted_bits1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      shifted_bits1 = shifted_bits1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shifted_bits1 + param4;\n  temp_result = input1 ^ input2;\n  shifted_bits1 = input1 << 9;\n  is_zero = shifted_bits1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (shifted_bits1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = subtract_with_borrow(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    sum_diff2 = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = subtract_with_borrow(0xff,difference);\n      sum_diff2 = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && sum_diff2 < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && sum_diff2 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = subtract_with_borrow(difference,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    shifted_bits1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(shifted_bits1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = subtract_with_borrow(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    shifted_bits1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)shifted_bits1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != subtract_with_carry(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == subtract_with_carry(temp_result,0x19)) {\n      shifted_bits1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      shifted_bits1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shifted_bits1 >> 1) + (uint)((byte)shifted_bits1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        shifted_bits1 = shifted_bits1 & ~(temp_result >> 0x1f);\n      }\n      return shifted_bits1;\n    }\n    return result;\n  }\nLAB_08000e08:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_value_08000cb8",
            "entrypoint": "0x08000cb8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cb8": "calculate_floating_point_value_08000cb8",
                "SBORROW4": "subtract_with_borrow",
                "SCARRY4": "subtract_with_carry",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "sum_diff2",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "shifted_bits1",
                "uVar6": "product",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e20": {
            "additional_data": {
                "FUN_08000e20": {
                    "arithmetic_operation": 1,
                    "calculate_float": 11,
                    "calculate_floating_point": 9,
                    "calculate_floating_point_value": 2,
                    "convert_float_to_uint": 1,
                    "float_to_binary": 1,
                    "float_to_uint": 1,
                    "normalize_float": 1,
                    "reverse_float": 2
                },
                "SBORROW4": {
                    "is_overflow_error": 1
                },
                "SCARRY4": {
                    "is_borrow_error": 1
                },
                "bVar7": {
                    "check": 1,
                    "check_condition": 2,
                    "check_zero": 1,
                    "compare_result": 1,
                    "condition": 2,
                    "condition1": 6,
                    "condition_1": 1,
                    "flag1": 6,
                    "flag_1": 1,
                    "is_equal": 1,
                    "is_zero": 9
                },
                "bVar8": {
                    "carry": 1,
                    "carry_bit": 1,
                    "check1": 1,
                    "check_overflow": 2,
                    "compare_result": 1,
                    "condition2": 6,
                    "condition_2": 2,
                    "flag2": 6,
                    "flag_2": 1,
                    "is_carry": 1,
                    "is_carry_error": 1,
                    "is_equal1": 1,
                    "is_min_value": 1,
                    "is_negative": 1,
                    "is_one": 1,
                    "is_overflow": 2,
                    "is_sum_zero": 1,
                    "overflow_condition": 1
                },
                "bVar9": {
                    "carry": 1,
                    "carry_condition": 1,
                    "check2": 1,
                    "check_carry": 1,
                    "check_underflow": 1,
                    "condition3": 6,
                    "condition_3": 2,
                    "flag3": 6,
                    "flag_3": 1,
                    "is_borrow": 2,
                    "is_carry": 1,
                    "is_equal2": 1,
                    "is_overflow": 1,
                    "is_signed": 1,
                    "is_underflow": 2,
                    "overflow": 1,
                    "overflow_bit": 1,
                    "overflow_check": 1
                },
                "iVar3": {
                    "byte_difference": 1,
                    "diff": 3,
                    "diff_exponents": 1,
                    "difference": 7,
                    "exp_diff": 1,
                    "exponent": 1,
                    "exponent_diff": 4,
                    "exponent_difference": 5,
                    "index": 1,
                    "integer_var1": 1,
                    "temp3": 3,
                    "temp_3": 1,
                    "temp_var3": 1,
                    "temp_variable3": 1
                },
                "iVar5": {
                    "adjusted_exponent": 2,
                    "adjusted_exponent_plus127": 1,
                    "diff_temp": 1,
                    "exponent_sum": 1,
                    "integer_var2": 1,
                    "new_exponent": 2,
                    "normalized_difference": 1,
                    "normalized_exp": 1,
                    "shift_count_temp": 1,
                    "step": 1,
                    "sum": 2,
                    "sum_after_addition": 1,
                    "sum_exponent": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_5": 1,
                    "temp_exponent": 1,
                    "temp_int": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var_2": 1,
                    "temp_variable5": 1
                },
                "param_1": {
                    "first_float": 1,
                    "first_value": 1,
                    "float1": 4,
                    "float_1": 1,
                    "floating_point1": 1,
                    "input1": 11,
                    "input_1": 1,
                    "input_a": 1,
                    "input_float": 1,
                    "input_value1": 1,
                    "mantissa_1": 1,
                    "operand1": 1,
                    "value1": 4,
                    "value_1": 1,
                    "value_a": 1
                },
                "param_2": {
                    "float2": 4,
                    "float_2": 1,
                    "floating_point2": 1,
                    "input2": 11,
                    "input_2": 1,
                    "input_b": 1,
                    "input_value2": 1,
                    "mantissa_2": 1,
                    "operand2": 1,
                    "other_float": 1,
                    "second_float": 1,
                    "second_value": 1,
                    "value2": 4,
                    "value_2": 1,
                    "value_b": 1
                },
                "param_3": {
                    "constant": 1,
                    "constant1": 1,
                    "flags": 1,
                    "ignored": 1,
                    "input3": 2,
                    "input_c": 1,
                    "operand1_sign": 1,
                    "param3": 9,
                    "precision": 1,
                    "rounded": 1,
                    "sign_bit": 1,
                    "undefined": 1,
                    "undefined_param": 1,
                    "unknown": 1,
                    "unused": 2,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "value3": 1,
                    "var3": 1,
                    "var_3": 1
                },
                "param_4": {
                    "bitwise_shift": 1,
                    "constant2": 1,
                    "exponent": 2,
                    "exponent_bits": 1,
                    "float3": 2,
                    "ignored": 1,
                    "input3": 2,
                    "input4": 2,
                    "input_3": 1,
                    "input_d": 1,
                    "mask_value": 1,
                    "operand2_sign": 1,
                    "other_value": 1,
                    "param4": 5,
                    "precision": 1,
                    "rounding": 1,
                    "second_byte": 1,
                    "undefined_param2": 1,
                    "unused": 1,
                    "value3": 1,
                    "value4": 1,
                    "var4": 1,
                    "var_4": 1
                },
                "uVar1": {
                    "bit_mask": 1,
                    "bit_mask1": 1,
                    "converted_float1": 1,
                    "dividend": 1,
                    "divisor": 2,
                    "exponent": 1,
                    "flag1": 1,
                    "fraction1": 1,
                    "mantissa1": 1,
                    "mantissa_1_9": 1,
                    "normalized_value1": 1,
                    "operand1_normalized": 1,
                    "quotient": 1,
                    "remainder": 1,
                    "result1": 1,
                    "shifted_bits1": 1,
                    "shifted_input2": 2,
                    "temp1": 6,
                    "temp_1": 2,
                    "temp_var1": 1,
                    "temp_variable1": 1,
                    "u_var1": 1,
                    "unsigned_var1": 1
                },
                "uVar2": {
                    "bit_mask2": 1,
                    "converted_float2": 1,
                    "divisor": 1,
                    "exp_float1": 1,
                    "exponent1": 6,
                    "exponent_a": 2,
                    "exponent_temp": 1,
                    "first_byte": 1,
                    "flag2": 1,
                    "mantissa_2_9": 1,
                    "normalized_value2": 1,
                    "operand2_normalized": 1,
                    "shifted_bits2": 1,
                    "shifted_input1": 2,
                    "temp2": 5,
                    "temp_2": 2,
                    "temp_var2": 1,
                    "temp_variable2": 1,
                    "unsigned_var2": 1
                },
                "uVar3": {
                    "temp1": 1
                },
                "uVar4": {
                    "adjusted_exponent": 1,
                    "carry": 1,
                    "exp_float2": 1,
                    "exponent2": 2,
                    "exponent_shift": 1,
                    "exponent_sum": 1,
                    "mantissa2": 1,
                    "operand1_mantissa": 1,
                    "result2": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "sum": 3,
                    "temp": 1,
                    "temp1": 2,
                    "temp3": 2,
                    "temp4": 3,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_float1": 1,
                    "temp_var": 2,
                    "temp_var4": 1,
                    "temp_variable4": 1,
                    "unsigned_var4": 1
                },
                "uVar5": {
                    "temp2": 1
                },
                "uVar6": {
                    "result": 22,
                    "result_mantissa": 1,
                    "temp6": 3,
                    "temp_6": 1,
                    "temp_float2": 1,
                    "temp_var6": 1,
                    "temp_variable6": 1,
                    "unsigned_var6": 1
                },
                "uVar7": {
                    "temp3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080049cc",
                "FUN_08004d78"
            ],
            "code": "\nuint calculate_floating_point_value_08000e20(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint exponent1;\n  int difference;\n  uint sum;\n  int temp5;\n  uint result;\n  bool is_zero;\n  bool flag2;\n  bool condition3;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (exponent1 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_08000e16:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000dcc:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e16;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = exponent1 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          exponent1 = exponent1 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e38;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000dcc;\n        goto LAB_08000e16;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e38:\n    difference = exponent1 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = is_borrow_error(difference,0x7f);\n      temp5 = difference + 0x7f;\n      is_zero = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && is_zero == condition3) {\n        condition3 = is_overflow_error(0xff,temp5);\n        is_zero = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && is_zero == condition3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!flag2 && is_zero == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      exponent1 = 0;\n      flag2 = is_overflow_error(temp5,1);\n      sum = difference + 0x7e;\n      is_zero = sum == 0;\n      result = sum;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      exponent1 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= exponent1;\n      if (!is_zero) {\n        exponent1 = exponent1 << 1;\n      }\n      sum = difference + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= exponent1) {\n          exponent1 = exponent1 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= exponent1;\n        if (is_zero) {\n          exponent1 = exponent1 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= exponent1;\n        if (is_zero) {\n          exponent1 = exponent1 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= exponent1;\n        if (is_zero) {\n          exponent1 = exponent1 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        exponent1 = exponent1 * 0x10;\n        is_zero = exponent1 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      flag2 = is_overflow_error(sum,0xfd);\n      is_zero = sum == 0xfd;\n      result = sum - 0xfd;\n      if (sum < 0xfe) {\n        input1 = input1 + sum * 0x800000 + (uint)(temp1 <= exponent1);\n        if (exponent1 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != flag2) {\n      is_zero = (int)(sum + 0x19) < 0;\n      if (sum == 0xffffffe7 || is_zero != is_borrow_error(sum,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (sum == 0xffffffe7 || is_zero != is_borrow_error(sum,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-sum & 0xff);\n      sum = input1 << (sum + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((exponent1 | sum << 1) == 0) {\n        result = result & ~(sum >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_value_08000e20",
            "entrypoint": "0x08000e20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e20": "calculate_floating_point_value_08000e20",
                "SBORROW4": "is_overflow_error",
                "SCARRY4": "is_borrow_error",
                "bVar7": "is_zero",
                "bVar8": "flag2",
                "bVar9": "condition3",
                "iVar3": "difference",
                "iVar5": "temp5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "exponent1",
                "uVar4": "sum",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f68": {
            "additional_data": {
                "FUN_08000f68": {
                    "calculate_abs_diff": 1,
                    "calculate_absolute_difference": 1,
                    "calculate_parity": 1,
                    "calculate_result": 7,
                    "calculate_sign_and_shift": 1,
                    "calculate_unsigned_carry": 1,
                    "calculate_unsigned_integer": 1,
                    "check_integer_overflow": 1,
                    "check_overflow": 10,
                    "check_overflow_and_bounds": 1,
                    "check_overflow_and_sign": 1,
                    "multiplication_and_comparison": 1,
                    "multiply_and_check_validity": 1,
                    "multiply_and_compare": 3
                },
                "bVar1": {
                    "is_combined_negative": 2,
                    "is_negative": 24,
                    "is_negative_result": 4,
                    "is_positive": 1
                },
                "bVar5": {
                    "is_combined_zero": 3,
                    "is_zero": 24,
                    "is_zero_result": 4
                },
                "param_1": {
                    "dividend": 1,
                    "first_number": 1,
                    "input1": 5,
                    "input_1": 17,
                    "input_a": 1,
                    "input_value1": 1,
                    "multiplicand": 1,
                    "operand1": 1,
                    "result": 2,
                    "value1": 1
                },
                "param_1_doubled": {
                    "input1_doubled": 1
                },
                "param_2": {
                    "divisor": 1,
                    "input2": 5,
                    "input_2": 17,
                    "input_b": 1,
                    "input_value2": 1,
                    "mask": 1,
                    "multiplier": 1,
                    "operand2": 1,
                    "result": 1,
                    "second_number": 1,
                    "value2": 1
                },
                "param_2_doubled": {
                    "input2_doubled": 1
                },
                "return": {
                    "result": 4
                },
                "return_value": {
                    "result": 1
                },
                "uVar2": {
                    "a_doubled": 1,
                    "double_dividend": 1,
                    "double_first_number": 1,
                    "double_input1": 1,
                    "double_input_1": 4,
                    "doubled_input_1": 1,
                    "doubled_value1": 1,
                    "input1_doubled": 2,
                    "input1_multiplied_by_two": 1,
                    "input_1_double": 1,
                    "input_1_doubled": 4,
                    "input_1_multiplied": 1,
                    "input_1_times_2": 4,
                    "multiplied_input1": 2,
                    "multiplied_input_1": 1,
                    "operand1_doubled": 1,
                    "param_1_double": 1,
                    "result1": 1,
                    "shifted_input_1": 1,
                    "value1_doubled": 1
                },
                "uVar3": {
                    "b_doubled": 1,
                    "double_divisor": 1,
                    "double_input2": 1,
                    "double_input_2": 4,
                    "double_second_number": 1,
                    "doubled_input_2": 1,
                    "doubled_value2": 1,
                    "input2_doubled": 2,
                    "input2_multiplied_by_two": 1,
                    "input_2_double": 1,
                    "input_2_doubled": 4,
                    "input_2_multiplied": 1,
                    "input_2_times_2": 4,
                    "multiplied_input2": 2,
                    "multiplied_input_2": 1,
                    "operand2_doubled": 1,
                    "param_2_double": 1,
                    "result2": 1,
                    "shifted_input_2": 1,
                    "value2_doubled": 1
                },
                "uVar4": {
                    "bitwise_or_result": 1,
                    "combined": 3,
                    "combined_input": 1,
                    "combined_input_masked": 1,
                    "combined_inputs": 13,
                    "combined_operands": 1,
                    "combined_params": 1,
                    "combined_result": 3,
                    "combined_value": 1,
                    "combined_values": 2,
                    "merged_inputs": 1,
                    "or_result": 1,
                    "result": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08000fd0"
            ],
            "code": "\nuint check_integer_overflow_08000f68(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_integer_overflow_08000f68",
            "entrypoint": "0x08000f68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f68": "check_integer_overflow_08000f68",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "input_1_doubled",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fc8": {
            "additional_data": {
                "FUN_08000fc8": {
                    "compare_and_return": 3,
                    "compare_float_values": 1,
                    "compare_floating_point_numbers": 1,
                    "compare_floats": 24,
                    "compare_numbers": 1,
                    "compare_values": 1
                },
                "__aeabi_cfcmpeq": {
                    "compare_floats_helper": 2
                },
                "param_1": {
                    "first_float": 6,
                    "first_number": 1,
                    "first_value": 1,
                    "float1": 9,
                    "num1": 1,
                    "value1": 13
                },
                "param_2": {
                    "float2": 9,
                    "num2": 1,
                    "second_float": 6,
                    "second_number": 1,
                    "second_value": 1,
                    "value2": 13
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08001030"
            ],
            "code": "\nvoid compare_floats_08000fc8(undefined4 value1,undefined4 value2)\n\n{\n  compare_floats_08000fc8_helper(value2,value1);\n  return;\n}\n\n",
            "current_name": "compare_floats_08000fc8",
            "entrypoint": "0x08000fc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000fc8": "compare_floats_08000fc8",
                "__aeabi_cfcmpeq": "compare_floats_helper",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000fd0": {
            "additional_data": {
                "CONCAT44": {
                    "": 1,
                    "concatenate44": 2,
                    "concatenate_four_bytes": 1
                },
                "FUN_08000f68": {
                    "perform_comparison": 1,
                    "perform_unsigned_integer_operation": 1
                },
                "FUN_08000fd0": {
                    "combine_float_values": 1,
                    "combine_params": 1,
                    "concat_param": 1,
                    "concat_params": 2,
                    "concatenate_and_compare": 4,
                    "concatenate_and_convert_to64_bits": 1,
                    "concatenate_integers": 1,
                    "concatenate_param": 2,
                    "concatenate_parameters": 5,
                    "concatenate_params": 11,
                    "concatenate_uint32_to_uint64": 1,
                    "concatenate_values": 1
                },
                "__cmpsf2": {
                    "": 1,
                    "compare_floating_point_numbers": 1,
                    "compare_floats": 4,
                    "do_comparison": 1
                },
                "param_1": {
                    "first_param": 7,
                    "first_parameter": 3,
                    "float_value1": 1,
                    "input1": 8,
                    "input_1": 1,
                    "input_param1": 1,
                    "input_parameter1": 1,
                    "lower32_bits": 1,
                    "num1": 1,
                    "param1": 1,
                    "value1": 6
                },
                "param_2": {
                    "float_value2": 1,
                    "input2": 8,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_parameter2": 1,
                    "num2": 1,
                    "param2": 1,
                    "second_param": 7,
                    "second_parameter": 3,
                    "upper32_bits": 1,
                    "value2": 6
                }
            },
            "called": [
                "FUN_08000f68"
            ],
            "calling": [
                "FUN_08000fc8",
                "FUN_08000ff4"
            ],
            "code": "\nundefined8 concatenate_params_08000fd0(undefined4 input1,undefined4 input2)\n\n{\n  compare_floats();\n  return concatenate44(input2,input1);\n}\n\n",
            "current_name": "concatenate_params_08000fd0",
            "entrypoint": "0x08000fd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate44",
                "FUN_08000fd0": "concatenate_params_08000fd0",
                "__cmpsf2": "compare_floats",
                "param_1": "input1",
                "param_2": "input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ff4": {
            "additional_data": {
                "FUN_08000fd0": {
                    "compare_and_return": 1
                },
                "FUN_08000ff4": {
                    "check_for_null": 1,
                    "check_if_char_is_null": 2,
                    "check_if_char_not_zero": 1,
                    "check_if_character_is_null": 2,
                    "check_if_cy_flag_is_set": 1,
                    "check_if_cy_is_null": 3,
                    "check_if_in_cy_is_null": 2,
                    "check_if_input_is_empty": 1,
                    "check_if_null": 2,
                    "check_if_null_character": 1,
                    "check_if_null_character_present": 1,
                    "check_if_zero": 1,
                    "check_null_terminated": 1,
                    "is_char_null": 1,
                    "is_cy_null": 2,
                    "is_cy_zero": 4,
                    "is_incomplete_string": 1,
                    "is_input_empty": 1,
                    "is_input_null": 1,
                    "is_null_terminated": 1,
                    "is_string_empty": 1
                },
                "__aeabi_cfcmpeq": {
                    "compare_char_to_null": 1,
                    "compare_floats": 1
                },
                "in_CY": {
                    "character": 2,
                    "character_input": 1,
                    "cy": 2,
                    "cy_check_result": 1,
                    "cy_flag": 1,
                    "cy_value": 1,
                    "input_char": 13,
                    "input_character": 7,
                    "input_cy": 1,
                    "is_null_char": 1
                },
                "param_1": {
                    "operand1": 1,
                    "unused_param1": 1
                },
                "param_2": {
                    "operand2": 1,
                    "unused_param2": 1
                }
            },
            "called": [
                "FUN_08000fd0"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool check_if_in_cy_is_null_08000ff4(void)\n\n{\n  char input_char;\n  \n  compare_char_to_null();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_in_cy_is_null_08000ff4",
            "entrypoint": "0x08000ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ff4": "check_if_in_cy_is_null_08000ff4",
                "__aeabi_cfcmpeq": "compare_char_to_null",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001030": {
            "additional_data": {
                "FUN_08000fc8": {
                    "function_call": 1,
                    "process_data": 1
                },
                "FUN_08001030": {
                    "check_end_of_string": 1,
                    "check_if_char_is_null": 1,
                    "check_if_empty": 1,
                    "check_if_input_is_empty": 1,
                    "check_if_input_is_null": 3,
                    "check_if_null": 5,
                    "check_if_null_character": 1,
                    "check_if_null_terminated": 1,
                    "check_if_null_terminator": 1,
                    "check_null_terminated_string": 1,
                    "is_c_included": 1,
                    "is_char_null": 2,
                    "is_cy_null": 2,
                    "is_empty": 1,
                    "is_in_cy_null": 1,
                    "is_null_byte": 1,
                    "is_null_char_present": 1,
                    "is_null_character": 2,
                    "is_null_terminated": 2,
                    "is_null_terminator": 1,
                    "is_zero": 1
                },
                "__aeabi_cfrcmple": {
                    "compare_floating_point_numbers": 1
                },
                "in_CY": {
                    "character": 2,
                    "input_char": 10,
                    "input_character": 17,
                    "is_null": 2
                }
            },
            "called": [
                "FUN_08000fc8"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nbool check_if_input_is_null_08001030(void)\n\n{\n  char input_character;\n  \n  compare_floating_point_numbers();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_input_is_null_08001030",
            "entrypoint": "0x08001030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001030": "check_if_input_is_null_08001030",
                "__aeabi_cfrcmple": "compare_floating_point_numbers",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001044": {
            "additional_data": {
                "0x18": {
                    "shift_amount": 1
                },
                "0x7f000000": {
                    "max_threshold": 1
                },
                "0x80000000": {
                    "mask_negative_bit": 1
                },
                "0x9e": {
                    "value_subtraction_constant": 1
                },
                "0xff": {
                    "mask_lower_byte": 1
                },
                "0xffffff9f": {
                    "check_value": 1
                },
                "FUN_08001044": {
                    "binary_shift_reverse": 1,
                    "bitwise_shift_function": 1,
                    "bitwise_shift_operation": 1,
                    "calculate_shift": 1,
                    "calculate_shift_value": 1,
                    "calculate_shifted_number": 1,
                    "calculate_shifted_value": 2,
                    "convert_to_positive": 1,
                    "decode_and_shift": 1,
                    "decode_number": 1,
                    "decode_parameter": 1,
                    "decode_uint": 1,
                    "decode_unsigned_int": 1,
                    "decode_unsigned_integer": 2,
                    "decode_unsigned_number": 1,
                    "decode_value": 1,
                    "extract_and_shift_bits": 1,
                    "extract_bits": 1,
                    "extract_bits_from_value": 1,
                    "extracted_value": 1,
                    "process_input": 1,
                    "process_value": 1,
                    "reverse_and_shift": 1,
                    "reverse_binary_number": 1,
                    "reverse_bits": 1,
                    "reverse_calculation": 1,
                    "reverse_integer_bits": 1,
                    "validate_input": 1
                },
                "param_1": {
                    "input": 7,
                    "input_number": 3,
                    "input_value": 15,
                    "number": 2,
                    "unsigned_number": 1,
                    "value": 3
                },
                "uVar1": {
                    "calculation_result": 1,
                    "result": 5,
                    "shift": 1,
                    "shift_amount": 17,
                    "shift_count": 2,
                    "shift_value": 2,
                    "shifted_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nuint decode_unsigned_int_08001044(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "decode_unsigned_int_08001044",
            "entrypoint": "0x08001044",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001044": "decode_unsigned_int_08001044",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001084": {
            "additional_data": {
                "FUN_08001084": {
                    "copy_and_extend_memory": 1,
                    "copy_and_pad_data": 1,
                    "copy_bytes": 1,
                    "copy_data": 3,
                    "copy_memory": 24,
                    "copy_memory_block": 1
                },
                "LAB_08001108": {
                    "copy_remaining_data": 1,
                    "copy_unaligned": 1
                },
                "LOOP_08001108": {
                    "loop_condition2": 1
                },
                "bVar6": {
                    "bytes_left": 1,
                    "condition": 1,
                    "continue_loop": 1,
                    "flag": 2,
                    "is_looping": 3,
                    "is_more_remaining": 1,
                    "is_not_zero": 1,
                    "is_remainder": 1,
                    "is_remaining": 3,
                    "is_remaining_bytes": 1,
                    "is_remaining_length_negative": 1,
                    "is_remaining_length_valid": 1,
                    "is_remaining_size": 1,
                    "is_remaining_size_greater_than16": 1,
                    "is_remaining_size_positive": 2,
                    "is_size_greater_than_three": 1,
                    "is_size_more_than3": 1,
                    "is_unrolled": 1,
                    "loop_condition": 4,
                    "loop_condition1": 1,
                    "should_continue": 1,
                    "unroll_flag": 1
                },
                "bVar7": {
                    "is_size_remainder_greater_than_fifteen": 1
                },
                "param_1": {
                    "dest": 9,
                    "destination": 22
                },
                "param_2": {
                    "source": 22,
                    "src": 9
                },
                "param_3": {
                    "length": 6,
                    "num_bytes": 2,
                    "size": 23
                },
                "puVar1": {
                    "dest_iterator2": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 25,
                    "dst_ptr": 3
                },
                "puVar2": {
                    "dest": 2,
                    "dest_cur": 1,
                    "dest_end": 4,
                    "dest_end_ptr": 2,
                    "dest_iter": 3,
                    "dest_iterator": 1,
                    "dest_next_ptr": 1,
                    "dest_ptr_aligned": 2,
                    "dest_ptr_copy": 1,
                    "dest_ptr_end": 1,
                    "dest_ptr_iter": 1,
                    "dest_ptr_next": 1,
                    "dest_ptr_temp": 1,
                    "dst_byte_ptr": 1,
                    "dst_end_ptr": 1,
                    "source_ptr": 1,
                    "src_pointer": 1,
                    "src_ptr": 6
                },
                "puVar3": {
                    "dest_end_ptr": 2,
                    "dest_pointer2": 1,
                    "dest_ptr_temp": 1,
                    "source_iter": 1,
                    "src": 2,
                    "src_byte_ptr": 1,
                    "src_cur": 1,
                    "src_end": 1,
                    "src_iter": 2,
                    "src_iterator2": 1,
                    "src_ptr": 14,
                    "temp_dest_ptr": 1,
                    "temp_ptr": 3
                },
                "uVar4": {
                    "bytes_remaining": 1,
                    "length_remaining": 1,
                    "loop_counter": 1,
                    "remainder_size": 1,
                    "remaining_bytes": 1,
                    "remaining_length": 5,
                    "remaining_size": 18,
                    "size_minus16": 1,
                    "size_remainder": 1,
                    "temp_size": 1
                },
                "uVar5": {
                    "adjusted_length": 1,
                    "bytes_copied": 1,
                    "bytes_remaining": 1,
                    "copy_size": 3,
                    "inner_loop_count": 1,
                    "inner_loop_size": 1,
                    "length_aligned": 1,
                    "limit": 1,
                    "loop_count": 2,
                    "loop_counter": 1,
                    "loop_size": 1,
                    "reduced_size": 1,
                    "remaining_length_minus4": 1,
                    "remaining_length_temp": 1,
                    "remaining_size": 1,
                    "remaining_size2": 2,
                    "remaining_size_aligned": 1,
                    "remaining_size_minus4": 1,
                    "remaining_size_temp": 1,
                    "temp_length": 1,
                    "temp_size": 1,
                    "temp_size2": 1,
                    "unroll_count": 1,
                    "unrolled_bytes": 1,
                    "unrolled_size": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080097cc",
                "FUN_08009120"
            ],
            "code": "\nundefined4 * copy_and_extend_memory_08001084(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint unrolled_size;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      unrolled_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = unrolled_size != 0;\n          unrolled_size = unrolled_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto copy_unaligned;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      unrolled_size = 4 - ((uint)destination & 3);\n      size = size - unrolled_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((unrolled_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  unrolled_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < unrolled_size;\n      unrolled_size = unrolled_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\ncopy_unaligned:\n  if (unrolled_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((unrolled_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((unrolled_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_and_extend_memory_08001084",
            "entrypoint": "0x08001084",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001084": "copy_and_extend_memory_08001084",
                "LAB_08001108": "copy_unaligned",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "unrolled_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001170": {
            "additional_data": {
                "FUN_08001170": {
                    "check_conditions": 4,
                    "check_input_validity": 2,
                    "check_inputs": 1,
                    "check_parameters": 11,
                    "check_parameters_compliance": 1,
                    "check_parameters_valid": 1,
                    "check_parameters_validity": 1,
                    "check_params": 5,
                    "check_params_validity": 1,
                    "check_valid_parameters": 1,
                    "check_valid_params": 1,
                    "is_valid_parameters": 1,
                    "is_valid_params": 1
                },
                "param_1": {
                    "data_1": 1,
                    "first_param": 2,
                    "input1": 7,
                    "input_1": 5,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "input_value_1": 1,
                    "param1": 2,
                    "value1": 9,
                    "value_1": 2
                },
                "param_2": {
                    "data_2": 1,
                    "input2": 7,
                    "input_2": 5,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "input_value_2": 1,
                    "param2": 2,
                    "second_param": 2,
                    "shifted_value1": 1,
                    "value2": 8,
                    "value_2": 2
                },
                "param_3": {
                    "data_3": 1,
                    "input3": 7,
                    "input_3": 5,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "input_value_3": 1,
                    "param3": 2,
                    "third_param": 2,
                    "value2": 1,
                    "value3": 8,
                    "value_3": 2
                },
                "param_4": {
                    "data_4": 1,
                    "fourth_param": 2,
                    "input4": 7,
                    "input_4": 5,
                    "input_param_4": 1,
                    "input_parameter_4": 1,
                    "input_value_4": 1,
                    "param4": 2,
                    "shifted_value2": 1,
                    "value4": 8,
                    "value_4": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 check_parameters_valid_08001170(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_valid_08001170",
            "entrypoint": "0x08001170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001170": "check_parameters_valid_08001170",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800119c": {
            "additional_data": {
                "FUN_0800119c": {
                    "calculate_inverse": 1,
                    "calculate_result": 9,
                    "calculate_shift": 1,
                    "calculate_shifted_result": 1,
                    "calculate_unsigned_division": 1,
                    "calculate_value": 2,
                    "convert_integer": 1,
                    "evaluate_expression": 1,
                    "fixed_point_division": 1,
                    "process_parameters": 1,
                    "reverse_and_limit": 1,
                    "reverse_and_scale": 1,
                    "reverse_bits": 3,
                    "reverse_computation": 1,
                    "reverse_integer": 1,
                    "signed_int_divide": 1,
                    "unsigned_integer_manipulator": 1
                },
                "iVar2": {
                    "adjusted_value": 2,
                    "calculation": 1,
                    "calculation_result": 1,
                    "computed_value": 2,
                    "modified_input2": 2,
                    "modified_value": 2,
                    "multiplied_value": 3,
                    "new_value": 1,
                    "offset": 2,
                    "result2": 1,
                    "result_2": 1,
                    "scaled_divisor": 1,
                    "scaled_offset": 1,
                    "shift_value2": 1,
                    "shifted_multiplier": 1,
                    "shifted_value": 2,
                    "temp": 2,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_value_1": 1,
                    "temp_var2": 1
                },
                "param_1": {
                    "dividend": 3,
                    "input1": 5,
                    "input_1": 2,
                    "input_param": 1,
                    "input_value": 6,
                    "input_value1": 9,
                    "input_value_1": 4,
                    "original_value": 1
                },
                "param_2": {
                    "bit_position": 1,
                    "divisor": 3,
                    "input2": 4,
                    "input_2": 2,
                    "input_value2": 8,
                    "input_value_2": 3,
                    "masked_value": 1,
                    "modified_input_value2": 1,
                    "modified_input_value_2": 1,
                    "multiplier": 4,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "shifted_value": 1
                },
                "uVar1": {
                    "computed_value": 1,
                    "final_result": 1,
                    "quotient": 2,
                    "result": 9,
                    "result1": 1,
                    "result3": 1,
                    "reversed_value": 1,
                    "scaled_result": 1,
                    "scaled_value": 1,
                    "shift_value1": 1,
                    "shifted_bits": 1,
                    "shifted_input2": 1,
                    "shifted_value": 5,
                    "shifted_value1": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_result": 1,
                    "temp_var1": 1
                },
                "uVar2": {
                    "result": 1
                },
                "uVar3": {
                    "adjusted_bits": 1,
                    "adjusted_value": 1,
                    "adjustment_factor": 1,
                    "calculated_value": 1,
                    "calculation_result2": 1,
                    "comparison_value": 1,
                    "count": 1,
                    "difference": 1,
                    "negated_offset": 1,
                    "negative_offset": 1,
                    "offset": 1,
                    "remainder": 1,
                    "result": 1,
                    "result2": 1,
                    "result3": 1,
                    "shift_amount": 2,
                    "shift_count": 1,
                    "shift_value3": 1,
                    "shifted_result": 2,
                    "shifted_value2": 1,
                    "subtracted_value": 1,
                    "subtraction_result": 1,
                    "temp3": 2,
                    "temp_result": 1,
                    "temp_result_2": 1,
                    "temp_value": 1,
                    "temp_value_2": 1,
                    "temp_var3": 1
                },
                "uVar4": {
                    "bit_shifted_result": 1,
                    "temp4": 1
                },
                "uVar5": {
                    "final_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_08005e9c"
            ],
            "code": "\nuint calculate_shifted_result_0800119c(uint input_value1,uint input_value2)\n\n{\n  uint result;\n  int multiplied_value;\n  uint shifted_result;\n  \n  multiplied_value = input_value2 * 2 + 0x200000;\n  if (input_value2 * 2 < 0xffe00000) {\n    if (-1 < multiplied_value) {\n      return 0;\n    }\n    result = multiplied_value >> 0x15;\n    shifted_result = -result - 0x3e1;\n    if (result < 0xfffffc20 && shifted_result != 0) {\n      result = (input_value2 << 0xb | 0x80000000 | input_value1 >> 0x15) >> (shifted_result & 0xff);\n      if ((input_value2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      return result;\n    }\n  }\n  else if ((input_value1 | input_value2 << 0xc) != 0) {\n    return 0;\n  }\n  input_value2 = input_value2 & 0x80000000;\n  if (input_value2 == 0) {\n    input_value2 = 0x7fffffff;\n  }\n  return input_value2;\n}\n\n",
            "current_name": "calculate_shifted_result_0800119c",
            "entrypoint": "0x0800119c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800119c": "calculate_shifted_result_0800119c",
                "iVar2": "multiplied_value",
                "param_1": "input_value1",
                "param_2": "input_value2",
                "uVar1": "result",
                "uVar3": "shifted_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011ec": {
            "additional_data": {
                "FUN_080011ec": {
                    "calculate_dividend": 1,
                    "calculate_division_result": 1,
                    "calculate_result": 21,
                    "divide_and_concat": 3,
                    "divide_and_concatenate": 1,
                    "divide_and_conquer": 1,
                    "divide_and_return": 1,
                    "extract_value": 1
                },
                "F_080011ec": {
                    "division_or_concatenation": 1
                },
                "__udivmoddi4": {
                    "calculate_quotient_modulo": 1
                },
                "param_1": {
                    "dividend": 6,
                    "first_param": 1,
                    "input1": 7,
                    "input_1": 8,
                    "input_param1": 1,
                    "input_value_1": 1,
                    "num1": 3,
                    "value1": 2,
                    "value_1": 2
                },
                "param_2": {
                    "divisor": 6,
                    "input2": 7,
                    "input_2": 8,
                    "input_param2": 1,
                    "input_value_2": 1,
                    "num2": 3,
                    "second_param": 1,
                    "value2": 2,
                    "value_2": 2
                },
                "param_3": {
                    "condition1": 2,
                    "divisor1": 1,
                    "flag1": 2,
                    "input3": 3,
                    "input_3": 6,
                    "input_param3": 1,
                    "input_value_3": 1,
                    "num3": 1,
                    "param3": 1,
                    "param_3": 1,
                    "quotient": 2,
                    "rem": 1,
                    "remainder": 3,
                    "remainder_dividend": 1,
                    "third_param": 1,
                    "value3": 2,
                    "value_3": 2
                },
                "param_4": {
                    "condition2": 2,
                    "divisor2": 1,
                    "flag2": 2,
                    "fourth_param": 1,
                    "input4": 3,
                    "input_4": 6,
                    "input_param4": 1,
                    "input_value_4": 1,
                    "num4": 1,
                    "param4": 1,
                    "param_4": 1,
                    "quo": 1,
                    "quotient": 3,
                    "remainder": 2,
                    "remainder_divisor": 1,
                    "value4": 2,
                    "value_4": 2
                },
                "uVar1": {
                    "result": 22
                }
            },
            "called": [
                "FUN_0800121c"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_division_result_080011ec(int input_1,int input_2,int input_3,int input_4)\n\n{\n  undefined8 result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_2 = -1;\n      input_1 = -1;\n    }\n    return CONCAT44(input_2,input_1);\n  }\n  result = calculate_quotient_modulo();\n  return result;\n}\n\n",
            "current_name": "calculate_division_result_080011ec",
            "entrypoint": "0x080011ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080011ec": "calculate_division_result_080011ec",
                "__udivmoddi4": "calculate_quotient_modulo",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800121c": {
            "additional_data": {
                "CARRY4": {
                    "carry4": 1,
                    "check_carry": 1
                },
                "FUN_0800121c": {
                    "calculate_division": 2,
                    "calculate_division_and_remainder": 1,
                    "calculate_division_remainder": 3,
                    "calculate_quotient_and_remainder": 2,
                    "calculate_remainder": 5,
                    "calculate_remainder_and_quotient": 1,
                    "calculate_remainder_quotient": 1,
                    "compute_division": 2,
                    "divide_and_remainder": 3,
                    "integer_division": 1,
                    "perform_division": 5,
                    "perform_division_and_store_result": 1,
                    "perform_division_with_remainder": 1,
                    "perform_unsigned_division": 1,
                    "unsigned_multiply": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1,
                    "leading_zeros_count": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jump_table": 1,
                    "jumptable": 1,
                    "unrecovered_jump_table": 1
                },
                "bVar13": {
                    "carry": 5,
                    "carry_flag": 18,
                    "is_carry": 3,
                    "is_overflow": 1
                },
                "iVar5": {
                    "bit_count": 2,
                    "bit_shift": 1,
                    "lz_count": 1,
                    "num_of_shifts": 1,
                    "num_shifts": 1,
                    "shift": 2,
                    "shift_amount": 7,
                    "shift_amt": 2,
                    "shift_bits": 1,
                    "shift_count": 8,
                    "u_var14": 1
                },
                "param_1": {
                    "dividend": 29,
                    "num1": 1
                },
                "param_2": {
                    "dividend_first_half": 1,
                    "dividend_high": 7,
                    "dividend_low": 3,
                    "dividend_lower": 2,
                    "dividend_lower_bits": 1,
                    "dividend_lower_half": 1,
                    "dividend_remainder": 3,
                    "dividend_remainder_1": 1,
                    "dividend_upper": 1,
                    "divisor": 7,
                    "num1": 1,
                    "num2": 1,
                    "remainder1": 1
                },
                "param_3": {
                    "bit_mask": 1,
                    "dividend": 1,
                    "dividend_high": 1,
                    "divisor": 19,
                    "divisor1": 1,
                    "divisor_upper": 1,
                    "num2": 1,
                    "quotient": 5
                },
                "param_4": {
                    "dividend_remainder_2": 1,
                    "divisor": 2,
                    "divisor2": 1,
                    "divisor_for_remainder": 1,
                    "divisor_high": 7,
                    "divisor_low": 2,
                    "divisor_lower": 1,
                    "divisor_lower_bits": 1,
                    "divisor_lower_half": 1,
                    "divisor_remainder": 3,
                    "divisor_upper": 1,
                    "operand": 1,
                    "quotient": 1,
                    "remainder": 5,
                    "remainder_high": 1,
                    "shift_amount": 1
                },
                "param_5": {
                    "quotient": 5,
                    "quotient_and_remainder": 4,
                    "remainder": 10,
                    "remainder_low": 1,
                    "remainder_pointer": 1,
                    "remainder_ptr": 3,
                    "result": 4,
                    "result_array": 1
                },
                "puVar9": {
                    "pointer": 1,
                    "quotient_pointer": 1,
                    "quotient_result": 1
                },
                "uVar1": {
                    "combined_dividend_and_divisor": 1,
                    "dividend_extended": 1,
                    "dividend_low": 1,
                    "dividend_product": 1,
                    "dividing_result": 1,
                    "multiplication_result": 1,
                    "partial_quotient": 2,
                    "product": 2,
                    "product_high": 2,
                    "quotient": 2,
                    "quotient_low": 3,
                    "quotient_product": 1,
                    "result": 1,
                    "temp": 4,
                    "temp1": 1,
                    "temp64": 1,
                    "temp_product": 1,
                    "temp_rem": 1,
                    "temp_remainder": 1,
                    "temp_result": 1,
                    "temp_value": 1
                },
                "uVar10": {
                    "dividend_quotient_1": 1,
                    "divisor_quotient": 1,
                    "quotient3": 2,
                    "quotient_dividend_low": 1,
                    "quotient_divisor_part1": 1,
                    "quotient_factor_1": 1,
                    "quotient_low": 1,
                    "quotient_low1": 1,
                    "quotient_mid": 1,
                    "quotient_part1": 1,
                    "quotient_remainder_first_half": 1,
                    "quotient_upper": 1,
                    "remainder_high": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp7": 1,
                    "temp_5": 1,
                    "temp_dividend": 1,
                    "temp_product_high": 1,
                    "temp_quotient": 3,
                    "temp_quotient2": 1,
                    "temp_remainder": 1,
                    "temp_result": 1,
                    "temp_var_3": 1,
                    "tmp_quotient": 1,
                    "u_var10": 2
                },
                "uVar11": {
                    "divider_high": 1,
                    "divisor1_multiplier": 1,
                    "divisor_low": 1,
                    "divisor_lower": 1,
                    "divisor_mid": 1,
                    "divisor_multiplier2": 1,
                    "divisor_part1": 1,
                    "divisor_quotient_1": 1,
                    "divisor_upper": 1,
                    "divisor_upper_normalized": 1,
                    "multiplier": 1,
                    "multiplier1": 1,
                    "num2_copy": 1,
                    "product_low": 1,
                    "quotient_1_divisor": 1,
                    "quotient_divisor_part2": 1,
                    "quotient_factor_2": 1,
                    "quotient_multiplier": 1,
                    "quotient_part2": 1,
                    "shift_count": 1,
                    "temp1_high": 1,
                    "temp5": 1,
                    "temp8": 1,
                    "temp_divisor": 1,
                    "temp_remainder": 1,
                    "temp_var_4": 1,
                    "tmp_product_1": 1,
                    "u_var11": 3
                },
                "uVar12": {
                    "dividend_quotient_2": 1,
                    "divisor_part2": 1,
                    "mul_result": 1,
                    "multiplier2": 1,
                    "partial_quotient2": 1,
                    "product_high": 1,
                    "quotient_2_divisor": 1,
                    "quotient_dividend_high": 1,
                    "quotient_factor_3": 1,
                    "quotient_remainder": 1,
                    "quotient_remainder_temp": 1,
                    "remainder_divisor_part1": 1,
                    "remainder_low": 1,
                    "result3": 1,
                    "temp2": 1,
                    "temp2_low": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp9": 1,
                    "temp_divisor": 1,
                    "temp_product": 1,
                    "temp_quotient_product": 1,
                    "temp_remainder": 1,
                    "temp_remainder2": 1,
                    "temp_value_mid": 1,
                    "temp_var_5": 1,
                    "tmp_product_2": 1,
                    "u_var12": 2
                },
                "uVar13": {
                    "divisor_quotient_2": 1,
                    "remainder_divisor_part2": 1,
                    "temp10": 1,
                    "temp_divisor": 1,
                    "u_var13": 1
                },
                "uVar14": {
                    "new_value": 1,
                    "result": 15,
                    "return_val": 1,
                    "return_value": 9,
                    "temp11": 1
                },
                "uVar15": {
                    "b_var13": 1,
                    "temp12": 1
                },
                "uVar16": {
                    "temp13": 1
                },
                "uVar17": {
                    "temp14": 1
                },
                "uVar18": {
                    "temp15": 1
                },
                "uVar19": {
                    "temp16": 1
                },
                "uVar2": {
                    "div": 1,
                    "dividend_divisor_quotient_upper": 1,
                    "num_bits": 1,
                    "partial_divisor": 1,
                    "quotient": 2,
                    "quotient1": 1,
                    "quotient2": 1,
                    "quotient_1": 1,
                    "quotient_first_half": 1,
                    "quotient_high": 3,
                    "quotient_low": 4,
                    "quotient_lower": 1,
                    "quotient_lower_bits": 1,
                    "quotient_temp": 1,
                    "shifted_divisor": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_dividend_product": 1,
                    "temp_divisor": 2,
                    "temp_quotient": 3,
                    "temp_quotient_1": 1
                },
                "uVar20": {
                    "temp17": 1
                },
                "uVar21": {
                    "temp18": 1
                },
                "uVar22": {
                    "temp19": 1
                },
                "uVar23": {
                    "temp20": 1
                },
                "uVar24": {
                    "temp21": 1
                },
                "uVar25": {
                    "temp22": 1
                },
                "uVar26": {
                    "temp23": 1
                },
                "uVar27": {
                    "temp24": 1
                },
                "uVar28": {
                    "temp25": 1
                },
                "uVar29": {
                    "temp26": 1
                },
                "uVar3": {
                    "dividend_lower": 1,
                    "dividend_quotient_upper": 1,
                    "old_dividend": 1,
                    "partial_remainder": 1,
                    "quotient2": 1,
                    "quotient_2": 1,
                    "quotient_high": 2,
                    "quotient_higher": 1,
                    "quotient_increment": 1,
                    "quotient_low": 1,
                    "quotient_second_half": 1,
                    "remainder_low": 2,
                    "result1": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_dividend": 1,
                    "temp_dividend_1": 1,
                    "temp_dividend_low": 1,
                    "temp_divisor_product": 1,
                    "temp_quotient": 2,
                    "temp_remainder": 1,
                    "temp_remainder_low": 1,
                    "temp_value_high": 1
                },
                "uVar30": {
                    "temp27": 1
                },
                "uVar31": {
                    "temp28": 1
                },
                "uVar32": {
                    "temp29": 1
                },
                "uVar33": {
                    "temp30": 1
                },
                "uVar34": {
                    "temp31": 1
                },
                "uVar35": {
                    "temp32": 1
                },
                "uVar36": {
                    "temp33": 1
                },
                "uVar37": {
                    "temp34": 1
                },
                "uVar38": {
                    "temp35": 1
                },
                "uVar39": {
                    "temp36": 1
                },
                "uVar4": {
                    "carry_flag": 1,
                    "dividend_quotient_lower": 1,
                    "divisor2_remainder": 1,
                    "divisor_lower": 1,
                    "divisor_quotient": 1,
                    "partial_product": 1,
                    "partial_quotient": 1,
                    "quotient_part1": 1,
                    "quotient_remainder": 2,
                    "quotient_temp": 1,
                    "remainder_high": 1,
                    "shift_count": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_1": 1,
                    "temp_dividend": 1,
                    "temp_divisor": 2,
                    "temp_product_low": 1,
                    "temp_quotient_2": 1,
                    "temp_quotient_low": 1,
                    "temp_remainder": 1
                },
                "uVar40": {
                    "temp37": 1
                },
                "uVar41": {
                    "temp38": 1
                },
                "uVar42": {
                    "temp39": 1
                },
                "uVar43": {
                    "temp40": 1
                },
                "uVar44": {
                    "temp41": 1
                },
                "uVar45": {
                    "temp42": 1
                },
                "uVar46": {
                    "temp43": 1
                },
                "uVar47": {
                    "temp44": 1
                },
                "uVar48": {
                    "temp45": 1
                },
                "uVar49": {
                    "temp46": 1
                },
                "uVar5": {
                    "quotient_part2": 1,
                    "quotient_quotient": 1,
                    "shift": 1,
                    "shift_amount": 2,
                    "temp3": 2,
                    "temp_quotient": 1,
                    "temp_remainder_2": 1
                },
                "uVar50": {
                    "temp47": 1
                },
                "uVar51": {
                    "temp48": 1
                },
                "uVar52": {
                    "temp49": 1
                },
                "uVar53": {
                    "temp50": 1
                },
                "uVar54": {
                    "temp51": 1
                },
                "uVar55": {
                    "temp52": 1
                },
                "uVar56": {
                    "temp53": 1
                },
                "uVar57": {
                    "temp54": 1
                },
                "uVar58": {
                    "temp55": 1
                },
                "uVar59": {
                    "temp56": 1
                },
                "uVar6": {
                    "dividend_part1": 1,
                    "divisor_multiplier": 1,
                    "final_quotient": 3,
                    "quotient": 8,
                    "quotient1": 1,
                    "quotient_combined": 2,
                    "quotient_final": 1,
                    "quotient_high": 1,
                    "quotient_low": 1,
                    "quotient_lower": 1,
                    "quotient_part1": 1,
                    "quotient_remainder": 1,
                    "result": 4,
                    "temp1": 1,
                    "temp_dividend": 1,
                    "temp_quotient": 1,
                    "u_var6": 1
                },
                "uVar60": {
                    "temp57": 1
                },
                "uVar61": {
                    "temp58": 1
                },
                "uVar62": {
                    "temp59": 1
                },
                "uVar63": {
                    "temp60": 1
                },
                "uVar64": {
                    "temp61": 1
                },
                "uVar65": {
                    "temp62": 1
                },
                "uVar66": {
                    "temp63": 1
                },
                "uVar67": {
                    "temp64": 1
                },
                "uVar68": {
                    "temp65": 1
                },
                "uVar69": {
                    "temp66": 1
                },
                "uVar7": {
                    "dividend_low": 1,
                    "dividend_lower": 1,
                    "dividend_part2": 1,
                    "dividend_upper": 2,
                    "divisor2_multiplier": 1,
                    "divisor_combined": 2,
                    "divisor_multiplier": 1,
                    "divisor_temp": 1,
                    "intermediate_quotient": 1,
                    "num1_copy": 1,
                    "product_high": 1,
                    "quotient_high": 1,
                    "quotient_high_temp": 1,
                    "quotient_lower_half": 1,
                    "quotient_part2": 1,
                    "quotient_value": 1,
                    "remainder": 1,
                    "remainder_low": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_divisor_high": 1,
                    "temp_remainder": 1,
                    "temp_var_1": 1,
                    "temporary": 1,
                    "u_var7": 1
                },
                "uVar70": {
                    "temp67": 1
                },
                "uVar71": {
                    "temp68": 1
                },
                "uVar72": {
                    "temp69": 1
                },
                "uVar73": {
                    "temp70": 1
                },
                "uVar74": {
                    "temp71": 1
                },
                "uVar8": {
                    "carry": 1,
                    "dividend_remainder": 1,
                    "divisor_overflow": 1,
                    "intermediate_remainder": 1,
                    "product_low": 1,
                    "remainder": 2,
                    "remainder_combined": 2,
                    "remainder_lower": 1,
                    "remainder_lower_half": 1,
                    "remainder_part1": 1,
                    "remainder_temp": 1,
                    "result": 1,
                    "result2": 1,
                    "temp": 2,
                    "temp2": 3,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_3": 1,
                    "temp_divisor": 1,
                    "temp_remainder": 2,
                    "temp_rest": 1,
                    "temp_var_2": 1,
                    "u_var8": 2
                },
                "uVar9": {
                    "remainder_part2": 1,
                    "temp2": 1,
                    "temp6": 1,
                    "temp_4": 1,
                    "temp_dividend_2": 1,
                    "temp_dividend_high": 1,
                    "temp_divisor_low": 1,
                    "temp_quotient": 1,
                    "temp_quotient_low": 1,
                    "u_var9": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_080011ec"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080014b2) */\n\nundefined8 calculate_division_and_remainder_0800121c(uint dividend,uint divisor,uint divisor,uint divisor_high,uint *remainder)\n\n{\n  code *jumptable;\n  ulonglong temp;\n  uint quotient_low;\n  uint temp1;\n  uint temp;\n  int shift_count;\n  uint quotient;\n  uint dividend_upper;\n  uint temp2;\n  uint *pointer;\n  uint temp_quotient;\n  uint u_var11;\n  uint u_var12;\n  bool carry_flag;\n  undefined8 result;\n  \n  if (divisor_high == 0) {\n    if (divisor < divisor) {\n      shift_count = leading_zero_count(divisor);\n      dividend_upper = divisor;\n      if (shift_count != 0) {\n        dividend_upper = divisor << shift_count;\n        divisor = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        dividend = dividend << shift_count;\n      }\n      u_var11 = dividend_upper >> 0x10;\n      temp2 = divisor / u_var11;\n      temp_quotient = temp2 * (dividend_upper & 0xffff);\n      quotient = dividend >> 0x10 | (divisor - u_var11 * temp2) * 0x10000;\n      temp1 = temp2;\n      if (quotient <= temp_quotient && temp_quotient - quotient != 0) {\n        carry_flag = carry4(dividend_upper,quotient);\n        quotient = dividend_upper + quotient;\n        temp1 = temp2 - 1;\n        if ((carry_flag == false) && (quotient <= temp_quotient && temp_quotient - quotient != 0)) {\n          temp1 = temp2 - 2;\n          quotient = quotient + dividend_upper;\n        }\n      }\n      quotient_low = (quotient - temp_quotient) / u_var11;\n      temp = quotient_low * (dividend_upper & 0xffff);\n      temp2 = dividend & 0xffff | ((quotient - temp_quotient) - u_var11 * quotient_low) * 0x10000;\n      quotient = quotient_low;\n      if (temp2 <= temp && temp - temp2 != 0) {\n        carry_flag = carry4(dividend_upper,temp2);\n        temp2 = dividend_upper + temp2;\n        quotient = quotient_low - 1;\n        if ((carry_flag == false) && (temp2 <= temp && temp - temp2 != 0)) {\n          quotient = quotient_low - 2;\n          temp2 = temp2 + dividend_upper;\n        }\n      }\n      quotient = quotient | temp1 << 0x10;\n      pointer = (uint *)0x0;\n      temp2 = temp2 - temp;\n    }\n    else {\n      if (divisor == 0) {\n                    /* WARNING: Treating indirect jump as call */\n        jumptable = (code *)software_udf(0xff,0x8001302);\n        result = (*jumptable)();\n        return result;\n      }\n      shift_count = leading_zero_count(divisor);\n      if (shift_count == 0) {\n        pointer = (uint *)0x1;\n        divisor = divisor - divisor;\n        u_var11 = divisor >> 0x10;\n        quotient_low = divisor & 0xffff;\n        dividend_upper = divisor;\n      }\n      else {\n        dividend_upper = divisor << shift_count;\n        quotient = divisor >> (0x20U - shift_count & 0xff);\n        u_var11 = dividend_upper >> 0x10;\n        temp_quotient = quotient / u_var11;\n        quotient_low = dividend_upper & 0xffff;\n        temp = temp_quotient * quotient_low;\n        temp2 = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        temp1 = temp2 >> 0x10 | (quotient - u_var11 * temp_quotient) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient = temp_quotient;\n        if (temp1 <= temp && temp - temp1 != 0) {\n          carry_flag = carry4(dividend_upper,temp1);\n          temp1 = dividend_upper + temp1;\n          quotient = temp_quotient - 1;\n          if ((carry_flag == false) && (temp1 <= temp && temp - temp1 != 0)) {\n            quotient = temp_quotient - 2;\n            temp1 = temp1 + dividend_upper;\n          }\n        }\n        temp_quotient = (temp1 - temp) / u_var11;\n        u_var12 = temp_quotient * quotient_low;\n        divisor = temp2 & 0xffff | ((temp1 - temp) - u_var11 * temp_quotient) * 0x10000;\n        temp1 = temp_quotient;\n        if (divisor <= u_var12 && u_var12 - divisor != 0) {\n          carry_flag = carry4(dividend_upper,divisor);\n          divisor = dividend_upper + divisor;\n          temp1 = temp_quotient - 1;\n          if ((carry_flag == false) && (divisor <= u_var12 && u_var12 - divisor != 0)) {\n            temp1 = temp_quotient - 2;\n            divisor = divisor + dividend_upper;\n          }\n        }\n        divisor = divisor - u_var12;\n        pointer = (uint *)(temp1 | quotient << 0x10);\n      }\n      temp_quotient = divisor / u_var11;\n      quotient = quotient_low * temp_quotient;\n      temp2 = dividend >> 0x10 | (divisor - u_var11 * temp_quotient) * 0x10000;\n      temp1 = temp_quotient;\n      if (temp2 <= quotient && quotient - temp2 != 0) {\n        carry_flag = carry4(dividend_upper,temp2);\n        temp2 = dividend_upper + temp2;\n        temp1 = temp_quotient - 1;\n        if ((carry_flag == false) && (temp2 <= quotient && quotient - temp2 != 0)) {\n          temp1 = temp_quotient - 2;\n          temp2 = temp2 + dividend_upper;\n        }\n      }\n      temp_quotient = (temp2 - quotient) / u_var11;\n      quotient_low = quotient_low * temp_quotient;\n      temp2 = dividend & 0xffff | ((temp2 - quotient) - u_var11 * temp_quotient) * 0x10000;\n      quotient = temp_quotient;\n      if (temp2 <= quotient_low && quotient_low - temp2 != 0) {\n        carry_flag = carry4(dividend_upper,temp2);\n        temp2 = dividend_upper + temp2;\n        quotient = temp_quotient - 1;\n        if ((carry_flag == false) && (temp2 <= quotient_low && quotient_low - temp2 != 0)) {\n          quotient = temp_quotient - 2;\n          temp2 = temp2 + dividend_upper;\n        }\n      }\n      temp2 = temp2 - quotient_low;\n      quotient = quotient | temp1 << 0x10;\n    }\n    if (remainder != (uint *)0x0) {\n      *remainder = temp2 >> leading_zero_count(divisor);\n      remainder[1] = 0;\n    }\n  }\n  else {\n    pointer = remainder;\n    if (divisor < divisor_high) {\n      if (remainder != (uint *)0x0) {\n        *remainder = dividend;\n        remainder[1] = divisor;\n        return 0;\n      }\n      quotient = 0;\n    }\n    else {\n      shift_count = leading_zero_count(divisor_high);\n      if (shift_count == 0) {\n        if ((divisor_high < divisor) || (divisor <= dividend)) {\n          carry_flag = dividend < divisor;\n          dividend = dividend - divisor;\n          divisor = (divisor - divisor_high) - (uint)carry_flag;\n          quotient = 1;\n        }\n        else {\n          quotient = 0;\n        }\n        pointer = (uint *)0x0;\n        if (remainder != (uint *)0x0) {\n          *remainder = dividend;\n          remainder[1] = divisor;\n        }\n      }\n      else {\n        temp2 = 0x20 - shift_count;\n        quotient_low = divisor >> (temp2 & 0xff) | divisor_high << shift_count;\n        dividend_upper = divisor >> (temp2 & 0xff);\n        temp = quotient_low >> 0x10;\n        temp_quotient = dividend_upper / temp;\n        u_var11 = temp_quotient * (quotient_low & 0xffff);\n        quotient = divisor << shift_count | dividend >> (temp2 & 0xff);\n        temp1 = quotient >> 0x10 | (dividend_upper - temp * temp_quotient) * 0x10000;\n        dividend = dividend << shift_count;\n        dividend_upper = temp_quotient;\n        if (temp1 <= u_var11 && u_var11 - temp1 != 0) {\n          carry_flag = carry4(quotient_low,temp1);\n          temp1 = quotient_low + temp1;\n          dividend_upper = temp_quotient - 1;\n          if ((carry_flag == false) && (temp1 <= u_var11 && u_var11 - temp1 != 0)) {\n            dividend_upper = temp_quotient - 2;\n            temp1 = temp1 + quotient_low;\n          }\n        }\n        temp_quotient = (temp1 - u_var11) / temp;\n        u_var12 = temp_quotient * (quotient_low & 0xffff);\n        temp1 = quotient & 0xffff | ((temp1 - u_var11) - temp * temp_quotient) * 0x10000;\n        quotient = temp_quotient;\n        if (temp1 <= u_var12 && u_var12 - temp1 != 0) {\n          carry_flag = carry4(quotient_low,temp1);\n          temp1 = quotient_low + temp1;\n          quotient = temp_quotient - 1;\n          if ((carry_flag == false) && (temp1 <= u_var12 && u_var12 - temp1 != 0)) {\n            quotient = temp_quotient - 2;\n            temp1 = temp1 + quotient_low;\n          }\n        }\n        quotient = quotient | dividend_upper << 0x10;\n        temp = (ulonglong)quotient * (ulonglong)(divisor << shift_count);\n        if (CONCAT44(temp1 - u_var12,dividend) < temp) {\n          quotient = quotient - 1;\n          temp = temp - CONCAT44(quotient_low,divisor << shift_count);\n        }\n        if (remainder != (uint *)0x0) {\n          dividend_upper = ((temp1 - u_var12) - (int)(temp >> 0x20)) - (uint)(dividend < (uint)temp);\n          *remainder = dividend_upper << (temp2 & 0xff) | dividend - (uint)temp >> shift_count;\n          remainder[1] = dividend_upper >> shift_count;\n          pointer = (uint *)0x0;\n        }\n      }\n    }\n  }\n  return CONCAT44(pointer,quotient);\n}\n\n",
            "current_name": "calculate_division_and_remainder_0800121c",
            "entrypoint": "0x0800121c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_0800121c": "calculate_division_and_remainder_0800121c",
                "LZCOUNT": "leading_zero_count",
                "UNRECOVERED_JUMPTABLE": "jumptable",
                "bVar13": "carry_flag",
                "iVar5": "shift_count",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "param_5": "remainder",
                "puVar9": "pointer",
                "uVar1": "temp",
                "uVar10": "temp_quotient",
                "uVar11": "u_var11",
                "uVar12": "u_var12",
                "uVar14": "result",
                "uVar2": "quotient_low",
                "uVar3": "temp1",
                "uVar4": "temp",
                "uVar6": "quotient",
                "uVar7": "dividend_upper",
                "uVar8": "temp2",
                "uVar9": "u_var9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014f0": {
            "additional_data": {
                "FUNC_08002d8a": {
                    "configure_tick": 1,
                    "init_tick": 1,
                    "initialize_nvic": 1,
                    "initialize_tick": 7,
                    "perform_additional_setup": 3,
                    "perform_additional_tasks": 1,
                    "perform_initialization": 3,
                    "perform_reset": 1,
                    "perform_system_check": 2,
                    "reconfigure_settings": 1,
                    "reset_hardware": 1,
                    "reverse_data": 1,
                    "reverse_something": 2,
                    "system_specific_operation": 1
                },
                "FUN_080014f0": {
                    "initialize": 2,
                    "initialize_hal": 2,
                    "initialize_hal_components": 2,
                    "initialize_hardware": 15,
                    "initialize_system": 10
                },
                "FUN_0800151c": {
                    "configure_device": 1,
                    "configure_interrupt": 1,
                    "configure_param": 1,
                    "configure_parameter": 3,
                    "configure_system": 3,
                    "initialize_component": 1,
                    "initialize_device": 1,
                    "initialize_peripheral": 4,
                    "initialize_peripheral_with_param": 1,
                    "initialize_subsystem": 1,
                    "initialize_tick": 1,
                    "perform_operation": 1,
                    "set_configuration": 1,
                    "set_device_mode": 1,
                    "set_nvic_priority_grouping": 1,
                    "set_parameter": 1,
                    "set_priority_grouping": 1,
                    "set_priority_mode": 1,
                    "set_tick_frequency": 1,
                    "set_tick_interval": 1,
                    "update_configuration": 1
                },
                "FUN_08001714": {
                    "configure_device": 1,
                    "configure_interrupt": 4,
                    "configure_interrupts": 4,
                    "configure_peripheral": 2,
                    "configure_priority": 1,
                    "configure_unknown": 1,
                    "handle_flag": 1,
                    "initialize_subsystem": 1,
                    "perform_task": 1,
                    "process_data": 1,
                    "set_priority": 9,
                    "set_priority_grouping": 1
                },
                "HAL_InitTick": {
                    "init_tick": 1,
                    "initialize_system_tick": 2,
                    "initialize_tick": 8,
                    "initialize_ticks": 1
                },
                "HAL_MspInit": {
                    "initialize_hardware_specific": 1,
                    "initialize_low_level_hardware": 1,
                    "initialize_msp": 3,
                    "initialize_periph": 4,
                    "initialize_peripheral": 2,
                    "initialize_system_periph": 1
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "configure_interrupt_priority_group": 2,
                    "set_interrupt_priority": 1,
                    "set_interrupt_priority_group": 3,
                    "set_interrupt_priority_grouping": 2,
                    "set_priority_grouping": 4
                },
                "_DAT_40022000": {
                    "device_flags": 2,
                    "hardware_flag": 1,
                    "hardware_flags": 2,
                    "hardware_status": 1,
                    "interrupt_flags": 1,
                    "peripheral_control": 1,
                    "system_flags": 1,
                    "system_status": 1
                },
                "param_1": {
                    "device_mode": 1,
                    "device_param": 1,
                    "input": 2,
                    "input_param": 1,
                    "interrupt_number": 1,
                    "operation_type": 1,
                    "param": 4,
                    "parameter": 1,
                    "peripheral_id": 1,
                    "peripheral_param": 2,
                    "priority": 2,
                    "priority_group": 1,
                    "priority_grouping": 1,
                    "priority_mode": 1,
                    "tick_config": 1,
                    "unused_param": 1,
                    "value": 2
                },
                "param_2": {
                    "tick_init_value": 1
                },
                "uint": {
                    "peripheral_type": 1,
                    "value": 1
                },
                "undefined4": {
                    "void": 1
                }
            },
            "called": [
                "FUN_08001714",
                "FUN_08002d8a",
                "FUN_0800151c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nvoid initialize_hardware_080014f0(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  set_priority_grouping(3);\n  initialize_tick(0xf);\n  initialize_periph();\n  return 0;\n}\n\n",
            "current_name": "initialize_hardware_080014f0",
            "entrypoint": "0x080014f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014f0": "initialize_hardware_080014f0",
                "HAL_InitTick": "initialize_tick",
                "HAL_MspInit": "initialize_periph",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800151c": {
            "additional_data": {
                "DAT_20000000": {
                    "current_priority": 2
                },
                "DAT_20000004": {
                    "systick_frequency": 1
                },
                "DAT_20000018": {
                    "system_clock": 1
                },
                "FUN_0800151c": {
                    "configure_sys_tick": 15,
                    "configure_sys_tick_priority": 1,
                    "configure_system_tick": 1,
                    "configure_systick": 4,
                    "configure_systick_and_nvic_priority": 1,
                    "configure_systick_and_priority": 1,
                    "configure_systick_irq": 1,
                    "configure_systick_timer": 1,
                    "initialize_sys_tick": 1,
                    "initialize_systick": 5
                },
                "FUN_0800172a": {
                    "initialize": 1
                },
                "FUN_08001762": {
                    "handle_error": 1
                },
                "HAL_NVIC_SetPriority": {
                    "set_priority": 2
                },
                "HAL_SYSTICK_Config": {
                    "configure_sys_tick": 1,
                    "configure_sys_tick_interval": 1
                },
                "iVar1": {
                    "config_result": 8,
                    "config_status": 5,
                    "configuration_result": 1,
                    "result": 1,
                    "sys_tick_config_result": 2,
                    "systick_config_result": 9,
                    "systick_config_status": 4,
                    "systick_result": 1
                },
                "param_1": {
                    "param_1": 1,
                    "priority": 5,
                    "priority_level": 24
                },
                "uVar2": {
                    "function_result": 1,
                    "operation_status": 1,
                    "result": 1,
                    "return_code": 4,
                    "return_status": 6,
                    "return_val": 1,
                    "return_value": 15,
                    "status": 1,
                    "success": 1
                }
            },
            "called": [
                "FUN_0800172a",
                "FUN_08001762"
            ],
            "calling": [
                "FUN_08003260",
                "FUN_080014f0"
            ],
            "code": "\nundefined4 configure_sys_tick_priority_0800151c(uint priority_level)\n\n{\n  int systick_config_result;\n  undefined4 return_value;\n  \n  systick_config_result = configure_sys_tick((int)((ulonglong)DAT_20000018 / (1000 / (ulonglong)DAT_20000004)));\n  if (systick_config_result == 0) {\n    if (priority_level < 0x10) {\n      set_priority(0xffffffff,priority_level,0);\n      return_value = 0;\n      DAT_20000000 = priority_level;\n    }\n    else {\n      return_value = 1;\n    }\n  }\n  else {\n    return_value = 1;\n  }\n  return return_value;\n}\n\n",
            "current_name": "configure_sys_tick_priority_0800151c",
            "entrypoint": "0x0800151c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800151c": "configure_sys_tick_priority_0800151c",
                "HAL_NVIC_SetPriority": "set_priority",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "iVar1": "systick_config_result",
                "param_1": "priority_level",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800157c": {
            "additional_data": {
                "DAT_20000004": {
                    "addend": 1,
                    "data": 2,
                    "data_to_add": 1,
                    "data_value": 1,
                    "increment": 8,
                    "increment_amount": 2,
                    "increment_value": 7,
                    "input": 1,
                    "new_value": 1,
                    "number": 1,
                    "sum_increment": 1,
                    "value": 2,
                    "value_to_add": 3
                },
                "DAT_20000a48": {
                    "accumulated_value": 2,
                    "accumulator": 1,
                    "current_data": 1,
                    "current_sum": 1,
                    "current_value": 2,
                    "data": 4,
                    "data_value": 4,
                    "global_data": 2,
                    "new_value": 1,
                    "result": 5,
                    "sum": 4,
                    "sum_var": 1,
                    "total": 1,
                    "total_sum": 1,
                    "updated_value": 1
                },
                "FUN_0800157c": {
                    "add_data": 1,
                    "add_data_to_global_variable": 1,
                    "add_data_to_variable": 1,
                    "add_values": 1,
                    "addition_and_update": 1,
                    "calculate_sum": 1,
                    "increase_data": 2,
                    "increase_sum": 2,
                    "increment_and_assign": 1,
                    "increment_dat_20000a48_by_dat_20000004": 1,
                    "increment_data": 1,
                    "increment_data_value": 3,
                    "increment_sum": 1,
                    "increment_value": 3,
                    "increment_variable": 2,
                    "update_data": 5,
                    "update_global_data": 1,
                    "update_value": 1,
                    "update_variable": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid increment_data_value_0800157c(void)\n\n{\n  DAT_20000a48 = DAT_20000a48 + (uint)DAT_20000004;\n  return;\n}\n\n",
            "current_name": "increment_data_value_0800157c",
            "entrypoint": "0x0800157c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800157c": "increment_data_value_0800157c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015a0": {
            "additional_data": {
                "DAT_20000a48": {
                    "constant_value": 1,
                    "data": 8,
                    "data_constant": 1,
                    "data_value": 3,
                    "global_data": 1,
                    "global_value": 3,
                    "global_var": 1,
                    "global_variable": 4,
                    "initial_value": 1
                },
                "FUN_080015a0": {
                    "get_constant_value": 1,
                    "get_dat_value": 2,
                    "get_data": 5,
                    "get_data_constant": 1,
                    "get_data_from_memory": 3,
                    "get_data_value": 9,
                    "get_global_data": 1,
                    "get_global_value": 3,
                    "get_global_variable": 5,
                    "get_initial_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f2c",
                "FUN_08001f6c",
                "FUN_08002bb4",
                "FUN_08001ccc",
                "FUN_08003260",
                "FUN_080027f4",
                "FUN_08002ca8",
                "FUN_08002c2e",
                "FUN_08002ad8",
                "FUN_08004436",
                "FUN_08002d98",
                "FUN_08002640"
            ],
            "code": "\nundefined4 get_data_value_080015a0(void)\n\n{\n  return DAT_20000a48;\n}\n\n",
            "current_name": "get_data_value_080015a0",
            "entrypoint": "0x080015a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015a0": "get_data_value_080015a0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015b4": {
            "additional_data": {
                "0x5fa0000": {
                    "constant1": 1,
                    "register_setting": 1
                },
                "0xf8ff": {
                    "bitmask1": 1,
                    "clear_mask": 1
                },
                "8": {
                    "shift_amount": 2
                },
                "FUN_080015b4": {
                    "configure_display": 2,
                    "configure_hardware": 1,
                    "configure_peripheral": 1,
                    "configure_registers": 1,
                    "initialize_registers": 1,
                    "process_parameter": 1,
                    "set_config_register": 1,
                    "set_configuration_register": 1,
                    "set_control_register": 1,
                    "set_memory_configuration": 2,
                    "set_mode_bits": 1,
                    "set_param_bit": 1,
                    "set_register_bits": 2,
                    "set_register_value": 2,
                    "set_special_register_value": 1,
                    "update_configuration": 3,
                    "update_control_register": 1,
                    "update_memory_config": 1,
                    "update_register": 3,
                    "update_register_bits": 2,
                    "update_register_value": 2
                },
                "_DAT_e000ed0c": {
                    "config_register": 1,
                    "configuration_register": 3,
                    "control_register": 3,
                    "current_memory_config": 1,
                    "data_register": 2,
                    "display_control": 1,
                    "display_register": 1,
                    "hardware_configuration": 1,
                    "memory_config": 1,
                    "memory_control_register": 1,
                    "peripheral_register": 1,
                    "register": 4,
                    "register_value": 7,
                    "special_register": 1
                },
                "param_1": {
                    "bit_value": 1,
                    "configuration": 7,
                    "display_config": 1,
                    "display_setting": 1,
                    "hardware_parameter": 1,
                    "input": 2,
                    "input_value": 4,
                    "interrupt_flags": 1,
                    "memory_config": 1,
                    "mode": 1,
                    "new_value": 2,
                    "parameter": 1,
                    "register_value": 2,
                    "value": 6
                },
                "param_2": {
                    "data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001714"
            ],
            "code": "\n\n\nvoid update_register_bits_080015b4(uint configuration)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (configuration & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "update_register_bits_080015b4",
            "entrypoint": "0x080015b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015b4": "update_register_bits_080015b4",
                "param_1": "configuration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015fc": {
            "additional_data": {
                "7": {
                    "mask": 1
                },
                "8": {
                    "shift_amount": 1
                },
                "DAT_e000ed0c": {
                    "input_data": 1,
                    "register_value": 1
                },
                "FUN_080015fc": {
                    "extract_bits_from_register": 4,
                    "extracted_bits": 1,
                    "get_bit_mask": 1,
                    "get_bit_masked_value": 1,
                    "get_bit_pattern": 2,
                    "get_bit_value": 3,
                    "get_bits_from_global_value": 1,
                    "get_bits_from_register": 3,
                    "get_lower_three_bits": 1,
                    "get_shifted_bit_mask": 1,
                    "get_shifted_bits": 7,
                    "get_shifted_value": 3,
                    "get_three_least_significant_bits": 1,
                    "get_top_three_bits": 1
                },
                "_DAT_e000ed0c": {
                    "data": 4,
                    "data_register": 1,
                    "data_value": 1,
                    "global_value": 1,
                    "input_bits": 1,
                    "input_value": 2,
                    "input_variable": 2,
                    "original_bits": 1,
                    "original_data": 1,
                    "original_value": 1,
                    "register_value": 10,
                    "shifted_value": 3,
                    "value": 1
                },
                "new_variable_name_1": {
                    "shifted_value": 1
                },
                "return": {
                    "result": 2,
                    "shifted_bits": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\n\n\nuint get_shifted_bits_080015fc(void)\n\n{\n  result _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_shifted_bits_080015fc",
            "entrypoint": "0x080015fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015fc": "get_shifted_bits_080015fc",
                "return": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001618": {
            "additional_data": {
                "0x1fff1c00": {
                    "dest_address2": 1,
                    "destination2": 1,
                    "memory_addr2": 1,
                    "memory_block2": 1
                },
                "0xe000ed14": {
                    "dest_address1": 1,
                    "destination1": 1,
                    "memory_addr1": 1,
                    "memory_block1": 1
                },
                "0xf": {
                    "lower_nibble_mask": 1,
                    "mask1": 1
                },
                "0xff": {
                    "mask2": 1
                },
                "FUN_08001618": {
                    "set_byte_at_address": 1,
                    "set_character_byte": 1,
                    "set_memory_byte": 1,
                    "store_byte": 1,
                    "store_byte_data": 1,
                    "store_byte_to_memory": 1,
                    "store_byte_value": 5,
                    "store_data": 2,
                    "store_value": 1,
                    "update_data": 1,
                    "update_memory": 6,
                    "update_memory_value": 2,
                    "write_byte_to_memory": 2,
                    "write_to_memory": 6
                },
                "buffer": {
                    "output": 1
                },
                "char": {
                    "byte": 1,
                    "character": 1
                },
                "data": {
                    "value": 1
                },
                "e000ed14": {
                    "memory_location1": 1
                },
                "inputByte": {
                    "address": 1
                },
                "param_1": {
                    "address": 7,
                    "address_offset": 3,
                    "byte_index": 1,
                    "byte_value": 5,
                    "data_index": 1,
                    "input_byte": 9,
                    "input_value": 1,
                    "memory_address": 1,
                    "offset": 1,
                    "source_byte": 1,
                    "src_byte": 1
                },
                "param_2": {
                    "data": 12,
                    "data_value": 1,
                    "input_value": 5,
                    "int_value": 1,
                    "new_value": 3,
                    "uint_value": 1,
                    "updated_value": 1,
                    "value": 6,
                    "value_to_store": 1
                },
                "param_3": {
                    "buffer": 2
                },
                "sourceByte": {
                    "src_byte": 1
                },
                "temp_1": {
                    "new_value": 1
                },
                "value": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a",
                "FUN_080016d0"
            ],
            "code": "\nvoid store_byte_to_memory_08001618(byte input_byte,uint data)\n\n{\n  if ((byte)input_byte < '\\0') {\n    *(byte *)((input_byte & 0xf) + 0xe000ed14) = (byte)((data & 0xff) << 4);\n  }\n  else {\n    *(byte *)((byte)input_byte + -0x1fff1c00) = (byte)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "store_byte_to_memory_08001618",
            "entrypoint": "0x08001618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001618": "store_byte_to_memory_08001618",
                "char": "byte",
                "param_1": "input_byte",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800166c": {
            "additional_data": {
                "DAT_": {
                    "": 1,
                    "unchanged": 1
                },
                "FUN_0800166c": {
                    "apply_bitmask_and_shift": 1,
                    "apply_bitwise_operations": 1,
                    "apply_mask": 1,
                    "bitwise_combine": 1,
                    "bitwise_concatenation": 1,
                    "bitwise_operation": 17,
                    "bitwise_operations": 1,
                    "extract_bits": 2,
                    "extract_bits_and_shift": 1,
                    "find_bit_range": 1,
                    "set_bit_range": 1,
                    "truncate_and_concat_bits": 1,
                    "update_bits": 1
                },
                "PTR_": {
                    "": 1,
                    "unchanged": 1
                },
                "param_1": {
                    "bit_mask": 5,
                    "bit_offset": 4,
                    "bit_position": 3,
                    "bits_to_shift": 1,
                    "input_bit": 1,
                    "input_bit_offset": 1,
                    "input_bits": 3,
                    "input_mask": 3,
                    "input_shifted": 1,
                    "input_value": 4,
                    "mask_position": 1,
                    "masked_output": 1,
                    "num_bits": 1,
                    "result2": 1,
                    "value1": 1
                },
                "param_1_and_4": {
                    "should_be_zero": 1
                },
                "param_1_minus_3": {
                    "bit_offset": 1
                },
                "param_2": {
                    "bit_field": 1,
                    "bitmask": 1,
                    "bits_to_insert": 1,
                    "data_bits": 2,
                    "data_to_mask": 1,
                    "input1": 1,
                    "input2": 1,
                    "input_1": 1,
                    "input_masked": 1,
                    "input_value": 7,
                    "mask": 2,
                    "mask_value": 2,
                    "modified_value": 1,
                    "original_value": 2,
                    "source": 1,
                    "value": 1,
                    "value2": 2,
                    "value_to_concatenate": 1,
                    "value_to_insert": 2
                },
                "param_3": {
                    "bit_field": 1,
                    "bit_result": 1,
                    "bitwise_result": 1,
                    "data": 2,
                    "destination": 1,
                    "input2": 1,
                    "input3": 1,
                    "input_2": 1,
                    "mask": 4,
                    "mask_value": 2,
                    "new_value": 1,
                    "original_bits": 1,
                    "output_masked": 1,
                    "output_value": 6,
                    "result": 2,
                    "result_value": 1,
                    "target": 1,
                    "updated_value": 1,
                    "value3": 2
                },
                "uVar1": {
                    "bit_count": 1,
                    "bit_mask_shift": 1,
                    "bit_shift": 1,
                    "bits_remaining": 1,
                    "bits_to_shift": 1,
                    "count": 1,
                    "offset": 1,
                    "remaining_bits": 6,
                    "result1": 1,
                    "shift_amount": 15,
                    "shift_value": 1
                },
                "uVar2": {
                    "mask": 3,
                    "temp_mask": 1,
                    "temp_result": 1
                },
                "uVar3": {
                    "shifted_data": 1,
                    "shifted_value": 2,
                    "temp_result2": 1,
                    "temp_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800172a"
            ],
            "code": "\nuint bitwise_operation_0800166c(uint bit_mask,uint input_value,uint output_value)\n\n{\n  uint shift_amount;\n  \n  bit_mask = bit_mask & 7;\n  shift_amount = 7 - bit_mask;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_mask + 4 < 7) {\n    bit_mask = 0;\n  }\n  else {\n    bit_mask = bit_mask - 3;\n  }\n  return output_value & ~(-1 << (bit_mask & 0xff)) |\n         (~(-1 << (shift_amount & 0xff)) & input_value) << (bit_mask & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_0800166c",
            "entrypoint": "0x0800166c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800166c": "bitwise_operation_0800166c",
                "param_1": "bit_mask",
                "param_2": "input_value",
                "param_3": "output_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016d0": {
            "additional_data": {
                "FUN_08001618": {
                    "process_data": 1,
                    "process_peripheral": 1
                },
                "FUN_080016d0": {
                    "check_and_configure_interrupt_priority": 1,
                    "check_and_initialize_peripheral": 1,
                    "check_and_set_priority": 10,
                    "check_and_update_priority": 1,
                    "decrement_and_set_priority": 1,
                    "handle_param": 1,
                    "initialize_peripheral": 3,
                    "initialize_priority": 2,
                    "process_input": 1,
                    "set_priority_and_flags": 1,
                    "set_priority_and_value_if_valid": 1,
                    "set_priority_and_values": 1,
                    "update_priority": 1,
                    "update_priority_and_flags": 3,
                    "update_priority_and_return_false": 1,
                    "update_priority_and_status": 1,
                    "validate_and_initialize": 1
                },
                "NVIC_SetPriority": {
                    "set_priority": 2
                },
                "_DAT_e000e010": {
                    "data_offset_e000e010": 1,
                    "flag": 1,
                    "flags": 2,
                    "interrupt_number": 1,
                    "interrupt_priority": 1,
                    "other_value": 1,
                    "priority": 1,
                    "priority_level": 2,
                    "priority_value": 1,
                    "some_other_value": 1,
                    "var2_modified": 1
                },
                "_DAT_e000e014": {
                    "data_offset_e000e014": 1,
                    "modified_input": 1,
                    "modified_param": 1,
                    "modified_value": 3,
                    "peripheral_address": 2,
                    "updated_input_value": 1,
                    "updated_value": 5
                },
                "_DAT_e000e018": {
                    "data_offset_e000e018": 1,
                    "flag": 1,
                    "initial_value": 1,
                    "interrupt_enable": 1,
                    "interrupt_priority": 1,
                    "new_value": 1,
                    "priority_level": 1,
                    "reset_value": 2,
                    "some_value": 2,
                    "var1_modified": 1,
                    "zero_value": 1
                },
                "bVar1": {
                    "is_in_range": 3,
                    "is_input_in_range": 1,
                    "is_input_valid": 3,
                    "is_less_than": 1,
                    "is_less_than_threshold": 2,
                    "is_priority_valid": 1,
                    "is_valid": 7,
                    "is_valid_input": 1,
                    "is_valid_peripheral": 2,
                    "is_valid_value": 3,
                    "is_value_in_range": 1,
                    "is_value_valid": 4,
                    "peripheral_valid": 1,
                    "valid_priority": 1
                },
                "byte": {
                    "data": 1
                },
                "param_1": {
                    "input": 2,
                    "input_param": 1,
                    "input_priority": 1,
                    "input_value": 15,
                    "peripheral_data": 1,
                    "peripheral_id": 2,
                    "priority_level": 1,
                    "value": 8
                },
                "param_2": {
                    "data_size": 1,
                    "priority": 1,
                    "unused_parameter": 1
                },
                "uint": {
                    "value": 1
                }
            },
            "called": [
                "FUN_08001618"
            ],
            "calling": [
                "FUN_08001762"
            ],
            "code": "\n\n\nbool check_and_set_priority_080016d0(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    set_priority(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "check_and_set_priority_080016d0",
            "entrypoint": "0x080016d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016d0": "check_and_set_priority_080016d0",
                "NVIC_SetPriority": "set_priority",
                "bVar1": "is_valid",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001714": {
            "additional_data": {
                "FUN_080015b4": {
                    "adjust_nvic_priority": 1,
                    "adjust_priority": 1,
                    "configure_interrupt": 1,
                    "configure_interrupts": 2,
                    "do_something": 2,
                    "handle_interrupt": 2,
                    "handle_priority": 2,
                    "process_data": 1,
                    "process_parameter": 2,
                    "set_interrupt_priority": 5,
                    "set_nvic_priority": 1,
                    "set_priority": 9,
                    "set_value": 1,
                    "trigger_interrupt": 1
                },
                "FUN_08001714": {
                    "configure_interrupt_priority_grouping": 1,
                    "configure_priority_grouping": 1,
                    "set_interrupt_priority_group": 1,
                    "set_nvic_priority_grouping": 7,
                    "set_priority_group": 4,
                    "set_priority_grouping": 17
                },
                "NVIC_SetPriorityGrouping": {
                    "set_priority_grouping": 1
                },
                "param_1": {
                    "data": 1,
                    "grouping": 1,
                    "handler": 1,
                    "interrupt": 1,
                    "interrupt_number": 2,
                    "interrupt_priority": 2,
                    "param": 2,
                    "priority": 3,
                    "priority_group": 13,
                    "priority_grouping": 4,
                    "priority_level": 1
                }
            },
            "called": [
                "FUN_080015b4"
            ],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid set_nvic_priority_grouping_08001714(undefined4 priority_group)\n\n{\n  set_priority_grouping(priority_group);\n  return;\n}\n\n",
            "current_name": "set_nvic_priority_grouping_08001714",
            "entrypoint": "0x08001714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001714": "set_nvic_priority_grouping_08001714",
                "NVIC_SetPriorityGrouping": "set_priority_grouping",
                "param_1": "priority_group"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800172a": {
            "additional_data": {
                "FUN_080015fc": {
                    "get_priority_group": 2,
                    "get_priority_grouping": 19
                },
                "FUN_08001618": {
                    "assign_interrupt_priority": 1,
                    "configure_interrupt": 2,
                    "configure_interrupt_priority": 1,
                    "configure_irq": 1,
                    "configure_priority": 4,
                    "disable_interrupt": 1,
                    "encode_priority": 3,
                    "set_grouping": 1,
                    "set_interrupt_priority": 1,
                    "set_interrupt_priority_flag": 1,
                    "set_interrupt_priority_level": 1,
                    "set_interrupt_priority_mask": 1,
                    "set_priority_grouping": 1,
                    "set_priority_level": 2
                },
                "FUN_0800166c": {
                    "calculate_priority": 1,
                    "encode_interrupt_priority": 1,
                    "encode_priority": 15,
                    "encode_priority_level": 2,
                    "set_priority": 2
                },
                "FUN_0800172a": {
                    "set_interrupt_priority": 13,
                    "set_irq_priority": 1,
                    "set_priority": 3,
                    "set_priority_and_encode": 4,
                    "set_priority_and_encoding": 1,
                    "set_priority_based_on_priority_grouping": 1,
                    "set_priority_from_encoded_value": 1,
                    "set_priority_group": 1,
                    "set_priority_level": 3,
                    "set_priority_of_interrupt": 1,
                    "set_priority_with_encoded_priority": 1,
                    "set_priority_with_encoded_value": 1
                },
                "NVIC_EncodePriority": {
                    "encode_priority": 1
                },
                "NVIC_GetPriorityGrouping": {
                    "get_priority_grouping": 1
                },
                "NVIC_SetPriority": {
                    "set_priority": 1
                },
                "param_1": {
                    "device": 3,
                    "device_interrupt": 1,
                    "grouping": 1,
                    "interrupt": 1,
                    "interrupt_handler": 1,
                    "interrupt_index": 1,
                    "interrupt_name": 2,
                    "interrupt_number": 6,
                    "irq_number": 2,
                    "peripheral": 1,
                    "priority": 1,
                    "priority_group": 4,
                    "priority_grouping": 6,
                    "priority_mask": 1
                },
                "param_2": {
                    "interrupt": 1,
                    "interrupt_priority": 1,
                    "preempt_priority": 11,
                    "preemption_priority": 2,
                    "priority": 1,
                    "priority_group": 9,
                    "priority_grouping": 2,
                    "priority_level": 1,
                    "sub_priority": 3
                },
                "param_3": {
                    "group_priority": 1,
                    "preempt_priority": 4,
                    "priority": 2,
                    "priority_subgroup": 1,
                    "sub_priority": 20,
                    "sub_priority_level": 1,
                    "subpriority": 2
                },
                "uVar1": {
                    "encoding": 1,
                    "grouping": 1,
                    "priority": 3,
                    "priority_encoding": 6,
                    "priority_group": 7,
                    "priority_group_value": 1,
                    "priority_grouping": 9,
                    "priority_level": 2
                }
            },
            "called": [
                "FUN_08001618",
                "FUN_080015fc",
                "FUN_0800166c"
            ],
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "code": "\nvoid set_priority_of_interrupt_0800172a(char priority_grouping,undefined4 preempt_priority,undefined4 sub_priority)\n\n{\n  undefined4 priority_grouping;\n  \n  priority_grouping = get_priority_grouping();\n  priority_grouping = encode_priority(priority_grouping,preempt_priority,sub_priority);\n  set_priority((int)priority_grouping,priority_grouping);\n  return;\n}\n\n",
            "current_name": "set_priority_of_interrupt_0800172a",
            "entrypoint": "0x0800172a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800172a": "set_priority_of_interrupt_0800172a",
                "NVIC_EncodePriority": "encode_priority",
                "NVIC_GetPriorityGrouping": "get_priority_grouping",
                "NVIC_SetPriority": "set_priority",
                "param_1": "priority_grouping",
                "param_2": "preempt_priority",
                "param_3": "sub_priority",
                "uVar1": "priority_grouping"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001762": {
            "additional_data": {
                "FUN_08001762": {
                    "configure_sys_tick": 14,
                    "initialize_sys_tick": 16,
                    "initialize_sys_tick_timer": 1
                },
                "param_1": {
                    "config_value": 29,
                    "tick_interval": 1,
                    "time_interval": 1
                },
                "uVar1": {
                    "config_result": 4,
                    "config_status": 5,
                    "error_code": 1,
                    "result": 10,
                    "return_value": 1,
                    "status": 4,
                    "systick_config_result": 3,
                    "systick_status": 1,
                    "tick_config_status": 1
                }
            },
            "called": [
                "FUN_080016d0"
            ],
            "calling": [
                "FUN_0800151c",
                "FUN_080052a0"
            ],
            "code": "\nundefined4 initialize_sys_tick_timer_08001762(undefined4 config_value)\n\n{\n  undefined4 result;\n  \n  result = SysTick_Config(config_value);\n  return result;\n}\n\n",
            "current_name": "initialize_sys_tick_timer_08001762",
            "entrypoint": "0x08001762",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001762": "initialize_sys_tick_timer_08001762",
                "param_1": "config_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800177c": {
            "additional_data": {
                "FUN_0800177c": {
                    "modify_flag": 1,
                    "set_bit": 1,
                    "set_bit_in_register": 1,
                    "set_e000e010_bit": 2,
                    "set_flag": 6,
                    "set_flag_if_equal_to_four": 2,
                    "set_flag_if_equals_four": 1,
                    "set_flag_if_parameter_is_four": 2,
                    "set_flag_if_parameter_value_four": 1,
                    "set_flag_if_value_is_four": 1,
                    "set_flag_value": 1,
                    "set_fourth_bit_if_equals_four": 1,
                    "set_fourth_bit_if_param_equals_four": 1,
                    "set_status_flag": 1,
                    "update_data_flag": 1,
                    "update_data_register": 1,
                    "update_flag": 1,
                    "update_register": 2,
                    "update_register_flag": 1,
                    "update_register_flags": 1,
                    "update_status": 2
                },
                "_DAT_e000e010": {
                    "control_register": 1,
                    "data_register": 2,
                    "flag": 3,
                    "flag_register": 9,
                    "register": 1,
                    "register_e000e010": 1,
                    "register_flags": 1,
                    "register_value": 8,
                    "state_register": 1,
                    "status_register": 3
                },
                "param_1": {
                    "bit_number": 1,
                    "bit_to_set": 1,
                    "data_flag": 1,
                    "flag": 3,
                    "flag_value": 4,
                    "input": 1,
                    "input_value": 2,
                    "new_value": 1,
                    "parameter": 2,
                    "status": 2,
                    "value": 13
                }
            },
            "called": [],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nvoid set_flag_if_parameter_is_four_0800177c(int value)\n\n{\n  if (value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "set_flag_if_parameter_is_four_0800177c",
            "entrypoint": "0x0800177c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800177c": "set_flag_if_parameter_is_four_0800177c",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017b4": {
            "additional_data": {
                "FUN_080017b4": {
                    "handle_period_elapsed": 4,
                    "handle_period_elapsed_callback": 1,
                    "handle_tim_period_elapsed": 8,
                    "handle_tim_period_elapsed_callback": 2,
                    "handle_timeout": 1,
                    "handle_timer_callback": 1,
                    "handle_timer_interrupt": 1,
                    "handle_timer_overflow": 1,
                    "handle_timer_period_elapsed": 3,
                    "period_elapsed_callback": 1,
                    "period_elapsed_callback_handler": 1,
                    "set_timer_period": 1,
                    "update_periodic_callback": 1,
                    "update_tim_period": 1,
                    "update_timer_callback": 4
                },
                "FUN_08004f78": {
                    "clear_interrupt_flag": 1,
                    "do_something": 2,
                    "execute_additional_action": 1,
                    "execute_callback_function": 1,
                    "handle_period_elapsed": 2,
                    "handle_phase_elapsed": 1,
                    "handle_timer_event": 1,
                    "initialize_callback": 1,
                    "initialize_system": 1,
                    "initialize_tim": 1,
                    "initialize_timer": 1,
                    "perform_additional_logic": 1,
                    "perform_additional_task": 3,
                    "perform_additional_tasks": 3,
                    "perform_critical_operations": 1,
                    "perform_some_action": 1,
                    "perform_specific_action": 1,
                    "perform_task": 1,
                    "process_callback": 1,
                    "process_data_function": 1,
                    "reset_device": 1
                },
                "HAL_TIM_PeriodElapsedCallback": {
                    "handle_period_elapsed": 1,
                    "handle_period_elapsed_callback": 1,
                    "handle_tim_period_elapsed": 1,
                    "handle_timer_elapsed": 1,
                    "handle_timer_period_elapsed": 1,
                    "invoke_timer_period_elapsed_callback": 1,
                    "tim_period_elapsed_callback": 1,
                    "timer_callback": 2,
                    "timer_overflow_callback": 1,
                    "update_timer_callback": 1
                }
            },
            "called": [
                "FUN_08004f78"
            ],
            "calling": [
                "FUN_08005704"
            ],
            "code": "\nvoid handle_tim_period_elapsed_callback_080017b4(void)\n\n{\n  timer_callback(0);\n  return;\n}\n\n",
            "current_name": "handle_tim_period_elapsed_callback_080017b4",
            "entrypoint": "0x080017b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017b4": "handle_tim_period_elapsed_callback_080017b4",
                "HAL_TIM_PeriodElapsedCallback": "timer_callback"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080017c4": {
            "additional_data": {
                "FUN_080017c4": {
                    "update_bitmap": 1,
                    "update_bitmask": 4,
                    "update_bits": 4,
                    "update_control_bits": 1,
                    "update_data": 1,
                    "update_flags": 4,
                    "update_flags_and_registers": 1,
                    "update_flags_and_values": 3,
                    "update_param_bits": 1,
                    "update_param_flags": 1,
                    "update_param_values": 3,
                    "update_parameter_based_on_flag": 1,
                    "update_parameter_flags": 1,
                    "update_permissions": 1,
                    "update_settings": 1,
                    "update_states": 1,
                    "update_vector": 1
                },
                "_DAT_40010400": {
                    "register2": 1,
                    "register_bitmask1": 1
                },
                "_DAT_40010404": {
                    "register3": 1,
                    "register_bitmask2": 1
                },
                "_DAT_40010408": {
                    "register4": 1,
                    "register_bitmask3": 1
                },
                "_DAT_4001040c": {
                    "register5": 1,
                    "register_bitmask4": 1
                },
                "_DAT_40021018": {
                    "control_register1": 1,
                    "register1": 1
                },
                "iVar5": {
                    "array_index": 1,
                    "data_index": 1,
                    "index": 22,
                    "opcode_index": 1,
                    "output_id": 1,
                    "output_index": 1,
                    "register_index": 2,
                    "var_index": 1,
                    "vector_index": 1
                },
                "local_10": {
                    "bit_value": 1,
                    "bitmask_value": 1,
                    "control_bits": 1,
                    "flags_update_value": 1,
                    "new_bits": 2,
                    "new_flag": 2,
                    "new_flag_value": 1,
                    "new_parameter": 1,
                    "new_state_value": 1,
                    "new_value": 11,
                    "new_value1": 1,
                    "offset": 2,
                    "permission_value": 1,
                    "updated_value": 2,
                    "value": 2,
                    "value_offset": 1
                },
                "local_c": {
                    "bit_index": 13,
                    "bit_pos": 1,
                    "bit_position": 2,
                    "counter": 9,
                    "current_bit": 1,
                    "loop_counter": 2,
                    "new_value2": 1,
                    "param_index": 1,
                    "register_index": 1
                },
                "param_1": {
                    "bitmap": 1,
                    "bitmask": 2,
                    "bitmask1": 1,
                    "bitmask_data": 1,
                    "bits_to_update": 1,
                    "data1": 1,
                    "device_register": 1,
                    "flags": 3,
                    "flags1": 1,
                    "input_array": 2,
                    "input_flags": 1,
                    "output": 2,
                    "output_data": 1,
                    "output_params": 3,
                    "output_values": 1,
                    "output_vector": 1,
                    "permission_array": 1,
                    "register_1": 1,
                    "settings_ptr": 1,
                    "state_array1": 1,
                    "target": 2,
                    "target_flags": 1,
                    "updated_params1": 1
                },
                "param_2": {
                    "access_array": 1,
                    "bit_values": 1,
                    "bitmask2": 1,
                    "control_flags": 1,
                    "control_register": 1,
                    "data2": 1,
                    "flag_array": 1,
                    "flags": 3,
                    "flags2": 1,
                    "input": 4,
                    "input_data": 1,
                    "input_params": 3,
                    "input_values": 1,
                    "input_vector": 1,
                    "register_2": 1,
                    "registers": 1,
                    "source": 2,
                    "source_data": 1,
                    "source_flags": 1,
                    "state_array2": 1,
                    "update_array": 1,
                    "update_ptr": 1,
                    "updated_params2": 1
                },
                "puVar4": {
                    "bitmap_pointer": 1,
                    "bitmask_ptr": 3,
                    "bits_ptr": 1,
                    "device_register_pointer": 1,
                    "flag_ptr": 1,
                    "flags_pointer": 1,
                    "flags_ptr": 2,
                    "flags_update": 1,
                    "output_array": 2,
                    "output_params_index": 1,
                    "output_ptr": 5,
                    "output_vector_ptr": 1,
                    "param_pointer": 1,
                    "permission_ptr": 1,
                    "ptr": 3,
                    "state_pointer": 1,
                    "target": 1,
                    "target_ptr": 2,
                    "target_values": 1,
                    "updated_params1_ptr": 1
                },
                "uVar1": {
                    "bit": 2,
                    "bit_mask": 21,
                    "bit_shift": 1,
                    "bit_value": 2,
                    "current_bit": 1,
                    "mask": 4
                },
                "uVar2": {
                    "access_value": 1,
                    "bit": 1,
                    "bit_and_result": 1,
                    "bit_check": 5,
                    "bit_check_result": 1,
                    "bit_result": 1,
                    "bit_value": 3,
                    "bitwise_and": 1,
                    "bitwise_and_result": 1,
                    "flag": 3,
                    "flag_bit": 1,
                    "flag_comparison": 1,
                    "flag_value": 1,
                    "input_bit": 4,
                    "masked_bit": 1,
                    "register_value": 1,
                    "result": 3,
                    "source_bit": 1
                },
                "uVar3": {
                    "condition": 1,
                    "flag_type": 1,
                    "flag_value": 1,
                    "instruction": 1,
                    "op_code": 1,
                    "opcode": 14,
                    "operation": 1,
                    "param_check": 1,
                    "permission_type": 1,
                    "reg_value": 1,
                    "source_value": 1,
                    "value": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_080055f4",
                "FUN_08005680"
            ],
            "code": "\n\n\nvoid update_flags_and_values_080017c4(uint *output_params,uint *input)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  uint opcode;\n  uint *output_ptr;\n  int index;\n  uint new_value;\n  uint bit_index;\n  \n  new_value = 0;\n  bit_index = 0;\n  do {\n    if (0xf < bit_index) {\n      return;\n    }\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_check = *input & bit_mask;\n    if (bit_check == bit_mask) {\n      opcode = input[1];\n      if (opcode == 0x12) {\n        new_value = input[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          new_value = input[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_08001882;\n          if (opcode == 1) {\n            new_value = input[3];\n          }\n        }\n        else if (opcode == 3) {\n          new_value = 0;\n        }\n        else if (opcode == 0x11) {\n          new_value = input[3] + 4;\n        }\n      }\n      else if (opcode == 0x10210000) {\nLAB_08001882:\n        if (input[2] == 0) {\n          new_value = 4;\n        }\n        else if (input[2] == 1) {\n          new_value = 8;\n          output_params[4] = bit_mask;\n        }\n        else {\n          new_value = 8;\n          output_params[5] = bit_mask;\n        }\n      }\n      else if (opcode < 0x10210001) {\n        if ((opcode == 0x10110000) || (opcode == 0x10120000)) goto LAB_08001882;\n      }\n      else if (((opcode == 0x10310000) || (opcode == 0x10320000)) || (opcode == 0x10220000))\n      goto LAB_08001882;\n      if (bit_check < 0x100) {\n        bit_mask = bit_index << 2;\n        output_ptr = output_params;\n      }\n      else {\n        output_ptr = output_params + 1;\n        bit_mask = (bit_index - 8) * 4;\n      }\n      *output_ptr = *output_ptr & ~(0xf << (bit_mask & 0xff)) | new_value << (bit_mask & 0xff);\n      if ((input[1] & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        if (output_params == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (output_params == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (output_params == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (output_params == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000) =\n             index << ((bit_index & 3) << 2) |\n             ~(0xf << ((bit_index & 3) << 2)) & *(uint *)(((bit_index >> 2) + 2) * 4 + 0x40010000);\n        if ((input[1] & 0x10000) == 0) {\n          _DAT_40010400 = ~bit_check & _DAT_40010400;\n        }\n        else {\n          _DAT_40010400 = bit_check | _DAT_40010400;\n        }\n        if ((input[1] & 0x20000) == 0) {\n          _DAT_40010404 = ~bit_check & _DAT_40010404;\n        }\n        else {\n          _DAT_40010404 = bit_check | _DAT_40010404;\n        }\n        if ((input[1] & 0x100000) == 0) {\n          _DAT_40010408 = ~bit_check & _DAT_40010408;\n        }\n        else {\n          _DAT_40010408 = bit_check | _DAT_40010408;\n        }\n        if ((input[1] & 0x200000) == 0) {\n          _DAT_4001040c = ~bit_check & _DAT_4001040c;\n        }\n        else {\n          _DAT_4001040c = bit_check | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n  } while( true );\n}\n\n",
            "current_name": "update_flags_and_values_080017c4",
            "entrypoint": "0x080017c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080017c4": "update_flags_and_values_080017c4",
                "iVar5": "index",
                "local_10": "new_value",
                "local_c": "bit_index",
                "param_1": "output_params",
                "param_2": "input",
                "puVar4": "output_ptr",
                "uVar1": "bit_mask",
                "uVar2": "bit_check",
                "uVar3": "opcode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001a80": {
            "additional_data": {
                "FUN_08001a80": {
                    "convert_to_uint": 1,
                    "set_integer_value_based_on_condition": 1,
                    "set_param": 4,
                    "set_param_value": 17,
                    "update_data_value": 1,
                    "update_param": 1,
                    "update_param1_with_param2": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 1,
                    "update_user_data": 1,
                    "update_value": 1
                },
                "new_variable_name_1": {
                    "value_with_high_bits": 1
                },
                "new_variable_name_2": {
                    "value_without_high_bits": 1
                },
                "original_variable_name_1": {
                    "shifted_value": 1
                },
                "original_variable_name_2": {
                    "non_shifted_value": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 7,
                    "data": 2,
                    "data_address": 3,
                    "data_pointer": 1,
                    "obj_address": 2,
                    "object_address": 9,
                    "object_ptr": 1,
                    "param_address": 1,
                    "parameter": 1,
                    "ptr": 1,
                    "updated_value": 1,
                    "user_data": 1
                },
                "param_2": {
                    "data": 2,
                    "input_value": 2,
                    "new_data": 1,
                    "new_value": 4,
                    "param_value": 2,
                    "value": 20
                },
                "param_3": {
                    "condition": 1,
                    "flag": 6,
                    "is_extended": 1,
                    "is_large_value": 1,
                    "is_multiplied": 1,
                    "is_shifted": 18,
                    "is_zero": 1,
                    "use_extended_value": 1,
                    "use_high_bits": 1
                },
                "param_4": {
                    "updated_data": 1
                },
                "tempPointer": {
                    "temp_ptr": 1
                },
                "uint": {
                    "unsigned_int": 4,
                    "unsigned_integer": 2
                },
                "value": {
                    "new_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_080055f4"
            ],
            "code": "\nvoid set_param_value_08001a80(int object_address,ushort value,char is_shifted)\n\n{\n  if (is_shifted == '\\0') {\n    *(unsigned_int *)(object_address + 0x10) = (unsigned_int)value << 0x10;\n  }\n  else {\n    *(unsigned_int *)(object_address + 0x10) = (unsigned_int)value;\n  }\n  return;\n}\n\n",
            "current_name": "set_param_value_08001a80",
            "entrypoint": "0x08001a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001a80": "set_param_value_08001a80",
                "param_1": "object_address",
                "param_2": "value",
                "param_3": "is_shifted",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ab0": {
            "additional_data": {
                "0": {
                    "null2": 1
                },
                "0x0": {
                    "null": 1
                },
                "0x186a0": {
                    "limit4": 1
                },
                "0x186a1": {
                    "limit1": 1
                },
                "0x19": {
                    "divisor3": 1
                },
                "0x20": {
                    "value3": 1
                },
                "0x24": {
                    "value1": 1
                },
                "0x3d": {
                    "offset2": 1
                },
                "0x3e": {
                    "offset": 1
                },
                "0x3f": {
                    "offset4": 1
                },
                "0x8000": {
                    "mask3": 1
                },
                "0xc000": {
                    "mask4": 1
                },
                "0xfff": {
                    "mask2": 1
                },
                "0xfffffffe": {
                    "mask1": 1
                },
                "1": {
                    "temp2": 1
                },
                "1000": {
                    "divisor1": 1
                },
                "1999999": {
                    "limit3": 1
                },
                "2000000": {
                    "limit2": 1
                },
                "3": {
                    "divisor2": 1
                },
                "300": {
                    "value2": 1
                },
                "4": {
                    "min_value": 1
                },
                "FUC_08001cb8": {
                    "some_sub_function": 1
                },
                "FUNC_08001cb8": {
                    "func1": 1,
                    "initialize_i2_c_periph": 1,
                    "perform_additional_initialization": 1,
                    "perform_some_action": 1,
                    "reverse_bits": 1,
                    "reverse_something": 1,
                    "some_function": 1,
                    "some_other_function": 1
                },
                "FUN_08001ab0": {
                    "configure_i2_c": 1,
                    "init_i2_c": 2,
                    "initialize_device": 1,
                    "initialize_i2_c": 20,
                    "initialize_i2_c_communication": 1,
                    "initialize_i2_c_device": 3,
                    "initialize_i2_c_peripheral": 2,
                    "initialize_settings": 1
                },
                "FUN_08001cb8": {
                    "initialize_i2_c_periph": 1,
                    "initialize_i2_cgpio": 1,
                    "optional_function": 1,
                    "some_function": 1
                },
                "FUN_08003518": {
                    "calculate_rccpclk1_freq": 1,
                    "func2": 1,
                    "get_pclk1_freq": 10,
                    "hal_rcc_get_pclk1_freq": 3
                },
                "HAL_I2C_MspInit": {
                    "initialize_i2_c": 2,
                    "initialize_i2_c_hardware": 2,
                    "initialize_i2_c_msp": 1,
                    "initialize_i2_c_periph": 6,
                    "initialize_i2_c_peripheral": 5,
                    "initialize_i2_c_pin": 1,
                    "initialize_i2_cgpio": 1,
                    "initialize_i2c_msp": 1
                },
                "bVar5": {
                    "is_divider_valid": 2,
                    "is_divider_zero": 2,
                    "is_divisor_zero": 3,
                    "is_temp_value_zero": 1,
                    "is_temp_var_valid": 1,
                    "is_temp_var_zero": 1,
                    "is_temp_variable_zero": 1,
                    "is_var_valid": 1,
                    "is_var_zero": 1,
                    "is_zero": 16,
                    "is_zero_freq": 1,
                    "zero_check": 1
                },
                "cVar2": {
                    "check_value": 2,
                    "condition": 1,
                    "condition_var": 1,
                    "is_condition_met": 1,
                    "is_freq_valid": 5,
                    "is_frequency_valid": 1,
                    "is_less_than_pclk1_divisor": 1,
                    "is_pclk1_freq_valid": 1,
                    "is_pclk1_in_range": 1,
                    "is_pclk1_valid": 2,
                    "is_pclk_valid": 2,
                    "is_valid": 6,
                    "is_valid_freq": 4,
                    "valid": 1,
                    "valid_freq": 1,
                    "valid_pclk": 1
                },
                "char": {
                    "byte": 1
                },
                "param_1": {
                    "config": 1,
                    "device_config": 1,
                    "device_params": 3,
                    "i2c_config": 1,
                    "i2c_data": 1,
                    "i2c_handle": 2,
                    "i2c_param": 2,
                    "i2c_parameters": 2,
                    "i2c_params": 9,
                    "param": 4,
                    "parameter": 1,
                    "parameters": 1,
                    "peripheral_ptr": 1,
                    "settings": 1
                },
                "uVar1": {
                    "clock_freq": 1,
                    "clock_frequency": 1,
                    "frequency": 3,
                    "pclk1_freq": 16,
                    "pclk1_frequency": 1,
                    "pclk_freq": 5,
                    "pclk_frequency": 4
                },
                "uVar3": {
                    "result": 15,
                    "return_val": 4,
                    "return_value": 10,
                    "status": 1,
                    "success": 1
                },
                "uVar4": {
                    "adjusted_freq": 1,
                    "adjusted_frequency": 1,
                    "calculated_value": 1,
                    "computed_value": 1,
                    "divider": 8,
                    "divisor": 4,
                    "freq_divisor": 1,
                    "freq_value": 1,
                    "remapped_value": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp_val": 1,
                    "temp_value": 1,
                    "temp_var": 6,
                    "temp_variable": 1
                }
            },
            "called": [
                "FUN_08001cb8",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_08005348"
            ],
            "code": "\nundefined4 initialize_i2_c_device_08001ab0(uint **i2c_params)\n\n{\n  uint pclk1_freq;\n  byte is_valid;\n  undefined4 result;\n  uint divider;\n  bool is_zero;\n  \n  if (i2c_params == (uint **)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(byte *)((int)i2c_params + 0x3d) == '\\0') {\n      *(undefined *)(i2c_params + 0xf) = 0;\n      initialize_i2_c_periph(i2c_params);\n    }\n    *(undefined *)((int)i2c_params + 0x3d) = 0x24;\n    **i2c_params = **i2c_params & 0xfffffffe;\n    pclk1_freq = HAL_RCC_GetPCLK1Freq();\n    if (i2c_params[1] < (uint *)0x186a1) {\n      divider = pclk1_freq;\n      if (pclk1_freq < 2000000) {\n        divider = 1;\n      }\n      is_valid = (byte)divider;\n      if (1999999 < pclk1_freq) {\n        is_valid = '\\0';\n      }\n    }\n    else {\n      divider = pclk1_freq;\n      if (pclk1_freq < 4000000) {\n        divider = 1;\n      }\n      is_valid = (byte)divider;\n      if (3999999 < pclk1_freq) {\n        is_valid = '\\0';\n      }\n    }\n    if (is_valid == '\\0') {\n      divider = pclk1_freq / 1000000;\n      (*i2c_params)[1] = divider;\n      if ((uint *)0x186a0 < i2c_params[1]) {\n        divider = (divider * 300) / 1000;\n      }\n      (*i2c_params)[8] = divider + 1;\n      if (i2c_params[1] < (uint *)0x186a1) {\n        pclk1_freq = (pclk1_freq - 1) / (uint)((int)i2c_params[1] << 1) + 1 & 0xfff;\n        if (pclk1_freq < 4) {\n          pclk1_freq = 4;\n        }\n      }\n      else {\n        if (i2c_params[2] == (uint *)0x0) {\n          divider = (pclk1_freq - 1) / (uint)((int)i2c_params[1] * 3) + 1 & 0xfff;\n          is_zero = divider == 0;\n          if (is_zero) {\n            divider = 1;\n          }\n          is_valid = (byte)divider;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        else {\n          divider = (pclk1_freq - 1) / (uint)((int)i2c_params[1] * 0x19) + 1 & 0xfff;\n          is_zero = divider == 0;\n          if (is_zero) {\n            divider = 1;\n          }\n          is_valid = (byte)divider;\n          if (!is_zero) {\n            is_valid = '\\0';\n          }\n        }\n        if (is_valid == '\\0') {\n          if (i2c_params[2] == (uint *)0x0) {\n            pclk1_freq = (pclk1_freq - 1) / (uint)((int)i2c_params[1] * 3) + 1 & 0xfff | 0x8000;\n          }\n          else {\n            pclk1_freq = (pclk1_freq - 1) / (uint)((int)i2c_params[1] * 0x19) + 1 & 0xfff | 0xc000;\n          }\n        }\n        else {\n          pclk1_freq = 1;\n        }\n      }\n      (*i2c_params)[7] = pclk1_freq;\n      **i2c_params = (uint)i2c_params[8] | (uint)i2c_params[7];\n      (*i2c_params)[2] = (uint)i2c_params[3] | (uint)i2c_params[4];\n      (*i2c_params)[3] = (uint)i2c_params[6] | (uint)i2c_params[5];\n      **i2c_params = **i2c_params | 1;\n      i2c_params[0x10] = (uint *)0x0;\n      *(undefined *)((int)i2c_params + 0x3d) = 0x20;\n      i2c_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)i2c_params + 0x3e) = 0;\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_i2_c_device_08001ab0",
            "entrypoint": "0x08001ab0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ab0": "initialize_i2_c_device_08001ab0",
                "HAL_I2C_MspInit": "initialize_i2_c_periph",
                "bVar5": "is_zero",
                "cVar2": "is_valid",
                "char": "byte",
                "param_1": "i2c_params",
                "uVar1": "pclk1_freq",
                "uVar3": "result",
                "uVar4": "divider"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001cb8": {
            "called": [],
            "calling": [
                "FUN_08001ab0"
            ],
            "code": "\nvoid FUNC_08001cb8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001cb8",
            "entrypoint": "0x08001cb8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001cb8": "FUNC_08001cb8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001ccc": {
            "additional_data": {
                "FUN_08001ccc": {
                    "communicate_with_device": 1,
                    "handle_i2_c_request": 1,
                    "perform_i2_c_data_transfer": 2,
                    "perform_i2_c_operation": 1,
                    "perform_i2_c_transaction": 1,
                    "perform_i2_c_transfer": 1,
                    "perform_i2_c_write": 5,
                    "perform_i2_c_write_operation": 3,
                    "perform_memory_write": 2,
                    "send_data": 3,
                    "send_i2_c_data": 1,
                    "transmit_data": 1,
                    "write_data": 3,
                    "write_data_to_memory": 1,
                    "write_i2_c_data": 1,
                    "write_i2_c_memory": 1,
                    "write_to_memory": 1
                },
                "HAL_GetTick": {
                    "get_current_time": 1
                },
                "I2C_RequestMemoryWrite": {
                    "request_memory_write": 1,
                    "request_memory_write_on_i2_c": 1,
                    "send_write_request": 1
                },
                "I2C_WaitOnBTFFlagUntilTimeout": {
                    "wait_btf_flag_until_timeout": 1,
                    "wait_on_btf_flag_until_timeout": 2
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "wait_on_txe_flag_until_timeout": 2,
                    "wait_txe_flag_until_timeout": 1
                },
                "iVar1": {
                    "initial_time": 1,
                    "start_tick": 11,
                    "start_time": 18,
                    "time_start": 1
                },
                "iVar2": {
                    "current_tick": 11,
                    "current_time": 19,
                    "time_current": 1
                },
                "param_1": {
                    "data": 11,
                    "device_data": 1,
                    "i2c_data": 8,
                    "i2c_parameters": 1,
                    "i2c_params": 1,
                    "i2c_transfer_params": 1,
                    "memory": 1,
                    "memory_ptr": 2,
                    "param_array": 1,
                    "param_buffer": 2,
                    "parameter1": 1,
                    "transaction": 1
                },
                "param_2": {
                    "addr": 1,
                    "addr1": 2,
                    "address": 10,
                    "address1": 1,
                    "device_address": 7,
                    "memory_address": 1,
                    "param1": 1,
                    "param2": 3,
                    "parameter2": 1,
                    "register_addr": 1,
                    "slave_address": 3
                },
                "param_3": {
                    "addr2": 2,
                    "address2": 1,
                    "byte_count": 2,
                    "data": 1,
                    "data_length": 2,
                    "mem_address": 1,
                    "memory_address": 1,
                    "param2": 1,
                    "param3": 3,
                    "param_3": 2,
                    "parameter3": 1,
                    "reg": 3,
                    "reg_address": 2,
                    "register_address": 7,
                    "sub_address": 1,
                    "value1": 1
                },
                "param_4": {
                    "addr3": 2,
                    "address3": 1,
                    "data_length": 3,
                    "data_size": 1,
                    "len": 1,
                    "mem_add_size": 1,
                    "mem_address": 1,
                    "memory_address_size": 1,
                    "param3": 1,
                    "param4": 3,
                    "param_4": 3,
                    "parameter4": 1,
                    "reg_size": 1,
                    "reg_value": 1,
                    "register_address": 1,
                    "register_address_length": 1,
                    "register_address_size": 1,
                    "register_size": 2,
                    "slave_address": 1,
                    "sub_address_size": 1,
                    "timeout": 1,
                    "value": 1,
                    "value2": 1
                },
                "param_5": {
                    "buffer": 7,
                    "data": 9,
                    "data_array": 2,
                    "data_buffer": 5,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "param4": 1,
                    "param5": 1,
                    "parameter5": 1,
                    "payload": 1,
                    "write_buffer": 1
                },
                "param_6": {
                    "buffer_size": 1,
                    "data_buffer_size": 2,
                    "data_length": 1,
                    "data_size": 3,
                    "device_register": 1,
                    "max_attempts": 1,
                    "memory_address": 1,
                    "param": 1,
                    "param5": 1,
                    "param6": 4,
                    "param_6": 4,
                    "parameter6": 1,
                    "payload_size": 1,
                    "register_address": 1,
                    "size": 4,
                    "slave_addr": 1,
                    "slave_address": 1,
                    "timeout": 1,
                    "write_buffer_length": 1
                },
                "param_7": {
                    "base_tick": 1,
                    "param6": 1,
                    "param7": 4,
                    "param_7": 4,
                    "parameter7": 1,
                    "tick": 1,
                    "timeout": 19
                },
                "puVar4": {
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "byte_array": 1,
                    "byte_buffer": 2,
                    "byte_data": 2,
                    "byte_pointer": 5,
                    "byte_ptr": 7,
                    "current_byte": 4,
                    "data_byte_ptr": 1,
                    "data_pointer": 2,
                    "data_ptr": 5
                },
                "uVar3": {
                    "result": 25,
                    "result_code": 1,
                    "return_value": 3,
                    "status": 1,
                    "transfer_result": 1
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_08002c2e",
                "FUN_080015a0",
                "FUN_08002640"
            ],
            "calling": [
                "FUN_08004ea4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001d5e) */\n/* WARNING: Removing unreachable block (ram,0x08001d70) */\n/* WARNING: Removing unreachable block (ram,0x08001d72) */\n/* WARNING: Removing unreachable block (ram,0x08001d74) */\n\nundefined4\nperform_i2_c_write_operation_08001ccc(uint **data,undefined2 address,undefined2 register_address,undefined2 data_length,uint *data,\n            undefined2 size,undefined4 timeout)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  uint *byte_ptr;\n  \n  start_time = get_current_time();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        current_time = 0;\n        goto LAB_08001d9c;\n      }\n      current_time = get_current_time();\n    } while ((uint)(current_time - start_time) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    current_time = 3;\nLAB_08001d9c:\n    if (current_time == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x21;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = data;\n        *(undefined2 *)((int)data + 0x2a) = size;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        current_time = request_memory_write(data,address,register_address,data_length,timeout,start_time);\n        if (current_time == 0) {\n          while (*(short *)(data + 10) != 0) {\n            current_time = wait_on_txe_flag_until_timeout(data,timeout,start_time);\n            if (current_time != 0) {\n              if (data[0x10] == (uint *)0x4) {\n                **data = **data | 0x200;\n                return 1;\n              }\n              return 3;\n            }\n            byte_ptr = data[9];\n            data[9] = (uint *)((int)byte_ptr + 1);\n            (*data)[4] = (uint)*(byte *)byte_ptr;\n            *(short *)(data + 10) = *(short *)(data + 10) + -1;\n            *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            if ((((*data)[5] & 4) == 4) && (*(short *)(data + 10) != 0)) {\n              byte_ptr = data[9];\n              data[9] = (uint *)((int)byte_ptr + 1);\n              (*data)[4] = (uint)*(byte *)byte_ptr;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n            }\n          }\n          start_time = wait_on_btf_flag_until_timeout(data,timeout,start_time);\n          if (start_time == 0) {\n            **data = **data | 0x200;\n            *(undefined *)((int)data + 0x3d) = 0x20;\n            *(undefined *)((int)data + 0x3e) = 0;\n            *(undefined *)(data + 0xf) = 0;\n            result = 0;\n          }\n          else if (data[0x10] == (uint *)0x4) {\n            **data = **data | 0x200;\n            result = 1;\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "perform_i2_c_write_operation_08001ccc",
            "entrypoint": "0x08001ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ccc": "perform_i2_c_write_operation_08001ccc",
                "HAL_GetTick": "get_current_time",
                "I2C_RequestMemoryWrite": "request_memory_write",
                "I2C_WaitOnBTFFlagUntilTimeout": "wait_on_btf_flag_until_timeout",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_on_txe_flag_until_timeout",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "data",
                "param_2": "address",
                "param_3": "register_address",
                "param_4": "data_length",
                "param_5": "data",
                "param_6": "size",
                "param_7": "timeout",
                "puVar4": "byte_ptr",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f6c": {
            "additional_data": {
                "FUN_08001f6c": {
                    "execute_i2_c_request": 1,
                    "perform_i2_c_communication": 3,
                    "perform_i2_c_operation": 6,
                    "perform_i2_c_read_operation": 1,
                    "perform_i2_c_request": 1,
                    "perform_i2_c_transaction": 4,
                    "perform_memory_read": 2,
                    "perform_memory_read_operation": 4,
                    "process_i2_c_data": 1,
                    "process_i2_c_request": 3,
                    "read_and_process_data": 2,
                    "read_data_from_i2_c": 1,
                    "read_i2_c_data": 1,
                    "read_i2_c_memory": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 1,
                    "get_current_time": 2,
                    "get_tick_count": 1
                },
                "I2C_RequestMemoryRead": {
                    "request_memory_read": 4
                },
                "I2C_WaitOnRXNEFlagUntilTimeout": {
                    "wait_for_rxne_flag": 1,
                    "wait_for_rxne_flag_until_timeout": 1,
                    "wait_on_rxne_flag_until_timeout": 2
                },
                "disableIRQinterrupts": {
                    "disable_interrupts": 1,
                    "disable_irq": 1,
                    "disable_irq_interrupts": 2
                },
                "enableIRQinterrupts": {
                    "enable_interrupts": 1,
                    "enable_irq": 1,
                    "enable_irq_interrupts": 2
                },
                "iVar1": {
                    "initial_time": 1,
                    "operation_start_time": 1,
                    "start_tick": 11,
                    "start_tick_value": 1,
                    "start_time": 15,
                    "start_timestamp": 1,
                    "tick_start_value": 1
                },
                "iVar3": {
                    "current_tick": 4,
                    "current_tick_value": 1,
                    "current_time": 9,
                    "elapsed_time": 11,
                    "temp_count": 1,
                    "temp_var2": 1,
                    "tick": 1,
                    "time_elapsed": 3
                },
                "param_1": {
                    "data": 5,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "i2_c_data": 1,
                    "i2c_configuration": 1,
                    "i2c_data": 4,
                    "i2c_operation": 1,
                    "i2c_params": 4,
                    "i2c_request": 3,
                    "i2c_transaction": 1,
                    "memory_data": 1,
                    "memory_params": 1,
                    "memory_read_params": 2,
                    "operation_params": 1,
                    "request": 2,
                    "transaction_data": 2
                },
                "param_2": {
                    "address": 8,
                    "address1": 1,
                    "device_address": 6,
                    "memory_address": 2,
                    "memory_address1": 1,
                    "param1": 2,
                    "param2": 3,
                    "param_2": 1,
                    "register_address": 2,
                    "slave_address": 5
                },
                "param_3": {
                    "address2": 1,
                    "data_address": 1,
                    "data_length": 1,
                    "device_address": 1,
                    "mem_address_size": 1,
                    "memory_address": 6,
                    "memory_address1": 1,
                    "memory_address2": 1,
                    "num_bytes": 1,
                    "param2": 2,
                    "param3": 3,
                    "param_3": 1,
                    "reg": 3,
                    "reg1": 1,
                    "register_address": 5,
                    "sub_address": 2
                },
                "param_4": {
                    "address3": 1,
                    "bytes_count": 1,
                    "control_commands": 1,
                    "data": 1,
                    "data_length": 1,
                    "mem_add_size": 2,
                    "memory_address2": 1,
                    "memory_address3": 1,
                    "memory_address_size": 4,
                    "memory_type": 1,
                    "num_registers": 1,
                    "number_of_bytes": 1,
                    "param3": 2,
                    "param4": 3,
                    "param_4": 1,
                    "read_count": 1,
                    "reg2": 1,
                    "reg_address": 1,
                    "reg_size": 1,
                    "register_address": 1,
                    "register_length": 1,
                    "slave_address": 1,
                    "sub_address": 1,
                    "sub_address_size": 1
                },
                "param_5": {
                    "buf": 1,
                    "buffer": 3,
                    "data": 7,
                    "data_buffer": 14,
                    "num_bytes": 1,
                    "read_buffer": 2,
                    "request_data": 1,
                    "result": 1,
                    "rx_data": 1
                },
                "param_6": {
                    "address4": 1,
                    "buffer_size": 3,
                    "byte_count": 1,
                    "clock_hold_value": 1,
                    "data_length": 1,
                    "data_size": 6,
                    "param4": 2,
                    "param6": 3,
                    "param_6": 1,
                    "request_data_size": 1,
                    "timeout": 11
                },
                "param_7": {
                    "max_timeout": 1,
                    "operation_start_time": 1,
                    "start_tick": 3,
                    "start_time": 2,
                    "start_timestamp": 1,
                    "tick_start": 1,
                    "timeout": 20
                },
                "puVar5": {
                    "buffer": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 5,
                    "current_byte": 1,
                    "data_pointer": 7,
                    "data_ptr": 7,
                    "next_data_pointer": 1,
                    "p_buffer": 1,
                    "p_data_ptr": 1,
                    "ptr": 3,
                    "temp_buffer": 2,
                    "temp_var2": 1
                },
                "uVar2": {
                    "current_tick": 3,
                    "current_timestamp": 1,
                    "data": 1,
                    "data_size": 1,
                    "data_temp": 1,
                    "data_value": 1,
                    "num_bytes_received": 1,
                    "reg_value": 1,
                    "return_value": 1,
                    "status": 3,
                    "temp": 4,
                    "temp_value": 3,
                    "temp_var": 7,
                    "temp_var1": 1,
                    "value": 2
                },
                "uVar4": {
                    "operation_status": 1,
                    "result": 23,
                    "return_value": 7
                }
            },
            "called": [
                "FUN_08002ca8",
                "FUN_080027f4",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004ee8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080024e6) */\n/* WARNING: Removing unreachable block (ram,0x080024f8) */\n/* WARNING: Removing unreachable block (ram,0x080024fa) */\n/* WARNING: Removing unreachable block (ram,0x080024fc) */\n/* WARNING: Removing unreachable block (ram,0x08002000) */\n/* WARNING: Removing unreachable block (ram,0x08002012) */\n/* WARNING: Removing unreachable block (ram,0x08002014) */\n/* WARNING: Removing unreachable block (ram,0x08002016) */\n/* WARNING: Removing unreachable block (ram,0x080023f4) */\n/* WARNING: Removing unreachable block (ram,0x08002406) */\n/* WARNING: Removing unreachable block (ram,0x08002408) */\n/* WARNING: Removing unreachable block (ram,0x0800240a) */\n/* WARNING: Removing unreachable block (ram,0x080022d6) */\n/* WARNING: Removing unreachable block (ram,0x080022e8) */\n/* WARNING: Removing unreachable block (ram,0x080022ea) */\n/* WARNING: Removing unreachable block (ram,0x080022ec) */\n\nundefined4\nperform_i2_c_read_operation_08001f6c(uint **data,undefined2 address,undefined2 memory_address,undefined2 memory_address_size,uint *data_buffer,\n            undefined2 timeout,uint timeout)\n\n{\n  int start_time;\n  uint temp_var;\n  int elapsed_time;\n  undefined4 result;\n  uint *data_ptr;\n  \n  start_time = get_current_time();\n  if (*(char *)((int)data + 0x3d) == ' ') {\n    do {\n      if ((~(*data)[6] & 2) != 0) {\n        elapsed_time = 0;\n        goto LAB_08002040;\n      }\n      elapsed_time = get_current_time();\n    } while ((uint)(elapsed_time - start_time) < 0x1a);\n    data[0xc] = (uint *)0x0;\n    *(undefined *)((int)data + 0x3d) = 0x20;\n    *(undefined *)((int)data + 0x3e) = 0;\n    *(undefined *)(data + 0xf) = 0;\n    elapsed_time = 3;\nLAB_08002040:\n    if (elapsed_time == 0) {\n      if (*(char *)(data + 0xf) == '\\x01') {\n        result = 2;\n      }\n      else {\n        *(undefined *)(data + 0xf) = 1;\n        if ((**data & 1) != 1) {\n          **data = **data | 1;\n        }\n        **data = **data & 0xfffff7ff;\n        *(undefined *)((int)data + 0x3d) = 0x22;\n        *(undefined *)((int)data + 0x3e) = 0x40;\n        data[0x10] = (uint *)0x0;\n        data[9] = data_buffer;\n        *(undefined2 *)((int)data + 0x2a) = timeout;\n        data[0xb] = (uint *)0xffff0000;\n        *(undefined2 *)(data + 10) = *(undefined2 *)((int)data + 0x2a);\n        elapsed_time = request_memory_read(data,address,memory_address,memory_address_size,timeout,start_time);\n        if (elapsed_time == 0) {\n          if (*(short *)(data + 10) == 0) {\n            **data = **data | 0x200;\n          }\n          else if (*(short *)(data + 10) == 1) {\n            **data = **data & 0xfffffbff;\n            disable_irq_interrupts();\n            **data = **data | 0x200;\n            enable_irq_interrupts();\n          }\n          else if (*(short *)(data + 10) == 2) {\n            **data = **data | 0x800;\n            disable_irq_interrupts();\n            **data = **data & 0xfffffbff;\n            enable_irq_interrupts();\n          }\n          else {\n            **data = **data | 0x400;\n          }\n          while (*(short *)(data + 10) != 0) {\n            if (*(ushort *)(data + 10) < 4) {\n              if (*(short *)(data + 10) == 1) {\n                elapsed_time = wait_on_rxne_flag_until_timeout(data,timeout,start_time);\n                if (elapsed_time != 0) {\n                  if (data[0x10] == (uint *)0x20) {\n                    return 3;\n                  }\n                  return 1;\n                }\n                temp_var = (*data)[4];\n                data_ptr = data[9];\n                data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else if (*(short *)(data + 10) == 2) {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    elapsed_time = 0;\n                    goto LAB_080022fa;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (elapsed_time = get_current_time(), (uint)(elapsed_time - start_time) <= timeout))\n                        ));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                elapsed_time = 3;\nLAB_080022fa:\n                if (elapsed_time != 0) {\n                  return 3;\n                }\n                disable_irq_interrupts();\n                **data = **data | 0x200;\n                temp_var = (*data)[4];\n                data_ptr = data[9];\n                data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_irq_interrupts();\n                temp_var = (*data)[4];\n                data_ptr = data[9];\n                data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n              else {\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    elapsed_time = 0;\n                    goto LAB_08002418;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (elapsed_time = get_current_time(), (uint)(elapsed_time - start_time) <= timeout))\n                        ));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                elapsed_time = 3;\nLAB_08002418:\n                if (elapsed_time != 0) {\n                  return 3;\n                }\n                **data = **data & 0xfffffbff;\n                disable_irq_interrupts();\n                temp_var = (*data)[4];\n                data_ptr = data[9];\n                data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                do {\n                  if ((~(*data)[5] & 4) == 0) {\n                    elapsed_time = 0;\n                    goto LAB_0800250a;\n                  }\n                } while ((timeout == 0xffffffff) ||\n                        ((timeout != 0 && (elapsed_time = get_current_time(), (uint)(elapsed_time - start_time) <= timeout))\n                        ));\n                data[0xc] = (uint *)0x0;\n                *(undefined *)((int)data + 0x3d) = 0x20;\n                *(undefined *)((int)data + 0x3e) = 0;\n                *(undefined *)(data + 0xf) = 0;\n                elapsed_time = 3;\nLAB_0800250a:\n                if (elapsed_time != 0) {\n                  return 3;\n                }\n                **data = **data | 0x200;\n                temp_var = (*data)[4];\n                data_ptr = data[9];\n                data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n                enable_irq_interrupts();\n                temp_var = (*data)[4];\n                data_ptr = data[9];\n                data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n            else {\n              elapsed_time = wait_on_rxne_flag_until_timeout(data,timeout,start_time);\n              if (elapsed_time != 0) {\n                if (data[0x10] == (uint *)0x20) {\n                  return 3;\n                }\n                return 1;\n              }\n              temp_var = (*data)[4];\n              data_ptr = data[9];\n              data[9] = (uint *)((int)data_ptr + 1);\n              *(char *)data_ptr = (char)temp_var;\n              *(short *)(data + 10) = *(short *)(data + 10) + -1;\n              *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              if (((*data)[5] & 4) == 4) {\n                temp_var = (*data)[4];\n                data_ptr = data[9];\n                data[9] = (uint *)((int)data_ptr + 1);\n                *(char *)data_ptr = (char)temp_var;\n                *(short *)(data + 10) = *(short *)(data + 10) + -1;\n                *(short *)((int)data + 0x2a) = *(short *)((int)data + 0x2a) + -1;\n              }\n            }\n          }\n          *(undefined *)((int)data + 0x3d) = 0x20;\n          *(undefined *)((int)data + 0x3e) = 0;\n          *(undefined *)(data + 0xf) = 0;\n          result = 0;\n        }\n        else if (data[0x10] == (uint *)0x4) {\n          *(undefined *)(data + 0xf) = 0;\n          result = 1;\n        }\n        else {\n          *(undefined *)(data + 0xf) = 0;\n          result = 3;\n        }\n      }\n    }\n    else {\n      result = 2;\n    }\n  }\n  else {\n    result = 2;\n  }\n  return result;\n}\n\n",
            "current_name": "perform_i2_c_read_operation_08001f6c",
            "entrypoint": "0x08001f6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f6c": "perform_i2_c_read_operation_08001f6c",
                "HAL_GetTick": "get_current_time",
                "I2C_RequestMemoryRead": "request_memory_read",
                "I2C_WaitOnRXNEFlagUntilTimeout": "wait_on_rxne_flag_until_timeout",
                "disableIRQinterrupts": "disable_irq_interrupts",
                "enableIRQinterrupts": "enable_irq_interrupts",
                "iVar1": "start_time",
                "iVar3": "elapsed_time",
                "param_1": "data",
                "param_2": "address",
                "param_3": "memory_address",
                "param_4": "memory_address_size",
                "param_5": "data_buffer",
                "param_6": "timeout",
                "param_7": "timeout",
                "puVar5": "data_ptr",
                "uVar2": "temp_var",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002640": {
            "additional_data": {
                "FUN_080015a0": {
                    "sub_function2": 1
                },
                "FUN_08002640": {
                    "execute_i2_c_communication": 1,
                    "initialize_i2_c_communication": 1,
                    "perform_communication": 1,
                    "perform_data_transfer": 1,
                    "perform_i2_c_communication": 4,
                    "perform_i2_c_transaction": 10,
                    "perform_i2_c_transfer": 3,
                    "process_data": 1,
                    "process_i2_c_data": 1,
                    "process_i2_c_data_transmission": 1,
                    "send_data": 5,
                    "update_device_status": 1,
                    "update_flags_and_check_status": 1
                },
                "FUN_08002ad8": {
                    "sub_function3": 1
                },
                "FUN_08002bb4": {
                    "sub_function1": 1
                },
                "GOTO_POINT_0800270a": {
                    "skip_i2_c_operation": 1
                },
                "HAL_GetTick": {
                    "get_time_elapsed": 1
                },
                "I2C_WaitOnMasterAddressFlagUntilTimeout": {
                    "wait_for_address_flag": 1,
                    "wait_for_master_address_flag": 2,
                    "wait_on_master_address_flag": 3
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "wait_for_txe_flag": 3,
                    "wait_on_txe_flag": 3
                },
                "PTR_080015a0": {
                    "func2": 1
                },
                "PTR_08002ad8": {
                    "func3": 1
                },
                "PTR_08002bb4": {
                    "func1": 1
                },
                "iVar1": {
                    "error_code": 2,
                    "result": 20,
                    "status": 8
                },
                "param_1": {
                    "communication_data": 2,
                    "data": 6,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "device_data": 1,
                    "i2c_buffer": 1,
                    "i2c_data": 7,
                    "i2c_device": 1,
                    "i2c_handle": 1,
                    "i2c_params": 2,
                    "i2c_pointer": 1,
                    "i2c_transaction_data": 1,
                    "p_i2_c_buffer": 1,
                    "param_list": 1,
                    "transaction_data": 2,
                    "transaction_ptr": 1
                },
                "param_2": {
                    "address": 3,
                    "byte": 1,
                    "byte_data": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "control_byte": 6,
                    "data_byte": 1,
                    "device_address": 3,
                    "flag": 2,
                    "mode": 1,
                    "slave_address": 7,
                    "start_bit": 1,
                    "status_flag": 1
                },
                "param_3": {
                    "address": 4,
                    "address_bytes": 1,
                    "data": 5,
                    "data_byte": 2,
                    "data_segment": 1,
                    "data_short": 1,
                    "high_byte": 1,
                    "reg_address": 2,
                    "register_address": 8,
                    "short_value": 1,
                    "slave_address": 1,
                    "value": 3
                },
                "param_4": {
                    "byte_count": 1,
                    "bytes_count": 1,
                    "condition": 2,
                    "control_byte": 1,
                    "data_byte_length": 1,
                    "data_length": 8,
                    "data_size": 2,
                    "flag": 2,
                    "num_bytes": 3,
                    "number_of_bytes": 1,
                    "reg_address_size": 1,
                    "register_address_bytes": 1,
                    "register_address_size": 3,
                    "register_size": 1,
                    "transfer_type": 1,
                    "use_address": 1
                },
                "param_5": {
                    "timeout": 29,
                    "timeout_ms": 1
                },
                "param_6": {
                    "init_time": 1,
                    "initial_time": 1,
                    "start_tick": 6,
                    "start_time": 21,
                    "starting_time": 1
                },
                "uVar2": {
                    "error_code": 1,
                    "result": 7,
                    "return_code": 1,
                    "return_val": 2,
                    "return_value": 17,
                    "status": 2
                },
                "undefined4": {
                    "uint32_t": 1
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002ad8"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080026e8) */\n/* WARNING: Removing unreachable block (ram,0x080026fa) */\n/* WARNING: Removing unreachable block (ram,0x080026fc) */\n/* WARNING: Removing unreachable block (ram,0x080026fe) */\n\nuint32_t\nperform_i2_c_transaction_08002640(uint **i2c_data,byte slave_address,undefined2 register_address,short data_length,uint timeout,int start_time)\n\n{\n  int result;\n  uint32_t return_value;\n  \n  **i2c_data = **i2c_data | 0x100;\n  do {\n    if ((~(*i2c_data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_0800270a;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (result = get_time_elapsed(), (uint)(result - start_time) <= timeout))));\n  i2c_data[0xc] = (uint *)0x0;\n  *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n  *(undefined *)((int)i2c_data + 0x3e) = 0;\n  *(undefined *)(i2c_data + 0xf) = 0;\n  result = 3;\nLAB_0800270a:\n  if (result == 0) {\n    (*i2c_data)[4] = slave_address & 0xfe;\n    result = wait_on_master_address_flag(i2c_data,0x10002,timeout,start_time);\n    if (result == 0) {\n      result = wait_for_txe_flag(i2c_data,timeout,start_time,(*i2c_data)[6]);\n      if (result == 0) {\n        if (data_length == 1) {\n          (*i2c_data)[4] = (uint)(byte)register_address;\n        }\n        else {\n          (*i2c_data)[4] = (uint)(byte)((ushort)register_address >> 8);\n          result = wait_for_txe_flag(i2c_data,timeout,start_time);\n          if (result != 0) {\n            if (i2c_data[0x10] == (uint *)0x4) {\n              **i2c_data = **i2c_data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*i2c_data)[4] = (uint)(byte)register_address;\n        }\n        return_value = 0;\n      }\n      else if (i2c_data[0x10] == (uint *)0x4) {\n        **i2c_data = **i2c_data | 0x200;\n        return_value = 1;\n      }\n      else {\n        return_value = 3;\n      }\n    }\n    else if (i2c_data[0x10] == (uint *)0x4) {\n      return_value = 1;\n    }\n    else {\n      return_value = 3;\n    }\n  }\n  else {\n    return_value = 3;\n  }\n  return return_value;\n}\n\n",
            "current_name": "perform_i2_c_transaction_08002640",
            "entrypoint": "0x08002640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002640": "perform_i2_c_transaction_08002640",
                "HAL_GetTick": "get_time_elapsed",
                "I2C_WaitOnMasterAddressFlagUntilTimeout": "wait_on_master_address_flag",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_for_txe_flag",
                "iVar1": "result",
                "param_1": "i2c_data",
                "param_2": "slave_address",
                "param_3": "register_address",
                "param_4": "data_length",
                "param_5": "timeout",
                "param_6": "start_time",
                "uVar2": "return_value",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080027f4": {
            "additional_data": {
                "FNL_080015a0": {
                    "hal_get_tick": 1
                },
                "FNL_08002ad8": {
                    "i2_c_wait_on_txe_flag_until_timeout": 1
                },
                "FNL_08002bb4": {
                    "i2_c_wait_on_master_address_flag_until_timeout": 1
                },
                "FUN_080027f4": {
                    "execute_i2_c_function": 1,
                    "i2c_communication": 1,
                    "initialize_i2_c": 1,
                    "initialize_i2_c_connection": 1,
                    "perform_i2_c_communication": 3,
                    "perform_i2_c_operation": 3,
                    "perform_i2_c_transaction": 8,
                    "perform_i2_c_transfer": 2,
                    "send_data": 7,
                    "send_data_over_i2_c": 1,
                    "send_i2_c_data": 1,
                    "send_i2_c_packet": 1,
                    "update_control_register": 1
                },
                "HAL_GetTick": {
                    "get_current_time": 1,
                    "get_tick": 1
                },
                "Hal_GetTick": {
                    "get_tick": 1
                },
                "I2C_WaitOnMasterAddressFlagUntilTimeout": {
                    "wait_for_master_address_flag": 1,
                    "wait_on_master_address_flag": 1
                },
                "I2C_WaitOnTXEFlagUntilTimeout": {
                    "wait_for_txe_flag": 1,
                    "wait_on_txe_flag": 1
                },
                "iVar1": {
                    "error_code": 2,
                    "result": 19,
                    "status": 9
                },
                "param_1": {
                    "data": 6,
                    "device": 1,
                    "i2c_config": 2,
                    "i2c_connection": 1,
                    "i2c_data": 8,
                    "i2c_device": 5,
                    "i2c_handle": 1,
                    "i2c_params": 5,
                    "ptr_param": 1
                },
                "param_2": {
                    "address": 3,
                    "byte_data": 1,
                    "byte_val": 2,
                    "chip_address": 1,
                    "command": 3,
                    "command_byte": 1,
                    "control_byte": 2,
                    "control_flag": 1,
                    "device_address": 4,
                    "flag": 1,
                    "flags": 2,
                    "i2c_address": 1,
                    "register_address": 1,
                    "slave_address": 7
                },
                "param_3": {
                    "address": 5,
                    "byte_code": 1,
                    "control_data": 1,
                    "data": 6,
                    "data_byte": 1,
                    "device_address": 1,
                    "memory_address": 1,
                    "param": 1,
                    "reg_address": 1,
                    "register": 1,
                    "register_address": 9,
                    "short_val": 1,
                    "value": 1
                },
                "param_4": {
                    "byte_count": 1,
                    "byte_to_write": 1,
                    "data": 6,
                    "data_length": 7,
                    "data_size": 5,
                    "flag": 2,
                    "num_bytes": 1,
                    "number_of_bytes": 1,
                    "reg_data": 1,
                    "register_address": 1,
                    "register_value": 2,
                    "short_val": 1,
                    "size": 1
                },
                "param_5": {
                    "timeout": 29,
                    "timeout_ms": 1
                },
                "param_6": {
                    "start_tick": 5,
                    "start_time": 25
                },
                "uVar2": {
                    "error_code": 2,
                    "result": 11,
                    "return_val": 2,
                    "return_value": 7,
                    "status": 8
                }
            },
            "called": [
                "FUN_08002bb4",
                "FUN_080015a0",
                "FUN_08002ad8"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080028ae) */\n/* WARNING: Removing unreachable block (ram,0x080028c0) */\n/* WARNING: Removing unreachable block (ram,0x080028c2) */\n/* WARNING: Removing unreachable block (ram,0x080028c4) */\n/* WARNING: Removing unreachable block (ram,0x08002a6c) */\n/* WARNING: Removing unreachable block (ram,0x08002a7e) */\n/* WARNING: Removing unreachable block (ram,0x08002a80) */\n/* WARNING: Removing unreachable block (ram,0x08002a82) */\n\nundefined4\nsend_data_over_i2_c_080027f4(uint **i2c_data,byte slave_address,undefined2 register_address,short data_length,uint timeout,int start_time)\n\n{\n  int result;\n  undefined4 result;\n  \n  **i2c_data = **i2c_data | 0x400;\n  **i2c_data = **i2c_data | 0x100;\n  do {\n    if ((~(*i2c_data)[5] & 1) == 0) {\n      result = 0;\n      goto LAB_080028d2;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (result = get_tick(), (uint)(result - start_time) <= timeout))));\n  i2c_data[0xc] = (uint *)0x0;\n  *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n  *(undefined *)((int)i2c_data + 0x3e) = 0;\n  *(undefined *)(i2c_data + 0xf) = 0;\n  result = 3;\nLAB_080028d2:\n  if (result == 0) {\n    (*i2c_data)[4] = slave_address & 0xfe;\n    result = wait_for_master_address_flag(i2c_data,0x10002,timeout,start_time);\n    if (result == 0) {\n      result = wait_for_txe_flag(i2c_data,timeout,start_time,(*i2c_data)[6]);\n      if (result == 0) {\n        if (data_length == 1) {\n          (*i2c_data)[4] = (uint)(byte)register_address;\n        }\n        else {\n          (*i2c_data)[4] = (uint)(byte)((ushort)register_address >> 8);\n          result = wait_for_txe_flag(i2c_data,timeout,start_time);\n          if (result != 0) {\n            if (i2c_data[0x10] == (uint *)0x4) {\n              **i2c_data = **i2c_data | 0x200;\n              return 1;\n            }\n            return 3;\n          }\n          (*i2c_data)[4] = (uint)(byte)register_address;\n        }\n        result = wait_for_txe_flag(i2c_data,timeout,start_time);\n        if (result == 0) {\n          **i2c_data = **i2c_data | 0x100;\n          do {\n            if ((~(*i2c_data)[5] & 1) == 0) {\n              result = 0;\n              goto LAB_08002a90;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (result = get_tick(), (uint)(result - start_time) <= timeout))));\n          i2c_data[0xc] = (uint *)0x0;\n          *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n          *(undefined *)((int)i2c_data + 0x3e) = 0;\n          *(undefined *)(i2c_data + 0xf) = 0;\n          result = 3;\nLAB_08002a90:\n          if (result == 0) {\n            (*i2c_data)[4] = (uint)(slave_address | 1);\n            result = wait_for_master_address_flag(i2c_data,0x10002,timeout,start_time);\n            if (result == 0) {\n              result = 0;\n            }\n            else if (i2c_data[0x10] == (uint *)0x4) {\n              result = 1;\n            }\n            else {\n              result = 3;\n            }\n          }\n          else {\n            result = 3;\n          }\n        }\n        else if (i2c_data[0x10] == (uint *)0x4) {\n          **i2c_data = **i2c_data | 0x200;\n          result = 1;\n        }\n        else {\n          result = 3;\n        }\n      }\n      else if (i2c_data[0x10] == (uint *)0x4) {\n        **i2c_data = **i2c_data | 0x200;\n        result = 1;\n      }\n      else {\n        result = 3;\n      }\n    }\n    else if (i2c_data[0x10] == (uint *)0x4) {\n      result = 1;\n    }\n    else {\n      result = 3;\n    }\n  }\n  else {\n    result = 3;\n  }\n  return result;\n}\n\n",
            "current_name": "send_data_over_i2_c_080027f4",
            "entrypoint": "0x080027f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080027f4": "send_data_over_i2_c_080027f4",
                "HAL_GetTick": "get_tick",
                "I2C_WaitOnMasterAddressFlagUntilTimeout": "wait_for_master_address_flag",
                "I2C_WaitOnTXEFlagUntilTimeout": "wait_for_txe_flag",
                "iVar1": "result",
                "param_1": "i2c_data",
                "param_2": "slave_address",
                "param_3": "register_address",
                "param_4": "data_length",
                "param_5": "timeout",
                "param_6": "start_time",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad8": {
            "additional_data": {
                "FUN_080015a0": {
                    "initialize": 1
                },
                "FUN_08002ad8": {
                    "check_and_modify": 1,
                    "check_and_modify_data": 1,
                    "check_and_modify_status": 1,
                    "check_and_modify_value": 1,
                    "check_and_set_flags": 1,
                    "check_and_update_flag": 1,
                    "check_and_update_flags": 3,
                    "check_and_update_param": 2,
                    "check_and_update_params": 1,
                    "check_and_update_permission": 1,
                    "check_and_update_permissions": 1,
                    "check_condition": 1,
                    "check_condition_and_set_flags": 1,
                    "check_condition_and_update": 2,
                    "check_conditions": 2,
                    "check_conditions_and_update": 1,
                    "check_flag_validity": 1,
                    "check_flags": 1,
                    "check_input_validity": 1,
                    "check_parameter_validity": 1,
                    "check_status_and_update": 1,
                    "perform_operation": 1,
                    "process_params": 1,
                    "validate_and_configure": 1,
                    "validate_permissions": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 2,
                    "get_current_time": 3
                },
                "bVar4": {
                    "flag_set": 1,
                    "has_permission": 1,
                    "is_condition_true": 1,
                    "is_modified": 2,
                    "is_non_zero": 6,
                    "is_nonzero": 6,
                    "is_not_zero": 1,
                    "is_permission_set": 1,
                    "is_processed": 1,
                    "is_set": 3,
                    "is_updated": 1,
                    "is_value_non_zero": 2,
                    "is_zero": 2,
                    "non_zero_flag": 1,
                    "non_zero_value": 1,
                    "value_updated": 1
                },
                "cVar2": {
                    "char_value": 1,
                    "condition_met": 1,
                    "condition_result": 1,
                    "flag": 3,
                    "flag_check": 1,
                    "flag_value": 1,
                    "is_modified": 1,
                    "is_valid": 1,
                    "permission_flag": 1,
                    "result": 14,
                    "result_char": 3,
                    "status_char": 1,
                    "valid_flag": 1,
                    "value_to_check": 1
                },
                "iVar1": {
                    "current_tick": 9,
                    "current_time": 17,
                    "elapsed_time": 2,
                    "tick": 1,
                    "tick_difference": 1,
                    "time_diff": 1
                },
                "param_1": {
                    "array_pointer": 1,
                    "config": 1,
                    "config_params": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "flag_data": 1,
                    "flags": 2,
                    "input_array": 2,
                    "input_data": 1,
                    "input_parameters": 1,
                    "input_params": 4,
                    "param_array": 4,
                    "param_list": 1,
                    "param_pointer": 1,
                    "parameters": 1,
                    "params": 1,
                    "permissions": 2,
                    "pointer": 1,
                    "pointer_array": 3,
                    "status": 1
                },
                "param_2": {
                    "condition1": 1,
                    "flag": 5,
                    "flag_value": 1,
                    "flags": 3,
                    "input1": 1,
                    "input_param": 1,
                    "input_value": 2,
                    "param_flag": 1,
                    "param_value": 1,
                    "user_id": 1,
                    "value": 12,
                    "value1": 1,
                    "value_1": 1
                },
                "param_3": {
                    "condition2": 1,
                    "input2": 1,
                    "max_value": 1,
                    "threshold": 1,
                    "time_limit": 1,
                    "timeout": 23,
                    "timer": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_4": {
                    "base_time": 1,
                    "current_tick": 1,
                    "current_time": 1,
                    "input3": 1,
                    "start": 1,
                    "start_tick": 5,
                    "start_time": 19,
                    "value3": 1,
                    "value_3": 1
                },
                "uVar3": {
                    "flag_result": 1,
                    "masked_flag": 1,
                    "masked_flags": 2,
                    "masked_input": 1,
                    "masked_value": 9,
                    "modified_input": 1,
                    "modified_value": 1,
                    "new_value": 1,
                    "permission_mask": 2,
                    "processed_value": 1,
                    "temp": 4,
                    "temp_value": 3,
                    "temp_var": 1,
                    "updated_value": 2,
                    "value": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "code": "\nundefined4 check_and_update_flags_08002ad8(uint **input_params,uint value,uint timeout,int start_time)\n\n{\n  int current_time;\n  char result;\n  uint masked_value;\n  bool is_non_zero;\n  \n  do {\n    if ((value >> 0x10 & 0xff) == 1) {\n      masked_value = value & ~(*input_params)[5] & 0xffff;\n      is_non_zero = masked_value != 0;\n      if (is_non_zero) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_non_zero) {\n        result = '\\0';\n      }\n    }\n    else {\n      masked_value = value & ~(*input_params)[6] & 0xffff;\n      is_non_zero = masked_value != 0;\n      if (is_non_zero) {\n        masked_value = 1;\n      }\n      result = (char)masked_value;\n      if (!is_non_zero) {\n        result = '\\0';\n      }\n    }\n    if (result == '\\0') {\n      return 0;\n    }\n    if (((*input_params)[5] & 0x400) == 0x400) {\n      **input_params = **input_params | 0x200;\n      (*input_params)[5] = 0xfffffbff;\n      input_params[0x10] = (uint *)0x4;\n      input_params[0xc] = (uint *)0x0;\n      *(undefined *)((int)input_params + 0x3d) = 0x20;\n      *(undefined *)(input_params + 0xf) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout))));\n  input_params[0xc] = (uint *)0x0;\n  *(undefined *)((int)input_params + 0x3d) = 0x20;\n  *(undefined *)(input_params + 0xf) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_and_update_flags_08002ad8",
            "entrypoint": "0x08002ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad8": "check_and_update_flags_08002ad8",
                "HAL_GetTick": "get_current_time",
                "bVar4": "is_non_zero",
                "cVar2": "result",
                "iVar1": "current_time",
                "param_1": "input_params",
                "param_2": "value",
                "param_3": "timeout",
                "param_4": "start_time",
                "uVar3": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002bb4": {
            "additional_data": {
                "FUN_080015a0": {
                    "get_current_tick": 1,
                    "get_elapsed_time": 1,
                    "get_system_tick": 1,
                    "get_tick_count": 2,
                    "hal_get_tick": 12
                },
                "FUN_08002bb4": {
                    "check_acknowledge": 1,
                    "check_communication": 1,
                    "check_communication_status": 1,
                    "check_data_validity": 1,
                    "check_i2_c_ack": 1,
                    "check_i2_c_acknowledge": 6,
                    "check_i2_c_acknowledgement": 3,
                    "check_i2_c_acknowledgment": 2,
                    "check_i2_c_communication": 2,
                    "check_i2_c_status": 10,
                    "check_transmission_timeout": 1,
                    "handle_i2_c_operation": 1,
                    "process_i2_c_data": 1
                },
                "FUN_08002d3c": {
                    "check_acknowledge_failed": 1,
                    "i2_c_is_acknowledge_failed": 12,
                    "is_acknowledge_failed": 4
                },
                "HAL_GetTick": {
                    "current_tick": 1,
                    "get_current_tick": 8,
                    "get_current_time": 2
                },
                "I2C_IsAcknowledgeFailed": {
                    "check_acknowledge": 2,
                    "check_acknowledge_failed": 1,
                    "is_acknowledge_failed": 6,
                    "is_acknowledgement_failed": 1,
                    "is_i2_c_acknowledge_failed": 1
                },
                "PTR_FUN_08002d3c": {
                    "is_acknowledge_failed": 1
                },
                "iVar1": {
                    "acknowledge_failed": 11,
                    "acknowledge_result": 2,
                    "acknowledgement_failed": 1,
                    "is_ack_failed": 3,
                    "is_acknowledge_failed": 12,
                    "is_acknowledge_failed_result": 1
                },
                "param_1": {
                    "address": 1,
                    "buffer": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "device": 5,
                    "device_parameters": 1,
                    "device_register": 1,
                    "i2_c_data": 1,
                    "i2_c_register": 1,
                    "i2c_buffer": 3,
                    "i2c_data": 5,
                    "i2c_interface": 1,
                    "i2c_params": 1,
                    "i2c_ptr": 2,
                    "i2c_register": 2,
                    "i2c_status": 3
                },
                "param_2": {
                    "elapsed_time": 1,
                    "time_limit": 1,
                    "timeout": 27,
                    "timeout_ms": 1,
                    "timestamp": 1
                },
                "param_3": {
                    "current_tick": 1,
                    "init_tick": 1,
                    "prev_tick": 1,
                    "previous_time": 1,
                    "start_tick": 13,
                    "start_time": 14
                }
            },
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc",
                "FUN_080027f4",
                "FUN_08002640"
            ],
            "code": "\nundefined4 check_i2_c_status_08002bb4(int *i2c_data,uint timeout,int start_time)\n\n{\n  int is_acknowledge_failed;\n  \n  while( true ) {\n    if ((*(uint *)(*i2c_data + 0x14) & 0x80) == 0x80) {\n      return 0;\n    }\n    is_acknowledge_failed = is_acknowledge_failed(i2c_data);\n    if (is_acknowledge_failed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (is_acknowledge_failed = get_current_tick(), timeout < (uint)(is_acknowledge_failed - start_time))))) {\n      i2c_data[0x10] = i2c_data[0x10] | 0x20;\n      i2c_data[0xc] = 0;\n      *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n      *(undefined *)(i2c_data + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_i2_c_status_08002bb4",
            "entrypoint": "0x08002bb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002bb4": "check_i2_c_status_08002bb4",
                "HAL_GetTick": "get_current_tick",
                "I2C_IsAcknowledgeFailed": "is_acknowledge_failed",
                "iVar1": "is_acknowledge_failed",
                "param_1": "i2c_data",
                "param_2": "timeout",
                "param_3": "start_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c2e": {
            "additional_data": {
                "FUN_080015a0": {
                    "get_current_tick": 1,
                    "get_current_time": 1,
                    "get_system_tick": 2,
                    "get_tick": 3,
                    "get_tick_count": 1,
                    "hal_get_tick": 20
                },
                "FUN_08002c2e": {
                    "check_and_handle_i2_c_acknowledge": 1,
                    "check_delay_and_acknowledge": 1,
                    "check_i2_c_acknowledge": 14,
                    "check_i2_c_acknowledgement": 1,
                    "check_i2_c_status": 12,
                    "check_transmission_status": 2
                },
                "FUN_08002d3c": {
                    "i2_c_is_acknowledge_failed": 20,
                    "is_acknowledge_failed": 8
                },
                "HAL_GetTick": {
                    "get_current_tick": 2
                },
                "I2C_IsAcknowledgeFailed": {
                    "check_i2_c_acknowledge_failed": 1,
                    "is_acknowledge_failed": 1
                },
                "iVar1": {
                    "ack_failed": 2,
                    "acknowledge_failed": 12,
                    "is_ack_failed": 2,
                    "is_acknowledge_failed": 15
                },
                "param_1": {
                    "data": 3,
                    "data_buffer": 1,
                    "device_info": 1,
                    "i2_c": 1,
                    "i2c_buffer": 1,
                    "i2c_data": 7,
                    "i2c_handle": 1,
                    "i2c_params": 3,
                    "i2c_pointer": 2,
                    "i2c_ptr": 1,
                    "i2c_register": 1,
                    "i2c_registers": 1,
                    "i2c_status": 5,
                    "i2c_status_array": 1,
                    "transmission_status": 2
                },
                "param_2": {
                    "current_tick": 1,
                    "time_limit": 2,
                    "time_out": 1,
                    "timeout": 27
                },
                "param_3": {
                    "previous_tick": 1,
                    "previous_time": 1,
                    "start_tick": 11,
                    "start_ticks": 1,
                    "start_time": 17
                }
            },
            "called": [
                "FUN_08002d3c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001ccc"
            ],
            "code": "\nundefined4 check_and_handle_i2_c_acknowledge_08002c2e(int *i2c_data,uint timeout,int start_time)\n\n{\n  int is_acknowledge_failed;\n  \n  while( true ) {\n    if ((*(uint *)(*i2c_data + 0x14) & 4) == 4) {\n      return 0;\n    }\n    is_acknowledge_failed = is_acknowledge_failed(i2c_data);\n    if (is_acknowledge_failed != 0) break;\n    if ((timeout != 0xffffffff) &&\n       ((timeout == 0 || (is_acknowledge_failed = get_current_tick(), timeout < (uint)(is_acknowledge_failed - start_time))))) {\n      i2c_data[0x10] = i2c_data[0x10] | 0x20;\n      i2c_data[0xc] = 0;\n      *(undefined *)((int)i2c_data + 0x3d) = 0x20;\n      *(undefined *)(i2c_data + 0xf) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_handle_i2_c_acknowledge_08002c2e",
            "entrypoint": "0x08002c2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c2e": "check_and_handle_i2_c_acknowledge_08002c2e",
                "HAL_GetTick": "get_current_tick",
                "I2C_IsAcknowledgeFailed": "is_acknowledge_failed",
                "iVar1": "is_acknowledge_failed",
                "param_1": "i2c_data",
                "param_2": "timeout",
                "param_3": "start_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ca8": {
            "additional_data": {
                "0": {
                    "zero": 1
                },
                "0x10": {
                    "flag_2": 1
                },
                "0x40": {
                    "flag_1": 1
                },
                "0xffffffef": {
                    "new_flag_value": 1
                },
                "FUN_080015a0": {
                    "get_tick": 1,
                    "initialize_device": 1
                },
                "FUN_08002ca8": {
                    "check_and_handle_timeout": 1,
                    "check_and_modify_flags": 1,
                    "check_and_modify_params": 1,
                    "check_and_modify_status": 1,
                    "check_and_reset": 1,
                    "check_and_reset_flags": 1,
                    "check_and_return_status": 1,
                    "check_status": 2,
                    "check_status_and_timeout": 1,
                    "check_status_and_update": 1,
                    "check_time_and_status": 1,
                    "check_timeout": 7,
                    "check_timeout_and_flags": 3,
                    "check_timeout_and_handle_flags": 1,
                    "check_timeout_and_set_flags": 1,
                    "check_timeout_and_set_status": 1,
                    "check_timeout_and_status": 1,
                    "check_timeout_and_update_flags": 1,
                    "check_timeout_status": 1,
                    "check_timer_status": 1,
                    "handle_timeout": 1,
                    "update_status": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 2,
                    "get_current_time": 1
                },
                "PTR_FUN_080015a0": {
                    "initialize_function": 1
                },
                "fun_080015a0": {
                    "initialize": 1
                },
                "iVar1": {
                    "current_tick": 21,
                    "current_time": 8,
                    "elapsed_time": 1,
                    "tick_difference": 1
                },
                "param_1": {
                    "array": 2,
                    "data": 8,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "device_state": 1,
                    "device_status": 1,
                    "device_struct": 1,
                    "flag_array": 1,
                    "flags": 1,
                    "input_data": 1,
                    "pointer": 1,
                    "state": 1,
                    "status": 3,
                    "status_array": 3,
                    "status_pointer": 1,
                    "status_ptr": 3
                },
                "param_2": {
                    "count": 1,
                    "time_limit": 1,
                    "timeout": 28,
                    "timeout_duration": 1
                },
                "param_3": {
                    "current_tick": 1,
                    "initial_time": 2,
                    "previous_time": 4,
                    "start_tick": 7,
                    "start_time": 16,
                    "threshold": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08001f6c"
            ],
            "code": "\nundefined4 check_timeout_and_update_flags_08002ca8(int *data,uint timeout,int start_time)\n\n{\n  int current_tick;\n  \n  while( true ) {\n    if ((*(uint *)(*data + 0x14) & 0x40) == 0x40) {\n      return 0;\n    }\n    if ((*(uint *)(*data + 0x14) & 0x10) == 0x10) break;\n    if ((timeout == 0) || (current_tick = get_current_tick(), timeout < (uint)(current_tick - start_time))) {\n      data[0x10] = data[0x10] | 0x20;\n      *(undefined *)((int)data + 0x3d) = 0x20;\n      *(undefined *)(data + 0xf) = 0;\n      return 3;\n    }\n  }\n  *(undefined4 *)(*data + 0x14) = 0xffffffef;\n  data[0x10] = 0;\n  data[0xc] = 0;\n  *(undefined *)((int)data + 0x3d) = 0x20;\n  *(undefined *)(data + 0xf) = 0;\n  return 1;\n}\n\n",
            "current_name": "check_timeout_and_update_flags_08002ca8",
            "entrypoint": "0x08002ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ca8": "check_timeout_and_update_flags_08002ca8",
                "HAL_GetTick": "get_current_tick",
                "iVar1": "current_tick",
                "param_1": "data",
                "param_2": "timeout",
                "param_3": "start_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d3c": {
            "additional_data": {
                "0x20": {
                    "new_value": 1
                },
                "0x400": {
                    "condition_value": 1,
                    "desired_flag": 1,
                    "flag_mask": 2
                },
                "FUN_08002d3c": {
                    "check_and_modify_data": 1,
                    "check_and_modify_flags": 1,
                    "check_and_set_permissions": 1,
                    "check_flag": 11,
                    "check_flag_and_set_defaults": 1,
                    "check_flag_status": 10,
                    "check_flagged_value": 1,
                    "reverse_check_flag": 1,
                    "set_flag_if_condition_met": 1,
                    "update_flag": 1,
                    "update_flags_and_values": 1,
                    "update_status": 1
                },
                "bVar1": {
                    "has_flag": 4,
                    "is_flag_set": 27
                },
                "param_1": {
                    "buffer": 1,
                    "data": 5,
                    "data_pointer": 1,
                    "flag": 3,
                    "flag_array": 1,
                    "flag_pointer": 2,
                    "flag_ptr": 8,
                    "flag_status": 2,
                    "flags": 2,
                    "input": 2,
                    "parameter": 1,
                    "pointer": 1,
                    "ptr_array": 1,
                    "status_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002bb4",
                "FUN_08002c2e"
            ],
            "code": "\nbool check_flag_status_08002d3c(int *flag_ptr)\n\n{\n  bool is_flag_set;\n  \n  is_flag_set = (*(uint *)(*flag_ptr + 0x14) & 0x400) == 0x400;\n  if (is_flag_set) {\n    *(undefined4 *)(*flag_ptr + 0x14) = 0xfffffbff;\n    flag_ptr[0x10] = 4;\n    flag_ptr[0xc] = 0;\n    *(undefined *)((int)flag_ptr + 0x3d) = 0x20;\n    *(undefined *)(flag_ptr + 0xf) = 0;\n  }\n  return is_flag_set;\n}\n\n",
            "current_name": "check_flag_status_08002d3c",
            "entrypoint": "0x08002d3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d3c": "check_flag_status_08002d3c",
                "bVar1": "is_flag_set",
                "param_1": "flag_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d8a": {
            "called": [],
            "calling": [
                "FUN_080014f0"
            ],
            "code": "\nvoid FUNC_08002d8a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002d8a",
            "entrypoint": "0x08002d8a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002d8a": "FUNC_08002d8a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002d98": {
            "additional_data": {
                "FUN_080015a0": {
                    "helper_function1": 1,
                    "initialize_variable": 1
                },
                "FUN_08002d98": {
                    "check_and_control": 2,
                    "check_and_control_devices": 1,
                    "check_conditions_and_delay": 1,
                    "check_flags": 1,
                    "check_status": 2,
                    "handle_protocol": 1,
                    "perform_action": 1,
                    "process_flags": 2,
                    "process_function": 1,
                    "set_control_register": 1,
                    "update_config": 1
                },
                "FUN_08003568": {
                    "helper_function2": 1,
                    "perform_operation": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 3,
                    "get_current_time": 10,
                    "get_elapsed_time": 1,
                    "get_tick": 1,
                    "get_tick_count": 2,
                    "get_ticks": 2
                },
                "RCC_Delay": {
                    "delay": 7,
                    "delay_execution": 1,
                    "delay_function": 2,
                    "delay_milliseconds": 1
                },
                "_DAT_40007000": {
                    "device_config": 1,
                    "device_control": 1,
                    "device_status": 1,
                    "device_status5": 1,
                    "hardware_register": 1,
                    "other_register": 1,
                    "register4": 2,
                    "register5": 1,
                    "register7": 1,
                    "register_5": 1,
                    "register_7": 3,
                    "register_d": 1,
                    "some_register": 1
                },
                "_DAT_40021000": {
                    "control_register": 3,
                    "device_status8": 1,
                    "hardware_status": 1,
                    "register10": 1,
                    "register2": 3,
                    "register8": 1,
                    "register_10": 1,
                    "register_2": 2,
                    "register_8": 1,
                    "register_b": 1,
                    "register_value2": 2,
                    "system_control": 1,
                    "yet_another_hardware_register_again": 1
                },
                "_DAT_40021004": {
                    "config_control": 1,
                    "config_register": 1,
                    "device_status7": 1,
                    "hardware_config": 1,
                    "hardware_status2": 1,
                    "register1": 2,
                    "register11": 1,
                    "register7": 2,
                    "register_1": 2,
                    "register_14": 1,
                    "register_7": 1,
                    "register_a": 1,
                    "register_value1": 2,
                    "register_value_yet_again": 1,
                    "status_register": 1
                },
                "_DAT_4002101c": {
                    "another_register": 1,
                    "device_config": 1,
                    "device_status": 2,
                    "device_status4": 1,
                    "one_more_register": 1,
                    "register5": 1,
                    "register6": 3,
                    "register_4": 1,
                    "register_6": 3,
                    "register_c": 1,
                    "some_other_register": 1
                },
                "_DAT_40021020": {
                    "device_config": 1,
                    "device_control": 2,
                    "device_status3": 1,
                    "hardware_register_one_more_time": 1,
                    "one_more_register": 1,
                    "register5": 1,
                    "register6": 1,
                    "register7": 1,
                    "register8": 1,
                    "register_6": 1,
                    "register_8": 3,
                    "register_e": 1,
                    "yet_another_register": 1
                },
                "_DAT_40021024": {
                    "another_register_value": 1,
                    "device_status6": 1,
                    "flag_b": 1,
                    "hardware_control": 1,
                    "other_status_register": 1,
                    "rcc_status": 1,
                    "register3": 3,
                    "register4": 1,
                    "register_3": 2,
                    "register_5": 2,
                    "register_f": 1,
                    "yet_another_register": 1
                },
                "_DAT_42420000": {
                    "data1": 1,
                    "data_value": 1,
                    "flag1": 2,
                    "flag_1": 1,
                    "flag_a": 1,
                    "register0": 1,
                    "register3": 1,
                    "register_3": 2,
                    "register_4": 1,
                    "register_g": 1,
                    "some_register": 1,
                    "unknown_flag1": 1
                },
                "_DAT_42420060": {
                    "data3": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag_3": 1,
                    "flag_d": 1,
                    "register12": 1,
                    "register2": 1,
                    "register8": 1,
                    "register_15": 1,
                    "register_9": 1,
                    "register_h": 1,
                    "unknown_flag2": 1,
                    "yet_another_data_value": 1
                },
                "_DAT_42420480": {
                    "another_data_value": 1,
                    "another_register2": 1,
                    "data2": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "flag_c": 1,
                    "register1": 1,
                    "register4": 1,
                    "register5": 1,
                    "register_4": 2,
                    "register_5": 1
                },
                "bVar4": {
                    "condition": 1,
                    "enable_flag": 1,
                    "flag": 3,
                    "is_bit_clear": 2,
                    "is_bit_cleared": 1,
                    "is_bit_set": 2,
                    "is_condition_met": 5,
                    "is_condition_satisfied": 1,
                    "is_condition_true": 2,
                    "is_flag_set": 11
                },
                "iVar1": {
                    "current_time": 1,
                    "initial_time": 1,
                    "initial_timestamp": 1,
                    "start": 1,
                    "start_tick": 1,
                    "start_time": 24,
                    "tick_start": 2
                },
                "iVar2": {
                    "curr_time": 1,
                    "current": 1,
                    "current_tick": 2,
                    "current_time": 23,
                    "current_timestamp": 1,
                    "end_time": 1,
                    "new_time": 1,
                    "tick_current": 1
                },
                "param_1": {
                    "config": 1,
                    "control_bits": 1,
                    "device_flags": 1,
                    "flags": 5,
                    "input": 2,
                    "input_array": 1,
                    "input_data": 3,
                    "input_params": 3,
                    "param": 3,
                    "parameters": 6,
                    "params": 2,
                    "status": 1,
                    "status_flags": 1
                },
                "param_1_1": {
                    "value1": 1
                },
                "param_1_5": {
                    "value2": 1
                },
                "param_1_8": {
                    "value3": 1
                },
                "param_1_9": {
                    "value4": 1
                },
                "register_2_2": {
                    "delay_flag2": 1
                },
                "register_2_20000": {
                    "delay_flag": 1
                },
                "return": {
                    "result": 2
                },
                "uVar3": {
                    "result": 17,
                    "return_value": 6
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [
                "FUN_080015a0",
                "FUN_08003568"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 check_and_control_devices_08002d98(unsigned_int *parameters)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  bool is_flag_set;\n  \n  if ((*parameters & 1) != 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0x10000)))) {\n      if (((_DAT_40021000 & 0x20000) != 0) && (parameters[1] == 0)) {\n        result 1;\n      }\n    }\n    else {\n      if (parameters[1] == 0x10000) {\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else if (parameters[1] == 0) {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      else if (parameters[1] == 0x50000) {\n        _DAT_40021000 = _DAT_40021000 | 0x50000;\n      }\n      else {\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      if (parameters[1] == 0) {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) != 0) {\n          current_time = get_current_time();\n          if (100 < (unsigned_int)(current_time - start_time)) {\n            result 3;\n          }\n        }\n      }\n      else {\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x20000) == 0) {\n          current_time = get_current_time();\n          if (100 < (unsigned_int)(current_time - start_time)) {\n            result 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((_DAT_40021004 & 0x10000) == 0)))) {\n      if (((_DAT_40021000 & 2) != 0) && (parameters[4] != 1)) {\n        result 1;\n      }\n      _DAT_40021000 = parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n    else if (parameters[4] == 0) {\n      _DAT_42420000 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (unsigned_int)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420000 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021000 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (unsigned_int)(current_time - start_time)) {\n          result 3;\n        }\n      }\n      _DAT_40021000 = parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n    }\n  }\n  if ((*parameters & 8) != 0) {\n    if (parameters[6] == 0) {\n      _DAT_42420480 = 0;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) != 0) {\n        current_time = get_current_time();\n        if (2 < (unsigned_int)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    else {\n      _DAT_42420480 = 1;\n      start_time = get_current_time();\n      while ((_DAT_40021024 & 2) == 0) {\n        current_time = get_current_time();\n        if (2 < (unsigned_int)(current_time - start_time)) {\n          result 3;\n        }\n      }\n      delay(1);\n    }\n  }\n  if ((*parameters & 4) != 0) {\n    is_flag_set = (_DAT_4002101c & 0x10000000) == 0;\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c | 0x10000000;\n    }\n    if ((_DAT_40007000 & 0x100) == 0) {\n      _DAT_40007000 = _DAT_40007000 | 0x100;\n      start_time = get_current_time();\n      while ((_DAT_40007000 & 0x100) == 0) {\n        current_time = get_current_time();\n        if (100 < (unsigned_int)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    if (parameters[3] == 1) {\n      _DAT_40021020 = _DAT_40021020 | 1;\n    }\n    else if (parameters[3] == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    else if (parameters[3] == 5) {\n      _DAT_40021020 = _DAT_40021020 | 5;\n    }\n    else {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n    }\n    if (parameters[3] == 0) {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) != 0) {\n        current_time = get_current_time();\n        if (5000 < (unsigned_int)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    else {\n      start_time = get_current_time();\n      while ((_DAT_40021020 & 2) == 0) {\n        current_time = get_current_time();\n        if (5000 < (unsigned_int)(current_time - start_time)) {\n          result 3;\n        }\n      }\n    }\n    if (is_flag_set) {\n      _DAT_4002101c = _DAT_4002101c & 0xefffffff;\n    }\n  }\n  if (parameters[7] == 0) {\nLAB_0800324a:\n    result = 0;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = 1;\n  }\n  else if (parameters[7] == 2) {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) {\n        if (parameters[8] == 0x10000) {\n          _DAT_40021004 = parameters[2] | _DAT_40021004 & 0xfffdffff;\n        }\n        _DAT_40021004 = parameters[9] | parameters[8] | _DAT_40021004 & 0xffc2ffff;\n        _DAT_42420060 = 1;\n        start_time = get_current_time();\n        while ((_DAT_40021000 & 0x2000000) == 0) {\n          current_time = get_current_time();\n          if (2 < (unsigned_int)(current_time - start_time)) {\n            result 3;\n          }\n        }\n        goto LAB_0800324a;\n      }\n      current_time = get_current_time();\n    } while ((unsigned_int)(current_time - start_time) < 3);\n    result = 3;\n  }\n  else {\n    _DAT_42420060 = 0;\n    start_time = get_current_time();\n    do {\n      if ((_DAT_40021000 & 0x2000000) == 0) goto LAB_0800324a;\n      current_time = get_current_time();\n    } while ((unsigned_int)(current_time - start_time) < 3);\n    result = 3;\n  }\n  result result;\n}\n\n",
            "current_name": "check_and_control_devices_08002d98",
            "entrypoint": "0x08002d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d98": "check_and_control_devices_08002d98",
                "HAL_GetTick": "get_current_time",
                "RCC_Delay": "delay",
                "bVar4": "is_flag_set",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "parameters",
                "return": "result",
                "uVar3": "result",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003260": {
            "additional_data": {
                "0x1389": {
                    "timeout_value": 1
                },
                "DAT_08009eb0": {
                    "clock_shifts": 1,
                    "clock_table": 1
                },
                "DAT_20000018": {
                    "apb1_prescaler": 1,
                    "clock_config_value": 1,
                    "clock_divider": 1,
                    "clock_freq": 1,
                    "clock_ratio": 1,
                    "clock_scale": 1,
                    "data_register": 1,
                    "divisor_value": 1,
                    "sys_clock": 1,
                    "sys_clock_div": 1,
                    "sys_clock_divider": 2,
                    "sys_clock_prescaler": 1,
                    "sys_tick_period": 1,
                    "sys_tick_reload_val": 1,
                    "system_clock": 1,
                    "system_clock_divider": 1,
                    "system_clock_frequency_divider": 1
                },
                "FUN_0800151c": {
                    "configure_peripheral": 1,
                    "set_control_bit": 1,
                    "set_timer_config": 1,
                    "sub_function2": 1
                },
                "FUN_080015a0": {
                    "initialize_peripheral": 1,
                    "initialize_tick": 1,
                    "reset_control_bit": 1,
                    "sub_function3": 1
                },
                "FUN_08003260": {
                    "configure_clock": 2,
                    "configure_hardware": 1,
                    "configure_system_clock": 10,
                    "initialize_sys_clock": 1,
                    "initialize_system": 13,
                    "initialize_system_clock": 2,
                    "set_system_clock_config": 1,
                    "update_system_clock": 1
                },
                "FUN_08003440": {
                    "get_sys_config": 1,
                    "sub_function1": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 10,
                    "get_tick": 2,
                    "get_tick_count": 3
                },
                "HAL_InitTick": {
                    "init_tick": 1,
                    "initialize_sys_tick": 1,
                    "initialize_system_tick": 1,
                    "initialize_tick": 13
                },
                "HAL_RCC_GetSysClockFreq": {
                    "get_sys_clock_freq": 5,
                    "get_sys_clock_frequency": 6,
                    "get_system_clock_frequency": 6
                },
                "PTR_FUN_08003440": {
                    "get_configuration": 1,
                    "get_control_reg": 1
                },
                "_DAT_08009eb0": {
                    "lookup_table": 1
                },
                "_DAT_40021000": {
                    "device_status": 1,
                    "special_clock_control_register": 1,
                    "sys_tick_ctrl_reg": 1,
                    "tick_config": 1,
                    "tick_status": 1,
                    "tick_value1": 1
                },
                "_DAT_40021004": {
                    "clock_control_reg": 1,
                    "control_register": 1,
                    "device_config_flags": 1,
                    "device_configuration_register": 1,
                    "device_status_reg": 1,
                    "interrupt_config": 1,
                    "peripheral_clock_config_reg": 1,
                    "peripheral_config": 1,
                    "peripheral_control_register": 1,
                    "register_config": 1,
                    "sys_reg2": 1,
                    "system_clock_config_register": 1,
                    "system_config": 1,
                    "system_control_reg": 1,
                    "system_ctrl": 1,
                    "system_params": 1,
                    "tick_reg": 1,
                    "tick_settings": 1,
                    "timer_config_register": 1
                },
                "_DAT_40022000": {
                    "clock_config_reg": 1,
                    "clock_control_register": 1,
                    "clock_register": 1,
                    "device_control_register": 1,
                    "device_ctrl_reg": 1,
                    "hardware_config": 1,
                    "peripheral_config": 1,
                    "rcc_reg": 1,
                    "register_value": 1,
                    "sys_config_register": 1,
                    "sys_control_config": 1,
                    "sys_reg1": 1,
                    "system_clock_config": 1,
                    "system_clock_config_reg": 1,
                    "system_config": 2,
                    "system_config_flags": 1,
                    "system_config_reg": 1,
                    "system_control_register": 1,
                    "system_settings": 1
                },
                "iVar1": {
                    "initial_tick": 1,
                    "start_tick": 9,
                    "start_time": 17,
                    "tick_start": 1
                },
                "iVar2": {
                    "current_tick": 10,
                    "current_time": 17,
                    "tick": 1
                },
                "param_1": {
                    "clock_config": 1,
                    "config": 2,
                    "config_array": 1,
                    "config_bits": 1,
                    "config_data": 4,
                    "config_flags": 2,
                    "config_params": 13,
                    "config_ptr": 1,
                    "configuration": 2,
                    "configurations": 1,
                    "input_data": 1,
                    "options": 1,
                    "param_array": 1
                },
                "param_2": {
                    "clock_divisor": 1,
                    "clock_freq": 1,
                    "clock_source": 8,
                    "config_count": 1,
                    "config_flags": 2,
                    "config_size": 6,
                    "data_length": 1,
                    "option_count": 1,
                    "param_size": 1,
                    "param_value": 3,
                    "prescaler": 1,
                    "sys_clock_freq": 1,
                    "system_clock_source": 4
                },
                "uVar3": {
                    "peripheral_clock_freq": 1,
                    "sys_clock_freq": 25,
                    "sys_clock_frequency": 1,
                    "system_clock_freq": 1,
                    "system_clock_frequency": 3
                },
                "uVar4": {
                    "result": 16,
                    "result_code": 1,
                    "return_status": 2,
                    "return_value": 5,
                    "status": 6,
                    "success": 1
                }
            },
            "called": [
                "FUN_08003440",
                "FUN_0800151c",
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_080052a0"
            ],
            "code": "\n\n\nundefined4 initialize_system_clock_08003260(uint *config_params,uint clock_source)\n\n{\n  int start_time;\n  int current_time;\n  uint sys_clock_freq;\n  undefined4 result;\n  \n  if (((_DAT_40022000 & 7) < clock_source) &&\n     (_DAT_40022000 = clock_source | _DAT_40022000 & 0xfffffff8, clock_source != (clock_source & 7))) {\n    result = 1;\n  }\n  else {\n    if ((*config_params & 2) != 0) {\n      _DAT_40021004 = config_params[2] | _DAT_40021004 & 0xffffff0f;\n    }\n    if ((*config_params & 1) == 0) {\nLAB_08003394:\n      if ((clock_source < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = clock_source | _DAT_40022000 & 0xfffffff8, clock_source != (clock_source & 7))) {\n        result = 1;\n      }\n      else {\n        if ((*config_params & 4) != 0) {\n          _DAT_40021004 = config_params[3] | _DAT_40021004 & 0xfffff8ff;\n        }\n        if ((*config_params & 8) != 0) {\n          _DAT_40021004 = config_params[4] << 3 | _DAT_40021004 & 0xffffc7ff;\n        }\n        sys_clock_freq = get_system_clock_frequency();\n        DAT_20000018 = sys_clock_freq >> (&DAT_08009eb0)[_DAT_40021004 >> 4 & 0xf];\n        initialize_tick(0xf);\n        result = 0;\n      }\n    }\n    else {\n      if (config_params[1] == 1) {\n        if ((_DAT_40021000 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((config_params[1] != 2) && ((_DAT_40021000 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40021004 = config_params[1] | _DAT_40021004 & 0xfffffffc;\n      start_time = get_current_tick();\n      if (config_params[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_08003394;\n          current_time = get_current_tick();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n      else if (config_params[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_08003394;\n          current_time = get_current_tick();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_08003394;\n          current_time = get_current_tick();\n        } while ((uint)(current_time - start_time) < 0x1389);\n        result = 3;\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_system_clock_08003260",
            "entrypoint": "0x08003260",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003260": "initialize_system_clock_08003260",
                "HAL_GetTick": "get_current_tick",
                "HAL_InitTick": "initialize_tick",
                "HAL_RCC_GetSysClockFreq": "get_system_clock_frequency",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "param_1": "config_params",
                "param_2": "clock_source",
                "uVar3": "sys_clock_freq",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003440": {
            "additional_data": {
                "FUN_08003440": {
                    "calculate_clock_speed": 1,
                    "calculate_delay": 3,
                    "calculate_execution_time": 24,
                    "calculate_local_delay": 1,
                    "calculate_local_timer_delay": 1,
                    "calculate_processing_time": 1
                },
                "_DAT_40021004": {
                    "dat_40021004": 1,
                    "data_1": 1,
                    "data_40021004": 1,
                    "data_value": 1,
                    "status": 2
                },
                "local_10": {
                    "clock_speed": 1,
                    "delay": 1,
                    "execution_limit": 1,
                    "execution_time": 16,
                    "execution_time_ms": 1,
                    "execution_time_output": 1,
                    "final_execution_time": 1,
                    "final_value": 1,
                    "local_delay": 1,
                    "processing_time": 1,
                    "result": 1,
                    "result_4": 1,
                    "timer_delay": 1,
                    "total_execution_time": 1
                },
                "local_14": {
                    "condition3": 1,
                    "dat_40021004": 6,
                    "data": 3,
                    "data_40021004": 1,
                    "data_value3": 1,
                    "data_variable": 1,
                    "external_data": 1,
                    "external_value": 1,
                    "global_var": 1,
                    "global_variable": 1,
                    "input_data": 1,
                    "input_status": 1,
                    "input_value": 1,
                    "memory_address": 1,
                    "register_value": 1,
                    "result3": 1,
                    "result_3": 1,
                    "temp2": 1,
                    "temp_var3": 1,
                    "variable1": 1,
                    "variable3": 1,
                    "variable7": 1
                },
                "local_18": {
                    "calculation_constant": 1,
                    "condition2": 2,
                    "data_value2": 1,
                    "extra_value": 1,
                    "result": 3,
                    "result2": 1,
                    "result_2": 1,
                    "temp": 2,
                    "temp1": 1,
                    "temp_value": 2,
                    "temp_var2": 1,
                    "temporary_variable": 1,
                    "unused": 2,
                    "unused_var": 1,
                    "unused_variable": 1,
                    "unused_variable_one": 1,
                    "variable2": 1,
                    "variable6": 2
                },
                "local_1c": {
                    "additional_value": 1,
                    "byte_counter": 1,
                    "byte_value": 1,
                    "calculated_time": 1,
                    "calculation_result": 1,
                    "condition1": 2,
                    "conditional_var1": 1,
                    "data_offset": 1,
                    "data_value1": 1,
                    "delay": 1,
                    "delay_multiplier": 1,
                    "execution_time": 2,
                    "factor": 1,
                    "multiplier": 4,
                    "result": 5,
                    "result1": 1,
                    "result_1": 1,
                    "temp_var1": 1,
                    "time_threshold": 1,
                    "variable1": 1,
                    "variable5": 1
                },
                "local_2c": {
                    "constant1": 8,
                    "constant_1": 3,
                    "constant_a": 1,
                    "constant_one": 2,
                    "data_1": 1,
                    "default_value": 2,
                    "default_value_a": 1,
                    "initial_value": 2,
                    "value1": 4,
                    "value2": 2,
                    "value_2": 1,
                    "value_after_set": 1,
                    "variable1": 2
                },
                "local_30": {
                    "buffer_size": 1,
                    "config_value": 1,
                    "count": 1,
                    "counter": 3,
                    "counter1": 1,
                    "delay_multiplier": 1,
                    "execution_mode": 1,
                    "execution_time": 3,
                    "flag": 1,
                    "instruction_set": 1,
                    "loop_iteration": 1,
                    "milliseconds": 2,
                    "multiplier": 2,
                    "port_number": 1,
                    "process_id": 1,
                    "time_delay": 1,
                    "timer": 1,
                    "timer_resolution": 1,
                    "timer_value": 1,
                    "value1": 2,
                    "value_1": 1,
                    "value_before_set": 1
                },
                "local_c": {
                    "calculated_value": 1,
                    "calculation": 1,
                    "calculation1": 1,
                    "calculation_value": 1,
                    "conditional_var2": 1,
                    "constant_five": 1,
                    "execution_time": 2,
                    "final_time": 1,
                    "result": 1,
                    "result_5": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp2": 1,
                    "temp_delay": 1,
                    "temp_execution_time": 1,
                    "temp_value": 3,
                    "temp_var1": 1,
                    "temp_variable": 3,
                    "temporary": 1,
                    "variable4": 1
                },
                "uStack_20": {
                    "constant4": 8,
                    "constant_4": 3,
                    "constant_d": 1,
                    "constant_four": 2,
                    "data_4": 1,
                    "default_value_d": 1,
                    "fourth_value": 1,
                    "stack_value3": 1,
                    "stack_var3": 1,
                    "value4": 4,
                    "value_5": 1,
                    "value_after_set_4": 1,
                    "variable4": 2
                },
                "uStack_24": {
                    "constant3": 8,
                    "constant_3": 3,
                    "constant_c": 1,
                    "constant_three": 2,
                    "data_3": 1,
                    "default_value_c": 1,
                    "stack_value2": 1,
                    "stack_var2": 1,
                    "third_value": 1,
                    "value3": 4,
                    "value_4": 1,
                    "value_after_set_3": 1,
                    "variable3": 2
                },
                "uStack_28": {
                    "constant2": 8,
                    "constant_2": 3,
                    "constant_b": 1,
                    "constant_two": 2,
                    "data_2": 1,
                    "default_value_b": 1,
                    "secondary_value": 1,
                    "stack_value1": 1,
                    "stack_var1": 1,
                    "value2": 4,
                    "value_3": 1,
                    "value_after_set_2": 1,
                    "variable2": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08003260"
            ],
            "code": "\n\n\nuint calculate_execution_time_08003440(void)\n\n{\n  undefined2 counter;\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  uint result;\n  undefined4 result;\n  uint dat_40021004;\n  uint execution_time;\n  uint temp_variable;\n  \n  constant1 = 0x5040302;\n  constant2 = 0x9080706;\n  constant3 = 0xd0c0b0a;\n  constant4 = 0x10100f0e;\n  counter = 0x201;\n  result = 0;\n  temp_variable = 0;\n  result = 0;\n  execution_time = 0;\n  dat_40021004 = _DAT_40021004;\n  if ((_DAT_40021004 & 0xc) == 4) {\n    execution_time = 8000000;\n  }\n  else if ((_DAT_40021004 & 0xc) == 8) {\n    result = (uint)*(byte *)((int)&constant1 + (_DAT_40021004 >> 0x12 & 0xf));\n    if ((_DAT_40021004 & 0x10000) == 0) {\n      temp_variable = result * 4000000;\n    }\n    else {\n      temp_variable = (result * 8000000) / (uint)*(byte *)((int)&counter + (_DAT_40021004 >> 0x11 & 1))\n      ;\n    }\n    execution_time = temp_variable;\n  }\n  else {\n    execution_time = 8000000;\n  }\n  return execution_time;\n}\n\n",
            "current_name": "calculate_execution_time_08003440",
            "entrypoint": "0x08003440",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003440": "calculate_execution_time_08003440",
                "local_10": "execution_time",
                "local_14": "dat_40021004",
                "local_18": "result",
                "local_1c": "result",
                "local_2c": "constant1",
                "local_30": "counter",
                "local_c": "temp_variable",
                "uStack_20": "constant4",
                "uStack_24": "constant3",
                "uStack_28": "constant2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003504": {
            "additional_data": {
                "DAT_20000018": {
                    "config_value": 1,
                    "data": 10,
                    "data_offset": 2,
                    "data_value": 4,
                    "data_variable": 1,
                    "global_value": 1,
                    "global_variable": 3
                },
                "FUN_08003504": {
                    "get_config_value": 1,
                    "get_dat_value": 1,
                    "get_data": 12,
                    "get_data_address": 2,
                    "get_data_offset": 2,
                    "get_data_value": 9,
                    "get_global_value": 1,
                    "get_global_variable": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08003540",
                "FUN_08003518",
                "FUN_080052a0"
            ],
            "code": "\nundefined4 get_data_value_08003504(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_value_08003504",
            "entrypoint": "0x08003504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003504": "get_data_value_08003504"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003518": {
            "additional_data": {
                "DAT_08009ec0": {
                    "adjustment_value": 1,
                    "constant_value": 1,
                    "data": 1,
                    "data_08009ec0": 1,
                    "data_ptr": 1,
                    "data_variable": 1,
                    "offset": 1
                },
                "FUN_08003504": {
                    "calculate_value": 1,
                    "get_hclk_freq": 1,
                    "get_hclk_frequency": 2,
                    "get_hclk_reset_code": 1,
                    "get_rcc_value": 1,
                    "initialize_something": 1
                },
                "FUN_08003518": {
                    "calculate_adjusted_clock_frequency": 1,
                    "calculate_hclk_dividend": 1,
                    "calculate_hclk_frequency": 1,
                    "calculate_shifted_hclk_freq": 2,
                    "get_adjusted_clock_frequency": 2,
                    "get_adjusted_frequency": 1,
                    "get_adjusted_hclk_freq": 9,
                    "get_clock_frequency": 2,
                    "get_divided_hclk_frequency": 1,
                    "get_hclk_freq_shifted": 1,
                    "get_hclk_frequency": 7,
                    "get_hclk_frequency_shifted": 2,
                    "get_shifted_value": 1
                },
                "HAL_RCC_GetHCLKFreq": {
                    "get_current_hclk_freq": 1,
                    "get_hclk_freq": 5,
                    "get_hclk_frequency": 6,
                    "get_hclk_frequency_function": 1,
                    "get_system_clock_frequency": 1,
                    "retrieve_hclk_frequency": 1
                },
                "_DAT_40021004": {
                    "data": 1,
                    "data_40021004": 1,
                    "divider": 1,
                    "input_val": 1,
                    "input_value": 3,
                    "offset": 2,
                    "register_val": 1,
                    "register_value": 2,
                    "shift_value": 2,
                    "unknown_value": 1,
                    "value": 1,
                    "value_1": 1,
                    "value_to_shift": 1
                },
                "sbyte": {
                    "adjustment_value": 1,
                    "byte": 1,
                    "byte_offset": 1,
                    "byte_val": 2,
                    "offset": 3,
                    "reset_code": 1,
                    "sbyte_val": 1,
                    "shift_amount": 2,
                    "shift_amount_byte": 1,
                    "shift_value": 2
                },
                "sbyte_08009ec0": {
                    "offset": 1,
                    "shift_value": 1
                },
                "uVar1": {
                    "adjusted_freq": 1,
                    "adjusted_hclk_freq": 2,
                    "clock_frequency": 2,
                    "frequency": 2,
                    "hclk_freq": 16,
                    "hclk_frequency": 7
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_08001ab0",
                "FUN_080046ec"
            ],
            "code": "\n\n\nuint get_divided_hclk_frequency_08003518(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_frequency();\n  return hclk_freq >> *(offset *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 8 & 7));\n}\n\n",
            "current_name": "get_divided_hclk_frequency_08003518",
            "entrypoint": "0x08003518",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003518": "get_divided_hclk_frequency_08003518",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency",
                "sbyte": "offset",
                "uVar1": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003540": {
            "additional_data": {
                "7": {
                    "bit_mask": 1
                },
                "DAT_08009ec0": {
                    "byte_offset": 1,
                    "data": 1,
                    "data_1": 1,
                    "freq_offset": 2,
                    "offset_data": 2,
                    "offset_table": 1,
                    "sbyte_array": 1
                },
                "DAT_40021004": {
                    "input_data": 1
                },
                "FUN_08003504": {
                    "get_rcc_status": 1,
                    "initialize": 1
                },
                "FUN_08003540": {
                    "calculate_hclk_frequency": 1,
                    "calculate_shifted_frequency": 1,
                    "calculate_shifted_hclk_freq": 3,
                    "get_adjusted_clock_frequency": 1,
                    "get_adjusted_hclk": 1,
                    "get_adjusted_hclk_freq": 12,
                    "get_adjusted_hclk_frequency": 1,
                    "get_clock_frequency": 2,
                    "get_frequency": 1,
                    "get_hclk_freq_shifted": 1,
                    "get_hclk_frequency": 5,
                    "get_hclk_frequency_shifted": 1,
                    "get_shifted_hclk_frequency": 1
                },
                "HAL_RCC_GetHCLKFreq": {
                    "get_current_hclk_freq": 1,
                    "get_current_hclk_frequency": 1,
                    "get_hclk_freq": 9,
                    "get_hclk_frequency": 3
                },
                "_DAT_40021004": {
                    "bit_shift_value": 1,
                    "clock_config": 1,
                    "config_value": 1,
                    "data_2": 1,
                    "data_value": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "register_value": 4,
                    "shift_value": 2,
                    "value": 1
                },
                "sbyte": {
                    "byte": 1,
                    "offset": 4,
                    "shift_amount": 1,
                    "shift_amount_byte": 1,
                    "shift_value": 3
                },
                "sbyteParam": {
                    "shift_value": 1
                },
                "sbyte_08009ec0": {
                    "frequency_shift_value": 1,
                    "offset": 1,
                    "shift_value": 2
                },
                "sbyte_PTR_DAT_08009ec0": {
                    "offset_ptr": 1
                },
                "uVar1": {
                    "adjusted_freq": 1,
                    "adjusted_hclk_freq": 1,
                    "clock_freq": 1,
                    "clock_frequency": 2,
                    "current_hclk_frequency": 1,
                    "frequency": 3,
                    "hclk_freq": 14,
                    "hclk_frequency": 6
                }
            },
            "called": [
                "FUN_08003504"
            ],
            "calling": [
                "FUN_080046ec"
            ],
            "code": "\n\n\nuint get_adjusted_hclk_freq_08003540(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_freq();\n  return hclk_freq >> *(offset *)((int)&DAT_08009ec0 + (_DAT_40021004 >> 0xb & 7));\n}\n\n",
            "current_name": "get_adjusted_hclk_freq_08003540",
            "entrypoint": "0x08003540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003540": "get_adjusted_hclk_freq_08003540",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "sbyte": "offset",
                "uVar1": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003568": {
            "additional_data": {
                "FUN_08003568": {
                    "calculate_delay": 14,
                    "calculate_elapsed_time": 1,
                    "calculate_iterations": 12,
                    "calculate_remainder": 1,
                    "calculate_timeout": 1,
                    "perform_iteration": 1
                },
                "bVar1": {
                    "condition": 1,
                    "continue_loop": 1,
                    "has_iterations": 1,
                    "is_adjusted_value_non_zero": 1,
                    "is_count_non_zero": 1,
                    "is_delay_over": 1
                },
                "local_c": {
                    "adjusted_value": 3,
                    "calculated_iterations": 1,
                    "calculated_value": 2,
                    "counter": 1,
                    "delay": 2,
                    "delay_count": 10,
                    "delay_counter": 1,
                    "elapsed_iterations": 1,
                    "iteration_count": 2,
                    "iterations": 3,
                    "multiplied_value": 1,
                    "quotient": 1,
                    "result": 1,
                    "timeout_count": 1
                },
                "param_1": {
                    "dividend": 1,
                    "input": 5,
                    "input_number": 1,
                    "input_parameter": 1,
                    "input_value": 22,
                    "seconds": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d98"
            ],
            "code": "\nvoid calculate_delay_08003568(int input_value)\n\n{\n  bool is_adjusted_value_non_zero;\n  int delay_count;\n  \n  delay_count = input_value * (DAT_20000018 / 8000);\n  do {\n    is_adjusted_value_non_zero = delay_count != 0;\n    delay_count = delay_count + -1;\n  } while (is_adjusted_value_non_zero);\n  return;\n}\n\n",
            "current_name": "calculate_delay_08003568",
            "entrypoint": "0x08003568",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003568": "calculate_delay_08003568",
                "bVar1": "is_adjusted_value_non_zero",
                "local_c": "delay_count",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035a4": {
            "additional_data": {
                "FUNC_080035fa": {
                    "do_something": 1,
                    "function_a": 1,
                    "helper_function": 1,
                    "helper_function1": 1,
                    "perform_initialization": 1,
                    "prepare_timer": 1,
                    "some_func": 1,
                    "some_function": 1
                },
                "FUN_080035a4": {
                    "check_and_configure_timer": 1,
                    "init_timer": 4,
                    "initialize_timer": 25,
                    "initialize_timers": 1
                },
                "FUN_08003c94": {
                    "another_func": 1,
                    "calculate_something": 1,
                    "function_b": 1,
                    "helper_function2": 1,
                    "set_timer_config": 1,
                    "update_config": 3,
                    "update_timer_config": 1
                },
                "HAL_TIM_Base_MspInit": {
                    "configure_timer": 1,
                    "init_timer_msp": 1,
                    "initialize_base_timer": 1,
                    "initialize_timer": 3,
                    "initialize_timer_base": 1,
                    "initialize_timer_hardware": 1,
                    "initialize_timer_hw": 1,
                    "initialize_timer_peripheral": 3,
                    "initialize_timer_peripherals": 1
                },
                "TIM_Base_SetConfig": {
                    "configure_timer": 2,
                    "set_timer_config": 2
                },
                "param_1": {
                    "config": 1,
                    "config_ptr": 1,
                    "timer": 10,
                    "timer_config": 9,
                    "timer_handle": 2,
                    "timer_instance": 3,
                    "timer_params": 1,
                    "timer_ptr": 2,
                    "timer_struct": 1
                },
                "param_2": {
                    "new_config": 1
                },
                "uVar1": {
                    "error_code": 3,
                    "error_flag": 1,
                    "result": 11,
                    "return_value": 9,
                    "status": 6,
                    "success_flag": 1
                }
            },
            "called": [
                "FUN_080035fa",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 initialize_timer_080035a4(undefined4 *timer)\n\n{\n  undefined4 result;\n  \n  if (timer == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)timer + 0x3d) == '\\0') {\n      *(undefined *)(timer + 0xf) = 0;\n      initialize_timer_080035a4(timer);\n    }\n    *(undefined *)((int)timer + 0x3d) = 2;\n    configure_timer(*timer,timer + 1);\n    *(undefined *)((int)timer + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_timer_080035a4",
            "entrypoint": "0x080035a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035a4": "initialize_timer_080035a4",
                "HAL_TIM_Base_MspInit": "initialize_timer",
                "TIM_Base_SetConfig": "configure_timer",
                "param_1": "timer",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035fa": {
            "called": [],
            "calling": [
                "FUN_080035a4"
            ],
            "code": "\nvoid FUNC_080035fa(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080035fa",
            "entrypoint": "0x080035fa",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080035fa": "FUNC_080035fa"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800360c": {
            "additional_data": {
                "0": {
                    "0": 1,
                    "success": 1
                },
                "FUN_0800360c": {
                    "set_bit": 2,
                    "set_bit_1": 1,
                    "set_bit_and_return_zero": 1,
                    "set_bit_flags": 1,
                    "set_bit_in_array": 3,
                    "set_bit_one": 2,
                    "set_bit_to_one": 2,
                    "set_bit_value": 1,
                    "set_bitmask": 1,
                    "set_bitwise_or": 1,
                    "set_bitwise_or_flag": 1,
                    "set_flag": 1,
                    "set_flag_bits": 2,
                    "set_flags": 8,
                    "set_flags_and_bits": 1,
                    "set_flags_and_permissions": 1,
                    "set_flags_and_value": 1,
                    "set_flags_and_values": 1
                },
                "param_1": {
                    "array": 8,
                    "array_of_pointers": 1,
                    "array_pointer": 2,
                    "array_ptr": 4,
                    "bit_array": 1,
                    "data": 3,
                    "flags": 2,
                    "input": 2,
                    "param": 3,
                    "parameters": 1,
                    "params": 1,
                    "pointer": 1,
                    "pointer_to_params": 1,
                    "ptr_array": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 set_flags_and_bits_0800360c(uint **array)\n\n{\n  (*array)[3] = (*array)[3] | 1;\n  **array = **array | 1;\n  return 0;\n}\n\n",
            "current_name": "set_flags_and_bits_0800360c",
            "entrypoint": "0x0800360c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800360c": "set_flags_and_bits_0800360c",
                "param_1": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003640": {
            "additional_data": {
                "FUNC_08003696": {
                    "check_condition": 1,
                    "function_08003696": 1,
                    "helper_function1": 1,
                    "initialize": 3,
                    "initialize_hardware": 1,
                    "initialize_pwm": 1,
                    "initialize_timer": 1,
                    "perform_operation": 1,
                    "read_data": 1,
                    "reverse_operation": 1
                },
                "FUN_08003640": {
                    "init_pwm": 3,
                    "initialize_pwm": 16,
                    "initialize_pwm_timer": 2,
                    "initialize_tim": 1,
                    "initialize_tim_pwm": 2,
                    "initialize_timer": 6,
                    "initialize_timers": 1
                },
                "FUN_08003696": {
                    "function_1": 1,
                    "initialize_tim_specific": 1
                },
                "FUN_08003c94": {
                    "calculate_parameters": 1,
                    "calculate_value": 1,
                    "compare_and_update_data": 1,
                    "configure_tim": 1,
                    "configure_timer": 1,
                    "copy_parameters": 1,
                    "function_08003c94": 1,
                    "function_2": 1,
                    "helper_function2": 1,
                    "update": 1,
                    "update_config": 2,
                    "update_parameters": 1,
                    "update_tim_base_config": 1,
                    "update_tim_pwm_config": 1
                },
                "HAL_TIM_PWM_MspInit": {
                    "configure_pwm_gpio": 1,
                    "initialize_pw_mperipherals": 1,
                    "initialize_pwm": 4,
                    "initialize_pwm_config": 2,
                    "initialize_pwm_gpio": 2,
                    "initialize_pwm_msp_init": 4,
                    "initialize_pwm_pins": 1,
                    "initialize_pwm_specific": 1,
                    "initialize_tim_msp": 1,
                    "initialize_tim_msp_init": 1,
                    "initialize_tim_pwm": 1,
                    "initialize_tim_pwm_msp": 2
                },
                "TIM_Base_SetConfig": {
                    "configure_pwm": 3,
                    "configure_timer_base": 1,
                    "set_pwm_config": 1,
                    "set_timer_base_config": 1,
                    "set_timer_config": 3
                },
                "param_1": {
                    "config": 8,
                    "config_ptr": 5,
                    "config_struct_ptr": 1,
                    "p_param": 1,
                    "params": 1,
                    "pwm_config": 3,
                    "pwm_handle": 1,
                    "tim_handle": 1,
                    "timer": 1,
                    "timer_config": 5,
                    "timer_config_1": 1,
                    "timer_config_ptr": 1,
                    "timer_data": 1,
                    "timer_object": 1
                },
                "param_2": {
                    "timer_config_2": 1
                },
                "uVar1": {
                    "error_code": 1,
                    "result": 13,
                    "return_val": 1,
                    "return_value": 5,
                    "status": 10
                }
            },
            "called": [
                "FUN_08003696",
                "FUN_08003c94"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 initialize_tim_pwm_08003640(undefined4 *config)\n\n{\n  undefined4 result;\n  \n  if (config == (undefined4 *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)config + 0x3d) == '\\0') {\n      *(undefined *)(config + 0xf) = 0;\n      initialize_pwm_msp_init(config);\n    }\n    *(undefined *)((int)config + 0x3d) = 2;\n    set_timer_config(*config,config + 1);\n    *(undefined *)((int)config + 0x3d) = 1;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_tim_pwm_08003640",
            "entrypoint": "0x08003640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003640": "initialize_tim_pwm_08003640",
                "HAL_TIM_PWM_MspInit": "initialize_pwm_msp_init",
                "TIM_Base_SetConfig": "set_timer_config",
                "param_1": "config",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003696": {
            "called": [],
            "calling": [
                "FUN_08003640"
            ],
            "code": "\nvoid FUNC_08003696(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003696",
            "entrypoint": "0x08003696",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003696": "FUNC_08003696"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080036a8": {
            "additional_data": {
                "0x11": {
                    "array_index": 1,
                    "timer_offset": 1
                },
                "0x40012c00": {
                    "base_address": 1,
                    "desired_address": 1,
                    "specific_value": 1,
                    "tim_base_address": 1,
                    "timer_address": 1,
                    "timer_base_address": 2
                },
                "0x8000": {
                    "mask": 1,
                    "timer_register_offset_11_value": 1
                },
                "FUN_080036a8": {
                    "configure_and_enable_channel": 1,
                    "configure_tim_c_cx_channel": 4,
                    "configure_tim_c_cx_channel_cmd": 1,
                    "configure_tim_channel": 2,
                    "configure_timer": 1,
                    "configure_timer_channel": 3,
                    "enable_timer_channel": 1,
                    "initialize_and_enable_timer_capture": 1,
                    "initialize_channel": 1,
                    "initialize_tim_c_cx_channel": 1,
                    "initialize_tim_channel": 3,
                    "initialize_timer": 3,
                    "initialize_timer_channel": 2,
                    "initialize_timing_and_flags": 1,
                    "set_channel_command": 3,
                    "set_channel_enabled": 1,
                    "set_timer_channel": 1,
                    "set_timer_channel_command": 1
                },
                "FUN_080041ea": {
                    "apply_channel_settings": 1,
                    "configure_channel": 1,
                    "configure_tim": 1,
                    "configure_tim_c_cx_channel": 1,
                    "configure_timer_channel": 1,
                    "configure_timing_parameters": 1,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "set_c_cx_channel": 1,
                    "update_channel_settings": 1,
                    "update_tim_channel": 1
                },
                "PTR_FUN_080041ea": {
                    "set_channel_config": 1,
                    "update_tim_channel": 1
                },
                "TIMER_CCxChannelCmd": {
                    "control_timer_channel": 1
                },
                "TIM_CCxChannelCmd": {
                    "config_tim_c_cx_channel_cmd": 1,
                    "configure_tim_channel_command": 1,
                    "set_channel_command": 1
                },
                "int": {
                    "value": 1
                },
                "param_1": {
                    "channel": 2,
                    "channel_data": 1,
                    "channel_pointer": 3,
                    "channel_pptr": 1,
                    "channel_ptr": 3,
                    "operation_parameter": 1,
                    "param1": 2,
                    "param_1": 3,
                    "timer": 1,
                    "timer_address": 1,
                    "timer_channel": 6,
                    "timer_config": 5,
                    "timer_registers": 1
                },
                "param_2": {
                    "channel": 4,
                    "channel_command": 4,
                    "channel_config": 2,
                    "channel_id": 1,
                    "channel_number": 3,
                    "channel_param": 1,
                    "channel_setting": 2,
                    "channel_value": 3,
                    "command": 4,
                    "config_value": 1,
                    "operation_value": 1,
                    "param2": 2,
                    "param_2": 3
                },
                "param_3": {
                    "operation_flag": 1,
                    "param": 1,
                    "param3": 2,
                    "param_3": 5,
                    "unknown_param": 1
                },
                "uint": {
                    "data": 1,
                    "uint": 1,
                    "unsigned_int": 2
                }
            },
            "called": [
                "FUN_080041ea"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 configure_tim_c_cx_channel_cmd_080036a8(unsigned_int **timer_channel,undefined4 channel)\n\n{\n  set_channel_command(*timer_channel,channel,1);\n  if (*timer_channel == (unsigned_int *)0x40012c00) {\n    (*timer_channel)[0x11] = (*timer_channel)[0x11] | 0x8000;\n  }\n  **timer_channel = **timer_channel | 1;\n  return 0;\n}\n\n",
            "current_name": "configure_tim_c_cx_channel_cmd_080036a8",
            "entrypoint": "0x080036a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036a8": "configure_tim_c_cx_channel_cmd_080036a8",
                "TIM_CCxChannelCmd": "set_channel_command",
                "int": "value",
                "param_1": "timer_channel",
                "param_2": "channel",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f8": {
            "additional_data": {
                "FUN_080036f8": {
                    "handle_callback": 1,
                    "handle_callbacks": 2,
                    "handle_interrupt": 1,
                    "handle_tim_callbacks": 1,
                    "handle_tim_event": 1,
                    "handle_tim_events": 1,
                    "handle_tim_interrupt": 1,
                    "handle_timer_callback": 1,
                    "handle_timers": 9,
                    "perform_tim_callbacks": 1,
                    "process_callback": 1,
                    "process_callbacks": 3,
                    "process_parameters": 1,
                    "process_tim_callback": 1,
                    "process_timers": 6
                },
                "HAL_TIMEx_BreakCallback": {
                    "handle_break": 10,
                    "handle_break_callback": 12,
                    "handle_ex_break_callback": 3,
                    "handle_tim_ex_break": 1,
                    "timer_ex_break_callback": 1
                },
                "HAL_TIMEx_CommutationCallback": {
                    "handle_commutation": 10,
                    "handle_commutation_callback": 12,
                    "handle_ex_commutation_callback": 3,
                    "handle_tim_ex_commutation": 1,
                    "timer_ex_commutation_callback": 1
                },
                "HAL_TIM_IC_CaptureCallback": {
                    "handle_capture": 1,
                    "handle_ic_capture": 9,
                    "handle_ic_capture_callback": 15,
                    "handle_ic_timer_capture": 1,
                    "timer_ic_capture_callback": 1
                },
                "HAL_TIM_OC_DelayElapsedCallback": {
                    "handle_delay_elapsed": 1,
                    "handle_delay_elapsed_callback": 1,
                    "handle_oc_delay_elapsed": 8,
                    "handle_oc_delay_elapsed_callback": 14,
                    "handle_oc_timer_delay_elapsed": 1,
                    "handle_ocr_delay_elapsed": 1,
                    "timer_oc_delay_elapsed_callback": 1
                },
                "HAL_TIM_PWM_PulseFinishedCallback": {
                    "handle_pulse_finished": 1,
                    "handle_pwm_pulse_finished": 9,
                    "handle_pwm_pulse_finished_callback": 15,
                    "handle_pwm_timer_pulse_finished": 1,
                    "timer_pwm_pulse_finished_callback": 1
                },
                "HAL_TIM_PeriodElapsedCallback": {
                    "handle_period_elapsed": 10,
                    "handle_period_elapsed_callback": 15,
                    "handle_timer_period_elapsed": 1,
                    "timer_period_elapsed_callback": 1
                },
                "HAL_TIM_TriggerCallback": {
                    "handle_tim_trigger": 1,
                    "handle_trigger": 10,
                    "handle_trigger_callback": 15,
                    "timer_trigger_callback": 1
                },
                "PARAM_1": {
                    "arg": 1
                },
                "hal_tim_ic_capture_callback": {
                    "handle_ic_capture_callback": 1
                },
                "hal_tim_oc_delay_elapsed_callback": {
                    "handle_delay_elapsed_callback": 1
                },
                "hal_tim_period_elapsed_callback": {
                    "handle_period_elapsed_callback": 1
                },
                "hal_tim_pwm_pulse_finished_callback": {
                    "handle_pulse_finished_callback": 1
                },
                "hal_tim_trigger_callback": {
                    "handle_trigger_callback": 1
                },
                "hal_timex_break_callback": {
                    "handle_break_callback": 1
                },
                "hal_timex_commutation_callback": {
                    "handle_commutation_callback": 1
                },
                "param_1": {
                    "arg": 1,
                    "callback_data": 3,
                    "callback_handlers": 1,
                    "callback_param": 1,
                    "callback_params": 3,
                    "interrupt_data": 1,
                    "parameters": 1,
                    "tim_callbacks": 1,
                    "tim_event_params": 1,
                    "tim_param": 1,
                    "timer_array": 1,
                    "timer_callback_data": 1,
                    "timer_data": 6,
                    "timer_event": 1,
                    "timer_list": 1,
                    "timer_param": 2,
                    "timer_params": 2,
                    "timers": 3
                }
            },
            "called": [
                "FUN_08004366",
                "FUN_08004f78",
                "FUN_08003c4a",
                "FUN_08004378",
                "FUN_08003c80",
                "FUN_08003c5c",
                "FUN_08003c6e"
            ],
            "calling": [
                "FUN_08005714"
            ],
            "code": "\nvoid handle_timers_080036f8(int *timer_data)\n\n{\n  if (((*(uint *)(*timer_data + 0x10) & 2) == 2) && ((*(uint *)(*timer_data + 0xc) & 2) == 2)) {\n    *(undefined4 *)(*timer_data + 0x10) = 0xfffffffd;\n    *(undefined *)(timer_data + 7) = 1;\n    if ((*(uint *)(*timer_data + 0x18) & 3) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  if (((*(uint *)(*timer_data + 0x10) & 4) == 4) && ((*(uint *)(*timer_data + 0xc) & 4) == 4)) {\n    *(undefined4 *)(*timer_data + 0x10) = 0xfffffffb;\n    *(undefined *)(timer_data + 7) = 2;\n    if ((*(uint *)(*timer_data + 0x18) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  if (((*(uint *)(*timer_data + 0x10) & 8) == 8) && ((*(uint *)(*timer_data + 0xc) & 8) == 8)) {\n    *(undefined4 *)(*timer_data + 0x10) = 0xfffffff7;\n    *(undefined *)(timer_data + 7) = 4;\n    if ((*(uint *)(*timer_data + 0x1c) & 3) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  if (((*(uint *)(*timer_data + 0x10) & 0x10) == 0x10) && ((*(uint *)(*timer_data + 0xc) & 0x10) == 0x10))\n  {\n    *(undefined4 *)(*timer_data + 0x10) = 0xffffffef;\n    *(undefined *)(timer_data + 7) = 8;\n    if ((*(uint *)(*timer_data + 0x1c) & 0x300) == 0) {\n      handle_oc_delay_elapsed_callback(timer_data);\n      handle_pwm_pulse_finished_callback(timer_data);\n    }\n    else {\n      handle_ic_capture_callback(timer_data);\n    }\n    *(undefined *)(timer_data + 7) = 0;\n  }\n  if (((*(uint *)(*timer_data + 0x10) & 1) == 1) && ((*(uint *)(*timer_data + 0xc) & 1) == 1)) {\n    *(undefined4 *)(*timer_data + 0x10) = 0xfffffffe;\n    handle_period_elapsed_callback(timer_data);\n  }\n  if (((*(uint *)(*timer_data + 0x10) & 0x80) == 0x80) && ((*(uint *)(*timer_data + 0xc) & 0x80) == 0x80))\n  {\n    *(undefined4 *)(*timer_data + 0x10) = 0xffffff7f;\n    handle_break_callback(timer_data);\n  }\n  if (((*(uint *)(*timer_data + 0x10) & 0x40) == 0x40) && ((*(uint *)(*timer_data + 0xc) & 0x40) == 0x40))\n  {\n    *(undefined4 *)(*timer_data + 0x10) = 0xffffffbf;\n    handle_trigger_callback(timer_data);\n  }\n  if (((*(uint *)(*timer_data + 0x10) & 0x20) == 0x20) && ((*(uint *)(*timer_data + 0xc) & 0x20) == 0x20))\n  {\n    *(undefined4 *)(*timer_data + 0x10) = 0xffffffdf;\n    handle_commutation_callback(timer_data);\n  }\n  return;\n}\n\n",
            "current_name": "handle_timers_080036f8",
            "entrypoint": "0x080036f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f8": "handle_timers_080036f8",
                "HAL_TIMEx_BreakCallback": "handle_break_callback",
                "HAL_TIMEx_CommutationCallback": "handle_commutation_callback",
                "HAL_TIM_IC_CaptureCallback": "handle_ic_capture_callback",
                "HAL_TIM_OC_DelayElapsedCallback": "handle_oc_delay_elapsed_callback",
                "HAL_TIM_PWM_PulseFinishedCallback": "handle_pwm_pulse_finished_callback",
                "HAL_TIM_PeriodElapsedCallback": "handle_period_elapsed_callback",
                "HAL_TIM_TriggerCallback": "handle_trigger_callback",
                "param_1": "timer_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003908": {
            "additional_data": {
                "FUN_08003908": {
                    "configure_gpio": 1,
                    "configure_oc": 1,
                    "configure_output_channel": 1,
                    "configure_output_compare": 2,
                    "configure_pwm": 1,
                    "configure_tim": 2,
                    "configure_tim_oc": 4,
                    "configure_tim_output_channel": 1,
                    "configure_tim_output_compare": 1,
                    "configure_timer": 1,
                    "configure_timer_oc": 1,
                    "configure_timer_output": 5,
                    "configure_timer_output_channel": 2,
                    "configure_timer_output_compare_channel": 1,
                    "configure_timers": 2,
                    "set_config_and_flags": 1,
                    "set_tim_output_compare_config": 1,
                    "set_tim_output_config": 1,
                    "set_timer_output_compare": 1,
                    "set_timer_output_config": 1
                },
                "FUN_08003d60": {
                    "set_timer_register1": 1
                },
                "FUN_08003e38": {
                    "set_timer_oc1_config": 1
                },
                "FUN_08003f18": {
                    "set_timer_register2": 1
                },
                "FUN_08003ff8": {
                    "set_timer_oc2_config": 1
                },
                "TIM_OC1_SetConfig": {
                    "configure_output_compare1": 1,
                    "configure_tim_oc1": 3,
                    "configure_timer_output_channel1": 2,
                    "set_timer_output_config_ch1": 1
                },
                "TIM_OC2_SetConfig": {
                    "configure_output_compare2": 1,
                    "configure_tim_oc2": 3,
                    "configure_timer_output_channel2": 2,
                    "set_timer_output_config_ch2": 1
                },
                "TIM_OC3_SetConfig": {
                    "configure_output_compare3": 1,
                    "configure_tim_oc3": 3,
                    "configure_timer_output_channel3": 2,
                    "set_timer_output_config_ch3": 1
                },
                "TIM_OC4_SetConfig": {
                    "configure_output_compare4": 1,
                    "configure_tim_oc4": 3,
                    "configure_timer_output_channel4": 2,
                    "set_timer_output_config_ch4": 1
                },
                "param_1": {
                    "channel_pointer": 1,
                    "config": 4,
                    "config_params": 1,
                    "device": 1,
                    "gpio_config": 1,
                    "pwm_config": 1,
                    "tim_config": 1,
                    "tim_handle": 1,
                    "timer": 5,
                    "timer_config": 11,
                    "timer_input": 1,
                    "timer_instance": 1,
                    "timer_reg": 1,
                    "timer_registers": 1
                },
                "param_2": {
                    "channel": 2,
                    "channel_config": 2,
                    "config": 7,
                    "config_data": 1,
                    "config_value": 5,
                    "configuration": 1,
                    "output_config": 5,
                    "param": 1,
                    "param_val": 1,
                    "param_value": 1,
                    "timer_config": 1,
                    "value": 4
                },
                "param_3": {
                    "channel": 18,
                    "channel_index": 1,
                    "channel_mode": 1,
                    "channel_number": 2,
                    "config": 1,
                    "oc_config": 1,
                    "option": 1,
                    "output_channel": 4,
                    "output_mode": 1,
                    "timer_channel": 1
                },
                "uVar1": {
                    "result": 13,
                    "result_code": 1,
                    "return_value": 15,
                    "status": 2
                }
            },
            "called": [
                "FUN_08003e38",
                "FUN_08003ff8",
                "FUN_08003d60",
                "FUN_08003f18"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 configure_timer_output_compare_channel_08003908(int *timer_config,int config,undefined4 channel)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(timer_config + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(timer_config + 0xf) = 1;\n    *(undefined *)((int)timer_config + 0x3d) = 2;\n    switch(channel) {\n    case 0:\n      configure_tim_oc1(*timer_config,config);\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) | 8;\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) & 0xfffffffb;\n      *(uint *)(*timer_config + 0x18) = *(uint *)(config + 0x10) | *(uint *)(*timer_config + 0x18);\n      break;\n    case 4:\n      configure_tim_oc2(*timer_config,config);\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) | 0x800;\n      *(uint *)(*timer_config + 0x18) = *(uint *)(*timer_config + 0x18) & 0xfffffbff;\n      *(uint *)(*timer_config + 0x18) = *(int *)(config + 0x10) << 8 | *(uint *)(*timer_config + 0x18);\n      break;\n    case 8:\n      configure_tim_oc3(*timer_config,config);\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) | 8;\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) & 0xfffffffb;\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(config + 0x10) | *(uint *)(*timer_config + 0x1c);\n      break;\n    case 0xc:\n      configure_tim_oc4(*timer_config,config);\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) | 0x800;\n      *(uint *)(*timer_config + 0x1c) = *(uint *)(*timer_config + 0x1c) & 0xfffffbff;\n      *(uint *)(*timer_config + 0x1c) = *(int *)(config + 0x10) << 8 | *(uint *)(*timer_config + 0x1c);\n    }\n    *(undefined *)((int)timer_config + 0x3d) = 1;\n    *(undefined *)(timer_config + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "configure_timer_output_compare_channel_08003908",
            "entrypoint": "0x08003908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003908": "configure_timer_output_compare_channel_08003908",
                "TIM_OC1_SetConfig": "configure_tim_oc1",
                "TIM_OC2_SetConfig": "configure_tim_oc2",
                "TIM_OC3_SetConfig": "configure_tim_oc3",
                "TIM_OC4_SetConfig": "configure_tim_oc4",
                "param_1": "timer_config",
                "param_2": "config",
                "param_3": "channel",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a94": {
            "additional_data": {
                "FUN_08003a94": {
                    "configure_peripheral": 1,
                    "configure_timer": 22,
                    "configure_timer_input": 2,
                    "configure_timer_inputs": 1,
                    "configure_timers": 4,
                    "initialize_timer": 1
                },
                "FUN_080040a0": {
                    "configure_input_stage2": 1,
                    "set_interrupt_config": 1
                },
                "FUN_08004104": {
                    "configure_input_stage": 1,
                    "set_input_stage_config": 1
                },
                "FUN_0800416a": {
                    "configure_input_stage": 1,
                    "configure_input_stage1": 1
                },
                "FUN_080041a8": {
                    "configure_etr": 1,
                    "set_etr_config": 1
                },
                "TIM_ETR_SetConfig": {
                    "configure_etr": 1,
                    "set_config_for_etr": 2,
                    "set_external_trigger_config": 3,
                    "set_tim_etr_config": 1
                },
                "TIM_ITRx_SetConfig": {
                    "configure_it_rx": 1,
                    "set_config_for_it_rx": 2,
                    "set_interrupt_config": 1,
                    "set_tim_it_rx_config": 1,
                    "set_timer_interrupt_config": 2
                },
                "TIM_TI1_ConfigInputStage": {
                    "configure_capture_input_stage1": 1,
                    "configure_input_stage1": 1,
                    "configure_input_stage_for_channel1": 1,
                    "configure_input_stage_for_ti1": 2,
                    "configure_tim_ti1_input_stage": 2
                },
                "TIM_TI2_ConfigInputStage": {
                    "configure_capture_input_stage2": 1,
                    "configure_input_stage_for_channel2": 1,
                    "configure_input_stage_for_ti2": 2
                },
                "param_1": {
                    "config": 2,
                    "config_data": 1,
                    "config_ptr": 1,
                    "device": 1,
                    "input_config": 1,
                    "timer_config": 24,
                    "timer_configuration": 1
                },
                "param_2": {
                    "config": 1,
                    "config_data": 5,
                    "config_params": 2,
                    "config_values": 9,
                    "data_ptr": 1,
                    "input_config": 4,
                    "param_config": 1,
                    "settings": 1,
                    "tim_config": 1,
                    "timer_inputs": 1,
                    "timer_values": 3,
                    "timers_data": 1,
                    "values": 1
                },
                "uVar1": {
                    "result": 23,
                    "return_val": 1,
                    "return_value": 6
                },
                "uVar2": {
                    "command": 1,
                    "config_type": 2,
                    "config_value": 13,
                    "data": 1,
                    "data_value": 1,
                    "input": 1,
                    "input_type": 1,
                    "input_value": 2,
                    "setting": 1,
                    "tim_config_value": 1,
                    "timer_config_value": 1,
                    "timer_type": 1,
                    "timer_value": 3,
                    "value": 1
                }
            },
            "called": [
                "FUN_0800416a",
                "FUN_080040a0",
                "FUN_08004104",
                "FUN_080041a8"
            ],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 configure_timer_input_08003a94(int *timer_config,uint *config_values)\n\n{\n  undefined4 result;\n  uint config_value;\n  \n  if (*(char *)(timer_config + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(timer_config + 0xf) = 1;\n    *(undefined *)((int)timer_config + 0x3d) = 2;\n    *(uint *)(*timer_config + 8) = *(uint *)(*timer_config + 8) & 0xffff0088;\n    config_value = *config_values;\n    if (config_value == 0x40) {\n      configure_input_stage_for_ti1(*timer_config,config_values[1],config_values[3]);\n      set_config_for_it_rx(*timer_config,0x40);\n    }\n    else if (config_value < 0x41) {\n      if (config_value == 0x10) {\n        set_config_for_it_rx(*timer_config,0x10);\n      }\n      else if (config_value < 0x11) {\n        if (config_value == 0) {\n          set_config_for_it_rx(*timer_config,0);\n        }\n      }\n      else if (config_value == 0x20) {\n        set_config_for_it_rx(*timer_config,0x20);\n      }\n      else if (config_value == 0x30) {\n        set_config_for_it_rx(*timer_config,0x30);\n      }\n    }\n    else if (config_value == 0x70) {\n      set_external_trigger_config(*timer_config,config_values[2],config_values[1],config_values[3]);\n      *(uint *)(*timer_config + 8) = *(uint *)(*timer_config + 8) & 0xffffff88 | 0x77;\n    }\n    else if (config_value < 0x71) {\n      if (config_value == 0x50) {\n        configure_input_stage_for_ti1(*timer_config,config_values[1],config_values[3]);\n        set_config_for_it_rx(*timer_config,0x50);\n      }\n      else if (config_value == 0x60) {\n        configure_input_stage_for_ti2(*timer_config,config_values[1],config_values[3]);\n        set_config_for_it_rx(*timer_config,0x60);\n      }\n    }\n    else if (config_value == 0x1000) {\n      *(uint *)(*timer_config + 8) = *(uint *)(*timer_config + 8) & 0xfffffff8;\n    }\n    else if (config_value == 0x2000) {\n      set_external_trigger_config(*timer_config,config_values[2],config_values[1],config_values[3]);\n      *(uint *)(*timer_config + 8) = *(uint *)(*timer_config + 8) | 0x4000;\n    }\n    *(undefined *)((int)timer_config + 0x3d) = 1;\n    *(undefined *)(timer_config + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "configure_timer_input_08003a94",
            "entrypoint": "0x08003a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a94": "configure_timer_input_08003a94",
                "TIM_ETR_SetConfig": "set_external_trigger_config",
                "TIM_ITRx_SetConfig": "set_config_for_it_rx",
                "TIM_TI1_ConfigInputStage": "configure_input_stage_for_ti1",
                "TIM_TI2_ConfigInputStage": "configure_input_stage_for_ti2",
                "param_1": "timer_config",
                "param_2": "config_values",
                "uVar1": "result",
                "uVar2": "config_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003c4a": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c4a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c4a",
            "entrypoint": "0x08003c4a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c4a": "FUNC_08003c4a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c5c": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c5c",
            "entrypoint": "0x08003c5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c5c": "FUNC_08003c5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c6e": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c6e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c6e",
            "entrypoint": "0x08003c6e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c6e": "FUNC_08003c6e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c80": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08003c80(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08003c80",
            "entrypoint": "0x08003c80",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08003c80": "FUNC_08003c80"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08003c94": {
            "additional_data": {
                "FUN_08003c94": {
                    "apply_permissions": 1,
                    "update_config": 2,
                    "update_configuration": 2,
                    "update_flags": 1,
                    "update_flags_and_values": 1,
                    "update_memory": 10,
                    "update_memory_configuration": 1,
                    "update_memory_locations": 1,
                    "update_memory_values": 2,
                    "update_param": 1,
                    "update_parameters": 3,
                    "update_params": 1,
                    "update_register": 1,
                    "update_register_values": 1,
                    "update_registers": 1,
                    "update_value": 1,
                    "update_variable": 1
                },
                "PTR_40000000": {
                    "special_addr2": 1
                },
                "PTR_40000400": {
                    "special_addr3": 1
                },
                "PTR_40000800": {
                    "special_addr4": 1
                },
                "PTR_40012c00": {
                    "special_addr1": 1
                },
                "local_c": {
                    "config_value": 1,
                    "curr_config": 1,
                    "current_config": 2,
                    "current_value": 6,
                    "modified_value": 1,
                    "old_value": 2,
                    "original_content": 1,
                    "original_value": 2,
                    "previous_value": 1,
                    "register_value": 1,
                    "temp": 7,
                    "temp_flag": 1,
                    "temp_value": 2,
                    "updated_value": 2,
                    "value_to_update": 1
                },
                "param_1": {
                    "address": 1,
                    "config": 3,
                    "config_ptr": 2,
                    "input_flags": 1,
                    "input_params": 2,
                    "memory": 1,
                    "memory_address": 5,
                    "memory_block": 1,
                    "memory_location": 1,
                    "old_param": 1,
                    "original_value": 1,
                    "register": 1,
                    "register1": 1,
                    "register_addr": 1,
                    "source": 2,
                    "source_pointer": 1,
                    "target": 1,
                    "target_addr": 1,
                    "target_memory": 2,
                    "target_params": 1,
                    "variable_1": 1
                },
                "param_2": {
                    "data": 4,
                    "dest": 1,
                    "destination": 1,
                    "input_values": 1,
                    "new_config": 2,
                    "new_config_ptr": 1,
                    "new_data": 1,
                    "new_param": 1,
                    "new_params": 2,
                    "new_value": 1,
                    "new_values": 5,
                    "new_values_pointer": 1,
                    "param_ptr": 1,
                    "param_values": 1,
                    "permissions": 1,
                    "register2": 1,
                    "source_data": 1,
                    "source_memory": 2,
                    "source_params": 1,
                    "values": 1,
                    "variable_2": 1
                },
                "uRam40012c30": {
                    "memory_config_value": 1,
                    "memory_value": 1,
                    "memory_value40012c30": 1,
                    "new_value": 1,
                    "parameter_four": 1,
                    "special_config_value": 1,
                    "special_register": 1,
                    "special_value": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_08003640",
                "FUN_080035a4"
            ],
            "code": "\nvoid update_memory_values_08003c94(uint *memory_address,uint *new_values)\n\n{\n  uint temp;\n  \n  temp = *memory_address;\n  if ((((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n      (memory_address == (uint *)0x40000400)) || (memory_address == (uint *)0x40000800)) {\n    temp = new_values[1] | temp & 0xffffff8f;\n  }\n  if (((memory_address == (uint *)0x40012c00) || (memory_address == (uint *)0x40000000)) ||\n     ((memory_address == (uint *)0x40000400 || (memory_address == (uint *)0x40000800)))) {\n    temp = new_values[3] | temp & 0xfffffcff;\n  }\n  *memory_address = new_values[5] | temp & 0xffffff7f;\n  memory_address[0xb] = new_values[2];\n  memory_address[10] = *new_values;\n  if (memory_address == (uint *)0x40012c00) {\n    special_value = new_values[4];\n  }\n  memory_address[5] = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_values_08003c94",
            "entrypoint": "0x08003c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003c94": "update_memory_values_08003c94",
                "local_c": "temp",
                "param_1": "memory_address",
                "param_2": "new_values",
                "uRam40012c30": "special_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003d60": {
            "additional_data": {
                "0x18": {
                    "flag2": 1
                },
                "0x20": {
                    "flag1": 1
                },
                "0x34": {
                    "flag3": 1
                },
                "0x40012c00": {
                    "special_case_address": 1
                },
                "FUN_08003d60": {
                    "initialize_function": 1,
                    "modify_data": 1,
                    "set_config": 1,
                    "set_flags_and_values": 1,
                    "update_configuration": 4,
                    "update_control_registers": 1,
                    "update_data": 5,
                    "update_device_info": 1,
                    "update_flags_and_values": 1,
                    "update_function_data": 1,
                    "update_memory_info": 1,
                    "update_parameters": 6,
                    "update_params": 1,
                    "update_registers": 1,
                    "update_values": 4
                },
                "local_10": {
                    "current_value": 3,
                    "existing_value": 1,
                    "local_value": 6,
                    "local_variable": 3,
                    "old_memory_value": 1,
                    "original_value": 1,
                    "param_value": 1,
                    "previous_value": 2,
                    "saved_value": 1,
                    "temp_value": 7,
                    "temp_var": 3,
                    "temp_var3": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 8,
                    "config_address": 5,
                    "control_register": 1,
                    "data_address": 3,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "device_info_ptr": 1,
                    "function_address": 1,
                    "function_data_ptr": 1,
                    "function_pointer": 1,
                    "memory_address": 1,
                    "param": 1,
                    "param_ptr": 1,
                    "register_value": 1
                },
                "param_2": {
                    "config_data": 4,
                    "data_array": 3,
                    "data_pointer": 1,
                    "data_values": 1,
                    "input_data": 2,
                    "input_ptr": 1,
                    "input_values": 2,
                    "memory_data": 1,
                    "new_configuration": 1,
                    "param_arr": 1,
                    "param_array": 1,
                    "param_ptr": 1,
                    "parameter_array": 1,
                    "parameters": 4,
                    "params_array": 1,
                    "register_data": 1,
                    "values": 5
                },
                "uVar1": {
                    "config_value": 1,
                    "current_param": 1,
                    "current_value": 1,
                    "data_value1": 1,
                    "first_data_value": 1,
                    "first_input": 1,
                    "first_param": 1,
                    "first_value": 2,
                    "input_value": 1,
                    "new_value": 2,
                    "new_value1": 6,
                    "old_config_value": 1,
                    "param0": 1,
                    "param2_value": 1,
                    "parameter_value": 1,
                    "temp_var1": 1,
                    "updated_value1": 1,
                    "val1": 1,
                    "value1": 5
                },
                "uVar2": {
                    "data_value2": 1,
                    "modified_flags": 1,
                    "modified_param": 1,
                    "new_value2": 6,
                    "param1": 1,
                    "second_param": 1,
                    "second_value": 2,
                    "temp_var2": 1,
                    "updated_config": 1,
                    "updated_config_value": 1,
                    "updated_value": 7,
                    "updated_value2": 1,
                    "val2": 1,
                    "value2": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_function_data_08003d60(int base_address,uint *values)\n\n{\n  uint new_value1;\n  uint updated_value;\n  uint temp_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  temp_value = *(uint *)(base_address + 4);\n  new_value1 = *values;\n  updated_value = values[2] | *(uint *)(base_address + 0x20) & 0xfffffffd;\n  if (base_address == 0x40012c00) {\n    updated_value = (values[3] | updated_value & 0xfffffff7) & 0xfffffffb;\n    temp_value = values[6] | values[5] | temp_value & 0xfffffcff;\n  }\n  *(uint *)(base_address + 4) = temp_value;\n  *(uint *)(base_address + 0x18) = new_value1 | *(uint *)(base_address + 0x18) & 0xffffff8c;\n  *(uint *)(base_address + 0x34) = values[1];\n  *(uint *)(base_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_function_data_08003d60",
            "entrypoint": "0x08003d60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003d60": "update_function_data_08003d60",
                "local_10": "temp_value",
                "param_1": "base_address",
                "param_2": "values",
                "uVar1": "new_value1",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003e38": {
            "additional_data": {
                "0x18": {
                    "another_offset": 1
                },
                "0x20": {
                    "some_offset": 1
                },
                "0x38": {
                    "yet_another_offset": 1
                },
                "FUN_08003e38": {
                    "modify_data": 1,
                    "update_config": 3,
                    "update_data": 14,
                    "update_function_data": 1,
                    "update_param": 1,
                    "update_parameter_settings": 1,
                    "update_parameter_values": 1,
                    "update_parameters": 5,
                    "update_params": 1,
                    "update_settings": 1,
                    "update_state": 1,
                    "update_value": 1
                },
                "iVar1": {
                    "first_value": 2,
                    "input_value": 1,
                    "param1": 3,
                    "param_value": 2,
                    "param_value1": 2,
                    "parameter1": 1,
                    "parameter_value": 1,
                    "temp_var": 1,
                    "temp_var1": 5,
                    "value": 3,
                    "value1": 7,
                    "var1": 3
                },
                "local_10": {
                    "flags": 1,
                    "initial_value": 1,
                    "local_config": 1,
                    "local_value": 10,
                    "temp_local": 1,
                    "temp_value": 3,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 4,
                    "value": 1,
                    "value2": 1,
                    "value3": 4,
                    "value_initial": 1,
                    "var3": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 7,
                    "config_addr": 1,
                    "config_address": 2,
                    "data_address": 9,
                    "data_pointer": 3,
                    "function_data_address": 1,
                    "param_address": 2,
                    "parameter_address": 1,
                    "settings_address": 1,
                    "state_address": 1
                },
                "param_2": {
                    "config_data": 2,
                    "config_values": 1,
                    "data": 4,
                    "data_array": 3,
                    "data_values": 2,
                    "input_data": 1,
                    "input_params": 1,
                    "param_array": 5,
                    "parameter_array": 2,
                    "parameters": 4,
                    "params": 2,
                    "params_array": 3,
                    "settings_data": 1
                },
                "uVar2": {
                    "combined_value": 1,
                    "modified_value": 6,
                    "new_data": 1,
                    "param2": 2,
                    "temp_var2": 4,
                    "updated_config": 1,
                    "updated_parameter": 1,
                    "updated_value": 7,
                    "value2": 6,
                    "var2": 2
                },
                "updateParams": {
                    "update_params": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_function_data_08003e38(int data_address,int *param_array)\n\n{\n  int value1;\n  uint updated_value;\n  uint local_value;\n  \n  *(uint *)(data_address + 0x20) = *(uint *)(data_address + 0x20) & 0xffffffef;\n  local_value = *(uint *)(data_address + 4);\n  value1 = *param_array;\n  updated_value = param_array[2] << 4 | *(uint *)(data_address + 0x20) & 0xffffffdf;\n  if (data_address == 0x40012c00) {\n    updated_value = (param_array[3] << 4 | updated_value & 0xffffff7f) & 0xffffffbf;\n    local_value = param_array[6] << 2 | param_array[5] << 2 | local_value & 0xfffff3ff;\n  }\n  *(uint *)(data_address + 4) = local_value;\n  *(uint *)(data_address + 0x18) = value1 << 8 | *(uint *)(data_address + 0x18) & 0xffff8cff;\n  *(int *)(data_address + 0x38) = param_array[1];\n  *(uint *)(data_address + 0x20) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_function_data_08003e38",
            "entrypoint": "0x08003e38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003e38": "update_function_data_08003e38",
                "iVar1": "value1",
                "local_10": "local_value",
                "param_1": "data_address",
                "param_2": "param_array",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f18": {
            "additional_data": {
                "FUN_08003f18": {
                    "extract_and_modify_data": 1,
                    "modify_parameters": 1,
                    "update_configuration": 3,
                    "update_data": 8,
                    "update_memory": 1,
                    "update_param": 1,
                    "update_param_value": 1,
                    "update_param_values": 3,
                    "update_parameter": 2,
                    "update_parameters": 8,
                    "update_params": 1,
                    "update_register_values": 1
                },
                "local_10": {
                    "local_value": 11,
                    "local_var": 1,
                    "local_variable": 1,
                    "modified_value": 2,
                    "new_value": 1,
                    "original_value": 2,
                    "saved_value": 1,
                    "temp_value": 5,
                    "temp_var": 1,
                    "updated_value": 1,
                    "value": 2,
                    "value3": 2,
                    "var3": 1
                },
                "param_1": {
                    "address": 8,
                    "base_address": 10,
                    "config_address": 2,
                    "configuration_address": 1,
                    "data_address": 4,
                    "data_offset": 1,
                    "data_ptr": 1,
                    "param_address": 1,
                    "param_base": 1,
                    "register_address": 1,
                    "target_address": 1
                },
                "param_2": {
                    "array": 1,
                    "config_data": 2,
                    "data": 5,
                    "data_array": 1,
                    "data_ptr": 2,
                    "data_values": 1,
                    "input_data": 2,
                    "input_params": 1,
                    "input_values": 2,
                    "param_array": 4,
                    "parameters": 6,
                    "params": 1,
                    "params_array": 1,
                    "values": 2
                },
                "uVar1": {
                    "first_data": 1,
                    "first_param": 1,
                    "first_value": 2,
                    "input_value1": 2,
                    "new_value": 4,
                    "new_value1": 6,
                    "param1_value": 2,
                    "value1": 10,
                    "value_1": 2,
                    "var1": 1
                },
                "uVar2": {
                    "modified_value": 3,
                    "new_value2": 6,
                    "param2_value": 2,
                    "second_data": 1,
                    "second_param": 1,
                    "second_value": 2,
                    "updated_value": 3,
                    "value2": 10,
                    "value_2": 2,
                    "var2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_param_value_08003f18(int base_address,uint *parameters)\n\n{\n  uint value1;\n  uint value2;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  local_value = *(uint *)(base_address + 4);\n  value1 = *parameters;\n  value2 = parameters[2] << 8 | *(uint *)(base_address + 0x20) & 0xfffffdff;\n  if (base_address == 0x40012c00) {\n    value2 = (parameters[3] << 8 | value2 & 0xfffff7ff) & 0xfffffbff;\n    local_value = parameters[6] << 4 | parameters[5] << 4 | local_value & 0xffffcfff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x1c) = value1 | *(uint *)(base_address + 0x1c) & 0xffffff8c;\n  *(uint *)(base_address + 0x3c) = parameters[1];\n  *(uint *)(base_address + 0x20) = value2;\n  return;\n}\n\n",
            "current_name": "update_param_value_08003f18",
            "entrypoint": "0x08003f18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f18": "update_param_value_08003f18",
                "local_10": "local_value",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ff8": {
            "additional_data": {
                "FUN_08003ff8": {
                    "modify_and_set_values": 1,
                    "update_data": 9,
                    "update_flags": 2,
                    "update_flags_and_values": 5,
                    "update_memory": 1,
                    "update_memory_values": 1,
                    "update_param": 1,
                    "update_parameter": 2,
                    "update_parameters": 4,
                    "update_params": 4,
                    "update_values": 1
                },
                "iVar1": {
                    "first_param": 2,
                    "first_parameter": 1,
                    "first_value": 2,
                    "param1_value": 4,
                    "param1_var": 1,
                    "param2_value": 1,
                    "value1": 16,
                    "value_1": 1,
                    "var1": 3
                },
                "iVar2": {
                    "param2_value": 4,
                    "param2_var": 1,
                    "param3_value": 1,
                    "second_param": 1,
                    "second_value": 2,
                    "third_param": 1,
                    "third_parameter": 1,
                    "value2": 16,
                    "value_2": 1,
                    "var2": 3
                },
                "local_c": {
                    "current_value": 4,
                    "flags": 3,
                    "local_value": 7,
                    "local_var": 2,
                    "local_variable": 1,
                    "masked_local": 1,
                    "masked_value": 2,
                    "modified_value": 1,
                    "param4_value": 1,
                    "temp": 1,
                    "temp_value": 5,
                    "value": 1,
                    "value_c": 2
                },
                "param_1": {
                    "base_address": 16,
                    "config_address": 1,
                    "data_address": 6,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "memory_address": 2,
                    "param": 1,
                    "param_address": 1,
                    "ptr_to_params": 1
                },
                "param_2": {
                    "config_data": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_values": 1,
                    "data_vector": 1,
                    "input_array": 1,
                    "input_params": 1,
                    "param_array": 7,
                    "param_list": 1,
                    "parameter_array": 1,
                    "parameters": 7,
                    "params": 1,
                    "params_array": 4,
                    "ptr_to_values": 1,
                    "values": 1,
                    "values_array": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003908"
            ],
            "code": "\nvoid update_data_08003ff8(int base_address,int *parameters)\n\n{\n  int value1;\n  int value2;\n  uint local_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  local_value = *(uint *)(base_address + 4);\n  value1 = *parameters;\n  value2 = parameters[2];\n  if (base_address == 0x40012c00) {\n    local_value = parameters[5] << 6 | local_value & 0xffffbfff;\n  }\n  *(uint *)(base_address + 4) = local_value;\n  *(uint *)(base_address + 0x1c) = value1 << 8 | *(uint *)(base_address + 0x1c) & 0xffff8cff;\n  *(int *)(base_address + 0x40) = parameters[1];\n  *(uint *)(base_address + 0x20) = value2 << 0xc | *(uint *)(base_address + 0x20) & 0xffffdfff;\n  return;\n}\n\n",
            "current_name": "update_data_08003ff8",
            "entrypoint": "0x08003ff8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ff8": "update_data_08003ff8",
                "iVar1": "value1",
                "iVar2": "value2",
                "local_c": "local_value",
                "param_1": "base_address",
                "param_2": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040a0": {
            "additional_data": {
                "FUN_080040a0": {
                    "clear_bits_and_set_values": 1,
                    "set_parameters": 1,
                    "update_bits": 1,
                    "update_bitwise_operations": 1,
                    "update_data": 2,
                    "update_flags_and_values": 6,
                    "update_memory": 1,
                    "update_param": 1,
                    "update_param_and_flags": 1,
                    "update_param_data": 1,
                    "update_param_values": 1,
                    "update_parameter": 2,
                    "update_parameter_values": 1,
                    "update_parameters": 3,
                    "update_params": 5,
                    "update_registers": 1,
                    "update_values": 2
                },
                "param_1": {
                    "address": 2,
                    "arg1": 1,
                    "base_address": 8,
                    "data": 1,
                    "data_address": 2,
                    "data_ptr": 1,
                    "function_pointer": 1,
                    "input": 1,
                    "input_address": 2,
                    "memory_address": 1,
                    "p_struct": 1,
                    "param": 1,
                    "param_address": 2,
                    "param_base_addr": 1,
                    "param_pointer": 1,
                    "pointer": 1,
                    "ptr": 2,
                    "register_base": 1,
                    "target_address": 1
                },
                "param_2": {
                    "additional_value": 1,
                    "arg2": 1,
                    "bit_mask": 1,
                    "bitmask": 1,
                    "flag_value": 1,
                    "flags": 2,
                    "input_value": 2,
                    "mask": 5,
                    "new_flags": 1,
                    "new_param": 1,
                    "new_param2": 1,
                    "new_value": 7,
                    "value": 5,
                    "value1": 1,
                    "value_to_update1": 1
                },
                "param_3": {
                    "arg3": 1,
                    "bit_mask": 1,
                    "bit_shift_amount": 1,
                    "bit_value": 1,
                    "bits_to_shift": 1,
                    "index": 1,
                    "new_value": 2,
                    "offset": 1,
                    "param3": 1,
                    "shift": 1,
                    "shift_amount": 3,
                    "shift_value": 6,
                    "shifted_value": 1,
                    "value": 7,
                    "value2": 1,
                    "value_to_update": 1,
                    "value_to_update2": 1
                },
                "uVar1": {
                    "current_value": 3,
                    "old_flag_value": 1,
                    "old_value": 3,
                    "original_flag_value": 1,
                    "original_value": 3,
                    "prev_param1": 1,
                    "previous_value": 4,
                    "register_value1": 1,
                    "saved_flags": 1,
                    "saved_value": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_value": 1,
                    "temp_var": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_flags_and_values_080040a0(int base_address,uint new_value,int value)\n\n{\n  uint previous_value;\n  \n  previous_value = *(uint *)(base_address + 0x20);\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  *(uint *)(base_address + 0x18) = value << 4 | *(uint *)(base_address + 0x18) & 0xffffff0f;\n  *(uint *)(base_address + 0x20) = new_value | previous_value & 0xfffffff5;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_080040a0",
            "entrypoint": "0x080040a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040a0": "update_flags_and_values_080040a0",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "value",
                "uVar1": "previous_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004104": {
            "additional_data": {
                "0x12": {
                    "shifted_bits": 1
                },
                "0x18": {
                    "data1": 1,
                    "flags": 1,
                    "mask_address": 1
                },
                "0x20": {
                    "data2": 1,
                    "flags_address": 1,
                    "mask": 1
                },
                "FUN_08004104": {
                    "clear_bit_and_shift": 1,
                    "clear_bit_shift_values": 1,
                    "clear_bits_and_shift": 1,
                    "clear_flags": 1,
                    "clear_flags_and_set_values": 1,
                    "set_bits": 2,
                    "set_bits_and_shift": 1,
                    "set_flag_and_values": 1,
                    "set_flags_and_values": 2,
                    "update_bits_in_memory": 1,
                    "update_flags": 4,
                    "update_flags_and_values": 8,
                    "update_parameters": 4,
                    "update_params": 3
                },
                "param_1": {
                    "address": 4,
                    "base_address": 16,
                    "buffer_address": 1,
                    "data": 4,
                    "data_pointer": 3,
                    "object_address": 2,
                    "ptr": 1
                },
                "param_2": {
                    "bit_value": 1,
                    "bitmask": 1,
                    "flag_value": 1,
                    "new_value": 2,
                    "new_value2": 1,
                    "param2_value": 2,
                    "shift_value": 1,
                    "value": 7,
                    "value1": 12,
                    "value2": 1,
                    "value_1": 1,
                    "value_2": 1
                },
                "param_3": {
                    "bit_pattern": 1,
                    "bits": 1,
                    "bits_to_set": 1,
                    "bitwise_shift": 1,
                    "field_value": 1,
                    "flag_bits": 1,
                    "new_value3": 1,
                    "param3_value": 2,
                    "shift_amount": 2,
                    "shift_value": 1,
                    "shifted_value": 3,
                    "value": 1,
                    "value1": 1,
                    "value2": 12,
                    "value_2": 1,
                    "value_3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_flags_and_values_08004104(int base_address,int value1,int value2)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  *(uint *)(base_address + 0x18) = value2 << 0xc | *(uint *)(base_address + 0x18) & 0xffff0fff;\n  *(uint *)(base_address + 0x20) = value1 << 4 | *(uint *)(base_address + 0x20) & 0xffffff5f;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_08004104",
            "entrypoint": "0x08004104",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004104": "update_flags_and_values_08004104",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800416a": {
            "additional_data": {
                "0xffffff8f": {
                    "bitmask": 2,
                    "flag_mask": 1,
                    "mask": 1
                },
                "7": {
                    "bitmask": 1
                },
                "8": {
                    "offset": 1
                },
                "DAT_0000008f": {
                    "mask": 1
                },
                "FUN_0800416a": {
                    "apply_parameter_mask": 1,
                    "set_flag_bit": 1,
                    "set_param_flags": 1,
                    "set_param_value": 2,
                    "update_and_set_param": 1,
                    "update_data": 2,
                    "update_flag": 1,
                    "update_flag_in_memory": 1,
                    "update_flag_value": 1,
                    "update_flag_with_param": 1,
                    "update_flags": 1,
                    "update_flags_with_param": 1,
                    "update_param": 1,
                    "update_param_value": 3,
                    "update_param_with_bits": 1,
                    "update_parameter": 4,
                    "update_parameter_bits": 1,
                    "update_parameter_value": 3,
                    "update_parameter_with_flags": 1,
                    "update_value": 2,
                    "update_value_in_memory": 1
                },
                "newVariable_1": {
                    "new_value": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 14,
                    "base_pointer": 1,
                    "context_pointer": 1,
                    "data_address": 3,
                    "flag_address": 1,
                    "input_address": 1,
                    "memory_address": 2,
                    "object_ptr": 1,
                    "param_address": 1,
                    "param_base": 1,
                    "parameter1": 1,
                    "ptr": 1
                },
                "param_2": {
                    "bits": 1,
                    "flag_value": 2,
                    "flags": 2,
                    "new_bits": 2,
                    "new_data": 1,
                    "new_param": 1,
                    "new_param_value": 1,
                    "new_parameter": 1,
                    "new_value": 10,
                    "parameter2": 1,
                    "value": 9
                },
                "param_3": {
                    "masked_value": 1
                },
                "uint": {
                    "unsigned_int": 2,
                    "unsigned_integer": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameter_value_0800416a(int base_address,ushort new_value)\n\n{\n  *(unsigned_integer *)(base_address + 8) = *(unsigned_integer *)(base_address + 8) & 0xffffff8f | (unsigned_integer)(new_value | 7);\n  return;\n}\n\n",
            "current_name": "update_parameter_value_0800416a",
            "entrypoint": "0x0800416a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800416a": "update_parameter_value_0800416a",
                "param_1": "base_address",
                "param_2": "new_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a8": {
            "additional_data": {
                "FUN_080041a8": {
                    "set_combined_values": 1,
                    "set_flag_bits": 1,
                    "set_param": 2,
                    "set_param_flags": 1,
                    "set_params": 1,
                    "update_data": 3,
                    "update_param": 4,
                    "update_param_values": 1,
                    "update_parameter": 9,
                    "update_parameter_value": 1,
                    "update_parameter_with_flags": 1,
                    "update_params": 1,
                    "update_value": 2,
                    "update_values": 2,
                    "write_to_memory": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 7,
                    "buffer": 1,
                    "data_address": 2,
                    "data_pointer": 3,
                    "data_ptr": 5,
                    "flag_address": 1,
                    "object_address": 2,
                    "param": 1,
                    "param_address": 1,
                    "param_ptr": 1,
                    "parameter_address": 1,
                    "structure_pointer": 1,
                    "target_address": 1
                },
                "param_2": {
                    "first_value": 1,
                    "flag_1": 1,
                    "new_bits": 1,
                    "new_bits1": 1,
                    "new_data": 1,
                    "new_param1": 1,
                    "new_value": 2,
                    "new_value1": 3,
                    "new_value_1": 1,
                    "value": 1,
                    "value1": 17,
                    "value_1": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "flag_2": 1,
                    "lower_bits": 1,
                    "mask": 2,
                    "new_bits2": 1,
                    "new_param2": 1,
                    "new_value2": 3,
                    "new_value_2": 1,
                    "second_value": 1,
                    "value2": 17,
                    "value_2": 1,
                    "value_mask": 1
                },
                "param_4": {
                    "flag": 1,
                    "flag_3": 1,
                    "shift_amount": 5,
                    "shift_value": 6,
                    "value3": 17,
                    "value_3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a94"
            ],
            "code": "\nvoid update_parameter_with_flags_080041a8(int base_address,uint value1,uint value2,int value3)\n\n{\n  *(uint *)(base_address + 8) = value1 | value3 << 8 | value2 | *(uint *)(base_address + 8) & 0xffff00ff;\n  return;\n}\n\n",
            "current_name": "update_parameter_with_flags_080041a8",
            "entrypoint": "0x080041a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a8": "update_parameter_with_flags_080041a8",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041ea": {
            "additional_data": {
                "FUN_080041ea": {
                    "set_bit_in_memory": 1,
                    "set_bit_value": 1,
                    "update_bit": 3,
                    "update_bit_field": 1,
                    "update_bit_in_value": 1,
                    "update_bit_value": 7,
                    "update_bits": 5,
                    "update_bits_in_value": 1,
                    "update_bitwise": 1,
                    "update_bitwise_data": 1,
                    "update_bitwise_operation": 1,
                    "update_bitwise_shift": 1,
                    "update_bitwise_value": 5,
                    "update_flags": 1,
                    "update_value": 1
                },
                "bitPosition": {
                    "bit_position": 1
                },
                "data": {
                    "data": 1
                },
                "param_1": {
                    "address": 2,
                    "array": 1,
                    "base_address": 20,
                    "data": 4,
                    "memory_address": 1,
                    "object_address": 1,
                    "ptr": 1,
                    "value_address": 1
                },
                "param_2": {
                    "bit_index": 4,
                    "bit_offset": 1,
                    "bit_position": 25,
                    "position": 1
                },
                "param_3": {
                    "bit_value": 8,
                    "new_bit_value": 1,
                    "new_value": 18,
                    "value": 4
                },
                "value": {
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080036a8"
            ],
            "code": "\nvoid update_bit_in_value_080041ea(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) | new_value << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "update_bit_in_value_080041ea",
            "entrypoint": "0x080041ea",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041ea": "update_bit_in_value_080041ea",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800422e": {
            "additional_data": {
                "FUN_0800422e": {
                    "check_and_update_flag": 3,
                    "check_flag_status": 2,
                    "extract_data": 1,
                    "process_data": 1,
                    "process_param": 1,
                    "reverse_and_set_flag": 1,
                    "reverse_check": 1,
                    "set_flag": 1,
                    "set_flag_and_assign_value": 1,
                    "set_flag_value": 2,
                    "set_permission_bit": 1,
                    "set_variable_based_on_flag": 1,
                    "update_config": 1,
                    "update_data": 1,
                    "update_flag_and_set_value": 1,
                    "update_flag_and_set_values": 1,
                    "update_flag_and_value": 1,
                    "update_flags": 1,
                    "update_flags_and_values": 1,
                    "update_flags_based_on_condition": 1,
                    "update_memory_values": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 2,
                    "update_value_if_condition_met": 1
                },
                "param_1": {
                    "array": 3,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "config_ptr": 1,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "flag_array": 3,
                    "flag_data": 1,
                    "flag_status": 1,
                    "flags": 1,
                    "input_arr": 1,
                    "input_array": 6,
                    "input_params": 1,
                    "memory_block": 1,
                    "param_array": 3,
                    "param_pointer": 1,
                    "parameter_array": 1,
                    "parameter_one": 1,
                    "perm_array": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "data": 3,
                    "data_arr": 1,
                    "data_array": 8,
                    "data_ptr": 2,
                    "flag_values": 1,
                    "input_data": 1,
                    "input_values": 1,
                    "param_array": 4,
                    "param_values": 1,
                    "parameter_two": 1,
                    "update_values": 1,
                    "value_array": 2,
                    "values": 3,
                    "values_to_update": 1
                },
                "uVar1": {
                    "result": 9,
                    "return_value": 20
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nundefined4 update_flag_and_set_value_0800422e(int *input_array,uint *data_array)\n\n{\n  undefined4 return_value;\n  \n  if (*(char *)(input_array + 0xf) == '\\x01') {\n    return_value = 2;\n  }\n  else {\n    *(undefined *)(input_array + 0xf) = 1;\n    *(uint *)(*input_array + 0x44) =\n         data_array[6] |\n         (data_array[6] |\n         (data_array[5] |\n         (data_array[4] |\n         (*data_array | (data_array[1] | (data_array[2] | data_array[3] & 0xfffffcff) & 0xfffffbff) & 0xfffff7ff\n         ) & 0xffffefff) & 0xffffdfff) & 0xffffbfff) & 0xffff7fff;\n    *(undefined *)(input_array + 0xf) = 0;\n    return_value = 0;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_flag_and_set_value_0800422e",
            "entrypoint": "0x0800422e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800422e": "update_flag_and_set_value_0800422e",
                "param_1": "input_array",
                "param_2": "data_array",
                "uVar1": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080042de": {
            "additional_data": {
                "FUN_080042de": {
                    "check_and_update_flag": 1,
                    "check_and_update_flags": 1,
                    "check_flag": 3,
                    "check_flag_and_update": 1,
                    "process_data": 1,
                    "process_param": 1,
                    "process_parameter": 1,
                    "set_flag_if_true": 1,
                    "set_flags_and_values": 1,
                    "update_access_flags": 1,
                    "update_array": 1,
                    "update_flag_and_bits": 1,
                    "update_flag_and_values": 1,
                    "update_flags": 2,
                    "update_flags_and_return": 2,
                    "update_flags_and_state": 1,
                    "update_flags_and_update_values": 1,
                    "update_flags_and_values": 3,
                    "update_memory": 1,
                    "update_parameter": 1,
                    "update_permissions": 4,
                    "update_value": 1
                },
                "param_1": {
                    "array": 6,
                    "data": 2,
                    "data_array": 1,
                    "data_pointer": 1,
                    "flag": 1,
                    "flag_array": 4,
                    "flag_state": 1,
                    "flags": 1,
                    "flags_and_state": 1,
                    "input_array": 4,
                    "int_array": 1,
                    "memory_address": 1,
                    "object_ptr": 1,
                    "param_array": 1,
                    "parameter_array": 1,
                    "parameter_list": 1,
                    "permissions": 1,
                    "permissions_array": 1,
                    "permissions_ptr": 1
                },
                "param_2": {
                    "bit_mask_array": 1,
                    "bitmask": 1,
                    "config_array": 1,
                    "data": 2,
                    "flag_bits": 1,
                    "flags": 1,
                    "flags_array": 2,
                    "input_array2": 1,
                    "mask": 2,
                    "mask_ptr": 1,
                    "new_flags": 1,
                    "new_permissions": 2,
                    "new_values": 1,
                    "param_array": 1,
                    "permissions": 1,
                    "uint_array": 1,
                    "update_values_array": 1,
                    "value": 1,
                    "value_array": 3,
                    "value_list": 1,
                    "value_to_write": 1,
                    "values": 4
                },
                "uVar1": {
                    "result": 17,
                    "return_value": 8,
                    "status": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_080053b0",
                "FUN_08005500"
            ],
            "code": "\nundefined4 update_flags_and_update_values_080042de(int *array,uint *values)\n\n{\n  undefined4 result;\n  \n  if (*(char *)(array + 0xf) == '\\x01') {\n    result = 2;\n  }\n  else {\n    *(undefined *)(array + 0xf) = 1;\n    *(undefined *)((int)array + 0x3d) = 2;\n    *(uint *)(*array + 4) = *(uint *)(*array + 4) & 0xffffff8f;\n    *(uint *)(*array + 4) = *values | *(uint *)(*array + 4);\n    *(uint *)(*array + 8) = *(uint *)(*array + 8) & 0xffffff7f;\n    *(uint *)(*array + 8) = values[1] | *(uint *)(*array + 8);\n    *(undefined *)((int)array + 0x3d) = 1;\n    *(undefined *)(array + 0xf) = 0;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_flags_and_update_values_080042de",
            "entrypoint": "0x080042de",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080042de": "update_flags_and_update_values_080042de",
                "param_1": "array",
                "param_2": "values",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004366": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004366(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004366",
            "entrypoint": "0x08004366",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004366": "FUNC_08004366"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004378": {
            "called": [],
            "calling": [
                "FUN_080036f8"
            ],
            "code": "\nvoid FUNC_08004378(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004378",
            "entrypoint": "0x08004378",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004378": "FUNC_08004378"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800438a": {
            "additional_data": {
                "FUNC_08004424": {
                    "func1": 1,
                    "function_1": 1,
                    "function_a": 2,
                    "helper_function": 1,
                    "initialize_default_settings": 1,
                    "initialize_default_values": 1,
                    "initialize_func": 1,
                    "initialize_uart_settings": 1,
                    "perform_additional_operations": 1,
                    "reverse_something": 1,
                    "reversed_func": 1,
                    "reversing_function": 1,
                    "some_function": 2,
                    "unknown_function": 1,
                    "unspecified_function1": 1
                },
                "FUN_0800438a": {
                    "configure_uart_port": 1,
                    "initialize_communication": 1,
                    "initialize_uart": 28,
                    "initialize_uart_connection": 1
                },
                "FUN_080046ec": {
                    "another_function": 2,
                    "func2": 1,
                    "function_2": 1,
                    "function_b": 2,
                    "handle_uart_error": 1,
                    "initialize_hal_uart": 1,
                    "manipulate_uart": 1,
                    "process_uart": 1,
                    "reverse_data": 1,
                    "reverse_func": 1,
                    "reverse_params": 1,
                    "reverse_something": 1,
                    "set_uart_parameters": 1,
                    "unknown_function": 1,
                    "unspecified_function2": 1,
                    "update_uart_parameters": 1
                },
                "HAL_UART_MspInit": {
                    "configure_uart_pins": 2,
                    "enable_uart_gpio": 1,
                    "init_uart_peripheral": 1,
                    "initialize_peripheral": 1,
                    "initialize_uart": 1,
                    "initialize_uart_gpio": 1,
                    "initialize_uart_hardware": 1,
                    "initialize_uart_msp": 2,
                    "initialize_uart_peripheral": 5,
                    "initialize_uart_peripherals": 4
                },
                "UART_SetConfig": {
                    "configure_uart": 6,
                    "configure_uart_settings": 1,
                    "set_uart_config": 5,
                    "set_uart_configuration": 8
                },
                "param_1": {
                    "communication_data": 1,
                    "config": 1,
                    "uart": 2,
                    "uart_config": 4,
                    "uart_data": 1,
                    "uart_handle": 7,
                    "uart_handler": 1,
                    "uart_instance": 12,
                    "uart_params": 1,
                    "uart_port": 1
                },
                "uVar1": {
                    "error_code": 3,
                    "result": 15,
                    "return_value": 1,
                    "status": 9,
                    "success": 2
                }
            },
            "called": [
                "FUN_08004424",
                "FUN_080046ec"
            ],
            "calling": [
                "FUN_08005598"
            ],
            "code": "\nundefined4 initialize_uart_connection_0800438a(int *uart_instance)\n\n{\n  undefined4 result;\n  \n  if (uart_instance == (int *)0x0) {\n    result = 1;\n  }\n  else {\n    if (*(char *)((int)uart_instance + 0x39) == '\\0') {\n      *(undefined *)(uart_instance + 0xe) = 0;\n      initialize_uart_peripheral(uart_instance);\n    }\n    *(undefined *)((int)uart_instance + 0x39) = 0x24;\n    *(uint *)(*uart_instance + 0xc) = *(uint *)(*uart_instance + 0xc) & 0xffffdfff;\n    set_uart_configuration(uart_instance);\n    *(uint *)(*uart_instance + 0x10) = *(uint *)(*uart_instance + 0x10) & 0xffffb7ff;\n    *(uint *)(*uart_instance + 0x14) = *(uint *)(*uart_instance + 0x14) & 0xffffffd5;\n    *(uint *)(*uart_instance + 0xc) = *(uint *)(*uart_instance + 0xc) | 0x2000;\n    uart_instance[0xf] = 0;\n    *(undefined *)((int)uart_instance + 0x39) = 0x20;\n    *(undefined *)((int)uart_instance + 0x3a) = 0x20;\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "initialize_uart_connection_0800438a",
            "entrypoint": "0x0800438a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800438a": "initialize_uart_connection_0800438a",
                "HAL_UART_MspInit": "initialize_uart_peripheral",
                "UART_SetConfig": "set_uart_configuration",
                "param_1": "uart_instance",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004424": {
            "called": [],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid FUNC_08004424(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08004424",
            "entrypoint": "0x08004424",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08004424": "FUNC_08004424"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08004436": {
            "additional_data": {
                "FUN_08004436": {
                    "check_and_process_data": 1,
                    "parse_data": 1,
                    "process_data": 24,
                    "process_input": 5
                },
                "HAL_GetTick": {
                    "get_current_time": 2,
                    "get_time": 1
                },
                "iVar1": {
                    "current_time": 3,
                    "start_ticks": 1,
                    "start_time": 11,
                    "tick_start": 1,
                    "time1": 1,
                    "time_start": 2
                },
                "iVar2": {
                    "current_ticks": 1,
                    "current_time": 12,
                    "elapsed_time": 3,
                    "tick_end": 1,
                    "time2": 1,
                    "time_end": 1
                },
                "local_58": {
                    "buffer_ptr": 3,
                    "curr_input": 1,
                    "current_data": 11,
                    "current_data_ptr": 1,
                    "current_element": 4,
                    "current_input": 7,
                    "current_source": 1,
                    "data_ptr": 2,
                    "ptr_to_input": 1
                },
                "param_1": {
                    "data": 13,
                    "data_arr": 1,
                    "data_array": 1,
                    "data_matrix": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input": 3,
                    "input_array": 2,
                    "input_data": 3,
                    "input_params": 1,
                    "input_ptr": 1,
                    "param_array": 2,
                    "param_list": 1
                },
                "param_2": {
                    "buffer": 2,
                    "data": 6,
                    "data_arr": 1,
                    "data_buffer": 3,
                    "data_ptr": 1,
                    "input": 6,
                    "input_arr": 1,
                    "input_array": 5,
                    "input_buffer": 2,
                    "input_data": 3,
                    "source": 1
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 3,
                    "data_length": 4,
                    "data_size": 4,
                    "input_length": 8,
                    "input_size": 7,
                    "length": 1,
                    "source_length": 1
                },
                "param_4": {
                    "timeout": 31
                },
                "return": {
                    "result": 1
                },
                "uVar3": {
                    "result": 25,
                    "return_value": 2
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [
                "FUN_08004f3c"
            ],
            "code": "\nundefined4 check_and_process_data_08004436(uint **data,ushort *input,short input_length,uint timeout)\n\n{\n  int start_time;\n  int current_time;\n  undefined4 result;\n  ushort *current_data;\n  \n  if (*(char *)((int)data + 0x39) == ' ') {\n    if ((input == (ushort *)0x0) || (input_length == 0)) {\n      result = 1;\n    }\n    else if (*(char *)(data + 0xe) == '\\x01') {\n      result = 2;\n    }\n    else {\n      *(undefined *)(data + 0xe) = 1;\n      data[0xf] = (uint *)0x0;\n      *(undefined *)((int)data + 0x39) = 0x21;\n      start_time = get_current_time();\n      *(short *)(data + 9) = input_length;\n      *(short *)((int)data + 0x26) = input_length;\n      current_data = input;\n      while (*(short *)((int)data + 0x26) != 0) {\n        *(short *)((int)data + 0x26) = *(short *)((int)data + 0x26) + -1;\n        if (data[2] == (uint *)0x1000) {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              current_time = 0;\n              goto LAB_0800454c;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          current_time = 3;\nLAB_0800454c:\n          if (current_time != 0) {\n            result 3;\n          }\n          (*data)[1] = *current_data & 0x1ff;\n          if (data[4] == (uint *)0x0) {\n            current_data = current_data + 1;\n          }\n          else {\n            current_data = (ushort *)((int)current_data + 1);\n          }\n        }\n        else {\n          do {\n            if ((**data & 0x80) == 0x80) {\n              current_time = 0;\n              goto LAB_08004614;\n            }\n          } while ((timeout == 0xffffffff) ||\n                  ((timeout != 0 && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout))));\n          (*data)[3] = (*data)[3] & 0xfffffe5f;\n          (*data)[5] = (*data)[5] & 0xfffffffe;\n          *(undefined *)((int)data + 0x39) = 0x20;\n          *(undefined *)((int)data + 0x3a) = 0x20;\n          *(undefined *)(data + 0xe) = 0;\n          current_time = 3;\nLAB_08004614:\n          if (current_time != 0) {\n            result 3;\n          }\n          (*data)[1] = (uint)*(byte *)current_data;\n          current_data = (ushort *)((int)current_data + 1);\n        }\n      }\n      do {\n        if ((**data & 0x40) == 0x40) {\n          start_time = 0;\n          goto LAB_080046c6;\n        }\n      } while ((timeout == 0xffffffff) ||\n              ((timeout != 0 && (current_time = get_current_time(), (uint)(current_time - start_time) <= timeout))));\n      (*data)[3] = (*data)[3] & 0xfffffe5f;\n      (*data)[5] = (*data)[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 0x20;\n      *(undefined *)((int)data + 0x3a) = 0x20;\n      *(undefined *)(data + 0xe) = 0;\n      start_time = 3;\nLAB_080046c6:\n      if (start_time == 0) {\n        *(undefined *)((int)data + 0x39) = 0x20;\n        *(undefined *)(data + 0xe) = 0;\n        result = 0;\n      }\n      else {\n        result = 3;\n      }\n    }\n  }\n  else {\n    result = 2;\n  }\n  result result;\n}\n\n",
            "current_name": "check_and_process_data_08004436",
            "entrypoint": "0x08004436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004436": "check_and_process_data_08004436",
                "HAL_GetTick": "get_current_time",
                "iVar1": "start_time",
                "iVar2": "current_time",
                "local_58": "current_data",
                "param_1": "data",
                "param_2": "input",
                "param_3": "input_length",
                "param_4": "timeout",
                "return": "result",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046ec": {
            "additional_data": {
                "FUN_080046ec": {
                    "calculate_and_set_pclk2_value": 1,
                    "calculate_and_store_clock_frequency": 1,
                    "calculate_and_update_clocks": 1,
                    "calculate_and_update_freq": 1,
                    "calculate_clock_divider": 1,
                    "calculate_clock_division": 1,
                    "calculate_clock_freq": 2,
                    "calculate_clock_frequency": 10,
                    "calculate_clock_ratio": 1,
                    "calculate_clock_speed": 3,
                    "calculate_clocks": 1,
                    "calculate_frequency": 1,
                    "calculate_param_offset": 1,
                    "calculate_pclk": 1,
                    "calculate_pclk2": 1,
                    "update_clock_configuration": 1,
                    "update_clock_control": 1,
                    "update_clock_frequency": 1,
                    "update_clock_params": 1
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "get_apb1_clock_frequency": 1,
                    "get_pclk1_freq": 2,
                    "get_pclk1_frequency": 14,
                    "get_peripheral_clock1_frequency": 1
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "get_apb2_clock_frequency": 1,
                    "get_pclk2_freq": 2,
                    "get_pclk2_frequency": 15,
                    "get_peripheral_clock2_frequency": 1
                },
                "iVar2": {
                    "calculated_freq": 1,
                    "calculated_freq1": 1,
                    "calculated_value2": 1,
                    "calculation1": 1,
                    "clock_freq1": 1,
                    "dividend": 1,
                    "divisor": 1,
                    "freq": 1,
                    "freq1": 1,
                    "freq_divider": 1,
                    "frequency1": 1,
                    "param_offset_2": 1,
                    "pclk": 1,
                    "pclk1_freq": 1,
                    "pclk2": 1,
                    "pclk2_divisor": 2,
                    "pclk2_freq": 3,
                    "pclk2_frequency": 3,
                    "pclk_calc1": 1,
                    "pclk_divisor": 1,
                    "pclk_freq1": 1,
                    "pclk_result": 1,
                    "result2": 1,
                    "temp2": 1,
                    "temp_var1": 1,
                    "temp_var2": 1
                },
                "iVar3": {
                    "calculated_value3": 1,
                    "calculation2": 1,
                    "clock1_frequency": 1,
                    "clock_config1": 1,
                    "clock_config_val": 1,
                    "clock_divisor": 1,
                    "clock_param1": 1,
                    "clock_params1": 4,
                    "clock_params_1": 1,
                    "config_param1": 1,
                    "config_value": 1,
                    "dividend": 1,
                    "divisor": 1,
                    "freq_divider": 1,
                    "i_var3": 1,
                    "input_params1": 1,
                    "param1": 1,
                    "param1_index": 1,
                    "param_offset_3": 1,
                    "pclk1_divisor": 1,
                    "pclk_divisor2": 1,
                    "quotient": 1,
                    "result3": 1,
                    "sysclk_factor": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_var2": 1,
                    "temp_var3": 1
                },
                "iVar5": {
                    "calculated_value5": 1,
                    "calculation4": 1,
                    "clock2_frequency": 1,
                    "clock_config2": 1,
                    "clock_divisor2": 1,
                    "clock_freq2": 1,
                    "clock_param2": 1,
                    "clock_params2": 4,
                    "clock_params_2": 1,
                    "config_param2": 1,
                    "divisor": 1,
                    "divisor2": 1,
                    "i_var5": 1,
                    "input_params2": 1,
                    "param1_2": 1,
                    "param1_index2": 1,
                    "param_offset_5": 1,
                    "pclk1_dividend": 1,
                    "pclk2_frequency2": 1,
                    "pclk_divider": 1,
                    "pclk_divisor3": 1,
                    "remainder": 1,
                    "result5": 1,
                    "sysclk": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_var4": 1,
                    "temp_var5": 1
                },
                "param_1": {
                    "clock_config": 4,
                    "clock_control_params": 1,
                    "clock_parameters": 1,
                    "clock_params": 13,
                    "config_array": 1,
                    "config_params": 1,
                    "frequency_params": 1,
                    "input_params": 3,
                    "param_offsets": 1,
                    "parameters": 3,
                    "params": 1
                },
                "uVar1": {
                    "calculated_clock": 1,
                    "calculated_speed": 1,
                    "calculated_value1": 1,
                    "calculation_result": 1,
                    "dividend": 2,
                    "divisor": 2,
                    "freq_dividend": 1,
                    "freq_multiplier": 3,
                    "frequency_ratio": 1,
                    "frequency_ratio1": 1,
                    "multiplier": 1,
                    "param_offset_1": 1,
                    "pclk": 1,
                    "pclk2_dividend": 1,
                    "pclk2_freq_div_factor": 1,
                    "pclk_dividend": 1,
                    "pclk_divider": 2,
                    "pclk_divisor": 3,
                    "quotient": 2,
                    "ratio": 2,
                    "result1": 1,
                    "temp1": 1
                },
                "uVar4": {
                    "adjusted_freq": 1,
                    "adjusted_speed": 1,
                    "calculated_freq2": 1,
                    "calculated_value4": 1,
                    "calculation3": 1,
                    "calculation_result2": 1,
                    "final_value": 1,
                    "freq2": 1,
                    "freq_result": 1,
                    "freq_value": 1,
                    "frequency_ratio2": 1,
                    "param_offset_4": 1,
                    "pclk2_divider": 1,
                    "pclk2_increment": 1,
                    "pclk2_value": 1,
                    "pclk_calc2": 1,
                    "result": 1,
                    "result4": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_frequency": 1,
                    "temp_value": 3,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var4": 1
                },
                "uVar6": {
                    "clock_frequency": 1,
                    "current_frequency": 1,
                    "frequency": 2,
                    "get_pclk_frequency": 1,
                    "pclk": 1,
                    "pclk1": 1,
                    "pclk1_frequency": 1,
                    "pclk1_value": 1,
                    "pclk_freq": 15,
                    "pclk_freq2": 1,
                    "pclk_frequency": 3,
                    "sysclk_frequency": 1,
                    "temp6": 1
                }
            },
            "called": [
                "FUN_08003540",
                "FUN_08003518"
            ],
            "calling": [
                "FUN_0800438a"
            ],
            "code": "\nvoid calculate_and_store_clock_frequency_080046ec(int *clock_params)\n\n{\n  ulonglong pclk_divisor;\n  int pclk2_frequency;\n  int clock_params1;\n  uint temp_value;\n  int clock_params2;\n  undefined8 pclk_freq;\n  \n  *(uint *)(*clock_params + 0x10) = clock_params[3] | *(uint *)(*clock_params + 0x10) & 0xffffcfff;\n  *(uint *)(*clock_params + 0xc) =\n       *(uint *)(*clock_params + 0xc) & 0xffffe9f3 | clock_params[5] | clock_params[2] | clock_params[4];\n  *(uint *)(*clock_params + 0x14) = clock_params[6] | *(uint *)(*clock_params + 0x14) & 0xfffffcff;\n  if (*clock_params == 0x40013800) {\n    pclk_freq = get_pclk2_frequency();\n    pclk_divisor = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(clock_params[1] << 2);\n    pclk2_frequency = get_pclk2_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(pclk_divisor * 0x51eb851f));\n    clock_params1 = clock_params[1];\n    pclk_freq = get_pclk2_frequency();\n    temp_value = ((uint)(pclk2_frequency * 0x19) / (uint)(clock_params1 << 2) +\n            (int)(((ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(clock_params[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    pclk2_frequency = get_pclk2_frequency((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),temp_value * 0x51eb851f);\n    clock_params2 = clock_params[1];\n    clock_params1 = get_pclk2_frequency();\n    *(uint *)(*clock_params + 8) =\n         ((((uint)(pclk2_frequency * 0x19) / (uint)(clock_params2 << 2) +\n           (int)(((ulonglong)(uint)(clock_params1 * 0x19) / (ulonglong)(uint)(clock_params[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(pclk_divisor / 100) * 0x10 + (temp_value / 100 & 0xf0);\n  }\n  else {\n    pclk_freq = get_pclk1_frequency();\n    pclk_divisor = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(clock_params[1] << 2);\n    pclk2_frequency = get_pclk1_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(pclk_divisor * 0x51eb851f));\n    clock_params1 = clock_params[1];\n    pclk_freq = get_pclk1_frequency();\n    temp_value = ((uint)(pclk2_frequency * 0x19) / (uint)(clock_params1 << 2) +\n            (int)(((ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(clock_params[1] << 2)) / 100)\n            * -100) * 0x10 + 0x32;\n    pclk2_frequency = get_pclk1_frequency((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),temp_value * 0x51eb851f);\n    clock_params2 = clock_params[1];\n    clock_params1 = get_pclk1_frequency();\n    *(uint *)(*clock_params + 8) =\n         ((((uint)(pclk2_frequency * 0x19) / (uint)(clock_params2 << 2) +\n           (int)(((ulonglong)(uint)(clock_params1 * 0x19) / (ulonglong)(uint)(clock_params[1] << 2)) / 100) *\n           -100) * 0x10 + 0x32) / 100 & 0xf) + (int)(pclk_divisor / 100) * 0x10 + (temp_value / 100 & 0xf0);\n  }\n  return;\n}\n\n",
            "current_name": "calculate_and_store_clock_frequency_080046ec",
            "entrypoint": "0x080046ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046ec": "calculate_and_store_clock_frequency_080046ec",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency",
                "iVar2": "pclk2_frequency",
                "iVar3": "clock_params1",
                "iVar5": "clock_params2",
                "param_1": "clock_params",
                "uVar1": "pclk_divisor",
                "uVar4": "temp_value",
                "uVar6": "pclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800491c": {
            "additional_data": {
                "FUN_0800491c": {
                    "initialize_and_calibrate_mpu6050": 2,
                    "initialize_device": 1,
                    "initialize_mpu": 3,
                    "initialize_mpu6050": 17,
                    "initialize_sensor": 7,
                    "initialize_sensor_calibration": 1
                },
                "local_11": {
                    "address": 1,
                    "array": 1,
                    "array1": 1,
                    "array_of_values": 2,
                    "array_values": 1,
                    "buffer": 8,
                    "buffer3": 1,
                    "byte_array": 4,
                    "command3": 1,
                    "data_array": 2,
                    "data_buffer": 3,
                    "reg_arr": 1,
                    "sensor_value3": 1,
                    "some_array": 1,
                    "temp_array": 1,
                    "var3": 2
                },
                "local_12": {
                    "buffer2": 1,
                    "byte2": 3,
                    "byte_variable2": 1,
                    "calibration": 1,
                    "calibration_value": 2,
                    "command2": 1,
                    "config_setting": 1,
                    "config_value": 1,
                    "fixed_value": 1,
                    "flag2": 2,
                    "offset_value": 1,
                    "reg2": 1,
                    "reg_value": 1,
                    "register_address": 1,
                    "register_val": 1,
                    "register_value": 3,
                    "sensor_value2": 1,
                    "size": 1,
                    "temp_var2": 1,
                    "value": 3,
                    "value2": 1,
                    "var2": 2
                },
                "local_13": {
                    "buffer1": 1,
                    "byte1": 3,
                    "byte_variable1": 1,
                    "command1": 1,
                    "count": 1,
                    "data": 2,
                    "default_value": 1,
                    "device_address": 1,
                    "device_status": 1,
                    "flag": 3,
                    "flag1": 1,
                    "initial_value": 1,
                    "reg1": 1,
                    "sensor_value1": 1,
                    "status": 1,
                    "temp_var1": 1,
                    "value1": 1,
                    "var1": 2,
                    "zero": 3,
                    "zero_value": 3,
                    "zero_value_1": 1
                },
                "mpu6050_calibrate": {
                    "calibrate_mpu": 1,
                    "calibrate_mpu6050": 7,
                    "calibrate_sensor": 1
                },
                "param_1": {
                    "data": 2,
                    "data_array": 1,
                    "device_data": 1,
                    "output": 1,
                    "output_array": 3,
                    "output_buffer": 3,
                    "output_data": 7,
                    "output_params": 2,
                    "output_values": 1,
                    "result": 2,
                    "sensor_array": 1,
                    "sensor_data": 6
                }
            },
            "called": [
                "FUN_080049cc"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_and_calibrate_mpu6050_0800491c(undefined4 *output_data)\n\n{\n  undefined flag;\n  undefined byte2;\n  undefined buffer [5];\n  \n  flag = 0;\n  (*DAT_20000a54)(0xd0,0x6b,&flag,1);\n  byte2 = 0x10;\n  (*DAT_20000a54)(0xd0,0x1c,&byte2,1);\n  buffer[0] = 8;\n  (*DAT_20000a54)(0xd0,0x1b,buffer,1);\n  *output_data = 0;\n  output_data[1] = 0;\n  output_data[2] = 0;\n  output_data[3] = 0;\n  output_data[4] = 0;\n  output_data[5] = 0;\n  output_data[6] = 0;\n  output_data[7] = 0;\n  output_data[8] = 0;\n  output_data[9] = 0;\n  output_data[10] = 0;\n  calibrate_mpu6050(output_data);\n  return;\n}\n\n",
            "current_name": "initialize_and_calibrate_mpu6050_0800491c",
            "entrypoint": "0x0800491c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800491c": "initialize_and_calibrate_mpu6050_0800491c",
                "local_11": "buffer",
                "local_12": "byte2",
                "local_13": "flag",
                "mpu6050_calibrate": "calibrate_mpu6050",
                "param_1": "output_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080049cc": {
            "additional_data": {
                "DAT_20000a50": {
                    "get_current_time": 1,
                    "get_current_timestamp": 1
                },
                "FUN_08000aa8": {
                    "calc_y_axis_increment": 1
                },
                "FUN_08000c10": {
                    "perform_operation": 1
                },
                "FUN_08000e20": {
                    "calc_x_axis_increment": 1
                },
                "FUN_080049cc": {
                    "calculate_average_acceleration": 2,
                    "calculate_average_accelerometer_values": 2,
                    "calculate_average_orientation": 1,
                    "calculate_average_sensor_data": 9,
                    "calculate_average_sensor_readings": 2,
                    "calculate_average_sensor_values": 10,
                    "calculate_average_values": 5
                },
                "FUN_08004ae0": {
                    "init_variable1": 1
                },
                "FUN_08004d78": {
                    "init_variables2": 1
                },
                "__addsf3": {
                    "add_floats": 7
                },
                "__aeabi_fdiv": {
                    "divide_floats": 6,
                    "float_division": 1
                },
                "__floatsisf": {
                    "convert_int_to_float": 2,
                    "convert_to_float": 1,
                    "int_to_float": 1,
                    "int_value_to_float": 1,
                    "integer_to_float": 1,
                    "to_int": 1
                },
                "local_10": {
                    "acc_x_sum": 2,
                    "acc_y": 3,
                    "acc_y_sum": 5,
                    "acceleration_sum": 1,
                    "acceleration_x_average": 1,
                    "acceleration_y": 1,
                    "acceleration_y_sum": 1,
                    "average_acc_x": 1,
                    "avg_pitch": 1,
                    "gyro_pitch_sum": 1,
                    "gyro_roll_offset": 1,
                    "gyro_x_sum": 1,
                    "sum_x": 2,
                    "sum_y": 4,
                    "sum_y_acc": 1,
                    "sum_yaw": 1,
                    "total_acc_y": 2,
                    "total_acc_z": 1,
                    "x_acceleration_sum": 1
                },
                "local_14": {
                    "acc_pitch_roll_sum": 1,
                    "acc_pitch_sum": 5,
                    "acc_roll": 1,
                    "acc_roll_sum": 2,
                    "acc_x": 1,
                    "average_pitch": 1,
                    "gyro_pitch_sum": 1,
                    "pitch": 1,
                    "pitch_average": 2,
                    "pitch_subtotal": 1,
                    "pitch_sum": 1,
                    "pitch_total": 1,
                    "roll_sum": 2,
                    "sum_pitch": 3,
                    "sum_roll": 3,
                    "sum_z": 1,
                    "total_acc_y": 1,
                    "total_pitch": 1,
                    "total_roll": 1
                },
                "local_18": {
                    "acc_pitch": 1,
                    "acc_pitch_roll_sum": 1,
                    "acc_pitch_sum": 2,
                    "acc_roll_sum": 5,
                    "acc_y": 1,
                    "average_roll": 1,
                    "gyro_roll_sum": 1,
                    "pitch_sum": 2,
                    "roll": 1,
                    "roll_average": 2,
                    "roll_subtotal": 1,
                    "roll_sum": 1,
                    "roll_total": 1,
                    "sum_pitch": 3,
                    "sum_roll": 3,
                    "sum_w": 1,
                    "sum_z": 1,
                    "total_acc_x": 1,
                    "total_pitch": 1,
                    "total_roll": 1
                },
                "local_1c": {
                    "counter": 3,
                    "current_iteration": 2,
                    "i": 2,
                    "iteration": 4,
                    "iteration_count": 7,
                    "iteration_counter": 1,
                    "iteration_index": 2,
                    "measurement_count": 1,
                    "reading_count": 4,
                    "sample_count": 4,
                    "sample_index": 1
                },
                "local_20": {
                    "counter": 1,
                    "index": 1,
                    "iteration": 1,
                    "iteration_count": 5,
                    "iterations": 2,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "num_iterations": 7,
                    "num_measurements": 1,
                    "num_readings": 4,
                    "num_samples": 5,
                    "sample_count": 1
                },
                "local_24": {
                    "current_milliseconds": 1,
                    "current_time": 10,
                    "get_current_time": 7,
                    "get_current_time_in_ms": 1,
                    "get_time": 2,
                    "get_timestamp": 1,
                    "time": 2,
                    "timer": 1
                },
                "local_28": {
                    "acc_pitch": 3,
                    "acc_pitch_roll_count": 1,
                    "acc_pitch_roll_sum": 1,
                    "acc_pitch_sum": 2,
                    "acc_roll_total": 2,
                    "acc_x": 1,
                    "accumulated_roll": 1,
                    "current_pitch": 1,
                    "pitch": 2,
                    "pitch_accumulator": 1,
                    "pitch_sum": 7,
                    "roll_accumulator": 1,
                    "roll_sum": 2,
                    "sum_pitch": 2,
                    "sum_roll": 1,
                    "total_roll": 2
                },
                "local_2c": {
                    "acc_pitch_roll_sum": 2,
                    "acc_pitch_total": 2,
                    "acc_roll": 3,
                    "acc_roll_sum": 2,
                    "acc_y": 1,
                    "accumulated_pitch": 1,
                    "current_roll": 1,
                    "pitch_accumulator": 1,
                    "pitch_sum": 2,
                    "roll": 2,
                    "roll_accumulator": 1,
                    "roll_sum": 7,
                    "sum_pitch": 1,
                    "sum_roll": 2,
                    "total_pitch": 2
                },
                "local_c": {
                    "acc_x": 3,
                    "acc_x_sum": 5,
                    "acc_y_sum": 2,
                    "acceleration_sum": 1,
                    "acceleration_x": 1,
                    "acceleration_x_sum": 1,
                    "acceleration_y_average": 1,
                    "average_acc_y": 1,
                    "avg_roll": 1,
                    "gyro_pitch_offset": 1,
                    "gyro_roll_sum": 1,
                    "gyro_y_sum": 1,
                    "sum_acc_x": 1,
                    "sum_x": 4,
                    "sum_x_acc": 1,
                    "sum_y": 2,
                    "total_acc_x": 2,
                    "total_gyro_x": 1,
                    "y_acceleration_sum": 1
                },
                "mpu6050_calc_acc_pitch_roll": {
                    "calc_acc_pitch_roll": 1,
                    "calc_acceleration_pitch_roll": 1,
                    "calculate_acc_pitch_roll": 2,
                    "calculate_pitch_and_roll": 2
                },
                "mpu6050_update": {
                    "update_mpu6050": 2,
                    "update_mpu6050_data": 1,
                    "update_sensor_data": 3
                },
                "mput6050_calc_acc_pitch_roll": {
                    "calculate_roll_and_pitch": 1
                },
                "mput6050_update": {
                    "update_sensor_data": 1
                },
                "param_1": {
                    "accelerometer_array": 1,
                    "accelerometer_data": 3,
                    "data": 1,
                    "device": 1,
                    "mpu6050_data": 2,
                    "sensor_data": 18,
                    "sensor_data_array": 5
                },
                "uVar1": {
                    "average": 2,
                    "average_divisor": 1,
                    "average_orientation": 1,
                    "average_pitch": 1,
                    "average_x": 1,
                    "divisor": 1,
                    "float_conversion_value": 1
                }
            },
            "called": [
                "FUN_08000e20",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08004d78",
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_0800491c"
            ],
            "code": "\nvoid calculate_average_sensor_values_080049cc(int sensor_data)\n\n{\n  undefined4 average;\n  undefined4 roll_sum;\n  undefined4 pitch_sum;\n  undefined4 current_time;\n  int num_iterations;\n  int iteration_count;\n  undefined4 acc_roll_sum;\n  undefined4 acc_pitch_sum;\n  undefined4 acc_y_sum;\n  undefined4 acc_x_sum;\n  \n  num_iterations = 1;\n  acc_x_sum = 0;\n  acc_y_sum = 0;\n  acc_pitch_sum = 0;\n  acc_roll_sum = 0;\n  current_time = (*DAT_20000a50)();\n  iteration_count = 0;\n  while( true ) {\n    if (num_iterations <= iteration_count) break;\n    pitch_sum = 0;\n    roll_sum = 0;\n    update_sensor_data(sensor_data);\n    calculate_pitch_and_roll(sensor_data,&pitch_sum,&roll_sum);\n    acc_pitch_sum = add_floats(acc_pitch_sum,pitch_sum);\n    acc_roll_sum = add_floats(acc_roll_sum,roll_sum);\n    acc_x_sum = add_floats(acc_x_sum,*(undefined4 *)(sensor_data + 0x10));\n    acc_y_sum = add_floats(acc_y_sum,*(undefined4 *)(sensor_data + 0x14));\n    current_time = (*DAT_20000a50)();\n    iteration_count = iteration_count + 1;\n  }\n  average = convert_int_to_float(num_iterations);\n  average = divide_floats(acc_x_sum,average);\n  *(undefined4 *)(sensor_data + 0x1c) = average;\n  average = convert_int_to_float(num_iterations);\n  average = divide_floats(acc_y_sum,average);\n  *(undefined4 *)(sensor_data + 0x20) = average;\n  average = convert_int_to_float(num_iterations);\n  average = divide_floats(acc_pitch_sum,average);\n  *(undefined4 *)(sensor_data + 0x24) = average;\n  average = convert_int_to_float(num_iterations);\n  average = divide_floats(acc_roll_sum,average);\n  *(undefined4 *)(sensor_data + 0x28) = average;\n  return;\n}\n\n",
            "current_name": "calculate_average_sensor_values_080049cc",
            "entrypoint": "0x080049cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080049cc": "calculate_average_sensor_values_080049cc",
                "__addsf3": "add_floats",
                "__aeabi_fdiv": "divide_floats",
                "__floatsisf": "convert_int_to_float",
                "local_10": "acc_y_sum",
                "local_14": "acc_pitch_sum",
                "local_18": "acc_roll_sum",
                "local_1c": "iteration_count",
                "local_20": "num_iterations",
                "local_24": "current_time",
                "local_28": "pitch_sum",
                "local_2c": "roll_sum",
                "local_c": "acc_x_sum",
                "mpu6050_calc_acc_pitch_roll": "calculate_pitch_and_roll",
                "mpu6050_update": "update_sensor_data",
                "param_1": "sensor_data",
                "uVar1": "average"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ae0": {
            "additional_data": {
                "FUN_08004ae0": {
                    "convert_floats": 1,
                    "convert_floats_to_integers": 2,
                    "convert_floats_to_ints": 2,
                    "convert_int_to_float": 3,
                    "convert_int_to_float_array": 1,
                    "convert_integers_to_floats": 6,
                    "convert_ints_to_floats": 1,
                    "convert_to_float": 1,
                    "convert_to_floats": 1,
                    "convert_to_integers_and_assign_to_param": 1,
                    "convert_values_to_float": 1,
                    "extract_data": 1,
                    "extract_float_values": 4,
                    "extract_floats": 4,
                    "extract_floats_from_data": 1,
                    "extract_values": 1
                },
                "__floatsisf": {
                    "convert_int_to_float": 3,
                    "convert_integers_to_floats": 1,
                    "convert_to_float": 2,
                    "convert_to_float_helper": 1,
                    "convert_to_int": 1
                },
                "local_14": {
                    "converted6": 1,
                    "converted_array_5": 1,
                    "converted_sixth_byte": 1,
                    "converted_value10": 1,
                    "converted_value_5": 1,
                    "converted_var5": 1,
                    "float6": 1,
                    "float_value6": 1,
                    "int_float6": 1,
                    "short5": 1,
                    "short6": 12,
                    "short_val6": 1,
                    "short_var6": 1,
                    "value19": 2,
                    "value6": 1,
                    "var19": 2,
                    "var20": 1,
                    "var_19": 1
                },
                "local_16": {
                    "converted5": 1,
                    "converted_array_4": 1,
                    "converted_fifth_byte": 1,
                    "converted_value11": 1,
                    "converted_value_4": 1,
                    "converted_var4": 1,
                    "float5": 1,
                    "float_value5": 1,
                    "int_float5": 1,
                    "short4": 1,
                    "short5": 12,
                    "short_val5": 1,
                    "short_var5": 1,
                    "value18": 2,
                    "value5": 1,
                    "var18": 2,
                    "var19": 1,
                    "var_18": 1
                },
                "local_18": {
                    "converted4": 1,
                    "converted_array_3": 1,
                    "converted_fourth_byte": 1,
                    "converted_value_3": 1,
                    "converted_var3": 1,
                    "float4": 1,
                    "float_value4": 1,
                    "int_float4": 1,
                    "short3": 1,
                    "short4": 12,
                    "short_val4": 1,
                    "short_var4": 1,
                    "value17": 2,
                    "value4": 1,
                    "var17": 2,
                    "var18": 1,
                    "var_17": 1
                },
                "local_1a": {
                    "converted3": 1,
                    "converted_array_2": 1,
                    "converted_third_byte": 1,
                    "float3": 1,
                    "float_value3": 1,
                    "int_float3": 1,
                    "short2": 1,
                    "short3": 12,
                    "short_val3": 1,
                    "short_var3": 1,
                    "value3": 1,
                    "var17": 1
                },
                "local_1c": {
                    "converted2": 1,
                    "converted_array_1": 1,
                    "converted_second_byte": 1,
                    "converted_value9": 1,
                    "converted_value_2": 1,
                    "converted_var2": 1,
                    "float2": 1,
                    "float_value2": 1,
                    "int_float2": 1,
                    "short1": 1,
                    "short2": 12,
                    "short_val2": 1,
                    "short_var2": 1,
                    "value16": 2,
                    "value2": 1,
                    "var16": 3,
                    "var_16": 1
                },
                "local_1e": {
                    "converted1": 1,
                    "converted_array_0": 1,
                    "converted_first_byte": 1,
                    "converted_value8": 1,
                    "converted_value_1": 1,
                    "converted_var1": 1,
                    "float1": 1,
                    "float_value1": 1,
                    "int_float1": 1,
                    "short0": 1,
                    "short1": 12,
                    "short_val1": 1,
                    "short_var1": 1,
                    "value1": 1,
                    "value15": 2,
                    "var15": 3,
                    "var_15": 1
                },
                "local_1f": {
                    "byte13": 1,
                    "byte14": 11,
                    "char_value14": 1,
                    "float_val14": 1,
                    "fourteenth_byte": 2,
                    "ignored_value7": 1,
                    "temp13": 1,
                    "temp_14": 1,
                    "temp_var14": 4,
                    "val10": 1,
                    "value14": 3,
                    "var14": 3,
                    "var_14": 1
                },
                "local_20": {
                    "byte12": 1,
                    "byte13": 11,
                    "char_value13": 1,
                    "converted_value7": 1,
                    "float_val13": 1,
                    "temp12": 1,
                    "temp_13": 1,
                    "temp_var13": 4,
                    "thirteenth_byte": 2,
                    "val9": 1,
                    "value13": 3,
                    "var13": 3,
                    "var_13": 1
                },
                "local_21": {
                    "byte11": 1,
                    "byte12": 11,
                    "char_value12": 1,
                    "float_val12": 1,
                    "ignored_value6": 1,
                    "temp11": 1,
                    "temp_12": 1,
                    "temp_var12": 4,
                    "twelfth_byte": 2,
                    "val8": 1,
                    "value12": 3,
                    "var12": 3,
                    "var_12": 1
                },
                "local_22": {
                    "byte10": 1,
                    "byte11": 11,
                    "char_value11": 1,
                    "converted_value6": 1,
                    "eleventh_byte": 2,
                    "float_val11": 1,
                    "temp10": 1,
                    "temp_11": 1,
                    "temp_var11": 4,
                    "val7": 1,
                    "value11": 3,
                    "var11": 3,
                    "var_11": 1
                },
                "local_23": {
                    "byte10": 11,
                    "byte9": 1,
                    "char_value10": 1,
                    "float_val10": 1,
                    "ignored_value5": 1,
                    "temp9": 1,
                    "temp_10": 1,
                    "temp_var10": 4,
                    "tenth_byte": 2,
                    "val6": 1,
                    "value10": 3,
                    "var10": 3,
                    "var_10": 1
                },
                "local_24": {
                    "byte8": 1,
                    "byte9": 11,
                    "char_value9": 1,
                    "converted_value5": 1,
                    "float_val9": 1,
                    "ninth_byte": 2,
                    "temp8": 1,
                    "temp_9": 1,
                    "temp_var9": 4,
                    "val5": 1,
                    "value9": 3,
                    "var9": 3,
                    "var_9": 1
                },
                "local_25": {
                    "byte7": 1,
                    "byte8": 11,
                    "char_value8": 1,
                    "eighth_byte": 2,
                    "float_val8": 1,
                    "ignored_value4": 1,
                    "temp7": 1,
                    "temp_8": 1,
                    "temp_var8": 4,
                    "val4": 1,
                    "value8": 3,
                    "var8": 3,
                    "var_8": 1
                },
                "local_26": {
                    "byte6": 1,
                    "byte7": 11,
                    "char_value7": 1,
                    "converted_value4": 1,
                    "float_val7": 1,
                    "seventh_byte": 2,
                    "temp6": 1,
                    "temp_7": 1,
                    "temp_var7": 4,
                    "val3": 1,
                    "value7": 3,
                    "var7": 3,
                    "var_7": 1
                },
                "local_27": {
                    "byte5": 1,
                    "byte6": 11,
                    "char_value6": 1,
                    "float_val6": 1,
                    "ignored_value3": 1,
                    "sixth_byte": 2,
                    "temp5": 1,
                    "temp_6": 1,
                    "temp_var6": 4,
                    "val2": 1,
                    "value6": 3,
                    "var6": 3,
                    "var_6": 1
                },
                "local_28": {
                    "byte4": 1,
                    "byte5": 11,
                    "char_value5": 1,
                    "converted_value3": 1,
                    "fifth_byte": 2,
                    "float_val5": 1,
                    "temp4": 1,
                    "temp_5": 1,
                    "temp_var5": 4,
                    "val1": 1,
                    "value5": 3,
                    "var5": 3,
                    "var_5": 1
                },
                "local_29": {
                    "byte3": 1,
                    "byte4": 11,
                    "char_value4": 1,
                    "float_val4": 1,
                    "fourth_byte": 2,
                    "ignored_value2": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_4": 1,
                    "temp_var4": 4,
                    "value4": 3,
                    "var4": 3,
                    "var_4": 1
                },
                "local_2a": {
                    "byte2": 1,
                    "byte3": 11,
                    "char_value3": 1,
                    "converted_value2": 1,
                    "float_val3": 1,
                    "temp2": 1,
                    "temp_3": 1,
                    "temp_var3": 4,
                    "third_byte": 2,
                    "tmp": 1,
                    "value3": 3,
                    "var3": 3,
                    "var_3": 1
                },
                "local_2b": {
                    "byte1": 1,
                    "byte2": 11,
                    "char_value2": 1,
                    "float_val2": 1,
                    "ignored_value1": 1,
                    "second_byte": 2,
                    "temp": 1,
                    "temp1": 1,
                    "temp_2": 1,
                    "temp_var2": 4,
                    "value2": 3,
                    "var2": 3,
                    "var_2": 1
                },
                "local_2c": {
                    "byte0": 1,
                    "byte1": 11,
                    "char_value1": 1,
                    "converted_value1": 1,
                    "first_byte": 2,
                    "float_val1": 1,
                    "param": 1,
                    "temp_1": 1,
                    "temp_value": 1,
                    "temp_var1": 4,
                    "value1": 3,
                    "var1": 3,
                    "var_1": 1
                },
                "param_1": {
                    "converted_float_values": 1,
                    "converted_floats": 1,
                    "float_array": 7,
                    "output_array": 14,
                    "output_floats": 1,
                    "output_values": 1,
                    "result_array": 6
                },
                "uVar1": {
                    "converted_float": 1,
                    "converted_value": 1
                }
            },
            "called": [
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_08004f78",
                "FUN_080049cc"
            ],
            "code": "\nvoid convert_floats_to_integers_08004ae0(undefined4 *output_array)\n\n{\n  undefined4 converted_float;\n  undefined byte1;\n  undefined byte2;\n  undefined byte3;\n  undefined byte4;\n  undefined byte5;\n  undefined byte6;\n  undefined byte7;\n  undefined byte8;\n  undefined byte9;\n  undefined byte10;\n  undefined byte11;\n  undefined byte12;\n  undefined byte13;\n  undefined byte14;\n  short short1;\n  short short2;\n  short short3;\n  short short4;\n  short short5;\n  short short6;\n  \n  (*DAT_20000a4c)(0xd0,0x3b,&byte1,0xe);\n  short6 = CONCAT11(byte3,byte4);\n  short5 = CONCAT11(byte5,byte6);\n  short4 = CONCAT11(byte7,byte8);\n  short3 = CONCAT11(byte9,byte10);\n  short2 = CONCAT11(byte11,byte12);\n  short1 = CONCAT11(byte13,byte14);\n  converted_float = convert_int_to_float((int)CONCAT11(byte1,byte2));\n  *output_array = converted_float;\n  converted_float = convert_int_to_float((int)short6);\n  output_array[1] = converted_float;\n  converted_float = convert_int_to_float((int)short5);\n  output_array[2] = converted_float;\n  converted_float = convert_int_to_float((int)short4);\n  output_array[3] = converted_float;\n  converted_float = convert_int_to_float((int)short3);\n  output_array[4] = converted_float;\n  converted_float = convert_int_to_float((int)short2);\n  output_array[5] = converted_float;\n  converted_float = convert_int_to_float((int)short1);\n  output_array[6] = converted_float;\n  return;\n}\n\n",
            "current_name": "convert_floats_to_integers_08004ae0",
            "entrypoint": "0x08004ae0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ae0": "convert_floats_to_integers_08004ae0",
                "__floatsisf": "convert_int_to_float",
                "local_14": "short6",
                "local_16": "short5",
                "local_18": "short4",
                "local_1a": "short3",
                "local_1c": "short2",
                "local_1e": "short1",
                "local_1f": "byte14",
                "local_20": "byte13",
                "local_21": "byte12",
                "local_22": "byte11",
                "local_23": "byte10",
                "local_24": "byte9",
                "local_25": "byte8",
                "local_26": "byte7",
                "local_27": "byte6",
                "local_28": "byte5",
                "local_29": "byte4",
                "local_2a": "byte3",
                "local_2b": "byte2",
                "local_2c": "byte1",
                "param_1": "output_array",
                "uVar1": "converted_float"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bd8": {
            "additional_data": {
                "FUN_08004bd8": {
                    "calculate_angle": 1,
                    "calculate_modified_value": 2,
                    "calculate_new_value": 1,
                    "calculate_result": 27
                },
                "param_1": {
                    "input": 8,
                    "input_addr": 1,
                    "input_address": 3,
                    "input_base_addr": 1,
                    "input_data": 12,
                    "input_offset": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 3
                },
                "param_2": {
                    "output": 9,
                    "output_addr": 1,
                    "output_data": 7,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_result": 2,
                    "output_value": 7,
                    "result": 2,
                    "result_parameter": 1
                },
                "uVar1": {
                    "difference": 16,
                    "result1": 3,
                    "result_1": 1,
                    "subtracted_value": 1,
                    "subtraction_result": 8,
                    "temp1": 2
                },
                "uVar2": {
                    "addition_result": 1,
                    "intermediate_value1": 1,
                    "result2": 1,
                    "result_2": 1,
                    "temp": 1,
                    "temp1": 11,
                    "temp2": 2,
                    "temp_1": 1,
                    "temp_result1": 1,
                    "temp_value1": 1,
                    "temp_var1": 7,
                    "temp_var_1": 1,
                    "temp_variable1": 2
                },
                "uVar3": {
                    "intermediate_value2": 1,
                    "multiplication_result": 1,
                    "result2": 1,
                    "result3": 1,
                    "result_3": 1,
                    "temp2": 11,
                    "temp3": 2,
                    "temp_2": 1,
                    "temp_result2": 1,
                    "temp_value2": 1,
                    "temp_var2": 7,
                    "temp_var_2": 1,
                    "temp_variable2": 2
                }
            },
            "called": [
                "FUN_08000aa4",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_080009fc",
                "FUN_08005834",
                "FUN_08000158",
                "FUN_08000418"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid calculate_result_08004bd8(int input_data,undefined4 *output)\n\n{\n  undefined4 difference;\n  undefined8 temp1;\n  undefined8 temp2;\n  \n  difference = __aeabi_fsub(*(undefined4 *)(input_data + 0x10),*(undefined4 *)(input_data + 0x1c));\n  temp1 = __aeabi_f2d(DAT_200009e4);\n  temp2 = __aeabi_f2d(difference);\n  temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x83f5c366,0x3f340215);\n  temp1 = __aeabi_dadd((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                       (int)((ulonglong)temp2 >> 0x20));\n  DAT_200009e4 = __truncdfsf2((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  temp1 = __aeabi_f2d(*(undefined4 *)(input_data + 4));\n  temp1 = __divdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40b00000);\n  temp2 = __aeabi_f2d(*(undefined4 *)(input_data + 8));\n  temp2 = __divdf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x40b00000);\n  temp1 = atan2((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                (int)((ulonglong)temp2 >> 0x20));\n  temp1 = __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40668000);\n  temp1 = __divdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x54442d18,0x400921fb);\n  temp2 = __aeabi_f2d(*(undefined4 *)(input_data + 0x24));\n  temp1 = __subdf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                   (int)((ulonglong)temp2 >> 0x20));\n  temp1 = __aeabi_dadd((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x40568000);\n  difference = __truncdfsf2((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  if (DAT_20000005 == '\\0') {\n    temp1 = __aeabi_f2d(DAT_200009e4);\n    temp1 = __muldf3((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x9999999a,0x3fe99999);\n    temp2 = __aeabi_f2d(difference);\n    temp2 = __muldf3((int)temp2,(int)((ulonglong)temp2 >> 0x20),0x9999999a,0x3fc99999);\n    temp1 = __aeabi_dadd((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                         (int)((ulonglong)temp2 >> 0x20));\n    DAT_200009e4 = __truncdfsf2((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  }\n  else {\n    DAT_20000005 = '\\0';\n    DAT_200009e4 = difference;\n  }\n  *output = DAT_200009e4;\n  return;\n}\n\n",
            "current_name": "calculate_result_08004bd8",
            "entrypoint": "0x08004bd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bd8": "calculate_result_08004bd8",
                "param_1": "input_data",
                "param_2": "output",
                "uVar1": "difference",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d78": {
            "additional_data": {
                "FUN_08004d78": {
                    "calculate_angle": 5,
                    "calculate_angle_and_truncate": 1,
                    "calculate_angles": 24,
                    "calculate_sine_and_cosine": 1
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 1
                },
                "__aeabi_fdiv": {
                    "divide_float": 1
                },
                "__divdf3": {
                    "divide_double": 1
                },
                "__muldf3": {
                    "multiply_double": 1
                },
                "__truncdfsf2": {
                    "convert_double_to_float": 1
                },
                "atan2": {
                    "calculate_atan2": 1
                },
                "param_1": {
                    "angles": 2,
                    "array": 1,
                    "input_array": 3,
                    "input_data": 2,
                    "input_values": 17,
                    "values": 5,
                    "values_1": 1
                },
                "param_2": {
                    "angle1": 9,
                    "angle2": 1,
                    "output_angle_1": 1,
                    "output_array1": 2,
                    "output_value1": 7,
                    "output_value_1": 4,
                    "output_var1": 1,
                    "result1": 3,
                    "result_1": 2,
                    "sine_result": 1
                },
                "param_3": {
                    "angle1": 1,
                    "angle2": 9,
                    "cosine_result": 1,
                    "output_angle_2": 1,
                    "output_array2": 2,
                    "output_value2": 7,
                    "output_value_2": 4,
                    "output_var2": 1,
                    "result2": 3,
                    "result_2": 2
                },
                "uVar1": {
                    "angle1": 1,
                    "converted_value_1": 1,
                    "div1": 1,
                    "div1_result": 1,
                    "div_result1": 2,
                    "div_result_1": 1,
                    "divided_val1": 1,
                    "divided_value_1": 1,
                    "dividend": 1,
                    "dividend1": 8,
                    "dividend_1": 2,
                    "division_result1": 1,
                    "fdiv_result1": 1,
                    "normalized_value_1": 1,
                    "result1": 3,
                    "sine_angle_1": 1,
                    "temp1": 1,
                    "temp_result1": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "uVar2": {
                    "angle2": 1,
                    "converted_value_2": 1,
                    "div2": 1,
                    "div2_result": 1,
                    "div_result2": 2,
                    "div_result_2": 1,
                    "divided_val2": 1,
                    "divided_value_2": 1,
                    "dividend1": 1,
                    "dividend2": 8,
                    "dividend_2": 2,
                    "division_result2": 1,
                    "fdiv_result2": 1,
                    "normalized_value_2": 1,
                    "result2": 3,
                    "sine_angle_2": 1,
                    "temp2": 1,
                    "temp_result2": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "uVar3": {
                    "angle3": 1,
                    "converted_value_3": 1,
                    "cosine_angle": 1,
                    "div3": 1,
                    "div3_result": 1,
                    "div_result3": 2,
                    "div_result_3": 1,
                    "divided_val3": 1,
                    "divided_value_3": 1,
                    "dividend2": 1,
                    "dividend3": 8,
                    "dividend_3": 2,
                    "division_result3": 1,
                    "fdiv_result3": 1,
                    "normalized_value_3": 1,
                    "result3": 3,
                    "temp3": 1,
                    "temp_result3": 1,
                    "value3": 1,
                    "value_3": 1
                },
                "uVar4": {
                    "atan_result": 5,
                    "atan_result1": 3,
                    "atan_result_1": 1,
                    "calculated_value_1": 1,
                    "converted_angle1": 1,
                    "dividend_result": 1,
                    "intermediate_1": 1,
                    "quotient": 2,
                    "quotient1": 1,
                    "result1": 3,
                    "result_1": 1,
                    "resultant_angle_1": 1,
                    "temp1": 4,
                    "temp_1": 1,
                    "temp_result4": 1,
                    "temp_value_1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "x": 1
                },
                "uVar5": {
                    "atan_result2": 8,
                    "atan_result_2": 1,
                    "calculated_value_2": 1,
                    "converted_angle2": 1,
                    "dividend_result2": 1,
                    "intermediate_2": 1,
                    "quotient": 1,
                    "quotient2": 1,
                    "remainder": 1,
                    "result2": 3,
                    "result_2": 1,
                    "resultant_angle_2": 1,
                    "temp2": 4,
                    "temp_2": 1,
                    "temp_result5": 1,
                    "temp_value_2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "y": 1
                }
            },
            "called": [
                "FUN_08000e20",
                "FUN_080004c8",
                "FUN_0800071c",
                "FUN_080009fc",
                "FUN_08005834",
                "FUN_08000418"
            ],
            "calling": [
                "FUN_080049cc"
            ],
            "code": "\nvoid calculate_angles_08004d78(undefined4 *input_values,undefined4 *angle1,undefined4 *angle2)\n\n{\n  undefined4 dividend1;\n  undefined4 dividend2;\n  undefined4 dividend3;\n  undefined8 atan_result;\n  undefined8 atan_result2;\n  \n  dividend1 = divide_float(*input_values,0x45800000);\n  dividend2 = divide_float(input_values[1],0x45800000);\n  dividend3 = divide_float(input_values[2],0x45800000);\n  atan_result = convert_float_to_double(dividend2);\n  atan_result2 = convert_float_to_double(dividend3);\n  atan_result = calculate_atan2((int)atan_result,(int)((ulonglong)atan_result >> 0x20),(int)atan_result2,\n                (int)((ulonglong)atan_result2 >> 0x20));\n  atan_result = multiply_double((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0,0x40668000);\n  atan_result = divide_double((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0x54442d18,0x400921fb);\n  dividend2 = convert_double_to_float((int)atan_result,(int)((ulonglong)atan_result >> 0x20));\n  atan_result = convert_float_to_double(dividend1);\n  atan_result2 = convert_float_to_double(dividend3);\n  atan_result = calculate_atan2((int)atan_result,(int)((ulonglong)atan_result >> 0x20),(int)atan_result2,\n                (int)((ulonglong)atan_result2 >> 0x20));\n  atan_result = multiply_double((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0,0x40668000);\n  atan_result = divide_double((int)atan_result,(int)((ulonglong)atan_result >> 0x20),0x54442d18,0x400921fb);\n  dividend1 = convert_double_to_float((int)atan_result,(int)((ulonglong)atan_result >> 0x20));\n  *angle1 = dividend2;\n  *angle2 = dividend1;\n  return;\n}\n\n",
            "current_name": "calculate_angles_08004d78",
            "entrypoint": "0x08004d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d78": "calculate_angles_08004d78",
                "__aeabi_f2d": "convert_float_to_double",
                "__aeabi_fdiv": "divide_float",
                "__divdf3": "divide_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "convert_double_to_float",
                "atan2": "calculate_atan2",
                "param_1": "input_values",
                "param_2": "angle1",
                "param_3": "angle2",
                "uVar1": "dividend1",
                "uVar2": "dividend2",
                "uVar3": "dividend3",
                "uVar4": "atan_result",
                "uVar5": "atan_result2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e6c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0x3f": {
                    "software_interrupt_value": 1
                },
                "DAT_08004e6c": {
                    "data": 1
                },
                "DAT_08004ef8": {
                    "unchanged": 1
                },
                "FUN_08004e6c": {
                    "call_software_interrupt": 6,
                    "execute_software_interrupt": 1,
                    "execute_system_call": 3,
                    "execute_system_interrupt": 3,
                    "interrupt_software": 1,
                    "interrupt_system": 1,
                    "interrupt_system_call": 1,
                    "invoke_system_interrupt": 3,
                    "perform_interrupt": 1,
                    "perform_software_interrupt": 3,
                    "perform_system_interrupt": 2,
                    "send_software_interrupt": 2,
                    "trigger_software_interrupt": 3
                },
                "PTR_08004e6c": {
                    "pointer": 1
                },
                "PTR_08004ef4": {
                    "unchanged": 1
                },
                "original_variable_name": {
                    "new_variable_name": 1
                },
                "software_interrupt": {
                    "call_system_interrupt": 1,
                    "execute_interrupt": 1,
                    "interrupt": 1,
                    "interrupt_type": 1,
                    "invoke_interrupt": 6,
                    "make_system_call": 1,
                    "perform_interrupt": 2,
                    "perform_software_interrupt": 2,
                    "send_interrupt": 1,
                    "trigger_interrupt": 3,
                    "trigger_software_interrupt": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e74"
            ],
            "code": "\nvoid call_software_interrupt_08004e6c(void)\n\n{\n  invoke_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "call_software_interrupt_08004e6c",
            "entrypoint": "0x08004e6c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e6c": "call_software_interrupt_08004e6c",
                "software_interrupt": "invoke_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e74": {
            "additional_data": {
                "FUN_08004e74": {
                    "analyze_data": 1,
                    "call_afl_function": 1,
                    "call_afl_or_zero": 1,
                    "check_afl_param": 1,
                    "check_condition_and_call_function": 1,
                    "evaluate_afl": 1,
                    "execute_afl_call": 12,
                    "execute_afl_function": 1,
                    "execute_afl_or_zero": 1,
                    "execute_function": 3,
                    "execute_or_skip_afl_call": 1,
                    "execute_or_zero_result": 1,
                    "handle_call": 1,
                    "perform_afl_call": 1,
                    "process_data": 1,
                    "process_input": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 6,
                    "input_data": 7,
                    "input_param": 4,
                    "input_parameter": 4,
                    "input_value": 9
                },
                "uVar1": {
                    "afl_call_result": 1,
                    "result": 18,
                    "result_value": 1,
                    "return_value": 11
                }
            },
            "called": [
                "FUN_08004e6c"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nundefined4 execute_or_skip_afl_call_08004e74(undefined4 input_value)\n\n{\n  undefined4 result;\n  \n  if (DAT_200009f0 == 0) {\n    result = aflCall(1,input_value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "execute_or_skip_afl_call_08004e74",
            "entrypoint": "0x08004e74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e74": "execute_or_skip_afl_call_08004e74",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ea4": {
            "additional_data": {
                "FUN_08001ccc": {
                    "assign_values_to_parameters": 1,
                    "copy_data_to_memory": 1,
                    "initialize_i2_c_device": 1,
                    "initialize_i2c_connection": 1,
                    "read_data_from_i2_c": 1,
                    "read_data_from_memory": 1,
                    "read_from_i2c_device": 1,
                    "set_i2_c_parameters": 1
                },
                "FUN_08004ea4": {
                    "write_data_to_i2_c": 17,
                    "write_data_to_i2_c_device": 4,
                    "write_data_to_i2_c_memory": 1,
                    "write_data_to_i2c_memory": 1,
                    "write_data_with_i2_c": 1,
                    "write_i2_c_data": 1,
                    "write_i2_c_mem": 1,
                    "write_i2_c_memory": 1,
                    "write_to_i2_c": 2,
                    "write_to_i2c": 1,
                    "write_to_i2c_device": 1
                },
                "HAL_I2C_Mem_Write": {
                    "i2c_memory_write": 2,
                    "perform_i2_c_memory_write": 1,
                    "perform_i2_c_write": 1,
                    "write_byte_to_i2_c": 1,
                    "write_data": 1,
                    "write_data_to_i2_c": 1,
                    "write_data_to_i2_c_memory": 1,
                    "write_data_to_i2_c_memory_helper": 1,
                    "write_data_to_i2_c_peripheral": 1,
                    "write_data_using_i2_c": 3,
                    "write_data_with_i2_c": 2,
                    "write_i2_c_memory": 2,
                    "write_to_device": 1,
                    "write_to_i2_c": 1,
                    "write_to_i2_c_memory": 6
                },
                "param_1": {
                    "buffer": 1,
                    "data_buffer": 3,
                    "data_ptr": 1,
                    "device_address": 20,
                    "i2c_device": 1,
                    "i2c_device_address": 1,
                    "i2c_ptr": 1,
                    "memory": 1,
                    "param1": 1,
                    "register_address": 1
                },
                "param_2": {
                    "address": 3,
                    "data": 1,
                    "data_address": 1,
                    "data_buffer": 2,
                    "mem_address": 1,
                    "memory_address": 7,
                    "offset": 1,
                    "param2": 1,
                    "register_address": 12,
                    "start_address": 2
                },
                "param_3": {
                    "context": 1,
                    "data": 12,
                    "data_value": 1,
                    "end_address": 2,
                    "mem_size": 1,
                    "memory_address": 3,
                    "num_of_bytes": 1,
                    "param3": 1,
                    "register_address": 2,
                    "register_address_increment": 1,
                    "register_size": 1,
                    "size": 1,
                    "subaddress": 1,
                    "value": 2,
                    "write_address_size": 1
                },
                "param_4": {
                    "data": 6,
                    "data_length": 5,
                    "data_size": 5,
                    "device_address": 1,
                    "increment": 1,
                    "length": 2,
                    "num_bytes": 1,
                    "number_of_bytes": 1,
                    "param4": 1,
                    "register_address": 3,
                    "size": 4,
                    "subaddress_size": 1
                },
                "param_5": {
                    "buffer": 2,
                    "buffer_size": 1,
                    "device": 1,
                    "device_handle": 1,
                    "i2c_handle": 1,
                    "output_data": 1,
                    "param5": 1,
                    "parameter_list": 1,
                    "register_data": 1,
                    "result": 1,
                    "source_data": 1
                },
                "undefined2": {
                    "value_2": 1
                },
                "undefined4": {
                    "value_4": 1
                }
            },
            "called": [
                "FUN_08001ccc"
            ],
            "calling": [],
            "code": "\nvoid write_data_to_i2_c_device_08004ea4(undefined device_address,undefined register_address,value_4 data,value_2 data)\n\n{\n  write_to_i2_c_memory(&DAT_20000a88,device_address,register_address,1,data,data,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "write_data_to_i2_c_device_08004ea4",
            "entrypoint": "0x08004ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ea4": "write_data_to_i2_c_device_08004ea4",
                "HAL_I2C_Mem_Write": "write_to_i2_c_memory",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "data",
                "undefined2": "value_2",
                "undefined4": "value_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ee8": {
            "additional_data": {
                "FUN_08001f6c": {
                    "copy_data": 1,
                    "decode_i2_c_data": 1,
                    "extract_data": 1,
                    "extract_data_pointers": 1,
                    "process_data": 3,
                    "process_i2_c_data": 1,
                    "rearrange_memory_data": 1,
                    "uint_to_pointer": 1,
                    "update_buffer": 1
                },
                "FUN_08004ee8": {
                    "i2c_read_data": 1,
                    "read_data_from_i2_c": 3,
                    "read_data_from_i2_c_memory": 1,
                    "read_from_i2_c": 3,
                    "read_from_i2_c_memory": 1,
                    "read_i2_c_data": 3,
                    "read_i2_c_mem": 1,
                    "read_i2_c_memory": 10,
                    "read_i2c_data": 3,
                    "read_i2c_memory": 3,
                    "read_memory_from_i2_c": 1,
                    "read_memory_via_i2_c": 1
                },
                "HAL_I2C_Mem_Read": {
                    "perform_i2_c_memory_read": 2,
                    "perform_i2_c_read": 2,
                    "perform_i2c_memory_read": 3,
                    "read_from_i2_c_memory": 3,
                    "read_i2_c_memory": 6,
                    "read_i2_c_memory_bytes": 1,
                    "read_i2_c_memory_from_device": 1,
                    "read_i2_c_memory_helper": 1,
                    "read_i2c_mem": 1,
                    "read_i2c_memory": 1,
                    "read_memory": 3,
                    "read_memory_from_i2_c": 1,
                    "read_memory_over_i2_c": 1,
                    "read_memory_via_i2c": 1
                },
                "param_1": {
                    "address": 1,
                    "data": 1,
                    "data_buffer": 3,
                    "data_pointer": 2,
                    "data_start_address": 1,
                    "device_address": 18,
                    "i2c_device_address": 1,
                    "input_data": 1,
                    "memory_address": 2,
                    "pointer_array": 1
                },
                "param_2": {
                    "addr_1": 1,
                    "address": 2,
                    "address_pointer": 1,
                    "data": 1,
                    "data_buffer": 2,
                    "device_address": 1,
                    "mem_address": 1,
                    "memory_address": 11,
                    "param2": 1,
                    "reg_address": 1,
                    "register_address": 5,
                    "start_addr": 1,
                    "start_address": 2,
                    "start_index": 1
                },
                "param_3": {
                    "addr_2": 1,
                    "byte1": 1,
                    "data_length": 6,
                    "data_size": 4,
                    "end_addr": 1,
                    "end_index": 1,
                    "mem_size": 2,
                    "memory_address": 1,
                    "memory_address_size": 1,
                    "memory_size": 3,
                    "mid_address": 1,
                    "param3": 1,
                    "reg_size": 1,
                    "register_address": 1,
                    "register_size": 3,
                    "size": 3
                },
                "param_4": {
                    "addr_3": 1,
                    "buffer": 2,
                    "byte2": 1,
                    "callback": 2,
                    "data": 1,
                    "data_buffer": 4,
                    "device_address": 1,
                    "end_address": 1,
                    "memory_address_size": 1,
                    "memory_bank": 1,
                    "memory_buffer": 3,
                    "memory_location": 1,
                    "offset": 1,
                    "options": 1,
                    "param4": 1,
                    "param_pointer": 1,
                    "read_buffer": 1,
                    "read_data_length": 1,
                    "reg_address": 1,
                    "register_size": 2,
                    "slave_address": 1,
                    "step": 1,
                    "step_size": 1
                },
                "param_5": {
                    "buffer": 1,
                    "data_buffer": 1,
                    "data_destination": 1,
                    "data_pointer": 1,
                    "data_pointers": 1,
                    "data_ptr": 1,
                    "output_data": 1,
                    "result": 1,
                    "source_data": 1,
                    "uint_pointer": 1
                }
            },
            "called": [
                "FUN_08001f6c"
            ],
            "calling": [],
            "code": "\nvoid read_data_from_i2_c_memory_08004ee8(undefined device_address,undefined memory_address,undefined4 data_length,undefined2 data_buffer)\n\n{\n  read_i2_c_memory(&DAT_20000a88,device_address,memory_address,1,data_length,data_buffer,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "read_data_from_i2_c_memory_08004ee8",
            "entrypoint": "0x08004ee8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ee8": "read_data_from_i2_c_memory_08004ee8",
                "HAL_I2C_Mem_Read": "read_i2_c_memory",
                "param_1": "device_address",
                "param_2": "memory_address",
                "param_3": "data_length",
                "param_4": "data_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f2c": {
            "additional_data": {
                "FUN_080015a0": {
                    "initialize_component": 1
                },
                "FUN_08004f2c": {
                    "get_current_tick": 13,
                    "get_current_time": 3,
                    "get_system_tick": 6,
                    "get_system_ticks": 1,
                    "get_system_time": 2,
                    "get_system_timestamp": 1,
                    "get_tick_count": 5
                },
                "HAL_GetTick": {
                    "get_current_tick": 1,
                    "get_tick": 1,
                    "get_tick_value": 1,
                    "retrieve_system_tick": 2,
                    "retrieve_system_ticks": 1
                },
                "uVar1": {
                    "current_tick": 13,
                    "current_time": 3,
                    "system_tick": 3,
                    "system_ticks": 1,
                    "system_time": 1,
                    "tick": 1,
                    "tick_count": 4,
                    "tick_value": 1,
                    "timestamp": 1
                }
            },
            "called": [
                "FUN_080015a0"
            ],
            "calling": [],
            "code": "\nundefined4 get_current_tick_08004f2c(void)\n\n{\n  undefined4 current_tick;\n  \n  current_tick = retrieve_system_tick();\n  return current_tick;\n}\n\n",
            "current_name": "get_current_tick_08004f2c",
            "entrypoint": "0x08004f2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f2c": "get_current_tick_08004f2c",
                "HAL_GetTick": "retrieve_system_tick",
                "uVar1": "current_tick"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f3c": {
            "additional_data": {
                "DAT_20000adc": {
                    "uart_handle": 1
                },
                "FUN_08004436": {
                    "process_data": 10
                },
                "FUN_08004f3c": {
                    "send_data": 1,
                    "send_data_via_uart": 1,
                    "transmit_data": 27,
                    "transmit_data_via_uart": 1,
                    "transmit_uart_data": 1
                },
                "HAL_UART_Transmit": {
                    "send_data": 3,
                    "send_data_over_uart": 1,
                    "send_data_to_uart": 1,
                    "send_via_uart": 1,
                    "transmit": 1,
                    "transmit_data": 1,
                    "transmit_data_via_uart": 1,
                    "transmit_serial_data": 2,
                    "transmit_uart": 10,
                    "transmit_uart_data": 2
                },
                "param_1": {
                    "data": 18,
                    "data_array": 1,
                    "data_buffer": 9,
                    "data_pointer": 2,
                    "data_ptr": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data_buffer": 1,
                    "data_length": 8,
                    "data_size": 5,
                    "data_string": 1,
                    "length": 11,
                    "size": 4
                },
                "param_3": {
                    "buffer_size": 1,
                    "count": 1,
                    "data_offset": 1,
                    "data_size": 2,
                    "num_elements": 1,
                    "offset": 1,
                    "start_index": 1,
                    "value": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "data_flag": 1,
                    "flags": 1,
                    "length": 1,
                    "options": 1,
                    "speed": 1,
                    "timeout": 1,
                    "transmit_option": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_08004436"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid transmit_data_via_uart_08004f3c(undefined4 data,undefined2 length)\n\n{\n  transmit_uart(&DAT_20000adc,data,length,0x32);\n  return;\n}\n\n",
            "current_name": "transmit_data_via_uart_08004f3c",
            "entrypoint": "0x08004f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f3c": "transmit_data_via_uart_08004f3c",
                "HAL_UART_Transmit": "transmit_uart",
                "param_1": "data",
                "param_2": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f60": {
            "additional_data": {
                "DAT_20000ba8": {
                    "data": 3,
                    "data_buffer": 2,
                    "data_structure": 1,
                    "memory_array": 1
                },
                "FUN_08004f60": {
                    "clear_data": 2,
                    "clear_data_buffer": 1,
                    "clear_memory": 1,
                    "initialize_buffer": 2,
                    "initialize_data": 16,
                    "initialize_data_buffer": 1,
                    "initialize_data_structure": 1,
                    "initialize_memory": 7
                },
                "FUN_08005d68": {
                    "copy_data": 1,
                    "fill_array": 1,
                    "process_data": 3,
                    "set_array_elements": 1,
                    "set_data": 1,
                    "update_data": 1
                },
                "param_1": {
                    "arg1": 1,
                    "array": 7,
                    "array_pointer": 5,
                    "buffer": 2,
                    "data_array": 1,
                    "data_buffer": 2,
                    "data_pointer": 7,
                    "pointer": 3,
                    "ptr": 1,
                    "ptr_array": 1
                },
                "param_2": {
                    "arg2": 1,
                    "byte_param": 1,
                    "byte_value": 3,
                    "data": 1,
                    "default_value": 1,
                    "fill_value": 1,
                    "flag": 13,
                    "status": 1,
                    "value": 8
                },
                "param_3": {
                    "arg3": 1,
                    "length": 3,
                    "size": 24,
                    "uint_param": 1,
                    "value": 1
                },
                "uint": {
                    "length": 1
                },
                "undefined": {
                    "fill_value": 1
                },
                "undefined4": {
                    "array_pointer": 1
                }
            },
            "called": [
                "FUN_08005d68"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid initialize_data_structure_08004f60(void)\n\n{\n  memset(&DAT_20000ba8,0,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08004f60",
            "entrypoint": "0x08004f60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f60": "initialize_data_structure_08004f60"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f78": {
            "additional_data": {
                "BitwiseXorResult": {
                    "xor_result": 1
                },
                "ComparisonResult1": {
                    "comp_result1": 1
                },
                "ComparisonResult2": {
                    "comp_result2": 1
                },
                "FUN_08000418": {
                    "calculate4": 1,
                    "calculate_shift": 1,
                    "calculate_value": 1,
                    "calculate_value5": 1,
                    "perform_calculation": 1,
                    "perform_operation": 1,
                    "perform_operation2": 1,
                    "process_data": 1,
                    "reverse_something": 1
                },
                "FUN_08000aa4": {
                    "calculate1": 2,
                    "calculate_component1": 1,
                    "calculate_diff1": 1,
                    "calculate_difference": 2,
                    "calculate_value1": 1
                },
                "FUN_08000aa8": {
                    "calculate5": 1,
                    "calculate6": 1,
                    "calculate_component5": 1,
                    "calculate_diff3": 1,
                    "calculate_difference": 1,
                    "calculate_value7": 1,
                    "update_difference": 1
                },
                "FUN_08000c08": {
                    "calculate3": 2,
                    "calculate_component3": 1,
                    "calculate_result": 1,
                    "calculate_value3": 1,
                    "perform_operation": 2
                },
                "FUN_08000c10": {
                    "calculate7": 1,
                    "calculate8": 1,
                    "calculate_component6": 1,
                    "calculate_result": 1,
                    "calculate_value10": 1,
                    "function_five": 1,
                    "perform_different_operation": 1,
                    "perform_operation8": 1
                },
                "FUN_08000cb8": {
                    "apply_scaling_factor": 1,
                    "calculate2": 2,
                    "calculate_component2": 1,
                    "calculate_diff2": 1,
                    "calculate_product": 1,
                    "calculate_value2": 1
                },
                "FUN_08000ff4": {
                    "check_condition2": 3,
                    "check_flag": 1,
                    "check_flag2": 1,
                    "check_status": 1,
                    "check_status2": 1,
                    "function_two": 1
                },
                "FUN_08001030": {
                    "check_condition": 4,
                    "check_condition1": 1,
                    "check_flag": 1,
                    "check_status": 1
                },
                "FUN_08001044": {
                    "calculate4": 1,
                    "calculate5": 1,
                    "calculate_component4": 1,
                    "calculate_value6": 1,
                    "function_one": 1,
                    "modify_value": 1,
                    "perform_operation": 1,
                    "perform_operation3": 1
                },
                "FUN_08001a80": {
                    "process_input": 1,
                    "update_flag": 1,
                    "update_gpio": 3,
                    "write_data": 1,
                    "write_to_buffer": 1
                },
                "FUN_08004ae0": {
                    "calculate_value8": 1,
                    "initialize_data": 1,
                    "perform_operation5": 1,
                    "reset_pointer": 1,
                    "reset_pointers": 1,
                    "store_values": 1
                },
                "FUN_08004bd8": {
                    "calculate_value4": 1,
                    "format_print": 1,
                    "format_string": 1,
                    "initialize_gpio_pin": 1,
                    "print_output": 1,
                    "print_uart": 1,
                    "set_pin_value": 1,
                    "store_data": 1,
                    "store_pitch_info": 1
                },
                "FUN_08004f3c": {
                    "calculate_and_set_gpio": 1,
                    "function_four": 1,
                    "perform_operation7": 1,
                    "print_pitch": 1,
                    "update_data": 1,
                    "update_value": 1,
                    "write_result": 1,
                    "write_value": 1
                },
                "FUN_08004f60": {
                    "flush_buffer": 1,
                    "flush_strbuf": 1,
                    "print_buffer": 1,
                    "reset_data": 1,
                    "reset_variables": 1,
                    "update_mpu": 1,
                    "update_values": 1
                },
                "FUN_08004f78": {
                    "calculate_and_print_pitch": 4,
                    "calculate_pitch": 1,
                    "calculate_pitch_and_print": 2,
                    "calculate_pitch_and_update": 1,
                    "calculate_pitch_and_update_le_ds": 1,
                    "update_and_calculate_pitch": 1,
                    "update_and_print_pitch": 10,
                    "update_pitch_and_gpio": 1,
                    "update_pitch_and_print": 1,
                    "update_pitch_and_write": 1,
                    "update_pitch_and_write_output": 1,
                    "update_pitch_control": 1,
                    "update_pitch_data": 3,
                    "update_pitch_information": 2
                },
                "FUN_08005dfc": {
                    "initialize_parameters": 1,
                    "perform_operation4": 1,
                    "print_message": 1,
                    "set_gpio": 1,
                    "set_values": 1,
                    "update_buffer": 1,
                    "update_params": 1
                },
                "FUN_08005e40": {
                    "calculate6": 1,
                    "calculate7": 1,
                    "calculate_result": 1,
                    "calculate_value9": 1,
                    "function_three": 1,
                    "get_value": 1,
                    "perform_operation6": 1,
                    "process_data": 1
                },
                "Flag": {
                    "condition_flag": 1
                },
                "FrequentlyUsedFunction": {
                    "update_and_print_pitch": 1
                },
                "GPIO_16": {
                    "gpio16": 1
                },
                "GPIO_2": {
                    "gpio2": 1
                },
                "GPIO_4": {
                    "gpio4": 1
                },
                "GPIO_8": {
                    "gpio8": 1
                },
                "HAL_GPIO_WritePin": {
                    "gpio_write_pin": 1,
                    "set_gpio_pin": 2,
                    "write_gpio": 1,
                    "write_gpio_pin": 4,
                    "write_pin": 2,
                    "write_pin_to_gpio": 1,
                    "write_pin_value": 1,
                    "write_to_gpio": 3
                },
                "LimitValue": {
                    "limit": 1
                },
                "LocalValue": {
                    "local_value": 1
                },
                "MultiplicationResult1": {
                    "mul_result1": 1
                },
                "MultiplicationResult2": {
                    "mul_result2": 1
                },
                "OutputValue": {
                    "output_value": 1
                },
                "Parameter1": {
                    "mpu_data1": 1
                },
                "Parameter2": {
                    "mpu_data2": 1
                },
                "PitchString": {
                    "pitch_string": 1
                },
                "PitchValue": {
                    "pitch": 1
                },
                "StringBuffer": {
                    "str_buf": 1
                },
                "StringLength": {
                    "pitch_string_length": 1
                },
                "UpdatedPitch": {
                    "updated_pitch": 1
                },
                "__addsf3": {
                    "add_floating_point": 1,
                    "add_floats": 5,
                    "add_single_floats": 2,
                    "add_single_precision_float": 2,
                    "float_addition": 3,
                    "floating_point_addition": 1
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 5,
                    "convert_to_floating_point": 1,
                    "float_to_double": 5,
                    "float_to_double_conversion": 3
                },
                "__aeabi_fcmpgt": {
                    "check_greater_than": 1,
                    "compare_float_greater_than": 1,
                    "compare_floats_greater_than": 3,
                    "compare_greater_than": 2,
                    "float_compare_greater_than": 1,
                    "float_comparison_greater_than": 1,
                    "float_greater_than": 2,
                    "float_greater_than_comparison": 2,
                    "floating_point_greater_than_comparison": 1
                },
                "__aeabi_fcmplt": {
                    "check_less_than": 1,
                    "compare_float_less_than": 1,
                    "compare_floats_less_than": 3,
                    "compare_less_than": 2,
                    "float_compare_less_than": 1,
                    "float_comparison_less_than": 1,
                    "float_less_than": 2,
                    "float_less_than_comparison": 2,
                    "floating_point_less_than_comparison": 1
                },
                "__aeabi_fmul": {
                    "float_multiplication": 6,
                    "floating_point_multiplication": 1,
                    "multiply_float": 1,
                    "multiply_floating_point": 1,
                    "multiply_floats": 5
                },
                "__aeabi_fsub": {
                    "float_subtraction": 6,
                    "floating_point_subtraction": 1,
                    "subtract_float": 1,
                    "subtract_floating_point": 1,
                    "subtract_floats": 5
                },
                "__fixunssfsi": {
                    "convert_float_to_unsigned_int": 3,
                    "convert_float_to_unsigned_integer": 2,
                    "convert_unsigned_to_signed": 1,
                    "float_to_unsigned_int": 2,
                    "float_to_unsigned_integer": 1,
                    "float_to_unsigned_integer_conversion": 2,
                    "single_float_to_unsigned_integer": 1,
                    "unsigned_integer_to_float_conversion": 1,
                    "unsigned_single_precision_float_to_integer": 1
                },
                "__floatsisf": {
                    "convert_int_to_float": 2,
                    "convert_integer_to_float": 2,
                    "convert_signed_int_to_float": 1,
                    "convert_to_integer": 1,
                    "int_to_float": 2,
                    "integer_conversion": 1,
                    "integer_to_float": 1,
                    "integer_to_float_conversion": 2,
                    "integer_to_single_float": 1,
                    "integer_to_single_precision_float": 1
                },
                "__floatunsisf": {
                    "convert_unsigned_int_to_float": 3,
                    "convert_unsigned_integer_to_float": 2,
                    "convert_unsigned_to_integer": 1,
                    "unsigned_int_to_float": 2,
                    "unsigned_integer_conversion": 1,
                    "unsigned_integer_to_float": 1,
                    "unsigned_integer_to_float_conversion": 2,
                    "unsigned_integer_to_single_float": 1,
                    "unsigned_integer_to_single_precision_float": 1
                },
                "flush_strbuf": {
                    "clear_buffer": 2,
                    "flush_buffer": 1,
                    "flush_output_buffer": 1,
                    "flush_string_buffer": 10
                },
                "iVar2": {
                    "comparison": 7,
                    "comparison_result": 9,
                    "condition": 1,
                    "is_less": 1,
                    "is_less_than": 1,
                    "result2": 2,
                    "temp2": 1
                },
                "local_11": {
                    "final_pitch": 1,
                    "fixed_pitch": 1,
                    "flipped_value": 1,
                    "local_pitch": 1,
                    "output_value": 1,
                    "pitch": 5,
                    "pitch_indicator": 1,
                    "pitch_info": 1,
                    "pitch_value": 12
                },
                "mpu6050_calc_pitch": {
                    "calculate_mpu6050_pitch": 1,
                    "calculate_pitch": 12,
                    "calculate_pitch_mpu6050": 1
                },
                "mpu6050_update": {
                    "update_accelerometer_values": 1,
                    "update_device_data": 1,
                    "update_mpu6050": 10,
                    "update_sensor_data": 2
                },
                "sprintf": {
                    "format_into_string": 1,
                    "format_output": 1,
                    "format_pitch_string": 1,
                    "format_string": 7,
                    "print_formatted": 1,
                    "print_to_string": 1,
                    "write_formatted_string": 1
                },
                "strlen": {
                    "get_pitch_string_length": 1,
                    "get_string_length": 6,
                    "string_length": 4
                },
                "uVar1": {
                    "len": 1,
                    "length": 8,
                    "num1": 1,
                    "result": 7,
                    "result1": 2,
                    "string_length": 1,
                    "temp1": 1,
                    "temp_var1": 1
                },
                "uVar3": {
                    "float_comparison_result": 1,
                    "float_value": 1,
                    "length": 1,
                    "num2": 1,
                    "result": 3,
                    "result3": 2,
                    "result_2": 1,
                    "start_index": 1,
                    "temp": 6,
                    "temp3": 1,
                    "temp_result": 2,
                    "temp_var": 1,
                    "temp_var3": 1
                },
                "uVar4": {
                    "bitwise_complement": 1,
                    "bitwise_inverse": 1,
                    "bitwise_result": 1,
                    "bitwise_xor_result": 3,
                    "flag": 1,
                    "mask": 3,
                    "masked_data": 1,
                    "num3": 1,
                    "result4": 2,
                    "temp": 1,
                    "temp4": 1,
                    "temp_mask": 1,
                    "temp_var4": 1,
                    "temp_variable": 1,
                    "u_var4": 1,
                    "xor_result": 2
                },
                "uVar5": {
                    "converted_data": 1,
                    "converted_num": 1,
                    "converted_pitch": 5,
                    "converted_result": 1,
                    "converted_value": 6,
                    "double_value": 1,
                    "pitch": 1,
                    "pitch_conversion_result": 1,
                    "pitch_double": 1,
                    "pitch_value": 1,
                    "result5": 2,
                    "temp_value": 1
                },
                "uart_print": {
                    "print_string": 4,
                    "print_to_uart": 3,
                    "print_uart": 6
                }
            },
            "called": [
                "FUN_08000aa4",
                "FUN_08000cb8",
                "FUN_08001a80",
                "FUN_08001030",
                "FUN_08000c08",
                "FUN_08004f60",
                "FUN_08004bd8",
                "FUN_08000418",
                "FUN_08001044",
                "FUN_08000ff4",
                "FUN_08005dfc",
                "FUN_08000aa8",
                "FUN_08004ae0",
                "FUN_08005e40",
                "FUN_08004f3c",
                "FUN_08000c10"
            ],
            "calling": [
                "FUN_080017b4",
                "FUN_080036f8"
            ],
            "code": "\nvoid update_pitch_and_print_08004f78(void)\n\n{\n  undefined4 length;\n  int comparison_result;\n  undefined4 temp;\n  uint bitwise_xor_result;\n  undefined8 converted_value;\n  byte pitch_value;\n  \n  update_mpu6050(&DAT_20000a5c);\n  calculate_pitch(&DAT_20000a5c,&DAT_20000ba0);\n  flush_string_buffer();\n  converted_value = float_to_double(DAT_20000ba0);\n  format_string(&DAT_20000ba8,\"Pitch: %f\\n\",(int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  length = get_string_length(&DAT_20000ba8);\n  print_uart(&DAT_20000ba8,length);\n  DAT_200009f8 = float_subtraction(DAT_20000014,DAT_20000ba0);\n  DAT_20000be8 = float_multiplication(DAT_20000a00,DAT_200009f8);\n  length = float_multiplication(DAT_20000a04,DAT_200009f8);\n  DAT_20000b5c = add_floats(length,DAT_20000b5c);\n  length = int_to_float(DAT_20000010);\n  comparison_result = compare_floats_less_than(length,DAT_20000b5c);\n  if (comparison_result == 0) {\n    length = int_to_float(DAT_200009f4);\n    comparison_result = compare_floats_greater_than(length,DAT_20000b5c);\n    if (comparison_result != 0) {\n      DAT_20000b5c = convert_unsigned_int_to_float(DAT_200009f4);\n    }\n  }\n  else {\n    DAT_20000b5c = convert_unsigned_int_to_float(DAT_20000010);\n  }\n  bitwise_xor_result = DAT_20000a08 ^ 0x80000000;\n  length = float_subtraction(DAT_200009f8,DAT_200009fc);\n  DAT_20000a58 = float_multiplication(bitwise_xor_result,length);\n  length = add_floats(DAT_20000be8,DAT_20000b5c);\n  length = add_floats(length,DAT_20000a58);\n  temp = int_to_float(DAT_20000010);\n  comparison_result = compare_floats_greater_than(length,temp);\n  if (comparison_result == 0) {\n    temp = int_to_float(DAT_200009f4);\n    comparison_result = compare_floats_less_than(length,temp);\n    if (comparison_result == 0) {\n      pitch_value = convert_float_to_unsigned_int(length);\n    }\n    else {\n      pitch_value = DAT_200009f4;\n    }\n  }\n  else {\n    pitch_value = DAT_20000010;\n  }\n  DAT_200009fc = DAT_200009f8;\n  comparison_result = compare_floats_greater_than(DAT_200009f8,0);\n  write_gpio_pin(0x40010800,2,comparison_result != 0);\n  comparison_result = compare_floats_greater_than(DAT_200009f8,0);\n  write_gpio_pin(0x40010800,4,comparison_result == 0);\n  comparison_result = compare_floats_greater_than(DAT_200009f8,0);\n  write_gpio_pin(0x40010800,8,comparison_result != 0);\n  comparison_result = compare_floats_greater_than(DAT_200009f8,0);\n  write_gpio_pin(0x40010800,0x10,comparison_result == 0);\n  *(uint *)(DAT_20000b1c + 0x34) = (uint)pitch_value;\n  *(uint *)(DAT_20000b1c + 0x40) = (uint)pitch_value;\n  return;\n}\n\n",
            "current_name": "update_pitch_and_print_08004f78",
            "entrypoint": "0x08004f78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f78": "update_pitch_and_print_08004f78",
                "HAL_GPIO_WritePin": "write_gpio_pin",
                "__addsf3": "add_floats",
                "__aeabi_f2d": "float_to_double",
                "__aeabi_fcmpgt": "compare_floats_greater_than",
                "__aeabi_fcmplt": "compare_floats_less_than",
                "__aeabi_fmul": "float_multiplication",
                "__aeabi_fsub": "float_subtraction",
                "__fixunssfsi": "convert_float_to_unsigned_int",
                "__floatsisf": "int_to_float",
                "__floatunsisf": "convert_unsigned_int_to_float",
                "flush_strbuf": "flush_string_buffer",
                "iVar2": "comparison_result",
                "local_11": "pitch_value",
                "mpu6050_calc_pitch": "calculate_pitch",
                "mpu6050_update": "update_mpu6050",
                "sprintf": "format_string",
                "strlen": "get_string_length",
                "uVar1": "length",
                "uVar3": "temp",
                "uVar4": "bitwise_xor_result",
                "uVar5": "converted_value",
                "uart_print": "print_uart"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005224": {
            "additional_data": {
                "DAT_20000a4c": {
                    "constant2": 1
                },
                "DAT_20000a50": {
                    "constant3": 1
                },
                "DAT_20000a54": {
                    "constant1": 1
                },
                "FUN_080014f0": {
                    "execute_func080014f0": 1,
                    "function7": 1,
                    "function_8": 1,
                    "function_g": 2,
                    "function_h": 1,
                    "initialize": 1,
                    "initialize_config": 1,
                    "initialize_dat1": 1,
                    "initialize_mpu6050": 8,
                    "initialize_something": 1,
                    "initialize_tim_pwm_start": 1,
                    "reverse_operation": 1,
                    "set_constants": 3,
                    "set_initial_values": 1,
                    "set_timer_variables": 1,
                    "set_variables": 1,
                    "start_base_timer": 2,
                    "unknown_function7": 1,
                    "unspecified_function8": 1
                },
                "FUN_0800360c": {
                    "calculate_value": 1,
                    "execute_func0800360c": 1,
                    "execute_instructions": 1,
                    "function5": 1,
                    "function_6": 1,
                    "function_e": 2,
                    "function_f": 1,
                    "init_tim2": 1,
                    "initialize_pwm": 1,
                    "initialize_tim1": 2,
                    "initialize_tim2": 12,
                    "initialize_timer2": 1,
                    "perform_calculations": 1,
                    "process_data": 1,
                    "reverse_data": 1,
                    "unspecified_function6": 1
                },
                "FUN_080036a8": {
                    "calculate_result": 1,
                    "configure_timer_interrupt": 1,
                    "execute_func080036a8": 1,
                    "execute_instructions2": 1,
                    "function8": 1,
                    "function_9": 1,
                    "function_h": 2,
                    "function_i": 1,
                    "initialize_dat2": 1,
                    "initialize_internal_timer": 1,
                    "initialize_interrupt": 1,
                    "initialize_mpu6050": 4,
                    "initialize_tim_base": 2,
                    "initialize_tim_base_interrupt": 1,
                    "process_data_and_param": 1,
                    "process_data_with_parameter": 1,
                    "reverse_with_data": 1,
                    "start_base_tim": 1,
                    "start_interrupt_timer": 2,
                    "start_pwm": 2,
                    "start_tim_base_it": 1,
                    "unspecified_function9": 1
                },
                "FUN_0800491c": {
                    "do_something": 1,
                    "execute_func0800491c": 1,
                    "function4": 1,
                    "function_5": 1,
                    "function_d": 2,
                    "init_uart": 1,
                    "initialize_function_e": 1,
                    "initialize_tim2": 2,
                    "initialize_timers": 1,
                    "initialize_uart": 13,
                    "process_data": 3,
                    "process_parameter": 1,
                    "unknown_function5": 1,
                    "unspecified_function5": 1
                },
                "FUN_08004e74": {
                    "config_hal": 1,
                    "config_system": 1,
                    "configure_hal": 3,
                    "configure_hardware": 2,
                    "function_1": 1,
                    "initialize_func08004e74": 1,
                    "initialize_function_a": 1,
                    "initialize_hal": 10,
                    "perform_operation": 1,
                    "setup": 1,
                    "some_function": 1,
                    "unknown_function": 1,
                    "unknown_function1": 1,
                    "unspecified_function1": 1
                },
                "FUN_08005224": {
                    "initialize_hardware": 8,
                    "initialize_system": 23
                },
                "FUN_080052a0": {
                    "execute_func080052a0": 1,
                    "execute_task": 1,
                    "function10": 1,
                    "function_11": 1,
                    "function_j": 2,
                    "function_k": 1,
                    "infinite_loop": 2,
                    "initialize_forkserver": 1,
                    "initialize_infinite_loop": 1,
                    "initialize_mpu6050": 1,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "perform_task6": 1,
                    "run_task": 1,
                    "start_base_timer": 2,
                    "start_fork_server": 1,
                    "start_forkserver": 5,
                    "start_interrupt": 1,
                    "start_interrupts": 2,
                    "start_pwm2": 1,
                    "unknown_function9": 1,
                    "unspecified_function11": 1
                },
                "FUN_08005348": {
                    "configure_settings": 1,
                    "execute_func08005348": 1,
                    "function6": 1,
                    "function_7": 1,
                    "function_f": 2,
                    "function_g": 1,
                    "init_tim1": 1,
                    "initialize_mpu6050": 2,
                    "initialize_tim1": 12,
                    "initialize_timer1": 1,
                    "perform_task4": 1,
                    "set_defaults": 1,
                    "unknown_function6": 1,
                    "unspecified_function7": 1
                },
                "FUN_080053b0": {
                    "execute_func080053b0": 1,
                    "function2": 1,
                    "function_3": 1,
                    "function_b": 2,
                    "function_c": 1,
                    "init_gpio": 1,
                    "initialize_gpio": 13,
                    "initialize_i2_c": 3,
                    "perform_task": 1,
                    "perform_task2": 1,
                    "unknown_function3": 1,
                    "unspecified_function3": 1
                },
                "FUN_08005500": {
                    "execute_func08005500": 1,
                    "execute_function": 1,
                    "function9": 1,
                    "function_10": 1,
                    "function_i": 2,
                    "function_j": 1,
                    "init_imu": 1,
                    "initialize_mpu6050": 1,
                    "initialize_pwm": 1,
                    "perform_action": 2,
                    "perform_task5": 1,
                    "start_forkserver": 3,
                    "start_pwm": 8,
                    "start_pwm1": 1,
                    "start_pwm_timer": 1,
                    "start_tim_pwm": 1,
                    "unknown_function8": 1,
                    "unspecified_function10": 1
                },
                "FUN_08005598": {
                    "configure_system_clock": 8,
                    "execute_func08005598": 1,
                    "function1": 1,
                    "function_2": 1,
                    "function_a": 2,
                    "function_b": 1,
                    "init_system_clock": 1,
                    "initialize_clock": 3,
                    "initialize_function": 1,
                    "initialize_gpio": 3,
                    "initialize_system_clock": 2,
                    "perform_task1": 1,
                    "unknown_function2": 1,
                    "unspecified_function2": 1
                },
                "FUN_080055f4": {
                    "execute_action": 1,
                    "execute_func080055f4": 1,
                    "function3": 1,
                    "function_4": 1,
                    "function_c": 2,
                    "function_d": 1,
                    "init_i2_c": 1,
                    "initialize_i2_c": 11,
                    "initialize_i2_c1": 2,
                    "initialize_uart": 3,
                    "perform_task3": 1,
                    "unknown_function4": 1,
                    "unspecified_function4": 1
                },
                "HAL_Init": {
                    "initialize_hal": 10,
                    "initialize_hardware": 2,
                    "initialize_hardware_abstraction_layer": 1,
                    "system_init": 1
                },
                "HAL_TIM_Base_Start_IT": {
                    "start_base_tim": 1,
                    "start_base_tim_interrupt": 1,
                    "start_base_tim_with_interrupt": 1,
                    "start_base_timer": 3,
                    "start_base_timer_interrupt": 4,
                    "start_base_timer_it": 1,
                    "start_base_timit": 1,
                    "start_tim_base_interrupt": 1,
                    "start_tim_base_it": 1
                },
                "HAL_TIM_PWM_Start": {
                    "start_pwm": 5,
                    "start_pwm_timer": 3,
                    "start_pwmtim": 3,
                    "start_tim_pwm": 1
                },
                "MX_GPIO_Init": {
                    "initialize_gpio": 14
                },
                "MX_I2C1_Init": {
                    "initialize_i2_c": 3,
                    "initialize_i2_c1": 11
                },
                "MX_TIM1_Init": {
                    "initialize_tim1": 13,
                    "initialize_timer1": 1
                },
                "MX_TIM2_Init": {
                    "initialize_tim2": 13,
                    "initialize_timer2": 1
                },
                "MX_USART1_UART_Init": {
                    "initialize_uart": 6,
                    "initialize_uart1": 4,
                    "initialize_usart1": 1,
                    "initialize_usart1_uart": 3
                },
                "SystemClock_Config": {
                    "configure_system_clock": 14
                },
                "mpu6050_init": {
                    "initialize_mpu6050": 15
                },
                "param_1": {
                    "param1": 1
                },
                "param_2": {
                    "param2": 1
                },
                "startForkserver": {
                    "initialize_forkserver": 1,
                    "start_fork_server": 13,
                    "start_forkserver": 1
                },
                "undefined4": {
                    "uint32_t": 1
                }
            },
            "called": [
                "FUN_08004e74",
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_080055f4",
                "FUN_0800491c",
                "FUN_0800360c",
                "FUN_08005348",
                "FUN_080014f0",
                "FUN_080036a8",
                "FUN_08005500",
                "FUN_080052a0"
            ],
            "calling": [
                "FUN_080057e8"
            ],
            "code": "\nvoid initialize_system_08005224(void)\n\n{\n  initialize_hal();\n  configure_system_clock();\n  initialize_gpio();\n  initialize_i2_c1();\n  initialize_uart();\n  initialize_tim2();\n  initialize_tim1();\n  DAT_20000a54 = 0x8004ea5;\n  DAT_20000a4c = 0x8004ee9;\n  DAT_20000a50 = 0x8004f2d;\n  start_pwm(&DAT_20000b1c,0);\n  start_pwm(&DAT_20000b1c,0xc);\n  initialize_mpu6050(&DAT_20000a5c);\n  start_base_timer_interrupt(&DAT_20000b60);\n  start_fork_server(0);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_08005224",
            "entrypoint": "0x08005224",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005224": "initialize_system_08005224",
                "HAL_Init": "initialize_hal",
                "HAL_TIM_Base_Start_IT": "start_base_timer_interrupt",
                "HAL_TIM_PWM_Start": "start_pwm",
                "MX_GPIO_Init": "initialize_gpio",
                "MX_I2C1_Init": "initialize_i2_c1",
                "MX_TIM1_Init": "initialize_tim1",
                "MX_TIM2_Init": "initialize_tim2",
                "MX_USART1_UART_Init": "initialize_uart",
                "SystemClock_Config": "configure_system_clock",
                "mpu6050_init": "initialize_mpu6050",
                "startForkserver": "start_fork_server"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052a0": {
            "additional_data": {
                "FUN_0800172a": {
                    "config_osc": 1
                },
                "FUN_08001762": {
                    "config_pwr": 1
                },
                "FUN_0800177c": {
                    "config_flash_latency": 1
                },
                "FUN_08002d98": {
                    "config_ahb_prescaler": 1
                },
                "FUN_08003260": {
                    "config_sysclk_source": 1
                },
                "FUN_08003504": {
                    "get_osc_config_status": 1
                },
                "FUN_080052a0": {
                    "configure_hardware": 1,
                    "configure_system": 1,
                    "configure_system_clock": 4,
                    "initialize_clock": 2,
                    "initialize_clock_system": 2,
                    "initialize_hardware": 2,
                    "initialize_system": 18,
                    "initialize_system_clock": 1
                },
                "FUN_08005674": {
                    "error_handler": 1
                },
                "HAL_NVIC_SetPriority": {
                    "set_interrupt_priority": 1,
                    "set_priority": 2
                },
                "HAL_RCC_ClockConfig": {
                    "configure_clock": 3
                },
                "HAL_RCC_GetHCLKFreq": {
                    "get_hclk_frequency": 3
                },
                "HAL_RCC_OscConfig": {
                    "configure_oscillator": 3
                },
                "HAL_SYSTICK_CLKSourceConfig": {
                    "configure_sys_tick_clock_source": 3
                },
                "HAL_SYSTICK_Config": {
                    "configure_sys_tick": 3
                },
                "_Error_Handler": {
                    "handle_error": 5
                },
                "iVar1": {
                    "config_result": 1,
                    "config_status": 1,
                    "result": 20,
                    "result_code": 1,
                    "return_code": 1,
                    "status": 1
                },
                "iVar2": {
                    "hclk_freq": 1
                },
                "local_10": {
                    "ahb_clock": 1,
                    "ahb_clock_division": 1,
                    "ahb_divider": 1,
                    "ahb_prescaler": 1,
                    "apb1_clock": 1,
                    "apb1_divider": 1,
                    "apb1_prescaler": 1,
                    "clock_config_value5": 1,
                    "hclk_freq": 1,
                    "hsi_speed": 1,
                    "pll_multiplier": 1,
                    "pll_n": 1,
                    "pll_p_state": 1,
                    "pllm_value": 1,
                    "pllp": 1,
                    "rcc_apb1_prescaler": 1,
                    "rcc_oscillator_hse_init": 1,
                    "rcc_sysclk_value": 1,
                    "sys_clock_freq": 1,
                    "sys_clock_prescaler": 1,
                    "sys_clock_source": 1,
                    "sysclk_config": 1,
                    "sysclk_source": 1,
                    "systick_config_param2": 1,
                    "systick_period": 1,
                    "timer_prescaler": 1
                },
                "local_14": {
                    "clock_source": 1,
                    "flash_latency": 5,
                    "hse_state": 1,
                    "hsis_calibration_value": 1,
                    "oscillator_config_value5": 1,
                    "pll_m": 1,
                    "pll_mul_factor": 1,
                    "pll_n_state": 1,
                    "plln": 1,
                    "pllq": 1,
                    "pwr_regulator": 1,
                    "rcc_ahb_prescaler": 1,
                    "rcc_hse_state": 1,
                    "rcc_pllm_value": 1,
                    "sys_clock_source": 1,
                    "sysclk_source": 2,
                    "sysclock_source": 1,
                    "system_core_clock": 1,
                    "systick_config_param1": 1,
                    "voltage_scale": 1
                },
                "local_20": {
                    "apb1_clk_divider": 1,
                    "clock_config_param3": 1,
                    "clock_type": 2,
                    "flash_latency": 2,
                    "hclk_config": 1,
                    "hse_value": 1,
                    "mcu_type": 1,
                    "oscillator_config_value4": 1,
                    "pll_m_state": 1,
                    "pll_mode": 1,
                    "pll_source": 3,
                    "pllm": 1,
                    "pllp": 1,
                    "rcc_pllmul": 1,
                    "rcc_sysclk_source": 1,
                    "voltage_scale": 3,
                    "voltage_scaling": 2,
                    "voltage_scaling_range": 2
                },
                "local_28": {
                    "bypass_oscillator": 1,
                    "clock_config_param2": 1,
                    "clock_div": 1,
                    "clock_source": 1,
                    "external_osc_freq": 1,
                    "external_oscillator_bypass": 1,
                    "flash_latency": 1,
                    "flash_wait_state": 1,
                    "hse_state": 1,
                    "interrupt_priority": 1,
                    "low_power_mode": 1,
                    "msp_source": 1,
                    "none": 1,
                    "oscillator_config_value3": 1,
                    "oscillator_lse": 1,
                    "pll_source": 1,
                    "pll_state": 2,
                    "plln": 1,
                    "rcc_oscillator_type": 1,
                    "rcc_pll_div": 1
                },
                "local_2c": {
                    "clock_config": 1,
                    "clock_config_param1": 1,
                    "clock_security_system": 1,
                    "hse_state": 1,
                    "internal_osc_freq": 1,
                    "low_power_mode": 1,
                    "osc_init_struct": 1,
                    "oscer_config": 1,
                    "oscillator_config_value2": 1,
                    "oscillator_freq": 1,
                    "oscillator_frequency": 2,
                    "oscillator_hse": 1,
                    "oscillator_speed": 3,
                    "oscillator_state": 1,
                    "oscillator_timeout": 1,
                    "oscillator_type": 2,
                    "pllm": 1,
                    "rcc_pll_mul": 1,
                    "sys_clk_pll_source": 1,
                    "system_clock": 1,
                    "voltage_range": 1,
                    "voltage_scaling": 1
                },
                "local_30": {
                    "msi_state": 1,
                    "osc_config": 1,
                    "osc_config_param": 1,
                    "osc_init": 1,
                    "oscillator_config": 4,
                    "oscillator_config_value1": 1,
                    "oscillator_state": 1,
                    "oscillator_type": 13,
                    "pll_source": 1,
                    "rcc_osc_type": 1,
                    "rcc_oscillator_init": 1,
                    "sys_clk_source": 1
                },
                "local_34": {
                    "ahb_clock_divider": 1,
                    "apb1_clock": 1,
                    "apb1_prescaler": 1,
                    "apb2_divider_value": 1,
                    "clk_mco2_prescaler": 1,
                    "clock_config_value4": 1,
                    "none": 1,
                    "pll_q": 1,
                    "rcc_pll_source": 1,
                    "rcc_plln": 1,
                    "rcc_sclk_div": 1,
                    "shs_divider": 1,
                    "sys_tick_calibration": 1,
                    "sys_tick_priority": 1
                },
                "local_38": {
                    "ahb_clock": 1,
                    "ahb_prescaler": 1,
                    "apb1_divider_value": 1,
                    "clk_mco2_source": 1,
                    "clock_config_param2": 1,
                    "clock_config_value3": 1,
                    "hse_divider": 1,
                    "none": 1,
                    "pll_p": 1,
                    "power_save_mode": 1,
                    "rcc_clock_config3": 1,
                    "rcc_clock_source": 1,
                    "rcc_pclk_div": 1,
                    "rcc_sysclk_source": 1,
                    "sys_clock_divider": 1,
                    "voltage_scale": 1
                },
                "local_3c": {
                    "active_clock_source": 1,
                    "ahb_clock_divider": 1,
                    "ahb_divider": 1,
                    "ahb_prescaler": 1,
                    "apb1_clock_divider": 1,
                    "apb1_divider": 2,
                    "clk_mco1_prescaler": 1,
                    "clock_config_param1": 1,
                    "clock_config_value2": 1,
                    "external_clock_divider": 1,
                    "flash_latency": 3,
                    "hclk_source": 1,
                    "param_3": 1,
                    "pclksys": 1,
                    "pll_divider": 1,
                    "pll_multiplier": 2,
                    "pll_n": 1,
                    "pll_source": 2,
                    "pllsource": 1,
                    "ppre1_prescaler": 1,
                    "rcc_clock_config2": 1,
                    "rcc_hclk_div": 1,
                    "rcc_hclk_divider": 1,
                    "rcc_pllm": 1,
                    "source2": 1,
                    "sys_clock_source": 1
                },
                "local_40": {
                    "ahb_clock_divider": 1,
                    "ahb_divider": 2,
                    "clk_mco1_source": 1,
                    "clock_config": 1,
                    "clock_config_value1": 1,
                    "clock_source": 5,
                    "clock_type": 1,
                    "external_clock_source": 1,
                    "hpre_prescaler": 1,
                    "osc_config_param2": 1,
                    "pll_clock": 1,
                    "pll_divider": 1,
                    "pll_m": 1,
                    "pll_multiplier": 1,
                    "pllp": 1,
                    "rcc_clk_init_type_def": 1,
                    "rcc_clock_config1": 1,
                    "rcc_clock_type": 1,
                    "rcc_pllp_value": 1,
                    "rcc_pllrclk_div": 1,
                    "source1": 1,
                    "sysclk_divider": 1,
                    "sysclk_source": 1,
                    "sysclock_divider": 1,
                    "sysclock_divisor": 1,
                    "systick_source": 1
                },
                "local_44": {
                    "clk_config": 1,
                    "clk_init_type_def": 1,
                    "clk_sel": 1,
                    "clock_source": 2,
                    "osc_config": 1,
                    "osc_config_param1": 1,
                    "oscillator": 1,
                    "oscillator_config": 3,
                    "oscillator_type": 2,
                    "pll_source": 2,
                    "plln": 1,
                    "rcc_clock_type": 1,
                    "rcc_osc_config": 1,
                    "rcc_osc_init_struct": 1,
                    "rcc_osc_init_type_def": 1,
                    "rcc_oscillator": 2,
                    "rcc_oscillator_type": 2,
                    "rcc_pll_init_structure": 1,
                    "source": 1,
                    "sys_clock_config": 2,
                    "sysclk_source": 2,
                    "sysclock_config": 1
                },
                "local_c": {
                    "ahb_clock_divider": 1,
                    "ahb_prescaler": 3,
                    "apb1_clock": 1,
                    "apb1_clock_division": 1,
                    "apb1_divider": 1,
                    "apb2_divider": 1,
                    "apb2_prescaler": 1,
                    "apb_prescaler": 1,
                    "clock_config_param3": 1,
                    "clock_config_value6": 1,
                    "hclk_config": 1,
                    "hse_frequency": 1,
                    "hse_speed": 1,
                    "pll_mul": 1,
                    "pll_p": 1,
                    "pll_q_state": 1,
                    "pllq": 1,
                    "rcc_apb2_prescaler": 1,
                    "rcc_hclk_value": 1,
                    "rcc_pllclk_div": 1,
                    "sys_clk_value": 1,
                    "sysclock_freq": 1,
                    "system_clock_freq": 1,
                    "systick_config_param3": 1,
                    "systick_reload": 2
                },
                "param_1": {
                    "none": 1
                },
                "param_2": {
                    "none": 1
                },
                "uVar2": {
                    "hclk_freq": 14,
                    "hclk_freq_value": 1,
                    "hclk_frequency": 3,
                    "system_clock_freq": 2
                }
            },
            "called": [
                "FUN_08003504",
                "FUN_08005674",
                "FUN_0800172a",
                "FUN_08003260",
                "FUN_0800177c",
                "FUN_08001762",
                "FUN_08002d98"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_system_clock_080052a0(void)\n\n{\n  int result;\n  undefined8 hclk_freq;\n  undefined4 oscillator_config;\n  undefined4 clock_source;\n  undefined4 flash_latency;\n  undefined4 voltage_scale;\n  undefined4 rcc_sclk_div;\n  undefined4 oscillator_type;\n  undefined4 oscillator_speed;\n  undefined4 pll_state;\n  undefined4 voltage_scale;\n  undefined4 flash_latency;\n  undefined4 systick_config_param2;\n  undefined4 ahb_prescaler;\n  \n  oscillator_type = 1;\n  oscillator_speed = 0x10000;\n  pll_state = 0;\n  voltage_scale = 1;\n  flash_latency = 2;\n  systick_config_param2 = 0x10000;\n  ahb_prescaler = 0x1c0000;\n  result = configure_oscillator(&oscillator_type);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x151);\n  }\n  oscillator_config = 0xf;\n  clock_source = 2;\n  flash_latency = 0x80;\n  voltage_scale = 0;\n  rcc_sclk_div = 0;\n  result = configure_clock(&oscillator_config,2);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x15e);\n  }\n  hclk_freq = get_hclk_frequency();\n  configure_sys_tick((uint)hclk_freq / 1000,(int)((ulonglong)hclk_freq >> 0x20),(uint)hclk_freq * 0x10624dd3);\n  configure_sys_tick_clock_source(4);\n  set_priority(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_system_clock_080052a0",
            "entrypoint": "0x080052a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052a0": "initialize_system_clock_080052a0",
                "HAL_NVIC_SetPriority": "set_priority",
                "HAL_RCC_ClockConfig": "configure_clock",
                "HAL_RCC_GetHCLKFreq": "get_hclk_frequency",
                "HAL_RCC_OscConfig": "configure_oscillator",
                "HAL_SYSTICK_CLKSourceConfig": "configure_sys_tick_clock_source",
                "HAL_SYSTICK_Config": "configure_sys_tick",
                "_Error_Handler": "handle_error",
                "iVar1": "result",
                "local_10": "systick_config_param2",
                "local_14": "flash_latency",
                "local_20": "voltage_scale",
                "local_28": "pll_state",
                "local_2c": "oscillator_speed",
                "local_30": "oscillator_type",
                "local_34": "rcc_sclk_div",
                "local_38": "voltage_scale",
                "local_3c": "flash_latency",
                "local_40": "clock_source",
                "local_44": "oscillator_config",
                "local_c": "ahb_prescaler",
                "uVar2": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005348": {
            "additional_data": {
                "FUN_08001ab0": {
                    "get_i2_c_parameters": 1,
                    "initialize_hal": 1
                },
                "FUN_08005348": {
                    "initialize_i2_c": 29,
                    "initialize_i2_c_interface": 1,
                    "initialize_i2c": 1
                },
                "FUN_08005674": {
                    "perform_additional_setup": 1,
                    "print_error_message": 1
                },
                "HAL_I2C_Init": {
                    "i2_c_init": 1,
                    "init_i2_c": 2,
                    "initialize_i2_c": 1,
                    "initialize_i2_c_handle": 1,
                    "initialize_i2_c_instance": 1,
                    "initialize_i2_c_interface": 1,
                    "initialize_i2_c_module": 1
                },
                "_Error_Handler": {
                    "handle_error": 7
                },
                "iVar1": {
                    "i2c_init_result": 1,
                    "init_result": 17,
                    "init_status": 2,
                    "result": 2
                }
            },
            "called": [
                "FUN_08005674",
                "FUN_08001ab0"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_i2_c_interface_08005348(void)\n\n{\n  int init_result;\n  \n  DAT_20000a88 = 0x40005400;\n  DAT_20000a8c = 400000;\n  DAT_20000a90 = 0;\n  DAT_20000a94 = 0;\n  DAT_20000a98 = 0x4000;\n  DAT_20000a9c = 0;\n  DAT_20000aa0 = 0;\n  DAT_20000aa4 = 0;\n  DAT_20000aa8 = 0;\n  init_result = init_i2_c(&DAT_20000a88);\n  if (init_result != 0) {\n    handle_error(\"../src/main.c\",0x17a);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_i2_c_interface_08005348",
            "entrypoint": "0x08005348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005348": "initialize_i2_c_interface_08005348",
                "HAL_I2C_Init": "init_i2_c",
                "_Error_Handler": "handle_error",
                "iVar1": "init_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053b0": {
            "additional_data": {
                "DAT_20000b1c": {
                    "base_init": 1,
                    "tim_handle_type_def": 1,
                    "timer_data1": 1
                },
                "DAT_20000b20": {
                    "timer_data2": 1,
                    "timer_period": 1
                },
                "DAT_20000b24": {
                    "timer_data3": 1,
                    "timer_prescaler": 1
                },
                "DAT_20000b28": {
                    "pwm_pulse": 1,
                    "timer_data4": 1
                },
                "DAT_20000b2c": {
                    "pwm1_pulse": 1,
                    "timer_data5": 1
                },
                "DAT_20000b30": {
                    "pwm1_pulse": 1,
                    "timer_data6": 1
                },
                "DAT_20000b34": {
                    "pwm1_pulse": 1,
                    "timer_data7": 1
                },
                "FUN_080035a4": {
                    "config_prescaler": 1
                },
                "FUN_08003640": {
                    "initialize_base": 1
                },
                "FUN_08003908": {
                    "config_channel2": 1
                },
                "FUN_08003a94": {
                    "config_clock_source": 1
                },
                "FUN_0800422e": {
                    "config_channel1": 1
                },
                "FUN_080042de": {
                    "config_channel12": 1
                },
                "FUN_080053b0": {
                    "initialize_pwm": 1,
                    "initialize_pwm_timer": 1,
                    "initialize_tim": 4,
                    "initialize_tim_pwm": 2,
                    "initialize_time_base": 1,
                    "initialize_timer": 13,
                    "initialize_timers": 9
                },
                "FUN_08005674": {
                    "initialize_pwm": 1
                },
                "FUN_08005680": {
                    "config_break_dead_time": 1
                },
                "HAL_TIMEx_ConfigBreakDeadTime": {
                    "configure_break_dead_time": 1,
                    "tim_ex_config_break_dead_time": 1
                },
                "HAL_TIMEx_MasterConfigSynchronization": {
                    "configure_sync_master_timer": 1,
                    "tim_ex_master_config_synchronization": 1
                },
                "HAL_TIM_Base_Init": {
                    "initialize_base_timer": 1,
                    "tim_base_init": 1
                },
                "HAL_TIM_ConfigClockSource": {
                    "configure_clock_source_timer": 1,
                    "tim_config_clock_source": 1
                },
                "HAL_TIM_MspPostInit": {
                    "post_initialize_timer": 1,
                    "tim_msp_post_init": 1
                },
                "HAL_TIM_PWM_ConfigChannel": {
                    "configure_pwm_channel": 1,
                    "tim_pwm_config_channel": 1
                },
                "HAL_TIM_PWM_Init": {
                    "initialize_pwm_timer": 1,
                    "tim_pwm_init": 1
                },
                "_Error_Handler": {
                    "error_handler": 1,
                    "handle_error": 2
                },
                "iVar1": {
                    "init_result": 1,
                    "result": 4
                },
                "local_18": {
                    "clock_config": 2,
                    "clock_configuration": 1,
                    "clock_source": 6,
                    "clock_source_config": 1,
                    "config_clock_source": 1,
                    "configurations": 1,
                    "local_18": 1,
                    "local_array": 1,
                    "local_var19": 1,
                    "prescaler": 5,
                    "tim_config": 1,
                    "timer_clock_source": 1,
                    "var_18": 2
                },
                "local_1c": {
                    "count_mode": 1,
                    "empty": 1,
                    "input": 1,
                    "input_filter": 1,
                    "local_1c": 1,
                    "local_val_13": 1,
                    "local_var18": 1,
                    "master_config": 1,
                    "master_config2": 3,
                    "master_config_2": 1,
                    "master_config_pin": 1,
                    "period": 1,
                    "sync": 1,
                    "sync_config": 2,
                    "sync_config_var2": 1,
                    "synchronization": 1,
                    "timer_master_output_trigger_reset": 1,
                    "timer_prescale": 1,
                    "unused": 1,
                    "unused12": 2,
                    "unused6": 1,
                    "unused_var12": 1,
                    "unused_variable12": 1,
                    "var_1c": 2
                },
                "local_20": {
                    "counter_mode": 1,
                    "empty": 1,
                    "input_prescaler": 1,
                    "local_20": 1,
                    "local_val_12": 1,
                    "local_var17": 1,
                    "master_config": 7,
                    "master_config1": 2,
                    "master_config_val": 1,
                    "master_config_value": 1,
                    "sync": 1,
                    "sync_config": 2,
                    "sync_config_var1": 1,
                    "sync_output": 1,
                    "synchronization": 1,
                    "synchronization_config": 2,
                    "timer_cnt": 1,
                    "timer_config": 1,
                    "timer_master_counter_mode": 1,
                    "var_20": 2
                },
                "local_24": {
                    "channel": 1,
                    "channel_config": 1,
                    "channel_config7": 1,
                    "empty": 1,
                    "local_24": 1,
                    "local_val_11": 1,
                    "local_var16": 1,
                    "output_state": 1,
                    "pwm_config": 1,
                    "pwm_config7": 1,
                    "pwm_config_var7": 1,
                    "timer_channel_6": 1,
                    "timer_pwm1_calibration": 1,
                    "unused": 1,
                    "unused11": 2,
                    "unused12": 1,
                    "unused_var11": 1,
                    "unused_variable11": 1,
                    "var_24": 2
                },
                "local_28": {
                    "channel": 1,
                    "channel_config6": 1,
                    "empty": 1,
                    "local_28": 1,
                    "local_val_10": 1,
                    "local_var15": 1,
                    "output_mode": 1,
                    "pwm_config": 2,
                    "pwm_config6": 1,
                    "pwm_config_var6": 1,
                    "timer_channel_5": 1,
                    "timer_pwm1_prescaler": 1,
                    "unused": 1,
                    "unused10": 2,
                    "unused11": 1,
                    "unused_var10": 1,
                    "unused_variable10": 1,
                    "var_28": 2
                },
                "local_2c": {
                    "channel": 1,
                    "channel_config5": 1,
                    "empty": 1,
                    "local_2c": 1,
                    "local_val_9": 1,
                    "local_var14": 1,
                    "output_polarity": 1,
                    "pwm_config": 2,
                    "pwm_config5": 1,
                    "pwm_config_var5": 1,
                    "timer_channel_4": 1,
                    "timer_pwm1_start_mode": 1,
                    "unused": 1,
                    "unused10": 1,
                    "unused9": 2,
                    "unused_var9": 1,
                    "unused_variable9": 1,
                    "var_2c": 2
                },
                "local_30": {
                    "break_prescaler": 1,
                    "channel": 1,
                    "channel_config4": 1,
                    "empty": 1,
                    "local_30": 1,
                    "local_val_8": 1,
                    "local_var13": 1,
                    "pwm_config": 2,
                    "pwm_config4": 1,
                    "pwm_config_var4": 1,
                    "timer_channel_3": 1,
                    "timer_pwm1_stop_mode": 1,
                    "unused": 1,
                    "unused8": 2,
                    "unused9": 1,
                    "unused_var8": 1,
                    "unused_variable8": 1,
                    "var_30": 2
                },
                "local_34": {
                    "break_polarity": 1,
                    "channel": 1,
                    "channel_config3": 1,
                    "empty": 1,
                    "local_34": 1,
                    "local_val_7": 1,
                    "local_var12": 1,
                    "pwm_config": 2,
                    "pwm_config3": 1,
                    "pwm_config_var3": 1,
                    "timer_channel_2": 1,
                    "timer_pwm1_polarity": 1,
                    "unused": 1,
                    "unused7": 2,
                    "unused8": 1,
                    "unused_var7": 1,
                    "unused_variable7": 1,
                    "var_34": 2
                },
                "local_38": {
                    "break_state": 1,
                    "channel": 1,
                    "channel_config2": 1,
                    "empty": 1,
                    "local_38": 1,
                    "local_val_6": 1,
                    "local_var11": 1,
                    "pwm_config": 2,
                    "pwm_config2": 1,
                    "pwm_config_var2": 1,
                    "timer_channel_1": 1,
                    "timer_pwm1_preload": 1,
                    "unused": 1,
                    "unused6": 2,
                    "unused7": 1,
                    "unused_var6": 1,
                    "unused_variable6": 1,
                    "var_38": 2
                },
                "local_3c": {
                    "break_duration": 1,
                    "channel": 4,
                    "channel_config": 3,
                    "channel_config1": 1,
                    "channel_config_value": 1,
                    "prescaler": 1,
                    "pulse": 2,
                    "pulse_timer_value": 1,
                    "pulse_value": 1,
                    "pwm_channel": 4,
                    "pwm_channel1": 1,
                    "pwm_channel_config": 2,
                    "pwm_config": 4,
                    "pwm_config_channel": 1,
                    "pwm_config_var1": 1,
                    "pwm_configuration": 1,
                    "pwm_pulse_width": 1,
                    "timer_pwm1": 1
                },
                "local_40": {
                    "break_dead_time": 2,
                    "break_dead_time7": 2,
                    "break_dead_time_config": 1,
                    "break_dead_time_config6": 1,
                    "break_dead_time_var7": 1,
                    "break_deadtime_7": 1,
                    "break_filter": 1,
                    "dead_time": 1,
                    "empty": 1,
                    "local_40": 1,
                    "local_val_5": 1,
                    "local_var10": 1,
                    "timer_prescaler6": 1,
                    "unused": 1,
                    "unused5": 3,
                    "unused_var5": 2,
                    "unused_variable5": 1,
                    "var_40": 2
                },
                "local_44": {
                    "break_dead_time": 2,
                    "break_dead_time6": 2,
                    "break_dead_time_config": 1,
                    "break_dead_time_config5": 1,
                    "break_dead_time_divider": 1,
                    "break_dead_time_value": 2,
                    "break_dead_time_var6": 1,
                    "break_deadtime_6": 1,
                    "break_holding": 1,
                    "break_polarity": 1,
                    "break_time": 1,
                    "break_time_value": 1,
                    "dead_time": 6,
                    "dead_time_config": 2,
                    "preserve_config": 1,
                    "pwm_duty_cycle": 1,
                    "timer_period": 1,
                    "var_44": 1
                },
                "local_48": {
                    "break_dead_time": 2,
                    "break_dead_time5": 2,
                    "break_dead_time_config": 1,
                    "break_dead_time_config4": 1,
                    "break_dead_time_var5": 1,
                    "break_deadtime_5": 1,
                    "dead_time": 1,
                    "dead_time_polarity": 1,
                    "empty": 1,
                    "local_48": 1,
                    "local_val_4": 1,
                    "local_var8": 1,
                    "timer_prescaler5": 1,
                    "unused": 1,
                    "unused4": 3,
                    "unused_var4": 2,
                    "unused_variable4": 1,
                    "var_48": 2
                },
                "local_4c": {
                    "break_dead_time": 2,
                    "break_dead_time4": 2,
                    "break_dead_time_config": 1,
                    "break_dead_time_config3": 1,
                    "break_dead_time_var4": 1,
                    "break_deadtime_4": 1,
                    "dead_time": 1,
                    "dead_time_prescaler": 1,
                    "empty": 1,
                    "local_4c": 1,
                    "local_val_3": 1,
                    "local_var7": 1,
                    "timer_prescaler4": 1,
                    "unused": 1,
                    "unused3": 3,
                    "unused_var3": 2,
                    "unused_variable3": 1,
                    "var_4c": 2
                },
                "local_50": {
                    "break_dead_time": 2,
                    "break_dead_time3": 2,
                    "break_dead_time_config": 1,
                    "break_dead_time_config2": 1,
                    "break_dead_time_var3": 1,
                    "break_deadtime_3": 1,
                    "dead_time": 1,
                    "empty": 1,
                    "local_50": 1,
                    "local_val_2": 1,
                    "local_var6": 1,
                    "lock_level": 1,
                    "timer_prescaler3": 1,
                    "unused": 1,
                    "unused2": 3,
                    "unused_var2": 2,
                    "unused_variable2": 1,
                    "var_50": 2
                },
                "local_54": {
                    "break_dead_time": 2,
                    "break_dead_time2": 2,
                    "break_dead_time_config": 1,
                    "break_dead_time_config1": 1,
                    "break_dead_time_var2": 1,
                    "break_deadtime_2": 1,
                    "dead_time": 3,
                    "local_54": 1,
                    "local_val_1": 1,
                    "local_var5": 1,
                    "timer_prescaler2": 1,
                    "unused": 1,
                    "unused1": 3,
                    "unused_var1": 2,
                    "unused_variable": 1,
                    "var_54": 2
                },
                "local_58": {
                    "break_dead_time": 15,
                    "break_dead_time1": 1,
                    "break_dead_time_config": 6,
                    "break_dead_time_var1": 1,
                    "break_deadtime_1": 1,
                    "break_time": 2,
                    "dead_time": 3,
                    "dead_time_value": 1,
                    "timer_prescaler": 1
                },
                "param_1": {
                    "base": 1,
                    "timer": 1,
                    "timer_data": 1,
                    "timer_struct": 1
                },
                "param_2": {
                    "clock_config": 1,
                    "clock_source": 1,
                    "config_data": 1,
                    "config_value": 1
                }
            },
            "called": [
                "FUN_08003640",
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_0800422e",
                "FUN_08003908",
                "FUN_08005680",
                "FUN_080042de"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_pwm_timer_080053b0(void)\n\n{\n  int result;\n  undefined4 break_dead_time;\n  undefined4 dead_time;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  undefined4 dead_time;\n  undefined4 unused5;\n  undefined4 channel;\n  undefined4 var_38;\n  undefined4 var_34;\n  undefined4 pwm_config;\n  undefined4 pwm_config;\n  undefined4 pwm_config;\n  undefined4 unused11;\n  undefined4 master_config;\n  undefined4 master_config2;\n  undefined4 clock_source [4];\n  \n  DAT_20000b1c = 0x40012c00;\n  DAT_20000b20 = 0x708;\n  DAT_20000b24 = 0;\n  DAT_20000b28 = 100;\n  DAT_20000b2c = 0;\n  DAT_20000b30 = 0;\n  DAT_20000b34 = 0;\n  result = initialize_base_timer(&DAT_20000b1c);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",399);\n  }\n  clock_source[0] = 0x1000;\n  result = configure_clock_source_timer(&DAT_20000b1c,clock_source);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x194);\n  }\n  result = initialize_pwm_timer_080053b0(&DAT_20000b1c);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x198);\n  }\n  master_config = 0;\n  master_config2 = 0;\n  result = configure_sync_master_timer(&DAT_20000b1c,&master_config);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x19f);\n  }\n  channel = 0x60;\n  var_38 = 0;\n  var_34 = 0;\n  pwm_config = 0;\n  pwm_config = 0;\n  pwm_config = 0;\n  unused11 = 0;\n  result = tim_pwm_config_channel(&DAT_20000b1c,&channel,0);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x1ab);\n  }\n  result = tim_pwm_config_channel(&DAT_20000b1c,&channel,0xc);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x1b0);\n  }\n  break_dead_time = 0;\n  dead_time = 0;\n  unused2 = 0;\n  unused3 = 0;\n  unused4 = 0;\n  dead_time = 0x2000;\n  unused5 = 0;\n  result = tim_ex_config_break_dead_time(&DAT_20000b1c,&break_dead_time);\n  if (result != 0) {\n    handle_error(\"../src/main.c\",0x1bc);\n  }\n  tim_msp_post_init(&DAT_20000b1c);\n  return;\n}\n\n",
            "current_name": "initialize_pwm_timer_080053b0",
            "entrypoint": "0x080053b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053b0": "initialize_pwm_timer_080053b0",
                "HAL_TIMEx_ConfigBreakDeadTime": "tim_ex_config_break_dead_time",
                "HAL_TIMEx_MasterConfigSynchronization": "configure_sync_master_timer",
                "HAL_TIM_Base_Init": "initialize_base_timer",
                "HAL_TIM_ConfigClockSource": "configure_clock_source_timer",
                "HAL_TIM_MspPostInit": "tim_msp_post_init",
                "HAL_TIM_PWM_ConfigChannel": "tim_pwm_config_channel",
                "HAL_TIM_PWM_Init": "initialize_pwm_timer",
                "_Error_Handler": "handle_error",
                "iVar1": "result",
                "local_18": "clock_source",
                "local_1c": "master_config2",
                "local_20": "master_config",
                "local_24": "unused11",
                "local_28": "pwm_config",
                "local_2c": "pwm_config",
                "local_30": "pwm_config",
                "local_34": "var_34",
                "local_38": "var_38",
                "local_3c": "channel",
                "local_40": "unused5",
                "local_44": "dead_time",
                "local_48": "unused4",
                "local_4c": "unused3",
                "local_50": "unused2",
                "local_54": "dead_time",
                "local_58": "break_dead_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005500": {
            "additional_data": {
                "0x1d0": {
                    "error_line1": 1
                },
                "0x1d5": {
                    "error_line2": 1
                },
                "0x1dc": {
                    "error_line3": 1
                },
                "DAT_20000b60": {
                    "timer_base_instance": 1,
                    "timer_handle": 1,
                    "timer_instance": 1
                },
                "DAT_20000b64": {
                    "auto_reload": 1,
                    "timer_prescaler_value": 1
                },
                "DAT_20000b6c": {
                    "period": 1,
                    "timer_auto_reload_preload": 1
                },
                "DAT_20000b70": {
                    "repetition_counter": 1,
                    "timer_callback_threshold": 1
                },
                "DAT_20000b78": {
                    "clock_division": 1,
                    "timer_callback_counter": 1
                },
                "FUN_080035a4": {
                    "configure_clock_source": 1,
                    "configure_tim_clock_source": 1,
                    "initialize_base": 1,
                    "reverse_c": 1
                },
                "FUN_08003a94": {
                    "configure_tim_base": 1,
                    "get_param1_param2": 1,
                    "initialize_timer_base": 1,
                    "reverse_a": 1
                },
                "FUN_080042de": {
                    "configure_synchronization": 1,
                    "configure_tim_synchronization": 1,
                    "initialize_clock_source": 1,
                    "reverse_d": 1
                },
                "FUN_08005500": {
                    "initialize_tim_base": 1,
                    "initialize_timer": 29,
                    "initialize_timers": 1
                },
                "FUN_08005674": {
                    "disable_tim_base": 1,
                    "handle_error": 1,
                    "perform_other_task": 1,
                    "reverse_b": 1
                },
                "H": {
                    "_error_handler": 1
                },
                "HAL_TIMEx_MasterConfigSynchronization": {
                    "config_master_sync": 2,
                    "config_sync_master": 1,
                    "config_synchronization": 1,
                    "configure_master_sync": 2,
                    "configure_master_synchronization": 1,
                    "configure_timer_sync": 1,
                    "master_config_synchronization": 3,
                    "master_sync_config": 1
                },
                "HAL_TIM_Base_Init": {
                    "init_timer_base": 1,
                    "initialize_base_timer": 3,
                    "initialize_timer_base": 8
                },
                "HAL_TIM_ConfigClockSource": {
                    "config_timer_clock_source": 1,
                    "configure_clock_source": 6,
                    "configure_timer_clock_source": 5
                },
                "I1Var1": {
                    "init_result": 1
                },
                "I4Var1": {
                    "config_result": 1
                },
                "I5Var1": {
                    "config_result": 1
                },
                "I8Var1": {
                    "config_result": 1
                },
                "_Error_Handler": {
                    "handle_error": 9
                },
                "iVar1": {
                    "init_result": 5,
                    "init_status": 6,
                    "result": 3,
                    "status": 2
                },
                "local_18": {
                    "clock_config": 4,
                    "clock_source": 11,
                    "clock_source_array": 1,
                    "clock_source_conf": 1,
                    "clock_source_config": 1,
                    "clock_source_values": 1,
                    "config_params": 4,
                    "prescaler": 1,
                    "tim_clock_source": 1,
                    "timer_clock_source": 1,
                    "timer_config": 2,
                    "timer_config_params": 1
                },
                "local_1c": {
                    "counter_mode": 11,
                    "master_config": 1,
                    "period": 2,
                    "prescaler_value": 1,
                    "reload_value": 1,
                    "sync_config": 2,
                    "sync_div": 1,
                    "sync_output_polarity": 1,
                    "sync_value": 2,
                    "synchronization": 1,
                    "synchronization_params": 1,
                    "tim_polarity": 1,
                    "timer_prescaler": 1,
                    "unused": 1
                },
                "local_20": {
                    "clock_div": 1,
                    "clock_source": 4,
                    "clock_speed": 1,
                    "clock_value": 1,
                    "master_config_params": 1,
                    "master_config_value": 2,
                    "prescaler": 15,
                    "reload_value": 1,
                    "sync_input_polarity": 1,
                    "synchronization": 1,
                    "synchronization_config": 1,
                    "tim_prescaler": 1,
                    "timer_period": 1
                },
                "param_1": {
                    "timer": 1
                },
                "param_2": {
                    "clock_source": 1
                }
            },
            "called": [
                "FUN_08003a94",
                "FUN_08005674",
                "FUN_080035a4",
                "FUN_080042de"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_timer_08005500(void)\n\n{\n  int QYJET_error_handlerIATY;\n  undefined4 prescaler;\n  undefined4 counter_mode;\n  undefined4 clock_source [4];\n  \n  DAT_20000b60 = 0x40000000;\n  DAT_20000b64 = 36000;\n  DAT_20000b68 = 0;\n  DAT_20000b6c = 0x14;\n  DAT_20000b70 = 0;\n  DAT_20000b78 = 0;\n  QYJET_error_handlerIATY = initialize_timer_08005500_base(&DAT_20000b60);\n  if (QYJET_error_handlerIATY != 0) {\n    handle_error(\"../src/main.c\",0x1d0);\n  }\n  clock_source[0] = 0x1000;\n  QYJET_error_handlerIATY = TVLADXZ_error_handlerVM(&DAT_20000b60,clock_source);\n  if (QYJET_error_handlerIATY != 0) {\n    handle_error(\"../src/main.c\",0x1d5);\n  }\n  prescaler = 0x20;\n  counter_mode = 0;\n  QYJET_error_handlerIATY = master_config_synchronization(&DAT_20000b60,&prescaler);\n  if (QYJET_error_handlerIATY != 0) {\n    handle_error(\"../src/main.c\",0x1dc);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_timer_08005500",
            "entrypoint": "0x08005500",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005500": "initialize_timer_08005500",
                "H": "_error_handler",
                "HAL_TIMEx_MasterConfigSynchronization": "master_config_synchronization",
                "HAL_TIM_Base_Init": "initialize_timer_base",
                "HAL_TIM_ConfigClockSource": "configure_clock_source",
                "_Error_Handler": "handle_error",
                "iVar1": "init_status",
                "local_18": "clock_source",
                "local_1c": "counter_mode",
                "local_20": "prescaler"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005598": {
            "additional_data": {
                "FUN_0800438a": {
                    "check_initialization_status": 1
                },
                "FUN_08005598": {
                    "initialize_uart": 31
                },
                "FUN_08005674": {
                    "perform_initialization": 1
                },
                "HAL_UART_Init": {
                    "initialize_uart_communication": 1,
                    "initialize_uart_device": 1,
                    "uart_init": 1
                },
                "VAR_20000adc": {
                    "uart_config": 1
                },
                "VAR_20000ae0": {
                    "baud_rate": 1
                },
                "_Error_Handler": {
                    "error_handler": 1,
                    "handle_error": 2
                },
                "iVar1": {
                    "error_code": 2,
                    "hal_uart_init_result": 1,
                    "init_result": 20,
                    "init_status": 2,
                    "result": 1,
                    "return_value": 1,
                    "uart_init_result": 1
                }
            },
            "called": [
                "FUN_08005674",
                "FUN_0800438a"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\nvoid initialize_uart_08005598(void)\n\n{\n  int init_result;\n  \n  DAT_20000adc = 0x40013800;\n  DAT_20000ae0 = 0x1c200;\n  DAT_20000ae4 = 0;\n  DAT_20000ae8 = 0;\n  DAT_20000aec = 0;\n  DAT_20000af0 = 0xc;\n  DAT_20000af4 = 0;\n  DAT_20000af8 = 0;\n  init_result = initialize_uart_08005598_device(&DAT_20000adc);\n  if (init_result != 0) {\n    handle_error(\"../src/main.c\",0x1ed);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_uart_08005598",
            "entrypoint": "0x08005598",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005598": "initialize_uart_08005598",
                "HAL_UART_Init": "initialize_uart_device",
                "_Error_Handler": "handle_error",
                "iVar1": "init_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080055f4": {
            "additional_data": {
                "0x40010800": {
                    "port_address": 1
                },
                "FUN_080055f4": {
                    "configure_gpio": 1,
                    "init_gpio_pins": 1,
                    "initialize_gpio": 24,
                    "initialize_gpio_pins": 5
                },
                "HAL_GPIO_Init": {
                    "configure_gpio": 2,
                    "initialize_pin": 1,
                    "initialize_pin_mode": 1
                },
                "HAL_GPIO_WritePin": {
                    "set_gpio_state": 1,
                    "set_pin_state": 3
                },
                "_DAT_40021018": {
                    "gpio_control_register": 1,
                    "gpio_register": 3
                },
                "local_14": {
                    "active_state": 1,
                    "gpio_state": 1,
                    "init_value": 2,
                    "mode1": 1,
                    "output_mask": 1,
                    "output_state": 2,
                    "pin_position": 1,
                    "pin_state": 7,
                    "pin_value": 2,
                    "state": 9,
                    "state_on": 1,
                    "value": 2
                },
                "local_18": {
                    "gpio_pin": 1,
                    "input_mask": 1,
                    "pin": 5,
                    "pin_config": 4,
                    "pin_mask": 3,
                    "pin_mode": 3,
                    "pin_number": 12,
                    "pin_value": 1
                },
                "local_c": {
                    "config": 2,
                    "control_mask": 1,
                    "gpio_init": 1,
                    "init_mode": 2,
                    "initial_state": 1,
                    "interrupt_mode": 1,
                    "mode": 9,
                    "mode2": 1,
                    "param_3": 1,
                    "pin_config": 1,
                    "pin_configuration": 1,
                    "pin_mode": 7,
                    "state_off": 1,
                    "value": 1
                },
                "param_1": {
                    "data1": 1,
                    "data_pointer": 1,
                    "input_params": 1,
                    "input_pointer": 1,
                    "param1": 1,
                    "pin": 1
                },
                "param_2": {
                    "data2": 1,
                    "mode": 1,
                    "output_params": 1,
                    "output_pointer": 1,
                    "param2": 1,
                    "param_pointer": 1
                },
                "param_3": {
                    "value": 1
                }
            },
            "called": [
                "FUN_080017c4",
                "FUN_08001a80"
            ],
            "calling": [
                "FUN_08005224"
            ],
            "code": "\n\n\nvoid initialize_gpio_pins_080055f4(void)\n\n{\n  undefined4 pin_number;\n  undefined4 state;\n  undefined4 mode;\n  \n  _DAT_40021018 = _DAT_40021018 | 0x2c;\n  set_pin_state(0x40010800,0x1e,0,_DAT_40021018 & 8);\n  pin_number = 0x1e;\n  state = 1;\n  mode = 2;\n  configure_gpio(0x40010800,&pin_number);\n  return;\n}\n\n",
            "current_name": "initialize_gpio_pins_080055f4",
            "entrypoint": "0x080055f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080055f4": "initialize_gpio_pins_080055f4",
                "HAL_GPIO_Init": "configure_gpio",
                "HAL_GPIO_WritePin": "set_pin_state",
                "local_14": "state",
                "local_18": "pin_number",
                "local_c": "mode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005674": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_08005675": {
                    "do_nothing": 1
                },
                "DAT_XXXXXXXX": {
                    "dat_xxxxxxxx": 1
                },
                "FUN_08005674": {
                    "infinite_loop": 28,
                    "run_infinite_loop": 2,
                    "start_infinite_loop": 1
                },
                "PTR_XXXXXXXX": {
                    "ptr_xxxxxxxx": 1
                },
                "do": {
                    "do": 3,
                    "loop": 1,
                    "while": 1
                },
                "infiniteLoop": {
                    "infinite_loop": 1
                },
                "new_variable_name_1": {
                    "temp": 1
                },
                "new_variable_name_2": {
                    "counter": 1
                },
                "true": {
                    "true": 5
                },
                "while": {
                    "while": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005598",
                "FUN_080053b0",
                "FUN_08005348",
                "FUN_080052a0",
                "FUN_08005500"
            ],
            "code": "\nvoid run_infinite_loop_08005674(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_08005674",
            "entrypoint": "0x08005674",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005674": "run_infinite_loop_08005674"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005680": {
            "additional_data": {
                "FUN_08005680": {
                    "init_gpio": 1,
                    "initialize_gpio": 27,
                    "initialize_gpio_pin": 2,
                    "initialize_gpio_port": 1
                },
                "HAL_GPIO_Init": {
                    "configure_gpio": 2
                },
                "local_14": {
                    "config_value2": 1,
                    "gpio_config2": 1,
                    "gpio_config_field1": 1,
                    "gpio_config_mode": 2,
                    "gpio_config_option1": 1,
                    "gpio_config_param2": 1,
                    "gpio_init_value": 1,
                    "gpio_init_value2": 1,
                    "gpio_init_variable1": 1,
                    "gpio_mode": 6,
                    "gpio_mode_value": 1,
                    "gpio_pin_count": 1,
                    "gpio_pin_mode": 6,
                    "gpio_pin_option": 1,
                    "pin": 1,
                    "pin_mode": 4,
                    "pin_number1": 1
                },
                "local_18": {
                    "config_register": 1,
                    "config_value1": 1,
                    "configuration_register": 1,
                    "gpio_config": 8,
                    "gpio_config1": 1,
                    "gpio_config_param1": 1,
                    "gpio_config_parameter": 1,
                    "gpio_config_value": 4,
                    "gpio_configuration": 5,
                    "gpio_init_value": 1,
                    "gpio_init_value1": 1,
                    "gpio_mode_setting": 1,
                    "gpio_pin_config": 2,
                    "gpio_pin_configuration": 1,
                    "pin_config": 1,
                    "pin_configuration": 1
                },
                "local_c": {
                    "alternate_function_value": 1,
                    "config_value3": 1,
                    "gpio_alternate_function": 1,
                    "gpio_config3": 1,
                    "gpio_config_alternate_function": 1,
                    "gpio_config_field2": 1,
                    "gpio_config_option2": 1,
                    "gpio_config_param3": 1,
                    "gpio_config_type": 1,
                    "gpio_init_value3": 1,
                    "gpio_init_variable2": 1,
                    "gpio_mode": 1,
                    "gpio_output_mode": 2,
                    "gpio_output_type": 1,
                    "gpio_pin_direction": 1,
                    "gpio_pin_speed": 3,
                    "gpio_pull": 1,
                    "gpio_speed": 5,
                    "mode": 1,
                    "output_type": 1,
                    "pin_number2": 1,
                    "pin_speed": 1,
                    "pin_type": 1,
                    "pull_mode": 1
                },
                "param_1": {
                    "config_value": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "gpio_address": 2,
                    "gpio_base_address": 1,
                    "gpio_configuration": 1,
                    "gpio_pin": 4,
                    "gpio_port": 2,
                    "gpio_ptr": 1,
                    "gpio_register": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_pin": 1,
                    "input_ptr": 2,
                    "input_values": 1,
                    "param": 1,
                    "parameter": 1,
                    "pin_address": 1,
                    "pin_data": 1,
                    "value": 1,
                    "value_ptr": 1
                }
            },
            "called": [
                "FUN_080017c4"
            ],
            "calling": [
                "FUN_080053b0"
            ],
            "code": "\nvoid initialize_gpio_pin_08005680(int *gpio_pin)\n\n{\n  undefined4 gpio_config;\n  undefined4 gpio_pin_mode;\n  undefined4 gpio_speed;\n  \n  if (*gpio_pin == 0x40012c00) {\n    gpio_config = 0x900;\n    gpio_pin_mode = 2;\n    gpio_speed = 2;\n    configure_gpio(0x40010800,&gpio_config);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_gpio_pin_08005680",
            "entrypoint": "0x08005680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005680": "initialize_gpio_pin_08005680",
                "HAL_GPIO_Init": "configure_gpio",
                "local_14": "gpio_pin_mode",
                "local_18": "gpio_config",
                "local_c": "gpio_speed",
                "param_1": "gpio_pin"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005704": {
            "additional_data": {
                "FUN_0800157c": {
                    "function2": 1,
                    "function_two": 1,
                    "handle_sys_tick_interrupt": 9,
                    "handle_sys_tick_irq": 2,
                    "increase_hal_tick": 1,
                    "initialize_function2": 1,
                    "perform_action_b": 1,
                    "perform_operation2": 1,
                    "perform_operation_b": 1,
                    "perform_second_task": 1,
                    "perform_subfunction2": 1,
                    "perform_task_b": 2,
                    "process_0800157c": 1,
                    "systick_interrupt_handler": 1
                },
                "FUN_080017b4": {
                    "function1": 1,
                    "function_one": 1,
                    "handle_system_interrupt": 1,
                    "handle_system_tick": 1,
                    "handle_tick": 1,
                    "increment_hal_tick": 1,
                    "increment_tick": 6,
                    "initialize_function1": 1,
                    "initialize_hal": 1,
                    "initialize_tick": 2,
                    "perform_action_a": 1,
                    "perform_first_task": 1,
                    "perform_operation1": 1,
                    "perform_operation_a": 1,
                    "perform_subfunction1": 1,
                    "perform_task_a": 2,
                    "process_080017b4": 1
                },
                "FUN_08005704": {
                    "handle_sys_tick": 2,
                    "handle_sys_tick_interrupt": 1,
                    "handle_system_tick": 1,
                    "handle_tick_interrupt": 4,
                    "handle_tick_irq": 1,
                    "increment_sys_tick": 2,
                    "increment_system_tick": 1,
                    "increment_tick_and_handle_systick_interrupt": 1,
                    "update_sys_tick": 3,
                    "update_sys_tick_handler": 3,
                    "update_system_tick": 9,
                    "update_tick_handler": 2
                },
                "HAL_IncTick": {
                    "increment_sys_tick": 1,
                    "increment_system_tick": 5,
                    "increment_tick": 4,
                    "increment_tick_counter": 1
                },
                "HAL_SYSTICK_IRQHandler": {
                    "handle_sys_tick": 1,
                    "handle_sys_tick_interrupt": 7,
                    "handle_sys_tick_interrupt_request": 1,
                    "handle_system_tick_interrupt": 2
                }
            },
            "called": [
                "FUN_080017b4",
                "FUN_0800157c"
            ],
            "calling": [],
            "code": "\nvoid update_system_tick_08005704(void)\n\n{\n  increment_system_tick();\n  handle_sys_tick_interrupt();\n  return;\n}\n\n",
            "current_name": "update_system_tick_08005704",
            "entrypoint": "0x08005704",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005704": "update_system_tick_08005704",
                "HAL_IncTick": "increment_system_tick",
                "HAL_SYSTICK_IRQHandler": "handle_sys_tick_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "FUN_080036f8": {
                    "modify_parameter_1": 1,
                    "process_array": 1,
                    "process_data": 7,
                    "process_input_param": 1,
                    "process_input_parameter": 1,
                    "process_integer_array": 1,
                    "process_param_1": 2,
                    "process_parameter": 4,
                    "process_parameters": 1,
                    "reverse_array": 1,
                    "update_param_value": 1,
                    "update_parameter": 1,
                    "update_parameter_1": 1,
                    "update_parameters": 1
                },
                "FUN_08005714": {
                    "handle_tim_interrupt": 24,
                    "handle_tim_irq": 2,
                    "handle_tim_irq_handler": 2,
                    "handle_timer_interrupt": 2,
                    "timer_interrupt_handler": 1
                },
                "param_1": {
                    "data": 2,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "input_array": 2,
                    "input_param": 2,
                    "input_parameter": 1,
                    "int_array": 3,
                    "integer_array": 1,
                    "parameters": 1,
                    "pointer_to_data": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_080036f8"
            ],
            "calling": [],
            "code": "\nvoid handle_tim_interrupt_08005714(void)\n\n{\n  HAL_TIM_IRQHandler(&DAT_20000b60);\n  return;\n}\n\n",
            "current_name": "handle_tim_interrupt_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "handle_tim_interrupt_08005714"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005728": {
            "additional_data": {
                "0xc": {
                    "error_code": 1
                },
                "0xffffffff": {
                    "error_value": 1
                },
                "DAT_20000a10": {
                    "default_memory": 1,
                    "global_memory_ptr": 1,
                    "memory_start": 1
                },
                "DAT_20000c18": {
                    "default_global_memory": 1,
                    "default_memory_end": 1,
                    "default_memory_start": 1
                },
                "FUN_08005728": {
                    "allocate_memory": 27,
                    "allocate_memory_block": 1,
                    "get_memory_block": 1,
                    "get_next_available_memory": 1,
                    "reserve_memory": 1
                },
                "__errno": {
                    "get_error_code": 1
                },
                "auStack_18": {
                    "buffer": 2,
                    "errno_size": 1,
                    "local_buffer": 3,
                    "min_alloc_addr": 1,
                    "minimum_allocation_size": 2,
                    "overflow_marker": 1,
                    "reserved_memory": 1,
                    "stack_allocation": 1,
                    "stack_buffer": 11,
                    "stack_memory": 2,
                    "temp_buffer": 2,
                    "temporary_buffer": 3,
                    "temporary_memory": 1
                },
                "local_14": {
                    "adjusted_size": 1,
                    "available_memory": 2,
                    "available_size": 1,
                    "bytes_remaining": 1,
                    "input_size": 1,
                    "local_size": 2,
                    "remaining_block_size": 1,
                    "remaining_size": 16,
                    "requested_size": 3,
                    "required_bytes": 1,
                    "required_size": 2
                },
                "local_c": {
                    "allocation_pointer": 1,
                    "allocation_start": 1,
                    "current_alloc_addr": 1,
                    "current_alloc_ptr": 1,
                    "current_allocation": 1,
                    "current_memory": 11,
                    "current_memory_position": 1,
                    "current_memory_ptr": 2,
                    "current_ptr": 2,
                    "data_ptr": 1,
                    "first_available_block": 1,
                    "initial_memory": 2,
                    "memory_chunk": 1,
                    "memory_start": 2,
                    "next_available_memory": 1,
                    "previous_memory_ptr": 1
                },
                "param_1": {
                    "block_size": 2,
                    "num_bytes": 1,
                    "size": 27,
                    "size_bytes": 1
                },
                "puVar1": {
                    "err_ptr": 2,
                    "errno_pointer": 4,
                    "errno_ptr": 11,
                    "error": 3,
                    "error_address": 1,
                    "error_code": 5,
                    "error_code_ptr": 1,
                    "error_indicator": 1,
                    "error_ptr": 1,
                    "p_errno": 1
                },
                "puVar2": {
                    "allocated_address": 1,
                    "allocated_memory": 19,
                    "allocated_memory_ptr": 1,
                    "allocated_ptr": 2,
                    "memory_block": 1,
                    "memory_ptr": 1,
                    "pointer": 1,
                    "result": 3,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_08005d14"
            ],
            "calling": [
                "FUN_08009744"
            ],
            "code": "\nundefined * allocate_memory_block_08005728(int size)\n\n{\n  undefined4 *errno_ptr;\n  undefined *allocated_memory;\n  undefined stack_buffer [4];\n  int remaining_size;\n  undefined *current_memory;\n  \n  if (DAT_20000a10 == (undefined *)0x0) {\n    DAT_20000a10 = &DAT_20000c18;\n  }\n  current_memory = DAT_20000a10;\n  if (stack_buffer < DAT_20000a10 + size) {\n    remaining_size = size;\n    errno_ptr = (undefined4 *)get_error_code();\n    *errno_ptr = 0xc;\n    allocated_memory = (undefined *)0xffffffff;\n  }\n  else {\n    allocated_memory = DAT_20000a10;\n    DAT_20000a10 = DAT_20000a10 + size;\n  }\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_memory_block_08005728",
            "entrypoint": "0x08005728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005728": "allocate_memory_block_08005728",
                "__errno": "get_error_code",
                "auStack_18": "stack_buffer",
                "local_14": "remaining_size",
                "local_c": "current_memory",
                "param_1": "size",
                "puVar1": "errno_ptr",
                "puVar2": "allocated_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005780": {
            "additional_data": {
                "": {
                    "": 3
                },
                "FUN_08005780": {
                    "configure_memory": 1,
                    "configure_peripheral": 1,
                    "init_registers": 1,
                    "initialize_control_registers": 1,
                    "initialize_device": 1,
                    "initialize_hardware": 1,
                    "initialize_memory": 4,
                    "initialize_peripheral": 3,
                    "initialize_peripheral_registers": 2,
                    "initialize_registers": 10,
                    "initialize_system": 5,
                    "set_configuration": 1
                },
                "PTR_08005780": {
                    "device_register_c": 1
                },
                "_": {
                    "": 1
                },
                "_DAT_40021000": {
                    "config_register1": 1,
                    "configuration_reg": 1,
                    "control_register": 2,
                    "control_register1": 3,
                    "device_register_a": 1,
                    "gpio_port_config_reg": 1,
                    "memory_config_register": 2,
                    "peripheral_control_register1": 1,
                    "peripheral_register1": 1,
                    "register1": 8,
                    "register_a": 1,
                    "register_value1": 1,
                    "status_register": 2,
                    "system_config": 1,
                    "system_config_register": 1,
                    "system_flags": 1
                },
                "_DAT_40021004": {
                    "config_register2": 1,
                    "configuration_register": 1,
                    "control_reg": 1,
                    "control_register": 1,
                    "control_register2": 3,
                    "device_config": 1,
                    "device_register_b": 1,
                    "gpio_function_reg": 1,
                    "memory_health_indicator": 1,
                    "memory_protection_register": 1,
                    "peripheral_control_register2": 1,
                    "peripheral_register2": 1,
                    "register2": 8,
                    "register_b": 1,
                    "register_value2": 1,
                    "status_register": 2,
                    "system_mask": 1,
                    "system_status_register": 1
                },
                "_DAT_40021008": {
                    "base_address": 1,
                    "clock_config_register": 1,
                    "communication_config": 1,
                    "control_register": 1,
                    "control_register_value": 1,
                    "data_reg": 1,
                    "data_register": 2,
                    "device_control_register": 1,
                    "gpio_output_pins": 1,
                    "gpio_pin_output_reg": 1,
                    "interrupt_control_register": 2,
                    "interrupt_register": 1,
                    "interrupt_vector": 1,
                    "memory_address": 1,
                    "memory_base_address": 1,
                    "memory_value1": 1,
                    "peripheral_address": 1,
                    "peripheral_register3": 1,
                    "register3": 7,
                    "register_c": 1,
                    "register_value3": 1
                },
                "_DAT_e000ed08": {
                    "control_register": 1,
                    "exception_handler_register": 1,
                    "exception_register": 1,
                    "interrupt_config": 1,
                    "interrupt_config_register": 1,
                    "interrupt_control": 1,
                    "interrupt_control_register": 2,
                    "interrupt_ctrl": 1,
                    "interrupt_enable_register": 1,
                    "interrupt_reg": 1,
                    "interrupt_register": 2,
                    "interrupt_register_value": 1,
                    "memory_value2": 1,
                    "peripheral_register4": 1,
                    "processor_control_register": 1,
                    "register4": 7,
                    "register_d": 1,
                    "register_value4": 1,
                    "system_control_reg": 1,
                    "system_control_register": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080057e8"
            ],
            "code": "\n\n\nvoid initialize_peripheral_registers_08005780(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_registers_08005780",
            "entrypoint": "0x08005780",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005780": "initialize_peripheral_registers_08005780"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057e8": {
            "additional_data": {
                "FUN_08005224": {
                    "call_main": 1,
                    "initialize_system": 1,
                    "perform_task3": 1
                },
                "FUN_08005780": {
                    "clear_memory": 1,
                    "copy_data": 1,
                    "perform_task2": 1
                },
                "FUN_080057e8": {
                    "copy_memory_and_initialize": 1,
                    "initialize_and_launch": 1,
                    "initialize_application": 1,
                    "initialize_data": 1,
                    "initialize_memory": 7,
                    "initialize_memory_and_call_main": 4,
                    "initialize_program": 3,
                    "initialize_system": 13
                },
                "FUN_08005d20": {
                    "clear_memory": 1,
                    "perform_task1": 1,
                    "reverse_bytes": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "function_pointer": 1,
                    "jmp_table": 1,
                    "jump_function": 1,
                    "jump_table": 23,
                    "jumptable": 3
                },
                "iVar1": {
                    "counter": 2,
                    "i": 2,
                    "index": 19,
                    "iterator": 2,
                    "loop_index": 1,
                    "offset": 3
                },
                "puVar2": {
                    "array_pointer": 2,
                    "data_pointer": 5,
                    "data_ptr": 3,
                    "pointer": 4,
                    "ptr": 15
                }
            },
            "called": [
                "FUN_08005d20",
                "FUN_08005780",
                "FUN_08005224"
            ],
            "calling": [],
            "code": "\nvoid initialize_system_080057e8(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_200009c8; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800a1a4);\n  }\n  for (ptr = &DAT_200009c8; ptr < &DAT_20000c14; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x800581a;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x0800581a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "initialize_system_080057e8",
            "entrypoint": "0x080057e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057e8": "initialize_system_080057e8",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "iVar1": "index",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005834": {
            "called": [
                "FUN_08005838"
            ],
            "calling": [
                "FUN_08004bd8",
                "FUN_08004d78"
            ],
            "code": "\nuint __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  \n  uVar4 = param_4 & 0x7fffffff;\n  if ((0x7ff00000 < (uVar4 | (-param_3 | param_3) >> 0x1f)) ||\n     (uVar5 = param_2 & 0x7fffffff, 0x7ff00000 < (uVar5 | (-param_1 | param_1) >> 0x1f))) {\n    uVar4 = __aeabi_dadd(param_3,param_4,param_1,param_2);\n    return uVar4;\n  }\n  if ((param_4 + 0xc0100000 | param_3) == 0) {\n    uVar4 = atan();\n    return uVar4;\n  }\n  uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n  if ((uVar5 | param_1) == 0) {\n    if (uVar3 == 2) {\n      return 0x54442d18;\n    }\n    if (uVar3 != 3) {\n      return param_1;\n    }\n  }\n  else if ((uVar4 | param_3) != 0) {\n    if (uVar4 == 0x7ff00000) {\n      if (uVar5 == 0x7ff00000) {\n        if (uVar3 == 2) {\n          return 0x7f3321d2;\n        }\n        if (uVar3 == 3) {\n          return 0x7f3321d2;\n        }\n        if (uVar3 == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (uVar3 == 2) {\n        return 0x54442d18;\n      }\n      if (uVar3 != 3) {\n        if (uVar3 != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (uVar5 != 0x7ff00000) {\n      iVar1 = (int)(uVar5 - uVar4) >> 0x14;\n      if (iVar1 < 0x3d) {\n        if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c))) {\n          uVar6 = 0;\n        }\n        else {\n          __divdf3(param_1,param_2,param_3,param_4,param_4);\n          fabs();\n          uVar6 = atan();\n        }\n      }\n      else {\n        uVar6 = 0x3ff921fb54442d18;\n      }\n      uVar2 = (undefined4)((ulonglong)uVar6 >> 0x20);\n      uVar4 = (uint)uVar6;\n      if (uVar3 == 1) {\n        return uVar4;\n      }\n      if (uVar3 == 2) {\n        uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n        uVar4 = __subdf3(0x54442d18,0x400921fb,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n        return uVar4;\n      }\n      if (uVar3 != 0) {\n        uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n        uVar4 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),0x54442d18,0x400921fb);\n        return uVar4;\n      }\n      return uVar4;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "FUN_08005834",
            "entrypoint": "0x08005834",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_08005838": {
            "additional_data": {
                "ATAN": {
                    "atan": 1
                },
                "DIFFERENCE": {
                    "__subdf3": 1
                },
                "FABS": {
                    "absolute_value": 1
                },
                "FAB_SCD": {
                    "fabs": 1
                },
                "FUN_08005838": {
                    "calculate": 3,
                    "calculate_arc_tan": 1,
                    "calculate_arc_tangent": 2,
                    "calculate_arctangent": 4,
                    "calculate_atan2": 1,
                    "calculate_function": 1,
                    "calculate_result": 15,
                    "compute_result": 1,
                    "perform_calculation": 1
                },
                "QUOTIENT": {
                    "__divdf3": 1
                },
                "SCARRY4": {
                    "signed_carry_4": 1,
                    "subtract_with_carry": 1
                },
                "__aeabi_dadd": {
                    "add_double": 2
                },
                "__divdf3": {
                    "divide_double": 2
                },
                "__subdf3": {
                    "subtract_double": 2
                },
                "atan": {
                    "arctangent": 1,
                    "calculate_atan": 1
                },
                "fabs": {
                    "absolute_value": 1
                },
                "iVar1": {
                    "angle_diff_shifted": 1,
                    "diff": 1,
                    "difference": 23,
                    "temp": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_variable": 1
                },
                "param_1": {
                    "a": 1,
                    "angle1": 1,
                    "input1": 14,
                    "input_1": 6,
                    "input_param1": 1,
                    "input_value_1": 1,
                    "num1": 2,
                    "value1": 1,
                    "value_1": 1,
                    "x": 1,
                    "x1": 2
                },
                "param_2": {
                    "angle2": 1,
                    "b": 1,
                    "input2": 14,
                    "input_2": 6,
                    "input_param2": 1,
                    "input_value_2": 1,
                    "num2": 2,
                    "value2": 1,
                    "value_2": 1,
                    "x2": 2,
                    "y": 1
                },
                "param_3": {
                    "c": 1,
                    "input3": 14,
                    "input_3": 6,
                    "input_param3": 1,
                    "input_value_3": 1,
                    "num3": 2,
                    "value3": 1,
                    "value_3": 1,
                    "x1": 1,
                    "y1": 2,
                    "z": 1
                },
                "param_4": {
                    "d": 1,
                    "input4": 13,
                    "input4_masked": 1,
                    "input_4": 6,
                    "input_param4": 1,
                    "input_value_4": 1,
                    "num4": 2,
                    "value4": 1,
                    "value_4": 1,
                    "w": 1,
                    "x2": 1,
                    "y2": 2
                },
                "uVar2": {
                    "quotient_low": 1,
                    "result": 2,
                    "result1": 1,
                    "result_1": 1,
                    "result_half": 1,
                    "result_high": 6,
                    "result_upper": 2,
                    "result_upper_bits": 2,
                    "result_var1": 1,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_var2": 2,
                    "upper32_bits": 1,
                    "upper_bits": 1,
                    "upper_part": 1,
                    "upper_result": 4
                },
                "uVar3": {
                    "angle2_sign": 1,
                    "bit_combo": 1,
                    "condition": 2,
                    "filter": 1,
                    "flag": 4,
                    "flags": 3,
                    "mask": 1,
                    "modified_variable": 1,
                    "modifier": 1,
                    "msb_param_2_and_param_4": 1,
                    "quadrant": 1,
                    "shift_bits": 1,
                    "shifted_bits": 3,
                    "shifted_input": 1,
                    "shifted_param": 1,
                    "shifted_var": 1,
                    "sign_bits_xy": 1,
                    "sign_flags": 1,
                    "temp_2": 1,
                    "temp_var": 1,
                    "temp_var3": 2,
                    "u_var3": 1
                },
                "uVar4": {
                    "adjusted_param": 1,
                    "adjusted_param4": 1,
                    "angle": 1,
                    "masked_input_4": 1,
                    "masked_param4": 1,
                    "masked_value_4": 1,
                    "masked_var4": 1,
                    "modified_input4": 1,
                    "normalized_param4": 1,
                    "param4_masked": 3,
                    "param_4_abs": 1,
                    "param_4_filtered": 1,
                    "param_4_masked": 1,
                    "param_4_modified": 1,
                    "positive_input4": 1,
                    "positive_num4": 1,
                    "result": 3,
                    "result_low": 3,
                    "result_lower": 2,
                    "temp_3": 1,
                    "temp_var4": 2,
                    "updated_param4": 1,
                    "x2_abs": 1
                },
                "uVar5": {
                    "adjusted_input_2": 1,
                    "adjusted_param2": 1,
                    "angle2_abs": 1,
                    "masked_input_2": 1,
                    "masked_param2": 1,
                    "masked_value_2": 1,
                    "masked_var5": 1,
                    "modified_input2": 2,
                    "normalized_param2": 1,
                    "param2_masked": 4,
                    "param_2_abs": 1,
                    "param_2_filtered": 1,
                    "param_2_masked": 1,
                    "param_2_modified": 1,
                    "positive_input2": 2,
                    "positive_num2": 1,
                    "sign_bits_zw": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_4": 1,
                    "temp_var5": 2,
                    "trimmed_input2": 1,
                    "u_var5": 1,
                    "updated_param2": 1,
                    "x1_positive": 1
                },
                "uVar6": {
                    "atan_result": 1,
                    "intermediate_result": 1,
                    "result": 17,
                    "result2": 1,
                    "result_2": 1,
                    "result_temp": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_result": 5,
                    "temp_var6": 2
                },
                "uVar7": {
                    "quotient_high": 1,
                    "temp2": 1
                },
                "uVar8": {
                    "temp3": 1
                }
            },
            "called": [
                "FUN_0800015c",
                "FUN_080059f0",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_08000158"
            ],
            "calling": [
                "FUN_08005834"
            ],
            "code": "\nuint calculate_result_08005838(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint flag;\n  uint result_low;\n  uint param2_masked;\n  undefined8 result;\n  \n  result_low = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result_low | (-input3 | input3) >> 0x1f)) ||\n     (param2_masked = input2 & 0x7fffffff, 0x7ff00000 < (param2_masked | (-input1 | input1) >> 0x1f))) {\n    result_low = add_double(input3,input4,input1,input2);\n    return result_low;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result_low = calculate_atan();\n    return result_low;\n  }\n  flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((param2_masked | input1) == 0) {\n    if (flag == 2) {\n      return 0x54442d18;\n    }\n    if (flag != 3) {\n      return input1;\n    }\n  }\n  else if ((result_low | input3) != 0) {\n    if (result_low == 0x7ff00000) {\n      if (param2_masked == 0x7ff00000) {\n        if (flag == 2) {\n          return 0x7f3321d2;\n        }\n        if (flag == 3) {\n          return 0x7f3321d2;\n        }\n        if (flag == 1) {\n          return 0x54442d18;\n        }\n        return 0x54442d18;\n      }\n      if (flag == 2) {\n        return 0x54442d18;\n      }\n      if (flag != 3) {\n        if (flag != 1) {\n          return 0;\n        }\n        return 0;\n      }\n    }\n    else if (param2_masked != 0x7ff00000) {\n      difference = (int)(param2_masked - result_low) >> 0x14;\n      if (difference < 0x3d) {\n        if (((int)input4 < 0) && (difference + 0x3c < 0 != subtract_with_carry(difference,0x3c))) {\n          result = 0;\n        }\n        else {\n          divide_double(input1,input2,input3,input4,input4);\n          absolute_value();\n          result = calculate_atan();\n        }\n      }\n      else {\n        result = 0x3ff921fb54442d18;\n      }\n      result_high = (undefined4)((ulonglong)result >> 0x20);\n      result_low = (uint)result;\n      if (flag == 1) {\n        return result_low;\n      }\n      if (flag == 2) {\n        result = subtract_double(result_low,result_high,0x33145c07,0x3ca1a626);\n        result_low = subtract_double(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n        return result_low;\n      }\n      if (flag != 0) {\n        result = subtract_double(result_low,result_high,0x33145c07,0x3ca1a626);\n        result_low = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n        return result_low;\n      }\n      return result_low;\n    }\n  }\n  return 0x54442d18;\n}\n\n",
            "current_name": "calculate_result_08005838",
            "entrypoint": "0x08005838",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005838": "calculate_result_08005838",
                "SCARRY4": "subtract_with_carry",
                "__aeabi_dadd": "add_double",
                "__divdf3": "divide_double",
                "__subdf3": "subtract_double",
                "atan": "calculate_atan",
                "fabs": "absolute_value",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result_high",
                "uVar3": "flag",
                "uVar4": "result_low",
                "uVar5": "param2_masked",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f0": {
            "additional_data": {
                "0x3e200000": {
                    "constant_c5": 1
                },
                "0x3fdc0000": {
                    "constant_c4": 1
                },
                "0x3fe60000": {
                    "constant_c7": 1
                },
                "0x3ff00000": {
                    "constant_c3": 1
                },
                "0x3ff30000": {
                    "constant_c6": 1
                },
                "0x3ff80000": {
                    "constant_c8": 1
                },
                "0x3ff921fb": {
                    "constant_c11": 1
                },
                "0x40038000": {
                    "constant_c9": 1
                },
                "0x54442d18": {
                    "constant_c12": 1
                },
                "0x7e37e43c": {
                    "constant_c2": 1
                },
                "0x8800759c": {
                    "constant_c1": 1
                },
                "0xbff00000": {
                    "constant_c10": 1
                },
                "FUNC_08005d0c": {
                    "helper_function": 1
                },
                "FUN_08000158": {
                    "helper_function2": 1
                },
                "FUN_0800015c": {
                    "helper_function3": 1
                },
                "FUN_080004c8": {
                    "helper_function4": 1
                },
                "FUN_0800071c": {
                    "helper_function5": 1
                },
                "FUN_080009e8": {
                    "helper_function6": 1
                },
                "FUN_080059f0": {
                    "calculate": 1,
                    "calculate_cube_root": 1,
                    "calculate_expression": 1,
                    "calculate_result": 11,
                    "calculate_something": 1,
                    "calculate_special_value": 1,
                    "calculate_sqrt": 2,
                    "calculate_square": 1,
                    "calculate_square_root": 6,
                    "calculate_value": 5,
                    "perform_calculations": 1
                },
                "__aeabi_dadd": {
                    "add_double": 1
                },
                "__aeabi_dcmpgt": {
                    "compare_double": 1
                },
                "__divdf3": {
                    "divide_double": 1
                },
                "__muldf3": {
                    "multiply_double": 1
                },
                "__subdf3": {
                    "subtract_double": 1
                },
                "fabs": {
                    "absolute_double": 1
                },
                "iVar8": {
                    "branch_condition": 1,
                    "branch_var": 1,
                    "category": 1,
                    "choice": 1,
                    "comparison": 1,
                    "comparison_result": 4,
                    "condition": 1,
                    "expression_type": 1,
                    "flag": 1,
                    "index": 1,
                    "mode": 1,
                    "operation_type": 1,
                    "result": 4,
                    "result8": 1,
                    "result_type": 3,
                    "temp2": 2,
                    "temp8": 2,
                    "temp_2": 2,
                    "temp_value2": 1,
                    "var2": 1
                },
                "param_1": {
                    "input1": 12,
                    "input_1": 3,
                    "input_num1": 1,
                    "input_param1": 3,
                    "input_value": 3,
                    "input_value1": 3,
                    "input_value_1": 1,
                    "input_x": 2,
                    "num1": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "flags": 1,
                    "input2": 12,
                    "input_2": 3,
                    "input_flag": 1,
                    "input_num2": 1,
                    "input_param2": 3,
                    "input_parameter": 1,
                    "input_value2": 3,
                    "input_value_2": 1,
                    "input_y": 2,
                    "num2": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "constant1": 3,
                    "constant_1": 2,
                    "constant_a": 1,
                    "input3": 8,
                    "input_3": 2,
                    "input_constant1": 1,
                    "input_num3": 1,
                    "input_param3": 3,
                    "input_value3": 2,
                    "input_value_3": 1,
                    "param3": 1,
                    "param_value1": 1,
                    "parameter3": 1,
                    "unused_param1": 1,
                    "unused_parameter": 1,
                    "value3": 1,
                    "value_3": 1
                },
                "param_4": {
                    "constant2": 3,
                    "constant_2": 2,
                    "constant_b": 1,
                    "input4": 8,
                    "input_4": 2,
                    "input_constant2": 1,
                    "input_num4": 1,
                    "input_param4": 3,
                    "input_value4": 2,
                    "input_value_4": 1,
                    "param4": 1,
                    "param_value2": 1,
                    "parameter4": 1,
                    "unused_param2": 1,
                    "unused_parameter": 1,
                    "value4": 1,
                    "value_4": 1
                },
                "uVar1": {
                    "first_temp": 1,
                    "integer_part": 1,
                    "output1": 1,
                    "result1": 12,
                    "result_1": 3,
                    "temp1": 10,
                    "temp_abs2": 1,
                    "temp_var_1": 1,
                    "temp_variable3": 1
                },
                "uVar10": {
                    "combined_result": 1,
                    "concatenated_inputs": 1,
                    "final_result": 10,
                    "result": 1,
                    "result10": 1,
                    "result2": 3,
                    "result_8": 1,
                    "result_var2": 1,
                    "result_y": 1,
                    "temp10": 1,
                    "temp2": 2,
                    "temp4": 1,
                    "temp_4": 1,
                    "temp_result2": 3,
                    "temp_sub5": 1,
                    "temp_variable2": 1,
                    "tmp_result2": 1
                },
                "uVar11": {
                    "intermediate_result1": 1
                },
                "uVar12": {
                    "intermediate_result2": 1
                },
                "uVar13": {
                    "intermediate_result3": 1
                },
                "uVar14": {
                    "intermediate_result4": 1
                },
                "uVar15": {
                    "intermediate_result5": 1
                },
                "uVar16": {
                    "intermediate_result6": 1
                },
                "uVar17": {
                    "intermediate_result7": 1
                },
                "uVar18": {
                    "intermediate_result8": 1
                },
                "uVar19": {
                    "intermediate_result9": 1
                },
                "uVar2": {
                    "fractional_part": 1,
                    "output2": 1,
                    "result2": 11,
                    "result3": 1,
                    "result_2": 3,
                    "second_temp": 1,
                    "temp2": 11,
                    "temp_var_2": 1,
                    "temp_variable4": 1
                },
                "uVar20": {
                    "intermediate_result10": 1
                },
                "uVar21": {
                    "intermediate_result11": 1
                },
                "uVar22": {
                    "intermediate_result12": 1
                },
                "uVar23": {
                    "intermediate_result13": 1
                },
                "uVar24": {
                    "intermediate_result14": 1
                },
                "uVar25": {
                    "intermediate_result15": 1
                },
                "uVar26": {
                    "intermediate_result16": 1
                },
                "uVar27": {
                    "intermediate_result17": 1
                },
                "uVar28": {
                    "intermediate_result18": 1
                },
                "uVar29": {
                    "intermediate_result19": 1
                },
                "uVar3": {
                    "dividend": 1,
                    "output3": 1,
                    "result3": 12,
                    "result4": 1,
                    "result_3": 3,
                    "temp3": 11,
                    "temp_var_3": 1,
                    "temp_variable5": 1
                },
                "uVar30": {
                    "intermediate_result20": 1
                },
                "uVar31": {
                    "intermediate_result21": 1
                },
                "uVar4": {
                    "divisor": 1,
                    "output4": 1,
                    "result4": 12,
                    "result5": 1,
                    "result_4": 3,
                    "temp4": 10,
                    "temp_abs1": 1,
                    "temp_var_4": 1,
                    "temp_variable6": 1
                },
                "uVar5": {
                    "intermediate_result_1": 1,
                    "output5": 1,
                    "result1": 1,
                    "result5": 11,
                    "result6": 1,
                    "result_5": 3,
                    "temp5": 11,
                    "temp_var_5": 1,
                    "temp_variable7": 1
                },
                "uVar6": {
                    "intermediate_result_2": 1,
                    "output6": 1,
                    "result2": 1,
                    "result6": 11,
                    "result7": 1,
                    "result_6": 3,
                    "temp6": 11,
                    "temp_var_6": 1,
                    "temp_variable8": 1
                },
                "uVar7": {
                    "abs_input2": 3,
                    "abs_input_2": 1,
                    "abs_input_y": 2,
                    "abs_value": 1,
                    "absolute_input2": 1,
                    "absolute_value": 1,
                    "input2_2": 1,
                    "input2_unsigned": 1,
                    "modified_param2": 1,
                    "positive_flags": 1,
                    "positive_input_value": 1,
                    "positive_param2": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp7": 2,
                    "temp_1": 2,
                    "temp_flag": 1,
                    "temp_value1": 1,
                    "temp_var": 3,
                    "unsigned_input": 1,
                    "unsigned_input2": 1,
                    "unsigned_value1": 1,
                    "var1": 1
                },
                "uVar9": {
                    "calculation_result": 1,
                    "final_result": 1,
                    "intermediate_result": 1,
                    "result": 1,
                    "result1": 2,
                    "result9": 1,
                    "result_7": 1,
                    "result_temp": 1,
                    "result_var1": 1,
                    "temp1": 2,
                    "temp3": 1,
                    "temp9": 1,
                    "temp_3": 1,
                    "temp_result": 8,
                    "temp_result1": 3,
                    "temp_sub4": 1,
                    "temp_value3": 1,
                    "temp_var_2": 1,
                    "temp_variable1": 1,
                    "tmp_result1": 1
                }
            },
            "called": [
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_08005d0c",
                "FUN_08000158",
                "FUN_080009e8"
            ],
            "calling": [
                "FUN_08005838"
            ],
            "code": "\nundefined8 calculate_result_080059f0(int input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  uint abs_input2;\n  int result;\n  undefined8 temp_result;\n  undefined8 final_result;\n  \n  final_result = CONCAT44(input2,input1);\n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x44100000) {\n    if (abs_input2 < 0x3fdc0000) {\n      if (abs_input2 < 0x3e200000) {\n        temp_result = add_double(input1,input2,0x8800759c,0x7e37e43c,input4);\n        result = compare_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return CONCAT44(input2,input1);\n        }\n      }\n      result = -1;\n    }\n    else {\n      final_result = absolute_double();\n      result4 = (undefined4)((ulonglong)final_result >> 0x20);\n      result1 = (undefined4)final_result;\n      if (abs_input2 < 0x3ff30000) {\n        if (abs_input2 < 0x3fe60000) {\n          final_result = add_double(result1,result4,result1,result4);\n          final_result = subtract_double((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          temp_result = add_double(result1,result4,0,0x40000000);\n          final_result = divide_double((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                            (int)((ulonglong)temp_result >> 0x20));\n          result = 0;\n        }\n        else {\n          final_result = subtract_double(result1,result4,0,0x3ff00000);\n          temp_result = add_double(result1,result4,0,0x3ff00000);\n          final_result = divide_double((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                            (int)((ulonglong)temp_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (abs_input2 < 0x40038000) {\n        final_result = subtract_double(result1,result4,0,0x3ff80000);\n        temp_result = multiply_double(result1,result4,0,0x3ff80000);\n        temp_result = add_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        final_result = divide_double((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n        result = 2;\n      }\n      else {\n        final_result = divide_double(0,0xbff00000,result1,result4);\n        result = 3;\n      }\n    }\n    result6 = (undefined4)((ulonglong)final_result >> 0x20);\n    result5 = (undefined4)final_result;\n    final_result = multiply_double(result5,result6,result5,result6);\n    result2 = (undefined4)((ulonglong)final_result >> 0x20);\n    result1 = (undefined4)final_result;\n    final_result = multiply_double(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)final_result >> 0x20);\n    result4 = (undefined4)final_result;\n    final_result = multiply_double(result4,result3,0xe322da11,0x3f90ad3a);\n    final_result = add_double((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = multiply_double((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = add_double((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = multiply_double((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = add_double((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = multiply_double((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = add_double((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = multiply_double((int)final_result,(int)((ulonglong)final_result >> 0x20),result4,result3);\n    final_result = add_double((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = multiply_double((int)final_result,(int)((ulonglong)final_result >> 0x20),result1,result2);\n    temp_result = multiply_double(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    temp_result = subtract_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = multiply_double((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result4,result3);\n    final_result = add_double((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                          (int)((ulonglong)temp_result >> 0x20));\n    final_result = multiply_double((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    result1 = (undefined4)((ulonglong)final_result >> 0x20);\n    if (result == -1) {\n      final_result = subtract_double(result5,result6,(int)final_result,result1);\n      return final_result;\n    }\n    result = result * 8;\n    final_result = subtract_double((int)final_result,result1,*(undefined4 *)(&UNK_08009ee8 + result),\n                      *(undefined4 *)(&UNK_08009eec + result));\n    final_result = subtract_double((int)final_result,(int)((ulonglong)final_result >> 0x20),result5,result6);\n    final_result = subtract_double(*(undefined4 *)(&UNK_08009ec8 + result),*(undefined4 *)(&UNK_08009ecc + result),\n                      (int)final_result,(int)((ulonglong)final_result >> 0x20));\n    if ((int)input2 < 0) {\n      return CONCAT44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n    }\n  }\n  else {\n    if ((abs_input2 < 0x7ff00001) && ((abs_input2 != 0x7ff00000 || (input1 == 0)))) {\n      result1 = 0xbff921fb;\n      if (0 < (int)input2) {\n        result1 = 0x3ff921fb;\n      }\n      return CONCAT44(result1,0x54442d18);\n    }\n    final_result = add_double(input1,input2,input1,input2,input4);\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_result_080059f0",
            "entrypoint": "0x080059f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059f0": "calculate_result_080059f0",
                "__aeabi_dadd": "add_double",
                "__aeabi_dcmpgt": "compare_double",
                "__divdf3": "divide_double",
                "__muldf3": "multiply_double",
                "__subdf3": "subtract_double",
                "fabs": "absolute_double",
                "iVar8": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar10": "final_result",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "abs_input2",
                "uVar9": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d0c": {
            "called": [],
            "calling": [
                "FUN_080059f0",
                "FUN_08005838"
            ],
            "code": "\nvoid FUNC_08005d0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005d0c",
            "entrypoint": "0x08005d0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005d0c": "FUNC_08005d0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005d14": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_2000001c": {
                    "dat_value": 1,
                    "data": 6,
                    "data_address": 1,
                    "data_constant": 1,
                    "data_offset": 1,
                    "data_value": 4,
                    "global_constant": 1,
                    "global_value": 1,
                    "global_variable": 2
                },
                "FUN_08005d14": {
                    "get_dat_value": 4,
                    "get_data": 6,
                    "get_data_address": 2,
                    "get_data_constant": 1,
                    "get_data_from_address": 1,
                    "get_data_offset": 1,
                    "get_data_pointer": 1,
                    "get_data_value": 10,
                    "get_global_constant": 1,
                    "get_global_data_value": 1,
                    "get_global_value": 1,
                    "get_global_variable": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08005728"
            ],
            "code": "\nundefined4 get_global_data_value_08005d14(void)\n\n{\n  return DAT_2000001c;\n}\n\n",
            "current_name": "get_global_data_value_08005d14",
            "entrypoint": "0x08005d14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d14": "get_global_data_value_08005d14"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d20": {
            "additional_data": {
                "FUNC_08000134": {
                    "perform_action_b": 1,
                    "process_data": 1
                },
                "FUNC_080078a0": {
                    "do_something": 1,
                    "function_a": 1,
                    "function_one": 1,
                    "perform_action_a": 1,
                    "perform_task_1": 1,
                    "print_data": 1,
                    "subfunction1": 1,
                    "subfunction_1": 1
                },
                "FUNC_08009e68": {
                    "function_c": 1,
                    "function_three": 1,
                    "perform_action_c": 1,
                    "perform_task_3": 1,
                    "reverse_data": 1,
                    "subfunction3": 1,
                    "subfunction_3": 2
                },
                "FUN_08000134": {
                    "execute_function": 1,
                    "function_b": 1,
                    "function_two": 1,
                    "perform_task_2": 1,
                    "subfunction2": 1,
                    "subfunction_2": 2
                },
                "FUN_08005d20": {
                    "execute_all_functions": 1,
                    "execute_function_sequence": 1,
                    "execute_function_set": 1,
                    "execute_functions": 1,
                    "execute_init_function": 1,
                    "execute_init_functions": 2,
                    "execute_initialization": 2,
                    "execute_initialize_and_call_functions": 1,
                    "initialize": 1,
                    "initialize_and_call_functions": 6,
                    "initialize_and_call_subfunctions": 3,
                    "initialize_and_execute": 1,
                    "initialize_and_execute_functions": 1,
                    "initialize_and_execute_sub_functions": 2,
                    "initialize_and_execute_subfunctions": 5,
                    "initialize_and_run_subfunctions": 1,
                    "run_initialization": 1
                },
                "FUN_080078a0": {
                    "subfunction_1": 1
                },
                "_init": {
                    "initialize": 1
                },
                "iVar1": {
                    "counter": 7,
                    "iteration_count": 18,
                    "iteration_counter": 3,
                    "loop_count": 1
                },
                "param_1": {
                    "parameter1": 1
                },
                "param_2": {
                    "parameter2": 1
                },
                "ppcVar2": {
                    "function_array": 3,
                    "function_list": 2,
                    "function_pointer": 5,
                    "function_pointer_array": 6,
                    "function_pointers": 13
                }
            },
            "called": [
                "FUN_080078a0",
                "FUN_08000134",
                "FUN_08009e68"
            ],
            "calling": [
                "FUN_080057e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005d2c) */\n/* WARNING: Removing unreachable block (ram,0x08005d2e) */\n\nvoid execute_initialize_and_call_functions_08005d20(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  initialize();\n  iteration_count = 0;\n  function_pointers = (code **)&DAT_0800a198;\n  do {\n    iteration_count = iteration_count + 1;\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "current_name": "execute_initialize_and_call_functions_08005d20",
            "entrypoint": "0x08005d20",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d20": "execute_initialize_and_call_functions_08005d20",
                "_init": "initialize",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005d68": {
            "additional_data": {
                "FUN_08005d68": {
                    "copy_data": 1,
                    "fill_buffer": 1,
                    "fill_buffer_with_byte": 3,
                    "fill_memory": 10,
                    "fill_memory_with_byte": 2,
                    "fill_with_byte": 1,
                    "initialize_memory": 3,
                    "memset": 6,
                    "memset_uint8": 1,
                    "memset_with_value": 1,
                    "write_pattern_to_memory": 1,
                    "write_repeated_bytes": 1
                },
                "LAB_08005de4": {
                    "finish_filling_buffer": 1
                },
                "bVar5": {
                    "is_count_zero": 3,
                    "is_empty": 1,
                    "is_end_aligned": 2,
                    "is_equal_zero": 1,
                    "is_finished": 2,
                    "is_last": 1,
                    "is_length_zero": 2,
                    "is_remaining_zero": 1,
                    "is_size_zero": 4,
                    "is_zero": 10,
                    "is_zero_count": 1,
                    "is_zero_size": 2
                },
                "param_1": {
                    "buffer": 9,
                    "dest": 10,
                    "dest_ptr": 1,
                    "destination": 8,
                    "dst": 1,
                    "memory": 1,
                    "target_array": 1
                },
                "param_2": {
                    "byte": 4,
                    "fill_byte": 1,
                    "pattern": 1,
                    "value": 25
                },
                "param_3": {
                    "count": 7,
                    "length": 5,
                    "size": 19
                },
                "puVar1": {
                    "buffer_ptr": 1,
                    "current": 1,
                    "current_address": 1,
                    "current_ptr": 2,
                    "dest_ptr": 16,
                    "destination": 1,
                    "dst": 1,
                    "dst_ptr": 1,
                    "p_dst": 1,
                    "ptr": 3,
                    "source": 1,
                    "temp_dest": 1
                },
                "puVar2": {
                    "current_ptr": 1,
                    "destination": 1,
                    "dst": 1,
                    "dst_ptr2": 1,
                    "loop_ptr": 1,
                    "new_buffer_ptr": 1,
                    "next": 1,
                    "next_address": 1,
                    "next_dest_ptr": 7,
                    "next_destination": 1,
                    "next_ptr": 6,
                    "p_next_dst": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "temp_ptr": 5
                },
                "uVar3": {
                    "loop_count": 1,
                    "remaining": 2,
                    "remaining_count": 5,
                    "remaining_length": 5,
                    "remaining_size": 13,
                    "size_counter": 1,
                    "temp_count": 2,
                    "temp_size": 1
                },
                "uVar4": {
                    "combined_value": 1,
                    "concatenated_value": 1,
                    "fill_byte": 1,
                    "fill_pattern": 1,
                    "fill_value": 4,
                    "four_byte_value": 2,
                    "masked_value": 1,
                    "pattern": 2,
                    "pattern32": 1,
                    "quad_value": 2,
                    "repeated_byte": 1,
                    "value32": 4,
                    "value_32": 1,
                    "value_4bytes": 1,
                    "value_concat": 2,
                    "value_pattern": 1,
                    "value_replica": 1,
                    "value_u_var4": 1,
                    "word": 1,
                    "word_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009980",
                "FUN_08004f60"
            ],
            "code": "\nvoid fill_memory_with_byte_08005d68(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  uint remaining_size;\n  undefined4 value32;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    value32 = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = value32;\n        dest_ptr[-3] = value32;\n        dest_ptr[-2] = value32;\n        dest_ptr[-1] = value32;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x20));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto finish_filling_buffer;\n    }\n    do {\n      size = size - 4;\n      *dest = value32;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nfinish_filling_buffer:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while ((undefined4 *)(size + (int)dest) != next_dest_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_byte_08005d68",
            "entrypoint": "0x08005d68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005d68": "fill_memory_with_byte_08005d68",
                "LAB_08005de4": "finish_filling_buffer",
                "bVar5": "is_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "remaining_size",
                "uVar4": "value32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005dfc": {
            "additional_data": {
                "FUN_08005dfc": {
                    "format_and_store_string": 1,
                    "print_and_clear_buffer": 1,
                    "print_and_clear_string": 1,
                    "print_error_message": 1,
                    "print_formatted_data": 3,
                    "print_formatted_message": 2,
                    "print_formatted_output": 4,
                    "print_formatted_string": 4,
                    "print_formatted_text": 2,
                    "print_function": 1,
                    "print_message": 8,
                    "print_string_and_variables": 1,
                    "print_svfprintf": 1,
                    "print_svfptr": 1
                },
                "_svfprintf_r": {
                    "formatted_print": 1
                },
                "local_4": {
                    "format_ptr": 1
                },
                "local_6c": {
                    "local_var3": 1,
                    "local_var_2": 1,
                    "max_arg": 1,
                    "max_arg2": 1,
                    "max_buffer_length": 2,
                    "max_buffer_size": 2,
                    "max_int": 1,
                    "max_length": 1,
                    "max_length2": 1,
                    "max_length_copy": 2,
                    "max_limit": 1,
                    "max_position": 1,
                    "max_printed_length": 1,
                    "max_size": 1,
                    "max_size_copy": 1,
                    "max_string_length": 3,
                    "max_value": 1,
                    "max_width": 1,
                    "min_arg_length": 1,
                    "min_length": 1,
                    "min_string_length": 1,
                    "min_value": 1,
                    "minimum_value": 1
                },
                "local_70": {
                    "buffer_copy": 1,
                    "current_arg": 2,
                    "current_argument": 1,
                    "current_buffer": 2,
                    "current_buffer_position": 1,
                    "current_char": 4,
                    "current_output_string": 2,
                    "current_pos": 1,
                    "current_position": 4,
                    "current_ptr": 1,
                    "current_string_buffer": 1,
                    "local_ptr1": 1,
                    "local_var3": 1,
                    "message_pointer": 1,
                    "message_ptr": 1,
                    "message_ptr_copy": 1,
                    "pointer": 1,
                    "string_pointer": 2
                },
                "local_78": {
                    "buffer_length": 2,
                    "length_ptr": 1,
                    "local_buffer_size": 1,
                    "local_limit": 1,
                    "local_var1": 4,
                    "local_var_1": 1,
                    "max_arg1": 1,
                    "max_arg_length": 1,
                    "max_chars": 1,
                    "max_length": 5,
                    "max_length1": 1,
                    "max_size": 1,
                    "max_string_length": 3,
                    "max_value": 1,
                    "max_width": 1,
                    "min_width": 1,
                    "temp_value1": 1,
                    "variable_3": 1
                },
                "local_8": {
                    "args_ptr": 1
                },
                "local_80": {
                    "args_array": 1,
                    "buffer": 8,
                    "buffer_array": 3,
                    "buffer_ptr": 1,
                    "format_args": 1,
                    "format_arguments": 1,
                    "formatted_message": 1,
                    "local_array": 2,
                    "local_buffers": 3,
                    "local_pointers": 1,
                    "message_ptr": 1,
                    "output_string_array": 1,
                    "print_args": 1,
                    "string_buffer": 2,
                    "temp_buffer": 1
                },
                "param_1": {
                    "buffer": 3,
                    "data": 1,
                    "error_message": 1,
                    "input_string": 1,
                    "message": 10,
                    "message_buffer": 1,
                    "output_buffer": 3,
                    "output_string": 2,
                    "string": 2,
                    "string_buffer": 3,
                    "string_ptr": 1,
                    "string_to_print": 2
                },
                "param_2": {
                    "buffer_size": 2,
                    "format": 3,
                    "format_address": 1,
                    "format_length": 1,
                    "format_specifier": 2,
                    "format_string": 9,
                    "length": 5,
                    "limit": 1,
                    "message_length": 2,
                    "output_buffer_size": 1,
                    "size": 2,
                    "string_length": 1
                },
                "param_3": {
                    "arg1": 15,
                    "arg_1": 1,
                    "format": 5,
                    "format_string": 2,
                    "param3": 3,
                    "param_3": 2,
                    "value_1": 1,
                    "variable_1": 1
                },
                "param_4": {
                    "arg2": 15,
                    "arg_2": 1,
                    "args": 2,
                    "arguments": 5,
                    "param4": 3,
                    "param_4": 2,
                    "value_2": 1,
                    "variable_2": 1
                },
                "uStack_4": {
                    "arg2_copy": 3,
                    "arg4": 6,
                    "argument_count": 1,
                    "argument_pointer": 1,
                    "arguments_copy": 1,
                    "param4_copy": 2,
                    "param_4_copy": 1,
                    "pointer_to_variable_2": 1,
                    "ptr_arg2": 1,
                    "ptr_value_2": 1,
                    "stack_variable_3": 1,
                    "unused_variable": 1
                },
                "uStack_74": {
                    "constant": 2,
                    "constant_value": 3,
                    "constant_value1": 1,
                    "custom_value": 1,
                    "fixed_value": 1,
                    "local_var2": 4,
                    "magic_number": 1,
                    "stack_variable": 1,
                    "stack_variable_1": 1,
                    "temp_value2": 1,
                    "unknown_value": 1,
                    "value": 1,
                    "variable_4": 1
                },
                "uStack_8": {
                    "arg1_copy": 3,
                    "arg3": 5,
                    "arg_ptr": 1,
                    "current_argument": 1,
                    "format_arguments": 1,
                    "format_copy": 1,
                    "format_pointer": 1,
                    "format_string": 1,
                    "local_var4": 1,
                    "param3_copy": 2,
                    "param_3_copy": 1,
                    "pointer_to_variable_1": 1,
                    "ptr_arg": 1,
                    "ptr_value_1": 1,
                    "stack_variable_2": 1
                }
            },
            "called": [
                "FUN_08005e9c"
            ],
            "calling": [
                "FUN_08004f78"
            ],
            "code": "\nvoid print_formatted_message_08005dfc(undefined *message,undefined4 format_string,undefined4 arg1,undefined4 arg2)\n\n{\n  undefined *buffer [2];\n  undefined4 max_length;\n  undefined4 local_var2;\n  undefined *current_char;\n  undefined4 max_string_length;\n  undefined4 arg3;\n  undefined4 arg4;\n  \n  max_string_length = 0x7fffffff;\n  max_length = 0x7fffffff;\n  local_var2 = 0xffff0208;\n  buffer[0] = message;\n  current_char = message;\n  arg3 = arg1;\n  arg4 = arg2;\n  formatted_print(DAT_2000001c,buffer,format_string,&arg3);\n  *buffer[0] = 0;\n  return;\n}\n\n",
            "current_name": "print_formatted_message_08005dfc",
            "entrypoint": "0x08005dfc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005dfc": "print_formatted_message_08005dfc",
                "_svfprintf_r": "formatted_print",
                "local_6c": "max_string_length",
                "local_70": "current_char",
                "local_78": "max_length",
                "local_8": "args_ptr",
                "local_80": "buffer",
                "param_1": "message",
                "param_2": "format_string",
                "param_3": "arg1",
                "param_4": "arg2",
                "uStack_4": "arg4",
                "uStack_74": "local_var2",
                "uStack_8": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e40": {
            "additional_data": {
                "FUN_08005e40": {
                    "calculate_largest_byte_aligned_offset": 1,
                    "calculate_leading_zeros": 1,
                    "calculate_lz_count": 2,
                    "calculate_lzcount": 2,
                    "calculate_offset": 3,
                    "calculate_trailing_zeros": 1,
                    "count_leading_zero_bits": 1,
                    "count_leading_zeroes": 3,
                    "count_leading_zeros": 7,
                    "extract_bits_from_uint": 1,
                    "find_first_set_bit": 1,
                    "find_last_set_32_bits": 1,
                    "find_last_set_bit_index": 2,
                    "find_last_set_bit_position": 1,
                    "reverse_bits": 1,
                    "reverse_bits_count": 1,
                    "reverse_count_bits": 1
                },
                "LZCOUNT": {
                    "count_leading_zeros": 1,
                    "leading_zero_count": 3,
                    "leading_zeroes_count": 1,
                    "leading_zeros_count": 1
                },
                "iVar1": {
                    "alignment_offset": 1,
                    "bit_count": 1,
                    "bit_offset": 3,
                    "bit_shift": 1,
                    "byte_offset": 1,
                    "index": 1,
                    "index_offset": 1,
                    "leading_zero_bits": 1,
                    "leading_zeroes": 1,
                    "leading_zeros": 6,
                    "leading_zeros_count": 2,
                    "negative_offset": 1,
                    "offset": 4,
                    "offset_correction": 1,
                    "remainder": 1,
                    "shift": 1,
                    "shift_amount": 2,
                    "trailing_zeros": 1,
                    "trailing_zeros_count": 1
                },
                "param_1": {
                    "input": 19,
                    "input_number": 1,
                    "input_value": 9,
                    "num": 2
                },
                "puVar2": {
                    "aligned_input": 1,
                    "bit_pointer": 1,
                    "data_pointer": 5,
                    "data_ptr": 1,
                    "input_ptr": 1,
                    "p_last_word": 1,
                    "p_u_int": 1,
                    "ptr": 18,
                    "word_pointer": 1,
                    "word_ptr": 1
                },
                "uVar3": {
                    "bit_mask": 1,
                    "bitmask": 1,
                    "current_value": 2,
                    "data": 1,
                    "last_word": 1,
                    "mask": 2,
                    "value": 19,
                    "word": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_08004f78",
                "FUN_08005e9c"
            ],
            "code": "\nint count_leading_zeros_08005e40(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while( true ) {\n    ptr = ptr + 1;\n    value = value + 0xfefefeff & ~value & 0x80808080;\n    if (value != 0) break;\n    value = *ptr;\n    leading_zeros = leading_zeros + 4;\n  }\n  return leading_zeros + (0x1fU - leading_zero_count(value & -value) >> 3);\n}\n\n",
            "current_name": "count_leading_zeros_08005e40",
            "entrypoint": "0x08005e40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005e40": "count_leading_zeros_08005e40",
                "LZCOUNT": "leading_zero_count",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005e9c": {
            "called": [
                "FUN_080009ac",
                "FUN_080097cc",
                "FUN_080009e8",
                "FUN_08001170",
                "FUN_080009c0",
                "FUN_08000998",
                "FUN_0800901c",
                "FUN_080004c8",
                "FUN_080096e0",
                "FUN_080079e8",
                "FUN_080003f4",
                "FUN_08008af8",
                "FUN_080011ec",
                "FUN_0800119c",
                "FUN_08000158",
                "FUN_08009768",
                "FUN_08005e40",
                "FUN_080088ec",
                "FUN_08008ad4"
            ],
            "calling": [
                "FUN_08005dfc"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nbyte * FUNC_08005e9c(undefined4 *param_1,int *param_2,int *param_3,int **param_4)\n\n{\n  byte bVar1;\n  int **ppiVar2;\n  int iVar3;\n  uint uVar4;\n  byte *pbVar5;\n  char cVar6;\n  byte bVar7;\n  int iVar8;\n  int *piVar9;\n  undefined4 uVar10;\n  int **ppiVar11;\n  undefined uVar12;\n  ushort uVar13;\n  int **ppiVar14;\n  byte **ppbVar15;\n  int *piVar16;\n  int **ppiVar17;\n  char *pcVar18;\n  uint uVar19;\n  undefined *puVar20;\n  int *piVar21;\n  int *piVar22;\n  int *piVar23;\n  int *piVar24;\n  int *piVar25;\n  byte *pbVar26;\n  int *piVar27;\n  int *piVar28;\n  undefined4 *puVar29;\n  byte *pbVar30;\n  bool bVar31;\n  longlong lVar32;\n  undefined8 uVar33;\n  undefined8 uVar34;\n  undefined4 local_188;\n  int *piStack_184;\n  int **local_180;\n  undefined *puStack_17c;\n  int **local_178;\n  undefined4 *local_16c;\n  int *local_168;\n  byte *local_164;\n  int *local_160;\n  int *local_15c;\n  char *local_158;\n  int **local_154;\n  undefined8 local_150;\n  int *local_148;\n  int *local_144;\n  int *local_140;\n  int **local_13c;\n  int *local_138;\n  int *local_134;\n  int *local_130;\n  uint local_12c;\n  undefined4 local_128;\n  undefined4 local_124;\n  undefined4 local_120;\n  char *local_11c;\n  int *local_118;\n  int *local_114;\n  int *local_110;\n  int *local_10c;\n  byte *local_108;\n  int *local_104;\n  int *local_100;\n  int *local_fc;\n  byte local_f5;\n  undefined2 local_f4;\n  int *local_f0;\n  undefined auStack_ec [4];\n  char local_e8;\n  undefined local_e7;\n  char local_e6 [6];\n  int *local_e0;\n  byte abStack_dc [4];\n  int **local_d8;\n  int *local_d4;\n  int *local_d0;\n  int *local_cc [16];\n  undefined local_8c;\n  byte bStack_2a;\n  undefined local_29;\n  int iStack_28;\n  \n  local_16c = param_1;\n  local_160 = param_2;\n  local_154 = param_4;\n  ppiVar2 = (int **)_localeconv_r();\n  local_114 = *ppiVar2;\n  local_118 = (int *)strlen(local_114);\n  if (((int)((uint)*(ushort *)(param_2 + 3) << 0x18) < 0) && (param_2[4] == 0)) {\n    iVar3 = _malloc_r(local_16c,0x40);\n    *local_160 = iVar3;\n    local_160[4] = iVar3;\n    if (iVar3 == 0) {\n      *local_16c = 0xc;\n      return (byte *)0xffffffff;\n    }\n    local_160[5] = 0x40;\n  }\n  local_128 = 0;\n  local_138 = (int *)0x0;\n  local_12c = 0;\n  local_d4 = (int *)0x0;\n  local_d0 = (int *)0x0;\n  local_11c = (char *)0x0;\n  local_10c = (int *)0x0;\n  local_108 = (byte *)0x0;\n  local_104 = (int *)0x0;\n  local_110 = (int *)0x0;\n  local_164 = (byte *)0x0;\n  local_124 = 0;\n  local_120 = 0;\n  ppiVar2 = local_cc;\n  bVar1 = *(byte *)param_3;\n  local_d8 = ppiVar2;\njoined_r0x08005ef2:\n  if (bVar1 != 0) {\n    piVar28 = param_3;\n    if (bVar1 != 0x25) {\n      do {\n        piVar28 = (int *)((int)piVar28 + 1);\n        if (*(byte *)piVar28 == 0) break;\n      } while (*(byte *)piVar28 != 0x25);\n      piVar27 = (int *)((int)piVar28 - (int)param_3);\n      if (piVar27 != (int *)0x0) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)piVar27);\n        *ppiVar2 = param_3;\n        *(int **)((int)ppiVar2 + 4) = piVar27;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = (int **)((int)ppiVar2 + 8);\n        }\n        else {\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800604a;\n          ppiVar2 = local_cc;\n        }\n        local_164 = local_164 + (int)piVar27;\n      }\n      if (*(byte *)piVar28 == 0) goto LAB_08006216;\n    }\n    piVar27 = (int *)0xffffffff;\n    piVar25 = (int *)0x0;\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    local_15c = (int *)0x0;\n    local_f5 = 0;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4a:\n    puVar29 = local_16c;\n    piVar28 = (int *)((int)piVar28 + 1);\nLAB_08005f4e:\n    switch(piVar24) {\n    case (int *)0x20:\n      goto switchD_08005f58_caseD_20;\n    default:\n      if (piVar24 == (int *)0x0) goto LAB_08006216;\n      piVar16 = (int *)0x0;\n      local_168 = (int *)0x1;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_158 = (char *)0x1;\n      piVar23 = (int *)&local_8c;\n      piVar22 = piVar16;\n      local_8c = (char)piVar24;\n      goto LAB_08006298;\n    case (int *)0x23:\n      piVar25 = (int *)((uint)piVar25 | 1);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x27:\n      iVar3 = _localeconv_r(local_16c);\n      local_110 = *(int **)(iVar3 + 4);\n      piVar24 = (int *)strlen(local_110);\n      local_104 = piVar24;\n      iVar3 = _localeconv_r(puVar29);\n      local_108 = *(byte **)(iVar3 + 8);\n      if (piVar24 == (int *)0x0) goto switchD_08005f58_caseD_74;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if ((local_108 != (byte *)0x0) && (*local_108 != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 0x400);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2a:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      local_15c = *local_154;\n      local_154 = local_154 + 1;\n      if ((int)local_15c < 0) {\n        local_15c = (int *)-(int)local_15c;\n        goto LAB_08006602;\n      }\n      goto LAB_08005f4a;\n    case (int *)0x2b:\n      local_f5 = 0x2b;\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x2d:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\nLAB_08006602:\n      piVar25 = (int *)((uint)piVar25 | 4);\n      goto LAB_08005f4a;\n    case (int *)0x2e:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x2a) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar27 = (int *)((uint)*local_154 | (int)*local_154 >> 0x1f);\n        local_154 = local_154 + 1;\n        piVar28 = (int *)((int)piVar28 + 1);\n        goto LAB_08005f4a;\n      }\n      piVar27 = (int *)0x0;\n      piVar28 = (int *)((int)piVar28 + 1);\n      while (piVar24 + -0xc < (int *)0xa) {\n        piVar27 = (int *)((int)(piVar24 + -0xc) + (int)piVar27 * 10);\n        piVar24 = (int *)(uint)*(byte *)piVar28;\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      goto LAB_08005f4e;\n    case (int *)0x30:\n      piVar25 = (int *)((uint)piVar25 | 0x80);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x31:\n    case (int *)0x32:\n    case (int *)0x33:\n    case (int *)0x34:\n    case (int *)0x35:\n    case (int *)0x36:\n    case (int *)0x37:\n    case (int *)0x38:\n    case (int *)0x39:\n      goto switchD_08005f58_caseD_31;\n    case (int *)0x41:\n    case (int *)0x45:\n    case (int *)0x46:\n    case (int *)0x47:\n    case (int *)0x61:\n    case (int *)0x65:\n    case (int *)0x66:\n    case (int *)0x67:\n      puVar29 = (undefined4 *)((int)local_154 + 7U & 0xfffffff8);\n      uVar10 = *puVar29;\n      local_12c = puVar29[1];\n      local_168 = (int *)(local_12c & 0x7fffffff);\n      local_154 = (int **)(puVar29 + 2);\n      local_128 = uVar10;\n      iVar3 = __unorddf2(uVar10,local_168,0xffffffff,0x7fefffff);\n      if ((iVar3 == 0) &&\n         (iVar3 = __aeabi_dcmple(uVar10,local_168,0xffffffff,0x7fefffff), iVar3 == 0)) {\n        iVar3 = __aeabi_dcmplt(local_128,local_12c,local_124,local_120);\n        if (iVar3 == 0) {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        else {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        piVar23 = (int *)&UNK_08009f10;\n        piVar27 = (int *)&UNK_08009f0c;\nLAB_08006524:\n        local_148 = (int *)0x0;\n        local_168 = (int *)0x3;\n        if (piVar24 < (int *)0x48) {\n          piVar23 = piVar27;\n        }\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar25 = (int *)((uint)piVar25 & 0xffffff7f);\n        local_158 = (char *)0x3;\n        local_13c = (int **)0x0;\n        piVar22 = (int *)0x0;\n        goto LAB_08006538;\n      }\n      iVar3 = __unorddf2(local_128,local_12c,local_128,local_12c);\n      if (iVar3 != 0) {\n        if ((int)local_12c < 0) {\n          piVar16 = (int *)0x2d;\n          local_f5 = 0x2d;\n        }\n        else {\n          piVar16 = (int *)(uint)local_f5;\n        }\n        piVar23 = (int *)&UNK_08009f18;\n        piVar27 = (int *)&UNK_08009f14;\n        goto LAB_08006524;\n      }\n      if (piVar24 == (int *)0x61) {\n        uVar12 = 0x78;\nLAB_08007224:\n        local_f4 = CONCAT11(uVar12,0x30);\n        if ((int)piVar27 < 100) {\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          local_148 = (int *)0x0;\n          param_3 = (int *)&local_8c;\n          piVar25 = (int *)((uint)piVar25 | 2);\n        }\n        else {\n          param_3 = (int *)_malloc_r(local_16c,(byte *)((int)piVar27 + 1));\n          if (param_3 == (int *)0x0) {\n            uVar13 = *(ushort *)(local_160 + 3) | 0x40;\n            *(ushort *)(local_160 + 3) = uVar13;\n            goto LAB_0800604e;\n          }\n          local_140 = (int *)((uint)piVar25 | 0x102);\n          piVar25 = (int *)((uint)piVar25 | 2);\n          local_148 = param_3;\n        }\nLAB_0800724a:\n        if ((int)local_12c < 0) {\nLAB_08007414:\n          local_144 = (int *)0x2d;\n          uVar19 = local_12c + 0x80000000;\n        }\n        else {\n          local_144 = (int *)0x0;\n          uVar19 = local_12c;\n        }\n        local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n        piVar22 = piVar27;\n        local_158 = (char *)local_128;\n        if (piVar24 == (int *)0x61) {\n          uVar33 = frexp(local_128,uVar19,&local_f0);\n          local_150 = __muldf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = __aeabi_dcmpeq((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                                 local_120);\n          if (iVar3 != 0) {\n            local_f0 = (int *)0x1;\n          }\n          local_158 = \"0123456789abcdef\";\n          local_13c = ppiVar2;\n          local_138 = piVar28;\n          local_134 = piVar24;\n          local_130 = piVar27;\n          local_100 = piVar25;\n          local_fc = param_3;\n          pcVar18 = local_158;\n          uVar33 = local_150;\n          goto LAB_080072ba;\n        }\n        if (piVar24 == (int *)0x41) {\n          uVar33 = frexp(local_128,uVar19,&local_f0);\n          local_150 = __muldf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x3fc00000);\n          iVar3 = __aeabi_dcmpeq((int)local_150,(int)((ulonglong)local_150 >> 0x20),local_124,\n                                 local_120);\n          if (iVar3 == 0) {\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          else {\n            local_f0 = (int *)0x1;\n            local_158 = \"0123456789ABCDEF\";\n            local_13c = ppiVar2;\n            local_138 = piVar28;\n            local_134 = piVar24;\n            local_130 = piVar27;\n            local_100 = piVar25;\n            local_fc = param_3;\n            pcVar18 = local_158;\n            uVar33 = local_150;\n          }\n          goto LAB_080072ba;\n        }\n      }\n      else {\n        if (piVar24 == (int *)0x41) {\n          uVar12 = 0x58;\n          goto LAB_08007224;\n        }\n        local_140 = (int *)((uint)piVar25 | 0x100);\n        local_148 = (int *)0x0;\n        if (piVar27 == (int *)0xffffffff) {\n          piVar27 = (int *)0x6;\n          goto LAB_0800724a;\n        }\n        if (((uint)piVar24 & 0xffffffdf) == 0x47) {\n          if (piVar27 == (int *)0x0) {\n            piVar27 = (int *)0x1;\n            local_148 = (int *)0x0;\n          }\n          goto LAB_0800724a;\n        }\n        if ((int)local_12c < 0) goto LAB_08007414;\n        local_144 = (int *)0x0;\n        uVar19 = local_12c;\n      }\n      local_168 = (int *)((uint)piVar24 & 0xffffffdf);\n      piStack_184 = piVar27;\n      local_158 = (char *)local_128;\n      if (piVar24 == (int *)0x66) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)_dtoa_r(local_16c,local_180,local_128,uVar19);\n        piVar22 = (int *)((int)piVar23 + (int)piVar27);\n        local_150._0_4_ = piVar27;\nLAB_0800764c:\n        if ((*(byte *)piVar23 == 0x30) &&\n           (iVar3 = __aeabi_dcmpeq(local_158,uVar19,local_124,local_120), iVar3 == 0)) {\n          local_f0 = (int *)(1 - (int)(int *)local_150);\n        }\n        piVar22 = (int *)((int)piVar22 + (int)local_f0);\n      }\n      else if (piVar24 == (int *)0x46) {\n        local_178 = &local_e0;\n        local_188 = 3;\n        puStack_17c = auStack_ec;\n        local_180 = &local_f0;\n        piVar23 = (int *)_dtoa_r(local_16c,local_180,local_128,uVar19);\n        local_150._0_4_ = piVar27;\nLAB_08007760:\n        piVar22 = (int *)((int)piVar23 + (int)(int *)local_150);\n        if (piVar24 == (int *)0x46) goto LAB_0800764c;\n      }\n      else {\n        local_178 = &local_e0;\n        local_150._0_4_ = piVar27;\n        if (local_168 == (int *)0x45) {\n          local_150._0_4_ = (int *)((int)piVar27 + 1);\n        }\n        local_188 = 2;\n        piStack_184 = (int *)local_150;\n        local_180 = &local_f0;\n        puStack_17c = auStack_ec;\n        piVar23 = (int *)_dtoa_r(local_16c,local_180,local_128,uVar19);\n        piVar16 = local_e0;\n        if (piVar24 == (int *)0x67) {\n          if (((uint)piVar25 & 1) == 0) goto LAB_08006ca6;\n        }\n        else if (piVar24 == (int *)0x47) {\n          if (((uint)piVar25 & 1) != 0) goto LAB_08007760;\n          goto LAB_08006ca6;\n        }\n        piVar22 = (int *)((int)(int *)local_150 + (int)piVar23);\n      }\n      iVar3 = __aeabi_dcmpeq(local_158,uVar19,local_124,local_120);\n      piVar16 = piVar22;\n      if (iVar3 == 0) {\n        for (; piVar16 = local_e0, local_e0 < piVar22; local_e0 = (int *)((int)local_e0 + 1)) {\n          *(byte *)local_e0 = 0x30;\n        }\n      }\nLAB_08006ca6:\n      local_138 = (int *)((int)piVar16 - (int)piVar23);\n      goto LAB_08006cb0;\n    case (int *)0x43:\n    case (int *)0x63:\n      piVar16 = (int *)0x0;\n      piVar27 = *local_154;\n      local_f5 = 0;\n      local_148 = (int *)0x0;\n      piVar22 = (int *)0x0;\n      local_13c = (int **)0x0;\n      local_134 = (int *)0x0;\n      local_130 = (int *)0x0;\n      local_154 = local_154 + 1;\n      local_168 = (int *)0x1;\n      local_158 = (char *)0x1;\n      local_8c = SUB41(piVar27,0);\n      piVar23 = (int *)&local_8c;\n      goto LAB_08006298;\n    case (int *)0x44:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080065a8;\nLAB_080060ec:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_08006102;\n    case (int *)0x4c:\n      piVar25 = (int *)((uint)piVar25 | 8);\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x4f:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n    case (int *)0x6f:\n      if (((uint)piVar25 & 0x20) == 0) {\n        ppiVar14 = local_154 + 1;\n        if (((uint)piVar25 & 0x10) == 0) {\n          if (((uint)piVar25 & 0x40) == 0) {\n            if (((uint)piVar25 & 0x200) == 0) goto LAB_08006be2;\n            piVar22 = (int *)(uint)*(byte *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n          else {\n            piVar22 = (int *)(uint)*(ushort *)local_154;\n            piVar16 = (int *)0x0;\n            local_154 = ppiVar14;\n          }\n        }\n        else {\nLAB_08006be2:\n          piVar22 = *local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\n        ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n        piVar22 = *ppiVar14;\n        piVar16 = ppiVar14[1];\n        local_154 = ppiVar14 + 2;\n      }\n      iVar3 = 0;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n      break;\n    case (int *)0x53:\n    case (int *)0x73:\n      local_f5 = 0;\n      piVar23 = *local_154;\n      ppiVar14 = local_154 + 1;\n      if (piVar23 == (int *)0x0) {\n        if ((int *)0x5 < piVar27) {\n          piVar27 = (int *)0x6;\n        }\n        piVar23 = (int *)&UNK_08009f44;\n        piVar16 = (int *)0x0;\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar22 = (int *)0x0;\n        local_168 = piVar27;\n        local_158 = (char *)piVar27;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (piVar27 == (int *)0xffffffff) {\n          local_158 = (char *)strlen(piVar23);\n        }\n        else {\n          iVar3 = memchr(piVar23,0,piVar27);\n          if (iVar3 == 0) {\n            piVar16 = (int *)(uint)local_f5;\n            local_148 = (int *)0x0;\n            local_13c = (int **)0x0;\n            local_134 = (int *)0x0;\n            local_130 = (int *)0x0;\n            piVar22 = (int *)0x0;\n            local_168 = piVar27;\n            local_158 = (char *)piVar27;\n            local_154 = ppiVar14;\n            goto LAB_08006538;\n          }\n          local_158 = (char *)(iVar3 - (int)piVar23);\n        }\n        local_148 = (int *)0x0;\n        local_13c = (int **)0x0;\n        local_134 = (int *)0x0;\n        local_130 = (int *)0x0;\n        piVar16 = (int *)(uint)local_f5;\n        piVar22 = (int *)0x0;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        local_154 = ppiVar14;\n      }\n      goto LAB_08006538;\n    case (int *)0x55:\n      piVar25 = (int *)((uint)piVar25 | 0x10);\n      if (-1 < (int)piVar25 << 0x1a) goto LAB_080066c0;\nLAB_0800618a:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      iVar3 = 1;\n      local_154 = ppiVar14 + 2;\n      break;\n    case (int *)0x58:\n      local_11c = \"0123456789ABCDEF\";\n      if (((uint)piVar25 & 0x20) == 0) goto LAB_08006696;\nLAB_080061ac:\n      ppiVar14 = (int **)((int)local_154 + 7U & 0xfffffff8);\n      piVar22 = *ppiVar14;\n      piVar16 = ppiVar14[1];\n      local_154 = ppiVar14 + 2;\n      goto LAB_080061be;\n    case (int *)0x64:\n    case (int *)0x69:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_080060ec;\nLAB_080065a8:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bcc:\n        piVar22 = *local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(int)*(short *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bcc;\n        piVar22 = (int *)(int)*(char *)local_154;\n        piVar16 = (int *)((int)piVar22 >> 0x1f);\n        local_154 = ppiVar14;\n      }\nLAB_08006102:\n      if ((int)piVar16 < 0) {\n        bVar31 = piVar22 != (int *)0x0;\n        piVar22 = (int *)-(int)piVar22;\n        piVar16 = (int *)(-(int)piVar16 - (uint)bVar31);\n        local_f5 = 0x2d;\n      }\n      if (piVar27 != (int *)0xffffffff) {\n        iVar3 = 1;\n        iVar8 = 1;\n        piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n        if (((uint)piVar22 | (uint)piVar16) == 0) goto LAB_080060a4;\n        goto LAB_08006130;\n      }\n      piVar21 = piVar25;\n      if (piVar16 != (int *)0x0 || (int *)0x9 < piVar22) goto LAB_08006f16;\n      goto LAB_0800698a;\n    case (int *)0x68:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      if (piVar24 == (int *)0x68) {\n        piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n        piVar25 = (int *)((uint)piVar25 | 0x200);\n        piVar28 = (int *)((int)piVar28 + 1);\n      }\n      else {\n        piVar25 = (int *)((uint)piVar25 | 0x40);\n      }\n      goto LAB_08005f4a;\n    case (int *)0x6a:\n    case (int *)0x71:\n      piVar25 = (int *)((uint)piVar25 | 0x20);\n    case (int *)0x74:\n    case (int *)0x7a:\nswitchD_08005f58_caseD_74:\n      piVar24 = (int *)(uint)*(byte *)piVar28;\n      goto LAB_08005f4a;\n    case (int *)0x6c:\n      goto switchD_08005f58_caseD_6c;\n    case (int *)0x6e:\n      ppiVar14 = local_154 + 1;\n      ppbVar15 = (byte **)*local_154;\n      local_154 = ppiVar14;\n      if (((uint)piVar25 & 0x20) != 0) {\n        *ppbVar15 = local_164;\n        ppbVar15[1] = (byte *)((int)local_164 >> 0x1f);\n        goto LAB_0800620e;\n      }\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) != 0) {\n          *(short *)ppbVar15 = (short)local_164;\n          goto LAB_0800620e;\n        }\n        if (((uint)piVar25 & 0x200) != 0) {\n          *(char *)ppbVar15 = (char)local_164;\n          goto LAB_0800620e;\n        }\n      }\n      *ppbVar15 = local_164;\n      goto LAB_0800620e;\n    case (int *)0x70:\n      local_f4 = 0x7830;\n      piVar22 = *local_154;\n      local_11c = \"0123456789abcdef\";\n      piVar25 = (int *)((uint)piVar25 | 2);\n      piVar16 = (int *)0x0;\n      iVar3 = 2;\n      piVar24 = (int *)0x78;\n      local_154 = local_154 + 1;\n      break;\n    case (int *)0x75:\n      if ((int)piVar25 << 0x1a < 0) goto LAB_0800618a;\nLAB_080066c0:\n      ppiVar14 = local_154 + 1;\n      if ((int)piVar25 << 0x1b < 0) {\nLAB_08006bf2:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else if ((int)piVar25 << 0x19 < 0) {\n        piVar22 = (int *)(uint)*(ushort *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      else {\n        if (-1 < (int)piVar25 << 0x16) goto LAB_08006bf2;\n        piVar22 = (int *)(uint)*(byte *)local_154;\n        piVar16 = (int *)0x0;\n        iVar3 = 1;\n        local_154 = ppiVar14;\n      }\n      break;\n    case (int *)0x78:\n      local_11c = \"0123456789abcdef\";\n      if (((uint)piVar25 & 0x20) != 0) goto LAB_080061ac;\nLAB_08006696:\n      ppiVar14 = local_154 + 1;\n      if (((uint)piVar25 & 0x10) == 0) {\n        if (((uint)piVar25 & 0x40) == 0) {\n          if (((uint)piVar25 & 0x200) == 0) goto LAB_08006bbc;\n          piVar22 = (int *)(uint)*(byte *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n        else {\n          piVar22 = (int *)(uint)*(ushort *)local_154;\n          piVar16 = (int *)0x0;\n          local_154 = ppiVar14;\n        }\n      }\n      else {\nLAB_08006bbc:\n        piVar22 = *local_154;\n        piVar16 = (int *)0x0;\n        local_154 = ppiVar14;\n      }\nLAB_080061be:\n      if ((((uint)piVar25 & 1) != 0) && (((uint)piVar22 | (uint)piVar16) != 0)) {\n        piVar25 = (int *)((uint)piVar25 | 2);\n        local_f4 = CONCAT11((char)piVar24,0x30);\n      }\n      iVar3 = 2;\n      piVar25 = (int *)((uint)piVar25 & 0xfffffbff);\n    }\n    local_f5 = 0;\n    if (piVar27 == (int *)0xffffffff) {\n      if (iVar3 != 1) goto LAB_08006136;\nLAB_08006980:\n      piVar21 = piVar25;\n      if (piVar16 == (int *)0x0 && piVar22 < (int *)0xa) goto LAB_0800698a;\nLAB_08006f16:\n      lVar32 = CONCAT44(piVar16,piVar22);\n      piVar23 = (int *)(&bStack_2a + 2);\n      piVar22 = (int *)0x0;\n      pbVar26 = local_108;\n      local_168 = piVar23;\n      local_158 = (char *)ppiVar2;\n      local_150._0_4_ = piVar25;\n      local_148 = piVar24;\n      do {\n        iVar3 = (int)((ulonglong)lVar32 >> 0x20);\n        uVar19 = (uint)lVar32;\n        cVar6 = '\\n';\n        __aeabi_uldivmod(uVar19,iVar3,10,0);\n        *(byte *)((int)piVar23 + -1) = cVar6 + 0x30;\n        piVar22 = (int *)((int)piVar22 + 1);\n        piVar23 = (int *)((int)piVar23 + -1);\n        if ((((((uint)piVar25 & 0x400) != 0) && (piVar22 == (int *)(uint)*pbVar26)) &&\n            (piVar22 != (int *)0xff)) && (iVar3 != 0 || 9 < uVar19)) {\n          piVar23 = (int *)((int)piVar23 - (int)local_104);\n          strncpy(piVar23,local_110,local_104);\n          if (pbVar26[1] == 0) {\n            piVar22 = (int *)0x0;\n          }\n          else {\n            pbVar26 = pbVar26 + 1;\n            piVar22 = (int *)0x0;\n          }\n        }\n        lVar32 = __aeabi_uldivmod(uVar19,iVar3,10,0);\n      } while (lVar32 != 0);\n      piVar24 = local_148;\n      piVar25 = (int *)local_150;\n      ppiVar2 = (int **)local_158;\n      local_158 = (char *)((int)local_168 - (int)piVar23);\n      local_138 = piVar22;\n      local_108 = pbVar26;\n    }\n    else {\n      piVar21 = (int *)((uint)piVar25 & 0xffffff7f);\n      iVar8 = iVar3;\n      if (((uint)piVar22 | (uint)piVar16) == 0) {\nLAB_080060a4:\n        if (piVar27 == (int *)0x0) {\n          if (iVar3 == 0) {\n            local_158 = (char *)((uint)piVar25 & 1);\n            if ((int *)local_158 == (int *)0x0) {\n              piVar23 = (int *)(&bStack_2a + 2);\n              piVar25 = piVar21;\n            }\n            else {\n              piVar23 = (int *)(&bStack_2a + 1);\n              local_29 = '0';\n              piVar25 = piVar21;\n            }\n          }\n          else {\n            piVar23 = (int *)(&bStack_2a + 2);\n            piVar25 = piVar21;\n            local_158 = (char *)piVar27;\n          }\n        }\n        else {\n          piVar25 = piVar21;\n          if (iVar3 != 1) goto LAB_08006136;\nLAB_0800698a:\n          local_29 = (char)piVar22 + '0';\n          piVar23 = (int *)(&bStack_2a + 1);\n          local_158 = (char *)0x1;\n          piVar25 = piVar21;\n        }\n      }\n      else {\nLAB_08006130:\n        iVar3 = iVar8;\n        piVar25 = piVar21;\n        if (iVar8 == 1) goto LAB_08006980;\nLAB_08006136:\n        if (iVar3 == 2) {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = (int *)((uint)piVar22 >> 4 | (int)piVar16 << 0x1c);\n            piVar16 = (int *)((uint)piVar16 >> 4);\n            piVar23 = (int *)((int)piVar23 + -1);\n            *(char *)piVar23 = local_11c[(uint)piVar22 & 0xf];\n            piVar22 = piVar21;\n          } while (((uint)piVar21 | (uint)piVar16) != 0);\n        }\n        else {\n          piVar23 = (int *)(&bStack_2a + 2);\n          do {\n            piVar21 = piVar23;\n            piVar9 = (int *)((uint)piVar22 >> 3 | (int)piVar16 << 0x1d);\n            piVar16 = (int *)((uint)piVar16 >> 3);\n            iVar3 = ((uint)piVar22 & 7) + 0x30;\n            *(byte *)((int)piVar21 + -1) = (byte)iVar3;\n            piVar23 = (int *)((int)piVar21 + -1);\n            piVar22 = piVar9;\n          } while (((uint)piVar9 | (uint)piVar16) != 0);\n          if ((((uint)piVar25 & 1) != 0) && (iVar3 != 0x30)) {\n            piVar23 = (int *)((int)piVar21 + -2);\n            *(byte *)((int)piVar21 + -2) = 0x30;\n            local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n            goto LAB_0800675a;\n          }\n        }\n        local_158 = (char *)(&bStack_2a + (2 - (int)piVar23));\n      }\n    }\nLAB_0800675a:\n    local_148 = (int *)0x0;\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = piVar27;\n    local_168 = (int *)local_158;\n    if ((int)local_158 < (int)piVar27) {\n      local_168 = piVar27;\n    }\n    goto LAB_08006538;\n  }\nLAB_08006216:\n  piVar28 = local_160;\n  if (local_d0 == (int *)0x0) {\nLAB_0800604a:\n    uVar13 = *(ushort *)(local_160 + 3);\n  }\n  else {\n    __ssprint_r(local_16c,local_160,&local_d8);\n    uVar13 = *(ushort *)(piVar28 + 3);\n  }\nLAB_0800604e:\n  if ((uVar13 & 0x40) != 0) {\n    local_164 = (byte *)0xffffffff;\n  }\n  return local_164;\nswitchD_08005f58_caseD_6c:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (piVar24 == (int *)0x6c) {\n    piVar24 = (int *)(uint)*(byte *)((int)piVar28 + 1);\n    piVar25 = (int *)((uint)piVar25 | 0x20);\n    piVar28 = (int *)((int)piVar28 + 1);\n  }\n  else {\n    piVar25 = (int *)((uint)piVar25 | 0x10);\n  }\n  goto LAB_08005f4a;\n  while( true ) {\n    iVar8 = __aeabi_dcmpeq((int)uVar33,uVar10,local_124,local_120);\n    if (iVar8 != 0) break;\nLAB_080072ba:\n    piVar16 = param_3;\n    piVar22 = (int *)((int)piVar22 + -1);\n    uVar33 = __muldf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),0,0x40300000);\n    iVar3 = __aeabi_d2iz();\n    uVar34 = __aeabi_i2d();\n    uVar33 = __subdf3((int)uVar33,(int)((ulonglong)uVar33 >> 0x20),(int)uVar34,\n                      (int)((ulonglong)uVar34 >> 0x20));\n    uVar10 = (undefined4)((ulonglong)uVar33 >> 0x20);\n    param_3 = (int *)((int)piVar16 + 1);\n    *(char *)piVar16 = pcVar18[iVar3];\n    if (piVar22 == (int *)0xffffffff) break;\n  }\n  piVar23 = local_fc;\n  piVar25 = local_100;\n  piVar27 = local_130;\n  piVar24 = local_134;\n  piVar28 = local_138;\n  ppiVar2 = local_13c;\n  local_13c = (int **)piVar22;\n  local_134 = piVar16;\n  local_150 = uVar33;\n  iVar8 = __aeabi_dcmpgt((int)uVar33,uVar10,0,0x3fe00000);\n  if (iVar8 == 0) {\n    iVar8 = __aeabi_dcmpeq((int *)local_150,local_150._4_4_,0,0x3fe00000);\n    if ((iVar8 != 0) && (iVar3 << 0x1f < 0)) goto LAB_0800748a;\n    if (-1 < (int)local_13c) {\n      piVar16 = (int *)((byte *)((int)local_13c + 1) + (int)param_3);\n      piVar22 = param_3;\n      do {\n        param_3 = (int *)((int)piVar22 + 1);\n        *(byte *)piVar22 = 0x30;\n        piVar22 = param_3;\n      } while (piVar16 != param_3);\n    }\n  }\n  else {\nLAB_0800748a:\n    bVar1 = local_158[0xf];\n    bVar7 = *(byte *)piVar16;\n    piVar22 = param_3;\n    local_e0 = local_134;\n    while (bVar1 == bVar7) {\n      *(byte *)((int)piVar22 + -1) = 0x30;\n      bVar7 = *(byte *)((int)local_e0 + -1);\n      piVar22 = local_e0;\n      local_e0 = (int *)((int)local_e0 + -1);\n    }\n    if (bVar7 == 0x39) {\n      bVar7 = local_158[10];\n    }\n    else {\n      bVar7 = bVar7 + 1;\n    }\n    *(byte *)((int)piVar22 + -1) = bVar7;\n  }\n  local_138 = (int *)((int)param_3 - (int)piVar23);\nLAB_08006cb0:\n  local_134 = local_f0;\n  if (local_168 == (int *)0x47) {\n    if (((int)((int)local_f0 + 3) < 0 == SCARRY4((int)local_f0,3)) &&\n       ((int)local_f0 <= (int)piVar27)) {\n      if ((int)local_f0 < (int)local_138) {\n        local_158 = (char *)((int)local_138 + (int)local_118);\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074f8;\n        }\n        local_158 = (char *)((int)local_158 + (1 - (int)local_f0));\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        piVar24 = (int *)0x67;\n      }\n      else {\n        if ((int)piVar25 << 0x1f < 0) {\n          local_158 = (char *)((int)local_f0 + (int)local_118);\n        }\n        else {\n          local_158 = (char *)local_f0;\n        }\n        if (-1 < (int)piVar25 << 0x15) {\n          piVar24 = (int *)0x67;\n          goto LAB_0800754a;\n        }\n        if (0 < (int)local_f0) {\n          piVar24 = (int *)0x67;\n          goto LAB_080074fc;\n        }\n        piVar24 = (int *)0x67;\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\n      goto LAB_080073d6;\n    }\n    piVar24 = (int *)((int)piVar24 + -2);\n    local_168 = (int *)((uint)piVar24 & 0xffffffdf);\nLAB_08006cc4:\n    local_e8 = (char)piVar24;\n    if (local_168 == (int *)0x41) {\n      local_e8 = local_e8 + '\\x0f';\n    }\n    piVar27 = (int *)((int)local_f0 + -1);\n    if ((int)piVar27 < 0) {\n      local_e7 = 0x2d;\n      local_f0 = (int *)(1 - (int)local_f0);\n    }\n    else {\n      local_e7 = 0x2b;\n      local_f0 = piVar27;\n    }\n    if ((int)local_f0 < 10) {\n      if (local_168 == (int *)0x41) {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n      else {\n        local_e6[0] = 0x30;\n        pcVar18 = (char *)((int)&local_e8 + 3);\n      }\n      *pcVar18 = (char)local_f0 + '0';\n      pcVar18 = pcVar18 + 1;\n    }\n    else {\n      pbVar30 = abStack_dc + 3;\n      pbVar26 = pbVar30;\n      do {\n        pbVar5 = pbVar26;\n        piVar22 = (int *)((uint)local_f0 / 10);\n        pbVar5[-1] = (char)local_f0 + (char)piVar22 * -10 + 0x30;\n        pbVar26 = pbVar5 + -1;\n        local_f0 = piVar22;\n      } while ((int *)0x9 < piVar22);\n      uVar19 = (uint)(piVar22 + 0xc) & 0xff;\n      pbVar5[-2] = (byte)uVar19;\n      if (pbVar5 + -2 < pbVar30) {\n        pbVar5 = pbVar26;\n        puVar20 = (undefined *)((int)&local_e8 + 2);\n        while( true ) {\n          *puVar20 = (char)uVar19;\n          if (pbVar30 == pbVar5) break;\n          uVar19 = (uint)*pbVar5;\n          pbVar5 = pbVar5 + 1;\n          puVar20 = puVar20 + 1;\n        }\n        pcVar18 = (char *)(((int)&local_188 * 2 - (int)pbVar26) + 0x152);\n      }\n      else {\n        pcVar18 = (char *)((int)&local_e8 + 2);\n      }\n    }\n    local_10c = (int *)(pcVar18 + -(int)&local_e8);\n    local_158 = (char *)((int)local_10c + (int)local_138);\n    if ((1 < (int)local_138) || ((int)piVar25 << 0x1f < 0)) {\n      local_158 = (char *)((int)local_158 + (int)local_118);\n    }\n    local_13c = (int **)0x0;\n    local_134 = (int *)0x0;\n    local_130 = (int *)0x0;\n    local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n    piVar25 = (int *)((uint)piVar25 & 0xfffffbff | 0x100);\n    local_f0 = piVar27;\n  }\n  else {\n    if (local_168 != (int *)0x46) goto LAB_08006cc4;\n    if ((int)local_f0 < 1) {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_168 = (int *)0x1;\n        local_158 = (char *)0x1;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_118 + 1) + (int)piVar27);\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      }\nLAB_080073d6:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      piVar25 = local_140;\n    }\n    else {\n      if ((piVar27 == (int *)0x0) && (-1 < (int)piVar25 << 0x1f)) {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)local_f0;\n      }\n      else {\n        piVar24 = (int *)0x66;\n        local_158 = (char *)((byte *)((int)local_f0 + (int)local_118) + (int)piVar27);\n      }\nLAB_080074f8:\n      if (-1 < (int)piVar25 << 0x15) {\nLAB_0800754a:\n        local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n        goto LAB_080073d6;\n      }\nLAB_080074fc:\n      local_13c = (int **)0x0;\n      local_130 = (int *)0x0;\n      uVar19 = (uint)*local_108;\n      while (uVar19 != 0xff) {\n        while( true ) {\n          if ((int)local_134 <= (int)uVar19) goto LAB_08007524;\n          uVar4 = (uint)local_108[1];\n          local_134 = (int *)((int)local_134 - uVar19);\n          if (uVar4 == 0) break;\n          local_108 = local_108 + 1;\n          local_130 = (int *)((int)local_130 + 1);\n          uVar19 = uVar4;\n          if (uVar4 == 0xff) goto LAB_08007524;\n        }\n        local_13c = (int **)((int)local_13c + 1);\n      }\nLAB_08007524:\n      local_158 = (char *)((int)local_158 + (int)local_104 * ((int)local_130 + (int)local_13c));\n      local_168 = (int *)((uint)local_158 & ~((int)local_158 >> 0x1f));\n      piVar25 = local_140;\n    }\n  }\n  if (local_144 == (int *)0x0) {\n    piVar16 = (int *)(uint)local_f5;\n    piVar22 = (int *)0x0;\nLAB_08006538:\n    if (piVar16 != (int *)0x0) goto LAB_0800653e;\n  }\n  else {\n    piVar16 = (int *)0x2d;\n    piVar22 = (int *)0x0;\n    local_f5 = 0x2d;\nLAB_0800653e:\n    local_168 = (int *)((int)local_168 + 1);\n  }\nLAB_08006298:\n  piVar27 = local_160;\n  puVar29 = local_16c;\n  local_150._0_4_ = (int *)((uint)piVar25 & 2);\n  if ((int *)local_150 != (int *)0x0) {\n    local_168 = (int *)((int)local_168 + 2);\n  }\n  local_144 = (int *)((uint)piVar25 & 0x84);\n  if ((local_144 == (int *)0x0) &&\n     (piVar21 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar21)) {\n    if (0x10 < (int)piVar21) {\n      piVar16 = (int *)0x10;\n      local_100 = piVar24;\n      do {\n        piVar9 = piVar21;\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = piVar16;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n          piVar24 = local_100;\n        }\n        else {\n          local_140 = piVar16;\n          iVar3 = __ssprint_r(puVar29,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = local_140;\n          piVar24 = local_100;\n        }\n        piVar21 = piVar9 + -4;\n        local_100 = piVar24;\n      } while (0x10 < (int)piVar21);\n      piVar21 = piVar9 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar21);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar21;\n    if ((int)local_d4 < 8) {\n      piVar16 = (int *)(uint)local_f5;\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar16 = (int *)(uint)local_f5;\n    }\n  }\n  if (piVar16 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 1);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f5;\n    ppiVar2[1] = (int *)0x1;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  if ((int *)local_150 != (int *)0x0) {\n    local_d0 = (int *)((int)local_d0 + 2);\n    local_d4 = (int *)((int)local_d4 + 1);\n    *ppiVar2 = (int *)&local_f4;\n    ppiVar2[1] = (int *)0x2;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  if ((local_144 == (int *)0x80) &&\n     (piVar16 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar16)) {\n    if (0x10 < (int)piVar16) {\n      do {\n        while( true ) {\n          piVar21 = piVar16;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = __ssprint_r(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar16 = piVar21 + -4;\n          if ((int)(piVar21 + -4) < 0x11) goto LAB_08006882;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar16 = piVar21 + -4;\n      } while (0x10 < (int)(piVar21 + -4));\nLAB_08006882:\n      piVar16 = piVar21 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar16);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar16;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_160;\n  piVar22 = (int *)((int)piVar22 - (int)local_158);\n  if (0 < (int)piVar22) {\n    if (0x10 < (int)piVar22) {\n      do {\n        while( true ) {\n          piVar16 = piVar22;\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = local_d0 + 4;\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = (int *)0x10;\n          if ((int)local_d4 < 8) break;\n          iVar3 = __ssprint_r(local_16c,piVar27,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n          piVar22 = piVar16 + -4;\n          if ((int)(piVar16 + -4) < 0x11) goto LAB_080063d2;\n        }\n        ppiVar2 = ppiVar2 + 2;\n        piVar22 = piVar16 + -4;\n      } while (0x10 < (int)(piVar16 + -4));\nLAB_080063d2:\n      piVar22 = piVar16 + -4;\n    }\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar22);\n    *ppiVar2 = (int *)0x8009f60;\n    ppiVar2[1] = piVar22;\n    if ((int)local_d4 < 8) {\n      ppiVar2 = ppiVar2 + 2;\n    }\n    else {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n    }\n  }\n  piVar27 = local_d0;\n  if (((uint)piVar25 & 0x100) == 0) {\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)local_158);\n    *ppiVar2 = piVar23;\n    ppiVar2[1] = (int *)local_158;\n    if ((int)local_d4 < 8) {\nLAB_0800640e:\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\n    else {\nLAB_08006a20:\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else if ((int)piVar24 < 0x66) {\n    local_158 = (char *)((int)local_d0 + 1);\n    piVar27 = (int *)((int)local_d4 + 1);\n    ppiVar14 = ppiVar2 + 2;\n    local_d0 = (int *)local_158;\n    if (((int)local_138 < 2) && (((uint)piVar25 & 1) == 0)) {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)piVar27 < 8) {\n        local_150._0_4_ = (int *)((int)local_d4 + 2);\n        ppiVar2 = ppiVar2 + 4;\n      }\n      else {\n        local_d4 = piVar27;\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        local_150._0_4_ = (int *)((int)local_d4 + 1);\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n        ppiVar2 = local_cc + 2;\n      }\n    }\n    else {\n      *ppiVar2 = piVar23;\n      ppiVar2[1] = (int *)0x1;\n      local_d4 = piVar27;\n      if (7 < (int)piVar27) {\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar14 = local_cc;\n        local_158 = (char *)local_d0;\n      }\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_158 = (char *)((int)local_158 + (int)local_118);\n      *ppiVar14 = local_114;\n      ppiVar14[1] = local_118;\n      local_d0 = (int *)local_158;\n      if ((int)local_d4 < 8) {\n        ppiVar17 = ppiVar14 + 2;\n      }\n      else {\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar17 = local_cc;\n      }\n      piVar24 = local_d4;\n      local_150._0_4_ = (int *)((int)local_d4 + 1);\n      piVar22 = (int *)((int)local_138 + -1);\n      ppiVar11 = ppiVar17 + 2;\n      local_158 = (char *)local_d0;\n      local_144 = (int *)local_150;\n      iVar3 = __aeabi_dcmpeq(local_128,local_12c,local_124,local_120);\n      piVar27 = local_160;\n      puVar29 = local_16c;\n      if (iVar3 == 0) {\n        local_158 = (char *)((int)local_158 + (int)piVar22);\n        *ppiVar17 = (int *)((int)piVar23 + 1);\n        ppiVar17[1] = piVar22;\n        local_d0 = (int *)local_158;\n        if ((int)(int *)local_150 < 8) {\n          local_150._0_4_ = (int *)((int)piVar24 + 2);\n          ppiVar14 = ppiVar11;\n          ppiVar2 = ppiVar17 + 4;\n        }\n        else {\nLAB_08006d9c:\n          local_158 = (char *)local_d0;\n          local_d4 = (int *)local_150;\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          local_150._0_4_ = (int *)((int)local_d4 + 1);\n          local_158 = (char *)local_d0;\n          ppiVar14 = local_cc;\n          ppiVar2 = local_cc + 2;\n        }\n      }\n      else {\n        ppiVar14 = ppiVar17;\n        ppiVar2 = ppiVar11;\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)local_158;\n          local_d4 = local_144;\n          if (0x10 < (int)piVar22) {\n            while( true ) {\n              local_d0 = local_d0 + 4;\n              *ppiVar17 = (int *)0x8009f60;\n              ppiVar17[1] = (int *)0x10;\n              if ((int)local_d4 < 8) {\n                ppiVar17 = ppiVar17 + 2;\n              }\n              else {\n                iVar3 = __ssprint_r(puVar29,piVar27,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar17 = local_cc;\n              }\n              piVar22 = piVar22 + -4;\n              if ((int)piVar22 < 0x11) break;\n              local_d4 = (int *)((int)local_d4 + 1);\n            }\n            local_150._0_4_ = (int *)((int)local_d4 + 1);\n            ppiVar11 = ppiVar17 + 2;\n            local_158 = (char *)local_d0;\n          }\n          *ppiVar17 = (int *)0x8009f60;\n          ppiVar17[1] = piVar22;\n          local_158 = (char *)((int)local_158 + (int)piVar22);\n          local_d0 = (int *)local_158;\n          if (7 < (int)(int *)local_150) goto LAB_08006d9c;\n          local_150._0_4_ = (int *)((int)(int *)local_150 + 1);\n          ppiVar2 = ppiVar11 + 2;\n          ppiVar14 = ppiVar11;\n        }\n      }\n    }\n    ppiVar14[1] = local_10c;\n    local_d0 = (int *)((int)local_158 + (int)local_10c);\n    local_d4 = (int *)local_150;\n    *ppiVar14 = (int *)&local_e8;\n    piVar27 = local_d0;\n    if (7 < (int)(int *)local_150) {\n      iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n      if (iVar3 != 0) goto LAB_0800603e;\n      ppiVar2 = local_cc;\n      piVar27 = local_d0;\n    }\n  }\n  else {\n    iVar3 = __aeabi_dcmpeq(local_128,local_12c,local_124,local_120);\n    if (iVar3 == 0) {\n      if ((int)local_f0 < 1) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)piVar27 + 1);\n        *ppiVar2 = (int *)&DAT_08009f4c;\n        ppiVar2[1] = (int *)0x1;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        if (((local_f0 != (int *)0x0) || (local_138 != (int *)0x0)) ||\n           (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)local_d0 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n          }\n          puVar29 = local_16c;\n          if ((int)local_f0 < 0) {\n            piVar27 = (int *)-(int)local_f0;\n            if ((int)(local_f0 + 4) < 0 != SCARRY4((int)local_f0,0x10)) {\n              do {\n                local_d4 = (int *)((int)local_d4 + 1);\n                local_d0 = local_d0 + 4;\n                *ppiVar2 = (int *)0x8009f60;\n                ppiVar2[1] = (int *)0x10;\n                if ((int)local_d4 < 8) {\n                  ppiVar2 = ppiVar2 + 2;\n                }\n                else {\n                  iVar3 = __ssprint_r(puVar29,local_160,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  ppiVar2 = local_cc;\n                }\n                piVar27 = piVar27 + -4;\n              } while (0x10 < (int)piVar27);\n            }\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)local_d0 + (int)piVar27);\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = piVar27;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\n          local_d0 = (int *)((int)local_d0 + (int)local_138);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = local_138;\n          goto joined_r0x08006a1c;\n        }\n      }\n      else {\n        piVar24 = local_134;\n        if ((int)local_138 <= (int)local_134) {\n          piVar24 = local_138;\n        }\n        if (0 < (int)piVar24) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar24);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar23;\n          ppiVar2[1] = piVar24;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        piVar22 = local_134;\n        if (-1 < (int)piVar24) {\n          piVar22 = (int *)((int)local_134 - (int)piVar24);\n        }\n        if (0 < (int)piVar22) {\n          for (; 0x10 < (int)piVar22; piVar22 = piVar22 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = piVar27 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          local_d4 = (int *)((int)local_d4 + 1);\n          piVar27 = (int *)((int)piVar27 + (int)piVar22);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar22;\n          local_d0 = piVar27;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar22 = local_104;\n        piVar24 = local_160;\n        puVar29 = local_16c;\n        piVar16 = (int *)((int)local_134 + (int)piVar23);\n        if (((uint)piVar25 & 0x400) != 0) {\n          local_158 = (char *)((int)piVar23 + (int)local_138);\n          pbVar26 = local_108;\n          local_150._0_4_ = piVar28;\n          local_144 = piVar25;\n          local_140 = piVar23;\n          if (local_130 == (int *)0x0) goto LAB_08007176;\nLAB_080070ba:\n          if (local_13c != (int **)0x0) goto LAB_0800717e;\n          pbVar26 = pbVar26 + -1;\n          local_130 = (int *)((int)local_130 + -1);\n          do {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = (int *)((int)piVar27 + (int)piVar22);\n            *ppiVar2 = local_110;\n            ppiVar2[1] = piVar22;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = (int *)(uint)*pbVar26;\n            piVar28 = (int *)((int)local_158 - (int)piVar16);\n            if ((int)piVar27 <= (int)(int *)((int)local_158 - (int)piVar16)) {\n              piVar28 = piVar27;\n            }\n            if (0 < (int)piVar28) {\n              local_d0 = (int *)((int)local_d0 + (int)piVar28);\n              local_d4 = (int *)((int)local_d4 + 1);\n              *ppiVar2 = piVar16;\n              ppiVar2[1] = piVar28;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                ppiVar2 = local_cc;\n                piVar27 = (int *)(uint)*pbVar26;\n              }\n            }\n            piVar25 = piVar27;\n            if (-1 < (int)piVar28) {\n              piVar25 = (int *)((int)piVar27 - (int)piVar28);\n            }\n            if (0 < (int)piVar25) {\n              for (; 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n                while( true ) {\n                  local_d4 = (int *)((int)local_d4 + 1);\n                  local_d0 = local_d0 + 4;\n                  *ppiVar2 = (int *)0x8009f60;\n                  ppiVar2[1] = (int *)0x10;\n                  if ((int)local_d4 < 8) break;\n                  iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n                  if (iVar3 != 0) goto LAB_0800603e;\n                  piVar25 = piVar25 + -4;\n                  ppiVar2 = local_cc;\n                  if ((int)piVar25 < 0x11) goto LAB_08007156;\n                }\n                ppiVar2 = ppiVar2 + 2;\n              }\nLAB_08007156:\n              local_d4 = (int *)((int)local_d4 + 1);\n              local_d0 = (int *)((int)local_d0 + (int)piVar25);\n              *ppiVar2 = (int *)0x8009f60;\n              ppiVar2[1] = piVar25;\n              if ((int)local_d4 < 8) {\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = ppiVar2 + 2;\n              }\n              else {\n                iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n                if (iVar3 != 0) goto LAB_0800603e;\n                piVar27 = (int *)(uint)*pbVar26;\n                ppiVar2 = local_cc;\n              }\n            }\n            piVar16 = (int *)((int)piVar16 + (int)piVar27);\n            piVar27 = local_d0;\n            if (local_130 != (int *)0x0) goto LAB_080070ba;\nLAB_08007176:\n            if (local_13c == (int **)0x0) {\n              piVar23 = local_140;\n              piVar25 = local_144;\n              piVar28 = (int *)local_150;\n              local_108 = pbVar26;\n              if ((int *)((int)local_140 + (int)local_138) <= piVar16) {\n                piVar16 = (int *)((int)local_140 + (int)local_138);\n              }\n              break;\n            }\nLAB_0800717e:\n            local_13c = (int **)((int)local_13c + -1);\n          } while( true );\n        }\n        if (((int)local_f0 < (int)local_138) || (((uint)piVar25 & 1) != 0)) {\n          local_d4 = (int *)((int)local_d4 + 1);\n          local_d0 = (int *)((int)piVar27 + (int)local_118);\n          *ppiVar2 = local_114;\n          ppiVar2[1] = local_118;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar27 = local_d0;\n          }\n        }\n        piVar24 = (int *)((int)local_138 - (int)local_f0);\n        piVar22 = (int *)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16);\n        if ((int)piVar24 <= (int)((byte *)((int)piVar23 + (int)local_138) + -(int)piVar16)) {\n          piVar22 = piVar24;\n        }\n        if (0 < (int)piVar22) {\n          local_d0 = (int *)((int)piVar27 + (int)piVar22);\n          local_d4 = (int *)((int)local_d4 + 1);\n          *ppiVar2 = piVar16;\n          ppiVar2[1] = piVar22;\n          if ((int)local_d4 < 8) {\n            ppiVar2 = ppiVar2 + 2;\n            piVar27 = local_d0;\n          }\n          else {\n            iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n            if (iVar3 != 0) goto LAB_0800603e;\n            ppiVar2 = local_cc;\n            piVar24 = (int *)((int)local_138 - (int)local_f0);\n            piVar27 = local_d0;\n          }\n        }\n        piVar16 = local_160;\n        puVar29 = local_16c;\n        if (-1 < (int)piVar22) {\n          piVar24 = (int *)((int)piVar24 - (int)piVar22);\n        }\n        if (0 < (int)piVar24) {\n          for (; local_d0 = piVar27, 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar16,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n            piVar27 = local_d0;\n          }\n          goto LAB_08007014;\n        }\n      }\n    }\n    else {\n      local_d4 = (int *)((int)local_d4 + 1);\n      local_d0 = (int *)((int)piVar27 + 1);\n      *ppiVar2 = (int *)&DAT_08009f4c;\n      ppiVar2[1] = (int *)0x1;\n      if ((int)local_d4 < 8) {\n        ppiVar2 = ppiVar2 + 2;\n      }\n      else {\n        iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        ppiVar2 = local_cc;\n      }\n      if (((int)local_f0 < (int)local_138) || (piVar27 = local_d0, ((uint)piVar25 & 1) != 0)) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = (int *)((int)local_d0 + (int)local_118);\n        *ppiVar2 = local_114;\n        ppiVar2[1] = local_118;\n        if ((int)local_d4 < 8) {\n          ppiVar2 = ppiVar2 + 2;\n        }\n        else {\n          iVar3 = __ssprint_r(local_16c,local_160,&local_d8);\n          if (iVar3 != 0) goto LAB_0800603e;\n          ppiVar2 = local_cc;\n        }\n        piVar22 = local_160;\n        puVar29 = local_16c;\n        piVar24 = (int *)((int)local_138 + -1);\n        piVar27 = local_d0;\n        if (0 < (int)piVar24) {\n          for (; 0x10 < (int)piVar24; piVar24 = piVar24 + -4) {\n            local_d4 = (int *)((int)local_d4 + 1);\n            local_d0 = local_d0 + 4;\n            *ppiVar2 = (int *)0x8009f60;\n            ppiVar2[1] = (int *)0x10;\n            if ((int)local_d4 < 8) {\n              ppiVar2 = ppiVar2 + 2;\n            }\n            else {\n              iVar3 = __ssprint_r(puVar29,piVar22,&local_d8);\n              if (iVar3 != 0) goto LAB_0800603e;\n              ppiVar2 = local_cc;\n            }\n          }\nLAB_08007014:\n          local_d0 = (int *)((int)local_d0 + (int)piVar24);\n          *ppiVar2 = (int *)0x8009f60;\n          ppiVar2[1] = piVar24;\njoined_r0x08006a1c:\n          local_d4 = (int *)((int)local_d4 + 1);\n          if (7 < (int)local_d4) goto LAB_08006a20;\n          goto LAB_0800640e;\n        }\n      }\n    }\n  }\n  piVar24 = local_160;\n  puVar29 = local_16c;\n  if ((((uint)piVar25 & 4) != 0) &&\n     (piVar25 = (int *)((int)local_15c - (int)local_168), 0 < (int)piVar25)) {\n    for (; local_d0 = piVar27, 0x10 < (int)piVar25; piVar25 = piVar25 + -4) {\n      while( true ) {\n        local_d4 = (int *)((int)local_d4 + 1);\n        local_d0 = local_d0 + 4;\n        *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n        ppiVar2[1] = (int *)0x10;\n        if ((int)local_d4 < 8) break;\n        iVar3 = __ssprint_r(puVar29,piVar24,&local_d8);\n        if (iVar3 != 0) goto LAB_0800603e;\n        piVar25 = piVar25 + -4;\n        ppiVar2 = local_cc;\n        if ((int)piVar25 < 0x11) goto LAB_0800647a;\n      }\n      ppiVar2 = ppiVar2 + 2;\n      piVar27 = local_d0;\n    }\nLAB_0800647a:\n    local_d4 = (int *)((int)local_d4 + 1);\n    local_d0 = (int *)((int)local_d0 + (int)piVar25);\n    *ppiVar2 = (int *)\"                0000000000000000Infinity\";\n    ppiVar2[1] = piVar25;\n    piVar27 = local_d0;\n    if ((7 < (int)local_d4) &&\n       (iVar3 = __ssprint_r(local_16c,local_160,&local_d8), piVar27 = local_d0, iVar3 != 0))\n    goto LAB_0800603e;\n  }\n  piVar24 = local_15c;\n  if ((int)local_15c < (int)local_168) {\n    piVar24 = local_168;\n  }\n  local_164 = local_164 + (int)piVar24;\n  if ((piVar27 == (int *)0x0) || (iVar3 = __ssprint_r(local_16c,local_160,&local_d8), iVar3 == 0)) {\n    local_d4 = (int *)0x0;\n    if (local_148 != (int *)0x0) {\n      _free_r(local_16c,local_148);\n    }\n    ppiVar2 = local_cc;\nLAB_0800620e:\n    bVar1 = *(byte *)piVar28;\n    param_3 = piVar28;\n    goto joined_r0x08005ef2;\n  }\nLAB_0800603e:\n  if (local_148 != (int *)0x0) {\n    _free_r(local_16c,local_148);\n  }\n  goto LAB_0800604a;\nswitchD_08005f58_caseD_31:\n  local_15c = (int *)0x0;\n  piVar16 = piVar24 + -0xc;\n  piVar22 = piVar28;\n  do {\n    piVar28 = (int *)((int)piVar22 + 1);\n    piVar24 = (int *)(uint)*(byte *)piVar22;\n    local_15c = (int *)((int)piVar16 + (int)local_15c * 10);\n    piVar16 = piVar24 + -0xc;\n    piVar22 = piVar28;\n  } while (piVar16 < (int *)0xa);\n  goto LAB_08005f4e;\nswitchD_08005f58_caseD_20:\n  piVar24 = (int *)(uint)*(byte *)piVar28;\n  if (local_f5 == 0) {\n    local_f5 = 0x20;\n  }\n  goto LAB_08005f4a;\n}\n\n",
            "current_name": "FUNC_08005e9c",
            "entrypoint": "0x08005e9c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005e9c": "FUNC_08005e9c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078a0": {
            "called": [
                "FUN_080098c0"
            ],
            "calling": [
                "FUN_08005d20"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080078a4) */\n\nvoid FUNC_080078a0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080078a0",
            "entrypoint": "0x080078a0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080078a0": "FUNC_080078a0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080078c0": {
            "additional_data": {
                "FUN_080078c0": {
                    "calculate_division": 16,
                    "calculate_division_result": 1,
                    "calculate_integer_division": 1,
                    "calculate_quotient": 4,
                    "calculate_ratio": 3,
                    "divide_and_subtract": 2,
                    "perform_division": 1,
                    "reverse_division": 2
                },
                "iVar3": {
                    "carry": 28,
                    "carry_over": 1,
                    "remainder": 1,
                    "temp1": 1
                },
                "iVar4": {
                    "comparison_result": 1,
                    "dividend_length": 4,
                    "dividend_size": 2,
                    "divisor_len": 2,
                    "divisor_length": 7,
                    "divisor_size": 2,
                    "input_length": 1,
                    "length": 3,
                    "max_iterations": 1,
                    "numerator_length": 3,
                    "numerator_value": 1,
                    "output_length": 1,
                    "size": 2,
                    "size1": 1
                },
                "iVar5": {
                    "current_index": 1,
                    "denominator_value": 1,
                    "dividend_len": 1,
                    "dividend_length": 5,
                    "divisor_index": 1,
                    "divisor_length": 1,
                    "divisor_size": 1,
                    "index": 13,
                    "last_digit_index": 1,
                    "last_element_index": 1,
                    "last_non_zero_index": 2,
                    "quotient_length": 1,
                    "size2": 1,
                    "temp_length": 1
                },
                "param_1": {
                    "dividend": 17,
                    "input_array": 2,
                    "input_array1": 3,
                    "input_array_1": 2,
                    "input_num_array": 1,
                    "numerator": 6
                },
                "param_2": {
                    "denominator": 6,
                    "divisor": 17,
                    "divisor_num_array": 1,
                    "input_array2": 3,
                    "input_array_2": 2,
                    "output_array": 2
                },
                "puVar11": {
                    "current_divisor_digit": 1,
                    "current_divisor_element": 1,
                    "current_divisor_ptr": 1,
                    "current_element_ptr": 1,
                    "current_ptr2": 1,
                    "current_quotient_ptr": 1,
                    "denominator_ptr": 3,
                    "denominator_ptr_copy": 1,
                    "denominator_ptr_temp": 1,
                    "dividend_ptr_plus_one2": 1,
                    "divisor_copy_ptr": 1,
                    "divisor_current": 1,
                    "divisor_current_ptr": 1,
                    "divisor_num_array_ptr": 1,
                    "divisor_ptr": 2,
                    "divisor_ptr_temp": 1,
                    "p_divisor_current": 1,
                    "p_quotient": 1,
                    "p_quotient_current": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "ptr5": 3,
                    "ptr_divisor_current": 1,
                    "ptr_divisor_iter": 1,
                    "ptr_input": 1
                },
                "puVar12": {
                    "current_divisor_ptr": 1,
                    "denominator_next_ptr": 1,
                    "denominator_ptr_temp2": 1,
                    "divisor_next": 1,
                    "divisor_next_digit_ptr": 1,
                    "divisor_num_array_ptr_next": 1,
                    "divisor_ptr_next": 2,
                    "divisor_ptr_plus_one": 1,
                    "next_denominator_ptr": 2,
                    "next_digit_ptr": 1,
                    "next_divisor_digit": 1,
                    "next_divisor_element": 1,
                    "next_divisor_iter": 1,
                    "next_divisor_ptr": 2,
                    "next_element_ptr": 1,
                    "next_ptr": 1,
                    "next_ptr2": 1,
                    "p_divisor_cur": 1,
                    "p_divisor_current": 1,
                    "p_next_divisor": 1,
                    "ptr3": 1,
                    "ptr6": 3,
                    "ptr_divisor_next": 1,
                    "ptr_input_next": 1
                },
                "puVar2": {
                    "current_dividend_ptr": 1,
                    "current_element": 1,
                    "dividend_ptr": 10,
                    "input_num_array_ptr": 1,
                    "numerator_ptr": 5,
                    "p_dividend": 3,
                    "ptr1": 5,
                    "ptr_dividend": 2,
                    "ptr_input": 2,
                    "quotient": 1
                },
                "puVar7": {
                    "denominator_ptr": 4,
                    "dividend_ptr_plus_one": 1,
                    "divisor": 1,
                    "divisor_array": 1,
                    "divisor_num_array_ptr": 1,
                    "divisor_ptr": 9,
                    "numerator_digits": 1,
                    "p_divisor": 3,
                    "ptr2": 4,
                    "ptr2_curr": 1,
                    "ptr_denominator": 1,
                    "ptr_divisor": 2,
                    "ptr_output": 2
                },
                "puVar8": {
                    "denominator_digits": 1,
                    "dividend": 2,
                    "dividend_array": 2,
                    "dividend_copy_ptr": 1,
                    "dividend_digits": 1,
                    "dividend_final_ptr": 1,
                    "dividend_ptr": 2,
                    "dividend_ptr2": 1,
                    "divisor_ptr": 1,
                    "input_num_array_ptr": 1,
                    "numerator_arr": 1,
                    "numerator_ptr": 2,
                    "numerator_ptr_copy": 1,
                    "output_array1": 1,
                    "p_quotient": 3,
                    "ptr1_curr": 1,
                    "ptr3": 3,
                    "ptr_first_array": 1,
                    "ptr_input": 1,
                    "ptr_numerator": 1,
                    "ptr_quotient": 1,
                    "ptr_result": 1,
                    "quotient_ptr": 1
                },
                "puVar9": {
                    "denominator_arr": 1,
                    "denominator_last_ptr": 1,
                    "divisor_digits": 1,
                    "divisor_end": 1,
                    "divisor_end_ptr": 3,
                    "divisor_final_ptr": 1,
                    "divisor_last_digit_ptr": 1,
                    "divisor_num_array_ptr_end": 1,
                    "divisor_ptr2": 1,
                    "divisor_ptr_end": 1,
                    "divisor_ptr_plus_idx": 1,
                    "last_denominator_ptr": 1,
                    "last_digit_ptr": 1,
                    "last_divisor_ptr": 1,
                    "last_element": 2,
                    "output_array2": 1,
                    "p_divisor_end": 3,
                    "ptr2_end": 1,
                    "ptr4": 3,
                    "ptr_divisor_end": 2,
                    "ptr_last_element": 1,
                    "ptr_last_output": 1,
                    "ptr_output_end": 1
                },
                "uVar1": {
                    "carry": 1,
                    "quotient": 19,
                    "remainder": 1,
                    "result": 3,
                    "sum": 1,
                    "temp1": 4,
                    "temp_value": 1,
                    "temp_var": 1
                },
                "uVar10": {
                    "carry": 1,
                    "carry2": 4,
                    "carry_divided": 1,
                    "carry_extended": 2,
                    "carry_high": 1,
                    "carry_next": 1,
                    "carry_quotient": 1,
                    "overflow_value": 1,
                    "partial_product": 1,
                    "temp": 8,
                    "temp2": 4,
                    "temp_carry": 1,
                    "temp_result": 2
                },
                "uVar6": {
                    "div_value": 1,
                    "division_result": 2,
                    "divisor": 1,
                    "factor": 1,
                    "original_quotient": 1,
                    "quotient": 7,
                    "quotient_increment": 2,
                    "quotient_multiplier": 1,
                    "quotient_value": 1,
                    "ratio": 2,
                    "remainder": 1,
                    "result": 11
                }
            },
            "called": [
                "FUN_080094f8"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nuint calculate_division_result_080078c0(int dividend,int divisor)\n\n{\n  uint quotient;\n  uint *dividend_ptr;\n  int carry;\n  int divisor_length;\n  int index;\n  uint result;\n  uint *divisor_ptr;\n  uint *ptr3;\n  uint *p_divisor_end;\n  uint temp;\n  uint *denominator_ptr;\n  uint *ptr6;\n  \n  divisor_length = *(int *)(divisor + 0x10);\n  if (*(int *)(dividend + 0x10) < divisor_length) {\n    return 0;\n  }\n  index = divisor_length + -1;\n  divisor_ptr = (uint *)(divisor + 0x14);\n  ptr3 = (uint *)(dividend + 0x14);\n  result = ptr3[index] / (divisor_ptr[index] + 1);\n  p_divisor_end = divisor_ptr + index;\n  if (result != 0) {\n    quotient = 0;\n    carry = 0;\n    dividend_ptr = ptr3;\n    denominator_ptr = divisor_ptr;\n    do {\n      ptr6 = denominator_ptr + 1;\n      quotient = result * (*denominator_ptr & 0xffff) + quotient;\n      temp = result * (*denominator_ptr >> 0x10) + (quotient >> 0x10);\n      quotient = (carry - (quotient & 0xffff)) + (*dividend_ptr & 0xffff);\n      carry = ((*dividend_ptr >> 0x10) - (temp & 0xffff)) + ((int)quotient >> 0x10);\n      *dividend_ptr = quotient & 0xffff | carry * 0x10000;\n      carry = carry >> 0x10;\n      quotient = temp >> 0x10;\n      dividend_ptr = dividend_ptr + 1;\n      denominator_ptr = ptr6;\n    } while (ptr6 <= p_divisor_end);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + divisor_length + -2) && (ptr3[divisor_length + -2] == 0)) {\n        dividend_ptr = ptr3 + divisor_length + -3;\n        do {\n          index = index + -1;\n          if (dividend_ptr <= ptr3) break;\n          quotient = *dividend_ptr;\n          dividend_ptr = dividend_ptr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  divisor_length = __mcmp();\n  if (-1 < divisor_length) {\n    divisor_length = 0;\n    result = result + 1;\n    dividend_ptr = ptr3;\n    do {\n      denominator_ptr = divisor_ptr + 1;\n      quotient = (divisor_length - (*divisor_ptr & 0xffff)) + (*dividend_ptr & 0xffff);\n      divisor_length = ((*dividend_ptr >> 0x10) - (*divisor_ptr >> 0x10)) + ((int)quotient >> 0x10);\n      *dividend_ptr = quotient & 0xffff | divisor_length * 0x10000;\n      divisor_length = divisor_length >> 0x10;\n      dividend_ptr = dividend_ptr + 1;\n      divisor_ptr = denominator_ptr;\n    } while (denominator_ptr <= p_divisor_end);\n    if (ptr3[index] == 0) {\n      if ((ptr3 < ptr3 + index + -1) && (ptr3[index + -1] == 0)) {\n        divisor_ptr = ptr3 + index + -2;\n        do {\n          index = index + -1;\n          if (divisor_ptr <= ptr3) break;\n          quotient = *divisor_ptr;\n          divisor_ptr = divisor_ptr + -1;\n        } while (quotient == 0);\n      }\n      *(int *)(dividend + 0x10) = index;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_division_result_080078c0",
            "entrypoint": "0x080078c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078c0": "calculate_division_result_080078c0",
                "iVar3": "carry",
                "iVar4": "divisor_length",
                "iVar5": "index",
                "param_1": "dividend",
                "param_2": "divisor",
                "puVar11": "denominator_ptr",
                "puVar12": "ptr6",
                "puVar2": "dividend_ptr",
                "puVar7": "divisor_ptr",
                "puVar8": "ptr3",
                "puVar9": "p_divisor_end",
                "uVar1": "quotient",
                "uVar10": "temp",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e8": {
            "additional_data": {
                "BOOL_STACK1": {
                    "is_zero": 1
                },
                "BOOL_STACK2": {
                    "is_negative": 1
                },
                "BOOL_STACK3": {
                    "is_denorm": 1
                },
                "FUN_08000158": {
                    "sub_function21": 1
                },
                "FUN_0800015c": {
                    "sub_function17": 1
                },
                "FUN_080003d4": {
                    "sub_function2": 1
                },
                "FUN_080003f4": {
                    "sub_function19": 1
                },
                "FUN_080004c8": {
                    "sub_function16": 1
                },
                "FUN_0800071c": {
                    "sub_function18": 1
                },
                "FUN_08000998": {
                    "sub_function14": 1
                },
                "FUN_080009ac": {
                    "sub_function5": 1
                },
                "FUN_080009d4": {
                    "sub_function7": 1
                },
                "FUN_080009e8": {
                    "sub_function8": 1
                },
                "FUN_08001084": {
                    "sub_function3": 1
                },
                "FUN_0800119c": {
                    "sub_function20": 1
                },
                "FUN_080078c0": {
                    "sub_function4": 1
                },
                "FUN_080079e8": {
                    "convert_double_to_string": 4,
                    "convert_float_to_ascii": 1,
                    "convert_float_to_string": 8,
                    "convert_float_to_text": 2,
                    "convert_floating_point_to_string": 2,
                    "convert_number_to_char_array": 1,
                    "float_to_string": 1,
                    "format_double_to_string": 1,
                    "format_float": 3,
                    "format_floating_point": 1,
                    "format_floating_point_number": 1,
                    "formatted_number_to_string": 1,
                    "parse_double": 1,
                    "parse_float": 1,
                    "parse_float_to_string": 1
                },
                "FUN_080090c0": {
                    "sub_function9": 1
                },
                "FUN_0800910c": {
                    "sub_function1": 1
                },
                "FUN_08009120": {
                    "sub_function23": 1
                },
                "FUN_080091a4": {
                    "sub_function13": 1
                },
                "FUN_08009244": {
                    "sub_function11": 1
                },
                "FUN_08009258": {
                    "sub_function6": 1
                },
                "FUN_080093a4": {
                    "sub_function10": 1
                },
                "FUN_08009444": {
                    "sub_function24": 1
                },
                "FUN_080094f8": {
                    "sub_function12": 1
                },
                "FUN_08009530": {
                    "sub_function22": 1
                },
                "FUN_08009630": {
                    "sub_function15": 1
                },
                "_Balloc": {
                    "allocate_function": 1
                },
                "_Bfree": {
                    "free_function": 1
                },
                "__aeabi_d2iz": {
                    "float_to_integer_rounding": 1
                },
                "__aeabi_dadd": {
                    "float_addition": 1
                },
                "__aeabi_dcmpeq": {
                    "float_comparison1": 1
                },
                "__aeabi_i2d": {
                    "int_to_float_conversion": 1
                },
                "__d2b": {
                    "float_to_bits": 1
                },
                "__divdf3": {
                    "float_division": 1
                },
                "__floatunsidf": {
                    "bits_to_float": 1
                },
                "__hi0bits": {
                    "highest_zero_bits": 1
                },
                "__lshift": {
                    "left_shift": 1
                },
                "__mcmp": {
                    "compare_function": 1
                },
                "__mdiff": {
                    "multiply_difference_function": 1
                },
                "__muldf3": {
                    "float_multiplication": 1
                },
                "__multadd": {
                    "multiply_add_function": 1
                },
                "__pow5mult": {
                    "power_of5_multiplication": 1
                },
                "__subdf3": {
                    "float_subtraction": 1
                },
                "bVar1": {
                    "add_decimal_point": 1,
                    "bool_var1": 1,
                    "flag1": 1,
                    "has_decimal_separator": 1,
                    "is_inf_nan": 1,
                    "is_infinity": 15,
                    "is_infinity_flag": 1,
                    "is_less_than_one": 1,
                    "is_negative": 1,
                    "is_scientific": 1,
                    "is_small_value": 1,
                    "is_valid": 1,
                    "is_zero": 1
                },
                "bVar2": {
                    "add_one_flag": 1,
                    "bool_var2": 1,
                    "decrement": 1,
                    "decrement_by_one": 1,
                    "decrement_exponent": 6,
                    "decrement_precision": 1,
                    "decrement_significand": 1,
                    "flag2": 1,
                    "has_leading_zero": 1,
                    "has_leading_zeros": 1,
                    "is_exponent_less_than17": 1,
                    "is_infinity": 1,
                    "is_less_than_one": 1,
                    "is_negative": 1,
                    "is_negative_zero": 1,
                    "is_round_down": 1,
                    "is_shifted": 1,
                    "is_zero": 1,
                    "needs_rounding": 1,
                    "reduced": 1,
                    "remove_trailing_zeros": 1,
                    "round_up": 1
                },
                "bVar22": {
                    "decimal_point": 1
                },
                "bVar23": {
                    "contains_decimal_point": 1
                },
                "bVar24": {
                    "exponent_is_negative": 1
                },
                "bVar25": {
                    "b_var25": 1,
                    "bool_var25": 1,
                    "is_negative": 3,
                    "is_negative1": 1,
                    "temp21": 1,
                    "temp_var": 1,
                    "tmp9": 1
                },
                "bVar26": {
                    "is_zero": 1
                },
                "bVar27": {
                    "is_infinity": 1
                },
                "bVar28": {
                    "is_not_a_number": 1
                },
                "bVar3": {
                    "add_exponent": 1,
                    "add_extra_zero": 1,
                    "add_leading_zero": 2,
                    "add_leading_zeros": 1,
                    "add_offset": 1,
                    "add_one": 2,
                    "add_trailing_zeroes": 1,
                    "append_trailing_zeros": 1,
                    "append_zeroes": 1,
                    "bool_var3": 1,
                    "flag3": 1,
                    "is_addition_required": 1,
                    "is_decimal": 1,
                    "is_last_digit_equal_or_greater": 1,
                    "is_negative": 1,
                    "is_negative_zero": 1,
                    "is_round_up": 1,
                    "is_rounding_enabled": 1,
                    "is_scientific": 1,
                    "is_scientific_notation": 1,
                    "multiply_result_by_five": 1,
                    "show_trailing_zeros": 2,
                    "special_case_flag": 1,
                    "use_exponential": 1
                },
                "bVar5": {
                    "bit": 2,
                    "bool_value": 1,
                    "byte_flag": 1,
                    "byte_val": 3,
                    "byte_value": 1,
                    "byte_var5": 1,
                    "cmp_result": 1,
                    "compare_result": 1,
                    "comparison": 1,
                    "dummy_var": 1,
                    "is_divisible_by_five": 1,
                    "is_greater_than_zero": 1,
                    "is_less": 1,
                    "is_less_than_one": 1,
                    "is_less_than_zero": 2,
                    "is_negative_int": 1,
                    "is_valid_digit": 1,
                    "is_zero": 1,
                    "mult_by_factor": 1,
                    "overflow": 1,
                    "result_is_empty": 1,
                    "should_increment": 1,
                    "temp_byte": 1
                },
                "bool": {
                    "boolean": 1
                },
                "byte": {
                    "byte": 1
                },
                "cVar": {
                    "character_var": 1
                },
                "cVar1": {
                    "is_negative": 1
                },
                "cVar2": {
                    "is_infinity": 1
                },
                "cVar3": {
                    "is_nan": 1
                },
                "cVar4": {
                    "char": 2,
                    "char_flag": 1,
                    "char_val": 3,
                    "char_value": 2,
                    "char_var": 1,
                    "character": 3,
                    "character1": 1,
                    "current_digit_char": 1,
                    "digit": 7,
                    "digit_char": 5
                },
                "char": {
                    "character": 1
                },
                "iVar": {
                    "integer_var": 1
                },
                "iVar100": {
                    "bit_offset": 1
                },
                "iVar14": {
                    "allocated_size": 1,
                    "buffer_index": 1,
                    "diff": 1,
                    "digit_index": 1,
                    "exponent": 1,
                    "exponent_adjustment": 1,
                    "exponent_copy": 1,
                    "exponent_length": 1,
                    "exponent_shifted": 1,
                    "extra_exp": 1,
                    "generate_array_result": 1,
                    "i": 1,
                    "i_var14": 1,
                    "index": 1,
                    "integer_var14": 1,
                    "iterator2": 1,
                    "memory_pointer": 1,
                    "num_digits_printed": 1,
                    "p_mantissa": 1,
                    "param_20": 1,
                    "str_len": 1,
                    "temp8": 1,
                    "temp_int3": 1,
                    "temp_int4": 1,
                    "temp_int_var4": 1,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "tmp1": 1,
                    "tmp4": 1
                },
                "iVar15": {
                    "binary_exponent_remaining": 1,
                    "carry": 1,
                    "count": 1,
                    "diff": 1,
                    "exp_adj": 1,
                    "exp_offset": 1,
                    "exponent": 1,
                    "exponent_diff": 2,
                    "exponent_difference": 2,
                    "i_var15": 1,
                    "integer_var15": 1,
                    "iterator3": 1,
                    "j": 1,
                    "leading_zeros": 1,
                    "num_digits": 1,
                    "param_1_c": 1,
                    "pre_shift_amount": 1,
                    "precision_diff": 1,
                    "temp19": 1,
                    "temp_int4": 2,
                    "temp_int5": 1,
                    "temp_int_var8": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "tmp2": 1,
                    "tmp5": 1
                },
                "iVar16": {
                    "power": 1
                },
                "iVar17": {
                    "case_value": 1
                },
                "iVar18": {
                    "shift": 1
                },
                "iVar19": {
                    "binary_exponent_length": 1,
                    "denormalized_exponent": 1,
                    "exp": 1,
                    "exp_digit": 1,
                    "exp_mult_result": 1,
                    "exponent_shift": 1,
                    "i": 1,
                    "i_var19": 1,
                    "integer_var19": 1,
                    "iterator4": 1,
                    "local_var12": 1,
                    "loop_variable": 1,
                    "num_digits": 1,
                    "num_shifts": 1,
                    "param_1_b": 1,
                    "pow_of5_value": 1,
                    "pow_output": 1,
                    "power": 1,
                    "power_of_five": 1,
                    "remaining_decimal_places": 1,
                    "shift": 1,
                    "shift_count": 1,
                    "temp18": 1,
                    "temp_int2": 1,
                    "temp_int3": 1,
                    "temp_int5": 1,
                    "temp_int_var6": 1,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "tmp3": 1,
                    "tmp6": 1
                },
                "iVar24": {
                    "ascii_val": 1,
                    "char_value": 2,
                    "character_value": 1,
                    "digit": 3,
                    "digit_char": 1,
                    "digit_value": 1,
                    "div_mod_result": 1,
                    "exponent_comparison_result": 1,
                    "i": 1,
                    "i_var24": 1,
                    "integer_var24": 1,
                    "integer_variable1": 1,
                    "is_negative_exp": 1,
                    "l": 1,
                    "param_21": 1,
                    "temp28": 1,
                    "temp_int1": 1,
                    "temp_int2": 1,
                    "temp_int6": 1,
                    "temp_int_var7": 1,
                    "temp_value4": 1,
                    "temp_var": 2,
                    "tmp4": 1,
                    "tmp8": 1
                },
                "iVar25": {
                    "num_digits_remaining": 1
                },
                "iVar39": {
                    "str_length": 1
                },
                "iVar48": {
                    "existing_bits": 1
                },
                "iVar60": {
                    "total_digit_count": 1
                },
                "iVar63": {
                    "local_70": 1
                },
                "iVar65": {
                    "local_60": 1
                },
                "iVar66": {
                    "local_5c": 1
                },
                "iVar7": {
                    "cmp_result": 1,
                    "count": 2,
                    "exponent_part2": 1,
                    "exponent_sign": 1,
                    "i": 1,
                    "i_var7": 1,
                    "increment_value": 1,
                    "index": 1,
                    "integer_var7": 1,
                    "iterator1": 1,
                    "k": 1,
                    "num_digits_generated": 1,
                    "num_digits_sub1": 1,
                    "param_27": 1,
                    "quo_mult_result": 1,
                    "scale": 1,
                    "shift": 1,
                    "shift_amount": 2,
                    "sign_buffer": 1,
                    "temp20": 1,
                    "temp_int": 1,
                    "temp_int5": 1,
                    "temp_int6": 1,
                    "temp_int8": 1,
                    "temp_int_var9": 1,
                    "temp_var": 1,
                    "zeros_to_add": 1
                },
                "iVar70": {
                    "exp": 1
                },
                "iVar8": {
                    "cmp_result": 1,
                    "compare_result": 2,
                    "compare_result1": 1,
                    "comparison": 1,
                    "comparison_result": 3,
                    "comparison_var": 1,
                    "difference": 1,
                    "digit_value": 1,
                    "excess_shift": 1,
                    "i": 1,
                    "i_var8": 1,
                    "integer_var8": 1,
                    "is_less_than_half": 1,
                    "j": 1,
                    "num_digits": 1,
                    "op1": 1,
                    "param_22": 1,
                    "remaining_digits": 1,
                    "significand_bits": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_int2": 1,
                    "temp_int6": 1,
                    "temp_int7": 1,
                    "temp_int_var2": 1,
                    "temp_var": 1
                },
                "iVar9": {
                    "bi": 1,
                    "bias": 1,
                    "compare_result2": 1,
                    "computation_result": 1,
                    "dividend_cmp": 1,
                    "i_var9": 1,
                    "integer_part": 1,
                    "integer_var9": 1,
                    "is_greater_than_zero": 1,
                    "k": 1,
                    "mantissa_comparison": 1,
                    "num_digit_dec": 1,
                    "num_leading_zeros": 1,
                    "op2": 1,
                    "param_23": 1,
                    "quotient": 1,
                    "reduced": 1,
                    "result": 2,
                    "return_var": 1,
                    "temp4": 1,
                    "temp_int3": 1,
                    "temp_int7": 1,
                    "temp_int8": 1,
                    "temp_int_var3": 1,
                    "temp_pointer": 1,
                    "temp_var": 1,
                    "tmp7": 1
                },
                "iVar97": {
                    "delta": 1
                },
                "iVarMarkCC": {
                    "mark_cc": 1
                },
                "int": {
                    "integer": 1
                },
                "local_2c": {
                    "16_bytes": 1,
                    "arr": 1,
                    "array_sizes": 1,
                    "binary_exponent": 1,
                    "bit_shifts": 1,
                    "digit_buffer": 1,
                    "exponent_digits": 1,
                    "helper_array": 1,
                    "largest_pow5": 1,
                    "local_array1": 2,
                    "local_array2": 1,
                    "local_var11": 1,
                    "loop_variable_array": 1,
                    "num_digits_array": 1,
                    "param_33": 1,
                    "shift_amount_arr": 1,
                    "shift_array": 1,
                    "shift_buf": 1,
                    "temp_arr": 2,
                    "temp_array": 2,
                    "temp_int_array": 2,
                    "temp_var": 1,
                    "temporary_array": 1,
                    "tmp": 1
                },
                "local_30": {
                    "buffer": 1,
                    "canonical_digit_length": 1,
                    "decimal_point_index": 1,
                    "digit_len": 1,
                    "exp_ten": 1,
                    "exponent": 1,
                    "exponent_bits": 1,
                    "exponent_start_index": 1,
                    "local_array1": 1,
                    "local_var10": 1,
                    "local_var12": 1,
                    "local_variable18": 1,
                    "num_digits": 1,
                    "num_digits_tmp": 1,
                    "param_32": 1,
                    "probably_undefined": 1,
                    "shift": 1,
                    "shift_amount": 3,
                    "significant_bits": 1,
                    "temp_int10": 1,
                    "temp_int_var4": 1,
                    "temp_var": 1,
                    "temp_var5": 1,
                    "temporary_var": 1,
                    "trailing_zeroes": 1,
                    "var12": 1
                },
                "local_34": {
                    "buffer_index": 1,
                    "digit": 1,
                    "digit_count_copy": 1,
                    "digit_index": 1,
                    "exp_adjust": 1,
                    "force_sign": 1,
                    "fractional_exponent": 1,
                    "is_zero": 1,
                    "local_var11": 1,
                    "local_var9": 1,
                    "local_variable17": 1,
                    "loop_variable4_temp": 1,
                    "mantissa_offset": 1,
                    "mantissa_start_index": 1,
                    "num_digits": 1,
                    "num_digits_after_decimal_point": 1,
                    "num_integer_digits": 1,
                    "pow_counter": 1,
                    "search_index": 1,
                    "temp_exp2": 1,
                    "temp_exponent": 1,
                    "temp_num_bits": 1,
                    "temp_uint": 1,
                    "temp_uint_var9": 1,
                    "temp_var": 1,
                    "temp_var4": 1,
                    "tmp3": 1,
                    "var11": 1
                },
                "local_38": {
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "digit_cmp_again": 1,
                    "digit_index": 1,
                    "digit_offset_copy": 1,
                    "formatted_length": 1,
                    "input_length": 1,
                    "integer_exponent": 1,
                    "local_var10": 1,
                    "local_var8": 1,
                    "local_variable16": 1,
                    "loop_variable3_temp": 1,
                    "mantissa_length": 1,
                    "max_digits": 2,
                    "min_exponent_digits": 1,
                    "non_significant": 1,
                    "num_fractional_digits": 1,
                    "num_leading_spaces": 1,
                    "one_rounding_bound": 1,
                    "round_off": 1,
                    "shift_count": 1,
                    "significant_digits": 1,
                    "temp_exp": 1,
                    "temp_uint_var8": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "tmp2": 1,
                    "var10": 1
                },
                "local_44": {
                    "high_int": 1,
                    "temp_val": 1
                },
                "local_48": {
                    "digit_mask": 1,
                    "exponent_adj": 1,
                    "highest_significant_bit": 1,
                    "infinity_threshold": 1,
                    "leftover": 1,
                    "local_var6": 1,
                    "local_var9": 1,
                    "local_variable15": 1,
                    "low_int": 1,
                    "max_digits_before_dot": 1,
                    "max_exponent_digits": 1,
                    "num_decimal_digits": 1,
                    "overflowed_digits": 1,
                    "pow_10_table_index": 1,
                    "pow_val": 1,
                    "read_first_digit": 1,
                    "shift_amount": 1,
                    "temp_exponent": 1,
                    "temp_float4": 1,
                    "temp_num_digits": 1,
                    "temp_result_low": 1,
                    "temp_u_int4": 1,
                    "temp_uint_var6": 1,
                    "temp_var": 1,
                    "tmp_variable5": 1,
                    "var9": 1,
                    "zero_rounding_bound": 1
                },
                "local_58": {
                    "add_extra_zero": 1,
                    "carry": 1,
                    "digit_limit": 1,
                    "exp_offset": 1,
                    "exponent_length": 1,
                    "exponent_zero": 1,
                    "has_decimal_point": 1,
                    "has_decimal_separator_width": 1,
                    "has_zero_in_mantissa": 1,
                    "infinity_offset": 1,
                    "is_less_than": 1,
                    "is_updated": 1,
                    "is_zero": 1,
                    "leading_zeros": 1,
                    "local_var5": 1,
                    "local_var8": 1,
                    "local_variable14": 1,
                    "num_leading_digits": 1,
                    "num_trailing_zeroes": 1,
                    "overflow_digits": 1,
                    "pad_length_temp": 1,
                    "round_val": 1,
                    "significant_digits": 1,
                    "temp_uint_var5": 1,
                    "temp_var": 1,
                    "trailing_zeroes": 1,
                    "var8": 1,
                    "zero_flag": 1
                },
                "local_5c": {
                    "affected_digits": 1,
                    "current_exponent_shift": 1,
                    "decimal_offset": 1,
                    "diff": 1,
                    "digit_index": 2,
                    "extra_bits": 1,
                    "extra_zeros": 1,
                    "fractional_exponent": 1,
                    "integer_part_length": 1,
                    "leading_digits": 1,
                    "leading_zeroes": 1,
                    "leading_zeros": 1,
                    "local_var4": 1,
                    "local_var7": 1,
                    "local_variable13": 1,
                    "num_digits_non_zero": 1,
                    "num_trailing_zeros_format": 1,
                    "number_of_digits": 1,
                    "shift_amount": 1,
                    "shift_val4": 1,
                    "temp_int_var3": 1,
                    "temp_var": 1,
                    "tmp_variable4": 1,
                    "var7": 1,
                    "zero_exponent_digits": 1
                },
                "local_60": {
                    "exponent_offset": 1,
                    "exponent_shift": 1,
                    "extra_digits": 1,
                    "fraction_shift": 1,
                    "fractional_part_length": 1,
                    "local_var3": 1,
                    "local_var6": 1,
                    "local_variable12": 1,
                    "loop_variable2_temp": 1,
                    "num_digits": 1,
                    "num_digits_remaining_backup": 1,
                    "num_trailing_zeros_width": 1,
                    "offset_exp": 1,
                    "param_2_a": 1,
                    "rounding": 1,
                    "safety_limit": 1,
                    "shift": 2,
                    "shift_amount": 1,
                    "shift_temp": 1,
                    "shift_val3": 1,
                    "shrink_exponent": 1,
                    "temp_int9": 1,
                    "temp_int_var2": 1,
                    "temp_var": 1,
                    "var6": 1
                },
                "local_674": {
                    "leading_zeroes": 1
                },
                "local_678": {
                    "trailing_decimal_zeros": 1
                },
                "local_68": {
                    "decs": 1,
                    "digit_count": 1,
                    "digits": 1,
                    "exponent_digits": 1,
                    "exponent_length": 1,
                    "extra_zeros": 1,
                    "flag_length": 1,
                    "format_options_temp": 1,
                    "int_shift": 1,
                    "leading_zeroes": 1,
                    "local_var2": 1,
                    "local_var5": 1,
                    "local_variable11": 1,
                    "min_digits": 1,
                    "min_exponent_digits": 1,
                    "num_digits_width": 1,
                    "num_fractional_part_digits": 1,
                    "num_sign_chars": 1,
                    "round_multiplier": 1,
                    "shift_val2": 1,
                    "temp_uint_var4": 1,
                    "temp_var": 1,
                    "total_digits": 2,
                    "var5": 1,
                    "width": 1
                },
                "local_70": {
                    "abs_exponent": 1,
                    "digit_count": 1,
                    "digit_offset": 1,
                    "digits_shifted": 1,
                    "exponent_length": 1,
                    "exponent_offset": 1,
                    "int_len": 1,
                    "integer_part_digits": 1,
                    "leading_zeroes": 1,
                    "local_var1": 1,
                    "local_var4": 1,
                    "local_variable10": 1,
                    "loop_variable_temp": 1,
                    "min_exponent": 1,
                    "n_chars": 1,
                    "num_digits": 1,
                    "num_trailing_zeros_exponent": 1,
                    "out_index": 1,
                    "power": 1,
                    "shift": 1,
                    "shift_val": 1,
                    "shift_val1": 1,
                    "significant_digits": 1,
                    "temp_int_var": 1,
                    "temp_var": 1,
                    "var4": 1,
                    "whole_number_digits": 1
                },
                "local_74": {
                    "dec_exponent": 1,
                    "exp_val": 1,
                    "exponent": 3,
                    "exponent_abs_copy": 1,
                    "exponent_bits": 1,
                    "exponent_difference": 1,
                    "exponent_result": 2,
                    "exponent_value": 1,
                    "final_exponent": 1,
                    "is_double_na_n": 1,
                    "local_var3": 1,
                    "local_variable9": 1,
                    "localexp": 1,
                    "min_exponent": 1,
                    "num_decimals": 1,
                    "num_digits": 1,
                    "num_digits_counter": 1,
                    "num_digits_exponent": 1,
                    "output_length": 1,
                    "output_length_temp": 1,
                    "result_length": 1,
                    "temp_uint_var3": 1,
                    "temp_var": 1,
                    "var3": 1
                },
                "local_7c": {
                    "abs_exponent": 2,
                    "adjusted_exponent": 1,
                    "adjusted_fraction": 1,
                    "double_value": 2,
                    "exponent_copy": 1,
                    "exponent_copy_temp": 1,
                    "exponent_value": 1,
                    "f_low": 1,
                    "is_negative": 1,
                    "lo_temp": 1,
                    "local_exponent_copy": 1,
                    "local_var2": 1,
                    "local_variable8": 1,
                    "mant": 1,
                    "modified_exponent": 1,
                    "original_exponent": 2,
                    "original_value": 1,
                    "precision_backup": 1,
                    "temp_float3": 1,
                    "temp_uint_var2": 1,
                    "temp_var": 1,
                    "tmp_value": 1,
                    "unsigned_exponent": 1,
                    "var2": 1
                },
                "local_80": {
                    "current_digit": 1,
                    "divisor_float": 1,
                    "exponent_temp": 2,
                    "exponent_with_extra_zeros": 1,
                    "fraction_part": 1,
                    "high_bits": 1,
                    "high_part": 1,
                    "integer_part": 1,
                    "local_exponent": 1,
                    "local_var1": 1,
                    "local_variable7": 1,
                    "mantissa_high": 1,
                    "multiplier": 1,
                    "normalized_significand": 1,
                    "numerator": 1,
                    "output_exponent": 1,
                    "param_1_f": 1,
                    "param_len": 1,
                    "pow_res": 1,
                    "temp_float2": 1,
                    "temp_power": 1,
                    "temp_result_high": 1,
                    "temp_uint_var1": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "tmp_interval": 1,
                    "var1": 1,
                    "whole_number": 1
                },
                "local_84": {
                    "i": 1
                },
                "local_9c": {
                    "var_5c": 1
                },
                "memcpy": {
                    "copy_function": 1
                },
                "param_1": {
                    "arg1": 1,
                    "buffer": 1,
                    "float": 1,
                    "float_value": 3,
                    "input": 1,
                    "input1": 1,
                    "input_float": 1,
                    "num": 2,
                    "number": 5,
                    "pointer_to_memory": 1,
                    "precision": 1,
                    "value": 13
                },
                "param_2": {
                    "arg2": 1,
                    "decimal_places": 1,
                    "decimal_point": 1,
                    "decimals": 1,
                    "first_digit": 1,
                    "flags": 5,
                    "format": 3,
                    "format_flags": 1,
                    "input2": 1,
                    "mantissa_high_hex": 1,
                    "num_digits": 2,
                    "param1": 2,
                    "param2": 1,
                    "param_2": 1,
                    "param_flags": 1,
                    "param_value1": 1,
                    "precision": 6,
                    "precision_type": 1
                },
                "param_3": {
                    "arg3": 1,
                    "exponent": 1,
                    "exponent_significand": 1,
                    "f_high": 1,
                    "fractional_part": 1,
                    "hi": 1,
                    "input3": 1,
                    "int_part": 1,
                    "mantissa": 5,
                    "mantissa_low_hex": 1,
                    "param2": 2,
                    "param3": 1,
                    "param_3": 1,
                    "param_value2": 1,
                    "real_exponent": 1,
                    "sign": 8,
                    "significand": 2,
                    "significand_high": 1
                },
                "param_4": {
                    "arg4": 1,
                    "exp": 1,
                    "exp_sign": 1,
                    "exponent": 15,
                    "f_low": 1,
                    "frac_part": 1,
                    "input4": 1,
                    "lo": 1,
                    "mantissa": 1,
                    "mantissa_low": 1,
                    "param3": 2,
                    "param4": 1,
                    "param_4": 1,
                    "param_value3": 1,
                    "real_value": 1,
                    "significand_low": 1
                },
                "param_5": {
                    "arg5": 1,
                    "base": 1,
                    "digits": 1,
                    "exp_val": 1,
                    "exponent": 2,
                    "format": 1,
                    "format_options": 1,
                    "input5": 1,
                    "min_digits": 1,
                    "min_exponent_digits": 1,
                    "min_field_width": 1,
                    "min_width": 7,
                    "param4": 2,
                    "param5": 1,
                    "param_5": 1,
                    "param_value4": 1,
                    "precision": 6,
                    "type": 1
                },
                "param_6": {
                    "arg6": 1,
                    "flags": 3,
                    "input6": 1,
                    "max_digits": 1,
                    "max_exponent_digits": 1,
                    "max_width": 5,
                    "min_width": 1,
                    "mode": 1,
                    "pad_length": 1,
                    "param5": 2,
                    "param6": 1,
                    "param_6": 1,
                    "param_value5": 1,
                    "precision": 6,
                    "round_mode": 2,
                    "round_up": 1,
                    "str_length": 1,
                    "width": 1
                },
                "param_7": {
                    "arg7": 1,
                    "dec_pt": 1,
                    "digits": 4,
                    "digits_len": 1,
                    "digits_length": 1,
                    "exponent": 2,
                    "exponent_digits": 2,
                    "length": 3,
                    "num_digits": 1,
                    "num_length": 1,
                    "out_digits": 1,
                    "out_length": 1,
                    "out_str_length": 1,
                    "out_width": 1,
                    "output1": 1,
                    "output_length": 3,
                    "output_size": 1,
                    "param6": 1,
                    "param_value6": 1,
                    "precision_ptr": 1,
                    "result_size": 1,
                    "text_length": 1
                },
                "param_8": {
                    "arg8": 1,
                    "is_negative": 17,
                    "negative": 1,
                    "out_has_sign": 1,
                    "out_sign": 2,
                    "output2": 1,
                    "overflow": 1,
                    "param7": 1,
                    "param_value7": 1,
                    "sign": 2,
                    "sign_ptr": 1,
                    "significand_digits": 2
                },
                "param_9": {
                    "arg9": 1,
                    "exponent_as_string": 1,
                    "exponent_str": 1,
                    "formatted_ptr": 1,
                    "formatted_value": 2,
                    "out_exponent": 1,
                    "out_str": 2,
                    "output": 2,
                    "output3": 1,
                    "output_buffer": 1,
                    "output_str": 1,
                    "output_string": 4,
                    "param8": 1,
                    "param_value8": 1,
                    "prefix": 1,
                    "result": 1,
                    "result_buffer": 1,
                    "str": 3,
                    "str_pointer": 1,
                    "str_result": 1,
                    "string_representation": 1,
                    "text": 1,
                    "text_buffer": 1
                },
                "pcVar": {
                    "pointer_to_character_var": 1
                },
                "pcVar10": {
                    "result": 4,
                    "result_string": 1,
                    "str_ptr": 1
                },
                "pcVar20": {
                    "digit_ptr": 1,
                    "new_result": 1,
                    "ptr1": 1,
                    "temp_str": 1
                },
                "pcVar21": {
                    "output_ptr": 1,
                    "ptr2": 1,
                    "str_ptr": 2
                },
                "pcVar4": {
                    "string_value": 1
                },
                "pcVar5": {
                    "empty_string": 1
                },
                "puVar": {
                    "pointer_to_uint32": 1
                },
                "puVar22": {
                    "num_digits_addr": 1,
                    "pow_10_table": 1,
                    "power_of_five": 1,
                    "powers_of10": 1,
                    "ptr3": 1,
                    "temp27": 1,
                    "temp_pointer_var1": 1,
                    "temp_ptr": 1
                },
                "quorem": {
                    "quotient_remainder": 1
                },
                "uStack_10": {
                    "cc_val2": 1
                },
                "uStack_14": {
                    "cc_val1": 1
                },
                "uStack_44": {
                    "adjusted_exponent": 1,
                    "decimal_part": 1,
                    "exponent_bits": 1,
                    "exponent_res": 1,
                    "half_rounding_bound": 1,
                    "is_exponent_positive": 1,
                    "is_updated": 1,
                    "local_var7": 1,
                    "mantissa": 1,
                    "num_leading_zeros": 1,
                    "param_2_f": 1,
                    "product_high": 1,
                    "stack_var1": 1,
                    "temp25": 1,
                    "temp_flags": 1,
                    "temp_float5": 1,
                    "temp_int_var10": 1,
                    "temp_u_int5": 1,
                    "temp_uint_var7": 1,
                    "temp_var": 1,
                    "tmp1": 1,
                    "unsigned_stack_var": 1
                },
                "uStack_48": {
                    "sign_bits": 1
                },
                "uStack_4c": {
                    "is_negative_power": 1
                },
                "uStack_4e": {
                    "is_fractional": 1
                },
                "uStack_50": {
                    "is_zero": 1
                },
                "uStack_52": {
                    "is_infinity_or_na_n": 1
                },
                "uStack_54": {
                    "infinite_string": 1
                },
                "uStack_58": {
                    "nan_string": 1
                },
                "uStack_c": {
                    "cc_val3": 1
                },
                "uVar": {
                    "unsigned_var": 1
                },
                "uVar10": {
                    "exponent_part3": 1
                },
                "uVar11": {
                    "digit_count": 1,
                    "digits": 1,
                    "divisor": 1,
                    "exponent": 1,
                    "exponent_bits": 1,
                    "exponent_part4": 1,
                    "exponent_shifted": 1,
                    "f_int": 1,
                    "flags_temp1": 1,
                    "param_value9": 1,
                    "shifted_fraction": 1,
                    "shifted_significand": 1,
                    "shifted_significand1": 1,
                    "str_len": 1,
                    "temp5": 1,
                    "temp_fraction": 1,
                    "temp_u_int": 1,
                    "temp_u_int1": 1,
                    "temp_u_var": 1,
                    "temp_uint_var1": 1,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "unsigned_var11": 1
                },
                "uVar12": {
                    "approximated_exponent": 1,
                    "biased_exponent": 1,
                    "divisor_high": 1,
                    "double2": 1,
                    "high_digit": 1,
                    "high_half": 1,
                    "high_multiplier": 1,
                    "multiplier1": 1,
                    "pow_five_float_upper": 1,
                    "power_of_ten": 1,
                    "significand_digit": 1,
                    "significand_high": 1,
                    "temp1": 1,
                    "temp6": 1,
                    "temp_u_int2": 1,
                    "temp_u_var2": 1,
                    "temp_uint_var2": 1,
                    "temp_val": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "u_var12": 1,
                    "unsigned_var12": 1
                },
                "uVar13": {
                    "approximated_significand": 1,
                    "digit_buffer": 1,
                    "double3": 1,
                    "exponent_high": 1,
                    "high_result": 1,
                    "low_digit": 1,
                    "low_half": 1,
                    "multiplier2": 1,
                    "overflow": 1,
                    "pow_five_float_lower": 1,
                    "quotient": 1,
                    "quotient_high": 1,
                    "temp2": 1,
                    "temp7": 1,
                    "temp_u_int3": 1,
                    "temp_u_var3": 1,
                    "temp_uint": 1,
                    "temp_uint_var3": 1,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "u_var13": 1,
                    "unsigned_var13": 1
                },
                "uVar14": {
                    "product_part1": 1
                },
                "uVar15": {
                    "product_part2": 1
                },
                "uVar16": {
                    "diff_float_upper": 1,
                    "diff_result": 1,
                    "double4": 1,
                    "exponent_offset": 1,
                    "low_multiplier": 1,
                    "mul_div": 1,
                    "multiplier1": 1,
                    "num_digits_before_decimal": 1,
                    "quotient_high": 1,
                    "quotient_low": 1,
                    "rounding_mode": 1,
                    "sub_value1": 1,
                    "temp14": 1,
                    "temp_u_int4": 1,
                    "temp_uint2": 1,
                    "temp_uint_var4": 1,
                    "temp_value4": 1,
                    "u_var16": 1,
                    "unsigned_var16": 1
                },
                "uVar17": {
                    "diff_float_lower": 1,
                    "exponent_bits": 1,
                    "exponent_copy": 1,
                    "flags_temp2": 1,
                    "int_val": 1,
                    "is_negative_exponent": 1,
                    "local_variable1": 1,
                    "mask": 1,
                    "multiplier2": 1,
                    "positive_exponent": 1,
                    "significand_low": 1,
                    "significand_with_sign": 1,
                    "sub_value2": 1,
                    "temp15": 1,
                    "temp_exp_val": 1,
                    "temp_u_int2": 1,
                    "temp_u_int5": 1,
                    "temp_uint_var5": 1,
                    "temp_var": 1,
                    "u_var17": 1,
                    "unsigned_var17": 1
                },
                "uVar18": {
                    "abs_exp_val": 1,
                    "absolute_exponent": 1,
                    "adjusted_exponent": 1,
                    "adjusted_fraction": 1,
                    "exponent": 1,
                    "exponent_abs": 1,
                    "exponent_bits": 1,
                    "local_variable2": 1,
                    "modified_exponent": 1,
                    "num": 1,
                    "significand": 1,
                    "temp16": 1,
                    "temp2": 1,
                    "temp_u_int3": 1,
                    "temp_u_int6": 1,
                    "temp_uint_var6": 1,
                    "temp_val": 1,
                    "tmp_number": 1,
                    "u_var18": 1,
                    "unsigned_var18": 1,
                    "value_temp": 1
                },
                "uVar19": {
                    "zeros_to_add": 1
                },
                "uVar20": {
                    "approximated_rounded": 1
                },
                "uVar21": {
                    "exponent_offset": 1
                },
                "uVar23": {
                    "current_result_high": 1,
                    "decimal_part_high": 1,
                    "diff_float_upper": 1,
                    "digit_buffer": 1,
                    "double5": 1,
                    "exp_rounding_mode": 1,
                    "local_variable3": 1,
                    "low_result": 1,
                    "remainder_high": 2,
                    "temp26": 1,
                    "temp3": 2,
                    "temp_pointer_var2": 1,
                    "temp_u_int7": 1,
                    "temp_u_var4": 1,
                    "temp_val": 1,
                    "tmp_result": 1,
                    "u_var23": 1,
                    "unsigned_var23": 1
                },
                "uVar26": {
                    "comparison_value": 1,
                    "double6": 1,
                    "double_temp": 1,
                    "intermediate1": 1,
                    "local_variable4": 1,
                    "result_temp1": 1,
                    "result_value": 1,
                    "temp": 2,
                    "temp22": 1,
                    "temp4": 1,
                    "temp_double_var4": 1,
                    "temp_float": 2,
                    "temp_long_double_var": 1,
                    "temp_u_long1": 1,
                    "temp_var": 1,
                    "tmp10": 1,
                    "tmp_variable1": 1,
                    "u_var26": 1,
                    "unsigned_var26": 1,
                    "upper_part": 1
                },
                "uVar27": {
                    "double7": 1,
                    "double_temp1": 1,
                    "exp_mult_result": 1,
                    "intermediate2": 1,
                    "local_variable5": 1,
                    "lower_part": 1,
                    "multiplier_value": 1,
                    "result_temp2": 1,
                    "temp2": 1,
                    "temp23": 1,
                    "temp5": 1,
                    "temp_double": 1,
                    "temp_double_var": 1,
                    "temp_double_var2": 1,
                    "temp_float2": 2,
                    "temp_u_long2": 1,
                    "temp_var": 1,
                    "tmp11": 1,
                    "tmp_variable2": 1,
                    "u_var27": 1,
                    "unsigned_var27": 1
                },
                "uVar28": {
                    "cmp_result_temp": 1,
                    "double8": 1,
                    "double_temp2": 1,
                    "intermediate3": 1,
                    "local_variable6": 1,
                    "quo_mult_result": 1,
                    "subtract_value": 1,
                    "temp24": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_double_var3": 1,
                    "temp_float": 1,
                    "temp_float3": 2,
                    "temp_u_double_var": 1,
                    "temp_u_long3": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "tmp12": 1,
                    "tmp_variable3": 1,
                    "u_var28": 1,
                    "unsigned_var28": 1
                },
                "uVar29": {
                    "approximated_rounded_part1": 1
                },
                "uVar30": {
                    "approximated_rounded_part2": 1
                },
                "uVar31": {
                    "approximated_rounded_part3": 1
                },
                "uVar32": {
                    "temp7": 1,
                    "zero_upper_part1": 1
                },
                "uVar33": {
                    "zero_upper_part2": 1
                },
                "uVar34": {
                    "one_upper_part1": 1
                },
                "uVar35": {
                    "one_upper_part2": 1
                },
                "uVar36": {
                    "thirty_two_upper_part1": 1
                },
                "uVar37": {
                    "thirty_two_upper_part2": 1
                },
                "uVar38": {
                    "half_tenth_power": 1
                },
                "uVar39": {
                    "power_counter": 1
                },
                "uVar40": {
                    "higher_part1": 1
                },
                "uVar41": {
                    "higher_part2": 1
                },
                "uVar42": {
                    "lower_part1": 1
                },
                "uVar43": {
                    "lower_part2": 1
                },
                "uVar44": {
                    "approximated_half": 1
                },
                "uVar45": {
                    "significand": 1
                },
                "uVar46": {
                    "decimal_places": 1
                },
                "uVar47": {
                    "decimal_factor_part1": 1
                },
                "uVar48": {
                    "decimal_factor_part2": 1
                },
                "uVar49": {
                    "upper_part1": 1
                },
                "uVar50": {
                    "upper_part2": 1
                },
                "uVar51": {
                    "result": 1
                },
                "uVar52": {
                    "remainder": 1
                },
                "uVar53": {
                    "reciprocal_part1": 1
                },
                "uVar54": {
                    "reciprocal_part2": 1
                },
                "uVar55": {
                    "reciprocal_part3": 1
                },
                "uVar56": {
                    "reciprocal_part4": 1
                },
                "uVar57": {
                    "reciprocal_part5": 1
                },
                "uVar58": {
                    "exponent_factor_part1": 1
                },
                "uVar59": {
                    "exponent_factor_part2": 1
                },
                "uVar6": {
                    "binary_exponent": 1,
                    "current_result": 1,
                    "decimal": 1,
                    "double": 1,
                    "exponent_multiplier": 1,
                    "exponent_part1": 1,
                    "f_val": 1,
                    "float": 1,
                    "fraction": 2,
                    "fraction_part": 1,
                    "fractional_part": 1,
                    "fractional_part_buffer": 1,
                    "integer_part": 1,
                    "mantissa": 1,
                    "mantissa_copy": 1,
                    "mantissa_shifted": 1,
                    "mantissa_u_int": 1,
                    "quotient": 1,
                    "result": 1,
                    "significand": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_float": 2,
                    "temp_float1": 1,
                    "temp_value": 1,
                    "temporary_value1": 1,
                    "u_var6": 1
                },
                "uVar60": {
                    "local_80": 1
                },
                "uVar61": {
                    "local_7c": 1
                },
                "uVar62": {
                    "local_74": 1
                },
                "uVar64": {
                    "local_68": 1
                },
                "uVar67": {
                    "local_58": 1
                },
                "uVar68": {
                    "local_48": 1
                },
                "uVar69": {
                    "u_stack_44": 1
                },
                "uVar70": {
                    "local_38": 1
                },
                "uVar71": {
                    "local_34": 1
                },
                "uVar9": {
                    "significant_figures": 1
                },
                "uint": {
                    "unsigned_integer": 1
                },
                "undefined4": {
                    "uint32": 1
                },
                "undefined8": {
                    "ulonglong": 1
                }
            },
            "called": [
                "FUN_0800910c",
                "FUN_080003d4",
                "FUN_08001084",
                "FUN_080078c0",
                "FUN_080009ac",
                "FUN_08009258",
                "FUN_080009d4",
                "FUN_080009e8",
                "FUN_080090c0",
                "FUN_080093a4",
                "FUN_08009244",
                "FUN_080094f8",
                "FUN_080091a4",
                "FUN_08000998",
                "FUN_08009630",
                "FUN_080004c8",
                "FUN_0800015c",
                "FUN_0800071c",
                "FUN_080003f4",
                "FUN_0800119c",
                "FUN_08000158",
                "FUN_08009530",
                "FUN_08009120",
                "FUN_08009444"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\ncharacter * convert_float_to_string_080079e8(integer value,uint32 precision,unsigned_integer sign,unsigned_integer exponent,unsigned_integer min_width,\n                   unsigned_integer precision,integer *digits,unsigned_integer *is_negative,character **output_string)\n\n{\n  boolean is_infinity;\n  boolean decrement_exponent;\n  boolean show_trailing_zeros;\n  character digit;\n  byte byte_val;\n  uint32 temp_float;\n  integer count;\n  integer comparison_result;\n  integer result;\n  character *result;\n  unsigned_integer shifted_significand1;\n  uint32 high_half;\n  uint32 quotient;\n  integer memory_pointer;\n  integer exponent_difference;\n  uint32 diff_float_upper;\n  unsigned_integer flags_temp2;\n  unsigned_integer temp_uint_var6;\n  integer exp;\n  character *temp_str;\n  character *str_ptr;\n  uint32 *temp_pointer_var1;\n  uint32 remainder_high;\n  integer digit;\n  boolean is_negative;\n  ulonglong temp_float;\n  ulonglong temp_float2;\n  ulonglong temp_float3;\n  unsigned_integer exponent_temp;\n  unsigned_integer abs_exponent;\n  unsigned_integer exponent;\n  integer digit_offset;\n  unsigned_integer total_digits;\n  integer shift;\n  integer digit_index;\n  unsigned_integer has_decimal_separator_width;\n  unsigned_integer temp_uint_var6;\n  unsigned_integer is_exponent_positive;\n  unsigned_integer max_digits;\n  unsigned_integer num_integer_digits;\n  integer shift_amount;\n  integer temp_arr [2];\n  \n  memory_pointer = *(integer *)(value + 0x40);\n  if (memory_pointer != 0) {\n    temp_uint_var6 = *(unsigned_integer *)(value + 0x44);\n    *(unsigned_integer *)(memory_pointer + 4) = temp_uint_var6;\n    *(integer *)(memory_pointer + 8) = 1 << (temp_uint_var6 & 0xff);\n    free_function(value,memory_pointer);\n    *(uint32 *)(value + 0x40) = 0;\n  }\n  is_negative = (integer)exponent < 0;\n  temp_uint_var6 = exponent;\n  if (is_negative) {\n    temp_uint_var6 = exponent & 0x7fffffff;\n  }\n  *is_negative = (unsigned_integer)is_negative;\n  abs_exponent = exponent;\n  if (is_negative) {\n    abs_exponent = temp_uint_var6;\n  }\n  flags_temp2 = abs_exponent;\n  if ((~temp_uint_var6 & 0x7ff00000) == 0) {\n    *digits = 9999;\n    if ((sign == 0) && ((temp_uint_var6 & 0xfffff) == 0)) {\n      result = \"Infinity\";\n      if (output_string == (character **)0x0) {\n        return result;\n      }\n      str_ptr = \"\";\n    }\n    else {\n      result = \"NaN\";\n      if (output_string == (character **)0x0) {\n        return result;\n      }\n      str_ptr = \"\";\n    }\n    *output_string = str_ptr;\n    return result;\n  }\n  temp_float = float_comparison1(sign,abs_exponent,0,0);\n  if ((integer)temp_float != 0) {\n    *digits = 1;\n    if (output_string != (character **)0x0) {\n      *output_string = \"\";\n      return \"0\";\n    }\n    return \"0\";\n  }\n  temp_float = float_to_bits(value,(integer)((ulonglong)temp_float >> 0x20),sign,abs_exponent,temp_arr,&shift_amount);\n  memory_pointer = shift_amount;\n  if (temp_uint_var6 >> 0x14 == 0) {\n    exp = temp_arr[0] + shift_amount;\n    exponent_difference = exp + 0x432;\n    if (exponent_difference < 0x21) {\n      temp_uint_var6 = sign << (0x20U - exponent_difference & 0xff);\n    }\n    else {\n      temp_uint_var6 = sign >> (exp + 0x412U & 0xff) | temp_uint_var6 << (0x40U - exponent_difference & 0xff);\n    }\n    temp_float = bits_to_float(temp_uint_var6);\n    exp = exp + -1;\n    is_negative = true;\n    shifted_significand1 = (integer)((ulonglong)temp_float >> 0x20) + 0xfe100000;\n    temp_uint_var6 = (unsigned_integer)temp_float;\n  }\n  else {\n    exp = (temp_uint_var6 >> 0x14) - 0x3ff;\n    shifted_significand1 = abs_exponent & 0xfffff | 0x3ff00000;\n    is_negative = false;\n    temp_uint_var6 = sign;\n  }\n  temp_float = float_subtraction(temp_uint_var6,shifted_significand1,0,0x3ff80000);\n  temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0x636f4361,0x3fd287a7);\n  temp_float = float_addition((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0x8b60c8b3,0x3fc68a28);\n  temp_float2 = int_to_float_conversion(exp);\n  temp_float2 = float_multiplication((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),0x509f79fb,0x3fd34413);\n  temp_float = float_addition((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),(integer)temp_float2,\n                        (integer)((ulonglong)temp_float2 >> 0x20));\n  quotient = (uint32)((ulonglong)temp_float >> 0x20);\n  exponent = float_to_integer_rounding();\n  exponent_difference = __aeabi_dcmplt((integer)temp_float,quotient,0,0);\n  if (exponent_difference != 0) {\n    temp_float2 = int_to_float_conversion(exponent);\n    exponent_difference = float_comparison1((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),(integer)temp_float,quotient);\n    if (exponent_difference == 0) {\n      exponent = exponent - 1;\n    }\n  }\n  if (exponent < 0x17) {\n    exponent_difference = __aeabi_dcmpgt(*(uint32 *)(&DAT_08009fa8 + exponent * 8),\n                            *(uint32 *)(&DAT_08009fac + exponent * 8),sign,abs_exponent);\n    if (exponent_difference == 0) {\n      decrement_exponent = false;\n    }\n    else {\n      exponent = exponent - 1;\n      decrement_exponent = false;\n    }\n  }\n  else {\n    decrement_exponent = true;\n  }\n  exponent_difference = (memory_pointer - exp) + -1;\n  if (exponent_difference < 0) {\n    digit_offset = 1 - (memory_pointer - exp);\n    exponent_difference = 0;\n  }\n  else {\n    digit_offset = 0;\n  }\n  if ((integer)exponent < 0) {\n    has_decimal_separator_width = 0;\n    digit_offset = digit_offset - exponent;\n    digit_index = -exponent;\n  }\n  else {\n    exponent_difference = exponent_difference + exponent;\n    has_decimal_separator_width = exponent;\n    digit_index = 0;\n  }\n  if (9 < min_width) {\n    max_digits = 0xffffffff;\n    is_infinity = true;\n    total_digits = 0xffffffff;\n    show_trailing_zeros = true;\n    min_width = 0;\n    precision = 0;\n    goto LAB_08007c24;\n  }\n  is_infinity = (integer)min_width < 6;\n  if (!is_infinity) {\n    min_width = min_width - 4;\n  }\n  switch(min_width) {\n  case 2:\n    show_trailing_zeros = false;\n    break;\n  case 3:\n    show_trailing_zeros = false;\n    goto LAB_08008300;\n  case 4:\n    show_trailing_zeros = true;\n    break;\n  case 5:\n    show_trailing_zeros = true;\nLAB_08008300:\n    max_digits = exponent + precision;\n    total_digits = max_digits + 1;\n    temp_uint_var6 = total_digits;\n    if ((integer)total_digits < 1) {\n      temp_uint_var6 = 1;\n    }\n    goto LAB_08008314;\n  default:\n    *(uint32 *)(value + 0x44) = 0;\n    result = (character *)allocate_function(value,0);\n    max_digits = 0xffffffff;\n    total_digits = 0xffffffff;\n    precision = 0;\n    *(character **)(value + 0x40) = result;\n    show_trailing_zeros = true;\n    goto LAB_08007e36;\n  }\n  if ((integer)precision < 1) {\n    max_digits = 1;\n    precision = 1;\n    total_digits = 1;\nLAB_08007c24:\n    *(uint32 *)(value + 0x44) = 0;\n    shifted_significand1 = max_digits;\n  }\n  else {\n    max_digits = precision;\n    total_digits = precision;\n    temp_uint_var6 = precision;\nLAB_08008314:\n    *(uint32 *)(value + 0x44) = 0;\n    shifted_significand1 = total_digits;\n    if (0x17 < (integer)temp_uint_var6) {\n      exp = 4;\n      memory_pointer = 1;\n      do {\n        count = memory_pointer;\n        exp = exp * 2;\n        memory_pointer = count + 1;\n      } while (exp + 0x14U <= temp_uint_var6);\n      *(integer *)(value + 0x44) = count;\n    }\n  }\n  result = (character *)allocate_function(value);\n  *(character **)(value + 0x40) = result;\n  if ((shifted_significand1 < 0xf) && (is_infinity)) {\n    if ((integer)exponent < 1) {\n      if (exponent == 0) {\n        memory_pointer = 2;\n        exponent_temp = sign;\n      }\n      else {\n        memory_pointer = (-exponent & 0xf) * 8;\n        temp_float = float_multiplication(sign,abs_exponent,*(uint32 *)(&DAT_08009fa8 + memory_pointer),\n                          *(uint32 *)(&DAT_08009fac + memory_pointer));\n        abs_exponent = (unsigned_integer)((ulonglong)temp_float >> 0x20);\n        exponent_temp = (unsigned_integer)temp_float;\n        exp = (integer)-exponent >> 4;\n        if (exp == 0) {\n          memory_pointer = 2;\n        }\n        else {\n          is_infinity = false;\n          memory_pointer = 2;\n          temp_pointer_var1 = &DAT_08009f80;\n          do {\n            if (exp << 0x1f < 0) {\n              temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),*temp_pointer_var1,temp_pointer_var1[1]);\n              is_infinity = true;\n              memory_pointer = memory_pointer + 1;\n            }\n            exp = exp >> 1;\n            temp_pointer_var1 = temp_pointer_var1 + 2;\n          } while (exp != 0);\n          if (is_infinity) {\n            exponent_temp = (unsigned_integer)temp_float;\n            abs_exponent = (unsigned_integer)((ulonglong)temp_float >> 0x20);\n          }\n        }\n      }\n    }\n    else {\n      temp_uint_var6 = (integer)exponent >> 4;\n      temp_float2 = *(ulonglong *)(&DAT_08009fa8 + (exponent & 0xf) * 8);\n      temp_float = *(ulonglong *)(&DAT_08009fa8 + (exponent & 0xf) * 8);\n      if ((integer)(temp_uint_var6 << 0x1b) < 0) {\n        temp_float3 = float_division(sign,abs_exponent,0x7f73bf3c,0x75154fdd);\n        is_exponent_positive = (unsigned_integer)((ulonglong)temp_float3 >> 0x20);\n        temp_uint_var6 = (unsigned_integer)temp_float3;\n        memory_pointer = 3;\n        temp_uint_var6 = temp_uint_var6 & 0xf;\n      }\n      else {\n        memory_pointer = 2;\n        is_exponent_positive = abs_exponent;\n        temp_uint_var6 = sign;\n      }\n      if (temp_uint_var6 != 0) {\n        temp_pointer_var1 = &DAT_08009f80;\n        do {\n          if ((integer)(temp_uint_var6 << 0x1f) < 0) {\n            temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),*temp_pointer_var1,temp_pointer_var1[1]);\n            memory_pointer = memory_pointer + 1;\n          }\n          temp_uint_var6 = (integer)temp_uint_var6 >> 1;\n          temp_pointer_var1 = temp_pointer_var1 + 2;\n          temp_float2 = temp_float;\n        } while (temp_uint_var6 != 0);\n      }\n      abs_exponent = (unsigned_integer)((ulonglong)temp_float2 >> 0x20);\n      exponent_temp = (unsigned_integer)temp_float2;\n      temp_float = float_division(temp_uint_var6,is_exponent_positive,exponent_temp,abs_exponent);\n      exponent_temp = (unsigned_integer)temp_float;\n      abs_exponent = (unsigned_integer)((ulonglong)temp_float >> 0x20);\n    }\n    temp_float = CONCAT44(abs_exponent,exponent_temp);\n    if ((decrement_exponent) && (exp = __aeabi_dcmplt(exponent_temp,abs_exponent,0,0x3ff00000), exp != 0)) {\n      if (total_digits == 0) {\n        temp_float = int_to_float_conversion(memory_pointer);\n        temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),exponent_temp,abs_exponent);\n        temp_float = float_addition((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0,0x401c0000);\n        quotient = (uint32)temp_float;\n        memory_pointer = (integer)((ulonglong)temp_float >> 0x20) + -0x3400000;\n        goto LAB_0800852e;\n      }\n      if (0 < (integer)max_digits) {\n        temp_float = float_multiplication(exponent_temp,abs_exponent,0,0x40240000);\n        temp_float2 = int_to_float_conversion(memory_pointer + 1);\n        temp_float2 = float_multiplication((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),(integer)temp_float,\n                          (integer)((ulonglong)temp_float >> 0x20));\n        temp_float2 = float_addition((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),0,0x401c0000);\n        quotient = (uint32)temp_float2;\n        temp_uint_var6 = max_digits;\n        num_integer_digits = exponent - 1;\n        memory_pointer = (integer)((ulonglong)temp_float2 >> 0x20) + -0x3400000;\n        goto LAB_08007cfa;\n      }\n      goto LAB_08007e36;\n    }\n    temp_float2 = int_to_float_conversion(memory_pointer);\n    temp_float2 = float_multiplication((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),exponent_temp,abs_exponent);\n    temp_float2 = float_addition((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),0,0x401c0000);\n    quotient = (uint32)temp_float2;\n    memory_pointer = (integer)((ulonglong)temp_float2 >> 0x20) + -0x3400000;\n    if (total_digits != 0) {\n      num_integer_digits = exponent;\n      temp_uint_var6 = total_digits;\nLAB_08007cfa:\n      abs_exponent = (unsigned_integer)((ulonglong)temp_float >> 0x20);\n      exponent_temp = (unsigned_integer)temp_float;\n      digit = float_to_integer_rounding(exponent_temp,abs_exponent);\n      digit = digit + '0';\n      diff_float_upper = (&DAT_08009fa0)[temp_uint_var6 * 2];\n      high_half = (&DAT_08009fa4)[temp_uint_var6 * 2];\n      temp_float = int_to_float_conversion();\n      temp_float = float_subtraction(exponent_temp,abs_exponent,(integer)temp_float,(integer)((ulonglong)temp_float >> 0x20));\n      remainder_high = (uint32)((ulonglong)temp_float >> 0x20);\n      str_ptr = result + 1;\n      if (show_trailing_zeros) {\n        temp_float2 = float_division(0,0x3fe00000,diff_float_upper,high_half);\n        temp_float2 = float_subtraction((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),quotient,memory_pointer);\n        quotient = (uint32)((ulonglong)temp_float2 >> 0x20);\n        *result = digit;\n        memory_pointer = __aeabi_dcmpgt((integer)temp_float2,quotient,(integer)temp_float,remainder_high);\n        if (memory_pointer != 0) {\nLAB_08008784:\n          exponent = num_integer_digits;\n          goto LAB_08008294;\n        }\n        temp_float3 = float_subtraction(0,0x3ff00000,(integer)temp_float,remainder_high);\n        memory_pointer = __aeabi_dcmpgt((integer)temp_float2,quotient,(integer)temp_float3,(integer)((ulonglong)temp_float3 >> 0x20));\n        if (memory_pointer == 0) {\n          if (temp_uint_var6 != 1) {\n            temp_str = str_ptr;\n            do {\n              temp_float2 = float_multiplication((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),0,0x40240000);\n              quotient = (uint32)((ulonglong)temp_float2 >> 0x20);\n              temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0,0x40240000);\n              digit = float_to_integer_rounding();\n              temp_float3 = int_to_float_conversion();\n              temp_float = float_subtraction((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),(integer)temp_float3,\n                                (integer)((ulonglong)temp_float3 >> 0x20));\n              diff_float_upper = (uint32)((ulonglong)temp_float >> 0x20);\n              digit = digit + '0';\n              str_ptr = temp_str + 1;\n              *temp_str = digit;\n              memory_pointer = __aeabi_dcmplt((integer)temp_float,diff_float_upper,(integer)temp_float2,quotient);\n              if (memory_pointer != 0) {\n                exponent = num_integer_digits;\n                goto LAB_08008294;\n              }\n              temp_float3 = float_subtraction(0,0x3ff00000,(integer)temp_float,diff_float_upper);\n              memory_pointer = __aeabi_dcmplt((integer)temp_float3,(integer)((ulonglong)temp_float3 >> 0x20),(integer)temp_float2,\n                                      quotient);\n              if (memory_pointer != 0) goto LAB_08008798;\n              temp_str = str_ptr;\n            } while (str_ptr != result + temp_uint_var6);\n          }\n          goto LAB_08007e36;\n        }\nLAB_08008798:\n        exponent = num_integer_digits;\n      }\n      else {\n        temp_float2 = float_multiplication(quotient,memory_pointer,diff_float_upper,high_half);\n        quotient = (uint32)((ulonglong)temp_float2 >> 0x20);\n        *result = digit;\n        if (temp_uint_var6 != 1) {\n          temp_str = str_ptr;\n          do {\n            temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0,0x40240000);\n            digit = float_to_integer_rounding();\n            temp_float3 = int_to_float_conversion();\n            temp_float = float_subtraction((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),(integer)temp_float3,\n                              (integer)((ulonglong)temp_float3 >> 0x20));\n            str_ptr = temp_str + 1;\n            *temp_str = digit + '0';\n            temp_str = str_ptr;\n          } while (str_ptr != result + temp_uint_var6);\n        }\n        diff_float_upper = (uint32)((ulonglong)temp_float >> 0x20);\n        temp_float3 = float_addition((integer)temp_float2,quotient,0,0x3fe00000);\n        memory_pointer = __aeabi_dcmplt((integer)temp_float3,(integer)((ulonglong)temp_float3 >> 0x20),(integer)temp_float,diff_float_upper);\n        if (memory_pointer == 0) {\n          temp_float2 = float_subtraction(0,0x3fe00000,(integer)temp_float2,quotient);\n          memory_pointer = __aeabi_dcmpgt((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),(integer)temp_float,diff_float_upper);\n          temp_str = str_ptr;\n          if (memory_pointer == 0) goto LAB_08007e36;\n          do {\n            str_ptr = temp_str;\n            temp_str = str_ptr + -1;\n          } while (str_ptr[-1] == '0');\n          goto LAB_08008784;\n        }\n        exponent = num_integer_digits;\n        digit = str_ptr[-1];\n      }\n      goto LAB_08007f7c;\n    }\nLAB_0800852e:\n    temp_float = float_subtraction(exponent_temp,abs_exponent,0,0x40140000);\n    diff_float_upper = (uint32)((ulonglong)temp_float >> 0x20);\n    exp = __aeabi_dcmpgt((integer)temp_float,diff_float_upper,quotient,memory_pointer);\n    if (exp == 0) {\n      memory_pointer = __aeabi_dcmplt((integer)temp_float,diff_float_upper,quotient,memory_pointer + -0x80000000);\n      if (memory_pointer == 0) goto LAB_08007e36;\n      exp = 0;\n      memory_pointer = 0;\n      str_ptr = result;\n      goto LAB_080084f0;\n    }\n    exponent_difference = 0;\n    count = 0;\nLAB_08008406:\n    *result = '1';\n    exponent = exponent + 1;\n    str_ptr = result + 1;\n    exp = count;\n    memory_pointer = exponent_difference;\nLAB_08008416:\n    free_function(value,memory_pointer);\n    if (exp == 0) goto LAB_08008294;\n  }\n  else {\nLAB_08007e36:\n    str_ptr = result;\n    if ((-1 < temp_arr[0]) && ((integer)exponent < 0xf)) {\n      quotient = *(uint32 *)(&DAT_08009fa8 + exponent * 8);\n      diff_float_upper = *(uint32 *)(&DAT_08009fac + exponent * 8);\n      if ((-1 < (integer)precision) || (0 < (integer)total_digits)) {\n        float_division(sign,flags_temp2,quotient,diff_float_upper);\n        byte_val = float_to_integer_rounding();\n        temp_float = int_to_float_conversion();\n        temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),quotient,diff_float_upper);\n        temp_float = float_subtraction(sign,flags_temp2,(integer)temp_float,(integer)((ulonglong)temp_float >> 0x20));\n        *result = byte_val + 0x30;\n        str_ptr = result + 1;\n        if (total_digits != 1) {\n          temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0,0x40240000);\n          memory_pointer = float_comparison1((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0,0);\n          while (memory_pointer == 0) {\n            remainder_high = (uint32)((ulonglong)temp_float >> 0x20);\n            float_division((integer)temp_float,remainder_high,quotient,diff_float_upper);\n            byte_val = float_to_integer_rounding();\n            temp_float2 = int_to_float_conversion();\n            temp_float2 = float_multiplication((integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20),quotient,diff_float_upper);\n            temp_float = float_subtraction((integer)temp_float,remainder_high,(integer)temp_float2,(integer)((ulonglong)temp_float2 >> 0x20));\n            temp_str = str_ptr + 1;\n            *str_ptr = byte_val + 0x30;\n            str_ptr = temp_str;\n            if (total_digits == (integer)temp_str - (integer)result) goto LAB_08007f3a;\n            temp_float = float_multiplication((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0,0x40240000);\n            memory_pointer = float_comparison1((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),0,0);\n          }\n          goto LAB_08008294;\n        }\nLAB_08007f3a:\n        temp_float = float_addition((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20));\n        remainder_high = (uint32)((ulonglong)temp_float >> 0x20);\n        memory_pointer = __aeabi_dcmpgt((integer)temp_float,remainder_high,quotient,diff_float_upper);\n        if ((memory_pointer == 0) &&\n           ((memory_pointer = float_comparison1((integer)temp_float,remainder_high,quotient,diff_float_upper), memory_pointer == 0 ||\n            ((byte_val & 1) == 0)))) goto LAB_08008294;\n        digit = str_ptr[-1];\nLAB_08007f7c:\n        while (temp_str = str_ptr + -1, digit == '9') {\n          if (result == temp_str) {\n            *result = '0';\n            digit = str_ptr[-1];\n            exponent = exponent + 1;\n            temp_str = result;\n            break;\n          }\n          digit = str_ptr[-2];\n          str_ptr = temp_str;\n        }\n        *temp_str = digit + '\\x01';\n        goto LAB_08008294;\n      }\n      if (total_digits == 0) {\n        temp_float = float_multiplication(quotient,diff_float_upper,0,0x40140000);\n        result = __aeabi_dcmpge((integer)temp_float,(integer)((ulonglong)temp_float >> 0x20),sign,flags_temp2);\n        exp = 0;\n        exponent_difference = 0;\n        count = 0;\n        memory_pointer = 0;\n        if (result == 0) goto LAB_08008406;\n      }\n      else {\n        exp = 0;\n        memory_pointer = 0;\n      }\nLAB_080084f0:\n      exponent = ~precision;\n      result = str_ptr;\n      goto LAB_08008416;\n    }\n    memory_pointer = digit_index;\n    if (show_trailing_zeros) {\n      if ((integer)min_width < 2) {\n        if (is_negative) {\n          shift = digit_offset;\n          digit_offset = digit_offset + temp_arr[0] + 0x433;\n          exponent_difference = exponent_difference + temp_arr[0] + 0x433;\n        }\n        else {\n          shift = digit_offset;\n          digit_offset = digit_offset + (0x36 - shift_amount);\n          exponent_difference = exponent_difference + (0x36 - shift_amount);\n        }\n      }\n      else {\n        exp = total_digits - 1;\n        if (digit_index < exp) {\n          has_decimal_separator_width = has_decimal_separator_width + (exp - digit_index);\n          memory_pointer = 0;\n          digit_index = exp;\n        }\n        else {\n          memory_pointer = digit_index - exp;\n        }\n        if ((integer)total_digits < 0) {\n          shift = digit_offset - total_digits;\n        }\n        else {\n          exponent_difference = exponent_difference + total_digits;\n          shift = digit_offset;\n          digit_offset = digit_offset + total_digits;\n        }\n      }\n      exp = __i2b(value,1);\n    }\n    else {\n      shift = digit_offset;\n      exp = 0;\n    }\n    if ((0 < shift) && (0 < exponent_difference)) {\n      count = shift;\n      if (exponent_difference <= shift) {\n        count = exponent_difference;\n      }\n      exponent_difference = exponent_difference - count;\n      digit_offset = digit_offset - count;\n      shift = shift - count;\n    }\n    if (digit_index != 0) {\n      if (show_trailing_zeros) {\n        quotient = temp_float;\n        if (memory_pointer != 0) {\n          exp = power_of5_multiplication(value,exp,memory_pointer);\n          quotient = __multiply(value,exp,temp_float);\n          free_function(value,temp_float);\n          temp_float = quotient;\n          if (digit_index - memory_pointer == 0) goto LAB_08008062;\n        }\n        temp_float = power_of5_multiplication(value,quotient,digit_index - memory_pointer);\n      }\n      else {\n        temp_float = power_of5_multiplication(value,temp_float,digit_index);\n      }\n    }\nLAB_08008062:\n    memory_pointer = __i2b(value,1);\n    if (has_decimal_separator_width == 0) {\n      if (((integer)min_width < 2) && (sign == 0)) {\nLAB_0800835a:\n        if ((flags_temp2 & 0xfffff) == 0) {\n          flags_temp2 = flags_temp2 & 0x7ff00000;\n          if (flags_temp2 != 0) {\n            exponent_difference = exponent_difference + 1;\n            digit_offset = digit_offset + 1;\n            flags_temp2 = 1;\n          }\n        }\n        else {\n          flags_temp2 = 0;\n        }\n        is_negative = has_decimal_separator_width != 0;\n        temp_uint_var6 = sign;\n        has_decimal_separator_width = flags_temp2;\n        if (is_negative) goto LAB_080082d4;\n      }\n      count = 1;\n    }\n    else {\n      temp_float = power_of5_multiplication(value,memory_pointer);\n      memory_pointer = (integer)temp_float;\n      if (((integer)min_width < 2) && (sign == 0)) goto LAB_0800835a;\n      has_decimal_separator_width = 0;\n      temp_uint_var6 = (unsigned_integer)((ulonglong)temp_float >> 0x20);\nLAB_080082d4:\n      count = highest_zero_bits(*(uint32 *)(memory_pointer + *(integer *)(memory_pointer + 0x10) * 4 + 0x10),temp_uint_var6);\n      count = 0x20 - count;\n    }\n    temp_uint_var6 = count + exponent_difference & 0x1f;\n    if (temp_uint_var6 == 0) {\n      count = 0x1c;\nLAB_08008096:\n      exponent_difference = exponent_difference + count;\n      digit_offset = digit_offset + count;\n      shift = shift + count;\n    }\n    else {\n      if (4 < (integer)(0x20 - temp_uint_var6)) {\n        count = 0x1c - temp_uint_var6;\n        goto LAB_08008096;\n      }\n      if (0x20 - temp_uint_var6 != 4) {\n        count = 0x3c - temp_uint_var6;\n        goto LAB_08008096;\n      }\n    }\n    if (0 < digit_offset) {\n      temp_float = left_shift(value,temp_float,digit_offset);\n    }\n    if (0 < exponent_difference) {\n      memory_pointer = left_shift(value,memory_pointer,exponent_difference);\n    }\n    temp_str = result;\n    if ((decrement_exponent) && (exponent_difference = compare_function(temp_float,memory_pointer), exponent_difference < 0)) {\n      exponent = exponent - 1;\n      temp_float = multiply_add_function(value,temp_float,10,0);\n      if (show_trailing_zeros) {\n        exp = multiply_add_function(value,exp,10,0);\n        if ((0 < (integer)max_digits) || ((integer)min_width < 3)) {\n          total_digits = max_digits;\n          goto LAB_080080de;\n        }\n      }\n      else if ((0 < (integer)max_digits) || ((integer)min_width < 3)) {\n        total_digits = max_digits;\n        goto LAB_0800820a;\n      }\n      total_digits = max_digits;\nLAB_080084e8:\n      if (total_digits == 0) {\n        exponent_difference = multiply_add_function(value,memory_pointer,5);\n        result = compare_function(temp_float,exponent_difference);\n        count = exp;\n        memory_pointer = exponent_difference;\n        if (0 < result) goto LAB_08008406;\n      }\n      goto LAB_080084f0;\n    }\n    if (((integer)total_digits < 1) && (2 < (integer)min_width)) goto LAB_080084e8;\n    if (show_trailing_zeros) {\nLAB_080080de:\n      exponent_temp = exp;\n      if (0 < shift) {\n        exponent_temp = left_shift(value,exp,shift);\n      }\n      exp = exponent_temp;\n      if (has_decimal_separator_width != 0) {\n        exp = allocate_function(value,*(uint32 *)(exponent_temp + 4));\n        copy_function(exp + 0xc,exponent_temp + 0xc,(*(integer *)(exponent_temp + 0x10) + 2) * 4);\n        exp = left_shift(value,exp,1);\n      }\nLAB_08008108:\n      exponent_difference = quotient_remainder(temp_float,memory_pointer);\n      count = compare_function(temp_float,exponent_temp);\n      result = multiply_difference_function(value,memory_pointer,exp);\n      digit = exponent_difference + 0x30;\n      if (*(integer *)(result + 0xc) == 0) {\n        comparison_result = compare_function(temp_float);\n        free_function(value,result);\n        if ((comparison_result != 0) || (min_width != 0)) goto LAB_0800815a;\n        if ((sign & 1) != 0) {\n          comparison_result = 0;\n          goto LAB_0800815a;\n        }\n        if (digit != 0x39) {\n          if (0 < count) goto LAB_0800874c;\n          goto LAB_080085a4;\n        }\nLAB_08008752:\n        str_ptr = temp_str + 1;\n        digit = '9';\n        *temp_str = '9';\n        goto LAB_08008268;\n      }\n      free_function(value,result);\n      comparison_result = 1;\nLAB_0800815a:\n      if ((count < 0) || (((count == 0 && (min_width == 0)) && ((sign & 1) == 0)))) {\n        if (0 < comparison_result) {\n          temp_float = left_shift(value,temp_float,1);\n          count = compare_function(temp_float,memory_pointer);\n          if ((0 < count) || ((count == 0 && (exponent_difference << 0x1f < 0)))) {\n            if (digit == 0x39) goto LAB_08008752;\nLAB_0800874c:\n            digit = exponent_difference + 0x31;\n          }\n        }\nLAB_080085a4:\n        str_ptr = temp_str + 1;\n        *temp_str = (character)digit;\n        goto LAB_08008274;\n      }\n      str_ptr = temp_str + 1;\n      if (0 < comparison_result) {\n        if (digit == 0x39) goto LAB_08008752;\n        *temp_str = (character)exponent_difference + '1';\n        goto LAB_08008274;\n      }\n      *temp_str = (character)digit;\n      if (result + (total_digits - 1) != temp_str) {\n        temp_float = multiply_add_function(value,temp_float,10,0);\n        temp_str = str_ptr;\n        if (exponent_temp == exp) {\n          exponent_temp = multiply_add_function(value,exponent_temp,10,0);\n          exp = exponent_temp;\n        }\n        else {\n          exponent_temp = multiply_add_function(value,exponent_temp,10,0);\n          exp = multiply_add_function(value,exp,10,0);\n        }\n        goto LAB_08008108;\n      }\n    }\n    else {\nLAB_0800820a:\n      while( true ) {\n        digit = quotient_remainder(temp_float,memory_pointer);\n        digit = digit + 0x30;\n        str_ptr = temp_str + 1;\n        *temp_str = (character)digit;\n        if ((integer)total_digits <= (integer)str_ptr - (integer)result) break;\n        temp_float = multiply_add_function(value,temp_float,10,0);\n        temp_str = str_ptr;\n      }\n      exponent_temp = 0;\n    }\n    temp_float = left_shift(value,temp_float,1);\n    exponent_difference = compare_function(temp_float,memory_pointer);\n    digit = str_ptr[-1];\n    if ((0 < exponent_difference) || ((exponent_difference == 0 && (digit << 0x1f < 0)))) {\nLAB_08008268:\n      do {\n        temp_str = str_ptr + -1;\n        if (digit != '9') goto code_r0x08008270;\n        if (result == temp_str) {\n          *result = '1';\n          exponent = exponent + 1;\n          goto LAB_08008274;\n        }\n        digit = str_ptr[-2];\n        str_ptr = temp_str;\n      } while( true );\n    }\n    while (digit == '0') {\n      digit = str_ptr[-2];\n      str_ptr = str_ptr + -1;\n    }\nLAB_08008274:\n    free_function(value,memory_pointer);\n    if (exp == 0) goto LAB_08008294;\n    if ((exponent_temp != 0) && (exponent_temp != exp)) {\n      free_function(value);\n    }\n  }\n  free_function(value,exp);\nLAB_08008294:\n  free_function(value,temp_float);\n  *str_ptr = '\\0';\n  *digits = exponent + 1;\n  if (output_string == (character **)0x0) {\n    return result;\n  }\n  *output_string = str_ptr;\n  return result;\ncode_r0x08008270:\n  *temp_str = digit + '\\x01';\n  goto LAB_08008274;\n}\n\n",
            "current_name": "convert_float_to_string_080079e8",
            "entrypoint": "0x080079e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e8": "convert_float_to_string_080079e8",
                "_Balloc": "allocate_function",
                "_Bfree": "free_function",
                "__aeabi_d2iz": "float_to_integer_rounding",
                "__aeabi_dadd": "float_addition",
                "__aeabi_dcmpeq": "float_comparison1",
                "__aeabi_i2d": "int_to_float_conversion",
                "__d2b": "float_to_bits",
                "__divdf3": "float_division",
                "__floatunsidf": "bits_to_float",
                "__hi0bits": "highest_zero_bits",
                "__lshift": "left_shift",
                "__mcmp": "compare_function",
                "__mdiff": "multiply_difference_function",
                "__muldf3": "float_multiplication",
                "__multadd": "multiply_add_function",
                "__pow5mult": "power_of5_multiplication",
                "__subdf3": "float_subtraction",
                "bVar1": "is_infinity",
                "bVar2": "decrement_exponent",
                "bVar25": "is_negative",
                "bVar3": "show_trailing_zeros",
                "bVar5": "byte_val",
                "bool": "boolean",
                "cVar": "character_var",
                "cVar1": "is_negative",
                "cVar2": "is_infinity",
                "cVar4": "digit",
                "char": "character",
                "iVar": "integer_var",
                "iVar14": "memory_pointer",
                "iVar15": "exponent_difference",
                "iVar19": "exp",
                "iVar24": "digit",
                "iVar7": "count",
                "iVar8": "comparison_result",
                "iVar9": "result",
                "int": "integer",
                "local_2c": "temp_arr",
                "local_30": "shift_amount",
                "local_34": "num_integer_digits",
                "local_38": "max_digits",
                "local_48": "temp_uint_var6",
                "local_58": "has_decimal_separator_width",
                "local_5c": "digit_index",
                "local_60": "shift",
                "local_68": "total_digits",
                "local_70": "digit_offset",
                "local_74": "exponent",
                "local_7c": "abs_exponent",
                "local_80": "exponent_temp",
                "memcpy": "copy_function",
                "param_1": "value",
                "param_2": "precision",
                "param_3": "sign",
                "param_4": "exponent",
                "param_5": "min_width",
                "param_6": "precision",
                "param_7": "digits",
                "param_8": "is_negative",
                "param_9": "output_string",
                "pcVar": "pointer_to_character_var",
                "pcVar10": "result",
                "pcVar20": "temp_str",
                "pcVar21": "str_ptr",
                "puVar": "pointer_to_uint32",
                "puVar22": "temp_pointer_var1",
                "quorem": "quotient_remainder",
                "uStack_44": "is_exponent_positive",
                "uVar": "unsigned_var",
                "uVar11": "shifted_significand1",
                "uVar12": "high_half",
                "uVar13": "quotient",
                "uVar16": "diff_float_upper",
                "uVar17": "flags_temp2",
                "uVar18": "temp_uint_var6",
                "uVar23": "remainder_high",
                "uVar26": "temp_float",
                "uVar27": "temp_float2",
                "uVar28": "temp_float3",
                "uVar6": "temp_float",
                "uint": "unsigned_integer",
                "undefined4": "uint32",
                "undefined8": "ulonglong"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800884c": {
            "additional_data": {
                "0xfef": {
                    "mask": 1
                },
                "0xfff": {
                    "page_size": 1
                },
                "1": {
                    "allocated_flag": 1
                },
                "DAT_20000454": {
                    "base": 1,
                    "base_address": 2,
                    "block_start": 1,
                    "data_ptr": 1,
                    "data_segment_ptr": 1,
                    "heap_base": 1,
                    "heap_start": 6,
                    "malloc_start_address": 1,
                    "memory_block": 1,
                    "memory_start": 1
                },
                "DAT_20000854": {
                    "additional_memory": 1,
                    "data_ptr": 1,
                    "heap_end": 3,
                    "heap_original": 1,
                    "initial_address": 1,
                    "initial_allocated_memory": 1,
                    "initial_heap_size": 1,
                    "initial_offset": 1,
                    "initial_size": 1,
                    "old_heap_end": 1,
                    "total_malloced_memory": 1
                },
                "DAT_20000a14": {
                    "allocated_memory": 3,
                    "allocated_memory_size": 1,
                    "heap_end": 2,
                    "heap_free": 1,
                    "heap_remaining": 1,
                    "heap_size": 5,
                    "total_allocated": 2,
                    "total_allocated_memory": 1
                },
                "FUN_0800884c": {
                    "allocate_memory": 26,
                    "allocate_memory_block": 3,
                    "reallocate_memory": 1
                },
                "FUN_0800884c_addr": {
                    "allocation_start_addr": 1
                },
                "FUN_080090a8": {
                    "malloc_lock": 1,
                    "unlock_memory": 2
                },
                "FUN_080090b4": {
                    "lock_memory": 1,
                    "malloc_unlock": 1,
                    "unlock_memory": 1
                },
                "FUN_08009744": {
                    "initialize_memory": 1,
                    "update_header": 1,
                    "update_memory_block": 1
                },
                "__malloc_lock": {
                    "acquire_lock": 1,
                    "acquire_lock_for_malloc": 1,
                    "lock_malloc": 1,
                    "lock_memory_allocation": 1
                },
                "__malloc_unlock": {
                    "release_lock": 1,
                    "release_lock_for_malloc": 1,
                    "unlock_malloc": 1,
                    "unlock_memory_allocation": 1
                },
                "_sbrk_r": {
                    "adjust_heap": 1,
                    "adjust_heap_size": 1,
                    "adjust_memory_break": 1,
                    "allocate_memory": 1,
                    "extend_heap": 3,
                    "increase_heap": 1,
                    "increment_break_value": 1,
                    "increment_heap": 1,
                    "request_memory": 2,
                    "request_memory_block": 1,
                    "sbrk": 2
                },
                "allocation_size": {
                    "initial_size": 1
                },
                "iVar1": {
                    "allocation_result": 2,
                    "brk_result": 8,
                    "current_block": 1,
                    "current_brk": 1,
                    "current_heap_end": 1,
                    "current_pointer": 1,
                    "malloc_result": 1,
                    "previous_brk": 1,
                    "result": 8,
                    "sbrk_result": 5,
                    "sbrk_result1": 1
                },
                "iVar2": {
                    "adjusted_address": 1,
                    "adjusted_brk": 1,
                    "adjusted_size": 2,
                    "aligned_addr": 2,
                    "aligned_address": 1,
                    "aligned_end_address": 1,
                    "aligned_memory": 1,
                    "aligned_offset": 1,
                    "alignment": 1,
                    "allocated_size": 1,
                    "allocation_address": 2,
                    "brk_adjusted": 1,
                    "desired_address": 1,
                    "new_addr": 1,
                    "new_address": 1,
                    "new_allocation": 1,
                    "new_block": 1,
                    "new_brk": 2,
                    "new_heap_end": 1,
                    "new_memory_block_address": 1,
                    "new_pointer": 1,
                    "page_offset": 1,
                    "reserved_memory": 1,
                    "sbrk_result2": 1,
                    "starting_address": 2
                },
                "param_1": {
                    "lock": 14,
                    "lock_ptr": 1,
                    "lock_state": 1,
                    "lock_status": 2,
                    "mem_size": 1,
                    "memory_size": 1,
                    "size": 11
                },
                "param_2": {
                    "alignment": 11,
                    "memory_size": 1,
                    "offset": 1,
                    "padding_size": 1,
                    "requested_size": 3,
                    "size": 14
                },
                "uVar3": {
                    "aligned_size": 2,
                    "alignment": 1,
                    "allocated_size": 1,
                    "block_header": 2,
                    "block_size": 2,
                    "chunk_size": 1,
                    "current_size": 1,
                    "flags": 1,
                    "header": 4,
                    "header_value": 2,
                    "heap_header": 1,
                    "lock_mask": 1,
                    "malloc_flags": 1,
                    "mask": 3,
                    "memory_block_size": 1,
                    "memory_metadata": 1,
                    "old_flags": 1,
                    "old_metadata": 1,
                    "page_offset": 1,
                    "page_size": 1,
                    "prev_size": 1
                }
            },
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_080088ec"
            ],
            "code": "\nundefined4 allocate_memory_block_0800884c(undefined4 lock,int size)\n\n{\n  int brk_result;\n  int aligned_addr;\n  uint header;\n  \n  lock_memory_allocation();\n  header = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  aligned_addr = ((0xfef - size) + header & 0xfffff000) - 0x1000;\n  if (0xfff < aligned_addr) {\n    brk_result = extend_heap(lock,0);\n    if (brk_result == DAT_20000454 + header) {\n      brk_result = extend_heap(lock,-aligned_addr);\n      if (brk_result != -1) {\n        DAT_20000a14 = DAT_20000a14 - aligned_addr;\n        *(uint *)(DAT_20000454 + 4) = header - aligned_addr | 1;\n        unlock_malloc(lock);\n        return 1;\n      }\n      aligned_addr = extend_heap(lock,0);\n      if (0xf < aligned_addr - DAT_20000454) {\n        DAT_20000a14 = aligned_addr - DAT_20000854;\n        *(uint *)(DAT_20000454 + 4) = aligned_addr - DAT_20000454 | 1;\n      }\n    }\n  }\n  unlock_malloc(lock);\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_block_0800884c",
            "entrypoint": "0x0800884c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800884c": "allocate_memory_block_0800884c",
                "__malloc_lock": "lock_memory_allocation",
                "__malloc_unlock": "unlock_malloc",
                "_sbrk_r": "extend_heap",
                "iVar1": "brk_result",
                "iVar2": "aligned_addr",
                "param_1": "lock",
                "param_2": "size",
                "uVar3": "header"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080088ec": {
            "additional_data": {
                "DAT_2000044c": {
                    "last_empty_chunk": 1
                },
                "DAT_20000450": {
                    "empty_chunk_mask": 1
                },
                "DAT_20000454": {
                    "first_block": 1
                },
                "DAT_2000045c": {
                    "last_non_empty_chunk": 1
                },
                "DAT_20000460": {
                    "no_of_chunks": 1
                },
                "DAT_20000858": {
                    "trim_threshold": 1
                },
                "DAT_20000a44": {
                    "m": 1
                },
                "FUN_080088ec": {
                    "deallocate_memory": 3,
                    "deallocate_memory_block": 3,
                    "free_memory_block": 1,
                    "improve_and_unlock_malloc": 1,
                    "mem_free": 1,
                    "realloc_and_lock": 1,
                    "realloc_and_unlock": 1,
                    "realloc_memory_block": 2,
                    "reallocate_memory": 7,
                    "reallocate_memory_block": 3,
                    "rearrange_memory": 1,
                    "rearrange_memory_blocks": 1,
                    "reclaim_memory": 1,
                    "release_memory_block": 1,
                    "reorganize_memory_block": 1
                },
                "iVar1": {
                    "index": 21,
                    "iterator": 1,
                    "loop_iterator": 1,
                    "size": 2,
                    "temp_index": 1,
                    "temp_var1": 4,
                    "total_size": 1
                },
                "iVar10": {
                    "bin_index": 4,
                    "block_index": 4,
                    "block_size": 1,
                    "category": 1,
                    "count": 1,
                    "i": 1,
                    "index": 2,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "multiplier": 1,
                    "new_index": 1,
                    "num_chunks": 1,
                    "shift": 1,
                    "size": 3,
                    "small_block_index": 1,
                    "temp_var2": 2,
                    "temp_var4": 1,
                    "type_index": 1,
                    "var1": 2
                },
                "param_1": {
                    "arg1": 1,
                    "arg_1": 1,
                    "context": 1,
                    "lock": 9,
                    "lock_param": 2,
                    "lock_state": 1,
                    "lock_status": 4,
                    "memory_context": 1,
                    "mutex": 1,
                    "param1": 10
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "block": 1,
                    "block_address": 4,
                    "block_ptr": 4,
                    "block_size": 1,
                    "chunk": 1,
                    "chunk_ptr": 1,
                    "memory_block": 1,
                    "param2": 4,
                    "pointer": 1,
                    "ptr": 10,
                    "size": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "param3": 10,
                    "param_3": 11,
                    "size": 3,
                    "thread_safe_lock": 1,
                    "trim_threshold": 1,
                    "unknown": 1,
                    "unknown_parameter_1": 1,
                    "unused_param1": 1
                },
                "param_4": {
                    "arg4": 1,
                    "arg_4": 1,
                    "flag": 1,
                    "param4": 10,
                    "param_4": 11,
                    "top_pad": 1,
                    "unknown": 1,
                    "unknown_param": 2,
                    "unknown_parameter_2": 1,
                    "unused_param2": 1,
                    "var": 1
                },
                "puVar2": {
                    "block": 2,
                    "block_current": 1,
                    "block_end_addr": 1,
                    "block_ptr": 4,
                    "block_ptr_adjust": 1,
                    "block_ptr_end": 1,
                    "block_start": 1,
                    "chunk": 1,
                    "chunk_hdr": 1,
                    "curr_block": 1,
                    "curr_pointer": 1,
                    "current_block": 1,
                    "current_block_ptr": 1,
                    "current_chunk": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "header": 1,
                    "pointer_var2": 1,
                    "prev_block": 3,
                    "prev_chunk": 2,
                    "prev_header": 1,
                    "previous_block": 1,
                    "ptr1": 2
                },
                "puVar3": {
                    "block": 1,
                    "block_end": 1,
                    "block_next": 1,
                    "block_ptr_start": 1,
                    "curr_block": 2,
                    "curr_chunk": 2,
                    "curr_header": 1,
                    "current_block": 1,
                    "next_block": 7,
                    "next_block_ptr": 5,
                    "next_chunk": 2,
                    "next_chunk_hdr": 1,
                    "next_pointer": 2,
                    "next_ptr": 1,
                    "pointer_var3": 1,
                    "ptr2": 2
                },
                "puVar4": {
                    "current_block": 2,
                    "current_ptr": 1,
                    "pointer_var4": 1,
                    "prev_block": 4,
                    "prev_block_ptr": 6,
                    "prev_chunk": 1,
                    "prev_chunk_hdr": 1,
                    "prev_footer": 1,
                    "prev_pointer": 1,
                    "previous": 1,
                    "previous_block": 1,
                    "ptr3": 2,
                    "temp_block": 1,
                    "temp_pointer": 2,
                    "temp_pointer1": 1,
                    "temp_ptr": 5
                },
                "puVar7": {
                    "curr_block_ptr": 1,
                    "forward": 1,
                    "header_block_ptr": 1,
                    "header_pointer": 1,
                    "new_next_block": 1,
                    "next_block_start": 1,
                    "pointer_var5": 1,
                    "prev_block": 2,
                    "prev_block_footer": 1,
                    "prev_chunk": 1,
                    "prev_free_block": 3,
                    "prev_free_block_ptr": 1,
                    "prev_large_chunk": 1,
                    "prev_ptr": 2,
                    "prev_size": 1,
                    "previous_block2": 1,
                    "previous_pointer": 1,
                    "ptr4": 2,
                    "temp_block": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 2,
                    "temp_ptr2": 2
                },
                "puVar8": {
                    "footer_block_ptr": 1,
                    "footer_pointer": 1,
                    "new_block_ptr": 1,
                    "new_prev_block": 1,
                    "next_block": 1,
                    "next_block_end": 1,
                    "next_free_block": 3,
                    "next_free_block_ptr": 1,
                    "next_large_chunk": 1,
                    "next_pointer": 1,
                    "next_ptr": 2,
                    "next_size": 1,
                    "pointer_var6": 1,
                    "prev_block_header": 1,
                    "prev_block_next": 1,
                    "prev_ptr": 2,
                    "previous_block": 1,
                    "previous_block3": 1,
                    "ptr5": 2,
                    "temp": 1,
                    "temp_pointer3": 1,
                    "temp_ptr2": 3,
                    "temp_ptr3": 2
                },
                "puVar9": {
                    "block_header": 1,
                    "forward_header": 1,
                    "header": 1,
                    "header_block": 1,
                    "header_block_ptr_2": 1,
                    "header_pointer": 1,
                    "header_ptr": 3,
                    "info_block": 1,
                    "pointer_var7": 1,
                    "prev_block_footer": 1,
                    "prev_block_start": 1,
                    "prev_chunk_hdr": 1,
                    "prev_chunk_ptr": 1,
                    "prev_data_block": 1,
                    "ptr6": 2,
                    "small_chunk_header": 1,
                    "temp2_ptr": 1,
                    "temp_block": 2,
                    "temp_pointer": 1,
                    "temp_pointer4": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_ptr3": 3,
                    "temp_ptr4": 1
                },
                "uVar11": {
                    "block_flags": 1,
                    "block_header": 1,
                    "block_size": 1,
                    "block_status": 1,
                    "check_bit": 1,
                    "curr_block_footer": 1,
                    "current_chunk_size": 1,
                    "first_size": 1,
                    "flag": 5,
                    "flag1": 3,
                    "flag2": 1,
                    "flags": 1,
                    "footer_block_offset": 1,
                    "header_flag": 1,
                    "header_info": 1,
                    "header_size": 1,
                    "is_free": 2,
                    "is_prev_block_free": 1,
                    "is_prev_free": 1,
                    "reserved_bits1": 1,
                    "state": 1,
                    "temp_var5": 1,
                    "value3": 1,
                    "var2": 1
                },
                "uVar12": {
                    "flag2": 4,
                    "footer_flag": 1,
                    "footer_size": 1,
                    "header_offset": 1,
                    "header_size": 1,
                    "info_block_size": 1,
                    "link_var": 1,
                    "next_block_address": 1,
                    "next_block_header": 1,
                    "next_block_index": 1,
                    "next_block_size": 2,
                    "next_block_status": 1,
                    "next_chunk_flag": 1,
                    "next_chunk_size": 1,
                    "next_header": 1,
                    "next_size": 1,
                    "prev_block_size": 1,
                    "reserved_bits2": 1,
                    "second_size": 1,
                    "temp_block_size": 1,
                    "temp_info": 1,
                    "temp_size": 2,
                    "temp_var6": 1,
                    "unused_flags": 1,
                    "value4": 1,
                    "var3": 1
                },
                "uVar5": {
                    "adjusted_size": 1,
                    "aligned_size": 1,
                    "allocated_size": 1,
                    "block_size": 11,
                    "chunk_size": 4,
                    "curr_size": 1,
                    "current_size": 2,
                    "size": 1,
                    "size_adjusted": 1,
                    "size_and_flag": 1,
                    "temp_var2": 1,
                    "total_size": 5,
                    "value1": 1
                },
                "uVar6": {
                    "alloc_size": 1,
                    "block_alloc_size": 1,
                    "block_size": 6,
                    "curr_block_size": 1,
                    "curr_chunk_size": 1,
                    "next_block_size": 11,
                    "next_chunk_size": 3,
                    "next_offset": 1,
                    "next_size": 3,
                    "size2": 1,
                    "temp_var3": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_0800884c",
                "FUN_080090b4",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_08008af8",
                "FUN_080097cc",
                "FUN_08005e9c",
                "FUN_08009adc"
            ],
            "code": "\nvoid reallocate_memory_block_080088ec(undefined4 param1,int ptr,undefined4 param_3,undefined4 param_4)\n\n{\n  int index;\n  uint *block_ptr;\n  uint *next_block;\n  undefined *prev_block_ptr;\n  uint block_size;\n  uint next_block_size;\n  undefined *prev_free_block;\n  undefined *next_free_block;\n  undefined4 *temp_ptr3;\n  int bin_index;\n  uint flag;\n  uint flag2;\n  \n  if (ptr == 0) {\n    return;\n  }\n  __malloc_lock();\n  flag = *(uint *)(ptr + -4);\n  block_ptr = (uint *)(ptr + -8);\n  block_size = flag & 0xfffffffe;\n  next_block = (uint *)((int)block_ptr + block_size);\n  next_block_size = next_block[1] & 0xfffffffc;\n  if (DAT_20000454 == next_block) {\n    block_size = block_size + next_block_size;\n    if ((flag & 1) == 0) {\n      block_ptr = (uint *)((int)block_ptr - *(int *)(ptr + -8));\n      next_block_size = block_ptr[2];\n      flag = block_ptr[3];\n      block_size = block_size + *(int *)(ptr + -8);\n      *(uint *)(next_block_size + 0xc) = flag;\n      *(uint *)(flag + 8) = next_block_size;\n    }\n    next_block_size = DAT_20000858;\n    block_ptr[1] = block_size | 1;\n    DAT_20000454 = block_ptr;\n    if (next_block_size <= block_size) {\n      _malloc_trim_r(param1,DAT_20000a44);\n    }\nLAB_080089f0:\n    __malloc_unlock(param1);\n    return;\n  }\n  next_block[1] = next_block_size;\n  if ((flag & 1) == 0) {\n    block_ptr = (uint *)((int)block_ptr - *(int *)(ptr + -8));\n    temp_ptr3 = (undefined4 *)block_ptr[2];\n    block_size = block_size + *(int *)(ptr + -8);\n    flag = *(uint *)((int)next_block + next_block_size + 4) & 1;\n    if ((uint **)temp_ptr3 == &DAT_20000454) {\n      if (flag == 0) {\n        flag = next_block[2];\n        flag2 = next_block[3];\n        block_size = block_size + next_block_size;\n        *(uint *)(flag + 0xc) = flag2;\n        *(uint *)(flag2 + 8) = flag;\n        block_ptr[1] = block_size | 1;\n        *(uint *)((int)block_ptr + block_size) = block_size;\n      }\n      else {\n        block_ptr[1] = block_size | 1;\n        *next_block = block_size;\n      }\n      goto LAB_080089f0;\n    }\n    flag2 = block_ptr[3];\n    temp_ptr3[3] = flag2;\n    *(undefined4 **)(flag2 + 8) = temp_ptr3;\n  }\n  else {\n    flag = *(uint *)((int)next_block + next_block_size + 4) & 1;\n  }\n  if (flag == 0) {\n    temp_ptr3 = (undefined4 *)next_block[2];\n    block_size = block_size + next_block_size;\n    if ((uint **)temp_ptr3 == &DAT_20000454) {\n      DAT_2000045c = block_ptr;\n      DAT_20000460 = block_ptr;\n      block_ptr[2] = (uint)&DAT_20000454;\n      block_ptr[3] = (uint)&DAT_20000454;\n      block_ptr[1] = block_size | 1;\n      *(uint *)((int)block_ptr + block_size) = block_size;\n      goto LAB_080089f0;\n    }\n    next_block_size = next_block[3];\n    temp_ptr3[3] = next_block_size;\n    *(undefined4 **)(next_block_size + 8) = temp_ptr3;\n    block_ptr[1] = block_size | 1;\n    *(uint *)((int)block_ptr + block_size) = block_size;\n  }\n  else {\n    block_ptr[1] = block_size | 1;\n    *(uint *)((int)block_ptr + block_size) = block_size;\n  }\n  if (block_size < 0x200) {\n    bin_index = (block_size >> 3) + 1;\n    block_size = 1 << ((int)(block_size >> 3) >> 2 & 0xffU) | (uint)DAT_20000450;\n    next_block_size = *(uint *)(&DAT_2000044c + bin_index * 8);\n    block_ptr[2] = next_block_size;\n    block_ptr[3] = (uint)(&DAT_20000444 + bin_index * 8);\n    DAT_20000450 = (undefined *)block_size;\n    *(uint **)(&DAT_2000044c + bin_index * 8) = block_ptr;\n    *(uint **)(next_block_size + 0xc) = block_ptr;\n    __malloc_unlock(param1,block_ptr,block_size,param_4);\n    return;\n  }\n  next_block_size = block_size >> 9;\n  if (next_block_size < 5) {\n    bin_index = ((block_size >> 6) + 0x39) * 8;\n    index = (block_size >> 6) + 0x38;\n  }\n  else if (next_block_size < 0x15) {\n    bin_index = (next_block_size + 0x5c) * 8;\n    index = next_block_size + 0x5b;\n  }\n  else if (next_block_size < 0x55) {\n    bin_index = ((block_size >> 0xc) + 0x6f) * 8;\n    index = (block_size >> 0xc) + 0x6e;\n  }\n  else if (next_block_size < 0x155) {\n    bin_index = ((block_size >> 0xf) + 0x78) * 8;\n    index = (block_size >> 0xf) + 0x77;\n  }\n  else if (next_block_size < 0x555) {\n    bin_index = ((block_size >> 0x12) + 0x7d) * 8;\n    index = (block_size >> 0x12) + 0x7c;\n  }\n  else {\n    bin_index = 0x3f8;\n    index = 0x7e;\n  }\n  prev_block_ptr = *(undefined **)(&DAT_2000044c + bin_index);\n  prev_free_block = &DAT_20000444 + bin_index;\n  if (prev_free_block == prev_block_ptr) {\n    prev_block_ptr = (undefined *)(1 << (index >> 2 & 0xffU) | (uint)DAT_20000450);\n    next_free_block = prev_free_block;\n    DAT_20000450 = prev_block_ptr;\n  }\n  else {\n    do {\n      next_free_block = prev_block_ptr;\n      if ((*(uint *)(prev_block_ptr + 4) & 0xfffffffc) <= block_size) break;\n      prev_block_ptr = *(undefined **)(prev_block_ptr + 8);\n      next_free_block = prev_free_block;\n    } while (prev_free_block != prev_block_ptr);\n    prev_free_block = *(undefined **)(next_free_block + 0xc);\n  }\n  block_ptr[2] = (uint)next_free_block;\n  block_ptr[3] = (uint)prev_free_block;\n  *(uint **)(prev_free_block + 8) = block_ptr;\n  *(uint **)(next_free_block + 0xc) = block_ptr;\n  __malloc_unlock(param1,block_ptr,prev_block_ptr,param_4);\n  return;\n}\n\n",
            "current_name": "reallocate_memory_block_080088ec",
            "entrypoint": "0x080088ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080088ec": "reallocate_memory_block_080088ec",
                "iVar1": "index",
                "iVar10": "bin_index",
                "param_1": "param1",
                "param_2": "ptr",
                "puVar2": "block_ptr",
                "puVar3": "next_block",
                "puVar4": "prev_block_ptr",
                "puVar7": "prev_free_block",
                "puVar8": "next_free_block",
                "puVar9": "temp_ptr3",
                "uVar11": "flag",
                "uVar12": "flag2",
                "uVar5": "block_size",
                "uVar6": "next_block_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ad4": {
            "additional_data": {
                "0x2000001c": {
                    "base_address": 1
                },
                "0x2000085c": {
                    "base_offset": 1,
                    "default_address": 1,
                    "default_memory_address": 1,
                    "default_offset": 9,
                    "default_value": 5
                },
                "0x34": {
                    "offset": 1,
                    "offset_value": 1
                },
                "0xf0": {
                    "additional_offset": 3,
                    "adjustment_value": 1,
                    "offset": 3,
                    "offset_increment": 2
                },
                "DAT_2000001c": {
                    "base_address": 1,
                    "data_address": 2,
                    "data_pointer": 2
                },
                "FUN_08008ad4": {
                    "calculate_adjusted_value": 5,
                    "calculate_base_address": 1,
                    "calculate_final_value": 1,
                    "calculate_new_integer": 1,
                    "calculate_offset": 5,
                    "calculate_result_offset": 1,
                    "calculate_updated_value": 5,
                    "get_adjusted_memory_address": 1,
                    "get_adjusted_value": 1,
                    "get_base_address": 1,
                    "get_calculated_value": 1,
                    "get_data_offset": 1,
                    "get_offset": 1,
                    "get_updated_value": 6
                },
                "iVar1": {
                    "current_value": 12,
                    "data_offset": 1,
                    "initial_value": 1,
                    "memory_address": 1,
                    "offset": 6,
                    "original_value": 1,
                    "result": 1,
                    "result_offset": 1,
                    "value": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nint get_adjusted_memory_address_08008ad4(void)\n\n{\n  int current_value;\n  \n  current_value = *(int *)(DAT_2000001c + 0x34);\n  if (current_value == 0) {\n    current_value = 0x2000085c;\n  }\n  return current_value + 0xf0;\n}\n\n",
            "current_name": "get_adjusted_memory_address_08008ad4",
            "entrypoint": "0x08008ad4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ad4": "get_adjusted_memory_address_08008ad4",
                "iVar1": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "called": [],
            "calling": [
                "FUN_080098c0",
                "FUN_080090a8"
            ],
            "code": "\nvoid FUNC_08008af0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af0": "FUNC_08008af0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af4": {
            "called": [],
            "calling": [
                "FUN_080098c0",
                "FUN_080090b4"
            ],
            "code": "\nvoid FUNC_08008af4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008af4",
            "entrypoint": "0x08008af4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008af4": "FUNC_08008af4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008af8": {
            "additional_data": {
                "DIC_20000454": {
                    "base": 1
                },
                "DIC_2000045c": {
                    "head": 1
                },
                "FUN_080088ec": {
                    "unlock_malloc": 1
                },
                "FUN_08008af8": {
                    "allocate_memory": 28,
                    "malloc": 1,
                    "malloc_and_unlock": 1,
                    "memory_allocation": 1
                },
                "FUN_080090a8": {
                    "unlock_malloc": 1
                },
                "FUN_080090b4": {
                    "lock_malloc": 1
                },
                "FUN_08009744": {
                    "initialize_chunk": 1
                },
                "iVar1": {
                    "padding": 1
                },
                "iVar14": {
                    "block_size": 1,
                    "current_index": 1,
                    "index": 1,
                    "index2": 4,
                    "index_4": 1,
                    "next_index": 4,
                    "next_ptr_offset": 1,
                    "prev_block_offset": 1,
                    "prev_index": 2,
                    "previous_index": 1,
                    "temp3": 2,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_11": 1,
                    "temp_index": 1,
                    "temp_size": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_var_3": 1,
                    "tmp_int2": 1,
                    "var14": 1,
                    "var_8": 1
                },
                "iVar16": {
                    "alignment_offset": 1
                },
                "iVar4": {
                    "bin_size": 1,
                    "block_offset": 1,
                    "index": 14,
                    "index1": 1,
                    "index_1": 1,
                    "length": 1,
                    "padding": 1,
                    "size_index": 1,
                    "temp3": 2,
                    "temp_4": 1,
                    "temp_var": 3,
                    "tmp_int": 1,
                    "var4": 2,
                    "var_3": 1
                },
                "param_1": {
                    "_lock": 1,
                    "error_code": 1,
                    "extra_param": 1,
                    "lock": 8,
                    "lock_flag": 1,
                    "lock_ptr": 1,
                    "memory": 1,
                    "memory_ptr": 1,
                    "param_ptr": 1,
                    "param_size": 2,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_size": 1,
                    "ptr_to_size": 1,
                    "result": 3,
                    "result_ptr": 3,
                    "size": 2,
                    "size_ptr": 1
                },
                "param_2": {
                    "alignment": 1,
                    "block_size": 1,
                    "n": 1,
                    "num_bytes": 1,
                    "size": 27
                },
                "piVar11": {
                    "alloc_ptr": 1,
                    "allocated_block": 3,
                    "allocated_chunk": 1,
                    "allocated_memory": 1,
                    "ptr6": 2,
                    "result": 16,
                    "result_ptr": 2
                },
                "puVar1": {
                    "brk_result": 1,
                    "current_block": 4,
                    "current_pointer": 1,
                    "new_allocate_ptr": 1,
                    "p1": 1,
                    "pointer": 2,
                    "pointer1": 2,
                    "pointer_1": 1,
                    "prev_block": 1,
                    "ptr": 2,
                    "ptr1": 5,
                    "ptr_1": 1,
                    "temp": 1,
                    "temp_ptr": 3,
                    "tmp_ptr": 1
                },
                "puVar10": {
                    "block": 1,
                    "block_ptr": 1,
                    "block_start": 1,
                    "current": 1,
                    "current_block": 2,
                    "current_chunk": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "free_list_ptr": 1,
                    "iteration_pointer": 1,
                    "list_ptr": 1,
                    "new_base": 1,
                    "next_block": 1,
                    "next_chunk": 1,
                    "pointer5": 2,
                    "pointer_5": 1,
                    "ptr10": 1,
                    "ptr3": 1,
                    "ptr5": 4,
                    "ptr7": 1,
                    "ptr_5": 1,
                    "search_block": 1,
                    "temp_10": 1,
                    "temp_ptr5": 1,
                    "tmp_ptr3": 1
                },
                "puVar11": {
                    "result": 1
                },
                "puVar12": {
                    "temp": 1
                },
                "puVar15": {
                    "allocated_chunk_header": 1,
                    "block_ptr": 1,
                    "chunk_header": 1,
                    "current_block_ptr": 1,
                    "data_ptr": 1,
                    "first_block": 1,
                    "free_block": 1,
                    "head_block": 1,
                    "header": 1,
                    "new_base": 1,
                    "new_block": 3,
                    "new_header": 1,
                    "pointer6": 2,
                    "pointer_6": 1,
                    "ptr15": 1,
                    "ptr4": 1,
                    "ptr6": 1,
                    "ptr7": 2,
                    "ptr_6": 1,
                    "result": 2,
                    "start_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr6": 1
                },
                "puVar16": {
                    "bin_start": 1,
                    "current_block_ptr": 1,
                    "end_pointer": 1,
                    "last_block": 1,
                    "loop_ptr": 1,
                    "next_block": 1,
                    "old_block": 1,
                    "pointer7": 2,
                    "pointer_7": 1,
                    "prev": 1,
                    "prev_block_ptr": 1,
                    "prev_chunk_ptr": 1,
                    "previous": 1,
                    "previous_block": 1,
                    "ptr16": 1,
                    "ptr5": 1,
                    "ptr7": 1,
                    "ptr8": 2,
                    "ptr_7": 1,
                    "search_chunk": 1,
                    "tail_block": 1,
                    "temp_12": 1,
                    "temp_header": 1,
                    "temp_ptr2": 2,
                    "temp_ptr7": 1,
                    "tmp_ptr5": 1
                },
                "puVar17": {
                    "loop_ptr2": 1
                },
                "puVar5": {
                    "allocated_block": 1,
                    "block": 3,
                    "block_end": 2,
                    "chunk": 1,
                    "chunk_pointer": 1,
                    "chunk_ptr": 1,
                    "current_block": 1,
                    "header": 1,
                    "heap_end_ptr": 1,
                    "new_base": 1,
                    "next_block": 3,
                    "pointer2": 2,
                    "pointer_2": 1,
                    "prev_chunk": 1,
                    "ptr": 1,
                    "ptr2": 5,
                    "ptr_2": 1,
                    "temp_5": 1,
                    "temp_pointer": 1,
                    "temp_ptr2": 1,
                    "tmp_ptr2": 1
                },
                "puVar6": {
                    "ptr3": 1,
                    "tail": 1
                },
                "puVar7": {
                    "ptr4": 1,
                    "tail_prev": 1
                },
                "puVar8": {
                    "next_block": 2,
                    "next_chunk": 1,
                    "pointer3": 2,
                    "pointer_3": 1,
                    "prev": 2,
                    "prev_block": 4,
                    "prev_block_ptr": 1,
                    "prev_chunk": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr3": 4,
                    "ptr5": 1,
                    "ptr8": 1,
                    "ptr_3": 1,
                    "temp_8": 1,
                    "temp_pointer": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr1": 1,
                    "temp_ptr3": 1,
                    "tmp_ptr1": 1,
                    "tmp_ptr3": 1
                },
                "puVar9": {
                    "brk": 2,
                    "brk_pointer": 1,
                    "brk_ptr": 1,
                    "current_block": 1,
                    "end_of_heap": 1,
                    "merge_to_ptr": 1,
                    "new_base": 1,
                    "new_block": 2,
                    "new_chunk": 2,
                    "new_pointer": 1,
                    "next": 1,
                    "pointer4": 2,
                    "pointer_4": 1,
                    "ptr2": 1,
                    "ptr4": 4,
                    "ptr6": 1,
                    "ptr9": 1,
                    "ptr_4": 1,
                    "temp_9": 1,
                    "temp_ptr2": 1,
                    "temp_ptr4": 1,
                    "tmp_ptr2": 1,
                    "tmp_ptr4": 1
                },
                "uVar12": {
                    "adjusted_size": 14,
                    "calc_size": 1,
                    "new_size": 2,
                    "rounded_size": 1,
                    "size": 1,
                    "temp1": 2,
                    "temp5": 1,
                    "temp_size5": 1,
                    "tmp_val5": 1,
                    "total_size": 4,
                    "value5": 1,
                    "var_6": 1
                },
                "uVar13": {
                    "adjusted_size": 1,
                    "adjusted_size8": 1,
                    "aligned_size": 17,
                    "alignment": 2,
                    "chunk_size": 1,
                    "rounded_block_size": 1,
                    "temp2": 2,
                    "temp6": 1,
                    "temp_size6": 1,
                    "value6": 1,
                    "var_7": 1
                },
                "uVar15": {
                    "temp6": 1
                },
                "uVar16": {
                    "temp7": 1
                },
                "uVar2": {
                    "bit_shift": 1,
                    "block_size": 3,
                    "chunk_size": 3,
                    "index": 1,
                    "num": 1,
                    "remainder": 2,
                    "remaining_size": 1,
                    "rounded_size": 1,
                    "size_1": 1,
                    "temp": 2,
                    "temp1": 5,
                    "temp_2": 1,
                    "temp_size": 1,
                    "tmp1": 1,
                    "tmp_val": 1,
                    "value": 1,
                    "value1": 1,
                    "var1": 1,
                    "var2": 1,
                    "var_1": 1
                },
                "uVar3": {
                    "alignment": 1,
                    "block_size": 1,
                    "diff": 1,
                    "diff_size": 1,
                    "difference": 1,
                    "index": 1,
                    "remainder": 1,
                    "remaining_size": 3,
                    "size_2": 1,
                    "temp": 1,
                    "temp2": 6,
                    "temp_3": 1,
                    "temp_size": 3,
                    "temp_size2": 1,
                    "temp_var": 1,
                    "tmp2": 1,
                    "tmp_val2": 1,
                    "value2": 1,
                    "var2": 1,
                    "var3": 1,
                    "var_2": 1
                },
                "uVar6": {
                    "bin_index": 1,
                    "bit_mask": 1,
                    "bitmask": 1,
                    "block_size": 1,
                    "count": 1,
                    "divisor": 1,
                    "index": 1,
                    "index_2": 1,
                    "num": 1,
                    "shift": 3,
                    "temp3": 4,
                    "temp4": 2,
                    "temp_6": 1,
                    "temp_size3": 1,
                    "temp_var_1": 1,
                    "tmp3": 1,
                    "tmp_val3": 1,
                    "u_var6": 1,
                    "value3": 1,
                    "var3": 1,
                    "var6": 1,
                    "var_4": 1
                },
                "uVar7": {
                    "alignment": 1,
                    "bin_size": 1,
                    "bitmask": 1,
                    "index_3": 1,
                    "mask": 2,
                    "offset": 1,
                    "remaining_size": 1,
                    "temp": 1,
                    "temp4": 4,
                    "temp5": 2,
                    "temp_7": 1,
                    "temp_index": 1,
                    "temp_size4": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "tmp4": 1,
                    "tmp_val4": 1,
                    "u_var7": 1,
                    "value4": 1,
                    "var4": 1,
                    "var7": 1,
                    "var_5": 1
                }
            },
            "called": [
                "FUN_08009744",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_08009980",
                "FUN_080097cc",
                "FUN_08005e9c",
                "FUN_08009adc"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_08008af8(undefined4 *lock,uint size)\n\n{\n  undefined *ptr1;\n  uint temp1;\n  uint temp2;\n  int index;\n  undefined *ptr2;\n  uint temp3;\n  uint temp4;\n  undefined4 *ptr3;\n  undefined *ptr4;\n  undefined *ptr5;\n  int *result;\n  uint adjusted_size;\n  uint aligned_size;\n  int next_index;\n  undefined4 *new_block;\n  undefined4 *ptr8;\n  \n  adjusted_size = size + 0xb;\n  if (adjusted_size < 0x17) {\n    if (0x10 < size) goto LAB_08008c7a;\n    __malloc_lock();\n    aligned_size = 0x10;\n    index = 0x18;\n    adjusted_size = 2;\nLAB_08008b18:\n    ptr5 = *(undefined **)((int)&DAT_20000450 + index);\n    if ((ptr5 != &DAT_20000444 + index) ||\n       (ptr5 = *(undefined **)((int)&DAT_20000458 + index), &DAT_2000044c + index != ptr5)) {\n      index = *(int *)(ptr5 + 0xc);\n      ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n      adjusted_size = *(uint *)(ptr2 + 4);\nLAB_08008b34:\n      next_index = *(int *)(ptr5 + 8);\n      *(int *)(next_index + 0xc) = index;\n      *(int *)(index + 8) = next_index;\n      *(uint *)(ptr2 + 4) = adjusted_size | 1;\n      __malloc_unlock(lock);\n      return (int *)(ptr5 + 8);\n    }\n    adjusted_size = adjusted_size + 2;\n  }\n  else {\n    aligned_size = adjusted_size & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_08008c7a:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n    __malloc_lock();\n    if (aligned_size < 0x1f8) {\n      adjusted_size = adjusted_size >> 3;\n      index = aligned_size + 8;\n      goto LAB_08008b18;\n    }\n    temp1 = adjusted_size >> 9;\n    if (temp1 == 0) {\n      index = 0x200;\n      temp3 = 0x40;\n      temp1 = 0x3f;\n    }\n    else if (temp1 < 5) {\n      temp3 = (adjusted_size >> 6) + 0x39;\n      temp1 = (adjusted_size >> 6) + 0x38;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x15) {\n      temp3 = temp1 + 0x5c;\n      temp1 = temp1 + 0x5b;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x55) {\n      temp3 = (adjusted_size >> 0xc) + 0x6f;\n      temp1 = (adjusted_size >> 0xc) + 0x6e;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x155) {\n      temp3 = (adjusted_size >> 0xf) + 0x78;\n      temp1 = (adjusted_size >> 0xf) + 0x77;\n      index = temp3 * 8;\n    }\n    else if (temp1 < 0x555) {\n      temp3 = (adjusted_size >> 0x12) + 0x7d;\n      temp1 = (adjusted_size >> 0x12) + 0x7c;\n      index = temp3 * 8;\n    }\n    else {\n      index = 0x3f8;\n      temp3 = 0x7f;\n      temp1 = 0x7e;\n    }\n    for (ptr5 = *(undefined **)((int)&DAT_20000450 + index); adjusted_size = temp3,\n        &DAT_20000444 + index != ptr5; ptr5 = *(undefined **)(ptr5 + 0xc)) {\n      next_index = (*(uint *)(ptr5 + 4) & 0xfffffffc) - aligned_size;\n      adjusted_size = temp1;\n      if (0xf < next_index) break;\n      if (-1 < next_index) {\n        ptr2 = ptr5 + (*(uint *)(ptr5 + 4) & 0xfffffffc);\n        adjusted_size = *(uint *)(ptr2 + 4);\n        index = *(int *)(ptr5 + 0xc);\n        goto LAB_08008b34;\n      }\n    }\n  }\n  new_block = DAT_2000045c;\n  if ((undefined **)DAT_2000045c == &DAT_20000454) {\n    temp3 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    temp1 = DAT_20000450;\n    if (temp3 <= DAT_20000450) goto LAB_08008c06;\n  }\n  else {\n    temp3 = DAT_2000045c[1];\n    temp4 = temp3 & 0xfffffffc;\n    temp1 = temp4 - aligned_size;\n    if (0xf < (int)temp1) {\n      ptr8 = (undefined4 *)(aligned_size + (int)DAT_2000045c);\n      DAT_2000045c[1] = aligned_size | 1;\n      DAT_2000045c = ptr8;\n      DAT_20000460 = ptr8;\n      ptr8[2] = &DAT_20000454;\n      ptr8[3] = &DAT_20000454;\n      ptr8[1] = temp1 | 1;\n      *(uint *)((int)new_block + temp4) = temp1;\n      __malloc_unlock(lock);\n      return new_block + 2;\n    }\n    DAT_2000045c = &DAT_20000454;\n    DAT_20000460 = &DAT_20000454;\n    if (-1 < (int)temp1) {\n      *(uint *)((int)new_block + temp4 + 4) = *(uint *)((int)new_block + temp4 + 4) | 1;\n      __malloc_unlock(lock);\n      return new_block + 2;\n    }\n    if (temp4 < 0x200) {\n      index = (temp3 >> 3) + 1;\n      next_index = *(int *)(&DAT_2000044c + index * 8);\n      temp1 = 1 << ((int)(temp3 >> 3) >> 2 & 0xffU) | DAT_20000450;\n      new_block[2] = next_index;\n      new_block[3] = &DAT_20000444 + index * 8;\n      DAT_20000450 = temp1;\n      *(undefined4 **)(&DAT_2000044c + index * 8) = new_block;\n      *(undefined4 **)(next_index + 0xc) = new_block;\n    }\n    else {\n      temp1 = temp3 >> 9;\n      if (temp1 < 5) {\n        index = ((temp3 >> 6) + 0x39) * 8;\n        next_index = (temp3 >> 6) + 0x38;\n      }\n      else if (temp1 < 0x15) {\n        index = (temp1 + 0x5c) * 8;\n        next_index = temp1 + 0x5b;\n      }\n      else if (temp1 < 0x55) {\n        index = ((temp3 >> 0xc) + 0x6f) * 8;\n        next_index = (temp3 >> 0xc) + 0x6e;\n      }\n      else if (temp1 < 0x155) {\n        index = ((temp3 >> 0xf) + 0x78) * 8;\n        next_index = (temp3 >> 0xf) + 0x77;\n      }\n      else if (temp1 < 0x555) {\n        index = ((temp3 >> 0x12) + 0x7d) * 8;\n        next_index = (temp3 >> 0x12) + 0x7c;\n      }\n      else {\n        index = 0x3f8;\n        next_index = 0x7e;\n      }\n      ptr5 = *(undefined **)(&DAT_2000044c + index);\n      ptr2 = &DAT_20000444 + index;\n      if (ptr2 == ptr5) {\n        DAT_20000450 = 1 << (next_index >> 2 & 0xffU) | DAT_20000450;\n      }\n      else {\n        do {\n          if ((*(uint *)(ptr5 + 4) & 0xfffffffc) <= temp4) break;\n          ptr5 = *(undefined **)(ptr5 + 8);\n        } while (ptr2 != ptr5);\n        ptr2 = *(undefined **)(ptr5 + 0xc);\n      }\n      temp1 = DAT_20000450;\n      new_block[2] = ptr5;\n      new_block[3] = ptr2;\n      *(undefined4 **)(ptr2 + 8) = new_block;\n      *(undefined4 **)(ptr5 + 0xc) = new_block;\n    }\n    temp3 = 1 << ((int)adjusted_size >> 2 & 0xffU);\n    if (temp3 <= temp1) {\nLAB_08008c06:\n      if ((temp3 & temp1) == 0) {\n        adjusted_size = adjusted_size & 0xfffffffc;\n        do {\n          temp3 = temp3 << 1;\n          adjusted_size = adjusted_size + 4;\n        } while ((temp3 & temp1) == 0);\n      }\n      do {\n        ptr8 = (undefined4 *)(&DAT_2000044c + adjusted_size * 8);\n        temp1 = adjusted_size;\n        new_block = ptr8;\n        do {\n          for (ptr3 = (undefined4 *)new_block[3]; new_block != ptr3;\n              ptr3 = (undefined4 *)ptr3[3]) {\n            temp4 = ptr3[1] & 0xfffffffc;\n            temp2 = temp4 - aligned_size;\n            if (0xf < (int)temp2) {\n              next_index = ptr3[2];\n              index = ptr3[3];\n              new_block = (undefined4 *)(aligned_size + (int)ptr3);\n              ptr3[1] = aligned_size | 1;\n              *(int *)(next_index + 0xc) = index;\n              *(int *)(index + 8) = next_index;\n              DAT_2000045c = new_block;\n              DAT_20000460 = new_block;\n              new_block[2] = &DAT_20000454;\n              new_block[3] = &DAT_20000454;\n              new_block[1] = temp2 | 1;\n              *(uint *)((int)ptr3 + temp4) = temp2;\n              __malloc_unlock(lock);\n              return ptr3 + 2;\n            }\n            if (-1 < (int)temp2) {\n              index = ptr3[3];\n              next_index = ptr3[2];\n              *(uint *)((int)ptr3 + temp4 + 4) = *(uint *)((int)ptr3 + temp4 + 4) | 1;\n              *(int *)(next_index + 0xc) = index;\n              *(int *)(index + 8) = next_index;\n              __malloc_unlock(lock);\n              return ptr3 + 2;\n            }\n          }\n          temp1 = temp1 + 1;\n          new_block = new_block + 2;\n        } while ((temp1 & 3) != 0);\n        do {\n          temp4 = adjusted_size & 3;\n          new_block = ptr8 + -2;\n          adjusted_size = adjusted_size - 1;\n          if (temp4 == 0) {\n            DAT_20000450 = DAT_20000450 & ~temp3;\n            break;\n          }\n          ptr8 = (undefined4 *)*ptr8;\n        } while (ptr8 == new_block);\n        temp3 = temp3 * 2;\n        if ((DAT_20000450 <= temp3 && temp3 - DAT_20000450 != 0) || (adjusted_size = temp1, temp3 == 0))\n        break;\n        for (; (temp3 & DAT_20000450) == 0; temp3 = temp3 << 1) {\n          adjusted_size = adjusted_size + 4;\n        }\n      } while( true );\n    }\n  }\n  ptr5 = DAT_20000454;\n  adjusted_size = *(uint *)(DAT_20000454 + 4) & 0xfffffffc;\n  if ((aligned_size <= adjusted_size) && (temp1 = adjusted_size - aligned_size, 0xf < (int)temp1)) goto LAB_08008dac;\n  if (DAT_20000854 == (undefined *)0xffffffff) {\n    temp1 = aligned_size + DAT_20000a44 + 0x10;\n  }\n  else {\n    temp1 = aligned_size + DAT_20000a44 + 0x100f & 0xfffff000;\n  }\n  ptr2 = (undefined *)_sbrk_r(lock,temp1);\n  if (ptr2 == (undefined *)0xffffffff) {\nLAB_08008ed8:\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n  }\n  else {\n    ptr1 = ptr5 + adjusted_size;\n    if (ptr1 < ptr2 || ptr1 == ptr2) {\n      ptr4 = DAT_20000a14 + temp1;\n      if ((ptr1 != ptr2) || (((uint)ptr1 & 0xfff) != 0)) goto LAB_08008d02;\n      DAT_20000a14 = ptr4;\n      *(uint *)(DAT_20000454 + 4) = adjusted_size + temp1 | 1;\n    }\n    else {\n      if (ptr5 != &DAT_2000044c) goto LAB_08008ed8;\nLAB_08008d02:\n      DAT_20000a14 = DAT_20000a14 + temp1;\n      ptr4 = ptr2;\n      if (DAT_20000854 != (undefined *)0xffffffff) {\n        DAT_20000a14 = DAT_20000a14 + ((int)ptr2 - (int)ptr1);\n        ptr4 = DAT_20000854;\n      }\n      DAT_20000854 = ptr4;\n      temp3 = (uint)ptr2 & 7;\n      if (temp3 == 0) {\n        index = 0x1000;\n      }\n      else {\n        ptr2 = ptr2 + (8 - temp3);\n        index = 0x1008 - temp3;\n      }\n      index = index - ((uint)(ptr2 + temp1) & 0xfff);\n      next_index = _sbrk_r(lock,index);\n      if (next_index == -1) {\n        temp1 = 1;\n        index = 0;\n      }\n      else {\n        temp1 = (next_index - (int)ptr2) + index | 1;\n      }\n      ptr4 = DAT_20000a14 + index;\n      DAT_20000454 = ptr2;\n      DAT_20000a14 = ptr4;\n      *(uint *)(ptr2 + 4) = temp1;\n      if (ptr5 != &DAT_2000044c) {\n        if (adjusted_size < 0x10) {\n          *(undefined4 *)(ptr2 + 4) = 1;\n          goto LAB_08008eee;\n        }\n        adjusted_size = adjusted_size - 0xc & 0xfffffff8;\n        *(uint *)(ptr5 + 4) = *(uint *)(ptr5 + 4) & 1 | adjusted_size;\n        *(undefined4 *)(ptr5 + adjusted_size + 4) = 5;\n        *(undefined4 *)(ptr5 + adjusted_size + 8) = 5;\n        if (0xf < adjusted_size) {\n          _free_r(lock,ptr5 + 8);\n          ptr4 = DAT_20000a14;\n        }\n      }\n    }\n    if (DAT_20000a3c < ptr4) {\n      DAT_20000a3c = ptr4;\n    }\n    adjusted_size = *(uint *)(DAT_20000454 + 4);\n    if (DAT_20000a40 < ptr4) {\n      DAT_20000a40 = ptr4;\n    }\n  }\n  temp1 = (adjusted_size & 0xfffffffc) - aligned_size;\n  if ((aligned_size <= (adjusted_size & 0xfffffffc)) && (0xf < (int)temp1)) {\nLAB_08008dac:\n    ptr5 = DAT_20000454 + aligned_size;\n    *(uint *)(DAT_20000454 + 4) = aligned_size | 1;\n    result = (int *)(DAT_20000454 + 8);\n    DAT_20000454 = ptr5;\n    *(uint *)(ptr5 + 4) = temp1 | 1;\n    __malloc_unlock(lock);\n    return result;\n  }\nLAB_08008eee:\n  __malloc_unlock(lock);\n  return (int *)0x0;\n}\n\n",
            "current_name": "allocate_memory_08008af8",
            "entrypoint": "0x08008af8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af8": "allocate_memory_08008af8",
                "iVar1": "padding",
                "iVar14": "next_index",
                "iVar4": "index",
                "param_1": "lock",
                "param_2": "size",
                "piVar11": "result",
                "puVar1": "ptr1",
                "puVar10": "ptr5",
                "puVar15": "new_block",
                "puVar16": "ptr8",
                "puVar5": "ptr2",
                "puVar8": "ptr3",
                "puVar9": "ptr4",
                "uVar12": "adjusted_size",
                "uVar13": "aligned_size",
                "uVar15": "temp6",
                "uVar16": "temp7",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar6": "temp3",
                "uVar7": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800901c": {
            "additional_data": {
                "FUN_0800901c": {
                    "find_byte_sequence": 20,
                    "find_ending_byte": 1,
                    "find_first_instance": 1,
                    "find_first_match": 1,
                    "find_first_occurrence": 4,
                    "find_next_byte": 1,
                    "find_target": 1,
                    "find_value": 1,
                    "reverse_bytes": 1
                },
                "LAB_0800904a": {
                    "loop_start": 1,
                    "start_search": 1
                },
                "LAB_08009050": {
                    "end_search": 1,
                    "loop_exit": 1
                },
                "LAB_0800906c": {
                    "end": 1,
                    "not_found": 1
                },
                "bVar5": {
                    "end_flag": 1,
                    "end_of_array": 1,
                    "found": 1,
                    "is_done": 1,
                    "is_empty": 2,
                    "is_empty_array": 1,
                    "is_end": 3,
                    "is_end_condition": 1,
                    "is_end_of_array": 1,
                    "is_end_of_loop": 1,
                    "is_end_of_sequence": 1,
                    "is_end_reached": 3,
                    "is_finished": 1,
                    "is_last_byte": 1,
                    "is_last_iteration": 1,
                    "is_length_zero": 6,
                    "is_search_complete": 1,
                    "is_termination": 1,
                    "is_zero": 2
                },
                "byte": {
                    "current_byte": 1
                },
                "param_1": {
                    "array": 4,
                    "buffer": 4,
                    "byte_array": 1,
                    "data": 12,
                    "data_array": 3,
                    "data_ptr": 1,
                    "input_array": 5,
                    "input_buffer": 1
                },
                "param_2": {
                    "byte": 1,
                    "byte_length": 1,
                    "byte_sequence": 3,
                    "byte_to_find": 7,
                    "byte_value": 3,
                    "input_length": 1,
                    "length": 1,
                    "pattern": 1,
                    "search_byte": 2,
                    "search_value": 5,
                    "target_byte": 3,
                    "value": 3
                },
                "param_3": {
                    "array_length": 11,
                    "array_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "data_length": 3,
                    "data_size": 1,
                    "length": 10,
                    "size": 3
                },
                "puVar3": {
                    "array_ptr": 1,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "curr_ptr": 1,
                    "current_addr": 1,
                    "current_byte": 6,
                    "current_byte_ptr": 2,
                    "current_data": 1,
                    "current_element": 4,
                    "current_pointer": 1,
                    "current_ptr": 5,
                    "ptr": 3,
                    "temp_ptr": 2
                },
                "uVar1": {
                    "masked_byte": 1,
                    "result": 3,
                    "temp": 7,
                    "temp1": 2,
                    "temp_1": 1,
                    "temp_result": 2,
                    "temp_var1": 2,
                    "tmp_value": 1,
                    "xor_result": 9,
                    "xored_value": 2
                },
                "uVar2": {
                    "byte_concatenation": 1,
                    "byte_sequence": 1,
                    "combined": 1,
                    "combined_byte": 6,
                    "combined_bytes": 1,
                    "combined_pattern": 1,
                    "combined_value": 3,
                    "concatenated_bytes": 1,
                    "concatenated_value": 1,
                    "i": 1,
                    "search_value_combined": 1,
                    "search_value_shifted": 1,
                    "shifted_byte": 1,
                    "temp": 1,
                    "temp2": 3,
                    "temp_2": 1,
                    "temp_value": 1,
                    "temp_var2": 2,
                    "two_byte_value": 1,
                    "updated_length": 1
                },
                "uVar4": {
                    "byte": 1,
                    "byte_mask": 1,
                    "byte_value": 1,
                    "ending_byte": 1,
                    "filtered_byte": 1,
                    "first_byte": 2,
                    "last_byte": 1,
                    "lower_byte": 2,
                    "mask": 1,
                    "masked_byte": 7,
                    "masked_search_byte": 2,
                    "masked_value": 2,
                    "pattern": 1,
                    "search_byte": 4,
                    "search_value_mask": 1,
                    "search_value_msb": 1,
                    "trimmed_byte_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nuint * find_byte_sequence_0800901c(uint *data,uint byte_to_find,uint array_length)\n\n{\n  uint xor_result;\n  uint combined_byte;\n  uint *current_byte;\n  uint masked_byte;\n  bool is_length_zero;\n  \n  masked_byte = byte_to_find & 0xff;\n  if (((uint)data & 3) == 0) {\nstart_search:\n    if (3 < array_length) {\n      combined_byte = (byte_to_find & 0xff) << 8 | masked_byte;\n      current_byte = data;\n      do {\n        xor_result = *current_byte ^ (combined_byte | combined_byte << 0x10);\n        data = current_byte + 1;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) goto end_search;\n        array_length = array_length - 4;\n        current_byte = data;\n      } while (3 < array_length);\n    }\n    current_byte = data;\n    if (array_length == 0) {\n      data = (uint *)0x0;\n    }\n    else {\nend_search:\n      data = current_byte;\n      if (*(current_byte *)data != masked_byte) {\n        current_byte = (uint *)(array_length + (int)data);\n        do {\n          data = (uint *)((int)data + 1);\n          if (current_byte == data) goto end;\n        } while (*(current_byte *)data != masked_byte);\n      }\n    }\n  }\n  else {\n    combined_byte = array_length - 1;\n    if (array_length == 0) {\nend:\n      data = (uint *)0x0;\n    }\n    else if (*(current_byte *)data != masked_byte) {\n      current_byte = (uint *)((int)data + 1);\n      do {\n        data = current_byte;\n        array_length = combined_byte;\n        if (((uint)data & 3) == 0) goto start_search;\n        is_length_zero = combined_byte == 0;\n        combined_byte = combined_byte - 1;\n        if (is_length_zero) goto end;\n        current_byte = (uint *)((int)data + 1);\n      } while (*(current_byte *)data != masked_byte);\n    }\n  }\n  return data;\n}\n\n",
            "current_name": "find_byte_sequence_0800901c",
            "entrypoint": "0x0800901c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800901c": "find_byte_sequence_0800901c",
                "LAB_0800904a": "start_search",
                "LAB_08009050": "end_search",
                "LAB_0800906c": "end",
                "bVar5": "is_length_zero",
                "byte": "current_byte",
                "param_1": "data",
                "param_2": "byte_to_find",
                "param_3": "array_length",
                "puVar3": "current_byte",
                "uVar1": "xor_result",
                "uVar2": "combined_byte",
                "uVar4": "masked_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090a8": {
            "additional_data": {
                "FUNC_08008af0": {
                    "do_something": 1,
                    "execute_subfunction": 2,
                    "function_08008af0": 1,
                    "function_to_be_called": 1,
                    "function_to_call": 1,
                    "initialization": 1,
                    "initialization_function": 1,
                    "initialize": 1,
                    "initialize_context": 1,
                    "initialize_function": 4,
                    "initialize_lock": 2,
                    "initialize_resources": 1,
                    "perform_additional_task": 2,
                    "perform_cleanup": 3,
                    "perform_task": 1,
                    "release_lock": 1,
                    "some_function": 2,
                    "some_other_function": 1,
                    "sub_function": 1,
                    "unlock": 1
                },
                "FUN_080090a8": {
                    "acquire_lock_recursive": 1,
                    "acquire_recursive_lock": 28,
                    "acquire_recursive_lock_for_retargeting": 1,
                    "lock_acquisition_function": 1
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8",
                "FUN_080088ec",
                "FUN_08009adc"
            ],
            "code": "\nvoid acquire_recursive_lock_for_retargeting_080090a8(void)\n\n{\n  __retarget_lock_acquire_recursive(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "acquire_recursive_lock_for_retargeting_080090a8",
            "entrypoint": "0x080090a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090a8": "acquire_recursive_lock_for_retargeting_080090a8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090b4": {
            "additional_data": {
                "DAT_20000bfc": {
                    "lock_data": 1
                },
                "FUNC_08008af4": {
                    "": 1,
                    "call_function": 1,
                    "do_something": 3,
                    "execute_func": 1,
                    "execute_function": 2,
                    "execute_sub_function": 1,
                    "function1": 1,
                    "function_08008af4": 1,
                    "function_a": 1,
                    "function_without_parameters": 1,
                    "init_resource": 1,
                    "lock_recursive": 1,
                    "lock_release_func": 1,
                    "nested_function": 1,
                    "perform_action": 1,
                    "perform_cleanup": 2,
                    "perform_lock_release": 1,
                    "recursive_lock_release": 1,
                    "reset_function": 2,
                    "some_function": 1,
                    "sub_function": 2,
                    "unlock_function": 1,
                    "update_target": 1
                },
                "FUN_080090b4": {
                    "release_lock": 6,
                    "release_lock_recursive": 2,
                    "release_recursive_lock": 23
                },
                "__retarget_lock_release_recursive": {
                    "release_recursive_lock": 2
                }
            },
            "called": [
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8",
                "FUN_08009adc",
                "FUN_080088ec"
            ],
            "code": "\nvoid release_lock_recursive_080090b4(void)\n\n{\n  release_recursive_lock(&DAT_20000bfc);\n  return;\n}\n\n",
            "current_name": "release_lock_recursive_080090b4",
            "entrypoint": "0x080090b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090b4": "release_lock_recursive_080090b4",
                "__retarget_lock_release_recursive": "release_recursive_lock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080090c0": {
            "additional_data": {
                "FUN_080090c0": {
                    "allocate_and_initialize_array": 1,
                    "allocate_and_initialize_data": 1,
                    "allocate_array": 1,
                    "allocate_memory": 2,
                    "allocate_or_get_array": 1,
                    "allocate_or_get_data": 2,
                    "allocate_or_get_element": 1,
                    "allocate_or_get_entry": 3,
                    "allocate_or_get_existing_data": 1,
                    "allocate_or_get_pointer": 1,
                    "allocate_or_get_value": 1,
                    "allocate_or_retrieve_data": 1,
                    "allocate_or_update_array": 2,
                    "allocate_or_update_data": 2,
                    "allocate_or_update_entry": 1,
                    "allocate_or_update_memory": 2,
                    "allocate_or_update_pointer": 1,
                    "create_or_get_data_structure": 1,
                    "create_or_get_item": 1,
                    "create_or_update_array": 1,
                    "create_or_update_entry": 1,
                    "initialize_array": 2,
                    "initialize_data": 1
                },
                "FUN_08009980": {
                    "allocate_memory": 1,
                    "allocate_memory_block": 1,
                    "copy_memory": 1,
                    "initialize_array_with_values": 1,
                    "initialize_data_element": 1,
                    "initialize_data_structure": 1,
                    "initialize_element": 1,
                    "initialize_entry": 1
                },
                "_calloc_r": {
                    "allocate_dynamic_memory": 1,
                    "allocate_memory": 4,
                    "custom_alloc": 1,
                    "custom_allocate_memory": 1,
                    "custom_calloc": 1,
                    "custom_calloc_r": 1
                },
                "iVar2": {
                    "alloc_address": 1,
                    "allocation_ptr": 1,
                    "array": 3,
                    "array_allocated_ptr": 1,
                    "array_index": 2,
                    "array_pointer": 1,
                    "array_pointer2": 1,
                    "array_ptr": 2,
                    "data_address": 2,
                    "data_array": 2,
                    "data_block_ptr": 1,
                    "data_size": 1,
                    "entry_array": 2,
                    "entry_list": 1,
                    "entry_pointer": 1,
                    "existing_data": 1,
                    "item_array": 1,
                    "memory_index": 1,
                    "memory_ptr": 1,
                    "pointer_address": 1,
                    "ptr_offset": 1,
                    "ptr_to_array": 2,
                    "table_entry": 1
                },
                "param_1": {
                    "array_ptr": 1,
                    "array_size": 3,
                    "buffer": 1,
                    "context": 1,
                    "data": 3,
                    "data_pointer": 1,
                    "data_size": 2,
                    "data_structure": 1,
                    "element": 1,
                    "entry": 1,
                    "entry_array": 1,
                    "entry_table": 1,
                    "function_address": 1,
                    "input_value": 1,
                    "memory_size": 2,
                    "param": 2,
                    "param1": 1,
                    "param_size": 1,
                    "ptr": 1,
                    "ptr_to_data": 1,
                    "ptr_to_structure": 1,
                    "size": 3
                },
                "param_2": {
                    "entry_index": 1,
                    "index": 27,
                    "param1": 1,
                    "param2": 2
                },
                "param_3": {
                    "param2": 1,
                    "param3": 2,
                    "size": 1
                },
                "puVar1": {
                    "array": 1,
                    "array_ptr": 3,
                    "data_array": 1,
                    "data_pointer": 3,
                    "element_pointer": 1,
                    "element_ptr": 1,
                    "entry": 2,
                    "entry_ptr": 3,
                    "existing_data": 1,
                    "existing_element": 1,
                    "existing_entry": 1,
                    "item": 1,
                    "pointer": 4,
                    "ptr": 2,
                    "ptr_to_data_element": 1,
                    "ptr_to_element": 1,
                    "ptr_to_memory": 1,
                    "ptr_value": 1,
                    "value_ptr": 2
                }
            },
            "called": [
                "FUN_08009980"
            ],
            "calling": [
                "FUN_08009630",
                "FUN_080079e8",
                "FUN_08009258",
                "FUN_08009244",
                "FUN_08009530",
                "FUN_080093a4",
                "FUN_08009120",
                "FUN_08009444"
            ],
            "code": "\nundefined4 * create_or_update_array_080090c0(int size,uint index)\n\n{\n  undefined4 *pointer;\n  int array;\n  \n  array = *(int *)(size + 0x4c);\n  if (array == 0) {\n    array = allocate_memory(size,4,0x21);\n    *(int *)(size + 0x4c) = array;\n    if (array == 0) {\n      return (undefined4 *)0x0;\n    }\n  }\n  pointer = *(undefined4 **)(array + index * 4);\n  if (pointer == (undefined4 *)0x0) {\n    array = 1 << (index & 0xff);\n    pointer = (undefined4 *)allocate_memory(size,1,(array + 5) * 4);\n    if (pointer == (undefined4 *)0x0) {\n      return (undefined4 *)0x0;\n    }\n    pointer[1] = index;\n    pointer[2] = array;\n  }\n  else {\n    *(undefined4 *)(array + index * 4) = *pointer;\n  }\n  pointer[3] = 0;\n  pointer[4] = 0;\n  return pointer;\n}\n\n",
            "current_name": "create_or_update_array_080090c0",
            "entrypoint": "0x080090c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080090c0": "create_or_update_array_080090c0",
                "_calloc_r": "allocate_memory",
                "iVar2": "array",
                "param_1": "size",
                "param_2": "index",
                "puVar1": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800910c": {
            "additional_data": {
                "DAT_0800f73c": {
                    "binary_array": 1
                },
                "DAT_0800f740": {
                    "array_element": 1
                },
                "FUN_0800910c": {
                    "copy_and_swap_values": 1,
                    "copy_data_to_pointer": 1,
                    "copy_integer_from_offset": 1,
                    "copy_memory_to_pointer": 1,
                    "copy_value_and_link_pointer": 1,
                    "copy_value_and_update_pointer": 1,
                    "decode_data": 1,
                    "extract_and_assign": 1,
                    "extract_and_replace": 1,
                    "extract_and_set_pointer": 1,
                    "extract_and_set_ptr": 1,
                    "extract_data": 7,
                    "extract_data_and_update": 1,
                    "extract_data_from_binary": 1,
                    "extract_parameter": 1,
                    "extract_value_and_replace": 2,
                    "extract_value_and_set": 1,
                    "extract_value_and_swap": 2,
                    "extract_value_and_update": 1,
                    "extract_value_and_update_pointer": 1,
                    "extract_value_and_update_ptr": 1,
                    "extract_value_from_binary": 1,
                    "retrieve_and_store_value": 1
                },
                "PTR_0800f744": {
                    "array_pointer": 1
                },
                "iVar1": {
                    "array_base_address": 1,
                    "array_pointer": 1,
                    "base_address": 1,
                    "base_pointer": 1,
                    "buffer_start": 1,
                    "data_address": 2,
                    "data_array": 1,
                    "data_offset": 2,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "data_start_address": 1,
                    "index": 1,
                    "local_variable": 1,
                    "offset": 2,
                    "ptr_to_data": 1,
                    "ptr_to_value": 1,
                    "source_address": 2,
                    "source_data_address": 1,
                    "source_offset": 1,
                    "target_pointer": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_variable": 1,
                    "var1": 1
                },
                "param_1": {
                    "base_address": 8,
                    "binary_offset": 1,
                    "binary_ptr": 1,
                    "buffer_offset": 1,
                    "data_offset": 2,
                    "data_struct_size": 1,
                    "input_address": 3,
                    "input_offset": 3,
                    "input_pointer": 1,
                    "input_value": 1,
                    "param1": 2,
                    "param_address": 1,
                    "param_offset": 1,
                    "source_offset": 2,
                    "source_pointer": 2,
                    "value_pointer": 1
                },
                "param_2": {
                    "data_pointer": 3,
                    "data_struct": 1,
                    "destination_pointer": 3,
                    "extracted_data": 1,
                    "integer_array": 1,
                    "new_value_ptr": 1,
                    "output": 1,
                    "output_address": 1,
                    "output_array": 1,
                    "output_data": 3,
                    "output_pointer": 6,
                    "output_ptr": 1,
                    "param2": 1,
                    "ptr_to_value": 1,
                    "reversed_value": 1,
                    "target_address": 1,
                    "target_data": 2,
                    "target_pointer": 1,
                    "value_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid extract_data_from_binary_0800910c(int base_address,undefined4 *output_pointer)\n\n{\n  int data_pointer;\n  \n  if (output_pointer != (undefined4 *)0x0) {\n    data_pointer = *(int *)(base_address + 0x4c);\n    *output_pointer = *(undefined4 *)(data_pointer + output_pointer[1] * 4);\n    *(undefined4 **)(data_pointer + output_pointer[1] * 4) = output_pointer;\n  }\n  return;\n}\n\n",
            "current_name": "extract_data_from_binary_0800910c",
            "entrypoint": "0x0800910c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800910c": "extract_data_from_binary_0800910c",
                "iVar1": "data_pointer",
                "param_1": "base_address",
                "param_2": "output_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009120": {
            "additional_data": {
                "FUN_08009120": {
                    "calculate_checksum": 17,
                    "calculate_next_values": 1,
                    "calculate_product_sum": 1,
                    "calculate_result": 1,
                    "compute_checksum": 1,
                    "multiply_and_store": 1,
                    "perform_calculation": 1,
                    "process_data": 1,
                    "reverse": 1,
                    "update_array_with_multiplier": 1
                },
                "_Balloc": {
                    "allocate_memory": 2
                },
                "iVar3": {
                    "array_length": 4,
                    "array_size": 4,
                    "buffer_size": 1,
                    "count": 2,
                    "data_count": 1,
                    "data_length": 2,
                    "data_size": 1,
                    "elems_to_process": 1,
                    "input_data_length": 1,
                    "length": 5,
                    "num_elements": 6,
                    "num_iterations": 2,
                    "size": 1
                },
                "iVar5": {
                    "counter": 13,
                    "i": 1,
                    "index": 12,
                    "iteration": 1,
                    "iteration_index": 2,
                    "loop_counter": 2
                },
                "memcpy": {
                    "copy_memory": 2
                },
                "param_1": {
                    "array_size": 1,
                    "buffer_size": 3,
                    "input_length": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_size": 3,
                    "length": 1,
                    "num_iterations": 1,
                    "param_array_size": 1,
                    "param_size": 1,
                    "param_x": 1,
                    "size": 16
                },
                "param_2": {
                    "array": 4,
                    "buffer": 3,
                    "checksum_array": 1,
                    "data": 11,
                    "data_array": 3,
                    "input_array": 7,
                    "input_data": 1,
                    "param_array": 1
                },
                "param_3": {
                    "factor": 3,
                    "multiplier": 28
                },
                "param_4": {
                    "accumulator": 6,
                    "carry": 5,
                    "carry_over": 1,
                    "checksum": 13,
                    "initial_checksum": 2,
                    "initial_value": 1,
                    "remainder": 1,
                    "result": 1,
                    "sum": 1
                },
                "puVar1": {
                    "new_array": 1,
                    "new_buffer": 2,
                    "new_data": 3,
                    "output_array": 1,
                    "result": 12,
                    "result_array": 9,
                    "result_array_ptr": 1,
                    "result_ptr": 1,
                    "updated_array": 1
                },
                "puVar4": {
                    "array_pointer": 2,
                    "array_ptr": 2,
                    "current": 1,
                    "current_data": 2,
                    "current_element": 11,
                    "current_value_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "p_data": 1,
                    "pointer": 1,
                    "ptr": 7
                },
                "uVar2": {
                    "carry": 8,
                    "carry_bits": 1,
                    "carry_over": 2,
                    "carry_upper": 1,
                    "high_word": 1,
                    "temp": 10,
                    "temp_checksum": 1,
                    "temp_result": 2,
                    "temp_value": 2,
                    "temp_var": 2,
                    "temp_variable": 1
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "code": "\nundefined4 * calculate_checksum_08009120(int size,undefined4 *data,int multiplier,uint checksum)\n\n{\n  undefined4 *result;\n  uint temp;\n  int num_elements;\n  uint *current_element;\n  int counter;\n  \n  counter = 0;\n  num_elements = data[4];\n  current_element = data + 5;\n  do {\n    counter = counter + 1;\n    checksum = multiplier * (*current_element & 0xffff) + checksum;\n    temp = multiplier * (*current_element >> 0x10) + (checksum >> 0x10);\n    *current_element = (checksum & 0xffff) + temp * 0x10000;\n    checksum = temp >> 0x10;\n    current_element = current_element + 1;\n  } while (counter < num_elements);\n  result = data;\n  if (checksum != 0) {\n    if ((int)data[2] <= num_elements) {\n      result = (undefined4 *)allocate_memory(size,data[1] + 1);\n      copy_memory(result + 3,data + 3,(data[4] + 2) * 4);\n      counter = *(int *)(size + 0x4c);\n      *data = *(undefined4 *)(counter + data[1] * 4);\n      *(undefined4 **)(counter + data[1] * 4) = data;\n    }\n    result[num_elements + 5] = checksum;\n    result[4] = num_elements + 1;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_checksum_08009120",
            "entrypoint": "0x08009120",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009120": "calculate_checksum_08009120",
                "_Balloc": "allocate_memory",
                "iVar3": "num_elements",
                "iVar5": "counter",
                "memcpy": "copy_memory",
                "param_1": "size",
                "param_2": "data",
                "param_3": "multiplier",
                "param_4": "checksum",
                "puVar1": "result",
                "puVar4": "current_element",
                "uVar2": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091a4": {
            "additional_data": {
                "0xc0000000": {
                    "mask_2_bits": 1
                },
                "0xf0000000": {
                    "mask_4_bits": 1
                },
                "0xff000000": {
                    "mask_8_bits": 1
                },
                "0xffff0000": {
                    "mask_16_bits": 1
                },
                "FUN_080091a4": {
                    "bit_count": 1,
                    "count_leading_zeroes": 3,
                    "count_leading_zeros": 22,
                    "determine_leading_zeros": 1,
                    "find_highest_bit": 1,
                    "find_highest_bit_position": 2,
                    "find_leftmost_bit_set": 1
                },
                "iVar1": {
                    "bit_count": 1,
                    "bit_position": 3,
                    "count": 1,
                    "leading_zero_count": 1,
                    "leading_zeroes_count": 2,
                    "leading_zeros": 14,
                    "leading_zeros_count": 8,
                    "number_of_zeros": 1
                },
                "param_1": {
                    "input": 13,
                    "input_number": 2,
                    "input_value": 1,
                    "num": 6,
                    "number": 2,
                    "value": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630",
                "FUN_080079e8"
            ],
            "code": "\nint count_leading_zeros_080091a4(uint input)\n\n{\n  int leading_zeros;\n  \n  if ((input & 0xffff0000) == 0) {\n    input = input << 0x10;\n    leading_zeros = 0x10;\n  }\n  else {\n    leading_zeros = 0;\n  }\n  if ((input & 0xff000000) == 0) {\n    input = input << 8;\n    leading_zeros = leading_zeros + 8;\n  }\n  if ((input & 0xf0000000) == 0) {\n    input = input << 4;\n    leading_zeros = leading_zeros + 4;\n  }\n  if ((input & 0xc0000000) == 0) {\n    input = input << 2;\n    leading_zeros = leading_zeros + 2;\n  }\n  if (-1 < (int)input) {\n    if ((int)(input << 1) < 0) {\n      return leading_zeros + 1;\n    }\n    leading_zeros = 0x20;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_080091a4",
            "entrypoint": "0x080091a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091a4": "count_leading_zeros_080091a4",
                "iVar1": "leading_zeros",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091e4": {
            "additional_data": {
                "FUN_080091e4": {
                    "count_leading_zeros": 10,
                    "count_trailing_zero_bits": 1,
                    "count_trailing_zeroes": 3,
                    "count_trailing_zeros": 9,
                    "find_first_set_bit": 1,
                    "find_highest_bit": 1,
                    "find_leading_zeros": 2,
                    "find_least_significant_bit_position": 1,
                    "find_trailing_zeroes": 2,
                    "find_trailing_zeros": 1
                },
                "iVar1": {
                    "bit_count": 1,
                    "bit_position": 1,
                    "count": 7,
                    "leading_zeros": 10,
                    "num_zeroes": 1,
                    "result": 1,
                    "trailing_zero_count": 2,
                    "trailing_zeroes": 1,
                    "trailing_zeroes_count": 1,
                    "trailing_zeros": 2,
                    "zero_count": 1,
                    "zeros_count": 2
                },
                "param_1": {
                    "data": 1,
                    "input": 8,
                    "input_num": 1,
                    "num": 9,
                    "num_ptr": 3,
                    "number": 3,
                    "number_ptr": 1,
                    "value": 4
                },
                "uVar2": {
                    "input_num": 1,
                    "input_value": 1,
                    "num": 3,
                    "num_value": 1,
                    "number": 1,
                    "temp": 10,
                    "value": 11
                }
            },
            "called": [],
            "calling": [
                "FUN_08009630"
            ],
            "code": "\nint count_leading_zeros_080091e4(uint *num)\n\n{\n  int leading_zeros;\n  uint value;\n  \n  value = *num;\n  if ((value & 7) == 0) {\n    if ((value & 0xffff) == 0) {\n      value = value >> 0x10;\n      leading_zeros = 0x10;\n    }\n    else {\n      leading_zeros = 0;\n    }\n    if ((value & 0xff) == 0) {\n      value = value >> 8;\n      leading_zeros = leading_zeros + 8;\n    }\n    if ((value & 0xf) == 0) {\n      value = value >> 4;\n      leading_zeros = leading_zeros + 4;\n    }\n    if ((value & 3) == 0) {\n      value = value >> 2;\n      leading_zeros = leading_zeros + 2;\n    }\n    if (-1 < (int)(value << 0x1f)) {\n      value = value >> 1;\n      if (value == 0) {\n        return 0x20;\n      }\n      leading_zeros = leading_zeros + 1;\n    }\n    *num = value;\n    return leading_zeros;\n  }\n  if ((int)(value << 0x1f) < 0) {\n    return 0;\n  }\n  if (-1 < (int)(value << 0x1e)) {\n    *num = value >> 2;\n    return 2;\n  }\n  *num = value >> 1;\n  return 1;\n}\n\n",
            "current_name": "count_leading_zeros_080091e4",
            "entrypoint": "0x080091e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091e4": "count_leading_zeros_080091e4",
                "iVar1": "leading_zeros",
                "param_1": "num",
                "uVar2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009244": {
            "additional_data": {
                "FUN_080090c0": {
                    "fetch_data": 1,
                    "get_pointer": 1
                },
                "FUN_08009244": {
                    "initialize_balloc": 1,
                    "initialize_data": 6,
                    "initialize_data_struct": 2,
                    "initialize_data_structure": 18,
                    "initialize_memory_block": 1,
                    "initialize_object": 1,
                    "initialize_struct": 1,
                    "initialize_structure": 1
                },
                "_Balloc": {
                    "allocate_memory": 3
                },
                "iVar1": {
                    "allocated_block": 6,
                    "allocated_buffer": 1,
                    "allocated_data": 1,
                    "allocated_memory": 7,
                    "allocated_memory_address": 1,
                    "array_pointer": 1,
                    "data_pointer": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 1,
                    "data_structure_address": 1,
                    "data_structure_ptr": 4,
                    "memory_block": 2,
                    "object_pointer": 1,
                    "pointer": 1,
                    "struct_ptr": 1
                },
                "param_1": {
                    "data_size": 1,
                    "input_size": 1,
                    "size": 29
                },
                "param_2": {
                    "data": 5,
                    "data_value": 4,
                    "value": 21,
                    "value_to_store": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid initialize_data_structure_08009244(undefined4 size,undefined4 value)\n\n{\n  int allocated_memory;\n  \n  allocated_memory = allocate_memory(size,1);\n  *(undefined4 *)(allocated_memory + 0x10) = 1;\n  *(undefined4 *)(allocated_memory + 0x14) = value;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08009244",
            "entrypoint": "0x08009244",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009244": "initialize_data_structure_08009244",
                "_Balloc": "allocate_memory",
                "iVar1": "allocated_memory",
                "param_1": "size",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009258": {
            "additional_data": {
                "FUN_08009258": {
                    "apply_operation": 1,
                    "calculate_checksum": 8,
                    "calculate_multiplication": 1,
                    "calculate_product": 3,
                    "calculate_product_sum": 2,
                    "calculate_sum": 6,
                    "calculate_sum_hash": 1,
                    "compute_product": 1,
                    "initialize_array": 2,
                    "perform_computation": 1,
                    "reverse_binary": 1
                },
                "iVar10": {
                    "b_size": 1,
                    "combined_size": 1,
                    "length2": 3,
                    "min_len": 1,
                    "min_length": 8,
                    "min_size": 7,
                    "minimum_length": 1,
                    "minimum_size": 1,
                    "size2": 2,
                    "size_b": 1,
                    "source2_length": 1,
                    "temp2": 1
                },
                "iVar11": {
                    "temp_var4": 1
                },
                "iVar12": {
                    "array1_length": 2,
                    "data1_size": 1,
                    "data_size_var": 1,
                    "input1_length": 1,
                    "input1_size": 1,
                    "input_buffer2_length": 1,
                    "len1": 1,
                    "length1": 4,
                    "length1_copy": 1,
                    "length_a": 1,
                    "max_input": 1,
                    "max_length": 1,
                    "size": 1,
                    "size1": 4,
                    "size_a": 1,
                    "source1_length": 1,
                    "source1_size": 1,
                    "temp3": 2,
                    "temp_size": 1,
                    "temp_var1": 1,
                    "temp_var_5": 1
                },
                "iVar13": {
                    "array1": 2,
                    "data_var": 1,
                    "input": 1,
                    "input_address1_copy": 1,
                    "input_buffer1": 1,
                    "larger_array": 2,
                    "larger_input_ptr": 1,
                    "min_array": 1,
                    "min_binary": 1,
                    "min_data": 1,
                    "min_input": 1,
                    "minimum_input": 1,
                    "ptr_to_use1": 1,
                    "shorter_array": 1,
                    "size2": 2,
                    "size_b": 1,
                    "smaller_array": 1,
                    "smaller_input_ptr": 1,
                    "source1_index": 1,
                    "source2_length": 1,
                    "temp4": 2,
                    "temp_input": 1,
                    "temp_var2": 1,
                    "temp_var_6": 1
                },
                "iVar3": {
                    "allocated_array_size": 1,
                    "allocated_size": 1,
                    "array2": 1,
                    "buffer_size": 1,
                    "checksum_array_length": 1,
                    "checksum_array_size": 1,
                    "checksum_buffer_length": 1,
                    "increment": 1,
                    "length": 1,
                    "memory_size": 1,
                    "new_array_size": 1,
                    "num_b": 1,
                    "num_blocks": 1,
                    "num_iterations": 2,
                    "num_words": 1,
                    "output": 1,
                    "output_length": 1,
                    "output_size": 3,
                    "required_size": 1,
                    "result": 1,
                    "result_size": 3,
                    "size": 2,
                    "target": 1,
                    "temp4": 1
                },
                "iVar9": {
                    "a_size": 1,
                    "array2_length": 2,
                    "combined_length": 1,
                    "data2_size": 1,
                    "input2_length": 1,
                    "input2_size": 1,
                    "input_buffer1_length": 1,
                    "len2": 1,
                    "length1": 3,
                    "length2": 4,
                    "length_b": 1,
                    "max_size": 2,
                    "min_num": 1,
                    "size": 1,
                    "size1": 2,
                    "size2": 2,
                    "size_a": 1,
                    "source1_length": 1,
                    "temp1": 1,
                    "total_size": 1
                },
                "param_1": {
                    "allocator": 1,
                    "array_size": 1,
                    "destination": 1,
                    "memory": 1,
                    "output": 1,
                    "output_address": 1,
                    "output_array": 1,
                    "output_buffer": 4,
                    "output_ptr": 2,
                    "param1": 4,
                    "pointer": 1,
                    "result": 10,
                    "result_pointer": 1,
                    "result_ptr": 2
                },
                "param_2": {
                    "array1": 3,
                    "binary_a": 1,
                    "data1": 1,
                    "data_size": 1,
                    "input1": 10,
                    "input1_ptr": 2,
                    "input_a": 2,
                    "input_address1": 1,
                    "input_array1": 2,
                    "input_buffer1": 1,
                    "input_length": 1,
                    "num1": 1,
                    "param2": 3,
                    "source1": 2
                },
                "param_3": {
                    "array2": 3,
                    "binary_b": 1,
                    "check_size": 1,
                    "data2": 1,
                    "input2": 10,
                    "input2_ptr": 2,
                    "input_address2": 1,
                    "input_array2": 2,
                    "input_b": 2,
                    "input_buffer2": 1,
                    "num2": 1,
                    "output_length": 1,
                    "param3": 3,
                    "source2": 2
                },
                "puVar1": {
                    "array1_ptr": 1,
                    "binary_a_ptr_i": 1,
                    "current_addition_array_value": 1,
                    "data1_ptr": 1,
                    "data_pointer": 1,
                    "dest_pointer": 1,
                    "increment_ptr": 1,
                    "input1": 1,
                    "input1_index": 1,
                    "input1_ptr": 1,
                    "input_ptr1": 1,
                    "ptr1": 9,
                    "ptr_a": 2,
                    "source_ptr1": 1,
                    "src_ptr": 2,
                    "sub_inner_pointer": 1,
                    "temp_ptr1": 1,
                    "temp_ptr10": 1,
                    "temp_ptr3": 1
                },
                "puVar14": {
                    "current_addition_buffer_value": 1,
                    "current_dest_ptr": 1,
                    "data2_ptr": 1,
                    "dest_ptr": 1,
                    "dest_ptr2": 1,
                    "inner_loop": 1,
                    "outer_ptr": 1,
                    "output_cur2": 1,
                    "output_increment_ptr": 1,
                    "output_index": 1,
                    "output_ptr_copy": 1,
                    "output_ptr_i_plus1": 1,
                    "output_ptr_start": 1,
                    "p1": 1,
                    "ptr5": 3,
                    "ptr6": 1,
                    "ptr8": 1,
                    "ptr9": 1,
                    "ptr_output_tmp": 1,
                    "ptr_result": 1,
                    "result_ptr2": 1,
                    "result_ptr_iter": 1,
                    "src_pointer": 1,
                    "sub_current_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "temp_ptr9": 1
                },
                "puVar15": {
                    "array1_ptr_iter": 1,
                    "current_multiplication_buffer_value": 1,
                    "current_source_ptr": 1,
                    "data1_ptr_tmp": 1,
                    "dest_ptr2": 1,
                    "dest_ptr2_2": 1,
                    "inner_loop_next": 1,
                    "input1_increment_ptr": 1,
                    "input1_ptr2": 1,
                    "input_ptr1_copy": 1,
                    "outer_ptr_next": 1,
                    "output_next": 1,
                    "output_ptr_current": 1,
                    "output_ptr_i_plus1": 1,
                    "p2": 1,
                    "ptr5": 2,
                    "ptr6": 3,
                    "ptr9": 1,
                    "ptr_a_tmp": 1,
                    "sub_result_pointer": 1,
                    "temp_pointer": 1,
                    "temp_ptr12": 1,
                    "temp_ptr2": 2,
                    "temp_ptr6": 2,
                    "temp_result_ptr": 1
                },
                "puVar16": {
                    "array2_ptr_iter": 1,
                    "binary_b_ptr": 1,
                    "check_var": 1,
                    "current_padded_array_value": 1,
                    "current_ptr": 1,
                    "inner_pointer": 1,
                    "inner_ptr": 1,
                    "input1_ptr": 1,
                    "input2_index": 1,
                    "input2_ptr2": 1,
                    "input2_ptr_start": 1,
                    "outer_loop": 1,
                    "output_ptr2": 1,
                    "p3": 1,
                    "ptr1_cur": 1,
                    "ptr5": 1,
                    "ptr6": 1,
                    "ptr7": 4,
                    "ptr_input_a": 1,
                    "source1_ptr": 1,
                    "source_index": 1,
                    "src_ptr2": 1,
                    "src_ptr_end": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 1,
                    "temp_ptr4": 1,
                    "temp_ptr8": 1
                },
                "puVar17": {
                    "array2_end": 1,
                    "buffer_end": 1,
                    "check_end": 1,
                    "dest_index": 1,
                    "dest_ptr_end": 1,
                    "dest_ptr_end_2": 1,
                    "destination_end_ptr": 1,
                    "end": 1,
                    "end_array": 1,
                    "end_of_checksum_buffer": 1,
                    "end_ptr": 2,
                    "end_ptr1": 1,
                    "output_cur": 1,
                    "output_end": 1,
                    "output_ptr3": 1,
                    "output_ptr_end": 1,
                    "output_start": 1,
                    "p4": 1,
                    "ptr6": 1,
                    "ptr7": 1,
                    "ptr8": 4,
                    "ptr_end": 1,
                    "ptr_output_end": 1,
                    "result_ptr3": 1,
                    "result_ptr_end": 1,
                    "temp_ptr14": 1
                },
                "puVar18": {
                    "array2_index": 1,
                    "buffer": 1,
                    "carry_ptr": 1,
                    "checksum_array": 1,
                    "checksum_buffer": 1,
                    "current_dest_ptr": 1,
                    "current_ptr": 1,
                    "dest_array": 1,
                    "dest_ptr_2": 1,
                    "dest_ptr_start": 1,
                    "end_ptr2": 1,
                    "output_end": 2,
                    "output_ptr": 1,
                    "output_ptr4": 1,
                    "output_ptr_14": 1,
                    "p5": 1,
                    "ptr7": 1,
                    "ptr8": 1,
                    "ptr9": 4,
                    "ptr_output_current": 1,
                    "result_array": 1,
                    "result_ptr4": 1,
                    "result_ptr_start": 1,
                    "result_start": 1,
                    "start_ptr": 1,
                    "temp_ptr13": 1
                },
                "puVar2": {
                    "array2_ptr": 1,
                    "binary_b_ptr_i": 1,
                    "check_pointer": 1,
                    "current_multiplication_array_value": 1,
                    "data2_ptr_tmp": 1,
                    "dst_ptr": 1,
                    "input2": 1,
                    "input2_ptr": 1,
                    "input_increment_ptr": 1,
                    "input_ptr2": 1,
                    "ptr2": 9,
                    "ptr2_cur": 1,
                    "ptr_b": 2,
                    "source_ptr2": 1,
                    "src_ptr2": 1,
                    "temp_ptr": 1,
                    "temp_ptr11": 1,
                    "temp_ptr2": 1,
                    "temp_ptr5": 1,
                    "temp_var": 1
                },
                "puVar5": {
                    "allocated_array": 1,
                    "array2_start": 1,
                    "checksum_array": 1,
                    "current": 1,
                    "current_checksum_value": 1,
                    "current_pointer": 1,
                    "dest_ptr": 1,
                    "destination_ptr": 1,
                    "output": 2,
                    "output_ptr": 3,
                    "output_ptr_i": 1,
                    "ptr3": 6,
                    "ptr_output": 1,
                    "result": 1,
                    "result_pointer": 1,
                    "result_ptr": 3,
                    "src": 1,
                    "src_ptr": 1,
                    "start_ptr": 1,
                    "temp_ptr6": 1
                },
                "puVar7": {
                    "binary_a_ptr": 1,
                    "carry_end": 1,
                    "check_sum_end": 1,
                    "data_end": 1,
                    "dest_ptr_end": 1,
                    "dst": 1,
                    "end_of_padded_array": 1,
                    "end_ptr": 2,
                    "input_end": 1,
                    "last_ptr": 1,
                    "limit_ptr": 1,
                    "next_pointer": 1,
                    "output_ptr_end": 1,
                    "ptr2": 1,
                    "ptr4": 6,
                    "ptr_a_end": 1,
                    "result_ptr_iter_end": 1,
                    "source_array": 1,
                    "start_offset": 1,
                    "temp_ptr1": 1,
                    "temp_ptr3": 1,
                    "temp_ptr7": 1
                },
                "uVar11": {
                    "binary_b_end": 1,
                    "bound": 1,
                    "end": 5,
                    "end_address": 1,
                    "end_index": 1,
                    "end_of_array": 1,
                    "end_offset": 4,
                    "end_pointer": 1,
                    "end_ptr": 1,
                    "end_value": 1,
                    "input2_offset": 1,
                    "limit": 1,
                    "partial_product2": 1,
                    "ptr1_end": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_result_size": 1,
                    "temp_var_4": 1,
                    "var4": 1
                },
                "uVar4": {
                    "carry": 15,
                    "carry2": 1,
                    "partial_product": 1,
                    "sub_result": 1,
                    "temp": 1,
                    "temp1": 4,
                    "temp_result_2": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "var1": 1
                },
                "uVar6": {
                    "binary_a_end": 1,
                    "current_array_value": 1,
                    "current_offset": 2,
                    "current_value": 1,
                    "data_offset": 1,
                    "i": 1,
                    "index": 1,
                    "input1_offset": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "ptr1": 1,
                    "start": 7,
                    "start_address": 1,
                    "start_index": 1,
                    "start_offset": 1,
                    "start_ptr": 1,
                    "start_val": 1,
                    "start_value": 1,
                    "temp2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "var": 1,
                    "var2": 1
                },
                "uVar8": {
                    "carry": 1,
                    "inner_value": 1,
                    "product": 1,
                    "sub_carry": 1,
                    "temp": 8,
                    "temp2": 3,
                    "temp5": 1,
                    "temp_result_1": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "var3": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8",
                "FUN_080093a4"
            ],
            "code": "\nvoid calculate_product_sum_08009258(undefined4 result,int input1,int input2)\n\n{\n  uint *ptr1;\n  uint *ptr2;\n  int result_size;\n  uint carry;\n  uint *ptr3;\n  uint start;\n  uint *ptr4;\n  uint temp;\n  int length2;\n  int min_length;\n  uint end;\n  int length1;\n  int larger_array;\n  uint *ptr5;\n  uint *ptr6;\n  uint *ptr7;\n  uint *ptr8;\n  uint *ptr9;\n  \n  length1 = *(int *)(input1 + 0x10);\n  length2 = *(int *)(input2 + 0x10);\n  min_length = length2;\n  larger_array = input1;\n  if (length1 < length2) {\n    min_length = length1;\n    length1 = length2;\n    larger_array = input2;\n    input2 = input1;\n  }\n  length2 = length1 + min_length;\n  result_size = *(int *)(larger_array + 4);\n  if (*(int *)(larger_array + 8) < length2) {\n    result_size = result_size + 1;\n  }\n  result_size = _Balloc(result,result_size);\n  ptr9 = (uint *)(result_size + 0x14);\n  ptr8 = ptr9 + length2;\n  for (ptr3 = ptr9; ptr3 < ptr8; ptr3 = ptr3 + 1) {\n    *ptr3 = 0;\n  }\n  start = input2 + 0x14;\n  end = start + min_length * 4;\n  ptr3 = (uint *)(larger_array + 0x14);\n  if (start < end) {\n    ptr4 = (uint *)(start + ((end - input2) - 0x15 & 0xfffffffc));\n    ptr7 = (uint *)(input2 + 0x10);\n    do {\n      while( true ) {\n        ptr7 = ptr7 + 1;\n        start = *ptr7 & 0xffff;\n        if (start != 0) break;\n        start = *ptr7 >> 0x10;\n        if (start == 0) goto LAB_080092d2;\nLAB_0800932c:\n        temp = *ptr9;\n        carry = 0;\n        ptr1 = ptr3;\n        ptr5 = ptr9;\n        end = temp;\n        do {\n          ptr6 = ptr5;\n          carry = carry + start * *(ushort *)ptr1 + (end >> 0x10);\n          *ptr6 = temp & 0xffff | carry * 0x10000;\n          ptr2 = ptr1 + 1;\n          end = ptr6[1];\n          temp = start * (*ptr1 >> 0x10) + (end & 0xffff) + (carry >> 0x10);\n          carry = temp >> 0x10;\n          ptr1 = ptr2;\n          ptr5 = ptr6 + 1;\n        } while (ptr2 < ptr3 + length1);\n        ptr6[1] = temp;\n        ptr9 = ptr9 + 1;\n        if (ptr4 == ptr7) goto LAB_0800937a;\n      }\n      end = 0;\n      ptr1 = ptr9;\n      ptr5 = ptr3;\n      do {\n        ptr2 = ptr1;\n        ptr6 = ptr5 + 1;\n        temp = start * (*ptr5 & 0xffff) + (*ptr2 & 0xffff) + end;\n        carry = start * (*ptr5 >> 0x10) + (*ptr2 >> 0x10) + (temp >> 0x10);\n        end = carry >> 0x10;\n        *ptr2 = temp & 0xffff | carry * 0x10000;\n        ptr1 = ptr2 + 1;\n        ptr5 = ptr6;\n      } while (ptr6 < ptr3 + length1);\n      ptr2[1] = end;\n      start = *ptr7 >> 0x10;\n      if (start != 0) goto LAB_0800932c;\nLAB_080092d2:\n      ptr9 = ptr9 + 1;\n    } while (ptr4 != ptr7);\n  }\nLAB_0800937a:\n  if (0 < length2) {\n    start = ptr8[-1];\n    ptr8 = ptr8 + -1;\n    while ((start == 0 && (length2 = length2 + -1, length2 != 0))) {\n      ptr8 = ptr8 + -1;\n      start = *ptr8;\n    }\n  }\n  *(int *)(result_size + 0x10) = length2;\n  return;\n}\n\n",
            "current_name": "calculate_product_sum_08009258",
            "entrypoint": "0x08009258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009258": "calculate_product_sum_08009258",
                "iVar10": "min_length",
                "iVar12": "length1",
                "iVar13": "larger_array",
                "iVar3": "result_size",
                "iVar9": "length2",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "puVar1": "ptr1",
                "puVar14": "ptr5",
                "puVar15": "ptr6",
                "puVar16": "ptr7",
                "puVar17": "ptr8",
                "puVar18": "ptr9",
                "puVar2": "ptr2",
                "puVar5": "ptr3",
                "puVar7": "ptr4",
                "uVar11": "end",
                "uVar4": "carry",
                "uVar6": "start",
                "uVar8": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080093a4": {
            "additional_data": {
                "DAT_0800a070": {
                    "constant": 1,
                    "constant_array": 1
                },
                "FUN_080093a4": {
                    "calculate": 2,
                    "calculate_result": 5,
                    "compute_result": 1,
                    "multiply_and_add": 1,
                    "multiply_and_store_result": 2,
                    "perform_calculation": 1
                },
                "LAB_080093d2": {
                    "loop": 1,
                    "loop_label": 1,
                    "start_loop": 1
                },
                "_Balloc": {
                    "allocate": 1,
                    "allocate_buffer": 1,
                    "allocate_memory": 10,
                    "allocate_memory_function": 1
                },
                "__multadd": {
                    "calculate_sum": 1,
                    "multiply_and_add": 10,
                    "multiply_and_add_function": 1,
                    "perform_multiplication_and_addition": 1
                },
                "__multiply": {
                    "multiply": 9,
                    "multiply_arr": 1,
                    "multiply_array": 1,
                    "multiply_function": 1,
                    "perform_multiplication": 1
                },
                "iVar1": {
                    "i": 1,
                    "i_var1": 1,
                    "index": 3,
                    "index1": 6,
                    "index_1": 1,
                    "loop_counter1": 1,
                    "temp1": 3,
                    "temp_loop": 1,
                    "temp_var1": 13,
                    "temp_var_1": 1
                },
                "iVar2": {
                    "i_var2": 1,
                    "index2": 6,
                    "index_2": 1,
                    "integer_var": 1,
                    "loop_counter2": 1,
                    "num_iterations": 3,
                    "num_iterations_divided": 1,
                    "temp2": 3,
                    "temp_loop": 1,
                    "temp_var2": 12,
                    "temp_var_2": 1
                },
                "ival2": {
                    "num_iterations": 1
                },
                "param_1": {
                    "a": 1,
                    "input": 10,
                    "input1": 3,
                    "input_param1": 3,
                    "input_size": 1,
                    "input_val": 1,
                    "input_value": 6,
                    "num_iterations": 1,
                    "param1": 3,
                    "param_pointer": 1,
                    "source": 1
                },
                "param_2": {
                    "array": 1,
                    "input2": 2,
                    "input_arr": 1,
                    "input_array": 4,
                    "input_param2": 2,
                    "new_input2": 1,
                    "output": 7,
                    "output_value": 1,
                    "param2": 3,
                    "result": 6,
                    "result_array": 2,
                    "result_pointer": 1
                },
                "param_3": {
                    "array_length": 3,
                    "input3": 1,
                    "input_length": 2,
                    "input_param3": 2,
                    "input_size": 2,
                    "length": 2,
                    "num_iterations": 1,
                    "param3": 3,
                    "size": 15
                },
                "puVar3": {
                    "current_array": 1,
                    "current_value": 1,
                    "new_var1": 1,
                    "output_arr": 1,
                    "ptr1": 4,
                    "ptr3": 1,
                    "ptr_var1": 1,
                    "result_array": 1,
                    "result_ptr": 1,
                    "temp1": 1,
                    "temp_array": 1,
                    "temp_array1": 1,
                    "temp_pointer1": 2,
                    "temp_ptr": 1,
                    "temp_ptr1": 7,
                    "temp_ptr_1": 1,
                    "temp_ptr_loop": 1,
                    "temp_result": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temporary_ptr3": 1
                },
                "puVar4": {
                    "alloc_arr": 1,
                    "new_value": 1,
                    "ptr2": 4,
                    "ptr4": 1,
                    "ptr_var2": 1,
                    "result_array": 1,
                    "result_ptr": 1,
                    "temp2": 1,
                    "temp_array": 1,
                    "temp_array2": 2,
                    "temp_pointer2": 2,
                    "temp_ptr": 1,
                    "temp_ptr2": 7,
                    "temp_ptr_2": 1,
                    "temp_ptr_loop": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temporary_ptr4": 1
                }
            },
            "called": [
                "FUN_08009258",
                "FUN_080090c0",
                "FUN_08009120"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nundefined4 * calculate_result_080093a4(int input,undefined4 *output,uint size)\n\n{\n  int temp_var1;\n  int temp_var2;\n  undefined4 *temp_ptr1;\n  undefined4 *temp_ptr2;\n  \n  if ((size & 3) != 0) {\n    output = (undefined4 *)\n              multiply_and_add(input,output,*(undefined4 *)(&DAT_0800a070 + ((size & 3) - 1) * 4),0);\n  }\n  temp_var2 = (int)size >> 2;\n  if (temp_var2 != 0) {\n    temp_ptr2 = *(undefined4 **)(input + 0x48);\n    if (temp_ptr2 == (undefined4 *)0x0) {\n      temp_ptr2 = (undefined4 *)allocate_memory(input,1);\n      temp_ptr2[4] = 1;\n      temp_ptr2[5] = 0x271;\n      *(undefined4 **)(input + 0x48) = temp_ptr2;\n      *temp_ptr2 = 0;\n    }\n    temp_ptr1 = output;\n    if (temp_var2 << 0x1f < 0) goto start_loop;\nLAB_080093c4:\n    temp_var2 = temp_var2 >> 1;\n    temp_ptr1 = temp_ptr2;\n    if (temp_var2 != 0) {\n      while( true ) {\n        temp_ptr2 = (undefined4 *)*temp_ptr1;\n        if (temp_ptr2 == (undefined4 *)0x0) {\n          temp_ptr2 = (undefined4 *)multiply(input,temp_ptr1,temp_ptr1);\n          *temp_ptr1 = temp_ptr2;\n          *temp_ptr2 = 0;\n        }\n        temp_ptr1 = output;\n        if (-1 < temp_var2 << 0x1f) break;\nstart_loop:\n        output = (undefined4 *)multiply(input,temp_ptr1,temp_ptr2);\n        if (temp_ptr1 == (undefined4 *)0x0) break;\n        temp_var1 = *(int *)(input + 0x4c);\n        temp_var2 = temp_var2 >> 1;\n        *temp_ptr1 = *(undefined4 *)(temp_var1 + temp_ptr1[1] * 4);\n        *(undefined4 **)(temp_var1 + temp_ptr1[1] * 4) = temp_ptr1;\n        temp_ptr1 = temp_ptr2;\n        if (temp_var2 == 0) {\n          return output;\n        }\n      }\n      goto LAB_080093c4;\n    }\n  }\n  return output;\n}\n\n",
            "current_name": "calculate_result_080093a4",
            "entrypoint": "0x080093a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080093a4": "calculate_result_080093a4",
                "LAB_080093d2": "start_loop",
                "_Balloc": "allocate_memory",
                "__multadd": "multiply_and_add",
                "__multiply": "multiply",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "param_1": "input",
                "param_2": "output",
                "param_3": "size",
                "puVar3": "temp_ptr1",
                "puVar4": "temp_ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009444": {
            "additional_data": {
                "FUN_080090c0": {
                    "allocate_memory": 1,
                    "create_new_array": 1
                },
                "FUN_08009444": {
                    "convert_and_copy_bits": 1,
                    "convert_bits_to_words": 1,
                    "decode_and_store_value": 1,
                    "decompress_data": 1,
                    "process_data": 1,
                    "reverse_and_shift_bits": 1,
                    "reverse_binary_code": 1,
                    "reverse_bits": 3,
                    "reverse_bits_and_allocate_memory": 1,
                    "reverse_bits_and_copy": 3,
                    "reverse_bits_and_set": 1,
                    "reverse_bits_and_store": 1,
                    "reverse_bitwise_operation": 1,
                    "reverse_code": 1,
                    "transform_data": 1
                },
                "_Balloc": {
                    "allocate_memory": 4
                },
                "iVar1": {
                    "count": 1,
                    "i": 1,
                    "shifted_index": 1,
                    "shifted_value": 2,
                    "temp1": 9,
                    "temp_var1": 16,
                    "temp_var_1": 1
                },
                "iVar12": {
                    "array_size": 1,
                    "bit_shifted_elements": 1,
                    "dividend": 1,
                    "division_result": 1,
                    "end_pos": 1,
                    "final_num_words": 1,
                    "new_data_size": 1,
                    "num_src_bits": 1,
                    "offset_divided_by32": 1,
                    "quotient": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_divisor": 1,
                    "shift_value": 1,
                    "shifted_amount": 1,
                    "shifted_bit_count": 1,
                    "shifted_count": 1,
                    "shifted_index": 1,
                    "shifted_length": 2,
                    "shifted_size": 5,
                    "size_shifted": 1,
                    "temp6": 1,
                    "temp_var12": 1,
                    "temp_var5": 1,
                    "temp_var7": 2
                },
                "iVar13": {
                    "divisor": 1,
                    "final_length": 1,
                    "final_num_words_with_extra": 1,
                    "final_size": 1,
                    "final_value": 1,
                    "incremented_count": 1,
                    "modified_size": 1,
                    "new_array_size": 2,
                    "new_data_size2": 1,
                    "new_index": 1,
                    "new_length": 3,
                    "new_memory_size": 1,
                    "new_size": 3,
                    "num_dest_bits": 1,
                    "result": 1,
                    "result_size": 2,
                    "size_shifted_plus5": 1,
                    "temp7": 1,
                    "temp_var13": 1,
                    "temp_var6": 1,
                    "temp_var8": 2,
                    "updated_elements": 1,
                    "updated_size": 2
                },
                "iVar2": {
                    "multiplied_index": 1,
                    "multiplied_value": 1,
                    "multiplier": 1,
                    "shift": 1,
                    "shifted_bits": 1,
                    "temp2": 9,
                    "temp_var2": 16,
                    "temp_var_2": 1
                },
                "iVar3": {
                    "data_size": 1,
                    "index": 1,
                    "num_words": 1,
                    "temp3": 9,
                    "temp_index": 1,
                    "temp_var3": 16,
                    "temp_var_3": 1,
                    "total_elements": 1
                },
                "iVar5": {
                    "array_offset": 2,
                    "array_size": 3,
                    "count": 1,
                    "data_offset": 1,
                    "first_index": 1,
                    "i_var5": 3,
                    "init_var1": 1,
                    "input_data_length": 1,
                    "length": 1,
                    "num_bits_divided_by32": 1,
                    "offset": 7,
                    "param2_4": 1,
                    "param_offset": 1,
                    "prev_data_size": 1,
                    "src_offset": 1,
                    "start_pos": 1,
                    "temp5": 2,
                    "temp_var5": 2
                },
                "iVar6": {
                    "counter": 1,
                    "double_offset": 1,
                    "double_value": 1,
                    "double_var": 1,
                    "doubled_index": 1,
                    "i_var6": 3,
                    "init_var2": 1,
                    "step": 1,
                    "temp2": 1,
                    "temp5": 2,
                    "temp6": 4,
                    "temp_offset": 1,
                    "temp_shift": 1,
                    "temp_value": 1,
                    "temp_var5": 2,
                    "temp_var6": 8,
                    "temp_var_6": 1
                },
                "param_1": {
                    "buffer_size": 3,
                    "data_buffer": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "dest": 1,
                    "dest_size": 2,
                    "input": 1,
                    "input_length": 2,
                    "input_size": 13,
                    "length": 1,
                    "memory_size": 1,
                    "output_size": 2,
                    "param1": 1,
                    "size": 1
                },
                "param_2": {
                    "array": 1,
                    "binary_data": 1,
                    "bit_array": 1,
                    "data": 1,
                    "data_array": 2,
                    "data_pointer": 1,
                    "input": 1,
                    "input_array": 9,
                    "input_data": 6,
                    "param2": 1,
                    "param_array": 1,
                    "parameters": 2,
                    "params_array": 2,
                    "src": 1,
                    "src_data": 1
                },
                "param_3": {
                    "bit_count": 6,
                    "bit_shift": 1,
                    "bits_to_shift": 4,
                    "input_size": 3,
                    "num_bits": 2,
                    "param3": 1,
                    "shift_amount": 12,
                    "src_length": 1,
                    "src_size": 1
                },
                "puVar10": {
                    "array_ptr3": 1,
                    "current_source": 1,
                    "data_pointer4": 1,
                    "data_ptr_temp": 1,
                    "input_end": 2,
                    "input_ptr2": 1,
                    "next_pointer": 1,
                    "ptr2": 3,
                    "ptr4": 1,
                    "ptr_var10": 1,
                    "ptr_var3": 1,
                    "src_array_end": 1,
                    "src_data_temp": 1,
                    "src_pointer2": 1,
                    "src_ptr": 1,
                    "temp_array": 1,
                    "temp_array1": 1,
                    "temp_array_2": 1,
                    "temp_data": 1,
                    "temp_pointer1": 1,
                    "temp_ptr1": 2,
                    "temp_ptr2": 5,
                    "temp_ptr3": 1
                },
                "puVar11": {
                    "array_ptr4": 1,
                    "data_pointer5": 1,
                    "data_ptr_temp2": 1,
                    "end_ptr": 1,
                    "end_source": 1,
                    "input_data_end": 1,
                    "input_ptr2": 1,
                    "input_ptr3": 1,
                    "ptr3": 3,
                    "ptr5": 1,
                    "ptr_var11": 1,
                    "ptr_var4": 1,
                    "src_data_end": 1,
                    "src_pointer1": 1,
                    "src_ptr": 1,
                    "start_pointer": 1,
                    "temp_array2": 2,
                    "temp_array_3": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_ptr3": 5,
                    "temp_ptr4": 1
                },
                "puVar7": {
                    "data_pointer1": 1,
                    "data_ptr": 2,
                    "dest": 1,
                    "dest_array": 1,
                    "dest_data": 1,
                    "dest_ptr": 2,
                    "destination": 1,
                    "destination_array": 1,
                    "destination_pointer": 1,
                    "dst_array": 1,
                    "output": 1,
                    "output_array": 6,
                    "output_array_ptr": 1,
                    "output_data": 5,
                    "ptr1": 1,
                    "ptr_var1": 1,
                    "ptr_var7": 1,
                    "result_array": 1,
                    "target_pointer": 2
                },
                "puVar8": {
                    "array_ptr1": 1,
                    "data_pointer2": 1,
                    "data_ptr": 1,
                    "input_array_ptr": 2,
                    "input_data_ptr": 1,
                    "input_pointer": 1,
                    "input_ptr": 5,
                    "param_ptr": 1,
                    "ptr2": 1,
                    "ptr_var2": 1,
                    "ptr_var8": 1,
                    "source": 1,
                    "source_array": 2,
                    "source_pointer": 2,
                    "src": 1,
                    "src_array": 2,
                    "src_data_start": 1,
                    "src_pointer": 1,
                    "src_ptr": 2,
                    "temp_array_1": 1,
                    "temp_ptr": 2
                },
                "puVar9": {
                    "array_ptr2": 1,
                    "current_destination": 1,
                    "current_pointer": 1,
                    "data_pointer3": 1,
                    "dest_array": 1,
                    "dest_data_temp": 1,
                    "dest_ptr": 1,
                    "dst_pointer": 1,
                    "dst_ptr": 1,
                    "output_data_ptr": 2,
                    "output_pointer": 1,
                    "output_ptr": 5,
                    "ptr1": 3,
                    "ptr3": 1,
                    "ptr_var5": 1,
                    "ptr_var9": 1,
                    "temp_array_4": 1,
                    "temp_array_ptr": 1,
                    "temp_ptr1": 4,
                    "temp_ptr2": 1,
                    "temp_ptr4": 1
                },
                "uVar14": {
                    "bit_shifted_value": 1,
                    "carry": 6,
                    "carry_bit": 3,
                    "carry_bits": 1,
                    "extra_bits": 1,
                    "overflow_bits": 1,
                    "remainder": 1,
                    "shifted_bits": 3,
                    "shifted_value": 4,
                    "temp14": 1,
                    "temp8": 1,
                    "temp_val": 1,
                    "temp_var14": 2,
                    "temp_var5": 2,
                    "temp_var7": 1,
                    "temp_var9": 2
                },
                "uVar4": {
                    "buffer_pointer": 1,
                    "default_value": 1,
                    "initial_value": 1,
                    "temp": 2,
                    "temp4": 9,
                    "temp_var4": 16,
                    "temp_var_4": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid reverse_bits_and_copy_08009444(int input_size,undefined4 *input_array,uint shift_amount)\n\n{\n  int temp_var1;\n  int temp_var2;\n  int temp_var3;\n  undefined4 temp_var4;\n  int offset;\n  int temp_var6;\n  uint *output_array;\n  uint *input_ptr;\n  uint *temp_ptr2;\n  uint *temp_ptr3;\n  int shifted_size;\n  int new_size;\n  uint carry;\n  uint *output_ptr;\n  \n  offset = input_array[4];\n  shifted_size = (int)shift_amount >> 5;\n  new_size = shifted_size + offset + 1;\n  temp_var3 = input_array[1];\n  temp_var2 = input_array[2];\n  if ((int)input_array[2] < new_size) {\n    do {\n      temp_var6 = temp_var2 * 2;\n      temp_var1 = temp_var2 * -2;\n      temp_var3 = temp_var3 + 1;\n      temp_var2 = temp_var6;\n    } while (new_size != temp_var6 && new_size + temp_var1 < 0 == SBORROW4(new_size,temp_var6));\n  }\n  temp_var2 = allocate_memory(input_size,temp_var3);\n  output_array = (uint *)(temp_var2 + 0x14);\n  if (0 < shifted_size) {\n    temp_ptr3 = output_array + shifted_size;\n    input_ptr = output_array;\n    do {\n      output_ptr = input_ptr + 1;\n      *input_ptr = 0;\n      output_array = temp_ptr3;\n      input_ptr = output_ptr;\n    } while (output_ptr != temp_ptr3);\n  }\n  temp_var3 = input_array[4];\n  input_ptr = input_array + 5;\n  shift_amount = shift_amount & 0x1f;\n  if (shift_amount == 0) {\n    output_array = output_array + -1;\n    temp_ptr3 = input_ptr;\n    do {\n      output_ptr = temp_ptr3 + 1;\n      output_array = output_array + 1;\n      *output_array = *temp_ptr3;\n      temp_ptr3 = output_ptr;\n    } while (output_ptr < input_ptr + temp_var3);\n  }\n  else {\n    carry = 0;\n    temp_ptr3 = input_ptr;\n    do {\n      output_ptr = output_array;\n      *output_ptr = *temp_ptr3 << shift_amount | carry;\n      temp_ptr2 = temp_ptr3 + 1;\n      carry = *temp_ptr3 >> (0x20 - shift_amount & 0xff);\n      output_array = output_ptr + 1;\n      temp_ptr3 = temp_ptr2;\n    } while (temp_ptr2 < input_ptr + temp_var3);\n    output_ptr[1] = carry;\n    if (carry != 0) {\n      new_size = shifted_size + offset + 2;\n    }\n  }\n  offset = *(int *)(input_size + 0x4c);\n  temp_var3 = input_array[1];\n  temp_var4 = *(undefined4 *)(offset + temp_var3 * 4);\n  *(int *)(temp_var2 + 0x10) = new_size + -1;\n  *input_array = temp_var4;\n  *(undefined4 **)(offset + temp_var3 * 4) = input_array;\n  return;\n}\n\n",
            "current_name": "reverse_bits_and_copy_08009444",
            "entrypoint": "0x08009444",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009444": "reverse_bits_and_copy_08009444",
                "_Balloc": "allocate_memory",
                "iVar1": "temp_var1",
                "iVar12": "shifted_size",
                "iVar13": "new_size",
                "iVar2": "temp_var2",
                "iVar3": "temp_var3",
                "iVar5": "offset",
                "iVar6": "temp_var6",
                "param_1": "input_size",
                "param_2": "input_array",
                "param_3": "shift_amount",
                "puVar10": "temp_ptr2",
                "puVar11": "temp_ptr3",
                "puVar7": "output_array",
                "puVar8": "input_ptr",
                "puVar9": "output_ptr",
                "uVar14": "carry",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094f8": {
            "additional_data": {
                "FUN_080094f8": {
                    "compare_array": 1,
                    "compare_arrays": 28,
                    "compare_arrays_by_index": 1,
                    "compare_int_array": 1
                },
                "iVar1": {
                    "array1_length": 1,
                    "array_1_length": 1,
                    "array_difference": 2,
                    "array_length_diff": 2,
                    "array_length_difference": 1,
                    "array_size_diff": 2,
                    "array_size_difference": 3,
                    "difference": 19
                },
                "iVar3": {
                    "array2_length": 7,
                    "array2_offset": 8,
                    "array2_size": 5,
                    "array2_start": 1,
                    "array2_start_index": 1,
                    "array_2_length": 1,
                    "length": 2,
                    "length_difference": 1,
                    "offset": 4,
                    "starting_index": 1
                },
                "param_1": {
                    "array1": 26,
                    "array1_addr": 1,
                    "array1_base": 2,
                    "array1_start": 1,
                    "array_1": 1
                },
                "param_2": {
                    "array2": 26,
                    "array2_addr": 1,
                    "array2_base": 2,
                    "array2_start": 1,
                    "array_2": 1
                },
                "puVar2": {
                    "array2_element": 1,
                    "array2_end_ptr": 1,
                    "array2_pointer": 1,
                    "array2_ptr": 3,
                    "array_2_ptr": 1,
                    "cur_element_array2": 1,
                    "current_element2": 1,
                    "ptr2": 9,
                    "ptr_array2": 10,
                    "ptr_elem2": 2,
                    "ptr_element_at_index2": 1
                },
                "puVar4": {
                    "array1_element": 1,
                    "array1_end_ptr": 1,
                    "array1_pointer": 1,
                    "array1_ptr": 3,
                    "array_1_ptr": 1,
                    "cur_element_array1": 1,
                    "current_element1": 1,
                    "ptr1": 9,
                    "ptr_array1": 10,
                    "ptr_elem1": 2,
                    "ptr_element_at_index1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080079e8",
                "FUN_080078c0"
            ],
            "code": "\nint compare_arrays_by_index_080094f8(int array1,int array2)\n\n{\n  int difference;\n  uint *ptr_array2;\n  int array2_offset;\n  uint *ptr_array1;\n  \n  array2_offset = *(int *)(array2 + 0x10);\n  difference = *(int *)(array1 + 0x10) - array2_offset;\n  if (difference == 0) {\n    ptr_array2 = (uint *)(array2 + 0x14 + array2_offset * 4);\n    ptr_array1 = (uint *)(array1 + 0x14) + array2_offset;\n    do {\n      ptr_array1 = ptr_array1 + -1;\n      ptr_array2 = ptr_array2 + -1;\n      if (*ptr_array1 != *ptr_array2) {\n        if (*ptr_array2 <= *ptr_array1) {\n          return 1;\n        }\n        return -1;\n      }\n    } while ((uint *)(array1 + 0x14) < ptr_array1);\n  }\n  return difference;\n}\n\n",
            "current_name": "compare_arrays_by_index_080094f8",
            "entrypoint": "0x080094f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094f8": "compare_arrays_by_index_080094f8",
                "iVar1": "difference",
                "iVar3": "array2_offset",
                "param_1": "array1",
                "param_2": "array2",
                "puVar2": "ptr_array2",
                "puVar4": "ptr_array1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009530": {
            "additional_data": {
                "FUN_08009530": {
                    "compare_and_allocate": 3,
                    "extract_and_compare_binary_data": 1,
                    "reverse_alloc": 1,
                    "reverse_binary_alloc": 1,
                    "verify_and_allocate": 1,
                    "verify_and_copy_data": 1
                },
                "iVar1": {
                    "allocated_memory": 9,
                    "allocated_result": 1,
                    "allocation_result": 2,
                    "new_var1": 1,
                    "new_var_1": 1,
                    "output": 1,
                    "result": 15,
                    "result1": 1
                },
                "iVar12": {
                    "carry": 5,
                    "carry_flag": 1,
                    "carry_temp": 1,
                    "carry_value": 1,
                    "count": 2,
                    "counter": 3,
                    "loop_count": 1,
                    "new_var2": 1,
                    "offset": 1,
                    "sum": 1,
                    "sum1": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_int": 1,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "temp_variable_3": 1,
                    "var11": 1,
                    "var7": 1
                },
                "iVar15": {
                    "temp1": 1
                },
                "param_1": {
                    "arg1": 1,
                    "code_ptr": 1,
                    "data_size": 1,
                    "input": 4,
                    "input1": 9,
                    "input_1": 1,
                    "input_param": 4,
                    "input_param1": 1,
                    "input_size": 1,
                    "input_value": 1,
                    "input_value1": 2,
                    "input_value_1": 1,
                    "param1": 4
                },
                "param_2": {
                    "array1": 7,
                    "array_1": 1,
                    "binary_data1": 1,
                    "data1": 1,
                    "data_source": 1,
                    "input2": 6,
                    "input_2": 1,
                    "input_array": 1,
                    "input_array1": 4,
                    "input_array_1": 1,
                    "input_param2": 1,
                    "input_ptr": 1,
                    "input_value2": 1,
                    "original_array": 1,
                    "source1": 1,
                    "source_array": 2
                },
                "param_3": {
                    "array2": 7,
                    "array_2": 1,
                    "binary_data2": 1,
                    "data2": 1,
                    "data_target": 1,
                    "destination_array": 1,
                    "input3": 6,
                    "input_3": 1,
                    "input_array2": 4,
                    "input_array_2": 1,
                    "input_param3": 1,
                    "input_value3": 1,
                    "modified_array": 1,
                    "output_array": 1,
                    "output_ptr": 1,
                    "source2": 1,
                    "target_array": 1
                },
                "param_4": {
                    "additional_param": 3,
                    "arg2": 1,
                    "config": 1,
                    "flag": 1,
                    "input2": 2,
                    "input4": 6,
                    "input_4": 1,
                    "input_param4": 1,
                    "input_value": 1,
                    "input_value2": 1,
                    "input_value4": 1,
                    "input_value_2": 1,
                    "param": 2,
                    "param4": 6,
                    "param_4": 2,
                    "size": 1
                },
                "puVar10": {
                    "array1_size": 1,
                    "array2_index_ptr": 1,
                    "binary_data2_index": 1,
                    "current_ptr2_copy": 1,
                    "new_pointer6": 1,
                    "output_ptr_plus_1_temp": 1,
                    "ptr4": 1,
                    "ptr5": 5,
                    "ptr6": 3,
                    "ptr7": 1,
                    "ptr8": 1,
                    "ptr_4": 1,
                    "ptr_array_2_temp": 1,
                    "ptr_destination_start": 1,
                    "ptr_result_array_start": 1,
                    "ptr_temp6": 1,
                    "ptr_tmp2": 1,
                    "source2_ptr2": 1,
                    "temp_array_1_start": 1,
                    "temp_array_pointer4": 1,
                    "temp_ptr2": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_4": 1,
                    "var9": 1
                },
                "puVar11": {
                    "array1_end_ptr": 1,
                    "binary_data2_index": 1,
                    "data_source_plus_5": 1,
                    "end_ptr1": 1,
                    "input_ptr_plus_5": 1,
                    "new_pointer7": 1,
                    "ptr2": 1,
                    "ptr5": 1,
                    "ptr6": 5,
                    "ptr7": 3,
                    "ptr9": 1,
                    "ptr_5": 1,
                    "ptr_after_comparison": 1,
                    "ptr_array_1_5": 1,
                    "ptr_original_array_end": 1,
                    "ptr_source_end": 1,
                    "ptr_temp3": 1,
                    "source1_ptr2": 1,
                    "target_array_start": 1,
                    "temp_array_pointer2": 1,
                    "temp_ptr4": 1,
                    "temp_ptr6": 1,
                    "tmp_ptr1": 1,
                    "var10": 1
                },
                "puVar12": {
                    "temp_ptr5": 1,
                    "temp_ptr7": 1
                },
                "puVar13": {
                    "array2_end_ptr": 1,
                    "binary_data2": 1,
                    "data_target_plus_5": 1,
                    "end_ptr2": 1,
                    "new_pointer8": 1,
                    "output_ptr_plus_5": 1,
                    "ptr5": 1,
                    "ptr7": 5,
                    "ptr8": 4,
                    "ptr_6": 1,
                    "ptr_array_2_5": 1,
                    "ptr_copy_after_comparison": 1,
                    "ptr_destination_end": 1,
                    "ptr_modified_array_start": 1,
                    "ptr_temp4": 1,
                    "ptr_tmp3": 1,
                    "source2_ptr3": 1,
                    "temp_array_2_start": 1,
                    "temp_pointer": 1,
                    "temp_ptr6": 1,
                    "temp_ptr8": 1,
                    "tmp_ptr2": 1,
                    "var12": 1
                },
                "puVar14": {
                    "ptr_temp": 1,
                    "temp_ptr9": 1
                },
                "puVar15": {
                    "allocated_memory_index": 1,
                    "ptr6": 1,
                    "temp_ptr_5": 1
                },
                "puVar16": {
                    "ptr7": 1,
                    "temp_ptr7": 1,
                    "temp_ptr_6": 1
                },
                "puVar17": {
                    "ptr8": 1,
                    "temp_ptr8": 1,
                    "temp_ptr_7": 1
                },
                "puVar18": {
                    "ptr9": 1,
                    "temp_ptr_8": 1
                },
                "puVar19": {
                    "ptr10": 1
                },
                "puVar2": {
                    "array1_ptr": 1,
                    "array2_element": 1,
                    "array2_ptr": 1,
                    "binary_data1_index": 1,
                    "current_ptr2": 1,
                    "data_target_ptr": 1,
                    "dest": 1,
                    "new_pointer1": 1,
                    "ptr": 2,
                    "ptr1": 11,
                    "ptr4": 1,
                    "ptr_array1": 1,
                    "ptr_array_2_4": 1,
                    "ptr_original_array": 1,
                    "ptr_param3_4": 1,
                    "ptr_param_3_4": 1,
                    "pu_var2": 1,
                    "source2_ptr": 1,
                    "source_array_iterator": 1,
                    "var1": 1
                },
                "puVar20": {
                    "temp_ptr10": 1
                },
                "puVar21": {
                    "temp_ptr11": 1
                },
                "puVar3": {
                    "array2_size": 1,
                    "new_ptr": 1,
                    "ptr2": 3
                },
                "puVar4": {
                    "new_ptr2": 1,
                    "ptr3": 3
                },
                "puVar5": {
                    "ptr4": 1
                },
                "puVar6": {
                    "array2_ptr": 1,
                    "binary_data2_index": 1,
                    "current_ptr_result": 1,
                    "destination_ptr": 1,
                    "new_pointer2": 1,
                    "ptr1": 4,
                    "ptr2": 6,
                    "ptr3": 2,
                    "ptr4": 1,
                    "ptr_1": 1,
                    "ptr_result_14": 1,
                    "ptr_result_array": 1,
                    "ptr_source": 1,
                    "ptr_temp1": 1,
                    "result_array": 1,
                    "target_array_iterator": 1,
                    "temp_ptr1": 2,
                    "temp_ptr_1": 1,
                    "var5": 1,
                    "write_ptr": 1
                },
                "puVar7": {
                    "array1": 1,
                    "array1_pointer": 1,
                    "binary_data1_index": 1,
                    "current_ptr1": 1,
                    "input_ptr_plus_1": 1,
                    "new_pointer3": 1,
                    "ptr2": 2,
                    "ptr3": 7,
                    "ptr4": 2,
                    "ptr5": 1,
                    "ptr_2": 1,
                    "ptr_array_1": 1,
                    "ptr_original_array_iter": 1,
                    "ptr_source_current": 1,
                    "ptr_temp2": 1,
                    "pu_var7": 1,
                    "source1_ptr": 1,
                    "temp_array_iterator_1": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_2": 1,
                    "var6": 1
                },
                "puVar8": {
                    "binary_data2_index": 1,
                    "destination_ptr3": 1,
                    "input_ptr_plus_1_temp": 1,
                    "new_pointer4": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr4": 2,
                    "ptr5": 1,
                    "ptr6": 1,
                    "ptr8": 4,
                    "ptr_7": 1,
                    "ptr_destination_current": 1,
                    "ptr_result_2": 1,
                    "ptr_result_array_iter": 1,
                    "ptr_temp5": 1,
                    "ptr_tmp": 1,
                    "pu_var8": 1,
                    "temp_array_iterator_2": 1,
                    "temp_array_pointer3": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "temp_ptr3": 2,
                    "temp_ptr_3": 1,
                    "tmp_ptr3": 1,
                    "var7": 1
                },
                "puVar9": {
                    "array1_index_ptr": 1,
                    "array1_ptr": 1,
                    "array2": 1,
                    "array2_pointer": 1,
                    "binary_data1": 1,
                    "current_ptr1_copy": 1,
                    "data_source_5": 1,
                    "destination_ptr2": 1,
                    "new_pointer5": 1,
                    "output_ptr_plus_1": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr4": 5,
                    "ptr5": 3,
                    "ptr6": 1,
                    "ptr7": 1,
                    "ptr_3": 1,
                    "ptr_array2": 1,
                    "ptr_array_2": 1,
                    "ptr_original_array_start": 1,
                    "ptr_source_start": 1,
                    "source_array_start": 1,
                    "temp_ptr4": 1,
                    "var8": 1
                },
                "uVar10": {
                    "var5": 1
                },
                "uVar11": {
                    "var6": 1
                },
                "uVar13": {
                    "value1": 1
                },
                "uVar14": {
                    "allocated_size": 1,
                    "array2_size": 1,
                    "array_1_4": 1,
                    "binary_data2_sum": 1,
                    "data_target_4": 1,
                    "destination_array_length": 1,
                    "length": 1,
                    "length1": 1,
                    "new_var6": 1,
                    "output_len": 1,
                    "param3_length": 1,
                    "result_size": 1,
                    "size": 3,
                    "size_array1": 1,
                    "target_array_length": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1,
                    "value2": 1,
                    "value3": 2,
                    "var13": 1,
                    "var3": 3,
                    "var8": 1
                },
                "uVar15": {
                    "temp4": 1
                },
                "uVar16": {
                    "temp2": 1
                },
                "uVar17": {
                    "temp3": 1
                },
                "uVar18": {
                    "temp4": 1
                },
                "uVar19": {
                    "temp5": 1
                },
                "uVar3": {
                    "array1_element": 1,
                    "array1_size": 2,
                    "array_2_4": 1,
                    "binary_data1_value": 1,
                    "data_source_4": 1,
                    "new_var3": 1,
                    "original_array_size": 1,
                    "param2_length": 1,
                    "param_2_4": 1,
                    "size_array2": 1,
                    "source1_size": 1,
                    "source_array_length": 2,
                    "temp1": 1,
                    "temp_var1": 1,
                    "u_var3": 1,
                    "value1": 4,
                    "var1": 5,
                    "var2": 1
                },
                "uVar4": {
                    "accumulator": 1,
                    "binary_data1_sum": 1,
                    "carry": 1,
                    "new_var4": 1,
                    "result": 1,
                    "sum": 2,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_result": 1,
                    "temp_value": 3,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "temp_variable_1": 1,
                    "value2": 4,
                    "var1": 1,
                    "var2": 5,
                    "var3": 1
                },
                "uVar5": {
                    "check_result": 1,
                    "comparison_result": 1,
                    "condition": 2,
                    "flag": 11,
                    "flag1": 1,
                    "is_equal": 3,
                    "is_greater": 2,
                    "is_less": 1,
                    "is_smaller": 1,
                    "new_var5": 1,
                    "should_continue": 1,
                    "temp2": 1,
                    "temp_var_2": 1,
                    "temp_variable_2": 1,
                    "var2": 1,
                    "var4": 1
                },
                "uVar6": {
                    "var1": 1
                },
                "uVar7": {
                    "var2": 1
                },
                "uVar8": {
                    "var3": 1
                },
                "uVar9": {
                    "var4": 1
                }
            },
            "called": [
                "FUN_080090c0"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nvoid compare_and_allocate_08009530(undefined4 input1,uint *array1,uint *array2,undefined4 input4)\n\n{\n  int result;\n  uint *ptr1;\n  uint var1;\n  uint var2;\n  undefined4 flag;\n  uint *ptr2;\n  uint *ptr3;\n  uint *ptr4;\n  uint *ptr5;\n  uint *ptr6;\n  int carry;\n  uint *ptr7;\n  uint size;\n  uint *ptr8;\n  \n  ptr1 = (uint *)array2[4];\n  ptr6 = array1 + 5;\n  ptr7 = array2 + 5;\n  ptr3 = ptr6;\n  ptr4 = array1;\n  if ((uint *)array1[4] == ptr1) {\n    ptr2 = ptr6 + (int)ptr1;\n    ptr1 = ptr7 + (int)ptr1;\n    while( true ) {\n      ptr2 = ptr2 + -1;\n      ptr1 = ptr1 + -1;\n      if (*ptr2 != *ptr1) break;\n      if (ptr2 <= ptr6) {\n        carry = _Balloc(input1,0,ptr2,ptr1,input4);\n        *(undefined4 *)(carry + 0x10) = 1;\n        *(undefined4 *)(carry + 0x14) = 0;\n        return;\n      }\n    }\n    flag = 0;\n    if (*ptr1 <= *ptr2) goto LAB_08009578;\n  }\n  else if (-1 < (int)(uint *)array1[4] - (int)ptr1) {\n    flag = 0;\n    ptr2 = array2;\n    goto LAB_08009578;\n  }\n  flag = 1;\n  ptr2 = ptr6;\n  ptr1 = array1;\n  ptr3 = ptr7;\n  ptr4 = array2;\n  array2 = array1;\n  ptr7 = ptr6;\nLAB_08009578:\n  result = _Balloc(input1,ptr4[1],ptr2,ptr1,input4);\n  carry = 0;\n  size = ptr4[4];\n  var1 = array2[4];\n  *(undefined4 *)(result + 0xc) = flag;\n  ptr6 = ptr3 + size;\n  ptr1 = (uint *)(result + 0x14);\n  ptr4 = ptr7;\n  do {\n    ptr8 = ptr3 + 1;\n    ptr5 = ptr4 + 1;\n    var2 = ((*ptr3 & 0xffff) + carry) - (*ptr4 & 0xffff);\n    carry = ((*ptr3 >> 0x10) - (*ptr4 >> 0x10)) + ((int)var2 >> 0x10);\n    var2 = var2 & 0xffff | carry * 0x10000;\n    ptr2 = ptr1 + 1;\n    *ptr1 = var2;\n    carry = carry >> 0x10;\n    ptr1 = ptr2;\n    ptr3 = ptr8;\n    ptr4 = ptr5;\n  } while (ptr5 < ptr7 + var1);\n  ptr1 = ptr8;\n  ptr3 = ptr2;\n  if (ptr8 < ptr6) {\n    do {\n      ptr4 = ptr1 + 1;\n      var1 = (*ptr1 & 0xffff) + carry;\n      carry = ((int)var1 >> 0x10) + (*ptr1 >> 0x10);\n      var2 = var1 & 0xffff | carry * 0x10000;\n      *ptr3 = var2;\n      carry = carry >> 0x10;\n      ptr1 = ptr4;\n      ptr3 = ptr3 + 1;\n    } while (ptr4 < ptr6);\n    ptr2 = (uint *)((int)ptr2 + ((int)ptr6 + ~(uint)ptr8 & 0xfffffffc) + 4);\n  }\n  ptr2 = ptr2 + -1;\n  while (var2 == 0) {\n    ptr2 = ptr2 + -1;\n    size = size - 1;\n    var2 = *ptr2;\n  }\n  *(uint *)(result + 0x10) = size;\n  return;\n}\n\n",
            "current_name": "compare_and_allocate_08009530",
            "entrypoint": "0x08009530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009530": "compare_and_allocate_08009530",
                "iVar1": "result",
                "iVar12": "carry",
                "param_1": "input1",
                "param_2": "array1",
                "param_3": "array2",
                "param_4": "input4",
                "puVar10": "ptr5",
                "puVar11": "ptr6",
                "puVar13": "ptr7",
                "puVar2": "ptr1",
                "puVar6": "ptr2",
                "puVar7": "ptr3",
                "puVar8": "ptr8",
                "puVar9": "ptr4",
                "uVar10": "var5",
                "uVar11": "var6",
                "uVar13": "value1",
                "uVar14": "size",
                "uVar3": "var1",
                "uVar4": "var2",
                "uVar5": "flag",
                "uVar6": "var1",
                "uVar7": "var2",
                "uVar8": "var3",
                "uVar9": "var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009630": {
            "additional_data": {
                "FUN_08009630": {
                    "calculate_shift_and_length": 1,
                    "calculate_value": 1,
                    "calculate_values": 1,
                    "convert_values": 1,
                    "decode_and_calculate": 1,
                    "decode_and_get_values": 1,
                    "decode_binary": 2,
                    "decode_function": 1,
                    "decode_parameters": 1,
                    "decompose_number": 1,
                    "extract_bits": 6,
                    "extract_data": 1,
                    "optimize_and_get_bits": 1,
                    "process_data": 1,
                    "reverse_binary": 1,
                    "reverse_binary_extraction": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bits": 3
                },
                "_Balloc": {
                    "allocate_memory": 1
                },
                "__hi0bits": {
                    "find_msb_bit": 1
                },
                "__lo0bits": {
                    "find_first_zero_bit": 1
                },
                "iVar1": {
                    "alloc_result": 1,
                    "allocated_buffer": 2,
                    "allocated_memory": 3,
                    "allocated_value": 1,
                    "binary": 1,
                    "buffer": 3,
                    "dynamic_mem": 1,
                    "output_value": 1,
                    "ptr": 1,
                    "result": 17
                },
                "iVar3": {
                    "bit_count": 1,
                    "bit_offset": 2,
                    "bit_position": 3,
                    "bit_position1": 1,
                    "bits1": 1,
                    "bits_offset": 1,
                    "bits_set": 1,
                    "bits_shifted": 1,
                    "bits_used": 2,
                    "first_flag": 1,
                    "index1": 1,
                    "lo0_bits": 1,
                    "lo_bits": 1,
                    "temp": 1,
                    "temp1": 3,
                    "temp_var1": 6,
                    "temp_var_1": 3,
                    "tmp1": 1
                },
                "iVar4": {
                    "bit_count": 1,
                    "bit_length": 1,
                    "bit_position2": 1,
                    "bits2": 1,
                    "bits_length": 1,
                    "branch": 1,
                    "condition": 1,
                    "flag": 6,
                    "i_var4": 1,
                    "index2": 1,
                    "result_count": 1,
                    "second_flag": 1,
                    "temp2": 3,
                    "temp_var2": 6,
                    "temp_var_2": 3,
                    "tmp2": 1,
                    "var_flag": 1
                },
                "local_1c": {
                    "bits_value": 1,
                    "input_2": 1,
                    "local1c": 1,
                    "local_bits": 1,
                    "local_operand_2": 1,
                    "local_param4": 1,
                    "local_value": 1,
                    "low_bits": 1,
                    "mask2": 2,
                    "masked_arg4": 1,
                    "masked_bits": 2,
                    "masked_num": 1,
                    "masked_param4": 1,
                    "modified_param4": 2,
                    "shift_temp": 1,
                    "temp2": 2,
                    "temp_input2": 1,
                    "temp_key": 1,
                    "temp_local_var": 1,
                    "temp_value2": 2,
                    "temp_value_2": 2,
                    "temp_variable": 1,
                    "temporary_value": 1,
                    "value2": 2
                },
                "local_20": {
                    "input_1": 1,
                    "length_temp": 1,
                    "local_input": 1,
                    "local_operand_1": 1,
                    "local_param3": 1,
                    "local_value": 1,
                    "mask1": 2,
                    "remaining_bits": 1,
                    "shifted_arg3": 1,
                    "source_value_copy": 1,
                    "temp1": 2,
                    "temp3": 2,
                    "temp_input": 1,
                    "temp_input1": 1,
                    "temp_num": 1,
                    "temp_param": 1,
                    "temp_param3": 2,
                    "temp_param_3": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_value1": 2,
                    "temp_value_1": 2,
                    "tmp3": 1,
                    "value1": 2
                },
                "param_1": {
                    "arg1": 1,
                    "binary_address": 1,
                    "data_size": 1,
                    "input1": 3,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 2,
                    "input_value_1": 1,
                    "param1": 13,
                    "param_1": 2,
                    "ptr_1": 1,
                    "size": 3,
                    "value_1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "binary_value": 1,
                    "flag": 3,
                    "input2": 3,
                    "input_param2": 1,
                    "input_param_2": 2,
                    "input_value_2": 1,
                    "output_param": 1,
                    "param2": 13,
                    "param_2": 3,
                    "ptr_2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "bit_shift1": 1,
                    "bit_shift_amount": 1,
                    "input1": 2,
                    "input_param1": 1,
                    "input_param3": 1,
                    "input_param_3": 2,
                    "input_size": 1,
                    "length": 2,
                    "num1": 1,
                    "operand_1": 1,
                    "param3": 9,
                    "param_3": 2,
                    "shift_amount": 1,
                    "size_1": 1,
                    "source_value": 1,
                    "value1": 3
                },
                "param_4": {
                    "arg4": 1,
                    "bit_shift2": 1,
                    "flag": 1,
                    "input2": 2,
                    "input_param2": 1,
                    "input_param4": 1,
                    "input_param_4": 2,
                    "input_value": 1,
                    "key": 1,
                    "mask": 1,
                    "num2": 1,
                    "operand_2": 1,
                    "param4": 9,
                    "param_4": 2,
                    "shift": 1,
                    "shift_bits": 1,
                    "size_2": 1,
                    "value2": 3
                },
                "param_5": {
                    "bits1": 1,
                    "extracted_value1": 1,
                    "output1": 13,
                    "output_1": 1,
                    "output_param1": 4,
                    "output_param_1": 2,
                    "output_value_1": 2,
                    "result1": 3,
                    "result_1": 2,
                    "result_param1": 1,
                    "shift_result": 1
                },
                "param_6": {
                    "bits2": 1,
                    "extracted_value2": 1,
                    "length_result": 1,
                    "output2": 13,
                    "output_2": 1,
                    "output_param2": 4,
                    "output_param_2": 2,
                    "output_value_2": 2,
                    "result2": 3,
                    "result_2": 2,
                    "result_param2": 1
                },
                "uVar2": {
                    "bit_count": 1,
                    "bit_offset": 1,
                    "bit_position": 3,
                    "bits": 5,
                    "bits1": 1,
                    "bits_shifted": 1,
                    "num_bits": 2,
                    "shift": 2,
                    "shift_amount": 4,
                    "shift_count": 2,
                    "shift_value": 2,
                    "shifted_bits": 3,
                    "shifted_value": 4
                },
                "uVar5": {
                    "mask": 1,
                    "masked_bits": 1,
                    "masked_value": 2,
                    "merged_values": 1,
                    "new_local1c": 1,
                    "shifted": 1,
                    "shifted_bits": 5,
                    "shifted_input": 1,
                    "shifted_key": 1,
                    "shifted_local": 1,
                    "shifted_local1c": 1,
                    "shifted_local_1c": 1,
                    "shifted_result": 2,
                    "shifted_source": 1,
                    "shifted_value": 10,
                    "temp_value": 1
                },
                "uVar6": {
                    "bit_count": 1,
                    "bits2": 1,
                    "bits_remaining": 1,
                    "derived_shift": 1,
                    "flag": 2,
                    "flag_shift": 1,
                    "flag_value": 1,
                    "mask": 1,
                    "shift": 2,
                    "shift_amount": 4,
                    "shift_count": 4,
                    "shift_flag": 1,
                    "shift_value": 1,
                    "shifted_bits": 2,
                    "shifted_bits_check": 1,
                    "shifted_mask": 1,
                    "shifted_param4": 1,
                    "temp": 2,
                    "temp_shift": 1,
                    "temp_var_3": 1,
                    "u_var_shifted": 1
                },
                "uVar7": {
                    "bit_count": 1,
                    "bit_index": 1,
                    "bit_mask": 1,
                    "bit_position": 1,
                    "bit_result": 1,
                    "bits": 1,
                    "bits2": 1,
                    "bits3": 1,
                    "bits_count": 3,
                    "bits_value": 1,
                    "calculated_bit_position": 1,
                    "hi0_bits": 1,
                    "hi_bits": 4,
                    "hi_bits_value": 1,
                    "high_bit": 2,
                    "high_bits": 8,
                    "highest_bit": 1,
                    "temp_var3": 1
                }
            },
            "called": [
                "FUN_080091e4",
                "FUN_080090c0",
                "FUN_080091a4"
            ],
            "calling": [
                "FUN_080079e8"
            ],
            "code": "\nint extract_bits_08009630(undefined4 param1,undefined4 param2,uint param3,uint param4,int *output1,\n                int *output2)\n\n{\n  int result;\n  uint bits;\n  int temp_var1;\n  int flag;\n  uint shifted_value;\n  uint shift_count;\n  undefined8 high_bits;\n  uint mask1;\n  uint value2;\n  \n  result = allocate_memory(param1,1);\n  shift_count = (param4 << 1) >> 0x15;\n  value2 = param4 & 0xfffff;\n  if (shift_count != 0) {\n    value2 = value2 | 0x100000;\n  }\n  if (param3 == 0) {\n    temp_var1 = find_first_zero_bit(&value2);\n    flag = 1;\n    bits = temp_var1 + 0x20;\n    *(undefined4 *)(result + 0x10) = 1;\n    *(uint *)(result + 0x14) = value2;\n  }\n  else {\n    mask1 = param3;\n    bits = find_first_zero_bit(&mask1);\n    if (bits == 0) {\n      *(uint *)(result + 0x14) = mask1;\n    }\n    else {\n      shifted_value = value2 << (0x20 - bits & 0xff);\n      value2 = value2 >> (bits & 0xff);\n      *(uint *)(result + 0x14) = shifted_value | mask1;\n    }\n    if (value2 == 0) {\n      flag = 1;\n    }\n    else {\n      flag = 2;\n    }\n    *(uint *)(result + 0x18) = value2;\n    *(int *)(result + 0x10) = flag;\n  }\n  if (shift_count == 0) {\n    *output1 = bits - 0x432;\n    high_bits = find_msb_bit(*(undefined4 *)(result + flag * 4 + 0x10));\n    *output2 = (int)((ulonglong)high_bits >> 0x20) * 0x20 - (int)high_bits;\n    return result;\n  }\n  *output1 = (shift_count - 0x433) + bits;\n  *output2 = 0x35 - bits;\n  return result;\n}\n\n",
            "current_name": "extract_bits_08009630",
            "entrypoint": "0x08009630",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009630": "extract_bits_08009630",
                "_Balloc": "allocate_memory",
                "__hi0bits": "find_msb_bit",
                "__lo0bits": "find_first_zero_bit",
                "iVar1": "result",
                "iVar3": "temp_var1",
                "iVar4": "flag",
                "local_1c": "value2",
                "local_20": "mask1",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output1",
                "param_6": "output2",
                "uVar2": "bits",
                "uVar5": "shifted_value",
                "uVar6": "shift_count",
                "uVar7": "high_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e0": {
            "additional_data": {
                "0": {
                    "constant1": 1
                },
                "0x100000": {
                    "limit_two": 1
                },
                "0x3fe00000": {
                    "set_bit": 1
                },
                "0x43500000": {
                    "constant2": 1,
                    "constant_one": 1
                },
                "0x7ff00000": {
                    "limit_one": 1
                },
                "0x7fffffff": {
                    "max_unsigned_int": 1
                },
                "0x800fffff": {
                    "mask": 1
                },
                "CONCAT44": {
                    "concatenate2": 1
                },
                "FUN_080096e0": {
                    "calculate_exponent": 2,
                    "calculate_float": 1,
                    "calculate_float_exponent": 2,
                    "calculate_floating_point": 18,
                    "calculate_floating_point_value": 2,
                    "compute_normalized_float": 1,
                    "convert_float_to_fixed_point": 1,
                    "convert_to_float": 1,
                    "decompose_float": 1,
                    "reverse_eng_func": 1,
                    "reverse_float": 1
                },
                "__muldf3": {
                    "multiply_double_float": 1,
                    "multiply_floating_point": 1,
                    "multiply_floats": 4
                },
                "iVar1": {
                    "count": 1,
                    "counter": 6,
                    "iteration": 1,
                    "iteration_count": 5,
                    "iteration_counter": 2,
                    "iterator": 1,
                    "multiplier": 1,
                    "offset": 3,
                    "shift": 4,
                    "shift_amount": 4,
                    "shift_value": 1,
                    "temp_var": 1,
                    "temp_var1": 1
                },
                "param_1": {
                    "base": 1,
                    "decimal_part": 1,
                    "exponent": 2,
                    "first_param": 1,
                    "float_number": 1,
                    "fraction": 1,
                    "input1": 6,
                    "input_float1": 1,
                    "input_float_part": 1,
                    "input_number1": 1,
                    "input_param_1": 1,
                    "input_value1": 1,
                    "integer_part": 1,
                    "mantissa": 4,
                    "num1": 3,
                    "number": 1,
                    "param1": 1,
                    "value1": 3
                },
                "param_2": {
                    "exponent": 7,
                    "float_exponent": 1,
                    "fraction_part": 2,
                    "input2": 6,
                    "input_float2": 1,
                    "input_int_part": 1,
                    "input_number2": 1,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "mantissa": 2,
                    "num2": 3,
                    "param2": 1,
                    "second_param": 1,
                    "value2": 3
                },
                "param_3": {
                    "adjusted_exponent": 1,
                    "exponent": 2,
                    "exponent_bias": 1,
                    "floating_point_bits": 1,
                    "output": 2,
                    "output_array": 1,
                    "output_fixed_point": 1,
                    "output_int": 1,
                    "output_param": 1,
                    "output_value": 1,
                    "result": 17,
                    "result_param": 1,
                    "result_ptr": 1
                },
                "param_4": {
                    "additional_param": 3,
                    "additional_parameter": 1,
                    "constant": 3,
                    "flag": 1,
                    "flags": 1,
                    "param": 1,
                    "param4": 7,
                    "param_4": 7,
                    "parameter4": 2,
                    "rounding_mode": 1,
                    "unknown": 1,
                    "unknown_value": 1,
                    "unused": 1,
                    "unused_param": 1
                },
                "uVar2": {
                    "abs_exponent": 2,
                    "abs_input2": 1,
                    "abs_input_param_2": 1,
                    "abs_int_part": 1,
                    "abs_mantissa": 1,
                    "abs_num2": 1,
                    "abs_number2": 1,
                    "abs_second_param": 1,
                    "abs_value2": 1,
                    "combined_inputs_masked": 1,
                    "input_value2_adjusted": 1,
                    "mask": 1,
                    "masked_fraction": 1,
                    "masked_fraction_part": 1,
                    "modified_exponent": 1,
                    "modified_input2": 1,
                    "modified_value2": 1,
                    "normalized_exponent": 1,
                    "positive_exponent": 4,
                    "positive_float": 1,
                    "positive_mantissa": 1,
                    "temp": 2,
                    "temp_value": 1,
                    "trimmed_input2": 1,
                    "unsigned_num2": 1,
                    "unsigned_param2": 1
                },
                "uVar3": {
                    "combined": 1,
                    "combined_floats": 1,
                    "combined_inputs": 2,
                    "combined_mant_exp": 1,
                    "combined_num": 1,
                    "combined_param": 1,
                    "combined_params": 2,
                    "combined_result": 1,
                    "combined_value": 7,
                    "combined_values": 1,
                    "concatenated": 1,
                    "concatenated_float": 1,
                    "concatenated_inputs": 1,
                    "concatenated_result": 1,
                    "concatenated_value": 2,
                    "concatenated_values": 1,
                    "fixed_point_value": 1,
                    "floating_point_value": 1,
                    "result": 3,
                    "result64": 1
                }
            },
            "called": [
                "FUN_080004c8"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined8 calculate_floating_point_value_080096e0(uint input1,uint exponent,int *result,undefined4 param4)\n\n{\n  int counter;\n  uint positive_exponent;\n  undefined8 combined_value;\n  \n  combined_value = concatenate2(exponent,input1);\n  counter = 0;\n  positive_exponent = exponent & 0x7fffffff;\n  *result = 0;\n  if ((positive_exponent < 0x7ff00000) && ((positive_exponent | input1) != 0)) {\n    if (positive_exponent < 0x100000) {\n      combined_value = multiply_floats(input1,exponent,0,0x43500000,param4);\n      counter = -0x36;\n      positive_exponent = (uint)((ulonglong)combined_value >> 0x20) & 0x7fffffff;\n    }\n    input1 = (uint)combined_value;\n    exponent = (uint)((ulonglong)combined_value >> 0x20) & 0x800fffff | 0x3fe00000;\n    *result = ((int)positive_exponent >> 0x14) + -0x3fe + counter;\n  }\n  return concatenate2(exponent,input1);\n}\n\n",
            "current_name": "calculate_floating_point_value_080096e0",
            "entrypoint": "0x080096e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate2",
                "FUN_080096e0": "calculate_floating_point_value_080096e0",
                "__muldf3": "multiply_floats",
                "iVar1": "counter",
                "param_1": "input1",
                "param_2": "exponent",
                "param_3": "result",
                "param_4": "param4",
                "uVar2": "positive_exponent",
                "uVar3": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009744": {
            "additional_data": {
                "DAT_20000c10": {
                    "error_indicator": 1
                },
                "FUN_08005728": {
                    "find_location": 1,
                    "get_allocation": 1,
                    "get_data": 1,
                    "get_memory_address": 1,
                    "get_memory_block": 1
                },
                "FUN_08009744": {
                    "allocate_memory": 28,
                    "allocate_memory_and_assign_to_param": 1,
                    "initialize_memory": 1,
                    "initialize_memory_allocation": 1
                },
                "_sbrk": {
                    "request_memory": 3
                },
                "iVar1": {
                    "alloc_result": 1,
                    "allocate_result": 1,
                    "allocated_address": 1,
                    "allocated_block": 1,
                    "allocated_memory": 3,
                    "allocated_ptr": 1,
                    "allocation_result": 15,
                    "brk_result": 1,
                    "memory_address": 1,
                    "memory_allocation_result": 1,
                    "memory_ptr": 2,
                    "result": 2
                },
                "param_1": {
                    "memory_address": 3,
                    "output": 1,
                    "output_address": 1,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_ptr": 3,
                    "result": 10,
                    "result_addr": 1,
                    "result_pointer": 5,
                    "result_ptr": 3,
                    "returned_address": 1,
                    "size": 1
                },
                "param_2": {
                    "allocation_size": 3,
                    "bytes": 1,
                    "memory_size": 1,
                    "num_bytes": 1,
                    "size": 25
                }
            },
            "called": [
                "FUN_08005728"
            ],
            "calling": [
                "FUN_0800884c",
                "FUN_08008af8"
            ],
            "code": "\nvoid allocate_memory_and_assign_to_param_08009744(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_20000c10 = 0;\n  allocation_result = request_memory(size);\n  if ((allocation_result == -1) && (DAT_20000c10 != 0)) {\n    *result = DAT_20000c10;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_and_assign_to_param_08009744",
            "entrypoint": "0x08009744",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009744": "allocate_memory_and_assign_to_param_08009744",
                "_sbrk": "request_memory",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009768": {
            "additional_data": {
                "FUN_08009768": {
                    "copy_and_check_string": 3,
                    "copy_and_clean_data": 1,
                    "copy_and_clean_string": 1,
                    "copy_and_clear_string": 1,
                    "copy_and_collapse_nullchars": 1,
                    "copy_and_null_terminate": 1,
                    "copy_and_pad_string": 1,
                    "copy_and_replace_zeros": 1,
                    "copy_and_trim_string": 1,
                    "copy_and_zero_out_string": 1,
                    "copy_and_zero_terminate": 1,
                    "copy_data": 1,
                    "copy_memory": 1,
                    "copy_safe_string": 2,
                    "copy_string": 12,
                    "copy_string_with_filters": 1,
                    "reverse_and_copy_string": 1
                },
                "cVar1": {
                    "ch": 1,
                    "char": 1,
                    "char_value": 1,
                    "current_byte": 2,
                    "current_char": 22
                },
                "param_1": {
                    "dest": 15,
                    "dest_ptr": 1,
                    "destination": 10,
                    "source": 3,
                    "source_data": 1,
                    "src": 1
                },
                "param_2": {
                    "destination": 3,
                    "destination_data": 1,
                    "dst": 1,
                    "source": 10,
                    "src": 15,
                    "src_ptr": 1
                },
                "param_3": {
                    "data_length": 1,
                    "length": 11,
                    "num_bytes": 4,
                    "size": 15
                },
                "puVar2": {
                    "current_src": 1,
                    "dest_ptr": 1,
                    "destination_ptr": 1,
                    "dst_ptr": 1,
                    "source_ptr": 3,
                    "src_pointer": 1,
                    "src_ptr": 21,
                    "src_ptr_temp": 1
                },
                "puVar3": {
                    "current_dest": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 20,
                    "dest_ptr_temp": 1,
                    "destination_ptr": 3,
                    "dst_ptr": 1,
                    "source_ptr": 1,
                    "src_ptr": 2
                },
                "uVar4": {
                    "current_byte": 7,
                    "current_char": 2,
                    "current_uint": 2,
                    "current_value": 8,
                    "current_word": 2,
                    "temp": 5,
                    "tmp": 1,
                    "value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nvoid copy_and_check_string_08009768(uint *dest,uint *src,uint size)\n\n{\n  char current_char;\n  uint *src_ptr;\n  uint *dest_ptr;\n  uint current_value;\n  \n  if (((((uint)dest | (uint)src) & 3) == 0) &&\n     (dest_ptr = dest, src_ptr = src, 3 < size)) {\n    do {\n      src = src_ptr + 1;\n      current_value = *src_ptr;\n      dest = dest_ptr;\n      if ((current_value + 0xfefefeff & ~current_value & 0x80808080) != 0) goto LAB_0800979c;\n      size = size - 4;\n      dest = dest_ptr + 1;\n      *dest_ptr = current_value;\n      dest_ptr = dest;\n      src_ptr = src;\n    } while (3 < size);\n  }\n  src_ptr = src;\n  if (size != 0) {\nLAB_0800979c:\n    current_char = *(char *)src_ptr;\n    *(char *)dest = current_char;\n    while( true ) {\n      dest = (uint *)((int)dest + 1);\n      size = size - 1;\n      if (current_char == '\\0') break;\n      if (size == 0) {\n        return;\n      }\n      src_ptr = (uint *)((int)src_ptr + 1);\n      current_char = *(char *)src_ptr;\n      *(char *)dest = current_char;\n    }\n    if (size != 0) {\n      src_ptr = dest;\n      do {\n        dest_ptr = (uint *)((int)src_ptr + 1);\n        *(char *)src_ptr = '\\0';\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (uint *)(size + (int)dest));\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_check_string_08009768",
            "entrypoint": "0x08009768",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009768": "copy_and_check_string_08009768",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "src_ptr",
                "puVar3": "dest_ptr",
                "uVar4": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080097cc": {
            "additional_data": {
                "FUN_08001084": {
                    "copy_data": 1,
                    "copy_memory": 2
                },
                "FUN_080088ec": {
                    "copy_data_part": 1,
                    "free_memory": 1,
                    "memcpy": 1
                },
                "FUN_08008af8": {
                    "allocate_memory": 3
                },
                "FUN_080097cc": {
                    "copy_and_resize_buffer": 2,
                    "copy_and_resize_data": 1,
                    "copy_and_resize_memory": 1,
                    "copy_and_update": 1,
                    "copy_data": 4,
                    "decompress_data": 2,
                    "extract_and_copy_data": 6,
                    "improve_and_copy_data": 1,
                    "process_data": 4,
                    "reallocate_memory": 1,
                    "reorganize_function": 1,
                    "reverse_and_resize_buffer": 1,
                    "reverse_and_update_buffer": 1
                },
                "FUN_08009a18": {
                    "deallocate_memory": 1,
                    "reallocate_memory": 2
                },
                "FUN_08009adc": {
                    "deallocate_memory": 1,
                    "malloc": 1,
                    "realloc_memory": 1
                },
                "LAB_08009896": {
                    "error_handling": 1,
                    "memory_allocation_failed": 1
                },
                "_08001084": {
                    "copy_data": 1
                },
                "_080088ec": {
                    "update_bit_flag": 1
                },
                "_08008af8": {
                    "get_source_length": 1
                },
                "_08009a18": {
                    "move_data": 1
                },
                "_08009adc": {
                    "decrement_source_info": 1
                },
                "_free_r": {
                    "free_memory": 5,
                    "my_free": 1
                },
                "_malloc_r": {
                    "allocate_memory": 5,
                    "malloc_function": 1
                },
                "_memcpy_r": {
                    "copy_memory": 1,
                    "my_memcpy": 1
                },
                "_memmove_r": {
                    "move_memory": 1,
                    "my_memmove": 1
                },
                "_realloc_r": {
                    "my_realloc": 1,
                    "realloc_function": 1,
                    "reallocate_memory": 3,
                    "realocate_memory": 1,
                    "resize_memory": 1
                },
                "iVar1": {
                    "current_offset": 2,
                    "data_offset": 1,
                    "dest_buffer_end": 1,
                    "dest_index": 1,
                    "dest_offset": 1,
                    "dest_ptr": 2,
                    "destination_offset": 1,
                    "destination_ptr": 1,
                    "input_offset": 1,
                    "new_data_index": 1,
                    "new_dest_offset": 1,
                    "output_index": 2,
                    "output_offset": 2,
                    "source_index": 3,
                    "source_offset": 5,
                    "source_size": 1,
                    "src_data_pointer": 1,
                    "src_index": 1,
                    "start_index": 1,
                    "temp_variable4": 1,
                    "temp_variable7": 1
                },
                "iVar3": {
                    "alloc_size": 1,
                    "new_allocation": 1,
                    "new_block": 2,
                    "new_buffer": 4,
                    "new_buffer_pointer": 1,
                    "new_data_pointer": 2,
                    "new_dest_ptr": 1,
                    "new_destination": 1,
                    "new_destination_ptr": 2,
                    "new_memory_chunk": 1,
                    "new_memory_ptr": 1,
                    "new_offset": 1,
                    "new_ptr": 2,
                    "realloc_result": 3,
                    "realloc_size": 2,
                    "temp_buffer": 1,
                    "temp_ptr": 1,
                    "temp_var1": 2,
                    "temp_variable3": 1,
                    "temp_variable5": 1
                },
                "iVar4": {
                    "bytes_moved": 1,
                    "copy_length": 1,
                    "copy_size": 1,
                    "data_offset": 1,
                    "destination_offset": 1,
                    "difference": 3,
                    "input_offset": 1,
                    "new_buffer_offset": 1,
                    "new_data_length": 1,
                    "new_offset": 1,
                    "new_source_length": 1,
                    "offset": 2,
                    "remaining_data_length": 1,
                    "remaining_length": 2,
                    "remaining_metadata": 1,
                    "remaining_size": 1,
                    "source_offset": 3,
                    "src_offset": 1,
                    "temp_offset": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_variable5": 1,
                    "temp_variable6": 1,
                    "updated_offset": 1
                },
                "memcpy": {
                    "copy_bytes": 1,
                    "copy_memory": 4
                },
                "memmove": {
                    "copy_data": 1,
                    "move_memory": 5
                },
                "param_1": {
                    "alloc_function": 1,
                    "dest_buffer": 1,
                    "destination": 1,
                    "err_ptr": 1,
                    "error": 2,
                    "error_code": 7,
                    "error_status": 2,
                    "output": 2,
                    "output_buffer": 5,
                    "param_output": 1,
                    "result": 7,
                    "status": 1
                },
                "param_2": {
                    "data": 2,
                    "dest_info": 1,
                    "input_buffer": 5,
                    "new_dest_ptr": 1,
                    "param_data": 1,
                    "realloc_function": 1,
                    "source": 7,
                    "source_array": 2,
                    "source_buffer": 3,
                    "source_data": 4,
                    "src_buffer": 2,
                    "src_data": 2
                },
                "param_3": {
                    "buffer": 2,
                    "data": 1,
                    "data_info": 1,
                    "data_tracker": 1,
                    "dest": 1,
                    "dest_array": 1,
                    "dest_data": 2,
                    "destination": 5,
                    "destination_buffer": 1,
                    "destination_data": 3,
                    "dst_buffer": 1,
                    "dst_data": 1,
                    "header": 1,
                    "length": 1,
                    "metadata": 2,
                    "operation": 1,
                    "param_info": 1,
                    "source_info": 2,
                    "target": 1,
                    "target_array": 1
                },
                "puVar7": {
                    "current_data": 3,
                    "current_data_ptr": 1,
                    "current_element": 1,
                    "current_header": 1,
                    "current_ptr": 2,
                    "current_source": 1,
                    "current_source_data": 1,
                    "data_ptr": 1,
                    "next_data_pointer": 1,
                    "next_dst_data_pointer": 1,
                    "next_source": 1,
                    "next_source_pointer": 1,
                    "next_source_ptr": 2,
                    "next_src_data": 1,
                    "p_data_pointer": 1,
                    "ptr_data": 1,
                    "ptr_temp_data": 1,
                    "source": 1,
                    "source_data": 1,
                    "source_data_ptr": 1,
                    "source_ptr": 2,
                    "src_ptr": 1,
                    "temp_ptr": 3,
                    "tmp_ptr": 1
                },
                "puVar8": {
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "dst_data_pointer": 1,
                    "metadata_ptr": 1,
                    "new_source_ptr": 1,
                    "next_data": 3,
                    "next_header": 1,
                    "next_source": 1,
                    "next_src_ptr": 1,
                    "operation_pointer": 1,
                    "p_temp_data": 1,
                    "ptr_data": 1,
                    "ptr_temp": 1,
                    "source": 1,
                    "source_copy": 1,
                    "source_data": 1,
                    "source_data_ptr": 1,
                    "source_pointer": 1,
                    "source_ptr": 6,
                    "src_data": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "temp_ptr_2": 1
                },
                "uVar2": {
                    "block_size": 2,
                    "copy_length": 5,
                    "copy_size": 4,
                    "current_size": 1,
                    "data_length": 5,
                    "data_size": 1,
                    "data_to_copy_length": 1,
                    "max_length": 1,
                    "new_data_size": 1,
                    "new_length": 2,
                    "num_bytes": 1,
                    "size_to_copy": 1,
                    "source_data_length": 1,
                    "target_offset": 1,
                    "temp_checksum": 1,
                    "temp_value2": 1,
                    "temp_variable9": 1,
                    "temporary_length": 1
                },
                "uVar5": {
                    "buffer_size": 2,
                    "destination_remaining": 1,
                    "max_size": 2,
                    "new_block_size": 2,
                    "new_buffer_length": 1,
                    "new_buffer_size": 4,
                    "new_data_size": 1,
                    "new_destination_size": 1,
                    "new_length": 1,
                    "new_size": 6,
                    "new_source_array_length": 1,
                    "new_source_max_length": 1,
                    "remaining_data_length": 1,
                    "remaining_source_length": 1,
                    "source_buffer_offset": 1,
                    "source_data_length": 1,
                    "source_length": 1,
                    "source_size": 1,
                    "src_data_length": 1,
                    "temp_variable8": 1
                },
                "uVar6": {
                    "actual_size": 1,
                    "block_size_copy": 1,
                    "copy_amount": 1,
                    "copy_offset": 1,
                    "copy_size": 2,
                    "current_data_length": 1,
                    "current_data_size": 2,
                    "current_length": 3,
                    "current_source_length": 1,
                    "current_src_data_length": 2,
                    "data_length": 1,
                    "data_size": 1,
                    "element_size": 1,
                    "next_source_length": 1,
                    "nonzero_offset": 1,
                    "num_bytes": 1,
                    "num_bytes_to_copy": 1,
                    "source_data_length": 2,
                    "temp_length": 1,
                    "temp_size": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_variable2": 1
                },
                "uVar9": {
                    "byte_value": 1,
                    "copy_data": 1,
                    "current_data": 2,
                    "current_data_value": 1,
                    "current_element": 1,
                    "current_element_value": 1,
                    "current_source_data_offset": 1,
                    "current_source_value": 2,
                    "current_src_data": 2,
                    "current_value": 3,
                    "data": 2,
                    "element": 1,
                    "source_data_value": 1,
                    "temp_data": 3,
                    "temp_value": 5,
                    "temp_var4": 1,
                    "tmp_data": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_08001084",
                "FUN_08008af8",
                "FUN_08009a18",
                "FUN_080088ec",
                "FUN_08009adc"
            ],
            "calling": [
                "FUN_08005e9c"
            ],
            "code": "\nundefined4 extract_and_copy_data_080097cc(undefined4 *error_code,int *source,int *destination)\n\n{\n  int source_offset;\n  uint copy_length;\n  int new_buffer;\n  int difference;\n  uint new_size;\n  uint current_length;\n  undefined4 *current_data;\n  undefined4 *source_ptr;\n  undefined4 temp_value;\n  \n  if (destination[2] != 0) {\n    source_offset = *source;\n    new_size = source[2];\n    source_ptr = (undefined4 *)*destination;\n    do {\n      do {\n        current_data = source_ptr + 2;\n        temp_value = *source_ptr;\n        current_length = source_ptr[1];\n        source_ptr = current_data;\n      } while (current_length == 0);\n      copy_length = current_length;\n      if ((new_size <= current_length) && (copy_length = new_size, (*(ushort *)(source + 3) & 0x480) != 0)) {\n        difference = source_offset - source[4];\n        new_size = (source[5] * 3) / 2;\n        copy_length = current_length + 1 + difference;\n        if (new_size < copy_length) {\n          new_size = copy_length;\n        }\n        if ((int)((uint)*(ushort *)(source + 3) << 0x15) < 0) {\n          new_buffer = allocate_memory(error_code,new_size);\n          if (new_buffer == 0) {\nerror_handling:\n            *error_code = 0xc;\n            *(ushort *)(source + 3) = *(ushort *)(source + 3) | 0x40;\n            destination[1] = 0;\n            destination[2] = 0;\n            return 0xffffffff;\n          }\n          copy_memory(new_buffer,source[4],difference);\n          *(ushort *)(source + 3) = *(ushort *)(source + 3) & 0xfb7f | 0x80;\n        }\n        else {\n          new_buffer = reallocate_memory(error_code);\n          if (new_buffer == 0) {\n            free_memory(error_code,source[4]);\n            goto error_handling;\n          }\n        }\n        source_offset = new_buffer + difference;\n        source[5] = new_size;\n        source[4] = new_buffer;\n        *source = source_offset;\n        source[2] = new_size - difference;\n        copy_length = current_length;\n      }\n      move_memory(source_offset,temp_value,copy_length);\n      difference = destination[2];\n      new_size = source[2] - copy_length;\n      source_offset = *source + copy_length;\n      source[2] = new_size;\n      *source = source_offset;\n      destination[2] = difference - current_length;\n    } while (difference - current_length != 0);\n  }\n  destination[1] = 0;\n  return 0;\n}\n\n",
            "current_name": "extract_and_copy_data_080097cc",
            "entrypoint": "0x080097cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080097cc": "extract_and_copy_data_080097cc",
                "LAB_08009896": "error_handling",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "iVar1": "source_offset",
                "iVar3": "new_buffer",
                "iVar4": "difference",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "error_code",
                "param_2": "source",
                "param_3": "destination",
                "puVar7": "current_data",
                "puVar8": "source_ptr",
                "uVar2": "copy_length",
                "uVar5": "new_size",
                "uVar6": "current_length",
                "uVar9": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098c0": {
            "additional_data": {
                "FUN_080098c0": {
                    "add_to_data_structure": 1,
                    "add_value_to_buffer": 1,
                    "initialize_data_entry": 1,
                    "update_data": 22,
                    "update_data_entry": 1,
                    "update_data_structure": 1,
                    "update_function_data": 1,
                    "update_param": 1,
                    "update_param_data": 1,
                    "update_parameter_value": 1
                },
                "param_1": {
                    "action": 1,
                    "condition": 1,
                    "data_flag": 3,
                    "data_status": 1,
                    "data_type": 2,
                    "entry_index": 1,
                    "flag": 5,
                    "input_type": 2,
                    "param_type": 2,
                    "parameter_type": 1,
                    "type": 10,
                    "update_type": 1,
                    "value_type": 1
                },
                "param_2": {
                    "data": 13,
                    "data1": 2,
                    "data_value": 2,
                    "new_param": 1,
                    "new_value": 3,
                    "param_value": 2,
                    "value": 7,
                    "value_1": 1
                },
                "param_3": {
                    "address": 1,
                    "data": 2,
                    "data1": 4,
                    "data2": 2,
                    "data_value1": 1,
                    "first_param": 1,
                    "new_param3": 1,
                    "new_value1": 1,
                    "param1": 1,
                    "param3": 2,
                    "param_a": 1,
                    "param_address": 1,
                    "value": 4,
                    "value1": 8,
                    "value_2": 1
                },
                "param_4": {
                    "data": 1,
                    "data2": 4,
                    "data3": 2,
                    "data_value2": 1,
                    "extra_value": 2,
                    "flag": 1,
                    "new_param4": 1,
                    "new_value2": 1,
                    "optional_data": 1,
                    "param2": 1,
                    "param4": 2,
                    "param_b": 1,
                    "param_flag": 1,
                    "result": 1,
                    "second_param": 1,
                    "value": 1,
                    "value2": 8,
                    "value_3": 1
                },
                "puVar1": {
                    "buffer_ptr": 1,
                    "current_data": 1,
                    "current_element": 1,
                    "data_buffer": 3,
                    "data_entry": 1,
                    "data_entry_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 17,
                    "data_struct": 1,
                    "data_structure": 1,
                    "param_array": 1,
                    "param_pointer": 1,
                    "ptr": 1
                },
                "uVar2": {
                    "result": 9,
                    "ret_value": 1,
                    "return_value": 21
                },
                "uVar3": {
                    "bit_flag": 1,
                    "bit_mask": 24,
                    "bit_shift": 2,
                    "bitmask": 1,
                    "flag": 1,
                    "flag_mask": 1,
                    "shifted_value": 1
                },
                "uVar4": {
                    "array_size": 1,
                    "buffer_index": 1,
                    "buffer_size": 1,
                    "count": 8,
                    "counter": 4,
                    "current_count": 1,
                    "current_size": 3,
                    "data_index": 3,
                    "data_size": 1,
                    "element_index": 1,
                    "entry_count": 1,
                    "index": 5,
                    "parameter_count": 1
                }
            },
            "called": [
                "FUN_08008af0",
                "FUN_08008af4"
            ],
            "calling": [
                "FUN_080078a0"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08009906) */\n/* WARNING: Removing unreachable block (ram,0x08009912) */\n\nundefined4 update_data_entry_080098c0(int type,undefined4 data,undefined4 value1,undefined4 value2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  __retarget_lock_acquire_recursive(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = value1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = value2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    *(uint *)(data_ptr + 4) = count + 1;\n    return_value = DAT_20000448;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = data;\n    __retarget_lock_release_recursive(return_value);\n    return_value = 0;\n  }\n  else {\n    __retarget_lock_release_recursive(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_entry_080098c0",
            "entrypoint": "0x080098c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098c0": "update_data_entry_080098c0",
                "param_1": "type",
                "param_2": "data",
                "param_3": "value1",
                "param_4": "value2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009980": {
            "additional_data": {
                "FUNK_08009980": {
                    "allocate_memory": 1
                },
                "FUN_08005d68": {
                    "initialize_array": 1,
                    "initialize_buffer": 1,
                    "initialize_memory": 2,
                    "set_memory_zero": 1
                },
                "FUN_08008af8": {
                    "get_aligned_size": 1,
                    "get_array": 1,
                    "get_element_size": 1,
                    "process_data": 2
                },
                "FUN_08009980": {
                    "allocate_and_initialize": 3,
                    "allocate_and_initialize_array": 3,
                    "allocate_and_initialize_memory": 8,
                    "allocate_buffer": 1,
                    "allocate_memory": 15
                },
                "param_1": {
                    "array": 1,
                    "size": 20,
                    "size_of_element": 9,
                    "size_param": 1
                },
                "param_2": {
                    "count": 1,
                    "element_size": 11,
                    "num_columns": 1,
                    "num_elements": 9,
                    "num_of_elements": 1,
                    "num_of_rows": 1,
                    "number_of_elements": 4,
                    "rows_param": 1,
                    "selection_flag": 1,
                    "value": 1
                },
                "param_3": {
                    "block_size": 1,
                    "columns_param": 1,
                    "element_size": 9,
                    "num_bytes": 1,
                    "num_elements": 12,
                    "num_of_columns": 1,
                    "num_rows": 1,
                    "size_of_allocation": 1,
                    "size_of_array": 1,
                    "size_of_buffer": 1,
                    "total_size": 2
                },
                "puVar1": {
                    "allocated_memory": 18,
                    "array_ptr": 3,
                    "buffer": 1,
                    "pointer": 1,
                    "ptr": 8
                },
                "puVar3": {
                    "adjusted_memory": 1,
                    "array_end": 1,
                    "array_end_ptr": 1,
                    "data_ptr": 3,
                    "data_start": 2,
                    "end_address": 1,
                    "end_ptr": 1,
                    "initialized_memory": 11,
                    "initialized_ptr": 1,
                    "new_memory_ptr": 1,
                    "new_ptr": 1,
                    "pointer_to_set_zero": 1,
                    "ptr": 1,
                    "ptr_hdr": 1,
                    "result": 1,
                    "result_ptr": 2,
                    "start_of_data": 1
                },
                "uVar2": {
                    "adjusted_size": 21,
                    "aligned_size": 1,
                    "allocated_memory_size": 1,
                    "allocated_size": 1,
                    "array_length": 1,
                    "calculated_size": 1,
                    "header_length": 1,
                    "header_size": 3,
                    "total_allocated_size": 1
                }
            },
            "called": [
                "FUN_08008af8",
                "FUN_08005d68"
            ],
            "calling": [
                "FUN_080090c0"
            ],
            "code": "\nundefined4 * allocate_and_initialize_memory_08009980(undefined4 size,int element_size,int num_elements)\n\n{\n  undefined4 *allocated_memory;\n  uint adjusted_size;\n  undefined4 *initialized_memory;\n  \n  allocated_memory = (undefined4 *)_malloc_r(size,num_elements * element_size);\n  if (allocated_memory == (undefined4 *)0x0) {\n    return (undefined4 *)0x0;\n  }\n  adjusted_size = (allocated_memory[-1] & 0xfffffffc) - 4;\n  if (adjusted_size < 0x25) {\n    initialized_memory = allocated_memory;\n    if (0x13 < adjusted_size) {\n      *allocated_memory = 0;\n      allocated_memory[1] = 0;\n      if (0x1b < adjusted_size) {\n        allocated_memory[2] = 0;\n        allocated_memory[3] = 0;\n        if (adjusted_size == 0x24) {\n          allocated_memory[4] = 0;\n          allocated_memory[5] = 0;\n          initialized_memory = allocated_memory + 6;\n        }\n        else {\n          initialized_memory = allocated_memory + 4;\n        }\n        *initialized_memory = 0;\n        initialized_memory[1] = 0;\n        initialized_memory[2] = 0;\n        return allocated_memory;\n      }\n      initialized_memory = allocated_memory + 2;\n    }\n    *initialized_memory = 0;\n    initialized_memory[1] = 0;\n    initialized_memory[2] = 0;\n    return allocated_memory;\n  }\n  memset(allocated_memory,0);\n  return allocated_memory;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08009980",
            "entrypoint": "0x08009980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009980": "allocate_and_initialize_memory_08009980",
                "param_1": "size",
                "param_2": "element_size",
                "param_3": "num_elements",
                "puVar1": "allocated_memory",
                "puVar3": "initialized_memory",
                "uVar2": "adjusted_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009a18": {
            "additional_data": {
                "FUN_08009a18": {
                    "copy_and_shift_data": 1,
                    "copy_and_shift_memory": 1,
                    "copy_backward": 1,
                    "copy_memory": 20,
                    "memcpy_reverse": 1,
                    "reverse_copy": 6,
                    "reverse_memcpy": 1
                },
                "LAB_08009abc": {
                    "copy_remaining_bytes": 1,
                    "skip_copying": 1
                },
                "iVar3": {
                    "copy_count": 1,
                    "count": 1,
                    "counter": 1,
                    "index": 3,
                    "iteration": 7,
                    "iteration_counter": 1,
                    "loop_count": 1,
                    "loop_counter": 4,
                    "num_blocks": 2,
                    "num_chunks": 1,
                    "num_copies": 1,
                    "num_iterations": 2,
                    "num_loops": 1,
                    "num_of_words": 1,
                    "num_quads": 1,
                    "num_words": 3
                },
                "param_1": {
                    "dest": 11,
                    "destination": 15,
                    "dst": 1,
                    "source": 3,
                    "source_array": 1
                },
                "param_2": {
                    "dest_array": 1,
                    "destination": 3,
                    "source": 15,
                    "src": 12
                },
                "param_3": {
                    "length": 12,
                    "size": 19
                },
                "puVar1": {
                    "copy_source": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 23,
                    "destination_ptr": 1,
                    "dst_ptr": 2,
                    "source_ptr": 1,
                    "src_ptr": 1
                },
                "puVar2": {
                    "copy_dest": 1,
                    "dest_ptr": 1,
                    "dst_ptr": 1,
                    "source_ptr": 1,
                    "src_pointer": 2,
                    "src_ptr": 25
                },
                "puVar4": {
                    "copy_ptr": 1,
                    "dest_byte": 6,
                    "dest_byte_pointer": 1,
                    "dest_byte_ptr": 7,
                    "dest_end": 7,
                    "dest_end_ptr": 4,
                    "destination_bytes": 1,
                    "dst_byte_ptr": 1,
                    "dst_end": 1,
                    "src_end": 1,
                    "temp_ptr": 1
                },
                "puVar5": {
                    "copy_data": 1,
                    "source_bytes": 1,
                    "src_byte": 6,
                    "src_byte_pointer": 1,
                    "src_byte_ptr": 8,
                    "src_end": 8,
                    "src_end_ptr": 4,
                    "temp_ptr": 1,
                    "temp_ptr2": 1
                },
                "uVar6": {
                    "bytes_remaining": 1,
                    "remainder": 1,
                    "remainder_length": 1,
                    "remaining": 3,
                    "remaining_bytes": 3,
                    "remaining_length": 4,
                    "remaining_length4": 1,
                    "remaining_size": 12,
                    "sub_length": 1,
                    "temp_size": 2,
                    "temp_var1": 1,
                    "u_var6": 1
                },
                "uVar7": {
                    "adjusted_size": 2,
                    "aligned_length": 1,
                    "aligned_size": 1,
                    "copy_size": 1,
                    "loop_size": 1,
                    "num_bytes_copied": 2,
                    "remainder": 1,
                    "remaining": 1,
                    "remaining_blocks": 1,
                    "remaining_bytes": 1,
                    "remaining_bytes_aligned": 1,
                    "remaining_length": 3,
                    "remaining_size": 4,
                    "remaining_size_2": 1,
                    "remaining_size_aligned": 1,
                    "remaining_size_mod16": 1,
                    "temp": 1,
                    "temp_length": 3,
                    "temp_size": 2,
                    "temp_size2": 1,
                    "temp_var2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080097cc",
                "FUN_08009adc"
            ],
            "code": "\nvoid copy_and_shift_memory_08009a18(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  int iteration;\n  undefined *dest_byte_ptr;\n  undefined4 *src_end;\n  uint remaining_size;\n  uint remaining_size;\n  \n  if ((source < destination) && (src_ptr = (undefined4 *)((int)source + size), destination < src_ptr)) {\n    dest_byte_ptr = (undefined *)((int)destination + size);\n    if (size != 0) {\n      do {\n        src_ptr = (undefined4 *)((int)src_ptr + -1);\n        dest_byte_ptr = dest_byte_ptr + -1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n      } while (source != src_ptr);\n    }\n  }\n  else {\n    remaining_size = size;\n    if (0xf < size) {\n      if ((((uint)destination | (uint)source) & 3) != 0) goto copy_remaining_bytes;\n      src_ptr = source + 4;\n      dest_ptr = destination + 4;\n      do {\n        src_end = src_ptr + 4;\n        dest_ptr[-4] = src_ptr[-4];\n        dest_ptr[-3] = src_ptr[-3];\n        dest_ptr[-2] = src_ptr[-2];\n        dest_ptr[-1] = src_ptr[-1];\n        src_ptr = src_end;\n        dest_ptr = dest_ptr + 4;\n      } while (src_end != (undefined4 *)((int)source + (size - 0x10 & 0xfffffff0) + 0x20));\n      iteration = (size - 0x10 >> 4) + 1;\n      remaining_size = size & 0xf;\n      source = source + iteration * 4;\n      destination = destination + iteration * 4;\n      if (3 < remaining_size) {\n        src_ptr = destination + -1;\n        remaining_size = remaining_size;\n        dest_ptr = source;\n        do {\n          remaining_size = remaining_size - 4;\n          src_ptr = src_ptr + 1;\n          *src_ptr = *dest_ptr;\n          dest_ptr = dest_ptr + 1;\n        } while (3 < remaining_size);\n        iteration = (remaining_size - 4 & 0xfffffffc) + 4;\n        destination = (undefined4 *)((int)destination + iteration);\n        source = (undefined4 *)((int)source + iteration);\n        remaining_size = size & 3;\n      }\n    }\n    size = remaining_size;\n    if (remaining_size != 0) {\ncopy_remaining_bytes:\n      dest_byte_ptr = (undefined *)((int)destination + -1);\n      src_ptr = source;\n      do {\n        dest_ptr = (undefined4 *)((int)src_ptr + 1);\n        dest_byte_ptr = dest_byte_ptr + 1;\n        *dest_byte_ptr = *(undefined *)src_ptr;\n        src_ptr = dest_ptr;\n      } while (dest_ptr != (undefined4 *)(size + (int)source));\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "copy_and_shift_memory_08009a18",
            "entrypoint": "0x08009a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009a18": "copy_and_shift_memory_08009a18",
                "LAB_08009abc": "copy_remaining_bytes",
                "iVar3": "iteration",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar4": "dest_byte_ptr",
                "puVar5": "src_end",
                "uVar6": "remaining_size",
                "uVar7": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009adc": {
            "additional_data": {
                "DAT_20000454": {
                    "data_20000454": 1,
                    "end_of_heap": 2,
                    "global_data": 1,
                    "global_heap": 1,
                    "global_mutex": 1,
                    "global_pointer": 1,
                    "global_ptr": 2,
                    "heap_base": 1,
                    "last_allocated": 1,
                    "last_block": 1,
                    "top_chunk": 1
                },
                "FUN_080088ec": {
                    "log_error": 1
                },
                "FUN_08008af8": {
                    "allocate_small_block": 1
                },
                "FUN_080090a8": {
                    "initialize_mutex": 1
                },
                "FUN_080090b4": {
                    "initialize_memory": 1
                },
                "FUN_08009a18": {
                    "split_block": 1
                },
                "FUN_08009adc": {
                    "allocate_dynamic_memory": 1,
                    "allocate_memory": 26,
                    "improved_alloc_memory": 1,
                    "realloc_memory": 1,
                    "reallocate_memory": 1
                },
                "__malloc_lock": {
                    "acquire_lock": 1,
                    "lock_heap": 1
                },
                "__malloc_unlock": {
                    "release_lock": 1,
                    "unlock_heap": 1
                },
                "_free_r": {
                    "deallocate_memory": 1,
                    "free_memory_r": 1
                },
                "_malloc_r": {
                    "allocate_memory": 1,
                    "allocate_memory_r": 1
                },
                "aVar2": {
                    "tmp_var": 1
                },
                "iVar11": {
                    "adjusted_existing_memory": 1,
                    "aligned_ptr": 3,
                    "alignment_address": 1,
                    "allocated_block": 1,
                    "block": 1,
                    "block_address": 1,
                    "block_end": 1,
                    "block_offset": 1,
                    "combined_header": 1,
                    "curr_ptr": 1,
                    "current_block": 1,
                    "current_chunk": 1,
                    "end_pointer": 1,
                    "last_block_ptr": 1,
                    "new_block": 2,
                    "new_block_end": 1,
                    "new_footer": 1,
                    "prev_ptr": 1,
                    "previous_block_end": 1,
                    "realigned_block_size": 1,
                    "temp5": 1,
                    "temp_int_3": 1,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1,
                    "var8": 1
                },
                "iVar2": {
                    "curr_header": 1,
                    "current_block": 1,
                    "current_block_size": 2,
                    "current_size": 1,
                    "header": 1,
                    "next_block": 2,
                    "offset": 4,
                    "ptr_size": 1,
                    "remaining_size": 1,
                    "size_diff": 1,
                    "size_difference": 1,
                    "temp": 5,
                    "temp_2": 1,
                    "temp_int": 1,
                    "temp_var": 3,
                    "temp_var_1": 1,
                    "tmp_var": 1,
                    "total_size": 1,
                    "var1": 1
                },
                "iVar5": {
                    "curr_footer": 1,
                    "current_block": 1,
                    "next_block": 2,
                    "next_block_size": 2,
                    "next_header": 1,
                    "next_offset": 2,
                    "next_ptr": 2,
                    "previous_block": 1,
                    "temp": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_5": 1,
                    "temp_int_2": 1,
                    "temp_int_var": 1,
                    "temp_size": 1,
                    "temp_value_2": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "tmp_var2": 1,
                    "var3": 1
                },
                "iVar7": {
                    "next_block": 1
                },
                "memmove": {
                    "copy_memory": 1
                },
                "param_1": {
                    "allocation_context": 1,
                    "allocator": 2,
                    "context": 2,
                    "lock": 5,
                    "lock_ptr": 1,
                    "malloc_context": 1,
                    "malloc_mutex": 1,
                    "mem_block": 1,
                    "mem_mgr": 1,
                    "memory_allocator": 1,
                    "memory_manager": 1,
                    "mutex": 2,
                    "param": 1,
                    "param_addr": 1,
                    "param_array": 1,
                    "param_buffer": 1,
                    "param_out": 1,
                    "param_r": 1,
                    "param_size": 3,
                    "ptr": 1,
                    "ptr_err": 1,
                    "ptr_to_lock": 1
                },
                "param_2": {
                    "block": 1,
                    "block_ptr": 1,
                    "existing_memory": 6,
                    "input_array": 1,
                    "mem_block": 1,
                    "mem_ptr": 1,
                    "memory_block": 1,
                    "old_memory": 1,
                    "old_pointer": 1,
                    "old_ptr": 2,
                    "orig_memory": 1,
                    "param_2nd": 1,
                    "prev_allocation": 1,
                    "prev_block": 1,
                    "ptr": 10,
                    "ptr_buf": 1
                },
                "param_3": {
                    "buf_size": 1,
                    "new_size": 4,
                    "num_elements": 1,
                    "required_size": 2,
                    "size": 23
                },
                "piVar1": {
                    "allocated_memory": 1,
                    "block_ptr": 1,
                    "new_array": 1,
                    "new_mem_ptr": 1,
                    "new_memory": 7,
                    "new_pointer": 1,
                    "new_ptr": 6,
                    "prev": 1,
                    "prev_block": 3,
                    "prev_header": 1,
                    "previous_block": 3,
                    "previous_block_ptr": 1,
                    "ptr1": 2,
                    "ptr_new_buf": 1,
                    "temp_1": 1
                },
                "piVar3": {
                    "adjusted_existing_memory": 1,
                    "block": 1,
                    "block_to_split": 1,
                    "current_block": 2,
                    "current_memory": 1,
                    "current_ptr": 1,
                    "final_memory": 1,
                    "new_block": 4,
                    "new_block_ptr": 2,
                    "new_memory": 1,
                    "old_ptr": 1,
                    "output_array": 1,
                    "prev_block_alloc_flag": 1,
                    "prev_pointer": 1,
                    "prev_ptr": 3,
                    "ptr2": 2,
                    "ptr_dst": 1,
                    "ptr_offset": 1,
                    "temp_3": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_var_2": 1
                },
                "piVar7": {
                    "adjusted_existing_memory": 1,
                    "copy_ptr": 2,
                    "new_block": 1,
                    "new_block_header": 1,
                    "new_block_ptr_2": 1,
                    "new_ptr_offset": 1,
                    "next_block": 1,
                    "ptr3": 1,
                    "ptr_temp": 1,
                    "temp": 1,
                    "temp4": 1,
                    "temp_7": 1,
                    "temp_array": 1,
                    "temp_block": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 1,
                    "temp_ptr_2": 1,
                    "temp_var2": 1,
                    "temp_var_4": 1,
                    "temp_var_5": 1
                },
                "uVar10": {
                    "adjusted_size": 1,
                    "block_diff": 1,
                    "combined_size": 1,
                    "end_size": 1,
                    "new_block_size": 1,
                    "new_size": 5,
                    "next_block_size": 1,
                    "remaining_size": 2,
                    "split_size": 1,
                    "temp": 1,
                    "temp_size": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "total_size": 9,
                    "var7": 1
                },
                "uVar4": {
                    "block_size": 5,
                    "header": 1,
                    "header_size": 3,
                    "prev_block_size": 1,
                    "size_align": 1,
                    "size_aligned": 1,
                    "size_diff": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp_4": 1,
                    "temp_uint": 1,
                    "temp_value": 2,
                    "temp_var": 6,
                    "temp_var2": 2,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "var2": 1
                },
                "uVar6": {
                    "allocated_size": 1,
                    "block_flags": 1,
                    "block_size": 2,
                    "current_block_flag": 1,
                    "current_block_header": 1,
                    "current_block_size": 2,
                    "current_size": 1,
                    "header": 2,
                    "mask_var": 1,
                    "next_header": 1,
                    "old_block_size": 1,
                    "prev_header_size": 1,
                    "prev_size": 2,
                    "previous_block_size": 1,
                    "size_aligned": 1,
                    "size_bitflag": 1,
                    "size_var": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_6": 1,
                    "temp_alloc_flag": 1,
                    "temp_uint_2": 1,
                    "temp_uint_var": 1,
                    "temp_value_2": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "var4": 1
                },
                "uVar8": {
                    "adjusted_size": 2,
                    "aligned_size": 21,
                    "new_size": 1,
                    "new_size_align": 1,
                    "requested_size": 1,
                    "rounded_size": 1,
                    "size_aligned2": 1,
                    "size_aligned_temp": 1,
                    "var5": 1
                },
                "uVar9": {
                    "aligned_oldsize": 1,
                    "aligned_size": 1,
                    "aligned_size_2": 1,
                    "available_size": 1,
                    "current_block_size": 1,
                    "diff_size": 1,
                    "existing_size": 1,
                    "new_block_size": 1,
                    "new_size": 1,
                    "new_size_aligned": 1,
                    "old_size": 1,
                    "old_size_align": 1,
                    "prev_block_size": 1,
                    "prev_chunk_size": 1,
                    "previous_block_size": 1,
                    "remaining_size": 3,
                    "requested_size": 2,
                    "size_diff": 2,
                    "size_difference": 1,
                    "size_minus_offset": 1,
                    "temp": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var_5": 1,
                    "var6": 1
                }
            },
            "called": [
                "FUN_08008af8",
                "FUN_08009a18",
                "FUN_080090b4",
                "FUN_080088ec",
                "FUN_080090a8"
            ],
            "calling": [
                "FUN_080097cc"
            ],
            "code": "\nint * allocate_dynamic_memory_08009adc(undefined4 *lock,int *ptr,uint size)\n\n{\n  int *new_memory;\n  int temp;\n  int *new_block;\n  uint temp_var;\n  int next_offset;\n  uint block_size;\n  int *copy_ptr;\n  uint aligned_size;\n  uint remaining_size;\n  uint total_size;\n  int aligned_ptr;\n  \n  if (ptr == (int *)0x0) {\n    new_block = (int *)allocate_memory(lock,size);\n    return new_block;\n  }\n  lock_heap();\n  block_size = ptr[-1];\n  remaining_size = block_size & 0xfffffffc;\n  new_block = ptr + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_08009b8e;\n  }\n  if (aligned_size < size) {\nLAB_08009b8e:\n    *lock = 0xc;\n    return (int *)0x0;\n  }\n  aligned_ptr = (int)new_block + remaining_size;\n  total_size = remaining_size;\n  if ((int)remaining_size < (int)aligned_size) {\n    if (DAT_20000454 == aligned_ptr) {\n      aligned_ptr = (*(uint *)(DAT_20000454 + 4) & 0xfffffffc) + remaining_size;\n      if ((int)(aligned_size + 0x10) <= aligned_ptr) {\n        DAT_20000454 = (int)new_block + aligned_size;\n        *(uint *)(DAT_20000454 + 4) = aligned_ptr - aligned_size | 1;\n        ptr[-1] = aligned_size | ptr[-1] & 1U;\n        release_lock(lock);\n        return ptr;\n      }\n      if (-1 < (int)(block_size << 0x1f)) {\n        new_memory = (int *)((int)new_block - ptr[-2]);\n        block_size = new_memory[1] & 0xfffffffc;\n        if ((int)(aligned_size + 0x10) <= (int)(aligned_ptr + block_size)) {\n          next_offset = new_memory[3];\n          new_block = new_memory + 2;\n          temp = *new_block;\n          remaining_size = remaining_size - 4;\n          *(int *)(temp + 0xc) = next_offset;\n          *(int *)(next_offset + 8) = temp;\n          if (remaining_size < 0x25) {\n            temp = *ptr;\n            copy_ptr = new_block;\n            if (0x13 < remaining_size) {\n              new_memory[2] = temp;\n              new_memory[3] = ptr[1];\n              temp = ptr[2];\n              if (remaining_size < 0x1c) {\n                ptr = ptr + 2;\n                copy_ptr = new_memory + 4;\n              }\n              else {\n                new_memory[4] = temp;\n                new_memory[5] = ptr[3];\n                temp = ptr[4];\n                if (remaining_size == 0x24) {\n                  new_memory[6] = temp;\n                  new_memory[7] = ptr[5];\n                  temp = ptr[6];\n                  ptr = ptr + 6;\n                  copy_ptr = new_memory + 8;\n                }\n                else {\n                  ptr = ptr + 4;\n                  copy_ptr = new_memory + 6;\n                }\n              }\n            }\n            *copy_ptr = temp;\n            copy_ptr[1] = ptr[1];\n            copy_ptr[2] = ptr[2];\n          }\n          else {\n            copy_memory(new_block,ptr);\n          }\n          DAT_20000454 = (int)new_memory + aligned_size;\n          *(uint *)(DAT_20000454 + 4) = (aligned_ptr + block_size) - aligned_size | 1;\n          new_memory[1] = aligned_size | new_memory[1] & 1U;\n          release_lock(lock);\n          return new_block;\n        }\nLAB_08009bb0:\n        total_size = remaining_size + block_size;\n        if ((int)aligned_size <= (int)total_size) {\n          next_offset = new_memory[3];\n          copy_ptr = new_memory + 2;\n          temp = *copy_ptr;\n          *(int *)(temp + 0xc) = next_offset;\n          aligned_ptr = (int)new_memory + total_size;\n          *(int *)(next_offset + 8) = temp;\n          new_block = new_memory;\n          if (remaining_size - 4 < 0x25) goto LAB_08009bd0;\nLAB_08009d4c:\n          copy_memory(copy_ptr,ptr);\n          ptr = copy_ptr;\n          goto LAB_08009c00;\n        }\n      }\n    }\n    else {\n      if (-1 < *(int *)((*(uint *)(aligned_ptr + 4) & 0xfffffffe) + aligned_ptr + 4) << 0x1f) {\n        temp_var = *(uint *)(aligned_ptr + 4) & 0xfffffffc;\n        total_size = remaining_size + temp_var;\n        if ((int)total_size < (int)aligned_size) {\n          if ((int)(block_size << 0x1f) < 0) goto LAB_08009b36;\n          new_memory = (int *)((int)new_block - ptr[-2]);\n          block_size = new_memory[1] & 0xfffffffc;\n          total_size = temp_var + block_size + remaining_size;\n          if ((int)total_size < (int)aligned_size) goto LAB_08009bb0;\n          temp = *(int *)(aligned_ptr + 8);\n          aligned_ptr = *(int *)(aligned_ptr + 0xc);\n          *(int *)(temp + 0xc) = aligned_ptr;\n          *(int *)(aligned_ptr + 8) = temp;\n          copy_ptr = new_memory + 2;\n          temp = *copy_ptr;\n          next_offset = new_memory[3];\n          *(int *)(temp + 0xc) = next_offset;\n          aligned_ptr = (int)new_memory + total_size;\n          *(int *)(next_offset + 8) = temp;\n          new_block = new_memory;\n          if (0x24 < remaining_size - 4) goto LAB_08009d4c;\nLAB_08009bd0:\n          remaining_size = remaining_size - 4;\n          temp = *ptr;\n          new_memory = copy_ptr;\n          if (0x13 < remaining_size) {\n            new_block[2] = temp;\n            new_block[3] = ptr[1];\n            temp = ptr[2];\n            if (remaining_size < 0x1c) {\n              ptr = ptr + 2;\n              new_memory = new_block + 4;\n            }\n            else {\n              new_block[4] = temp;\n              new_block[5] = ptr[3];\n              temp = ptr[4];\n              if (remaining_size == 0x24) {\n                new_block[6] = temp;\n                new_block[7] = ptr[5];\n                temp = ptr[6];\n                ptr = ptr + 6;\n                new_memory = new_block + 8;\n              }\n              else {\n                ptr = ptr + 4;\n                new_memory = new_block + 6;\n              }\n            }\n          }\n          *new_memory = temp;\n          new_memory[1] = ptr[1];\n          new_memory[2] = ptr[2];\n          ptr = copy_ptr;\n        }\n        else {\n          temp = *(int *)(aligned_ptr + 8);\n          next_offset = *(int *)(aligned_ptr + 0xc);\n          *(int *)(temp + 0xc) = next_offset;\n          aligned_ptr = (int)new_block + total_size;\n          *(int *)(next_offset + 8) = temp;\n        }\n        goto LAB_08009c00;\n      }\n      if (-1 < (int)(block_size << 0x1f)) {\n        new_memory = (int *)((int)new_block - ptr[-2]);\n        block_size = new_memory[1] & 0xfffffffc;\n        goto LAB_08009bb0;\n      }\n    }\nLAB_08009b36:\n    new_memory = (int *)allocate_memory(lock,size);\n    if (new_memory != (int *)0x0) {\n      if ((int *)((ptr[-1] & 0xfffffffeU) + (int)new_block) == new_memory + -2) {\n        total_size = remaining_size + (new_memory[-1] & 0xfffffffcU);\n        aligned_ptr = (int)new_block + total_size;\n        goto LAB_08009c00;\n      }\n      remaining_size = remaining_size - 4;\n      if (remaining_size < 0x25) {\n        aligned_ptr = *ptr;\n        new_block = ptr;\n        copy_ptr = new_memory;\n        if (0x13 < remaining_size) {\n          *new_memory = aligned_ptr;\n          new_memory[1] = ptr[1];\n          if (remaining_size < 0x1c) {\n            aligned_ptr = ptr[2];\n            new_block = ptr + 2;\n            copy_ptr = new_memory + 2;\n          }\n          else {\n            new_memory[2] = ptr[2];\n            new_memory[3] = ptr[3];\n            if (remaining_size == 0x24) {\n              new_memory[4] = ptr[4];\n              new_memory[5] = ptr[5];\n              aligned_ptr = ptr[6];\n              new_block = ptr + 6;\n              copy_ptr = new_memory + 6;\n            }\n            else {\n              aligned_ptr = ptr[4];\n              new_block = ptr + 4;\n              copy_ptr = new_memory + 4;\n            }\n          }\n        }\n        *copy_ptr = aligned_ptr;\n        copy_ptr[1] = new_block[1];\n        copy_ptr[2] = new_block[2];\n      }\n      else {\n        copy_memory(new_memory,ptr);\n      }\n      free_memory_r(lock,ptr);\n    }\n    release_lock(lock);\n    ptr = new_memory;\n  }\n  else {\nLAB_08009c00:\n    if (total_size - aligned_size < 0x10) {\n      new_block[1] = new_block[1] & 1U | total_size;\n      *(uint *)(aligned_ptr + 4) = *(uint *)(aligned_ptr + 4) | 1;\n    }\n    else {\n      new_block[1] = new_block[1] & 1U | aligned_size;\n      *(uint *)((int)new_block + aligned_size + 4) = total_size - aligned_size | 1;\n      *(uint *)(aligned_ptr + 4) = *(uint *)(aligned_ptr + 4) | 1;\n      free_memory_r(lock,(int)new_block + aligned_size + 8);\n    }\n    release_lock(lock);\n  }\n  return ptr;\n}\n\n",
            "current_name": "allocate_dynamic_memory_08009adc",
            "entrypoint": "0x08009adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009adc": "allocate_dynamic_memory_08009adc",
                "__malloc_lock": "lock_heap",
                "__malloc_unlock": "release_lock",
                "_free_r": "free_memory_r",
                "_malloc_r": "allocate_memory",
                "iVar11": "aligned_ptr",
                "iVar2": "temp",
                "iVar5": "next_offset",
                "iVar7": "next_block",
                "memmove": "copy_memory",
                "param_1": "lock",
                "param_2": "ptr",
                "param_3": "size",
                "piVar1": "new_memory",
                "piVar3": "new_block",
                "piVar7": "copy_ptr",
                "uVar10": "total_size",
                "uVar4": "temp_var",
                "uVar6": "block_size",
                "uVar8": "aligned_size",
                "uVar9": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009e68": {
            "called": [],
            "calling": [
                "FUN_08005d20",
                "FUN_08000134",
                "FUN_08000110"
            ],
            "code": "\nvoid FUNC_08009e68(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e68",
            "entrypoint": "0x08009e68",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e68": "FUNC_08009e68"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08009e74": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08009e74(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08009e74",
            "entrypoint": "0x08009e74",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08009e74": "FUNC_08009e74"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000158",
            "FUN_0800015c",
            "FUN_080003d4",
            "FUN_080003f4",
            "FUN_08000418",
            "FUN_080006a4",
            "FUN_0800088a",
            "FUN_080008fc",
            "FUN_08000978",
            "FUN_08000988",
            "FUN_08000998",
            "FUN_080009ac",
            "FUN_080009c0",
            "FUN_080009d4",
            "FUN_080009e8",
            "FUN_080009fc",
            "FUN_08000aa4",
            "FUN_08000aa8",
            "FUN_08000c08",
            "FUN_08000c10",
            "FUN_08000cb8",
            "FUN_08000e20",
            "FUN_08000f68",
            "FUN_08000fc8",
            "FUN_08000fd0",
            "FUN_08000ff4",
            "FUN_08001030",
            "FUN_08001044",
            "FUN_08001084",
            "FUN_08001170",
            "FUN_0800119c",
            "FUN_080011ec",
            "FUN_0800121c",
            "FUN_080014f0",
            "FUN_0800151c",
            "FUN_0800157c",
            "FUN_080015a0",
            "FUN_080015b4",
            "FUN_080015fc",
            "FUN_08001618",
            "FUN_0800166c",
            "FUN_080016d0",
            "FUN_08001714",
            "FUN_0800172a",
            "FUN_08001762",
            "FUN_0800177c",
            "FUN_080017b4",
            "FUN_080017c4",
            "FUN_08001a80",
            "FUN_08001ab0",
            "FUN_08001ccc",
            "FUN_08001f6c",
            "FUN_08002640",
            "FUN_080027f4",
            "FUN_08002ad8",
            "FUN_08002bb4",
            "FUN_08002c2e",
            "FUN_08002ca8",
            "FUN_08002d3c",
            "FUN_08002d98",
            "FUN_08003260",
            "FUN_08003440",
            "FUN_08003504",
            "FUN_08003518",
            "FUN_08003540",
            "FUN_08003568",
            "FUN_080035a4",
            "FUN_0800360c",
            "FUN_08003640",
            "FUN_080036a8",
            "FUN_080036f8",
            "FUN_08003908",
            "FUN_08003a94",
            "FUN_08003c94",
            "FUN_08003d60",
            "FUN_08003e38",
            "FUN_08003f18",
            "FUN_08003ff8",
            "FUN_080040a0",
            "FUN_08004104",
            "FUN_0800416a",
            "FUN_080041a8",
            "FUN_080041ea",
            "FUN_0800422e",
            "FUN_080042de",
            "FUN_0800438a",
            "FUN_08004436",
            "FUN_080046ec",
            "FUN_0800491c",
            "FUN_080049cc",
            "FUN_08004ae0",
            "FUN_08004bd8",
            "FUN_08004d78",
            "FUN_08004e6c",
            "FUN_08004e74",
            "FUN_08004ea4",
            "FUN_08004ee8",
            "FUN_08004f2c",
            "FUN_08004f3c",
            "FUN_08004f60",
            "FUN_08004f78",
            "FUN_08005224",
            "FUN_080052a0",
            "FUN_08005348",
            "FUN_080053b0",
            "FUN_08005500",
            "FUN_08005598",
            "FUN_080055f4",
            "FUN_08005674",
            "FUN_08005680",
            "FUN_08005704",
            "FUN_08005714",
            "FUN_08005728",
            "FUN_08005780",
            "FUN_080057e8",
            "FUN_08005838",
            "FUN_080059f0",
            "FUN_08005d14",
            "FUN_08005d20",
            "FUN_08005d68",
            "FUN_08005dfc",
            "FUN_08005e40",
            "FUN_080078c0",
            "FUN_080079e8",
            "FUN_0800884c",
            "FUN_080088ec",
            "FUN_08008ad4",
            "FUN_08008af8",
            "FUN_0800901c",
            "FUN_080090a8",
            "FUN_080090b4",
            "FUN_080090c0",
            "FUN_0800910c",
            "FUN_08009120",
            "FUN_080091a4",
            "FUN_080091e4",
            "FUN_08009244",
            "FUN_08009258",
            "FUN_080093a4",
            "FUN_08009444",
            "FUN_080094f8",
            "FUN_08009530",
            "FUN_08009630",
            "FUN_080096e0",
            "FUN_08009744",
            "FUN_08009768",
            "FUN_080097cc",
            "FUN_080098c0",
            "FUN_08009980",
            "FUN_08009a18",
            "FUN_08009adc"
        ],
        [
            "FUN_080004c8",
            "FUN_0800071c"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 685360
}