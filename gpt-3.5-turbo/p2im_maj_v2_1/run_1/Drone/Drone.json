{
    "functions": {
        "FUN_08000110": {
            "additional_data": {
                "DAT_20000228": {
                    "data_flag": 2,
                    "data_initialized": 1,
                    "flag": 13,
                    "flag_byte": 1,
                    "flag_storage": 1,
                    "flag_variable": 1,
                    "is_data_initialized": 1
                },
                "FUN_08000110": {
                    "initialize_data": 4,
                    "initialize_flag": 23,
                    "set_flag_if_not_set": 1,
                    "update_flag": 1
                },
                "param_1": {
                    "data": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "input": 9,
                    "input_data": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 9,
                    "value": 4
                }
            },
            "called": [
                "FUN_080072d4"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800011c) */\n\nundefined4 initialize_flag_08000110(undefined4 input)\n\n{\n  if ((char)DAT_20000228 == '\\0') {\n    DAT_20000228._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_08000110",
            "entrypoint": "0x08000110",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000110": "initialize_flag_08000110",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000134": {
            "additional_data": {
                "FUN_08000134": {
                    "combine_values": 1,
                    "concatenate": 4,
                    "concatenate_64bit": 1,
                    "concatenate_64bit_values": 1,
                    "concatenate_and_convert": 1,
                    "concatenate_and_extend": 1,
                    "concatenate_and_return": 1,
                    "concatenate_integers": 7,
                    "concatenate_parameters": 1,
                    "concatenate_params": 3,
                    "concatenate_u_int64": 1,
                    "concatenate_uint64": 1,
                    "concatenate_values": 7
                },
                "param_1": {
                    "first_integer": 5,
                    "first_param": 2,
                    "first_parameter": 2,
                    "first_value": 3,
                    "input1": 3,
                    "input_1": 1,
                    "input_param": 1,
                    "integer_1": 1,
                    "lower_32bit": 1,
                    "lower_u_int32": 1,
                    "num1": 1,
                    "source": 1,
                    "value1": 7,
                    "value_1": 1
                },
                "param_2": {
                    "concat_param": 1,
                    "destination": 1,
                    "input2": 3,
                    "input_2": 1,
                    "integer_2": 1,
                    "num2": 1,
                    "second_integer": 5,
                    "second_param": 2,
                    "second_parameter": 2,
                    "second_value": 3,
                    "upper_32bit": 1,
                    "upper_u_int32": 1,
                    "value2": 7,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_080072d4"
            ],
            "calling": [
                "FUN_08004fb4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800013a) */\n\nundefined8 concatenate_64bit_values_08000134(undefined4 value1,undefined4 value2)\n\n{\n  return CONCAT44(value2,value1);\n}\n\n",
            "current_name": "concatenate_64bit_values_08000134",
            "entrypoint": "0x08000134",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000134": "concatenate_64bit_values_08000134",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000150": {
            "additional_data": {
                "FUN_08000150": {
                    "calculate_string_length": 1,
                    "find_end_of_string": 8,
                    "find_last_character": 1,
                    "find_last_character_position": 1,
                    "find_null_terminated_string": 2,
                    "find_null_terminator_position": 2,
                    "find_string_end": 1,
                    "find_string_length": 7,
                    "get_end_of_string": 1,
                    "get_last_character_position": 2,
                    "get_string_length": 4,
                    "reverse_string": 1
                },
                "cVar1": {
                    "char_value": 1,
                    "character": 1,
                    "current_char": 19,
                    "current_char_value": 1,
                    "current_character": 7
                },
                "param_1": {
                    "input_string": 15,
                    "str": 6,
                    "string": 10
                },
                "pcVar2": {
                    "current_char_pointer": 1,
                    "current_char_ptr": 2,
                    "next": 1,
                    "next_char": 11,
                    "next_char_pointer": 3,
                    "next_char_ptr": 4,
                    "next_character": 8,
                    "next_character_position": 1
                },
                "pcVar3": {
                    "current": 1,
                    "current_char": 5,
                    "current_char_pointer": 3,
                    "current_char_ptr": 4,
                    "current_character": 4,
                    "current_pos": 2,
                    "current_position": 6,
                    "current_ptr": 1,
                    "next_char_pointer": 1,
                    "next_char_ptr": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c8c"
            ],
            "code": "\nchar * find_end_of_string_08000150(char *input_string)\n\n{\n  char current_char;\n  char *next_char;\n  char *current_position;\n  \n  current_position = input_string;\n  do {\n    next_char = current_position + 1;\n    current_char = *current_position;\n    current_position = next_char;\n  } while (current_char != '\\0');\n  return next_char + (-1 - (int)input_string);\n}\n\n",
            "current_name": "find_end_of_string_08000150",
            "entrypoint": "0x08000150",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000150": "find_end_of_string_08000150",
                "cVar1": "current_char",
                "param_1": "input_string",
                "pcVar2": "next_char",
                "pcVar3": "current_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000168": {
            "additional_data": {
                "FUN_08000168": {
                    "calculate": 4,
                    "calculate_final_result": 1,
                    "calculate_hash": 1,
                    "calculate_result": 5,
                    "calculate_unsigned_binary_result": 1,
                    "calculate_value": 1,
                    "perform_bitwise_operations": 1,
                    "perform_calculation": 1,
                    "perform_operation": 2,
                    "perform_unsigned_integer_operation": 1,
                    "reverse_arithmetic": 1,
                    "reverse_bits": 3
                },
                "bVar13": {
                    "bool1": 2,
                    "check1": 1,
                    "condition1": 5,
                    "flag1": 6,
                    "is_condition_true1": 1,
                    "is_equal1": 1,
                    "is_equal_shifted": 1,
                    "is_operand2_xored_zero": 1,
                    "is_zero": 3,
                    "is_zero1": 2,
                    "is_zero_shifted_b": 1,
                    "temp11": 1,
                    "temp13": 1,
                    "temp2": 1,
                    "temp_13": 1,
                    "temp_6": 1,
                    "temp_var_13": 1
                },
                "bVar14": {
                    "bool2": 2,
                    "check2": 1,
                    "condition1": 1,
                    "condition2": 5,
                    "condition_check": 1,
                    "flag2": 6,
                    "is_condition_true2": 1,
                    "is_equal": 2,
                    "is_equal2": 1,
                    "is_equality_check": 1,
                    "is_zero2": 2,
                    "is_zero_shifted": 1,
                    "temp12": 1,
                    "temp14": 1,
                    "temp3": 1,
                    "temp_14": 1,
                    "temp_7": 1,
                    "temp_var_14": 1
                },
                "bVar15": {
                    "bool3": 2,
                    "borrow": 1,
                    "check3": 1,
                    "condition2": 1,
                    "condition3": 4,
                    "flag3": 6,
                    "is_carry": 2,
                    "is_condition_true3": 1,
                    "is_greater_than": 1,
                    "is_negative": 1,
                    "is_negative_diff": 1,
                    "is_negative_shifted": 1,
                    "is_zero3": 1,
                    "overflow": 1,
                    "temp13": 1,
                    "temp15": 1,
                    "temp4": 1,
                    "temp_15": 1,
                    "temp_8": 1,
                    "temp_var_15": 1
                },
                "bVar2": {
                    "byte_val": 1,
                    "carry": 8,
                    "carry_bit": 1,
                    "carry_flag": 2,
                    "temp12": 1,
                    "temp2": 3,
                    "temp_2": 1,
                    "temp_5": 1,
                    "temp_var_2": 1,
                    "var3": 1
                },
                "iVar1": {
                    "index1": 1,
                    "num1": 1,
                    "shift1": 2,
                    "shift_amt1": 2,
                    "shift_bit": 1,
                    "shift_right1": 1,
                    "shift_val1": 1,
                    "shifted_d": 1,
                    "shifted_input4": 1,
                    "shifted_multiplier": 1,
                    "shifted_param2": 1,
                    "temp1": 3,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_1": 1,
                    "temp_9": 1,
                    "temp_var_1": 1,
                    "var1": 1
                },
                "iVar8": {
                    "index2": 1,
                    "num7": 1,
                    "right_shift_amount": 1,
                    "shift": 2,
                    "shift2": 2,
                    "shift_amount1": 1,
                    "shift_amt2": 2,
                    "shift_bit2": 1,
                    "shift_right2": 1,
                    "shift_val2": 1,
                    "shifted_b_2": 1,
                    "shifted_input2_by21": 1,
                    "shifted_result2": 1,
                    "temp6": 4,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_10": 1,
                    "temp_8": 1,
                    "temp_var_8": 1,
                    "tmp6": 1,
                    "var2": 1
                },
                "param_1": {
                    "dividend": 1,
                    "input1": 20,
                    "input_1": 8,
                    "input_a": 1,
                    "operand1": 1
                },
                "param_2": {
                    "input2": 20,
                    "input_2": 8,
                    "input_b": 1,
                    "multiplier": 1,
                    "operand2": 1
                },
                "param_3": {
                    "divisor": 1,
                    "input3": 20,
                    "input_3": 8,
                    "input_c": 1,
                    "operand3": 1
                },
                "param_4": {
                    "input4": 20,
                    "input_4": 8,
                    "input_d": 1,
                    "operand4": 1,
                    "shift_amount": 1
                },
                "uVar10": {
                    "num9": 1,
                    "output2": 1,
                    "result": 1,
                    "result2": 1,
                    "shift_amount2": 1,
                    "shifted_input1": 1,
                    "shifted_input2": 1,
                    "sum1": 1,
                    "temp10": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp8": 3,
                    "temp9": 1,
                    "temp_10": 1,
                    "temp_2": 1,
                    "temp_a": 1,
                    "temp_input_1": 1,
                    "temp_var_10": 1,
                    "temp_variable6": 1,
                    "tmp8": 1,
                    "u_var10": 1,
                    "value1": 1
                },
                "uVar11": {
                    "difference": 1,
                    "num10": 1,
                    "output3": 1,
                    "result1": 1,
                    "result3": 2,
                    "shift_result2": 1,
                    "shifted_input1": 1,
                    "shifted_result2": 1,
                    "sum2": 1,
                    "temp10": 1,
                    "temp11": 2,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp9": 3,
                    "temp_11": 1,
                    "temp_3": 1,
                    "temp_b": 1,
                    "temp_output": 1,
                    "temp_var_11": 1,
                    "temp_variable7": 1,
                    "tmp9": 1,
                    "u_var11": 1,
                    "value2": 1,
                    "var8": 1,
                    "var_11": 1
                },
                "uVar11_new": {
                    "shifted_temp2": 1
                },
                "uVar12": {
                    "carry_out": 1,
                    "num11": 1,
                    "output4": 1,
                    "result2": 1,
                    "result4": 2,
                    "shift_result3": 1,
                    "sign_extension1": 1,
                    "temp1": 1,
                    "temp10": 3,
                    "temp11": 1,
                    "temp12": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_12": 1,
                    "temp_4": 1,
                    "temp_c": 1,
                    "temp_output2": 1,
                    "temp_var": 1,
                    "temp_var_12": 1,
                    "temp_variable8": 1,
                    "tmp10": 1,
                    "u_var12": 1,
                    "var_12": 1
                },
                "uVar16": {
                    "mask": 1
                },
                "uVar3": {
                    "num2": 1,
                    "result": 1,
                    "result1": 3,
                    "result_1": 1,
                    "result_variable": 1,
                    "sum1": 1,
                    "temp": 1,
                    "temp1": 8,
                    "temp2": 1,
                    "temp3": 3,
                    "temp_3": 1,
                    "temp_a_2": 1,
                    "temp_var1": 2,
                    "temp_var_3": 1,
                    "tmp1": 1,
                    "var4": 1
                },
                "uVar4": {
                    "carry_sum1": 1,
                    "modified_b_2": 1,
                    "modified_input2": 1,
                    "num3": 1,
                    "result2": 2,
                    "result_2": 1,
                    "result_lower": 1,
                    "temp1": 3,
                    "temp2": 8,
                    "temp4": 3,
                    "temp_4": 1,
                    "temp_var2": 1,
                    "temp_var_4": 1,
                    "temp_variable1": 1,
                    "tmp2": 1,
                    "var5": 1
                },
                "uVar5": {
                    "num4": 1,
                    "result2": 1,
                    "result3": 2,
                    "result_3": 1,
                    "shift_result": 1,
                    "sum2": 1,
                    "temp2": 1,
                    "temp3": 9,
                    "temp5": 3,
                    "temp_5": 1,
                    "temp_b_2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_5": 1,
                    "temp_variable2": 1,
                    "tmp3": 1,
                    "var6": 1
                },
                "uVar6": {
                    "flipped_input4": 1,
                    "modified_d": 1,
                    "modified_input_4": 1,
                    "num5": 1,
                    "operand4_xored": 1,
                    "output1": 1,
                    "result": 1,
                    "result1": 3,
                    "result4": 1,
                    "result_4": 1,
                    "shifted_input2": 1,
                    "shifted_input_4": 1,
                    "temp1": 3,
                    "temp3": 1,
                    "temp4": 5,
                    "temp6": 2,
                    "temp_6": 1,
                    "temp_var4": 1,
                    "temp_var_6": 1,
                    "temp_variable3": 1,
                    "tmp4": 1
                },
                "uVar7": {
                    "carry_sum2": 1,
                    "modified_b": 1,
                    "modified_input1": 1,
                    "num6": 1,
                    "output2": 1,
                    "result2": 3,
                    "result5": 1,
                    "result_5": 1,
                    "shifted_input1": 1,
                    "temp2": 2,
                    "temp4": 1,
                    "temp5": 5,
                    "temp7": 2,
                    "temp_7": 1,
                    "temp_input_2": 1,
                    "temp_var5": 1,
                    "temp_var_7": 1,
                    "temp_variable4": 1,
                    "tmp5": 1,
                    "var7": 1
                },
                "uVar9": {
                    "carry": 1,
                    "num8": 1,
                    "operand2_shifted": 1,
                    "output1": 1,
                    "result1": 1,
                    "result_upper": 1,
                    "shift_result1": 1,
                    "shifted_b": 1,
                    "shifted_input2": 2,
                    "shifted_input_2": 2,
                    "shifted_param2_sign_bit": 1,
                    "shifted_result1": 1,
                    "sum3": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp7": 3,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_1": 1,
                    "temp_9": 1,
                    "temp_var_9": 1,
                    "temp_variable5": 1,
                    "tmp7": 1
                },
                "uVar9_new": {
                    "shifted_temp1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080070b0",
                "FUN_0800411c",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08006d68",
                "FUN_08006070",
                "FUN_08005c70"
            ],
            "code": "\nulonglong calculate_unsigned_binary_result_08000168(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp6;\n  uint temp7;\n  uint temp8;\n  uint temp9;\n  uint temp10;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  temp7 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp7 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp6 = (int)temp7 >> 0x15;\n  if (!flag2) {\n    flag2 = temp6 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp1 == -1;\n  }\n  if (flag2) {\n    if (temp6 == -1 || temp1 == -1) {\n      temp7 = temp4;\n      temp9 = input3;\n      if (temp6 == -1) {\n        temp7 = input2;\n        temp9 = input1;\n      }\n      if (temp6 != -1 || temp1 != -1) {\n        input3 = temp9;\n        temp4 = temp7;\n      }\n      flag2 = (temp9 | temp7 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp7 == temp4;\n      }\n      if (!flag2) {\n        temp7 = temp7 | 0x80000;\n      }\n      return CONCAT44(temp7,temp9);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp7 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (temp7 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (temp7 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp7 = temp7 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp9 = input4 - temp7;\n  flag2 = temp9 != 0;\n  if (input4 < temp7) {\n    temp9 = -temp9;\n  }\n  temp8 = input1;\n  temp5 = input2;\n  if (flag2 && temp7 <= input4) {\n    temp7 = temp7 + temp9;\n    temp8 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < temp9) {\n    return CONCAT44(temp5,temp8);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = temp8 != 0;\n    temp8 = -temp8;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (temp7 == temp9) {\n    temp5 = temp5 ^ 0x100000;\n    if (temp7 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      temp7 = 1;\n    }\n    else {\n      temp9 = temp9 - 1;\n    }\n  }\n  temp4 = -temp9 + 0x20;\n  if ((int)temp9 < 0x21) {\n    temp10 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (temp9 & 0xff);\n    temp1 = temp8 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(temp8,input3) + ((int)temp5 >> (temp9 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    temp10 = temp5 << (-temp9 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp10 = temp10 | 2;\n    }\n    temp5 = (int)temp5 >> (temp9 - 0x20 & 0xff);\n    temp4 = temp8 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(temp8,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  temp9 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = temp10 == 0;\n    temp10 = -temp10;\n    temp9 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    temp9 = -(uint)(flag2 <= temp9) - temp2;\n  }\n  if (0xfffff < temp9) {\n    temp8 = temp7 - 1;\n    if (0x1fffff < temp9) {\n      temp8 = temp9 & 1;\n      temp9 = temp9 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(temp8 != 0) << 0x1f | temp4 >> 1;\n      temp10 = (uint)(carry & 1) << 0x1f | temp10 >> 1;\n      temp8 = temp7;\n      if (0xffbfffff < temp7 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    flag2 = 0x7fffffff < temp10;\n    if (temp10 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(temp9 + temp8 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (temp10 & 0x80000000) != 0;\n  temp10 = temp10 << 1;\n  temp8 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  temp9 = temp9 * 2 + (uint)(flag2 || CARRY4(temp8,(uint)flag1));\n  temp8 = temp7 - 2;\n  if ((temp9 & 0x100000) != 0) goto LAB_08000278;\n  temp5 = temp4;\n  temp7 = temp9;\n  if (temp9 == 0) {\n    temp5 = 0;\n    temp7 = temp4;\n  }\n  temp6 = LZCOUNT(temp7);\n  if (temp9 == 0) {\n    temp6 = temp6 + 0x20;\n  }\n  temp9 = temp6 - 0xb;\n  flag3 = SBORROW4(temp9,0x20);\n  temp4 = temp6 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)temp9 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    temp6 = temp6 + -0x1f;\n    flag2 = temp6 < 0;\n    flag1 = temp6 == 0;\n    temp4 = temp9;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = temp7 << (temp9 & 0xff);\n      temp7 = temp7 >> (0xcU - temp6 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp10 = 0x20 - temp4;\n  }\n  temp7 = temp7 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp7 = temp7 | temp5 >> (temp10 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_080002f0:\n  if ((int)temp9 <= (int)temp8) {\n    return CONCAT44(temp7 + (temp8 - temp9) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(temp8 - temp9);\n  if ((int)temp4 < 0x1f) {\n    temp6 = temp4 - 0x13;\n    if (temp6 != 0 && temp6 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - temp6) & 0xff) | temp7 << (0xcU - temp6 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | temp7 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | temp7 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,temp7 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_unsigned_binary_result_08000168",
            "entrypoint": "0x08000168",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000168": "calculate_unsigned_binary_result_08000168",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "bVar2": "carry",
                "iVar1": "temp1",
                "iVar8": "temp6",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "temp8",
                "uVar11": "temp9",
                "uVar12": "temp10",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar9": "temp7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800016c": {
            "additional_data": {
                "FUF_0800016c": {
                    "reverse_arithmetic": 1
                },
                "FUN_0800016c": {
                    "calculate": 4,
                    "calculate_concatenation": 1,
                    "calculate_extended_sum": 1,
                    "calculate_result": 4,
                    "calculate_sum": 2,
                    "execute_multiplication_operation": 1,
                    "perform_math_operation": 1,
                    "perform_unsigned_binary_operation": 1,
                    "perform_unsigned_integer_operation": 1,
                    "reverse_binary": 1,
                    "reverse_binary_operation": 2,
                    "reverse_unsigned_long_long": 1
                },
                "bVar13": {
                    "b_var1": 1,
                    "b_var13": 1,
                    "comparison1": 1,
                    "cond1": 1,
                    "condition1": 2,
                    "condition_1": 1,
                    "equal1": 1,
                    "flag1": 2,
                    "inputs_equal": 1,
                    "is_carry": 1,
                    "is_condition1_true": 1,
                    "is_condition_true1": 1,
                    "is_equal": 5,
                    "is_negative": 1,
                    "is_result_negative": 1,
                    "is_zero": 2,
                    "is_zero_flag1": 1,
                    "is_zero_result": 1,
                    "temp13": 1,
                    "temp_13": 1,
                    "temp_bool1": 1,
                    "var13": 2
                },
                "bVar14": {
                    "b_var14": 1,
                    "comparison2": 1,
                    "cond1": 1,
                    "cond2": 1,
                    "condition1": 2,
                    "condition2": 2,
                    "condition_2": 1,
                    "condition_flag1": 1,
                    "equal2": 1,
                    "flag2": 2,
                    "is_condition2_true": 1,
                    "is_condition_true2": 1,
                    "is_equal": 1,
                    "is_equal_and_zero": 1,
                    "is_result_overflow": 1,
                    "is_same_value": 1,
                    "is_zero": 4,
                    "is_zero_flag2": 1,
                    "result": 1,
                    "temp14": 1,
                    "temp_14": 1,
                    "temp_bool2": 1,
                    "var14": 2
                },
                "bVar15": {
                    "b_var15": 1,
                    "carry_flag": 1,
                    "comparison3": 1,
                    "cond2": 1,
                    "cond3": 1,
                    "condition2": 2,
                    "condition3": 2,
                    "condition_3": 1,
                    "condition_flag2": 1,
                    "flag3": 2,
                    "is_carry": 1,
                    "is_carry_set": 1,
                    "is_condition3_true": 1,
                    "is_condition_true3": 1,
                    "is_less": 1,
                    "is_negative": 2,
                    "is_overflow": 1,
                    "is_shift_amount_negative": 1,
                    "is_subtraction_result_negative": 1,
                    "overflow": 1,
                    "sign_overflow": 1,
                    "temp15": 1,
                    "temp_15": 1,
                    "temp_bool3": 1,
                    "var15": 2
                },
                "bVar2": {
                    "bit": 1,
                    "carry": 6,
                    "carry1": 3,
                    "carry_bit": 2,
                    "carry_flag": 5,
                    "flag1": 1,
                    "least_significant_byte": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_bool": 1,
                    "var2": 3
                },
                "iVar1": {
                    "left_shift_count": 1,
                    "left_shift_result": 1,
                    "shift1": 5,
                    "shift_amount1": 1,
                    "shift_amount4": 1,
                    "shift_bits1": 1,
                    "shift_left_amt1": 1,
                    "shift_right1": 1,
                    "shift_right_a": 1,
                    "shift_right_count1": 1,
                    "shifted_input2": 2,
                    "shifted_input2_sign": 1,
                    "shifted_input_4": 1,
                    "shifted_right_2_1": 1,
                    "shifted_value1": 1,
                    "temp1": 2,
                    "temp_1": 1,
                    "var1": 3
                },
                "iVar6": {
                    "right_shift_count": 1,
                    "right_shift_result": 1,
                    "shift1": 1,
                    "shift2": 4,
                    "shift3": 1,
                    "shift_amount": 1,
                    "shift_amount1": 1,
                    "shift_amount2": 2,
                    "shift_bits2": 1,
                    "shift_left_amt2": 1,
                    "shift_right2": 1,
                    "shift_right_c": 1,
                    "shift_right_count2": 1,
                    "shifted_input4": 2,
                    "shifted_input4_sign": 1,
                    "shifted_input_2": 1,
                    "shifted_right_2_2": 1,
                    "shifted_value2": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_6": 1,
                    "temp_var4": 1,
                    "var6": 3
                },
                "param_1": {
                    "a": 2,
                    "input1": 16,
                    "input_1": 5,
                    "input_param1": 3,
                    "num1": 2,
                    "operand1": 2
                },
                "param_2": {
                    "b": 2,
                    "input2": 16,
                    "input_2": 5,
                    "input_param2": 3,
                    "num2": 2,
                    "operand2": 2
                },
                "param_3": {
                    "c": 2,
                    "input3": 16,
                    "input_3": 5,
                    "input_param3": 3,
                    "num3": 2,
                    "operand3": 2
                },
                "param_4": {
                    "d": 2,
                    "input4": 16,
                    "input_4": 5,
                    "input_param4": 3,
                    "num4": 2,
                    "operand4": 2
                },
                "uVar10": {
                    "count": 1,
                    "difference": 4,
                    "input_diff": 1,
                    "new_input4": 1,
                    "new_operand4": 1,
                    "result2": 1,
                    "result3": 1,
                    "result_part2": 2,
                    "shift_difference": 1,
                    "shifted_c": 1,
                    "shifted_input3": 2,
                    "shifted_num4": 1,
                    "shifted_temp2": 1,
                    "temp10": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_10": 1,
                    "temp_3": 1,
                    "temp_5": 1,
                    "temp_result1": 1,
                    "temp_var_5": 1,
                    "u_result2": 1,
                    "var10": 3
                },
                "uVar11": {
                    "carry_bit": 1,
                    "modified_input1": 1,
                    "result4": 1,
                    "result_part1": 1,
                    "result_upper": 1,
                    "shifted_carry": 1,
                    "shifted_input7": 1,
                    "shifted_op1": 1,
                    "shifted_output2": 1,
                    "shifted_sum2": 1,
                    "shifted_temp3": 1,
                    "sign1": 1,
                    "sum1": 1,
                    "temp1": 1,
                    "temp11": 1,
                    "temp4": 3,
                    "temp_11": 1,
                    "temp_4": 1,
                    "temp_6": 1,
                    "temp_operand1": 1,
                    "temp_result1": 1,
                    "temp_result2": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "u_var11": 1,
                    "var11": 3
                },
                "uVar12": {
                    "final_result": 1,
                    "modified_input3": 1,
                    "result": 1,
                    "result1": 1,
                    "result5": 1,
                    "result_hi": 1,
                    "result_lower": 1,
                    "shift": 1,
                    "shifted_output1": 1,
                    "shifted_temp4": 1,
                    "sign2": 1,
                    "sum2": 1,
                    "temp12": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_12": 1,
                    "temp_5": 1,
                    "temp_7": 1,
                    "temp_result1": 1,
                    "temp_result2": 1,
                    "temp_result3": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1,
                    "u_var12": 1,
                    "var12": 3
                },
                "uVar3": {
                    "addition_result1": 1,
                    "partial_sum1": 1,
                    "result": 1,
                    "result1": 2,
                    "shift2": 1,
                    "shifted_input1": 1,
                    "shifted_input2": 1,
                    "sum1": 2,
                    "temp1": 10,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_1": 2,
                    "temp_3": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "var3": 3
                },
                "uVar4": {
                    "addition_result2": 1,
                    "carry2": 1,
                    "partial_sum2": 1,
                    "result2": 1,
                    "shifted_input2": 1,
                    "shifted_input4": 1,
                    "shifted_result1": 1,
                    "shifted_sum1": 1,
                    "sum2": 2,
                    "temp2": 10,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_2": 2,
                    "temp_4": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "var4": 3
                },
                "uVar5": {
                    "result2": 1,
                    "shifted_2": 1,
                    "shifted_input4_extended": 1,
                    "shifted_input4_masked": 1,
                    "shifted_result2": 1,
                    "shifted_sum1": 1,
                    "shifted_sum2": 1,
                    "temp1": 1,
                    "temp3": 10,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_3": 1,
                    "temp_5": 1,
                    "temp_input1": 1,
                    "temp_result": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "u_var5": 1,
                    "var5": 3
                },
                "uVar6": {
                    "partial_sum3": 1
                },
                "uVar7": {
                    "input_2_shifted": 1,
                    "modified_input2": 1,
                    "mult1": 1,
                    "shifted_1": 1,
                    "shifted_b": 1,
                    "shifted_input2": 9,
                    "shifted_input2_divided_by25": 1,
                    "shifted_input2_extended": 1,
                    "shifted_num1": 2,
                    "shifted_op2": 1,
                    "shifted_operand2": 1,
                    "shifted_param2": 1,
                    "shifted_result1": 1,
                    "temp1": 1,
                    "temp7": 1,
                    "temp_7": 1,
                    "temp_input2": 1,
                    "u_shift1": 1,
                    "var7": 3
                },
                "uVar8": {
                    "input1_masked": 1,
                    "input1_sign": 1,
                    "modified_input4": 1,
                    "mult2": 1,
                    "remainder1": 1,
                    "result1": 1,
                    "result_1": 1,
                    "shifted_d": 1,
                    "shifted_input1": 2,
                    "shifted_input4": 4,
                    "shifted_input4_divided_by25": 1,
                    "shifted_num2": 2,
                    "shifted_operand4": 1,
                    "shifted_param3": 1,
                    "shifted_result": 1,
                    "temp2": 1,
                    "temp8": 1,
                    "temp_4": 1,
                    "temp_8": 1,
                    "temp_var5": 1,
                    "temp_var_4": 1,
                    "u_shift2": 1,
                    "var8": 3
                },
                "uVar9": {
                    "input1_extended": 1,
                    "input_4_shifted": 1,
                    "new_input2": 1,
                    "new_operand2": 1,
                    "result1": 1,
                    "result2": 2,
                    "result_2": 1,
                    "result_part1": 1,
                    "shifted_a": 1,
                    "shifted_input4": 6,
                    "shifted_num3": 1,
                    "shifted_op4": 1,
                    "shifted_param4": 1,
                    "shifted_result2": 1,
                    "shifted_sum3": 1,
                    "shifted_temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp9": 1,
                    "temp_9": 1,
                    "u_result1": 1,
                    "var9": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080070b0",
                "FUN_080071c0",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08006d68",
                "FUN_08006070",
                "FUN_08005c70"
            ],
            "code": "\nulonglong calculate_result_0800016c(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint shifted_input4;\n  uint difference;\n  uint var11;\n  uint var12;\n  bool is_equal;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_080003ac:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  var12 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    var11 = input3 << (var12 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (var12 & 0xff);\n    var12 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + CARRY4(shifted_input4,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    var11 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      var11 = var11 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    var12 = shifted_input4 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_input4,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = var11 == 0;\n    var11 = -var11;\n    difference = -var12;\n    var12 = -(uint)!is_zero - var12;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)var12;\n      var12 = (uint)(shifted_input4 != 0) << 0x1f | var12 >> 1;\n      var11 = (uint)(carry & 1) << 0x1f | var11 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_080003ac;\n    }\nLAB_08000278:\n    is_zero = 0x7fffffff < var11;\n    if (var11 == 0x80000000) {\n      is_zero = (var12 & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input4 * 0x100000 + (uint)CARRY4(var12,(uint)is_zero) | input2,\n                    var12 + is_zero);\n  }\n  is_equal = (var11 & 0x80000000) != 0;\n  var11 = var11 << 1;\n  shifted_input4 = var12 * 2;\n  is_zero = CARRY4(var12,var12);\n  var12 = var12 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if ((difference & 0x100000) != 0) goto LAB_08000278;\n  temp3 = var12;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = var12;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  var12 = shift2 - 0xb;\n  is_negative = SBORROW4(var12,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)var12 < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = var12;\n    if (!is_equal && is_zero == is_negative) {\n      temp3 = shifted_input2 << (var12 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_equal || is_zero != is_negative) {\n    var11 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (var11 & 0xff);\n  }\n  if (is_equal || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_080002f0:\n  if ((int)var12 <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - var12) * 0x100000 | input2,temp3);\n  }\n  difference = ~(shifted_input4 - var12);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_result_0800016c",
            "entrypoint": "0x0800016c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800016c": "calculate_result_0800016c",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "var11",
                "uVar12": "var12",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000404": {
            "additional_data": {
                "CONCAT44": {
                    "concatenate44": 1
                },
                "FUN_08000404": {
                    "bit_shift_and_combine": 1,
                    "bit_shift_and_concat": 1,
                    "bit_shuffle": 1,
                    "bitwise_rotation": 1,
                    "bitwise_shift": 2,
                    "calculate_shift_and_concat": 1,
                    "calculate_shift_and_mask": 1,
                    "calculate_shifted_value": 5,
                    "convert_integer_bits": 1,
                    "convert_to64_bit": 1,
                    "extract_bits": 1,
                    "reverse_bits": 7,
                    "reverse_bits_and_shift": 1,
                    "reversed_bits": 1,
                    "shift_and_concatenate": 2,
                    "shift_and_merge": 1,
                    "sign_extend_and_shift": 1
                },
                "LAB_080002f0": {
                    "shift_label": 1
                },
                "LZCOUNT": {
                    "leading_zeroes_count": 1
                },
                "SBORROW4": {
                    "signed_borrow4": 1
                },
                "SCARRY4": {
                    "signed_carry4": 1
                },
                "bVar7": {
                    "is_negative": 21,
                    "is_negative_or_zero": 1,
                    "is_negative_shift": 3,
                    "is_shift_negative": 2,
                    "leading_negative": 1,
                    "leading_zeros_is_negative": 1,
                    "leading_zeros_negative": 1,
                    "no_leading_zeros": 1
                },
                "bVar8": {
                    "is_equal": 1,
                    "is_leading_zero": 1,
                    "is_shift_zero": 2,
                    "is_zero": 20,
                    "is_zero_shift": 3,
                    "leading_zero": 1,
                    "leading_zeros_is_zero": 1,
                    "leading_zeros_zero": 1,
                    "only_leading_zero": 1
                },
                "bVar9": {
                    "adjustment_needed": 1,
                    "carry_bit": 1,
                    "carry_flag": 7,
                    "is_carry": 5,
                    "is_carry_overflow": 1,
                    "is_negative_overflow": 2,
                    "is_overflow": 1,
                    "is_shift_negative_or_zero": 1,
                    "is_shift_underflow": 1,
                    "is_signed": 1,
                    "is_sub_overflow": 1,
                    "leading_zeros_overflow": 2,
                    "needs_extra_shift": 1,
                    "negative_overflow": 1,
                    "overflow": 5
                },
                "iVar4": {
                    "count": 2,
                    "count_trailing_zeros": 1,
                    "leading_zero_bits": 1,
                    "leading_zeroes": 2,
                    "leading_zeros": 21,
                    "lz_count": 2,
                    "num_shifts": 1
                },
                "in_r0": {
                    "tmp_bit_mask": 1
                },
                "in_r12": {
                    "bit_padding": 1,
                    "bits_to_clear": 1,
                    "complement_shift": 1,
                    "fixed_shift": 1,
                    "mask": 2,
                    "offset": 1,
                    "remainder": 1,
                    "remaining_bits": 19,
                    "remaining_bits_mask": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shifted_one": 1
                },
                "param_1": {
                    "input": 20,
                    "input_num": 1,
                    "input_value": 8,
                    "number": 2
                },
                "uVar1": {
                    "bit_count": 5,
                    "count_leading_zeros": 2,
                    "num_ones": 1,
                    "output": 1,
                    "result": 3,
                    "shift_amount": 6,
                    "shift_count": 3,
                    "shifted_bits": 1,
                    "shifted_count": 1,
                    "shifted_value": 5,
                    "shifted_value_1": 1,
                    "shifted_value_high": 1,
                    "zero_count": 1
                },
                "uVar2": {
                    "abs_input": 15,
                    "abs_input_num": 1,
                    "abs_input_value": 1,
                    "abs_number": 2,
                    "abs_value": 2,
                    "absolute_value": 3,
                    "input_abs": 1,
                    "positive_input": 1,
                    "shifted_value_2": 1,
                    "shifted_value_low": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "temp_var1": 1
                },
                "uVar20": {
                    "output_high": 1
                },
                "uVar21": {
                    "output_low": 1
                },
                "uVar3": {
                    "bits_to_extract": 1,
                    "left_shifted": 1,
                    "negative_shift": 1,
                    "remaining_bits": 1,
                    "shift": 2,
                    "shift_amount": 16,
                    "shift_count": 1,
                    "shift_value": 2,
                    "shifted_input": 1,
                    "shifted_value": 1,
                    "shifted_value_3": 1,
                    "temp_shift": 2,
                    "temp_var2": 1
                },
                "uVar4": {
                    "count": 1,
                    "shifted_input": 1
                },
                "uVar5": {
                    "adjusted_bit_count": 2,
                    "adjusted_count": 1,
                    "adjusted_shift": 2,
                    "adjusted_shift_amount": 2,
                    "combined_shifts": 1,
                    "effective_shift": 1,
                    "extracted_bits": 1,
                    "final_shift_amount": 5,
                    "final_shift_amt": 1,
                    "full_shift_amount": 1,
                    "new_shift_amount": 1,
                    "required_bits": 1,
                    "shift_amount": 1,
                    "shift_sum": 1,
                    "shifted_amount": 2,
                    "shifted_count": 1,
                    "shifted_result": 1,
                    "temp_value": 1,
                    "total_bits": 3,
                    "total_shift": 1,
                    "trailing_zeros": 1
                },
                "uVar6": {
                    "input_msb": 1,
                    "is_negative": 1,
                    "sign_bit": 24,
                    "sign_bit_mask": 2,
                    "sign_mask": 3
                },
                "uVar7": {
                    "result_high": 1
                },
                "uVar8": {
                    "result_low": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006228"
            ],
            "code": "\nulonglong reverse_bits_and_shift_08000404(uint input)\n\n{\n  uint shift_amount;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint final_shift_amount;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shift_amount = 0;\n  leading_zeros = leading_zeroes_count(abs_input);\n  final_shift_amount = leading_zeros + 0x15;\n  carry_flag = signed_borrow4(final_shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (final_shift_amount < 0x20) {\n    carry_flag = signed_carry4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = final_shift_amount;\n    if (!is_zero && carry_flag == false) {\n      shift_amount = abs_input << final_shift_amount;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_label;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shift_amount = 0 << (shift_amount & 0xff);\n  }\nshift_label:\n  if (final_shift_amount < 0x433) {\n    return concatenate44(abs_input + (0x432 - final_shift_amount) * 0x100000 | sign_bit,shift_amount);\n  }\n  shift_amount = ~(0x432 - final_shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return concatenate44(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != signed_carry4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return concatenate44(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shift_amount >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return concatenate44(input,shift_amount >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_shift_08000404",
            "entrypoint": "0x08000404",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate44",
                "FUN_08000404": "reverse_bits_and_shift_08000404",
                "LAB_080002f0": "shift_label",
                "LZCOUNT": "leading_zeroes_count",
                "SBORROW4": "signed_borrow4",
                "SCARRY4": "signed_carry4",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "shift_amount",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "final_shift_amount",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000428": {
            "additional_data": {
                "FUN_08000428": {
                    "bit_shift_function": 1,
                    "convert_and_shift": 1,
                    "decode_and_shift": 1,
                    "reverse_bits": 19,
                    "reverse_bits_and_concatenate": 1,
                    "shift_and_mask": 1
                },
                "LZCOUNT": {
                    "leading_zeros_count": 1
                },
                "SBORROW4": {
                    "is_subtraction_borrow_overflow": 1
                },
                "SCARRY4": {
                    "is_subtraction_carry_overflow": 1
                },
                "bVar10": {
                    "b_val2": 1,
                    "b_var10": 2,
                    "bool_var3": 1,
                    "borrow": 1,
                    "carry": 3,
                    "carry_flag": 3,
                    "carry_flag3": 1,
                    "condition_2": 1,
                    "flag3": 1,
                    "is_bit_count_negative": 1,
                    "is_bit_diff_negative": 1,
                    "is_carry": 1,
                    "is_negative": 2,
                    "is_over_threshold": 1,
                    "is_overflow": 2,
                    "is_red": 1,
                    "is_shift_twelve": 1,
                    "is_shifted": 1,
                    "is_subtraction_underflow": 1,
                    "is_valid_count": 1,
                    "negative": 1,
                    "overflow": 1,
                    "shift_amount_greater_than_or_equal32": 1
                },
                "bVar8": {
                    "b_var8": 1,
                    "bool_var1": 1,
                    "carry": 2,
                    "carry_flag": 1,
                    "carry_flag1": 1,
                    "check_bit": 1,
                    "flag1": 1,
                    "greater_than32": 1,
                    "is_bit_count_zero": 1,
                    "is_bit_diff_zero": 1,
                    "is_borrow": 1,
                    "is_negative": 5,
                    "is_negative_count": 1,
                    "is_negative_shift": 1,
                    "is_shift_amount_zero": 1,
                    "is_shifted": 1,
                    "is_zero": 6,
                    "is_zero_or_negative": 1,
                    "shift_amount_less_than32": 1,
                    "shifted_neg": 1
                },
                "bVar9": {
                    "b_val1": 1,
                    "b_var9": 1,
                    "bool_var2": 1,
                    "carry_flag2": 1,
                    "condition_1": 1,
                    "equal": 1,
                    "equal32": 1,
                    "flag2": 1,
                    "flags_equal": 1,
                    "is_black": 1,
                    "is_byte_ff": 1,
                    "is_full": 1,
                    "is_full_mask": 1,
                    "is_full_red": 1,
                    "is_mask_zero": 1,
                    "is_masked": 1,
                    "is_max_value": 1,
                    "is_param4_zero": 2,
                    "is_shift_zero": 1,
                    "is_zero": 8,
                    "is_zero1": 1,
                    "is_zero_or_full_mask": 1
                },
                "concatenated": {
                    "result": 1
                },
                "iVar6": {
                    "bit_count": 6,
                    "bit_index": 1,
                    "count": 9,
                    "iteration_count": 1,
                    "leading_zeros": 3,
                    "leading_zeros_count": 1,
                    "lo_count": 1,
                    "lzcount_result": 2,
                    "num_bits": 1,
                    "pos": 1,
                    "shift_amount": 1,
                    "shift_count": 2,
                    "shifted_count": 1
                },
                "in_r12": {
                    "bit_difference": 1,
                    "bit_threshold": 1,
                    "constant": 1,
                    "inverted_bit_diff": 1,
                    "remainder": 1,
                    "remaining_bits": 11,
                    "reserved3": 1,
                    "shift": 1,
                    "shifted_input2": 1,
                    "shifted_value": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "temp_variable2": 1,
                    "var12": 1
                },
                "new_variable_name_1": {
                    "new_variable_name_1": 1
                },
                "new_variable_name_2": {
                    "new_variable_name_2": 1
                },
                "new_variable_name_n": {
                    "new_variable_name_n": 1
                },
                "param_1": {
                    "input": 25,
                    "input1": 1,
                    "input_param": 1,
                    "input_value": 3
                },
                "param_2": {
                    "input2": 1,
                    "param2": 2,
                    "placeholder1": 1,
                    "reserved1": 1,
                    "unused": 1,
                    "unused1": 1,
                    "unused_param": 3,
                    "unused_param1": 3,
                    "unused_parameter1": 1,
                    "var2": 1
                },
                "param_3": {
                    "input3": 1,
                    "param3": 2,
                    "placeholder2": 1,
                    "reserved2": 1,
                    "unused": 1,
                    "unused2": 1,
                    "unused_param": 3,
                    "unused_param2": 3,
                    "unused_parameter2": 1,
                    "var3": 1
                },
                "param_4": {
                    "bitwise_param": 1,
                    "byte_value": 1,
                    "check_value": 2,
                    "condition": 1,
                    "flag": 5,
                    "flags": 1,
                    "input4": 1,
                    "mask": 12,
                    "param4": 1,
                    "unused_param3": 3,
                    "unused_parameter3": 1,
                    "var4": 1
                },
                "uVar1": {
                    "bit31": 4,
                    "bit31_set": 1,
                    "bit31_shifted": 1,
                    "bit_31": 1,
                    "bit_shift": 1,
                    "high_bit": 1,
                    "is_negative": 1,
                    "msb_flag": 2,
                    "msb_mask": 2,
                    "shifted_flag": 1,
                    "shifted_input": 1,
                    "shifted_value": 1,
                    "sign_bit": 8,
                    "sign_extension": 2,
                    "upper_bit": 2,
                    "upper_bit_mask": 1
                },
                "uVar11": {
                    "shifted_value": 1
                },
                "uVar12": {
                    "intermediate_result": 1
                },
                "uVar13": {
                    "shift_amount": 1
                },
                "uVar14": {
                    "shifted_value": 1
                },
                "uVar15": {
                    "shift_amount": 1
                },
                "uVar16": {
                    "shifted_value": 1
                },
                "uVar17": {
                    "remainder": 1
                },
                "uVar18": {
                    "shift_amount": 1
                },
                "uVar2": {
                    "lower_bits": 1,
                    "output": 4,
                    "result": 4,
                    "result1": 1,
                    "result2": 1,
                    "result_1": 1,
                    "shifted_input": 5,
                    "shifted_value": 1,
                    "temp1": 6,
                    "temp_value": 1,
                    "temp_var1": 2,
                    "var1": 2,
                    "var7": 1
                },
                "uVar3": {
                    "bitwise_result": 1,
                    "combined_bits": 1,
                    "combined_result": 1,
                    "concatenated_result": 1,
                    "final_output": 1,
                    "flag_mask": 1,
                    "high_bits": 1,
                    "mask": 1,
                    "merged": 1,
                    "output1": 1,
                    "result": 6,
                    "result1": 4,
                    "result_2": 1,
                    "result_high": 4,
                    "result_lower": 1,
                    "result_part1": 1,
                    "result_upper_bits": 1,
                    "var2": 1,
                    "var8": 1
                },
                "uVar4": {
                    "bit_count": 1,
                    "shift": 1,
                    "shift_amount": 3,
                    "shift_amount1": 1,
                    "shift_count": 2,
                    "shift_value": 2,
                    "shifted": 2,
                    "shifted_bits": 1,
                    "shifted_flags": 1,
                    "shifted_input": 5,
                    "shifted_offset": 1,
                    "shifted_result": 1,
                    "shifted_value": 4,
                    "shifted_value2": 1,
                    "temp2": 1,
                    "var2": 1,
                    "var3": 1,
                    "var9": 1
                },
                "uVar5": {
                    "double_input_value": 1,
                    "input_shifted": 2,
                    "shifted_input": 4,
                    "shifted_input2": 1,
                    "shifted_input_copy": 1,
                    "shifted_input_with_sign": 1,
                    "shifted_mask": 1,
                    "shifted_value": 1,
                    "temp": 5,
                    "temp2": 5,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_variable1": 1,
                    "twice_input": 3,
                    "u_var5": 1,
                    "var4": 1
                },
                "uVar6": {
                    "shifted_input_copy2": 1
                },
                "uVar7": {
                    "adjusted_count": 2,
                    "bit_diff": 1,
                    "bit_shift": 1,
                    "lower_shift": 1,
                    "modified_count": 1,
                    "offset": 1,
                    "shift": 2,
                    "shift_amount": 9,
                    "shift_amount2": 1,
                    "shift_offset": 1,
                    "shift_value": 1,
                    "shifted_lzcount_result": 1,
                    "shifted_pos": 1,
                    "shifted_result": 1,
                    "temp": 2,
                    "temp_var": 1,
                    "u_var7": 1,
                    "var3": 1,
                    "var7": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "code": "\nulonglong reverse_bits_and_concatenate_08000428(uint input,undefined4 unused_param,undefined4 unused_param,uint mask)\n\n{\n  uint sign_bit;\n  uint temp1;\n  uint result;\n  uint shifted_input;\n  uint temp;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_zero;\n  bool carry_flag;\n  \n  temp = input << 1;\n  is_zero = temp == 0;\n  sign_bit = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)temp >> 3) >> 1;\n  result = sign_bit | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = temp & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if (temp == 0 || mask == 0xff000000) {\n    return CONCAT44(result,input);\n  }\n  temp1 = input;\n  temp = shifted_input;\n  if (shifted_input == 0) {\n    temp1 = 0;\n    temp = input;\n  }\n  count = leading_zeros_count(temp);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  carry_flag = is_subtraction_borrow_overflow(shift_amount,0x20);\n  shifted_input = count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    carry_flag = is_subtraction_carry_overflow(shifted_input,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_zero = count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_zero == carry_flag) {\n      temp1 = temp << (shift_amount & 0xff);\n      temp = temp >> (0xcU - count & 0xff);\n      goto LAB_080002f0;\n    }\n  }\n  if (is_zero || is_zero != carry_flag) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  temp = temp << (shifted_input & 0xff);\n  if (is_zero || is_zero != carry_flag) {\n    temp = temp | temp1 >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_zero != carry_flag) {\n    temp1 = temp1 << (shifted_input & 0xff);\n  }\nLAB_080002f0:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp + (0x380 - shift_amount) * 0x100000 | sign_bit,temp1);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if ((int)shifted_input < 0x1f) {\n    count = shifted_input - 0x13;\n    if (count != 0 && count < 0 == is_subtraction_carry_overflow(shifted_input - 0x1f,0xc)) {\n      return CONCAT44(result,temp1 >> (0x20 - (0xcU - count) & 0xff) | temp << (0xcU - count & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    shifted_input = shifted_input + 1;\n    return CONCAT44(sign_bit | temp >> (shifted_input & 0xff),\n                    temp1 >> (shifted_input & 0xff) | temp << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,temp >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_concatenate_08000428",
            "entrypoint": "0x08000428",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000428": "reverse_bits_and_concatenate_08000428",
                "LZCOUNT": "leading_zeros_count",
                "SBORROW4": "is_subtraction_borrow_overflow",
                "SCARRY4": "is_subtraction_carry_overflow",
                "bVar10": "carry_flag",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "iVar6": "count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "unused_param",
                "param_3": "unused_param",
                "param_4": "mask",
                "uVar1": "sign_bit",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "temp",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004d0": {
            "additional_data": {
                "FUN_080004d0": {
                    "calculate": 2,
                    "calculate_checksum": 2,
                    "calculate_product": 9,
                    "calculate_product_and_sum": 1,
                    "calculate_result": 13,
                    "calculate_some_value": 1,
                    "perform_calculation": 2
                },
                "bVar10": {
                    "check2": 3,
                    "cond2": 1,
                    "condition2": 3,
                    "flag2": 15,
                    "is_beyond_max": 1,
                    "is_condition2": 1,
                    "is_negative": 3,
                    "is_overflow": 1,
                    "overflow": 1,
                    "overflow_occurred": 1,
                    "temp11": 1
                },
                "bVar11": {
                    "check3": 3,
                    "cond3": 1,
                    "condition3": 3,
                    "flag3": 15,
                    "is_condition3": 1,
                    "is_negative": 4,
                    "is_negative1": 1,
                    "is_overflow": 2,
                    "temp12": 1
                },
                "bVar9": {
                    "check1": 3,
                    "cond1": 1,
                    "condition1": 3,
                    "flag1": 15,
                    "is_condition1": 1,
                    "is_zero": 6,
                    "is_zero1": 1,
                    "temp10": 1
                },
                "iVar5": {
                    "i_var": 1,
                    "index": 1,
                    "shift": 1,
                    "sum": 7,
                    "sum_of_multipliers": 1,
                    "temp3": 12,
                    "temp5": 6,
                    "temp_value3": 1,
                    "temp_var4": 1
                },
                "lVar2": {
                    "partial_sum": 1,
                    "product_high": 2,
                    "result": 1,
                    "result2": 12,
                    "result_high": 1,
                    "temp": 4,
                    "temp2": 6,
                    "temp_product": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_var": 1
                },
                "param_1": {
                    "input1": 21,
                    "input_1": 1,
                    "input_param": 1,
                    "input_value1": 1,
                    "input_var1": 1,
                    "num1": 2,
                    "value1": 3,
                    "value_1": 1
                },
                "param_2": {
                    "input2": 21,
                    "input_2": 1,
                    "input_value2": 1,
                    "input_var2": 1,
                    "num1_upper": 1,
                    "num2": 1,
                    "some_value": 1,
                    "value2": 3,
                    "value_2": 1
                },
                "param_3": {
                    "input3": 19,
                    "input_value3": 1,
                    "input_var3": 1,
                    "multiplier_1": 1,
                    "num2": 1,
                    "num3": 1,
                    "operand1": 1,
                    "other_value": 1,
                    "temp_param": 1,
                    "value3": 3,
                    "value_3": 1
                },
                "param_4": {
                    "additional_value": 1,
                    "input4": 19,
                    "input_value4": 1,
                    "input_var4": 1,
                    "multiplier_2": 1,
                    "num2_upper": 1,
                    "num4": 1,
                    "operand2": 1,
                    "updated_param4": 1,
                    "value4": 3,
                    "value_4": 1
                },
                "reverse_and_check_bits_080006ac": {
                    "reverse_and_check_bits": 1,
                    "reverse_bits_func": 1
                },
                "uVar1": {
                    "lower_product": 1,
                    "partial_product": 1,
                    "product": 2,
                    "product_low": 2,
                    "result": 3,
                    "result1": 13,
                    "result_high": 1,
                    "result_low": 2,
                    "temp1": 6
                },
                "uVar12": {
                    "combined_input": 9,
                    "combined_input_params": 1,
                    "combined_inputs": 2,
                    "combined_values": 1,
                    "concat_result": 1,
                    "concat_values": 1,
                    "concat_variables": 1,
                    "concatenated": 1,
                    "concatenated_input": 1,
                    "merged": 1,
                    "num1_concat_num2": 1,
                    "result": 5,
                    "temp13": 1,
                    "temp6": 1,
                    "temp8": 3,
                    "temp_result": 1
                },
                "uVar3": {
                    "bit_mask1": 1,
                    "mask1": 1,
                    "multiplier_low": 1,
                    "num1_lower": 1,
                    "partial_product_high": 1,
                    "shifted_input2": 1,
                    "temp1": 16,
                    "temp3": 6,
                    "temp_high": 1,
                    "temp_value1": 1,
                    "temp_var2": 1
                },
                "uVar4": {
                    "bit_mask2": 1,
                    "mask2": 1,
                    "multiplier_high": 1,
                    "num1_upper_bits": 1,
                    "partial_sum_high": 1,
                    "shifted_input1": 1,
                    "temp2": 16,
                    "temp4": 6,
                    "temp_2": 1,
                    "temp_value2": 1,
                    "temp_var3": 1
                },
                "uVar6": {
                    "diff1": 1,
                    "difference": 1,
                    "remainder": 1,
                    "subtracted_sum": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 12,
                    "temp6": 6,
                    "temp_1": 1,
                    "temp_3": 1,
                    "temp_value4": 1,
                    "temp_var5": 1
                },
                "uVar7": {
                    "carry": 1,
                    "dividend": 1,
                    "max_value": 1,
                    "multiplier": 1,
                    "num2_upper_bits": 1,
                    "result1": 1,
                    "result_low": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 6,
                    "temp6": 7,
                    "temp8": 6,
                    "temp_2": 1,
                    "temp_value6": 1,
                    "temp_var7": 1
                },
                "uVar8": {
                    "carry": 1,
                    "product_high": 1,
                    "result2": 1,
                    "result_low": 1,
                    "temp3": 2,
                    "temp5": 1,
                    "temp6": 6,
                    "temp7": 8,
                    "temp9": 6,
                    "temp_5": 1,
                    "temp_value7": 1,
                    "temp_var": 1,
                    "temp_var8": 1
                },
                "unaff_r5": {
                    "bit_mask3": 1,
                    "combined_multiplier": 1,
                    "diff2": 1,
                    "sum_high": 1,
                    "temp4": 2,
                    "temp5": 9,
                    "temp7": 6,
                    "temp_4": 1,
                    "temp_value5": 1,
                    "temp_var6": 1
                }
            },
            "called": [
                "FUN_080006ac"
            ],
            "calling": [
                "FUN_080071c0",
                "FUN_0800411c",
                "FUN_08005900",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08006d68",
                "FUN_08003330",
                "FUN_08005c70"
            ],
            "code": "\nulonglong calculate_result_080004d0(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = reverse_bits_func();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_result_080004d0",
            "entrypoint": "0x080004d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004d0": "calculate_result_080004d0",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_and_check_bits_080006ac": "reverse_bits_func",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080006ac": {
            "additional_data": {
                "CONCAT44": {
                    "combine_values": 1
                },
                "FUN_080006ac": {
                    "bitwise_operation": 1,
                    "calculate_binary_operation": 1,
                    "calculate_bitwise_result": 1,
                    "calculate_checksum": 1,
                    "calculate_hash": 1,
                    "calculate_output": 1,
                    "calculate_parity_bit": 1,
                    "calculate_result": 2,
                    "calculate_shifted_value": 1,
                    "convert_to_float": 1,
                    "extract_bit_sequence": 2,
                    "extract_bits": 1,
                    "extract_bitwise_flag": 1,
                    "extract_bitwise_operation": 1,
                    "perform_operation": 1,
                    "process_params": 1,
                    "reverse_and_check_bits": 1,
                    "reverse_and_check_conditions": 1,
                    "reverse_and_concat": 1,
                    "reverse_and_convert": 1,
                    "reverse_binary_numbers": 1,
                    "reverse_bits": 5
                },
                "bVar4": {
                    "bool_flag": 1,
                    "check": 2,
                    "flag": 2,
                    "is_zero": 22,
                    "is_zero_input": 1,
                    "temp6": 1
                },
                "in_r12": {
                    "bit5": 2,
                    "bit_5": 1,
                    "bit_group": 1,
                    "constant": 2,
                    "constant_value": 2,
                    "in_r12": 1,
                    "in_register_12": 1,
                    "mask": 2,
                    "temp2": 6,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_2": 4,
                    "temp_5": 3,
                    "temp_param_2": 1,
                    "var2": 1
                },
                "param_1": {
                    "first_operand": 1,
                    "input1": 15,
                    "input_1": 10,
                    "input_value": 1,
                    "input_value1": 1,
                    "num1": 1,
                    "result2": 1
                },
                "param_2": {
                    "input2": 15,
                    "input_2": 10,
                    "input_value2": 1,
                    "num2": 1,
                    "result3": 1,
                    "second_operand": 1,
                    "shifted_value": 1
                },
                "param_3": {
                    "bitwise_value": 1,
                    "input3": 14,
                    "input_3": 10,
                    "input_value3": 1,
                    "num3": 1,
                    "output2": 1,
                    "result4": 1,
                    "third_operand": 1
                },
                "param_4": {
                    "fourth_operand": 1,
                    "input4": 14,
                    "input_4": 10,
                    "input_value4": 1,
                    "modified_value": 1,
                    "num4": 1,
                    "output3": 1,
                    "result5": 1
                },
                "uVar1": {
                    "bit1": 8,
                    "bit_1": 1,
                    "bit_32_1": 1,
                    "bit_check1": 1,
                    "result_1": 1,
                    "shifted_input1": 2,
                    "temp1": 3,
                    "temp3": 3,
                    "temp_1": 2,
                    "temp_2": 1,
                    "temp_3": 2,
                    "temp_4": 1,
                    "temp_5": 1,
                    "temp_var_1": 1,
                    "xor_result": 1
                },
                "uVar2": {
                    "bit2": 5,
                    "bit3": 2,
                    "bit_3": 1,
                    "bit_32_2": 1,
                    "masked_input4": 1,
                    "result2": 1,
                    "shifted_bits": 1,
                    "shifted_input_4": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 2,
                    "temp4": 3,
                    "temp_3": 5,
                    "temp_4": 2,
                    "temp_var_2": 1
                },
                "uVar3": {
                    "bit3": 1,
                    "bit4": 1,
                    "bit_32_3": 1,
                    "bit_4": 1,
                    "output1": 1,
                    "result": 3,
                    "result1": 2,
                    "result_2": 1,
                    "shifted_input2": 1,
                    "shifted_value": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_4": 4,
                    "temp_5": 3,
                    "temp_var_3": 1
                },
                "uVar4": {
                    "bit_6": 1
                },
                "uVar5": {
                    "temp4": 1,
                    "temp_value1": 1
                },
                "uVar6": {
                    "temp_value2": 1
                },
                "unaff_r4": {
                    "bit2": 2,
                    "bit4": 1,
                    "bit_2": 1,
                    "bit_check2": 1,
                    "temp": 1,
                    "temp1": 8,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_1": 6,
                    "temp_2": 2,
                    "temp_param_1": 1,
                    "temp_value1": 1,
                    "unaff_r4": 1,
                    "unaffected_r4": 1,
                    "var1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080004d0"
            ],
            "code": "\nulonglong reverse_and_check_bits_080006ac(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint temp_4;\n  uint temp2;\n  bool is_zero;\n  \n  bit2 = temp2 & input4 >> 0x14;\n  if (temp1 != temp2 && bit2 != temp2) {\n    is_zero = (input1 | input2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input3 | input4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      temp_4 = input2 & 0x80000000;\n      do {\n        bit1 = input1 & 0x80000000;\n        input1 = input1 << 1;\n        input2 = input2 * 2 + (uint)(bit1 != 0);\n      } while ((input2 & 0x100000) == 0);\n      input2 = input2 | temp_4;\n      if (bit2 != 0) {\n        return combine_values(input2,input1);\n      }\n    }\n    do {\n      bit2 = input3 & 0x80000000;\n      input3 = input3 << 1;\n      input4 = input4 * 2 + (uint)(bit2 != 0);\n    } while ((input4 & 0x100000) == 0);\n    return combine_values(input2,input1);\n  }\n  is_zero = (input1 | input2 << 1) == 0;\n  if (is_zero) {\n    input2 = input4;\n    input1 = input3;\n  }\n  if (!is_zero) {\n    is_zero = (input3 | input4 << 1) == 0;\n  }\n  temp_4 = input2;\n  if (((!is_zero) && ((temp1 != temp2 || ((input1 | input2 << 0xc) == 0)))) &&\n     ((bit2 != temp2 || (input1 = input3, temp_4 = input4, (input3 | input4 << 0xc) == 0)))) {\n    return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return combine_values(temp_4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_and_check_bits_080006ac",
            "entrypoint": "0x080006ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_080006ac": "reverse_and_check_bits_080006ac",
                "bVar4": "is_zero",
                "in_r12": "temp2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "temp_4",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000724": {
            "additional_data": {
                "FUN_08000724": {
                    "calculate": 1,
                    "calculate_and_combine_bits": 1,
                    "calculate_bitwise_operation": 1,
                    "calculate_double": 1,
                    "calculate_double_precision": 3,
                    "calculate_double_precision_float": 1,
                    "calculate_float": 6,
                    "calculate_float_from_bits": 1,
                    "calculate_float_from_parameters": 1,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_value": 2,
                    "calculate_integer": 1,
                    "calculate_reverse_bits": 1,
                    "perform_calculation": 1,
                    "reverse_bits_08000724": 1
                },
                "bVar14": {
                    "boolean_check1": 1,
                    "check1": 2,
                    "condition1": 1,
                    "condition_1": 1,
                    "flag1": 8,
                    "flag_1": 2,
                    "is_condition1": 1,
                    "is_condition_true1": 1,
                    "is_special_case": 1,
                    "is_zero": 10,
                    "is_zero_flag": 1,
                    "is_zero_flag1": 1,
                    "var1": 1
                },
                "bVar15": {
                    "b_var15": 1,
                    "boolean_check2": 1,
                    "check2": 2,
                    "condition2": 1,
                    "condition_2": 1,
                    "flag2": 8,
                    "flag_2": 2,
                    "is_carry": 1,
                    "is_condition2": 1,
                    "is_condition_true2": 1,
                    "is_equal": 7,
                    "is_negative": 1,
                    "is_zero": 2,
                    "is_zero_flag2": 1,
                    "var2": 1
                },
                "bVar16": {
                    "b_var16": 1,
                    "boolean_check3": 1,
                    "check3": 2,
                    "condition_3": 1,
                    "error_condition": 1,
                    "flag3": 8,
                    "flag_3": 2,
                    "is_carry": 4,
                    "is_carry_flag1": 1,
                    "is_condition3": 1,
                    "is_condition_true3": 1,
                    "is_negative": 2,
                    "is_overflow": 2,
                    "overflow": 2,
                    "temp_flag": 1,
                    "var3": 1
                },
                "bVar17": {
                    "boolean_check4": 1,
                    "is_borrow": 1,
                    "is_overflow": 1
                },
                "iVar8": {
                    "difference": 13,
                    "exponent_diff_result": 1,
                    "exponent_difference": 2,
                    "exponent_difference_adjusted": 1,
                    "result8": 1,
                    "temp8": 9,
                    "temp_8": 1,
                    "temp_var_8": 1,
                    "var_difference": 1
                },
                "param_1": {
                    "bit1": 1,
                    "exponent": 2,
                    "exponent_bits": 1,
                    "exponent_part": 1,
                    "input1": 8,
                    "input_exponent": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_part1": 1,
                    "input_sign": 1,
                    "input_value_1": 1,
                    "mantissa": 1,
                    "num1": 1,
                    "parameter1": 1,
                    "sign": 1,
                    "sign_and_exponent": 1,
                    "sign_and_exponent_bits": 1,
                    "sign_input": 1,
                    "significant_bits": 1,
                    "value1": 3,
                    "var1": 1
                },
                "param_2": {
                    "bit2": 1,
                    "combined": 1,
                    "combined_parts": 1,
                    "exponent": 1,
                    "exponent_bits": 1,
                    "exponent_input": 1,
                    "fraction_bits": 1,
                    "input2": 8,
                    "input_exponent": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_part2": 1,
                    "input_value": 1,
                    "input_value_2": 1,
                    "mantissa1": 1,
                    "num2": 1,
                    "parameter2": 1,
                    "significand": 1,
                    "significand_bits": 1,
                    "significand_high": 1,
                    "value2": 3,
                    "var2": 1
                },
                "param_3": {
                    "bit3": 1,
                    "control_and_exponent": 1,
                    "fraction_input": 1,
                    "input3": 8,
                    "input_1": 1,
                    "input_mantissa_high": 1,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_part3": 1,
                    "input_value_3": 1,
                    "mantissa2": 1,
                    "mantissa_high": 1,
                    "mantissa_part": 1,
                    "num3": 1,
                    "param1": 1,
                    "param3": 1,
                    "param_bits1": 1,
                    "parameter3": 1,
                    "significand_high_bit": 1,
                    "significand_low": 1,
                    "value3": 3,
                    "var3": 1
                },
                "param_4": {
                    "bit4": 1,
                    "control": 1,
                    "input4": 8,
                    "input_2": 1,
                    "input_mantissa_low": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_part4": 1,
                    "input_value_4": 1,
                    "mantissa3": 1,
                    "mantissa_low": 1,
                    "num4": 1,
                    "param2": 1,
                    "param4": 1,
                    "param_bits2": 1,
                    "parameter4": 1,
                    "sign_and_fraction": 1,
                    "sign_bit": 1,
                    "sign_part": 1,
                    "sign_result": 1,
                    "value4": 3,
                    "var4": 1
                },
                "uVar1": {
                    "carry": 1,
                    "exponent1": 2,
                    "exponent_diff": 2,
                    "exponent_difference": 1,
                    "mask": 1,
                    "mask1": 1,
                    "mask_1": 1,
                    "output_fraction": 1,
                    "result1": 2,
                    "shift_bits": 1,
                    "shifted_input": 1,
                    "temp1": 14,
                    "temp_1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1
                },
                "uVar10": {
                    "bitwise_result": 1,
                    "calc_2": 1,
                    "exponent2": 1,
                    "exponent_bits": 1,
                    "normalized_exponent_result": 1,
                    "normalized_fraction": 1,
                    "normalized_mantissa1": 1,
                    "result10": 1,
                    "result2": 1,
                    "result3": 1,
                    "shifted_significand": 1,
                    "sum2": 1,
                    "temp10": 5,
                    "temp11": 4,
                    "temp2": 1,
                    "temp5": 1,
                    "temp9": 1,
                    "temp_7": 1,
                    "temp_fraction1": 1,
                    "temp_var_11": 1,
                    "tmp2": 1,
                    "u_var10": 1,
                    "u_var11": 1,
                    "var2": 1
                },
                "uVar11": {
                    "calc_3": 1,
                    "fraction_result_shifted": 1,
                    "mantissa_result": 1,
                    "normalized_mantissa2": 1,
                    "output": 1,
                    "product": 1,
                    "quotient_remainder": 1,
                    "result": 1,
                    "result1": 2,
                    "result11": 1,
                    "result3": 1,
                    "result4": 1,
                    "significand_bits": 1,
                    "temp10": 1,
                    "temp11": 5,
                    "temp12": 4,
                    "temp3": 1,
                    "temp_8": 1,
                    "temp_fraction2": 1,
                    "temp_var_12": 1,
                    "tmp3": 1,
                    "u_var11": 1,
                    "var3": 1
                },
                "uVar12": {
                    "calc_4": 1,
                    "difference": 1,
                    "mantissa2": 1,
                    "mantissa_difference": 2,
                    "remainder": 1,
                    "result12": 1,
                    "result2": 2,
                    "result4": 1,
                    "result5": 1,
                    "rounding_error": 1,
                    "shifted_bits": 1,
                    "temp11": 1,
                    "temp12": 4,
                    "temp13": 4,
                    "temp4": 1,
                    "temp_9": 1,
                    "temp_difference": 1,
                    "temp_fraction3": 1,
                    "temp_shifted_output": 1,
                    "temp_var_13": 1,
                    "tmp4": 1,
                    "u_var12": 1,
                    "var4": 1
                },
                "uVar13": {
                    "all_ones": 1,
                    "calc_5": 1,
                    "carry_flag": 1,
                    "combined_parts_adjusted": 1,
                    "constant": 1,
                    "constant1": 1,
                    "flags": 1,
                    "mask": 1,
                    "maximum_exponent": 1,
                    "result": 1,
                    "result13": 1,
                    "result5": 1,
                    "result6": 1,
                    "temp12": 1,
                    "temp13": 3,
                    "temp14": 4,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_10": 1,
                    "temp_fraction4": 1,
                    "temp_var_14": 1,
                    "tmp5": 1,
                    "u_var13": 1,
                    "value": 1,
                    "var5": 1,
                    "zero_check3": 1
                },
                "uVar17": {
                    "combined_params": 1,
                    "combined_var": 1,
                    "concatenated_param12": 1,
                    "result": 5,
                    "result14": 1,
                    "return_value": 1,
                    "reverse_bits_result": 1,
                    "reversed_bits": 12,
                    "reversed_result": 1,
                    "reversed_value": 3
                },
                "uVar18": {
                    "exponent_mask": 1
                },
                "uVar19": {
                    "fraction_mask": 1
                },
                "uVar2": {
                    "exponent2": 2,
                    "is_exponent_zero": 1,
                    "mantissa_diff": 1,
                    "mask2": 1,
                    "mask_2": 1,
                    "output_exponent": 1,
                    "result2": 2,
                    "shift": 1,
                    "shifted_output": 1,
                    "temp": 1,
                    "temp2": 14,
                    "temp_2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "u_var2": 1,
                    "zero_check1": 1
                },
                "uVar20": {
                    "fraction_shifted": 1
                },
                "uVar21": {
                    "normalization_mask": 1,
                    "quotient": 1
                },
                "uVar22": {
                    "dividend": 1,
                    "normalize_4": 1
                },
                "uVar23": {
                    "bit_shift_count": 1,
                    "normalize_2": 1
                },
                "uVar24": {
                    "divisor": 1,
                    "normalize_1": 1
                },
                "uVar25": {
                    "normalize_3": 1,
                    "temp_dividend": 1
                },
                "uVar26": {
                    "shift_bits": 1,
                    "temp_quotient": 1
                },
                "uVar27": {
                    "normalize_and_round": 1
                },
                "uVar28": {
                    "rounded_normilized_fraction": 1
                },
                "uVar29": {
                    "rounded_fraction": 1
                },
                "uVar3": {
                    "exponent3": 1,
                    "fp_bits1": 1,
                    "fraction": 1,
                    "fraction_shift": 1,
                    "high_bit": 1,
                    "mantissa1": 1,
                    "normalized_mantissa1_adjusted": 1,
                    "result3": 2,
                    "shifted_exponent1": 1,
                    "temp1": 2,
                    "temp3": 13,
                    "temp_1": 1,
                    "temp_3": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "u_var3": 2
                },
                "uVar30": {
                    "fraction_result_shifted_rounded": 1
                },
                "uVar31": {
                    "exponent_overflowed": 1
                },
                "uVar32": {
                    "calculate_rounding_bit": 1
                },
                "uVar33": {
                    "mantissa_overflowed": 1
                },
                "uVar34": {
                    "result_exponent": 1
                },
                "uVar35": {
                    "result_fraction": 1
                },
                "uVar36": {
                    "apply_nan": 1
                },
                "uVar37": {
                    "apply_infinity": 1
                },
                "uVar38": {
                    "apply_normalized": 1
                },
                "uVar39": {
                    "rounding_mask": 1
                },
                "uVar4": {
                    "carry_or": 1,
                    "exponent4": 1,
                    "mantissa2": 1,
                    "normalized_fraction": 1,
                    "normalized_mantissa2_adjusted": 1,
                    "result4": 2,
                    "shifted_temp2": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp4": 13,
                    "temp_2": 1,
                    "temp_4": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1,
                    "u_var4": 2,
                    "zero_check2": 1
                },
                "uVar5": {
                    "addend": 1,
                    "carry": 2,
                    "exponent_difference_check1": 1,
                    "normalized_fraction_bit": 1,
                    "result5": 2,
                    "shifted_temp1": 1,
                    "sign_bits": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp5": 13,
                    "temp_3": 1,
                    "temp_5": 1,
                    "temp_var5": 1,
                    "temp_var_5": 1,
                    "u_var5": 2
                },
                "uVar6": {
                    "add_to_fraction": 1,
                    "exponent_difference_check2": 1,
                    "mantissa_adjustment": 1,
                    "quotient": 1,
                    "result6": 2,
                    "shift_count": 1,
                    "shifted_exponent2": 1,
                    "shifted_fraction": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp6": 13,
                    "temp_4": 1,
                    "temp_6": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "u_var6": 2
                },
                "uVar7": {
                    "exponent1": 1,
                    "flag1": 1,
                    "fraction_result": 1,
                    "result": 1,
                    "result7": 2,
                    "result_sign": 2,
                    "sign_and_exponent_bits": 1,
                    "sign_bit_mask": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp7": 13,
                    "temp_5": 1,
                    "temp_7": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1,
                    "u_var7": 2
                },
                "uVar9": {
                    "calc_1": 1,
                    "diff": 1,
                    "exponent_difference": 1,
                    "exponent_sum": 1,
                    "normalized_exponent": 1,
                    "numerator": 1,
                    "result1": 2,
                    "result9": 1,
                    "result_exponent": 1,
                    "rounded_output": 1,
                    "shifted_difference": 1,
                    "shifted_exponent": 1,
                    "sum1": 1,
                    "sum_of_exponents": 1,
                    "temp1": 1,
                    "temp4": 1,
                    "temp8": 2,
                    "temp9": 8,
                    "temp_6": 1,
                    "temp_var_9": 1,
                    "u_var9": 1,
                    "var1": 1
                },
                "unaff_r5": {
                    "exponent_input2": 1,
                    "fraction_difference": 1,
                    "result2": 1,
                    "shifted_difference": 1,
                    "significand_high_unaff": 1,
                    "temp10": 4,
                    "temp9": 1,
                    "temp_var_10": 1,
                    "tmp1": 1,
                    "unaff_r5": 3
                }
            },
            "called": [
                "FUN_08000892"
            ],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900",
                "FUN_08006228",
                "FUN_08006c0c",
                "FUN_08006d68",
                "FUN_08006070",
                "FUN_08003330",
                "FUN_08005c70"
            ],
            "code": "\nulonglong calculate_floating_point_value_08000724(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp10;\n  uint temp11;\n  uint temp13;\n  uint temp14;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  undefined8 reversed_bits;\n  \n  reversed_bits = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  is_zero = temp7 == 0;\n  if (!is_zero) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    is_zero = temp10 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp7 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp10 == 0x7ff;\n  }\n  if (is_zero) {\n    reversed_bits = reverse_bits_08000892();\n  }\n  temp9 = (uint)((ulonglong)reversed_bits >> 0x20);\n  temp11 = (uint)reversed_bits;\n  difference = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(difference,temp14 >> 1);\n    temp9 = difference + (temp14 >> 1);\n    is_zero = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && is_zero == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      is_zero = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && is_zero == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && is_zero == flag3) {\n      return CONCAT44(temp7,temp11);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    is_zero = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp10 = (temp9 << 0xc) >> 4 | 0x10000000 | temp11 >> 0x18;\n    temp11 = temp11 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    is_zero = temp3 <= temp10;\n    if (temp10 == temp3) {\n      is_zero = temp14 <= temp11;\n    }\n    difference = difference + (uint)is_zero;\n    temp9 = difference + 0x3fd;\n    if (is_zero == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp11 - temp14;\n    temp10 = (temp10 - temp3) - (uint)(temp11 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp11 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      is_zero = temp1 <= temp13;\n      if (temp4 < temp10 || temp10 - temp4 < (uint)is_zero) {\n        temp13 = temp13 - temp1;\n        temp11 = temp11 | temp3;\n        temp10 = (temp10 - temp4) - (uint)!is_zero;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp10 - temp5 < (uint)flag2;\n      temp14 = temp10;\n      if (temp5 < temp10 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp10 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp10 || is_zero) {\n        temp11 = temp11 | temp3 >> 1;\n      }\n      temp10 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      is_zero = temp14 - temp10 < (uint)flag2;\n      temp5 = temp14;\n      if (temp10 < temp14 || is_zero) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp10) - (uint)!flag2;\n      }\n      if (temp10 < temp14 || is_zero) {\n        temp11 = temp11 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp10 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp5 - temp6 < (uint)flag2;\n      temp10 = temp5;\n      if (temp6 < temp5 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp10 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || is_zero) {\n        temp11 = temp11 | temp3 >> 3;\n      }\n      temp14 = temp10 | temp13;\n      if (temp14 == 0) break;\n      temp10 = temp10 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_08000842;\n        temp7 = temp7 | temp11;\n        temp11 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp11;\n      temp11 = 0;\n    }\nLAB_08000842:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    is_zero = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !is_zero) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      is_zero = temp4 == 0x700;\n    }\n    if (!flag3 || is_zero) {\n      is_zero = temp6 <= temp10;\n      if (temp10 == temp6) {\n        is_zero = temp1 <= temp13;\n      }\n      if (temp10 == temp6 && temp13 == temp1) {\n        is_zero = (temp11 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp11,(uint)is_zero),temp11 + is_zero);\n    }\n  }\n  if (!is_zero && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  is_zero = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || is_zero != flag3) {\n    temp11 = 0;\n  }\n  if (flag2 || is_zero != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || is_zero != flag3) {\n    return CONCAT44(temp7,temp11);\n  }\n  temp3 = -temp9;\n  temp10 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp11 >> (temp10 & 0xff) | temp7 << (0x20 - temp10 & 0xff);\n    temp9 = (temp7 >> (temp10 & 0xff) & ~((temp7 & 0x80000000) >> (temp10 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp11 << (0x20 - temp10 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp10,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp11 << (temp9 & 0xff);\n    temp11 = temp11 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp11 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp11,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp10 = temp11 << (temp9 + 0x20 & 0xff);\n  temp11 = temp11 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp11 + -((int)temp10 >> 0x1f);\n  if ((temp14 | temp10 << 1) == 0) {\n    temp9 = temp9 & ~(temp10 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp11,-((int)temp10 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_value_08000724",
            "entrypoint": "0x08000724",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000724": "calculate_floating_point_value_08000724",
                "bVar14": "is_zero",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "reversed_bits",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000892": {
            "additional_data": {
                "FUN_08000892": {
                    "calculate_bitwise_operation": 1,
                    "calculate_double_precision_value": 2,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_bits": 1,
                    "calculate_floating_point_number": 1,
                    "calculate_value": 1,
                    "compute_double_from_uints": 1,
                    "convert_float": 1,
                    "convert_to64_bit_float": 1,
                    "convert_to_double": 1,
                    "decode_and_combine": 1,
                    "decode_and_convert_float": 1,
                    "decompile_and_improve": 1,
                    "extract_and_shift_bits": 1,
                    "extract_bit": 1,
                    "extract_sign_bit": 1,
                    "extracted_binary_function": 1,
                    "reverse_binary_flags": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bits": 5,
                    "reverse_bitwise_operation": 1
                },
                "bVar4": {
                    "boolean_check": 1,
                    "check": 1,
                    "check_result": 2,
                    "condition_flag": 1,
                    "flag": 4,
                    "is_zero": 19,
                    "temp6": 1,
                    "temp_var_4": 1,
                    "temp_variable_4": 1
                },
                "in_r12": {
                    "comparison2": 1,
                    "constant": 2,
                    "constant_2": 2,
                    "constant_r12": 1,
                    "constant_value": 2,
                    "exponent_bits_mask": 1,
                    "in_r12": 2,
                    "in_register": 1,
                    "input_register_12": 1,
                    "mask": 5,
                    "register12": 1,
                    "result2": 1,
                    "temp2": 4,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_register_2": 1,
                    "temp_var5": 2,
                    "tmp5": 1,
                    "var4": 1
                },
                "param_1": {
                    "exponent_bits": 1,
                    "flag_1": 1,
                    "input1": 16,
                    "input_1": 7,
                    "input_a": 1,
                    "input_parameter1": 1,
                    "num1": 1,
                    "sign_bit": 1,
                    "value_1": 2
                },
                "param_2": {
                    "exponent_part": 1,
                    "flag_2": 1,
                    "input2": 16,
                    "input_2": 7,
                    "input_b": 1,
                    "input_parameter2": 1,
                    "mantissa_bits": 1,
                    "num2": 1,
                    "value_2": 2
                },
                "param_3": {
                    "exponent_bits2": 1,
                    "flag_3": 1,
                    "fraction_part": 1,
                    "input3": 16,
                    "input_3": 7,
                    "input_c": 1,
                    "input_parameter3": 1,
                    "num3": 1,
                    "value_3": 2
                },
                "param_4": {
                    "extra_bits": 1,
                    "flag_4": 1,
                    "input4": 16,
                    "input_4": 7,
                    "input_d": 1,
                    "input_parameter4": 1,
                    "mantissa_bits2": 1,
                    "num4": 1,
                    "value_4": 2
                },
                "uVar1": {
                    "bit1": 7,
                    "bit1_var": 1,
                    "bit_1": 5,
                    "bit_31_input_1_shifted_left": 1,
                    "bit_a": 1,
                    "bit_check1": 3,
                    "bit_input1": 1,
                    "param1_msb": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp_3": 1,
                    "temp_var1": 2,
                    "temp_var_1": 1,
                    "temp_variable_1": 1,
                    "tmp2": 1
                },
                "uVar2": {
                    "bit2": 5,
                    "bit2_var": 1,
                    "bit3": 1,
                    "bit_2": 3,
                    "bit_20_param_4_shifted_right": 1,
                    "bit_b": 1,
                    "bit_check2": 3,
                    "bit_input2": 1,
                    "masked_input_4": 1,
                    "shifted_bit_1": 1,
                    "shifted_extra_bits": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp_4": 1,
                    "temp_var3": 2,
                    "temp_var_2": 1,
                    "temp_variable_2": 1,
                    "tmp3": 1,
                    "var2": 1
                },
                "uVar3": {
                    "bit3": 3,
                    "bit3_var": 1,
                    "bit_3": 2,
                    "bit_c": 1,
                    "bit_check3": 1,
                    "bit_input3": 1,
                    "result": 2,
                    "result1": 1,
                    "temp": 2,
                    "temp1": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_5": 1,
                    "temp_input_2": 1,
                    "temp_value": 1,
                    "temp_var4": 2,
                    "temp_var_3": 1,
                    "temp_variable_3": 1,
                    "tmp4": 1,
                    "updated_exponent_part": 1,
                    "updated_input2": 1,
                    "var3": 1
                },
                "unaff_r4": {
                    "bit2": 1,
                    "bit_2": 1,
                    "comparison1": 1,
                    "comparison_input_2": 1,
                    "condition": 1,
                    "constant": 1,
                    "constant_1": 1,
                    "exponent_bits_constant": 1,
                    "flag": 1,
                    "input5": 1,
                    "original_sign_bit": 1,
                    "reference": 1,
                    "register_value_1": 1,
                    "result": 1,
                    "temp1": 5,
                    "temp_1": 1,
                    "temp_register_1": 1,
                    "temp_var2": 2,
                    "temporary_1": 1,
                    "tmp1": 1,
                    "unaff_r4": 1,
                    "unaffected_r4": 2,
                    "unaffected_register4": 1,
                    "unused_var_r4": 1,
                    "var1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08000724"
            ],
            "code": "\nulonglong reverse_bits_08000892(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint bit3;\n  uint mask;\n  bool is_zero;\n  \n  bit2 = mask & input4 >> 0x14;\n  bit3 = input2;\n  if (temp1 != mask || bit2 != mask) {\n    if (temp1 == mask) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit3 = input4, bit2 != mask)\n         ) {\nLAB_08000704:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == mask) {\n      input1 = input3;\n      bit3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_080006c8:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          bit3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08000704;\n      if ((input3 | input4 << 1) != 0) goto LAB_080006c8;\n    }\n  }\n  return CONCAT44(bit3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_08000892",
            "entrypoint": "0x08000892",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000892": "reverse_bits_08000892",
                "bVar4": "is_zero",
                "in_r12": "mask",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "bit3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000904": {
            "additional_data": {
                "0": {
                    "false": 1
                },
                "1": {
                    "true": 1
                },
                "FUN_08000904": {
                    "check_conditions": 1,
                    "check_equality": 12,
                    "check_equality_and_bounds": 1,
                    "check_equality_and_comparison": 1,
                    "check_equality_and_conditions": 1,
                    "check_inputs": 1,
                    "check_parameters": 7,
                    "check_parameters_equal": 1,
                    "check_parameters_equality": 2,
                    "check_params_equality": 2,
                    "compare_params": 1,
                    "compare_values": 1
                },
                "bVar2": {
                    "are_all_zero": 1,
                    "are_inputs_zero": 1,
                    "are_params_zero": 1,
                    "check1": 1,
                    "is_cond1": 1,
                    "is_equal": 3,
                    "is_equal_or_zero": 1,
                    "is_first_pair_equal": 1,
                    "is_num_zero": 1,
                    "is_value_zero": 1,
                    "is_zero": 17,
                    "is_zero_ab": 1,
                    "is_zero_equality": 1
                },
                "bVar3": {
                    "check2": 1,
                    "is_comparing": 1,
                    "is_cond2": 1,
                    "is_greater": 2,
                    "is_greater_or_equal": 1,
                    "is_greater_than_value": 1,
                    "is_greater_than_zero": 1,
                    "is_less_or_equal": 4,
                    "is_less_than": 1,
                    "is_less_than_or_equal": 1,
                    "is_neg_or_greater": 1,
                    "is_negative": 8,
                    "is_negative_greater_than": 1,
                    "is_param4_less_than_param2": 1,
                    "is_positive": 1,
                    "is_positive_and_less_than_or_equal": 1,
                    "is_result_positive": 1,
                    "is_result_valid": 1,
                    "is_second_pair_equal": 1,
                    "is_smaller": 1
                },
                "param_1": {
                    "a": 5,
                    "first_value": 2,
                    "input1": 2,
                    "input_1": 1,
                    "num1": 1,
                    "shifted_input1": 1,
                    "val1": 1,
                    "value1": 14,
                    "value_1": 3,
                    "x1": 1
                },
                "param_2": {
                    "b": 5,
                    "input2": 1,
                    "input_2": 1,
                    "num2": 1,
                    "second_value": 2,
                    "shifted_input2": 1,
                    "shifted_param2": 1,
                    "val2": 1,
                    "value2": 14,
                    "value_2": 3,
                    "x2": 1
                },
                "param_3": {
                    "c": 5,
                    "input3": 2,
                    "input_3": 1,
                    "num3": 1,
                    "shifted_input3": 1,
                    "third_value": 2,
                    "val3": 1,
                    "value3": 14,
                    "value_3": 3,
                    "x3": 1
                },
                "param_4": {
                    "d": 5,
                    "fourth_value": 2,
                    "input4": 1,
                    "input_4": 1,
                    "num4": 1,
                    "shifted_input4": 1,
                    "shifted_param4": 1,
                    "val4": 1,
                    "value4": 14,
                    "value_4": 3,
                    "x4": 1
                },
                "return": {
                    "is_match": 1,
                    "output": 1,
                    "result": 2
                },
                "return_value": {
                    "result": 1
                },
                "uVar1": {
                    "bitwise_xor": 1,
                    "result": 19,
                    "temp": 2,
                    "temp1": 1,
                    "xor_result": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_08000990"
            ],
            "code": "\nuint check_parameters_equality_08000904(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_parameters_equality_08000904",
            "entrypoint": "0x08000904",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000904": "check_parameters_equality_08000904",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000980": {
            "additional_data": {
                "FUN_08000980": {
                    "check_and_return_param_08000990": 1,
                    "check_and_return_parameters": 8,
                    "check_and_return_params": 1,
                    "check_parameters": 3,
                    "check_parameters_and_return": 4,
                    "validate_and_process_parameters": 1,
                    "validate_and_return": 7,
                    "validate_parameters": 4,
                    "validate_parameters_and_return": 1,
                    "verify_parameters": 1
                },
                "param_1": {
                    "arg1": 2,
                    "arg_1": 1,
                    "first_param": 5,
                    "first_parameter": 1,
                    "input_1": 4,
                    "input_param1": 1,
                    "input_param_1": 4,
                    "param1": 1,
                    "param_1": 1,
                    "param_a": 2,
                    "param_one": 1,
                    "parameter1": 2,
                    "parameter_1": 5,
                    "value_1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "arg_2": 1,
                    "input_2": 4,
                    "input_param2": 1,
                    "input_param_2": 4,
                    "param2": 1,
                    "param_2": 1,
                    "param_b": 2,
                    "param_two": 1,
                    "parameter2": 2,
                    "parameter_2": 5,
                    "second_param": 5,
                    "second_parameter": 1,
                    "value_2": 1
                },
                "param_3": {
                    "arg3": 2,
                    "arg_3": 1,
                    "input_1": 1,
                    "input_3": 2,
                    "input_param_3": 3,
                    "param3": 1,
                    "param_3": 1,
                    "param_c": 2,
                    "param_three": 1,
                    "param_to_check_1": 1,
                    "parameter3": 2,
                    "parameter_3": 7,
                    "third_param": 5,
                    "third_parameter": 1,
                    "validation_param1": 1
                },
                "param_4": {
                    "arg4": 2,
                    "arg_4": 1,
                    "fourth_param": 5,
                    "fourth_parameter": 1,
                    "input_2": 1,
                    "input_4": 2,
                    "input_param_4": 3,
                    "param4": 1,
                    "param_4": 1,
                    "param_d": 2,
                    "param_four": 1,
                    "param_to_check_2": 1,
                    "parameter4": 2,
                    "parameter_4": 7,
                    "validation_param2": 1
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_080009f0"
            ],
            "code": "\nvoid check_parameters_and_return_08000980(undefined4 first_param,undefined4 second_param,undefined4 parameter_3,undefined4 parameter_4)\n\n{\n  check_parameters_and_return_08000980_08000990(parameter_3,parameter_4,first_param,second_param);\n  return;\n}\n\n",
            "current_name": "check_parameters_and_return_08000980",
            "entrypoint": "0x08000980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000980": "check_parameters_and_return_08000980",
                "param_1": "first_param",
                "param_2": "second_param",
                "param_3": "parameter_3",
                "param_4": "parameter_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000990": {
            "additional_data": {
                "FUN_08000990": {
                    "check_and_return": 1,
                    "check_and_return_param": 4,
                    "check_and_return_parameter": 1,
                    "check_and_return_value": 2,
                    "check_parameters": 8,
                    "check_parameters_and_return": 7,
                    "handle_parameter": 1,
                    "validate_and_return_param": 1,
                    "validate_and_return_value": 1,
                    "validate_parameters": 2,
                    "verify_parameters": 2,
                    "verify_parameters_and_return": 1
                },
                "check_parameters_equality_08000904": {
                    "check_parameters_equality": 3,
                    "validate_parameters_equality": 3
                },
                "param_1": {
                    "input": 1,
                    "input_param": 12,
                    "input_parameter": 8,
                    "input_value": 6,
                    "param": 2,
                    "parameter": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_08000904"
            ],
            "calling": [
                "FUN_080009c8",
                "FUN_080009b4",
                "FUN_080009a0",
                "FUN_08000980"
            ],
            "code": "\nundefined4 check_parameters_and_return_08000990(undefined4 input_param)\n\n{\n  validate_parameters_equality();\n  return input_param;\n}\n\n",
            "current_name": "check_parameters_and_return_08000990",
            "entrypoint": "0x08000990",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000990": "check_parameters_and_return_08000990",
                "check_parameters_equality_08000904": "validate_parameters_equality",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009a0": {
            "additional_data": {
                "FUN_080009a0": {
                    "check_and_return_result": 1,
                    "check_if_input_valid": 1,
                    "check_if_parameter_not_null": 1,
                    "check_if_parameters_are_valid": 1,
                    "check_if_valid_input": 1,
                    "check_parameter_and_return_result": 1,
                    "check_parameters": 1,
                    "check_parameters_and_return": 16,
                    "check_parameters_and_return_bool": 2,
                    "check_parameters_and_return_value": 1,
                    "is_character_not_null": 1,
                    "is_input_valid": 1,
                    "is_parameter_valid": 1,
                    "validate_input_and_return": 1,
                    "validate_input_and_return_boolean": 1
                },
                "in_ZR": {
                    "char_input": 1,
                    "input_char": 2,
                    "input_character": 9,
                    "input_value": 1,
                    "is_nonzero": 1,
                    "is_null": 2,
                    "is_valid": 1,
                    "is_zero_return_value": 1,
                    "parameter": 2,
                    "parameter_status": 1,
                    "result": 10
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nbool check_parameters_and_return_bool_080009a0(void)\n\n{\n  char result;\n  \n  check_parameters_and_return_08000990();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_parameters_and_return_bool_080009a0",
            "entrypoint": "0x080009a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009a0": "check_parameters_and_return_bool_080009a0",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009b4": {
            "additional_data": {
                "FUN_080009b4": {
                    "check_cy_for_null": 1,
                    "check_cy_is_null": 1,
                    "check_if_all_parameters_are_empty": 1,
                    "check_if_cy_is_null": 1,
                    "check_if_cy_null": 1,
                    "check_if_empty": 2,
                    "check_if_empty_string": 2,
                    "check_if_input_is_empty": 1,
                    "check_if_null_terminated": 6,
                    "check_if_string_empty": 3,
                    "check_if_string_null_080009b4": 1,
                    "check_string_for_null_termination": 1,
                    "is_empty_string": 1,
                    "is_input_empty": 1,
                    "is_null_character": 2,
                    "is_null_terminated": 3,
                    "is_null_terminated_string": 1,
                    "is_null_terminator": 1,
                    "is_string_empty": 1
                },
                "check_parameters_and_return_08000990": {
                    "check_parameters_and_return": 2,
                    "validate_parameters": 2
                },
                "in_CY": {
                    "char_to_check": 1,
                    "character": 3,
                    "cy": 2,
                    "cy_value": 1,
                    "input_char": 6,
                    "input_character": 17,
                    "input_cy": 1
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900"
            ],
            "code": "\nbool check_if_empty_string_080009b4(void)\n\n{\n  char input_character;\n  \n  check_parameters_and_return();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_empty_string_080009b4",
            "entrypoint": "0x080009b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009b4": "check_if_empty_string_080009b4",
                "check_parameters_and_return_08000990": "check_parameters_and_return",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009c8": {
            "additional_data": {
                "FUN_080009c8": {
                    "check_and_return": 2,
                    "check_and_return_parameters": 2,
                    "check_and_return_result": 4,
                    "check_conditions_and_return": 1,
                    "check_conditions_and_return_result": 2,
                    "check_cy_and_zr": 2,
                    "check_for_zero_conditions": 1,
                    "check_if_any_flag_is_set": 1,
                    "check_parameter_and_return": 1,
                    "check_parameters": 1,
                    "check_parameters_and_return": 9,
                    "check_return_condition": 1,
                    "check_zero_or_carry": 1,
                    "is_carry_or_zero": 1,
                    "is_carry_or_zero_flag_set": 1,
                    "parameter_check": 1
                },
                "in_CY": {
                    "carry": 1,
                    "carry_flag": 19,
                    "carry_result": 2,
                    "is_carry": 6,
                    "is_carry_flag": 1,
                    "is_carry_set": 1,
                    "zero_condition_2": 1
                },
                "in_ZR": {
                    "is_zero": 6,
                    "is_zero_flag": 1,
                    "is_zero_result": 2,
                    "is_zero_return": 1,
                    "zero_condition_1": 1,
                    "zero_flag": 17,
                    "zero_result": 3
                }
            },
            "called": [
                "FUN_08000990"
            ],
            "calling": [
                "FUN_08006228"
            ],
            "code": "\nbool check_and_return_parameters_080009c8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  check_parameters_and_return_08000990();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_and_return_parameters_080009c8",
            "entrypoint": "0x080009c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009c8": "check_and_return_parameters_080009c8",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080009f0": {
            "additional_data": {
                "FUN_080009f0": {
                    "check_cy": 1,
                    "check_if_char_is_null": 1,
                    "check_if_cy_is_null": 2,
                    "check_if_empty_string": 2,
                    "check_if_input_empty": 1,
                    "check_if_input_is_empty": 1,
                    "check_if_null_terminated": 4,
                    "check_if_string_empty": 3,
                    "check_if_string_is_empty": 4,
                    "check_null_terminator": 1,
                    "is_cy_null": 4,
                    "is_function_returning_null": 1,
                    "is_input_empty": 2,
                    "is_null_terminated": 3,
                    "is_string_empty": 1
                },
                "check_parameters_and_return_08000980": {
                    "check_parameters_and_return": 2,
                    "validate_parameters": 1
                },
                "in_CY": {
                    "char_input": 1,
                    "char_to_check": 1,
                    "current_character": 1,
                    "cy": 4,
                    "cy_char": 1,
                    "given_character": 1,
                    "input_char": 7,
                    "input_character": 15
                },
                "return": {
                    "return_value": 1
                }
            },
            "called": [
                "FUN_08000980"
            ],
            "calling": [
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006d68",
                "FUN_08005c70"
            ],
            "code": "\nbool check_if_string_is_empty_080009f0(void)\n\n{\n  char input_character;\n  \n  check_parameters_and_return();\n  return_value input_character == '\\0';\n}\n\n",
            "current_name": "check_if_string_is_empty_080009f0",
            "entrypoint": "0x080009f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080009f0": "check_if_string_is_empty_080009f0",
                "check_parameters_and_return_08000980": "check_parameters_and_return",
                "in_CY": "input_character",
                "return": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a04": {
            "additional_data": {
                "FUN_08000a04": {
                    "check_conditions": 2,
                    "check_inputs": 3,
                    "check_parameters": 14,
                    "check_parameters_validity": 1,
                    "check_params": 5,
                    "check_validity": 1,
                    "is_param_valid": 1,
                    "is_valid_params": 1,
                    "validate_params": 2
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 10,
                    "input_1": 6,
                    "input_value1": 1,
                    "num1": 1,
                    "param1": 1,
                    "param_a": 1,
                    "value1": 5,
                    "value_1": 4
                },
                "param_2": {
                    "input2": 10,
                    "input_2": 6,
                    "input_value2": 1,
                    "num2": 1,
                    "param2": 1,
                    "param_b": 1,
                    "second_param": 1,
                    "shifted_value1": 1,
                    "shifted_value_2": 1,
                    "value2": 4,
                    "value_2": 3
                },
                "param_3": {
                    "input3": 10,
                    "input_3": 6,
                    "input_value3": 1,
                    "num3": 1,
                    "param3": 1,
                    "param_c": 1,
                    "third_param": 1,
                    "value2": 1,
                    "value3": 4,
                    "value_3": 4
                },
                "param_4": {
                    "fourth_param": 1,
                    "input4": 10,
                    "input_4": 6,
                    "input_value4": 1,
                    "num4": 1,
                    "param4": 1,
                    "param_d": 1,
                    "shifted_value2": 1,
                    "shifted_value_4": 1,
                    "value4": 4,
                    "value_4": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900",
                "FUN_08005854"
            ],
            "code": "\nundefined4 check_parameters_validity_08000a04(uint input1,int input2,uint input3,int input4)\n\n{\n  if ((((input2 << 1) >> 0x15 != -1) || ((input1 | input2 << 0xc) == 0)) &&\n     (((input4 << 1) >> 0x15 != -1 || ((input3 | input4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_validity_08000a04",
            "entrypoint": "0x08000a04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a04": "check_parameters_validity_08000a04",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000a30": {
            "additional_data": {
                "0x100000": {
                    "bit_mask3": 1
                },
                "0x18": {
                    "shift_amount": 1
                },
                "0x1d": {
                    "right_shift_amount": 1
                },
                "0x1fc00000": {
                    "comparison_constant1": 1
                },
                "0x1fffff": {
                    "bit_mask2": 1
                },
                "0x20": {
                    "bit_size": 1
                },
                "0x200000": {
                    "lower_bound": 1
                },
                "0x40000000": {
                    "bit_mask": 1
                },
                "0x70000000": {
                    "upper_bound": 1
                },
                "0x7fc00000": {
                    "special_value1": 1
                },
                "0x7fffffff": {
                    "bit_comparison_value": 1
                },
                "0x80000000": {
                    "special_value2": 1
                },
                "0x8fe00000": {
                    "addition_constant2": 1
                },
                "0x90000000": {
                    "addition_constant1": 1
                },
                "0x92e00000": {
                    "comparison_constant3": 1
                },
                "0xfffffffe": {
                    "bit_mask4": 1
                },
                "FUN_08000a30": {
                    "calculate_float": 6,
                    "calculate_float_value": 2,
                    "calculate_floating_point": 3,
                    "calculate_floating_point_value": 5,
                    "calculate_uint_value": 1,
                    "compute_float_from_fixed": 1,
                    "compute_float_value": 1,
                    "convert_float_to_hex": 1,
                    "convert_float_to_u_int": 1,
                    "convert_to_float": 4,
                    "normalize_floating_point": 1,
                    "process_float": 1,
                    "process_number": 1,
                    "reverse_binary_math": 1,
                    "reverse_bits": 1,
                    "reverse_float_bits": 1
                },
                "SCARRY4": {
                    "is_carry": 1,
                    "is_carry_set": 1,
                    "scarry4": 1
                },
                "bVar4": {
                    "check1": 2,
                    "condition1": 1,
                    "is_subnormal": 1,
                    "is_zero": 25,
                    "is_zero_result": 1
                },
                "bVar5": {
                    "check2": 2,
                    "condition2": 1,
                    "is_below_threshold": 1,
                    "is_in_range": 1,
                    "is_less": 1,
                    "is_less_than": 4,
                    "is_less_than_0x70000000": 1,
                    "is_less_than_limit": 1,
                    "is_less_than_min_value": 1,
                    "is_less_than_threshold": 5,
                    "is_less_than_value": 1,
                    "is_not_large_exponent": 1,
                    "is_positive": 1,
                    "is_positive_bits": 1,
                    "is_small": 3,
                    "is_small_exponent": 1,
                    "is_small_number": 1,
                    "is_smaller": 1,
                    "is_smaller_than_threshold": 1,
                    "less_than_max": 1
                },
                "in_r12": {
                    "adjusted_exponent": 1,
                    "adjusted_low": 1,
                    "alternative_mask": 1,
                    "base_limit": 1,
                    "base_value": 1,
                    "bound_var": 1,
                    "compare_mask": 1,
                    "condition": 1,
                    "input_2_plus": 1,
                    "modified_pattern2_with_constant": 1,
                    "normalized_lower": 1,
                    "shifted_doubled_multiplier": 1,
                    "subnormal_left_shift": 1,
                    "temp": 4,
                    "temp3": 10,
                    "temp_mask": 1,
                    "temp_value_2": 1
                },
                "param_1": {
                    "bit_pattern1": 1,
                    "fixed_value": 1,
                    "float_value": 1,
                    "input": 4,
                    "input1": 9,
                    "input_1": 1,
                    "input_float": 1,
                    "input_int": 1,
                    "input_significand": 1,
                    "input_value": 7,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "number1": 1,
                    "value": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_pattern": 1,
                    "bit_pattern2": 1,
                    "bits": 1,
                    "flag_value": 1,
                    "input2": 9,
                    "input_2": 1,
                    "input_exponent": 2,
                    "input_flag": 1,
                    "input_mask": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "mask": 2,
                    "multiplier": 4,
                    "number2": 1,
                    "rounding_mode": 1,
                    "shift": 2
                },
                "uVar1": {
                    "result": 29,
                    "result_float": 1
                },
                "uVar2": {
                    "bits_times_two": 1,
                    "double_input_value_2": 1,
                    "doubled_multiplier": 1,
                    "doubled_number2": 1,
                    "input_2_doubled": 1,
                    "multiplier_times2": 1,
                    "param2_times2": 1,
                    "scaled_exponent": 1,
                    "scaled_input2": 1,
                    "shifted": 2,
                    "shifted_mask": 4,
                    "shifted_pattern": 1,
                    "shifted_pattern2": 1,
                    "temp": 2,
                    "temp1": 10,
                    "temp_value1": 1
                },
                "uVar3": {
                    "adjusted": 1,
                    "adjusted_bits": 1,
                    "adjusted_input2": 1,
                    "adjusted_mask": 2,
                    "adjusted_multiplier": 1,
                    "adjusted_pattern": 1,
                    "modified_input_2": 1,
                    "modified_number2": 1,
                    "modified_pattern2": 1,
                    "normalized": 1,
                    "normalized_significand": 1,
                    "shifted_exponent": 1,
                    "shifted_mask_plus_value": 1,
                    "shifted_multiplier": 1,
                    "temp2": 11,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "updated_mask": 1,
                    "updated_param2": 1
                },
                "uVar4": {
                    "shift_amount": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08003330"
            ],
            "code": "\nuint calculate_floating_point_value_08000a30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than_threshold;\n  \n  temp1 = input2 * 2;\n  is_less_than_threshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than_threshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_threshold && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than_threshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != scarry4(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_floating_point_value_08000a30",
            "entrypoint": "0x08000a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000a30": "calculate_floating_point_value_08000a30",
                "SCARRY4": "scarry4",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_threshold",
                "in_r12": "temp3",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ad8": {
            "additional_data": {
                "FUN_08000ad8": {
                    "calculate_div": 1,
                    "calculate_float": 7,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 2,
                    "calculate_floating_point_number": 1,
                    "calculate_floating_point_value": 2,
                    "calculate_new_value": 1,
                    "calculate_result": 1,
                    "calculate_shifted_sum": 1,
                    "calculate_shifted_value": 1,
                    "improved_math_calculation": 1,
                    "perform_arithmetic": 1,
                    "perform_calculation": 1,
                    "reverse_arithmetic": 1,
                    "reverse_bits": 7
                },
                "bVar11": {
                    "is_negative": 1
                },
                "bVar8": {
                    "bool_flag": 1,
                    "check": 1,
                    "comparison_result": 1,
                    "condition": 1,
                    "flag": 3,
                    "flag_check": 1,
                    "is_condition_met": 4,
                    "is_condition_satisfied": 2,
                    "is_equal": 8,
                    "is_negative": 1,
                    "is_normalized": 1,
                    "is_special_value": 1,
                    "is_true": 1,
                    "is_zero": 5
                },
                "iVar1": {
                    "dividend_shifted": 1,
                    "exponent_shift": 1,
                    "high_bit1": 1,
                    "msb": 1,
                    "msb_input_value1": 1,
                    "shift_amount": 2,
                    "shift_count": 2,
                    "shift_val1": 1,
                    "shifted_input": 2,
                    "shifted_input1": 6,
                    "shifted_input_msb": 1,
                    "shifted_input_number": 1,
                    "shifted_input_sign": 1,
                    "shifted_input_value1": 1,
                    "shifted_number_a": 1,
                    "shifted_val_1": 1,
                    "shifted_value": 1,
                    "shifted_value1": 2,
                    "var1": 1
                },
                "iVar2": {
                    "dividend_shifted24": 1,
                    "fraction_shift": 1,
                    "high_bit2": 1,
                    "msb_extended": 1,
                    "msb_shifted_input_value2": 1,
                    "second_shift_amount": 1,
                    "second_shift_count": 1,
                    "shift_amount_2": 1,
                    "shift_val2": 1,
                    "shifted_input2": 6,
                    "shifted_input_value2": 1,
                    "shifted_key": 1,
                    "shifted_mask": 1,
                    "shifted_mask_msb": 1,
                    "shifted_number_b": 1,
                    "shifted_output_sign": 1,
                    "shifted_second_input": 1,
                    "shifted_val_2": 1,
                    "shifted_value2": 3,
                    "tmp": 1,
                    "var2": 1
                },
                "param_1": {
                    "dividend": 1,
                    "exponent": 1,
                    "exponent_bits": 1,
                    "float_value1": 1,
                    "input": 5,
                    "input1": 7,
                    "input_1": 2,
                    "input_a": 1,
                    "input_bits": 1,
                    "input_number": 1,
                    "input_value": 2,
                    "input_value1": 5,
                    "input_value_1": 1,
                    "mantissa": 1,
                    "number_a": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "divisor": 1,
                    "exponent": 1,
                    "float_value2": 1,
                    "fraction_bits": 1,
                    "input2": 7,
                    "input_2": 2,
                    "input_b": 1,
                    "input_flag": 1,
                    "input_value2": 5,
                    "input_value_2": 1,
                    "key": 2,
                    "mantissa": 1,
                    "mask": 4,
                    "number_b": 1,
                    "shift_value": 1
                },
                "param_3": {
                    "constant": 1,
                    "constant1": 1,
                    "flag": 1,
                    "flags": 1,
                    "float_value3": 1,
                    "input3": 4,
                    "input_3": 2,
                    "input_value3": 2,
                    "input_value_3": 1,
                    "offset": 1,
                    "option": 1,
                    "param": 1,
                    "param_3": 1,
                    "parameter3": 1,
                    "reserved": 1,
                    "sign": 2,
                    "sign_bit": 1,
                    "temp": 1,
                    "temp_var1": 1,
                    "undefined_param3": 1,
                    "undefined_value": 1,
                    "unknown": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "value3": 1
                },
                "param_4": {
                    "constant2": 1,
                    "exponent_mask": 1,
                    "float_value4": 1,
                    "input4": 4,
                    "input_4": 2,
                    "input_value4": 2,
                    "input_value_4": 1,
                    "mask": 2,
                    "output_flag": 1,
                    "output_value": 1,
                    "param_4": 1,
                    "parameter4": 1,
                    "result": 4,
                    "result_value": 1,
                    "rounding": 1,
                    "shift": 1,
                    "shift_value": 1,
                    "special_value": 1,
                    "temp_var2": 1,
                    "undefined_param4": 1,
                    "unused_parameter": 1,
                    "value4": 1
                },
                "uVar10": {
                    "denormalized_fraction": 1
                },
                "uVar12": {
                    "shifted_fraction": 1
                },
                "uVar13": {
                    "normalized_result": 1
                },
                "uVar3": {
                    "bitwise_xor": 1,
                    "dividend_xor": 1,
                    "exponent": 1,
                    "first_bit_check": 1,
                    "flipped_input": 1,
                    "flipped_mask": 1,
                    "input2_xor": 1,
                    "input_xor_mask": 1,
                    "mantissa_xor": 1,
                    "mantissa_xor_equation": 1,
                    "masked_input": 1,
                    "masked_value": 1,
                    "modified_input_2": 1,
                    "modified_input_value2": 1,
                    "negative_input2": 1,
                    "output_bits": 1,
                    "result": 2,
                    "result1": 2,
                    "result_1": 1,
                    "shifted_input": 1,
                    "temp1": 4,
                    "temp_var1": 1,
                    "value_1": 1,
                    "value_x": 1,
                    "xor_result": 1,
                    "xor_value1": 1
                },
                "uVar4": {
                    "divisor_xor": 1,
                    "flipped_input": 1,
                    "flipped_key": 1,
                    "mantissa_negated_extended": 1,
                    "mask_shifted_value": 1,
                    "masked_result": 1,
                    "modified_input_3": 1,
                    "modified_input_value1": 1,
                    "normalized_fraction": 1,
                    "result": 1,
                    "result2": 2,
                    "result_2": 1,
                    "shifted_input3": 1,
                    "shifted_output": 1,
                    "temp1": 2,
                    "temp2": 4,
                    "temp_value1": 1,
                    "temp_var1": 4,
                    "temp_var2": 1,
                    "value_2": 1,
                    "value_y": 1,
                    "var4": 1,
                    "xor_value2": 1
                },
                "uVar5": {
                    "abs_input1": 1,
                    "abs_number_a": 1,
                    "dividend_shifted1": 1,
                    "input_shifted": 1,
                    "mantissa_extended": 1,
                    "mantissa_left_shifted": 1,
                    "modified_input_1": 1,
                    "output": 1,
                    "result": 3,
                    "result1": 5,
                    "shifted_input": 2,
                    "shifted_input1": 1,
                    "shifted_input2": 1,
                    "shifted_input_masked": 1,
                    "shifted_input_value1": 2,
                    "shifted_result": 1,
                    "shifted_sum_1": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_value1": 1,
                    "temp_var2": 2
                },
                "uVar6": {
                    "abs_input2": 1,
                    "abs_number_b": 1,
                    "adjusted_input_1": 1,
                    "diff": 1,
                    "dividend_shifted_cnt": 1,
                    "result2": 4,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_count": 2,
                    "shifted_input_value2": 1,
                    "shifted_output_masked": 1,
                    "shifted_result1": 1,
                    "shifted_sum_2": 1,
                    "shifted_value": 1,
                    "sum": 1,
                    "sum_post_increment": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_value2": 1,
                    "temp_var3": 2,
                    "updated_shift": 1,
                    "var6": 1
                },
                "uVar7": {
                    "abs_diff": 1,
                    "diff": 2,
                    "difference": 22,
                    "difference_extended": 1,
                    "dividend_shifted_diff": 1,
                    "shifted_val_diff": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var4": 1
                },
                "uVar8": {
                    "masked_value_1": 1
                },
                "uVar9": {
                    "masked_value_2": 1,
                    "normalized_exponent": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ee8",
                "FUN_08002d88",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08003330"
            ],
            "code": "\nuint calculate_float_value_08000ad8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint result1;\n  uint result2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  is_equal = result1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result1 == input4;\n  }\n  shifted_input1 = (int)result1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result1 = temp1;\n      if (shifted_input1 == -1) {\n        result1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = result1;\n      }\n      is_equal = (result1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result1 == temp1;\n      }\n      if (!is_equal) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  is_equal = difference != 0;\n  result2 = result1;\n  if (is_equal && result1 <= input4) {\n    result2 = result1 + difference;\n  }\n  if (is_equal && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && result1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && result1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (result2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (result2 == 0) {\n      result1 = result1 ^ 0x800000;\n      result2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    result1 = -result1 - (uint)is_equal;\n  }\n  if (result1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result1 = result1 * 2 + (uint)(temp1 != 0);\n    temp1 = result2 - 2;\n    if ((result1 & 0x800000) == 0) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result1 = result1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (temp1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    temp1 = result2 - 1;\n    if (0xffffff < result1) {\n      temp1 = result1 & 1;\n      result1 = result1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = result2;\n      if (0xfd < result2) goto LAB_08000c12;\n    }\n  }\n  result1 = result1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "current_name": "calculate_float_value_08000ad8",
            "entrypoint": "0x08000ad8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ad8": "calculate_float_value_08000ad8",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result1",
                "uVar6": "result2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000adc": {
            "additional_data": {
                "FUN_08000adc": {
                    "apply_floating_point_operation": 1,
                    "calculate_float": 5,
                    "calculate_float_addition": 2,
                    "calculate_float_difference": 1,
                    "calculate_floating_point": 6,
                    "calculate_floating_point_value": 2,
                    "convert_float_to_fixed": 1,
                    "convert_float_to_uint": 1,
                    "float_to_fixed": 2,
                    "perform_arithmetic_operation": 1,
                    "perform_unsigned_division": 1,
                    "reverse_binary": 1,
                    "reverse_binary_arithmetic": 1,
                    "reverse_bits": 1,
                    "reverse_float_bits": 1,
                    "to_float": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 3
                },
                "bVar7": {
                    "are_shifted_inputs_equal": 1,
                    "check_flag": 2,
                    "divisor_is_zero": 1,
                    "is_equal": 9,
                    "is_equal_exponent": 1,
                    "is_zero": 15,
                    "is_zero_or_equal": 1,
                    "is_zero_shift_diff": 1
                },
                "iVar1": {
                    "bit_shift_value1": 1,
                    "dividend_shifted": 1,
                    "exponent": 1,
                    "exponent1_msb": 1,
                    "exponent_1": 1,
                    "exponent_shift": 1,
                    "input_float1_sign": 1,
                    "is_operand1_negative": 1,
                    "left_bit_shift_val": 1,
                    "left_shifted1": 1,
                    "num1_shifted": 1,
                    "shift_amount1": 1,
                    "shift_count1": 1,
                    "shifted1": 1,
                    "shifted_float1": 1,
                    "shifted_input1": 3,
                    "shifted_input1_msb": 1,
                    "shifted_input1_sign": 1,
                    "shifted_input_1_sign": 1,
                    "shifted_input_a": 1,
                    "shifted_num1": 1,
                    "shifted_val1": 1,
                    "shifted_value": 1,
                    "shifted_value1": 1,
                    "sign_input1": 1,
                    "temp1": 1,
                    "upper_byte_shifted1": 1,
                    "x_shifted": 1
                },
                "iVar2": {
                    "bit_shift_value2": 1,
                    "divisor_shifted": 1,
                    "exponent2_msb": 1,
                    "exponent_2": 1,
                    "exponent_check": 1,
                    "input_float2_sign": 1,
                    "is_operand2_negative": 1,
                    "left_shifted2": 1,
                    "num2_shifted": 1,
                    "right_bit_shift_val": 1,
                    "shift_amount2": 1,
                    "shift_count2": 1,
                    "shifted2": 1,
                    "shifted_float2": 1,
                    "shifted_input2": 3,
                    "shifted_input2_msb": 1,
                    "shifted_input2_sign": 1,
                    "shifted_input_2_sign": 1,
                    "shifted_input_b": 1,
                    "shifted_num2": 1,
                    "shifted_val2": 1,
                    "shifted_value2": 2,
                    "sign_input2": 1,
                    "temp2": 1,
                    "temp_exponent": 1,
                    "upper_byte_shifted2": 1,
                    "y_shifted": 1
                },
                "param_1": {
                    "dividend": 1,
                    "exponent1": 1,
                    "float1": 1,
                    "float_1": 1,
                    "float_value1": 1,
                    "float_value_1": 1,
                    "input1": 10,
                    "input_1": 1,
                    "input_a": 1,
                    "input_float1": 2,
                    "input_value1": 2,
                    "num1": 2,
                    "operand1": 1,
                    "val1": 1,
                    "value": 1,
                    "value1": 3,
                    "x": 1
                },
                "param_2": {
                    "divisor": 1,
                    "exponent2": 1,
                    "float2": 1,
                    "float_2": 1,
                    "float_value2": 1,
                    "float_value_2": 1,
                    "input2": 10,
                    "input_2": 1,
                    "input_b": 1,
                    "input_float2": 2,
                    "input_value2": 2,
                    "num2": 2,
                    "operand2": 1,
                    "scale": 1,
                    "val2": 1,
                    "value2": 3,
                    "y": 1
                },
                "param_3": {
                    "flag": 1,
                    "float3": 1,
                    "float_modifier": 1,
                    "input3": 7,
                    "input_3": 1,
                    "input_value3": 1,
                    "num3": 1,
                    "param3": 2,
                    "parameter3": 2,
                    "parameter_c": 1,
                    "precision": 2,
                    "undefined_value": 1,
                    "undefined_variable": 1,
                    "unused": 2,
                    "unused_param": 4,
                    "val3": 1,
                    "value3": 1,
                    "z": 1
                },
                "param_4": {
                    "float4": 1,
                    "float_result": 3,
                    "input3": 1,
                    "input4": 7,
                    "input_4": 1,
                    "input_float3": 1,
                    "input_value4": 1,
                    "num4": 1,
                    "param4": 1,
                    "parameter4": 1,
                    "parameter_d": 1,
                    "result": 4,
                    "rounding": 1,
                    "significand": 1,
                    "unused2": 1,
                    "unused_param": 1,
                    "unused_param2": 1,
                    "val4": 1,
                    "value4": 1,
                    "w": 1
                },
                "uVar10": {
                    "sum_sign": 1
                },
                "uVar11": {
                    "normalized_product": 1
                },
                "uVar12": {
                    "msb_product": 1
                },
                "uVar13": {
                    "positive_result": 1
                },
                "uVar14": {
                    "shift_amount": 1
                },
                "uVar15": {
                    "shifted_product": 1
                },
                "uVar3": {
                    "abs_input1": 1,
                    "abs_masked_input1": 1,
                    "divisor_masked": 1,
                    "exponent_partial_sum": 1,
                    "fraction1": 1,
                    "fraction_1": 1,
                    "fraction_part": 1,
                    "input1_fraction": 1,
                    "left_shifted_input1": 1,
                    "modified_input1": 1,
                    "normalized_input1": 2,
                    "num1_result": 1,
                    "num2_normalized": 1,
                    "operand1_fraction": 1,
                    "result": 4,
                    "result1": 2,
                    "result_a": 1,
                    "result_val": 1,
                    "shifted_input_2": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "var1": 1,
                    "y_bit_shifted": 1
                },
                "uVar4": {
                    "abs_input1_shifted": 1,
                    "abs_masked_input2": 1,
                    "abs_value1": 1,
                    "dividend_masked": 1,
                    "exponent1_with_sign": 1,
                    "float_1_with_sign": 1,
                    "fraction2": 1,
                    "fraction_2": 1,
                    "input1_scaled": 1,
                    "left_shifted_input2": 1,
                    "modified_input2": 1,
                    "normalized_input2": 2,
                    "num1_normalized": 1,
                    "num2_result": 1,
                    "operand1_exponent": 1,
                    "result2": 1,
                    "result_value": 1,
                    "result_variable": 1,
                    "shifted_input1": 2,
                    "shifted_result1": 1,
                    "shifted_value1": 1,
                    "signed_float1": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp_a": 1,
                    "var2": 1,
                    "x_bit_shifted": 1
                },
                "uVar5": {
                    "abs_input1_with_exponent": 1,
                    "check_value": 1,
                    "cond1": 1,
                    "count1": 1,
                    "diff": 1,
                    "divisor_length": 1,
                    "exponent2_with_sign": 1,
                    "exponent_diff": 1,
                    "exponent_part_1": 1,
                    "fraction_diff": 1,
                    "modified_shift": 1,
                    "normalized_diff": 1,
                    "operand1_sign": 1,
                    "result": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_diff": 1,
                    "shift_distance": 1,
                    "shifted_input1_copy": 1,
                    "shifted_input_1_comparison": 1,
                    "shifted_result2": 1,
                    "shifted_value2": 1,
                    "signed_float2": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 2,
                    "temp_b": 1,
                    "var3": 1
                },
                "uVar6": {
                    "abs_diff": 2,
                    "abs_difference": 1,
                    "abs_exponent_diff": 1,
                    "abs_input_difference": 1,
                    "abs_shift_diff": 1,
                    "absolute_diff": 1,
                    "absolute_difference": 1,
                    "count2": 1,
                    "diff": 2,
                    "difference": 11,
                    "exponent_diff": 1,
                    "exponent_difference": 2,
                    "exponent_part_2": 1,
                    "shift_diff": 1,
                    "shifted_difference": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "var4": 1
                },
                "uVar8": {
                    "sum": 1
                },
                "uVar9": {
                    "sum_normalized": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ee8",
                "FUN_0800411c",
                "FUN_08002ec0",
                "FUN_0800426c",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08003330"
            ],
            "code": "\nuint calculate_floating_point_value_08000adc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result;\n  uint temp1;\n  uint temp1;\n  uint difference;\n  bool is_zero;\n  \n  temp1 = input1 << 1;\n  is_zero = temp1 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp1 == input4;\n  }\n  shifted_input1 = (int)temp1 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp1 = input2;\n      if (shifted_input1 == -1) {\n        temp1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = temp1;\n      }\n      is_zero = (temp1 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = temp1 == input2;\n      }\n      if (!is_zero) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08000c12:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  is_zero = difference != 0;\n  temp1 = temp1;\n  if (is_zero && temp1 <= input4) {\n    temp1 = temp1 + difference;\n  }\n  if (is_zero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (temp1 == difference) {\n    result = result ^ 0x800000;\n    if (temp1 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    is_zero = result != 0;\n    result = -result;\n    temp1 = -temp1 - (uint)is_zero;\n  }\n  if (temp1 < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    temp1 = temp1 * 2 + (uint)(difference != 0);\n    difference = temp1 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp1 = leading_zero_count(temp1) - 8;\n      temp1 = temp1 << (temp1 & 0xff);\n      if ((int)difference < (int)temp1) {\n        temp1 = temp1 >> (-(difference - temp1) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (difference - temp1) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    difference = temp1 - 1;\n    if (0xffffff < temp1) {\n      difference = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = temp1;\n      if (0xfd < temp1) goto LAB_08000c12;\n    }\n  }\n  temp1 = temp1 + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "current_name": "calculate_floating_point_value_08000adc",
            "entrypoint": "0x08000adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000adc": "calculate_floating_point_value_08000adc",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result",
                "uVar4": "temp1",
                "uVar5": "temp1",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c3c": {
            "additional_data": {
                "0x7fffffff": {
                    "int_max": 1
                },
                "FUN_08000c3c": {
                    "calculate_checksum": 1,
                    "calculate_hash": 4,
                    "calculate_modified_value": 2,
                    "calculate_new_value": 1,
                    "calculate_parameter_value": 1,
                    "calculate_result": 2,
                    "calculate_value": 7,
                    "count_bits": 1,
                    "count_prefix_bit_shift": 1,
                    "decode_and_transform": 1,
                    "decode_binary": 1,
                    "decode_integer": 1,
                    "decode_uint": 1,
                    "reverse_bits": 3,
                    "reverse_lzcount": 1
                },
                "iVar3": {
                    "base_value": 4,
                    "constant": 7,
                    "constant_offset": 1,
                    "constant_value": 5,
                    "initial_value": 2,
                    "intermediate_result": 2,
                    "intermediate_value": 2,
                    "offset": 6,
                    "result_1": 1,
                    "tmp1": 1
                },
                "iVar3_decoded": {
                    "decoded_constant_value": 1
                },
                "iVar3_new": {
                    "adjusted_constant_value": 1
                },
                "param_1": {
                    "input": 6,
                    "input_number": 5,
                    "input_value": 20
                },
                "uVar1": {
                    "adjusted_value": 1,
                    "count": 2,
                    "final_result": 1,
                    "leading_zero_count": 1,
                    "leading_zeroes": 5,
                    "leading_zeros": 13,
                    "lzcount_result": 1,
                    "result": 5,
                    "shift_count": 1,
                    "temp_result": 1
                },
                "uVar1_check": {
                    "is_leading_zeros_over_seven": 1
                },
                "uVar1_condition": {
                    "is_leading_zeros_equal_to_zero": 1
                },
                "uVar1_decoded": {
                    "decoded_leading_zeroes": 1
                },
                "uVar1_new": {
                    "adjusted_leading_zeroes": 1
                },
                "uVar1_temp": {
                    "temp_value": 1
                },
                "uVar1_temp2": {
                    "temp_value2": 1
                },
                "uVar1_value": {
                    "result_value": 1
                },
                "uVar2": {
                    "shift": 1,
                    "shift_amount": 17,
                    "shift_by": 1,
                    "shift_count": 2,
                    "shift_value": 3,
                    "shifted_value": 2,
                    "temp": 1,
                    "temp_shift_amt": 1,
                    "temp_value": 2,
                    "upper_bits": 1
                },
                "uVar2_check": {
                    "is_shift_amount_over_seven": 1
                },
                "uVar2_condition": {
                    "is_shift_amount_equal_to_zero": 1
                },
                "uVar2_decoded": {
                    "decoded_shift_amount": 1
                },
                "uVar2_new": {
                    "adjusted_shift_amount": 1
                },
                "uVar2_temp": {
                    "temp_shift_count": 1
                },
                "uVar2_temp2": {
                    "temp_shift_count2": 1
                },
                "uVar2_value": {
                    "shifted_input_value": 1
                },
                "uVar3": {
                    "temp_value": 1
                },
                "uVar4": {
                    "additional_value": 1,
                    "bit_check": 3,
                    "bit_mask": 1,
                    "carry": 1,
                    "carry_bit": 1,
                    "carry_flag": 1,
                    "carry_value": 1,
                    "check": 1,
                    "comparison": 1,
                    "comparison_result": 1,
                    "comparison_value": 1,
                    "mask": 7,
                    "masked_value": 1,
                    "overflow_check": 1,
                    "result": 1,
                    "shifted_value": 1,
                    "temp_value": 3,
                    "temp_var": 2,
                    "temporary_value": 1,
                    "tmp2": 1
                },
                "uVar4_check": {
                    "is_temp_var_minus_one": 1
                },
                "uVar4_condition": {
                    "is_temp_var_equal_to_negative": 1
                },
                "uVar4_decoded": {
                    "decoded_shifted_value": 1
                },
                "uVar4_new": {
                    "adjusted_shifted_value": 1
                },
                "uVar5": {
                    "masked_value": 1,
                    "result": 3,
                    "temp_value": 1,
                    "tmp3": 1
                },
                "uVar6": {
                    "sign_check": 1,
                    "temp_result": 1,
                    "tmp4": 1
                },
                "uVar7": {
                    "tmp5": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nuint calculate_modified_value_08000c3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_modified_value_08000c3c",
            "entrypoint": "0x08000c3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c3c": "calculate_modified_value_08000c3c",
                "iVar3": "constant",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000c44": {
            "additional_data": {
                "FUN_08000c44": {
                    "binary_complement": 1,
                    "bit_count": 1,
                    "calculate": 1,
                    "calculate_result": 3,
                    "calculate_shifted_sum": 1,
                    "calculate_signed_integer": 1,
                    "calculate_value": 1,
                    "count_and_shift": 1,
                    "count_bits": 4,
                    "count_bits_with_offset": 1,
                    "count_leading_zeros": 3,
                    "count_set_bits": 4,
                    "decode_integer": 1,
                    "decode_number": 1,
                    "decode_unsigned_integer": 3,
                    "perform_operation": 1,
                    "reverse_bits": 2,
                    "reverse_integer_bits": 1
                },
                "iVar4": {
                    "base_value": 1,
                    "encoded_value": 1,
                    "final_result": 1,
                    "intermediate_result": 2,
                    "offset": 2,
                    "result": 23,
                    "temp_result": 1
                },
                "param_1": {
                    "input": 16,
                    "input_num": 1,
                    "input_number": 2,
                    "input_value": 6,
                    "num": 1,
                    "number": 3,
                    "value": 2
                },
                "uVar1": {
                    "bit_count": 2,
                    "bits_set": 1,
                    "count": 1,
                    "highest_bit": 1,
                    "leading_zero_count": 1,
                    "leading_zeroes": 4,
                    "leading_zeros": 16,
                    "leading_zeros_count": 1,
                    "num_bits": 1,
                    "num_bits_set": 1,
                    "set_bits": 1,
                    "zeroes": 1
                },
                "uVar2": {
                    "bit_shift": 1,
                    "offset": 1,
                    "shift": 3,
                    "shift_amount": 21,
                    "shift_amt": 1,
                    "shift_bits": 1,
                    "shift_value": 1,
                    "shifted_bits": 1,
                    "shifted_value": 1
                },
                "uVar3": {
                    "final_result": 1,
                    "is_negative": 11,
                    "sign": 1,
                    "sign_bit": 18
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08002d88",
                "FUN_08002b48",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0"
            ],
            "code": "\nuint count_set_bits_08000c44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_set_bits_08000c44",
            "entrypoint": "0x08000c44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000c44": "count_set_bits_08000c44",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000cec": {
            "additional_data": {
                "FUN_08000cec": {
                    "calculate_float": 7,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_value": 2,
                    "evaluate_float": 1,
                    "float_conversion": 2,
                    "float_to_bits": 1,
                    "float_to_infinity": 1,
                    "perform_arithmetic_operation": 1
                },
                "bVar10": {
                    "borrow": 1,
                    "carry": 1,
                    "check_condition2": 1,
                    "condition2": 2,
                    "condition_2": 1,
                    "is_borrow": 1,
                    "is_carry": 2,
                    "is_final_exponent_overflow": 1,
                    "is_negative": 10,
                    "is_negative1": 1,
                    "is_negative_overflow": 2,
                    "is_negative_result": 1,
                    "is_negative_shift": 1,
                    "is_negative_shifted_input_1": 1,
                    "is_overflow": 2,
                    "overflow": 1,
                    "temp_flag2": 1
                },
                "bVar11": {
                    "carry1": 1
                },
                "bVar12": {
                    "carry2": 1
                },
                "bVar9": {
                    "check_condition1": 1,
                    "condition": 1,
                    "condition1": 2,
                    "condition_1": 1,
                    "is_bit_24_to_31_zero_param1": 1,
                    "is_shifted_b_valid": 1,
                    "is_zero": 12,
                    "is_zero1": 3,
                    "is_zero_a": 1,
                    "is_zero_byte": 1,
                    "is_zero_exponent": 1,
                    "is_zero_or_ff": 1,
                    "is_zero_shift": 1,
                    "is_zero_shifted": 1,
                    "is_zero_shifted_input_1": 1,
                    "temp_flag1": 1
                },
                "iVar4": {
                    "bit_count1": 1,
                    "exponent_a": 1,
                    "exponent_sum": 1,
                    "shift_sum": 1,
                    "shifted_sum": 2,
                    "sum": 15,
                    "sum_exponents": 2,
                    "sum_of_bit_24_to_31_params": 1,
                    "sum_of_exponents": 3,
                    "sum_of_high_bytes": 1,
                    "sum_result": 1,
                    "sum_shifts": 1
                },
                "iVar5": {
                    "abs_sum": 1,
                    "adjusted_exponent1": 1,
                    "diff": 5,
                    "difference": 7,
                    "exponent_diff": 1,
                    "exponent_difference": 1,
                    "exponent_result": 1,
                    "normalization_count": 1,
                    "normalized_exponent": 1,
                    "normalized_shift": 1,
                    "normalized_sum": 1,
                    "shift1": 1,
                    "shift_amount": 1,
                    "shift_diff": 1,
                    "shifted_diff": 1,
                    "shifted_difference": 1,
                    "shifted_sum": 2,
                    "sum_minus_0x7f": 1,
                    "temp_var_1": 1
                },
                "iVar7": {
                    "abs_exponent_difference": 1,
                    "adjusted_exponent2": 1,
                    "bit_count2": 1,
                    "counter": 1,
                    "diff_adjusted": 1,
                    "difference": 1,
                    "difference2": 1,
                    "difference_adjusted": 1,
                    "difference_copy": 1,
                    "exponent_diff": 1,
                    "exponent_difference": 1,
                    "exponent_result": 1,
                    "lower_byte1": 1,
                    "normalization_diff": 1,
                    "normalized_diff": 1,
                    "normalized_shift_2": 1,
                    "normalized_value": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_amount1": 1,
                    "shift_diff": 1,
                    "shift_value": 1,
                    "shifted_diff": 1,
                    "shifted_diff2": 1,
                    "sum_minus_0xff": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_diff": 1,
                    "temp_exponent": 1,
                    "temp_var_4": 1
                },
                "iVar8": {
                    "shift_count": 1,
                    "temp_shift": 1
                },
                "lVar1": {
                    "long_result": 1,
                    "multiplication_result": 1,
                    "multiplied_value": 1,
                    "product": 6,
                    "product64": 1,
                    "product_result": 1,
                    "result": 2,
                    "shifted_product": 1,
                    "temp_1": 1,
                    "temp_mult": 1,
                    "temp_multiplied": 1
                },
                "param_1": {
                    "exponent1": 2,
                    "float1": 1,
                    "input1": 7,
                    "input_1": 6,
                    "input_a": 2,
                    "input_float1": 2,
                    "input_param1": 1,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "num1": 2,
                    "number1": 1,
                    "operand1": 1,
                    "value1": 4
                },
                "param_2": {
                    "exponent2": 2,
                    "float2": 1,
                    "input2": 7,
                    "input_2": 6,
                    "input_b": 2,
                    "input_float2": 2,
                    "input_param2": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "num2": 2,
                    "number2": 1,
                    "operand2": 1,
                    "value2": 4
                },
                "param_3": {
                    "constant": 1,
                    "data1": 1,
                    "flag": 1,
                    "flags": 1,
                    "input3": 4,
                    "input_3": 2,
                    "input_c": 2,
                    "input_param3": 1,
                    "input_uint": 1,
                    "param3": 4,
                    "param_3": 2,
                    "parameter3": 1,
                    "size": 1,
                    "unknown": 1,
                    "unused": 2,
                    "unused_param": 2,
                    "unused_parameter": 2,
                    "value3": 1
                },
                "param_4": {
                    "bit_24_to_31_param2": 1,
                    "data2": 1,
                    "exponent3": 1,
                    "flag2": 1,
                    "float3": 1,
                    "high_byte_2": 1,
                    "input3": 2,
                    "input4": 4,
                    "input_3": 1,
                    "input_4": 2,
                    "input_d": 1,
                    "input_uint2": 1,
                    "input_value3": 1,
                    "mask": 1,
                    "param3": 1,
                    "param4": 2,
                    "param_4": 2,
                    "parameter4": 1,
                    "shift_amount": 1,
                    "shifted_b": 1,
                    "temporary_var1": 1,
                    "unused": 1,
                    "value4": 1
                },
                "uVar2": {
                    "floating_point_bits": 1,
                    "output": 1,
                    "result": 26,
                    "sign_result": 1,
                    "updated_result": 1
                },
                "uVar3": {
                    "adjusted_shift_remainder": 1,
                    "bit_mask1": 1,
                    "exponent1": 5,
                    "exponent1_shift": 1,
                    "exponent1_shifted": 1,
                    "first_shifted_bits": 1,
                    "high_byte_1": 1,
                    "input1_shifted": 1,
                    "input_1_shifted": 1,
                    "operand1_shifted": 1,
                    "overflow_adjusted_result": 1,
                    "shift1": 2,
                    "shift_1": 1,
                    "shift_count": 1,
                    "shifted_bit": 1,
                    "shifted_bits": 1,
                    "shifted_bits1": 1,
                    "shifted_byte1": 1,
                    "shifted_input_1": 2,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "sign_a": 1,
                    "upper_byte1": 1,
                    "value1_shifted": 1
                },
                "uVar4": {
                    "shift_product": 1
                },
                "uVar5": {
                    "shifted_product": 1
                },
                "uVar6": {
                    "exponent2": 1,
                    "mantissa_a": 1,
                    "multiplication_result": 2,
                    "multiplication_result_lower": 1,
                    "multiplied_result": 3,
                    "multiplied_value": 1,
                    "product": 5,
                    "product_low": 3,
                    "product_lower": 2,
                    "product_lower_bits": 1,
                    "result_upper": 1,
                    "shifted_temp_product": 1,
                    "temp": 2,
                    "temp1": 3,
                    "temp_2": 1,
                    "temp_result": 1,
                    "temp_var_3": 1
                },
                "uVar7": {
                    "shifted_carry": 1
                },
                "uVar8": {
                    "adjusted_result": 1,
                    "adjusted_shift": 1,
                    "bit_0_to_31_result": 1,
                    "combined_float": 1,
                    "combined_inputs": 1,
                    "combined_result": 1,
                    "combined_value": 1,
                    "final_result": 1,
                    "final_value": 1,
                    "product_high": 1,
                    "result": 1,
                    "result_adjusted": 1,
                    "result_temp": 1,
                    "result_with_sign": 1,
                    "shifted_input1": 1,
                    "shifted_input2": 1,
                    "shifted_num": 1,
                    "shifted_result": 2,
                    "sign_and_exponent": 1,
                    "signed_result": 1,
                    "significand": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_3": 1,
                    "temp_result": 1,
                    "temp_result_shifted": 1,
                    "temp_var_2": 1
                },
                "uVar9": {
                    "carry_mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002d88",
                "FUN_08002b48",
                "FUN_08002ec0",
                "FUN_08004a30",
                "FUN_08002f28",
                "FUN_08004a84",
                "FUN_08002cb0",
                "FUN_0800483c",
                "FUN_08002bf0",
                "FUN_08003330"
            ],
            "code": "\nuint calculate_floating_point_value_08000cec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int difference;\n  uint product;\n  int temp_exponent;\n  uint temp2;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp2 = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp2 = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp2 | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_08000e3c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + input4;\n  temp2 = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp2 & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    temp_exponent = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,difference);\n      temp_exponent = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && temp_exponent < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && temp_exponent < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(difference,1);\n    temp2 = sum - 0x80;\n    is_zero = temp2 == 0;\n    exponent1 = temp2;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp2 & 0x80000000 | result;\n    temp2 = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp2,0xfd);\n    is_zero = temp2 == 0xfd;\n    exponent1 = temp2 - 0xfd;\n    if (temp2 < 0xfe) {\n      result = result + temp2 * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp2 + 0x19) < 0;\n    if (temp2 == 0xffffffe7 || is_zero != SCARRY4(temp2,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp2 != 0xffffffe7 && is_zero == SCARRY4(temp2,0x19)) {\n      exponent1 = (result << 1) >> (-temp2 & 0xff);\n      temp2 = result << (temp2 + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp2 << 1) == 0) {\n        exponent1 = exponent1 & ~(temp2 >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_08000e3c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_value_08000cec",
            "entrypoint": "0x08000cec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000cec": "calculate_floating_point_value_08000cec",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "temp_exponent",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000e54": {
            "additional_data": {
                "FUN_08000e54": {
                    "calculate_float": 14,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 6,
                    "calculate_floating_point_number": 1,
                    "calculate_floating_point_value": 1,
                    "improve_float_conversion": 1,
                    "reverse_bits": 1,
                    "reverse_float_bits": 2
                },
                "SBORROW4": {
                    "signed_borrow": 1,
                    "signed_borrow_check": 2
                },
                "SCARRY4": {
                    "signed_carry": 1,
                    "signed_carry_check": 2
                },
                "bVar7": {
                    "b_var7": 1,
                    "check": 1,
                    "check_flag": 1,
                    "condition": 7,
                    "condition1": 5,
                    "condition_1": 1,
                    "flag1": 7,
                    "is_zero": 7,
                    "is_zero1": 1
                },
                "bVar8": {
                    "b_var8": 1,
                    "borrows": 1,
                    "carry": 1,
                    "carry1": 1,
                    "carry_check": 1,
                    "carry_flag": 1,
                    "check_flag2": 1,
                    "compare": 1,
                    "comparison_result": 1,
                    "condition2": 7,
                    "condition_2": 1,
                    "flag2": 7,
                    "is_carry": 2,
                    "is_equal": 1,
                    "is_negative": 1,
                    "is_overflow": 2,
                    "is_zero2": 1
                },
                "bVar9": {
                    "b_var9": 1,
                    "carry": 2,
                    "carry2": 1,
                    "carry_check": 1,
                    "check_flag3": 1,
                    "condition3": 6,
                    "condition_3": 1,
                    "flag": 1,
                    "flag3": 7,
                    "has_borrow": 1,
                    "is_borrow": 2,
                    "is_underflow": 1,
                    "overflow": 3,
                    "overflow_check": 1,
                    "overflow_flag": 1,
                    "temp_overflow": 1
                },
                "iVar10": {
                    "temp5": 1
                },
                "iVar3": {
                    "bit_diff": 1,
                    "diff": 6,
                    "diff_exponent": 1,
                    "difference": 12,
                    "exponent_difference": 2,
                    "temp1": 1,
                    "temp3": 6,
                    "temp_var3": 2
                },
                "iVar5": {
                    "adjusted_diff": 1,
                    "exponent_sum": 1,
                    "result": 1,
                    "shift_amount": 1,
                    "shifted_difference1": 1,
                    "sum": 4,
                    "sum_diff": 2,
                    "sum_plus127": 1,
                    "sum_with_carry": 1,
                    "temp2": 2,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 6,
                    "temp_var": 1,
                    "temp_var5": 2,
                    "tmp2": 1,
                    "updated_difference": 2
                },
                "param_1": {
                    "float1": 7,
                    "float_1": 1,
                    "float_bits1": 1,
                    "input1": 11,
                    "input_1": 1,
                    "input_float1": 1,
                    "input_val1": 1,
                    "n1": 1,
                    "num1": 1,
                    "number1": 1,
                    "value1": 3,
                    "value_1": 1,
                    "x": 1
                },
                "param_2": {
                    "float2": 7,
                    "float_2": 1,
                    "float_bits2": 1,
                    "input2": 11,
                    "input_2": 1,
                    "input_float2": 1,
                    "input_val2": 1,
                    "n2": 1,
                    "num2": 1,
                    "number2": 1,
                    "value2": 3,
                    "value_2": 1,
                    "y": 1
                },
                "param_3": {
                    "arg3": 1,
                    "constant": 1,
                    "flag": 3,
                    "float3": 2,
                    "float_sign_mask": 1,
                    "input3": 7,
                    "input_parameter": 1,
                    "offset": 1,
                    "param3": 5,
                    "precision": 1,
                    "undefined": 2,
                    "undefined1": 1,
                    "undefined_param": 2,
                    "value3": 1,
                    "var3": 1,
                    "z": 1
                },
                "param_4": {
                    "arg4": 1,
                    "bit_offset": 1,
                    "bitmask": 1,
                    "constant2": 1,
                    "float3": 2,
                    "float4": 2,
                    "float_exponent_mask": 1,
                    "input3": 1,
                    "input4": 7,
                    "input_val3": 1,
                    "param4": 4,
                    "rounding_mode": 1,
                    "scale_factor": 1,
                    "shift": 2,
                    "shift_count": 1,
                    "undefined_var": 1,
                    "value4": 1,
                    "var4": 1,
                    "w": 1
                },
                "uVar1": {
                    "bit_mask": 2,
                    "bit_shift1": 1,
                    "bit_shifted_float2": 1,
                    "bit_shifted_input2_value": 1,
                    "bit_shifted_number2": 1,
                    "bitwise_shifted_float2": 1,
                    "bitwise_shifted_input_float2": 1,
                    "exponent1": 1,
                    "hidden_var1": 1,
                    "mask1": 2,
                    "mul_shifted": 1,
                    "normalized_float1": 1,
                    "normalized_input_2": 1,
                    "rem1": 1,
                    "result1": 1,
                    "shifted_input2": 1,
                    "shifted_input_val1": 1,
                    "temp1": 10,
                    "temp_var1": 2
                },
                "uVar2": {
                    "bit_shift2": 1,
                    "bit_shifted_float1": 1,
                    "bit_shifted_input1_value": 1,
                    "bit_shifted_number1": 1,
                    "bitwise_shifted_float1": 1,
                    "bitwise_shifted_input_float1": 1,
                    "exponent2": 1,
                    "extracted1": 1,
                    "hidden_var2": 1,
                    "mask2": 1,
                    "normalized_float2": 1,
                    "normalized_input_1": 1,
                    "result2": 1,
                    "shifted_bits": 1,
                    "shifted_input1": 1,
                    "shifted_input_val2": 1,
                    "temp1": 1,
                    "temp2": 10,
                    "temp_var2": 2,
                    "u8_1": 1,
                    "u_var2": 1
                },
                "uVar4": {
                    "adjusted_exponent": 1,
                    "bit_shift3": 1,
                    "count": 1,
                    "iteration": 1,
                    "rem2": 1,
                    "shift": 1,
                    "shifted_difference": 3,
                    "sum": 3,
                    "temp": 3,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 6,
                    "temp_var4": 2,
                    "test_value": 1,
                    "tmp1": 1,
                    "u8_2": 1
                },
                "uVar6": {
                    "final_result": 1,
                    "output_val": 1,
                    "result": 20,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 5,
                    "temp_var6": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08002f28",
                "FUN_0800483c",
                "FUN_08003330"
            ],
            "code": "\nuint calculate_float_value_08000e54(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool is_zero;\n  bool condition2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, input4 == 0xff)) {\nLAB_08000e4a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (input4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08000e00:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_08000e4a;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = input4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          input4 = input4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_08000e6c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08000e00;\n        goto LAB_08000e4a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_08000e6c:\n    difference = temp2 - input4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = signed_carry_check(difference,0x7f);\n      temp5 = difference + 0x7f;\n      is_zero = temp5 < 0;\n      condition2 = temp5 == 0;\n      if (!condition2 && is_zero == flag3) {\n        flag3 = signed_borrow_check(0xff,temp5);\n        is_zero = 0xff - temp5 < 0;\n        condition2 = temp5 == 0xff;\n      }\n      if (!condition2 && is_zero == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!condition2 && is_zero == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow_check(temp5,1);\n      temp4 = difference + 0x7e;\n      is_zero = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= temp2;\n      if (!is_zero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = difference + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        is_zero = temp2 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      condition2 = signed_borrow_check(temp4,0xfd);\n      is_zero = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != condition2) {\n      is_zero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || is_zero != signed_carry_check(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || is_zero != signed_carry_check(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_value_08000e54",
            "entrypoint": "0x08000e54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000e54": "calculate_float_value_08000e54",
                "SBORROW4": "signed_borrow_check",
                "SCARRY4": "signed_carry_check",
                "bVar7": "is_zero",
                "bVar8": "condition2",
                "bVar9": "flag3",
                "iVar3": "difference",
                "iVar5": "temp5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000f9c": {
            "additional_data": {
                "FUN_08000f9c": {
                    "binary_operation": 1,
                    "calculate": 1,
                    "calculate_maximum": 1,
                    "calculate_param1": 1,
                    "calculate_param1_result": 1,
                    "calculate_result": 4,
                    "calculate_unsigned_arithmetic": 1,
                    "check_and_modify_parameters": 1,
                    "check_integer_overflow": 2,
                    "check_overflow": 8,
                    "check_overflow_and_operation": 1,
                    "check_overflow_and_sign": 1,
                    "check_overflow_and_xor": 1,
                    "checksum": 1,
                    "multiply_and_check": 1,
                    "multiply_and_check_overflow": 1,
                    "multiply_and_compare": 1,
                    "perform_operation": 1,
                    "process_inputs": 1,
                    "validate_inputs": 1
                },
                "bVar1": {
                    "is_combined_input_negative": 2,
                    "is_negative": 23,
                    "is_negative_combined": 1,
                    "is_negative_xor": 2,
                    "is_overflow": 1,
                    "is_xor_negative": 2
                },
                "bVar5": {
                    "is_combined_input_zero": 3,
                    "is_combined_zero": 1,
                    "is_result_zero": 1,
                    "is_zero": 24,
                    "is_zero_combined": 1,
                    "is_zero_combined_input": 1
                },
                "input_1_bit_and": {
                    "input_1_bit_and": 1
                },
                "input_2_bit_and": {
                    "input_2_bit_and": 1
                },
                "param_1": {
                    "first_number": 2,
                    "input1": 5,
                    "input_1": 14,
                    "input_param1": 1,
                    "input_value_1": 1,
                    "modified_input_1": 1,
                    "multiplicand": 1,
                    "num1": 1,
                    "output": 2,
                    "result": 2,
                    "value1": 1
                },
                "param_1_doubled_neg": {
                    "input_1_doubled_negative": 1
                },
                "param_1_output": {
                    "output": 1
                },
                "param_1_result": {
                    "result": 1
                },
                "param_1_times_two": {
                    "input_1_times_negative_two": 1
                },
                "param_2": {
                    "input2": 7,
                    "input_2": 15,
                    "input_param2": 1,
                    "input_value_2": 1,
                    "is_input2_negative": 1,
                    "mask": 1,
                    "multiplier": 1,
                    "num2": 1,
                    "second_number": 2,
                    "value2": 1
                },
                "param_2_output": {
                    "output": 1
                },
                "return": {
                    "result": 1
                },
                "return_type": {
                    "result": 1
                },
                "uVar2": {
                    "double_1": 1,
                    "double_first_number": 1,
                    "double_input1": 1,
                    "double_input_1": 4,
                    "double_input_param1": 1,
                    "double_num1": 1,
                    "doubled_input_1": 1,
                    "doubled_multiplicand": 1,
                    "first_number_doubled": 1,
                    "input1_double": 1,
                    "input1_doubled": 2,
                    "input1_mult_2": 1,
                    "input1_times2": 1,
                    "input1_times_2": 1,
                    "input_1_double": 1,
                    "input_1_doubled": 1,
                    "input_1_shifted": 1,
                    "input_1_times_2": 2,
                    "input_1_times_two": 1,
                    "modified_input_value_1": 1,
                    "multiply_2_input_1": 1,
                    "temp_1": 1,
                    "tmp1": 1,
                    "twice_input1": 1,
                    "twice_input_1": 1,
                    "value1_double": 1
                },
                "uVar3": {
                    "double_2": 1,
                    "double_input2": 1,
                    "double_input_2": 4,
                    "double_input_param2": 1,
                    "double_num2": 1,
                    "double_second_number": 1,
                    "doubled_input_2": 1,
                    "doubled_multiplier": 1,
                    "input2_double": 1,
                    "input2_doubled": 2,
                    "input2_mult_2": 1,
                    "input2_times2": 1,
                    "input2_times_2": 1,
                    "input_2_double": 1,
                    "input_2_doubled": 1,
                    "input_2_shifted": 1,
                    "input_2_times_2": 2,
                    "input_2_times_two": 1,
                    "modified_input_value_2": 1,
                    "multiply_2_input_2": 1,
                    "second_number_doubled": 1,
                    "temp_2": 1,
                    "tmp2": 1,
                    "twice_input2": 1,
                    "twice_input_2": 1,
                    "value2_double": 1
                },
                "uVar4": {
                    "combined_input": 6,
                    "combined_input_1_2": 1,
                    "combined_input_masked": 1,
                    "combined_inputs": 11,
                    "combined_inputs_masked": 1,
                    "combined_num": 1,
                    "combined_numbers": 2,
                    "combined_result": 1,
                    "combined_value": 2,
                    "combined_values": 2,
                    "or_result": 1,
                    "temp_3": 1,
                    "tmp3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001004"
            ],
            "code": "\nuint check_integer_overflow_08000f9c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_integer_overflow_08000f9c",
            "entrypoint": "0x08000f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000f9c": "check_integer_overflow_08000f9c",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000ffc": {
            "additional_data": {
                "FUN_08000ffc": {
                    "concatenate_and_return": 1,
                    "concatenate_integers": 28,
                    "concatenate_numbers": 1
                },
                "param_1": {
                    "first_integer": 10,
                    "input1": 2,
                    "integer1": 14,
                    "num1": 2,
                    "second_number": 1,
                    "source_value": 1
                },
                "param_2": {
                    "first_number": 1,
                    "input2": 2,
                    "integer2": 14,
                    "num2": 2,
                    "second_integer": 10,
                    "target_value": 1
                }
            },
            "called": [
                "FUN_08001004"
            ],
            "calling": [
                "FUN_08001050",
                "FUN_08001064"
            ],
            "code": "\nvoid concatenate_integers_08000ffc(undefined4 integer1,undefined4 integer2)\n\n{\n  concatenate_integers_08000ffc_08001004(integer2,integer1);\n  return;\n}\n\n",
            "current_name": "concatenate_integers_08000ffc",
            "entrypoint": "0x08000ffc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000ffc": "concatenate_integers_08000ffc",
                "param_1": "integer1",
                "param_2": "integer2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001004": {
            "additional_data": {
                "FUN_08001004": {
                    "combine_params": 1,
                    "concat_integers": 1,
                    "concatenate_and_return_64bit": 1,
                    "concatenate_and_set_long": 1,
                    "concatenate_integer": 1,
                    "concatenate_integers": 13,
                    "concatenate_parameters": 4,
                    "concatenate_params": 3,
                    "concatenate_uintegers": 1,
                    "concatenate_values": 4,
                    "concatenate_variables": 1
                },
                "param_1": {
                    "first_integer": 10,
                    "first_param": 3,
                    "first_parameter": 4,
                    "first_part": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "integer1": 5,
                    "num_1": 1,
                    "value1": 4,
                    "value_1": 1
                },
                "param_2": {
                    "input_param2": 1,
                    "input_param_2": 1,
                    "integer2": 5,
                    "num_2": 1,
                    "second_integer": 10,
                    "second_param": 3,
                    "second_parameter": 4,
                    "second_part": 1,
                    "value2": 4,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08000f9c"
            ],
            "calling": [
                "FUN_08000ffc",
                "FUN_08001028",
                "FUN_08001014"
            ],
            "code": "\nundefined8 concatenate_integers_08001004(undefined4 first_integer,undefined4 second_integer)\n\n{\n  check_integer_overflow_08000f9c();\n  return CONCAT44(second_integer,first_integer);\n}\n\n",
            "current_name": "concatenate_integers_08001004",
            "entrypoint": "0x08001004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001004": "concatenate_integers_08001004",
                "param_1": "first_integer",
                "param_2": "second_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001014": {
            "additional_data": {
                "FUN_08001014": {
                    "check_concatenated_integers": 4,
                    "check_concatenation_result": 12,
                    "check_if_concatenated_integers_not_zero": 1,
                    "check_if_concatenation_successful": 3,
                    "check_if_integer_concatenated": 1,
                    "check_nonzero_char_after_concat": 1,
                    "check_nonzero_input": 1,
                    "check_nonzero_value": 1,
                    "is_concatenation_successful": 6,
                    "is_non_zero_char": 1
                },
                "in_ZR": {
                    "character": 1,
                    "check_result": 1,
                    "concatenation_result": 4,
                    "input_char": 1,
                    "is_concatenated_integer_nonzero": 1,
                    "is_concatenation_successful": 1,
                    "is_nonzero": 1,
                    "is_successful": 1,
                    "result": 18,
                    "result_of_concatenation": 2
                }
            },
            "called": [
                "FUN_08001004"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nbool check_concatenation_result_08001014(void)\n\n{\n  char result;\n  \n  concatenate_integers_08001004();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_concatenation_result_08001014",
            "entrypoint": "0x08001014",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001014": "check_concatenation_result_08001014",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001028": {
            "additional_data": {
                "FUN_08001028": {
                    "check_concatenated_integers": 1,
                    "check_concatenation_result": 2,
                    "check_empty_string": 1,
                    "check_for_null_termination": 1,
                    "check_if_concatenated_integers_are_empty": 1,
                    "check_if_concatenated_integers_is_empty": 1,
                    "check_if_concatenation_completed": 1,
                    "check_if_concatenation_empty": 1,
                    "check_if_concatenation_is_complete": 1,
                    "check_if_concatenation_is_empty": 3,
                    "check_if_concatenation_successful": 6,
                    "check_if_empty": 2,
                    "check_input_termination": 1,
                    "check_null_termination": 1,
                    "check_string_termination": 1,
                    "is_concatenation_complete": 2,
                    "is_concatenation_successful": 3,
                    "is_cy_null": 1,
                    "is_null_terminated": 1
                },
                "in_CY": {
                    "character_input": 1,
                    "concatenated_integers": 1,
                    "concatenated_result": 1,
                    "concatenated_string_termination_char": 1,
                    "concatenation_result": 7,
                    "end_of_string_marker": 1,
                    "final_char": 1,
                    "input_char": 4,
                    "input_character": 12,
                    "result": 1,
                    "termination_character": 1
                }
            },
            "called": [
                "FUN_08001004"
            ],
            "calling": [
                "FUN_08002ee8",
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "code": "\nbool check_if_concatenated_integers_are_empty_08001028(void)\n\n{\n  char input_character;\n  \n  concatenate_integers_08001004();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_concatenated_integers_are_empty_08001028",
            "entrypoint": "0x08001028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001028": "check_if_concatenated_integers_are_empty_08001028",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001050": {
            "additional_data": {
                "FUN_08001050": {
                    "check_concatenated_integers": 7,
                    "check_concatenated_values": 1,
                    "check_concatenation_result": 12,
                    "check_zero_or_carry": 1,
                    "concatenate_and_check": 1,
                    "concatenate_integers": 6,
                    "concatenate_integers_and_check_zero": 1,
                    "concatenate_integers_and_return_result": 1,
                    "concatenation_check": 1
                },
                "concatenate_integers_08000ffc": {
                    "concatenate_integers": 1
                },
                "in_CY": {
                    "carry": 2,
                    "carry_bit": 1,
                    "carry_flag": 8,
                    "carry_in": 1,
                    "carry_result": 1,
                    "has_carry": 2,
                    "is_carry": 6,
                    "is_carry_result": 2,
                    "is_carry_set": 5,
                    "is_concatenation_successful": 1,
                    "zero_flag": 2
                },
                "in_ZR": {
                    "carry": 1,
                    "carry_flag": 1,
                    "is_zero": 5,
                    "is_zero_flag": 1,
                    "is_zero_result": 16,
                    "zero": 1,
                    "zero_flag": 4,
                    "zero_result": 1,
                    "zero_result_flag": 1
                }
            },
            "called": [
                "FUN_08000ffc"
            ],
            "calling": [
                "FUN_08002ee8"
            ],
            "code": "\nbool check_concatenation_result_08001050(void)\n\n{\n  undefined is_zero_result;\n  undefined carry_flag;\n  \n  concatenate_integers();\n  return !(bool)carry_flag || (bool)is_zero_result;\n}\n\n",
            "current_name": "check_concatenation_result_08001050",
            "entrypoint": "0x08001050",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001050": "check_concatenation_result_08001050",
                "concatenate_integers_08000ffc": "concatenate_integers",
                "in_CY": "carry_flag",
                "in_ZR": "is_zero_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001064": {
            "additional_data": {
                "FUN_08001064": {
                    "check_concatenation_result": 5,
                    "check_for_null_terminated_string": 1,
                    "check_if_concatenated_integer_is_null": 1,
                    "check_if_concatenated_integers_are_empty": 1,
                    "check_if_concatenated_integers_null": 1,
                    "check_if_concatenation_is_empty": 2,
                    "check_if_concatenation_is_successful": 1,
                    "check_if_concatenation_succeeded": 2,
                    "check_if_concatenation_successful": 4,
                    "check_if_converted_to_string": 1,
                    "check_null_terminated": 1,
                    "is_concatenated_integers_zero": 1,
                    "is_concatenation_empty": 1,
                    "is_concatenation_successful": 8,
                    "is_empty_string": 1
                },
                "concatenate_integers_08000ffc": {
                    "perform_integer_concatenation": 1
                },
                "in_CY": {
                    "concatenated_result": 1,
                    "concatenated_string": 1,
                    "concatenation_result": 12,
                    "concatenation_status": 1,
                    "converted_character": 1,
                    "indicator_variable": 1,
                    "input_char": 2,
                    "input_character": 8,
                    "is_null_termination": 1,
                    "is_null_terminator": 1,
                    "result": 1,
                    "termination_character": 1
                }
            },
            "called": [
                "FUN_08000ffc"
            ],
            "calling": [
                "FUN_08004a84",
                "FUN_0800483c"
            ],
            "code": "\nbool check_if_concatenation_is_successful_08001064(void)\n\n{\n  char concatenation_result;\n  \n  perform_integer_concatenation();\n  return concatenation_result == '\\0';\n}\n\n",
            "current_name": "check_if_concatenation_is_successful_08001064",
            "entrypoint": "0x08001064",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001064": "check_if_concatenation_is_successful_08001064",
                "concatenate_integers_08000ffc": "perform_integer_concatenation",
                "in_CY": "concatenation_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001078": {
            "additional_data": {
                "FUN_08001078": {
                    "convert_negative_integer": 1,
                    "convert_number_to_twos_complement": 1,
                    "convert_to_float": 1,
                    "convert_to_integer": 2,
                    "convert_to_signed_int": 1,
                    "convert_to_signed_integer": 3,
                    "convert_to_twos_complement": 2,
                    "convert_unsigned_int_to_signed_int": 1,
                    "convert_value": 1,
                    "decode_signed_integer": 1,
                    "decode_value": 1,
                    "extract_and_convert": 2,
                    "extract_and_convert_number": 1,
                    "extract_and_shift": 1,
                    "extract_integer": 1,
                    "extract_integer_from_binary": 1,
                    "reverse_and_adjust": 1,
                    "reverse_integer": 1,
                    "reverse_number": 3,
                    "reverse_number_bits": 1,
                    "reverse_transform": 1,
                    "reverse_unsigned_integer": 1,
                    "transform_unsigned_integer": 1
                },
                "param_1": {
                    "input": 7,
                    "input_num": 1,
                    "input_number": 5,
                    "input_value": 13,
                    "maximum_value": 1,
                    "num": 1,
                    "number": 1,
                    "value": 2
                },
                "return_value": {
                    "converted_value": 1
                },
                "uVar1": {
                    "adjusted_result": 1,
                    "adjusted_value": 1,
                    "converted_value": 1,
                    "modified_number": 2,
                    "shift_count": 2,
                    "shifted": 1,
                    "shifted_bits": 2,
                    "shifted_input": 5,
                    "shifted_num": 2,
                    "shifted_number": 4,
                    "shifted_result": 1,
                    "shifted_value": 9
                },
                "uVar2": {
                    "adjustment": 1,
                    "difference": 18,
                    "difference_shift": 1,
                    "difference_value": 1,
                    "offset": 1,
                    "shift_amount": 4,
                    "shift_value": 1,
                    "shifted_difference": 3,
                    "shifted_value": 1
                },
                "uVar3": {
                    "converted_value": 1,
                    "masked_value": 1,
                    "result": 1,
                    "shift_amount": 1,
                    "shifted_and_masked_number": 1,
                    "shifted_input": 3,
                    "shifted_result": 2,
                    "transformed_value": 1
                },
                "uVar4": {
                    "negative_value": 1,
                    "result": 1,
                    "shift_amount": 1,
                    "shifted_bits_and_sign_extended": 1,
                    "shifted_input": 1,
                    "shifted_result": 1,
                    "sign_extended_value": 1
                },
                "uVar5": {
                    "converted_number": 1,
                    "negative_result": 1,
                    "result": 1
                },
                "uVar6": {
                    "shifted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800411c",
                "FUN_08002f28",
                "FUN_0800426c"
            ],
            "code": "\nuint convert_to_signed_integer_08001078(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_to_signed_integer_08001078",
            "entrypoint": "0x08001078",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001078": "convert_to_signed_integer_08001078",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080010c4": {
            "additional_data": {
                "FUN_080010c4": {
                    "calculate_shifted_value": 3,
                    "decode_and_shift": 3,
                    "decode_integer": 2,
                    "decode_param": 2,
                    "decode_unsigned": 1,
                    "decode_value": 3,
                    "extract_bitfield": 1,
                    "extract_bits": 1,
                    "extract_number": 1,
                    "reverse_bits": 10,
                    "reverse_bits_and_shift": 1,
                    "reverse_unsigned_integer": 1,
                    "shift_and_mask": 1
                },
                "param_1": {
                    "input": 8,
                    "input_value": 18,
                    "number": 2,
                    "value": 3
                },
                "uVar1": {
                    "bit_count": 1,
                    "decoded_value": 1,
                    "result": 4,
                    "shift_amount": 18,
                    "shift_count": 1,
                    "shift_value": 2,
                    "shifted_number": 1,
                    "shifted_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nuint reverse_bits_and_shift_080010c4(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_shift_080010c4",
            "entrypoint": "0x080010c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080010c4": "reverse_bits_and_shift_080010c4",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001104": {
            "additional_data": {
                "FUN_08001104": {
                    "initialize_and_update_memory": 25,
                    "initialize_memory": 1,
                    "initialize_memory_and_address": 1,
                    "initialize_memory_and_update_address": 3,
                    "initialize_program": 1
                },
                "get_data_value_08002214": {
                    "get_data_value": 7,
                    "get_seconds": 1,
                    "get_value_divided_by_1000": 1
                },
                "initialize_memory_08001214": {
                    "initialize_memory": 10
                },
                "param_1": {
                    "data_value": 9,
                    "input_param": 5,
                    "input_parameter": 2,
                    "input_value": 12,
                    "new_value": 1,
                    "param": 1,
                    "value": 1
                },
                "uVar1": {
                    "data_divided": 1,
                    "data_in_milliseconds": 1,
                    "data_value": 22,
                    "data_value_divided": 1,
                    "data_value_normalized": 1,
                    "divided_value": 1,
                    "seconds": 1,
                    "value": 1,
                    "value_divided": 1,
                    "value_divided_by_1000": 1
                },
                "update_memory_address_08001194": {
                    "update_memory_address": 10
                }
            },
            "called": [
                "FUN_08001194",
                "FUN_08002214",
                "FUN_08001214"
            ],
            "calling": [
                "FUN_08001128",
                "FUN_0800209c"
            ],
            "code": "\nundefined4 initialize_memory_and_update_address_08001104(undefined4 input_value)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value();\n  initialize_memory(data_value / 1000);\n  update_memory_address(0xffffffff,input_value,0);\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_and_update_address_08001104",
            "entrypoint": "0x08001104",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001104": "initialize_memory_and_update_address_08001104",
                "get_data_value_08002214": "get_data_value",
                "initialize_memory_08001214": "initialize_memory",
                "param_1": "input_value",
                "uVar1": "data_value",
                "update_memory_address_08001194": "update_memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001128": {
            "additional_data": {
                "FUN_08001128": {
                    "configure_and_initialize_memory": 1,
                    "enable_memory_configurations": 1,
                    "initialize_and_configure_memory": 12,
                    "initialize_configuration": 1,
                    "initialize_memory_and_config": 1,
                    "initialize_memory_and_configure_addresses": 2,
                    "initialize_program": 1,
                    "initialize_system": 12
                },
                "_DAT_40022000": {
                    "_dat_register": 1,
                    "memory_config": 1,
                    "memory_configuration_register": 1,
                    "register_bit_mask": 1,
                    "register_bits": 1,
                    "register_flags": 5,
                    "register_status": 1,
                    "register_value": 3,
                    "status_register": 1,
                    "system_config": 1,
                    "system_flags": 3,
                    "system_status": 1
                },
                "configure_and_update_memory_addresses_08004ccc": {
                    "configure_and_update_addresses": 1,
                    "configure_and_update_memory": 2,
                    "configure_and_update_memory_addresses": 18,
                    "configure_memory": 1,
                    "configure_memory_addresses": 8,
                    "configure_update_memory_addresses": 1
                },
                "configure_register_bits_08001170": {
                    "configure_bits": 2,
                    "configure_register_bits": 23,
                    "configure_registers": 3,
                    "configure_status_register_bits": 1,
                    "configure_system_registers": 1,
                    "set_register_bits": 1
                },
                "initialize_memory_and_update_address_08001104": {
                    "initialize_memory": 16,
                    "initialize_memory_and_address": 2,
                    "initialize_memory_and_update_address": 11,
                    "initialize_memory_update_address": 1
                }
            },
            "called": [
                "FUN_08004ccc",
                "FUN_08001104",
                "FUN_08001170"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\n\n\nundefined4 initialize_memory_and_configure_addresses_08001128(void)\n\n{\n  _DAT_40022000 = _DAT_40022000 | 0x10;\n  configure_register_bits(3);\n  initialize_memory(0);\n  configure_and_update_memory_addresses();\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_and_configure_addresses_08001128",
            "entrypoint": "0x08001128",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001128": "initialize_memory_and_configure_addresses_08001128",
                "configure_and_update_memory_addresses_08004ccc": "configure_and_update_memory_addresses",
                "configure_register_bits_08001170": "configure_register_bits",
                "initialize_memory_and_update_address_08001104": "initialize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800114c": {
            "additional_data": {
                "": {
                    "": 2
                },
                "DAT_20000244": {
                    "count": 1,
                    "counter": 22,
                    "data": 1,
                    "data_counter": 1,
                    "data_value": 1
                },
                "FUN_0800114c": {
                    "increment_counter": 24,
                    "increment_dat_20000244": 1,
                    "increment_data": 1,
                    "increment_data_counter": 1,
                    "increment_data_value": 1,
                    "increment_value": 2,
                    "increment_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nvoid increment_data_counter_0800114c(void)\n\n{\n  DAT_20000244 = DAT_20000244 + 1;\n  return;\n}\n\n",
            "current_name": "increment_data_counter_0800114c",
            "entrypoint": "0x0800114c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800114c": "increment_data_counter_0800114c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800115c": {
            "additional_data": {
                "DAT_20000244": {
                    "constant_value": 1,
                    "dat_value": 1,
                    "data": 10,
                    "data_address": 1,
                    "data_value": 7,
                    "data_variable": 2,
                    "global_variable": 1,
                    "result": 1
                },
                "FUN_0800115c": {
                    "get_constant_value": 1,
                    "get_dat_value": 2,
                    "get_data": 11,
                    "get_data_pointer": 1,
                    "get_data_value": 13,
                    "get_data_variable": 2,
                    "get_global_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001530",
                "FUN_08001b58",
                "thunk_FUN_0800115c",
                "FUN_08001828",
                "thunk_FUN_0800115c",
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_08004c18",
                "FUN_0800209c",
                "FUN_080014e2",
                "FUN_08001938",
                "FUN_08001460"
            ],
            "code": "\nundefined4 get_data_value_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "current_name": "get_data_value_0800115c",
            "entrypoint": "0x0800115c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800115c": "get_data_value_0800115c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001168": {
            "called": [],
            "calling": [
                "FUN_08001b58",
                "thunk_FUN_08001168"
            ],
            "code": "\nvoid FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001168",
            "entrypoint": "0x08001168",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001168": "FUNC_08001168"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001170": {
            "additional_data": {
                "0x5fa0000": {
                    "bitmask2": 1,
                    "set_mask": 1
                },
                "0xf8ff": {
                    "bitmask1": 1,
                    "clear_mask": 1
                },
                "7": {
                    "bitmask3": 1
                },
                "8": {
                    "bit_shift": 1
                },
                "DAT_e000ed0c": {
                    "peripheral_register": 1
                },
                "FUN_08001170": {
                    "configure_gpio": 1,
                    "configure_hardware": 2,
                    "configure_memory_mapping": 1,
                    "configure_memory_protection": 1,
                    "configure_peripheral": 3,
                    "configure_register": 2,
                    "configure_register_bits": 2,
                    "configure_registers": 1,
                    "set_bits_in_register": 1,
                    "set_control_bits": 1,
                    "set_e000ed0c_bits": 1,
                    "set_memory_register_bits": 1,
                    "set_param_bits": 1,
                    "set_param_flags": 1,
                    "set_register_value": 2,
                    "update_bits_in_register": 1,
                    "update_config_bits": 1,
                    "update_configuration": 2,
                    "update_configuration_value": 1,
                    "update_control_reg": 1,
                    "update_control_register": 1,
                    "update_memory_address": 1,
                    "update_memory_value": 1,
                    "update_register_bits": 1
                },
                "_DAT_e000ed0c": {
                    "config_register": 1,
                    "configuration_register": 2,
                    "control_reg": 1,
                    "control_register": 2,
                    "current_configuration": 1,
                    "existing_value": 1,
                    "gpio_register": 1,
                    "hardware_configuration": 1,
                    "hardware_register": 1,
                    "memory_address": 1,
                    "memory_config": 1,
                    "memory_control_register": 1,
                    "memory_register": 1,
                    "memory_value": 1,
                    "parameter_flags": 1,
                    "peripheral_config_reg": 1,
                    "peripheral_config_register": 1,
                    "register": 2,
                    "register_value": 4
                },
                "param_1": {
                    "config_value": 3,
                    "configuration": 2,
                    "input_value": 10,
                    "memory_size": 1,
                    "new_value": 2,
                    "param": 1,
                    "peripheral_config": 1,
                    "peripheral_id": 1,
                    "pin_number": 1,
                    "protection_level": 1,
                    "register_value": 2,
                    "value": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_08004ccc",
                "FUN_08001128"
            ],
            "code": "\n\n\nvoid configure_register_bits_08001170(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | 0x5fa0000 | (input_value & 7) << 8;\n  return;\n}\n\n",
            "current_name": "configure_register_bits_08001170",
            "entrypoint": "0x08001170",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001170": "configure_register_bits_08001170",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001194": {
            "additional_data": {
                "FUN_08001194": {
                    "apply_transformation": 1,
                    "convert_and_store_value": 1,
                    "copy_bits": 1,
                    "decode_and_store_data": 2,
                    "extract_and_store_bits": 1,
                    "process_data": 2,
                    "reverse_bits_and_store": 2,
                    "set_bits_and_write_to_memory": 1,
                    "store_data": 1,
                    "update_data": 1,
                    "update_data_in_memory": 1,
                    "update_memory": 10,
                    "update_memory_address": 1,
                    "update_memory_value": 1,
                    "write_data_to_memory": 2,
                    "write_to_memory": 3
                },
                "param_1": {
                    "address": 13,
                    "data_offset": 1,
                    "index": 1,
                    "input": 1,
                    "input1": 1,
                    "input_value": 7,
                    "memory_address": 1,
                    "offset": 2,
                    "source_address": 1,
                    "src_bits": 1,
                    "value1": 2
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_mask1": 1,
                    "data": 8,
                    "data1": 2,
                    "data_high": 1,
                    "data_mask": 1,
                    "input2": 1,
                    "mask": 5,
                    "mask1": 2,
                    "mask_value": 1,
                    "mask_value1": 1,
                    "value": 2,
                    "value1": 2,
                    "value2": 3
                },
                "param_3": {
                    "bit_mask2": 1,
                    "bit_operation": 1,
                    "bit_value": 1,
                    "bitmask": 1,
                    "data": 2,
                    "data2": 2,
                    "data_bits": 1,
                    "data_low": 1,
                    "dest_bits": 1,
                    "input3": 1,
                    "mask": 9,
                    "mask2": 2,
                    "mask_value2": 1,
                    "value": 2,
                    "value2": 2,
                    "value3": 3
                },
                "uVar1": {
                    "bit_result": 1,
                    "bit_value": 1,
                    "bits_to_write": 1,
                    "bitwise_value": 1,
                    "converted_value": 1,
                    "data": 2,
                    "decoded_result": 1,
                    "memory_value": 2,
                    "processed_data": 1,
                    "result": 6,
                    "shifted_bits": 1,
                    "shifted_byte": 1,
                    "shifted_value": 2,
                    "updated_byte": 2,
                    "updated_data": 2,
                    "updated_value": 4,
                    "value": 2
                },
                "uVar2": {
                    "bits_to_shift": 1,
                    "difference": 1,
                    "num_bits": 2,
                    "shift": 2,
                    "shift_amount": 19,
                    "shift_amount1": 1,
                    "shift_count": 2,
                    "shift_offset": 1,
                    "shifted": 1,
                    "shifted_bits": 1
                },
                "uVar3": {
                    "adjusted_shift_amount": 1,
                    "bit_offset": 1,
                    "bit_position": 4,
                    "bits": 1,
                    "destination_address": 1,
                    "index": 4,
                    "mask": 1,
                    "new_shift": 1,
                    "offset": 1,
                    "offset_limit": 1,
                    "original_shift": 1,
                    "shift": 1,
                    "shift_amount": 2,
                    "shift_amount2": 1,
                    "shifted_bit": 1,
                    "shifted_bits": 1,
                    "shifted_index": 1,
                    "shifted_mask": 1,
                    "shifted_right": 1,
                    "shifted_value": 1,
                    "start_bit": 1,
                    "temp_value": 2,
                    "u_var3": 1
                },
                "uVar4": {
                    "add_value": 1,
                    "adjusted_bit_position": 1,
                    "adjusted_bits": 1,
                    "adjusted_shift_amount": 1,
                    "adjusted_shift_amount_plus4": 1,
                    "bit_range": 1,
                    "computed_value": 1,
                    "conditional_value": 1,
                    "derived_position": 1,
                    "end_bit": 1,
                    "increment": 1,
                    "limit": 2,
                    "new_shift_plus_four": 1,
                    "offset": 2,
                    "offset_threshold": 1,
                    "range": 1,
                    "shift_amount3": 1,
                    "shift_plus_four": 2,
                    "shifted_address": 1,
                    "shifted_amount": 1,
                    "shifted_index_plus4": 1,
                    "shifted_left": 1,
                    "shifted_value": 2,
                    "temp_offset": 1,
                    "temp_value": 1,
                    "u_var4": 1,
                    "updated_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004ccc",
                "FUN_08001104",
                "FUN_08004514",
                "FUN_08004e7c"
            ],
            "code": "\n\n\nvoid update_memory_address_08001194(uint address,uint data,uint mask)\n\n{\n  undefined result;\n  uint shift_amount;\n  uint bit_position;\n  uint shifted_value;\n  \n  bit_position = (uint)(_DAT_e000ed0c << 0x15) >> 0x1d;\n  shift_amount = 7 - bit_position;\n  shifted_value = bit_position + 4;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (shifted_value < 7) {\n    bit_position = 0;\n  }\n  shift_amount = (1 << (shift_amount & 0xff)) - 1;\n  if (6 < shifted_value) {\n    bit_position = bit_position - 3;\n  }\n  result = (undefined)\n          ((mask & (1 << (bit_position & 0xff)) - 1U | (data & shift_amount) << (bit_position & 0xff)) << 4);\n  if (-1 < (int)address) {\n    bit_position = address + 0xe000e100;\n  }\n  else {\n    shift_amount = 0xe000ed14;\n    bit_position = address & 0xf;\n  }\n  if (-1 < (int)address) {\n    *(undefined *)(bit_position + 0x300) = result;\n  }\n  else {\n    *(undefined *)(shift_amount + bit_position) = result;\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_address_08001194",
            "entrypoint": "0x08001194",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001194": "update_memory_address_08001194",
                "param_1": "address",
                "param_2": "data",
                "param_3": "mask",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar3": "bit_position",
                "uVar4": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080011fc": {
            "additional_data": {
                "FUN_080011fc": {
                    "set_bit": 10,
                    "set_bit_at_index": 3,
                    "set_bit_at_offset": 1,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 8,
                    "set_bit_in_memory": 5,
                    "set_bit_value": 3
                },
                "param_1": {
                    "array_index": 1,
                    "bit_index": 5,
                    "bit_number": 1,
                    "bit_position": 9,
                    "index": 6,
                    "input": 3,
                    "input_number": 1,
                    "offset": 1,
                    "position": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e7c"
            ],
            "code": "\nvoid set_bit_in_array_080011fc(uint bit_position)\n\n{\n  *(int *)((bit_position >> 5) * 4 + -0x1fff1f00) = 1 << (bit_position & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_array_080011fc",
            "entrypoint": "0x080011fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080011fc": "set_bit_in_array_080011fc",
                "param_1": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001214": {
            "additional_data": {
                "0x1000000": {
                    "max_value": 1
                },
                "DAT_e000ed23": {
                    "attribute": 1,
                    "config_value": 1,
                    "configuration": 1,
                    "constant": 1,
                    "constant_value": 2,
                    "control_register": 1,
                    "data_permission": 1,
                    "data_register_2": 1,
                    "data_value": 1,
                    "flag": 3,
                    "memory_value": 2,
                    "output_flag": 1,
                    "preset_value": 1,
                    "register2": 1,
                    "status": 5,
                    "status_flag": 2,
                    "status_register": 1,
                    "updated_value_2": 1
                },
                "FUN_08001214": {
                    "initialize_data": 5,
                    "initialize_hardware": 1,
                    "initialize_memory": 7,
                    "initialize_parameters": 2,
                    "initialize_registers": 3,
                    "set_data_limits": 1,
                    "set_data_registers": 1,
                    "set_limits": 1,
                    "set_memory_configuration": 1,
                    "set_memory_region": 1,
                    "set_parameter_value": 1,
                    "set_parameters": 5,
                    "set_value_and_flags": 1,
                    "update_memory_values": 1
                },
                "_DAT_e000e010": {
                    "access_mode": 1,
                    "access_rights": 1,
                    "additional_flags": 1,
                    "another_value": 1,
                    "config": 2,
                    "config_value": 1,
                    "constant": 1,
                    "constant_value": 2,
                    "control_flag": 1,
                    "control_register": 1,
                    "data_flag": 1,
                    "data_format": 1,
                    "data_register_4": 1,
                    "error_code": 2,
                    "flag": 7,
                    "limit": 1,
                    "register4": 1,
                    "seven": 1,
                    "some_other_value": 1,
                    "status_register": 1,
                    "updated_value_4": 1
                },
                "_DAT_e000e014": {
                    "adjusted_input": 1,
                    "base_address": 3,
                    "base_value": 1,
                    "data_limit": 1,
                    "data_pointer": 4,
                    "data_register": 1,
                    "data_register_1": 1,
                    "data_value": 1,
                    "initialized_memory_size": 1,
                    "limit": 1,
                    "memory_address": 4,
                    "memory_offset": 1,
                    "modified_value": 2,
                    "one_less_value": 1,
                    "parameter_minus_one": 1,
                    "register1": 1,
                    "register_offset": 1,
                    "updated_param_1": 1,
                    "updated_value": 2,
                    "updated_value_1": 1
                },
                "_DAT_e000e018": {
                    "additional_data": 1,
                    "additional_setting": 1,
                    "config_register": 1,
                    "count": 1,
                    "counter": 6,
                    "data_offset": 1,
                    "data_register": 1,
                    "data_register_3": 1,
                    "initialized_data": 1,
                    "initialized_value": 5,
                    "offset": 2,
                    "padding": 1,
                    "register3": 1,
                    "reserved_value": 1,
                    "some_value": 1,
                    "unused_variable": 1,
                    "updated_value_3": 1,
                    "zero": 1,
                    "zero_value": 1
                },
                "param_1": {
                    "data_size": 1,
                    "initial_value": 1,
                    "input_size": 1,
                    "input_value": 5,
                    "memory_size": 2,
                    "new_value": 1,
                    "size": 3,
                    "value": 17
                }
            },
            "called": [],
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "code": "\n\n\nundefined4 initialize_memory_08001214(int value)\n\n{\n  if (value - 1U < 0x1000000) {\n    _DAT_e000e014 = value - 1U;\n    DAT_e000ed23 = 0xf0;\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_memory_08001214",
            "entrypoint": "0x08001214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001214": "initialize_memory_08001214",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001240": {
            "additional_data": {
                "FUN_08001240": {
                    "set_bit_flag": 1,
                    "set_bit_if_equal_four": 1,
                    "set_bit_in_register": 1,
                    "set_flag": 12,
                    "set_flag_4": 1,
                    "set_flag_if_equals_four": 1,
                    "set_flag_if_four": 1,
                    "set_permission_flag": 1,
                    "update_data_flag": 1,
                    "update_e000e010_flag": 3,
                    "update_flags": 1,
                    "update_register": 1,
                    "update_register_flag": 2,
                    "update_status": 1,
                    "update_status_bits": 1,
                    "update_status_flag": 1,
                    "update_status_register": 1
                },
                "_DAT_e000e010": {
                    "data_register": 1,
                    "flag": 1,
                    "flag_register": 9,
                    "flags_register": 1,
                    "permission_flag": 1,
                    "register": 3,
                    "register_flag": 1,
                    "register_value": 6,
                    "state_register": 1,
                    "status_bits": 1,
                    "status_flag": 1,
                    "status_register": 4
                },
                "param_1": {
                    "bit_position": 1,
                    "flag": 4,
                    "flag_value": 13,
                    "input": 1,
                    "new_value": 1,
                    "permission": 1,
                    "status": 2,
                    "status_flag": 1,
                    "value": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_08004514"
            ],
            "code": "\n\n\nvoid set_bit_flag_08001240(int flag_value)\n\n{\n  if (flag_value == 4) {\n    _DAT_e000e010 = _DAT_e000e010 | 4;\n  }\n  else {\n    _DAT_e000e010 = _DAT_e000e010 & 0xfffffffb;\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_flag_08001240",
            "entrypoint": "0x08001240",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001240": "set_bit_flag_08001240",
                "param_1": "flag_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001258": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_08001258(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08001258",
            "entrypoint": "0x08001258",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08001258": "FUNC_08001258"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08001264": {
            "additional_data": {
                "FUN_08001264": {
                    "decode_and_update_registers": 1,
                    "process_bits": 1,
                    "process_data": 4,
                    "process_input": 1,
                    "process_params": 2,
                    "set_bits_based_on_criteria": 1,
                    "set_flags": 1,
                    "update_bits": 6,
                    "update_bitwise_flags": 1,
                    "update_data": 2,
                    "update_flags": 3,
                    "update_flags_and_registers": 1,
                    "update_flags_and_values": 1,
                    "update_flags_based_on_mask": 1,
                    "update_parameter_flags": 1,
                    "update_params": 1,
                    "update_permissions": 1,
                    "update_registers": 2
                },
                "_DAT_40010400": {
                    "port1_data": 1
                },
                "_DAT_40010404": {
                    "port2_data": 1
                },
                "_DAT_40010408": {
                    "port3_data": 1
                },
                "_DAT_4001040c": {
                    "port4_data": 1
                },
                "_DAT_40021018": {
                    "port1_settings": 1
                },
                "iVar4": {
                    "array_index1": 1,
                    "bit_index_offset": 1,
                    "block_index": 1,
                    "device_index": 1,
                    "index": 24,
                    "port_index": 1,
                    "register_index": 1,
                    "target_index": 1
                },
                "iVar8": {
                    "array_index2": 1,
                    "bit_field_index": 1,
                    "bit_index": 1,
                    "bit_offset": 4,
                    "bit_shift": 1,
                    "i_var": 1,
                    "index": 1,
                    "index2": 1,
                    "inner_loop_iter": 1,
                    "loop_index": 1,
                    "offset": 1,
                    "shift": 1,
                    "shift_amount": 8,
                    "shift_index": 3,
                    "subindex": 1,
                    "temp_index": 1
                },
                "param_1": {
                    "bit_array1": 4,
                    "bit_pattern": 1,
                    "bitmask1": 1,
                    "data1": 2,
                    "decoded_data": 1,
                    "flag_array": 1,
                    "flags": 1,
                    "flags_array": 1,
                    "input_array": 1,
                    "input_flags": 1,
                    "input_params": 1,
                    "old_flags": 1,
                    "output": 1,
                    "output_array": 2,
                    "output_data": 2,
                    "output_flags": 2,
                    "output_params": 2,
                    "permissions": 1,
                    "register1": 1,
                    "target_bits": 2,
                    "target_flags": 1
                },
                "param_2": {
                    "bit_array2": 4,
                    "bitmask2": 1,
                    "data2": 2,
                    "encoded_data": 1,
                    "flag_array": 1,
                    "flags": 2,
                    "input": 1,
                    "input_array": 4,
                    "input_data": 2,
                    "input_flags": 2,
                    "input_params": 1,
                    "mask": 1,
                    "new_flags": 1,
                    "register2": 1,
                    "source_bits": 2,
                    "source_flags": 1,
                    "update_flags": 1,
                    "update_values": 1,
                    "updates": 1
                },
                "uVar1": {
                    "bit_offset": 1,
                    "bit_value1": 1,
                    "combined_value": 1,
                    "count1": 1,
                    "flag": 6,
                    "flag1": 1,
                    "mask": 1,
                    "new_bits": 2,
                    "new_flag": 1,
                    "new_flag_value": 2,
                    "new_permission": 1,
                    "new_value": 2,
                    "output_mask": 1,
                    "output_val": 1,
                    "output_value": 1,
                    "result": 3,
                    "updated_bits": 1,
                    "updated_flag": 1,
                    "updated_value": 3
                },
                "uVar2": {
                    "bit": 2,
                    "bit_check": 7,
                    "bit_mask": 11,
                    "bit_value": 1,
                    "bit_value2": 1,
                    "check_flag": 1,
                    "current_bit": 1,
                    "current_flag": 1,
                    "flag2": 1,
                    "flag_check": 1,
                    "flag_value": 1,
                    "input_flag": 1,
                    "input_mask": 1,
                    "temp_bits": 1
                },
                "uVar3": {
                    "array_value": 1,
                    "check_value": 2,
                    "condition": 2,
                    "control_value": 1,
                    "data_type": 2,
                    "element": 1,
                    "flag3": 1,
                    "flag_check": 1,
                    "flag_value": 2,
                    "index": 1,
                    "input_value": 1,
                    "instruction": 1,
                    "mask_value": 1,
                    "op_code": 1,
                    "opcode": 7,
                    "shift": 1,
                    "update_type": 1,
                    "value": 1,
                    "value1": 1,
                    "value_check": 2
                },
                "uVar5": {
                    "bit_index": 9,
                    "bit_position": 3,
                    "count": 4,
                    "count2": 1,
                    "counter": 6,
                    "i": 6,
                    "loop_counter": 1,
                    "outer_loop_iter": 1
                },
                "uVar6": {
                    "bit_flag": 1,
                    "bit_mask": 10,
                    "bit_position": 1,
                    "bit_shift": 1,
                    "bits0_to31": 1,
                    "mask": 9,
                    "output": 1,
                    "position": 1,
                    "target_value": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp_mask": 1,
                    "tmp1": 1
                },
                "uVar7": {
                    "alternate_instruction": 1,
                    "bitset": 1,
                    "check": 1,
                    "check_flag": 1,
                    "check_value": 1,
                    "comp_flag": 1,
                    "compare_val": 1,
                    "compare_value": 1,
                    "constant": 5,
                    "data_type_flag": 1,
                    "flag": 1,
                    "flag_comparison": 1,
                    "flag_condition": 1,
                    "magic_value": 2,
                    "op_code_mask": 1,
                    "opcode_value": 1,
                    "special_condition": 1,
                    "special_flag": 1,
                    "special_value": 2,
                    "temp2": 2,
                    "tmp2": 1,
                    "valid_type": 1,
                    "value": 1,
                    "value1": 1
                },
                "unaff_r10": {
                    "array_pointer": 1,
                    "bit_array_ptr": 1,
                    "bit_data_ptr": 1,
                    "current_block": 1,
                    "flag_location": 1,
                    "flag_ptr": 1,
                    "flags_ptr": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_params": 1,
                    "output_ptr": 1,
                    "pointer": 5,
                    "ptr2": 1,
                    "register_ptr": 1,
                    "target": 1,
                    "target_address": 3,
                    "target_pointer": 2,
                    "target_ptr": 1,
                    "temp_ptr": 2,
                    "write_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800458c",
                "FUN_08004e14",
                "FUN_08004d48",
                "FUN_08004e7c"
            ],
            "code": "\n\n\nvoid update_bits_08001264(uint *bit_array1,uint *bit_array2)\n\n{\n  uint flag;\n  uint bit_mask;\n  uint opcode;\n  int index;\n  uint bit_index;\n  uint bit_mask;\n  uint constant;\n  uint *pointer;\n  int shift_amount;\n  \n  flag = 0;\n  bit_index = 0;\n  do {\n    bit_mask = 1 << (bit_index & 0xff);\n    bit_mask = bit_mask & *bit_array2;\n    if (bit_mask == bit_mask) {\n      opcode = bit_array2[1];\n      if (opcode == 0x12) {\n        flag = bit_array2[3] + 0xc;\n      }\n      else if (opcode < 0x13) {\n        if (opcode == 2) {\n          flag = bit_array2[3] + 8;\n        }\n        else if (opcode < 3) {\n          if (opcode == 0) goto LAB_080013be;\n          if (opcode == 1) {\n            flag = bit_array2[3];\n          }\n        }\n        else if (opcode == 3) {\n          flag = 0;\n        }\n        else if (opcode == 0x11) {\n          flag = bit_array2[3] + 4;\n        }\n      }\n      else {\n        if (opcode != 0x10210000) {\n          if (opcode < 0x10210001) {\n            if (opcode != 0x10110000) {\n              constant = 0x10120000;\nLAB_080013b8:\n              if (opcode != constant) goto LAB_080012a8;\n            }\n          }\n          else if ((opcode != 0x10310000) && (opcode != 0x10320000)) {\n            constant = 0x10220000;\n            goto LAB_080013b8;\n          }\n        }\nLAB_080013be:\n        flag = bit_array2[2];\n        if (flag == 0) {\n          flag = 4;\n        }\n        else {\n          if (flag == 1) {\n            bit_array1[4] = bit_mask;\n          }\n          if (flag != 1) {\n            bit_array1[5] = bit_mask;\n          }\n          flag = 8;\n        }\n      }\nLAB_080012a8:\n      if (bit_mask < 0x100) {\n        bit_mask = *bit_array1;\n        opcode = bit_index << 2;\n        pointer = bit_array1;\n      }\n      else {\n        bit_mask = bit_array1[1];\n        opcode = (bit_index + 0x3ffffff8) * 4;\n      }\n      if (0xff < bit_mask) {\n        pointer = bit_array1 + 1;\n      }\n      *pointer = bit_mask & ~(0xf << (opcode & 0xff)) | flag << (opcode & 0xff);\n      pointer = (uint *)bit_array2[1];\n      if (((uint)pointer & 0x10000000) != 0) {\n        _DAT_40021018 = _DAT_40021018 | 1;\n        shift_amount = (bit_index & 3) << 2;\n        if (bit_array1 == (uint *)0x40010800) {\n          index = 0;\n        }\n        else if (bit_array1 == (uint *)0x40010c00) {\n          index = 1;\n        }\n        else if (bit_array1 == (uint *)0x40011000) {\n          index = 2;\n        }\n        else if (bit_array1 == (uint *)0x40011400) {\n          index = 3;\n        }\n        else {\n          index = 4;\n        }\n        *(uint *)((bit_index & 0xfffffffc) + 0x40010008) =\n             index << shift_amount | *(uint *)((bit_index & 0xfffffffc) + 0x40010008) & ~(0xf << shift_amount);\n        if (((uint)pointer & 0x10000) == 0) {\n          _DAT_40010400 = _DAT_40010400 & ~bit_mask;\n        }\n        else {\n          _DAT_40010400 = _DAT_40010400 | bit_mask;\n        }\n        if (((uint)pointer & 0x20000) == 0) {\n          _DAT_40010404 = _DAT_40010404 & ~bit_mask;\n        }\n        else {\n          _DAT_40010404 = _DAT_40010404 | bit_mask;\n        }\n        if (((uint)pointer & 0x100000) == 0) {\n          _DAT_40010408 = _DAT_40010408 & ~bit_mask;\n        }\n        else {\n          _DAT_40010408 = _DAT_40010408 | bit_mask;\n        }\n        if (((uint)pointer & 0x200000) == 0) {\n          _DAT_4001040c = _DAT_4001040c & ~bit_mask;\n        }\n        else {\n          _DAT_4001040c = bit_mask | _DAT_4001040c;\n        }\n      }\n    }\n    bit_index = bit_index + 1;\n    if (bit_index == 0x10) {\n      return;\n    }\n  } while( true );\n}\n\n",
            "current_name": "update_bits_08001264",
            "entrypoint": "0x08001264",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001264": "update_bits_08001264",
                "iVar4": "index",
                "iVar8": "shift_amount",
                "param_1": "bit_array1",
                "param_2": "bit_array2",
                "uVar1": "flag",
                "uVar2": "bit_mask",
                "uVar3": "opcode",
                "uVar5": "bit_index",
                "uVar6": "bit_mask",
                "uVar7": "constant",
                "unaff_r10": "pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001424": {
            "additional_data": {
                "FUN_08001424": {
                    "save_param_to_memory": 1,
                    "set_param": 2,
                    "set_param_to_address": 1,
                    "set_param_value": 13,
                    "set_parameter": 1,
                    "set_parameter_value": 3,
                    "set_parameter_value_for_index": 1,
                    "store_parameter_value": 1,
                    "store_shifted_parameter_value": 1,
                    "store_shifted_value": 4,
                    "store_value": 1,
                    "update_param2": 1,
                    "update_parameter": 1
                },
                "param_1": {
                    "address": 5,
                    "array": 1,
                    "base_address": 13,
                    "buffer_address": 1,
                    "destination_address": 1,
                    "object_address": 3,
                    "param1": 1,
                    "param_address": 1,
                    "param_ptr": 1,
                    "struct_pointer": 1,
                    "target_address": 3
                },
                "param_2": {
                    "modified_value": 1,
                    "new_param_2": 1,
                    "new_value": 1,
                    "param2": 1,
                    "param_value": 1,
                    "parameter_value": 1,
                    "shifted_param_value": 1,
                    "shifted_value": 6,
                    "value": 18
                },
                "param_3": {
                    "condition": 3,
                    "flag": 11,
                    "is_shifted": 12,
                    "param3": 1,
                    "shift_amount": 1,
                    "shift_flag": 1,
                    "shift_value": 1,
                    "use_multiplier": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003f3c",
                "FUN_0800458c",
                "FUN_08004490"
            ],
            "code": "\nvoid set_param_value_08001424(int base_address,int value,int is_shifted)\n\n{\n  if (is_shifted == 0) {\n    value = value << 0x10;\n  }\n  *(int *)(base_address + 0x10) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08001424",
            "entrypoint": "0x08001424",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001424": "set_param_value_08001424",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "is_shifted"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800142e": {
            "additional_data": {
                "0xc": {
                    "offset": 4
                },
                "DAT_": {
                    "dat_": 1
                },
                "FUN_0800142e": {
                    "apply_xor": 4,
                    "apply_xor_to_param": 1,
                    "bitwise_xor_with_param": 1,
                    "combine_and_store": 1,
                    "combine_params": 1,
                    "combine_xor": 1,
                    "modify_param": 1,
                    "toggle_bits": 1,
                    "update_and_xor": 1,
                    "xor_and_store": 1,
                    "xor_and_update": 2,
                    "xor_and_update_value": 1,
                    "xor_assign": 1,
                    "xor_data_and_update_pointer": 1,
                    "xor_param_and_data": 1,
                    "xor_param_and_global": 1,
                    "xor_param_and_ptr": 1,
                    "xor_param_and_store": 1,
                    "xor_param_with_local": 1,
                    "xor_param_with_offset": 2,
                    "xor_param_with_var": 2,
                    "xor_parameter_with_memory": 1,
                    "xor_parameter_with_variable": 1,
                    "xor_update": 1,
                    "xor_with_parameter": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 10,
                    "base_ptr": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input_address": 5,
                    "input_pointer": 2,
                    "memory_address": 1,
                    "param_addr": 1,
                    "param_offset": 1,
                    "ptr": 1,
                    "target_address": 2
                },
                "param_2": {
                    "bit_mask": 1,
                    "input": 1,
                    "input_value": 3,
                    "new_value": 2,
                    "param_value": 1,
                    "value": 13,
                    "value_to_xor": 4,
                    "xor_value": 6
                },
                "param_3": {
                    "result_address": 1
                },
                "var_1": {
                    "stored_value": 1
                },
                "var_2": {
                    "combined_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004490"
            ],
            "code": "\nvoid xor_param_and_ptr_0800142e(int base_address,uint value)\n\n{\n  *(uint *)(base_address + 0xc) = value ^ *(uint *)(base_address + 0xc);\n  return;\n}\n\n",
            "current_name": "xor_param_and_ptr_0800142e",
            "entrypoint": "0x0800142e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800142e": "xor_param_and_ptr_0800142e",
                "param_1": "base_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001436": {
            "additional_data": {
                "0": {
                    "failure": 4
                },
                "0x14": {
                    "flag_offset": 4,
                    "flags_offset": 1
                },
                "0x20": {
                    "flag_char_value": 1
                },
                "0x35": {
                    "char_code": 1,
                    "character_value": 1,
                    "error_flag_value": 1,
                    "flag_char_offset": 1,
                    "status_byte_offset": 1
                },
                "0x400": {
                    "bit_mask": 1,
                    "check_bit": 1,
                    "flag_mask": 3
                },
                "0xd": {
                    "other_flag": 1,
                    "undef_var_ptr": 1
                },
                "0xe": {
                    "error_code": 1,
                    "error_flag_offset": 1,
                    "index": 1,
                    "result_variable": 1
                },
                "0xfffffbff": {
                    "bit_mask_negated": 1,
                    "clear_mask": 1,
                    "flag_mask_inverse": 1,
                    "mask": 1
                },
                "1": {
                    "success": 5
                },
                "4": {
                    "set_value": 1,
                    "success_value": 1
                },
                "FUN_08001436": {
                    "check_and_modify_flag": 2,
                    "check_and_modify_flags": 2,
                    "check_and_modify_permissions": 1,
                    "check_bit_and_set": 1,
                    "check_bits_and_set_values": 1,
                    "check_flag": 2,
                    "check_flag_status": 11,
                    "check_flagged_bit": 1,
                    "check_for_flag": 1,
                    "check_status": 1,
                    "clear_flag": 1,
                    "clear_flag_and_set_values": 1,
                    "clear_flag_if_set": 1,
                    "clear_flag_in_data_struct": 1,
                    "clear_flagged_bits": 1,
                    "clear_flags_if_set": 1,
                    "update_flag_and_values": 1,
                    "update_flags_and_values": 1
                },
                "data_0xe": {
                    "error_code": 1
                },
                "iVar1": {
                    "array_element": 1,
                    "element": 2,
                    "element_value": 1,
                    "flag_value": 15,
                    "value": 12
                },
                "param_1": {
                    "arr": 1,
                    "array": 1,
                    "data": 4,
                    "data_struct_ptr": 1,
                    "flag": 5,
                    "flag_address": 1,
                    "flag_array": 3,
                    "flag_ptr": 6,
                    "flags": 3,
                    "input": 1,
                    "input_array": 5
                },
                "var_14": {
                    "flags": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080014e2"
            ],
            "code": "\nundefined4 check_flag_status_08001436(int *flag_ptr)\n\n{\n  int flag_value;\n  \n  flag_value = *flag_ptr;\n  if ((*(uint *)(flag_value + 0x14) & 0x400) != 0) {\n    *(uint *)(flag_value + 0x14) = *(uint *)(flag_value + 0x14) & 0xfffffbff;\n    flag_ptr[0xe] = 4;\n    *(undefined *)((int)flag_ptr + 0x35) = 0x20;\n    *(undefined *)(flag_ptr + 0xd) = 0;\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "check_flag_status_08001436",
            "entrypoint": "0x08001436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001436": "check_flag_status_08001436",
                "iVar1": "flag_value",
                "param_1": "flag_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001460": {
            "additional_data": {
                "FUN_08001460": {
                    "check_access_and_update": 1,
                    "check_and_modify_data": 1,
                    "check_condition": 1,
                    "check_conditions": 1,
                    "check_data": 11,
                    "check_data_validity": 7,
                    "check_data_value": 1,
                    "check_data_values": 1,
                    "check_parameters": 1,
                    "check_params": 1,
                    "check_permission": 1,
                    "check_permissions": 1,
                    "process_data": 2,
                    "validate_and_update_data": 1
                },
                "current_data": {
                    "current_data": 1
                },
                "current_value": {
                    "current_value": 1
                },
                "data_array": {
                    "data_array": 1
                },
                "flag": {
                    "flag": 1
                },
                "flags": {
                    "options": 1
                },
                "get_data_value_0800115c": {
                    "get_data_value": 4
                },
                "iVar1": {
                    "current_data_value": 1,
                    "current_value": 4,
                    "data_value": 4,
                    "data_value1": 2,
                    "data_value_1": 4,
                    "initial_data": 1,
                    "initial_data_value": 4,
                    "initial_value": 3,
                    "prev_data_value": 1,
                    "prev_value": 1,
                    "previous_data_value": 3,
                    "previous_value": 1,
                    "value1": 2
                },
                "iVar2": {
                    "curr_data_value": 1,
                    "current_data_value": 9,
                    "current_value": 4,
                    "data_value2": 2,
                    "data_value_2": 4,
                    "new_data_value": 4,
                    "new_value": 4,
                    "updated_value": 1,
                    "value2": 2
                },
                "input_data": {
                    "data": 1
                },
                "max_iterations": {
                    "max_attempts": 1
                },
                "param_1": {
                    "data": 10,
                    "data_array": 12,
                    "data_pointer": 2,
                    "data_ptr": 5,
                    "input_data": 1,
                    "param_list": 1
                },
                "param_2": {
                    "access_type": 1,
                    "bitmask": 1,
                    "byte_value": 2,
                    "condition": 1,
                    "data_length": 1,
                    "flag": 17,
                    "flag1": 1,
                    "flag_1": 1,
                    "flags": 2,
                    "index": 1,
                    "input_value": 1,
                    "value_1": 1,
                    "value_flag": 1
                },
                "param_3": {
                    "flag2": 1,
                    "flag_2": 1,
                    "limit": 1,
                    "max_diff": 1,
                    "max_iterations": 1,
                    "time_delay": 1,
                    "time_limit": 8,
                    "time_threshold": 4,
                    "timeout": 12,
                    "value_2": 1
                },
                "prev_value": {
                    "prev_value": 1
                },
                "puVar4": {
                    "current_data": 7,
                    "current_data_array": 1,
                    "current_element_ptr": 1,
                    "current_item": 1,
                    "current_ptr": 2,
                    "data": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 6,
                    "element_ptr": 1,
                    "ptr": 4,
                    "ptr_data": 1,
                    "ptr_to_data": 1,
                    "ptr_value": 1,
                    "selected_data": 1,
                    "selected_data_pointer": 1
                },
                "selected_value": {
                    "selected_value": 1
                },
                "timeout": {
                    "timeout": 1
                },
                "uVar3": {
                    "data": 1,
                    "data_value": 6,
                    "data_value3": 1,
                    "data_value_3": 2,
                    "element_value": 2,
                    "selected_data_value": 1,
                    "selected_value": 11,
                    "target_value": 1,
                    "value": 2,
                    "value3": 1,
                    "value_3": 1,
                    "value_to_compare": 2
                }
            },
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001530",
                "FUN_080015e8"
            ],
            "code": "\nundefined4 check_data_validity_08001460(uint **data_array,uint flag,uint timeout)\n\n{\n  int data_value_1;\n  int current_data_value;\n  uint selected_value;\n  uint *current_data;\n  \n  data_value_1 = get_data_value();\n  do {\n    current_data = *data_array;\n    if ((flag << 8) >> 0x18 == 1) {\n      selected_value = current_data[5];\n    }\n    else {\n      selected_value = current_data[6];\n    }\n    if ((flag & 0xffff & ~selected_value) == 0) {\n      return 0;\n    }\n    if ((int)(current_data[5] << 0x15) < 0) {\n      *current_data = *current_data | 0x200;\n      current_data[5] = current_data[5] & 0xfffffbff;\n      data_array[0xe] = (uint *)0x4;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 1;\n    }\n  } while ((timeout == 0xffffffff) ||\n          ((timeout != 0 && (current_data_value = get_data_value(), (uint)(current_data_value - data_value_1) <= timeout))));\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  *(undefined *)(data_array + 0xd) = 0;\n  return 3;\n}\n\n",
            "current_name": "check_data_validity_08001460",
            "entrypoint": "0x08001460",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001460": "check_data_validity_08001460",
                "get_data_value_0800115c": "get_data_value",
                "iVar1": "data_value_1",
                "iVar2": "current_data_value",
                "param_1": "data_array",
                "param_2": "flag",
                "param_3": "timeout",
                "puVar4": "current_data",
                "uVar3": "selected_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080014e2": {
            "additional_data": {
                "FUN_080014e2": {
                    "check_and_update_data": 2,
                    "check_and_update_flag": 1,
                    "check_and_update_status": 1,
                    "check_condition_and_update_flag": 1,
                    "check_data": 3,
                    "check_data_and_flag": 1,
                    "check_data_and_flag_status": 1,
                    "check_data_status": 2,
                    "check_data_validity": 7,
                    "check_data_value": 3,
                    "check_flag": 1,
                    "check_flag_and_update": 1,
                    "check_flag_status": 1,
                    "check_flag_value": 1,
                    "check_value_and_update": 1,
                    "evaluate_flag_status": 1,
                    "process_data": 2,
                    "validate_flag": 1
                },
                "check_flag_status_08001436": {
                    "check_flag_status": 9
                },
                "get_data_value_0800115c": {
                    "get_data_value": 7,
                    "get_initial_data_value": 2
                },
                "iVar1": {
                    "current_value": 1,
                    "data_value": 7,
                    "data_value_1": 4,
                    "initial_data": 1,
                    "initial_data_value": 8,
                    "initial_value": 6,
                    "min_value": 1,
                    "start_value": 2,
                    "value_before_loop": 1
                },
                "iVar2": {
                    "check_result": 1,
                    "flag_status": 29,
                    "result": 1
                },
                "param_1": {
                    "data": 3,
                    "data_and_flag": 1,
                    "data_array": 18,
                    "data_pointer": 2,
                    "data_ptr": 5,
                    "data_values": 1,
                    "flag_data": 1
                },
                "param_2": {
                    "array_size": 1,
                    "data_length": 4,
                    "data_size": 3,
                    "data_value": 2,
                    "flag": 7,
                    "flag_index": 1,
                    "flag_offset": 1,
                    "flag_status": 2,
                    "flag_value": 3,
                    "limit": 1,
                    "max_threshold": 1,
                    "max_value": 4,
                    "value": 1
                }
            },
            "called": [
                "FUN_08001436",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001530",
                "FUN_08001828",
                "FUN_080015e8"
            ],
            "code": "\nundefined4 check_data_validity_080014e2(int *data_array,uint flag)\n\n{\n  int initial_data_value;\n  int flag_status;\n  \n  initial_data_value = get_data_value();\n  while( true ) {\n    if (*(int *)(*data_array + 0x14) << 0x18 < 0) {\n      return 0;\n    }\n    flag_status = check_flag_status(data_array);\n    if (flag_status != 0) break;\n    if ((flag != 0xffffffff) &&\n       ((flag == 0 || (flag_status = get_data_value(), flag < (uint)(flag_status - initial_data_value))))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_data_validity_080014e2",
            "entrypoint": "0x080014e2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080014e2": "check_data_validity_080014e2",
                "check_flag_status_08001436": "check_flag_status",
                "get_data_value_0800115c": "get_data_value",
                "iVar1": "initial_data_value",
                "iVar2": "flag_status",
                "param_1": "data_array",
                "param_2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001530": {
            "additional_data": {
                "FUN_08001530": {
                    "modify_data": 1,
                    "process_data": 1,
                    "set_flag_and_validate_data": 1,
                    "update_data": 7,
                    "update_data_and_validity": 1,
                    "update_data_validity": 17,
                    "update_flag_and_check_validity": 1,
                    "update_flags_and_check_validity": 1
                },
                "iVar1": {
                    "data_value": 10,
                    "data_value1": 15,
                    "data_value3": 1,
                    "initial_value": 2,
                    "start_value": 3
                },
                "iVar2": {
                    "data_diff": 1,
                    "data_value2": 19,
                    "data_value4": 1,
                    "end_value": 3,
                    "new_data_value": 3,
                    "new_value": 2,
                    "prev_data_value": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "data": 13,
                    "data_pointer": 11,
                    "data_ptr": 6,
                    "ptr_to_data_pointer": 1
                },
                "param_2": {
                    "data_value1": 1,
                    "flag1": 3,
                    "new_value1": 1,
                    "param1": 1,
                    "param_a": 1,
                    "value": 1,
                    "value1": 22,
                    "value_2": 1
                },
                "param_3": {
                    "data_value2": 1,
                    "flag2": 3,
                    "mask": 1,
                    "new_value2": 1,
                    "param2": 1,
                    "param_b": 1,
                    "value2": 22,
                    "value_3": 1
                },
                "param_4": {
                    "check_flag": 3,
                    "condition": 9,
                    "flag": 14,
                    "flag3": 1,
                    "is_option1": 1,
                    "mode": 1,
                    "param3": 1,
                    "param_flag": 1
                },
                "param_5": {
                    "additional_value": 1,
                    "check_val": 1,
                    "check_value": 2,
                    "code": 1,
                    "condition": 1,
                    "extra_param": 1,
                    "flag": 5,
                    "length": 1,
                    "option": 1,
                    "param": 3,
                    "param4": 1,
                    "param5": 1,
                    "param_5": 1,
                    "param_c": 1,
                    "param_flag": 1,
                    "param_flag2": 1,
                    "size": 2,
                    "validity": 1,
                    "value": 2,
                    "value3": 2,
                    "value_5": 1
                },
                "ppuVar4": {
                    "current_data_pointer": 1,
                    "current_data_ptr": 5,
                    "data_double_pointer": 1,
                    "data_pointer": 1,
                    "data_pointer_copy": 1,
                    "data_pointer_pointer": 2,
                    "data_pointer_ptr": 2,
                    "data_pointer_reference": 1,
                    "data_ptr": 4,
                    "data_ptr_ptr": 6,
                    "original_data_ptr": 2,
                    "pointer_to_data": 1,
                    "ptr_data": 1,
                    "ptr_data_ptr": 1,
                    "ptr_ptr": 1,
                    "ptr_to_data_pointer": 1
                },
                "puVar3": {
                    "curr_data": 1,
                    "current_data": 14,
                    "current_data_pointer": 1,
                    "current_data_ptr": 7,
                    "data_pointer": 1,
                    "data_pointer_value": 1,
                    "data_ptr": 2,
                    "data_ptr_1": 1,
                    "data_value_pointer": 1,
                    "ptr": 2
                },
                "uVar5": {
                    "data_value1_copy": 1,
                    "data_value3": 1,
                    "flag1_copy": 1,
                    "flag_value1": 1,
                    "initial_flag1": 1,
                    "new_value1": 1,
                    "param2_value": 1,
                    "param_a_updated": 1,
                    "temp_value1": 3,
                    "val1": 1,
                    "value1": 3,
                    "value1_copy": 12,
                    "value3": 3,
                    "value_2_updated": 1
                },
                "uVar6": {
                    "data_value2_copy": 1,
                    "data_value4": 1,
                    "flag2_copy": 1,
                    "flag_value2": 1,
                    "initial_flag2": 1,
                    "new_value2": 1,
                    "param3_value": 1,
                    "param_b_updated": 1,
                    "temp_value2": 3,
                    "val2": 1,
                    "value2": 3,
                    "value2_copy": 12,
                    "value4": 3,
                    "value_3_updated": 1
                }
            },
            "called": [
                "FUN_080014e2",
                "FUN_0800115c",
                "FUN_08001460"
            ],
            "calling": [
                "FUN_08001828"
            ],
            "code": "\nundefined4 update_data_and_validity_08001530(uint **data,uint value1,uint value2,int flag,uint flag)\n\n{\n  int data_value1;\n  int data_value2;\n  uint *current_data;\n  uint **data_ptr_ptr;\n  uint value1_copy;\n  uint value2_copy;\n  \n  **data = **data | 0x100;\n  data_ptr_ptr = data;\n  value1_copy = value1;\n  value2_copy = value2;\n  data_value1 = get_data_value_0800115c();\n  do {\n    current_data = *data;\n    do {\n      if ((int)(current_data[5] << 0x1f) < 0) {\n        current_data[4] = value1 & 0xfe;\n        data_value1 = check_data_validity_08001460(data,0x10002,flag,current_data,data_ptr_ptr,value1_copy,value2_copy);\n        if (data_value1 == 0) {\n          data_value1 = check_data_validity_080014e2(data,flag,(*data)[5],(*data)[6]);\n          if (data_value1 == 0) {\n            current_data = *data;\n            if (flag == 1) {\nLAB_080015ca:\n              current_data[4] = value2 & 0xff;\n              return 0;\n            }\n            current_data[4] = value2 >> 8;\n            data_value1 = check_data_validity_080014e2(data,flag);\n            if (data_value1 == 0) {\n              current_data = *data;\n              goto LAB_080015ca;\n            }\n          }\n          if (data[0xe] != (uint *)0x4) {\n            return 3;\n          }\n          **data = **data | 0x200;\n        }\n        else if (data[0xe] != (uint *)0x4) {\n          return 3;\n        }\n        return 1;\n      }\n    } while (flag == 0xffffffff);\n    if ((flag == 0) || (data_value2 = get_data_value_0800115c(), flag < (uint)(data_value2 - data_value1))) {\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  } while( true );\n}\n\n",
            "current_name": "update_data_and_validity_08001530",
            "entrypoint": "0x08001530",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001530": "update_data_and_validity_08001530",
                "iVar1": "data_value1",
                "iVar2": "data_value2",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "flag",
                "ppuVar4": "data_ptr_ptr",
                "puVar3": "current_data",
                "uVar5": "value1_copy",
                "uVar6": "value2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080015e8": {
            "additional_data": {
                "FUN_080015e8": {
                    "initialize_and_check_data_validity": 1,
                    "initialize_data": 1,
                    "parse_data": 1,
                    "process_data": 7,
                    "set_flag_and_check_validity": 1,
                    "update_data": 6,
                    "update_data_flags": 4,
                    "update_data_validity": 1,
                    "update_data_value": 2,
                    "update_data_values": 1,
                    "update_flags_and_check_validity": 3,
                    "validate_data": 3
                },
                "check_data_validity_08001460": {
                    "check_data_validity1": 2,
                    "check_validity1": 1
                },
                "check_data_validity_080014e2": {
                    "check_data_validity2": 2,
                    "check_validity2": 1
                },
                "get_data_value_0800115c": {
                    "get_data_value": 3
                },
                "iVar1": {
                    "data_val1": 1,
                    "data_validity_result": 1,
                    "data_value": 10,
                    "data_value1": 12,
                    "data_value_1": 1,
                    "result": 2,
                    "result1": 2,
                    "return_value1": 1,
                    "value1": 1
                },
                "iVar2": {
                    "current_value": 3,
                    "data_comparison": 1,
                    "data_val2": 1,
                    "data_value": 2,
                    "data_value2": 14,
                    "data_value_2": 1,
                    "new_data_value": 1,
                    "new_value": 1,
                    "result2": 2,
                    "return_value2": 1,
                    "temp": 1,
                    "updated_data_value": 1,
                    "value2": 1
                },
                "param_1": {
                    "data": 16,
                    "data_pointer": 5,
                    "data_ptr": 6,
                    "input_data": 2,
                    "param": 1
                },
                "param_2": {
                    "flag1": 1,
                    "input_data1": 1,
                    "len1": 1,
                    "param1": 1,
                    "param2": 1,
                    "value": 1,
                    "value1": 23,
                    "value_1": 1
                },
                "param_3": {
                    "flag2": 1,
                    "input_data2": 1,
                    "len2": 1,
                    "mask": 1,
                    "param2": 1,
                    "param3": 1,
                    "value2": 23,
                    "value_2": 1
                },
                "param_4": {
                    "condition": 1,
                    "condition1": 1,
                    "flag": 20,
                    "flag1": 1,
                    "flag3": 1,
                    "input_data3": 1,
                    "mode": 1,
                    "option": 2,
                    "param3": 1,
                    "param4": 1
                },
                "param_5": {
                    "condition2": 1,
                    "flag2": 1,
                    "flag4": 1,
                    "input_data4": 1,
                    "limit": 12,
                    "max_value": 3,
                    "param4": 1,
                    "param5": 1,
                    "threshold": 8,
                    "time": 1
                },
                "ppuVar4": {
                    "current_data_pointer": 1,
                    "current_data_ptr_ptr": 1,
                    "data_pointer_pointer": 1,
                    "data_pointer_ptr": 1,
                    "data_ptr": 2,
                    "data_ptr_ptr": 3,
                    "original_data_ptr": 1,
                    "param1_ptr": 1,
                    "pointer": 1,
                    "pointer2": 2,
                    "pp_data": 2,
                    "ptr2": 1,
                    "ptr_of_ptr": 1,
                    "ptr_ptr": 8,
                    "ptr_ptr_data": 4,
                    "ptr_to_data": 1
                },
                "puVar3": {
                    "current_data": 4,
                    "current_data_pointer": 1,
                    "current_data_ptr": 2,
                    "data_ptr": 3,
                    "data_ptr_value": 1,
                    "p_data": 2,
                    "pointer1": 2,
                    "ptr": 10,
                    "ptr1": 1,
                    "ptr_data": 5
                },
                "uVar5": {
                    "current_value_1": 1,
                    "data_value3": 1,
                    "local_value1": 1,
                    "new_value1": 3,
                    "original_value": 1,
                    "original_value1": 1,
                    "param2_masked": 1,
                    "param2_value": 1,
                    "param_value1": 1,
                    "size_copy": 1,
                    "temp1": 2,
                    "temp_value1": 3,
                    "uint_var1": 1,
                    "val1": 4,
                    "value1": 1,
                    "value1_copy": 4,
                    "value1_modified": 1,
                    "value3": 2,
                    "var5": 1
                },
                "uVar6": {
                    "current_value_2": 1,
                    "data_value4": 1,
                    "local_value2": 1,
                    "new_value2": 3,
                    "original_mask": 1,
                    "original_value2": 1,
                    "param3_masked": 1,
                    "param3_value": 1,
                    "param_value2": 1,
                    "temp2": 2,
                    "temp_value2": 3,
                    "uint_var2": 1,
                    "val2": 4,
                    "value2": 1,
                    "value2_copy": 4,
                    "value2_modified": 1,
                    "value4": 2,
                    "value_copy": 1,
                    "var6": 1
                }
            },
            "called": [
                "FUN_0800115c",
                "FUN_080014e2",
                "FUN_08001460"
            ],
            "calling": [
                "FUN_08001938"
            ],
            "code": "\nundefined4 update_data_flags_080015e8(uint **data,uint value1,uint value2,int flag,uint limit)\n\n{\n  int data_value1;\n  int data_value2;\n  uint *ptr;\n  uint **ptr_ptr;\n  uint value1_copy;\n  uint value2_copy;\n  \n  ptr = *data;\n  *ptr = *ptr | 0x400;\n  *ptr = *ptr | 0x100;\n  ptr_ptr = data;\n  value1_copy = value1;\n  value2_copy = value2;\n  data_value1 = get_data_value();\nLAB_0800160e:\n  ptr = *data;\n  while (-1 < (int)(ptr[5] << 0x1f)) {\n    if (limit != 0xffffffff) goto code_r0x08001658;\n  }\n  ptr[4] = value1 & 0xfe;\n  data_value1 = check_data_validity1(data,0x10002,limit,ptr,ptr_ptr,value1_copy,value2_copy);\n  if (data_value1 != 0) goto LAB_080016ba;\n  data_value1 = check_data_validity2(data,limit,(*data)[5],(*data)[6]);\n  if (data_value1 == 0) {\n    ptr = *data;\n    if (flag != 1) {\n      ptr[4] = value2 >> 8;\n      data_value1 = check_data_validity2(data,limit);\n      if (data_value1 != 0) goto LAB_08001642;\n      ptr = *data;\n    }\n    ptr[4] = value2 & 0xff;\n    data_value1 = check_data_validity2(data,limit);\n    if (data_value1 == 0) {\n      **data = **data | 0x100;\n      data_value1 = get_data_value();\n      do {\n        do {\n          if ((int)((*data)[5] << 0x1f) < 0) {\n            (*data)[4] = value1 & 0xff | 1;\n            data_value1 = check_data_validity1(data,0x10002,limit);\n            if (data_value1 == 0) {\n              return 0;\n            }\nLAB_080016ba:\n            if (data[0xe] != (uint *)0x4) {\n              return 3;\n            }\n            return 1;\n          }\n        } while (limit == 0xffffffff);\n      } while ((limit != 0) && (data_value2 = get_data_value(), (uint)(data_value2 - data_value1) <= limit));\nLAB_0800165a:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)(data + 0xd) = 0;\n      return 3;\n    }\n  }\nLAB_08001642:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\ncode_r0x08001658:\n  if ((limit == 0) || (data_value2 = get_data_value(), limit < (uint)(data_value2 - data_value1)))\n  goto LAB_0800165a;\n  goto LAB_0800160e;\n}\n\n",
            "current_name": "update_data_flags_080015e8",
            "entrypoint": "0x080015e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080015e8": "update_data_flags_080015e8",
                "check_data_validity_08001460": "check_data_validity1",
                "check_data_validity_080014e2": "check_data_validity2",
                "get_data_value_0800115c": "get_data_value",
                "iVar1": "data_value1",
                "iVar2": "data_value2",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "flag",
                "param_5": "limit",
                "ppuVar4": "ptr_ptr",
                "puVar3": "ptr",
                "uVar5": "value1_copy",
                "uVar6": "value2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080016f4": {
            "additional_data": {
                "FUN_080016f4": {
                    "check_and_modify_data": 1,
                    "check_and_update_data": 1,
                    "check_data": 7,
                    "check_data_and_return_status": 1,
                    "check_data_and_update_flags": 1,
                    "check_data_bounds": 1,
                    "check_data_condition": 1,
                    "check_data_validity": 11,
                    "check_data_value": 4,
                    "handle_data": 1,
                    "process_data": 2
                },
                "iVar1": {
                    "data_value1": 1,
                    "initial_data_value": 16,
                    "initial_value": 12,
                    "start_value": 2
                },
                "iVar2": {
                    "current_data_value": 17,
                    "current_value": 12,
                    "data_value": 1,
                    "data_value2": 1
                },
                "param_1": {
                    "data": 6,
                    "data_array": 18,
                    "data_pointer": 2,
                    "data_ptr": 5
                },
                "param_2": {
                    "array_length": 2,
                    "data_length": 9,
                    "data_size": 10,
                    "length": 2,
                    "size": 6,
                    "value": 2
                }
            },
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08001938"
            ],
            "code": "\nundefined4 check_data_validity_080016f4(int *data_array,uint data_size)\n\n{\n  int initial_data_value;\n  int current_data_value;\n  \n  initial_data_value = get_data_value_0800115c();\n  while( true ) {\n    current_data_value = *data_array;\n    if ((*(uint *)(current_data_value + 0x14) & 0x40) != 0) {\n      return 0;\n    }\n    if (*(int *)(current_data_value + 0x14) << 0x1b < 0) break;\n    if ((data_size == 0) || (current_data_value = get_data_value_0800115c(), data_size < (uint)(current_data_value - initial_data_value))) {\n      data_array[0xe] = data_array[0xe] | 0x20;\n      *(undefined *)((int)data_array + 0x35) = 0x20;\n      *(undefined *)(data_array + 0xd) = 0;\n      return 3;\n    }\n  }\n  *(uint *)(current_data_value + 0x14) = *(uint *)(current_data_value + 0x14) & 0xffffffef;\n  data_array[0xe] = 0;\n  *(undefined *)(data_array + 0xd) = 0;\n  *(undefined *)((int)data_array + 0x35) = 0x20;\n  return 1;\n}\n\n",
            "current_name": "check_data_validity_080016f4",
            "entrypoint": "0x080016f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080016f4": "check_data_validity_080016f4",
                "iVar1": "initial_data_value",
                "iVar2": "current_data_value",
                "param_1": "data_array",
                "param_2": "data_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001754": {
            "additional_data": {
                "FUN_08001754": {
                    "initialize_data": 2,
                    "initialize_parameter": 1,
                    "initialize_parameters": 4,
                    "set_flag_and_calculate_values": 1,
                    "update_and_set_flag": 5,
                    "update_bits_and_set_flag": 1,
                    "update_configuration": 2,
                    "update_device_info": 1,
                    "update_flags": 1,
                    "update_flags_and_values": 1,
                    "update_param": 1,
                    "update_param_values": 5,
                    "update_parameter": 1,
                    "update_parameters": 4,
                    "update_values": 1
                },
                "_": {
                    "temp": 1
                },
                "get_shifted_value_08002220": {
                    "get_shifted_value": 12
                },
                "param_1": {
                    "config_data": 1,
                    "configuration": 1,
                    "data": 2,
                    "device_info": 1,
                    "input": 1,
                    "param": 6,
                    "param_list": 2,
                    "parameter": 1,
                    "parameters": 14,
                    "params": 2
                },
                "puVar3": {
                    "config_ptr": 1,
                    "current_value": 1,
                    "device_info_ptr": 1,
                    "p_data": 1,
                    "param1": 3,
                    "param1_copy": 1,
                    "param_1": 1,
                    "param_1_values": 1,
                    "param_array": 4,
                    "param_ptr": 3,
                    "pointer1": 6,
                    "ptr1": 4,
                    "ptr3": 2,
                    "var3": 1,
                    "variable_ptr1": 1
                },
                "puVar4": {
                    "config_ptr1": 1,
                    "p_var": 1,
                    "param1_1": 1,
                    "param2": 4,
                    "param_1_1": 1,
                    "param_2_values": 1,
                    "param_array1": 3,
                    "pointer2": 5,
                    "pointer4": 1,
                    "ptr1": 1,
                    "ptr2": 4,
                    "ptr4": 2,
                    "pu_var4": 1,
                    "threshold": 2,
                    "value_ptr1": 1,
                    "var4": 1,
                    "variable_ptr2": 1
                },
                "puVar5": {
                    "config_ptr2": 1,
                    "flag": 2,
                    "p_flag": 1,
                    "param1_2": 1,
                    "param3": 4,
                    "param_1_7": 1,
                    "param_3_values": 1,
                    "param_array2": 3,
                    "pointer3": 5,
                    "pointer5": 1,
                    "ptr2": 1,
                    "ptr3": 4,
                    "ptr5": 2,
                    "pu_var5": 1,
                    "value_ptr2": 1,
                    "var5": 1,
                    "variable_ptr3": 1
                },
                "uVar1": {
                    "dividend": 1,
                    "factor1": 1,
                    "high_bits": 1,
                    "lower32": 1,
                    "quotient1": 1,
                    "shift_value1": 1,
                    "shifted_high": 1,
                    "shifted_low": 1,
                    "shifted_value": 1,
                    "shifted_value1": 1,
                    "shifted_value_1": 1,
                    "shifted_value_low": 7,
                    "shifted_value_low_part": 1,
                    "shifted_value_lower": 3,
                    "value": 1,
                    "value1": 7,
                    "value_low": 1
                },
                "uVar2": {
                    "factor2": 1,
                    "low_bits": 1,
                    "quotient": 1,
                    "quotient2": 1,
                    "shift_value2": 1,
                    "shifted_high": 1,
                    "shifted_low": 1,
                    "shifted_value": 1,
                    "shifted_value2": 1,
                    "shifted_value_2": 1,
                    "shifted_value_high": 7,
                    "shifted_value_high_part": 1,
                    "shifted_value_upper": 4,
                    "upper32": 1,
                    "value2": 7,
                    "value_high": 1
                },
                "uVar6": {
                    "calculated_value": 1,
                    "div_result": 3,
                    "divided_value": 8,
                    "divided_value1": 1,
                    "dividend": 3,
                    "division_result": 2,
                    "divisor": 2,
                    "millisecond_value": 1,
                    "result": 1,
                    "shifted_div": 1,
                    "shifted_divided": 1,
                    "shifted_value": 1,
                    "shifted_value_3": 1,
                    "shifted_value_divided": 2,
                    "value3": 3
                },
                "uVar7": {
                    "full_value": 1,
                    "shifted_value": 26,
                    "shifted_value2": 1,
                    "shifted_value_4": 1,
                    "shifted_value_complete": 1,
                    "shifted_value_result": 1
                },
                "update_bits_and_set_flag_08004d48": {
                    "update_bits_and_set_flag": 10,
                    "update_flags": 2
                }
            },
            "called": [
                "FUN_08002220",
                "FUN_08004d48"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 update_param_values_08001754(uint **parameters)\n\n{\n  uint shifted_value_low;\n  uint value2;\n  uint *pointer1;\n  uint *pointer2;\n  uint *pointer3;\n  uint divided_value;\n  undefined8 shifted_value;\n  \n  if (parameters != (uint **)0x0) {\n    if (*(char *)((int)parameters + 0x35) == '\\0') {\n      *(undefined *)(parameters + 0xd) = 0;\n      update_bits_and_set_flag();\n    }\n    *(undefined *)((int)parameters + 0x35) = 0x24;\n    **parameters = **parameters & 0xfffffffe;\n    shifted_value = get_shifted_value();\n    value2 = (uint)((ulonglong)shifted_value >> 0x20);\n    shifted_value_low = (uint)shifted_value;\n    pointer2 = parameters[1];\n    divided_value = shifted_value_low / 1000000;\n    if ((uint *)0x186a0 < pointer2) {\n      value2 = 300;\n    }\n    pointer1 = *parameters;\n    if ((uint *)0x186a0 < pointer2) {\n      value2 = divided_value * value2;\n    }\n    pointer1[1] = divided_value;\n    if ((uint *)0x186a0 < pointer2) {\n      divided_value = value2 / 1000;\n    }\n    pointer1[8] = divided_value + 1;\n    if (pointer2 < (uint *)0x186a1) {\n      shifted_value_low = shifted_value_low / (uint)((int)pointer2 << 1);\n      if ((shifted_value_low & 0xfff) < 4) {\n        shifted_value_low = 4;\n      }\n    }\n    else {\n      if (parameters[2] == (uint *)0x0) {\n        shifted_value_low = shifted_value_low / (uint)((int)pointer2 * 3) | 0x8000;\n      }\n      else {\n        shifted_value_low = shifted_value_low / (uint)((int)pointer2 * 0x19) | 0xc000;\n      }\n      if ((shifted_value_low & 0xfff) == 0) {\n        shifted_value_low = 1;\n      }\n    }\n    pointer2 = parameters[8];\n    pointer3 = parameters[7];\n    pointer1[7] = shifted_value_low;\n    *pointer1 = (uint)pointer3 | (uint)pointer2;\n    pointer1[2] = (uint)parameters[4] | (uint)parameters[3];\n    pointer1[3] = (uint)parameters[5] | (uint)parameters[6];\n    *pointer1 = *pointer1 | 1;\n    parameters[0xe] = (uint *)0x0;\n    *(undefined *)((int)parameters + 0x35) = 0x20;\n    *(undefined *)((int)parameters + 0x36) = 0;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_param_values_08001754",
            "entrypoint": "0x08001754",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001754": "update_param_values_08001754",
                "_": "temp",
                "get_shifted_value_08002220": "get_shifted_value",
                "param_1": "parameters",
                "puVar3": "pointer1",
                "puVar4": "pointer2",
                "puVar5": "pointer3",
                "uVar1": "shifted_value_low",
                "uVar2": "value2",
                "uVar6": "divided_value",
                "uVar7": "shifted_value",
                "update_bits_and_set_flag_08004d48": "update_bits_and_set_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001828": {
            "additional_data": {
                "FUN_08001828": {
                    "check_and_update_data": 2,
                    "check_and_update_data_validity": 1,
                    "process_data": 16,
                    "update_data_validity": 3,
                    "validate_and_update_data": 1,
                    "validate_data": 7
                },
                "check_data_validity_080014e2": {
                    "check_data_validity": 13
                },
                "get_data_value_0800115c": {
                    "get_data_value": 9
                },
                "iVar1": {
                    "data_value": 1,
                    "data_value1": 5,
                    "data_value_1": 1,
                    "first_value": 2,
                    "initial_value": 12,
                    "last_value": 1,
                    "prev_data_value": 1,
                    "previous_value": 1,
                    "start_value": 4,
                    "value1": 3
                },
                "iVar2": {
                    "curr_data_value": 1,
                    "current_value": 15,
                    "data_value2": 6,
                    "data_value_2": 1,
                    "end_value": 1,
                    "new_value": 2,
                    "second_value": 2,
                    "value2": 3
                },
                "param_1": {
                    "data": 23,
                    "data_pointer": 2,
                    "data_ptr": 4,
                    "input_data": 1,
                    "input_params": 1
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 1,
                    "param1": 4,
                    "param2": 15,
                    "param_a": 1,
                    "parameter_2": 1,
                    "val1": 1,
                    "value1": 5,
                    "value_1": 2
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 1,
                    "param2": 4,
                    "param3": 15,
                    "param_b": 1,
                    "parameter_3": 1,
                    "val2": 1,
                    "value2": 5,
                    "value_2": 2
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 1,
                    "param3": 4,
                    "param4": 15,
                    "param_c": 1,
                    "parameter_4": 1,
                    "val3": 1,
                    "value3": 5,
                    "value_3": 2
                },
                "param_5": {
                    "buffer": 13,
                    "byte_array": 10,
                    "byte_data": 1,
                    "bytes": 1,
                    "data": 2,
                    "data_buffer": 1,
                    "data_bytes": 1,
                    "input_bytes": 1,
                    "input_data": 1
                },
                "param_6": {
                    "array_length": 3,
                    "array_size": 1,
                    "buffer_len": 1,
                    "buffer_length": 6,
                    "buffer_size": 6,
                    "byte_array_size": 2,
                    "byte_count": 4,
                    "data_length": 1,
                    "data_size": 1,
                    "input_length": 2,
                    "length": 4
                },
                "param_7": {
                    "arg4": 1,
                    "arg7": 1,
                    "config": 1,
                    "option": 1,
                    "param4": 3,
                    "param7": 16,
                    "param_d": 1,
                    "parameter_7": 1,
                    "val4": 1,
                    "validity": 1,
                    "validity_flag": 1,
                    "value4": 1,
                    "value_4": 2
                },
                "puVar3": {
                    "current_data": 1,
                    "data_ptr": 5,
                    "data_ptr_value": 3,
                    "pointer": 2,
                    "ptr": 15,
                    "ptr_data": 2,
                    "temp_ptr": 1,
                    "value_ptr": 1
                },
                "uVar4": {
                    "data_value": 6,
                    "masked_value": 1,
                    "temp": 2,
                    "temp_value": 6,
                    "temp_var": 1,
                    "u_var": 1,
                    "u_var4": 1,
                    "value": 11,
                    "value3": 1,
                    "var": 1
                },
                "update_data_and_validity_08001530": {
                    "update_data_and_validity": 13
                }
            },
            "called": [
                "FUN_08001530",
                "FUN_0800115c",
                "FUN_080014e2"
            ],
            "calling": [
                "FUN_0800403c"
            ],
            "code": "\nundefined4\nprocess_data_08001828(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,byte *buffer,\n            short buffer_size,undefined4 param7)\n\n{\n  int initial_value;\n  int current_value;\n  uint *ptr;\n  uint value;\n  \n  if (*(char *)((int)data + 0x35) == ' ') {\n    if (buffer == (byte *)0x0) {\n      return 1;\n    }\n    if (buffer_size == 0) {\n      return 1;\n    }\n    initial_value = get_data_value();\n    do {\n      ptr = *data;\n      if ((~ptr[6] & 2) != 0) {\n        if (*(char *)(data + 0xd) == '\\x01') {\n          return 2;\n        }\n        value = *ptr;\n        *(undefined *)(data + 0xd) = 1;\n        *ptr = value & 0xfffff7ff;\n        *(undefined *)((int)data + 0x35) = 0x21;\n        *(undefined *)((int)data + 0x36) = 0x40;\n        data[0xe] = (uint *)0x0;\n        initial_value = update_data_and_validity(data,param2,param3,param4,param7);\n        if (initial_value != 0) {\n          *(undefined *)(data + 0xd) = 0;\n          if (data[0xe] == (uint *)0x4) {\n            return 1;\n          }\n          return 3;\n        }\n        goto LAB_080018e2;\n      }\n      current_value = get_data_value();\n    } while ((uint)(current_value - initial_value) < 0x2711);\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n  }\n  return 2;\n  while (buffer_size != 0) {\nLAB_080018e2:\n    initial_value = check_data_validity(data,param7);\n    if (initial_value != 0) goto LAB_080018ee;\n    ptr = *data;\n    ptr[4] = (uint)*buffer;\n    if ((int)(ptr[5] << 0x1d) < 0) {\n      if ((short)(buffer_size + -1) == 0) break;\n      buffer_size = buffer_size + -2;\n      ptr[4] = (uint)buffer[1];\n      buffer = buffer + 2;\n    }\n    else {\n      buffer = buffer + 1;\n      buffer_size = buffer_size + -1;\n    }\n  }\n  initial_value = check_data_validity(data,param7);\n  if (initial_value == 0) {\n    **data = **data | 0x200;\n    *(undefined *)(data + 0xd) = 0;\n    *(undefined *)((int)data + 0x35) = 0x20;\n    *(undefined *)((int)data + 0x36) = 0;\n    return 0;\n  }\nLAB_080018ee:\n  if (data[0xe] == (uint *)0x4) {\n    **data = **data | 0x200;\n    return 1;\n  }\n  return 3;\n}\n\n",
            "current_name": "process_data_08001828",
            "entrypoint": "0x08001828",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001828": "process_data_08001828",
                "check_data_validity_080014e2": "check_data_validity",
                "get_data_value_0800115c": "get_data_value",
                "iVar1": "initial_value",
                "iVar2": "current_value",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "buffer",
                "param_6": "buffer_size",
                "param_7": "param7",
                "puVar3": "ptr",
                "uVar4": "value",
                "update_data_and_validity_08001530": "update_data_and_validity"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001938": {
            "additional_data": {
                "FUN_08001938": {
                    "handle_data": 1,
                    "process_data": 22,
                    "update_data": 3,
                    "validate_data": 1,
                    "verify_data_validity": 1
                },
                "LAB_08001a18": {
                    "check_validity": 1,
                    "label2": 2
                },
                "LAB_08001ab8": {
                    "finish_processing": 1,
                    "label1": 2
                },
                "LAB_08001afa": {
                    "check_max_value": 1,
                    "label3": 2
                },
                "LAB_08001b3a": {
                    "label4": 2,
                    "update_output": 1
                },
                "bVar7": {
                    "condition": 3,
                    "flag": 10,
                    "flag1": 2,
                    "is_greater": 1,
                    "is_less_than": 1,
                    "is_less_than10000": 1,
                    "is_neg_bit": 1,
                    "is_negative": 12
                },
                "check_data_validity_080016f4": {
                    "check_data_validity": 5
                },
                "disableIRQinterrupts": {
                    "disable_interrupts": 4,
                    "disable_irq": 1
                },
                "enableIRQinterrupts": {
                    "enable_interrupts": 4,
                    "enable_irq": 1
                },
                "get_data_value_0800115c": {
                    "get_data_value": 5
                },
                "iVar2": {
                    "base_value": 1,
                    "data_value1": 1,
                    "initial_value": 5,
                    "prev_val": 1,
                    "prev_value": 1,
                    "start_time": 5,
                    "start_value": 12,
                    "value1": 5
                },
                "iVar3": {
                    "curr_val": 1,
                    "curr_value": 1,
                    "current_time": 5,
                    "current_value": 17,
                    "data_value2": 1,
                    "new_value": 1,
                    "value2": 5
                },
                "param_1": {
                    "data": 26,
                    "data_ptr": 4,
                    "parameter_array": 1
                },
                "param_2": {
                    "arg1": 2,
                    "param1": 8,
                    "param2": 12,
                    "param_2": 4,
                    "val1": 1,
                    "value1": 3,
                    "value_1": 1
                },
                "param_3": {
                    "arg2": 2,
                    "param2": 8,
                    "param3": 12,
                    "param_3": 4,
                    "val2": 1,
                    "value2": 3,
                    "value_2": 1
                },
                "param_4": {
                    "arg3": 2,
                    "param3": 8,
                    "param4": 12,
                    "param_4": 4,
                    "val3": 1,
                    "value3": 3,
                    "value_3": 1
                },
                "param_5": {
                    "buffer": 3,
                    "output": 19,
                    "output_buffer": 2,
                    "output_data": 2,
                    "result": 5
                },
                "param_6": {
                    "buffer_size": 1,
                    "count": 4,
                    "input_size": 1,
                    "length": 13,
                    "num_bits": 1,
                    "num_iterations": 1,
                    "output_size": 1,
                    "size": 9
                },
                "param_7": {
                    "limit": 1,
                    "max_iterations": 4,
                    "max_time": 1,
                    "max_value": 1,
                    "threshold": 8,
                    "time_limit": 1,
                    "timeout": 15
                },
                "puVar1": {
                    "pointer1": 2,
                    "pointer_1": 1,
                    "ptr": 10,
                    "ptr1": 13,
                    "ptr_1": 1,
                    "temp_1": 1,
                    "temp_ptr": 3
                },
                "puVar4": {
                    "current_data": 2,
                    "current_ptr": 1,
                    "data_ptr": 6,
                    "data_ptr_value": 1,
                    "pointer2": 2,
                    "ptr": 1,
                    "ptr2": 13,
                    "ptr_2": 1,
                    "ptr_data": 2,
                    "ptr_value": 1,
                    "value_ptr": 1
                },
                "puVar6": {
                    "next_ptr": 1,
                    "output_data_ptr": 1,
                    "output_ptr": 11,
                    "pointer3": 1,
                    "pointer_2": 1,
                    "ptr3": 12,
                    "ptr_output": 1,
                    "ptr_result": 1,
                    "temp_2": 1,
                    "temp_ptr": 1
                },
                "uVar5": {
                    "current_data": 1,
                    "current_value": 1,
                    "data_value": 6,
                    "temp_value": 2,
                    "value": 14,
                    "value3": 3,
                    "value4": 1,
                    "var1": 3
                },
                "update_data_flags_080015e8": {
                    "update_data_flags": 4
                }
            },
            "called": [
                "FUN_080015e8",
                "FUN_080016f4",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_0800407c",
                "FUN_080040b8"
            ],
            "code": "\nundefined4\nprocess_data_08001938(uint **data,undefined4 param2,undefined4 param3,undefined4 param4,\n            undefined *output,ushort length,uint timeout)\n\n{\n  undefined *ptr1;\n  int start_value;\n  int current_value;\n  uint *ptr2;\n  uint value;\n  undefined *ptr3;\n  bool is_negative;\n  \n  if (*(char *)((int)data + 0x35) != ' ') {\n    return 2;\n  }\n  if (output == (undefined *)0x0) {\n    return 1;\n  }\n  if (length == 0) {\n    return 1;\n  }\n  start_value = get_data_value();\n  while (ptr2 = *data, (~ptr2[6] & 2) == 0) {\n    current_value = get_data_value();\n    if (10000 < (uint)(current_value - start_value)) {\n      *(undefined *)(data + 0xd) = 0;\n      *(undefined *)((int)data + 0x35) = 0x20;\n      return 2;\n    }\n  }\n  if (*(char *)(data + 0xd) == '\\x01') {\n    return 2;\n  }\n  value = *ptr2;\n  *(undefined *)(data + 0xd) = 1;\n  *ptr2 = value & 0xfffff7ff;\n  *(undefined *)((int)data + 0x35) = 0x22;\n  *(undefined *)((int)data + 0x36) = 0x40;\n  data[0xe] = (uint *)0x0;\n  start_value = update_data_flags(data,param2,param3,param4,timeout);\n  if (start_value != 0) {\n    *(undefined *)(data + 0xd) = 0;\n    if (data[0xe] == (uint *)0x4) {\n      return 1;\n    }\n    return 3;\n  }\n  ptr2 = *data;\n  value = *ptr2;\n  if (length == 1) {\n    *ptr2 = value & 0xfffffbff;\n    disable_interrupts();\n    **data = **data | 0x200;\n    enable_interrupts();\n    start_value = check_data_validity(data,timeout);\n    if (start_value == 0) {\n      *output = (char)(*data)[4];\nlabel1:\n      *(undefined *)((int)data + 0x35) = 0x20;\n      *(undefined *)((int)data + 0x36) = 0;\n      *(undefined *)(data + 0xd) = 0;\n      return 0;\n    }\nlabel2:\n    if (data[0xe] != (uint *)0x20) {\n      return 1;\n    }\n    return 3;\n  }\n  if (length == 2) {\n    *ptr2 = value | 0x800;\n    disable_interrupts();\n    **data = **data & 0xfffffbff;\n    enable_interrupts();\n  }\n  else {\n    *ptr2 = value | 0x400;\n    while (3 < length) {\n      start_value = check_data_validity(data,timeout);\n      if (start_value != 0) goto label2;\n      *output = (char)(*data)[4];\n      ptr2 = *data;\n      is_negative = (int)(ptr2[5] << 0x1d) < 0;\n      if (is_negative) {\n        ptr2 = (uint *)ptr2[4];\n        ptr3 = output + 2;\n        length = length - 2;\n      }\n      else {\n        ptr3 = output + 1;\n        length = length - 1;\n      }\n      ptr1 = output + 1;\n      output = ptr3;\n      if (is_negative) {\n        *ptr1 = (char)ptr2;\n      }\n    }\n    if (length != 2) {\n      start_value = get_data_value();\n      do {\n        ptr2 = *data;\n        do {\n          if ((int)(ptr2[5] << 0x1d) < 0) {\n            *ptr2 = *ptr2 & 0xfffffbff;\n            disable_interrupts();\n            *output = (char)(*data)[4];\n            start_value = get_data_value();\n            goto label4;\n          }\n        } while (timeout == 0xffffffff);\n      } while ((timeout != 0) && (current_value = get_data_value(), (uint)(current_value - start_value) <= timeout));\n      goto label3;\n    }\n  }\n  start_value = get_data_value();\n  do {\n    do {\n      if ((int)((*data)[5] << 0x1d) < 0) {\n        disable_interrupts();\n        ptr2 = *data;\n        *ptr2 = *ptr2 | 0x200;\n        *output = (char)ptr2[4];\n        enable_interrupts();\n        output[1] = (char)(*data)[4];\n        goto label1;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_value = get_data_value(), (uint)(current_value - start_value) <= timeout));\nlabel3:\n  *(undefined *)((int)data + 0x35) = 0x20;\n  *(undefined *)(data + 0xd) = 0;\n  return 3;\nlabel4:\n  do {\n    ptr2 = *data;\n    do {\n      if ((int)(ptr2[5] << 0x1d) < 0) {\n        *ptr2 = *ptr2 | 0x200;\n        output[1] = (char)ptr2[4];\n        enable_interrupts();\n        output[2] = (char)(*data)[4];\n        goto label1;\n      }\n    } while (timeout == 0xffffffff);\n  } while ((timeout != 0) && (current_value = get_data_value(), (uint)(current_value - start_value) <= timeout));\n  goto label3;\n}\n\n",
            "current_name": "process_data_08001938",
            "entrypoint": "0x08001938",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001938": "process_data_08001938",
                "LAB_08001a18": "label2",
                "LAB_08001ab8": "label1",
                "LAB_08001afa": "label3",
                "LAB_08001b3a": "label4",
                "bVar7": "is_negative",
                "check_data_validity_080016f4": "check_data_validity",
                "disableIRQinterrupts": "disable_interrupts",
                "enableIRQinterrupts": "enable_interrupts",
                "get_data_value_0800115c": "get_data_value",
                "iVar2": "start_value",
                "iVar3": "current_value",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "output",
                "param_6": "length",
                "param_7": "timeout",
                "puVar1": "ptr1",
                "puVar4": "ptr2",
                "puVar6": "ptr3",
                "uVar5": "value",
                "update_data_flags_080015e8": "update_data_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001b58": {
            "additional_data": {
                "5000": {
                    "threshold_value": 1
                },
                "FUN_08001b58": {
                    "check_and_modify_settings": 1,
                    "check_and_update": 1,
                    "check_and_update_parameters": 1,
                    "check_condition": 1,
                    "check_conditions": 11,
                    "check_conditions_and_values": 1,
                    "check_data_validity": 1,
                    "check_data_values": 1,
                    "check_flags": 2,
                    "check_flags_and_values": 1,
                    "check_param_values": 1,
                    "check_parameters": 3,
                    "check_status": 1,
                    "perform_checks": 1,
                    "process_data": 1
                },
                "_DAT_40007000": {
                    "another_data_register": 1,
                    "control_register_2": 1,
                    "data_register4": 1,
                    "data_register_5": 1,
                    "data_var4": 1,
                    "register4": 1,
                    "register_4": 2,
                    "register_value4": 2,
                    "register_value_2": 1
                },
                "_DAT_40021000": {
                    "data_register": 1,
                    "data_register1": 1,
                    "data_register2": 1,
                    "data_register_2": 1,
                    "data_var2": 1,
                    "memory_value": 1,
                    "register2": 1,
                    "register_2": 2,
                    "register_value2": 2,
                    "status_register": 1
                },
                "_DAT_40021004": {
                    "data_register": 1,
                    "data_register1": 1,
                    "data_register2": 1,
                    "data_register_1": 1,
                    "data_var1": 1,
                    "flag_register": 1,
                    "register1": 1,
                    "register_1": 2,
                    "register_value": 1,
                    "register_value1": 2
                },
                "_DAT_4002101c": {
                    "control_register_1": 1,
                    "data_register5": 1,
                    "data_register_4": 1,
                    "data_var3": 1,
                    "register_3": 1,
                    "register_value3": 1,
                    "register_value_1": 1
                },
                "_DAT_40021020": {
                    "data_register6": 1,
                    "data_register_6": 1,
                    "register5": 1,
                    "register_5": 1,
                    "register_value5": 1,
                    "register_value_3": 1,
                    "yet_another_flag_register": 1
                },
                "_DAT_40021024": {
                    "another_flag_register": 1,
                    "data_register3": 1,
                    "data_register_3": 1,
                    "register3": 1,
                    "register_3": 1,
                    "register_value3": 1
                },
                "get_data_value_0800115c": {
                    "get_data_value": 9
                },
                "iRam42420000": {
                    "buffer_1": 1,
                    "flag_1": 2,
                    "memory_address1": 1,
                    "memory_var1": 1,
                    "ram_value1": 2,
                    "register_3": 1,
                    "temp_var_3": 1,
                    "var1": 1,
                    "variable1": 2
                },
                "iRam42420060": {
                    "memory_var2": 1,
                    "variable2": 1
                },
                "iRam42420480": {
                    "buffer_2": 1,
                    "flag_2": 2,
                    "memory_address2": 1,
                    "ram_value2": 2,
                    "register_4": 1,
                    "temp_var_4": 1,
                    "var2": 1,
                    "variable2": 1,
                    "variable3": 1
                },
                "iVar1": {
                    "iteration_variable_1": 1,
                    "temp1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "temp_variable1": 1,
                    "value1": 16,
                    "value_1": 5,
                    "var1": 3,
                    "variable1": 1
                },
                "iVar2": {
                    "iteration_variable_2": 1,
                    "temp2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "temp_variable2": 1,
                    "value2": 16,
                    "value_2": 5,
                    "var2": 3,
                    "variable2": 1
                },
                "param_1": {
                    "condition_array": 1,
                    "conditions": 1,
                    "data": 2,
                    "flags": 2,
                    "flags_and_values": 1,
                    "input_data": 2,
                    "input_parameters": 1,
                    "input_params": 2,
                    "inputs": 2,
                    "param": 1,
                    "parameters": 12,
                    "params": 1,
                    "settings": 1,
                    "status_data": 1
                },
                "uRam42420060": {
                    "flag_3": 1,
                    "flag_4": 1,
                    "memory_address3": 1,
                    "ram_value3": 2,
                    "result": 1,
                    "temp_var_5": 1,
                    "variable3": 1
                }
            },
            "called": [
                "FUN_08001168",
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08004514"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08001eec) */\n/* WARNING: Removing unreachable block (ram,0x08001ee8) */\n\n\nundefined4 check_conditions_and_values_08001b58(int *parameters)\n\n{\n  int value1;\n  int value2;\n  \n  if (*parameters << 0x1f < 0) {\n    if (((_DAT_40021004 & 0xc) == 4) ||\n       (((_DAT_40021004 & 0xc) == 8 && ((int)(_DAT_40021004 << 0xf) < 0)))) {\n      if (((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) && (parameters[1] == 0)) {\n        return 1;\n      }\n    }\n    else {\n      value1 = parameters[1];\n      if (value1 == 0x10000) {\nLAB_08001c1e:\n        _DAT_40021000 = _DAT_40021000 | 0x10000;\n      }\n      else {\n        if (value1 == 0) {\n          _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n          value1 = get_data_value();\n          while ((int)((_DAT_40021000 >> 0x11) << 0x1f) < 0) {\n            value2 = get_data_value();\n            if (100 < (uint)(value2 - value1)) {\n              return 3;\n            }\n          }\n          goto LAB_08001b64;\n        }\n        if (value1 == 0x50000) {\n          _DAT_40021000 = _DAT_40021000 | 0x40000;\n          goto LAB_08001c1e;\n        }\n        _DAT_40021000 = _DAT_40021000 & 0xfffaffff;\n      }\n      value1 = get_data_value();\n      while (-1 < (int)((_DAT_40021000 >> 0x11) << 0x1f)) {\n        value2 = get_data_value();\n        if (100 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n  }\nLAB_08001b64:\n  if (*parameters << 0x1e < 0) {\n    if (((_DAT_40021004 & 0xc) == 0) ||\n       (((_DAT_40021004 & 0xc) == 8 && (-1 < (int)(_DAT_40021004 << 0xf))))) {\n      if (((int)((_DAT_40021000 >> 1) << 0x1f) < 0) && (parameters[4] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      ram_value1 = parameters[4];\n      if (ram_value1 == 0) {\n        value1 = get_data_value();\n        while ((int)((_DAT_40021000 >> 1) << 0x1f) < 0) {\n          value2 = get_data_value();\n          if (2 < (uint)(value2 - value1)) {\n            return 3;\n          }\n        }\n        goto LAB_08001b6c;\n      }\n      ram_value1 = 1;\n      value1 = get_data_value();\n      while (-1 < (int)((_DAT_40021000 >> 1) << 0x1f)) {\n        value2 = get_data_value();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    _DAT_40021000 = parameters[5] << 3 | _DAT_40021000 & 0xffffff07;\n  }\nLAB_08001b6c:\n  if (*parameters << 0x1c < 0) {\n    flag_2 = parameters[6];\n    if (flag_2 == 0) {\n      value1 = get_data_value();\n      while ((int)((_DAT_40021024 >> 1) << 0x1f) < 0) {\n        value2 = get_data_value();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n    }\n    else {\n      flag_2 = 1;\n      value1 = get_data_value();\n      while (-1 < (int)((_DAT_40021024 >> 1) << 0x1f)) {\n        value2 = get_data_value();\n        if (2 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      FUNC_08001168(1);\n    }\n  }\n  if (-1 < *parameters << 0x1d) goto LAB_08001bc2;\n  _DAT_4002101c = _DAT_4002101c | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0x100;\n  value1 = get_data_value();\n  while (-1 < (int)(_DAT_40007000 << 0x17)) {\n    value2 = get_data_value();\n    if (100 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\n  value1 = parameters[3];\n  if (value1 == 1) {\nLAB_08001e1a:\n    _DAT_40021020 = _DAT_40021020 | 1;\n  }\n  else {\n    if (value1 == 0) {\n      _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n      value1 = get_data_value();\n      while ((int)((_DAT_40021020 >> 1) << 0x1f) < 0) {\n        value2 = get_data_value();\n        if (5000 < (uint)(value2 - value1)) {\n          return 3;\n        }\n      }\n      goto LAB_08001bc2;\n    }\n    if (value1 == 5) {\n      _DAT_40021020 = _DAT_40021020 | 4;\n      goto LAB_08001e1a;\n    }\n    _DAT_40021020 = _DAT_40021020 & 0xfffffffa;\n  }\n  value1 = get_data_value();\n  while (-1 < (int)((_DAT_40021020 >> 1) << 0x1f)) {\n    value2 = get_data_value();\n    if (5000 < (uint)(value2 - value1)) {\n      return 3;\n    }\n  }\nLAB_08001bc2:\n  if (parameters[7] == 0) {\n    return 0;\n  }\n  if ((_DAT_40021004 & 0xc) != 8) {\n    if (parameters[7] != 2) {\n      ram_value3 = 0;\n      value1 = get_data_value();\n      do {\n        if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n          return 0;\n        }\n        value2 = get_data_value();\n      } while ((uint)(value2 - value1) < 3);\n      return 3;\n    }\n    ram_value3 = 0;\n    value1 = get_data_value();\n    do {\n      if (-1 < (int)((_DAT_40021000 >> 0x19) << 0x1f)) {\n        if (parameters[8] == 0x10000) {\n          _DAT_40021004 = _DAT_40021004 & 0xfffdffff | parameters[2];\n        }\n        _DAT_40021004 = parameters[8] | parameters[9] | _DAT_40021004 & 0xffc2ffff;\n        ram_value3 = 1;\n        value1 = get_data_value();\n        do {\n          if ((int)((_DAT_40021000 >> 0x19) << 0x1f) < 0) {\n            return 0;\n          }\n          value2 = get_data_value();\n        } while ((uint)(value2 - value1) < 3);\n        return 3;\n      }\n      value2 = get_data_value();\n    } while ((uint)(value2 - value1) < 3);\n    return 3;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_conditions_and_values_08001b58",
            "entrypoint": "0x08001b58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001b58": "check_conditions_and_values_08001b58",
                "get_data_value_0800115c": "get_data_value",
                "iRam42420000": "ram_value1",
                "iRam42420480": "flag_2",
                "iVar1": "value1",
                "iVar2": "value2",
                "param_1": "parameters",
                "uRam42420060": "ram_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002008": {
            "additional_data": {
                "FUN_08002008": {
                    "calculate_clock_frequency": 12,
                    "calculate_clock_speed": 2,
                    "calculate_frequency": 2,
                    "calculate_mpu9250_clock": 2,
                    "calculate_mpu9250_clock_freq": 1,
                    "calculate_mpu9250_clock_frequency": 1,
                    "calculate_mpu9250_clock_speed": 1,
                    "calculate_mpu9250_frequency": 2,
                    "calculate_mpu_clock": 1,
                    "calculate_mpu_clock_frequency": 1,
                    "calculate_refresh_rate": 1,
                    "calculate_sampling_frequency": 1,
                    "calculate_sampling_rate": 1,
                    "calculate_timing": 1,
                    "get_mpu9250_clock_speed": 1,
                    "get_sampling_rate": 1
                },
                "_DAT_40021004": {
                    "input_value": 1
                },
                "iVar2": {
                    "calculated_frequency": 1,
                    "clock_freq": 1,
                    "clock_frequency": 9,
                    "clock_speed": 3,
                    "frequency": 3,
                    "mpu_clock": 1,
                    "refresh_rate": 1,
                    "result": 6,
                    "sampling_rate": 1
                },
                "local_20": {
                    "clock_divider_values": 1,
                    "clock_dividers": 1,
                    "config_values": 1,
                    "copied_data_array": 1,
                    "data_buffer": 1,
                    "default_config": 1,
                    "device_settings": 1,
                    "file_data": 1,
                    "file_paths": 2,
                    "frequency_settings": 1,
                    "input_array": 1,
                    "local_data_array": 1,
                    "mpu9250_clock_speed_values": 1,
                    "mpu_address_array": 1,
                    "mpu_array": 1,
                    "output_array": 1,
                    "output_values": 1,
                    "register_settings": 2,
                    "register_values": 4,
                    "result_array": 1,
                    "result_buffer": 1,
                    "source_data": 1,
                    "source_frequencies": 1,
                    "source_settings": 1,
                    "timing_constants": 1
                },
                "local_24": {
                    "byte_array": 1,
                    "clock_config": 4,
                    "clock_options": 1,
                    "clock_settings": 2,
                    "clock_source_settings": 1,
                    "data_buffer": 2,
                    "device_ids": 1,
                    "divider_array": 1,
                    "flag_array": 1,
                    "frequency_array": 1,
                    "frequency_settings": 1,
                    "input_array": 1,
                    "input_values": 2,
                    "local_variable1": 1,
                    "refresh_rate_config": 1,
                    "reserved_bytes": 1,
                    "sample_rate": 1,
                    "sampling_parameters": 1,
                    "sampling_rates": 1,
                    "selected_gates": 1,
                    "selection_values": 1,
                    "speed_control": 1,
                    "timing_array": 1,
                    "values": 1
                },
                "puVar4": {
                    "array_ptr": 1,
                    "config_pointer": 1,
                    "data_pointer": 7,
                    "data_ptr": 1,
                    "file_contents_pointer": 1,
                    "file_data": 1,
                    "file_paths": 2,
                    "file_pointer": 3,
                    "input_data": 1,
                    "pointer1": 1,
                    "register_pointer": 3,
                    "settings_pointer": 1,
                    "source_pointer": 1,
                    "src_file_pointer": 1,
                    "string_pointer": 1
                },
                "puVar6": {
                    "address_pointer": 1,
                    "array_pointer": 1,
                    "array_result": 1,
                    "config_array": 1,
                    "copied_data_pointer": 1,
                    "dest_pointer": 1,
                    "destination_data": 1,
                    "destination_pointer": 1,
                    "device_settings_pointer": 1,
                    "dst_file_pointer": 1,
                    "file_path_pointer": 1,
                    "new_file_paths": 1,
                    "next_register_pointer": 1,
                    "output_data": 1,
                    "output_ptr": 1,
                    "pointer2": 1,
                    "register_pointer2": 1,
                    "register_values_pointer": 1,
                    "result_pointer": 2,
                    "settings_pointer": 1,
                    "temp_array_pointer": 1,
                    "temp_pointer": 1,
                    "timing_pointer": 1
                },
                "uVar1": {
                    "array_value1": 1,
                    "clock_divider_val1": 1,
                    "coefficient1": 1,
                    "config_value1": 1,
                    "constant1": 1,
                    "current_value": 1,
                    "data_value1": 1,
                    "file_data1": 1,
                    "file_path_1": 1,
                    "file_value1": 1,
                    "first_half": 1,
                    "first_register_value": 1,
                    "first_value": 3,
                    "register_value": 1,
                    "setting1": 1,
                    "source_value1": 1,
                    "temp_value1": 2,
                    "value1": 6
                },
                "uVar3": {
                    "array_value2": 1,
                    "clock_divider_val2": 1,
                    "coefficient2": 1,
                    "config_value2": 1,
                    "constant2": 1,
                    "data_value2": 1,
                    "file_data2": 1,
                    "file_path_2": 1,
                    "file_value2": 1,
                    "next_register_value": 1,
                    "next_value": 1,
                    "second_half": 1,
                    "second_register_value": 1,
                    "second_value": 3,
                    "setting2": 1,
                    "source_value2": 1,
                    "temp_value2": 2,
                    "value2": 6
                },
                "uVar5": {
                    "calculated_frequency": 2,
                    "calculated_value": 1,
                    "clock_divisor": 1,
                    "clock_frequency": 7,
                    "clock_speed": 1,
                    "computed_frequency": 1,
                    "divider": 6,
                    "divisor": 1,
                    "final_frequency": 1,
                    "frequency_divider": 1,
                    "frequency_factor": 1,
                    "prescaler_value": 1,
                    "source_clock_freq": 1,
                    "temp_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800209c"
            ],
            "code": "\n\n\nint calculate_mpu9250_clock_frequency_08002008(void)\n\n{\n  undefined4 value1;\n  int clock_frequency;\n  undefined4 value2;\n  undefined4 *data_pointer;\n  uint clock_frequency;\n  undefined4 *result_pointer;\n  byte clock_config [4];\n  undefined4 register_values [5];\n  \n  data_pointer = &DAT_080072f0;\n  result_pointer = register_values;\n  do {\n    value1 = *data_pointer;\n    value2 = data_pointer[1];\n    data_pointer = data_pointer + 2;\n    *result_pointer = value1;\n    result_pointer[1] = value2;\n    result_pointer = result_pointer + 2;\n  } while (data_pointer != (undefined4 *)\"../Src/MPU9250.c\");\n  clock_config[0] = 1;\n  clock_config[1] = 2;\n  if ((_DAT_40021004 & 0xc) == 8) {\n    if ((int)(_DAT_40021004 << 0xf) < 0) {\n      clock_frequency = 8000000 / clock_config[(_DAT_40021004 & 0x20000) >> 0x11];\n    }\n    else {\n      clock_frequency = 4000000;\n    }\n    clock_frequency = clock_frequency * *(byte *)((int)register_values + ((_DAT_40021004 & 0x3c0000) >> 0x12));\n  }\n  else {\n    clock_frequency = 8000000;\n  }\n  return clock_frequency;\n}\n\n",
            "current_name": "calculate_mpu9250_clock_frequency_08002008",
            "entrypoint": "0x08002008",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002008": "calculate_mpu9250_clock_frequency_08002008",
                "iVar2": "clock_frequency",
                "local_20": "register_values",
                "local_24": "clock_config",
                "puVar4": "data_pointer",
                "puVar6": "result_pointer",
                "uVar1": "value1",
                "uVar3": "value2",
                "uVar5": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800209c": {
            "additional_data": {
                "DAT_": {
                    "": 1
                },
                "DAT_08007361": {
                    "clock_lookup_table": 1
                },
                "DAT_200001bc": {
                    "clock_frequency": 9,
                    "mpu9250_clock_frequency": 2
                },
                "DAT_40021000": {
                    "device_register_3": 1,
                    "mask_register": 1,
                    "mpu9250_value": 1,
                    "shift_mask": 1
                },
                "DAT_40021004": {
                    "configuration_register": 1,
                    "device_register_2": 1,
                    "mpu9250_config": 1,
                    "mpu_control": 1
                },
                "DAT_40022000": {
                    "device_register_1": 1,
                    "mpu9250_config": 1,
                    "mpu9250_register": 1,
                    "mpu_flags": 1,
                    "mpu_register": 1
                },
                "FUN_0800209c": {
                    "calculate_clock_and_initialize_memory": 1,
                    "check_and_initialize": 1,
                    "check_and_initialize_mpu9250": 1,
                    "initialize_and_configure_device": 1,
                    "initialize_and_configure_sensor": 1,
                    "initialize_and_update": 2,
                    "initialize_module": 1,
                    "initialize_mpu9250": 11,
                    "initialize_sensor": 1,
                    "initialize_sensor_and_memory": 1,
                    "process_data": 2,
                    "process_mpu9250_data": 2,
                    "process_sensor_data": 1,
                    "update_mpu9250_settings": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 3
                },
                "PTR_": {
                    "": 1
                },
                "_DAT_40021000": {
                    "data_persistence": 1,
                    "register_3": 1
                },
                "_DAT_40021004": {
                    "register_2": 1,
                    "register_address": 1
                },
                "_DAT_40022000": {
                    "register_1": 1
                },
                "cVar1": {
                    "condition1": 1,
                    "condition_1": 4,
                    "condition_flag1": 1,
                    "condition_flag_1": 1,
                    "condition_var1": 1,
                    "condition_var_1": 1,
                    "default_config_flag": 1,
                    "first_condition_true": 1,
                    "flag1": 5,
                    "flag_1": 1,
                    "is_clock_frequency_valid": 1,
                    "is_data_ready": 1,
                    "is_first_flag": 1,
                    "is_flag_set": 2,
                    "is_initialization_required": 1,
                    "is_option1": 1,
                    "is_option_one": 1,
                    "is_positive": 2,
                    "lower_bit": 1,
                    "option_flag1": 1,
                    "use_filter": 1,
                    "use_first_value": 1
                },
                "cVar2": {
                    "condition2": 1,
                    "condition_2": 4,
                    "condition_flag2": 1,
                    "condition_flag_2": 1,
                    "condition_var2": 1,
                    "condition_var_2": 1,
                    "flag2": 5,
                    "flag_2": 1,
                    "is_configuration_required": 1,
                    "is_data_processed": 1,
                    "is_flag_clear": 1,
                    "is_flag_unset": 1,
                    "is_one": 1,
                    "is_option2": 1,
                    "is_option_two": 1,
                    "is_second_flag": 1,
                    "is_single_data_value": 1,
                    "is_zero": 1,
                    "option_flag2": 1,
                    "second_condition_true": 1,
                    "special_config_flag": 1,
                    "upper_bit": 1,
                    "use_calibration": 1,
                    "use_second_value": 1
                },
                "calculate_mpu9250_clock_frequency_08002008": {
                    "calculate_clock_frequency": 3,
                    "calculate_mpu9250_clock_frequency": 1
                },
                "get_data_value_0800115c": {
                    "get_data_value": 4
                },
                "iVar3": {
                    "bit_shift": 1,
                    "bit_shifted_value": 1,
                    "condition_result": 1,
                    "config_check": 1,
                    "config_value": 1,
                    "flag_check_result": 1,
                    "initialization_value": 1,
                    "left_shift_result": 1,
                    "left_shifted_data": 1,
                    "result": 1,
                    "shift": 2,
                    "shift_amount": 1,
                    "shift_count": 2,
                    "shift_value": 1,
                    "shifted_data": 2,
                    "shifted_msb": 1,
                    "shifted_value": 6,
                    "sign_bit": 1,
                    "temp_value_3": 1,
                    "temp_var1": 3,
                    "temp_var_1": 1
                },
                "iVar5": {
                    "calculated_value": 1,
                    "current_data": 1,
                    "current_data_val": 1,
                    "current_value": 7,
                    "data_value": 13,
                    "loop_variable": 1,
                    "result": 1,
                    "temp_value_4": 1,
                    "temp_var3": 3,
                    "temp_var_3": 1,
                    "value_2": 1
                },
                "initialize_memory_and_update_address_08001104": {
                    "initialize_memory": 2,
                    "initialize_memory_and_update_address": 2
                },
                "param_1": {
                    "config": 5,
                    "config_array": 1,
                    "config_data": 1,
                    "config_params": 1,
                    "data": 9,
                    "data_array": 1,
                    "device_config": 1,
                    "input_array": 4,
                    "input_data": 2,
                    "mpu9250_configuration": 1,
                    "mpu_config": 1,
                    "sensor_data": 2,
                    "sensor_parameters": 1,
                    "settings": 1
                },
                "param_2": {
                    "array_length": 1,
                    "clock_frequency": 1,
                    "config_length": 2,
                    "config_size": 5,
                    "data_length": 2,
                    "data_size": 1,
                    "input_size": 3,
                    "input_value": 1,
                    "length": 1,
                    "mode": 1,
                    "num_bits": 1,
                    "sampling_rate": 1,
                    "sensor_size": 1,
                    "sensor_type": 1,
                    "sensor_value": 1,
                    "size": 7,
                    "value": 1
                },
                "uVar4": {
                    "array_element": 1,
                    "config_data_value": 1,
                    "config_val": 1,
                    "config_value": 3,
                    "config_value_2": 1,
                    "configuration_value": 1,
                    "control_flag": 1,
                    "control_flags": 1,
                    "data_type": 2,
                    "data_value": 2,
                    "extra_data": 1,
                    "flag_value": 1,
                    "option": 1,
                    "option_value": 1,
                    "param_1_value": 1,
                    "result": 1,
                    "temp_value_1": 1,
                    "temp_var2": 3,
                    "temp_var_2": 1,
                    "type": 3,
                    "value": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "uVar6": {
                    "control_value": 1,
                    "mask": 1,
                    "shift_value": 1,
                    "shifted_config": 2,
                    "shifted_config_val": 1,
                    "shifted_config_value": 1,
                    "shifted_configuration_value": 1,
                    "shifted_data_value": 1,
                    "shifted_flag": 1,
                    "shifted_input": 1,
                    "shifted_masks": 1,
                    "shifted_type": 1,
                    "shifted_value": 11,
                    "shifted_value_2": 1,
                    "temp_value_2": 1,
                    "temp_var4": 3,
                    "temp_var_4": 1,
                    "value_3": 1
                }
            },
            "called": [
                "FUN_08001104",
                "FUN_0800115c",
                "FUN_08002008"
            ],
            "calling": [
                "FUN_08004514"
            ],
            "code": "\n\n\nundefined4 check_and_initialize_mpu9250_0800209c(uint *data,uint size)\n\n{\n  char flag1;\n  char flag2;\n  int shifted_value;\n  uint temp_var2;\n  int data_value;\n  uint shifted_value;\n  \n  if ((size <= (_DAT_40022000 & 7)) ||\n     (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size == (size & 7))) {\n    if ((int)(*data << 0x1e) < 0) {\n      _DAT_40021004 = _DAT_40021004 & 0xffffff0f | data[2];\n    }\n    shifted_value = *data << 0x1f;\n    if (-1 < shifted_value) {\nLAB_080020ba:\n      if ((size < (_DAT_40022000 & 7)) &&\n         (_DAT_40022000 = _DAT_40022000 & 0xfffffff8 | size, size != (size & 7))) {\n        return 1;\n      }\n      if ((*data & 4) != 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xfffff8ff | data[3];\n      }\n      if ((int)(*data << 0x1c) < 0) {\n        _DAT_40021004 = _DAT_40021004 & 0xffffc7ff | data[4] << 3;\n      }\n      temp_var2 = calculate_clock_frequency();\n      DAT_200001bc = temp_var2 >> (&DAT_08007361)[(_DAT_40021004 & 0xf0) >> 4];\n      initialize_memory_and_update_address(0);\n      return 0;\n    }\n    temp_var2 = data[1];\n    if (temp_var2 == 1) {\n      flag2 = '\\x01';\n      flag1 = '\\0';\n    }\n    else {\n      shifted_value = _DAT_40021000;\n      if (temp_var2 == 2) goto LAB_08002176;\n      flag2 = '\\0';\n      flag1 = '\\x01';\n    }\n    shifted_value = (_DAT_40021000 >>\n            (leading_zero_count((uint)(byte)(flag1 << 6) << 0x18 | (uint)(byte)(flag2 << 6) << 8) & 0x1fU)) <<\n            0x1f;\n    if ((int)shifted_value < 0) {\nLAB_08002176:\n      _DAT_40021004 = _DAT_40021004 & 0xfffffffc | temp_var2;\n      shifted_value = get_data_value(shifted_value,shifted_value);\n      if (data[1] == 1) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 4) goto LAB_080020ba;\n          data_value = get_data_value();\n        } while ((uint)(data_value - shifted_value) < 0x1389);\n      }\n      else if (data[1] == 2) {\n        do {\n          if ((_DAT_40021004 & 0xc) == 8) goto LAB_080020ba;\n          data_value = get_data_value();\n        } while ((uint)(data_value - shifted_value) < 0x1389);\n      }\n      else {\n        do {\n          if ((_DAT_40021004 & 0xc) == 0) goto LAB_080020ba;\n          data_value = get_data_value();\n        } while ((uint)(data_value - shifted_value) < 0x1389);\n      }\n      return 3;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_initialize_mpu9250_0800209c",
            "entrypoint": "0x0800209c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800209c": "check_and_initialize_mpu9250_0800209c",
                "LZCOUNT": "leading_zero_count",
                "cVar1": "flag1",
                "cVar2": "flag2",
                "calculate_mpu9250_clock_frequency_08002008": "calculate_clock_frequency",
                "get_data_value_0800115c": "get_data_value",
                "iVar3": "shifted_value",
                "iVar5": "data_value",
                "initialize_memory_and_update_address_08001104": "initialize_memory_and_update_address",
                "param_1": "data",
                "param_2": "size",
                "uVar4": "temp_var2",
                "uVar6": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002214": {
            "additional_data": {
                "DAT_200001bc": {
                    "data": 11,
                    "data_value": 3,
                    "data_variable": 1,
                    "global_data": 1,
                    "global_variable": 1
                },
                "FUN_08002214": {
                    "get_dat_value": 2,
                    "get_data": 10,
                    "get_data_from_memory": 1,
                    "get_data_pointer": 1,
                    "get_data_value": 12,
                    "get_data_variable": 1,
                    "get_global_data": 1,
                    "get_global_value": 2,
                    "get_global_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001104",
                "FUN_08004514"
            ],
            "code": "\nundefined4 get_data_value_08002214(void)\n\n{\n  return DAT_200001bc;\n}\n\n",
            "current_name": "get_data_value_08002214",
            "entrypoint": "0x08002214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002214": "get_data_value_08002214"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002220": {
            "additional_data": {
                "DAT_08007371": {
                    "bit_mask": 1,
                    "data_offset": 1,
                    "lookup_table": 2,
                    "shift_lookup_table": 1,
                    "shift_table": 1,
                    "shifted_values": 1
                },
                "DAT_200001bc": {
                    "bit_data": 3,
                    "bit_pattern": 1,
                    "bitmask": 1,
                    "data": 6,
                    "data_in_memory": 1,
                    "data_to_shift": 1,
                    "data_value": 8,
                    "initial_value": 1,
                    "original_data": 1,
                    "shift_value": 1,
                    "shifted_data": 2,
                    "shifted_value": 1
                },
                "FUN_08002220": {
                    "calculate_shift_amount": 1,
                    "extract_and_shift_bits": 1,
                    "extract_bit": 1,
                    "extract_bit_from_data": 1,
                    "extract_bit_from_word": 1,
                    "extract_bits": 1,
                    "extract_bits_from_data": 2,
                    "extract_data": 1,
                    "extract_data_from_memory": 1,
                    "extracted_bit": 1,
                    "extracted_data": 3,
                    "extracted_data_shift": 3,
                    "extracted_value": 1,
                    "get_shifted_data": 2,
                    "get_shifted_value": 7,
                    "retrieve_shifted_value": 1,
                    "shift_dat_value": 1,
                    "shift_value_based_on_index": 1,
                    "shift_value_by_index": 1
                },
                "_DAT_08007371": {
                    "data_array": 1,
                    "shift_amount": 1,
                    "shift_array": 1
                },
                "_DAT_40021004": {
                    "access_mask": 1,
                    "bit_shift_mask": 1,
                    "control_value": 1,
                    "data": 1,
                    "data_index": 1,
                    "data_mask": 4,
                    "data_offset": 1,
                    "input_data": 7,
                    "input_value": 6,
                    "input_word": 1,
                    "mask": 1,
                    "mask1": 1,
                    "memory_offset": 1,
                    "shift_mask": 1,
                    "shifted_mask": 1,
                    "some_data": 1,
                    "value": 1
                },
                "extractedData": {
                    "dat_200001bc": 1,
                    "extracted_data": 1
                },
                "extracted_value": {
                    "extracted_value": 1
                },
                "get_shifted_data": {
                    "shifted_data": 1
                },
                "input_data": {
                    "input_data": 1
                },
                "shiftArray": {
                    "dat_08007371": 1
                },
                "shiftedData": {
                    "shifted_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001754",
                "FUN_080025e8"
            ],
            "code": "\n\n\nuint get_shifted_value_08002220(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x700) >> 8];\n}\n\n",
            "current_name": "get_shifted_value_08002220",
            "entrypoint": "0x08002220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002220": "get_shifted_value_08002220"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002250": {
            "additional_data": {
                "0x3800": {
                    "bit_mask": 1,
                    "mask": 2
                },
                "0xb": {
                    "shift": 1,
                    "shift_amount": 1
                },
                "DAG_200001bc": {
                    "data_mask": 1
                },
                "DAT_08007371": {
                    "bit_shift_table": 1,
                    "bitmask": 1,
                    "data_array": 2,
                    "lookup_table": 2,
                    "offset_array": 1,
                    "shift_table": 1
                },
                "DAT_200001bc": {
                    "bit_data": 1,
                    "bit_mask": 1,
                    "data": 11,
                    "data_to_extract": 1,
                    "data_to_extract_from": 1,
                    "data_value": 6,
                    "input_data": 1,
                    "mask": 1,
                    "shift_register": 1,
                    "shift_value": 1,
                    "shifted_data": 3,
                    "shifted_value": 2
                },
                "FUN_08002250": {
                    "calculate_shifted_value": 4,
                    "compute_shifted_value": 1,
                    "extract_bit": 2,
                    "extract_bit_from_data": 2,
                    "extract_bits": 2,
                    "extract_bits_from_data": 2,
                    "extracted_bit": 1,
                    "extracted_data_shift": 1,
                    "extracted_value": 2,
                    "get_shifted_data": 1,
                    "get_shifted_value": 10,
                    "shift_bits_by_offset": 1,
                    "shift_data_by_bit_offset": 1,
                    "shifted_right_data": 1
                },
                "_DAT_08007371": {
                    "shift_array": 1
                },
                "_DAT_40021004": {
                    "base_value": 1,
                    "bit_mask": 1,
                    "bitmask": 1,
                    "data": 3,
                    "data_mask": 2,
                    "data_value": 1,
                    "input": 1,
                    "input_data": 4,
                    "input_mask": 1,
                    "input_value": 9,
                    "offset": 2,
                    "shift_amount": 1,
                    "shift_mask": 2,
                    "shifted_index": 1,
                    "shifted_input": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080025e8"
            ],
            "code": "\n\n\nuint get_shifted_value_08002250(void)\n\n{\n  return DAT_200001bc >> (&DAT_08007371)[(_DAT_40021004 & 0x3800) >> 0xb];\n}\n\n",
            "current_name": "get_shifted_value_08002250",
            "entrypoint": "0x08002250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002250": "get_shifted_value_08002250"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002280": {
            "additional_data": {
                "0x18": {
                    "flag2_offset": 1,
                    "pointer_offset": 1
                },
                "0x20": {
                    "flag1_offset": 1,
                    "mask1": 1
                },
                "0x34": {
                    "new_data_offset": 1,
                    "value_offset": 1
                },
                "0x4": {
                    "offset": 1
                },
                "0x40012c00": {
                    "magic_number": 1,
                    "special_address": 1
                },
                "0xfffffcff": {
                    "bit_mask5": 1,
                    "clear_bits_mask": 1
                },
                "0xffffff8c": {
                    "bit_mask6": 1
                },
                "0xfffffff7": {
                    "bit_mask3": 1,
                    "mask1": 1
                },
                "0xfffffffb": {
                    "bit_mask4": 1,
                    "mask2": 1
                },
                "0xfffffffd": {
                    "bit_mask2": 1,
                    "clear_bit2_mask": 1
                },
                "0xfffffffe": {
                    "bit_mask1": 1,
                    "clear_bit1_mask": 1
                },
                "1": {
                    "new_data_value1": 1
                },
                "2": {
                    "new_data_value2": 1
                },
                "3": {
                    "new_data_value3": 1
                },
                "4": {
                    "new_data_value4": 1
                },
                "5": {
                    "new_data_value5": 1
                },
                "6": {
                    "new_data_value6": 1
                },
                "FUN_08002280": {
                    "modify_data": 1,
                    "set_flags_and_values": 1,
                    "update_config": 2,
                    "update_control_bits": 1,
                    "update_data": 6,
                    "update_flags_and_values": 2,
                    "update_memory": 2,
                    "update_param": 1,
                    "update_param_values": 1,
                    "update_parameters": 6,
                    "update_params": 3,
                    "update_registers": 3,
                    "update_values": 2
                },
                "param_1": {
                    "address": 3,
                    "base_address": 9,
                    "config_address": 3,
                    "control_address": 1,
                    "data_address": 7,
                    "memory_address": 1,
                    "param1": 1,
                    "param_addr": 1,
                    "param_address": 2,
                    "param_pointer": 1,
                    "register_address": 2
                },
                "param_2": {
                    "config_data": 1,
                    "config_values": 1,
                    "data": 4,
                    "data_array": 2,
                    "data_values": 1,
                    "input_data": 1,
                    "new_data": 1,
                    "new_values": 1,
                    "param2": 1,
                    "param_array": 5,
                    "param_values": 2,
                    "parameters": 1,
                    "params": 1,
                    "params_array": 1,
                    "register_values": 3,
                    "values": 5
                },
                "uVar1": {
                    "flags1": 1,
                    "flags_and_values1": 1,
                    "modified_flag": 1,
                    "modified_value1": 1,
                    "new_register_value1": 1,
                    "new_value1": 1,
                    "updated_address": 1,
                    "updated_bits1": 2,
                    "updated_config1": 3,
                    "updated_data": 1,
                    "updated_flag": 1,
                    "updated_register1": 2,
                    "updated_value1": 13,
                    "updated_var1": 2
                },
                "uVar2": {
                    "data_value": 1,
                    "existing_data": 1,
                    "existing_value": 1,
                    "flags2": 1,
                    "flags_and_values2": 1,
                    "modified_value2": 1,
                    "new_register_value2": 1,
                    "new_value2": 1,
                    "temp_var1": 1,
                    "updated_bits2": 2,
                    "updated_config2": 3,
                    "updated_register2": 2,
                    "updated_value2": 13,
                    "updated_var2": 2
                },
                "uVar3": {
                    "config_value": 1,
                    "data_value": 1,
                    "flags_and_values3": 1,
                    "modified_value3": 1,
                    "new_data": 1,
                    "new_register_value3": 1,
                    "new_value": 4,
                    "new_value3": 1,
                    "param_value": 1,
                    "temp_var2": 1,
                    "updated_bits3": 1,
                    "updated_config3": 2,
                    "updated_register3": 2,
                    "updated_value3": 10,
                    "updated_var3": 2,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid set_flags_and_values_08002280(int base_address,uint *param_array)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffffe;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *param_array;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffffd | param_array[2];\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffffff7 | param_array[3]) & 0xfffffffb;\n    updated_value2 = updated_value2 & 0xfffffcff | param_array[5] | param_array[6];\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x34) = param_array[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "set_flags_and_values_08002280",
            "entrypoint": "0x08002280",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002280": "set_flags_and_values_08002280",
                "param_1": "base_address",
                "param_2": "param_array",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080022d0": {
            "additional_data": {
                "0x1c": {
                    "register_c": 1
                },
                "0x20": {
                    "register_a": 1
                },
                "0x3c": {
                    "register_d": 1
                },
                "4": {
                    "register_b": 1
                },
                "FUN_080022d0": {
                    "reconfigure_data": 1,
                    "set_flags_and_values": 1,
                    "set_parameters": 1,
                    "update_data": 8,
                    "update_flags_and_values": 1,
                    "update_function_data": 1,
                    "update_memory": 1,
                    "update_memory_values": 1,
                    "update_param": 1,
                    "update_param_data": 1,
                    "update_param_values": 1,
                    "update_parameter_value": 1,
                    "update_parameters": 6,
                    "update_params": 4,
                    "update_registers": 1,
                    "update_values": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 14,
                    "data_address": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "function_address": 1,
                    "memory_address": 1,
                    "param": 1,
                    "param1": 1,
                    "param_addr": 1,
                    "param_address": 2,
                    "param_base_addr": 1,
                    "param_base_address": 1
                },
                "param_2": {
                    "array": 1,
                    "data": 6,
                    "data_array": 3,
                    "input_array": 1,
                    "input_values": 2,
                    "new_data": 1,
                    "param2": 1,
                    "param_array": 3,
                    "param_data": 1,
                    "param_vals": 1,
                    "param_values": 2,
                    "parameters": 5,
                    "params_array": 1,
                    "values": 2,
                    "values_to_update": 1
                },
                "uVar1": {
                    "flag1": 1,
                    "modified_data1": 2,
                    "modified_flag": 1,
                    "modified_flags": 1,
                    "modified_register1": 1,
                    "modified_value1": 2,
                    "new_data1": 1,
                    "new_flag_value": 1,
                    "new_value1": 1,
                    "updated_addr": 1,
                    "updated_data1": 1,
                    "updated_param1": 2,
                    "updated_val1": 1,
                    "updated_value1": 8,
                    "updated_value_1": 1,
                    "updated_var1": 6
                },
                "uVar2": {
                    "flag2": 1,
                    "modified_data2": 2,
                    "modified_register2": 1,
                    "modified_value1": 1,
                    "modified_value2": 2,
                    "new_data2": 1,
                    "new_value2": 1,
                    "old_value": 1,
                    "original_value": 2,
                    "updated_data2": 1,
                    "updated_param2": 2,
                    "updated_val2": 1,
                    "updated_value2": 8,
                    "updated_value_2": 1,
                    "updated_var2": 6
                },
                "uVar3": {
                    "data_value": 1,
                    "modified_data3": 1,
                    "new_data3": 1,
                    "new_value": 2,
                    "new_value3": 1,
                    "original_data": 1,
                    "original_value": 2,
                    "param_value": 1,
                    "updated_data3": 1,
                    "updated_param3": 2,
                    "updated_val3": 1,
                    "updated_value3": 8,
                    "updated_value_3": 1,
                    "updated_var3": 6,
                    "value": 1,
                    "value_to_modify": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid update_param_data_080022d0(int base_address,uint *data)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  uint updated_value3;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xfffffeff;\n  updated_value2 = *(uint *)(base_address + 4);\n  updated_value3 = *data;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xfffffdff | data[2] << 8;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xfffff7ff | data[3] << 8) & 0xfffffbff;\n    updated_value2 = updated_value2 & 0xffffcfff | (data[5] | data[6]) << 4;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffffff8c | updated_value3;\n  *(uint *)(base_address + 0x3c) = data[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_param_data_080022d0",
            "entrypoint": "0x080022d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080022d0": "update_param_data_080022d0",
                "param_1": "base_address",
                "param_2": "data",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2",
                "uVar3": "updated_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002324": {
            "additional_data": {
                "0x40012c00": {
                    "constant_value": 1,
                    "default_config_address": 1,
                    "default_constant": 1
                },
                "FUN_08002324": {
                    "initialize_parameters": 1,
                    "set_bits_and_values": 1,
                    "set_flags_and_values": 1,
                    "update_config": 3,
                    "update_data": 1,
                    "update_memory_info": 1,
                    "update_memory_state": 1,
                    "update_param": 1,
                    "update_param_values": 2,
                    "update_parameter": 1,
                    "update_parameter_values": 2,
                    "update_parameters": 6,
                    "update_params": 10
                },
                "iVar2": {
                    "first_data": 1,
                    "first_param": 2,
                    "first_value": 1,
                    "input_var1": 1,
                    "param1_value": 2,
                    "param2_copy": 1,
                    "param2_value": 1,
                    "param2_var1": 1,
                    "param_value": 1,
                    "param_value1": 1,
                    "temp2": 1,
                    "value1": 5,
                    "value2": 8,
                    "var1": 2,
                    "var2": 3
                },
                "iVar3": {
                    "input_var2": 1,
                    "param2_index": 1,
                    "param2_value": 1,
                    "param2_var2": 1,
                    "param3_value": 2,
                    "param_value2": 2,
                    "second_data": 1,
                    "second_param": 1,
                    "second_value": 1,
                    "temp3": 1,
                    "third_param": 1,
                    "value2": 5,
                    "value3": 8,
                    "var2": 2,
                    "var3": 3
                },
                "iVar4": {
                    "base_var": 1,
                    "constant": 4,
                    "constant_value": 3,
                    "default_address": 2,
                    "default_base": 2,
                    "default_config": 2,
                    "default_value": 4,
                    "default_var": 4,
                    "temp4": 1,
                    "value4": 4,
                    "var3": 2,
                    "var4": 2
                },
                "param_1": {
                    "address": 5,
                    "base_address": 10,
                    "config_address": 3,
                    "data_address": 1,
                    "function_param": 1,
                    "memory_address": 2,
                    "param": 1,
                    "param1": 1,
                    "param_address": 4,
                    "param_base": 1,
                    "param_pointer": 1,
                    "parameter": 1
                },
                "param_2": {
                    "config_data": 2,
                    "config_values": 1,
                    "input_params": 1,
                    "memory_info": 1,
                    "param2": 1,
                    "param_array": 4,
                    "param_values": 2,
                    "parameter_array": 2,
                    "parameter_values": 1,
                    "parameters": 8,
                    "parameters_array": 1,
                    "params": 4,
                    "params_array": 2,
                    "values": 1
                },
                "uVar1": {
                    "config_flags": 1,
                    "config_value": 1,
                    "data_value": 1,
                    "flag": 1,
                    "flag1": 1,
                    "flags": 3,
                    "info_flag": 1,
                    "mask": 3,
                    "mask1": 1,
                    "modified_value": 1,
                    "old_config_value": 1,
                    "original_value": 1,
                    "param1_copy": 1,
                    "param1_value": 1,
                    "temp1": 1,
                    "updated_var1": 1,
                    "value": 1,
                    "value1": 8,
                    "var1": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid update_params_08002324(int base_address,int *parameters)\n\n{\n  uint value1;\n  int value2;\n  int value3;\n  int value4;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffefff;\n  value1 = *(uint *)(base_address + 4);\n  value2 = *parameters;\n  value3 = parameters[2];\n  value4 = 0x40012c00;\n  if (base_address == 0x40012c00) {\n    value4 = parameters[5];\n    value1 = value1 & 0xffffbfff;\n  }\n  if (base_address == 0x40012c00) {\n    value1 = value1 | value4 << 6;\n  }\n  *(uint *)(base_address + 4) = value1;\n  *(uint *)(base_address + 0x1c) = *(uint *)(base_address + 0x1c) & 0xffff8cff | value2 << 8;\n  *(int *)(base_address + 0x40) = parameters[1];\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffdfff | value3 << 0xc;\n  return;\n}\n\n",
            "current_name": "update_params_08002324",
            "entrypoint": "0x08002324",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002324": "update_params_08002324",
                "iVar2": "value2",
                "iVar3": "value3",
                "iVar4": "value4",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "value1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002368": {
            "additional_data": {
                "FUN_08002368": {
                    "update_configuration": 1,
                    "update_data": 1,
                    "update_memory": 12,
                    "update_memory_values": 3,
                    "update_param_values": 2,
                    "update_parameter_values": 1,
                    "update_parameters": 5,
                    "update_params": 2,
                    "update_registers": 4
                },
                "param_1": {
                    "current_configuration": 1,
                    "data_pointer": 1,
                    "input_array": 1,
                    "input_params": 2,
                    "memory": 2,
                    "memory_address": 1,
                    "memory_block": 2,
                    "memory_block1": 1,
                    "memory_destination": 1,
                    "memory_location": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 2,
                    "original_params": 1,
                    "param_array1": 1,
                    "param_array_1": 1,
                    "parameters1": 1,
                    "params_src": 1,
                    "ptr_memory": 1,
                    "register_array1": 1,
                    "register_pointer": 1,
                    "registers": 2,
                    "target_memory": 3,
                    "target_params": 2
                },
                "param_2": {
                    "data": 1,
                    "data_array": 1,
                    "data_block": 2,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "memory_block2": 1,
                    "memory_source": 1,
                    "new_configuration": 1,
                    "new_memory_values": 1,
                    "new_params": 2,
                    "param_array2": 1,
                    "param_array_2": 1,
                    "parameters2": 1,
                    "params_dest": 1,
                    "ptr_data": 1,
                    "register_array2": 1,
                    "source": 1,
                    "source_data": 1,
                    "source_memory": 4,
                    "source_params": 2,
                    "update_pointer": 1,
                    "updated_params": 1,
                    "values": 1
                },
                "uVar1": {
                    "memory_value": 1,
                    "modified_value": 1,
                    "new_memory_value": 1,
                    "target_value": 1,
                    "temp_value": 1,
                    "updated_register_value": 1,
                    "updated_value": 23,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080023d0"
            ],
            "code": "\nvoid update_memory_values_08002368(uint *target_memory,uint *source_memory)\n\n{\n  uint updated_value;\n  \n  updated_value = *target_memory;\n  if (((((target_memory == (uint *)0x40012c00) || (target_memory == (uint *)0x40000000)) ||\n       (target_memory == (uint *)0x40000400)) || (target_memory == (uint *)0x40000800)) &&\n     (((updated_value = updated_value & 0xffffff8f | source_memory[1], target_memory == (uint *)0x40012c00 ||\n       (target_memory == (uint *)0x40000000)) ||\n      ((target_memory == (uint *)0x40000400 || (target_memory == (uint *)0x40000800)))))) {\n    updated_value = updated_value & 0xfffffcff | source_memory[3];\n  }\n  *target_memory = updated_value;\n  target_memory[0xb] = source_memory[2];\n  target_memory[10] = *source_memory;\n  updated_value = 0x40012c00;\n  if (target_memory == (uint *)0x40012c00) {\n    updated_value = source_memory[4];\n  }\n  if (target_memory == (uint *)0x40012c00) {\n    target_memory[0xc] = updated_value;\n  }\n  target_memory[5] = 1;\n  return;\n}\n\n",
            "current_name": "update_memory_values_08002368",
            "entrypoint": "0x08002368",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002368": "update_memory_values_08002368",
                "param_1": "target_memory",
                "param_2": "source_memory",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080023d0": {
            "additional_data": {
                "0": {
                    "flag_disabled": 1
                },
                "2": {
                    "flag_enabled": 1
                },
                "FUN_080023d0": {
                    "initialize_data": 3,
                    "initialize_function": 1,
                    "process_data": 4,
                    "process_parameter": 1,
                    "update_and_flag": 1,
                    "update_and_flag_memory": 1,
                    "update_and_return_result": 1,
                    "update_data": 5,
                    "update_data_and_memory": 2,
                    "update_data_flags": 3,
                    "update_flags": 3,
                    "update_flags_and_values": 3,
                    "update_memory": 1,
                    "update_memory_flags": 1,
                    "verify_data_and_update": 1
                },
                "param_1": {
                    "data": 8,
                    "data_array": 2,
                    "data_length": 1,
                    "data_pointer": 3,
                    "data_ptr": 14,
                    "flags": 1,
                    "parameter": 1,
                    "parameter_array": 1
                },
                "update_data_flags_08004d8c": {
                    "update_data_flags": 18,
                    "update_data_flags_helper": 3,
                    "update_flags": 1,
                    "update_flags_data": 1
                },
                "update_memory_values_08002368": {
                    "update_memory_values": 22
                },
                "x": {
                    "flag": 1
                }
            },
            "called": [
                "FUN_08002368",
                "FUN_08004d8c"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 update_data_flags_080023d0(undefined4 *data_ptr)\n\n{\n  if (data_ptr != (undefined4 *)0flag0) {\n    if (*(char *)((int)data_ptr + 0flag39) == '\\0') {\n      *(undefined *)(data_ptr + 0flage) = 0;\n      update_data_flags_080023d0();\n    }\n    *(undefined *)((int)data_ptr + 0flag39) = 2;\n    update_memory_values(*data_ptr,data_ptr + 1);\n    *(undefined *)((int)data_ptr + 0flag39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_flags_080023d0",
            "entrypoint": "0x080023d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080023d0": "update_data_flags_080023d0",
                "param_1": "data_ptr",
                "update_data_flags_08004d8c": "update_data_flags",
                "update_memory_values_08002368": "update_memory_values",
                "x": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002404": {
            "additional_data": {
                "0x18": {
                    "offset2": 1
                },
                "0x20": {
                    "offset1": 1
                },
                "0x38": {
                    "offset3": 1
                },
                "FUN_08002404": {
                    "set_values_and_bits": 1,
                    "update_configuration": 3,
                    "update_data": 6,
                    "update_param_values": 2,
                    "update_parameters": 8,
                    "update_params": 7,
                    "update_register": 2,
                    "update_settings": 1,
                    "update_variables": 1
                },
                "iVar3": {
                    "config_value": 1,
                    "data_value": 1,
                    "input_value": 4,
                    "new_value": 1,
                    "new_value3": 1,
                    "param2_value": 1,
                    "param_value": 9,
                    "parameter_value1": 1,
                    "temp_value": 1,
                    "updated_value3": 3,
                    "updated_var3": 1,
                    "value": 2,
                    "value1": 2,
                    "value_to_apply": 1,
                    "value_to_set": 1,
                    "var_value": 1
                },
                "param_1": {
                    "address": 4,
                    "base_address": 12,
                    "config_address": 2,
                    "config_ptr": 1,
                    "data_address": 5,
                    "data_ptr": 1,
                    "object_address": 1,
                    "param_address": 2,
                    "register_address": 2,
                    "settings_address": 1
                },
                "param_2": {
                    "config_data": 2,
                    "data_array": 1,
                    "data_values": 2,
                    "param_array": 6,
                    "param_values": 2,
                    "parameters": 9,
                    "params": 1,
                    "params_array": 3,
                    "settings_data": 1,
                    "values": 4
                },
                "uVar1": {
                    "bitwise_result1": 1,
                    "modified_bits1": 1,
                    "modified_data1": 1,
                    "modified_param1": 1,
                    "modified_value": 1,
                    "modified_value1": 1,
                    "new_flags": 1,
                    "new_register_value1": 1,
                    "updated_config": 1,
                    "updated_flags": 3,
                    "updated_value1": 18,
                    "updated_var1": 1
                },
                "uVar2": {
                    "bitwise_result2": 1,
                    "modified_bits2": 1,
                    "modified_data2": 1,
                    "modified_param2": 1,
                    "modified_value2": 1,
                    "new_register_value2": 1,
                    "new_var": 1,
                    "updated_value": 4,
                    "updated_value2": 19,
                    "updated_var2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800245c"
            ],
            "code": "\nvoid update_parameters_08002404(int base_address,int *parameters)\n\n{\n  uint updated_value1;\n  uint updated_value2;\n  int param_value;\n  \n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & 0xffffffef;\n  updated_value2 = *(uint *)(base_address + 4);\n  param_value = *parameters;\n  updated_value1 = *(uint *)(base_address + 0x20) & 0xffffffdf | parameters[2] << 4;\n  if (base_address == 0x40012c00) {\n    updated_value1 = (updated_value1 & 0xffffff7f | parameters[3] << 4) & 0xffffffbf;\n    updated_value2 = updated_value2 & 0xfffff3ff | (parameters[5] | parameters[6]) << 2;\n  }\n  *(uint *)(base_address + 4) = updated_value2;\n  *(uint *)(base_address + 0x18) = *(uint *)(base_address + 0x18) & 0xffff8cff | param_value << 8;\n  *(int *)(base_address + 0x38) = parameters[1];\n  *(uint *)(base_address + 0x20) = updated_value1;\n  return;\n}\n\n",
            "current_name": "update_parameters_08002404",
            "entrypoint": "0x08002404",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002404": "update_parameters_08002404",
                "iVar3": "param_value",
                "param_1": "base_address",
                "param_2": "parameters",
                "uVar1": "updated_value1",
                "uVar2": "updated_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800245c": {
            "additional_data": {
                "FUN_0800245c": {
                    "initialize_flags_and_values": 1,
                    "initialize_parameters": 1,
                    "update_and_set_flags": 2,
                    "update_and_set_params": 1,
                    "update_flag_values": 1,
                    "update_flagged_values": 1,
                    "update_flags_and_values": 14,
                    "update_param_flags": 3,
                    "update_param_status": 1,
                    "update_param_values": 1,
                    "update_parameter": 4,
                    "update_parameters": 1
                },
                "extraout_r1": {
                    "extra1": 3,
                    "extra_out1": 5,
                    "extra_out_1": 1,
                    "extra_out_r1": 1,
                    "extra_output1": 3,
                    "extra_val1": 1,
                    "extra_var1": 1,
                    "extra_var_1": 1,
                    "extraout_1": 1,
                    "out_r1": 1,
                    "ptr1": 1,
                    "temp1": 9,
                    "temp_extraout_r1": 1,
                    "var1": 1
                },
                "extraout_r1_00": {
                    "extra2": 3,
                    "extra_out2": 5,
                    "extra_out_2": 1,
                    "extra_out_r1_00": 1,
                    "extra_output2": 3,
                    "extra_val2": 1,
                    "extra_var2": 1,
                    "extra_var_2": 1,
                    "extraout_2": 1,
                    "out_r1_00": 1,
                    "ptr2": 1,
                    "temp2": 8,
                    "temp2_1": 1,
                    "temp_extraout_r1_00": 1,
                    "var2": 1
                },
                "extraout_r1_01": {
                    "extra3": 3,
                    "extra_out3": 5,
                    "extra_out_3": 1,
                    "extra_out_r1_01": 1,
                    "extra_output3": 3,
                    "extra_val3": 1,
                    "extra_var3": 1,
                    "extra_var_3": 1,
                    "extraout_3": 1,
                    "out_r1_01": 1,
                    "ptr3": 1,
                    "temp2_2": 1,
                    "temp3": 8,
                    "temp_extraout_r1_01": 1,
                    "var3": 1
                },
                "extraout_r1_02": {
                    "extra4": 3,
                    "extra_out4": 5,
                    "extra_out_4": 1,
                    "extra_out_r1_02": 1,
                    "extra_output4": 3,
                    "extra_val4": 1,
                    "extra_var4": 1,
                    "extra_var_4": 1,
                    "extraout_4": 1,
                    "out_r1_02": 1,
                    "ptr4": 1,
                    "temp2_3": 1,
                    "temp4": 8,
                    "temp_extraout_r1_02": 1,
                    "var4": 1
                },
                "iVar1": {
                    "i_var": 2,
                    "i_var1": 4,
                    "param_value": 1,
                    "temp1": 2,
                    "temp3_1": 1,
                    "temp5": 5,
                    "temp_i_var1": 1,
                    "temp_int1": 1,
                    "temp_var1": 5,
                    "temp_var_1": 2,
                    "updated_value": 1,
                    "var1": 3,
                    "var3": 1,
                    "var_1": 1,
                    "variable1": 1
                },
                "iVar3": {
                    "data_ptr": 1,
                    "i_var3": 4,
                    "param_ptr": 1,
                    "param_value": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp3_2": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "temp_i_var3": 1,
                    "temp_int2": 1,
                    "temp_var2": 3,
                    "temp_var3": 2,
                    "temp_var_3": 2,
                    "updated_var2": 2,
                    "var3": 3,
                    "var5": 1,
                    "var_3": 1,
                    "variable3": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 8,
                    "flag_params": 1,
                    "input_array": 1,
                    "input_params": 2,
                    "param_array": 7,
                    "param_list": 1,
                    "parameter": 2,
                    "parameters": 5,
                    "params": 1,
                    "pointer": 1,
                    "ptr_input": 1
                },
                "param_2": {
                    "arg1": 1,
                    "param2": 14,
                    "param_2": 8,
                    "param_two": 1,
                    "status_code_1": 1,
                    "unused_param2": 1,
                    "value1": 4,
                    "var1": 1
                },
                "param_3": {
                    "arg2": 1,
                    "operation_code": 1,
                    "param3": 14,
                    "param_3": 7,
                    "param_three": 1,
                    "param_type": 1,
                    "status_code_2": 1,
                    "value2": 4,
                    "var2": 1
                },
                "set_flags_and_values_08002280": {
                    "set_flags_and_values": 2
                },
                "uVar2": {
                    "flags": 1,
                    "temp2": 1,
                    "temp4_1": 1,
                    "temp6": 1,
                    "temp_var2": 1,
                    "temp_var_2": 2,
                    "updated_flags": 1,
                    "updated_val": 1,
                    "updated_value": 11,
                    "updated_var": 5,
                    "updated_var2": 1,
                    "var2": 2,
                    "var4": 1,
                    "var_2": 1,
                    "variable2": 1
                },
                "update_param_data_080022d0": {
                    "update_param_data": 2
                },
                "update_parameters_08002404": {
                    "update_parameters": 2
                },
                "update_params_08002324": {
                    "update_params": 2
                }
            },
            "called": [
                "FUN_08002280",
                "FUN_08002324",
                "FUN_08002404",
                "FUN_080022d0"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nvoid update_flags_and_values_0800245c(int *data,undefined4 param2,undefined4 param3)\n\n{\n  int temp1;\n  int temp2;\n  int temp3;\n  int temp4;\n  int temp_var1;\n  uint updated_value;\n  int i_var3;\n  \n  if (*(char *)(data + 0xe) == '\\x01') {\n    return;\n  }\n  *(undefined *)((int)data + 0x39) = 2;\n  *(undefined *)(data + 0xe) = 1;\n  switch(param3) {\n  case 0:\n    set_flags_and_values(*data);\n    i_var3 = *data;\n    updated_value = *(uint *)(temp1 + 0x10);\n    *(uint *)(i_var3 + 0x18) = *(uint *)(i_var3 + 0x18) | 8;\n    *(uint *)(i_var3 + 0x18) = *(uint *)(i_var3 + 0x18) & 0xfffffffb;\n    updated_value = *(uint *)(i_var3 + 0x18) | updated_value;\n    break;\n  default:\n    goto switchD_0800247a_caseD_1;\n  case 4:\n    update_parameters(*data);\n    i_var3 = *data;\n    temp_var1 = *(int *)(temp2 + 0x10);\n    *(uint *)(i_var3 + 0x18) = *(uint *)(i_var3 + 0x18) | 0x800;\n    *(uint *)(i_var3 + 0x18) = *(uint *)(i_var3 + 0x18) & 0xfffffbff;\n    updated_value = *(uint *)(i_var3 + 0x18) | temp_var1 << 8;\n    break;\n  case 8:\n    update_param_data(*data);\n    i_var3 = *data;\n    updated_value = *(uint *)(temp3 + 0x10);\n    *(uint *)(i_var3 + 0x1c) = *(uint *)(i_var3 + 0x1c) | 8;\n    *(uint *)(i_var3 + 0x1c) = *(uint *)(i_var3 + 0x1c) & 0xfffffffb;\n    updated_value = *(uint *)(i_var3 + 0x1c) | updated_value;\n    goto LAB_080024fa;\n  case 0xc:\n    update_params(*data);\n    i_var3 = *data;\n    temp_var1 = *(int *)(temp4 + 0x10);\n    *(uint *)(i_var3 + 0x1c) = *(uint *)(i_var3 + 0x1c) | 0x800;\n    *(uint *)(i_var3 + 0x1c) = *(uint *)(i_var3 + 0x1c) & 0xfffffbff;\n    updated_value = *(uint *)(i_var3 + 0x1c) | temp_var1 << 8;\nLAB_080024fa:\n    *(uint *)(i_var3 + 0x1c) = updated_value;\n    goto switchD_0800247a_caseD_1;\n  }\n  *(uint *)(i_var3 + 0x18) = updated_value;\nswitchD_0800247a_caseD_1:\n  *(undefined *)((int)data + 0x39) = 1;\n  *(undefined *)(data + 0xe) = 0;\n  return;\n}\n\n",
            "current_name": "update_flags_and_values_0800245c",
            "entrypoint": "0x0800245c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800245c": "update_flags_and_values_0800245c",
                "extraout_r1": "temp1",
                "extraout_r1_00": "temp2",
                "extraout_r1_01": "temp3",
                "extraout_r1_02": "temp4",
                "iVar1": "temp_var1",
                "iVar3": "i_var3",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "set_flags_and_values_08002280": "set_flags_and_values",
                "uVar2": "updated_value",
                "update_param_data_080022d0": "update_param_data",
                "update_parameters_08002404": "update_parameters",
                "update_params_08002324": "update_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002520": {
            "additional_data": {
                "FUN_08002520": {
                    "clear_bit_and_shift": 1,
                    "clear_bit_and_shift_in": 1,
                    "clear_bit_and_shift_left": 1,
                    "set_bit": 2,
                    "update_bit": 10,
                    "update_bit_and_shift": 1,
                    "update_bit_in_value": 1,
                    "update_bit_value": 6,
                    "update_bits_in_integer": 1,
                    "update_bitwise_value": 6,
                    "update_integer_bits": 1
                },
                "param_1": {
                    "array": 1,
                    "array_start": 1,
                    "base_address": 23,
                    "data": 2,
                    "data_address": 3,
                    "object_address": 1
                },
                "param_2": {
                    "bit_index": 3,
                    "bit_position": 27,
                    "index": 1
                },
                "param_3": {
                    "bit_value": 5,
                    "new_bit_value": 2,
                    "new_value": 18,
                    "value": 5,
                    "value_to_update": 1
                },
                "param_4": {
                    "temp_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002538"
            ],
            "code": "\nvoid update_bit_in_value_08002520(int base_address,uint bit_position,int new_value)\n\n{\n  *(uint *)(base_address + 0x20) = *(uint *)(base_address + 0x20) & ~(1 << (bit_position & 0xff));\n  *(uint *)(base_address + 0x20) = new_value << (bit_position & 0xff) | *(uint *)(base_address + 0x20);\n  return;\n}\n\n",
            "current_name": "update_bit_in_value_08002520",
            "entrypoint": "0x08002520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002520": "update_bit_in_value_08002520",
                "param_1": "base_address",
                "param_2": "bit_position",
                "param_3": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002538": {
            "additional_data": {
                "FUN_08002538": {
                    "set_bit_and_update_value": 3,
                    "set_bit_in_value": 1,
                    "update_and_set_bit": 6,
                    "update_and_set_bit_in_value": 2,
                    "update_and_set_flag": 3,
                    "update_and_toggle_bit": 1,
                    "update_bit_and_set_flag": 5,
                    "update_bit_in_value": 2,
                    "update_flag_and_value": 1,
                    "update_value_and_enable_bit": 1,
                    "update_value_and_set_bit": 1,
                    "update_value_and_set_flag": 1,
                    "update_value_bit": 1,
                    "update_value_with_bit": 3
                },
                "param_1": {
                    "array_ptr": 1,
                    "bit_array": 1,
                    "bit_array_ptr": 1,
                    "bit_value": 1,
                    "data_pointer": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_ptr": 1,
                    "p_value": 1,
                    "pointer": 1,
                    "value": 3,
                    "value_address": 1,
                    "value_pointer": 4,
                    "value_ptr": 12
                },
                "param_2": {
                    "bit": 1,
                    "bit_index": 1,
                    "bit_position": 13,
                    "bit_to_enable": 1,
                    "bit_value": 5,
                    "flag": 1,
                    "flag_value": 3,
                    "input_value": 1,
                    "new_value": 1,
                    "value": 3,
                    "value_to_update": 1
                },
                "puVar2": {
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "bit_ptr": 1,
                    "current_array": 1,
                    "current_bit_array": 1,
                    "current_pointer": 1,
                    "current_value": 1,
                    "current_value_ptr": 4,
                    "data_pointer": 1,
                    "input_ptr_value": 1,
                    "p_value_current": 1,
                    "pointer": 1,
                    "pointer_value": 1,
                    "ptr_value": 1,
                    "updated_value_pointer": 1,
                    "value": 1,
                    "value_pointer": 2,
                    "value_ptr": 9
                },
                "uRam40012c44": {
                    "constant_value": 1,
                    "flag_value": 1
                },
                "uVar1": {
                    "base_value": 1,
                    "default_value": 2,
                    "flag_value": 1,
                    "new_flag_value": 1,
                    "new_value": 18,
                    "temp_value": 1,
                    "updated_value": 7
                }
            },
            "called": [
                "FUN_08002520"
            ],
            "calling": [
                "FUN_08003ff4"
            ],
            "code": "\nundefined4 update_bit_and_set_flag_08002538(uint **value_ptr,undefined4 bit_position)\n\n{\n  uint new_value;\n  uint *value_ptr;\n  \n  update_bit_in_value_08002520(*value_ptr,bit_position,1);\n  value_ptr = *value_ptr;\n  new_value = 0x40012c00;\n  if (value_ptr == (uint *)0x40012c00) {\n    new_value = flag_value | 0x8000;\n  }\n  if (value_ptr == (uint *)0x40012c00) {\n    value_ptr[0x11] = new_value;\n  }\n  *value_ptr = *value_ptr | 1;\n  return 0;\n}\n\n",
            "current_name": "update_bit_and_set_flag_08002538",
            "entrypoint": "0x08002538",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002538": "update_bit_and_set_flag_08002538",
                "param_1": "value_ptr",
                "param_2": "bit_position",
                "puVar2": "value_ptr",
                "uRam40012c44": "flag_value",
                "uVar1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002564": {
            "additional_data": {
                "FUN_08002564": {
                    "calculate_checksum": 1,
                    "check_and_modify": 1,
                    "check_and_reset_flag": 1,
                    "check_and_set_flag": 3,
                    "check_and_update_flag": 3,
                    "check_and_update_flags": 1,
                    "check_and_update_param": 1,
                    "check_and_update_status": 1,
                    "extracted_data": 1,
                    "initialize_data": 1,
                    "initialize_flags_and_values": 1,
                    "process_data": 3,
                    "set_flag_if_not_set": 1,
                    "update_and_check_status": 1,
                    "update_data": 2,
                    "update_flag_and_set_value": 1,
                    "update_flags_and_data": 1,
                    "update_flags_and_return": 1,
                    "update_flags_and_return_status": 1,
                    "update_param_and_return_status": 1,
                    "update_parameter_value": 1,
                    "validate_and_set_flag": 1,
                    "validate_and_update_data": 1,
                    "verify_and_update_data": 1
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "data": 6,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_pointer": 5,
                    "flag_array": 3,
                    "flags_array": 1,
                    "flags_ptr": 1,
                    "input_array": 4,
                    "input_params": 2,
                    "input_pointer": 1,
                    "param_array": 1,
                    "parameter_array": 1,
                    "status_array": 1
                },
                "param_2": {
                    "bit_array": 1,
                    "bit_mask": 2,
                    "bitmask": 2,
                    "bitmask_array": 1,
                    "bits": 1,
                    "bitwise_array": 1,
                    "bitwise_flags": 1,
                    "checksum": 1,
                    "data": 1,
                    "data_array": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "flag_array": 2,
                    "flags": 1,
                    "input_array": 1,
                    "number_ptr": 1,
                    "param_array": 1,
                    "param_array2": 1,
                    "update_array": 1,
                    "update_values": 1,
                    "update_values_array": 1,
                    "value_array": 2,
                    "values": 4
                },
                "uVar1": {
                    "result": 13,
                    "result_code": 1,
                    "return_value": 12,
                    "status": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 verify_and_update_data_08002564(int *data,uint *values)\n\n{\n  undefined4 result;\n  \n  result = 2;\n  if (*(char *)(data + 0xe) != '\\x01') {\n    *(undefined *)((int)data + 0x39) = 2;\n    *(uint *)(*data + 0x44) =\n         *values | values[1] | values[2] | values[3] | values[4] | values[5] | values[6];\n    *(undefined *)((int)data + 0x39) = 1;\n    result = 0;\n    *(undefined *)(data + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "verify_and_update_data_08002564",
            "entrypoint": "0x08002564",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002564": "verify_and_update_data_08002564",
                "param_1": "data",
                "param_2": "values",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025a4": {
            "additional_data": {
                "FUN_080025a4": {
                    "configure_hardware": 1,
                    "configure_peripheral": 1,
                    "initialize_memory": 1,
                    "process_data": 1,
                    "reverse_and_update_flags": 1,
                    "set_flags_and_status": 1,
                    "set_permissions": 4,
                    "set_permissions_and_flag": 1,
                    "set_values_and_return_status": 1,
                    "update_configuration": 1,
                    "update_flags": 1,
                    "update_flags_and_status": 2,
                    "update_memory_flags": 1,
                    "update_permissions": 12,
                    "update_settings": 2
                },
                "iVar3": {
                    "address": 1,
                    "array_pointer": 3,
                    "base_address": 8,
                    "config_address": 1,
                    "data_value": 1,
                    "first_element": 1,
                    "first_param": 1,
                    "first_value": 2,
                    "memory_address": 1,
                    "peripheral_address": 1,
                    "permission_value": 1,
                    "ptr": 5,
                    "ptr_param1": 1,
                    "ptr_permissions": 2,
                    "ptr_settings": 1,
                    "ptr_to_data": 1
                },
                "param_1": {
                    "array": 2,
                    "config": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "flags": 1,
                    "flags_and_status": 1,
                    "hardware_config": 1,
                    "input_data": 1,
                    "input_params": 1,
                    "memory_pointer": 2,
                    "params": 1,
                    "peripheral_structure": 1,
                    "permission_array": 1,
                    "permission_data": 1,
                    "permission_pointer": 1,
                    "permissions": 8,
                    "permissions_array": 3,
                    "settings": 3
                },
                "param_2": {
                    "access_data": 1,
                    "bitmask": 1,
                    "bits_to_update": 1,
                    "config_data": 1,
                    "config_pointer": 1,
                    "configuration_values": 1,
                    "data_pointer": 1,
                    "flags": 2,
                    "mask": 2,
                    "mask_array": 1,
                    "mask_pointer": 1,
                    "mask_ptr": 1,
                    "new_permissions": 1,
                    "new_values": 2,
                    "permissions_mask": 1,
                    "register_values": 1,
                    "update_array": 1,
                    "update_values": 1,
                    "values": 9,
                    "values_to_update": 1
                },
                "uVar1": {
                    "access_value1": 1,
                    "config_value1": 1,
                    "first_mask": 1,
                    "first_update": 1,
                    "first_value": 5,
                    "flag1": 1,
                    "mask2": 4,
                    "mask_value1": 1,
                    "mask_value_1": 1,
                    "new_value": 1,
                    "new_value1": 1,
                    "new_value2": 1,
                    "old_permission_bits": 1,
                    "old_value1": 1,
                    "second_mask_value": 1,
                    "temp1": 2,
                    "temp_var1": 1,
                    "updated_value1": 2,
                    "value1": 1,
                    "value2": 3
                },
                "uVar2": {
                    "result": 15,
                    "result_code": 3,
                    "return_val": 2,
                    "return_value": 5,
                    "status": 2
                },
                "uVar4": {
                    "access_value2": 1,
                    "config_value2": 1,
                    "data_value": 1,
                    "flag2": 1,
                    "mask1": 4,
                    "mask_value": 2,
                    "mask_value2": 1,
                    "mask_value_2": 1,
                    "new_mask": 1,
                    "new_permission_bits": 1,
                    "new_value": 1,
                    "new_value1": 2,
                    "new_value2": 1,
                    "second_mask": 1,
                    "second_update": 1,
                    "second_value": 4,
                    "temp2": 1,
                    "updated_value2": 2,
                    "value1": 3,
                    "value2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nundefined4 update_permissions_080025a4(int *permissions,uint *values)\n\n{\n  uint first_value;\n  undefined4 result;\n  int base_address;\n  uint mask1;\n  \n  result = 2;\n  if (*(char *)(permissions + 0xe) != '\\x01') {\n    *(undefined *)((int)permissions + 0x39) = 2;\n    base_address = *permissions;\n    mask1 = *values;\n    first_value = values[1];\n    *(uint *)(base_address + 4) = *(uint *)(base_address + 4) & 0xffffff8f;\n    *(uint *)(base_address + 4) = *(uint *)(base_address + 4) | mask1;\n    *(uint *)(base_address + 8) = *(uint *)(base_address + 8) & 0xffffff7f;\n    *(uint *)(base_address + 8) = *(uint *)(base_address + 8) | first_value;\n    *(undefined *)((int)permissions + 0x39) = 1;\n    result = 0;\n    *(undefined *)(permissions + 0xe) = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "update_permissions_080025a4",
            "entrypoint": "0x080025a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025a4": "update_permissions_080025a4",
                "iVar3": "base_address",
                "param_1": "permissions",
                "param_2": "values",
                "uVar1": "first_value",
                "uVar2": "result",
                "uVar4": "mask1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025e8": {
            "additional_data": {
                "FUN_080025e8": {
                    "set_values": 1,
                    "update_config": 1,
                    "update_configuration": 5,
                    "update_data": 1,
                    "update_parameters": 4,
                    "update_params": 2,
                    "update_settings": 1,
                    "update_values": 16
                },
                "get_shifted_value_08002220": {
                    "get_shifted_value2": 1,
                    "get_shifted_value_b": 1
                },
                "get_shifted_value_08002250": {
                    "get_shifted_value1": 1,
                    "get_shifted_value_a": 1
                },
                "iVar1": {
                    "shift1": 1,
                    "shift_value4": 1,
                    "shifted_val1": 1,
                    "shifted_value1": 22,
                    "shifted_value2": 1,
                    "value1": 5
                },
                "iVar2": {
                    "int_value3": 1,
                    "shift2": 1,
                    "shift_value3": 1,
                    "shifted_val2": 1,
                    "shifted_value2": 22,
                    "value2": 5
                },
                "iVar4": {
                    "calc1": 1,
                    "calculated_value1": 12,
                    "calculation1": 2,
                    "calculation_result1": 1,
                    "computed_value1": 2,
                    "int_value1": 1,
                    "param1_value": 1,
                    "result1": 3,
                    "shift_value1": 1,
                    "shifted_value1": 1,
                    "shifted_value4": 2,
                    "updated_value1": 2,
                    "value1": 1,
                    "value4": 1
                },
                "iVar5": {
                    "array_element1": 1,
                    "array_value": 1,
                    "calc2": 1,
                    "calculation2": 1,
                    "config_size": 1,
                    "int_value2": 1,
                    "param1_value": 10,
                    "param1_value1": 1,
                    "param2_value": 1,
                    "param_multiplier": 1,
                    "param_size": 1,
                    "parameter1": 2,
                    "result2": 1,
                    "shift_value": 1,
                    "shift_value2": 1,
                    "shifted_value4": 1,
                    "shifted_value5": 1,
                    "value1": 2,
                    "value2": 1,
                    "value5": 1
                },
                "iVar6": {
                    "address": 3,
                    "array_base": 1,
                    "array_ptr": 1,
                    "base_address": 19,
                    "config_buffer": 1,
                    "data_address": 1,
                    "first_element": 1,
                    "i_var6": 2,
                    "memory_address": 1,
                    "param1_value2": 1
                },
                "param_1": {
                    "array": 1,
                    "config": 2,
                    "config_data": 2,
                    "configuration": 2,
                    "data": 1,
                    "input_array": 3,
                    "input_values": 1,
                    "param": 2,
                    "parameters": 6,
                    "params": 2,
                    "settings": 1,
                    "values": 7,
                    "values_array": 1
                },
                "uVar3": {
                    "calculation_result2": 1,
                    "flag": 1,
                    "shift3": 1,
                    "shifted_val3": 1,
                    "shifted_value1": 1,
                    "shifted_value3": 21,
                    "value3": 5
                }
            },
            "called": [
                "FUN_08002220",
                "FUN_08002250"
            ],
            "calling": [
                "FUN_08002724"
            ],
            "code": "\nvoid update_values_080025e8(int *values)\n\n{\n  int shifted_value1;\n  int shifted_value2;\n  uint shifted_value3;\n  int calculated_value1;\n  int param1_value;\n  int base_address;\n  \n  base_address = *values;\n  shifted_value3 = values[4];\n  *(uint *)(base_address + 0x10) = *(uint *)(base_address + 0x10) & 0xffffcfff | values[3];\n  *(uint *)(base_address + 0xc) = values[2] | shifted_value3 | values[5] | *(uint *)(base_address + 0xc) & 0xffffe9f3;\n  *(uint *)(base_address + 0x14) = *(uint *)(base_address + 0x14) & 0xfffffcff | values[6];\n  if (base_address == 0x40013800) {\n    shifted_value1 = get_shifted_value1();\n    calculated_value1 = (int)(((ulonglong)(uint)(shifted_value1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    shifted_value1 = get_shifted_value1();\n    param1_value = values[1];\n    shifted_value2 = get_shifted_value1();\n    shifted_value2 = (uint)(shifted_value1 * 0x19) / (uint)(param1_value << 2) +\n            (int)(((ulonglong)(uint)(shifted_value2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) *\n            -100;\n    shifted_value1 = get_shifted_value1();\n    shifted_value3 = (uint)(shifted_value1 * 0x19) / (uint)(values[1] << 2);\n    shifted_value1 = get_shifted_value1();\n  }\n  else {\n    shifted_value1 = get_shifted_value2();\n    calculated_value1 = (int)(((ulonglong)(uint)(shifted_value1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100);\n    shifted_value1 = get_shifted_value2();\n    param1_value = values[1];\n    shifted_value2 = get_shifted_value2();\n    shifted_value2 = (uint)(shifted_value1 * 0x19) / (uint)(param1_value << 2) +\n            (int)(((ulonglong)(uint)(shifted_value2 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100) *\n            -100;\n    shifted_value1 = get_shifted_value2();\n    shifted_value3 = (uint)(shifted_value1 * 0x19) / (uint)(values[1] << 2);\n    shifted_value1 = get_shifted_value2();\n  }\n  *(uint *)(base_address + 8) =\n       (((shifted_value3 + (int)(((ulonglong)(uint)(shifted_value1 * 0x19) / (ulonglong)(uint)(values[1] << 2)) / 100\n                       ) * -100) * 0x10 + 0x32) / 100 & 0xf | (shifted_value2 * 0x10 + 0x32U) / 100 & 0xf0) +\n       calculated_value1 * 0x10;\n  return;\n}\n\n",
            "current_name": "update_values_080025e8",
            "entrypoint": "0x080025e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025e8": "update_values_080025e8",
                "get_shifted_value_08002220": "get_shifted_value2",
                "get_shifted_value_08002250": "get_shifted_value1",
                "iVar1": "shifted_value1",
                "iVar2": "shifted_value2",
                "iVar4": "calculated_value1",
                "iVar5": "param1_value",
                "iVar6": "base_address",
                "param_1": "values",
                "uVar3": "shifted_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002724": {
            "additional_data": {
                "FUN_08002724": {
                    "check_and_update_param": 1,
                    "initialize_memory": 6,
                    "process_memory": 1,
                    "update_configuration": 1,
                    "update_data": 1,
                    "update_flags": 3,
                    "update_function": 3,
                    "update_memory": 2,
                    "update_memory_address_and_bits": 1,
                    "update_memory_and_bits": 1,
                    "update_memory_and_values": 2,
                    "update_memory_values": 1,
                    "update_param_values": 2,
                    "update_parameters": 2,
                    "update_values": 3,
                    "update_values_and_memory_address": 1
                },
                "iVar1": {
                    "address": 2,
                    "arr_element": 1,
                    "array_ptr": 1,
                    "base_address": 2,
                    "config_address": 1,
                    "current_address_value": 1,
                    "data_array_ptr": 1,
                    "data_ptr": 1,
                    "mem_addr": 1,
                    "memory_address": 2,
                    "pointer": 1,
                    "ptr_data": 1,
                    "ptr_flags": 1,
                    "ptr_param_values": 1,
                    "temp": 2,
                    "temp_value": 1,
                    "temp_var": 5,
                    "temp_var1": 1,
                    "temp_variable": 1,
                    "tmp_var1": 1,
                    "value": 1,
                    "var1": 1,
                    "variable1": 1
                },
                "param_1": {
                    "config": 1,
                    "data": 3,
                    "data_array": 1,
                    "flags": 1,
                    "input_array": 3,
                    "input_data": 1,
                    "input_param": 1,
                    "mem_block": 1,
                    "memory": 3,
                    "memory_address": 2,
                    "memory_location": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "param": 3,
                    "param_arr": 1,
                    "param_values": 1,
                    "parameters": 2,
                    "pointer": 2,
                    "values": 1
                },
                "undefined4": {
                    "int": 1
                },
                "update_memory_address_and_bits_08004e7c": {
                    "update_memory": 2,
                    "update_memory_address_and_bits": 14
                },
                "update_values_080025e8": {
                    "update_values": 15,
                    "update_values_subfunc": 1
                }
            },
            "called": [
                "FUN_08004e7c",
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nint update_memory_address_and_bits_08002724(int *data)\n\n{\n  int temp_var;\n  \n  if (data != (int *)0x0) {\n    if (*(char *)((int)data + 0x39) == '\\0') {\n      *(undefined *)(data + 0xe) = 0;\n      update_memory_address_and_bits_08002724();\n    }\n    *(undefined *)((int)data + 0x39) = 2;\n    *(uint *)(*data + 0xc) = *(uint *)(*data + 0xc) & 0xffffdfff;\n    update_values(data);\n    temp_var = *data;\n    *(uint *)(temp_var + 0x10) = *(uint *)(temp_var + 0x10) & 0xffffb7ff;\n    *(uint *)(temp_var + 0x14) = *(uint *)(temp_var + 0x14) & 0xffffffd5;\n    *(uint *)(temp_var + 0xc) = *(uint *)(temp_var + 0xc) | 0x2000;\n    data[0xf] = 0;\n    *(undefined *)((int)data + 0x39) = 1;\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_memory_address_and_bits_08002724",
            "entrypoint": "0x08002724",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002724": "update_memory_address_and_bits_08002724",
                "iVar1": "temp_var",
                "param_1": "data",
                "undefined4": "int",
                "update_memory_address_and_bits_08004e7c": "update_memory_address_and_bits",
                "update_values_080025e8": "update_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800290a": {
            "called": [],
            "calling": [
                "FUN_0800299a"
            ],
            "code": "\nvoid FUNC_0800290a(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800290a",
            "entrypoint": "0x0800290a",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800290a": "FUNC_0800290a"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800290c": {
            "additional_data": {
                "FUN_0800290c": {
                    "decode_and_modify_data": 1,
                    "decode_and_update": 1,
                    "decode_and_update_value": 1,
                    "process_binary": 1,
                    "process_data": 20,
                    "update_data": 6,
                    "write_data_to_memory": 1
                },
                "bVar1": {
                    "byte_flag": 1,
                    "byte_val": 4,
                    "byte_value": 14,
                    "byte_var": 1,
                    "decoded_byte": 1,
                    "filtered_byte": 1,
                    "flag": 3,
                    "temp_byte": 2,
                    "temp_byte1": 1,
                    "value": 2
                },
                "bVar8": {
                    "bool_var": 1,
                    "check_condition": 1,
                    "check_flag": 2,
                    "check_value": 1,
                    "condition": 1,
                    "condition_flag": 1,
                    "flag": 1,
                    "is_byte_value2": 1,
                    "is_char2": 1,
                    "is_char_not2": 1,
                    "is_condition_met": 7,
                    "is_condition_true": 3,
                    "is_different": 1,
                    "is_flag2": 3,
                    "is_flag_2": 1,
                    "is_flag_set": 1,
                    "is_flag_true": 1,
                    "is_flag_two": 1,
                    "is_true": 1,
                    "is_type2": 1
                },
                "check_and_increment_value_08004c30": {
                    "check_and_increment_value": 4
                },
                "iVar2": {
                    "address": 1,
                    "base": 1,
                    "base_addr": 1,
                    "base_address": 3,
                    "data_ptr": 1,
                    "entry": 1,
                    "first_element": 1,
                    "first_val": 1,
                    "input_ptr": 1,
                    "input_value": 1,
                    "int_value": 1,
                    "offset": 2,
                    "pointer": 1,
                    "ptr": 5,
                    "ptr_data": 3,
                    "ptr_value": 2,
                    "temp_var1": 1,
                    "value": 1,
                    "var1": 3
                },
                "param_1": {
                    "binary_data": 1,
                    "data": 24,
                    "data_array": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input_data": 3
                },
                "puVar6": {
                    "buffer": 1,
                    "data_ptr": 2,
                    "memory_ptr": 1,
                    "output_data": 1,
                    "pointer1": 1,
                    "ptr": 1,
                    "ptr1": 4,
                    "ptr_array": 1,
                    "ptr_data_array": 1,
                    "ptr_to_data": 2,
                    "ptr_to_word1": 1,
                    "short_array": 1,
                    "ushort_pointer": 2,
                    "ushort_pointer1": 1,
                    "ushort_ptr": 4,
                    "ushort_ptr1": 6,
                    "ushort_ptr_1": 1
                },
                "puVar7": {
                    "new_memory_ptr": 1,
                    "new_ptr": 1,
                    "new_ushort_pointer": 1,
                    "next_data_ptr": 1,
                    "next_ptr_to_data": 1,
                    "next_ushort_ptr": 1,
                    "pointer2": 1,
                    "ptr2": 4,
                    "ptr_data_array2": 1,
                    "ptr_to_data_2": 1,
                    "ptr_to_word2": 1,
                    "updated_buffer": 1,
                    "updated_data_ptr": 1,
                    "updated_output_data": 1,
                    "updated_ptr_array": 1,
                    "updated_short_array": 1,
                    "updated_ushort_pointer": 1,
                    "updated_ushort_ptr": 3,
                    "ushort_pointer2": 1,
                    "ushort_ptr2": 6,
                    "ushort_ptr_2": 1
                },
                "sVar5": {
                    "count": 13,
                    "counter": 13,
                    "decremented_value": 1,
                    "short_value": 2,
                    "temp_short": 1,
                    "temp_var4": 1
                },
                "uVar3": {
                    "bit_mask": 1,
                    "flag": 6,
                    "flags": 1,
                    "mask": 1,
                    "mask_value": 2,
                    "modified_value": 1,
                    "new_value": 1,
                    "result": 3,
                    "temp_uint": 1,
                    "temp_value": 4,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "uint_value": 1,
                    "updated_value": 3,
                    "value": 2,
                    "var2": 2
                },
                "uVar4": {
                    "byte_value": 1,
                    "temp": 2,
                    "temp_undefined": 1,
                    "temp_val": 2,
                    "temp_value": 10,
                    "temp_value2": 2,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "undefined_value": 2,
                    "value": 7,
                    "var3": 2
                }
            },
            "called": [
                "FUN_08004c30"
            ],
            "calling": [
                "FUN_0800299a"
            ],
            "code": "\nundefined4 process_data_0800290c(int *data)\n\n{\n  byte byte_value;\n  int ptr;\n  uint flag;\n  undefined4 temp_value;\n  short counter;\n  ushort *ushort_ptr1;\n  ushort *ushort_ptr2;\n  bool is_condition_met;\n  \n  if ((*(byte *)((int)data + 0x39) & 0xef) != 0x22) {\n    return 2;\n  }\n  ptr = *data;\n  ushort_ptr1 = (ushort *)data[10];\n  if (data[2] == 0x1000) {\n    if (data[4] == 0) {\n      ushort_ptr2 = ushort_ptr1 + 1;\n      *ushort_ptr1 = (ushort)((uint)(*(int *)(ptr + 4) << 0x17) >> 0x17);\n    }\n    else {\n      ushort_ptr2 = (ushort *)((int)ushort_ptr1 + 1);\n      *ushort_ptr1 = (ushort)*(int *)(ptr + 4) & 0xff;\n    }\n    data[10] = (int)ushort_ptr2;\n  }\n  else {\n    if (data[4] == 0) {\n      byte_value = (byte)*(undefined4 *)(ptr + 4);\n      data[10] = (int)ushort_ptr1 + 1;\n    }\n    else {\n      temp_value = *(undefined4 *)(ptr + 4);\n      data[10] = (int)ushort_ptr1 + 1;\n      byte_value = (byte)temp_value & 0x7f;\n    }\n    *(byte *)ushort_ptr1 = byte_value;\n  }\n  counter = *(short *)((int)data + 0x2e) + -1;\n  *(short *)((int)data + 0x2e) = counter;\n  if (counter == 0) {\n    ptr = *data;\n    *(uint *)(ptr + 0xc) = *(uint *)(ptr + 0xc) & 0xffffffdf;\n    is_condition_met = *(char *)((int)data + 0x39) != '2';\n    if (is_condition_met) {\n      flag = *(uint *)(ptr + 0xc) & 0xfffffeff;\n    }\n    else {\n      ptr = 0x12;\n      flag = 0x32;\n    }\n    if (is_condition_met) {\n      *(uint *)(ptr + 0xc) = flag;\n      flag = *(uint *)(ptr + 0x14) & 0xfffffffe;\n    }\n    if (is_condition_met) {\n      *(uint *)(ptr + 0x14) = flag;\n      ptr = 1;\n    }\n    *(char *)((int)data + 0x39) = (char)ptr;\n    check_and_increment_value();\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_0800290c",
            "entrypoint": "0x0800290c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800290c": "process_data_0800290c",
                "bVar1": "byte_value",
                "bVar8": "is_condition_met",
                "check_and_increment_value_08004c30": "check_and_increment_value",
                "iVar2": "ptr",
                "param_1": "data",
                "puVar6": "ushort_ptr1",
                "puVar7": "ushort_ptr2",
                "sVar5": "counter",
                "uVar3": "flag",
                "uVar4": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002998": {
            "called": [],
            "calling": [
                "FUN_0800299a"
            ],
            "code": "\nvoid FUNC_08002998(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002998",
            "entrypoint": "0x08002998",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002998": "FUNC_08002998"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800299a": {
            "additional_data": {
                "FUNC_08002998": {
                    "function_2": 1,
                    "perform_operation": 1,
                    "some_function": 2
                },
                "FUN_0800299a": {
                    "analyze_data": 1,
                    "check_and_process_data": 1,
                    "process_and_handle_data": 1,
                    "process_and_update_data": 2,
                    "process_data": 23,
                    "process_input": 2,
                    "process_input_data": 1
                },
                "bVar8": {
                    "bool1": 1,
                    "bool_var8": 1,
                    "boolean_var": 1,
                    "check": 2,
                    "check_flag": 2,
                    "cond_check": 1,
                    "condition": 5,
                    "flag": 1,
                    "flag2": 2,
                    "flag_2": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_flag8": 1,
                    "is_negative": 3,
                    "is_set": 1,
                    "special_condition_flag": 1,
                    "var8": 6
                },
                "param_1": {
                    "arguments": 1,
                    "data": 17,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input": 1,
                    "input_data": 7
                },
                "process_data_0800290c": {
                    "execute_process": 1,
                    "process_data": 2,
                    "process_data_2": 1
                },
                "puVar4": {
                    "data_ptr": 1,
                    "element_ptr": 1,
                    "pointer": 5,
                    "pointer1": 8,
                    "pointer_var": 1,
                    "pointer_var1": 1,
                    "pointer_var4": 1,
                    "ptr": 1,
                    "ptr4": 1,
                    "ptr_1": 1,
                    "ptr_value": 1,
                    "temp_data": 1,
                    "temp_ptr": 2,
                    "value_pointer": 1,
                    "var4": 5
                },
                "puVar6": {
                    "current_data": 3,
                    "current_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input_ptr": 1,
                    "pointer2": 8,
                    "pointer_data": 1,
                    "pointer_var2": 1,
                    "pointer_var6": 1,
                    "ptr": 2,
                    "ptr6": 1,
                    "ptr_2": 1,
                    "ptr_data": 1,
                    "temp_ptr2": 1,
                    "var6": 5
                },
                "sVar2": {
                    "count": 5,
                    "count_var": 1,
                    "counter": 17,
                    "temp_var2": 1,
                    "value2": 1,
                    "var2": 6
                },
                "uVar1": {
                    "data1": 1,
                    "first_data": 2,
                    "first_element": 1,
                    "first_value": 6,
                    "temp_var1": 1,
                    "value1": 13,
                    "value_1": 1,
                    "var1": 6
                },
                "uVar3": {
                    "element_1": 1,
                    "second_data": 2,
                    "second_value": 3,
                    "temp_var3": 1,
                    "value": 1,
                    "value1": 3,
                    "value2": 12,
                    "value3": 1,
                    "value_2": 1,
                    "var3": 6
                },
                "uVar5": {
                    "byte_value": 1,
                    "check_value": 1,
                    "flag": 12,
                    "new_value": 1,
                    "status": 2,
                    "status_var": 1,
                    "temp_var5": 1,
                    "type": 1,
                    "undefined_value": 1,
                    "undefined_var": 1,
                    "value4": 1,
                    "var5": 6,
                    "variable1": 1
                },
                "uVar7": {
                    "check_bit": 1,
                    "condition": 1,
                    "flag": 8,
                    "flag2": 9,
                    "logic_var": 1,
                    "special_flag": 1,
                    "temp_flag": 1,
                    "temp_var7": 1,
                    "value3": 1,
                    "value5": 1,
                    "var7": 6
                }
            },
            "called": [
                "FUN_0800290c",
                "FUN_08002998",
                "FUN_0800290a"
            ],
            "calling": [],
            "code": "\nvoid process_and_update_data_0800299a(uint **data)\n\n{\n  uint value1;\n  short counter;\n  uint value2;\n  uint *pointer1;\n  undefined flag;\n  uint *pointer2;\n  uint flag2;\n  bool var8;\n  \n  pointer2 = *data;\n  value2 = *pointer2;\n  value1 = pointer2[3];\n  if ((value2 & 0xf) == 0) {\n    if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n      process_data();\n      return;\n    }\n  }\n  else {\n    flag2 = pointer2[5] & 1;\n    if ((flag2 != 0) || ((value1 & 0x120) != 0)) {\n      pointer2 = (uint *)(value2 << 0x1f);\n      if ((int)pointer2 < 0) {\n        var8 = (int)(value1 << 0x17) < 0;\n        if (var8) {\n          pointer2 = (uint *)((uint)data[0xf] | 1);\n        }\n        if (var8) {\n          data[0xf] = pointer2;\n        }\n      }\n      if (((int)(value2 << 0x1d) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 2);\n      }\n      if (((int)(value2 << 0x1e) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 4);\n      }\n      if (((int)(value2 << 0x1c) < 0) && (flag2 != 0)) {\n        data[0xf] = (uint *)((uint)data[0xf] | 8);\n      }\n      if (data[0xf] == (uint *)0x0) {\n        return;\n      }\n      if (((int)(value2 << 0x1a) < 0) && ((int)(value1 << 0x1a) < 0)) {\n        process_data(data);\n      }\n      pointer2 = *data;\n      if ((-1 < (int)data[0xf] << 0x1c) && ((pointer2[5] & 0x40) == 0)) {\n        FUNC_08002998(data);\n        data[0xf] = (uint *)0x0;\n        return;\n      }\n      pointer2[3] = pointer2[3] & 0xfffffedf;\n      pointer2[5] = pointer2[5] & 0xfffffffe;\n      *(undefined *)((int)data + 0x39) = 1;\n      FUNC_08002998(data);\n      return;\n    }\n  }\n  if (((int)(value2 << 0x18) < 0) && ((int)(value1 << 0x18) < 0)) {\n    if ((*(byte *)((int)data + 0x39) & 0xdf) == 0x12) {\n      pointer1 = data[8];\n      if (data[2] == (uint *)0x1000) {\n        pointer2[1] = *(ushort *)pointer1 & 0x1ff;\n        if (data[4] == (uint *)0x0) {\n          pointer1 = (uint *)((int)pointer1 + 2);\n        }\n        else {\n          pointer1 = (uint *)((int)pointer1 + 1);\n        }\n        data[8] = pointer1;\n      }\n      else {\n        data[8] = (uint *)((int)pointer1 + 1);\n        pointer2[1] = (uint)*(byte *)pointer1;\n      }\n      counter = *(short *)((int)data + 0x26) + -1;\n      *(short *)((int)data + 0x26) = counter;\n      if (counter == 0) {\n        pointer2[3] = pointer2[3] & 0xffffff7f;\n        pointer2[3] = pointer2[3] | 0x40;\n        return;\n      }\n    }\n  }\n  else if (((int)(value2 << 0x19) < 0) && ((int)(value1 << 0x19) < 0)) {\n    pointer2[3] = pointer2[3] & 0xffffffbf;\n    if (*(char *)((int)data + 0x39) == '2') {\n      flag = 0x22;\n    }\n    else {\n      flag = 1;\n    }\n    *(undefined *)((int)data + 0x39) = flag;\n    FUNC_0800290a(data);\n  }\n  return;\n}\n\n",
            "current_name": "process_and_update_data_0800299a",
            "entrypoint": "0x0800299a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800299a": "process_and_update_data_0800299a",
                "bVar8": "var8",
                "param_1": "data",
                "process_data_0800290c": "process_data",
                "puVar4": "pointer1",
                "puVar6": "pointer2",
                "sVar2": "counter",
                "uVar1": "value1",
                "uVar3": "value2",
                "uVar5": "flag",
                "uVar7": "flag2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ad0": {
            "additional_data": {
                "0": {
                    "data": 2,
                    "value_1": 1
                },
                "0x10": {
                    "accel_full_scale": 1,
                    "data": 1,
                    "data2": 1,
                    "data5": 1,
                    "data_9": 1,
                    "value_3": 1
                },
                "0x19": {
                    "data_5": 1,
                    "i2c_address3": 1,
                    "register_address": 1,
                    "register_address4": 1,
                    "sample_rate_divider": 1
                },
                "0x1a": {
                    "accel_range": 1,
                    "data_7": 1,
                    "i2c_address5": 1,
                    "register_address": 1,
                    "register_address6": 1
                },
                "0x1b": {
                    "accel_config": 1,
                    "data_8": 1,
                    "i2c_address6": 1,
                    "register_address": 1,
                    "register_address7": 1
                },
                "0x1c": {
                    "data_10": 1,
                    "i2c_address7": 1,
                    "low_pass_filter": 1,
                    "register_address": 1,
                    "register_address8": 1
                },
                "0x1d": {
                    "data_6": 1,
                    "gyro_range": 1,
                    "i2c_address4": 1,
                    "register_address": 1,
                    "register_address5": 1
                },
                "0x3b": {
                    "line_number": 3
                },
                "0x6b": {
                    "data_2": 1,
                    "data_value2": 1,
                    "i2c_address": 1,
                    "power_management": 1,
                    "register_2": 1,
                    "register_address": 1,
                    "register_address2": 1
                },
                "0x6c": {
                    "data_4": 1,
                    "i2c_address2": 1,
                    "register_address": 1,
                    "register_address3": 1
                },
                "0x75": {
                    "data1": 1,
                    "data_1": 1,
                    "data_value1": 1,
                    "register_1": 1,
                    "register_address": 2,
                    "register_address1": 1
                },
                "0x80": {
                    "data": 1,
                    "data1": 1,
                    "data2": 1,
                    "data_3": 1,
                    "data_value3": 1,
                    "disable_register": 1,
                    "option": 1
                },
                "0xd0": {
                    "device_address": 4,
                    "i2c_address": 1,
                    "register_address": 1,
                    "sensor_address": 1
                },
                "1": {
                    "data": 1,
                    "length": 1,
                    "num_of_bytes": 1
                },
                "3": {
                    "data": 1,
                    "data4": 1,
                    "gyro_full_scale": 1,
                    "value_2": 1
                },
                "8": {
                    "data": 1,
                    "data3": 1,
                    "data6": 1,
                    "gyro_offset": 1,
                    "value_4": 1
                },
                "FUN_08002ad0": {
                    "configure_mpu9250": 2,
                    "initialize_mpu9250": 21,
                    "initialize_mpu9250_sensor": 7,
                    "initialize_sensor": 1
                },
                "SRC_MPU9250_c": {
                    "mpu9250_c_source_file": 1
                },
                "initializeMPU9250": {
                    "initialize_mpu9250": 2
                },
                "initialize_MPU9250_sensor": {
                    "initialize_sensor": 1
                },
                "initialize_sensor": {
                    "initialize_sensor": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_parameter_name_2": {
                    "new_parameter_name_2": 1
                },
                "processDataAndHandleErrors": {
                    "process_data_and_handle_errors": 2
                },
                "processI2CData": {
                    "process_i2_c_data": 2
                },
                "process_I2C_data": {
                    "process_i2_c_data": 1
                },
                "process_data_and_handle_errors": {
                    "process_errors": 1
                },
                "process_data_and_handle_errors_0800407c": {
                    "handle_errors": 1,
                    "process_and_handle_errors": 1,
                    "process_data": 2,
                    "process_data_and_handle_errors": 24,
                    "process_error_handling": 2
                },
                "process_i2c_data_0800403c": {
                    "process_i2_c_data": 11,
                    "process_i2c_data": 14,
                    "send_i2c_data": 4,
                    "write_i2_c_data": 1
                }
            },
            "called": [
                "FUN_0800403c",
                "FUN_0800407c"
            ],
            "calling": [
                "FUN_08002ea0"
            ],
            "code": "\nvoid initialize_mpu9250_sensor_08002ad0(void)\n\n{\n  process_data_and_handle_errors(0xd0,0x75,\"../Src/MPU9250.c\",0x3b);\n  process_i2c_data(0xd0,0x6b,0x80,1);\n  process_i2c_data(0xd0,0x6b,1);\n  process_i2c_data(0xd0,0x6c,0,1);\n  process_i2c_data(0xd0,0x19,0,1);\n  process_i2c_data(0xd0,0x1d,3,1);\n  process_i2c_data(0xd0,0x1a,3,1);\n  process_i2c_data(0xd0,0x1b,0x10,1);\n  process_i2c_data(0xd0,0x1c,8,1);\n  return;\n}\n\n",
            "current_name": "initialize_mpu9250_sensor_08002ad0",
            "entrypoint": "0x08002ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ad0": "initialize_mpu9250_sensor_08002ad0",
                "process_data_and_handle_errors": "process_errors",
                "process_data_and_handle_errors_0800407c": "process_data_and_handle_errors",
                "process_i2c_data_0800403c": "process_i2c_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002b48": {
            "additional_data": {
                "DAT_200002d0": {
                    "calculated_floating_point_value1": 1,
                    "final_result1": 1,
                    "first_float_value": 1,
                    "float_value1": 2,
                    "floating_point_value1": 3,
                    "processed_float_value1": 1,
                    "result1_float": 1
                },
                "DAT_200002d4": {
                    "calculated_floating_point_value2": 1,
                    "final_result2": 1,
                    "float_value2": 2,
                    "floating_point_value2": 3,
                    "processed_float_value2": 1,
                    "result2_float": 1,
                    "second_float_value": 1
                },
                "DAT_200002d8": {
                    "calculated_floating_point_value3": 1,
                    "final_result3": 1,
                    "float_value3": 2,
                    "floating_point_value3": 3,
                    "processed_float_value3": 1,
                    "result3_float": 1,
                    "third_float_value": 1
                },
                "DAT_200002f4": {
                    "combined_lower_data8": 1,
                    "concatenated_value2": 1,
                    "concatenated_value3": 1,
                    "configured_lower_byte": 1,
                    "converted_value4": 1,
                    "processed_data_byte2": 1,
                    "result1_byte_reversed": 1,
                    "result1_concat_byte": 1,
                    "result2": 1,
                    "second_output_concat": 1
                },
                "DAT_200002f6": {
                    "combined_higher_data8": 1,
                    "concatenated_value1": 2,
                    "configured_upper_byte": 1,
                    "converted_value3": 1,
                    "first_output_concat": 1,
                    "processed_data_byte1": 1,
                    "result1": 1,
                    "result1_byte": 1,
                    "result1_concat": 1
                },
                "DAT_200002f8": {
                    "concatenated_value2": 1,
                    "concatenated_value3": 1,
                    "configured_upper_word": 1,
                    "converted_value5": 1,
                    "local_14_concat": 1,
                    "masked_data": 1,
                    "masked_input_data_byte1": 1,
                    "result2_byte": 1,
                    "result2_concat": 1,
                    "result3": 1
                },
                "FUN_08002b48": {
                    "calculate_and_store_values": 1,
                    "calculate_data_values": 1,
                    "calculate_floating_point_values": 3,
                    "calculate_mpu9250_values": 1,
                    "calculate_sensor_values": 1,
                    "initialize_data_processing": 1,
                    "initialize_mpu": 1,
                    "initialize_mpu9250": 15,
                    "initialize_mpu_sensor": 1,
                    "initialize_sensor": 1,
                    "initialize_sensor_data": 1,
                    "process_and_calculate_values": 1,
                    "process_mpu9250_data": 1,
                    "process_mpu_data": 1,
                    "process_sensor_data": 1
                },
                "calculate_floating_point_value_08000cec": {
                    "calculate_float_value": 4,
                    "calculate_floating_point_value": 14
                },
                "concat11": {
                    "combine_bytes": 1
                },
                "count_set_bits_08000c44": {
                    "count_set_bits": 18
                },
                "iVar2": {
                    "bit_count1": 1,
                    "bit_count_result3": 1,
                    "conversion_var_1": 1,
                    "converted_result1": 1,
                    "converted_temp2": 1,
                    "converted_value2": 1,
                    "floating_point_var1": 1,
                    "int_result2": 1,
                    "int_value2": 1,
                    "integer_value2": 1,
                    "lower_data8": 1,
                    "lower_word_result": 1,
                    "masked_input_data_int": 1,
                    "processed_data2_int": 1,
                    "result1": 1,
                    "result2": 2,
                    "result2_int": 2,
                    "sensor_data_length": 1,
                    "sensor_data_low": 1,
                    "temp_var2": 1,
                    "upper_data_int": 1,
                    "value1": 1,
                    "value2_int": 1
                },
                "iVar3": {
                    "bit_count2": 1,
                    "bit_count_result4": 1,
                    "conversion_var_2": 1,
                    "converted_result2": 1,
                    "converted_temp1": 1,
                    "converted_value1": 1,
                    "floating_point_var2": 1,
                    "higher_data8": 1,
                    "int_result1": 1,
                    "int_value1": 1,
                    "integer_value1": 1,
                    "lower_data_int": 1,
                    "processed_data1_int": 1,
                    "processed_data_int": 1,
                    "result1": 2,
                    "result1_int": 2,
                    "result2": 1,
                    "sensor_data_high": 1,
                    "sensor_data_value": 1,
                    "temp_var1": 1,
                    "upper_byte_result": 1,
                    "value1_int": 1,
                    "value2": 1
                },
                "in_r3": {
                    "config_flags": 2,
                    "data": 4,
                    "data_mask": 1,
                    "input": 3,
                    "input_data": 4,
                    "input_flags": 1,
                    "input_value": 11,
                    "sensor_data": 3,
                    "sensor_value": 1
                },
                "local_14": {
                    "bit_count2": 1,
                    "bit_count_result2": 1,
                    "bit_mask2": 1,
                    "data2": 1,
                    "lower_data16": 1,
                    "lower_word": 1,
                    "masked_data": 1,
                    "masked_input_data": 1,
                    "param2": 1,
                    "processed_data2": 2,
                    "processed_value_2": 1,
                    "result2": 4,
                    "result_2": 1,
                    "second_output": 1,
                    "sensor_value_mask": 1,
                    "temp2": 1,
                    "temp_value2": 1,
                    "temp_var2": 4,
                    "upper_bits_mask": 1,
                    "upper_data_bits": 1,
                    "value2": 3,
                    "variable2": 1
                },
                "local_18": {
                    "bit_count1": 1,
                    "bit_count_result1": 1,
                    "bit_count_temp": 1,
                    "bit_mask1": 1,
                    "bits_count": 1,
                    "data1": 1,
                    "first_output": 1,
                    "higher_data16": 1,
                    "lower_data_bits": 1,
                    "param1": 1,
                    "processed_data": 1,
                    "processed_data1": 2,
                    "processed_value_1": 1,
                    "result": 1,
                    "result1": 4,
                    "result_1": 1,
                    "temp1": 1,
                    "temp_value1": 1,
                    "temp_var1": 4,
                    "upper_byte": 1,
                    "value1": 3,
                    "variable1": 1
                },
                "process_data_and_handle_errors_080040e8": {
                    "process_data": 3,
                    "process_data_and_handle_errors": 10,
                    "process_data_errors": 1
                },
                "uVar1": {
                    "bit_count": 17,
                    "bits_set": 1,
                    "floating_point_value": 1,
                    "set_bits_count": 2
                }
            },
            "called": [
                "FUN_08000c44",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid initialize_mpu9250_08002b48(void)\n\n{\n  undefined4 bit_count;\n  uint input_value;\n  int result2_int;\n  int result1;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  \n  temp_var1 = 0;\n  temp_var2 = input_value & 0xffff0000;\n  process_data_and_handle_errors(0xd0,0x3b,&temp_var1,6,\"../Src/MPU9250.c\",0x58);\n  DAT_200002f6 = CONCAT11(temp_var1._2_1_,temp_var1._3_1_);\n  DAT_200002f4 = CONCAT11((undefined)temp_var1,temp_var1._1_1_);\n  DAT_200002f8 = CONCAT11((undefined)temp_var2,temp_var2._1_1_);\n  result1 = (int)DAT_200002f6;\n  result2_int = (int)DAT_200002f8;\n  bit_count = count_set_bits();\n  bit_count = calculate_floating_point_value(bit_count,0x40800000);\n  DAT_200002d0 = calculate_floating_point_value(bit_count,0x38000000);\n  bit_count = count_set_bits(result1);\n  bit_count = calculate_floating_point_value(bit_count,0x40800000);\n  DAT_200002d4 = calculate_floating_point_value(bit_count,0x38000000);\n  bit_count = count_set_bits(result2_int);\n  bit_count = calculate_floating_point_value(bit_count,0x40800000);\n  DAT_200002d8 = calculate_floating_point_value(bit_count,0x38000000);\n  return;\n}\n\n",
            "current_name": "initialize_mpu9250_08002b48",
            "entrypoint": "0x08002b48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002b48": "initialize_mpu9250_08002b48",
                "calculate_floating_point_value_08000cec": "calculate_floating_point_value",
                "count_set_bits_08000c44": "count_set_bits",
                "iVar2": "result2_int",
                "iVar3": "result1",
                "in_r3": "input_value",
                "local_14": "temp_var2",
                "local_18": "temp_var1",
                "process_data_and_handle_errors_080040e8": "process_data_and_handle_errors",
                "uVar1": "bit_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002bf0": {
            "additional_data": {
                "DAT_20000000": {
                    "float_constant_1": 1,
                    "float_value1": 1
                },
                "DAT_20000004": {
                    "float_constant_2": 1,
                    "float_value2": 1
                },
                "DAT_20000008": {
                    "float_constant_3": 1,
                    "float_value3": 1
                },
                "DAT_200002be": {
                    "combined2": 1,
                    "concatenated_data_2": 1,
                    "sensor_data1_value_concatenated2": 1,
                    "sensor_data_combined2": 1
                },
                "DAT_200002c0": {
                    "combined1": 1,
                    "concatenated_data_1": 1,
                    "sensor_data1_value_concatenated": 1,
                    "sensor_data_combined1": 1
                },
                "DAT_200002c2": {
                    "combined3": 1,
                    "concatenated_data_3": 1,
                    "sensor_data2_value_concatenated": 1,
                    "sensor_data_combined3": 1
                },
                "DAT_200002c4": {
                    "calculated_value1": 1,
                    "float_value1": 1,
                    "float_value_1": 1,
                    "processed_value1": 1
                },
                "DAT_200002c8": {
                    "calculated_value2": 1,
                    "float_value2": 1,
                    "float_value_2": 1,
                    "processed_value2": 1
                },
                "DAT_200002cc": {
                    "calculated_value3": 1,
                    "float_value3": 1,
                    "float_value_3": 1,
                    "processed_value3": 1
                },
                "FUN_08002bf0": {
                    "calculate_and_store_values": 1,
                    "calculate_data_values": 1,
                    "calculate_float_values": 1,
                    "calculate_sensor_data": 1,
                    "calculate_sensor_values": 3,
                    "initialize_mpu9250": 10,
                    "initialize_mpu_sensor_readings": 1,
                    "initialize_sensor": 1,
                    "process_and_calculate_float_values": 1,
                    "process_mpu9250_data": 6,
                    "process_mpu_data": 2,
                    "process_mpu_sensor_data": 1,
                    "process_sensor_data": 2
                },
                "calculate_float_value_08000ad8": {
                    "calculate_final_float_value": 2,
                    "calculate_float_value": 22,
                    "calculate_float_value_based_on_offset": 1
                },
                "calculate_floating_point_value_08000cec": {
                    "calculate_float_value": 4,
                    "calculate_floating_point": 2,
                    "calculate_floating_point_value": 18,
                    "calculate_floating_value": 1
                },
                "count_set_bits_08000c44": {
                    "count_bits_set": 1,
                    "count_set_bits": 21
                },
                "iVar2": {
                    "bit_count2": 1,
                    "bit_count_2": 1,
                    "converted_value_part2_integer": 1,
                    "error_value_int": 1,
                    "gyro_bits": 1,
                    "gyroscope_value": 1,
                    "int_combined2": 1,
                    "sensor_data2_value": 1,
                    "sensor_data_low_signed": 1,
                    "sensor_data_part1": 1,
                    "sensor_value_2_int": 1,
                    "value2_int": 1
                },
                "iVar3": {
                    "accel_bits": 1,
                    "accelerometer_value": 1,
                    "bit_count1": 1,
                    "bit_count_1": 1,
                    "converted_value_part1_integer": 1,
                    "data_value_int": 1,
                    "int_combined1": 1,
                    "sensor_data1_value": 1,
                    "sensor_data_high_signed": 1,
                    "sensor_data_part2": 1,
                    "sensor_value_1_int": 1,
                    "value1_int": 1
                },
                "local_1c": {
                    "converted_value_part2": 1,
                    "count_bits_flag": 1,
                    "data": 1,
                    "data2": 2,
                    "data_byte1": 1,
                    "data_byte_2": 1,
                    "data_flags_extended": 1,
                    "data_high_byte": 1,
                    "data_length": 1,
                    "data_segment2": 1,
                    "data_value2": 1,
                    "data_value_2": 1,
                    "error_code": 2,
                    "error_value": 2,
                    "gyro_data": 1,
                    "gyro_offset": 1,
                    "gyroscope_range": 1,
                    "mpu9250_value2": 1,
                    "sensor1_upper_byte": 1,
                    "sensor_data2": 2,
                    "sensor_data_low": 1,
                    "sensor_value2": 2,
                    "sensor_value_2": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "value2": 1
                },
                "local_20": {
                    "accel_offset": 1,
                    "accelerometer_range": 1,
                    "config_value": 1,
                    "converted_value_part1": 1,
                    "data1": 2,
                    "data_byte0": 1,
                    "data_byte_1": 1,
                    "data_flags": 1,
                    "data_low_byte": 1,
                    "data_segment1": 1,
                    "data_value": 2,
                    "data_value1": 1,
                    "data_value_1": 1,
                    "error_code": 2,
                    "error_flag": 1,
                    "mpu9250_value1": 1,
                    "sensor1_lower_byte": 1,
                    "sensor_data1": 2,
                    "sensor_data_high": 1,
                    "sensor_value1": 2,
                    "sensor_value_1": 1,
                    "status_code": 1,
                    "temp_value2": 1,
                    "temp_var1": 1,
                    "temperature_data": 1,
                    "value1": 1
                },
                "process_data_and_handle_errors_080040e8": {
                    "configure_device": 1,
                    "handle_errors": 1,
                    "process_and_handle_data_with_error_handling": 1,
                    "process_and_handle_errors": 1,
                    "process_data": 3,
                    "process_data_and_handle_errors": 16,
                    "process_sensor_data_and_errors": 1
                },
                "uVar1": {
                    "bit_count": 7,
                    "floating_point_value": 2,
                    "num_bits_set": 1,
                    "set_bits_count": 1
                }
            },
            "called": [
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid initialize_mpu9250_08002bf0(void)\n\n{\n  undefined4 bit_count;\n  int converted_value_part2_integer;\n  int int_combined1;\n  undefined4 sensor_value1;\n  undefined2 error_value;\n  \n  sensor_value1 = 0;\n  error_value = 0;\n  process_data_and_handle_errors(0xd0,0x43,&sensor_value1,6,\"../Src/MPU9250.c\",0x7b);\n  DAT_200002c0 = CONCAT11(sensor_value1._2_1_,sensor_value1._3_1_);\n  DAT_200002be = CONCAT11((undefined)sensor_value1,sensor_value1._1_1_);\n  DAT_200002c2 = CONCAT11((undefined)error_value,error_value._1_1_);\n  int_combined1 = (int)DAT_200002c0;\n  converted_value_part2_integer = (int)DAT_200002c2;\n  bit_count = count_set_bits();\n  bit_count = calculate_floating_point_value(bit_count,0x447a0000);\n  bit_count = calculate_floating_point_value(bit_count,0x38000000);\n  DAT_200002c4 = calculate_float_value(bit_count,DAT_20000000);\n  bit_count = count_set_bits(int_combined1);\n  bit_count = calculate_floating_point_value(bit_count,0x447a0000);\n  bit_count = calculate_floating_point_value(bit_count,0x38000000);\n  DAT_200002c8 = calculate_float_value(bit_count,DAT_20000004);\n  bit_count = count_set_bits(converted_value_part2_integer);\n  bit_count = calculate_floating_point_value(bit_count,0x447a0000);\n  bit_count = calculate_floating_point_value(bit_count,0x38000000);\n  DAT_200002cc = calculate_float_value(bit_count,DAT_20000008);\n  return;\n}\n\n",
            "current_name": "initialize_mpu9250_08002bf0",
            "entrypoint": "0x08002bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002bf0": "initialize_mpu9250_08002bf0",
                "calculate_float_value_08000ad8": "calculate_float_value",
                "calculate_floating_point_value_08000cec": "calculate_floating_point_value",
                "count_set_bits_08000c44": "count_set_bits",
                "iVar2": "converted_value_part2_integer",
                "iVar3": "int_combined1",
                "local_1c": "error_value",
                "local_20": "sensor_value1",
                "process_data_and_handle_errors_080040e8": "process_data_and_handle_errors",
                "uVar1": "bit_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002cb0": {
            "additional_data": {
                "FUN_08002cb0": {
                    "initialize_mpu9250": 3,
                    "initialize_sensor": 2,
                    "process_and_calculate_data": 3,
                    "process_and_calculate_mpu9250_data": 1,
                    "process_and_calculate_sensor_data": 1,
                    "process_data_from_mpu9250_i2_c": 1,
                    "process_i2c_data_and_calculate": 1,
                    "process_i2c_data_and_calculate_floating_point": 1,
                    "process_i2c_data_and_calculate_values": 2,
                    "process_i2c_sensor_data": 2,
                    "process_mpu9250_data": 5,
                    "process_mpu_data": 1,
                    "process_sensor_data": 8
                },
                "calculate_floating_point_value_08000adc": {
                    "calculate_final_float_value": 1,
                    "calculate_float_value": 1,
                    "calculate_float_value2": 1,
                    "calculate_float_value_2": 2,
                    "calculate_float_value_v2": 3,
                    "calculate_floating_point_value": 3,
                    "calculate_floating_point_value2": 6,
                    "calculate_floating_point_value_2": 2,
                    "calculate_floating_value_2": 1,
                    "convert_float_to_int": 1,
                    "convert_to_float": 1
                },
                "calculate_floating_point_value_08000cec": {
                    "calculate_float_value": 8,
                    "calculate_float_value_v1": 1,
                    "calculate_floating_point_value": 10,
                    "calculate_floating_point_value1": 1,
                    "calculate_floating_value": 1,
                    "calculate_scaled_value": 1
                },
                "count_set_bits_08000c44": {
                    "bit_count": 1,
                    "calculate_bit_count": 3,
                    "calculate_set_bits": 2,
                    "calculate_set_bits_count": 1,
                    "count_set_bits": 14,
                    "get_bit_count": 1
                },
                "local_c": {
                    "config_data_copy": 1,
                    "config_mask": 1,
                    "config_value": 1,
                    "data": 3,
                    "data5": 1,
                    "data_copy": 1,
                    "data_length": 1,
                    "data_value": 1,
                    "i2c_data": 1,
                    "input_data": 1,
                    "masked_data": 1,
                    "modified_input_data": 1,
                    "processed_data": 6,
                    "processed_value": 1,
                    "sensor_data": 1,
                    "sensor_data_4_modified": 1,
                    "sensor_data_copy": 2,
                    "sensor_data_local_c": 1,
                    "sensor_data_temp": 2,
                    "temp_config": 1,
                    "temp_value": 1,
                    "updated_control_value": 1
                },
                "param_1": {
                    "address1": 1,
                    "arg1": 2,
                    "data1": 2,
                    "data_1": 1,
                    "data_pin": 1,
                    "data_ptr_1": 1,
                    "device_address": 8,
                    "param1": 5,
                    "param_1": 1,
                    "sensor_config1": 1,
                    "sensor_data": 1,
                    "sensor_data_1": 2,
                    "sensor_data_param_1": 1,
                    "sensor_id": 1,
                    "sensor_input_1": 1,
                    "sensor_param1": 1,
                    "sensor_param_1": 1
                },
                "param_2": {
                    "address2": 1,
                    "arg2": 2,
                    "clock_pin": 1,
                    "config_value": 1,
                    "data2": 2,
                    "data_1": 1,
                    "data_2": 1,
                    "data_ptr_2": 1,
                    "param2": 5,
                    "param_2": 1,
                    "reg_address": 1,
                    "reg_address1": 1,
                    "register_address": 6,
                    "sensor_config2": 1,
                    "sensor_data_2": 2,
                    "sensor_data_param_2": 1,
                    "sensor_input_2": 1,
                    "sensor_param2": 1,
                    "sensor_param_2": 1
                },
                "param_3": {
                    "address": 1,
                    "address3": 1,
                    "arg3": 2,
                    "data": 3,
                    "data3": 2,
                    "data_2": 1,
                    "data_3": 1,
                    "data_length": 1,
                    "data_ptr_3": 1,
                    "data_value": 1,
                    "device_address": 1,
                    "length": 1,
                    "param3": 5,
                    "param_3": 1,
                    "reg_address2": 1,
                    "register_value": 1,
                    "sensor_config3": 1,
                    "sensor_data_3": 2,
                    "sensor_data_param_3": 1,
                    "sensor_input_3": 1,
                    "sensor_param3": 1,
                    "sensor_param_3": 1
                },
                "param_4": {
                    "config_bits": 1,
                    "config_data": 1,
                    "config_flags": 1,
                    "config_value": 1,
                    "control_value": 1,
                    "data": 7,
                    "data4": 1,
                    "data_4": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "local_value": 1,
                    "param4": 1,
                    "sensor_data": 6,
                    "sensor_data_4": 2,
                    "sensor_data_param_4": 1,
                    "sensor_param4": 1,
                    "sensor_param_4": 1,
                    "sensor_value": 1
                },
                "process_data_and_handle_errors_0800407c": {
                    "data_processing_with_error_handling": 1,
                    "handle_data_errors": 1,
                    "process_and_handle_errors": 2,
                    "process_data_and_handle_errors": 7,
                    "process_data_handle_errors": 1,
                    "process_data_with_error_handling": 6,
                    "process_data_with_errors": 3
                },
                "process_data_and_handle_errors_080040e8": {
                    "calculate_and_handle_errors": 1,
                    "data_processing_with_error_handling2": 1,
                    "process_data_and_handle_errors": 1,
                    "process_data_and_handle_errors2": 2,
                    "process_data_and_handle_errors_2": 1,
                    "process_data_handle_errors2": 1,
                    "process_data_with_error_handling": 2,
                    "process_data_with_errors2": 1,
                    "process_data_with_errors_v2": 1
                },
                "process_i2c_data_0800403c": {
                    "i2c_data_processing": 1,
                    "process_i2_c_data": 3,
                    "process_i2c_data": 1,
                    "send_i2_c_data": 3,
                    "send_i2_c_data3": 1,
                    "send_i2c_data": 11,
                    "write_i2c_data": 1
                },
                "process_i2c_data_0800403c_1": {
                    "process_i2_c_data": 1,
                    "send_i2_c_data_1": 1
                },
                "process_i2c_data_0800403c_2": {
                    "process_i2_c_data": 1,
                    "send_i2_c_data_2": 1,
                    "send_i2c_data": 1,
                    "send_i2c_data2": 1
                },
                "process_i2c_data_0800403c_3": {
                    "process_i2_c_data": 1,
                    "send_i2_c_data_3": 1
                },
                "process_i2c_data_0800403c_4": {
                    "process_i2_c_data": 1,
                    "send_i2_c_data_4": 1
                },
                "process_i2c_data_0800407c": {
                    "send_i2_c_data2": 1
                },
                "process_i2c_data_080040e8": {
                    "send_i2c_data_2": 1,
                    "send_i2c_data_and_calculate": 1,
                    "send_i2c_data_and_process": 1,
                    "send_i2c_data_and_process_result": 1,
                    "send_i2c_data_with_callback": 1,
                    "send_i2c_data_with_error_handling": 3,
                    "write_i2c_data_and_calculate_values": 1
                },
                "uVar1": {
                    "bit_count": 9,
                    "bits_count": 1,
                    "set_bit_count": 1,
                    "set_bits_count": 4
                }
            },
            "called": [
                "FUN_0800407c",
                "FUN_0800403c",
                "FUN_08000adc",
                "FUN_08000c44",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002ea0"
            ],
            "code": "\nvoid process_i2c_sensor_data_08002cb0(undefined4 device_address,undefined4 register_address,undefined4 param3,uint data)\n\n{\n  undefined4 bit_count;\n  uint processed_data;\n  \n  processed_data = data;\n  send_i2c_data(0xd0,0x37,0x22,1,device_address,register_address,param3);\n  send_i2c_data(0xd0,0x6a,1);\n  process_data_and_handle_errors(0x18,0,\"../Src/MPU9250.c\",0xad);\n  send_i2c_data(0x18,0xb,1);\n  send_i2c_data(0x18,10,0,1);\n  send_i2c_data(0x18,10,0xf,1);\n  process_data_and_handle_errors2(0x18,0x10,&processed_data,3,\"../Src/MPU9250.c\",0xb6);\n  bit_count = count_set_bits((processed_data & 0xff) - 0x80);\n  bit_count = calculate_floating_point_value(bit_count,0x3b800000);\n  DAT_200002e8 = calculate_floating_point_value2(bit_count,0x3f800000);\n  bit_count = count_set_bits((processed_data >> 8 & 0xff) - 0x80);\n  bit_count = calculate_floating_point_value(bit_count,0x3b800000);\n  DAT_200002ec = calculate_floating_point_value2(bit_count,0x3f800000);\n  bit_count = count_set_bits((processed_data >> 0x10 & 0xff) - 0x80);\n  bit_count = calculate_floating_point_value(bit_count,0x3b800000);\n  DAT_200002f0 = calculate_floating_point_value2(bit_count,0x3f800000);\n  send_i2c_data(0x18,10,0,1);\n  send_i2c_data(0x18,10,0x16,1);\n  return;\n}\n\n",
            "current_name": "process_i2c_sensor_data_08002cb0",
            "entrypoint": "0x08002cb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002cb0": "process_i2c_sensor_data_08002cb0",
                "calculate_floating_point_value_08000adc": "calculate_floating_point_value2",
                "calculate_floating_point_value_08000cec": "calculate_floating_point_value",
                "count_set_bits_08000c44": "count_set_bits",
                "local_c": "processed_data",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "param3",
                "param_4": "data",
                "process_data_and_handle_errors_0800407c": "process_data_and_handle_errors",
                "process_data_and_handle_errors_080040e8": "process_data_and_handle_errors2",
                "process_i2c_data_0800403c": "send_i2c_data",
                "uVar1": "bit_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002d88": {
            "additional_data": {
                "DAT_2000001c": {
                    "constant_1": 2,
                    "data_1": 1,
                    "data_value_1": 1,
                    "float1": 1,
                    "value4": 1
                },
                "DAT_20000020": {
                    "constant2": 2,
                    "constant_3": 3,
                    "constant_value_2": 1,
                    "data_3": 1,
                    "float3": 1,
                    "float_constant_1": 1,
                    "float_value_2": 1,
                    "value6": 1
                },
                "DAT_20000024": {
                    "constant4": 2,
                    "constant_5": 3,
                    "constant_value_4": 1,
                    "data_6": 1,
                    "float5": 1,
                    "float_constant_3": 1,
                    "float_value_4": 1,
                    "value8": 1
                },
                "DAT_20000028": {
                    "constant6": 2,
                    "constant_7": 3,
                    "constant_value_6": 1,
                    "float7": 1,
                    "float_constant_5": 1,
                    "float_value_6": 1,
                    "value10": 1
                },
                "DAT_2000002c": {
                    "data_4": 1,
                    "float_constant_2": 1
                },
                "DAT_20000030": {
                    "data_7": 1,
                    "float_constant_4": 1
                },
                "DAT_200001c": {
                    "constant_1": 1
                },
                "DAT_200002b8": {
                    "data_word": 1,
                    "global_data_3": 1,
                    "global_var_4": 1,
                    "local_28_updated": 1,
                    "local_ptr": 1,
                    "local_variable": 1,
                    "new_var3": 1,
                    "output": 1,
                    "result1": 1,
                    "temp_data_3": 1,
                    "value2": 1
                },
                "DAT_200002ba": {
                    "byte1": 1,
                    "combined_value1": 1,
                    "combined_value_1": 1,
                    "concat_byte1": 1,
                    "concat_value_1": 1,
                    "concatenated_value_1": 1,
                    "data_byte_1": 1,
                    "global_data_1": 1,
                    "global_var_2": 1,
                    "new_var1": 1,
                    "temp_data_1": 1
                },
                "DAT_200002bc": {
                    "byte2": 1,
                    "combined_value2": 1,
                    "combined_value_2": 1,
                    "concat_byte2": 1,
                    "concat_value_2": 1,
                    "concatenated_value_2": 1,
                    "data_byte_2": 1,
                    "global_data_2": 1,
                    "global_var_3": 1,
                    "new_var2": 1,
                    "temp_data_2": 1
                },
                "DAT_200002dc": {
                    "floating_point_result_1": 1,
                    "floating_point_value3": 1,
                    "floating_point_value_3": 1,
                    "global_result_1": 1,
                    "global_var_5": 1,
                    "result1": 1,
                    "result2": 1,
                    "result5": 1,
                    "result_1": 1,
                    "result_value_1": 2
                },
                "DAT_200002e0": {
                    "floating_point_result_2": 1,
                    "floating_point_value4": 1,
                    "floating_point_value_4": 1,
                    "global_result_2": 1,
                    "global_var_6": 1,
                    "result2": 1,
                    "result3": 1,
                    "result6": 1,
                    "result_2": 1,
                    "result_value_2": 2
                },
                "DAT_200002e4": {
                    "floating_point_result_3": 1,
                    "floating_point_value5": 1,
                    "floating_point_value_5": 1,
                    "global_result_3": 1,
                    "global_var_7": 1,
                    "result3": 1,
                    "result4": 1,
                    "result7": 1,
                    "result_3": 1,
                    "result_value_3": 2
                },
                "DAT_200002e8": {
                    "constant1": 2,
                    "constant_2": 3,
                    "constant_value_1": 1,
                    "data_2": 1,
                    "data_value_2": 1,
                    "float2": 1,
                    "float_value_1": 1,
                    "value5": 1
                },
                "DAT_200002ec": {
                    "constant3": 2,
                    "constant_4": 3,
                    "constant_value_3": 1,
                    "data_5": 1,
                    "data_value_3": 1,
                    "float4": 1,
                    "float_value_3": 1,
                    "value7": 1
                },
                "DAT_200002f0": {
                    "constant5": 2,
                    "constant_6": 3,
                    "constant_value_5": 1,
                    "data_8": 1,
                    "data_value_4": 1,
                    "float6": 1,
                    "float_value_5": 1,
                    "value9": 1
                },
                "DAT_200013bb": {
                    "counter": 5,
                    "counter1": 3,
                    "global_counter": 2,
                    "global_var_1": 1
                },
                "FUN_08002d88": {
                    "process_and_calculate_mpu_values": 1,
                    "process_and_calculate_values": 1,
                    "process_and_handle_data": 1,
                    "process_and_handle_data_errors": 1,
                    "process_and_handle_errors": 2,
                    "process_and_update_data": 1,
                    "process_and_update_sensor_data": 2,
                    "process_data": 1,
                    "process_data_and_handle_errors": 2,
                    "process_mpu9250_data": 13,
                    "process_mpu_data": 2,
                    "process_sensor_data": 4
                },
                "calculate_float_value_08000ad8": {
                    "calc_float_value": 1,
                    "calculate_float_value": 1
                },
                "calculate_floating_point_value_08000cec": {
                    "calc_floating_point_value": 1,
                    "calculate_floating_point_value": 1
                },
                "count_set_bits_08000c44": {
                    "count_set_bits": 2
                },
                "iVar1": {
                    "error_code": 2,
                    "error_result": 2,
                    "int_value_2": 1,
                    "process_result": 2,
                    "process_result_1": 1,
                    "result": 16,
                    "result1": 2,
                    "result_1": 1,
                    "status": 1
                },
                "iVar4": {
                    "bitwise_conversion": 1,
                    "byte1": 1,
                    "converted_value_1": 1,
                    "first_byte_int": 1,
                    "first_param": 1,
                    "int_value": 4,
                    "int_value1": 1,
                    "int_value_1": 1,
                    "integer_value": 2,
                    "integer_value_1": 1,
                    "process_result_2": 1,
                    "result2": 2,
                    "result4": 1,
                    "result_2": 1,
                    "temporary_int": 1,
                    "udata": 1,
                    "value3": 3,
                    "value_3": 1,
                    "var1": 1,
                    "var_z": 1
                },
                "local_22": {
                    "bit_check_result": 1,
                    "bit_count": 1,
                    "bit_count_1": 1,
                    "bit_flag": 4,
                    "bit_value": 1,
                    "byte4": 1,
                    "byte_count": 1,
                    "byte_val": 2,
                    "byte_value": 4,
                    "data_error_flag": 1,
                    "error_flag": 2,
                    "flag": 3,
                    "local_22": 1,
                    "local_variable6": 1,
                    "local_variable_2": 1,
                    "set_bit_count": 1,
                    "status": 1,
                    "unused_byte": 1
                },
                "local_23": {
                    "byte2": 1,
                    "byte3": 1,
                    "byte4": 1,
                    "data_2": 1,
                    "data_byte_3": 1,
                    "fourth_byte": 1,
                    "local_23": 1,
                    "local_value_1": 1,
                    "local_variable5": 1,
                    "local_variable_3": 1,
                    "param3_low_byte": 1,
                    "temp2": 1,
                    "temp_var1": 1,
                    "temp_var4": 1,
                    "temp_var_2": 1,
                    "temp_var_4": 1,
                    "third_byte": 1,
                    "unused4": 1,
                    "unused_4": 1,
                    "unused_var": 1,
                    "unused_var4": 1,
                    "value5": 1,
                    "value_8": 1,
                    "var_y": 1
                },
                "local_24": {
                    "byte2": 1,
                    "byte3": 2,
                    "data_3": 1,
                    "data_byte_4": 1,
                    "fourth_byte": 1,
                    "local_24": 1,
                    "local_value_2": 1,
                    "local_variable4": 1,
                    "local_variable_4": 1,
                    "param3_high_byte": 1,
                    "temp1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_1": 1,
                    "temp_var_3": 1,
                    "third_byte": 1,
                    "unused3": 1,
                    "unused_3": 1,
                    "unused_var": 1,
                    "unused_var3": 1,
                    "value4": 1,
                    "value_7": 1,
                    "var_x": 1
                },
                "local_28": {
                    "bit_count": 3,
                    "bits_count": 1,
                    "byte_value": 1,
                    "converted_data": 1,
                    "count": 1,
                    "data": 1,
                    "data_1": 1,
                    "error_code": 7,
                    "error_flag": 3,
                    "error_message": 1,
                    "flag": 2,
                    "flags": 1,
                    "local_variable1": 1,
                    "status": 1,
                    "value1": 1,
                    "value_1": 1,
                    "value_4": 1,
                    "zero": 1,
                    "zero_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data1": 1,
                    "data_1": 1,
                    "data_input": 1,
                    "data_length": 1,
                    "data_param": 2,
                    "data_param_1": 3,
                    "data_ptr": 3,
                    "data_size": 5,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value1": 2,
                    "param1": 2,
                    "param_1": 3,
                    "sensor_data": 1,
                    "sensor_data_1": 1,
                    "val1": 1,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "config_param": 1,
                    "data2": 1,
                    "data_2": 1,
                    "data_format": 1,
                    "data_output": 1,
                    "data_param_2": 3,
                    "data_size": 1,
                    "data_type": 2,
                    "error_code": 3,
                    "error_param": 1,
                    "error_ptr": 2,
                    "flags": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value2": 2,
                    "param2": 2,
                    "param_2": 3,
                    "sensor_data_2": 1,
                    "val2": 1,
                    "value2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "data3": 1,
                    "data_3": 1,
                    "data_param_3": 3,
                    "file_name": 3,
                    "file_param": 1,
                    "file_path": 5,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_value3": 2,
                    "param3": 2,
                    "param_3": 5,
                    "source_filepath": 1,
                    "val3": 1,
                    "value3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "data4": 1,
                    "data_4": 1,
                    "data_param_4": 3,
                    "file_line": 1,
                    "file_ptr": 1,
                    "flag": 1,
                    "flag_param": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_value4": 2,
                    "line_number": 7,
                    "param": 1,
                    "param4": 2,
                    "param_4": 5,
                    "val4": 1,
                    "value4": 1
                },
                "process_data_and_handle_errors_0800407c": {
                    "process_data_and_handle_errors": 1
                },
                "process_data_and_handle_errors_080040e8": {
                    "handle_errors": 1
                },
                "uStack_21": {
                    "byte1": 1,
                    "first_byte": 1,
                    "high_byte_param_4": 1,
                    "shifted_param_4": 1,
                    "shifted_value": 1,
                    "temp3": 1,
                    "temp_var_5": 1,
                    "upper_byte": 2
                },
                "uStack_25": {
                    "byte1": 1,
                    "data_4": 1,
                    "local_variable3": 1,
                    "lower_byte": 1,
                    "param2_high_byte": 1,
                    "second_byte": 1,
                    "temp5": 1,
                    "temp_byte1": 1,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "temp_var_4": 1,
                    "u_stack_25": 1,
                    "unused2": 1,
                    "unused_2": 1,
                    "unused_stack_var": 1,
                    "unused_var2": 1,
                    "upper_byte": 1,
                    "value_6": 1
                },
                "uStack_26": {
                    "byte2": 1,
                    "data_5": 1,
                    "first_byte": 1,
                    "local_variable2": 1,
                    "lower_byte": 1,
                    "param2_low_byte": 1,
                    "temp4": 1,
                    "temp_byte2": 1,
                    "temp_var1": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "u_stack_26": 1,
                    "unused1": 1,
                    "unused_1": 1,
                    "unused_stack_var": 1,
                    "unused_var1": 1,
                    "upper_byte": 1,
                    "value_5": 1
                },
                "uVar2": {
                    "float_value1": 1,
                    "float_value_1": 6,
                    "floating_point_value": 4,
                    "floating_point_value1": 2,
                    "floating_point_value_1": 3,
                    "floating_value": 1,
                    "result2": 2,
                    "result_1": 1,
                    "temp_var1": 1,
                    "value": 1,
                    "value1": 3,
                    "value_1": 1
                },
                "uVar3": {
                    "float_value2": 1,
                    "float_value_2": 6,
                    "floating_point_value2": 2,
                    "floating_point_value_2": 4,
                    "floating_value2": 1,
                    "result3": 2,
                    "result_2": 1,
                    "second_floating_point_value": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "u_var3": 1,
                    "value2": 4,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_0800407c",
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_080040e8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid process_mpu9250_data_08002d88(undefined4 data_size,undefined4 data_param_2,undefined4 file_path,undefined4 line_number)\n\n{\n  int result;\n  undefined4 float_value_1;\n  undefined4 float_value_2;\n  int int_value;\n  undefined2 error_code;\n  undefined temp_var_2;\n  undefined unused_var2;\n  undefined byte3;\n  undefined temp_var4;\n  byte bit_flag;\n  undefined upper_byte;\n  \n  upper_byte = (undefined)((uint)line_number >> 0x18);\n  error_code = 0;\n  temp_var_2 = 0;\n  unused_var2 = 0;\n  byte3 = 0;\n  temp_var4 = 0;\n  bit_flag = 0;\n  result = process_data_and_handle_errors(0x18,2,\"../Src/MPU9250.c\",0xd7,data_size,data_param_2);\n  if (result << 0x1f < 0) {\n    handle_errors(0x18,3,&error_code,7,\"../Src/MPU9250.c\",0xda);\n    float_value_2 = DAT_2000001c;\n    if ((int)((uint)bit_flag << 0x1c) < 0) {\n      DAT_200013bb = DAT_200013bb + 1;\n    }\n    else {\n      DAT_200002ba = CONCAT11(unused_var2,temp_var_2);\n      DAT_200002bc = CONCAT11(temp_var4,byte3);\n      int_value = (int)DAT_200002ba;\n      result = (int)DAT_200002bc;\n      DAT_200002b8 = error_code;\n      float_value_1 = count_set_bits();\n      float_value_1 = calculate_floating_point_value(float_value_1,float_value_2);\n      float_value_1 = calculate_floating_point_value(float_value_1,DAT_200002e8);\n      float_value_1 = calculate_float_value(float_value_1,DAT_20000020);\n      DAT_200002dc = calculate_floating_point_value(float_value_1,DAT_2000002c);\n      float_value_1 = count_set_bits(int_value);\n      float_value_1 = calculate_floating_point_value(float_value_1,float_value_2);\n      float_value_1 = calculate_floating_point_value(float_value_1,DAT_200002ec);\n      float_value_1 = calculate_float_value(float_value_1,DAT_20000024);\n      DAT_200002e0 = calculate_floating_point_value(float_value_1,DAT_20000030);\n      float_value_1 = count_set_bits(result);\n      float_value_2 = calculate_floating_point_value(float_value_1,float_value_2);\n      float_value_2 = calculate_floating_point_value(float_value_2,DAT_200002f0);\n      float_value_2 = calculate_float_value(float_value_2,DAT_20000028);\n      DAT_200002e4 = calculate_floating_point_value(float_value_2,DAT_20000034);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_mpu9250_data_08002d88",
            "entrypoint": "0x08002d88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002d88": "process_mpu9250_data_08002d88",
                "calculate_float_value_08000ad8": "calculate_float_value",
                "calculate_floating_point_value_08000cec": "calculate_floating_point_value",
                "count_set_bits_08000c44": "count_set_bits",
                "iVar1": "result",
                "iVar4": "int_value",
                "local_22": "bit_flag",
                "local_23": "temp_var4",
                "local_24": "byte3",
                "local_28": "error_code",
                "param_1": "data_size",
                "param_2": "data_param_2",
                "param_3": "file_path",
                "param_4": "line_number",
                "process_data_and_handle_errors_0800407c": "process_data_and_handle_errors",
                "process_data_and_handle_errors_080040e8": "handle_errors",
                "uStack_21": "upper_byte",
                "uStack_25": "unused_var2",
                "uStack_26": "temp_var_2",
                "uVar2": "float_value_1",
                "uVar3": "float_value_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ea0": {
            "additional_data": {
                "FUN_08002ea0": {
                    "initialize_and_process_i2c_sensor_data": 1,
                    "initialize_and_process_sensor_data": 20,
                    "initialize_and_process_sensors": 4,
                    "initialize_sensor": 2,
                    "initialize_sensor_and_process_data": 1,
                    "initialize_sensor_data": 3
                },
                "extraout_r1": {
                    "extra_out": 1,
                    "extra_result": 2,
                    "extraout_r1": 1,
                    "out_param": 1,
                    "result": 1,
                    "result1": 1,
                    "result_1": 1,
                    "result_value": 1,
                    "status": 1,
                    "temp_var": 1,
                    "unused": 1,
                    "unused_out_param": 2,
                    "unused_var_1": 1,
                    "unused_variable": 7,
                    "unused_variable_r1": 1
                },
                "initialize_mpu9250_sensor_08002ad0": {
                    "initialize_mpu9250_sensor": 14
                },
                "param_1": {
                    "arg1": 2,
                    "device_address": 1,
                    "device_param": 1,
                    "first_param": 1,
                    "initialization_param": 1,
                    "param1": 3,
                    "param_1": 1,
                    "parameter_1": 1,
                    "sensor_param_1": 2,
                    "unnamed_param_1": 1,
                    "unused": 1,
                    "unused_param": 5,
                    "unused_param1": 1,
                    "unused_param_1": 10
                },
                "param_2": {
                    "arg2": 2,
                    "param2": 3,
                    "param_2": 1,
                    "parameter_2": 1,
                    "register_address": 1,
                    "second_param": 1,
                    "sensor_param": 1,
                    "sensor_param_2": 2,
                    "unnamed_param_2": 1,
                    "unused": 1,
                    "unused_param": 4,
                    "unused_param2": 2,
                    "unused_param_1": 1,
                    "unused_param_2": 10
                },
                "param_3": {
                    "arg3": 2,
                    "data_length": 1,
                    "data_param": 1,
                    "param3": 3,
                    "param_3": 1,
                    "parameter_3": 2,
                    "sensor_param_3": 2,
                    "third_param": 1,
                    "unnamed_param_3": 1,
                    "unused": 1,
                    "unused_param": 3,
                    "unused_param3": 2,
                    "unused_param_2": 1,
                    "unused_param_3": 10
                },
                "param_4": {
                    "arg4": 2,
                    "config_param": 1,
                    "data_buffer": 1,
                    "fourth_param": 1,
                    "param4": 3,
                    "param_4": 1,
                    "parameter_4": 2,
                    "sensor_param_4": 2,
                    "unnamed_param_4": 1,
                    "unused": 1,
                    "unused_param": 3,
                    "unused_param4": 2,
                    "unused_param_3": 1,
                    "unused_param_4": 10
                },
                "process_i2c_sensor_data_08002cb0": {
                    "process_i2c_sensor_data": 14
                },
                "set_global_parameter_value_08003314": {
                    "set_global_parameter": 1,
                    "set_global_parameter_value": 12,
                    "set_sensor_parameter_value": 1
                },
                "set_param_to_global_variable_08003320": {
                    "assign_parameter_to_variable": 1,
                    "set_param_to_global_variable": 13
                }
            },
            "called": [
                "FUN_08003314",
                "FUN_08003320",
                "FUN_08002cb0",
                "FUN_08002ad0"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\nvoid initialize_and_process_i2c_sensor_data_08002ea0(undefined4 unused_param_1,undefined4 unused_param_2,undefined4 unused_param_3,undefined4 unused_param_4)\n\n{\n  undefined4 unused_variable;\n  \n  initialize_mpu9250_sensor();\n  process_i2c_sensor_data();\n  set_global_parameter_value(0x3f19999a);\n  set_param_to_global_variable(0,unused_variable,unused_param_3,unused_param_4);\n  return;\n}\n\n",
            "current_name": "initialize_and_process_i2c_sensor_data_08002ea0",
            "entrypoint": "0x08002ea0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ea0": "initialize_and_process_i2c_sensor_data_08002ea0",
                "extraout_r1": "unused_variable",
                "initialize_mpu9250_sensor_08002ad0": "initialize_mpu9250_sensor",
                "param_1": "unused_param_1",
                "param_2": "unused_param_2",
                "param_3": "unused_param_3",
                "param_4": "unused_param_4",
                "process_i2c_sensor_data_08002cb0": "process_i2c_sensor_data",
                "set_global_parameter_value_08003314": "set_global_parameter_value",
                "set_param_to_global_variable_08003320": "set_param_to_global_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ec0": {
            "additional_data": {
                "FUN_08002ec0": {
                    "calculate_and_adjust_values": 1,
                    "calculate_and_store_result": 1,
                    "calculate_and_update_final_value": 1,
                    "calculate_and_update_floating_point_values": 1,
                    "calculate_combined_floating_point_values": 1,
                    "calculate_final_result": 1,
                    "calculate_final_value": 6,
                    "calculate_float_value_and_update": 1,
                    "calculate_floating_point_result": 1,
                    "calculate_floating_point_values": 1,
                    "calculate_floating_values": 1,
                    "calculate_new_float_value": 1,
                    "calculate_new_value": 1,
                    "calculate_result": 9,
                    "calculate_updated_value": 3,
                    "calculate_updated_values": 1
                },
                "uVar1": {
                    "calculated_value_1": 1,
                    "first_float_value": 2,
                    "first_value": 2,
                    "float_value": 5,
                    "float_value1": 2,
                    "initial_float_value": 1,
                    "input1": 1,
                    "input_value": 4,
                    "input_value1": 3,
                    "original_float_value": 1,
                    "result": 1,
                    "result1": 7,
                    "temp_value1": 1
                },
                "uVar2": {
                    "calculated_value_2": 1,
                    "constant1": 3,
                    "constant_value": 1,
                    "constant_value1": 2,
                    "constant_value_1": 1,
                    "data1": 3,
                    "float_value1": 1,
                    "float_value2": 1,
                    "initial_float_value": 1,
                    "initial_value": 10,
                    "input_value1": 1,
                    "input_value2": 1,
                    "previous_float_value": 1,
                    "result2": 1,
                    "second_float_value": 1,
                    "second_value": 2
                },
                "uVar3": {
                    "calculated_value_3": 1,
                    "constant2": 3,
                    "constant_value": 2,
                    "constant_value2": 2,
                    "constant_value_2": 1,
                    "data2": 3,
                    "data_value": 1,
                    "float_value2": 1,
                    "float_value3": 1,
                    "initial_floating_point_value": 1,
                    "input_value": 2,
                    "input_value2": 1,
                    "input_value3": 1,
                    "other_value": 1,
                    "previous_float_value_2": 1,
                    "result3": 1,
                    "second_float_value": 1,
                    "second_value": 2,
                    "secondary_value": 2,
                    "third_float_value": 1,
                    "third_value": 2
                }
            },
            "called": [
                "FUN_08000adc",
                "FUN_08000ad8",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_and_store_result_08002ec0(void)\n\n{\n  undefined4 result1;\n  undefined4 initial_value;\n  undefined4 constant2;\n  \n  initial_value = DAT_2000024c;\n  constant2 = DAT_20000010;\n  result1 = calculate_float_value_08000ad8(0x3f800000,DAT_20000010);\n  initial_value = calculate_floating_point_value_08000cec(result1,initial_value);\n  constant2 = calculate_floating_point_value_08000cec(constant2,DAT_2000000c);\n  DAT_2000000c = calculate_floating_point_value_08000adc(constant2,initial_value);\n  return;\n}\n\n",
            "current_name": "calculate_and_store_result_08002ec0",
            "entrypoint": "0x08002ec0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ec0": "calculate_and_store_result_08002ec0",
                "uVar1": "result1",
                "uVar2": "initial_value",
                "uVar3": "constant2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ed4": {
            "additional_data": {
                "DAT_20000248": {
                    "constant_value_1": 1
                },
                "FUN_08000ad8": {
                    "calculate_average": 1,
                    "calculate_float_value": 1,
                    "calculate_product": 1,
                    "calculate_square": 1,
                    "calculate_square_root": 2,
                    "calculate_value": 3,
                    "calculate_value1": 1,
                    "multiply_values": 1
                },
                "FUN_08000adc": {
                    "calculate_difference": 1,
                    "calculate_result": 1,
                    "calculate_result_from_values": 1,
                    "multiply_and_add_values": 1,
                    "multiply_values": 2,
                    "store_result": 2,
                    "update_result": 1,
                    "update_value": 2
                },
                "FUN_08000cec": {
                    "add_values": 2,
                    "calculate_sum": 1,
                    "calculate_value2": 1,
                    "combine_values": 1,
                    "multiply_values": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_math_operation": 1,
                    "perform_operation": 3
                },
                "FUN_08002ed4": {
                    "calculate_and_store_result": 4,
                    "calculate_and_update": 1,
                    "calculate_and_update_value": 1,
                    "calculate_new_value": 2,
                    "calculate_ram_value": 2,
                    "calculate_result": 14,
                    "calculate_sum": 1,
                    "compute_result": 2,
                    "perform_calculation": 1,
                    "process_data": 1,
                    "reverse_ram_value": 1
                },
                "uRam20000014": {
                    "memory_value2": 1,
                    "new_ram_value": 1,
                    "output": 1,
                    "parameter2": 1,
                    "ram_value2": 1,
                    "result": 3,
                    "result_memory": 1,
                    "result_variable": 1,
                    "stored_value": 1,
                    "updated_value": 1,
                    "value2": 1
                },
                "uRam20000018": {
                    "constant_value_2": 1,
                    "constant_variable": 1,
                    "input1": 2,
                    "input_value": 1,
                    "memory_constant": 1,
                    "memory_value1": 1,
                    "parameter1": 1,
                    "parameter_value1": 1,
                    "ram_value1": 1,
                    "ram_value2": 1,
                    "value1": 1,
                    "value_a": 1
                },
                "uVar1": {
                    "average": 1,
                    "input1": 1,
                    "normalized_value": 1,
                    "param1": 1,
                    "result": 5,
                    "result1": 17,
                    "result_a": 2,
                    "temp_float1": 1,
                    "temp_result": 2
                },
                "uVar2": {
                    "constant": 7,
                    "constant1": 3,
                    "constant_a": 1,
                    "constant_value": 7,
                    "data1": 5,
                    "initial_value": 5,
                    "initial_value1": 1,
                    "input2": 1,
                    "original_value1": 1
                },
                "uVar3": {
                    "constant2": 3,
                    "constant_b": 1,
                    "data2": 5,
                    "data_value": 1,
                    "initial_value": 2,
                    "initial_value2": 2,
                    "input3": 1,
                    "mem_value1": 1,
                    "memory_location": 1,
                    "memory_value": 1,
                    "original_value2": 1,
                    "parameter": 1,
                    "parameter_value": 1,
                    "ram_value": 2,
                    "result2": 1,
                    "stored_value": 1,
                    "temp_value": 1,
                    "value": 2,
                    "variable": 1,
                    "variable_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_and_store_result_08002ed4(void)\n\n{\n  undefined4 result1;\n  undefined4 constant;\n  undefined4 data2;\n  \n  constant = DAT_20000248;\n  data2 = input1;\n  result1 = FUN_08000ad8(0x3f800000,input1);\n  constant = FUN_08000cec(result1,constant);\n  data2 = FUN_08000cec(data2,result);\n  result = FUN_08000adc(data2,constant);\n  return;\n}\n\n",
            "current_name": "calculate_and_store_result_08002ed4",
            "entrypoint": "0x08002ed4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ed4": "calculate_and_store_result_08002ed4",
                "uRam20000014": "result",
                "uRam20000018": "input1",
                "uVar1": "result1",
                "uVar2": "constant",
                "uVar3": "data2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ee8": {
            "additional_data": {
                "FUN_08002ee8": {
                    "calculate_concatenation_result": 1,
                    "calculate_float_or_floating_point_value": 2,
                    "calculate_float_value": 3,
                    "calculate_float_value_if_concatenated_integers_not_empty": 1,
                    "calculate_float_value_or_floating_point_conversion": 1,
                    "calculate_float_value_or_floating_point_value": 1,
                    "calculate_floating_point_or_float_value": 1,
                    "calculate_result_and_handle_empty_values": 1,
                    "calculate_result_and_value": 2,
                    "calculate_result_based_on_concatenated_integers": 1,
                    "calculate_result_based_on_concatenation": 5,
                    "calculate_result_or_value": 1,
                    "calculate_value": 1,
                    "calculate_value_based_on_concatenation": 2,
                    "perform_calculation": 3,
                    "process_concatenated_values": 1,
                    "process_concatenation": 2,
                    "process_concatenation_check": 1,
                    "process_data": 1
                },
                "calculate_float_value_08000ad8": {
                    "calculate_float_value": 18
                },
                "calculate_floating_point_value_08000adc": {
                    "calculate_float_point_value": 1,
                    "calculate_floating_point_value": 17,
                    "calculate_floating_value": 1
                },
                "check_concatenation_result_08001050": {
                    "check_concat_result": 1,
                    "check_concatenation_result": 18
                },
                "check_if_concatenated_integers_are_empty_08001028": {
                    "check_concatenated_integers": 2,
                    "check_concatenated_integers_are_empty": 1,
                    "check_concatenated_integers_empty": 3,
                    "check_concatenation_integers_empty": 1,
                    "check_empty_concat_int": 1,
                    "check_empty_concatenated_integers": 2,
                    "check_if_concatenated_integers_are_empty": 8,
                    "check_if_concatenated_integers_empty": 1
                },
                "iVar2": {
                    "concat_result": 1,
                    "concatenated_check_result": 2,
                    "concatenation_check": 2,
                    "concatenation_check_result": 6,
                    "concatenation_result": 9,
                    "concatenation_status": 1,
                    "result": 10
                },
                "uVar1": {
                    "data": 1,
                    "data_value": 5,
                    "initial_value": 8,
                    "input_value": 3,
                    "original_value": 3,
                    "previous_value": 1,
                    "result": 4,
                    "result_code": 1,
                    "return_value": 1,
                    "value": 2,
                    "value1": 1
                }
            },
            "called": [
                "FUN_08000adc",
                "FUN_08001028",
                "FUN_08001050",
                "FUN_08000ad8"
            ],
            "calling": [
                "FUN_08002f28",
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_float_value_or_floating_point_conversion_08002ee8(void)\n\n{\n  undefined4 initial_value;\n  int result;\n  \n  initial_value = DAT_20000250;\n  result = check_concatenation_result(DAT_20000250,0xc3340000);\n  if ((result != 0) && (result = check_if_concatenated_integers_are_empty(initial_value,0x42b40000), result != 0)) {\n    calculate_floating_point_value(initial_value,0x42b40000);\n    return;\n  }\n  calculate_float_value(initial_value,0x43870000);\n  return;\n}\n\n",
            "current_name": "calculate_float_value_or_floating_point_conversion_08002ee8",
            "entrypoint": "0x08002ee8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ee8": "calculate_float_value_or_floating_point_conversion_08002ee8",
                "calculate_float_value_08000ad8": "calculate_float_value",
                "calculate_floating_point_value_08000adc": "calculate_floating_point_value",
                "check_concatenation_result_08001050": "check_concatenation_result",
                "check_if_concatenated_integers_are_empty_08001028": "check_if_concatenated_integers_are_empty",
                "iVar2": "result",
                "uVar1": "initial_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f28": {
            "additional_data": {
                "DAT_20000248": {
                    "result_data": 1
                },
                "DAT_200002c4": {
                    "sensor_data3": 1
                },
                "DAT_200002c8": {
                    "sensor_data2": 1
                },
                "DAT_200002cc": {
                    "sensor_data4": 1
                },
                "DAT_200002d8": {
                    "sensor_data1": 1
                },
                "DAT_200002dc": {
                    "sensor_data5": 1
                },
                "DAT_200002e0": {
                    "sensor_data6": 1
                },
                "DAT_200002e4": {
                    "sensor_data7": 1
                },
                "DAT_20001395": {
                    "converted_result": 1
                },
                "DAT_20001399": {
                    "converted_result2": 1
                },
                "DAT_2000142c": {
                    "result_3": 3,
                    "result_value3": 1
                },
                "DAT_20001430": {
                    "parameter1": 1,
                    "value_1": 3
                },
                "DAT_20001434": {
                    "parameter3": 1,
                    "value_3": 3
                },
                "DAT_20001438": {
                    "parameter5": 1,
                    "value_5": 3
                },
                "DAT_2000143a": {
                    "parameter6": 1,
                    "value_6": 3
                },
                "FUN_08002f28": {
                    "initialize_and_process_data": 1,
                    "initialize_and_process_mpu9250_data": 5,
                    "initialize_and_process_mpu_data": 6,
                    "initialize_and_process_sensor_data": 1,
                    "initialize_mpu9250_and_process_data": 1,
                    "initialize_sensor_and_process_data": 1,
                    "initialize_sensor_data": 2,
                    "process_data": 1,
                    "process_mpu_data": 5,
                    "process_sensor_data": 8
                },
                "_DAT_2000142a": {
                    "result_1": 3,
                    "result_value1": 1
                },
                "_DAT_2000142e": {
                    "result_2": 3,
                    "result_value2": 1
                },
                "_DAT_20001432": {
                    "parameter2": 1,
                    "value_2": 3
                },
                "_DAT_20001436": {
                    "parameter4": 1,
                    "value_4": 3
                },
                "calculate_and_store_result_08002ec0": {
                    "calculate_and_store_result2": 1,
                    "calculate_and_store_result_2": 1
                },
                "calculate_and_store_result_08002ed4": {
                    "calculate_and_store_result": 31
                },
                "calculate_float_value_08000e54": {
                    "calculate_float_value": 31
                },
                "calculate_float_value_or_floating_point_conversion_08002ee8": {
                    "calculate_float_value_or_conversion": 3
                },
                "calculate_floating_point_value_08000cec": {
                    "calculate_floating_point_value": 31
                },
                "calculate_modified_value_08000c3c": {
                    "calculate_modified_data": 1,
                    "calculate_modified_value": 30
                },
                "convert_to_signed_integer_08001078": {
                    "convert_to_signed_integer": 30,
                    "convert_to_signed_integer_2": 1
                },
                "initialize_mpu9250_08002b48": {
                    "initialize_accelerometer": 2,
                    "initialize_mpu": 1,
                    "initialize_mpu9250": 22,
                    "initialize_mpu9250_1": 1,
                    "initialize_mpu9250_registers": 1,
                    "initialize_mpu_registers": 1,
                    "initialize_sensor_a": 1
                },
                "initialize_mpu9250_08002bf0": {
                    "calibrate_gyro_and_accelerometer": 1,
                    "calibrate_mpu9250": 1,
                    "configure_mpu": 1,
                    "configure_mpu9250": 11,
                    "configure_mpu9250_sensors": 1,
                    "initialize_gyroscope": 2,
                    "initialize_mpu9250": 1,
                    "initialize_mpu9250_2": 1,
                    "initialize_mpu9250_config": 1,
                    "initialize_mpu9250_data": 5,
                    "initialize_mpu9250_sensors": 1,
                    "initialize_mpu_config": 1,
                    "initialize_sensor_b": 1,
                    "setup_mpu9250": 1
                },
                "process_data_and_calculate_results_08003330": {
                    "process_and_calculate_results": 4,
                    "process_data_and_calculate": 1,
                    "process_data_and_calculate_results": 26
                },
                "process_mpu9250_data_08002d88": {
                    "process_mpu9250_data": 21,
                    "process_mpu9250_sensor_data": 1,
                    "process_mpu_data": 4,
                    "process_raw_sensor_data": 1,
                    "process_sensor_a_data": 1,
                    "process_sensor_data": 1
                },
                "set_param_to_global_variable_08003320": {
                    "set_global_variable": 5,
                    "set_param_to_global_variable": 23,
                    "set_parameter_to_global_variable": 2,
                    "set_parameters_to_global_variable": 1
                },
                "thunk_get_data_value_0800115c": {
                    "get_data_value": 24,
                    "get_initial_data_value": 1,
                    "get_previous_data_value": 1,
                    "get_sensor_data_value": 2
                },
                "uVar1": {
                    "calculated_value": 1,
                    "modified_value": 7,
                    "result": 1
                }
            },
            "called": [
                "FUN_08002ee8",
                "thunk_FUN_0800115c",
                "FUN_08002d88",
                "FUN_08002ec0",
                "FUN_08000e54",
                "FUN_08003330",
                "FUN_08002bf0",
                "FUN_08000cec",
                "FUN_08003320",
                "FUN_08002b48",
                "FUN_08002ed4",
                "FUN_08000c3c",
                "FUN_08001078"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid initialize_sensor_and_process_data_08002f28(void)\n\n{\n  undefined4 modified_value;\n  \n  initialize_mpu9250();\n  configure_mpu9250();\n  process_mpu9250_data();\n  DAT_20000258 = get_data_value();\n  modified_value = calculate_modified_value(DAT_20000258 - DAT_20000254);\n  calculate_float_value(modified_value,0x447a0000);\n  set_param_to_global_variable();\n  DAT_20000254 = DAT_20000258;\n  process_data_and_calculate_results(DAT_200002d4 + -0x80000000,DAT_200002d0 + -0x80000000,DAT_200002d8,DAT_200002c8,\n               DAT_200002c4,DAT_200002cc + -0x80000000,DAT_200002dc,DAT_200002e0,DAT_200002e4,\n               &DAT_20000248);\n  _DAT_2000142a = (undefined2)((uint)(int)DAT_200002f4 / 100);\n  _DAT_2000142e = (undefined2)((uint)(int)DAT_200002f8 / 100);\n  DAT_2000142c = (undefined2)((uint)(int)DAT_200002f6 / 100);\n  DAT_20001430 = DAT_200002be;\n  _DAT_20001432 = DAT_200002c0;\n  DAT_20001434 = DAT_200002c2;\n  _DAT_20001436 = DAT_200002b8;\n  DAT_20001438 = DAT_200002ba;\n  DAT_2000143a = DAT_200002bc;\n  modified_value = calculate_and_store_result();\n  calculate_floating_point_value(modified_value,0x41200000);\n  DAT_20001395._0_2_ = convert_to_signed_integer();\n  modified_value = calculate_and_store_result2();\n  calculate_floating_point_value(modified_value,0x41200000);\n  DAT_20001395._2_2_ = convert_to_signed_integer();\n  calculate_float_value_or_conversion();\n  DAT_20001399 = convert_to_signed_integer();\n  return;\n}\n\n",
            "current_name": "initialize_sensor_and_process_data_08002f28",
            "entrypoint": "0x08002f28",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f28": "initialize_sensor_and_process_data_08002f28",
                "calculate_and_store_result_08002ec0": "calculate_and_store_result2",
                "calculate_and_store_result_08002ed4": "calculate_and_store_result",
                "calculate_float_value_08000e54": "calculate_float_value",
                "calculate_float_value_or_floating_point_conversion_08002ee8": "calculate_float_value_or_conversion",
                "calculate_floating_point_value_08000cec": "calculate_floating_point_value",
                "calculate_modified_value_08000c3c": "calculate_modified_value",
                "convert_to_signed_integer_08001078": "convert_to_signed_integer",
                "initialize_mpu9250_08002b48": "initialize_mpu9250",
                "initialize_mpu9250_08002bf0": "configure_mpu9250",
                "process_data_and_calculate_results_08003330": "process_data_and_calculate_results",
                "process_mpu9250_data_08002d88": "process_mpu9250_data",
                "set_param_to_global_variable_08003320": "set_param_to_global_variable",
                "thunk_get_data_value_0800115c": "get_data_value",
                "uVar1": "modified_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003034": {
            "additional_data": {
                "CONCAT11": {
                    "concatenate11": 2,
                    "concatenate_11": 1
                },
                "CONCAT12": {
                    "concatenate12": 2,
                    "concatenate_12": 1
                },
                "FUN_08003034": {
                    "convert_data_to_uint": 1,
                    "extract_data_from_binary": 1,
                    "parse_data_and_combine": 1,
                    "process_and_concat_data": 1,
                    "process_and_concatenate_data": 7,
                    "process_and_convert_data": 6,
                    "process_and_error_handler": 1,
                    "process_and_extract_data": 1,
                    "process_and_handle_data_error": 1,
                    "process_and_handle_data_errors": 2,
                    "process_and_return_data": 1,
                    "process_data_and_concat": 1,
                    "process_data_and_concatenate": 2,
                    "process_data_and_handle_error": 4,
                    "process_data_and_return_uint": 1
                },
                "local_c": {
                    "combined_value": 1,
                    "concatenated_data": 4,
                    "concatenated_error": 1,
                    "concatenated_result": 2,
                    "concatenated_value": 1,
                    "converted_data": 6,
                    "converted_variable": 1,
                    "data": 2,
                    "local_var": 1,
                    "processed_data": 7,
                    "processed_value": 1,
                    "result": 2,
                    "return_value": 1
                },
                "param_1": {
                    "arg1": 5,
                    "data1": 3,
                    "data_length": 1,
                    "device_id": 1,
                    "device_param": 1,
                    "error_code": 2,
                    "input_1": 2,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 9,
                    "parameter1": 1,
                    "source_index": 1,
                    "temperature_param": 1,
                    "unused_param_1": 1,
                    "unused_parameter": 1
                },
                "param_2": {
                    "arg2": 5,
                    "buffer_size_param": 1,
                    "data2": 3,
                    "destination_index": 1,
                    "input_2": 2,
                    "input_param2": 1,
                    "input_param_2": 9,
                    "mode": 1,
                    "output_param": 1,
                    "param": 1,
                    "param2": 2,
                    "parameter2": 1,
                    "pressure_param": 1,
                    "unused_param_2": 1,
                    "unused_parameter": 1
                },
                "param_3": {
                    "arg3": 5,
                    "data": 1,
                    "data3": 3,
                    "data_buffer": 1,
                    "data_param": 1,
                    "error_message": 1,
                    "error_param": 1,
                    "file_name": 1,
                    "file_path": 2,
                    "file_path_param": 1,
                    "input_3": 2,
                    "input_param3": 1,
                    "input_param_3": 9,
                    "param3": 1,
                    "parameter3": 1
                },
                "param_4": {
                    "arg4": 5,
                    "conversion_param": 1,
                    "conversion_result": 1,
                    "data": 2,
                    "data4": 3,
                    "data_param": 1,
                    "error_code": 2,
                    "error_param": 1,
                    "input_4": 2,
                    "input_param4": 1,
                    "input_param_4": 9,
                    "local_var": 1,
                    "param4": 1,
                    "parameter4": 1
                },
                "process_data_and_handle_error_080040b8": {
                    "handle_data_and_error": 1,
                    "process_and_handle_data_error": 1,
                    "process_data_and_handle_error": 1
                }
            },
            "called": [
                "FUN_080040b8"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nuint process_data_and_concatenate_08003034(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  undefined4 processed_data;\n  \n  processed_data = input_param_4;\n  process_and_handle_data_error(0xee,0,&processed_data,3,\"../Src/MS5611.c\",0x8c,input_param_3);\n  return (uint)concatenate12((undefined)processed_data,concatenate11(processed_data._1_1_,processed_data._2_1_));\n}\n\n",
            "current_name": "process_data_and_concatenate_08003034",
            "entrypoint": "0x08003034",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT11": "concatenate11",
                "CONCAT12": "concatenate12",
                "FUN_08003034": "process_data_and_concatenate_08003034",
                "local_c": "processed_data",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "process_data_and_handle_error_080040b8": "process_and_handle_data_error"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003068": {
            "additional_data": {
                "DAT_200002fc": {
                    "data": 6,
                    "data_value": 2,
                    "data_variable": 1,
                    "global_data": 1,
                    "global_value": 1,
                    "global_variable": 4,
                    "global_variable_value": 3,
                    "result": 2,
                    "some_data": 1
                },
                "FUN_08003068": {
                    "get_data": 7,
                    "get_data_from_memory": 1,
                    "get_data_value": 12,
                    "get_data_variable": 1,
                    "get_global_data": 1,
                    "get_global_value": 1,
                    "get_global_variable": 4,
                    "get_global_variable_value": 3,
                    "get_some_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004a30"
            ],
            "code": "\nundefined4 get_data_value_08003068(void)\n\n{\n  return DAT_200002fc;\n}\n\n",
            "current_name": "get_data_value_08003068",
            "entrypoint": "0x08003068",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003068": "get_data_value_08003068"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003298": {
            "additional_data": {
                "CONCAT11": {
                    "combine_bytes": 1
                },
                "DAT_20000038": {
                    "data_size": 2,
                    "sensor_data": 1,
                    "some_data": 1,
                    "unknown_variable1": 1
                },
                "DAT_2000025c": {
                    "data_buffer": 2,
                    "output_array": 1,
                    "result_array": 1,
                    "sensor_data_array": 1
                },
                "DAT_20000300": {
                    "initialized_data": 1,
                    "output_array": 1,
                    "output_buffer": 1,
                    "result_array": 1,
                    "result_buffer": 1
                },
                "D_20000038": {
                    "sensor_type": 1
                },
                "FUN_08003298": {
                    "initialize_ms5611_sensor": 2,
                    "initialize_sensor": 15,
                    "initialize_sensor_data": 11,
                    "process_data_from_i2_c": 1,
                    "process_sensor_data": 1,
                    "read_and_process_i2_c_data": 1
                },
                "iVar1": {
                    "counter": 10,
                    "index": 15,
                    "iteration": 2,
                    "iteration_count": 2,
                    "iteration_counter": 1,
                    "iteration_variable": 1
                },
                "local_1b": {
                    "byte2": 8,
                    "data_byte2": 1,
                    "error_code2": 1,
                    "high_byte": 1,
                    "low_byte": 2,
                    "second_byte": 11,
                    "sensor_data_byte2": 1,
                    "sensor_data_low_byte": 1,
                    "sensor_value2": 1,
                    "temp2": 1,
                    "upper_byte": 2,
                    "value2": 1
                },
                "local_1c": {
                    "byte1": 8,
                    "data_byte1": 1,
                    "error_code1": 1,
                    "first_byte": 11,
                    "high_byte": 2,
                    "low_byte": 1,
                    "lower_byte": 2,
                    "sensor_data_byte1": 1,
                    "sensor_data_high_byte": 1,
                    "sensor_value1": 1,
                    "temp1": 1,
                    "value1": 1
                },
                "process_data_and_handle_errors_080040e8": {
                    "process_data": 2,
                    "process_data_and_handle_errors": 3
                },
                "process_i2c_data_0800403c": {
                    "process_i2_c_data": 4,
                    "send_i2_c_data": 1
                },
                "thunk_FUNC_08001168": {
                    "perform_thunks": 1,
                    "thunk_function": 4
                }
            },
            "called": [
                "FUN_0800403c",
                "thunk_FUN_08001168",
                "FUN_080040e8"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\nvoid initialize_sensor_data_08003298(void)\n\n{\n  int index;\n  undefined first_byte;\n  undefined second_byte;\n  \n  index = 0;\n  process_i2_c_data(0xee,0x1e,1);\n  thunk_FUNC_08001168(10);\n  DAT_20000038 = 8;\n  do {\n    first_byte = 0;\n    second_byte = 0;\n    process_data_and_handle_errors(0xee,index + 0xa0U & 0xffff,&first_byte,2,\"../Src/MS5611.c\",0x7c);\n    *(ushort *)((int)&DAT_2000025c + index) = combine_bytes(first_byte,second_byte);\n    index = index + 2;\n  } while (index != 0x10);\n  index = 0;\n  do {\n    (&DAT_20000300)[index] = 0;\n    index = index + 1;\n  } while (index != 0x14);\n  return;\n}\n\n",
            "current_name": "initialize_sensor_data_08003298",
            "entrypoint": "0x08003298",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT11": "combine_bytes",
                "FUN_08003298": "initialize_sensor_data_08003298",
                "iVar1": "index",
                "local_1b": "second_byte",
                "local_1c": "first_byte",
                "process_data_and_handle_errors_080040e8": "process_data_and_handle_errors",
                "process_i2c_data_0800403c": "process_i2_c_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003314": {
            "additional_data": {
                "DAT_2000035c": {
                    "dat_variable": 1,
                    "data_container": 1,
                    "data_to_set": 1,
                    "data_value": 1,
                    "global_parameter": 3,
                    "new_dat": 1,
                    "param_value": 3,
                    "parameter": 2
                },
                "FUN_08003314": {
                    "initialize_data": 2,
                    "initialize_global_variable": 1,
                    "initialize_parameter": 1,
                    "save_param": 1,
                    "set_dat_2000035c": 1,
                    "set_dat_variable": 2,
                    "set_data": 4,
                    "set_data_value": 2,
                    "set_global_parameter": 6,
                    "set_global_parameter_value": 1,
                    "set_global_variable": 1,
                    "set_param": 5,
                    "set_param_value": 1,
                    "set_parameter": 2,
                    "set_parameter_value": 1
                },
                "param_1": {
                    "data": 3,
                    "input_param": 1,
                    "input_parameter_value": 1,
                    "input_value": 2,
                    "new_data": 1,
                    "new_param": 3,
                    "new_value": 8,
                    "parameter": 1,
                    "value": 11
                },
                "param_2": {
                    "unused": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                },
                "value": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002ea0"
            ],
            "code": "\nvoid set_global_parameter_value_08003314(undefined4 value)\n\n{\n  DAT_2000035c = value;\n  return;\n}\n\n",
            "current_name": "set_global_parameter_value_08003314",
            "entrypoint": "0x08003314",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003314": "set_global_parameter_value_08003314",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003320": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20000360": {
                    "data": 1,
                    "data_pointer": 1,
                    "global_value": 4,
                    "global_variable": 2,
                    "initialized_data": 1,
                    "new_variable": 1,
                    "param_value": 4,
                    "parameter": 1,
                    "stored_value": 1
                },
                "FUN_08003320": {
                    "assign_param_to_data": 1,
                    "assign_parameter": 1,
                    "initialize_data": 3,
                    "initialize_global_variable": 1,
                    "initialize_param": 4,
                    "initialize_parameter": 2,
                    "set_data": 1,
                    "set_global_parameter": 5,
                    "set_global_value": 3,
                    "set_global_variable": 2,
                    "set_param": 3,
                    "set_param_to_global_variable": 1,
                    "set_param_value": 1,
                    "store_param_in_global_var": 1,
                    "store_parameter": 2
                },
                "param_1": {
                    "data": 2,
                    "initial_value": 1,
                    "input": 1,
                    "input_param": 1,
                    "new_data": 1,
                    "new_param": 1,
                    "new_value": 6,
                    "param": 2,
                    "value": 16
                }
            },
            "called": [],
            "calling": [
                "FUN_08002f28",
                "FUN_08002ea0"
            ],
            "code": "\nvoid set_param_to_global_variable_08003320(undefined4 value)\n\n{\n  DAT_20000360 = value;\n  return;\n}\n\n",
            "current_name": "set_param_to_global_variable_08003320",
            "entrypoint": "0x08003320",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003320": "set_param_to_global_variable_08003320",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003330": {
            "additional_data": {
                "FUN_08003330": {
                    "calculate_and_process_data": 2,
                    "calculate_data_result": 1,
                    "calculate_final_output": 1,
                    "calculate_final_result": 4,
                    "calculate_improved_result": 1,
                    "calculate_result": 4,
                    "process_and_calculate_result": 1,
                    "process_data": 15,
                    "process_data_and_calculate_results": 2
                },
                "iVar1": {
                    "temp29": 1
                },
                "iVar10": {
                    "temp38": 1
                },
                "iVar11": {
                    "temp39": 1
                },
                "iVar12": {
                    "temp40": 1
                },
                "iVar13": {
                    "temp41": 1
                },
                "iVar14": {
                    "temp42": 1
                },
                "iVar15": {
                    "temp43": 1
                },
                "iVar16": {
                    "temp44": 1
                },
                "iVar17": {
                    "temp45": 1
                },
                "iVar18": {
                    "temp46": 1
                },
                "iVar19": {
                    "calculate_result11": 1,
                    "calculation_19": 1,
                    "calculation_5": 1,
                    "check3": 2,
                    "concat_result1": 1,
                    "concat_result3": 1,
                    "concat_result_3": 1,
                    "concatenation_result_3": 1,
                    "floating_point_value_18": 1,
                    "floating_point_value_19": 1,
                    "result18": 6,
                    "result3": 2,
                    "result_16": 1,
                    "result_18": 1,
                    "result_19": 1,
                    "result_3": 1,
                    "temp16": 1,
                    "temp47": 1,
                    "temp_3": 1,
                    "value19": 1
                },
                "iVar2": {
                    "temp30": 1
                },
                "iVar20": {
                    "temp48": 1
                },
                "iVar21": {
                    "temp49": 1
                },
                "iVar22": {
                    "temp50": 1
                },
                "iVar23": {
                    "temp51": 1
                },
                "iVar24": {
                    "temp52": 1
                },
                "iVar25": {
                    "temp53": 1
                },
                "iVar26": {
                    "calculate_result18": 1,
                    "calculation_26": 1,
                    "calculation_6": 1,
                    "calculation_result": 1,
                    "check4": 2,
                    "check_result3": 1,
                    "check_result_3": 1,
                    "concat_result_4": 1,
                    "floating_point_value23": 1,
                    "floating_point_value_24": 1,
                    "floating_point_value_26": 1,
                    "result25": 6,
                    "result4": 2,
                    "result_23": 1,
                    "result_25": 1,
                    "result_26": 1,
                    "result_4": 1,
                    "temp23": 1,
                    "temp54": 1,
                    "temp_4": 1,
                    "value26": 1
                },
                "iVar27": {
                    "temp55": 1
                },
                "iVar3": {
                    "check": 2,
                    "check1": 2,
                    "check_result": 11,
                    "check_result1": 1,
                    "check_value": 1,
                    "comparison_result": 1,
                    "concat_result": 1,
                    "concat_result1": 1,
                    "concatenation_check": 1,
                    "concatenation_result": 2,
                    "concatenation_result_check": 1,
                    "result": 1,
                    "result1": 2,
                    "result_1": 1,
                    "temp31": 1,
                    "temp_1": 1
                },
                "iVar30": {
                    "calculate_result22": 1,
                    "calculation_30": 1,
                    "calculation_4": 1,
                    "check5": 2,
                    "check_result4": 1,
                    "check_result_4": 1,
                    "concat_result_5": 1,
                    "concatenation_result_4": 1,
                    "floating_point_value27": 1,
                    "floating_point_value_28": 1,
                    "floating_point_value_30": 1,
                    "integer_var": 1,
                    "result29": 6,
                    "result30": 1,
                    "result5": 2,
                    "result6": 1,
                    "result_27": 1,
                    "result_29": 1,
                    "result_30": 1,
                    "result_5": 1,
                    "temp_5": 1
                },
                "iVar4": {
                    "temp32": 1
                },
                "iVar5": {
                    "temp33": 1
                },
                "iVar6": {
                    "temp34": 1
                },
                "iVar7": {
                    "temp35": 1
                },
                "iVar8": {
                    "calculation_result": 1,
                    "check2": 2,
                    "check_result2": 1,
                    "check_result_2": 1,
                    "combine_result": 1,
                    "concat_result2": 1,
                    "concat_result_2": 1,
                    "concatenation_result_2": 1,
                    "floating_point_value_7": 1,
                    "floating_point_value_8": 1,
                    "result2": 2,
                    "result7": 6,
                    "result_2": 1,
                    "result_5": 1,
                    "result_7": 2,
                    "result_8": 1,
                    "temp36": 1,
                    "temp5": 1,
                    "temp_2": 1,
                    "value8": 1
                },
                "iVar9": {
                    "temp37": 1
                },
                "iVr30": {
                    "result_29": 1
                },
                "param_1": {
                    "arg1": 1,
                    "float1": 1,
                    "input1": 10,
                    "input_1": 10,
                    "input_param1": 2,
                    "input_param_1": 2,
                    "input_value_1": 2,
                    "value1": 1,
                    "value_1": 2
                },
                "param_10": {
                    "output": 6,
                    "output_array": 7,
                    "output_params": 7,
                    "output_values": 1,
                    "result": 2,
                    "result_array": 6,
                    "result_parameters": 1,
                    "results": 1
                },
                "param_2": {
                    "arg2": 1,
                    "float2": 1,
                    "input2": 10,
                    "input_2": 10,
                    "input_param2": 2,
                    "input_param_2": 2,
                    "input_value_2": 2,
                    "value2": 1,
                    "value_2": 2
                },
                "param_3": {
                    "arg3": 1,
                    "float3": 1,
                    "input3": 10,
                    "input_3": 10,
                    "input_param3": 2,
                    "input_param_3": 2,
                    "input_value_3": 2,
                    "value3": 1,
                    "value_3": 2
                },
                "param_4": {
                    "arg4": 1,
                    "concatenated1": 1,
                    "data1": 1,
                    "input4": 5,
                    "input_4": 8,
                    "input_param4": 2,
                    "input_param_4": 1,
                    "input_value_4": 1,
                    "int1": 1,
                    "param4": 1,
                    "param_4": 1,
                    "value4": 1,
                    "value_4": 2
                },
                "param_5": {
                    "arg5": 1,
                    "concatenated2": 1,
                    "data2": 1,
                    "input5": 5,
                    "input_5": 8,
                    "input_param5": 2,
                    "input_param_5": 1,
                    "input_value_5": 1,
                    "int2": 1,
                    "param5": 1,
                    "param_5": 1,
                    "value5": 1,
                    "value_5": 2
                },
                "param_6": {
                    "arg6": 1,
                    "concatenated3": 1,
                    "data3": 1,
                    "input6": 5,
                    "input_6": 8,
                    "input_param6": 2,
                    "input_param_6": 1,
                    "input_value_6": 1,
                    "int3": 1,
                    "param6": 1,
                    "param_6": 1,
                    "value6": 1,
                    "value_6": 2
                },
                "param_7": {
                    "arg7": 1,
                    "float4": 1,
                    "input4": 4,
                    "input7": 5,
                    "input_4": 2,
                    "input_7": 8,
                    "input_param7": 2,
                    "input_param_7": 2,
                    "input_value_7": 1,
                    "param7": 1,
                    "param_7": 1,
                    "value7": 1,
                    "value_7": 2
                },
                "param_8": {
                    "arg8": 1,
                    "float5": 1,
                    "input5": 4,
                    "input8": 5,
                    "input_5": 2,
                    "input_8": 8,
                    "input_param8": 2,
                    "input_param_8": 2,
                    "input_value_8": 1,
                    "param8": 1,
                    "param_8": 1,
                    "value8": 1,
                    "value_8": 2
                },
                "param_9": {
                    "arg9": 1,
                    "float6": 1,
                    "input6": 4,
                    "input9": 5,
                    "input_6": 2,
                    "input_9": 8,
                    "input_param9": 2,
                    "input_param_9": 2,
                    "input_value_9": 1,
                    "param9": 1,
                    "param_9": 1,
                    "value9": 1,
                    "value_9": 2
                },
                "uVar1": {
                    "float_val_1": 1,
                    "floating_point_value1": 1,
                    "floating_point_value_1": 2,
                    "result1": 11,
                    "result_1": 10,
                    "val1": 1,
                    "value1": 3,
                    "value_1": 2
                },
                "uVar10": {
                    "calc_value_7": 1,
                    "calculate_result2": 1,
                    "calculation_10": 1,
                    "float_val_10": 1,
                    "float_value_2": 1,
                    "floating_point_value8": 1,
                    "floating_point_value_10": 1,
                    "floating_point_value_9": 1,
                    "result8": 2,
                    "result9": 6,
                    "result_10": 1,
                    "result_7": 1,
                    "result_8": 3,
                    "result_9": 2,
                    "temp7": 1,
                    "temp8": 1,
                    "val8": 1,
                    "value10": 1,
                    "value8": 2,
                    "value_7": 1,
                    "value_8": 1
                },
                "uVar11": {
                    "calc_value_8": 1,
                    "calculate_result3": 1,
                    "calculation_11": 1,
                    "float_val_11": 1,
                    "float_value_3": 1,
                    "floating_point_value9": 1,
                    "floating_point_value_10": 1,
                    "floating_point_value_11": 1,
                    "result10": 6,
                    "result9": 2,
                    "result_10": 2,
                    "result_11": 1,
                    "result_8": 1,
                    "result_9": 3,
                    "temp8": 1,
                    "temp9": 1,
                    "val9": 1,
                    "value11": 1,
                    "value9": 2,
                    "value_8": 1,
                    "value_9": 1
                },
                "uVar12": {
                    "calc_value_9": 1,
                    "calculate_result4": 1,
                    "calculation_12": 1,
                    "float_val_12": 1,
                    "float_value_4": 1,
                    "floating_point_value10": 1,
                    "floating_point_value_11": 1,
                    "floating_point_value_12": 1,
                    "result10": 2,
                    "result11": 6,
                    "result_10": 3,
                    "result_11": 2,
                    "result_12": 1,
                    "result_9": 1,
                    "temp10": 1,
                    "temp9": 1,
                    "val10": 1,
                    "value10": 2,
                    "value12": 1,
                    "value_10": 1,
                    "value_9": 1
                },
                "uVar13": {
                    "calc_value_10": 1,
                    "calculate_result5": 1,
                    "calculation_13": 1,
                    "float_val_13": 1,
                    "float_value_5": 1,
                    "floating_point_value11": 1,
                    "floating_point_value_12": 1,
                    "floating_point_value_13": 1,
                    "result11": 2,
                    "result12": 6,
                    "result_10": 1,
                    "result_11": 3,
                    "result_12": 2,
                    "result_13": 1,
                    "temp10": 1,
                    "temp11": 1,
                    "val11": 1,
                    "value11": 2,
                    "value13": 1,
                    "value_10": 1,
                    "value_11": 1
                },
                "uVar14": {
                    "calc_value_11": 1,
                    "calculate_result6": 1,
                    "calculation_14": 1,
                    "float_val_14": 1,
                    "float_value_6": 1,
                    "floating_point_value12": 1,
                    "floating_point_value_13": 1,
                    "floating_point_value_14": 1,
                    "result12": 2,
                    "result13": 6,
                    "result_11": 1,
                    "result_12": 3,
                    "result_13": 2,
                    "result_14": 1,
                    "temp11": 1,
                    "temp12": 1,
                    "val12": 1,
                    "value12": 2,
                    "value14": 1,
                    "value_11": 1,
                    "value_12": 1
                },
                "uVar15": {
                    "calc_value_12": 1,
                    "calculate_result7": 1,
                    "calculation_15": 1,
                    "float_val_15": 1,
                    "float_value_7": 1,
                    "floating_point_value13": 1,
                    "floating_point_value_14": 1,
                    "floating_point_value_15": 1,
                    "result13": 2,
                    "result14": 6,
                    "result_12": 1,
                    "result_13": 3,
                    "result_14": 2,
                    "result_15": 1,
                    "temp12": 1,
                    "temp13": 1,
                    "val13": 1,
                    "value13": 2,
                    "value15": 1,
                    "value_12": 1,
                    "value_13": 1
                },
                "uVar16": {
                    "calc_value_13": 1,
                    "calculate_result8": 1,
                    "calculation_16": 1,
                    "float_val_16": 1,
                    "float_value_8": 1,
                    "floating_point_value14": 1,
                    "floating_point_value_15": 1,
                    "floating_point_value_16": 1,
                    "result14": 2,
                    "result15": 6,
                    "result_13": 1,
                    "result_14": 3,
                    "result_15": 2,
                    "result_16": 1,
                    "temp13": 1,
                    "temp14": 1,
                    "val14": 1,
                    "value14": 2,
                    "value16": 1,
                    "value_13": 1,
                    "value_14": 1
                },
                "uVar17": {
                    "calc_value_14": 1,
                    "calculate_result9": 1,
                    "calculation_17": 1,
                    "float_val_17": 1,
                    "float_value_9": 1,
                    "floating_point_value15": 1,
                    "floating_point_value_16": 1,
                    "floating_point_value_17": 1,
                    "result15": 2,
                    "result16": 6,
                    "result_14": 1,
                    "result_15": 3,
                    "result_16": 2,
                    "result_17": 1,
                    "temp14": 1,
                    "temp15": 1,
                    "val15": 1,
                    "value15": 2,
                    "value17": 1,
                    "value_14": 1,
                    "value_15": 1
                },
                "uVar18": {
                    "calc_value_15": 1,
                    "calculate_result10": 1,
                    "calculation_18": 1,
                    "float_val_18": 1,
                    "float_value_10": 1,
                    "floating_point_value16": 1,
                    "floating_point_value_17": 1,
                    "floating_point_value_18": 1,
                    "result16": 2,
                    "result17": 6,
                    "result_15": 1,
                    "result_16": 3,
                    "result_17": 2,
                    "result_18": 1,
                    "temp15": 1,
                    "temp16": 1,
                    "val16": 1,
                    "value16": 2,
                    "value18": 1,
                    "value_15": 1,
                    "value_16": 1
                },
                "uVar19": {
                    "calc_value_16": 1,
                    "float_val_19": 1,
                    "result_17": 1,
                    "result_18": 1,
                    "temp17": 1,
                    "temp_1": 1,
                    "value_16": 1
                },
                "uVar2": {
                    "float_val_2": 1,
                    "floating_point_value2": 1,
                    "floating_point_value_2": 2,
                    "result2": 11,
                    "result_2": 10,
                    "val2": 1,
                    "value2": 3,
                    "value_2": 2
                },
                "uVar20": {
                    "calc_value_17": 1,
                    "calculate_result12": 1,
                    "calculation_20": 1,
                    "concat_result2": 1,
                    "float_val_20": 1,
                    "float_value_11": 1,
                    "floating_point_value17": 1,
                    "floating_point_value_19": 1,
                    "floating_point_value_20": 1,
                    "result17": 1,
                    "result19": 6,
                    "result_17": 2,
                    "result_18": 1,
                    "result_19": 2,
                    "result_20": 1,
                    "temp17": 1,
                    "temp18": 1,
                    "temp_2": 1,
                    "val17": 1,
                    "value17": 2,
                    "value20": 1,
                    "value_17": 2
                },
                "uVar21": {
                    "calc_value_18": 1,
                    "calculate_result13": 1,
                    "calculation_21": 1,
                    "concat_result3": 1,
                    "float_val_21": 1,
                    "float_value_12": 1,
                    "floating_point_value18": 1,
                    "floating_point_value_20": 1,
                    "floating_point_value_21": 1,
                    "result18": 1,
                    "result20": 6,
                    "result_18": 2,
                    "result_19": 1,
                    "result_20": 2,
                    "result_21": 1,
                    "temp18": 1,
                    "temp19": 1,
                    "temp_3": 1,
                    "val18": 1,
                    "value18": 2,
                    "value21": 1,
                    "value_18": 2
                },
                "uVar22": {
                    "calc_value_19": 1,
                    "calculate_result14": 1,
                    "calculation_22": 1,
                    "concat_result4": 1,
                    "float_val_22": 1,
                    "float_value_13": 1,
                    "floating_point_value19": 1,
                    "floating_point_value_21": 1,
                    "floating_point_value_22": 1,
                    "result19": 1,
                    "result21": 6,
                    "result_19": 2,
                    "result_20": 1,
                    "result_21": 2,
                    "result_22": 1,
                    "temp19": 1,
                    "temp20": 1,
                    "temp_4": 1,
                    "val19": 1,
                    "value19": 2,
                    "value22": 1,
                    "value_19": 2
                },
                "uVar23": {
                    "calc_value_20": 1,
                    "calculate_result15": 1,
                    "calculation_23": 1,
                    "concat_result5": 1,
                    "float_val_23": 1,
                    "float_value_14": 1,
                    "floating_point_value20": 1,
                    "floating_point_value_22": 1,
                    "floating_point_value_23": 1,
                    "result20": 1,
                    "result22": 6,
                    "result_20": 2,
                    "result_21": 1,
                    "result_22": 2,
                    "result_23": 1,
                    "temp20": 1,
                    "temp21": 1,
                    "temp_5": 1,
                    "val20": 1,
                    "value20": 2,
                    "value23": 1,
                    "value_20": 2
                },
                "uVar24": {
                    "calc_value_21": 1,
                    "calculate_result16": 1,
                    "calculation_24": 1,
                    "concat_result6": 1,
                    "float_val_24": 1,
                    "float_value_15": 1,
                    "floating_point_value21": 1,
                    "floating_point_value_23": 1,
                    "floating_point_value_24": 1,
                    "result21": 1,
                    "result23": 6,
                    "result_21": 2,
                    "result_22": 1,
                    "result_23": 2,
                    "result_24": 1,
                    "temp21": 1,
                    "temp22": 1,
                    "temp_6": 1,
                    "val21": 1,
                    "value21": 2,
                    "value24": 1,
                    "value_21": 2
                },
                "uVar25": {
                    "calc_value_22": 1,
                    "calculate_result17": 1,
                    "calculation_25": 1,
                    "concat_result7": 1,
                    "float_val_25": 1,
                    "float_value_16": 1,
                    "floating_point_value22": 1,
                    "floating_point_value_25": 1,
                    "result22": 1,
                    "result24": 6,
                    "result_22": 2,
                    "result_23": 1,
                    "result_24": 2,
                    "result_25": 1,
                    "temp22": 1,
                    "temp23": 1,
                    "temp_7": 1,
                    "val22": 1,
                    "value22": 2,
                    "value25": 1,
                    "value_22": 2
                },
                "uVar26": {
                    "calc_value_23": 1,
                    "calculation_26": 1,
                    "float_val_26": 1,
                    "result_24": 1,
                    "result_25": 1,
                    "temp24": 1,
                    "temp_8": 1,
                    "value_23": 1
                },
                "uVar27": {
                    "calculate_result19": 1,
                    "calculation_1": 1,
                    "calculation_27": 1,
                    "float_val_27": 1,
                    "floating_point_value24": 1,
                    "floating_point_value_25": 1,
                    "floating_point_value_27": 1,
                    "result17": 1,
                    "result23": 1,
                    "result26": 6,
                    "result3": 1,
                    "result_23": 1,
                    "result_24": 1,
                    "result_25": 1,
                    "result_26": 2,
                    "result_27": 1,
                    "result_3": 1,
                    "result_6": 1,
                    "temp25": 1,
                    "temp_9": 1,
                    "val23": 1,
                    "value23": 2,
                    "value27": 1,
                    "value_23": 1
                },
                "uVar28": {
                    "calculate_result20": 1,
                    "calculation_2": 1,
                    "calculation_28": 1,
                    "float_val_28": 1,
                    "floating_point_value25": 1,
                    "floating_point_value_26": 1,
                    "floating_point_value_28": 1,
                    "result18": 1,
                    "result24": 1,
                    "result27": 6,
                    "result4": 1,
                    "result_24": 1,
                    "result_25": 1,
                    "result_26": 1,
                    "result_27": 2,
                    "result_28": 1,
                    "result_4": 1,
                    "result_7": 1,
                    "temp26": 1,
                    "temp_10": 1,
                    "val24": 1,
                    "value24": 2,
                    "value28": 1,
                    "value_24": 1
                },
                "uVar29": {
                    "calculate_result21": 1,
                    "calculation_29": 1,
                    "calculation_3": 1,
                    "float_val_29": 1,
                    "floating_point_value26": 1,
                    "floating_point_value_27": 1,
                    "floating_point_value_29": 1,
                    "result19": 1,
                    "result25": 1,
                    "result28": 6,
                    "result5": 1,
                    "result_25": 1,
                    "result_26": 1,
                    "result_27": 1,
                    "result_28": 2,
                    "result_29": 1,
                    "result_5": 1,
                    "result_8": 1,
                    "temp27": 1,
                    "temp_11": 1,
                    "val25": 1,
                    "value25": 2,
                    "value29": 1,
                    "value_25": 1
                },
                "uVar3": {
                    "temp1": 1
                },
                "uVar30": {
                    "calc_value_24": 1,
                    "calculation_30": 1,
                    "float_val_30": 1,
                    "result_28": 1,
                    "temp28": 1,
                    "temp_12": 1
                },
                "uVar31": {
                    "concat_result1": 1,
                    "concatenated_result": 1,
                    "concatenated_value_1": 1,
                    "concatenation_result_1": 1,
                    "final_result_1": 1,
                    "result1": 1,
                    "result20": 1,
                    "result26": 1,
                    "result30": 4,
                    "result31": 1,
                    "result6": 1,
                    "result7": 1,
                    "result_1": 3,
                    "result_26": 1,
                    "result_28": 1,
                    "result_29": 1,
                    "result_30": 2,
                    "result_31": 1,
                    "result_8": 1,
                    "reverse_result": 1,
                    "temp1": 2,
                    "temp_1": 1,
                    "temp_13": 1,
                    "temp_result_1": 1
                },
                "uVar32": {
                    "concat_result2": 1,
                    "concatenated_value_2": 1,
                    "concatenation_result_2": 1,
                    "final_result_2": 1,
                    "result2": 1,
                    "result21": 1,
                    "result27": 1,
                    "result31": 4,
                    "result32": 1,
                    "result7": 1,
                    "result8": 1,
                    "result_2": 3,
                    "result_27": 1,
                    "result_29": 1,
                    "result_30": 1,
                    "result_31": 2,
                    "result_32": 1,
                    "result_9": 1,
                    "reversed_result": 1,
                    "temp2": 2,
                    "temp_14": 1,
                    "temp_2": 1,
                    "temp_result_2": 1,
                    "validate_result": 1
                },
                "uVar4": {
                    "calc_value_1": 1,
                    "float_val_4": 1,
                    "floating_point_value3": 1,
                    "floating_point_value_3": 1,
                    "floating_point_value_4": 1,
                    "result3": 9,
                    "result_3": 7,
                    "result_4": 2,
                    "temp1": 1,
                    "temp2": 1,
                    "val3": 1,
                    "value3": 2,
                    "value4": 1,
                    "value_3": 2
                },
                "uVar5": {
                    "calc_value_2": 1,
                    "float_val_5": 1,
                    "floating_point_value4": 1,
                    "floating_point_value_4": 1,
                    "floating_point_value_5": 1,
                    "result4": 9,
                    "result_4": 7,
                    "result_5": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "val4": 1,
                    "value4": 2,
                    "value5": 1,
                    "value_4": 2
                },
                "uVar6": {
                    "calc_value_3": 1,
                    "float_val_6": 1,
                    "floating_point_value5": 1,
                    "floating_point_value_5": 1,
                    "floating_point_value_6": 1,
                    "result5": 9,
                    "result_5": 6,
                    "result_6": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "val5": 1,
                    "value5": 2,
                    "value6": 1,
                    "value_5": 2
                },
                "uVar7": {
                    "calc_value_4": 1,
                    "float_val_7": 1,
                    "floating_point_value6": 1,
                    "floating_point_value_6": 1,
                    "floating_point_value_7": 1,
                    "result6": 9,
                    "result_6": 6,
                    "result_7": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "val6": 1,
                    "value6": 2,
                    "value7": 1,
                    "value_6": 1
                },
                "uVar8": {
                    "calc_value_5": 1,
                    "temp6": 1
                },
                "uVar9": {
                    "calc_value_6": 1,
                    "calculate_result": 1,
                    "calculation_9": 1,
                    "float_val_9": 1,
                    "float_value_1": 1,
                    "floating_point_value7": 1,
                    "floating_point_value_8": 1,
                    "floating_point_value_9": 1,
                    "result7": 2,
                    "result8": 6,
                    "result_6": 1,
                    "result_7": 3,
                    "result_8": 2,
                    "result_9": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "val7": 1,
                    "value7": 2,
                    "value9": 1,
                    "value_6": 1,
                    "value_7": 1
                }
            },
            "called": [
                "FUN_08005bc8",
                "FUN_08000adc",
                "FUN_08005854",
                "FUN_080004d0",
                "FUN_08000724",
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08000428",
                "FUN_08000a30",
                "thunk_FUN_08006070",
                "FUN_08001014",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nvoid process_data_and_calculate_results_08003330(undefined4 input_1,undefined4 input_2,undefined4 input3,undefined4 input_4,\n                 undefined4 input_5,undefined4 input_6,undefined4 input_7,undefined4 input_8,\n                 undefined4 input_9,undefined4 *output_array)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int check_result;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  int result7;\n  undefined4 result8;\n  undefined4 result9;\n  undefined4 result10;\n  undefined4 result11;\n  undefined4 result12;\n  undefined4 result13;\n  undefined4 result14;\n  undefined4 result15;\n  undefined4 result16;\n  undefined4 result17;\n  int result18;\n  undefined4 result19;\n  undefined4 result20;\n  undefined4 result21;\n  undefined4 result22;\n  undefined4 result23;\n  undefined4 result24;\n  int result25;\n  undefined4 result26;\n  undefined4 result27;\n  undefined4 result28;\n  int result29;\n  undefined8 result30;\n  undefined8 result31;\n  \n  result28 = DAT_20000048;\n  result27 = DAT_20000044;\n  result29 = DAT_20000040;\n  result26 = DAT_2000003c;\n  result1 = calculate_floating_point_value_08000cec(input_1,input_1);\n  result2 = calculate_floating_point_value_08000cec(input_2);\n  result1 = calculate_floating_point_value_08000adc(result1,result2);\n  result2 = calculate_floating_point_value_08000cec(input3);\n  calculate_floating_point_value_08000adc(result1,result2);\n  reverse_bits_and_concatenate_08000428();\n  process_data_08005bc8();\n  result1 = calculate_floating_point_value_08000a30();\n  check_result = check_concatenation_result_08001014(result1,0);\n  if (check_result == 0) {\n    result2 = calculate_floating_point_value_08000cec(input_7);\n    result3 = calculate_floating_point_value_08000cec(input_8);\n    result2 = calculate_floating_point_value_08000adc(result2,result3);\n    result3 = calculate_floating_point_value_08000cec(input_9);\n    calculate_floating_point_value_08000adc(result2,result3);\n    reverse_bits_and_concatenate_08000428();\n    process_data_08005bc8();\n    result2 = calculate_floating_point_value_08000a30();\n    check_result = check_concatenation_result_08001014(result2,0);\n    if (check_result == 0) {\n      result30 = reverse_bits_and_concatenate_08000428(input_4);\n      calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0xa2529d39,0x3f91df46);\n      result3 = calculate_floating_point_value_08000a30();\n      result30 = reverse_bits_and_concatenate_08000428(input_5);\n      calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0xa2529d39,0x3f91df46);\n      result4 = calculate_floating_point_value_08000a30();\n      result30 = reverse_bits_and_concatenate_08000428(input_6);\n      calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0xa2529d39,0x3f91df46);\n      result5 = calculate_floating_point_value_08000a30();\n      check_result = calculate_floating_point_value_08000adc(result26);\n      result6 = calculate_floating_point_value_08000adc(result29);\n      result7 = calculate_floating_point_value_08000adc(result27,result27);\n      result8 = calculate_floating_point_value_08000adc(result28,result28);\n      result9 = calculate_floating_point_value_08000cec(result26);\n      result10 = calculate_floating_point_value_08000cec(result26,result29);\n      result11 = calculate_floating_point_value_08000cec(result26,result27);\n      result12 = calculate_floating_point_value_08000cec(result29);\n      result13 = calculate_floating_point_value_08000cec(result29,result28);\n      result14 = calculate_floating_point_value_08000cec(result27,result27);\n      result15 = calculate_floating_point_value_08000cec(result28,result28);\n      result1 = calculate_float_value_08000e54(0x3f800000,result1);\n      result2 = calculate_float_value_08000e54(0x3f800000,result2);\n      result16 = calculate_floating_point_value_08000cec(input_7,result2);\n      result17 = calculate_floating_point_value_08000cec(input_8,result2);\n      result2 = calculate_floating_point_value_08000cec(input_9,result2);\n      result18 = calculate_floating_point_value_08000cec(check_result,result16);\n      result19 = calculate_floating_point_value_08000cec(check_result,result17);\n      result20 = calculate_floating_point_value_08000cec(check_result,result2);\n      result21 = calculate_floating_point_value_08000cec(result6,result16);\n      result22 = calculate_floating_point_value_08000cec(result9,result16);\n      result23 = calculate_floating_point_value_08000cec(result28,result19);\n      result22 = calculate_float_value_08000ad8(result22,result23);\n      result23 = calculate_floating_point_value_08000cec(result27,result20);\n      result22 = calculate_floating_point_value_08000adc(result22,result23);\n      result23 = calculate_floating_point_value_08000cec(result12,result16);\n      result22 = calculate_floating_point_value_08000adc(result22,result23);\n      result23 = calculate_floating_point_value_08000cec(result6,result17);\n      result23 = calculate_floating_point_value_08000cec(result23,result27);\n      result22 = calculate_floating_point_value_08000adc(result22,result23);\n      result23 = calculate_floating_point_value_08000cec(result6,result2);\n      result23 = calculate_floating_point_value_08000cec(result23,result28);\n      result22 = calculate_floating_point_value_08000adc(result22,result23);\n      result23 = calculate_floating_point_value_08000cec(result14,result16);\n      result22 = calculate_float_value_08000ad8(result22,result23);\n      result23 = calculate_floating_point_value_08000cec(result15,result16);\n      result22 = calculate_float_value_08000ad8(result22,result23);\n      result23 = calculate_floating_point_value_08000cec(result28,result18);\n      result24 = calculate_floating_point_value_08000cec(result9,result17);\n      result23 = calculate_floating_point_value_08000adc(result23,result24);\n      result20 = calculate_floating_point_value_08000cec(result29,result20);\n      result20 = calculate_float_value_08000ad8(result23,result20);\n      result23 = calculate_floating_point_value_08000cec(result27,result21);\n      result20 = calculate_floating_point_value_08000adc(result20,result23);\n      result23 = calculate_floating_point_value_08000cec(result12,result17);\n      result20 = calculate_float_value_08000ad8(result20,result23);\n      result23 = calculate_floating_point_value_08000cec(result14,result17);\n      result20 = calculate_floating_point_value_08000adc(result20,result23);\n      result23 = calculate_floating_point_value_08000cec(result7,result2);\n      result23 = calculate_floating_point_value_08000cec(result23,result28);\n      result20 = calculate_floating_point_value_08000adc(result20,result23);\n      result23 = calculate_floating_point_value_08000cec(result15,result17);\n      result20 = calculate_float_value_08000ad8(result20,result23);\n      result22 = calculate_floating_point_value_08000cec(result22,result22);\n      result20 = calculate_floating_point_value_08000cec(result20,result20);\n      calculate_floating_point_value_08000adc(result22,result20);\n      reverse_bits_and_concatenate_08000428();\n      process_data_08005bc8();\n      result25 = calculate_floating_point_value_08000a30();\n      result20 = calculate_floating_point_value_08000cec(result18 + -0x80000000,result27);\n      result19 = calculate_floating_point_value_08000cec(result29,result19);\n      result19 = calculate_floating_point_value_08000adc(result20,result19);\n      result9 = calculate_floating_point_value_08000cec(result9,result2);\n      result9 = calculate_floating_point_value_08000adc(result19,result9);\n      result19 = calculate_floating_point_value_08000cec(result28,result21);\n      result9 = calculate_floating_point_value_08000adc(result9,result19);\n      result19 = calculate_floating_point_value_08000cec(result12,result2);\n      result9 = calculate_float_value_08000ad8(result9,result19);\n      result19 = calculate_floating_point_value_08000cec(result7,result17);\n      result19 = calculate_floating_point_value_08000cec(result19,result28);\n      result9 = calculate_floating_point_value_08000adc(result9,result19);\n      result19 = calculate_floating_point_value_08000cec(result14,result2);\n      result9 = calculate_float_value_08000ad8(result9,result19);\n      result19 = calculate_floating_point_value_08000cec(result15,result2);\n      result9 = calculate_floating_point_value_08000adc(result9,result19);\n      result19 = calculate_floating_point_value_08000adc(result9,result9);\n      result20 = calculate_floating_point_value_08000adc(result13);\n      result21 = calculate_floating_point_value_08000cec(result27,check_result);\n      result20 = calculate_float_value_08000ad8(result20,result21);\n      result21 = calculate_floating_point_value_08000cec(input_1,result1);\n      result20 = calculate_float_value_08000ad8(result20,result21);\n      result21 = calculate_floating_point_value_08000cec(result28,result7);\n      result22 = calculate_floating_point_value_08000adc(result10);\n      result21 = calculate_floating_point_value_08000adc(result21,result22);\n      result22 = calculate_floating_point_value_08000cec(input_2,result1);\n      result21 = calculate_float_value_08000ad8(result21,result22);\n      result22 = calculate_floating_point_value_08000cec(result27,result9);\n      result23 = calculate_float_value_08000ad8(0x3f000000,result14);\n      result15 = calculate_float_value_08000ad8(result23,result15);\n      result15 = calculate_floating_point_value_08000cec(result15,result25);\n      result23 = calculate_float_value_08000ad8(result13,result11);\n      result23 = calculate_floating_point_value_08000cec(result23,result9);\n      result15 = calculate_floating_point_value_08000adc(result15,result23);\n      result15 = calculate_float_value_08000ad8(result15,result16);\n      result16 = calculate_floating_point_value_08000cec(result29,result9);\n      result23 = calculate_floating_point_value_08000cec(result29,result27);\n      result24 = calculate_floating_point_value_08000cec(result26,result28);\n      result23 = calculate_float_value_08000ad8(result23,result24);\n      result23 = calculate_floating_point_value_08000cec(result23,result25);\n      result24 = calculate_floating_point_value_08000cec(result27,result28);\n      result10 = calculate_floating_point_value_08000adc(result24,result10);\n      result10 = calculate_floating_point_value_08000cec(result10,result9);\n      result10 = calculate_floating_point_value_08000adc(result23,result10);\n      result10 = calculate_float_value_08000ad8(result10,result17);\n      result17 = calculate_floating_point_value_08000cec(result27,result25);\n      result23 = calculate_float_value_08000ad8(0x3f000000,result12);\n      result23 = calculate_float_value_08000ad8(result23,result14);\n      result23 = calculate_floating_point_value_08000cec(result23,result9);\n      result11 = calculate_floating_point_value_08000adc(result11,result13);\n      result11 = calculate_floating_point_value_08000cec(result11,result25);\n      result11 = calculate_floating_point_value_08000adc(result23,result11);\n      result2 = calculate_float_value_08000ad8(result11,result2);\n      result11 = calculate_floating_point_value_08000cec(result7 + -0x80000000,result20);\n      result13 = calculate_floating_point_value_08000cec(result6,result21);\n      result11 = calculate_floating_point_value_08000adc(result11,result13);\n      result13 = calculate_floating_point_value_08000cec(result22,result15);\n      result11 = calculate_float_value_08000ad8(result11,result13);\n      result13 = calculate_floating_point_value_08000cec(result28,result25 + -0x80000000);\n      result13 = calculate_floating_point_value_08000adc(result13,result16);\n      result13 = calculate_floating_point_value_08000cec(result13,result10);\n      result11 = calculate_floating_point_value_08000adc(result11,result13);\n      result13 = calculate_floating_point_value_08000cec(result17,result2);\n      result11 = calculate_floating_point_value_08000adc(result11,result13);\n      result12 = calculate_floating_point_value_08000adc(result12);\n      result12 = calculate_float_value_08000ad8(0x3f800000,result12);\n      result13 = calculate_floating_point_value_08000adc(result14);\n      result12 = calculate_float_value_08000ad8(result12,result13);\n      result1 = calculate_floating_point_value_08000cec(input3,result1);\n      result1 = calculate_float_value_08000ad8(result12,result1);\n      result12 = calculate_floating_point_value_08000cec(result28,result9);\n      result9 = calculate_floating_point_value_08000cec(result26,result9);\n      result13 = calculate_floating_point_value_08000cec(result8,result20);\n      result14 = calculate_floating_point_value_08000cec(check_result,result21);\n      result13 = calculate_floating_point_value_08000adc(result13,result14);\n      result14 = calculate_floating_point_value_08000cec(result29,0x40800000);\n      result14 = calculate_floating_point_value_08000cec(result14,result1);\n      result13 = calculate_float_value_08000ad8(result13,result14);\n      result14 = calculate_floating_point_value_08000cec(result15,result12);\n      result13 = calculate_floating_point_value_08000adc(result13,result14);\n      result14 = calculate_floating_point_value_08000adc(result17,result9);\n      result14 = calculate_floating_point_value_08000cec(result14,result10);\n      result13 = calculate_floating_point_value_08000adc(result13,result14);\n      result14 = calculate_floating_point_value_08000cec(result28,result25);\n      result17 = calculate_floating_point_value_08000cec(result29,result19);\n      result14 = calculate_float_value_08000ad8(result14,result17);\n      result14 = calculate_floating_point_value_08000cec(result14,result2);\n      result13 = calculate_floating_point_value_08000adc(result13,result14);\n      result18 = calculate_floating_point_value_08000adc(result25,result25);\n      result14 = calculate_floating_point_value_08000cec(result29,result25);\n      result17 = calculate_floating_point_value_08000cec(check_result + -0x80000000,result20);\n      result8 = calculate_floating_point_value_08000cec(result8,result21);\n      result8 = calculate_floating_point_value_08000adc(result17,result8);\n      result17 = calculate_floating_point_value_08000cec(result27,0x40800000);\n      result1 = calculate_floating_point_value_08000cec(result17,result1);\n      result1 = calculate_float_value_08000ad8(result8,result1);\n      result8 = calculate_floating_point_value_08000cec(result27,result18 + -0x80000000);\n      result8 = calculate_float_value_08000ad8(result8,result9);\n      result8 = calculate_floating_point_value_08000cec(result8,result15);\n      result1 = calculate_floating_point_value_08000adc(result1,result8);\n      result8 = calculate_floating_point_value_08000adc(result12,result14);\n      result8 = calculate_floating_point_value_08000cec(result8,result10);\n      result1 = calculate_floating_point_value_08000adc(result1,result8);\n      result8 = calculate_floating_point_value_08000cec(result26,result25);\n      result9 = calculate_floating_point_value_08000cec(result27,result19);\n      result8 = calculate_float_value_08000ad8(result8,result9);\n      result8 = calculate_floating_point_value_08000cec(result8,result2);\n      result8 = calculate_floating_point_value_08000adc(result1,result8);\n      result1 = calculate_floating_point_value_08000cec(result6,result20);\n      result6 = calculate_floating_point_value_08000cec(result7,result21);\n      result1 = calculate_floating_point_value_08000adc(result1,result6);\n      result6 = calculate_floating_point_value_08000cec(result28,result18 + -0x80000000);\n      result6 = calculate_floating_point_value_08000adc(result6,result16);\n      result6 = calculate_floating_point_value_08000cec(result6,result15);\n      result1 = calculate_floating_point_value_08000adc(result1,result6);\n      result6 = calculate_floating_point_value_08000cec(result26,result25 + -0x80000000);\n      result6 = calculate_floating_point_value_08000adc(result6,result22);\n      result6 = calculate_floating_point_value_08000cec(result6,result10);\n      result1 = calculate_floating_point_value_08000adc(result1,result6);\n      result2 = calculate_floating_point_value_08000cec(result2,result14);\n      result6 = calculate_floating_point_value_08000adc(result1,result2);\n      result1 = calculate_floating_point_value_08000cec(result11);\n      result2 = calculate_floating_point_value_08000cec(result13);\n      result1 = calculate_floating_point_value_08000adc(result1,result2);\n      result2 = calculate_floating_point_value_08000cec(result8,result8);\n      result1 = calculate_floating_point_value_08000adc(result1,result2);\n      result2 = calculate_floating_point_value_08000cec(result6,result6);\n      calculate_floating_point_value_08000adc(result1,result2);\n      reverse_bits_and_concatenate_08000428();\n      process_data_08005bc8();\n      result1 = calculate_floating_point_value_08000a30();\n      result9 = calculate_float_value_08000e54(0x3f800000,result1);\n      result1 = DAT_2000035c;\n      result2 = calculate_floating_point_value_08000cec(result29 + -0x80000000,result3);\n      result10 = calculate_floating_point_value_08000cec(result27,result4);\n      result2 = calculate_float_value_08000ad8(result2,result10);\n      result10 = calculate_floating_point_value_08000cec(result28,result5);\n      result2 = calculate_float_value_08000ad8(result2,result10);\n      result10 = calculate_floating_point_value_08000cec(result2,0x3f000000);\n      result11 = calculate_floating_point_value_08000cec(result11,result9);\n      result2 = DAT_20000360;\n      result11 = calculate_floating_point_value_08000cec(result11,result1);\n      result10 = calculate_float_value_08000ad8(result10,result11);\n      result2 = calculate_floating_point_value_08000cec(result10,result2);\n      result10 = calculate_floating_point_value_08000adc(result2,result26);\n      result11 = calculate_floating_point_value_08000cec(result26,result3);\n      result12 = calculate_floating_point_value_08000cec(result27,result5);\n      result2 = DAT_20000360;\n      result11 = calculate_floating_point_value_08000adc(result11,result12);\n      result12 = calculate_floating_point_value_08000cec(result28,result4);\n      result11 = calculate_float_value_08000ad8(result11,result12);\n      result11 = calculate_floating_point_value_08000cec(result11,0x3f000000);\n      result12 = calculate_floating_point_value_08000cec(result13,result9);\n      result12 = calculate_floating_point_value_08000cec(result12,result1);\n      result11 = calculate_float_value_08000ad8(result11,result12);\n      result2 = calculate_floating_point_value_08000cec(result11,result2);\n      result11 = calculate_floating_point_value_08000adc(result2,result29);\n      result2 = DAT_20000360;\n      result12 = calculate_floating_point_value_08000cec(result26,result4);\n      result13 = calculate_floating_point_value_08000cec(result29,result5);\n      result12 = calculate_float_value_08000ad8(result12,result13);\n      result13 = calculate_floating_point_value_08000cec(result28,result3);\n      result12 = calculate_floating_point_value_08000adc(result12,result13);\n      result12 = calculate_floating_point_value_08000cec(result12,0x3f000000);\n      result8 = calculate_floating_point_value_08000cec(result8,result9);\n      result8 = calculate_floating_point_value_08000cec(result8,result1);\n      result8 = calculate_float_value_08000ad8(result12,result8);\n      result2 = calculate_floating_point_value_08000cec(result8,result2);\n      result2 = calculate_floating_point_value_08000adc(result2,result27);\n      result26 = calculate_floating_point_value_08000cec(result26,result5);\n      result4 = calculate_floating_point_value_08000cec(result29,result4);\n      result26 = calculate_floating_point_value_08000adc(result26,result4);\n      result27 = calculate_floating_point_value_08000cec(result27,result3);\n      result26 = calculate_float_value_08000ad8(result26,result27);\n      result27 = calculate_floating_point_value_08000cec(result26,0x3f000000);\n      result26 = calculate_floating_point_value_08000cec(result6,result9);\n      result1 = calculate_floating_point_value_08000cec(result26,result1);\n      result26 = DAT_20000360;\n      result27 = calculate_float_value_08000ad8(result27,result1);\n      result26 = calculate_floating_point_value_08000cec(result27,result26);\n      result26 = calculate_floating_point_value_08000adc(result26,result28);\n      result27 = calculate_floating_point_value_08000cec(result10,result10);\n      result28 = calculate_floating_point_value_08000cec(result11,result11);\n      result27 = calculate_floating_point_value_08000adc(result27,result28);\n      result28 = calculate_floating_point_value_08000cec(result2,result2);\n      result27 = calculate_floating_point_value_08000adc(result27,result28);\n      result28 = calculate_floating_point_value_08000cec(result26,result26);\n      calculate_floating_point_value_08000adc(result27,result28);\n      reverse_bits_and_concatenate_08000428();\n      process_data_08005bc8();\n      result27 = calculate_floating_point_value_08000a30();\n      result27 = calculate_float_value_08000e54(0x3f800000,result27);\n      result28 = calculate_floating_point_value_08000cec(result10,result27);\n      DAT_2000003c = result28;\n      result29 = calculate_floating_point_value_08000cec(result11,result27);\n      DAT_20000040 = result29;\n      result1 = calculate_floating_point_value_08000cec(result2,result27);\n      DAT_20000044 = result1;\n      DAT_20000048 = calculate_floating_point_value_08000cec(result26,result27);\n      result26 = calculate_floating_point_value_08000cec(result29,DAT_20000048);\n      result27 = calculate_floating_point_value_08000cec(result28,result1);\n      result26 = calculate_float_value_08000ad8(result26,result27);\n      calculate_floating_point_value_08000adc(result26,result26);\n      reverse_bits_and_concatenate_08000428();\n      result30 = validate_and_process_data_08005854();\n      result30 = calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0,0x40668000);\n      calculate_floating_point_value_08000724((int)result30,(int)((ulonglong)result30 >> 0x20),0x54442d18,0x400921fb);\n      result26 = calculate_floating_point_value_08000a30();\n      *output_array = result26;\n      result29 = DAT_20000040;\n      result26 = DAT_2000003c;\n      result27 = calculate_floating_point_value_08000cec(DAT_2000003c,DAT_2000003c);\n      result28 = calculate_floating_point_value_08000cec(result29,result29);\n      result28 = calculate_float_value_08000ad8(result27,result28);\n      result27 = DAT_20000044;\n      result1 = calculate_floating_point_value_08000cec(DAT_20000044,DAT_20000044);\n      result1 = calculate_float_value_08000ad8(result28,result1);\n      result28 = DAT_20000048;\n      result2 = calculate_floating_point_value_08000cec(DAT_20000048,DAT_20000048);\n      calculate_floating_point_value_08000adc(result1,result2);\n      result30 = reverse_bits_and_concatenate_08000428();\n      result26 = calculate_floating_point_value_08000cec(result26,result29);\n      result27 = calculate_floating_point_value_08000cec(result27,result28);\n      result26 = calculate_floating_point_value_08000adc(result26,result27);\n      calculate_floating_point_value_08000adc(result26,result26);\n      result31 = reverse_bits_and_concatenate_08000428();\n      result30 = calculate_final_result_thunk_08006070((int)result31,(int)((ulonglong)result31 >> 0x20),(int)result30,\n                                  (int)((ulonglong)result30 >> 0x20));\n      result30 = calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0,0x40668000);\n      calculate_floating_point_value_08000724((int)result30,(int)((ulonglong)result30 >> 0x20),0x54442d18,0x400921fb);\n      result26 = calculate_floating_point_value_08000a30();\n      output_array[1] = result26;\n      result29 = DAT_20000040;\n      result26 = DAT_2000003c;\n      result27 = calculate_floating_point_value_08000cec(DAT_2000003c,DAT_2000003c);\n      result28 = calculate_floating_point_value_08000cec(result29,result29);\n      result28 = calculate_floating_point_value_08000adc(result27,result28);\n      result27 = DAT_20000044;\n      result1 = calculate_floating_point_value_08000cec(DAT_20000044,DAT_20000044);\n      result1 = calculate_float_value_08000ad8(result28,result1);\n      result28 = DAT_20000048;\n      result2 = calculate_floating_point_value_08000cec(DAT_20000048,DAT_20000048);\n      calculate_float_value_08000ad8(result1,result2);\n      result30 = reverse_bits_and_concatenate_08000428();\n      result27 = calculate_floating_point_value_08000cec(result29,result27);\n      result26 = calculate_floating_point_value_08000cec(result26,result28);\n      result26 = calculate_floating_point_value_08000adc(result27,result26);\n      calculate_floating_point_value_08000adc(result26,result26);\n      result31 = reverse_bits_and_concatenate_08000428();\n      result30 = calculate_final_result_thunk_08006070((int)result31,(int)((ulonglong)result31 >> 0x20),(int)result30,\n                                  (int)((ulonglong)result30 >> 0x20));\n      result30 = calculate_result_080004d0((int)result30,(int)((ulonglong)result30 >> 0x20),0,0x40668000);\n      calculate_floating_point_value_08000724((int)result30,(int)((ulonglong)result30 >> 0x20),0x54442d18,0x400921fb);\n      result26 = calculate_floating_point_value_08000a30();\n      output_array[2] = result26;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_and_calculate_results_08003330",
            "entrypoint": "0x08003330",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003330": "process_data_and_calculate_results_08003330",
                "iVar1": "temp29",
                "iVar19": "result18",
                "iVar2": "temp30",
                "iVar26": "result25",
                "iVar3": "check_result",
                "iVar30": "result29",
                "iVar8": "result7",
                "param_1": "input_1",
                "param_10": "output_array",
                "param_2": "input_2",
                "param_3": "input3",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "param_7": "input_7",
                "param_8": "input_8",
                "param_9": "input_9",
                "uVar1": "result1",
                "uVar10": "result9",
                "uVar11": "result10",
                "uVar12": "result11",
                "uVar13": "result12",
                "uVar14": "result13",
                "uVar15": "result14",
                "uVar16": "result15",
                "uVar17": "result16",
                "uVar18": "result17",
                "uVar2": "result2",
                "uVar20": "result19",
                "uVar21": "result20",
                "uVar22": "result21",
                "uVar23": "result22",
                "uVar24": "result23",
                "uVar25": "result24",
                "uVar27": "result26",
                "uVar28": "result27",
                "uVar29": "result28",
                "uVar3": "temp1",
                "uVar31": "result30",
                "uVar32": "result31",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5",
                "uVar7": "result6",
                "uVar9": "result8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003eb0": {
            "additional_data": {
                "CONCAT44": {
                    "combine_long_long_values": 1,
                    "combine_values": 5,
                    "combine_with_one": 2,
                    "concatenate": 4,
                    "concatenate_to_high_bits": 1,
                    "concatenate_values": 5,
                    "concatenate_with_binary_one": 1
                },
                "DAT_20000280": {
                    "flag": 1,
                    "is_flag_set": 1
                },
                "FUN_08003eb0": {
                    "convert_param_to_long_long": 1,
                    "convert_to64_bit": 2,
                    "convert_to64_bit_value": 1,
                    "convert_to_long_long": 2,
                    "left_shift_param": 1,
                    "left_shift_value": 1,
                    "perform_conversion": 1,
                    "perform_shift_operation": 1,
                    "shift_and_concat": 1,
                    "shift_and_concatenate": 1,
                    "shift_left": 3,
                    "shift_left64": 1,
                    "shift_left_by32": 4,
                    "shift_left_by32_bits": 1,
                    "shift_left_if_initialized": 1,
                    "shift_left_longlong": 1,
                    "shift_left_or_interrupt": 1,
                    "shift_left_param_to_64_bits": 1,
                    "shift_param_left": 1,
                    "shift_param_to_high_bits": 2,
                    "shift_param_to_left": 1,
                    "shift_parameter_to_high_bits": 2
                },
                "param_1": {
                    "input": 7,
                    "input_param": 1,
                    "input_value": 20,
                    "value": 3
                },
                "software_interrupt": {
                    "call_interrupt": 1,
                    "call_software_interrupt": 1,
                    "perform_software_interrupt": 1,
                    "perform_system_call": 1,
                    "trigger_interrupt": 3,
                    "trigger_software_interrupt": 6
                },
                "ulonglong": {
                    "unsigned_long_long": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nlonglong shift_left_by32_bits_08003eb0(uint input_value)\n\n{\n  if (DAT_20000280 == 0) {\n    trigger_software_interrupt(0x3f);\n    return concatenate_values(input_value,1);\n  }\n  return (unsigned_long_long)input_value << 0x20;\n}\n\n",
            "current_name": "shift_left_by32_bits_08003eb0",
            "entrypoint": "0x08003eb0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_values",
                "FUN_08003eb0": "shift_left_by32_bits_08003eb0",
                "param_1": "input_value",
                "software_interrupt": "trigger_software_interrupt",
                "ulonglong": "unsigned_long_long"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ec8": {
            "additional_data": {
                "0x802": {
                    "index_address": 1,
                    "index_offset": 1
                },
                "0x804": {
                    "counter_address": 1,
                    "value_offset": 1
                },
                "FUN_08003ec8": {
                    "increment_and_store": 14,
                    "increment_and_store_byte": 1,
                    "increment_and_store_value": 13,
                    "increment_short_and_store": 1,
                    "update_and_store_value": 2
                },
                "param_1": {
                    "address": 2,
                    "array": 1,
                    "array_base": 2,
                    "base_address": 19,
                    "data": 1,
                    "data_address": 1,
                    "data_pointer": 1,
                    "memory_address": 3,
                    "memory_start": 1
                },
                "param_2": {
                    "data": 2,
                    "new_byte_value": 1,
                    "new_value": 2,
                    "value": 20,
                    "value_to_store": 6
                },
                "short": {
                    "signed_short": 1
                },
                "short_ptr_1": {
                    "counter_address": 1
                },
                "undefined4": {
                    "unsigned_int": 1
                },
                "ushort": {
                    "unsigned_short": 1
                },
                "ushort_ptr_1": {
                    "index_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c30"
            ],
            "code": "\nunsigned_int increment_and_store_value_08003ec8(int base_address,undefined value)\n\n{\n  *(signed_short *)(base_address + 0x804) = *(signed_short *)(base_address + 0x804) + 1;\n  *(undefined *)(base_address + (uint)*(unsigned_short *)(base_address + 0x802)) = value;\n  *(unsigned_short *)(base_address + 0x802) = *(signed_short *)(base_address + 0x802) + 1U & 0x7ff;\n  return 1;\n}\n\n",
            "current_name": "increment_and_store_value_08003ec8",
            "entrypoint": "0x08003ec8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ec8": "increment_and_store_value_08003ec8",
                "param_1": "base_address",
                "param_2": "value",
                "short": "signed_short",
                "undefined4": "unsigned_int",
                "ushort": "unsigned_short"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f3c": {
            "additional_data": {
                "FUN_08003f3c": {
                    "initialize_param_values": 1,
                    "set_param_flags": 1,
                    "set_param_values": 16,
                    "set_parameters": 1,
                    "set_params": 2,
                    "update_param_values": 9,
                    "update_parameters": 1
                },
                "param_1": {
                    "first_param": 1,
                    "flag_1": 1,
                    "is_param1_zero": 15,
                    "param1": 2,
                    "param_1_value": 1,
                    "param_a": 1,
                    "value1": 4,
                    "value_1": 6
                },
                "param_2": {
                    "flag_2": 1,
                    "is_param2_zero": 15,
                    "param2": 2,
                    "param_2_value": 1,
                    "param_b": 1,
                    "second_param": 1,
                    "value2": 4,
                    "value_2": 6
                },
                "param_3": {
                    "flag_3": 1,
                    "is_param3_zero": 15,
                    "param3": 2,
                    "param_3_value": 1,
                    "param_c": 1,
                    "third_param": 1,
                    "value3": 4,
                    "value_3": 6
                }
            },
            "called": [
                "FUN_08001424"
            ],
            "calling": [
                "FUN_08004a84",
                "FUN_08004028"
            ],
            "code": "\nvoid set_param_values_08003f3c(int is_param1_zero,int is_param2_zero,int is_param3_zero)\n\n{\n  set_param_value_08001424(0x40011000,0x8000,is_param1_zero == 0);\n  set_param_value_08001424(0x40011000,0x4000,is_param2_zero == 0);\n  set_param_value_08001424(0x40011000,0x2000,is_param3_zero == 0);\n  return;\n}\n\n",
            "current_name": "set_param_values_08003f3c",
            "entrypoint": "0x08003f3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f3c": "set_param_values_08003f3c",
                "param_1": "is_param1_zero",
                "param_2": "is_param2_zero",
                "param_3": "is_param3_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fc4": {
            "additional_data": {
                "DAT_200014c8": {
                    "base_address": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_buffer": 1,
                    "global_data": 1,
                    "memory_address": 3,
                    "memory_location": 2,
                    "memory_region": 1,
                    "param_buffer": 1,
                    "target_address": 1
                },
                "FUN_08003fc4": {
                    "set_function_parameter": 1,
                    "set_global_parameter": 1,
                    "set_param": 4,
                    "set_param_at_offset": 1,
                    "set_param_in_memory": 2,
                    "set_param_value": 12,
                    "set_parameter": 2,
                    "set_parameter_value": 2,
                    "store_parameter": 1,
                    "store_parameter_in_memory": 2,
                    "store_parameter_to_memory": 2,
                    "store_value_in_memory": 1
                },
                "VAR_200014c8": {
                    "data": 1
                },
                "new_variable_name_1": {
                    "offset": 1
                },
                "param_1": {
                    "input_parameter": 1,
                    "new_param": 1,
                    "new_param_value": 1,
                    "new_value": 6,
                    "param": 1,
                    "param_value": 1,
                    "parameter": 2,
                    "parameter_value": 1,
                    "value": 17
                }
            },
            "called": [],
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "code": "\nvoid set_param_value_08003fc4(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x40) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08003fc4",
            "entrypoint": "0x08003fc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fc4": "set_param_value_08003fc4",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fd0": {
            "additional_data": {
                "DAT_200014c8": {
                    "address": 1,
                    "base_address": 2,
                    "data": 1,
                    "data_address": 1,
                    "data_block": 1,
                    "data_offset": 2,
                    "data_pointer": 2,
                    "data_section": 2,
                    "data_segment": 1,
                    "global_data": 1,
                    "global_memory": 1,
                    "memory_address": 2,
                    "memory_base_address": 1,
                    "memory_block": 2
                },
                "FUN_08003fd0": {
                    "set_global_value": 1,
                    "set_param": 6,
                    "set_param_in_global_variable": 1,
                    "set_param_value": 14,
                    "set_parameter_in_memory": 1,
                    "set_parameter_value": 1,
                    "store_param_at_offset": 1,
                    "store_parameter_in_memory": 3,
                    "update_global_value": 1,
                    "update_memory_address": 1,
                    "update_parameter": 1
                },
                "param_1": {
                    "new_value": 7,
                    "param": 1,
                    "parameter": 2,
                    "parameter_value": 1,
                    "value": 20
                },
                "value": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "code": "\nvoid set_param_value_08003fd0(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200014c8 + 0x3c) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08003fd0",
            "entrypoint": "0x08003fd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fd0": "set_param_value_08003fd0",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fdc": {
            "additional_data": {
                "DAT_200015f8": {
                    "data_block": 1,
                    "data_buffer": 4,
                    "memory_address": 2,
                    "memory_block": 2,
                    "memory_location": 1,
                    "param_address_array": 1,
                    "param_array": 1,
                    "param_data": 1,
                    "parameter_memory": 1,
                    "parameter_table": 1,
                    "saved_params": 1
                },
                "FUN_08003fdc": {
                    "set_param": 5,
                    "set_param_address": 1,
                    "set_param_value": 14,
                    "set_parameter": 2,
                    "set_saved_parameter": 1,
                    "set_saved_value": 1,
                    "store_param_to_memory": 1,
                    "store_parameter_in_memory": 4,
                    "store_parameter_to_address": 1,
                    "store_parameter_value": 1
                },
                "param_1": {
                    "address": 1,
                    "input_parameter": 1,
                    "new_param": 1,
                    "new_value": 7,
                    "param_value": 1,
                    "parameter": 4,
                    "value": 16
                },
                "value": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "code": "\nvoid set_param_value_08003fdc(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_200015f8 + 0x38) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08003fdc",
            "entrypoint": "0x08003fdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fdc": "set_param_value_08003fdc",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003fe8": {
            "additional_data": {
                "DAT_20001540": {
                    "base_address": 2,
                    "data": 2,
                    "data_address": 1,
                    "data_block": 2,
                    "data_buffer": 5,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "memory_address": 2,
                    "param_buffer": 1
                },
                "FUN_08003fe8": {
                    "set_param": 9,
                    "set_param_1": 1,
                    "set_param_in_data_offset": 1,
                    "set_param_value": 4,
                    "set_parameter": 1,
                    "set_parameter_in_memory": 1,
                    "set_parameter_value": 4,
                    "set_pointer": 1,
                    "store_param_value": 1,
                    "store_parameter_in_memory": 1,
                    "store_parameter_value": 1,
                    "store_value_in_memory": 1,
                    "update_data_pointer": 1,
                    "update_param": 1,
                    "update_parameter_value": 2,
                    "update_pointer_value": 1
                },
                "param_1": {
                    "input": 1,
                    "new_param": 3,
                    "new_parameter_value": 1,
                    "new_value": 9,
                    "param_value": 1,
                    "value": 16
                }
            },
            "called": [],
            "calling": [
                "FUN_0800426c",
                "FUN_080041c4"
            ],
            "code": "\nvoid set_param_value_08003fe8(undefined4 value)\n\n{\n  *(undefined4 *)(DAT_20001540 + 0x3c) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_08003fe8",
            "entrypoint": "0x08003fe8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003fe8": "set_param_value_08003fe8",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003ff4": {
            "additional_data": {
                "DAT_200014c8": {
                    "data3": 4,
                    "data_c8": 1,
                    "data_flag_3": 2,
                    "flag3": 1,
                    "flag3_data": 1,
                    "flag_3": 1,
                    "flags3": 1,
                    "flags_3": 1,
                    "variable_3": 1
                },
                "DAT_20001540": {
                    "data2": 4,
                    "data_40": 1,
                    "data_flag_2": 2,
                    "flag2": 1,
                    "flag2_data": 1,
                    "flag_2": 1,
                    "flags2": 1,
                    "flags_2": 1,
                    "variable_2": 1
                },
                "DAT_200015f8": {
                    "data1": 4,
                    "data_f8": 1,
                    "data_flag_1": 2,
                    "flag1": 1,
                    "flag1_data": 1,
                    "flag_1": 1,
                    "flags1": 1,
                    "flags_1": 2,
                    "variable_1": 1
                },
                "FUN_08003ff4": {
                    "set_flag_bits": 2,
                    "set_flags": 1,
                    "set_flags_and_update_bits": 1,
                    "update_bit_and_set_flags": 1,
                    "update_bits_and_set_flags": 1,
                    "update_data_flags": 2,
                    "update_flags": 23
                },
                "set_flags": {
                    "": 1
                },
                "update_bit_and_set_flag_08002538": {
                    "set_flag": 15,
                    "set_flags": 1,
                    "update_and_set_flag_bits": 1,
                    "update_bit_and_set_flag": 6,
                    "update_flag": 1,
                    "update_flag_bits": 1
                },
                "update_bit_and_set_flags": {
                    "": 1
                }
            },
            "called": [
                "FUN_08002538"
            ],
            "calling": [
                "FUN_08004028"
            ],
            "code": "\nvoid update_data_flags_08003ff4(void)\n\n{\n  set_flag(&DAT_200015f8,4);\n  set_flag(&DAT_20001540,8);\n  set_flag(&DAT_200014c8,8);\n  set_flag(&DAT_200014c8,0xc);\n  return;\n}\n\n",
            "current_name": "update_data_flags_08003ff4",
            "entrypoint": "0x08003ff4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003ff4": "update_data_flags_08003ff4",
                "update_bit_and_set_flag_08002538": "set_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004028": {
            "additional_data": {
                "100": {
                    "thunk_function_parameter": 1
                },
                "FUN_08004028": {
                    "initialize_and_configure_system": 10,
                    "initialize_and_set_data_flags": 1,
                    "initialize_and_update_system": 13,
                    "initialize_system": 2,
                    "initialize_system_and_update_data": 1,
                    "initialize_system_and_update_data_flags": 3,
                    "perform_initialization_and_configuration": 1
                },
                "iVar1": {
                    "counter": 2,
                    "iteration_count": 17,
                    "iteration_counter": 1,
                    "loop_counter": 8,
                    "num_iterations": 2
                },
                "initialize_and_configure_system_0800458c": {
                    "initialize_and_configure_system": 10,
                    "initialize_system": 3,
                    "initialize_system_configuration": 1
                },
                "set_param_values_08003f3c": {
                    "set_param_values": 2,
                    "set_parameter_values": 12,
                    "set_values": 1
                },
                "thunk_FUNC_08001168": {
                    "do_something_with_param": 1,
                    "execute_function": 1,
                    "execute_thunk": 2,
                    "perform_action": 1,
                    "perform_operation": 3,
                    "process_data": 1,
                    "thunk_function": 5,
                    "thunk_function_08001168": 1
                },
                "update_data_flags_08003ff4": {
                    "update_data_flags": 14
                }
            },
            "called": [
                "FUN_08003f3c",
                "thunk_FUN_08001168",
                "FUN_0800458c",
                "FUN_08003ff4"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\nvoid initialize_system_and_update_data_flags_08004028(void)\n\n{\n  int iteration_count;\n  \n  initialize_and_configure_system();\n  update_data_flags();\n  iteration_count = 3;\n  do {\n    set_parameter_values(1,0);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,1);\n    thunk_FUNC_08001168(100);\n    set_parameter_values(0,0,1);\n    thunk_FUNC_08001168(100);\n    iteration_count = iteration_count + -1;\n  } while (iteration_count != 0);\n  set_parameter_values(1,1);\n  return;\n}\n\n",
            "current_name": "initialize_system_and_update_data_flags_08004028",
            "entrypoint": "0x08004028",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004028": "initialize_system_and_update_data_flags_08004028",
                "iVar1": "iteration_count",
                "initialize_and_configure_system_0800458c": "initialize_and_configure_system",
                "set_param_values_08003f3c": "set_parameter_values",
                "update_data_flags_08003ff4": "update_data_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800403c": {
            "additional_data": {
                "FUN_0800403c": {
                    "process_and_handle_data": 1,
                    "process_data": 3,
                    "process_data_and_handle_errors": 1,
                    "process_i2c_data": 26
                },
                "iVar1": {
                    "result": 13
                },
                "local_14": {
                    "buffer": 18,
                    "data_array": 1,
                    "data_buffer": 1,
                    "error_buffer": 1,
                    "input_buffer": 1,
                    "local_array": 1,
                    "local_buffer": 4,
                    "local_data": 3,
                    "output_data": 1
                },
                "param_1": {
                    "address": 2,
                    "arg1": 2,
                    "buffer": 1,
                    "config_param_1": 1,
                    "data1": 2,
                    "data_address": 1,
                    "data_buffer": 1,
                    "data_param1": 2,
                    "data_param_1": 6,
                    "data_ptr": 3,
                    "device_address": 7,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "config_param_2": 1,
                    "data": 1,
                    "data2": 2,
                    "data_param2": 2,
                    "data_param_2": 6,
                    "data_value": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "length": 1,
                    "param2": 1,
                    "param_size": 1,
                    "register": 1,
                    "register_address": 7,
                    "size_ptr": 3
                },
                "param_3": {
                    "data": 11,
                    "data_byte": 1,
                    "data_param_3": 1,
                    "flag": 10,
                    "input_data": 1,
                    "input_flag": 1,
                    "input_param_3": 1,
                    "input_value": 1,
                    "is_valid": 1,
                    "param": 1,
                    "param_flag": 1,
                    "value": 1
                },
                "param_4": {
                    "check_error": 2,
                    "error_flag": 8,
                    "error_handling": 1,
                    "error_handling_flag": 1,
                    "execute_action": 1,
                    "flag": 6,
                    "flag_param": 3,
                    "is_error_handling_needed": 1,
                    "perform_action": 1,
                    "perform_error_check": 1,
                    "should_process_error": 1,
                    "thunk_flag": 4,
                    "thunk_value": 1
                }
            },
            "called": [
                "FUN_08001828",
                "thunk_FUN_08001168",
                "FUN_08004490"
            ],
            "calling": [
                "FUN_0800411c",
                "FUN_08003298",
                "FUN_08002ad0",
                "FUN_08002cb0"
            ],
            "code": "\nvoid process_i2c_data_0800403c(undefined4 device_address,undefined4 register_address,undefined data,int error_flag)\n\n{\n  int result;\n  undefined buffer [8];\n  \n  buffer[0] = data;\n  result = process_data_08001828(&DAT_20001504,device_address,register_address,1,buffer,1,200);\n  if (result != 0) {\n    process_error_message_08004490(\"../Src/i2c.c\",0x1b);\n  }\n  if (error_flag != 0) {\n    thunk_FUNC_08001168(0x32);\n  }\n  return;\n}\n\n",
            "current_name": "process_i2c_data_0800403c",
            "entrypoint": "0x0800403c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800403c": "process_i2c_data_0800403c",
                "iVar1": "result",
                "local_14": "buffer",
                "param_1": "device_address",
                "param_2": "register_address",
                "param_3": "data",
                "param_4": "error_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800407c": {
            "additional_data": {
                "FUN_0800407c": {
                    "process_and_check_data": 2,
                    "process_and_error_handle": 1,
                    "process_and_get_value": 1,
                    "process_and_handle_data": 7,
                    "process_and_return_data": 5,
                    "process_and_return_result": 2,
                    "process_and_return_value": 6,
                    "process_and_validate_data": 1,
                    "process_data": 1,
                    "process_data_and_get_result": 1,
                    "process_data_and_handle_errors": 2,
                    "process_data_and_return_result": 2
                },
                "iVar1": {
                    "data_processing_result": 2,
                    "process_result": 1,
                    "result": 4,
                    "status_var": 1
                },
                "local_14": {
                    "local_variable": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_data": 2,
                    "output_variable": 2,
                    "processed_data": 1,
                    "result": 17,
                    "result_array": 2,
                    "result_buffer": 1,
                    "result_variable": 1,
                    "return_value": 2
                },
                "param_1": {
                    "data": 1,
                    "data_1": 2,
                    "data_input": 1,
                    "data_param": 3,
                    "data_param_1": 1,
                    "data_ptr": 2,
                    "input_1": 1,
                    "input_data": 1,
                    "input_data_1": 1,
                    "input_param": 3,
                    "input_param1": 5,
                    "input_param_1": 9,
                    "input_parameter_1": 1
                },
                "param_2": {
                    "data_2": 2,
                    "data_param_2": 1,
                    "input_2": 1,
                    "input_data_2": 1,
                    "input_param2": 5,
                    "input_param_2": 9,
                    "input_parameter_2": 1,
                    "length": 2,
                    "length_param": 1,
                    "output_param": 1,
                    "param2": 1,
                    "param_2": 2,
                    "param_ptr": 1,
                    "size": 1,
                    "size_param": 2
                },
                "param_3": {
                    "error_buffer": 1,
                    "error_message": 2,
                    "error_message_1": 1,
                    "error_message_param": 1,
                    "error_message_param1": 1,
                    "error_message_param_1": 2,
                    "error_msg_param": 1,
                    "error_msg_ptr": 2,
                    "error_param": 2,
                    "error_param1": 2,
                    "error_param_1": 10,
                    "output_1": 1,
                    "output_param1": 3,
                    "output_param_1": 2
                },
                "param_4": {
                    "error_buffer_size": 1,
                    "error_code": 3,
                    "error_code_param": 1,
                    "error_code_ptr": 1,
                    "error_message_2": 1,
                    "error_message_param2": 1,
                    "error_message_param_2": 2,
                    "error_param": 1,
                    "error_param2": 2,
                    "error_param_2": 10,
                    "message_param": 2,
                    "output_2": 1,
                    "output_param2": 3,
                    "output_param_2": 2
                }
            },
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "calling": [
                "FUN_08002d88",
                "FUN_080040e8",
                "FUN_08002ad0",
                "FUN_08002cb0"
            ],
            "code": "\nundefined process_data_and_handle_errors_0800407c(undefined4 input_param_1,undefined4 input_param_2,undefined4 error_param_1,undefined4 error_param_2)\n\n{\n  int result;\n  undefined result [8];\n  \n  result[0] = 0;\n  result = process_data_08001938(&DAT_20001504,input_param_1,input_param_2,1,result,1,200);\n  if (result != 0) {\n    process_error_message_08004490(error_param_1,error_param_2);\n  }\n  return result[0];\n}\n\n",
            "current_name": "process_data_and_handle_errors_0800407c",
            "entrypoint": "0x0800407c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800407c": "process_data_and_handle_errors_0800407c",
                "iVar1": "result",
                "local_14": "result",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "error_param_1",
                "param_4": "error_param_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040b8": {
            "additional_data": {
                "FUN_080040b8": {
                    "check_data_and_process": 1,
                    "process_and_handle_data": 6,
                    "process_and_validate_data": 1,
                    "process_data": 7,
                    "process_data_and_handle_error": 8,
                    "process_data_and_handle_errors": 1,
                    "process_data_check": 2,
                    "process_data_error_handling": 1,
                    "process_data_validation": 1,
                    "process_data_with_error_handling": 1,
                    "validate_and_process_data": 1,
                    "validate_data": 1
                },
                "iVar1": {
                    "data_process_result": 1,
                    "data_processing_result": 4,
                    "error_code": 1,
                    "process_result": 1,
                    "result": 23
                },
                "param_1": {
                    "data": 1,
                    "data_1": 1,
                    "data_address": 1,
                    "data_param": 7,
                    "data_param1": 5,
                    "data_param_1": 3,
                    "data_ptr": 4,
                    "data_start": 1,
                    "input1": 5,
                    "input_1": 1,
                    "input_param": 1,
                    "input_param_1": 1
                },
                "param_2": {
                    "data_2": 1,
                    "data_end": 1,
                    "data_param2": 5,
                    "data_param_2": 3,
                    "input2": 5,
                    "input_2": 1,
                    "input_param": 1,
                    "input_param_2": 1,
                    "length": 1,
                    "output_param": 1,
                    "param2": 2,
                    "param_2": 3,
                    "param_ptr": 2,
                    "size": 1,
                    "size_param": 3
                },
                "param_3": {
                    "data_param3": 5,
                    "data_param_3": 3,
                    "flag": 4,
                    "flag_param": 3,
                    "input3": 5,
                    "input_3": 1,
                    "input_param_3": 1,
                    "length": 1,
                    "param3": 3,
                    "param_3": 4,
                    "status_param": 1
                },
                "param_4": {
                    "buffer_param": 1,
                    "data_param4": 3,
                    "data_param_4": 3,
                    "input4": 5,
                    "input_4": 1,
                    "input_param_4": 1,
                    "param": 1,
                    "param4": 3,
                    "param_4": 7,
                    "size": 1
                },
                "param_5": {
                    "error1": 1,
                    "error_address": 1,
                    "error_code": 1,
                    "error_message": 2,
                    "error_message1": 1,
                    "error_message_1": 1,
                    "error_message_param1": 2,
                    "error_message_param_1": 1,
                    "error_msg_param": 1,
                    "error_msg_param1": 1,
                    "error_param": 1,
                    "error_param1": 5,
                    "error_param_1": 10,
                    "error_ptr": 1,
                    "output1": 1,
                    "param5": 1
                },
                "param_6": {
                    "error2": 1,
                    "error_code": 2,
                    "error_code_param": 1,
                    "error_message2": 1,
                    "error_message_2": 1,
                    "error_message_param2": 2,
                    "error_message_param_2": 1,
                    "error_msg": 1,
                    "error_msg_param2": 1,
                    "error_param": 1,
                    "error_param2": 5,
                    "error_param_2": 10,
                    "message_address": 1,
                    "message_param": 1,
                    "output2": 1,
                    "param6": 1
                }
            },
            "called": [
                "FUN_08001938",
                "FUN_08004490"
            ],
            "calling": [
                "FUN_08003034"
            ],
            "code": "\nvoid process_data_and_handle_error_080040b8(undefined4 data_param,undefined4 data_param2,undefined4 input3,undefined4 param_4,\n                 undefined4 error_param_1,undefined4 error_param_2)\n\n{\n  int result;\n  \n  result = process_data_08001938(&DAT_20001504,data_param,data_param2,1,input3,param_4,200,param_4);\n  if (result != 0) {\n    process_error_message_08004490(error_param_1,error_param_2);\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_and_handle_error_080040b8",
            "entrypoint": "0x080040b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040b8": "process_data_and_handle_error_080040b8",
                "iVar1": "result",
                "param_1": "data_param",
                "param_2": "data_param2",
                "param_3": "input3",
                "param_5": "error_param_1",
                "param_6": "error_param_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080040e8": {
            "additional_data": {
                "FUN_080040e8": {
                    "copy_and_handle_errors": 2,
                    "copy_and_process_data": 1,
                    "copy_data_to_buffer": 1,
                    "copy_data_with_error_handling": 4,
                    "copy_data_with_errors": 1,
                    "copy_data_with_errors_handling": 1,
                    "process_and_handle_data": 1,
                    "process_and_handle_data_errors": 2,
                    "process_and_handle_errors": 8,
                    "process_and_save_data": 1,
                    "process_and_store_data": 7,
                    "process_data_and_handle_errors": 1,
                    "write_data_to_i2c": 1
                },
                "iVar2": {
                    "buffer_index": 1,
                    "count": 1,
                    "counter": 1,
                    "current_index": 1,
                    "i": 10,
                    "index": 15,
                    "iteration_count": 1,
                    "iteration_index": 1
                },
                "iVar4": {
                    "count": 1,
                    "data_size": 1,
                    "data_source_offset": 1,
                    "end_index": 1,
                    "error_code": 5,
                    "error_handling_code": 1,
                    "file_index": 1,
                    "file_offset": 5,
                    "file_size": 1,
                    "index": 2,
                    "length": 1,
                    "line_number": 7,
                    "location": 1,
                    "offset": 2
                },
                "param_1": {
                    "arg1": 2,
                    "arg_1": 1,
                    "config_value": 1,
                    "data": 9,
                    "data1": 1,
                    "data_buffer": 1,
                    "data_handler": 1,
                    "data_pointer": 1,
                    "data_source": 2,
                    "device_address": 1,
                    "flag": 1,
                    "input": 1,
                    "input_data": 5,
                    "input_param": 1,
                    "param": 1,
                    "source": 1,
                    "unknown_param": 1
                },
                "param_2": {
                    "arg2": 2,
                    "arg_2": 1,
                    "base_addr": 1,
                    "base_address": 4,
                    "base_index": 1,
                    "data2": 1,
                    "data_buffer": 1,
                    "data_index": 1,
                    "data_offset": 2,
                    "index": 2,
                    "offset": 9,
                    "start_index": 6
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "array_address": 1,
                    "array_length": 1,
                    "array_size": 1,
                    "array_start": 1,
                    "buffer": 1,
                    "buffer_address": 1,
                    "buffer_ptr": 2,
                    "buffer_size": 2,
                    "buffer_start": 1,
                    "data3": 1,
                    "data_length": 1,
                    "data_start": 1,
                    "dest_addr": 1,
                    "dest_array": 1,
                    "destination": 1,
                    "destination_address": 1,
                    "end_address": 1,
                    "input_size": 1,
                    "length": 1,
                    "num_elements": 1,
                    "output_array": 1,
                    "output_buffer": 3,
                    "output_data": 1,
                    "size": 2
                },
                "param_4": {
                    "arg4": 1,
                    "arg_4": 1,
                    "array_length": 3,
                    "buffer_length": 1,
                    "buffer_size": 5,
                    "count": 3,
                    "data4": 1,
                    "data_length": 4,
                    "data_size": 1,
                    "iteration_count": 1,
                    "length": 5,
                    "num_elements": 2,
                    "num_iterations": 1,
                    "output_size": 1,
                    "size": 1
                },
                "puVar3": {
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "buffer_end": 1,
                    "buffer_ptr": 2,
                    "buffer_ptr_incremented": 1,
                    "current_byte": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "dest_buffer": 1,
                    "dest_ptr": 5,
                    "last_element_ptr": 1,
                    "next_data_ptr": 1,
                    "output": 1,
                    "output_pointer": 2,
                    "output_ptr": 3,
                    "p_buffer": 1,
                    "ptr": 5,
                    "ptr_to_buffer": 1
                },
                "uVar1": {
                    "data": 1,
                    "data_processing_result": 1,
                    "processed_data": 21,
                    "result": 4
                }
            },
            "called": [
                "FUN_0800407c"
            ],
            "calling": [
                "FUN_08002d88",
                "FUN_08002b48",
                "FUN_08003298",
                "FUN_08002cb0",
                "FUN_08002bf0"
            ],
            "code": "\nvoid process_data_and_handle_errors_080040e8(undefined4 data,int offset,int output_buffer,int length)\n\n{\n  undefined processed_data;\n  int index;\n  undefined *ptr;\n  int line_number;\n  \n  ptr = (undefined *)(output_buffer + -1);\n  line_number = length;\n  for (index = 0; index < length; index = index + 1) {\n    processed_data = process_data_and_handle_errors_080040e8_0800407c(data,offset + index & 0xffff,\"../Src/i2c.c\",0x4c,line_number);\n    ptr = ptr + 1;\n    *ptr = processed_data;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_and_handle_errors_080040e8",
            "entrypoint": "0x080040e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080040e8": "process_data_and_handle_errors_080040e8",
                "iVar2": "index",
                "iVar4": "line_number",
                "param_1": "data",
                "param_2": "offset",
                "param_3": "output_buffer",
                "param_4": "length",
                "puVar3": "ptr",
                "uVar1": "processed_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800411c": {
            "additional_data": {
                "CARRY4": {
                    "is_addition_carry": 1
                },
                "DAT_20000038": {
                    "memory_offset_a": 1
                },
                "DAT_2000025e": {
                    "data_value_i": 1,
                    "int_value7": 1,
                    "sensor_data6": 1,
                    "sensor_data_6": 1,
                    "value6": 1
                },
                "DAT_20000260": {
                    "data_value_h": 1,
                    "int_value5": 1,
                    "sensor_data5": 1,
                    "sensor_data_5": 1,
                    "value5": 1
                },
                "DAT_20000262": {
                    "data_value_j": 1,
                    "int_value6": 1
                },
                "DAT_20000264": {
                    "data_value_g": 1,
                    "int_value4": 1,
                    "sensor_data4": 1,
                    "sensor_data_4": 1,
                    "value4": 1
                },
                "DAT_20000266": {
                    "data_value_e": 1,
                    "int_value2": 1,
                    "sensor_data2": 1,
                    "sensor_data_2": 1,
                    "value2": 1
                },
                "DAT_20000268": {
                    "data_value_f": 1,
                    "int_value3": 1,
                    "sensor_data3": 1,
                    "sensor_data_3": 1,
                    "value3": 1
                },
                "DAT_2000026c": {
                    "data_value": 1,
                    "data_value_k": 1,
                    "int_value10": 1,
                    "sensor_data2": 1
                },
                "DAT_20000270": {
                    "data_value_l": 1,
                    "int_value1": 1,
                    "sensor_data1": 1,
                    "sensor_data_1": 1,
                    "value1": 1
                },
                "DAT_20000274": {
                    "flag2": 2,
                    "flag4": 1,
                    "flag_2": 1,
                    "flag_b": 1
                },
                "DAT_20000275": {
                    "flag1": 2,
                    "flag3": 1,
                    "flag_1": 1,
                    "flag_a": 1
                },
                "DAT_20000278": {
                    "data_value3": 1,
                    "data_value_n": 1,
                    "previous_value5": 1,
                    "value2": 1
                },
                "DAT_2000027c": {
                    "data_value2": 1,
                    "data_value_m": 1,
                    "previous_value": 1,
                    "previous_value4": 1,
                    "value1": 1
                },
                "DAT_2000028c": {
                    "data_value_a": 1,
                    "max_value1": 1,
                    "previous_data_value1": 1,
                    "previous_sensor_value": 1,
                    "previous_value1": 1
                },
                "DAT_20000290": {
                    "data_value_b": 1,
                    "max_value3": 1,
                    "previous_data_value3": 1,
                    "previous_data_value_2": 1,
                    "previous_value3": 1
                },
                "DAT_20000294": {
                    "data_value_c": 1,
                    "max_value2": 1,
                    "previous_data_value": 1,
                    "previous_data_value2": 1,
                    "previous_value2": 1
                },
                "DAT_200002fc": {
                    "float_value": 1,
                    "value8": 1
                },
                "DAT_20000300": {
                    "data_pointer": 1,
                    "float_array_value": 1,
                    "ptr_data1": 1
                },
                "DAT_2000034c": {
                    "ptr_data2": 1,
                    "value7": 1
                },
                "DAT_20000354": {
                    "computed_value_1": 1,
                    "float_value_a": 1
                },
                "DAT_20000358": {
                    "computed_value_2": 1,
                    "float_value_b": 1
                },
                "DAT_200014ab": {
                    "conversion_result": 1,
                    "int_value13": 1,
                    "result": 1,
                    "result1": 1
                },
                "FUN_0800411C": {
                    "process_sensor_data": 1
                },
                "FUN_0800411c": {
                    "initialize_and_process_data": 2,
                    "process_and_update_data": 1,
                    "process_and_update_sensor_data": 1,
                    "process_data": 3,
                    "process_data_and_calculate_result": 1,
                    "process_sensor_data": 22
                },
                "SBORROW4": {
                    "is_subtraction_overflow": 1
                },
                "bVar16": {
                    "bool_flag": 1,
                    "bool_value": 1,
                    "boolean": 1,
                    "condition": 2,
                    "flag": 1,
                    "is_negative": 14,
                    "is_negative1": 1,
                    "is_variable16_true": 1,
                    "unused_var3": 1
                },
                "calculate_and_update_data_values_08004a84": {
                    "calculate_and_update_data_values": 8
                },
                "calculate_float_value_08000e54": {
                    "calculate_float_value": 8
                },
                "calculate_floating_point_value_08000a30": {
                    "calculate_floating_point_value": 8
                },
                "calculate_floating_point_value_08000adc": {
                    "calculate_floating_point_value": 3,
                    "calculate_floating_point_value2": 3,
                    "calculate_floating_point_value_2": 2
                },
                "calculate_result_080004d0": {
                    "calculate_result": 8
                },
                "calculate_result_and_update_08005900": {
                    "calculate_and_update_result": 2,
                    "calculate_result_and_update": 6
                },
                "calculate_unsigned_binary_result_08000168": {
                    "calculate_unsigned_binary_result": 8
                },
                "convert_to_signed_integer_08001078": {
                    "convert_to_signed_integer": 8
                },
                "copy_process_and_xor_string_data_080043bc": {
                    "copy_process_and_xor_string_data": 8
                },
                "count_set_bits_08000c44": {
                    "count_set_bits": 6
                },
                "dataValue1": {
                    "new_value1": 1
                },
                "fun_0800115c": {
                    "thunk_get_data_value": 1
                },
                "iVar14": {
                    "calc_result": 2,
                    "calc_value": 1,
                    "calc_value7": 1,
                    "calculation1": 1,
                    "calculation5": 2,
                    "calculation_result": 5,
                    "calculation_result1": 1,
                    "int_value11": 1,
                    "new_value5": 1,
                    "temp8": 1,
                    "temp_calculation_result": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var10": 1,
                    "unused_var1": 1,
                    "var6": 1,
                    "variable14": 1
                },
                "iVar15": {
                    "calculation2": 1,
                    "calculation6": 1,
                    "calculation_result2": 3,
                    "data_value2": 2,
                    "data_value6": 1,
                    "index": 1,
                    "int_value8": 1,
                    "temp4": 1,
                    "temp9": 1,
                    "temp_data": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var11": 1,
                    "temp_var2": 2,
                    "temp_var4": 1,
                    "unused_var2": 2,
                    "variable15": 1
                },
                "iVar8": {
                    "data_value": 16,
                    "data_value1": 5,
                    "int_value12": 1,
                    "sensor_value": 1
                },
                "initialize_data_08004348": {
                    "initialize_data": 8
                },
                "initialize_sensor_and_process_data_08002f28": {
                    "initialize_sensor_and_process_data": 7,
                    "initialize_sensor_data": 1
                },
                "lVar2": {
                    "calc_value6": 1,
                    "calc_value8": 1,
                    "calculation7": 1,
                    "data": 1,
                    "intermediate_result": 1,
                    "long_value": 3,
                    "product": 3,
                    "result": 6,
                    "result1": 1,
                    "temp_long": 1,
                    "temp_result": 1,
                    "temp_value": 3
                },
                "process_and_xor_string_data_08004384": {
                    "process_and_xor_string_data": 2,
                    "process_and_xor_string_data1": 4,
                    "process_and_xor_string_data_1": 1,
                    "process_string_data_xoring": 1
                },
                "process_and_xor_string_data_080043f0": {
                    "process_and_xor_string_data": 2,
                    "process_and_xor_string_data2": 4,
                    "process_and_xor_string_data_2": 1,
                    "process_string_data_xoring": 1
                },
                "process_and_xor_string_data_08004410": {
                    "process_and_xor_string_data": 2,
                    "process_and_xor_string_data3": 4,
                    "process_and_xor_string_data_3": 1,
                    "process_string_data_xoring": 1
                },
                "process_and_xor_string_data_08004458": {
                    "process_and_xor_string_data": 2,
                    "process_and_xor_string_data4": 4,
                    "process_and_xor_string_data_4": 1,
                    "process_string_data_xoring": 1
                },
                "process_data_and_concatenate_08003034": {
                    "process_and_concatenate_data": 1,
                    "process_data_and_concatenate": 8
                },
                "process_data_and_xor_string_08004434": {
                    "process_data_and_xor_string": 8
                },
                "process_i2c_data_0800403c": {
                    "process_i2_c_data": 4,
                    "process_i2c_data": 5
                },
                "puVar1": {
                    "data_pointer": 1,
                    "next_pointer": 1,
                    "pointer": 4,
                    "pointer1": 2,
                    "pointer2": 1,
                    "ptr": 2,
                    "ptr1": 1,
                    "ptr_temp1": 1,
                    "result_pointer": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1
                },
                "puVar13": {
                    "array_pointer": 1,
                    "current_pointer": 1,
                    "pointer": 2,
                    "pointer1": 2,
                    "pointer2": 2,
                    "pointer_array": 2,
                    "ptr": 2,
                    "ptr2": 2,
                    "ptr_temp2": 1,
                    "ptr_value1": 1,
                    "ptr_var": 1,
                    "temp_pointer2": 1,
                    "temp_ptr2": 1
                },
                "reverse_bits_and_concatenate_08000428": {
                    "reverse_and_concatenate_bits": 1,
                    "reverse_bits_and_concatenate": 7
                },
                "thunk_get_data_value_0800115c": {
                    "get_data_value": 5,
                    "get_sensor_data_value": 1
                },
                "uVar10": {
                    "calc_value2": 2,
                    "calc_var2": 1,
                    "calculation2": 2,
                    "calculation5": 1,
                    "data_value3": 1,
                    "multiplied_value": 1,
                    "new_value2": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_variable5": 1,
                    "var10": 1,
                    "var5": 1,
                    "variable2": 1
                },
                "uVar11": {
                    "calc_value3": 2,
                    "calc_var3": 1,
                    "calculation3": 2,
                    "calculation6": 1,
                    "data_value4": 1,
                    "new_value3": 1,
                    "offset_value": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "temp_variable6": 1,
                    "var11": 1,
                    "var6": 1,
                    "variable3": 1
                },
                "uVar12": {
                    "calc_value5": 1,
                    "calc_value7": 1,
                    "calc_var4": 1,
                    "calculation4": 1,
                    "calculation6": 1,
                    "calculation7": 1,
                    "data_value5": 1,
                    "new_value4": 1,
                    "subtracted_value": 1,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "temp_var9": 1,
                    "temp_variable7": 1,
                    "var12": 1,
                    "var7": 1,
                    "variable4": 1
                },
                "uVar13": {
                    "ptr2": 1,
                    "temp_float_value": 1,
                    "temp_pointer": 1,
                    "temp_var4": 1
                },
                "uVar17": {
                    "binary_result": 1,
                    "calc_unsigned_value1": 1,
                    "calc_value8": 1,
                    "calculation7": 1,
                    "calculation_result3": 1,
                    "combined_result": 1,
                    "concatenated_value": 1,
                    "result": 4,
                    "result2": 4,
                    "result3": 1,
                    "result_bit_concatenation": 1,
                    "result_value": 2,
                    "reverse_result": 1,
                    "unsigned_var": 1,
                    "unused_var4": 1,
                    "var17": 1
                },
                "uVar3": {
                    "calc_value6": 1,
                    "calculated_value": 1,
                    "calculation1": 1,
                    "first_condition": 1,
                    "result2": 1,
                    "sensor1_data": 1,
                    "sensor_data0": 1,
                    "temp1": 3,
                    "temp_var1": 4,
                    "temp_variable1": 1,
                    "value1": 3,
                    "var1": 2,
                    "var3": 1
                },
                "uVar4": {
                    "calc_value4": 2,
                    "calculation2": 1,
                    "calculation4": 1,
                    "result3": 1,
                    "second_condition": 1,
                    "sensor2_data": 1,
                    "sensor_data1": 1,
                    "temp2": 3,
                    "temp_value": 1,
                    "temp_var2": 4,
                    "temp_variable2": 1,
                    "value2": 3,
                    "var2": 2,
                    "var4": 1
                },
                "uVar5": {
                    "calc_value5": 1,
                    "calculation3": 1,
                    "result4": 1,
                    "sensor3_data": 1,
                    "sensor_data2": 1,
                    "shifted_value": 1,
                    "temp3": 3,
                    "temp_var3": 4,
                    "temp_variable3": 1,
                    "third_condition": 1,
                    "value3": 3,
                    "var3": 2,
                    "var5": 1
                },
                "uVar6": {
                    "float1": 1,
                    "float_value0": 1,
                    "float_value1": 13,
                    "result1": 4,
                    "temp_var4": 1,
                    "var4": 1,
                    "var6": 1
                },
                "uVar7": {
                    "calculation8": 1,
                    "float2": 1,
                    "float_value1": 1,
                    "float_value2": 13,
                    "result2": 3,
                    "temp_var5": 1,
                    "var5": 1,
                    "var7": 1
                },
                "uVar9": {
                    "calc_value1": 2,
                    "calc_var1": 1,
                    "calculation1": 2,
                    "calculation4": 1,
                    "data_value2": 1,
                    "new_value1": 1,
                    "squared_value": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_variable4": 1,
                    "var4": 1,
                    "var9": 1,
                    "variable1": 1
                },
                "unaff_r4": {
                    "reg4": 1,
                    "unaff_r4": 1,
                    "unaffected4": 1,
                    "unaffected_data": 1,
                    "unaffected_register": 1,
                    "unknown": 1,
                    "unused_param1": 1,
                    "unused_parameter": 1,
                    "unused_var1": 1,
                    "unused_variable": 1,
                    "value": 1,
                    "value3": 1
                }
            },
            "called": [
                "FUN_0800403c",
                "FUN_08004434",
                "FUN_08000adc",
                "FUN_08000c44",
                "FUN_08002f28",
                "FUN_08003034",
                "FUN_08004458",
                "FUN_08000e54",
                "FUN_08000428",
                "FUN_08000168",
                "FUN_080043f0",
                "FUN_08005900",
                "thunk_FUN_0800115c",
                "FUN_08004410",
                "FUN_08004348",
                "FUN_080004d0",
                "FUN_08004384",
                "FUN_08001078",
                "FUN_08004a84",
                "FUN_080043bc",
                "FUN_08000a30"
            ],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nvoid process_and_update_sensor_data_0800411c(void)\n\n{\n  undefined4 *pointer;\n  longlong result;\n  uint temp_var1;\n  uint temp_var2;\n  uint temp_var3;\n  undefined4 float_value1;\n  undefined4 float_value2;\n  int data_value;\n  uint temp5;\n  uint calculation2;\n  uint calc_value3;\n  uint temp8;\n  undefined4 *ptr;\n  undefined4 unused_variable;\n  int calculation_result;\n  int calculation_result2;\n  bool is_negative;\n  undefined8 result2;\n  \n  data_value = get_data_value();\n  if (1 < (uint)(data_value - DAT_2000028c)) {\n    DAT_2000028c = get_data_value();\n    initialize_sensor_and_process_data();\n  }\n  data_value = get_data_value();\n  if (2 < (uint)(data_value - DAT_20000294)) {\n    DAT_20000294 = get_data_value();\n    calculate_and_update_data_values();\n  }\n  data_value = get_data_value();\n  if (3 < (uint)(data_value - DAT_20000290)) {\n    DAT_20000290 = get_data_value();\n    initialize_data();\n    process_and_xor_string_data1();\n    process_and_xor_string_data2();\n    process_and_xor_string_data3();\n    process_data_and_xor_string();\n    copy_process_and_xor_string_data();\n    process_and_xor_string_data4();\n  }\n  if ((DAT_20000275 != '\\0') && (DAT_20000274 != '\\0')) {\n    calculation_result2 = DAT_20000270 + (uint)DAT_20000266 * -0x100;\n    temp5 = (uint)((longlong)(int)(uint)DAT_20000268 * (longlong)calculation_result2) >> 0x17 |\n            (int)((ulonglong)((longlong)(int)(uint)DAT_20000268 * (longlong)calculation_result2) >> 0x20) << 9;\n    calculation2 = (uint)((longlong)(int)(uint)DAT_20000264 * (longlong)calculation_result2 >> 7);\n    calc_value3 = calculation2 + (uint)DAT_20000260 * 0x10000;\n    temp_var2 = (uint)((ulonglong)((longlong)(int)(uint)DAT_20000262 * (longlong)calculation_result2) >> 8);\n    data_value = temp5 + 2000;\n    temp_var3 = temp_var2 + (uint)DAT_2000025e * 0x8000;\n    is_negative = (int)temp5 < 0;\n    if (1999 < data_value) {\n      temp5 = 0;\n    }\n    temp_var1 = temp5;\n    if (is_negative != is_subtraction_overflow(data_value,2000)) {\n      calculation_result = temp5 * temp5 * 5;\n      temp5 = calculation_result >> 2;\n      temp_var1 = calculation_result >> 1;\n    }\n    temp8 = calc_value3 - temp_var1;\n    result = (ulonglong)(temp_var3 - temp5) * (ulonglong)DAT_2000026c;\n    calculation_result = DAT_2000026c *\n             ((((int)((longlong)(int)(uint)DAT_20000262 * (longlong)calculation_result2 >> 0x28) +\n               (uint)is_addition_carry(temp_var2,(uint)DAT_2000025e * 0x8000)) - ((int)temp5 >> 0x1f)) -\n             (uint)(temp_var3 < temp5)) + (int)((ulonglong)result >> 0x20);\n    temp_var2 = (uint)result >> 0x15 | calculation_result * 0x800;\n    float_value1 = count_set_bits(temp_var2 - temp8 >> 0xf |\n                         (((calculation_result >> 0x15) -\n                          ((((int)((longlong)(int)(uint)DAT_20000264 * (longlong)calculation_result2 >> 0x27) +\n                            (uint)is_addition_carry(calculation2,(uint)DAT_20000260 * 0x10000)) -\n                           ((int)temp_var1 >> 0x1f)) - (uint)(calc_value3 < temp_var1))) - (uint)(temp_var2 < temp8)\n                         ) * 0x20000);\n    float_value1 = calculate_float_value(float_value1,0x42c80000);\n    DAT_20000354 = float_value1;\n    float_value2 = count_set_bits(data_value);\n    DAT_20000358 = calculate_float_value(float_value2,0x42c80000);\n    calculate_float_value(float_value1,0x447d5000);\n    result2 = reverse_bits_and_concatenate();\n    result2 = calculate_result_and_update((int)result2,(int)((ulonglong)result2 >> 0x20),0x60000000,0x3fc85b95);\n    result2 = calculate_unsigned_binary_result(0,0x3ff00000,(int)result2,(int)((ulonglong)result2 >> 0x20));\n    calculate_result((int)result2,(int)((ulonglong)result2 >> 0x20),0,0x40e5a540);\n    float_value1 = calculate_floating_point_value();\n    float_value2 = 0;\n    ptr = &DAT_20000300;\n    DAT_20000350 = float_value1;\n    do {\n      pointer = ptr + 1;\n      *ptr = *pointer;\n      float_value2 = calculate_floating_point_value(float_value2);\n      ptr = pointer;\n    } while (pointer != &DAT_2000034c);\n    DAT_2000034c = float_value1;\n    float_value1 = calculate_floating_point_value(float_value2,float_value1);\n    DAT_200002fc = calculate_float_value(float_value1,0x41a00000);\n    data_value = convert_to_signed_integer();\n    DAT_200014ab = data_value * 100;\n    DAT_20000275 = '\\0';\n    DAT_20000274 = '\\0';\n    process_i2c_data(0xee,DAT_20000038 + 0x50,1);\n    DAT_2000027c = get_data_value();\n  }\n  data_value = get_data_value();\n  if (((10 < (uint)(data_value - DAT_2000027c)) && (DAT_20000275 == '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_20000270 = process_data_and_concatenate();\n    DAT_20000275 = '\\x01';\n    process_i2c_data(0xee,DAT_20000038 + 0x40,1,0,unused_variable);\n    DAT_20000278 = get_data_value();\n  }\n  data_value = get_data_value();\n  if (((10 < (uint)(data_value - DAT_20000278)) && (DAT_20000275 != '\\0')) && (DAT_20000274 == '\\0')) {\n    DAT_2000026c = process_data_and_concatenate();\n    DAT_20000274 = '\\x01';\n  }\n  return;\n}\n\n",
            "current_name": "process_and_update_sensor_data_0800411c",
            "entrypoint": "0x0800411c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "is_addition_carry",
                "FUN_0800411c": "process_and_update_sensor_data_0800411c",
                "SBORROW4": "is_subtraction_overflow",
                "bVar16": "is_negative",
                "calculate_and_update_data_values_08004a84": "calculate_and_update_data_values",
                "calculate_float_value_08000e54": "calculate_float_value",
                "calculate_floating_point_value_08000a30": "calculate_floating_point_value",
                "calculate_floating_point_value_08000adc": "calculate_floating_point_value",
                "calculate_result_080004d0": "calculate_result",
                "calculate_result_and_update_08005900": "calculate_result_and_update",
                "calculate_unsigned_binary_result_08000168": "calculate_unsigned_binary_result",
                "convert_to_signed_integer_08001078": "convert_to_signed_integer",
                "copy_process_and_xor_string_data_080043bc": "copy_process_and_xor_string_data",
                "count_set_bits_08000c44": "count_set_bits",
                "iVar14": "calculation_result",
                "iVar15": "calculation_result2",
                "iVar8": "data_value",
                "initialize_data_08004348": "initialize_data",
                "initialize_sensor_and_process_data_08002f28": "initialize_sensor_and_process_data",
                "lVar2": "result",
                "process_and_xor_string_data_08004384": "process_and_xor_string_data1",
                "process_and_xor_string_data_080043f0": "process_and_xor_string_data2",
                "process_and_xor_string_data_08004410": "process_and_xor_string_data3",
                "process_and_xor_string_data_08004458": "process_and_xor_string_data4",
                "process_data_and_concatenate_08003034": "process_data_and_concatenate",
                "process_data_and_xor_string_08004434": "process_data_and_xor_string",
                "process_i2c_data_0800403c": "process_i2c_data",
                "puVar1": "pointer",
                "puVar13": "ptr",
                "reverse_bits_and_concatenate_08000428": "reverse_bits_and_concatenate",
                "thunk_get_data_value_0800115c": "get_data_value",
                "uVar10": "calculation2",
                "uVar11": "calc_value3",
                "uVar12": "temp8",
                "uVar13": "temp_var4",
                "uVar17": "result2",
                "uVar3": "temp_var1",
                "uVar4": "temp_var2",
                "uVar5": "temp_var3",
                "uVar6": "float_value1",
                "uVar7": "float_value2",
                "uVar9": "temp5",
                "unaff_r4": "unused_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004194": {
            "additional_data": {
                "FUN_08004194": {
                    "initialize_all_systems": 1,
                    "initialize_and_process_system": 1,
                    "initialize_system": 21,
                    "initialize_system_and_data": 6,
                    "initialize_system_and_update_flags": 2
                },
                "initialize_all_systems": {
                    "initialize_all_systems": 1
                },
                "initialize_all_variables": {
                    "initialize_all_variables": 1
                },
                "initialize_and_process_i2c_sensor_data": {
                    "initialize_and_process_i2c_sensor_data": 1,
                    "process_i2c_sensor_data": 1
                },
                "initialize_and_process_i2c_sensor_data_08002ea0": {
                    "": 1,
                    "initialize_and_process_i2c_sensor": 1,
                    "initialize_and_process_i2c_sensor_data": 14,
                    "initialize_and_process_i2c_sensors": 1,
                    "initialize_i2c_sensor_data": 2,
                    "process_i2c_sensor_data": 10,
                    "sensor_data_processing": 1
                },
                "initialize_data": {
                    "initialize_data": 1
                },
                "initialize_data_and_check_conditions": {
                    "check_conditions": 1,
                    "initialize_data_and_check_conditions": 1
                },
                "initialize_data_and_check_conditions_08004c70": {
                    "": 1,
                    "check_data_conditions": 1,
                    "initialization2": 1,
                    "initialize_and_check_data_conditions": 1,
                    "initialize_conditions": 1,
                    "initialize_data": 9,
                    "initialize_data_and_check_conditions": 13,
                    "initialize_data_and_conditions": 2,
                    "initialize_data_conditions": 1
                },
                "initialize_sensor_data": {
                    "initialize_sensor_data": 3
                },
                "initialize_sensor_data_08003298": {
                    "": 1,
                    "initialize_sensor_data": 28,
                    "sensor_data_initialization": 1
                },
                "initialize_system": {
                    "initialize_system": 1
                },
                "initialize_system_and_update_data_flags": {
                    "initialize_system_and_update_data_flags": 1,
                    "update_data_flags": 1
                },
                "initialize_system_and_update_data_flags_08004028": {
                    "": 1,
                    "initialization1": 1,
                    "initialize_system": 1,
                    "initialize_system_and_update_data_flags": 7,
                    "initialize_system_and_update_flags": 1,
                    "update_data_flags": 5,
                    "update_system_and_flags": 1,
                    "update_system_data_flags": 1
                },
                "process_i2c_sensor_data": {
                    "process_i2c_sensor_data": 1
                }
            },
            "called": [
                "FUN_08004c70",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_08002ea0"
            ],
            "calling": [
                "FUN_080041ae"
            ],
            "code": "\nvoid initialize_system_and_data_08004194(void)\n\n{\n  initialize_system_and_update_data_flags();\n  initialize_data_and_check_conditions();\n  initialize_and_process_i2c_sensor_data();\n  initialize_sensor_data();\n  DAT_200000f4 = 1;\n  DAT_20000150 = 1;\n  DAT_200001ac = 0xffffffff;\n  DAT_20000098 = 1;\n  DAT_200000c8 = 0x44bb8000;\n  DAT_20000124 = 0x44b54000;\n  DAT_20000180 = 0x44fa0000;\n  DAT_2000006c = 0;\n  DAT_200000ac = 0x408ccccd;\n  DAT_200000b0 = 0x3ca3d70a;\n  DAT_200000b4 = 0x438c0000;\n  DAT_200000b8 = 0x40900000;\n  DAT_200000bc = 0x3ca3d70a;\n  DAT_200000c0 = 0x43b40000;\n  DAT_20000108 = 0x40733333;\n  DAT_2000010c = 0x3ca3d70a;\n  DAT_20000110 = 0x43820000;\n  DAT_20000114 = 0x40733333;\n  DAT_20000118 = 0x3ca3d70a;\n  DAT_2000011c = 0x43a00000;\n  DAT_20000164 = 0x40400000;\n  DAT_20000168 = 0x3c23d70a;\n  DAT_2000016c = 0x438c0000;\n  DAT_20000170 = 0;\n  DAT_20000174 = 0;\n  DAT_20000178 = 0;\n  DAT_20000050 = 0x41200000;\n  DAT_20000054 = 0;\n  DAT_20000058 = 0;\n  DAT_2000005c = 0;\n  DAT_20000060 = 0;\n  DAT_20000064 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_system_and_data_08004194",
            "entrypoint": "0x08004194",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004194": "initialize_system_and_data_08004194",
                "initialize_and_process_i2c_sensor_data_08002ea0": "initialize_and_process_i2c_sensor_data",
                "initialize_data_and_check_conditions": "check_conditions",
                "initialize_data_and_check_conditions_08004c70": "initialize_data_and_check_conditions",
                "initialize_sensor_data_08003298": "initialize_sensor_data",
                "initialize_system_and_update_data_flags": "update_data_flags",
                "initialize_system_and_update_data_flags_08004028": "initialize_system_and_update_data_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041ae": {
            "additional_data": {
                "FUN_080041ae": {
                    "continuous_data_processing": 4,
                    "continuous_processor": 1,
                    "continuous_sensor_data_processing": 1,
                    "main_loop": 1,
                    "process_sensor_data": 13,
                    "process_sensor_data_loop": 2,
                    "run_data_processing": 1,
                    "run_data_processing_loop": 4,
                    "run_data_processor": 1,
                    "run_sensor_data_processing": 1,
                    "run_sensor_data_processing_loop": 1,
                    "run_sensor_processing": 1
                },
                "increment_data_counter_0800114c": {
                    "increment_data_counter": 31
                },
                "initialize_system_and_data_08004194": {
                    "initialize_system_and_data": 30
                },
                "process_and_update_sensor_data_0800411c": {
                    "process_and_upate_sensor_data": 1,
                    "process_and_update_sensor_data": 30
                },
                "shift_left_by32_bits_08003eb0": {
                    "left_shift_by32_bits": 1,
                    "shift_bits_left": 1,
                    "shift_data_left": 1,
                    "shift_left_by32_bits": 2,
                    "shift_left_by_32_bits": 7,
                    "shift_left_data_by_32_bits": 1
                }
            },
            "called": [
                "FUN_0800411c",
                "FUN_0800114c",
                "FUN_08004194",
                "FUN_08003eb0"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid process_sensor_data_loop_080041ae(void)\n\n{\n  shift_left_by_32_bits(0);\n  initialize_system_and_data();\n  do {\n    increment_data_counter();\n    process_and_update_sensor_data();\n  } while( true );\n}\n\n",
            "current_name": "process_sensor_data_loop_080041ae",
            "entrypoint": "0x080041ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041ae": "process_sensor_data_loop_080041ae",
                "increment_data_counter_0800114c": "increment_data_counter",
                "initialize_system_and_data_08004194": "initialize_system_and_data",
                "process_and_update_sensor_data_0800411c": "process_and_update_sensor_data",
                "shift_left_by32_bits_08003eb0": "shift_left_by_32_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041c4": {
            "additional_data": {
                "FUN_080041c4": {
                    "initialize_parameters": 15,
                    "initialize_params": 14,
                    "set_all_param_values_to_zero": 1,
                    "set_default_param_values": 1
                },
                "extraout_r1": {
                    "additional_output1": 1,
                    "extra_out": 1,
                    "extra_out1": 1,
                    "extra_out_param1": 1,
                    "extra_output": 2,
                    "extra_result1": 1,
                    "extra_return_value": 3,
                    "extra_value": 1,
                    "extraneous_value1": 1,
                    "output": 1,
                    "result": 2,
                    "return_value": 2,
                    "temporary": 1,
                    "unused_value": 1,
                    "unused_var1": 1
                },
                "param_1": {
                    "argument1": 1,
                    "ignored_param": 1,
                    "param1": 13,
                    "param_1": 1,
                    "unused": 1,
                    "unused1": 1,
                    "unused_1": 1,
                    "unused_param": 2,
                    "unused_param1": 8,
                    "value1": 1
                },
                "param_2": {
                    "argument2": 1,
                    "ignored_param": 1,
                    "param2": 13,
                    "param_2": 1,
                    "unused": 1,
                    "unused2": 1,
                    "unused_2": 1,
                    "unused_param": 2,
                    "unused_param2": 8,
                    "value2": 1
                },
                "param_3": {
                    "argument3": 1,
                    "param3": 17,
                    "param_3": 1,
                    "param_value1": 1,
                    "param_value3": 3,
                    "parameter3": 1,
                    "some_value": 1,
                    "unused_3": 1,
                    "unused_param3": 2,
                    "value1": 2,
                    "value3": 1
                },
                "param_4": {
                    "another_value": 1,
                    "argument4": 1,
                    "param4": 17,
                    "param_4": 1,
                    "param_value2": 1,
                    "param_value4": 3,
                    "parameter4": 1,
                    "unused_4": 1,
                    "unused_param4": 2,
                    "value2": 2,
                    "value4": 1
                },
                "set_param_value_08003fc4": {
                    "set_first_param_value": 2,
                    "set_param1_value": 2,
                    "set_param_value1": 2,
                    "set_parameter1": 1
                },
                "set_param_value_08003fd0": {
                    "set_param2_value": 2,
                    "set_param_value2": 2,
                    "set_parameter2": 1,
                    "set_second_param_value": 2
                },
                "set_param_value_08003fdc": {
                    "set_param3_value": 2,
                    "set_param_value3": 2,
                    "set_parameter3": 1,
                    "set_third_param_value": 2
                },
                "set_param_value_08003fe8": {
                    "set_fourth_param_value": 2,
                    "set_param4_value": 2,
                    "set_param_value4": 2,
                    "set_parameter4": 1
                }
            },
            "called": [
                "FUN_08003fc4",
                "FUN_08003fd0",
                "FUN_08003fe8",
                "FUN_08003fdc"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nvoid initialize_parameters_080041c4(undefined4 param1,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extra_return_value;\n  \n  set_first_param_value(0);\n  set_second_param_value(0);\n  set_third_param_value(0);\n  set_param4_value(0,extra_return_value,param3,param4);\n  return;\n}\n\n",
            "current_name": "initialize_parameters_080041c4",
            "entrypoint": "0x080041c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041c4": "initialize_parameters_080041c4",
                "extraout_r1": "extra_return_value",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "set_param_value_08003fc4": "set_first_param_value",
                "set_param_value_08003fd0": "set_second_param_value",
                "set_param_value_08003fdc": "set_third_param_value",
                "set_param_value_08003fe8": "set_param4_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800426c": {
            "additional_data": {
                "FUN_0800426c": {
                    "calculate_and_set_param_values": 3,
                    "calculate_and_set_params": 1,
                    "calculate_and_set_values": 3,
                    "calculate_and_update_values": 1,
                    "calculate_improved_values": 2,
                    "calculate_param_values": 1,
                    "calculate_parameter_value": 1,
                    "calculate_parameter_values": 6,
                    "calculate_parameters": 3,
                    "calculate_params": 3,
                    "calculate_reverse_params": 1,
                    "calculate_values": 2,
                    "calculate_values_and_set_params": 1,
                    "calculate_values_and_update_params": 1,
                    "optimize_and_set_values": 1,
                    "update_parameters": 1
                },
                "param_1": {
                    "input1": 13,
                    "input_param1": 3,
                    "input_param_1": 1,
                    "param1": 6,
                    "value1": 5,
                    "value_1": 3
                },
                "param_2": {
                    "input2": 13,
                    "input_param2": 3,
                    "input_param_2": 1,
                    "param2": 6,
                    "value2": 5,
                    "value_2": 3
                },
                "param_3": {
                    "input3": 13,
                    "input_param3": 3,
                    "input_param_3": 1,
                    "param3": 6,
                    "value3": 5,
                    "value_3": 3
                },
                "param_4": {
                    "input4": 13,
                    "input_param4": 3,
                    "input_param_4": 1,
                    "param4": 6,
                    "value4": 5,
                    "value_4": 3
                },
                "uVar1": {
                    "first_value": 1,
                    "float_1": 1,
                    "float_value1": 12,
                    "float_value_1": 3,
                    "result1": 3,
                    "value1": 11
                },
                "uVar2": {
                    "float_2": 1,
                    "float_value2": 12,
                    "float_value_2": 3,
                    "result2": 3,
                    "second_value": 1,
                    "value2": 11
                },
                "uVar3": {
                    "float_3": 1,
                    "float_value3": 12,
                    "float_value_3": 3,
                    "result3": 3,
                    "third_value": 1,
                    "value3": 11
                },
                "uVar4": {
                    "converted1": 1,
                    "converted_integer1": 1,
                    "converted_value1": 4,
                    "int_value1": 3,
                    "signed_int1": 3,
                    "signed_int_value1": 1,
                    "signed_int_value_1": 1,
                    "signed_integer1": 2,
                    "signed_value1": 2,
                    "signed_value_1": 1,
                    "temp1": 1,
                    "u_var4": 2,
                    "unsigned_integer_1": 1,
                    "unsigned_value1": 4,
                    "value4": 4
                },
                "uVar5": {
                    "converted2": 1,
                    "converted_integer2": 1,
                    "converted_value2": 4,
                    "int_value2": 3,
                    "signed_int2": 3,
                    "signed_int_value2": 1,
                    "signed_int_value_2": 1,
                    "signed_integer2": 2,
                    "signed_value2": 2,
                    "signed_value_2": 1,
                    "temp2": 1,
                    "u_var5": 2,
                    "unsigned_integer_2": 1,
                    "unsigned_value2": 4,
                    "value5": 4
                },
                "uVar6": {
                    "converted3": 1,
                    "converted_integer3": 1,
                    "converted_value3": 4,
                    "int_value3": 3,
                    "signed_int3": 3,
                    "signed_int_value3": 1,
                    "signed_int_value_3": 1,
                    "signed_integer3": 2,
                    "signed_value3": 2,
                    "signed_value_3": 1,
                    "temp3": 1,
                    "u_var6": 2,
                    "unsigned_integer_3": 1,
                    "unsigned_value3": 4,
                    "value6": 4
                },
                "uVar7": {
                    "converted4": 1,
                    "converted_integer4": 1,
                    "converted_value4": 4,
                    "int_value4": 3,
                    "signed_int4": 3,
                    "signed_int_value4": 1,
                    "signed_int_value_4": 1,
                    "signed_integer4": 2,
                    "signed_value4": 2,
                    "signed_value_4": 1,
                    "temp4": 1,
                    "u_var7": 2,
                    "unsigned_integer_4": 1,
                    "unsigned_value4": 4,
                    "value7": 4
                }
            },
            "called": [
                "FUN_08003fc4",
                "FUN_08003fd0",
                "FUN_08000adc",
                "FUN_08003fe8",
                "FUN_08000ad8",
                "FUN_08001078",
                "FUN_08003fdc"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\n\n\nvoid calculate_parameter_values_0800426c(undefined4 input1,undefined4 input2,undefined4 input3,undefined4 input4)\n\n{\n  undefined4 float_value1;\n  undefined4 float_value2;\n  undefined4 float_value3;\n  uint value4;\n  uint value5;\n  uint value6;\n  uint value7;\n  \n  float_value1 = calculate_float_value_08000ad8();\n  float_value2 = calculate_floating_point_value_08000adc(input1,input2);\n  float_value3 = calculate_float_value_08000ad8(float_value1,input3);\n  float_value3 = calculate_floating_point_value_08000adc(float_value3,input4);\n  calculate_float_value_08000ad8(float_value3,0x447a0000);\n  value4 = convert_to_signed_integer_08001078();\n  float_value3 = calculate_float_value_08000ad8(float_value2,input3);\n  float_value3 = calculate_float_value_08000ad8(float_value3,input4);\n  calculate_float_value_08000ad8(float_value3,0x447a0000);\n  value5 = convert_to_signed_integer_08001078();\n  float_value1 = calculate_floating_point_value_08000adc(float_value1,input3);\n  float_value1 = calculate_float_value_08000ad8(float_value1,input4);\n  calculate_float_value_08000ad8(float_value1,0x447a0000);\n  value6 = convert_to_signed_integer_08001078();\n  float_value1 = calculate_floating_point_value_08000adc(input3,float_value2);\n  float_value1 = calculate_floating_point_value_08000adc(float_value1,input4);\n  calculate_float_value_08000ad8(float_value1,0x447a0000);\n  value7 = convert_to_signed_integer_08001078();\n  if (999 < (int)value7) {\n    value7 = 1000;\n  }\n  if (999 < (int)value6) {\n    value6 = 1000;\n  }\n  if (999 < (int)value5) {\n    value5 = 1000;\n  }\n  if (999 < (int)value4) {\n    value4 = 1000;\n  }\n  DAT_200002a0 = value5 & ~((int)value5 >> 0x1f);\n  DAT_200002a4 = value4 & ~((int)value4 >> 0x1f);\n  DAT_2000029c = value6 & ~((int)value6 >> 0x1f);\n  DAT_20000298 = value7 & ~((int)value7 >> 0x1f);\n  set_param_value_08003fc4();\n  set_param_value_08003fd0(DAT_2000029c);\n  set_param_value_08003fdc(DAT_200002a0);\n  set_param_value_08003fe8(DAT_200002a4);\n  _DAT_200013dd = (short)DAT_20000298 + 1000;\n  DAT_200013df = (short)DAT_2000029c + 1000;\n  _DAT_200013e1 = (short)DAT_200002a0 + 1000;\n  DAT_200013e3 = (short)DAT_200002a4 + 1000;\n  return;\n}\n\n",
            "current_name": "calculate_parameter_values_0800426c",
            "entrypoint": "0x0800426c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800426c": "calculate_parameter_values_0800426c",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "float_value1",
                "uVar2": "float_value2",
                "uVar3": "float_value3",
                "uVar4": "value4",
                "uVar5": "value5",
                "uVar6": "value6",
                "uVar7": "value7"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004300": {
            "additional_data": {
                "FUN_08004300": {
                    "process_and_xor_data": 2,
                    "process_and_xor_string_data": 1,
                    "process_data": 26,
                    "process_data_with_checksum": 1,
                    "process_string_data": 1
                },
                "param_1": {
                    "checksum": 1,
                    "data1": 1,
                    "data_key": 1,
                    "input": 1,
                    "input_key": 1,
                    "input_param": 4,
                    "input_value": 10,
                    "input_xor": 1,
                    "key": 9,
                    "mod_key": 1,
                    "value1": 1
                },
                "param_2": {
                    "byte_array": 5,
                    "data": 13,
                    "data2": 1,
                    "data_array": 2,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input_buffer": 1,
                    "input_data": 3,
                    "string_data": 3
                },
                "param_3": {
                    "array_length": 5,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "data_length": 13,
                    "data_size": 1,
                    "length": 8,
                    "size": 1,
                    "string_length": 1
                },
                "pbVar2": {
                    "current_byte": 29,
                    "current_data": 1
                },
                "uVar1": {
                    "calculated_value": 1,
                    "combined_data_xor": 1,
                    "combined_result": 1,
                    "encrypted_value": 1,
                    "output": 1,
                    "processed_byte": 1,
                    "processed_value": 1,
                    "result": 16,
                    "result_value": 2,
                    "result_xor": 1,
                    "xor_result": 3,
                    "xored_result": 1
                }
            },
            "called": [
                "FUN_08004c8c",
                "FUN_08004c18"
            ],
            "calling": [
                "FUN_08004434",
                "FUN_080043f0",
                "FUN_08004348",
                "FUN_08004410",
                "FUN_08004384",
                "FUN_08004458",
                "FUN_080043bc"
            ],
            "code": "\nvoid process_and_xor_string_data_08004300(uint input_value,byte *data,uint data_length)\n\n{\n  uint result;\n  byte *current_byte;\n  \n  process_string_data_08004c8c(&DAT_0800732e);\n  process_binary_data_08004c18(data_length & 0xff);\n  result = data_length & 0xff ^ input_value;\n  process_binary_data_08004c18(input_value);\n  for (current_byte = data; (int)current_byte - (int)data < (int)data_length; current_byte = current_byte + 1) {\n    process_binary_data_08004c18(*current_byte);\n    result = result ^ *current_byte;\n  }\n  process_binary_data_08004c18(result);\n  return;\n}\n\n",
            "current_name": "process_and_xor_string_data_08004300",
            "entrypoint": "0x08004300",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004300": "process_and_xor_string_data_08004300",
                "param_1": "input_value",
                "param_2": "data",
                "param_3": "data_length",
                "pbVar2": "current_byte",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004348": {
            "additional_data": {
                "FUN_08004348": {
                    "initialize_data": 25,
                    "initialize_process": 1,
                    "initialize_process_and_xor": 1,
                    "initialize_string_processing": 1,
                    "process_and_xor": 1,
                    "process_and_xor_string_data": 2
                },
                "local_10": {
                    "constant_value": 2,
                    "data_address": 13,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_value": 3,
                    "default_value": 1,
                    "initial_value": 4,
                    "initialized_value": 1,
                    "new_data": 1,
                    "offset": 1,
                    "start_address": 1
                },
                "local_c": {
                    "masked_arg2": 1,
                    "masked_data": 3,
                    "masked_data_size": 6,
                    "masked_flags": 1,
                    "masked_input": 3,
                    "masked_length": 1,
                    "masked_param2": 8,
                    "masked_size": 2,
                    "masked_value": 5
                },
                "param_1": {
                    "arg1": 3,
                    "argument1": 1,
                    "data_ptr": 1,
                    "flag": 1,
                    "initial_value": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "param": 2,
                    "param1": 11,
                    "param_1": 1,
                    "parameter1": 1,
                    "source_address": 1,
                    "status": 2,
                    "undefined_param": 2,
                    "unused": 1,
                    "unused_param": 1
                },
                "param_2": {
                    "arg2": 2,
                    "data": 2,
                    "data_size": 9,
                    "flags": 2,
                    "input_param": 1,
                    "input_param2": 1,
                    "input_value": 3,
                    "length": 1,
                    "original_param2": 1,
                    "param2": 7,
                    "parameter2": 1,
                    "value_to_mask": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "additional_param": 1,
                    "arg3": 3,
                    "argument2": 1,
                    "context": 1,
                    "data": 1,
                    "flag": 1,
                    "input_param3": 1,
                    "original_param3": 1,
                    "param3": 10,
                    "param_3": 1,
                    "parameter3": 1,
                    "stack_value": 1,
                    "target_address": 1,
                    "undefined4_param": 1,
                    "undefined_param2": 1,
                    "unused": 1,
                    "unused_param2": 1,
                    "user_data": 1,
                    "value": 1
                },
                "uStack_8": {
                    "arg3_copy": 1,
                    "argument3": 1,
                    "extra_data": 1,
                    "input_param4": 1,
                    "param3_backup": 1,
                    "param3_copy": 9,
                    "param3_value": 1,
                    "param_4": 1,
                    "param_stack": 1,
                    "param_value": 1,
                    "stack_arg": 1,
                    "stack_param": 1,
                    "stack_value": 1,
                    "stack_variable": 3,
                    "undefined4_stack": 1,
                    "unused": 1,
                    "unused_var": 1,
                    "user_data": 1,
                    "user_ptr": 1
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid initialize_data_08004348(undefined4 param1,uint data_size,undefined4 param3)\n\n{\n  undefined4 data_address;\n  uint masked_param2;\n  undefined4 param3_copy;\n  \n  _DAT_20001423 = 0x40003e9;\n  _DAT_20001427 = 0;\n  DAT_20001429 = 0;\n  data_address = 0x40003e9;\n  masked_param2 = data_size & 0xff000000;\n  param3_copy = param3;\n  process_and_xor_string_data_08004300(100,&data_address,7);\n  return;\n}\n\n",
            "current_name": "initialize_data_08004348",
            "entrypoint": "0x08004348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004348": "initialize_data_08004348",
                "local_10": "data_address",
                "local_c": "masked_param2",
                "param_1": "param1",
                "param_2": "data_size",
                "param_3": "param3",
                "uStack_8": "param3_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004384": {
            "additional_data": {
                "FUN_08004384": {
                    "initialize_data": 3,
                    "process_and_xor": 1,
                    "process_and_xor_data": 2,
                    "process_and_xor_string": 10,
                    "process_and_xor_string_data": 9,
                    "process_data": 2,
                    "process_string": 1,
                    "process_string_data": 3
                },
                "local_14": {
                    "data": 1,
                    "data1": 3,
                    "data_1": 1,
                    "data_buffer": 2,
                    "data_offset": 1,
                    "data_pointer_1": 1,
                    "data_ptr": 1,
                    "encrypted_string": 1,
                    "local_var1": 2,
                    "offset": 1,
                    "source_address": 1,
                    "source_data": 1,
                    "string_data": 3,
                    "temp1": 1,
                    "temp_data": 1,
                    "temp_var1": 2,
                    "temp_var_1": 2,
                    "value1": 3,
                    "var1": 1,
                    "var_1": 1,
                    "xor_key": 1
                },
                "local_c": {
                    "filtered_flags": 1,
                    "local_var3": 2,
                    "masked_arg4": 1,
                    "masked_data": 4,
                    "masked_flags": 6,
                    "masked_input": 4,
                    "masked_input4": 2,
                    "masked_param4": 1,
                    "masked_param_4": 2,
                    "masked_value": 3,
                    "modified_input": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "var3": 1,
                    "var_3": 1
                },
                "param_1": {
                    "arg1": 2,
                    "arg_1": 1,
                    "data1": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input1": 7,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_data1": 1,
                    "input_param": 5,
                    "input_param1": 3,
                    "input_param_1": 1,
                    "input_value_1": 1,
                    "param1": 1,
                    "source_data": 1
                },
                "param_2": {
                    "arg2": 2,
                    "arg_2": 1,
                    "data2": 1,
                    "dest_data": 1,
                    "input2": 7,
                    "input_data2": 1,
                    "input_param2": 3,
                    "input_param_2": 1,
                    "input_value_2": 1,
                    "length": 1,
                    "length_param": 1,
                    "offset_pointer": 1,
                    "output_buffer": 1,
                    "param2": 1,
                    "param_2": 1,
                    "reserved_param": 1,
                    "unused_param": 5
                },
                "param_3": {
                    "arg3": 2,
                    "arg_3": 1,
                    "buffer_size": 1,
                    "data3": 1,
                    "input3": 7,
                    "input_data3": 1,
                    "input_param3": 3,
                    "input_param_3": 1,
                    "input_value_3": 1,
                    "offset_param": 1,
                    "param3": 1,
                    "param_3": 2,
                    "reserved_param2": 1,
                    "size": 1,
                    "size_pointer": 1,
                    "unused_param": 4,
                    "unused_param_2": 1
                },
                "param_4": {
                    "arg4": 2,
                    "arg_4": 1,
                    "config_flags": 1,
                    "data": 1,
                    "data4": 1,
                    "data_param": 1,
                    "flags": 6,
                    "input4": 6,
                    "input_data": 1,
                    "input_data4": 1,
                    "input_flags": 1,
                    "input_mask": 2,
                    "input_param4": 3,
                    "input_param_4": 1,
                    "input_value": 1,
                    "input_value_4": 1,
                    "options": 1
                },
                "process_and_xor_string_data_08004300": {
                    "process_and_xor_string_data_inner": 1
                },
                "uStack_10": {
                    "buffer_size": 1,
                    "constant_value": 3,
                    "data2": 3,
                    "data_2": 1,
                    "data_pointer_2": 1,
                    "dest_address": 1,
                    "destination_data": 1,
                    "encryption_key": 1,
                    "local_var2": 2,
                    "reserved_stack": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp_offset": 1,
                    "temp_value": 1,
                    "temp_var2": 2,
                    "temp_var_2": 2,
                    "unused_variable": 2,
                    "value2": 3,
                    "var2": 1,
                    "var_2": 1
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid process_and_xor_string_data_08004384(undefined4 input1,undefined4 input2,undefined4 input3,uint flags)\n\n{\n  undefined4 string_data;\n  undefined4 data2;\n  uint masked_flags;\n  \n  _DAT_200013bd = 0x2a0007;\n  string_data = _DAT_200013b9;\n  data2 = 0x2a0007;\n  _DAT_200013c1 = 0;\n  DAT_200013c3 = 0;\n  masked_flags = flags & 0xff000000;\n  process_and_xor_string_data_08004384_inner(0x65,&string_data,0xb,0,input1);\n  return;\n}\n\n",
            "current_name": "process_and_xor_string_data_08004384",
            "entrypoint": "0x08004384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004384": "process_and_xor_string_data_08004384",
                "local_14": "string_data",
                "local_c": "masked_flags",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "flags",
                "process_and_xor_string_data_08004300": "process_and_xor_string_data_inner",
                "uStack_10": "data2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080043bc": {
            "additional_data": {
                "FUN_080043bc": {
                    "copy_and_process_data": 10,
                    "copy_and_process_string": 1,
                    "copy_and_process_string_data": 14,
                    "copy_and_process_strings": 1,
                    "copy_process_and_xor_string_data": 1,
                    "process_and_xor_string": 3,
                    "process_and_xor_string_data": 1
                },
                "local_1c": {
                    "buffer": 1,
                    "copied_data_size_array": 1,
                    "copied_indexes": 1,
                    "copied_indices": 1,
                    "copied_values": 1,
                    "destination_data": 1,
                    "destination_string": 1,
                    "encryption_key": 1,
                    "index_buffer": 1,
                    "key": 1,
                    "process_params": 1,
                    "processed_data": 3,
                    "processed_data_array": 1,
                    "processed_string_data": 1,
                    "processed_values": 3,
                    "source_buffer": 1,
                    "source_strings": 1,
                    "string_data_lengths": 1,
                    "temp_array2": 1,
                    "temp_buffer": 1,
                    "temp_data": 1,
                    "temp_data_array": 1,
                    "temporary_buffer": 1,
                    "temporary_storage": 1,
                    "xor_array": 1,
                    "xor_key": 1,
                    "xor_key_buffer": 1
                },
                "local_24": {
                    "copied_data": 10,
                    "copied_data_array": 2,
                    "copied_string_data": 1,
                    "copied_strings": 1,
                    "copied_values": 4,
                    "copy_array": 1,
                    "copy_buffer": 1,
                    "data_buffer": 1,
                    "dest_buffer": 1,
                    "destination_strings": 1,
                    "encrypted_data": 1,
                    "output_data": 1,
                    "source_data": 1,
                    "source_string": 1,
                    "string_data": 1,
                    "string_data_copy": 2,
                    "temp_array": 1
                },
                "puVar3": {
                    "copied_data": 1,
                    "copied_values_ptr": 1,
                    "data_ptr": 1,
                    "dest_ptr": 2,
                    "destination_data_ptr": 1,
                    "destination_pointer": 4,
                    "destination_ptr": 1,
                    "output_data_pointer": 1,
                    "pointer_destination": 1
                },
                "puVar4": {
                    "input_data_pointer": 1,
                    "original_source": 1,
                    "pointer_source": 1,
                    "source_data_ptr": 1,
                    "source_pointer": 4,
                    "source_ptr": 5
                },
                "uVar1": {
                    "copy_item1": 1,
                    "current_string": 1,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_var_1": 1,
                    "temporary_value1": 1,
                    "value1": 2,
                    "value_1": 1
                },
                "uVar2": {
                    "copy_item2": 1,
                    "next_string": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var_2": 1,
                    "temporary_value2": 1,
                    "value2": 2,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid copy_process_and_xor_string_data_080043bc(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  undefined4 *destination_pointer;\n  undefined4 *source_ptr;\n  undefined4 copied_data [2];\n  undefined2 processed_data [6];\n  \n  source_ptr = (undefined4 *)&DAT_2000142a;\n  destination_pointer = copied_data;\n  do {\n    value1 = *source_ptr;\n    value2 = source_ptr[1];\n    source_ptr = source_ptr + 2;\n    *destination_pointer = value1;\n    destination_pointer[1] = value2;\n    destination_pointer = destination_pointer + 2;\n  } while (source_ptr != (undefined4 *)&DAT_2000143a);\n  *(undefined2 *)destination_pointer = DAT_2000143a;\n  process_and_xor_string_data_08004300(0x66,copied_data,0x12);\n  return;\n}\n\n",
            "current_name": "copy_process_and_xor_string_data_080043bc",
            "entrypoint": "0x080043bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080043bc": "copy_process_and_xor_string_data_080043bc",
                "local_1c": "processed_data",
                "local_24": "copied_data",
                "puVar3": "destination_pointer",
                "puVar4": "source_ptr",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080043f0": {
            "additional_data": {
                "FUN_080043f0": {
                    "process_and_xor_data": 4,
                    "process_and_xor_string": 9,
                    "process_and_xor_string_data": 17,
                    "process_data": 1
                },
                "auStack_8": {
                    "args_array": 1,
                    "array": 1,
                    "buffer": 1,
                    "data_and_length": 1,
                    "data_arr": 1,
                    "data_array": 13,
                    "data_buffer": 1,
                    "input_array": 1,
                    "local_var_array": 1,
                    "other_params": 1,
                    "parameters": 1,
                    "stack_array": 1,
                    "string_data": 3,
                    "temp_array": 1,
                    "temporary_array": 1
                },
                "local_10": {
                    "buffer_1": 1,
                    "data": 1,
                    "data1": 8,
                    "data3": 1,
                    "data_1": 3,
                    "data_address": 2,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_value1": 1,
                    "local_var1": 1,
                    "processed_data_start": 1,
                    "processed_string": 1,
                    "str_pointer": 1,
                    "string_data_1": 1,
                    "value1": 1,
                    "value_1": 1,
                    "xor_key": 3
                },
                "param_1": {
                    "address": 1,
                    "arg1": 7,
                    "data1": 1,
                    "data_pointer": 1,
                    "data_start": 1,
                    "input1": 4,
                    "input_1": 2,
                    "input_param1": 5,
                    "input_param_1": 5,
                    "unused_param": 1,
                    "unused_param1": 2,
                    "unused_param_1": 1
                },
                "param_2": {
                    "arg2": 7,
                    "data2": 1,
                    "data_end": 1,
                    "input2": 4,
                    "input_2": 2,
                    "input_param2": 5,
                    "input_param_2": 5,
                    "size": 1,
                    "unused_param": 1,
                    "unused_param2": 2,
                    "unused_param_2": 1,
                    "value": 1
                },
                "param_3": {
                    "arg3": 7,
                    "input3": 4,
                    "input_3": 2,
                    "input_array": 1,
                    "input_data": 3,
                    "input_param3": 5,
                    "input_param_3": 4,
                    "input_string": 1,
                    "length": 1,
                    "string_data": 3
                },
                "uStack_c": {
                    "buffer_2": 1,
                    "counter": 1,
                    "data2": 8,
                    "data4": 1,
                    "data_2": 3,
                    "data_pointer2": 1,
                    "data_value": 3,
                    "data_value2": 1,
                    "local_var2": 1,
                    "other_data_ptr": 1,
                    "processed_data_end": 1,
                    "str_length": 1,
                    "string_data_2": 1,
                    "value2": 1,
                    "value_2": 1,
                    "xor_key": 1,
                    "xor_mask": 1,
                    "xor_result": 1,
                    "xor_value": 2
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\n\n\nvoid process_and_xor_string_data_080043f0(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data_array [2];\n  \n  data1 = _DAT_200013dd;\n  data2 = _DAT_200013e1;\n  data_array[0] = arg3;\n  process_and_xor_string_data_080043f0_08004300(0x68,&data1,8,data_array);\n  return;\n}\n\n",
            "current_name": "process_and_xor_string_data_080043f0",
            "entrypoint": "0x080043f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080043f0": "process_and_xor_string_data_080043f0",
                "auStack_8": "data_array",
                "local_10": "data1",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "uStack_c": "data2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004410": {
            "additional_data": {
                "FUN_08004410": {
                    "decode_and_process_data": 1,
                    "decrypt_and_process_data": 1,
                    "process_and_xor_string": 1,
                    "process_and_xor_string_data": 26,
                    "process_data_and_xor": 1,
                    "process_xor_string": 1
                },
                "local_10": {
                    "config_value1": 1,
                    "constant": 1,
                    "constant1": 1,
                    "constant_data": 2,
                    "constant_value": 4,
                    "data": 1,
                    "data1": 7,
                    "data_1": 1,
                    "data_one": 1,
                    "data_ptr": 2,
                    "data_start": 3,
                    "data_value": 1,
                    "data_value1": 1,
                    "data_value_1": 1,
                    "default_data": 1,
                    "local_variable1": 1,
                    "some_data": 1,
                    "string_data": 1
                },
                "local_c": {
                    "combined_data": 5,
                    "combined_value": 3,
                    "concatenated_data": 4,
                    "concatenated_value": 1,
                    "config_value2": 1,
                    "data2": 7,
                    "data_2": 1,
                    "data_two": 1,
                    "data_value2": 1,
                    "data_value_2": 1,
                    "dynamic_data": 1,
                    "local_variable2": 1,
                    "modified_data": 1,
                    "processed_data": 2,
                    "transformed_data": 1
                },
                "param_1": {
                    "arg1": 6,
                    "config_param1": 1,
                    "data1": 3,
                    "data_pointer": 1,
                    "input1": 2,
                    "input_1": 1,
                    "input_data": 1,
                    "input_param1": 5,
                    "input_parameter_1": 1,
                    "param1": 1,
                    "unknown_param": 1,
                    "unknown_parameter": 1,
                    "unused_param": 5,
                    "unused_parameter": 2
                },
                "param_2": {
                    "arg2": 6,
                    "config_param2": 1,
                    "data": 1,
                    "data2": 3,
                    "data_address": 1,
                    "data_length": 1,
                    "data_pointer": 1,
                    "data_value": 1,
                    "input2": 2,
                    "input_2": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param2": 5,
                    "input_parameter_2": 1,
                    "input_value": 1,
                    "param2": 1,
                    "string_data": 1,
                    "string_param": 1,
                    "unknown_param2": 1
                },
                "param_3": {
                    "arg3": 6,
                    "config_param3": 1,
                    "data": 1,
                    "data3": 3,
                    "data_param": 1,
                    "data_size": 1,
                    "input3": 2,
                    "input_3": 1,
                    "input_param2": 1,
                    "input_param3": 5,
                    "input_parameter_3": 1,
                    "input_value": 1,
                    "output_param": 1,
                    "output_value": 1,
                    "param3": 1,
                    "size": 1,
                    "target_address": 1,
                    "unknown_param3": 1,
                    "xor_key": 1
                },
                "uStack_8": {
                    "arg3": 1,
                    "arg3_stack": 1,
                    "config_value3": 1,
                    "data3": 6,
                    "data3_copy": 1,
                    "data_3": 1,
                    "data_size": 1,
                    "data_three": 1,
                    "data_value3": 1,
                    "data_value_3": 1,
                    "input_data": 2,
                    "input_param3": 1,
                    "input_param4": 1,
                    "input_stack": 1,
                    "local_variable3": 1,
                    "param3_copy": 1,
                    "stack_data": 3,
                    "stack_value": 2,
                    "stack_var": 1,
                    "target_data": 1,
                    "temp_data": 1,
                    "xor_value": 1
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid process_and_xor_string_data_08004410(undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  undefined4 data1;\n  undefined4 data2;\n  undefined4 data3;\n  \n  data1 = DAT_20001395;\n  data2 = CONCAT22((short)((uint)arg2 >> 0x10),DAT_20001399);\n  data3 = arg3;\n  process_and_xor_string_data_08004410_08004300(0x6c,&data1,6);\n  return;\n}\n\n",
            "current_name": "process_and_xor_string_data_08004410",
            "entrypoint": "0x08004410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004410": "process_and_xor_string_data_08004410",
                "local_10": "data1",
                "local_c": "data2",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "uStack_8": "data3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004434": {
            "additional_data": {
                "FUN_08004434": {
                    "decrypt_and_process_string": 1,
                    "process_and_xor_data": 1,
                    "process_and_xor_string": 8,
                    "process_and_xor_string_data": 16,
                    "process_data": 2,
                    "process_data_and_xor_string": 1,
                    "process_string_data": 1
                },
                "local_10": {
                    "buffer_size": 1,
                    "constant1": 1,
                    "constant_data": 1,
                    "constant_value": 3,
                    "data": 2,
                    "data1": 2,
                    "data_address": 1,
                    "data_array": 1,
                    "data_pointer": 2,
                    "data_ptr": 4,
                    "data_start": 1,
                    "data_value1": 1,
                    "default_value": 1,
                    "encrypted_data": 1,
                    "new_value4": 1,
                    "pointer_1": 1,
                    "source_value": 1,
                    "string_data": 2,
                    "string_data1": 1,
                    "string_data_1": 1,
                    "var4": 1
                },
                "local_c": {
                    "combined_data": 3,
                    "combined_input_param": 1,
                    "combined_value": 1,
                    "combined_values": 1,
                    "concatenated_data": 5,
                    "concatenated_param": 1,
                    "concatenated_value": 3,
                    "constant2": 1,
                    "data2": 2,
                    "data_value2": 1,
                    "destination_address": 1,
                    "destination_value": 1,
                    "masked_constant": 1,
                    "new_value5": 1,
                    "pointer_2": 1,
                    "processed_data": 2,
                    "string_data2": 1,
                    "string_data_2": 1,
                    "string_length": 1,
                    "var5": 1
                },
                "param_1": {
                    "arg1": 3,
                    "data1": 1,
                    "data_1": 1,
                    "data_pointer": 1,
                    "initial_value": 1,
                    "input1": 4,
                    "input_data": 1,
                    "input_param1": 2,
                    "input_value1": 1,
                    "new_value1": 1,
                    "param1": 1,
                    "source_address": 1,
                    "undefined_param_1": 1,
                    "unknown_param": 1,
                    "unused": 1,
                    "unused_param": 5,
                    "unused_parameter": 2,
                    "unused_variable": 1,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 3,
                    "data": 3,
                    "data2": 1,
                    "data_2": 1,
                    "data_address": 1,
                    "data_param": 1,
                    "destination_address": 1,
                    "input2": 4,
                    "input_data": 1,
                    "input_param": 3,
                    "input_param2": 2,
                    "input_value": 1,
                    "input_value2": 1,
                    "masked_value": 1,
                    "new_value2": 1,
                    "param2": 1,
                    "param_value": 1,
                    "source_address": 1,
                    "undefined_param_2": 1,
                    "var2": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "additional_param": 1,
                    "arg3": 3,
                    "data": 2,
                    "data3": 1,
                    "data_3": 1,
                    "data_param": 1,
                    "input": 1,
                    "input3": 4,
                    "input_data": 2,
                    "input_param3": 2,
                    "input_value3": 1,
                    "length": 1,
                    "length_of_data": 1,
                    "new_value3": 1,
                    "output_param": 1,
                    "param3": 1,
                    "stack_data": 1,
                    "stack_param": 1,
                    "string_param": 1,
                    "undefined_param_3": 1,
                    "var3": 1
                },
                "process_and_xor_string_data_08004300": {
                    "process_data": 1
                },
                "uStack_8": {
                    "arg3_copy": 1,
                    "data": 1,
                    "data3": 2,
                    "data_3": 1,
                    "data_length": 1,
                    "data_value": 1,
                    "data_value3": 1,
                    "input3": 1,
                    "input3_copy": 1,
                    "input_buffer": 1,
                    "input_param": 1,
                    "input_param3": 1,
                    "new_value6": 1,
                    "param3_value": 1,
                    "stack_data": 2,
                    "stack_input": 1,
                    "stack_param": 1,
                    "stack_value": 3,
                    "stack_var": 1,
                    "stack_variable": 2,
                    "string_data": 1,
                    "string_data_3": 1,
                    "unused": 1,
                    "unused_stack_var": 1,
                    "var6": 1
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid process_data_and_xor_string_08004434(undefined4 unused_param,undefined4 input2,undefined4 input3)\n\n{\n  undefined4 data_ptr;\n  undefined4 concatenated_data;\n  undefined4 stack_value;\n  \n  data_ptr = DAT_200014ab;\n  concatenated_data = CONCAT22((short)((uint)input2 >> 0x10),DAT_200014af);\n  stack_value = input3;\n  process_data(0x6d,&data_ptr,6);\n  return;\n}\n\n",
            "current_name": "process_data_and_xor_string_08004434",
            "entrypoint": "0x08004434",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004434": "process_data_and_xor_string_08004434",
                "local_10": "data_ptr",
                "local_c": "concatenated_data",
                "param_1": "unused_param",
                "param_2": "input2",
                "param_3": "input3",
                "process_and_xor_string_data_08004300": "process_data",
                "uStack_8": "stack_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004458": {
            "additional_data": {
                "FUN_08004458": {
                    "copy_and_process_data": 7,
                    "copy_and_process_string": 1,
                    "copy_and_process_string_data": 5,
                    "decompile_and_process_data": 1,
                    "decrypt_and_process_string_data": 1,
                    "process_and_xor_data": 1,
                    "process_and_xor_string": 6,
                    "process_and_xor_string_data": 8,
                    "reverse_and_xor_data": 1
                },
                "local_24": {
                    "additional_array": 1,
                    "array_2": 1,
                    "buffer2": 1,
                    "destination_array": 1,
                    "index_array": 2,
                    "input_data": 1,
                    "key_block": 1,
                    "source_array": 3,
                    "source_buffer": 1,
                    "src_array": 3,
                    "src_data": 1,
                    "string_chunk": 1,
                    "string_data": 2,
                    "temp_array": 1,
                    "temp_array2": 3,
                    "temp_array_2": 1,
                    "temp_buffer": 3,
                    "temp_data": 1,
                    "temporary_buffer": 1,
                    "xor_key_buffer": 1,
                    "xor_keys": 1
                },
                "local_30": {
                    "array_1": 1,
                    "buffer": 3,
                    "copied_data_array": 1,
                    "copy_buffer": 1,
                    "data": 3,
                    "data_array": 1,
                    "data_block": 1,
                    "data_buffer": 2,
                    "data_chunk": 1,
                    "dest_array": 3,
                    "dest_data": 1,
                    "destination_array": 3,
                    "destination_buffer": 1,
                    "input_data": 1,
                    "output_data": 1,
                    "processed_array": 1,
                    "source_array": 1,
                    "source_data": 1,
                    "temp_array": 3,
                    "temp_array1": 1
                },
                "puVar1": {
                    "dest": 1,
                    "dest_array": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 6,
                    "destination": 7,
                    "destination_array": 2,
                    "destination_pointer": 2,
                    "destination_ptr": 2,
                    "dst_ptr": 1,
                    "new_array": 1,
                    "new_data_ptr": 1,
                    "source": 1,
                    "target_ptr": 1
                },
                "puVar2": {
                    "destination": 1,
                    "original_array": 1,
                    "original_data_ptr": 1,
                    "source": 7,
                    "source_array": 2,
                    "source_pointer": 2,
                    "source_ptr": 3,
                    "src": 1,
                    "src_array": 1,
                    "src_pointer": 1,
                    "src_ptr": 7
                },
                "puVar4": {
                    "current_destination": 1,
                    "current_destination_ptr": 1,
                    "dest_iter": 1,
                    "dest_ptr": 4,
                    "dest_ptr_offset": 1,
                    "dest_ptr_temp": 3,
                    "dest_temp_pointer": 1,
                    "destination": 1,
                    "destination_array_ptr": 1,
                    "destination_iterator": 1,
                    "destination_pointer": 1,
                    "destination_ptr": 1,
                    "destination_ptr_copy": 1,
                    "dst_ptr": 1,
                    "new_array2": 1,
                    "new_data_ptr_temp": 1,
                    "source_ptr": 1,
                    "temp_dest_ptr": 1,
                    "temp_destination": 1,
                    "temp_destination_pointer": 1,
                    "temp_ptr1": 1,
                    "updated_destination_pointer": 1
                },
                "puVar5": {
                    "current_source": 1,
                    "current_source_ptr": 1,
                    "destination_ptr": 1,
                    "original_array2": 1,
                    "original_data_ptr_temp": 1,
                    "source": 1,
                    "source_array_ptr": 1,
                    "source_iterator": 1,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "source_ptr_copy": 1,
                    "src_iter": 1,
                    "src_ptr": 5,
                    "src_ptr_offset": 1,
                    "src_ptr_temp": 3,
                    "src_temp_pointer": 1,
                    "temp_ptr2": 1,
                    "temp_source": 1,
                    "temp_source_pointer": 1,
                    "temp_src_ptr": 1,
                    "updated_source_pointer": 1
                },
                "uVar3": {
                    "temp": 8,
                    "temp_value": 14,
                    "temp_var": 3,
                    "temporary_value": 2,
                    "tmp": 1
                }
            },
            "called": [
                "FUN_08004300"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid process_and_xor_string_data_08004458(void)\n\n{\n  undefined4 *destination;\n  undefined4 *src_ptr;\n  undefined4 temp_value;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 data [3];\n  undefined2 temp_array2 [10];\n  \n  destination = data;\n  src_ptr = &DAT_2000139b;\n  do {\n    src_ptr = src_ptr;\n    dest_ptr = destination;\n    temp_value = src_ptr[1];\n    *dest_ptr = *src_ptr;\n    dest_ptr[1] = temp_value;\n    destination = dest_ptr + 2;\n    src_ptr = src_ptr + 2;\n  } while (src_ptr + 2 != (undefined4 *)0x200013b3);\n  dest_ptr[2] = uRam200013b3;\n  *(undefined2 *)(dest_ptr + 3) = *(undefined2 *)(src_ptr + 3);\n  process_and_xor_string_data_08004458_08004300(0x70,data,0x1e);\n  return;\n}\n\n",
            "current_name": "process_and_xor_string_data_08004458",
            "entrypoint": "0x08004458",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004458": "process_and_xor_string_data_08004458",
                "local_24": "temp_array2",
                "local_30": "data",
                "puVar1": "destination",
                "puVar2": "src_ptr",
                "puVar4": "dest_ptr",
                "puVar5": "src_ptr",
                "uVar3": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004490": {
            "additional_data": {
                "FUN_08004490": {
                    "error_handler": 1,
                    "error_handling_loop": 1,
                    "error_processing": 1,
                    "error_processing_loop": 1,
                    "handle_error": 3,
                    "print_error_details": 1,
                    "print_error_message": 1,
                    "print_error_message_repeatedly": 1,
                    "process_error": 13,
                    "process_error_loop": 1,
                    "process_error_message": 7
                },
                "clear_and_process_binary_data_08004cac": {
                    "clear_and_print_binary_data": 1,
                    "clear_and_process_binary_data": 11
                },
                "do": {
                    "loop": 1
                },
                "param_1": {
                    "error_description": 3,
                    "error_message": 19,
                    "error_msg": 1,
                    "error_name": 1,
                    "error_string": 4,
                    "error_type": 3
                },
                "param_2": {
                    "error_line": 2,
                    "line_number": 29
                },
                "process_binary_data_08004c18": {
                    "print_binary_data": 1,
                    "process_binary_data": 11
                },
                "process_string_data_08004c8c": {
                    "print_string_data": 1,
                    "process_string_data": 11
                },
                "set_param_value_08001424": {
                    "set_param_value": 4,
                    "set_parameter_value": 8
                },
                "thunk_FUNC_08001168": {
                    "delay": 1,
                    "thunk_delay": 1,
                    "thunk_function": 10
                },
                "xor_param_and_ptr_0800142e": {
                    "combine_parameter_and_pointer": 1,
                    "toggle_parameter_value_and_pointer": 1,
                    "xor_param_and_pointer": 1,
                    "xor_param_and_ptr": 3,
                    "xor_parameter_and_ptr": 2,
                    "xor_parameter_value_and_pointer": 3,
                    "xor_parameter_value_and_ptr": 1
                }
            },
            "called": [
                "FUN_08004cac",
                "FUN_08004c8c",
                "thunk_FUN_08001168",
                "FUN_08001424",
                "FUN_0800142e",
                "FUN_08004c18"
            ],
            "calling": [
                "FUN_0800403c",
                "FUN_0800407c",
                "FUN_080040b8",
                "FUN_0800458c",
                "FUN_08004514"
            ],
            "code": "\nvoid process_error_message_08004490(undefined4 error_message,undefined4 line_number)\n\n{\n  set_parameter_value(0x40011000,0x4000,1);\n  set_parameter_value(0x40011000,0x8000,0);\n  set_parameter_value(0x40011000,0x2000,0);\n  loop {\n    xor_parameter_value_and_pointer(0x40011000,0x4000);\n    xor_parameter_value_and_pointer(0x40011000,0x8000);\n    xor_parameter_value_and_pointer(0x40011000,0x2000);\n    process_string_data(\"Error with \");\n    process_string_data(error_message);\n    process_string_data(\" at line: \");\n    clear_and_process_binary_data(line_number);\n    process_binary_data(10);\n    thunk_FUNC_08001168(500);\n  } while( true );\n}\n\n",
            "current_name": "process_error_message_08004490",
            "entrypoint": "0x08004490",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004490": "process_error_message_08004490",
                "clear_and_process_binary_data_08004cac": "clear_and_process_binary_data",
                "do": "loop",
                "param_1": "error_message",
                "param_2": "line_number",
                "process_binary_data_08004c18": "process_binary_data",
                "process_string_data_08004c8c": "process_string_data",
                "set_param_value_08001424": "set_parameter_value",
                "xor_param_and_ptr_0800142e": "xor_parameter_value_and_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004514": {
            "additional_data": {
                "FUN_08004514": {
                    "initialize_and_configure_peripherals": 2,
                    "initialize_and_process_peripherals": 3,
                    "initialize_and_update_data": 1,
                    "initialize_and_update_memory": 3,
                    "initialize_peripherals": 22
                },
                "check_and_initialize_mpu9250_0800209c": {
                    "init_mpu9250": 1
                },
                "check_conditions_and_values_08001b58": {
                    "check_conditions_values": 1
                },
                "get_data_value_08002214": {
                    "retrieve_data_value": 1
                },
                "iVar1": {
                    "check_result": 2,
                    "check_value": 1,
                    "condition_check": 1,
                    "condition_check_result": 4,
                    "condition_result": 12,
                    "condition_value": 1,
                    "conditions_result": 1,
                    "error": 1,
                    "result": 6
                },
                "iVar4": {
                    "check_result": 1,
                    "error_code": 1,
                    "initial_value": 1,
                    "initialization_result": 1,
                    "loop_counter": 1,
                    "mpu9250_check_result": 1,
                    "mpu9250_result": 3,
                    "mpu9250_status": 1,
                    "mpu_check": 1,
                    "mpu_check_result": 3,
                    "mpu_init_status": 1,
                    "mpu_initialize_result": 1,
                    "mpu_result": 1,
                    "mpu_status": 3,
                    "mpu_value": 2,
                    "result": 1
                },
                "initialize_memory_08001214": {
                    "init_memory": 1,
                    "initialize_memory": 1
                },
                "local_10": {
                    "condition_four": 1,
                    "constant4": 1,
                    "constant_4": 3,
                    "constant_value_4": 1,
                    "counter": 1,
                    "flag": 2,
                    "flag4": 1,
                    "flag_4": 2,
                    "flag_code": 1,
                    "flag_four": 1,
                    "flag_initialized": 1,
                    "initial_flag": 1,
                    "initial_value_4": 1,
                    "initialize_zero_value": 1,
                    "initialized": 2,
                    "initialized_flag": 1,
                    "local_variable": 1,
                    "local_variable_10": 1,
                    "loop_counter_4": 1,
                    "loop_variable_6": 1,
                    "memory_address": 1,
                    "memory_initialization_flag": 1,
                    "parameter4": 1,
                    "peripherals_value_4": 1,
                    "value4": 1,
                    "variable_2": 1
                },
                "local_14": {
                    "condition_three": 1,
                    "constant3": 1,
                    "constant_3": 3,
                    "constant_value": 1,
                    "constant_value_3": 1,
                    "constant_value_copy": 1,
                    "current_step": 1,
                    "flag3": 1,
                    "flag_3": 2,
                    "flag_result": 1,
                    "flag_three": 1,
                    "increment_value": 1,
                    "initial_value_3": 1,
                    "initialize_second_value": 1,
                    "local_value": 1,
                    "local_variable_14": 1,
                    "loop_counter2": 1,
                    "loop_counter_3": 1,
                    "loop_variable_5": 1,
                    "parameter3": 1,
                    "peripherals_value_3": 1,
                    "process_check_value": 1,
                    "sensor_count": 2,
                    "temp_value_2": 1,
                    "value3": 1,
                    "variable_1": 1
                },
                "local_1c": {
                    "buffer_size": 1,
                    "condition_flag": 1,
                    "condition_two": 1,
                    "condition_value": 1,
                    "constant2": 1,
                    "constant_2": 3,
                    "constant_value": 1,
                    "constant_value_2": 1,
                    "end_value": 1,
                    "flag2": 1,
                    "flag_2": 2,
                    "flag_index": 1,
                    "flag_two": 1,
                    "flag_value": 1,
                    "initial_value_2": 1,
                    "initialize_limit": 1,
                    "local_variable_1c": 1,
                    "loop_counter_2": 1,
                    "loop_variable_4": 1,
                    "max_steps": 1,
                    "maximum_value": 2,
                    "parameter2": 1,
                    "peripherals_value_2": 1,
                    "sample_rate": 1,
                    "sensor_id": 1,
                    "threshold_value": 1,
                    "value2": 1
                },
                "local_20": {
                    "condition_flag": 1,
                    "condition_one": 1,
                    "constant1": 1,
                    "constant_1": 3,
                    "constant_value_1": 1,
                    "enable_flag": 1,
                    "flag": 1,
                    "flag1": 1,
                    "flag_1": 2,
                    "flag_enable": 1,
                    "flag_one": 1,
                    "flag_value": 1,
                    "initial_value": 3,
                    "initial_value_1": 1,
                    "initialization_flag": 1,
                    "initialize_value": 1,
                    "local_variable_20": 1,
                    "loop_counter": 1,
                    "loop_counter_1": 1,
                    "loop_variable_3": 1,
                    "parameter1": 1,
                    "peripherals_value_1": 1,
                    "sensor_status": 1,
                    "start_value": 1,
                    "step": 1,
                    "value1": 1
                },
                "local_30": {
                    "additional_values": 1,
                    "condition_values": 2,
                    "conditional_values": 1,
                    "conditions": 1,
                    "conditions_values": 1,
                    "configuration_values": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_values": 2,
                    "device_configuration": 1,
                    "error_message": 1,
                    "intermediate_values": 1,
                    "local_array": 1,
                    "local_memory": 1,
                    "memory_values": 1,
                    "mpu9250_initialization_data": 1,
                    "mpu9250_parameters": 1,
                    "mpu_init_values_array": 1,
                    "mpu_values": 1,
                    "parameter_array": 1,
                    "peripheral_values": 1,
                    "peripherals_values": 1,
                    "process_values": 1,
                    "sensor_settings": 1,
                    "values": 4,
                    "values_array": 1
                },
                "local_34": {
                    "buffer_size": 1,
                    "condition_2": 1,
                    "data_length": 1,
                    "data_length_copy": 1,
                    "error_address": 1,
                    "error_code2": 1,
                    "error_code_copy2": 1,
                    "error_code_copy_2": 1,
                    "error_status": 1,
                    "error_value": 3,
                    "init_status": 1,
                    "loop_counter": 1,
                    "memory_address": 1,
                    "memory_address_2": 1,
                    "memory_size_flag": 1,
                    "mpu9250_flag": 1,
                    "mpu9250_input_parameter4": 1,
                    "mpu9250_last_calibration": 1,
                    "mpu9250_parameter2": 1,
                    "mpu9250_parameter_4": 1,
                    "mpu9250_status_initialized": 1,
                    "mpu_error_value": 1,
                    "mpu_result": 1,
                    "mpu_updated_value": 1,
                    "parameter4": 1,
                    "previous_error": 1,
                    "previous_error_code": 1,
                    "temp_value": 1,
                    "value_3": 1
                },
                "local_38": {
                    "bit_flag": 1,
                    "buffer_length": 1,
                    "buffer_size": 5,
                    "condition_1": 1,
                    "data_address": 1,
                    "data_length": 1,
                    "data_size": 2,
                    "error_bitmask": 1,
                    "gpio_output": 1,
                    "initial_value": 1,
                    "memory_address": 1,
                    "memory_address_1": 1,
                    "memory_address_flag": 1,
                    "memory_block_size": 1,
                    "memory_size": 1,
                    "mpu9250_input_parameter3": 1,
                    "mpu9250_parameter1": 1,
                    "mpu9250_parameter_3": 1,
                    "mpu9250_settings": 1,
                    "mpu_init_value": 1,
                    "mpu_offset": 1,
                    "mpu_value": 1,
                    "parameter3": 1,
                    "peripheral_value": 1,
                    "peripherals_flag": 1,
                    "value_2": 1
                },
                "local_3c": {
                    "error": 1,
                    "error_code": 3,
                    "error_code1": 1,
                    "error_code_copy": 2,
                    "error_message_result": 1,
                    "error_status": 3,
                    "error_status_backup": 1,
                    "error_value": 5,
                    "loop_variable_2": 1,
                    "mpu9250_calibration_status": 1,
                    "mpu9250_input_parameter2": 1,
                    "mpu9250_parameter_2": 1,
                    "mpu9250_status_error": 1,
                    "mpu_value_2": 1,
                    "parameter2": 1,
                    "peripherals_value": 1,
                    "process_error_result": 1,
                    "temp_error_code": 1,
                    "temp_var2": 1,
                    "value_1": 1,
                    "value_2": 1,
                    "variable_2": 1
                },
                "local_40": {
                    "device_id": 1,
                    "error_code": 1,
                    "error_count": 1,
                    "error_status": 1,
                    "index": 1,
                    "iteration_counter": 2,
                    "loop_variable_1": 1,
                    "mpu9250_initialized": 1,
                    "mpu9250_input_parameter1": 1,
                    "mpu9250_parameter_1": 1,
                    "mpu9250_status": 4,
                    "mpu9250_value": 3,
                    "mpu_id": 1,
                    "mpu_init_result": 1,
                    "mpu_initial_value": 2,
                    "mpu_initialized": 1,
                    "mpu_memory_address": 1,
                    "mpu_value": 1,
                    "mpu_value_1": 1,
                    "parameter1": 1,
                    "peripheral_status": 1,
                    "temp_var1": 1,
                    "value_1": 1,
                    "variable_1": 1
                },
                "local_44": {
                    "condition_flag": 1,
                    "error_code": 11,
                    "error_flag": 4,
                    "error_flags": 1,
                    "error_message": 2,
                    "error_message_code": 1,
                    "error_message_flag": 1,
                    "error_message_flags": 3,
                    "error_message_length": 3,
                    "error_value": 3,
                    "file_length": 1
                },
                "local_c": {
                    "baud_rate": 1,
                    "condition_five": 1,
                    "constant5": 1,
                    "constant_5": 3,
                    "constant_value": 4,
                    "constant_value_5": 1,
                    "initial_value_5": 1,
                    "initialize_flag": 1,
                    "local_variable_c": 1,
                    "loop_counter_5": 1,
                    "memory_address": 8,
                    "memory_address_offset": 1,
                    "memory_initialization_address": 1,
                    "memory_value": 1,
                    "mpu_init_constant": 1,
                    "parameter5": 1,
                    "peripherals_value_5": 1,
                    "value5": 1
                },
                "process_error_message_08004490": {
                    "display_error_message": 1
                },
                "set_bit_flag_08001240": {
                    "set_bit_flag": 1,
                    "set_flag": 1
                },
                "uVar2": {
                    "data_value": 30
                },
                "uVar3": {
                    "error_code": 7,
                    "error_line_number": 1,
                    "error_message_id": 5,
                    "error_message_index": 1,
                    "error_message_token": 1,
                    "error_value": 1,
                    "file_code": 1,
                    "file_error_code": 1,
                    "file_index": 1,
                    "file_line": 1,
                    "file_line_number": 4,
                    "file_name": 1,
                    "file_offset": 1,
                    "line_number": 1,
                    "loop_counter": 1,
                    "message_code": 1,
                    "process_value": 1
                },
                "update_memory_address_08001194": {
                    "update_memory": 1,
                    "update_memory_address": 1
                }
            },
            "called": [
                "FUN_08001b58",
                "FUN_08001240",
                "FUN_0800209c",
                "FUN_08001194",
                "FUN_08004490",
                "FUN_08001214",
                "FUN_08002214"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nvoid initialize_and_process_peripherals_08004514(void)\n\n{\n  int condition_result;\n  uint data_value;\n  undefined4 error_code;\n  int mpu_check_result;\n  undefined4 error_code;\n  int mpu9250_status;\n  int error_value;\n  undefined4 buffer_size;\n  int error_value;\n  undefined4 values [4];\n  undefined4 initial_value;\n  undefined4 constant_2;\n  undefined4 constant_3;\n  undefined4 constant_4;\n  undefined4 memory_address;\n  \n  initial_value = 1;\n  constant_2 = 0x10;\n  mpu_check_result = 2;\n  constant_4 = 0;\n  values[0] = 2;\n  constant_3 = 2;\n  memory_address = 0x380000;\n  condition_result = check_conditions_values(values);\n  if (condition_result == 0) goto LAB_08004540;\n  error_code = 0x3c;\n  while( true ) {\n    condition_result = display_error_message(\"../Src/peripherals.c\",error_code);\nLAB_08004540:\n    error_code = 0xf;\n    buffer_size = 0x400;\n    mpu9250_status = mpu_check_result;\n    error_value = condition_result;\n    error_value = condition_result;\n    mpu_check_result = init_mpu9250(&error_code,mpu_check_result);\n    if (mpu_check_result == 0) break;\n    error_code = 0x49;\n  }\n  data_value = retrieve_data_value();\n  initialize_memory(data_value / 1000);\n  set_bit_flag(4);\n  update_memory_address(0xffffffff,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_and_process_peripherals_08004514",
            "entrypoint": "0x08004514",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004514": "initialize_and_process_peripherals_08004514",
                "check_and_initialize_mpu9250_0800209c": "init_mpu9250",
                "check_conditions_and_values_08001b58": "check_conditions_values",
                "get_data_value_08002214": "retrieve_data_value",
                "iVar1": "condition_result",
                "iVar4": "mpu_check_result",
                "initialize_memory_08001214": "initialize_memory",
                "local_10": "constant_4",
                "local_14": "constant_3",
                "local_1c": "constant_2",
                "local_20": "initial_value",
                "local_30": "values",
                "local_34": "error_value",
                "local_38": "buffer_size",
                "local_3c": "error_value",
                "local_40": "mpu9250_status",
                "local_44": "error_code",
                "local_c": "memory_address",
                "process_error_message_08004490": "display_error_message",
                "set_bit_flag_08001240": "set_bit_flag",
                "uVar2": "data_value",
                "uVar3": "error_code",
                "update_memory_address_08001194": "update_memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800458c": {
            "additional_data": {
                "DAT_200014c8": {
                    "data_addr13": 1
                },
                "DAT_200014cc": {
                    "data_flag22": 1
                },
                "DAT_200014d0": {
                    "data_flag23": 1
                },
                "DAT_200014d4": {
                    "data_addr14": 1
                },
                "DAT_200014d8": {
                    "data_flag24": 1
                },
                "DAT_20001504": {
                    "data_addr1": 1
                },
                "DAT_20001508": {
                    "data_addr2": 1
                },
                "DAT_2000150c": {
                    "data_flag1": 1
                },
                "DAT_20001510": {
                    "data_flag2": 1
                },
                "DAT_20001514": {
                    "data_addr3": 1
                },
                "DAT_20001518": {
                    "data_flag3": 1
                },
                "DAT_2000151c": {
                    "data_flag4": 1
                },
                "DAT_20001520": {
                    "data_flag5": 1
                },
                "DAT_20001524": {
                    "data_flag6": 1
                },
                "DAT_20001540": {
                    "data_addr12": 1
                },
                "DAT_20001544": {
                    "data_flag19": 1
                },
                "DAT_20001548": {
                    "data_flag20": 1
                },
                "DAT_2000154c": {
                    "data_addr11": 1
                },
                "DAT_20001550": {
                    "data_flag21": 1
                },
                "DAT_2000157c": {
                    "data_addr4": 1
                },
                "DAT_20001580": {
                    "data_addr5": 1
                },
                "DAT_20001584": {
                    "data_flag7": 1
                },
                "DAT_20001588": {
                    "data_flag8": 1
                },
                "DAT_2000158c": {
                    "data_flag9": 1
                },
                "DAT_20001590": {
                    "data_addr6": 1
                },
                "DAT_20001594": {
                    "data_flag10": 1
                },
                "DAT_20001598": {
                    "data_flag11": 1
                },
                "DAT_200015bc": {
                    "data_addr7": 1
                },
                "DAT_200015c0": {
                    "data_flag12": 1
                },
                "DAT_200015c4": {
                    "data_flag13": 1
                },
                "DAT_200015c8": {
                    "data_addr8": 1
                },
                "DAT_200015cc": {
                    "data_flag14": 1
                },
                "DAT_200015d0": {
                    "data_flag15": 1
                },
                "DAT_200015f8": {
                    "data_addr9": 1
                },
                "DAT_200015fc": {
                    "data_flag16": 1
                },
                "DAT_20001600": {
                    "data_flag17": 1
                },
                "DAT_20001604": {
                    "data_addr10": 1
                },
                "DAT_20001608": {
                    "data_flag18": 1
                },
                "D_200014c8": {
                    "data_address17": 1
                },
                "D_200014cc": {
                    "data_address18": 1
                },
                "D_200014d0": {
                    "data_address20": 1
                },
                "D_200014d4": {
                    "data_address19": 1
                },
                "D_200014d8": {
                    "data_address21": 1
                },
                "D_20001504": {
                    "peripheral_address1": 1
                },
                "D_20001508": {
                    "peripheral_address2": 1
                },
                "D_2000150c": {
                    "data1": 1
                },
                "D_20001510": {
                    "data2": 1
                },
                "D_20001514": {
                    "peripheral_address3": 1
                },
                "D_20001518": {
                    "data3": 1
                },
                "D_2000151c": {
                    "data4": 1
                },
                "D_20001520": {
                    "data5": 1
                },
                "D_20001524": {
                    "data6": 1
                },
                "D_20001540": {
                    "data_address13": 1
                },
                "D_20001544": {
                    "data_address14": 1
                },
                "D_20001548": {
                    "data_address15": 1
                },
                "D_2000154c": {
                    "data_address12": 1
                },
                "D_20001550": {
                    "data_address16": 1
                },
                "D_2000157c": {
                    "memory_address1": 1
                },
                "D_20001580": {
                    "memory_address2": 1
                },
                "D_20001584": {
                    "memory_address4": 1
                },
                "D_20001588": {
                    "memory_address5": 1
                },
                "D_2000158c": {
                    "memory_address6": 1
                },
                "D_20001590": {
                    "memory_address3": 1
                },
                "D_20001594": {
                    "memory_address7": 1
                },
                "D_20001598": {
                    "memory_address8": 1
                },
                "D_200015bc": {
                    "data_address1": 1
                },
                "D_200015c0": {
                    "data_address3": 1
                },
                "D_200015c4": {
                    "data_address4": 1
                },
                "D_200015c8": {
                    "data_address2": 1
                },
                "D_200015cc": {
                    "data_address5": 1
                },
                "D_200015d0": {
                    "data_address6": 1
                },
                "D_200015f8": {
                    "data_address7": 1
                },
                "D_200015fc": {
                    "data_address9": 1
                },
                "D_20001600": {
                    "data_address10": 1
                },
                "D_20001604": {
                    "data_address8": 1
                },
                "D_20001608": {
                    "data_address11": 1
                },
                "FUN_0800458c": {
                    "initialize_and_configure": 2,
                    "initialize_and_configure_addresses": 3,
                    "initialize_and_configure_peripherals": 1,
                    "initialize_and_configure_system": 3,
                    "initialize_and_update": 1,
                    "initialize_and_update_bits": 3,
                    "initialize_and_update_configuration": 2,
                    "initialize_and_update_data": 3,
                    "initialize_and_update_device": 1,
                    "initialize_and_update_memory": 2,
                    "initialize_and_update_peripherals": 2,
                    "initialize_and_update_registers": 1,
                    "initialize_and_update_system": 2,
                    "initialize_peripherals": 3,
                    "initialize_system": 2
                },
                "_DAT_40021018": {
                    "device_reg1": 1
                },
                "iVar1": {
                    "error_code": 8,
                    "result": 10,
                    "return_value": 1
                },
                "iVar3": {
                    "constant_value2": 1,
                    "count": 2,
                    "flag": 2,
                    "initial_value": 2,
                    "iteration_count": 1,
                    "iterations": 1,
                    "param_value": 2,
                    "parameter_value": 1,
                    "peripheral_count": 1,
                    "peripheral_id": 1,
                    "peripheral_value": 1,
                    "some_var": 1,
                    "value": 2
                },
                "initialize_and_process_peripherals_08004514": {
                    "init_and_process_peripherals": 1,
                    "initialize_and_process_peripherals": 11,
                    "initialize_peripherals": 1
                },
                "initialize_and_update_bits_08004e14": {
                    "init_and_update_bits": 1,
                    "initialize_and_update_bits": 12
                },
                "initialize_memory_and_configure_addresses_08001128": {
                    "init_memory_and_config_addrs": 1,
                    "initialize_mem_config_addr": 1,
                    "initialize_memory": 1,
                    "initialize_memory_and_config": 1,
                    "initialize_memory_and_configure_addresses": 9
                },
                "local_1c": {
                    "address_value_6": 1,
                    "bits7": 1,
                    "bits_f": 1,
                    "data6": 1,
                    "data_value7": 1,
                    "flag12": 1,
                    "local_var_15": 1,
                    "local_variable17": 1,
                    "memory_address_var_7": 1,
                    "param14": 1,
                    "param_value": 1,
                    "temp_var15": 1,
                    "value": 2,
                    "value6": 1,
                    "value8": 1,
                    "var15": 1,
                    "var_1c": 1,
                    "verify_data_var1": 1
                },
                "local_20": {
                    "bits": 1,
                    "bits6": 1,
                    "bits_value": 1,
                    "config_data": 1,
                    "data_value": 1,
                    "data_value6": 1,
                    "local_var_14": 1,
                    "local_variable16": 1,
                    "memory_address_var_6": 1,
                    "param13": 1,
                    "param_value": 1,
                    "temp_var14": 1,
                    "value": 1,
                    "var14": 1,
                    "var_20": 1,
                    "verify_data": 1
                },
                "local_24": {
                    "address_value_5": 1,
                    "bits5": 1,
                    "bits_e": 1,
                    "data5": 1,
                    "data_value5": 1,
                    "flag11": 1,
                    "local_var_13": 1,
                    "local_variable15": 1,
                    "memory_address_var_5": 1,
                    "param12": 1,
                    "param_value": 1,
                    "temp_var13": 1,
                    "update_var5": 1,
                    "value": 2,
                    "value5": 1,
                    "value6": 1,
                    "var13": 1,
                    "var_24": 1
                },
                "local_28": {
                    "address_value_4": 1,
                    "bits4": 1,
                    "bits_d": 1,
                    "data4": 1,
                    "data_value4": 1,
                    "flag10": 1,
                    "local_var_12": 1,
                    "local_variable14": 1,
                    "memory_address_var_4": 1,
                    "param11": 1,
                    "param_value": 1,
                    "temp_var12": 1,
                    "update_var4": 1,
                    "value": 2,
                    "value4": 1,
                    "value5": 1,
                    "var12": 1,
                    "var_28": 1
                },
                "local_2c": {
                    "address_value_3": 1,
                    "bits3": 1,
                    "bits_c": 1,
                    "data3": 1,
                    "data_value3": 1,
                    "flag9": 1,
                    "local_var_11": 1,
                    "local_variable13": 1,
                    "memory_address_var_3": 1,
                    "param10": 1,
                    "param_value": 1,
                    "temp_var11": 1,
                    "update_var3": 1,
                    "value": 2,
                    "value3": 1,
                    "value4": 1,
                    "var11": 1,
                    "var_2c": 1
                },
                "local_30": {
                    "address_value_2": 1,
                    "bits2": 1,
                    "bits_b": 1,
                    "data2": 1,
                    "data_value2": 1,
                    "flag8": 1,
                    "local_var_10": 1,
                    "local_variable12": 1,
                    "memory_address_var_2": 1,
                    "param9": 1,
                    "param_value": 1,
                    "permissions": 1,
                    "temp_var10": 1,
                    "update_var2": 1,
                    "value": 1,
                    "value2": 1,
                    "value3": 1,
                    "var10": 1,
                    "var_30": 1
                },
                "local_34": {
                    "address_value": 1,
                    "bits": 1,
                    "bits1": 1,
                    "bits_a": 1,
                    "data1": 1,
                    "data_value1": 1,
                    "flag7": 1,
                    "local_var_9": 1,
                    "local_variable11": 1,
                    "memory_address": 1,
                    "memory_address_var_1": 1,
                    "param_value": 1,
                    "temp_var9": 1,
                    "update_var1": 1,
                    "value": 1,
                    "value1": 1,
                    "value2": 1,
                    "var9": 1,
                    "var_34": 1
                },
                "local_38": {
                    "error_code": 1,
                    "error_code7": 1,
                    "flag6": 1,
                    "flag8": 1,
                    "flag_value8": 1,
                    "flag_value_6": 1,
                    "flags6": 1,
                    "flags_and_values_var6": 1,
                    "flags_f": 1,
                    "local_var8": 1,
                    "local_var_8": 1,
                    "local_variable10": 1,
                    "param8": 1,
                    "param_value": 1,
                    "temp_var8": 1,
                    "update_result_var_8": 1,
                    "value": 1,
                    "var8": 1,
                    "var_38": 1
                },
                "local_3c": {
                    "error_code": 1,
                    "error_code6": 1,
                    "flag5": 1,
                    "flag7": 1,
                    "flag_value7": 1,
                    "flag_value_5": 1,
                    "flags5": 1,
                    "flags_and_values_var5": 1,
                    "flags_e": 1,
                    "local_var7": 1,
                    "local_var_7": 1,
                    "local_variable9": 1,
                    "param7": 1,
                    "param_value": 1,
                    "temp_var7": 1,
                    "update_result_var_7": 1,
                    "value": 1,
                    "var7": 1,
                    "var_3c": 1
                },
                "local_40": {
                    "error_code": 1,
                    "error_code5": 1,
                    "flag4": 1,
                    "flag6": 1,
                    "flag_value6": 1,
                    "flag_value_4": 1,
                    "flags4": 1,
                    "flags_and_values_var4": 1,
                    "flags_d": 1,
                    "local_var6": 1,
                    "local_var_6": 1,
                    "local_variable8": 1,
                    "param6": 1,
                    "param_value": 1,
                    "temp_var6": 1,
                    "update_result_var_6": 1,
                    "value": 1,
                    "var6": 1,
                    "var_40": 1
                },
                "local_48": {
                    "error_code": 1,
                    "error_code4": 1,
                    "flag3": 1,
                    "flag5": 1,
                    "flag_value5": 1,
                    "flag_value_3": 1,
                    "flags3": 1,
                    "flags_and_values_var3": 1,
                    "flags_c": 1,
                    "local_var5": 1,
                    "local_var_5": 1,
                    "local_variable7": 1,
                    "param5": 1,
                    "param_value": 1,
                    "temp_var5": 1,
                    "update_result_var_5": 1,
                    "value": 1,
                    "var5": 1,
                    "var_48": 1
                },
                "local_4c": {
                    "error_code": 1,
                    "error_code3": 1,
                    "flag2": 1,
                    "flag4": 1,
                    "flag_value4": 1,
                    "flag_value_2": 1,
                    "flags2": 1,
                    "flags_and_values_var2": 1,
                    "flags_b": 1,
                    "local_var4": 1,
                    "local_var_4": 1,
                    "local_variable6": 1,
                    "param4": 1,
                    "param_value": 1,
                    "temp_var4": 1,
                    "update_result_var_4": 1,
                    "value": 1,
                    "var4": 1,
                    "var_4c": 1
                },
                "local_50": {
                    "flag1": 1,
                    "flag3": 1,
                    "flag_value": 1,
                    "flag_value3": 1,
                    "flags1": 1,
                    "flags_a": 1,
                    "flags_and_values_var1": 1,
                    "local_var3": 1,
                    "local_var_3": 1,
                    "local_variable5": 1,
                    "param3": 1,
                    "param_value": 1,
                    "temp_var3": 1,
                    "update_result_var_3": 1,
                    "value": 2,
                    "value1": 1,
                    "var3": 1,
                    "var_50": 1
                },
                "local_54": {
                    "error_code": 3,
                    "error_code2": 1,
                    "error_code_2": 1,
                    "flag2": 1,
                    "flag_value2": 1,
                    "local_var2": 1,
                    "local_var_2": 1,
                    "local_variable4": 1,
                    "param2": 1,
                    "peripheral2": 1,
                    "perm_flag2": 1,
                    "permission_b": 1,
                    "permission_var2": 1,
                    "temp_var2": 1,
                    "update_result_var_2": 1,
                    "var2": 1,
                    "var_54": 1
                },
                "local_58": {
                    "error_code": 4,
                    "error_code1": 1,
                    "flag1": 1,
                    "flag_value1": 1,
                    "local_var1": 1,
                    "local_var_1": 1,
                    "local_variable3": 1,
                    "param1": 1,
                    "peripheral1": 1,
                    "perm_flag1": 1,
                    "permission_a": 1,
                    "permission_var1": 1,
                    "temp_var1": 1,
                    "update_result_var_1": 1,
                    "var1": 1,
                    "var_58": 1
                },
                "process_error_message_08004490": {
                    "process_error_message": 13
                },
                "set_param_value_08001424": {
                    "set_param_value": 6,
                    "set_parameter_value": 7
                },
                "uVar2": {
                    "error_code": 7,
                    "error_message_code": 1,
                    "error_message_id": 1,
                    "error_message_index": 2,
                    "file_line": 1,
                    "file_line_number": 1,
                    "loop_counter": 2,
                    "message_code": 1,
                    "process_error": 1,
                    "source_code_line": 1,
                    "update_code": 1
                },
                "update_bits_08001264": {
                    "update_bits": 13
                },
                "update_data_flags_080023d0": {
                    "update_data_flags": 13
                },
                "update_flags_and_values_0800245c": {
                    "update_flags_and_values": 13
                },
                "update_memory_address_and_bits_08002724": {
                    "update_mem_addr_and_bits": 1,
                    "update_mem_addrs_and_bits": 1,
                    "update_memory_address_and_bits": 11
                },
                "update_param_values_08001754": {
                    "update_param_values": 6,
                    "update_parameter_values": 7
                },
                "update_permissions_080025a4": {
                    "update_permissions": 13
                },
                "verify_and_update_data_08002564": {
                    "verify_and_update_data": 13
                }
            },
            "called": [
                "FUN_08001264",
                "FUN_080023d0",
                "FUN_080025a4",
                "FUN_08001128",
                "FUN_08001424",
                "FUN_08002724",
                "FUN_08001754",
                "FUN_08004e14",
                "FUN_08004514",
                "FUN_08004490",
                "FUN_08002564",
                "FUN_0800245c"
            ],
            "calling": [
                "FUN_08004028"
            ],
            "code": "\n\n\nvoid initialize_and_configure_system_0800458c(void)\n\n{\n  int result;\n  undefined4 error_code;\n  int initial_value;\n  int error_code;\n  int error_code;\n  int value;\n  int flag_value4;\n  int flag_value5;\n  int local_var_6;\n  int flag_value7;\n  int temp_var8;\n  int bits_a;\n  int temp_var10;\n  int value;\n  int value;\n  int value;\n  undefined4 bits_value;\n  int value;\n  \n  initialize_memory_and_configure_addresses();\n  initialize_and_process_peripherals();\n  initial_value = 2;\n  _DAT_40021018 = _DAT_40021018 | 0x1c;\n  set_parameter_value(0x40011000,0xe000,0,_DAT_40021018 & 8);\n  set_parameter_value(0x40010800,0x20,0);\n  bits_a = 0xe000;\n  temp_var10 = 1;\n  value = 2;\n  update_bits(0x40011000,&bits_a);\n  bits_a = 0x20;\n  temp_var10 = 1;\n  value = 2;\n  update_bits(0x40010800,&bits_a);\n  DAT_20001504 = 0x40005400;\n  DAT_20001508 = 400000;\n  DAT_20001514 = 0x4000;\n  DAT_2000150c = 0;\n  DAT_20001510 = 0;\n  DAT_20001518 = 0;\n  DAT_2000151c = 0;\n  DAT_20001520 = 0;\n  DAT_20001524 = 0;\n  result = update_parameter_values();\n  if (result == 0) goto LAB_0800463a;\n  error_code = 0x6b;\n  while( true ) {\n    while( true ) {\n      while( true ) {\n        while( true ) {\n          while( true ) {\n            while( true ) {\n              while( true ) {\n                while( true ) {\n                  while( true ) {\n                    while( true ) {\n                      while( true ) {\n                        while( true ) {\n                          while( true ) {\n                            while( true ) {\n                              while( true ) {\n                                while( true ) {\n                                  result = process_error_message(\"../Src/peripherals.c\",error_code);\nLAB_0800463a:\n                                  DAT_2000157c = 0x40013800;\n                                  DAT_20001580 = 0x1c200;\n                                  DAT_20001590 = 0xc;\n                                  DAT_20001584 = result;\n                                  DAT_20001588 = result;\n                                  DAT_2000158c = result;\n                                  DAT_20001594 = result;\n                                  DAT_20001598 = result;\n                                  result = update_memory_address_and_bits(&DAT_2000157c);\n                                  if (result == 0) break;\n                                  error_code = 0x151;\n                                }\n                                DAT_200015bc = 0x40012c00;\n                                DAT_200015c8 = 1000;\n                                DAT_200015c0 = initial_value;\n                                DAT_200015c4 = result;\n                                DAT_200015cc = result;\n                                DAT_200015d0 = result;\n                                result = update_data_flags(&DAT_200015bc);\n                                if (result == 0) break;\n                                error_code = 0x88;\n                              }\n                              error_code = result;\n                              error_code = result;\n                              result = update_permissions(&DAT_200015bc,&error_code);\n                              if (result == 0) break;\n                              error_code = 0x8f;\n                            }\n                            value = 0x60;\n                            flag_value4 = result;\n                            flag_value5 = result;\n                            local_var_6 = result;\n                            flag_value7 = result;\n                            temp_var8 = result;\n                            result = update_flags_and_values(&DAT_200015bc,&value,0xc);\n                            if (result == 0) break;\n                            error_code = 0x9a;\n                          }\n                          bits_value = 0x2000;\n                          bits_a = result;\n                          temp_var10 = result;\n                          value = result;\n                          value = result;\n                          value = result;\n                          value = result;\n                          result = verify_and_update_data(&DAT_200015bc,&bits_a);\n                          if (result == 0) break;\n                          error_code = 0xa6;\n                        }\n                        initialize_and_update_bits(&DAT_200015bc);\n                        DAT_200015f8 = 0x40000000;\n                        DAT_20001604 = 1000;\n                        DAT_200015fc = initial_value;\n                        DAT_20001600 = result;\n                        DAT_20001608 = result;\n                        result = update_data_flags(&DAT_200015f8);\n                        if (result == 0) break;\n                        error_code = 0xc3;\n                      }\n                      value = result;\n                      flag_value4 = result;\n                      result = update_permissions(&DAT_200015f8,&value);\n                      if (result == 0) break;\n                      error_code = 0xca;\n                    }\n                    bits_a = 0x60;\n                    temp_var10 = result;\n                    value = result;\n                    value = result;\n                    result = update_flags_and_values(&DAT_200015f8,&bits_a,4);\n                    if (result == 0) break;\n                    error_code = 0xd3;\n                  }\n                  initialize_and_update_bits(&DAT_200015f8);\n                  DAT_2000154c = 1000;\n                  DAT_20001540 = 0x40000400;\n                  DAT_20001544 = initial_value;\n                  DAT_20001548 = result;\n                  DAT_20001550 = result;\n                  result = update_data_flags();\n                  if (result == 0) break;\n                  error_code = 0xf0;\n                }\n                value = 0;\n                flag_value4 = 0;\n                result = update_permissions(&DAT_20001540,&value);\n                if (result == 0) break;\n                error_code = 0xf7;\n              }\n              bits_a = 0x60;\n              temp_var10 = result;\n              value = result;\n              value = result;\n              result = update_flags_and_values(&DAT_20001540,&bits_a,8);\n              if (result == 0) break;\n              error_code = 0x100;\n            }\n            initial_value = update_flags_and_values(&DAT_20001540,&bits_a,0xc);\n            if (initial_value == 0) break;\n            error_code = 0x105;\n          }\n          initialize_and_update_bits(&DAT_20001540);\n          DAT_200014c8 = 0x40000800;\n          DAT_200014cc = 2;\n          DAT_200014d4 = 1000;\n          DAT_200014d0 = initial_value;\n          DAT_200014d8 = initial_value;\n          result = update_data_flags(&DAT_200014c8);\n          if (result == 0) break;\n          error_code = 0x122;\n        }\n        value = result;\n        flag_value4 = result;\n        result = update_permissions(&DAT_200014c8,&value);\n        if (result == 0) break;\n        error_code = 0x129;\n      }\n      bits_a = 0x60;\n      temp_var10 = result;\n      value = result;\n      value = result;\n      result = update_flags_and_values(&DAT_200014c8,&bits_a,8);\n      if (result == 0) break;\n      error_code = 0x132;\n    }\n    result = update_flags_and_values(&DAT_200014c8,&bits_a,0xc);\n    if (result == 0) break;\n    error_code = 0x137;\n  }\n  initialize_and_update_bits(&DAT_200014c8);\n  return;\n}\n\n",
            "current_name": "initialize_and_configure_system_0800458c",
            "entrypoint": "0x0800458c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800458c": "initialize_and_configure_system_0800458c",
                "iVar1": "result",
                "iVar3": "initial_value",
                "initialize_and_process_peripherals_08004514": "initialize_and_process_peripherals",
                "initialize_and_update_bits_08004e14": "initialize_and_update_bits",
                "initialize_memory_and_configure_addresses_08001128": "initialize_memory_and_configure_addresses",
                "local_1c": "value",
                "local_20": "bits_value",
                "local_24": "value",
                "local_28": "value",
                "local_2c": "value",
                "local_30": "temp_var10",
                "local_34": "bits_a",
                "local_38": "temp_var8",
                "local_3c": "flag_value7",
                "local_40": "local_var_6",
                "local_48": "flag_value5",
                "local_4c": "flag_value4",
                "local_50": "value",
                "local_54": "error_code",
                "local_58": "error_code",
                "process_error_message_08004490": "process_error_message",
                "set_param_value_08001424": "set_parameter_value",
                "uVar2": "error_code",
                "update_bits_08001264": "update_bits",
                "update_data_flags_080023d0": "update_data_flags",
                "update_flags_and_values_0800245c": "update_flags_and_values",
                "update_memory_address_and_bits_08002724": "update_memory_address_and_bits",
                "update_param_values_08001754": "update_parameter_values",
                "update_permissions_080025a4": "update_permissions",
                "verify_and_update_data_08002564": "verify_and_update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800483c": {
            "additional_data": {
                "FUN_0800483c": {
                    "calculate_and_set_values": 1,
                    "calculate_and_update_values": 1,
                    "calculate_combined_values": 1,
                    "calculate_result": 11,
                    "calculate_results": 1,
                    "calculate_values": 13,
                    "calculate_values_and_assign": 1,
                    "process_data": 1
                },
                "calculate_float_value_08000ad8": {
                    "calc_float_value2": 1,
                    "calculate_float_value2": 1
                },
                "calculate_float_value_08000e54": {
                    "calculate_float_value4": 1
                },
                "calculate_floating_point_value_08000adc": {
                    "calc_float_value1": 1,
                    "calculate_floating_value5": 1
                },
                "calculate_floating_point_value_08000cec": {
                    "calc_float_value3": 1,
                    "calculate_floating_value3": 1
                },
                "check_if_concatenated_integers_are_empty_08001028": {
                    "check_concatenated_integers_empty": 2
                },
                "check_if_concatenation_is_successful_08001064": {
                    "check_concatenation_success": 2
                },
                "count_set_bits_08000c44": {
                    "count_set_bits": 1
                },
                "iVar3": {
                    "int_value": 1,
                    "int_value1": 2,
                    "int_value2": 1,
                    "int_value_1": 1,
                    "int_var_1": 1,
                    "integer_value1": 2,
                    "integer_value3": 1,
                    "integer_value_1": 3,
                    "integer_value_3": 1,
                    "intermediate_value_1": 1,
                    "result2": 1,
                    "result_3": 1,
                    "temp_result_2": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var_1": 1,
                    "third_value": 1,
                    "value1": 3,
                    "value2": 1,
                    "var3": 2,
                    "var_1": 1,
                    "variable1": 1,
                    "variable2": 1
                },
                "iVar4": {
                    "float_value": 1,
                    "int_value2": 2,
                    "int_value_2": 1,
                    "int_var_2": 1,
                    "integer_value2": 2,
                    "integer_value4": 1,
                    "integer_value_2": 3,
                    "integer_value_4": 1,
                    "intermediate_value_2": 1,
                    "result": 1,
                    "result1": 3,
                    "result_1": 2,
                    "temp_result_1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "value2": 3,
                    "var4": 2,
                    "var_2": 1,
                    "variable2": 1
                },
                "iVar5": {
                    "int_value1": 1,
                    "int_value2": 1,
                    "int_value3": 2,
                    "int_value_3": 1,
                    "int_var_3": 1,
                    "integer_value3": 2,
                    "integer_value5": 1,
                    "integer_value_3": 3,
                    "integer_value_5": 1,
                    "intermediate_value_3": 1,
                    "result_4": 1,
                    "second_value": 1,
                    "temp_result_3": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "value1": 2,
                    "value3": 3,
                    "var5": 2,
                    "var_3": 1,
                    "variable1": 1,
                    "variable3": 1
                },
                "param_1": {
                    "array": 2,
                    "input_array": 7,
                    "input_params": 1,
                    "input_values": 2,
                    "parameters": 12,
                    "params": 4,
                    "result": 1,
                    "result_array": 2
                },
                "uVar1": {
                    "float_result1": 1,
                    "float_val1": 1,
                    "float_value": 1,
                    "float_value1": 7,
                    "float_value_1": 6,
                    "floating_point_value1": 5,
                    "floating_value": 1,
                    "floating_value1": 1,
                    "result1": 3,
                    "result_1": 1,
                    "result_2": 1,
                    "temp_float_1": 1,
                    "value_1": 1
                },
                "uVar2": {
                    "another_floating_value": 1,
                    "float_result2": 1,
                    "float_val2": 1,
                    "float_value2": 7,
                    "float_value_2": 7,
                    "floating_point_value2": 5,
                    "floating_value2": 1,
                    "result2": 3,
                    "result_2": 1,
                    "temp_float_2": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08000adc",
                "FUN_08001028",
                "FUN_08000c44",
                "FUN_08000ad8",
                "FUN_08000e54",
                "FUN_08001064",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_and_update_values_0800483c(int *parameters)\n\n{\n  undefined4 float_value1;\n  undefined4 float_value2;\n  int value1;\n  int integer_value_2;\n  int value3;\n  \n  integer_value_2 = parameters[0xc];\n  float_value1 = calculate_floating_value5(parameters[7],parameters[9]);\n  integer_value_2 = calc_float_value2(float_value1,integer_value_2);\n  parameters[10] = integer_value_2;\n  if (*parameters == 3) {\n    integer_value_2 = check_concatenation_success(parameters[10],0);\n    if (integer_value_2 == 0) {\n      integer_value_2 = check_concatenated_integers_empty(parameters[10],0xc3340000);\n    }\n    else {\n      integer_value_2 = check_concatenation_success(parameters[10],0x43340000);\n    }\n    if (integer_value_2 != 0) {\n      value3 = parameters[10];\n      float_value1 = calculate_floating_value3(parameters[10],0x43b40000);\n      integer_value_2 = check_concatenation_success(parameters[10],0);\n      value1 = parameters[10];\n      if (integer_value_2 == 0) {\n        value1 = value1 + -0x80000000;\n      }\n      float_value1 = calculate_float_value4(float_value1,value1);\n      integer_value_2 = calc_float_value2(value3,float_value1);\n      parameters[10] = integer_value_2;\n    }\n  }\n  value3 = parameters[2];\n  value1 = parameters[3];\n  integer_value_2 = calculate_floating_value3(parameters[1],parameters[10]);\n  parameters[0xe] = integer_value_2;\n  integer_value_2 = calculate_floating_value5(parameters[10],parameters[0xf]);\n  parameters[0xf] = integer_value_2;\n  integer_value_2 = check_concatenated_integers_empty(parameters[0xf],0xc3fa0000);\n  if (integer_value_2 == 0) {\n    integer_value_2 = check_concatenation_success(parameters[0xf],0x43fa0000);\n    if (integer_value_2 == 0) {\n      integer_value_2 = parameters[0xf];\n    }\n    else {\n      integer_value_2 = 0x43fa0000;\n    }\n  }\n  else {\n    integer_value_2 = -0x3c060000;\n  }\n  parameters[0xf] = integer_value_2;\n  integer_value_2 = calc_float_value2(parameters[0xc],parameters[0xd]);\n  parameters[0x10] = integer_value_2;\n  integer_value_2 = parameters[0xe];\n  float_value1 = calculate_floating_value3(value3,parameters[0xf]);\n  float_value1 = calculate_floating_value5(float_value1,integer_value_2);\n  float_value2 = calculate_floating_value3(value1,parameters[0x10]);\n  integer_value_2 = calc_float_value2(float_value1,float_value2);\n  parameters[0x12] = integer_value_2;\n  float_value1 = count_set_bits(parameters[0x13]);\n  integer_value_2 = check_concatenated_integers_empty(parameters[0x12],0xc3fa0000);\n  if (integer_value_2 == 0) {\n    integer_value_2 = check_concatenation_success(parameters[0x12],0x43fa0000);\n    if (integer_value_2 == 0) {\n      integer_value_2 = parameters[0x12];\n    }\n    else {\n      integer_value_2 = 0x43fa0000;\n    }\n  }\n  else {\n    integer_value_2 = -0x3c060000;\n  }\n  integer_value_2 = calculate_floating_value3(integer_value_2,float_value1);\n  parameters[0x12] = integer_value_2;\n  parameters[0xd] = parameters[0xc];\n  parameters[0xb] = parameters[10];\n  parameters[0x15] = parameters[0x14];\n  return;\n}\n\n",
            "current_name": "calculate_and_update_values_0800483c",
            "entrypoint": "0x0800483c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800483c": "calculate_and_update_values_0800483c",
                "calculate_float_value_08000ad8": "calc_float_value2",
                "calculate_float_value_08000e54": "calculate_float_value4",
                "calculate_floating_point_value_08000adc": "calculate_floating_value5",
                "calculate_floating_point_value_08000cec": "calculate_floating_value3",
                "check_if_concatenated_integers_are_empty_08001028": "check_concatenated_integers_empty",
                "check_if_concatenation_is_successful_08001064": "check_concatenation_success",
                "count_set_bits_08000c44": "count_set_bits",
                "iVar3": "value1",
                "iVar4": "integer_value_2",
                "iVar5": "value3",
                "param_1": "parameters",
                "uVar1": "float_value1",
                "uVar2": "float_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a30": {
            "additional_data": {
                "DAT_20000068": {
                    "calculated_value1": 1,
                    "result1": 2
                },
                "DAT_2000007c": {
                    "calculated_value2": 1,
                    "result2": 2
                },
                "DAT_20000094": {
                    "final_result": 1,
                    "final_value": 2
                },
                "DAT_20000285": {
                    "condition1": 1,
                    "is_condition_met": 1,
                    "is_flag_set": 1
                },
                "DAT_20000288": {
                    "condition_value": 1,
                    "default_value": 1,
                    "result3": 1
                },
                "DAT_200002a8": {
                    "condition2": 1,
                    "has_value_set": 1,
                    "is_value_calculated": 1
                },
                "FUN_08004a30": {
                    "calculate_and_store_floating_point_value": 1,
                    "calculate_and_update_data_values": 1,
                    "calculate_data": 1,
                    "calculate_data_value": 3,
                    "calculate_data_values": 10,
                    "calculate_float_values": 1,
                    "calculate_floating_point_data_value": 1,
                    "calculate_floating_point_values": 3,
                    "calculate_values": 1,
                    "initialize_data": 1,
                    "initialize_floating_point_values": 1,
                    "process_data": 3,
                    "update_data_values": 3,
                    "update_floating_point_data": 1
                },
                "calculate_floating_point_value_08000cec": {
                    "calculate_float_value": 4,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_value": 23,
                    "calculate_fp_value": 2
                },
                "get_data_value_08003068": {
                    "get_data_value": 29,
                    "retrieve_data_value": 2
                },
                "uVar1": {
                    "data_value": 27
                }
            },
            "called": [
                "FUN_08003068",
                "FUN_08000cec"
            ],
            "calling": [
                "FUN_08004a84"
            ],
            "code": "\nvoid calculate_and_update_data_values_08004a30(void)\n\n{\n  undefined4 data_value;\n  \n  if (DAT_20000285 != '\\0') {\n    if (DAT_200002a8 == '\\0') {\n      data_value = get_data_value();\n      DAT_20000068 = calculate_floating_point_value(data_value,0x42c80000);\n      DAT_200002a8 = '\\x01';\n    }\n    else {\n      data_value = get_data_value();\n      DAT_2000007c = calculate_floating_point_value(data_value,0x42c80000);\n    }\n  }\n  if (DAT_20000285 == '\\0') {\n    if (DAT_200002a8 != '\\0') {\n      DAT_200002a8 = DAT_20000285;\n    }\n    DAT_20000094 = DAT_20000288;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_and_update_data_values_08004a30",
            "entrypoint": "0x08004a30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a30": "calculate_and_update_data_values_08004a30",
                "calculate_floating_point_value_08000cec": "calculate_floating_point_value",
                "get_data_value_08003068": "get_data_value",
                "uVar1": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004a84": {
            "additional_data": {
                "DAT_2000004c": {
                    "param4": 1
                },
                "DAT_20000050": {
                    "value11": 1
                },
                "DAT_20000054": {
                    "value12": 1
                },
                "DAT_20000058": {
                    "value13": 1
                },
                "DAT_20000094": {
                    "value1": 1
                },
                "DAT_200000a8": {
                    "param1": 1
                },
                "DAT_200000ac": {
                    "value3": 1
                },
                "DAT_200000b0": {
                    "value4": 1
                },
                "DAT_200000d8": {
                    "result1": 2
                },
                "DAT_200000f0": {
                    "param5": 1
                },
                "DAT_20000104": {
                    "param2": 1
                },
                "DAT_20000108": {
                    "value5": 1
                },
                "DAT_2000010c": {
                    "value6": 1
                },
                "DAT_20000110": {
                    "value7": 1
                },
                "DAT_20000134": {
                    "result2": 2
                },
                "DAT_2000014c": {
                    "param6": 1
                },
                "DAT_20000160": {
                    "param3": 1
                },
                "DAT_20000164": {
                    "value8": 1
                },
                "DAT_20000168": {
                    "value9": 1
                },
                "DAT_2000016c": {
                    "value10": 1
                },
                "DAT_20000190": {
                    "float_value": 2
                },
                "DAT_200001a8": {
                    "param7": 1
                },
                "DAT_20000284": {
                    "flag2": 1
                },
                "DAT_20000285": {
                    "flag": 1
                },
                "DAT_20000288": {
                    "value2": 1
                },
                "DAT_2000139b": {
                    "result3": 1
                },
                "DAT_2000139f": {
                    "result4": 1
                },
                "DAT_200013a3": {
                    "result5": 1
                },
                "FUN_08004a84": {
                    "calculate_and_store_data": 1,
                    "calculate_and_store_result": 1,
                    "calculate_and_update_data": 1,
                    "calculate_and_update_data_values": 3,
                    "calculate_and_update_values": 21,
                    "calculate_values": 2,
                    "initialize_and_update_values": 2
                },
                "calculateAndStoreResult1": {
                    "result1": 1
                },
                "calculateAndStoreResult2": {
                    "result2": 1
                },
                "calculateAndUpdateDataValues": {
                    "update_data_values": 1
                },
                "calculateAndUpdateValues": {
                    "update_values": 1
                },
                "calculateFloatValueOrConversion": {
                    "float_value_or_conversion": 1
                },
                "calculateFloatingPointValue": {
                    "floating_point_value": 1
                },
                "calculateParameterValues": {
                    "calculate_param_values": 1
                },
                "calculate_and_store_result_08002ec0": {
                    "calc_and_store_result1": 1,
                    "calculate_and_store_result": 2,
                    "calculate_and_store_result1": 21,
                    "calculate_and_store_result_1": 1,
                    "calculate_and_store_result_a": 1,
                    "calculate_result1": 4,
                    "get_result1": 1
                },
                "calculate_and_store_result_08002ed4": {
                    "calc_and_store_result2": 1,
                    "calculate_and_store_result": 1,
                    "calculate_and_store_result2": 21,
                    "calculate_and_store_result_2": 2,
                    "calculate_and_store_result_b": 1,
                    "calculate_result2": 4,
                    "get_result2": 1
                },
                "calculate_and_update_data_values_08004a30": {
                    "calc_and_update_data_values": 1,
                    "calculate_and_update_data_values": 24,
                    "update_data_values": 4
                },
                "calculate_and_update_values_0800483c": {
                    "calc_and_update_values": 1,
                    "calculate_and_update": 1,
                    "calculate_and_update_values": 27,
                    "calculate_and_update_values2": 2
                },
                "calculate_float_value_or_floating_point_conversion_08002ee8": {
                    "calc_float_value_or_convert": 1,
                    "calculate_float_value": 9,
                    "calculate_float_value_or_conversion": 15,
                    "calculate_float_value_or_convert": 1,
                    "calculate_float_value_or_float_conversion": 1,
                    "calculate_float_value_or_float_point_conversion": 2,
                    "calculate_float_value_or_floating_point_conversion": 1,
                    "get_float_value": 1
                },
                "calculate_floating_point_value_08000adc": {
                    "calc_float_value": 1,
                    "calculate_float_value2": 2,
                    "calculate_floating_point_value": 18,
                    "calculate_floating_point_value1": 8,
                    "calculate_floating_point_value_a": 1,
                    "get_floating_point_value": 1
                },
                "calculate_floating_point_value_08000cec": {
                    "calc_float_value": 1,
                    "calculate_float_value3": 2,
                    "calculate_floating_point_value": 14,
                    "calculate_floating_point_value2": 11,
                    "calculate_floating_point_value_2": 1,
                    "calculate_floating_point_value_b": 1,
                    "get_floating_point_value": 1
                },
                "calculate_parameter_values_0800426c": {
                    "calc_parameter_values": 1,
                    "calculate_param_values": 2,
                    "calculate_parameter_values": 28
                },
                "checkConcatenationSuccess": {
                    "concatenation_success": 1
                },
                "checkEmptyConcatenatedIntegers": {
                    "empty_concatenated_integers": 1
                },
                "check_if_concatenated_integers_are_empty_08001028": {
                    "are_concatenated_integers_empty": 5,
                    "are_integers_empty": 2,
                    "check_concatenated_integers_empty": 11,
                    "check_empty_concatenated_integers": 2,
                    "check_if_concatenated_integers_are_empty": 2,
                    "check_if_concatenated_integers_empty": 8,
                    "check_integers_empty": 1
                },
                "check_if_concatenation_is_successful_08001064": {
                    "check_concatenation_success": 14,
                    "check_if_concatenation_is_successful": 2,
                    "check_if_concatenation_successful": 8,
                    "is_concat_successful": 1,
                    "is_concatenation_successful": 6
                },
                "iVar1": {
                    "concatenation_success": 1,
                    "concatenation_successful": 1
                },
                "initializeParameters": {
                    "init_parameters": 1
                },
                "initialize_parameters_080041c4": {
                    "initialize_parameters": 31
                },
                "reverseBitsAndShift": {
                    "bits_and_shift": 1
                },
                "reverse_bits_and_shift_080010c4": {
                    "reverse_bits_and_shift": 31
                },
                "setParamValues": {
                    "set_values": 1
                },
                "set_param_values_08003f3c": {
                    "set_param_values": 29,
                    "set_parameter_values": 2
                }
            },
            "called": [
                "FUN_08002ee8",
                "FUN_08000adc",
                "FUN_08003f3c",
                "FUN_08002ec0",
                "FUN_08004a30",
                "FUN_080041c4",
                "FUN_08000cec",
                "FUN_08001028",
                "FUN_08002ed4",
                "FUN_0800426c",
                "FUN_0800483c",
                "FUN_080010c4",
                "FUN_08001064"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nvoid calculate_and_update_data_values_08004a84(void)\n\n{\n  int concatenation_success;\n  \n  DAT_200000d8 = calculate_and_store_result1();\n  DAT_20000134 = calculate_and_store_result2();\n  DAT_20000190 = calculate_float_value_or_conversion();\n  calculate_and_update_data_values_08004a84();\n  concatenation_success = check_concatenation_success(DAT_200000d8,0);\n  if (concatenation_success == 0) {\n    concatenation_success = check_concatenated_integers_empty(DAT_200000d8,0xc2a00000);\n  }\n  else {\n    concatenation_success = check_concatenation_success(DAT_200000d8,0x42a00000);\n  }\n  if (concatenation_success == 0) {\n    concatenation_success = check_concatenation_success(DAT_20000134,0);\n    if (concatenation_success == 0) {\n      concatenation_success = check_concatenated_integers_empty(DAT_20000134,0xc2a00000);\n    }\n    else {\n      concatenation_success = check_concatenation_success(DAT_20000134,0x42a00000);\n    }\n    if (concatenation_success == 0) {\n      set_param_values(1,1);\n      calculate_and_update_values(&DAT_200000a8);\n      calculate_and_update_values(&DAT_20000104);\n      calculate_and_update_values(&DAT_20000160);\n      if (DAT_20000285 != '\\0') {\n        calculate_and_update_values(&DAT_2000004c);\n        calculate_floating_point_value(DAT_20000094,0x44bb8000);\n      }\n      DAT_20000094 = DAT_20000288;\n      if (DAT_20000284 == '\\0') {\n        initialize_parameters();\n      }\n      else {\n        calculate_parameter_values(DAT_20000288,DAT_200000f0,DAT_2000014c,DAT_200001a8);\n      }\n      calculate_floating_point_value(DAT_200000ac,0x437f0000);\n      DAT_2000139b._3_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_200000b0,0x437f0000);\n      DAT_2000139f._0_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_20000108,0x437f0000);\n      DAT_2000139b._0_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_2000010c,0x437f0000);\n      DAT_2000139b._1_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_20000110,0x437f0000);\n      DAT_2000139b._2_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_20000164,0x437f0000);\n      DAT_2000139f._2_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_20000168,0x437f0000);\n      DAT_2000139f._3_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_2000016c,0x437f0000);\n      DAT_200013a3._0_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_20000050,0x437f0000);\n      DAT_200013a3._1_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_20000054,0x437f0000);\n      DAT_200013a3._2_1_ = reverse_bits_and_shift();\n      calculate_floating_point_value(DAT_20000058,0x437f0000);\n      DAT_200013a3._3_1_ = reverse_bits_and_shift();\n      return;\n    }\n  }\n  initialize_parameters();\n  set_param_values(0,1);\n  return;\n}\n\n",
            "current_name": "calculate_and_update_data_values_08004a84",
            "entrypoint": "0x08004a84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004a84": "calculate_and_update_data_values_08004a84",
                "calculate_and_store_result_08002ec0": "calculate_and_store_result1",
                "calculate_and_store_result_08002ed4": "calculate_and_store_result2",
                "calculate_and_update_data_values_08004a30": "calculate_and_update_data_values",
                "calculate_and_update_values_0800483c": "calculate_and_update_values",
                "calculate_float_value_or_floating_point_conversion_08002ee8": "calculate_float_value_or_conversion",
                "calculate_floating_point_value_08000adc": "calculate_floating_point_value",
                "calculate_floating_point_value_08000cec": "calculate_floating_point_value",
                "calculate_parameter_values_0800426c": "calculate_parameter_values",
                "check_if_concatenated_integers_are_empty_08001028": "check_concatenated_integers_empty",
                "check_if_concatenation_is_successful_08001064": "check_concatenation_success",
                "iVar1": "concatenation_success",
                "initialize_parameters_080041c4": "initialize_parameters",
                "reverse_bits_and_shift_080010c4": "reverse_bits_and_shift",
                "set_param_values_08003f3c": "set_param_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c18": {
            "additional_data": {
                "DAT_2000157c": {
                    "data_array": 2,
                    "int_array1": 1
                },
                "DAT_20001584": {
                    "array_size": 1,
                    "constant_1": 1,
                    "data_limit_1": 1
                },
                "DAT_2000158c": {
                    "conditional_flag": 1,
                    "constant_2": 1,
                    "data_limit_2": 1
                },
                "DAT_200015a0": {
                    "char_flag4": 1,
                    "data_flag_4": 1,
                    "flag_1": 1
                },
                "DAT_200015a2": {
                    "data_flag_5": 1,
                    "flag_2": 1,
                    "loop_counter": 1
                },
                "DAT_200015b4": {
                    "char_flag2": 1,
                    "character_2": 1,
                    "data_flag_2": 1
                },
                "DAT_200015b5": {
                    "char_flag1": 1,
                    "character_1": 1,
                    "data_flag_1": 1
                },
                "DAT_200015b8": {
                    "char_flag3": 1,
                    "character_3": 1,
                    "data_flag_3": 1
                },
                "DAT_200015c0": {
                    "return_val": 1
                },
                "DAT_20001636": {
                    "data_struct": 2,
                    "input_data_array": 1
                },
                "FUN_08004c18": {
                    "analyze_data": 2,
                    "check_data_validity": 1,
                    "decode_data": 3,
                    "decode_string": 1,
                    "extracted_data": 1,
                    "parse_data": 5,
                    "parse_data_values": 1,
                    "parse_input": 2,
                    "process_binary_data": 1,
                    "process_data": 12,
                    "reverse_binary_extraction": 1
                },
                "get_data_value_0800115c": {
                    "get_data_value": 3
                },
                "iVar2": {
                    "counter_1": 1,
                    "data_value": 1,
                    "data_value1": 5,
                    "data_value_1": 4,
                    "int_var1": 1,
                    "int_var2": 1,
                    "integer_var2": 1,
                    "start_value": 1,
                    "value1": 11,
                    "value_1": 3,
                    "var2": 1
                },
                "iVar3": {
                    "counter_2": 1,
                    "current_value": 1,
                    "data_value2": 5,
                    "data_value_2": 4,
                    "int_var2": 1,
                    "int_var3": 1,
                    "integer_var3": 1,
                    "next_data_value": 1,
                    "value2": 11,
                    "value_2": 3,
                    "var3": 1
                },
                "param_1": {
                    "input": 8,
                    "input_data": 16,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_string": 1,
                    "input_value": 1
                },
                "piVar1": {
                    "array_pointer": 1,
                    "data_pointer": 1,
                    "p_int_var1": 1,
                    "p_var": 1,
                    "pointer": 7,
                    "pointer1": 3,
                    "pointer_1": 2,
                    "pointer_i": 1,
                    "pointer_var1": 3,
                    "ptr": 3,
                    "ptr1": 3,
                    "ptr_i_var1": 2,
                    "ptr_int1": 1,
                    "ptr_var1": 1
                },
                "puVar4": {
                    "data_array": 1,
                    "data_pointer": 2,
                    "data_ptr": 5,
                    "p_data": 1,
                    "p_u_short_var4": 1,
                    "pointer2": 4,
                    "pointer_2": 2,
                    "pointer_to_data": 1,
                    "pointer_u": 1,
                    "pointer_var4": 2,
                    "ptr2": 3,
                    "ptr_data": 1,
                    "ptr_pu_var4": 2,
                    "ptr_ushort1": 1,
                    "ushort_pointer": 2,
                    "ushort_ptr": 1
                }
            },
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08004c8c",
                "FUN_08004300",
                "FUN_08004490"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800289e) */\n\nundefined4 process_binary_data_08004c18(undefined input_data)\n\n{\n  int *pointer;\n  int value1;\n  int value2;\n  ushort *data_ptr;\n  \n  DAT_20001636._0_1_ = input_data;\n  data_ptr = &DAT_20001636;\n  if (((DAT_200015b5 != '\\x01') && (DAT_200015b5 != '\\\"')) || (DAT_200015b4 == '\\x01')) {\n    return 2;\n  }\n  DAT_200015b4 = 1;\n  DAT_200015b8 = 0;\n  DAT_200015a0 = 1;\n  if (DAT_200015b5 == '\\\"') {\n    DAT_200015b5 = '2';\n  }\n  else {\n    DAT_200015b5 = '\\x12';\n  }\n  DAT_200015a2 = 1;\nLAB_080027c4:\n  do {\n    if (DAT_200015a2 == 0) {\n      value1 = get_data_value();\n      do {\n        if (*DAT_2000157c << 0x19 < 0) {\n          if (DAT_200015b5 == '2') {\n            DAT_200015b5 = 0x22;\n          }\n          else {\n            DAT_200015b5 = 1;\n          }\n          DAT_200015b4 = 0;\n          return 0;\n        }\n        value2 = get_data_value();\n      } while ((uint)(value2 - value1) < 6);\nLAB_0800281c:\n      pointer = DAT_2000157c;\n      DAT_2000157c[3] = DAT_2000157c[3] & 0xffffff7f;\n      pointer[3] = pointer[3] & 0xffffffdf;\n      pointer[3] = pointer[3] & 0xfffffeff;\n      pointer[5] = pointer[5] & 0xfffffffe;\n      DAT_200015b5 = 1;\n      DAT_200015b4 = 0;\n      return 3;\n    }\n    DAT_200015a2 = DAT_200015a2 + -1;\n    if (DAT_20001584 == 0x1000) {\n      value1 = get_data_value();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = get_data_value();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = *data_ptr & 0x1ff;\n      if (DAT_2000158c == 0) {\n        data_ptr = data_ptr + 1;\n        goto LAB_080027c4;\n      }\n    }\n    else {\n      value1 = get_data_value();\n      while (-1 < *DAT_2000157c << 0x18) {\n        value2 = get_data_value();\n        if (5 < (uint)(value2 - value1)) goto LAB_0800281c;\n      }\n      DAT_2000157c[1] = (uint)*(byte *)data_ptr;\n    }\n    data_ptr = (ushort *)((int)data_ptr + 1);\n  } while( true );\n}\n\n",
            "current_name": "process_binary_data_08004c18",
            "entrypoint": "0x08004c18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c18": "process_binary_data_08004c18",
                "get_data_value_0800115c": "get_data_value",
                "iVar2": "value1",
                "iVar3": "value2",
                "param_1": "input_data",
                "piVar1": "pointer",
                "puVar4": "data_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c30": {
            "additional_data": {
                "DAT_20000364": {
                    "counter": 2,
                    "current_value": 1,
                    "data1": 3,
                    "data_ptr": 1,
                    "incremented_value": 1,
                    "memory_location": 1,
                    "ptr_data1": 1,
                    "stored_value": 2,
                    "value1": 4,
                    "value2": 1,
                    "var1": 1
                },
                "DAT_20001534": {
                    "condition1": 1
                },
                "DAT_2000157c": {
                    "config": 1,
                    "config_data": 1,
                    "config_ptr": 1,
                    "data": 1,
                    "data3": 1,
                    "data_pointer": 1,
                    "data_var": 2,
                    "flag": 1,
                    "flag1": 2,
                    "flag_variable": 1,
                    "ptr1": 1,
                    "ptr_data3": 1,
                    "state": 1,
                    "status_var1": 1,
                    "var1": 2,
                    "var3": 1,
                    "var_1": 1
                },
                "DAT_200015a4": {
                    "buffer": 1,
                    "data": 1,
                    "data3": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "flag6": 1,
                    "memory": 1,
                    "output_data": 1,
                    "pointer": 1,
                    "pointer1": 2,
                    "pointer_to_data": 1,
                    "pointer_var": 1,
                    "ptr1": 1,
                    "ptr2": 1,
                    "ptr_data4": 1,
                    "result_pointer": 1,
                    "temp_ptr": 1,
                    "temporary_variable": 1,
                    "var7": 1,
                    "var9": 1,
                    "var_2": 1
                },
                "DAT_200015a8": {
                    "char_var4": 1,
                    "flag1": 1,
                    "flag2": 4,
                    "flag4": 5,
                    "flag5": 2,
                    "flag_2": 1,
                    "flag_4": 1,
                    "flag_four": 1,
                    "status2": 1,
                    "temp_flag2": 1,
                    "temporary_flag2": 1,
                    "var5": 1,
                    "var7": 1,
                    "var_2": 1
                },
                "DAT_200015aa": {
                    "char_var5": 1,
                    "flag2": 1,
                    "flag3": 4,
                    "flag5": 5,
                    "flag6": 2,
                    "flag_3": 1,
                    "flag_5": 1,
                    "flag_five": 1,
                    "status3": 1,
                    "temp_flag3": 1,
                    "temporary_flag3": 1,
                    "var6": 1,
                    "var8": 1,
                    "var_3": 1
                },
                "DAT_200015b4": {
                    "char_var2": 1,
                    "condition2": 5,
                    "condition3": 1,
                    "condition_2": 2,
                    "flag2": 6,
                    "flag3": 2,
                    "flag_2": 1,
                    "flag_two": 1,
                    "option2": 1,
                    "var3": 1,
                    "var5": 1
                },
                "DAT_200015b5": {
                    "char_var1": 1,
                    "condition1": 5,
                    "condition2": 1,
                    "condition_1": 2,
                    "flag1": 6,
                    "flag2": 2,
                    "flag_1": 1,
                    "flag_one": 1,
                    "option1": 1,
                    "var2": 1,
                    "var4": 1
                },
                "DAT_200015b8": {
                    "char_var3": 1,
                    "flag1": 4,
                    "flag3": 5,
                    "flag4": 2,
                    "flag_1": 1,
                    "flag_3": 1,
                    "flag_three": 1,
                    "result": 1,
                    "status1": 1,
                    "temp_flag1": 1,
                    "temporary_flag1": 1,
                    "var4": 1,
                    "var6": 1,
                    "var_1": 1
                },
                "DAT_20001634": {
                    "constant_value": 1,
                    "data2": 3,
                    "data_value": 1,
                    "increment_value": 1,
                    "new_value": 2,
                    "ptr_data2": 1,
                    "threshold": 1,
                    "value": 2,
                    "value1": 1,
                    "value2": 4,
                    "var2": 1
                },
                "FUN_08004c30": {
                    "check_and_increment": 1,
                    "check_and_increment_value": 4,
                    "check_and_initialize_values": 1,
                    "check_and_modify_configuration": 1,
                    "check_and_update_param": 1,
                    "check_and_update_status": 1,
                    "check_input_value": 1,
                    "check_magic_value": 2,
                    "check_param": 1,
                    "check_parameter": 1,
                    "check_value_and_update": 2,
                    "handle_data": 1,
                    "handle_special_case": 1,
                    "process_data": 2,
                    "process_function": 1,
                    "process_parameter": 1,
                    "validate_and_increment": 1,
                    "validate_and_increment_pointer": 1,
                    "validate_and_process_data": 1,
                    "validate_param": 4,
                    "verify_value_and_update": 1
                },
                "PTR_200015c5": {
                    "pointer1": 1
                },
                "iVar1": {
                    "data": 2,
                    "data_ptr": 1,
                    "index": 1,
                    "result": 6,
                    "return_value": 1,
                    "temp": 1,
                    "temp_var": 10,
                    "temp_var1": 3,
                    "temp_var_1": 1,
                    "temp_variable": 1,
                    "var1": 1,
                    "variable_1": 1
                },
                "increment_and_store_value_08003ec8": {
                    "increment_and_store_value": 2
                },
                "param_1": {
                    "configuration": 1,
                    "data": 1,
                    "data_ptr": 1,
                    "input": 4,
                    "input_array": 3,
                    "input_data": 2,
                    "input_list": 1,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_ptr": 3,
                    "input_value": 1,
                    "param": 5,
                    "status": 1,
                    "value": 4
                }
            },
            "called": [
                "FUN_08003ec8"
            ],
            "calling": [
                "FUN_0800290c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nint * check_and_increment_value_08004c30(int *param)\n\n{\n  int temp_var;\n  \n  if (*param != 0x40013800) {\n    return param;\n  }\n  increment_and_store_value(&DAT_20000364,DAT_20001634);\n  temp_var = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(uint *)(DAT_2000157c + 0xc) = *(uint *)(DAT_2000157c + 0xc) | 0x100;\n    *(uint *)(temp_var + 0x14) = *(uint *)(temp_var + 0x14) | 1;\n    *(uint *)(temp_var + 0xc) = *(uint *)(temp_var + 0xc) | 0x20;\n    return (int *)0x0;\n  }\n  return (int *)0x2;\n}\n\n",
            "current_name": "check_and_increment_value_08004c30",
            "entrypoint": "0x08004c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c30": "check_and_increment_value_08004c30",
                "iVar1": "temp_var",
                "increment_and_store_value_08003ec8": "increment_and_store_value",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c64": {
            "additional_data": {
                "0x800": {
                    "array_size": 1
                },
                "DAT_20000364": {
                    "data_array": 2
                },
                "DAT_20000b64": {
                    "counter1": 3,
                    "data1": 5
                },
                "DAT_20000b66": {
                    "counter2": 3,
                    "data2": 5
                },
                "DAT_20000b68": {
                    "counter3": 3,
                    "data3": 5
                },
                "FUN_08004c64": {
                    "clear_data": 1,
                    "initialize_array": 3,
                    "initialize_arrays": 1,
                    "initialize_data": 25,
                    "initialize_memory": 1
                },
                "iVar1": {
                    "counter": 11,
                    "i": 1,
                    "index": 18,
                    "iteration": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004c70"
            ],
            "code": "\nvoid initialize_data_08004c64(void)\n\n{\n  int index;\n  \n  index = 0;\n  DAT_20000b64 = 0;\n  DAT_20000b66 = 0;\n  DAT_20000b68 = 0;\n  do {\n    (&DAT_20000364)[index] = 0;\n    index = index + 1;\n  } while (index != 0x800);\n  return;\n}\n\n",
            "current_name": "initialize_data_08004c64",
            "entrypoint": "0x08004c64",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c64": "initialize_data_08004c64",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c70": {
            "additional_data": {
                "0x1": {
                    "flag_2": 1
                },
                "0x100": {
                    "flag_1": 1
                },
                "0x14": {
                    "mask_2": 1
                },
                "0x20": {
                    "mask_3": 1
                },
                "0x22": {
                    "new_value_2": 1
                },
                "0x32": {
                    "new_value_1": 1
                },
                "0xc": {
                    "mask_1": 1
                },
                "DAT_2000157c": {
                    "data": 2,
                    "data_1": 5,
                    "data_address": 3,
                    "data_memory_address": 1,
                    "data_offset": 1,
                    "data_var1": 2,
                    "data_var_1": 1,
                    "data_variable": 5,
                    "data_variable_1": 2,
                    "state_data": 1,
                    "status_address": 1,
                    "status_data": 2,
                    "status_data_1": 1,
                    "status_ptr": 1
                },
                "DAT_200015a4": {
                    "buffer": 2,
                    "buffer_address": 1,
                    "data_2": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_pointer_2": 1,
                    "data_ptr": 4,
                    "data_ptr2": 1,
                    "data_ptr_2": 1,
                    "data_var_2": 1,
                    "data_variable_7": 1,
                    "flag6": 1,
                    "new_data_var": 1,
                    "pointer": 5,
                    "pointer_to_dat_20001634": 1,
                    "pointer_to_data": 1,
                    "pointer_var": 1,
                    "pointer_variable": 2,
                    "pointer_variable_1": 1,
                    "ptr": 1,
                    "ptr_1": 1
                },
                "DAT_200015a8": {
                    "additional_setting_flag_2": 1,
                    "boolean_variable_4": 1,
                    "byte4": 1,
                    "case_flag2": 1,
                    "data_variable_5": 1,
                    "flag2": 1,
                    "flag3": 1,
                    "flag4": 4,
                    "flag_1": 1,
                    "flag_2": 2,
                    "flag_4": 6,
                    "flag_var4": 1,
                    "initialize_value_2": 1,
                    "new_condition_var2": 1,
                    "new_value_2": 1,
                    "one": 1,
                    "temp_variable_2": 1,
                    "updated_flag_2": 1,
                    "value_4": 1,
                    "var2": 1,
                    "variable_a": 1
                },
                "DAT_200015aa": {
                    "additional_setting_flag_3": 1,
                    "boolean_variable_5": 1,
                    "byte5": 1,
                    "case_flag3": 1,
                    "data_variable_6": 1,
                    "flag3": 1,
                    "flag4": 1,
                    "flag5": 4,
                    "flag_2": 1,
                    "flag_3": 2,
                    "flag_5": 6,
                    "flag_var5": 1,
                    "initialize_value_3": 1,
                    "new_condition_var3": 1,
                    "new_value_3": 1,
                    "one_2": 1,
                    "temp_variable_3": 1,
                    "updated_flag_3": 1,
                    "value_5": 1,
                    "var3": 1,
                    "variable_b": 1
                },
                "DAT_200015b4": {
                    "another_char_value": 1,
                    "boolean_variable_2": 1,
                    "byte2": 1,
                    "byte_value_2": 1,
                    "condition2": 1,
                    "condition_2": 1,
                    "condition_flag": 1,
                    "condition_flag_2": 2,
                    "condition_value_2": 1,
                    "condition_var2": 1,
                    "condition_variable_2": 1,
                    "data_variable_3": 1,
                    "flag": 1,
                    "flag2": 4,
                    "flag_2": 6,
                    "flag_check": 1,
                    "flag_var2": 1,
                    "initialize_value_4": 1,
                    "not_case_flag": 1,
                    "setting_flag_2": 1,
                    "value_2": 1
                },
                "DAT_200015b5": {
                    "boolean_variable_1": 1,
                    "byte1": 1,
                    "byte_value_1": 1,
                    "case_flag": 1,
                    "char_value": 1,
                    "check_value_1": 1,
                    "condition1": 1,
                    "condition_1": 1,
                    "condition_check": 1,
                    "condition_flag_1": 2,
                    "condition_value_1": 1,
                    "condition_var1": 1,
                    "condition_variable_1": 1,
                    "data_variable_2": 1,
                    "flag": 1,
                    "flag1": 4,
                    "flag_1": 6,
                    "flag_var1": 1,
                    "setting_flag_1": 1,
                    "status_code": 1,
                    "value_1": 1
                },
                "DAT_200015b8": {
                    "additional_setting_flag_1": 1,
                    "boolean_variable_3": 1,
                    "byte3": 1,
                    "case_flag1": 1,
                    "data_variable_4": 1,
                    "flag1": 1,
                    "flag2": 1,
                    "flag3": 4,
                    "flag_1": 2,
                    "flag_3": 6,
                    "flag_var3": 1,
                    "initialize_value_1": 1,
                    "new_condition_var1": 1,
                    "new_flag": 1,
                    "new_value_1": 1,
                    "some_flag": 1,
                    "temp_variable_1": 1,
                    "updated_flag_1": 1,
                    "value_3": 1,
                    "var1": 1,
                    "zero": 1
                },
                "DAT_20001634": {
                    "another_data_ptr": 1,
                    "constant": 3,
                    "constant_data": 1,
                    "constant_value": 4,
                    "data": 1,
                    "data_2": 2,
                    "data_pointer": 1,
                    "data_pointer_variable": 1,
                    "data_ptr": 1,
                    "default_data_value": 2,
                    "new_data_value": 1,
                    "other_data": 1,
                    "ptr_2": 1,
                    "some_data": 3
                },
                "FUN_08004c70": {
                    "initialize": 1,
                    "initialize_and_check": 1,
                    "initialize_and_check_conditions": 1,
                    "initialize_and_check_configuration": 1,
                    "initialize_and_check_data": 7,
                    "initialize_and_check_flags": 4,
                    "initialize_and_check_settings": 1,
                    "initialize_and_check_state": 1,
                    "initialize_and_check_status": 6,
                    "initialize_and_set_flags": 1,
                    "initialize_and_update_settings": 1,
                    "initialize_data_and_check": 2,
                    "initialize_data_and_check_conditions": 2,
                    "initialize_data_and_check_status": 1,
                    "initialize_program": 1
                },
                "PTR_08002902": {
                    "unreachable_block_ptr": 1
                },
                "iVar1": {
                    "copy_of_dat_2000157c": 1,
                    "data": 2,
                    "data_address": 2,
                    "data_entry": 1,
                    "data_index": 2,
                    "data_offset": 2,
                    "data_pointer": 2,
                    "data_ptr": 5,
                    "data_var": 2,
                    "data_variable": 3,
                    "state": 1,
                    "status": 6,
                    "temp_var": 1,
                    "temp_var1": 1
                },
                "initialize_data_08004c64": {
                    "initialize_data": 22
                },
                "return": {
                    "status": 1
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [
                "FUN_08004c64"
            ],
            "calling": [
                "FUN_08004194"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08002902) */\n\nundefined4 initialize_data_and_check_conditions_08004c70(void)\n\n{\n  int status;\n  \n  initialize_data();\n  status = DAT_2000157c;\n  if (((DAT_200015b5 == '\\x01') || (DAT_200015b5 == '\\x12')) && (DAT_200015b4 != '\\x01')) {\n    DAT_200015b8 = 0;\n    DAT_200015a8 = 1;\n    DAT_200015aa = 1;\n    DAT_200015b4 = 0;\n    if (DAT_200015b5 == '\\x12') {\n      DAT_200015b5 = 0x32;\n    }\n    else {\n      DAT_200015b5 = 0x22;\n    }\n    DAT_200015a4 = &DAT_20001634;\n    *(unsigned_int *)(DAT_2000157c + 0xc) = *(unsigned_int *)(DAT_2000157c + 0xc) | 0x100;\n    *(unsigned_int *)(status + 0x14) = *(unsigned_int *)(status + 0x14) | 1;\n    *(unsigned_int *)(status + 0xc) = *(unsigned_int *)(status + 0xc) | 0x20;\n    status 0;\n  }\n  status 2;\n}\n\n",
            "current_name": "initialize_data_and_check_conditions_08004c70",
            "entrypoint": "0x08004c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c70": "initialize_data_and_check_conditions_08004c70",
                "iVar1": "status",
                "initialize_data_08004c64": "initialize_data",
                "return": "status",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c8c": {
            "additional_data": {
                "FUN_08004c8c": {
                    "process_and_increment_pointers": 1,
                    "process_binary_strings": 2,
                    "process_data": 5,
                    "process_string_array": 2,
                    "process_string_data": 17,
                    "process_strings": 4
                },
                "find_end_of_string_08000150": {
                    "find_end_of_string": 1
                },
                "param_1": {
                    "binary_data": 1,
                    "data": 6,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 6,
                    "input_data": 1,
                    "input_string": 4,
                    "input_strings": 1,
                    "string_array": 4,
                    "string_data": 5,
                    "strings_array": 1
                },
                "process_binary_data_08004c18": {
                    "process_data": 1,
                    "process_single_binary_data": 1
                },
                "puVar2": {
                    "current_char": 1,
                    "current_char_pointer": 1,
                    "current_char_ptr": 1,
                    "current_character": 3,
                    "current_data": 2,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "current_element": 1,
                    "current_pointer": 3,
                    "current_position": 5,
                    "current_ptr": 5,
                    "current_string": 5,
                    "current_string_ptr": 2
                },
                "uVar1": {
                    "end_index": 2,
                    "end_of_data": 1,
                    "end_of_string": 2,
                    "end_of_string_index": 9,
                    "end_of_string_length": 1,
                    "end_of_string_position": 2,
                    "end_offset": 5,
                    "end_position": 4,
                    "string_length": 5
                }
            },
            "called": [
                "FUN_08004c18",
                "FUN_08000150"
            ],
            "calling": [
                "FUN_08004cac",
                "FUN_08004300",
                "FUN_08004490"
            ],
            "code": "\nvoid process_string_data_08004c8c(undefined *data)\n\n{\n  uint end_of_string_index;\n  undefined *current_string;\n  \n  current_string = data;\n  while( true ) {\n    end_of_string_index = find_end_of_string(data);\n    if (end_of_string_index <= (uint)((int)current_string - (int)data)) break;\n    process_data(*current_string);\n    current_string = current_string + 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_string_data_08004c8c",
            "entrypoint": "0x08004c8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c8c": "process_string_data_08004c8c",
                "find_end_of_string_08000150": "find_end_of_string",
                "param_1": "data",
                "process_binary_data_08004c18": "process_data",
                "puVar2": "current_string",
                "uVar1": "end_of_string_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004cac": {
            "additional_data": {
                "DAT_0800735e": {
                    "binary_data2": 1,
                    "data2": 2,
                    "string_data": 1
                },
                "DAT_20001636": {
                    "binary_data": 1,
                    "binary_data1": 1,
                    "data1": 2
                },
                "FUN_08004cac": {
                    "clear_and_process_binary_data": 2,
                    "clear_and_process_data": 6,
                    "clear_binary_data": 1,
                    "initialize_binary_data": 1,
                    "initialize_data": 1,
                    "initialize_data_processing": 1,
                    "process_and_clear_binary_data": 3,
                    "process_and_clear_data": 2,
                    "process_binary_data": 13,
                    "process_data": 1
                },
                "clear_binary_data_08004ffc": {
                    "clear_binary_data": 26,
                    "clear_data": 3
                },
                "param_1": {
                    "arg": 1,
                    "binary_data_param": 1,
                    "data": 6,
                    "data_param": 1,
                    "data_parameter": 1,
                    "data_pointer": 1,
                    "data_size": 5,
                    "input": 2,
                    "input_data": 2,
                    "input_param": 7,
                    "input_parameter": 1,
                    "param": 2,
                    "parameter": 1
                },
                "process_string_data_08004c8c": {
                    "process_string_data": 30
                }
            },
            "called": [
                "FUN_08004c8c",
                "FUN_08004ffc"
            ],
            "calling": [
                "FUN_08004490"
            ],
            "code": "\nvoid clear_and_process_binary_data_08004cac(undefined4 input_param)\n\n{\n  clear_binary_data(&DAT_20001636,&DAT_0800735e,input_param);\n  process_string_data(&DAT_20001636);\n  return;\n}\n\n",
            "current_name": "clear_and_process_binary_data_08004cac",
            "entrypoint": "0x08004cac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004cac": "clear_and_process_binary_data_08004cac",
                "clear_binary_data_08004ffc": "clear_binary_data",
                "param_1": "input_param",
                "process_string_data_08004c8c": "process_string_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ccc": {
            "additional_data": {
                "FUN_08004ccc": {
                    "configure_and_update_memory": 10,
                    "configure_and_update_memory_addresses": 3,
                    "configure_and_update_register": 1,
                    "configure_memory": 2,
                    "configure_memory_registers": 1,
                    "configure_register_and_memory": 1,
                    "configure_registers_and_memory": 1,
                    "enable_register_and_update_memory": 1,
                    "enable_register_bits": 1,
                    "initialize_flags": 1,
                    "initialize_memory_and_register": 1,
                    "initialize_register": 1,
                    "initialize_registers": 3,
                    "initialize_system": 1,
                    "set_memory_configuration": 1,
                    "set_register_bit": 1,
                    "update_register_configuration": 1
                },
                "_DAT_40021018": {
                    "register_bits": 2,
                    "register_flag": 1,
                    "register_settings": 1,
                    "register_state": 1,
                    "register_status": 2,
                    "register_value": 2
                },
                "configure_register_bits_08001170": {
                    "configure_register_bits": 7
                },
                "param_1": {
                    "arg1": 1,
                    "config_param1": 1,
                    "config_param_1": 1,
                    "first_param": 1,
                    "flag1": 1,
                    "input_param1": 2,
                    "param1": 2,
                    "register1": 1,
                    "register_1": 1,
                    "register_address": 2,
                    "register_bit": 2,
                    "register_config": 1,
                    "register_configuration_param": 1,
                    "register_param": 2,
                    "register_parameter": 1,
                    "register_value": 4,
                    "register_value1": 1,
                    "value1": 1,
                    "value_1": 5
                },
                "param_2": {
                    "arg2": 1,
                    "bit_mask": 2,
                    "config_param": 1,
                    "config_param1": 1,
                    "config_param2": 1,
                    "config_param_2": 1,
                    "config_value": 2,
                    "data_param": 1,
                    "flag2": 1,
                    "input_param2": 2,
                    "mask_parameter": 1,
                    "param2": 3,
                    "param_2": 1,
                    "parameter_2": 1,
                    "register2": 1,
                    "register_2": 1,
                    "register_bits_config_param": 1,
                    "register_value": 1,
                    "register_value2": 1,
                    "second_param": 1,
                    "value2": 1,
                    "value_2": 5
                },
                "param_3": {
                    "address_param": 2,
                    "address_parameter": 1,
                    "address_value": 1,
                    "arg3": 1,
                    "config_param2": 1,
                    "config_param3": 1,
                    "config_param_3": 1,
                    "flag3": 1,
                    "input_param3": 2,
                    "memory_address": 2,
                    "memory_address_param": 1,
                    "memory_value": 1,
                    "offset": 1,
                    "param3": 3,
                    "param_3": 1,
                    "parameter_3": 1,
                    "register3": 1,
                    "register_3": 1,
                    "register_value3": 1,
                    "third_param": 1,
                    "value3": 1,
                    "value_3": 5
                },
                "update_memory_address_08001194": {
                    "update_memory_address": 7
                }
            },
            "called": [
                "FUN_08001170",
                "FUN_08001194"
            ],
            "calling": [
                "FUN_08001128"
            ],
            "code": "\n\n\nvoid configure_and_update_memory_addresses_08004ccc(undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  _DAT_40021018 = _DAT_40021018 | 1;\n  configure_register_bits(3,value_2,_DAT_40021018,1,value_1,1,value_3);\n  update_memory_address(0xfffffff4,0);\n  update_memory_address(0xfffffff5,0);\n  update_memory_address(0xfffffff6,0);\n  update_memory_address(0xfffffffb,0);\n  update_memory_address(0xfffffffc,0);\n  update_memory_address(0xfffffffe,0);\n  update_memory_address(0xffffffff,0);\n  return;\n}\n\n",
            "current_name": "configure_and_update_memory_addresses_08004ccc",
            "entrypoint": "0x08004ccc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ccc": "configure_and_update_memory_addresses_08004ccc",
                "configure_register_bits_08001170": "configure_register_bits",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "update_memory_address_08001194": "update_memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d48": {
            "additional_data": {
                "FUN_08004d48": {
                    "apply_settings": 1,
                    "update_and_set_flag": 7,
                    "update_and_set_flags": 2,
                    "update_bits_and_set_flag": 2,
                    "update_bits_if_condition": 1,
                    "update_bits_if_condition_met": 2,
                    "update_bits_if_match": 3,
                    "update_config": 1,
                    "update_config_and_flag": 1,
                    "update_configuration": 1,
                    "update_data_and_flags": 1,
                    "update_memory": 2,
                    "update_memory_flags": 1,
                    "update_registers": 3,
                    "update_special_bits": 1,
                    "update_status": 1,
                    "update_values": 1
                },
                "_DAT_4002101c": {
                    "register": 1
                },
                "local_14": {
                    "bit_count": 1,
                    "bit_mask": 1,
                    "bit_mask2": 1,
                    "bit_shift": 2,
                    "bit_shift_count": 1,
                    "bits_2": 1,
                    "constant": 1,
                    "constant2": 1,
                    "constant_value2": 1,
                    "count": 1,
                    "data2": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "length": 1,
                    "mask_2": 3,
                    "new_flag2": 1,
                    "new_value2": 1,
                    "setting2": 1,
                    "shift": 2,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "updated_value2": 1,
                    "value": 2,
                    "value_2": 3
                },
                "local_18": {
                    "bit_mask": 2,
                    "bit_mask1": 1,
                    "bitmask": 3,
                    "bits_1": 1,
                    "bits_to_update": 1,
                    "config_value": 1,
                    "constant": 1,
                    "constant1": 1,
                    "constant_value1": 1,
                    "data1": 1,
                    "mask": 5,
                    "mask_1": 3,
                    "mask_value": 1,
                    "new_flag1": 1,
                    "new_value1": 1,
                    "offset": 1,
                    "setting1": 1,
                    "update_value": 1,
                    "updated_value1": 1,
                    "value_1": 3
                },
                "param_1": {
                    "address": 1,
                    "condition_ptr": 1,
                    "config_pointer": 2,
                    "config_ptr": 1,
                    "data": 1,
                    "data_ptr": 5,
                    "flag_ptr": 1,
                    "input_data": 1,
                    "input_flags": 1,
                    "input_param": 2,
                    "input_ptr": 3,
                    "input_value": 1,
                    "memory_address": 2,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "pointer": 2,
                    "register_value": 2,
                    "registers": 1,
                    "status_ptr": 1,
                    "target_address": 1
                },
                "param_2": {
                    "additional_data": 1,
                    "additional_value": 1,
                    "config_size": 1,
                    "config_value": 1,
                    "data": 1,
                    "flag": 2,
                    "flag_val": 1,
                    "flag_value": 2,
                    "flags": 1,
                    "other_param": 1,
                    "param": 3,
                    "param2": 1,
                    "param_2": 1,
                    "param_value": 1,
                    "size": 1,
                    "status_flag": 1,
                    "status_value": 1,
                    "undefined_param": 1,
                    "value": 9
                }
            },
            "called": [
                "FUN_08001264"
            ],
            "calling": [
                "FUN_08001754"
            ],
            "code": "\n\n\nvoid update_bits_and_set_flag_08004d48(int *data_ptr,undefined4 value)\n\n{\n  undefined4 mask;\n  undefined4 value_2;\n  \n  if (*data_ptr == 0x40005400) {\n    mask = 0xc0;\n    value_2 = 0x12;\n    update_bits_08001264(0x40010c00,&mask,0x40005400,3,data_ptr,value);\n    _DAT_4002101c = _DAT_4002101c | 0x200000;\n  }\n  return;\n}\n\n",
            "current_name": "update_bits_and_set_flag_08004d48",
            "entrypoint": "0x08004d48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d48": "update_bits_and_set_flag_08004d48",
                "local_14": "value_2",
                "local_18": "mask",
                "param_1": "data_ptr",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d8c": {
            "additional_data": {
                "FUN_08004d8c": {
                    "check_flag": 1,
                    "configure_data_access": 1,
                    "set_bits_for_value": 1,
                    "set_control_bits": 1,
                    "set_flags_based_on_value": 1,
                    "update_configuration": 1,
                    "update_control_register": 2,
                    "update_control_settings": 1,
                    "update_control_status": 1,
                    "update_data": 1,
                    "update_data_flags": 3,
                    "update_data_value": 1,
                    "update_flag_bits": 1,
                    "update_flags": 5,
                    "update_flags_based_on_value": 2,
                    "update_register_flags": 1,
                    "update_settings": 4,
                    "update_status": 1,
                    "update_status_flags": 2
                },
                "_DAT_40021018": {
                    "flag1": 1,
                    "flags1": 1
                },
                "_DAT_4002101c": {
                    "flag2": 1,
                    "flags2": 1
                },
                "iVar1": {
                    "config_value": 1,
                    "control_value": 1,
                    "current_setting": 1,
                    "current_value": 2,
                    "data_value": 1,
                    "flag_value": 5,
                    "input_value": 3,
                    "opcode": 1,
                    "status_value": 1,
                    "temp_value": 1,
                    "value": 14
                },
                "param_1": {
                    "config_ptr": 1,
                    "data": 4,
                    "data_flags": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_value": 1,
                    "flag": 2,
                    "flag_address": 1,
                    "flags_ptr": 1,
                    "input_array": 1,
                    "input_value": 2,
                    "setting_value": 1,
                    "settings": 4,
                    "status": 2,
                    "status_flag": 1,
                    "value": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_080023d0"
            ],
            "code": "\n\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nvoid update_data_flags_08004d8c(int *value)\n\n{\n  int value;\n  \n  value = *value;\n  if (value == 0x40012c00) {\n    _DAT_40021018 = _DAT_40021018 | 0x800;\n  }\n  else if (value == 0x40000000) {\n    _DAT_4002101c = _DAT_4002101c | 1;\n  }\n  else if (value == 0x40000400) {\n    _DAT_4002101c = _DAT_4002101c | 2;\n  }\n  else if (value == 0x40000800) {\n    _DAT_4002101c = _DAT_4002101c | 4;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_flags_08004d8c",
            "entrypoint": "0x08004d8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d8c": "update_data_flags_08004d8c",
                "iVar1": "value",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e14": {
            "additional_data": {
                "FUN_08004e14": {
                    "decode_and_update_bits": 1,
                    "initialize_and_update_bits": 1,
                    "process_input": 1,
                    "update_bits": 23,
                    "update_bits_based_on_value": 1,
                    "update_bits_function": 1,
                    "update_bits_with_param": 1,
                    "update_bits_with_value": 1,
                    "update_function": 1
                },
                "iVar2": {
                    "bit_value": 1,
                    "current_value": 1,
                    "data": 1,
                    "data_value": 2,
                    "first_value": 1,
                    "input_check": 1,
                    "input_value": 17,
                    "value": 7
                },
                "local_14": {
                    "bit_value": 2,
                    "constant_1": 1,
                    "constant_2": 2,
                    "constant_3": 1,
                    "local_var1": 2,
                    "local_var2": 1,
                    "local_var_1": 1,
                    "local_variable1": 1,
                    "new_value2": 4,
                    "not_used": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "unused1": 1,
                    "unused_value": 4,
                    "unused_var": 1,
                    "unused_var1": 1,
                    "unused_variable": 1,
                    "updated_value2": 1,
                    "value3": 2,
                    "variable1": 1
                },
                "local_18": {
                    "bit_mask": 5,
                    "bitmask": 1,
                    "bits_to_update": 6,
                    "bits_value": 1,
                    "local_var1": 1,
                    "mask": 1,
                    "new_value": 5,
                    "new_value1": 4,
                    "update_value": 1,
                    "updated_value": 5,
                    "updated_value1": 1
                },
                "local_c": {
                    "bitmask_constant": 1,
                    "const_value": 1,
                    "constant": 4,
                    "constant1": 1,
                    "constant2": 1,
                    "constant_3": 1,
                    "constant_4": 3,
                    "constant_value": 1,
                    "local_var2": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "local_var_3": 1,
                    "local_variable2": 1,
                    "new_value4": 3,
                    "not_used": 1,
                    "temp_variable": 1,
                    "unused3": 1,
                    "unused_flag": 1,
                    "unused_var2": 1,
                    "unused_var3": 1,
                    "unused_variable": 1,
                    "value4": 1,
                    "value5": 1,
                    "variable2": 1
                },
                "param_1": {
                    "bit_value": 1,
                    "data": 2,
                    "data_ptr": 1,
                    "input": 13,
                    "input_array": 1,
                    "input_data": 5,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_ptr": 3,
                    "input_value": 2
                },
                "param_2": {
                    "constant1": 1,
                    "constant_1": 1,
                    "param1": 3,
                    "param2": 2,
                    "param_2": 3,
                    "parameter1": 1,
                    "size": 1,
                    "size1": 1,
                    "unused_param": 4,
                    "unused_parameter": 1,
                    "value1": 10,
                    "value_1": 3
                },
                "param_3": {
                    "additional_param": 1,
                    "bitmask_value": 1,
                    "bits": 1,
                    "constant2": 1,
                    "constant_2": 1,
                    "new_value": 1,
                    "param2": 3,
                    "param3": 2,
                    "param_3": 3,
                    "parameter2": 1,
                    "size2": 1,
                    "value": 1,
                    "value2": 10,
                    "value_2": 3,
                    "value_to_update": 1
                },
                "uStack_10": {
                    "constant3": 1,
                    "constant_2": 1,
                    "constant_3": 2,
                    "constant_value2": 1,
                    "extra_value": 1,
                    "local_var2": 1,
                    "local_var3": 1,
                    "local_var_2": 1,
                    "local_variable3": 1,
                    "new_value3": 3,
                    "param2_copy": 1,
                    "param3": 1,
                    "stack_value": 2,
                    "temp_value": 3,
                    "temp_var2": 1,
                    "unused2": 1,
                    "unused_param": 1,
                    "unused_var2": 1,
                    "unused_variable": 1,
                    "updated_size2": 1,
                    "value3": 1,
                    "value4": 1,
                    "value5": 1,
                    "variable3": 1
                },
                "uVar1": {
                    "address": 1,
                    "base_address": 1,
                    "constant": 2,
                    "constant1": 5,
                    "constant2": 1,
                    "constant3": 1,
                    "constant_1": 2,
                    "constant_4": 1,
                    "constant_value": 4,
                    "constant_value1": 1,
                    "mask_value": 1,
                    "new_value": 1,
                    "reference_address": 1,
                    "target_address": 1,
                    "update_value": 1,
                    "updated_value": 1,
                    "value": 2,
                    "value_to_update": 1
                },
                "update_bits_08001264": {
                    "update_bits_helper": 2
                }
            },
            "called": [
                "FUN_08001264"
            ],
            "calling": [
                "FUN_0800458c"
            ],
            "code": "\nvoid initialize_and_update_bits_08004e14(int *input,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 constant1;\n  int input_value;\n  undefined4 bits_to_update;\n  undefined4 new_value2;\n  undefined4 new_value3;\n  undefined4 constant;\n  \n  input_value = *input;\n  if (input_value == 0x40012c00) {\n    bits_to_update = 0x800;\n  }\n  else {\n    if (input_value != 0x40000000) {\n      if (input_value == 0x40000400) {\n        bits_to_update = 3;\n      }\n      else {\n        if (input_value != 0x40000800) {\n          return;\n        }\n        bits_to_update = 0x300;\n      }\n      constant1 = 0x40010c00;\n      goto LAB_08004e2e;\n    }\n    bits_to_update = 2;\n  }\n  constant1 = 0x40010800;\nLAB_08004e2e:\n  constant = 2;\n  new_value2 = 2;\n  new_value3 = value2;\n  update_bits_helper(constant1,&bits_to_update);\n  return;\n}\n\n",
            "current_name": "initialize_and_update_bits_08004e14",
            "entrypoint": "0x08004e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e14": "initialize_and_update_bits_08004e14",
                "iVar2": "input_value",
                "local_14": "new_value2",
                "local_18": "bits_to_update",
                "local_c": "constant",
                "param_1": "input",
                "param_2": "value1",
                "param_3": "value2",
                "uStack_10": "new_value3",
                "uVar1": "constant1",
                "update_bits_08001264": "update_bits_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e7c": {
            "additional_data": {
                "FUN_08004e7c": {
                    "handle_binary": 1,
                    "update_and_set_bits": 2,
                    "update_and_set_flags": 1,
                    "update_binary_and_memory": 1,
                    "update_bit_fields": 1,
                    "update_config": 1,
                    "update_data": 1,
                    "update_flags_and_memory": 1,
                    "update_function_params": 1,
                    "update_memory": 1,
                    "update_memory_address": 2,
                    "update_memory_address_and_bits": 3,
                    "update_memory_and_bit_arrays": 1,
                    "update_memory_and_bits": 12,
                    "update_memory_location": 1,
                    "update_status_if_memory_matches": 1
                },
                "_DAT_40021018": {
                    "memory_address1": 1
                },
                "local_10": {
                    "bit_mask": 1,
                    "bit_mask3": 1,
                    "bit_value": 2,
                    "bit_value3": 3,
                    "bit_value4": 1,
                    "bit_value_4": 1,
                    "bitmask3": 1,
                    "bits3": 1,
                    "bits_to_update3": 1,
                    "bits_value4": 1,
                    "bits_value_4": 1,
                    "index3": 1,
                    "mask3": 2,
                    "mask4": 1,
                    "unused_var1": 1,
                    "update_value4": 1,
                    "value2": 1,
                    "value4": 1,
                    "var3": 1
                },
                "local_14": {
                    "bit_mask2": 3,
                    "bit_offset": 1,
                    "bit_value": 2,
                    "bit_value2": 4,
                    "bit_value_2": 1,
                    "bitmask2": 2,
                    "bits2": 1,
                    "bits_count": 1,
                    "bits_to_update2": 2,
                    "bits_value2": 2,
                    "bits_value_2": 1,
                    "flag2": 2,
                    "index2": 1,
                    "mask2": 3,
                    "second_value": 1,
                    "update_value2": 1,
                    "value1": 1,
                    "value2": 1,
                    "var2": 1
                },
                "local_18": {
                    "bit_mask": 1,
                    "bit_mask1": 3,
                    "bit_offset": 1,
                    "bit_value1": 4,
                    "bit_value_1": 1,
                    "bitmask1": 2,
                    "bits1": 1,
                    "bits_to_set": 1,
                    "bits_to_update1": 2,
                    "bits_value": 1,
                    "bits_value1": 2,
                    "bits_value_1": 1,
                    "first_value": 1,
                    "flag1": 1,
                    "index1": 1,
                    "mask1": 3,
                    "size": 1,
                    "status_flag": 1,
                    "update_value1": 1,
                    "value1": 1,
                    "var1": 1
                },
                "local_c": {
                    "bit_mask3": 2,
                    "bit_mask4": 1,
                    "bit_position": 1,
                    "bit_value": 1,
                    "bit_value3": 1,
                    "bit_value4": 3,
                    "bit_value_3": 1,
                    "bitmask3": 1,
                    "bitmask4": 1,
                    "bits4": 1,
                    "bits_to_update3": 1,
                    "bits_to_update4": 1,
                    "bits_value3": 2,
                    "bits_value_3": 1,
                    "flag3": 2,
                    "index4": 1,
                    "mask3": 1,
                    "mask4": 2,
                    "third_value": 1,
                    "unused_var2": 1,
                    "unused_variable": 1,
                    "update_value3": 1,
                    "value3": 2,
                    "var4": 1
                },
                "param_1": {
                    "address": 2,
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "binary_data": 1,
                    "binary_ptr": 1,
                    "bit_data": 1,
                    "bit_flag": 1,
                    "config": 1,
                    "data": 1,
                    "flag_pointer": 1,
                    "input": 2,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_value": 1,
                    "memory_address": 7,
                    "memory_ptr": 1,
                    "param": 3,
                    "ptr_input": 1
                },
                "set_bit_in_array_080011fc": {
                    "set_bit_in_array": 2
                },
                "update_bits_08001264": {
                    "update_bits": 2
                },
                "update_memory_address_08001194": {
                    "update_memory_address": 2
                }
            },
            "called": [
                "FUN_08001264",
                "FUN_080011fc",
                "FUN_08001194"
            ],
            "calling": [
                "FUN_08002724"
            ],
            "code": "\n\n\nvoid update_memory_address_and_bits_08004e7c(int *memory_address)\n\n{\n  undefined4 bit_value1;\n  undefined4 bit_value2;\n  undefined4 bit_value3;\n  undefined4 bit_value4;\n  \n  if (*memory_address == 0x40013800) {\n    _DAT_40021018 = _DAT_40021018 | 0x4000;\n    bit_value1 = 0x200;\n    bit_value2 = 2;\n    bit_value4 = 3;\n    update_bits(0x40010800,&bit_value1);\n    bit_value1 = 0x400;\n    bit_value2 = 0;\n    bit_value3 = 0;\n    update_bits(0x40010800,&bit_value1);\n    update_memory_address(0x25,0,0);\n    set_bit_in_array(0x25);\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_address_and_bits_08004e7c",
            "entrypoint": "0x08004e7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e7c": "update_memory_address_and_bits_08004e7c",
                "local_10": "bit_value3",
                "local_14": "bit_value2",
                "local_18": "bit_value1",
                "local_c": "bit_value4",
                "param_1": "memory_address",
                "set_bit_in_array_080011fc": "set_bit_in_array",
                "update_bits_08001264": "update_bits",
                "update_memory_address_08001194": "update_memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004f10": {
            "additional_data": {
                "": {
                    "": 2
                },
                "0x8000000": {
                    "interrupt_value": 1
                },
                "0x9f0000": {
                    "memory_value": 1
                },
                "0xf8800000": {
                    "bitmask2": 1
                },
                "0xfef2ffff": {
                    "bitmask1": 1
                },
                "1": {
                    "bit_value1": 1
                },
                "FUN_08004f10": {
                    "configure_controller": 1,
                    "configure_memory": 3,
                    "configure_memory_regions": 1,
                    "configure_peripheral": 1,
                    "configure_peripheral_registers": 1,
                    "initialize_device": 2,
                    "initialize_flags": 2,
                    "initialize_hardware": 1,
                    "initialize_memory": 3,
                    "initialize_peripheral_registers": 1,
                    "initialize_peripherals": 2,
                    "initialize_registers": 9,
                    "initialize_system": 2,
                    "set_bitmask_values": 1,
                    "set_memory_config": 1
                },
                "_DAT_40021000": {
                    "configuration_reg1": 1,
                    "control_register": 3,
                    "control_register1": 4,
                    "control_register_1": 1,
                    "controller_register": 1,
                    "ctrl_reg1": 1,
                    "device_control_register": 2,
                    "flags_register": 2,
                    "memory": 1,
                    "memory_address1": 1,
                    "memory_config1": 1,
                    "memory_config_reg1": 1,
                    "memory_config_register": 1,
                    "memory_register1": 1,
                    "peripheral_control_register": 1,
                    "peripheral_control_register1": 1,
                    "peripheral_register1": 1,
                    "peripheral_register_1": 1,
                    "register1": 4,
                    "register_status": 1
                },
                "_DAT_40021004": {
                    "configuration_reg2": 1,
                    "configuration_register": 1,
                    "control_register": 1,
                    "control_register2": 4,
                    "control_register_2": 1,
                    "controller_configuration": 1,
                    "ctrl_reg2": 1,
                    "device_config_register": 1,
                    "device_status_register": 1,
                    "flag": 1,
                    "memory_address2": 1,
                    "memory_address_register": 1,
                    "memory_config2": 1,
                    "memory_config_reg2": 1,
                    "memory_register2": 1,
                    "peripheral_config_register": 1,
                    "peripheral_control_register2": 1,
                    "peripheral_register2": 1,
                    "peripheral_register_2": 1,
                    "register2": 4,
                    "register_config": 1,
                    "status_register": 3
                },
                "_DAT_40021008": {
                    "address_reg": 1,
                    "base_address_register": 1,
                    "communication_control_register": 1,
                    "constant_value": 1,
                    "control_register": 1,
                    "control_register_3": 1,
                    "controller_address": 1,
                    "data": 1,
                    "data_reg": 1,
                    "data_register": 1,
                    "device_configuration_register": 1,
                    "device_status_register": 1,
                    "interrupt_mask_register": 1,
                    "memory_address": 1,
                    "memory_address3": 1,
                    "memory_config3": 1,
                    "memory_config_reg3": 1,
                    "memory_data_register": 1,
                    "memory_layout": 1,
                    "peripheral_address_register": 1,
                    "peripheral_register3": 1,
                    "peripheral_register_3": 1,
                    "register3": 4,
                    "register_data": 1,
                    "special_value": 1,
                    "timer_config": 1,
                    "timer_config_register": 1,
                    "timer_control_register": 1
                },
                "_DAT_e000ed08": {
                    "control": 1,
                    "control_register_4": 1,
                    "exception_control": 1,
                    "exception_control_register": 1,
                    "exception_handler_config": 1,
                    "interrupt_address": 1,
                    "interrupt_config_register": 1,
                    "interrupt_control": 1,
                    "interrupt_control_register": 4,
                    "interrupt_priority_register": 1,
                    "interrupt_reg": 2,
                    "interrupt_register": 5,
                    "memory_address4": 1,
                    "memory_config_reg4": 1,
                    "peripheral_interrupt_register": 1,
                    "peripheral_register4": 1,
                    "peripheral_register_4": 1,
                    "register4": 4,
                    "special_register": 1,
                    "system_control_register": 1
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_peripheral_registers_08004f10(void)\n\n{\n  _DAT_40021000 = _DAT_40021000 & 0xfef2ffff | 1;\n  _DAT_40021004 = _DAT_40021004 & 0xf8800000;\n  _DAT_40021008 = 0x9f0000;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_registers_08004f10",
            "entrypoint": "0x08004f10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004f10": "initialize_peripheral_registers_08004f10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004fb4": {
            "additional_data": {
                "FUNC_080072d4": {
                    "perform_cleanup": 1
                },
                "FUN_08004fb4": {
                    "execute_all_functions": 1,
                    "execute_binary_functions": 1,
                    "execute_code_blocks": 1,
                    "execute_function_array": 4,
                    "execute_function_sequence": 1,
                    "execute_functions": 23
                },
                "iVar1": {
                    "counter": 4,
                    "function_index": 2,
                    "index": 23,
                    "iteration_count": 1,
                    "iteration_index": 1
                }
            },
            "called": [
                "FUN_080072d4",
                "FUN_08000134"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid execute_all_functions_08004fb4(void)\n\n{\n  int index;\n  \n  for (index = 0; index != 0; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  FUNC_080072d4();\n  for (index = 0; index != 1; index = index + 1) {\n    (*(code *)(&DAT_08007440)[index])();\n  }\n  return;\n}\n\n",
            "current_name": "execute_all_functions_08004fb4",
            "entrypoint": "0x08004fb4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004fb4": "execute_all_functions_08004fb4",
                "iVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004ffc": {
            "additional_data": {
                "FUN_08004ffc": {
                    "clear_binary_data": 13,
                    "clear_data_and_return": 1,
                    "clear_data_array": 1,
                    "clear_data_buffer": 1,
                    "initialize_binary_data": 2,
                    "initialize_data": 8,
                    "process_and_reset_data": 1,
                    "process_binary_data": 3,
                    "zero_out_array": 1
                },
                "local_64": {
                    "current_max_value": 1,
                    "limit2": 1,
                    "local_var4": 2,
                    "max_ptr_value": 1,
                    "max_signed_value": 1,
                    "max_size": 1,
                    "max_size_copy": 1,
                    "max_value": 1,
                    "max_value1": 1,
                    "max_value2": 11,
                    "max_value_2": 3,
                    "max_value_copy": 3,
                    "min_value": 1,
                    "min_value_copy2": 1,
                    "new_value": 1,
                    "param_4_limit": 1
                },
                "local_68": {
                    "array_pointer": 1,
                    "current_address": 1,
                    "current_buffer": 5,
                    "current_buffer_ptr": 1,
                    "current_data": 6,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "current_pointer": 2,
                    "current_ptr": 2,
                    "data_copy": 1,
                    "data_pointer2": 1,
                    "data_pointer_copy": 2,
                    "data_ptr": 1,
                    "data_ptr_copy": 1,
                    "local_data_pointer": 3,
                    "ptr_to_binary_data": 1,
                    "temp_pointer": 1
                },
                "local_6a": {
                    "array_index_limit": 1,
                    "constant2": 3,
                    "constant_two": 1,
                    "default_value": 4,
                    "limit_value": 1,
                    "local_var3": 2,
                    "lower_bound": 1,
                    "mask": 1,
                    "mask_value": 1,
                    "max_short": 1,
                    "max_short_value": 3,
                    "max_size": 1,
                    "max_value": 2,
                    "max_value2": 1,
                    "min_value_copy": 1,
                    "negative_one": 1,
                    "param_2_limit": 1,
                    "short_value": 1,
                    "size2": 2,
                    "size_2": 1
                },
                "local_6c": {
                    "array_length": 1,
                    "array_size": 3,
                    "buffer_length": 1,
                    "buffer_size": 12,
                    "constant1": 3,
                    "constant_one": 1,
                    "data_length": 1,
                    "data_size": 2,
                    "local_var2": 2,
                    "size": 1,
                    "size1": 2,
                    "size_1": 1,
                    "size_limit": 1
                },
                "local_70": {
                    "limit1": 1,
                    "local_var1": 2,
                    "max_limit": 1,
                    "max_size": 2,
                    "max_value": 22,
                    "max_value1": 2,
                    "max_value_copy": 1
                },
                "local_78": {
                    "array_pointers": 1,
                    "binary_data_array": 1,
                    "buffer": 1,
                    "buffer_address": 1,
                    "buffer_array": 2,
                    "buffer_list": 1,
                    "buffer_ptr": 1,
                    "data_buffer": 2,
                    "data_pointer": 2,
                    "data_pointers": 1,
                    "data_ptr": 1,
                    "local_array": 2,
                    "local_buffers": 1,
                    "local_data": 5,
                    "local_data_array": 5,
                    "local_variables": 1,
                    "pointer_array": 1,
                    "ptr_to_data_array": 1,
                    "temporary_data": 1
                },
                "param_1": {
                    "array": 1,
                    "binary_data": 4,
                    "data": 4,
                    "data_array": 1,
                    "data_array_ptr": 1,
                    "data_buffer": 7,
                    "data_pointer": 10,
                    "data_ptr": 1,
                    "input_data": 2
                },
                "param_2": {
                    "buffer_size": 1,
                    "first_param": 1,
                    "input_value1": 1,
                    "length": 6,
                    "limit_1": 1,
                    "offset": 1,
                    "param2": 4,
                    "param_2": 1,
                    "size": 5,
                    "size_param": 2,
                    "value": 1,
                    "value1": 5,
                    "value_1": 1
                },
                "param_3": {
                    "arg3": 1,
                    "input_value2": 1,
                    "length": 1,
                    "limit_2": 1,
                    "min_value": 1,
                    "param3": 8,
                    "param_3": 5,
                    "second_param": 1,
                    "value": 2,
                    "value1": 2,
                    "value2": 5,
                    "value_1": 1,
                    "value_2": 1
                },
                "param_4": {
                    "arg4": 1,
                    "flag": 1,
                    "input_value3": 1,
                    "limit_3": 1,
                    "max_value": 1,
                    "offset": 1,
                    "param4": 8,
                    "param_4": 5,
                    "third_param": 1,
                    "value2": 2,
                    "value3": 5,
                    "value_2": 1,
                    "value_3": 1
                },
                "uStack_4": {
                    "param4": 1,
                    "param4_copy": 2,
                    "parameter4": 1,
                    "stack_param3": 1,
                    "stack_param_3": 1,
                    "stack_var3": 1
                },
                "uStack_8": {
                    "param3": 1,
                    "param3_copy": 2,
                    "parameter3": 1,
                    "stack_param2": 1,
                    "stack_param_2": 1,
                    "stack_var2": 1
                },
                "uStack_c": {
                    "param2": 1,
                    "param2_copy": 2,
                    "parameter2": 1,
                    "stack_param1": 1,
                    "stack_param_1": 1,
                    "stack_var1": 1
                }
            },
            "called": [
                "FUN_080050fc"
            ],
            "calling": [
                "FUN_08004cac"
            ],
            "code": "\nvoid clear_binary_data_08004ffc(undefined *data_pointer,undefined4 length,undefined4 param3,undefined4 param4)\n\n{\n  undefined *local_data_array [2];\n  undefined4 max_value;\n  undefined2 buffer_size;\n  undefined2 default_value;\n  undefined *current_data;\n  undefined4 max_value2;\n  undefined4 param2_copy;\n  undefined4 param3_copy;\n  undefined4 param4_copy;\n  \n  buffer_size = 0x208;\n  max_value = 0x7fffffff;\n  max_value2 = 0x7fffffff;\n  default_value = 0xffff;\n  local_data_array[0] = data_pointer;\n  current_data = data_pointer;\n  param2_copy = length;\n  param3_copy = param3;\n  param4_copy = param4;\n  process_binary_data_080050fc(DAT_200001c0,local_data_array,length);\n  *local_data_array[0] = 0;\n  return;\n}\n\n",
            "current_name": "clear_binary_data_08004ffc",
            "entrypoint": "0x08004ffc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004ffc": "clear_binary_data_08004ffc",
                "local_64": "max_value2",
                "local_68": "current_data",
                "local_6a": "default_value",
                "local_6c": "buffer_size",
                "local_70": "max_value",
                "local_78": "local_data_array",
                "param_1": "data_pointer",
                "param_2": "length",
                "param_3": "param3",
                "param_4": "param4",
                "uStack_4": "param4_copy",
                "uStack_8": "param3_copy",
                "uStack_c": "param2_copy"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005044": {
            "additional_data": {
                "FUN_08005044": {
                    "allocate_and_copy_data": 15,
                    "allocate_and_copy_or_reverse_data": 1,
                    "allocate_memory_and_copy_data": 1,
                    "allocate_or_copy_data": 2,
                    "copy_and_reverse_data": 3,
                    "copy_and_update_buffer": 1,
                    "copy_and_update_data": 2,
                    "copy_data_and_allocate_memory": 2,
                    "copy_data_with_memory_allocation": 1,
                    "reverse_and_copy_data": 1,
                    "update_and_copy_data": 1
                },
                "LAB_0800508a": {
                    "allocation_error": 1,
                    "allocation_failed": 1,
                    "allocation_failure": 1,
                    "handle_allocation_failure": 1
                },
                "allocate_and_initialize_memory_08005714": {
                    "allocate_and_initialize_memory": 8
                },
                "allocate_and_initialize_memory_or_copy_data_080057d0": {
                    "allocate_and_initialize_memory_or_copy_data": 8
                },
                "copy_data_to_buffer_08005630": {
                    "copy_data_to_buffer": 9
                },
                "iVar1": {
                    "allocated_buffer": 3,
                    "allocated_memory": 9,
                    "allocated_ptr": 2,
                    "allocation_result": 2,
                    "buffer_address": 1,
                    "memory_address": 2,
                    "memory_allocation_result": 1,
                    "new_buffer": 3,
                    "new_buffer_address": 2,
                    "new_ptr": 1,
                    "result": 5
                },
                "iVar4": {
                    "buffer_diff": 1,
                    "buffer_offset": 1,
                    "buffer_start": 1,
                    "data_offset": 1,
                    "difference": 1,
                    "input_data_offset": 1,
                    "offset": 23,
                    "original_offset": 1,
                    "relative_offset": 1
                },
                "iVar5": {
                    "memory_ptr": 1
                },
                "param_1": {
                    "buffer": 3,
                    "dest": 1,
                    "dest_ptr": 1,
                    "destination": 2,
                    "out_buffer": 1,
                    "output": 2,
                    "output_buffer": 18,
                    "result_ptr": 2,
                    "target_buffer": 1
                },
                "param_2": {
                    "buffer": 1,
                    "buffer_ptr": 1,
                    "data": 2,
                    "data_info": 1,
                    "input_buffer": 17,
                    "input_data": 3,
                    "source": 2,
                    "source_buffer": 1,
                    "source_data": 1,
                    "source_ptr": 1,
                    "src": 1
                },
                "param_3": {
                    "data": 18,
                    "data_size": 3,
                    "data_to_copy": 4,
                    "data_value": 1,
                    "destination": 1,
                    "input_data": 1,
                    "input_size": 1,
                    "length": 2
                },
                "param_4": {
                    "copy_length": 5,
                    "copy_size": 3,
                    "data_size": 2,
                    "index": 1,
                    "length": 9,
                    "num_elements": 1,
                    "required_length": 1,
                    "size": 9
                },
                "reverse_and_copy_data_08005646": {
                    "reverse_and_copy_data": 8,
                    "reverse_and_copy_data_to_output": 1
                },
                "uVar2": {
                    "adjusted_length": 1,
                    "buffer_end": 1,
                    "calculated_size": 1,
                    "end_index": 1,
                    "end_of_copy_range": 1,
                    "final_length": 1,
                    "max_copy_size": 1,
                    "max_length": 1,
                    "new_buffer_size": 2,
                    "new_data_size": 1,
                    "new_length": 8,
                    "new_num_elements": 1,
                    "new_offset": 1,
                    "new_size": 5,
                    "updated_copy_length": 1,
                    "updated_size": 4
                },
                "uVar3": {
                    "buffer_length": 3,
                    "buffer_size": 4,
                    "current_buffer_size": 1,
                    "current_data_size": 1,
                    "current_length": 3,
                    "current_size": 1,
                    "data_length": 1,
                    "initial_size": 1,
                    "input_buffer_size": 3,
                    "input_data_end": 1,
                    "input_length": 1,
                    "input_size": 2,
                    "limit": 1,
                    "old_length": 1,
                    "old_num_elements": 1,
                    "original_length": 1,
                    "remaining_length": 1,
                    "source_data_length": 1,
                    "source_length": 2,
                    "source_size": 1
                },
                "update_linked_list_0800567c": {
                    "update_linked_list": 9
                }
            },
            "called": [
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_080057d0",
                "FUN_08005714",
                "FUN_08005646"
            ],
            "calling": [
                "FUN_080050fc"
            ],
            "code": "\nundefined4 allocate_memory_and_copy_data_08005044(undefined4 *output_buffer,int *input_buffer,undefined4 data,uint size)\n\n{\n  int allocated_memory;\n  uint new_length;\n  uint buffer_size;\n  int offset;\n  \n  buffer_size = input_buffer[2];\n  if ((buffer_size <= size) && ((*(ushort *)(input_buffer + 3) & 0x480) != 0)) {\n    offset = *input_buffer - input_buffer[4];\n    buffer_size = (uint)(input_buffer[5] * 3) / 2;\n    new_length = size + 1 + offset;\n    if (buffer_size < new_length) {\n      buffer_size = new_length;\n    }\n    if ((int)((uint)*(ushort *)(input_buffer + 3) << 0x15) < 0) {\n      allocated_memory = allocate_and_initialize_memory(output_buffer,buffer_size);\n      if (allocated_memory == 0) {\nallocation_error:\n        *output_buffer = 0xc;\n        *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      copy_data_to_buffer(allocated_memory,input_buffer[4],offset);\n      *(ushort *)(input_buffer + 3) = *(ushort *)(input_buffer + 3) & 0xfb7f | 0x80;\n    }\n    else {\n      allocated_memory = allocate_and_initialize_memory_or_copy_data(output_buffer,input_buffer[4],buffer_size);\n      if (allocated_memory == 0) {\n        update_linked_list(output_buffer,input_buffer[4]);\n        goto allocation_error;\n      }\n    }\n    input_buffer[4] = allocated_memory;\n    *input_buffer = allocated_memory + offset;\n    input_buffer[5] = buffer_size;\n    input_buffer[2] = buffer_size - offset;\n    buffer_size = size;\n  }\n  if (size <= buffer_size) {\n    buffer_size = size;\n  }\n  reverse_and_copy_data(*input_buffer,data,buffer_size);\n  input_buffer[2] = input_buffer[2] - buffer_size;\n  *input_buffer = buffer_size + *input_buffer;\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_and_copy_data_08005044",
            "entrypoint": "0x08005044",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005044": "allocate_memory_and_copy_data_08005044",
                "LAB_0800508a": "allocation_error",
                "allocate_and_initialize_memory_08005714": "allocate_and_initialize_memory",
                "allocate_and_initialize_memory_or_copy_data_080057d0": "allocate_and_initialize_memory_or_copy_data",
                "copy_data_to_buffer_08005630": "copy_data_to_buffer",
                "iVar1": "allocated_memory",
                "iVar4": "offset",
                "param_1": "output_buffer",
                "param_2": "input_buffer",
                "param_3": "data",
                "param_4": "size",
                "reverse_and_copy_data_08005646": "reverse_and_copy_data",
                "uVar2": "new_length",
                "uVar3": "buffer_size",
                "update_linked_list_0800567c": "update_linked_list"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080050fc": {
            "additional_data": {
                "DAT_08005714": {
                    "initialize_memory": 1
                },
                "DAT_08007379": {
                    "char_set1": 1,
                    "number_characters": 1,
                    "valid_chars": 1
                },
                "DAT_0800737f": {
                    "char_set2": 1,
                    "length_specifiers": 1,
                    "valid_chars2": 1
                },
                "FUN_080050fc": {
                    "decode_and_process": 2,
                    "extract_and_process_data": 2,
                    "parse_and_process_data": 1,
                    "process_binary_data": 3,
                    "process_bytes": 1,
                    "process_data": 21,
                    "simplify_and_process_data": 1
                },
                "allocate_and_initialize_memory_08005714": {
                    "allocate_and_initialize_memory": 2
                },
                "allocate_memory_and_copy_data_08005044": {
                    "allocate_and_copy_data": 1,
                    "allocate_memory_and_copy_data": 1
                },
                "bVar4": {
                    "digit_found": 1,
                    "flag": 1,
                    "found": 2,
                    "found_digit": 5,
                    "found_digit_or_dot": 1,
                    "found_flag": 1,
                    "found_number": 1,
                    "has_digits": 1,
                    "has_number": 2,
                    "is_digit": 4,
                    "is_num": 1,
                    "is_number": 4,
                    "is_numeric": 5,
                    "is_true": 2
                },
                "decode_and_process_data_080053d4": {
                    "decode_and_process_data": 2
                },
                "find_character_in_string_08005614": {
                    "find_char_in_string": 1,
                    "find_character_in_string": 1
                },
                "iVar1": {
                    "buffer_size": 1,
                    "count": 1,
                    "current_index": 1,
                    "index": 2,
                    "index1": 2,
                    "index_1": 1,
                    "length": 1,
                    "result": 17,
                    "result1": 1,
                    "result_code": 1,
                    "result_var1": 1,
                    "return_value": 1,
                    "temp_var1": 1
                },
                "iVar2": {
                    "alloc_result": 1,
                    "allocated_memory": 2,
                    "allocated_size": 1,
                    "allocation_result": 9,
                    "bytes_copied": 1,
                    "copy_result": 2,
                    "index2": 2,
                    "index_2": 1,
                    "result": 4,
                    "result2": 1,
                    "result_status": 1,
                    "result_var2": 1,
                    "size": 1,
                    "temp_result": 3,
                    "temp_var2": 1
                },
                "local_30": {
                    "alignment_flag": 1,
                    "arg_pointer": 1,
                    "const4": 2,
                    "constant3": 1,
                    "constant4": 2,
                    "flag2": 1,
                    "flag4": 6,
                    "ignored": 1,
                    "null_flag": 1,
                    "padding": 1,
                    "padding_flag": 1,
                    "precision_flag": 1,
                    "precision_width": 1,
                    "res_var4": 1,
                    "special_char4": 1,
                    "temp_value2": 1,
                    "temp_value_3": 1,
                    "type": 1,
                    "unused2": 3,
                    "variable_4": 1,
                    "zero_flag": 1
                },
                "local_40": {
                    "characters_to_copy": 1
                },
                "local_45": {
                    "alignment": 1,
                    "alignment_char": 1,
                    "alignment_flag": 1,
                    "const3": 2,
                    "constant3": 2,
                    "flag1": 1,
                    "flag3": 7,
                    "flag_char": 1,
                    "flag_character": 1,
                    "flag_shift": 1,
                    "flag_zero": 1,
                    "flags2": 1,
                    "hash_flag": 1,
                    "length_modifier": 1,
                    "mode": 1,
                    "plus_or_space": 1,
                    "processed_flag": 1,
                    "res_var3": 1,
                    "sign": 1,
                    "space_flag": 1,
                    "special_char3": 1,
                    "variable_3": 1
                },
                "local_50": {
                    "search_result": 1
                },
                "local_68": {
                    "size": 1
                },
                "local_6e": {
                    "const2": 2,
                    "constant2": 4,
                    "default_plus": 1,
                    "default_precision": 2,
                    "default_width": 1,
                    "flag2": 7,
                    "flag_mask2": 1,
                    "flag_sign": 1,
                    "plus": 1,
                    "plus_char": 1,
                    "plus_flag": 2,
                    "res_var2": 1,
                    "show_sign_flag": 1,
                    "sign_flags": 1,
                    "special_char2": 1,
                    "star_precision": 1,
                    "variable_2": 1
                },
                "local_6f": {
                    "const1": 2,
                    "constant1": 4,
                    "default_alignment": 1,
                    "default_multi": 1,
                    "default_width": 2,
                    "flag1": 7,
                    "flag_mask1": 1,
                    "flag_space": 1,
                    "hex_flag": 1,
                    "hex_flags": 1,
                    "res_var1": 1,
                    "space": 1,
                    "space_char": 1,
                    "space_flag": 2,
                    "special_char1": 1,
                    "star_width": 1,
                    "variable_1": 1
                },
                "local_70": {
                    "char_value": 1,
                    "character": 4,
                    "conversion_char": 1,
                    "conversion_specifier": 4,
                    "conversion_type": 1,
                    "current_byte": 1,
                    "current_char": 3,
                    "current_character": 1,
                    "current_flag": 1,
                    "data_type": 2,
                    "format_char": 2,
                    "format_specifier": 3,
                    "operation_type": 1,
                    "specifier": 3,
                    "type_char": 1,
                    "type_flag": 1,
                    "value": 1
                },
                "local_74": {
                    "processed_length": 1,
                    "result": 1,
                    "total_bytes": 4,
                    "total_bytes_copied": 1,
                    "total_bytes_processed": 3,
                    "total_chars_written": 1,
                    "total_count": 1,
                    "total_length": 6,
                    "total_result": 1,
                    "total_size": 12
                },
                "local_78": {
                    "memory_allocation": 1
                },
                "local_7c": {
                    "argument": 1,
                    "count2": 1,
                    "count3": 1,
                    "field_width": 1,
                    "first_num": 1,
                    "int_value": 1,
                    "int_value2": 1,
                    "integer_part": 1,
                    "integer_value": 1,
                    "num": 1,
                    "num2": 1,
                    "number": 2,
                    "number_2": 1,
                    "number_value": 1,
                    "numeric_param": 1,
                    "numeric_value": 1,
                    "star_count": 1,
                    "temp_var5": 1,
                    "value3": 1,
                    "width": 11
                },
                "local_80": {
                    "alignment": 2,
                    "arg_type": 1,
                    "constant": 1,
                    "count2": 1,
                    "extra": 1,
                    "extra_flag": 1,
                    "feature": 1,
                    "padding": 1,
                    "precision": 1,
                    "reserved": 1,
                    "resolution_pointer": 1,
                    "size": 1,
                    "temp": 2,
                    "temp_output": 1,
                    "temp_value": 1,
                    "temp_value_2": 1,
                    "temp_var": 2,
                    "temp_var4": 1,
                    "tmp_var": 1,
                    "unused": 7,
                    "value": 1,
                    "value2": 1
                },
                "local_84": {
                    "count": 1,
                    "count1": 1,
                    "decimal": 3,
                    "decimal_places": 1,
                    "decimal_precision": 2,
                    "decimal_value": 2,
                    "int_value": 2,
                    "multiplier": 1,
                    "num1": 1,
                    "number_1": 1,
                    "precision": 11,
                    "second_num": 1,
                    "temp_value": 1,
                    "value": 1,
                    "value1": 1,
                    "width": 1
                },
                "local_88": {
                    "character_flags": 1,
                    "feature_flags": 1,
                    "flag": 4,
                    "flags": 24,
                    "format_flags": 1
                },
                "local_8c": {
                    "allocation_pointer": 1,
                    "allocation_ptr": 1,
                    "array_pointer": 1,
                    "copy_buffer": 1,
                    "current_allocation": 1,
                    "dynamic_memory_ptr": 1,
                    "local_pointer": 3,
                    "local_ptr2": 1,
                    "local_ptr_1": 1,
                    "memory_buffer": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 5,
                    "next_input_data": 1,
                    "out_data_ptr": 1,
                    "output_ptr": 1,
                    "pointer_stack": 1,
                    "ptr4": 1,
                    "ptr_array": 1,
                    "ptr_list": 1,
                    "ptr_memory": 1,
                    "ptr_stack": 1,
                    "ptr_to_memory_buffer": 1,
                    "result_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1
                },
                "param_1": {
                    "error": 1,
                    "error_code": 1,
                    "error_message": 1,
                    "function_data": 1,
                    "input": 1,
                    "input_1": 1,
                    "input_buffer": 1,
                    "out_data": 1,
                    "output": 8,
                    "output_address": 1,
                    "output_buffer": 4,
                    "output_memory": 2,
                    "output_pointer": 1,
                    "param1": 3,
                    "ptr_param_1": 1,
                    "result": 2,
                    "status": 1
                },
                "param_2": {
                    "data": 4,
                    "data_buffer": 1,
                    "data_container": 1,
                    "data_pointer": 1,
                    "input": 5,
                    "input_2": 1,
                    "input_address": 1,
                    "input_arr": 1,
                    "input_array": 1,
                    "input_buffer": 2,
                    "input_data": 3,
                    "input_params": 1,
                    "memory": 2,
                    "memory_block": 1,
                    "memory_data": 1,
                    "output_buffer": 1,
                    "param2": 3,
                    "ptr_param_2": 1
                },
                "param_3": {
                    "data": 2,
                    "format": 2,
                    "format_string": 5,
                    "input": 2,
                    "input_3": 1,
                    "input_array": 1,
                    "input_data": 5,
                    "input_string": 2,
                    "param3": 3,
                    "pattern": 6,
                    "ptr_param_3": 1,
                    "string_data": 1
                },
                "param_4": {
                    "allocated_memory": 2,
                    "input_4": 1,
                    "memory": 9,
                    "memory_buffer": 3,
                    "memory_data": 1,
                    "memory_handle": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 1,
                    "memory_state": 1,
                    "out_size": 1,
                    "output_data": 2,
                    "output_length": 1,
                    "output_size": 1,
                    "param4": 3,
                    "ptr_param_4": 1,
                    "size": 1
                },
                "pbVar5": {
                    "char_pointer_1": 1,
                    "current": 1,
                    "current_byte": 11,
                    "current_char": 12,
                    "current_character": 1,
                    "iter": 1,
                    "pattern_ptr": 1,
                    "ptr1": 1,
                    "ptr2": 1,
                    "ptr_pattern": 1
                },
                "pbVar6": {
                    "char_pointer_2": 1,
                    "current_char": 1,
                    "current_pattern_ptr": 1,
                    "next": 1,
                    "next_byte": 11,
                    "next_char": 11,
                    "next_character": 1,
                    "ptr2": 1,
                    "ptr3": 1,
                    "ptr_current": 1,
                    "temp": 1
                },
                "piVar3": {
                    "copy_params": 1,
                    "count_ptr": 1,
                    "current_allocation": 1,
                    "current_memory": 1,
                    "current_offset": 1,
                    "local_pointer": 1,
                    "local_ptr": 3,
                    "local_var1": 1,
                    "memory_index": 1,
                    "memory_pointer": 1,
                    "next_allocation": 1,
                    "output_size_ptr": 1,
                    "pointer": 2,
                    "pointer_1": 1,
                    "processing_var": 1,
                    "ptr": 4,
                    "ptr1": 1,
                    "ptr_to_buffer": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 4,
                    "temp_var3": 1
                },
                "unaff_r9": {
                    "additional_data": 1,
                    "data_size": 1,
                    "decode_result": 4,
                    "decoded_data": 1,
                    "decoded_size": 1,
                    "decoding_result": 1,
                    "encoded_data": 1,
                    "length": 2,
                    "output_size": 1,
                    "process_result": 1,
                    "processed_size": 1,
                    "processing_result": 1,
                    "result": 2,
                    "result_size": 1,
                    "return_code": 1,
                    "return_value": 3,
                    "status": 1,
                    "temp": 1,
                    "temp_result2": 1,
                    "unaff_r9": 3,
                    "unaffected_r9": 1,
                    "unaffected_register": 1
                }
            },
            "called": [
                "FUN_080053d4",
                "FUN_08005044",
                "FUN_08005614",
                "FUN_08005714"
            ],
            "calling": [
                "FUN_08004ffc"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08005294) */\n\nint process_binary_data_080050fc(undefined4 *output,int *input,byte *pattern,int *memory)\n\n{\n  int result;\n  int allocation_result;\n  int *temp_ptr;\n  bool is_numeric;\n  byte *current_char;\n  byte *next_char;\n  int decode_result;\n  int *memory_ptr;\n  uint flags;\n  int precision;\n  undefined4 unused;\n  int width;\n  int total_size;\n  byte character;\n  undefined flag1;\n  undefined flag2;\n  undefined flag3;\n  undefined4 flag4;\n  \n  memory_ptr = memory;\n  if (((int)((uint)*(ushort *)(input + 3) << 0x18) < 0) && (input[4] == 0)) {\n    result = allocate_and_initialize_memory(output,0x40);\n    *input = result;\n    input[4] = result;\n    if (result == 0) {\n      *output = 0xc;\n      return -1;\n    }\n    input[5] = 0x40;\n  }\n  total_size = 0;\n  flag1 = 0x20;\n  flag2 = 0x30;\n  current_char = pattern;\nLAB_08005146:\n  next_char = current_char;\n  if (*next_char != 0) goto LAB_080051ca;\n  goto LAB_08005150;\nLAB_080051ca:\n  current_char = next_char + 1;\n  if (*next_char != 0x25) goto LAB_08005146;\nLAB_08005150:\n  result = (int)next_char - (int)pattern;\n  if (result != 0) {\n    allocation_result = allocate_and_copy_data(output,input,pattern,result);\n    if (allocation_result == -1) {\nLAB_080052ac:\n      if ((int)((uint)*(ushort *)(input + 3) << 0x19) < 0) {\n        return -1;\n      }\n      return total_size;\n    }\n    total_size = total_size + result;\n  }\n  if (*next_char == 0) goto LAB_080052ac;\n  flags = 0;\n  width = 0;\n  precision = -1;\n  unused = 0;\n  flag3 = 0;\n  flag4 = 0;\n  current_char = next_char + 1;\n  while( true ) {\n    result = find_char_in_string(&DAT_08007379,*current_char);\n    pattern = current_char + 1;\n    if (result == 0) break;\n    flags = 1 << (result + 0xf7ff8c87U & 0xff) | flags;\n    current_char = pattern;\n  }\n  if ((int)(flags << 0x1b) < 0) {\n    flag3 = 0x20;\n  }\n  if ((int)(flags << 0x1c) < 0) {\n    flag3 = 0x2b;\n  }\n  if (*current_char == 0x2a) {\n    temp_ptr = memory_ptr + 1;\n    result = *memory_ptr;\n    memory_ptr = temp_ptr;\n    if (result < 0) {\n      width = -result;\n      flags = flags | 2;\n      goto LAB_080051fc;\n    }\n  }\n  else {\n    is_numeric = false;\n    result = width;\n    pattern = current_char;\n    while( true ) {\n      if (9 < *pattern - 0x30) break;\n      result = result * 10 + (*pattern - 0x30);\n      is_numeric = true;\n      pattern = pattern + 1;\n    }\n    if (!is_numeric) goto LAB_080051fc;\n  }\n  width = result;\nLAB_080051fc:\n  if (*pattern == 0x2e) {\n    if (pattern[1] == 0x2a) {\n      pattern = pattern + 2;\n      temp_ptr = memory_ptr + 1;\n      precision = *memory_ptr;\n      memory_ptr = temp_ptr;\n      if (precision < 0) {\n        precision = -1;\n      }\n    }\n    else {\n      is_numeric = false;\n      result = 0;\n      precision = 0;\n      while( true ) {\n        pattern = pattern + 1;\n        if (9 < *pattern - 0x30) break;\n        result = result * 10 + (*pattern - 0x30);\n        is_numeric = true;\n      }\n      if (is_numeric) {\n        precision = result;\n      }\n    }\n  }\n  result = find_char_in_string(&DAT_0800737f,*pattern,3);\n  if (result != 0) {\n    pattern = pattern + 1;\n    flags = flags | 0x40 << (result + 0xf7ff8c81U & 0xff);\n  }\n  character = *pattern;\n  pattern = pattern + 1;\n  result = find_char_in_string(\"efgEFG\",character,6);\n  if (result == 0) {\n    decode_result = decode_and_process_data(output,&flags,input,0x8005045,&memory_ptr);\n    if (decode_result == -1) goto LAB_080052ac;\n  }\n  else {\n    memory_ptr = (int *)(((int)memory_ptr + 7U & 0xfffffff8) + 8);\n  }\n  total_size = total_size + decode_result;\n  current_char = pattern;\n  goto LAB_08005146;\n}\n\n",
            "current_name": "process_binary_data_080050fc",
            "entrypoint": "0x080050fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080050fc": "process_binary_data_080050fc",
                "allocate_and_initialize_memory_08005714": "allocate_and_initialize_memory",
                "allocate_memory_and_copy_data_08005044": "allocate_and_copy_data",
                "bVar4": "is_numeric",
                "decode_and_process_data_080053d4": "decode_and_process_data",
                "find_character_in_string_08005614": "find_char_in_string",
                "iVar1": "result",
                "iVar2": "allocation_result",
                "local_30": "flag4",
                "local_45": "flag3",
                "local_6e": "flag2",
                "local_6f": "flag1",
                "local_70": "character",
                "local_74": "total_size",
                "local_7c": "width",
                "local_80": "unused",
                "local_84": "precision",
                "local_88": "flags",
                "local_8c": "memory_ptr",
                "param_1": "output",
                "param_2": "input",
                "param_3": "pattern",
                "param_4": "memory",
                "pbVar5": "current_char",
                "pbVar6": "next_char",
                "piVar3": "temp_ptr",
                "unaff_r9": "decode_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052e4": {
            "additional_data": {
                "FUN_080052e4": {
                    "calculate_data_size": 1,
                    "calculate_result": 1,
                    "decode_and_process_data": 2,
                    "decode_data": 1,
                    "extract_and_convert": 1,
                    "extract_data": 1,
                    "parse_data": 2,
                    "process_data": 20,
                    "reconstruct_data": 1,
                    "reverse_and_reshape": 1
                },
                "bVar5": {
                    "check": 1,
                    "check_condition": 1,
                    "condition": 3,
                    "condition_flag": 1,
                    "flag": 8,
                    "has_extra": 1,
                    "has_offset": 1,
                    "is_condition_met": 4,
                    "is_condition_true": 3,
                    "is_flag_set": 1,
                    "is_header_valid": 1,
                    "is_negative": 1,
                    "is_nonzero": 1,
                    "is_true": 2,
                    "is_valid": 1,
                    "negative_flag": 1
                },
                "byteValue": {
                    "flag": 1
                },
                "byte_43": {
                    "byte_value": 1
                },
                "byte_44": {
                    "byte_44_value": 1
                },
                "byte_45": {
                    "byte_45_value": 1
                },
                "byte_value": {
                    "flag_byte": 1
                },
                "hasFlag": {
                    "has_flag": 1
                },
                "iVar1": {
                    "count": 1,
                    "counter1": 1,
                    "counter_1": 1,
                    "i": 3,
                    "index": 12,
                    "index1": 1,
                    "index_1": 1,
                    "iteration": 1,
                    "iteration_count": 1,
                    "iteration_counter_1": 1,
                    "loop_counter": 1,
                    "loop_index": 4,
                    "loop_index_1": 1,
                    "result": 2
                },
                "iVar2": {
                    "callback_result": 3,
                    "conversion_result": 1,
                    "counter2": 1,
                    "func_result": 1,
                    "index2": 1,
                    "index_2": 1,
                    "iteration_counter_2": 1,
                    "j": 1,
                    "loop_result": 1,
                    "result": 15,
                    "return_value": 3,
                    "status": 1,
                    "temp": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data": 4,
                    "data_pointer_1": 1,
                    "data_ptr": 2,
                    "input": 11,
                    "input1": 2,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_param_1": 1,
                    "input_value": 5
                },
                "param_2": {
                    "array_data": 1,
                    "config": 1,
                    "data": 12,
                    "data_array": 6,
                    "data_info": 1,
                    "data_pointer_2": 1,
                    "header": 1,
                    "header_ptr": 1,
                    "input": 1,
                    "input2": 1,
                    "input_array": 2,
                    "input_buffer": 1,
                    "metadata_ptr": 1,
                    "size_data": 1
                },
                "param_3": {
                    "array_length": 1,
                    "data_size": 1,
                    "final_size_ptr": 1,
                    "max_value": 1,
                    "output": 6,
                    "output1": 1,
                    "output_array": 1,
                    "output_count": 1,
                    "output_length": 4,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_size": 6,
                    "parsed_size": 1,
                    "processed_data": 1,
                    "result": 3,
                    "size_ptr": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "arg": 1,
                    "arg4": 1,
                    "constant_value": 2,
                    "conversion_value": 1,
                    "data_1": 1,
                    "dummy_param": 1,
                    "extra_param": 1,
                    "input2": 1,
                    "input3": 1,
                    "input_param_2": 1,
                    "option": 1,
                    "output_param": 1,
                    "param": 6,
                    "param1": 1,
                    "param4": 2,
                    "param_4": 5,
                    "param_a": 1,
                    "unused": 1,
                    "unused_param": 1
                },
                "param_5": {
                    "callback": 13,
                    "callback_fn": 1,
                    "callback_func": 6,
                    "callback_function": 6,
                    "conversion_function_pointer": 1,
                    "data_processor": 1,
                    "func": 1,
                    "function_pointer": 1,
                    "processor": 1
                },
                "sizeRemaining": {
                    "remaining_size": 1
                },
                "uVar3": {
                    "extra_bytes": 1,
                    "header_size": 1,
                    "max_data_value": 1,
                    "max_length": 7,
                    "max_size": 9,
                    "max_value": 10,
                    "max_value_temp": 1,
                    "size": 1
                },
                "uVar4": {
                    "additional_length": 1,
                    "char_offset": 1,
                    "count": 1,
                    "current_length": 1,
                    "extra_length": 1,
                    "extra_size": 2,
                    "extra_value": 1,
                    "loop_counter": 1,
                    "new_length": 1,
                    "new_value": 1,
                    "offset": 13,
                    "size_modifier": 1,
                    "temp_value": 3,
                    "tmp_value": 1,
                    "updated_value": 1,
                    "var_4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053d4"
            ],
            "code": "\nundefined4\ndecode_and_process_data_080052e4(undefined4 input,uint *data,uint *output_size,undefined4 param,code *callback)\n\n{\n  int index;\n  int result;\n  uint max_value;\n  uint offset;\n  bool flag;\n  \n  max_value = data[4];\n  if ((int)data[4] < (int)data[2]) {\n    max_value = data[2];\n  }\n  *output_size = max_value;\n  if (*(char *)((int)data + 0x43) != '\\0') {\n    *output_size = max_value + 1;\n  }\n  if ((int)(*data << 0x1a) < 0) {\n    *output_size = *output_size + 2;\n  }\n  if ((*data & 6) == 0) {\n    for (index = 0; index < (int)(data[3] - *output_size); index = index + 1) {\n      result = (*callback)(input,param,(int)data + 0x19,1);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n  }\n  max_value = (uint)*(byte *)((int)data + 0x43);\n  if (max_value != 0) {\n    max_value = 1;\n  }\n  offset = max_value;\n  if ((int)(*data << 0x1a) < 0) {\n    *(undefined *)((int)data + max_value + 0x43) = 0x30;\n    offset = max_value + 2;\n    *(undefined *)((int)data + max_value + 0x44) = *(undefined *)((int)data + 0x45);\n  }\n  index = (*callback)(input,param,(int)data + 0x43,offset);\n  if (index != -1) {\n    max_value = data[3];\n    flag = (*data & 6) != 4;\n    if (flag) {\n      max_value = 0;\n    }\n    offset = 0;\n    if (!flag) {\n      max_value = max_value - *output_size;\n    }\n    if (!flag) {\n      max_value = max_value & ~((int)max_value >> 0x1f);\n    }\n    if ((int)data[4] < (int)data[2]) {\n      max_value = max_value + (data[2] - data[4]);\n    }\n    while( true ) {\n      if (max_value == offset) {\n        return 0;\n      }\n      index = (*callback)(input,param,(int)data + 0x1a,1);\n      if (index == -1) break;\n      offset = offset + 1;\n    }\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "decode_and_process_data_080052e4",
            "entrypoint": "0x080052e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052e4": "decode_and_process_data_080052e4",
                "bVar5": "flag",
                "iVar1": "index",
                "iVar2": "result",
                "param_1": "input",
                "param_2": "data",
                "param_3": "output_size",
                "param_4": "param",
                "param_5": "callback",
                "uVar3": "max_value",
                "uVar4": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053d4": {
            "additional_data": {
                "FUN_080053d4": {
                    "decode_and_extract_data": 1,
                    "decode_and_handle_data": 1,
                    "decode_and_process": 9,
                    "decode_and_process_data": 19,
                    "reverse_and_process_data": 1
                },
                "LAB_08005404": {
                    "lab2": 1
                },
                "LAB_08005424": {
                    "lab5": 1
                },
                "LAB_0800544a": {
                    "lab11": 1
                },
                "LAB_08005464": {
                    "lab9": 1
                },
                "LAB_0800548a": {
                    "lab10": 1
                },
                "LAB_080054b4": {
                    "lab4": 1
                },
                "LAB_080054fa": {
                    "lab8": 1
                },
                "LAB_0800550e": {
                    "lab13": 1
                },
                "LAB_0800551e": {
                    "lab3": 1
                },
                "LAB_08005552": {
                    "lab6": 1
                },
                "LAB_0800557a": {
                    "lab12": 1
                },
                "LAB_0800558e": {
                    "lab1": 1
                },
                "LAB_08005600": {
                    "lab7": 1
                },
                "bVar1": {
                    "byte_val": 10,
                    "byte_value": 13,
                    "byte_var": 2,
                    "char_value": 1,
                    "first_byte": 5
                },
                "iVar2": {
                    "count": 1,
                    "index": 16,
                    "index_var": 1,
                    "loop_index": 3,
                    "result": 9,
                    "status": 1
                },
                "iVar4": {
                    "callback_result": 4,
                    "inner_index": 3,
                    "inner_index_var": 1,
                    "inner_result": 5,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "result": 11,
                    "status": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "temp_var_2": 1
                },
                "local_24": {
                    "buffer_size": 1,
                    "decoded_length": 1,
                    "info": 1,
                    "lengths": 1,
                    "local_arr": 2,
                    "local_array": 8,
                    "local_storage": 1,
                    "local_values": 2,
                    "local_values_array": 1,
                    "output": 1,
                    "output_array": 2,
                    "output_data": 1,
                    "output_length": 2,
                    "range": 2,
                    "result_arr": 1,
                    "result_array": 2,
                    "result_list": 1,
                    "storage": 1
                },
                "param_1": {
                    "arg1": 1,
                    "data": 1,
                    "input": 4,
                    "input_1": 1,
                    "input_code": 1,
                    "input_data": 2,
                    "input_param": 6,
                    "input_value": 1,
                    "param": 1,
                    "param1": 6,
                    "param_1": 6,
                    "param_1_ptr": 1
                },
                "param_2": {
                    "buffer": 2,
                    "data": 9,
                    "data_array": 3,
                    "data_ptr": 4,
                    "input": 4,
                    "input_array": 2,
                    "input_data": 4,
                    "output_buffer": 1,
                    "output_data": 1,
                    "param_2_ptr": 1
                },
                "param_3": {
                    "arg3": 1,
                    "input_2": 1,
                    "input_size": 2,
                    "input_value": 1,
                    "output_param": 2,
                    "param": 3,
                    "param1": 1,
                    "param3": 6,
                    "param_3": 7,
                    "param_3_ptr": 1,
                    "param_offset": 1,
                    "param_size": 1,
                    "size": 3,
                    "size_param": 1
                },
                "param_4": {
                    "callback": 13,
                    "callback_func": 5,
                    "callback_function": 6,
                    "data_handler": 1,
                    "data_processing_function": 2,
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "process_data": 1,
                    "process_function": 1
                },
                "param_5": {
                    "buffer": 1,
                    "count": 1,
                    "counter": 4,
                    "counter_pointer": 1,
                    "data_array_ptr": 1,
                    "data_ptr": 1,
                    "extra_data": 1,
                    "output": 3,
                    "output_array_ptr": 1,
                    "output_data": 3,
                    "output_data_array_ptr": 1,
                    "output_list": 1,
                    "output_param": 1,
                    "output_ptr": 2,
                    "param_5": 1,
                    "param_5_ptr": 1,
                    "param_array": 1,
                    "param_pointers": 1,
                    "ptr": 1,
                    "ptr_list": 1,
                    "ptr_ptr": 1,
                    "ptr_to_ptr": 2
                },
                "pcVar11": {
                    "char_array_2": 1,
                    "char_pointer_2": 1,
                    "char_ptr2": 3,
                    "char_ptr_2": 1,
                    "copy_dest": 1,
                    "current_char": 3,
                    "formatted_str": 1,
                    "formatted_value": 1,
                    "new_str": 1,
                    "output": 6,
                    "output_chars": 1,
                    "output_ptr": 3,
                    "output_ptr_end": 1,
                    "output_str": 1,
                    "pointer": 1,
                    "result": 1,
                    "result_ptr": 2,
                    "temp_char_ptr": 1,
                    "temp_pointer": 1
                },
                "pcVar12": {
                    "char_array_3": 1,
                    "char_ptr3": 2,
                    "char_ptr_3": 1,
                    "copy_src": 1,
                    "current_char": 1,
                    "data_ptr": 1,
                    "formatted_string": 1,
                    "input_chars": 1,
                    "input_ptr": 2,
                    "input_str": 1,
                    "input_string": 2,
                    "modified_data": 1,
                    "output": 1,
                    "output_ptr_start": 1,
                    "output_start": 1,
                    "output_str": 1,
                    "param2_plus43": 1,
                    "result": 1,
                    "start": 1,
                    "str": 1,
                    "str_ptr": 1,
                    "string": 2,
                    "string_pointer": 1,
                    "string_ptr": 2,
                    "string_value": 1,
                    "temp": 1
                },
                "pcVar5": {
                    "char_array": 1,
                    "char_pointer": 1,
                    "char_ptr": 5,
                    "chars": 1,
                    "charset": 1,
                    "digit_chars": 3,
                    "digit_set": 1,
                    "digits": 1,
                    "hex_array": 1,
                    "hex_chars": 4,
                    "hex_digits": 8,
                    "hex_map": 1,
                    "hex_string": 2,
                    "hexadecimal_digits": 1
                },
                "ppcVar8": {
                    "char_ptr_ptr": 1,
                    "current_string": 1,
                    "string_ptr": 1,
                    "string_ptr_ptr_ptr": 1
                },
                "ppuVar7": {
                    "counter_ptr": 1,
                    "current_output": 1,
                    "ptr_ptr": 1,
                    "string_ptr_ptr": 1
                },
                "puVar3": {
                    "addr": 1,
                    "current_data": 1,
                    "data_ptr": 1,
                    "output_ptr": 1,
                    "param_ptr": 1,
                    "pointer": 3,
                    "pointer_value": 1,
                    "ptr": 14,
                    "ptr1": 1,
                    "ptr_1": 1,
                    "ptr_value": 3,
                    "ptr_var": 2,
                    "temp_ptr": 1
                },
                "uVar10": {
                    "copy_length": 1,
                    "copy_value": 1,
                    "length": 6,
                    "param2_1": 1,
                    "param_2_idx": 1,
                    "second_value": 1,
                    "size": 1,
                    "sub_value": 1,
                    "temp": 6,
                    "temp_value": 3,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var": 1,
                    "value": 1,
                    "value2": 3,
                    "value_2": 1,
                    "var_10": 1
                },
                "uVar6": {
                    "base": 22,
                    "base_number": 1,
                    "number_var": 1,
                    "result": 1,
                    "temp_value": 3,
                    "temp_var": 1,
                    "value": 1,
                    "var_6": 1
                },
                "uVar9": {
                    "input": 1,
                    "length": 1,
                    "num": 1,
                    "result": 2,
                    "result_value": 3,
                    "result_var": 1,
                    "temp": 1,
                    "temp_value": 1,
                    "value": 16,
                    "value1": 3,
                    "var_9": 1
                }
            },
            "called": [
                "FUN_080052e4",
                "FUN_08005614"
            ],
            "calling": [
                "FUN_080050fc"
            ],
            "code": "\nuint decode_and_process_data_080053d4(undefined4 input_param,uint *data,undefined4 param_3,code *callback,uint **counter)\n\n{\n  byte byte_value;\n  int index;\n  uint *ptr;\n  int result;\n  char *hex_digits;\n  uint base;\n  uint **string_ptr_ptr;\n  char **current_string;\n  uint value;\n  uint length;\n  char *output;\n  char *string_ptr;\n  uint local_array [2];\n  \n  byte_value = *(byte *)(data + 6);\n  string_ptr = (char *)((int)data + 0x43);\n  if (byte_value != 0x6e) {\n    if (byte_value < 0x6f) {\n      if (byte_value != 99) {\n        if (byte_value < 100) {\n          if (byte_value == 0) goto lab1;\n          if (byte_value != 0x58) goto lab2;\n          *(undefined *)((int)data + 0x45) = 0x58;\n          hex_digits = \"0123456789ABCDEF\";\nlab3:\n          base = *data;\n          ptr = *counter;\n          *counter = ptr + 1;\n          if (((base & 0x80) == 0) && ((int)(base << 0x19) < 0)) {\n            value = (uint)*(ushort *)ptr;\n          }\n          else {\n            value = *ptr;\n          }\n          if ((int)(base << 0x1f) < 0) {\n            *data = base | 0x20;\n          }\n          if (value == 0) {\n            *data = *data & 0xffffffdf;\n          }\n          base = 0x10;\nlab4:\n          *(undefined *)((int)data + 0x43) = 0;\n        }\n        else {\n          if ((byte_value != 100) && (byte_value != 0x69)) goto lab2;\n          value = *data;\n          ptr = *counter;\n          if ((value & 0x80) == 0) {\n            *counter = ptr + 1;\n            if ((value & 0x40) == 0) goto lab5;\n            value = (uint)(short)*(ushort *)ptr;\n          }\n          else {\n            *counter = ptr + 1;\nlab5:\n            value = *ptr;\n          }\n          if ((int)value < 0) {\n            value = -value;\n            *(undefined *)((int)data + 0x43) = 0x2d;\n          }\n          hex_digits = \"0123456789ABCDEF\";\n          base = 10;\n        }\n        length = data[1];\n        data[2] = length;\n        output = string_ptr;\n        if ((int)length < 0) {\n          if (value != 0) goto lab6;\nlab7:\n          *(char *)((int)data + 0x42) = *hex_digits;\n          output = (char *)((int)data + 0x42);\n        }\n        else {\n          *data = *data & 0xfffffffb;\n          if (value == 0) {\n            if (length != 0) goto lab7;\n          }\n          else {\nlab6:\n            do {\n              length = value / base;\n              output = output + -1;\n              *output = hex_digits[value - base * length];\n              value = length;\n            } while (length != 0);\n          }\n        }\n        if (((base == 8) && ((int)(*data << 0x1f) < 0)) && ((int)data[1] <= (int)data[4]))\n        {\n          output[-1] = '0';\n          output = output + -1;\n        }\n        data[4] = (int)string_ptr - (int)output;\n        string_ptr = output;\n        goto lab8;\n      }\n      ptr = *counter;\n      *counter = ptr + 1;\n      *(char *)((int)data + 0x42) = (char)*ptr;\nlab9:\n      string_ptr = (char *)((int)data + 0x42);\n      value = 1;\n    }\n    else {\n      if (byte_value != 0x73) {\n        if (byte_value < 0x74) {\n          if (byte_value == 0x6f) {\nlab10:\n            value = *data;\n            ptr = *counter;\n            if ((value & 0x80) == 0) {\n              *counter = ptr + 1;\n              if ((value & 0x40) == 0) goto LAB_08005498;\n              value = (uint)*(ushort *)ptr;\n            }\n            else {\n              *counter = ptr + 1;\nLAB_08005498:\n              value = *ptr;\n            }\n            if (byte_value == 0x6f) {\n              base = 8;\n            }\n            else {\n              base = 10;\n            }\n            hex_digits = \"0123456789ABCDEF\";\n            goto lab4;\n          }\n          if (byte_value == 0x70) {\n            *data = *data | 0x20;\nlab11:\n            hex_digits = \"0123456789abcdef\";\n            *(undefined *)((int)data + 0x45) = 0x78;\n            goto lab3;\n          }\n        }\n        else {\n          if (byte_value == 0x75) goto lab10;\n          if (byte_value == 0x78) goto lab11;\n        }\nlab2:\n        *(byte *)((int)data + 0x42) = byte_value;\n        goto lab9;\n      }\n      current_string = (char **)*counter;\n      *counter = (uint *)(current_string + 1);\n      string_ptr = *current_string;\n      index = find_character_in_string_08005614(string_ptr,0,data[1]);\n      if (index != 0) {\n        data[1] = index - (int)string_ptr;\n      }\n      value = data[1];\n    }\n    data[4] = value;\n    *(undefined *)((int)data + 0x43) = 0;\n    goto lab8;\n  }\n  value = *data;\n  string_ptr_ptr = (uint **)*counter;\n  base = data[5];\n  if ((value & 0x80) == 0) {\n    *counter = (uint *)(string_ptr_ptr + 1);\n    ptr = *string_ptr_ptr;\n    if ((value & 0x40) == 0) goto lab12;\n    *(short *)ptr = (short)base;\n  }\n  else {\n    *counter = (uint *)(string_ptr_ptr + 1);\n    ptr = *string_ptr_ptr;\nlab12:\n    *ptr = base;\n  }\nlab1:\n  data[4] = 0;\nlab8:\n  index = decode_and_process_data_080053d4_080052e4(input_param,data,local_array,param_3,callback);\n  if ((index == -1) || (index = (*callback)(input_param,param_3,string_ptr,data[4]), index == -1)) {\nlab13:\n    value = 0xffffffff;\n  }\n  else {\n    if ((int)(*data << 0x1e) < 0) {\n      for (index = 0; index < (int)(data[3] - local_array[0]); index = index + 1) {\n        result = (*callback)(input_param,param_3,(int)data + 0x19,1);\n        if (result == -1) goto lab13;\n      }\n    }\n    value = data[3];\n    if ((int)data[3] < (int)local_array[0]) {\n      value = local_array[0];\n    }\n  }\n  return value;\n}\n\n",
            "current_name": "decode_and_process_data_080053d4",
            "entrypoint": "0x080053d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053d4": "decode_and_process_data_080053d4",
                "LAB_08005404": "lab2",
                "LAB_08005424": "lab5",
                "LAB_0800544a": "lab11",
                "LAB_08005464": "lab9",
                "LAB_0800548a": "lab10",
                "LAB_080054b4": "lab4",
                "LAB_080054fa": "lab8",
                "LAB_0800550e": "lab13",
                "LAB_0800551e": "lab3",
                "LAB_08005552": "lab6",
                "LAB_0800557a": "lab12",
                "LAB_0800558e": "lab1",
                "LAB_08005600": "lab7",
                "bVar1": "byte_value",
                "iVar2": "index",
                "iVar4": "result",
                "local_24": "local_array",
                "param_1": "input_param",
                "param_2": "data",
                "param_4": "callback",
                "param_5": "counter",
                "pcVar11": "output",
                "pcVar12": "string_ptr",
                "pcVar5": "hex_digits",
                "ppcVar8": "current_string",
                "ppuVar7": "string_ptr_ptr",
                "puVar3": "ptr",
                "uVar10": "length",
                "uVar6": "base",
                "uVar9": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005614": {
            "additional_data": {
                "FUN_08005614": {
                    "find_char_in_string": 2,
                    "find_character": 17,
                    "find_character_in_string": 6,
                    "find_character_index": 2,
                    "find_character_pointer": 1,
                    "find_first_occurrence": 3
                },
                "param_1": {
                    "input_string": 1,
                    "str": 2,
                    "string": 28
                },
                "param_2": {
                    "ch": 1,
                    "character": 25,
                    "character_to_find": 1,
                    "target": 1,
                    "target_char": 2,
                    "target_character": 1
                },
                "param_3": {
                    "length": 28,
                    "string_length": 3
                },
                "pcVar1": {
                    "current": 1,
                    "current_char": 19,
                    "current_char_ptr": 1,
                    "current_character": 3,
                    "current_character_pointer": 1,
                    "current_index": 1,
                    "current_position": 2,
                    "ptr": 1,
                    "ptr_char": 1
                },
                "pcVar2": {
                    "current_char": 2,
                    "current_character": 1,
                    "next": 1,
                    "next_char": 19,
                    "next_char_ptr": 1,
                    "next_character": 3,
                    "next_index": 1,
                    "next_position": 1,
                    "previous_position": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053d4",
                "FUN_080050fc"
            ],
            "code": "\nchar * find_character_in_string_08005614(char *string,char character,int length)\n\n{\n  char *current_char;\n  char *next_char;\n  \n  current_char = string;\n  do {\n    next_char = current_char;\n    if (next_char == string + length) {\n      return (char *)0x0;\n    }\n    current_char = next_char + 1;\n  } while (*next_char != character);\n  return next_char;\n}\n\n",
            "current_name": "find_character_in_string_08005614",
            "entrypoint": "0x08005614",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005614": "find_character_in_string_08005614",
                "param_1": "string",
                "param_2": "character",
                "param_3": "length",
                "pcVar1": "current_char",
                "pcVar2": "next_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005630": {
            "additional_data": {
                "FUN_08005630": {
                    "copy_and_increment": 1,
                    "copy_array": 2,
                    "copy_bytes": 5,
                    "copy_data": 13,
                    "copy_data_from_buffer": 1,
                    "copy_data_to_buffer": 4,
                    "copy_data_to_destination": 3,
                    "copy_data_to_new_location": 1,
                    "copy_to_buffer": 1
                },
                "param_1": {
                    "array_offset": 1,
                    "array_size": 1,
                    "base_address": 1,
                    "buffer_start": 3,
                    "buffer_start_address": 1,
                    "buffer_start_index": 2,
                    "data_destination": 1,
                    "dest": 1,
                    "dest_address": 2,
                    "dest_buffer": 1,
                    "dest_index": 1,
                    "dest_offset": 1,
                    "dest_pointer": 1,
                    "dest_start": 2,
                    "destination": 4,
                    "destination_address": 1,
                    "destination_array_start_index": 1,
                    "destination_index": 1,
                    "dst_start": 1,
                    "source_address": 1,
                    "src_offset": 1,
                    "src_start_index": 1,
                    "start_address": 1
                },
                "param_2": {
                    "data_source": 1,
                    "source": 5,
                    "source_array": 4,
                    "source_buffer": 1,
                    "source_data": 9,
                    "src": 1,
                    "src_address": 2,
                    "src_buffer": 1,
                    "src_data": 3,
                    "src_pointer": 1,
                    "src_start": 3
                },
                "param_3": {
                    "array_length": 2,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "byte_count": 1,
                    "count": 1,
                    "data_length": 7,
                    "data_size": 5,
                    "length": 1,
                    "num_bytes": 2,
                    "num_elements": 2,
                    "size": 5,
                    "source_array_length": 1,
                    "source_length": 1,
                    "src_length": 1
                },
                "puVar1": {
                    "buffer_end_index": 1,
                    "buffer_end_ptr": 1,
                    "dest_data_end": 1,
                    "dest_end": 3,
                    "dest_end_address": 1,
                    "dest_end_index": 1,
                    "dest_ptr": 1,
                    "destination_array_end": 1,
                    "destination_buffer": 1,
                    "destination_end": 2,
                    "destination_end_ptr": 1,
                    "destination_pointer": 1,
                    "destination_ptr": 1,
                    "dst_end": 1,
                    "end": 1,
                    "end_address": 2,
                    "end_of_source": 2,
                    "end_of_src": 2,
                    "source_data_end": 1,
                    "source_end": 4,
                    "src_end": 2
                },
                "puVar2": {
                    "buffer_current_index": 1,
                    "buffer_end": 1,
                    "buffer_end_address": 1,
                    "buffer_end_index": 1,
                    "current_address": 1,
                    "current_dest_address": 1,
                    "dest_data": 2,
                    "dest_end": 5,
                    "dest_end_pointer": 1,
                    "dest_ptr": 3,
                    "destination_address": 1,
                    "destination_array_index": 1,
                    "destination_end": 1,
                    "destination_ptr": 5,
                    "dst_ptr": 1,
                    "end_of_destination": 1,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "src_end": 1,
                    "src_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "code": "\nvoid copy_data_to_buffer_08005630(int destination,undefined *source_data,int data_length)\n\n{\n  undefined *source_end;\n  undefined *destination_ptr;\n  \n  destination_ptr = (undefined *)(destination + -1);\n  source_end = source_data + data_length;\n  for (; source_data != source_end; source_data = source_data + 1) {\n    destination_ptr = destination_ptr + 1;\n    *destination_ptr = *source_data;\n  }\n  return;\n}\n\n",
            "current_name": "copy_data_to_buffer_08005630",
            "entrypoint": "0x08005630",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005630": "copy_data_to_buffer_08005630",
                "param_1": "destination",
                "param_2": "source_data",
                "param_3": "data_length",
                "puVar1": "source_end",
                "puVar2": "destination_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005646": {
            "additional_data": {
                "FUN_08005646": {
                    "copy_and_reverse": 7,
                    "copy_and_shift": 1,
                    "copy_and_shift_array": 1,
                    "copy_and_shift_data": 1,
                    "copy_bytes": 1,
                    "copy_data": 2,
                    "copy_memory": 8,
                    "copy_range": 1,
                    "copy_reverse": 1,
                    "reverse_and_copy_data": 1,
                    "reverse_copy": 6,
                    "reverse_data": 1
                },
                "PTR_0x0": {
                    "null": 1
                },
                "PTR_xxxxxx": {
                    "unchanged_var": 1
                },
                "param_1": {
                    "array_dst": 1,
                    "dest": 17,
                    "dest_pointer": 1,
                    "dest_ptr": 1,
                    "destination": 7,
                    "dst": 2,
                    "source": 2
                },
                "param_2": {
                    "array_src": 1,
                    "destination": 2,
                    "source": 7,
                    "src": 19,
                    "src_pointer": 1,
                    "src_ptr": 1
                },
                "param_3": {
                    "length": 15,
                    "n": 1,
                    "num_bytes": 3,
                    "num_elements": 1,
                    "size": 11
                },
                "puVar1": {
                    "dest_end": 3,
                    "dst_end": 1,
                    "end": 6,
                    "end_address": 1,
                    "end_ptr": 5,
                    "end_src": 1,
                    "source_end": 1,
                    "src_end": 10
                }
            },
            "called": [],
            "calling": [
                "FUN_08005044"
            ],
            "code": "\nvoid reverse_and_copy_data_08005646(undefined *dest,undefined *src,int length)\n\n{\n  undefined *src_end;\n  \n  src_end = src + length;\n  if ((src < dest) && (dest < src_end)) {\n    dest = dest + length;\n    length = length - (int)src_end;\n    while (src_end + length != (undefined *)0x0) {\n      src_end = src_end + -1;\n      dest = dest + -1;\n      *dest = *src_end;\n    }\n    return;\n  }\n  dest = dest + -1;\n  for (; src != src_end; src = src + 1) {\n    dest = dest + 1;\n    *dest = *src;\n  }\n  return;\n}\n\n",
            "current_name": "reverse_and_copy_data_08005646",
            "entrypoint": "0x08005646",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005646": "reverse_and_copy_data_08005646",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "length",
                "puVar1": "src_end"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800567c": {
            "additional_data": {
                "DAT_200002ac": {
                    "data_structure": 2,
                    "global_ptr": 2,
                    "head": 1
                },
                "FUNC_0800583c": {
                    "func1": 1,
                    "initialize": 1,
                    "initialize_data_structure": 1,
                    "initialize_function": 1,
                    "some_function1": 1
                },
                "FUNC_0800583e": {
                    "func2": 1
                },
                "FUN_0800567C": {
                    "process_data": 1
                },
                "FUN_0800567c": {
                    "add_items_to_queue": 1,
                    "extract_and_improve": 1,
                    "extract_and_sort_integers": 1,
                    "extract_integers": 1,
                    "extract_integers_from_binary": 2,
                    "process_data": 4,
                    "update_data": 2,
                    "update_data_structure": 4,
                    "update_function": 1,
                    "update_linked_list": 5,
                    "update_list": 2
                },
                "extraout_r1": {
                    "extra_output": 4,
                    "extra_output_ptr": 1,
                    "new_node": 1,
                    "next_node": 2,
                    "ppi_var": 1,
                    "return_value": 1,
                    "temp": 2,
                    "temp1": 6,
                    "temp_array": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 1,
                    "temp_ptr_out": 1,
                    "temp_result": 1,
                    "temp_var1": 1
                },
                "param_1": {
                    "list": 1,
                    "lst": 1,
                    "output": 9,
                    "output_array": 6,
                    "param_array": 2,
                    "queue": 1,
                    "result": 10,
                    "result_pointer": 1
                },
                "param_2": {
                    "array_length": 4,
                    "array_size": 1,
                    "binary": 1,
                    "count": 2,
                    "data_length": 1,
                    "input_array_size": 1,
                    "input_length": 1,
                    "input_size": 3,
                    "length": 2,
                    "list_size": 1,
                    "num_elements": 1,
                    "num_items": 1,
                    "size": 12
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 1,
                    "constant_1": 1,
                    "data1": 1,
                    "input1": 2,
                    "param1": 2,
                    "param3": 11,
                    "param_3": 5,
                    "param_a": 1,
                    "unused_param": 2,
                    "value1": 2,
                    "var3": 2
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 1,
                    "constant_2": 1,
                    "data2": 1,
                    "input2": 2,
                    "param2": 2,
                    "param4": 11,
                    "param_4": 5,
                    "param_b": 1,
                    "unused_param": 1,
                    "unused_param2": 1,
                    "value2": 2,
                    "var4": 2
                },
                "piVar3": {
                    "current_ptr": 1,
                    "current_size": 1,
                    "int_ptr": 2,
                    "offset": 1,
                    "ptr1": 1,
                    "temp": 4,
                    "temp4": 6,
                    "temp_pointer": 1,
                    "temp_ptr": 2,
                    "temp_value": 1,
                    "temp_var": 8,
                    "temp_var1": 1,
                    "temp_var4": 1,
                    "var3": 1
                },
                "ppiVar1": {
                    "current": 2,
                    "current_node": 3,
                    "current_pointer": 2,
                    "current_ptr1": 1,
                    "head": 1,
                    "prev_node": 1,
                    "prev_ptr": 1,
                    "previous": 1,
                    "previous_element": 1,
                    "previous_list": 1,
                    "previous_ptr1": 1,
                    "ptr1": 3,
                    "temp2": 6,
                    "temp_ptr1": 5,
                    "temp_ptr2": 1,
                    "temp_var2": 1
                },
                "ppiVar2": {
                    "current": 2,
                    "current_element": 1,
                    "current_list": 1,
                    "current_node": 1,
                    "current_ptr": 1,
                    "current_ptr1": 1,
                    "current_ptr2": 1,
                    "next": 2,
                    "next_node": 3,
                    "next_pointer": 2,
                    "ptr2": 3,
                    "temp3": 6,
                    "temp_ptr2": 5,
                    "temp_ptr3": 1,
                    "temp_var3": 1
                },
                "ppiVar4": {
                    "curr_ptr": 1,
                    "prev": 1,
                    "prev_node": 1,
                    "prev_ptr2": 1,
                    "previous": 2,
                    "previous_node": 2,
                    "previous_pointer": 2,
                    "previous_ptr2": 1,
                    "ptr4": 3,
                    "temp5": 6,
                    "temp_node": 1,
                    "temp_pointer1": 1,
                    "temp_ptr1": 2,
                    "temp_ptr3": 5,
                    "temp_ptr4": 1,
                    "temp_var5": 1
                },
                "ppiVar5": {
                    "adjusted_ptr": 1,
                    "current_ptr": 2,
                    "current_ptr2": 2,
                    "element": 1,
                    "new_data": 1,
                    "new_head": 1,
                    "new_node": 4,
                    "new_node_pointer": 1,
                    "new_pointer": 1,
                    "new_ptr": 1,
                    "ptr5": 3,
                    "temp6": 6,
                    "temp_ptr2": 1,
                    "temp_ptr4": 3,
                    "temp_ptr5": 1,
                    "temp_var6": 1,
                    "var": 1
                }
            },
            "called": [
                "FUN_0800583e",
                "FUN_0800583c"
            ],
            "calling": [
                "FUN_08005044",
                "FUN_080057d0"
            ],
            "code": "\nvoid update_linked_list_0800567c(undefined4 *result,int size,undefined4 param3,undefined4 param4)\n\n{\n  int **temp1;\n  int **temp2;\n  int **temp3;\n  int *temp_var;\n  int **temp5;\n  int **temp6;\n  \n  if (size == 0) {\n    return;\n  }\n  temp6 = (int **)(size + -4);\n  if (*(int *)(size + -4) < 0) {\n    temp6 = (int **)((int)temp6 + *(int *)(size + -4));\n  }\n  FUNC_0800583c();\n  temp3 = (int **)&DAT_200002ac;\n  if (DAT_200002ac == (int **)0x0) {\n    temp6[1] = (int *)0x0;\n    temp2 = temp1;\n    DAT_200002ac = temp6;\n  }\n  else {\n    temp3 = DAT_200002ac;\n    if (temp6 < DAT_200002ac) {\n      temp2 = (int **)*temp6;\n      temp3 = (int **)((int)temp6 + (int)temp2);\n      if (DAT_200002ac == temp3) {\n        temp_var = *DAT_200002ac;\n        DAT_200002ac = (int **)DAT_200002ac[1];\n        temp3 = (int **)((int)temp_var + (int)temp2);\n        *temp6 = (int *)temp3;\n      }\n      temp6[1] = (int *)DAT_200002ac;\n      DAT_200002ac = temp6;\n    }\n    else {\n      do {\n        temp5 = temp3;\n        temp3 = (int **)temp5[1];\n        if (temp3 == (int **)0x0) break;\n      } while (temp3 <= temp6);\n      temp2 = (int **)*temp5;\n      if ((int **)((int)temp5 + (int)temp2) == temp6) {\n        temp2 = (int **)((int)temp2 + (int)*temp6);\n        *temp5 = (int *)temp2;\n        if (temp3 == (int **)((int)temp5 + (int)temp2)) {\n          temp_var = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp2 + (int)temp_var);\n          *temp5 = (int *)temp2;\n          temp5[1] = (int *)temp3;\n        }\n      }\n      else if (temp6 < (int **)((int)temp5 + (int)temp2)) {\n        *result = 0xc;\n      }\n      else {\n        temp2 = (int **)((int)temp6 + (int)*temp6);\n        if (temp3 == temp2) {\n          temp_var = *temp3;\n          temp3 = (int **)temp3[1];\n          temp2 = (int **)((int)temp_var + (int)*temp6);\n          *temp6 = (int *)temp2;\n        }\n        temp6[1] = (int *)temp3;\n        temp5[1] = (int *)temp6;\n      }\n    }\n  }\n  FUNC_0800583e(result,temp2,temp3,param4);\n  return;\n}\n\n",
            "current_name": "update_linked_list_0800567c",
            "entrypoint": "0x0800567c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800567c": "update_linked_list_0800567c",
                "extraout_r1": "temp1",
                "param_1": "result",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4",
                "piVar3": "temp_var",
                "ppiVar1": "temp2",
                "ppiVar2": "temp3",
                "ppiVar4": "temp5",
                "ppiVar5": "temp6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005714": {
            "additional_data": {
                "DAT_200002ac": {
                    "data_block": 1,
                    "first_block": 2,
                    "free_list_ptr": 1,
                    "head": 1,
                    "memory_list": 1
                },
                "DAT_200002b0": {
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "has_data_pointer_updated": 1,
                    "initialized": 2
                },
                "FUNC_0800583c": {
                    "initialize": 1,
                    "initialize_allocator": 1,
                    "initialize_data": 1,
                    "initialize_function": 1,
                    "initialize_memory": 1
                },
                "FUNC_0800583e": {
                    "cleanup_allocator": 1,
                    "cleanup_function": 1,
                    "finalize": 1,
                    "finalize_data": 1,
                    "free_memory": 1
                },
                "FUN_08005714": {
                    "allocate_and_copy": 1,
                    "allocate_and_initialize": 2,
                    "allocate_and_initialize_memory": 14,
                    "allocate_and_update_data": 3,
                    "allocate_memory": 4,
                    "allocate_memory_block": 5,
                    "process_data": 1,
                    "update_data_pointer": 1
                },
                "iVar2": {
                    "block_diff": 1,
                    "block_difference": 2,
                    "block_size": 1,
                    "block_size_diff": 1,
                    "diff": 1,
                    "difference": 3,
                    "offset": 8,
                    "padding": 1,
                    "remaining_size": 3,
                    "remaining_space": 9,
                    "temp_var": 1
                },
                "param_1": {
                    "block_pointer": 1,
                    "block_ptr": 1,
                    "buffer": 1,
                    "error_code": 1,
                    "mem_buffer": 1,
                    "mem_ptr": 1,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_location": 1,
                    "memory_pointer": 2,
                    "output": 2,
                    "output_buffer": 5,
                    "output_param": 1,
                    "output_pointer": 5,
                    "output_ptr": 3,
                    "pointer": 1
                },
                "param_2": {
                    "block_size": 2,
                    "bytes_to_allocate": 1,
                    "data_size": 1,
                    "input_size": 11,
                    "requested_size": 4,
                    "required_size": 1,
                    "size": 10,
                    "size_to_allocate": 1
                },
                "puVar1": {
                    "curr_ptr": 1,
                    "current": 1,
                    "current_allocation": 1,
                    "current_block": 18,
                    "current_block_ptr": 2,
                    "current_chunk": 2,
                    "current_entry": 1,
                    "current_memory_block": 1,
                    "current_pointer": 2,
                    "current_ptr": 2
                },
                "puVar3": {
                    "next": 1,
                    "next_block": 3,
                    "next_block_ptr": 1,
                    "next_chunk": 1,
                    "next_pointer": 1,
                    "next_ptr": 2,
                    "prev_block": 2,
                    "previous_allocation": 1,
                    "previous_block": 13,
                    "previous_block_ptr": 1,
                    "previous_chunk": 1,
                    "previous_entry": 1,
                    "previous_memory_block": 1,
                    "previous_pointer": 1,
                    "previous_ptr": 1
                },
                "puVar5": {
                    "allocated_block": 1,
                    "current_previous_entry": 1,
                    "last_allocated_block": 1,
                    "last_block": 6,
                    "last_valid_block": 1,
                    "last_valid_memory_block": 1,
                    "new_block": 1,
                    "new_ptr": 1,
                    "next_block": 1,
                    "prev_block_next": 1,
                    "prev_ptr": 1,
                    "previous": 1,
                    "previous_allocation_next": 1,
                    "previous_block": 3,
                    "previous_block_next": 1,
                    "previous_block_ptr": 2,
                    "previous_chunk": 1,
                    "previous_pointer": 1,
                    "previous_previous_chunk": 1,
                    "previous_ptr": 1,
                    "temp_ptr": 1,
                    "updated_block": 1,
                    "updated_pointer": 1
                },
                "uVar4": {
                    "allocation_difference": 1,
                    "block_diff": 1,
                    "block_diff_abs": 1,
                    "block_difference": 5,
                    "block_difference_result": 1,
                    "block_offset": 1,
                    "chunk_diff": 1,
                    "diff": 2,
                    "difference": 10,
                    "difference_size": 1,
                    "memory_difference": 1,
                    "offset": 1,
                    "previous_block_size": 1,
                    "ptr_diff": 1,
                    "size_difference": 3
                },
                "uVar6": {
                    "adjusted_size": 1,
                    "aligned_size": 3,
                    "allocated_block_size": 2,
                    "allocated_size": 14,
                    "allocated_space": 1,
                    "block_size": 1,
                    "mem_size": 1,
                    "new_allocation_size": 1,
                    "new_block_size": 2,
                    "new_pointer_size": 1,
                    "required_memory": 1,
                    "required_size": 1,
                    "total_size": 1
                },
                "update_and_check_data_pointer_0800581c": {
                    "update_and_check_data_pointer": 4,
                    "update_data_pointer": 3
                }
            },
            "called": [
                "FUN_0800583e",
                "FUN_0800583c",
                "FUN_0800581c"
            ],
            "calling": [
                "FUN_08005044",
                "FUN_080050fc",
                "FUN_080057d0"
            ],
            "code": "\nuint allocate_and_initialize_memory_08005714(undefined4 *output_buffer,uint input_size)\n\n{\n  uint *current_block;\n  int remaining_space;\n  uint *previous_block;\n  uint difference;\n  uint *last_block;\n  uint allocated_size;\n  \n  allocated_size = (input_size + 3 & 0xfffffffc) + 8;\n  if (allocated_size < 0xc) {\n    allocated_size = 0xc;\n  }\n  if (((int)allocated_size < 0) || (allocated_size < input_size)) {\n    *output_buffer = 0xc;\n  }\n  else {\n    FUNC_0800583c();\n    current_block = DAT_200002ac;\n    last_block = DAT_200002ac;\n    while (previous_block = current_block, previous_block != (uint *)0x0) {\n      difference = *previous_block - allocated_size;\n      if (-1 < (int)difference) {\n        if (difference < 0xc) {\n          if (last_block == previous_block) {\n            current_block = (uint *)last_block[1];\n            DAT_200002ac = current_block;\n          }\n          else {\n            current_block = (uint *)previous_block[1];\n          }\n          if (last_block != previous_block) {\n            last_block[1] = (uint)current_block;\n            last_block = previous_block;\n          }\n        }\n        else {\n          *previous_block = difference;\n          *(uint *)((int)previous_block + difference) = allocated_size;\n          last_block = (uint *)((int)previous_block + difference);\n        }\n        goto LAB_08005778;\n      }\n      last_block = previous_block;\n      current_block = (uint *)previous_block[1];\n    }\n    if (DAT_200002b0 == 0) {\n      DAT_200002b0 = update_and_check_data_pointer(output_buffer);\n    }\n    current_block = (uint *)update_and_check_data_pointer(output_buffer,allocated_size);\n    if ((current_block != (uint *)0xffffffff) &&\n       ((last_block = (uint *)((int)current_block + 3U & 0xfffffffc), current_block == last_block ||\n        (remaining_space = update_and_check_data_pointer(output_buffer,(int)last_block - (int)current_block), remaining_space != -1)))) {\n      *last_block = allocated_size;\nLAB_08005778:\n      FUNC_0800583e(output_buffer);\n      allocated_size = (int)last_block + 0xbU & 0xfffffff8;\n      remaining_space = allocated_size - (int)(last_block + 1);\n      if (remaining_space != 0) {\n        *(int *)((int)last_block + remaining_space) = -remaining_space;\n        return allocated_size;\n      }\n      return allocated_size;\n    }\n    *output_buffer = 0xc;\n    FUNC_0800583e(output_buffer);\n  }\n  return 0;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_08005714",
            "entrypoint": "0x08005714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005714": "allocate_and_initialize_memory_08005714",
                "iVar2": "remaining_space",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "puVar1": "current_block",
                "puVar3": "previous_block",
                "puVar5": "last_block",
                "uVar4": "difference",
                "uVar6": "allocated_size",
                "update_and_check_data_pointer_0800581c": "update_and_check_data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057d0": {
            "additional_data": {
                "FUN_080057d0": {
                    "allocate_and_copy_data": 18,
                    "allocate_and_copy_data_to_buffer": 1,
                    "allocate_and_initialize_memory": 1,
                    "allocate_and_initialize_memory_or_copy_data": 1,
                    "allocate_and_initialize_or_copy_data": 1,
                    "allocate_and_update_linked_list": 2,
                    "memory_allocator": 1,
                    "process_data": 5,
                    "update_and_copy_data": 1
                },
                "allocate_and_initialize_memory_08005714": {
                    "allocate_and_initialize_memory": 7
                },
                "calculate_sum_or_offset_08005840": {
                    "calculate_sum_or_offset": 7
                },
                "copy_data_to_buffer_08005630": {
                    "copy_data_to_buffer": 7
                },
                "iVar1": {
                    "allocated_memory": 2,
                    "allocated_memory_ptr": 1,
                    "allocation_result": 3,
                    "destination_address": 1,
                    "result": 23,
                    "return_value": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 5,
                    "buffer": 1,
                    "buffer_address": 1,
                    "data_pointer": 3,
                    "first_param": 1,
                    "identifier": 1,
                    "input_param": 3,
                    "input_param_1": 1,
                    "input_pointer": 1,
                    "input_value": 1,
                    "list": 1,
                    "param1": 1,
                    "param_1": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_buffer": 1,
                    "ptr_to_data": 1,
                    "source_data": 2,
                    "source_param": 1,
                    "source_ptr": 2
                },
                "param_2": {
                    "data": 2,
                    "data_address": 1,
                    "data_length": 3,
                    "data_offset": 1,
                    "data_ptr": 2,
                    "data_size": 4,
                    "length": 2,
                    "size": 8,
                    "size_allocated": 1,
                    "size_of_data": 3,
                    "size_of_input": 1,
                    "source_address": 1,
                    "source_size": 2
                },
                "param_3": {
                    "data_size": 3,
                    "desired_size": 1,
                    "destination_size": 1,
                    "expected_sum_or_offset": 1,
                    "limit": 5,
                    "max_size": 1,
                    "required_length": 1,
                    "required_size": 3,
                    "size": 4,
                    "size_requested": 1,
                    "sum_or_offset": 1,
                    "target": 1,
                    "target_length": 2,
                    "target_size": 3,
                    "threshold": 3
                },
                "param_4": {
                    "additional_param": 4,
                    "arg2": 1,
                    "arg4": 4,
                    "extra_param": 3,
                    "extra_parameter": 1,
                    "fourth_param": 1,
                    "input_param_4": 1,
                    "offset": 7,
                    "optional_parameter": 1,
                    "param": 2,
                    "param4": 1,
                    "param_4": 2,
                    "ptr2": 1,
                    "temp_param": 1,
                    "unknown_param": 1
                },
                "uVar2": {
                    "calculated_sum_or_offset": 1,
                    "calculated_value": 2,
                    "sum_offset": 2,
                    "sum_or_offset": 26
                },
                "update_linked_list_0800567c": {
                    "update_linked_list": 6,
                    "update_list": 1
                }
            },
            "called": [
                "FUN_0800567c",
                "FUN_08005630",
                "FUN_08005840",
                "FUN_08005714"
            ],
            "calling": [
                "FUN_08005044"
            ],
            "code": "\nint allocate_and_initialize_memory_or_copy_data_080057d0(undefined4 arg1,int size,uint limit,undefined4 offset)\n\n{\n  int result;\n  uint sum_or_offset;\n  \n  if (size != 0) {\n    if (limit == 0) {\n      update_linked_list();\n      result = 0;\n    }\n    else {\n      sum_or_offset = calculate_sum_or_offset();\n      result = size;\n      if ((sum_or_offset < limit) && (result = allocate_and_initialize_memory(arg1,limit), result != 0)) {\n        copy_data_to_buffer(result,size,limit);\n        update_linked_list(arg1,size);\n      }\n    }\n    return result;\n  }\n  result = allocate_and_initialize_memory(arg1,limit,limit,offset);\n  return result;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_or_copy_data_080057d0",
            "entrypoint": "0x080057d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057d0": "allocate_and_initialize_memory_or_copy_data_080057d0",
                "allocate_and_initialize_memory_08005714": "allocate_and_initialize_memory",
                "calculate_sum_or_offset_08005840": "calculate_sum_or_offset",
                "copy_data_to_buffer_08005630": "copy_data_to_buffer",
                "iVar1": "result",
                "param_1": "arg1",
                "param_2": "size",
                "param_3": "limit",
                "param_4": "offset",
                "uVar2": "sum_or_offset",
                "update_linked_list_0800567c": "update_linked_list"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800581c": {
            "additional_data": {
                "DAT_2000169c": {
                    "data_to_update": 1
                },
                "FUN_0800581c": {
                    "extract_data": 1,
                    "update_and_assign_data": 1,
                    "update_and_check_data": 2,
                    "update_and_check_data_pointer": 2,
                    "update_and_store_data": 1,
                    "update_data": 5,
                    "update_data_pointer": 15,
                    "update_data_value": 1,
                    "update_pointer": 1,
                    "update_pointer_error": 1,
                    "update_pointer_if_valid": 1
                },
                "iVar1": {
                    "pointer_update_result": 1,
                    "result": 7,
                    "return_value": 1,
                    "status": 1,
                    "update_result": 20,
                    "update_status": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "output": 3,
                    "output_data": 1,
                    "output_ptr": 1,
                    "output_value": 2,
                    "result": 19,
                    "result_pointer": 1,
                    "result_ptr": 3
                },
                "param_2": {
                    "data": 6,
                    "input": 10,
                    "input_data": 5,
                    "input_param": 2,
                    "input_value": 8
                }
            },
            "called": [
                "FUN_080072b8"
            ],
            "calling": [
                "FUN_08005714"
            ],
            "code": "\nvoid update_and_check_data_pointer_0800581c(int *result,undefined4 input)\n\n{\n  int update_result;\n  \n  DAT_2000169c = 0;\n  update_result = update_data_pointer_080072b8(input);\n  if ((update_result == -1) && (DAT_2000169c != 0)) {\n    *result = DAT_2000169c;\n  }\n  return;\n}\n\n",
            "current_name": "update_and_check_data_pointer_0800581c",
            "entrypoint": "0x0800581c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800581c": "update_and_check_data_pointer_0800581c",
                "iVar1": "update_result",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800583c": {
            "called": [],
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "code": "\nvoid FUNC_0800583c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800583c",
            "entrypoint": "0x0800583c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800583c": "FUNC_0800583c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800583e": {
            "called": [],
            "calling": [
                "FUN_0800567c",
                "FUN_08005714"
            ],
            "code": "\nvoid FUNC_0800583e(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800583e",
            "entrypoint": "0x0800583e",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800583e": "FUNC_0800583e"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005840": {
            "additional_data": {
                "FUN_08005840": {
                    "calculate_modified_value": 3,
                    "calculate_new_value": 2,
                    "calculate_result": 7,
                    "calculate_sum": 16,
                    "calculate_sum_offset": 1,
                    "calculate_sum_or_offset": 1,
                    "calculate_value": 1
                },
                "iVar1": {
                    "accumulator": 1,
                    "current_index": 2,
                    "current_sum": 1,
                    "index": 1,
                    "modified_value": 3,
                    "new_sum_offset": 1,
                    "new_value": 1,
                    "result": 12,
                    "sum": 8
                },
                "param_1": {
                    "arg1": 2,
                    "input": 3,
                    "input1": 1,
                    "input_param": 1,
                    "input_param_1": 1,
                    "input_value": 1,
                    "num1": 1,
                    "param": 2,
                    "param1": 5,
                    "param_a": 1,
                    "result": 4,
                    "undefined4": 1,
                    "undefined_value": 1,
                    "unknown_value": 1,
                    "unused_parameter": 1,
                    "value": 2,
                    "value1": 2,
                    "variable_1": 1
                },
                "param_2": {
                    "address": 2,
                    "arg2": 2,
                    "arr": 1,
                    "array": 7,
                    "array_address": 2,
                    "array_index": 3,
                    "array_pointer": 1,
                    "input2": 1,
                    "input_array": 1,
                    "input_param_2": 1,
                    "input_value": 3,
                    "num2": 1,
                    "num_array": 1,
                    "param2": 2,
                    "param_b": 1,
                    "sum_offset": 1,
                    "variable_2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080057d0"
            ],
            "code": "\nint calculate_sum_or_offset_08005840(undefined4 param1,int array)\n\n{\n  int result;\n  \n  result = *(int *)(array + -4) + -4;\n  if (*(int *)(array + -4) < 0) {\n    result = result + *(int *)(array + result);\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_sum_or_offset_08005840",
            "entrypoint": "0x08005840",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005840": "calculate_sum_or_offset_08005840",
                "iVar1": "result",
                "param_1": "param1",
                "param_2": "array"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005854": {
            "additional_data": {
                "DAT_0800737e": {
                    "positive_infinity": 1
                },
                "DAT_080073ac": {
                    "default_message": 1
                },
                "DAT_20000224": {
                    "constant_value": 1
                },
                "FUNC_0800708c": {
                    "process_function": 1
                },
                "FUN_08005854": {
                    "calculate_result": 1,
                    "improve_and_validate_input": 1,
                    "process_data": 10,
                    "process_parameters": 1,
                    "validate_and_compute_result": 1,
                    "validate_and_initialize": 3,
                    "validate_and_process_data": 1,
                    "validate_and_process_input": 1,
                    "validate_input_and_update_result": 1,
                    "validate_inputs_and_process": 1
                },
                "calculate_improved_result_08005c70": {
                    "calculate_improved_result": 1
                },
                "check_if_string_is_empty_080009f0": {
                    "check_string_empty": 1
                },
                "check_parameters_validity_08000a04": {
                    "check_parameters_validity": 1
                },
                "get_data_value_080072ac": {
                    "get_data_value": 1
                },
                "get_positive_infinity_080070a4": {
                    "get_positive_infinity": 1
                },
                "iVar1": {
                    "check_result": 4,
                    "empty_check": 1,
                    "error_code": 1,
                    "init_app_result": 1,
                    "init_result": 3,
                    "initialization_result": 2,
                    "initialize_result": 1,
                    "is_valid": 3,
                    "result": 6,
                    "result_check": 1,
                    "return_value": 1,
                    "status": 2,
                    "string_check_result": 1,
                    "validity_check": 1
                },
                "initialize_application_0800709e": {
                    "initialize_application": 1
                },
                "local_28": {
                    "is_valid": 2,
                    "param_check_result": 2,
                    "param_validity": 1,
                    "param_validity_check": 1,
                    "param_validity_check_result": 2,
                    "parameter_check_result": 4,
                    "parameter_error": 1,
                    "parameter_validity": 5,
                    "parameter_validity_check": 1,
                    "parameters_valid": 1,
                    "parameters_validity": 2,
                    "validation_result": 1,
                    "validity": 2,
                    "validity_check": 3,
                    "validity_check_result": 1,
                    "validity_result": 1,
                    "validity_status": 1
                },
                "local_30": {
                    "infinity": 6,
                    "infinity_value": 5,
                    "positive_infinity": 16,
                    "result": 4
                },
                "local_38": {
                    "duplicate_param_a": 1,
                    "input1_copy2": 1,
                    "input_1_copy": 1,
                    "input_1_copy_2": 1,
                    "input_1_copy_alt": 1,
                    "input_1_cpy2": 1,
                    "input_1_cpy_2": 1,
                    "input_param1_copy": 1,
                    "input_param1_copy2": 1,
                    "input_param_1_copy_2": 3,
                    "local_param_1_2": 1,
                    "param1_2": 1,
                    "param1_copy": 2,
                    "param1_copy2": 1,
                    "param1_temp": 1,
                    "param_1_copy2": 2,
                    "param_1_copy_2": 1,
                    "param_a_2": 1,
                    "temp1": 1,
                    "temp_param_copy": 1,
                    "tmp_param_1_2": 1,
                    "value1_ptr2": 1,
                    "value_1_copy_copy": 1
                },
                "local_40": {
                    "copy_of_input1": 1,
                    "first_param_copy": 1,
                    "input1_copy": 1,
                    "input_1": 1,
                    "input_1_copy": 3,
                    "input_1_cpy": 2,
                    "input_param1_copy": 2,
                    "input_param_1_copy": 3,
                    "local_param_1": 1,
                    "param1": 4,
                    "param1_copy": 3,
                    "param_1_copy": 4,
                    "param_a": 1,
                    "temp_param_a": 1,
                    "tmp_param_1": 1,
                    "value1_ptr": 1,
                    "value_1_copy": 1
                },
                "local_44": {
                    "buffer_pointer": 1,
                    "constant_ptr": 1,
                    "error_message": 4,
                    "flag2": 1,
                    "message": 10,
                    "message_ptr": 1,
                    "string": 1,
                    "string_data": 5,
                    "string_pointer": 2,
                    "string_ptr": 5
                },
                "local_48": {
                    "constant_1": 1,
                    "flag": 21,
                    "flag1": 1,
                    "is_initialized": 1,
                    "is_valid": 6,
                    "is_valid_input": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 5,
                    "input_1": 6,
                    "input_a": 1,
                    "input_param1": 6,
                    "input_param_1": 9,
                    "input_param_a": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "input2": 5,
                    "input_2": 6,
                    "input_b": 1,
                    "input_param2": 6,
                    "input_param_2": 9,
                    "input_param_b": 1,
                    "second_param": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "piVar3": {
                    "data_int_ptr": 1,
                    "data_pointer": 1,
                    "data_pointer2": 1,
                    "data_ptr": 1,
                    "data_value": 1,
                    "data_value2": 2,
                    "data_value_int": 1,
                    "data_value_int_pointer": 1,
                    "data_value_int_ptr": 3,
                    "data_value_integer": 1,
                    "data_value_integer_ptr": 1,
                    "data_value_pointer": 1,
                    "data_value_ptr2": 2,
                    "data_value_ptr_2": 3,
                    "ptr_data_value": 1,
                    "result_ptr": 3,
                    "value_ptr": 1
                },
                "puVar2": {
                    "data_pointer": 1,
                    "data_ptr": 4,
                    "data_value": 3,
                    "data_value_pointer": 2,
                    "data_value_ptr": 11,
                    "ptr": 1,
                    "ptr_data": 1,
                    "value_pointer": 1
                },
                "uStack_34": {
                    "duplicate_param_b": 1,
                    "input2_copy2": 1,
                    "input_2_copy": 1,
                    "input_2_copy_2": 1,
                    "input_2_copy_alt": 1,
                    "input_2_cpy2": 1,
                    "input_2_cpy_2": 1,
                    "input_param2_copy": 1,
                    "input_param2_copy2": 1,
                    "input_param_2_copy_2": 3,
                    "local_param_2_2": 1,
                    "param2_2": 1,
                    "param2_copy": 2,
                    "param2_copy2": 1,
                    "param2_temp": 1,
                    "param_2_copy2": 2,
                    "param_2_copy_2": 1,
                    "param_b_2": 1,
                    "temp2": 1,
                    "temp_second_param_copy": 1,
                    "tmp_param_2_2": 1,
                    "value2_ptr2": 1,
                    "value_2_copy_copy": 1
                },
                "uStack_3c": {
                    "copy_of_input2": 1,
                    "input2_copy": 1,
                    "input_2": 1,
                    "input_2_copy": 3,
                    "input_2_cpy": 2,
                    "input_param2_copy": 2,
                    "input_param_2_copy": 3,
                    "local_param_2": 1,
                    "param2": 4,
                    "param2_copy": 3,
                    "param_2_copy": 4,
                    "param_b": 1,
                    "second_param_copy": 1,
                    "temp_param_b": 1,
                    "tmp_param_2": 1,
                    "value2_ptr": 1,
                    "value_2_copy": 1
                },
                "uVar4": {
                    "improved_result": 21,
                    "result": 7,
                    "result1": 1,
                    "result_1": 1,
                    "result_from_calculation": 1
                },
                "uVar5": {
                    "func_result": 5,
                    "function_result": 3,
                    "processed_data": 2,
                    "processed_result": 2,
                    "result": 2,
                    "result2": 1,
                    "result_2": 1,
                    "result_from_func_0800708c": 1,
                    "string_address": 1,
                    "string_check_result": 2,
                    "string_length": 3,
                    "string_ptr": 1,
                    "string_result": 2,
                    "string_validation_result": 1,
                    "string_value": 3,
                    "temp_result": 1
                }
            },
            "called": [
                "FUN_080070a4",
                "FUN_080009f0",
                "FUN_0800709e",
                "FUN_080072ac",
                "FUN_0800708c",
                "FUN_08000a04",
                "FUN_08005c70"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nundefined8 validate_and_process_data_08005854(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  int result;\n  undefined4 *data_value_ptr;\n  int *data_value_int_ptr;\n  undefined8 improved_result;\n  undefined8 func_result;\n  undefined4 flag;\n  undefined *message;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 input_param_1_copy_2;\n  undefined4 input_param_2_copy_2;\n  undefined8 positive_infinity;\n  int parameter_validity;\n  \n  improved_result = calculate_improved_result();\n  if (DAT_20000224 == -1) {\n    return improved_result;\n  }\n  parameter_validity = check_parameters_validity(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (parameter_validity != 0) {\n    return improved_result;\n  }\n  func_result = FUNC_0800708c(input_param_1,input_param_2);\n  result = check_string_empty((int)func_result,(int)((ulonglong)func_result >> 0x20),0,0x3ff00000);\n  if (result == 0) {\n    return improved_result;\n  }\n  flag = 1;\n  message = &DAT_080073ac;\n  param1 = input_param_1;\n  param2 = input_param_2;\n  input_param_1_copy_2 = input_param_1;\n  input_param_2_copy_2 = input_param_2;\n  positive_infinity = get_positive_infinity(&DAT_0800737e);\n  if (DAT_20000224 != '\\x02') {\n    result = initialize_application(&flag);\n    if (result != 0) goto LAB_080058d0;\n  }\n  data_value_ptr = (undefined4 *)get_data_value();\n  *data_value_ptr = 0x21;\nLAB_080058d0:\n  if (parameter_validity != 0) {\n    data_value_int_ptr = (int *)get_data_value();\n    *data_value_int_ptr = parameter_validity;\n  }\n  return positive_infinity;\n}\n\n",
            "current_name": "validate_and_process_data_08005854",
            "entrypoint": "0x08005854",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005854": "validate_and_process_data_08005854",
                "calculate_improved_result_08005c70": "calculate_improved_result",
                "check_if_string_is_empty_080009f0": "check_string_empty",
                "check_parameters_validity_08000a04": "check_parameters_validity",
                "get_data_value_080072ac": "get_data_value",
                "get_positive_infinity_080070a4": "get_positive_infinity",
                "iVar1": "result",
                "initialize_application_0800709e": "initialize_application",
                "local_28": "parameter_validity",
                "local_30": "positive_infinity",
                "local_38": "input_param_1_copy_2",
                "local_40": "param1",
                "local_44": "message",
                "local_48": "flag",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "piVar3": "data_value_int_ptr",
                "puVar2": "data_value_ptr",
                "uStack_34": "input_param_2_copy_2",
                "uStack_3c": "param2",
                "uVar4": "improved_result",
                "uVar5": "func_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005900": {
            "additional_data": {
                "FUN_08005900": {
                    "calculate_and_return_floating_point_value": 1,
                    "calculate_and_return_result": 1,
                    "calculate_result": 13,
                    "calculate_result_and_update": 4,
                    "calculate_result_with_valid_parameters": 1,
                    "calculate_updated_value": 2,
                    "compute_result": 1,
                    "process_data": 2,
                    "process_function": 1,
                    "process_parameters": 1
                },
                "cVar1": {
                    "char_value": 1,
                    "character": 4,
                    "character_var": 1,
                    "character_variable": 1,
                    "condition": 1,
                    "condition_var": 2,
                    "condition_variable": 1,
                    "data_flag": 2,
                    "flag": 11,
                    "status": 1
                },
                "iVar2": {
                    "check_result": 4,
                    "error": 1,
                    "int_var": 1,
                    "integer_variable": 1,
                    "is_valid": 1,
                    "result": 19,
                    "result_check": 1,
                    "validity_check_result": 1
                },
                "iVar5": {
                    "another_integer_variable": 1,
                    "bit_check_result": 1,
                    "bit_result": 4,
                    "bit_set": 7,
                    "bit_set_check": 1,
                    "bit_set_result": 8,
                    "bit_set_value": 1,
                    "check_result2": 1,
                    "highest_bit": 1,
                    "highest_bit_check": 1,
                    "highest_bit_result": 1,
                    "int_var2": 1
                },
                "local_30": {
                    "bit_set": 1,
                    "check_result": 8,
                    "check_value": 1,
                    "error_code": 2,
                    "final_check": 1,
                    "highest_bit_set": 3,
                    "local_int_var": 1,
                    "local_result": 4,
                    "local_value": 2,
                    "parameter_check_result": 1,
                    "parameter_validity": 1,
                    "result_2": 1,
                    "result_value_2": 1,
                    "validation_result": 1,
                    "validity_check_result": 1,
                    "value": 1
                },
                "local_38": {
                    "final_result": 2,
                    "floating_point_value": 3,
                    "local_result": 1,
                    "output": 1,
                    "result": 2,
                    "result_64_3": 1,
                    "result_data": 1,
                    "result_float": 1,
                    "result_floating_point_value": 1,
                    "result_value": 9,
                    "result_value_1": 1,
                    "return_value": 6,
                    "value": 1
                },
                "local_40": {
                    "input3_copy": 4,
                    "input_3_2": 1,
                    "input_3_copy": 3,
                    "input_param3_copy": 2,
                    "input_param_3_copy": 5,
                    "input_param_copy3": 1,
                    "local_input_3": 2,
                    "local_input_param_3": 1,
                    "local_param3": 2,
                    "local_param_3": 3,
                    "original_input_3": 1,
                    "output_param1_copy": 1,
                    "param_3_copy": 1,
                    "temp_param_3": 2
                },
                "local_48": {
                    "input1_copy": 4,
                    "input_1_2": 1,
                    "input_1_copy": 3,
                    "input_param1_copy": 3,
                    "input_param_1_copy": 5,
                    "input_param_copy1": 1,
                    "local_input_1": 2,
                    "local_input_param_1": 1,
                    "local_param1": 2,
                    "local_param_1": 3,
                    "original_input_1": 1,
                    "param_1_copy": 1,
                    "temp_param_1": 2
                },
                "local_4c": {
                    "char_pointer": 1,
                    "char_ptr": 2,
                    "constant": 1,
                    "constant_data_ptr": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "local_ptr": 1,
                    "message": 5,
                    "message_ptr": 6,
                    "parameter_msg": 1,
                    "pointer_to_flag": 1,
                    "result_string": 1,
                    "status_string": 1,
                    "str_ptr": 1,
                    "string_check_result": 1,
                    "string_ptr": 4
                },
                "local_50": {
                    "app_initialization_type": 1,
                    "calculation_type": 1,
                    "check_result": 1,
                    "condition_flag": 1,
                    "data_value": 1,
                    "flag": 10,
                    "flag1": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "local_flag": 1,
                    "mode": 1,
                    "param_validity_flag": 1,
                    "parameter_type": 1,
                    "result_type": 2,
                    "status": 3,
                    "status_flag": 2,
                    "type": 1
                },
                "param_1": {
                    "first_parameter": 1,
                    "input1": 5,
                    "input_1": 7,
                    "input_param1": 5,
                    "input_param_1": 11,
                    "parameter_1": 1
                },
                "param_2": {
                    "input2": 5,
                    "input_2": 7,
                    "input_param2": 5,
                    "input_param_2": 11,
                    "parameter_2": 1,
                    "second_parameter": 1
                },
                "param_3": {
                    "input3": 5,
                    "input_3": 7,
                    "input_param3": 4,
                    "input_param_3": 11,
                    "output_param1": 1,
                    "parameter_3": 1,
                    "third_parameter": 1
                },
                "param_4": {
                    "fourth_parameter": 1,
                    "input4": 5,
                    "input_4": 7,
                    "input_param4": 4,
                    "input_param_4": 11,
                    "output_param2": 1,
                    "parameter_4": 1
                },
                "piVar3": {
                    "data_ptr": 3,
                    "data_value": 3,
                    "data_value_pointer": 2,
                    "data_value_ptr": 3,
                    "int_ptr_var": 1,
                    "pointer_result": 1,
                    "pointer_to_integer": 1,
                    "pointer_to_result": 1,
                    "pointer_value": 1,
                    "ptr": 1,
                    "result_ptr": 10
                },
                "puVar4": {
                    "data_ptr": 8,
                    "data_value_2_ptr": 1,
                    "data_value_pointer": 1,
                    "data_value_pointer2": 1,
                    "data_value_ptr": 8,
                    "pointer_to_unsigned_integer": 1,
                    "pointer_to_value": 1,
                    "pointer_value": 1,
                    "pointer_value2": 1,
                    "ptr2": 1,
                    "undefined4_ptr_var": 1,
                    "value_ptr": 2
                },
                "uStack_3c": {
                    "input4_copy": 4,
                    "input_4_2": 1,
                    "input_4_copy": 3,
                    "input_param4_copy": 2,
                    "input_param_4_copy": 4,
                    "input_param_copy4": 1,
                    "local_input_4": 2,
                    "local_input_param_4": 1,
                    "local_param4": 2,
                    "local_param_4": 3,
                    "original_input_4": 1,
                    "output_param2_copy": 1,
                    "param_4_copy": 1,
                    "temp_param_4": 2
                },
                "uStack_44": {
                    "input2_copy": 4,
                    "input_2_2": 1,
                    "input_2_copy": 3,
                    "input_param2_copy": 3,
                    "input_param_2_copy": 4,
                    "input_param_copy2": 1,
                    "local_input_2": 2,
                    "local_input_param_2": 1,
                    "local_param2": 2,
                    "local_param_2": 3,
                    "original_input_2": 1,
                    "param_2_copy": 1,
                    "temp_param_2": 2
                },
                "uVar6": {
                    "float_value_hi": 1,
                    "floating_point_value_high": 3,
                    "floating_value_high": 1,
                    "fp_value_1": 1,
                    "high_bits_1": 1,
                    "lower_bits": 1,
                    "part_1_of_u_var8": 1,
                    "result_high": 1,
                    "result_upper": 3,
                    "result_upper_32_bits": 1,
                    "upper32": 1,
                    "upper32_bits": 1,
                    "upper_32": 1,
                    "upper_32_bits": 1,
                    "upper_32bits": 1,
                    "upper_bits": 3,
                    "upper_bits_floating_point": 1,
                    "upper_bits_value": 1,
                    "upper_half": 1,
                    "upper_value": 4
                },
                "uVar7": {
                    "float_value_lo": 1,
                    "floating_point_value_low": 3,
                    "floating_value_low": 1,
                    "fp_value_2": 1,
                    "high_bits_2": 1,
                    "lower32": 1,
                    "lower32_bits": 1,
                    "lower_32": 1,
                    "lower_32_bits": 1,
                    "lower_32bits": 1,
                    "lower_bits": 3,
                    "lower_bits_floating_point": 1,
                    "lower_bits_value": 1,
                    "lower_half": 1,
                    "lower_value": 3,
                    "part_2_of_u_var8": 1,
                    "result_low": 1,
                    "result_lower": 3,
                    "result_lower_32_bits": 1,
                    "upper_bits": 1,
                    "value": 1
                },
                "uVar8": {
                    "float_value": 1,
                    "floating_point_value": 11,
                    "floating_point_value1": 1,
                    "floating_result": 1,
                    "original_result": 1,
                    "result": 6,
                    "result1": 2,
                    "result_1": 1,
                    "result_64": 1,
                    "result_combined": 1,
                    "result_value": 3,
                    "return_value": 1
                },
                "uVar9": {
                    "calc_result": 1,
                    "calculated_value": 1,
                    "floating_point_value2": 2,
                    "result": 1,
                    "result2": 2,
                    "result_2": 1,
                    "result_64_2": 1,
                    "result_update": 1,
                    "result_updated": 1,
                    "updated_float_value": 1,
                    "updated_floating_point_value": 1,
                    "updated_result": 9,
                    "updated_result_value": 1,
                    "updated_value": 2
                }
            },
            "called": [
                "FUN_080070b0",
                "FUN_08007092",
                "FUN_08006228",
                "FUN_0800709e",
                "FUN_080004d0",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_080072ac",
                "FUN_08000a04",
                "FUN_080009a0"
            ],
            "calling": [
                "FUN_0800411c"
            ],
            "code": "\nundefined8 calculate_result_and_update_08005900(undefined4 input_param_1,undefined4 input_param_2,undefined4 input_param_3,undefined4 input_param_4)\n\n{\n  char flag;\n  int result;\n  int *result_ptr;\n  undefined4 *data_value_ptr;\n  int bit_set_result;\n  undefined4 upper_value;\n  undefined4 lower_bits;\n  undefined8 floating_point_value;\n  undefined8 updated_result;\n  undefined4 flag;\n  undefined *message_ptr;\n  undefined4 input_param_1_copy;\n  undefined4 input2_copy;\n  undefined4 input_param_3_copy;\n  undefined4 input4_copy;\n  undefined8 result_value;\n  int check_result;\n  \n  floating_point_value = calculate_floating_point_value_08006228_08006228();\n  flag = DAT_20000224;\n  upper_value = (undefined4)((ulonglong)floating_point_value >> 0x20);\n  lower_bits = (undefined4)floating_point_value;\n  if (DAT_20000224 == -1) {\n    return floating_point_value;\n  }\n  result = check_parameters_validity_08000a04(input_param_3,input_param_4,input_param_3,input_param_4);\n  if (result != 0) {\n    return floating_point_value;\n  }\n  result = check_parameters_validity_08000a04(input_param_1,input_param_2,input_param_1,input_param_2);\n  input_param_1_copy = input_param_1;\n  input2_copy = input_param_2;\n  input_param_3_copy = input_param_3;\n  input4_copy = input_param_4;\n  if (result == 0) {\n    result = check_parameters_and_return_bool_080009a0(input_param_1,input_param_2,0,0);\n    if (result != 0) {\n      result = check_parameters_and_return_bool_080009a0(input_param_3,input_param_4,0,0);\n      if (result != 0) {\n        flag = 1;\n        message_ptr = &DAT_080073b1;\n        result_value = 0;\n        check_result = 0;\n        if (flag != '\\0') {\n          result_value = 0x3ff0000000000000;\n          goto LAB_080059d0;\n        }\n        goto LAB_08005978;\n      }\n      result = get_highest_bit_set_08007092(input_param_3,input_param_4);\n      if (result == 0) {\n        return floating_point_value;\n      }\n      result = check_if_empty_string_080009b4(input_param_3,input_param_4,0,0);\n      if (result == 0) {\n        return floating_point_value;\n      }\n      flag = 1;\n      message_ptr = &DAT_080073b1;\n      check_result = 0;\n      if (DAT_20000224 == '\\0') goto LAB_08005a22;\n      result_value = 0xfff0000000000000;\n      check_result = 0;\n      flag = DAT_20000224;\nLAB_08005a32:\n      if (flag != '\\x02') goto LAB_08005978;\n      goto LAB_08005a34;\n    }\n    result = get_highest_bit_set_08007092(lower_bits,upper_value);\n    if (((result != 0) || (bit_set_result = get_highest_bit_set_08007092(input_param_1,input_param_2), bit_set_result == 0)) ||\n       (bit_set_result = get_highest_bit_set_08007092(input_param_3,input_param_4), bit_set_result == 0)) {\n      result = check_parameters_and_return_bool_080009a0(lower_bits,upper_value,0,0);\n      if (result == 0) {\n        return floating_point_value;\n      }\n      result = get_highest_bit_set_08007092(input_param_1,input_param_2);\n      if (result == 0) {\n        return floating_point_value;\n      }\n      result = get_highest_bit_set_08007092(input_param_3,input_param_4);\n      if (result == 0) {\n        return floating_point_value;\n      }\n      flag = 4;\n      message_ptr = &DAT_080073b1;\n      check_result = 0;\n      result_value._0_4_ = 0;\n      result_value._4_4_ = 0;\n      goto LAB_08005afa;\n    }\n    check_result = check_parameters_validity_08000a04(lower_bits,upper_value);\n    flag = DAT_20000224;\n    if (check_result != 0) {\n      message_ptr = &DAT_080073b1;\n      flag = 1;\n      check_result = result;\n      if (DAT_20000224 != '\\0') {\n        result_value = calculate_floating_point_value_08000724(0,0,0,0);\n        goto LAB_08005a32;\n      }\nLAB_08005a22:\n      message_ptr = &DAT_080073b1;\n      flag = 1;\n      result_value = 0;\n      goto LAB_08005978;\n    }\n    message_ptr = &DAT_080073b1;\n    flag = 3;\n    if (DAT_20000224 == '\\0') {\n      result_value._0_4_ = 0xe0000000;\n      result_value._4_4_ = 0x47efffff;\n      result = check_if_empty_string_080009b4(input_param_1,input_param_2,0,0);\n      if (result != 0) {\n        floating_point_value = calculate_result_080004d0(input_param_3,input_param_4,0,0x3fe00000);\n        updated_result = calculate_and_update_result_080070b0();\n        result = check_parameters_and_return_bool_080009a0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),(int)updated_result,\n                             (int)((ulonglong)updated_result >> 0x20));\n        if (result == 0) {\n          result_value._0_4_ = 0xe0000000;\n          result_value._4_4_ = 0xc7efffff;\n        }\n        goto LAB_08005afa;\n      }\nLAB_08005b98:\n      result = initialize_application_0800709e(&flag);\n      if (result != 0) goto LAB_080059d0;\n    }\n    else {\n      result_value._0_4_ = 0;\n      result_value._4_4_ = 0x7ff00000;\n      result = check_if_empty_string_080009b4(input_param_1,input_param_2,0,0);\n      if (result != 0) {\n        floating_point_value = calculate_result_080004d0(input_param_3,input_param_4,0,0x3fe00000);\n        updated_result = calculate_and_update_result_080070b0();\n        result = check_parameters_and_return_bool_080009a0((int)floating_point_value,(int)((ulonglong)floating_point_value >> 0x20),(int)updated_result,\n                             (int)((ulonglong)updated_result >> 0x20));\n        if (result == 0) {\n          result_value._0_4_ = 0;\n          result_value._4_4_ = 0xfff00000;\n        }\n      }\nLAB_08005afa:\n      if (DAT_20000224 != '\\x02') goto LAB_08005b98;\n    }\n    data_value_ptr = (undefined4 *)get_data_value_080072ac();\n    lower_bits = 0x22;\n  }\n  else {\n    result = check_parameters_and_return_bool_080009a0(input_param_3,input_param_4,0,0);\n    if (result == 0) {\n      return floating_point_value;\n    }\n    flag = 1;\n    message_ptr = &DAT_080073b1;\n    result_value = 0x3ff0000000000000;\n    check_result = 0;\n    if (flag == '\\x02') {\n      return 0x3ff0000000000000;\n    }\nLAB_08005978:\n    result = initialize_application_0800709e(&flag);\n    if (result != 0) goto LAB_080059d0;\nLAB_08005a34:\n    data_value_ptr = (undefined4 *)get_data_value_080072ac();\n    lower_bits = 0x21;\n  }\n  *data_value_ptr = lower_bits;\nLAB_080059d0:\n  if (check_result != 0) {\n    result_ptr = (int *)get_data_value_080072ac();\n    *result_ptr = check_result;\n  }\n  return result_value;\n}\n\n",
            "current_name": "calculate_result_and_update_08005900",
            "entrypoint": "0x08005900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005900": "calculate_result_and_update_08005900",
                "cVar1": "flag",
                "iVar2": "result",
                "iVar5": "bit_set_result",
                "local_30": "check_result",
                "local_38": "result_value",
                "local_40": "input_param_3_copy",
                "local_48": "input_param_1_copy",
                "local_4c": "message_ptr",
                "local_50": "flag",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "param_3": "input_param_3",
                "param_4": "input_param_4",
                "piVar3": "result_ptr",
                "puVar4": "data_value_ptr",
                "uStack_3c": "input4_copy",
                "uStack_44": "input2_copy",
                "uVar6": "upper_value",
                "uVar7": "lower_bits",
                "uVar8": "floating_point_value",
                "uVar9": "updated_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bc8": {
            "additional_data": {
                "FUN_08005bc8": {
                    "analyze_data": 1,
                    "check_and_initialize_application": 1,
                    "convert_floating_point_to_integer": 1,
                    "process_calculation": 2,
                    "process_data": 18,
                    "process_input": 2,
                    "validate_and_initialize": 2,
                    "validate_and_initialize_app": 1,
                    "validate_and_initialize_application": 2,
                    "validate_input_and_initialize": 1
                },
                "cVar1": {
                    "c_value": 1,
                    "char_value": 1,
                    "char_var": 1,
                    "character": 3,
                    "check_flag": 1,
                    "condition": 3,
                    "condition_check": 1,
                    "condition_flag": 1,
                    "data_character": 1,
                    "data_check": 1,
                    "data_flag": 1,
                    "data_type": 1,
                    "flag": 5,
                    "flag_value": 2
                },
                "calculate_floating_point_number_08006c0c": {
                    "calculate_floating_point_number": 1
                },
                "calculate_floating_point_value_08000724": {
                    "calculate_floating_point_value": 1
                },
                "check_if_empty_string_080009b4": {
                    "check_if_empty_string": 1
                },
                "check_parameters_validity_08000a04": {
                    "check_parameters_validity": 1
                },
                "get_data_value_080072ac": {
                    "get_data_value": 1
                },
                "iVar2": {
                    "check_result": 2,
                    "check_validity_result": 1,
                    "empty_string_check_result": 1,
                    "is_empty": 1,
                    "result": 2,
                    "string_check_result": 2,
                    "validity_check": 1
                },
                "initialize_application_0800709e": {
                    "initialize_application": 1
                },
                "local_30": {
                    "check_result": 1,
                    "empty_check": 1,
                    "empty_string_check": 2,
                    "empty_string_check_result": 1,
                    "error": 1,
                    "error_code": 1,
                    "is_valid": 1,
                    "param_validity": 1,
                    "parameter_check": 2,
                    "parameter_check_result": 2,
                    "parameter_validity": 1,
                    "validity": 1,
                    "validity_check": 6,
                    "validity_check_result": 10
                },
                "local_38": {
                    "float_value": 2,
                    "floating_point_value": 21,
                    "initial_value": 1,
                    "output": 1,
                    "result": 5,
                    "result_value": 1
                },
                "local_40": {
                    "copy_input_param_1": 1,
                    "current_input1": 1,
                    "final_param_1": 1,
                    "input1_copy2": 3,
                    "input1_copy_2": 1,
                    "input1_temp": 2,
                    "input_1": 1,
                    "input_1_copy2": 3,
                    "input_1_copy_again": 1,
                    "input_param_1_2": 1,
                    "input_param_1_copy": 1,
                    "input_param_1_copy_2": 2,
                    "input_param_copy2": 1,
                    "input_parameter_1_copy2": 1,
                    "param1_copy": 2,
                    "param1_copy2": 1,
                    "param_1": 1,
                    "param_1_copy3": 1,
                    "param_1_copy_2": 3,
                    "previous_input_param_1": 1,
                    "source_copy": 1,
                    "temp_3": 1
                },
                "local_48": {
                    "copy_input_param_1": 1,
                    "input1_copy": 6,
                    "input_1_copy": 4,
                    "input_param_1": 1,
                    "input_param_1_1": 1,
                    "input_param_1_copy": 4,
                    "input_param_copy": 1,
                    "input_parameter_1_copy": 1,
                    "param1": 2,
                    "param1_copy": 1,
                    "param_1": 1,
                    "param_1_copy": 4,
                    "source": 1,
                    "temp_1": 1,
                    "temp_input1": 1,
                    "temp_param_1": 1
                },
                "local_4c": {
                    "constant_ptr": 1,
                    "data_pointer": 1,
                    "error_message": 4,
                    "message": 13,
                    "some_data": 1,
                    "string": 1,
                    "string_check": 1,
                    "string_constant": 1,
                    "string_data": 2,
                    "string_msg": 1,
                    "string_pointer": 1,
                    "string_ptr": 2,
                    "string_value": 2
                },
                "local_50": {
                    "flag": 20,
                    "is_valid": 2,
                    "is_valid_parameters": 1,
                    "is_valid_params": 1,
                    "option": 1,
                    "param_valid": 1,
                    "status": 2,
                    "success_flag": 1,
                    "validity_check": 2
                },
                "param_1": {
                    "input1": 7,
                    "input_1": 5,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_param_1": 11,
                    "input_parameter_1": 2,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "parameter1": 1,
                    "source_value": 1
                },
                "param_2": {
                    "destination_value": 1,
                    "input2": 7,
                    "input_2": 5,
                    "input_param2": 1,
                    "input_param_2": 11,
                    "input_parameter_2": 2,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "output_param": 1,
                    "parameter2": 1
                },
                "piVar3": {
                    "data_pointer": 1,
                    "data_value": 3,
                    "data_value_1": 1,
                    "data_value_integer": 1,
                    "data_value_ptr": 4
                },
                "puVar4": {
                    "data_ptr": 2,
                    "data_value": 1,
                    "data_value_pointer": 2,
                    "data_value_ptr": 2,
                    "data_value_ptr2": 1,
                    "value_pointer": 1
                },
                "time_4": {
                    "param_2_copy": 1
                },
                "uStack_3c": {
                    "copy_input_param_2": 1,
                    "current_input2": 1,
                    "destination_copy": 1,
                    "final_param_2": 1,
                    "input2_copy2": 3,
                    "input2_copy_2": 1,
                    "input2_temp": 2,
                    "input_2": 1,
                    "input_2_copy2": 3,
                    "input_2_copy_again": 1,
                    "input_param_2_2": 1,
                    "input_param_2_copy": 1,
                    "input_param_2_copy_2": 2,
                    "input_parameter_2_copy2": 1,
                    "output_param_copy2": 1,
                    "param2_copy": 2,
                    "param2_copy2": 1,
                    "param_2": 1,
                    "param_2_copy2": 1,
                    "param_2_copy_2": 3,
                    "previous_input_param_2": 1,
                    "temp_4": 1
                },
                "uStack_44": {
                    "copy_input_param_2": 1,
                    "destination": 1,
                    "input2_copy": 6,
                    "input_2_copy": 4,
                    "input_param_2": 1,
                    "input_param_2_1": 1,
                    "input_param_2_copy": 4,
                    "input_parameter_2_copy": 1,
                    "output_param_copy": 1,
                    "param2": 2,
                    "param2_copy": 1,
                    "param_1_copy2": 1,
                    "param_2": 1,
                    "param_2_copy": 3,
                    "temp_2": 1,
                    "temp_input2": 1,
                    "temp_param_2": 1
                },
                "uVar5": {
                    "floating_point_number": 8,
                    "floating_point_result": 3,
                    "result": 18,
                    "result_value": 1
                }
            },
            "called": [
                "FUN_08006c0c",
                "FUN_0800709e",
                "FUN_08000724",
                "FUN_080009b4",
                "FUN_080072ac",
                "FUN_08000a04"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nundefined8 process_data_08005bc8(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  char flag;\n  int result;\n  int *data_value_ptr;\n  undefined4 *data_value_pointer;\n  undefined8 result;\n  undefined4 flag;\n  undefined *message;\n  undefined4 input1_copy;\n  undefined4 input2_copy;\n  undefined4 param_1_copy_2;\n  undefined4 param_2_copy_2;\n  undefined8 floating_point_value;\n  int validity_check_result;\n  \n  result = calculate_floating_point_number();\n  flag = DAT_20000224;\n  if (DAT_20000224 == -1) {\n    return result;\n  }\n  validity_check_result = check_parameters_validity(input_param_1,input_param_2,input_param_1,input_param_2);\n  if (validity_check_result != 0) {\n    return result;\n  }\n  result = check_if_empty_string(input_param_1,input_param_2,0,0);\n  if (result == 0) {\n    return result;\n  }\n  flag = 1;\n  message = &DAT_080073b5;\n  input1_copy = input_param_1;\n  input2_copy = input_param_2;\n  param_1_copy_2 = input_param_1;\n  param_2_copy_2 = input_param_2;\n  if (flag == '\\0') {\n    floating_point_value = 0;\nLAB_08005c26:\n    result = initialize_application(&flag);\n    if (result != 0) goto LAB_08005c2e;\n  }\n  else {\n    floating_point_value = calculate_floating_point_value(0,0,0,0);\n    if (flag != '\\x02') goto LAB_08005c26;\n  }\n  data_value_pointer = (undefined4 *)get_data_value();\n  *data_value_pointer = 0x21;\nLAB_08005c2e:\n  if (validity_check_result != 0) {\n    data_value_ptr = (int *)get_data_value();\n    *data_value_ptr = validity_check_result;\n  }\n  return floating_point_value;\n}\n\n",
            "current_name": "process_data_08005bc8",
            "entrypoint": "0x08005bc8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bc8": "process_data_08005bc8",
                "cVar1": "flag",
                "calculate_floating_point_number_08006c0c": "calculate_floating_point_number",
                "calculate_floating_point_value_08000724": "calculate_floating_point_value",
                "check_if_empty_string_080009b4": "check_if_empty_string",
                "check_parameters_validity_08000a04": "check_parameters_validity",
                "get_data_value_080072ac": "get_data_value",
                "iVar2": "result",
                "initialize_application_0800709e": "initialize_application",
                "local_30": "validity_check_result",
                "local_38": "floating_point_value",
                "local_40": "param_1_copy_2",
                "local_48": "input1_copy",
                "local_4c": "message",
                "local_50": "flag",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "piVar3": "data_value_ptr",
                "puVar4": "data_value_pointer",
                "uStack_3c": "param_2_copy_2",
                "uStack_44": "input2_copy",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c70": {
            "additional_data": {
                "FUNC_0800708c": {
                    "calculate_result_5": 1,
                    "calculate_value": 1,
                    "custom_function": 1,
                    "func_708c": 1
                },
                "FUN_08005c70": {
                    "calculate_floating_point": 1,
                    "calculate_floating_point_result": 1,
                    "calculate_floating_point_value": 10,
                    "calculate_improved_result": 2,
                    "calculate_improved_value": 1,
                    "calculate_result": 13,
                    "calculate_value": 2
                },
                "LAB_08005cba": {
                    "end_label": 1,
                    "exit_label": 1
                },
                "calculate_floating_point_number_08006c0c": {
                    "calculate_floating_point_number": 1,
                    "calculate_floating_point_number_6c0c": 1,
                    "calculate_result_6": 1,
                    "floating_point_number": 1
                },
                "calculate_floating_point_value_08000724": {
                    "calculate_floating_point_value": 1,
                    "calculate_floating_point_value_724": 1,
                    "calculate_result_4": 2
                },
                "calculate_result_0800016c": {
                    "calculate_result2": 1,
                    "calculate_result_16c": 1,
                    "calculate_result_2": 2
                },
                "calculate_result_080004d0": {
                    "calculate_result": 1,
                    "calculate_result_1": 2,
                    "calculate_result_d0": 1
                },
                "calculate_unsigned_binary_result_08000168": {
                    "calculate_result_3": 2,
                    "calculate_unsigned_binary_result": 1,
                    "calculate_unsigned_binary_result_168": 1
                },
                "check_if_string_is_empty_080009f0": {
                    "check_if_string_is_empty": 2,
                    "check_if_string_is_empty_9f0": 1,
                    "is_string_empty": 1
                },
                "iVar1": {
                    "check_result": 5,
                    "empty_string_check": 1,
                    "is_empty": 10,
                    "is_empty_string": 1,
                    "is_string_empty": 1,
                    "result": 3,
                    "result1": 1,
                    "string_check": 2,
                    "string_check_result": 2,
                    "string_empty_check": 2,
                    "string_is_empty": 1,
                    "temp_5": 1
                },
                "param_1": {
                    "input1": 7,
                    "input_1": 15,
                    "input_a": 1,
                    "input_param1": 1,
                    "input_param_1": 2,
                    "input_parameter_1": 1,
                    "input_value1": 3,
                    "x": 1
                },
                "param_2": {
                    "input2": 7,
                    "input_2": 15,
                    "input_b": 1,
                    "input_param2": 1,
                    "input_param_2": 2,
                    "input_parameter_2": 1,
                    "input_value2": 3,
                    "y": 1
                },
                "uVar1": {
                    "combined_inputs": 1,
                    "result": 3,
                    "result1": 2,
                    "result_1": 4,
                    "temp": 1,
                    "temp_1": 1,
                    "temp_var1": 2,
                    "temp_var_1": 1
                },
                "uVar10": {
                    "calc_result_2": 1,
                    "calculation": 1,
                    "intermediate_result1": 1,
                    "intermediate_result_1": 1,
                    "result2": 2,
                    "result_2": 3,
                    "result_high": 1,
                    "result_lower32": 1,
                    "result_var_2": 1,
                    "temp3": 1,
                    "temp7": 2,
                    "temp8": 1,
                    "temp_3": 3,
                    "temp_4": 1,
                    "temp_7": 1,
                    "temp_result": 3,
                    "temp_result1": 5,
                    "temp_result_1": 2
                },
                "uVar11": {
                    "calc_result_3": 1,
                    "calculation2": 1,
                    "intermediate_result2": 1,
                    "intermediate_result_2": 1,
                    "output2": 1,
                    "result3": 2,
                    "result_3": 3,
                    "result_var_3": 1,
                    "temp3_upper32": 1,
                    "temp4": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_4": 3,
                    "temp_5": 1,
                    "temp_8": 1,
                    "temp_result": 1,
                    "temp_result2": 7,
                    "temp_result_2": 3
                },
                "uVar12": {
                    "temp_result3": 1
                },
                "uVar13": {
                    "temp_result4": 1
                },
                "uVar14": {
                    "temp_result5": 1
                },
                "uVar15": {
                    "temp_result6": 1
                },
                "uVar16": {
                    "temp_result7": 1
                },
                "uVar17": {
                    "temp_result8": 1
                },
                "uVar2": {
                    "result1": 1,
                    "result1_upper32": 1,
                    "result2": 2,
                    "result_1": 3,
                    "result_2": 4,
                    "result_high_1": 1,
                    "temp1": 9,
                    "temp_1": 4,
                    "temp_2": 1,
                    "temp_value_1": 1,
                    "temp_var2": 2,
                    "temp_var_1": 1,
                    "temp_var_2": 1
                },
                "uVar3": {
                    "result1_lower32": 1,
                    "result2": 1,
                    "result3": 2,
                    "result_2": 3,
                    "result_3": 4,
                    "result_high_2": 1,
                    "temp2": 9,
                    "temp_2": 4,
                    "temp_3": 1,
                    "temp_value_2": 1,
                    "temp_var3": 2,
                    "temp_var_2": 1,
                    "temp_var_3": 1
                },
                "uVar4": {
                    "constant_1": 1,
                    "result2_upper32": 1,
                    "result3": 1,
                    "result4": 2,
                    "result_3": 2,
                    "result_4": 4,
                    "result_high_3": 1,
                    "temp3": 9,
                    "temp_3": 4,
                    "temp_4": 1,
                    "temp_value_3": 1,
                    "temp_var4": 2,
                    "temp_var_3": 1,
                    "temp_var_4": 1
                },
                "uVar5": {
                    "constant_2": 1,
                    "result2_lower32": 1,
                    "result4": 1,
                    "result5": 2,
                    "result_4": 2,
                    "result_5": 4,
                    "result_high_4": 1,
                    "temp4": 9,
                    "temp_4": 4,
                    "temp_5": 1,
                    "temp_value_4": 1,
                    "temp_var5": 2,
                    "temp_var_4": 1,
                    "temp_var_5": 1
                },
                "uVar6": {
                    "result6": 2,
                    "result_6": 4,
                    "result_low_1": 1,
                    "temp1": 1,
                    "temp1_upper32": 1,
                    "temp5": 8,
                    "temp_1": 3,
                    "temp_5": 4,
                    "temp_6": 1,
                    "temp_value_5": 1,
                    "temp_var6": 2,
                    "temp_var_5": 1,
                    "temp_var_6": 1,
                    "u_var1_low": 1
                },
                "uVar7": {
                    "result7": 2,
                    "result_7": 4,
                    "result_low_2": 1,
                    "temp1_lower32": 1,
                    "temp2": 1,
                    "temp6": 8,
                    "temp_2": 3,
                    "temp_6": 4,
                    "temp_7": 1,
                    "temp_value_6": 1,
                    "temp_var7": 2,
                    "temp_var_6": 1,
                    "temp_var_7": 1,
                    "u_var1_high": 1
                },
                "uVar8": {
                    "abs_input2": 2,
                    "abs_input_2": 4,
                    "input_2_masked": 1,
                    "input_2_modified": 1,
                    "mask": 1,
                    "masked_input_2": 1,
                    "modified_param_2": 1,
                    "normalized_input2": 1,
                    "param2_masked": 1,
                    "param2_modified": 1,
                    "positive_value": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp7": 1,
                    "temp_1": 3,
                    "temp_3": 2,
                    "temp_8": 1,
                    "temp_var8": 1,
                    "temp_var_8": 1,
                    "u_var2_low": 1,
                    "u_var8": 2,
                    "u_var8_modified": 1,
                    "unsigned_y": 1
                },
                "uVar9": {
                    "calc_result_1": 1,
                    "final_result": 6,
                    "intermediate_result": 1,
                    "output1": 1,
                    "result": 10,
                    "result1": 2,
                    "result_1": 3,
                    "result_low": 1,
                    "result_upper32": 1,
                    "result_var_1": 1,
                    "temp2": 1,
                    "temp_2": 3
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08006c0c",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_08000724",
                "FUN_0800708c"
            ],
            "calling": [
                "FUN_08005854"
            ],
            "code": "\nundefined8 calculate_improved_result_08005c70(uint input_1,uint input_2)\n\n{\n  int is_empty;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  undefined4 temp4;\n  undefined4 temp5;\n  undefined4 temp6;\n  uint abs_input_2;\n  undefined8 result;\n  undefined8 temp_result1;\n  undefined8 temp_result2;\n  \n  result = CONCAT44(input_2,input_1);\n  abs_input_2 = input_2 & 0x7fffffff;\n  if (abs_input_2 < 0x3ff00000) {\n    if (abs_input_2 < 0x3fe00000) {\n      if (0x3e3fffff < abs_input_2) {\n        temp_result1 = calculate_result_1(input_1,input_2,input_1,input_2);\n        temp6 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n        temp5 = (undefined4)temp_result1;\n        temp_result1 = calculate_result_1(temp5,temp6,0xdfdf709,0x3f023de1);\n        temp_result1 = calculate_result_2((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x7501b288,0x3f49efe0);\n        temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_result_3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xb5688f3b,0x3fa48228);\n        temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_result_2((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0xe884455,0x3fc9c155);\n        temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_result_3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x3eb6f7d,0x3fd4d612);\n        temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result1 = calculate_result_2((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x55555555,0x3fc55555);\n        temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_result_1(temp5,temp6,0xb12e9282,0x3fb3b8c5);\n        temp_result2 = calculate_result_3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1b8d0159,0x3fe6066c);\n        temp_result2 = calculate_result_1((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_result_2((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x9c598ac8,0x40002ae5);\n        temp_result2 = calculate_result_1((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_result_3((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0x1c8a2d4b,0x40033a27);\n        temp_result2 = calculate_result_1((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),temp5,temp6);\n        temp_result2 = calculate_result_2((int)temp_result2,(int)((ulonglong)temp_result2 >> 0x20),0,0x3ff00000);\n        temp_result1 = calculate_result_4((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                              (int)((ulonglong)temp_result2 >> 0x20));\n        temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),input_1,input_2);\n        goto exit_label;\n      }\n      temp_result1 = calculate_result_2(input_1,input_2,0x8800759c,0x7e37e43c);\n      is_empty = check_if_string_is_empty((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n      if (is_empty != 0) {\n        return result;\n      }\n    }\n    result = FUNC_0800708c(input_1,input_2);\n    result = calculate_result_3(0,0x3ff00000,(int)result,(int)((ulonglong)result >> 0x20));\n    result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),0,0x3fe00000);\n    temp1 = (undefined4)((ulonglong)result >> 0x20);\n    temp5 = (undefined4)result;\n    result = calculate_result_1(temp5,temp1,0xdfdf709,0x3f023de1);\n    result = calculate_result_2((int)result,(int)((ulonglong)result >> 0x20),0x7501b288,0x3f49efe0);\n    result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = calculate_result_3((int)result,(int)((ulonglong)result >> 0x20),0xb5688f3b,0x3fa48228);\n    result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = calculate_result_2((int)result,(int)((ulonglong)result >> 0x20),0xe884455,0x3fc9c155);\n    result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = calculate_result_3((int)result,(int)((ulonglong)result >> 0x20),0x3eb6f7d,0x3fd4d612);\n    result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    result = calculate_result_2((int)result,(int)((ulonglong)result >> 0x20),0x55555555,0x3fc55555);\n    result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),temp5,temp1);\n    temp2 = (undefined4)((ulonglong)result >> 0x20);\n    temp_result1 = calculate_result_1(temp5,temp1,0xb12e9282,0x3fb3b8c5);\n    temp_result1 = calculate_result_3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x1b8d0159,0x3fe6066c);\n    temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = calculate_result_2((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x9c598ac8,0x40002ae5);\n    temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = calculate_result_3((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0x1c8a2d4b,0x40033a27);\n    temp_result1 = calculate_result_1((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),temp5,temp1);\n    temp_result1 = calculate_result_2((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),0,0x3ff00000);\n    temp3 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n    temp_result2 = calculate_floating_point_number(temp5,temp1);\n    temp4 = (undefined4)((ulonglong)temp_result2 >> 0x20);\n    temp6 = (undefined4)temp_result2;\n    if (abs_input_2 < 0x3fef3333) {\n      result = calculate_result_4((int)result,temp2,(int)temp_result1,temp3);\n      temp_result1 = calculate_result_2(temp6,temp4,temp6,temp4);\n      result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp_result1 = calculate_result_1(0,temp4,0,temp4);\n      temp_result1 = calculate_result_3(temp5,temp1,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      temp_result2 = calculate_result_2(temp6,temp4,0,temp4);\n      temp_result1 = calculate_result_4((int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20),(int)temp_result2,\n                            (int)((ulonglong)temp_result2 >> 0x20));\n      temp5 = (undefined4)((ulonglong)temp_result1 >> 0x20);\n      temp_result1 = calculate_result_2((int)temp_result1,temp5,(int)temp_result1,temp5);\n      temp_result1 = calculate_result_3(0x33145c07,0x3c91a626,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      result = calculate_result_3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp_result1 = calculate_result_2(0,temp4,0,temp4);\n      temp_result1 = calculate_result_3(0x54442d18,0x3fe921fb,(int)temp_result1,(int)((ulonglong)temp_result1 >> 0x20));\n      result = calculate_result_3((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                           (int)((ulonglong)temp_result1 >> 0x20));\n      temp5 = 0x3fe921fb;\n    }\n    else {\n      result = calculate_result_4((int)result,temp2,(int)temp_result1,temp3);\n      result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),temp6,temp4);\n      result = calculate_result_2((int)result,(int)((ulonglong)result >> 0x20),temp6,temp4);\n      temp5 = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_result_2((int)result,temp5,(int)result,temp5);\n      result = calculate_result_3((int)result,(int)((ulonglong)result >> 0x20),0x33145c07,0x3c91a626);\n      temp5 = 0x3ff921fb;\n    }\n    result = calculate_result_3(0x54442d18,temp5,(int)result,(int)((ulonglong)result >> 0x20));\n    if ((int)input_2 < 1) {\n      result = CONCAT44((int)((ulonglong)result >> 0x20) + -0x80000000,(int)result);\n    }\n  }\n  else {\n    if ((abs_input_2 + 0xc0100000 | input_1) != 0) {\n      result = calculate_result_3(input_1,input_2,input_1,input_2);\n      temp5 = (undefined4)((ulonglong)result >> 0x20);\n      result = calculate_result_4((int)result,temp5,(int)result,temp5);\n      return result;\n    }\n    result = calculate_result_1(input_1,input_2,0x54442d18,0x3ff921fb);\n    temp_result1 = calculate_result_1(input_1,input_2,0x33145c07,0x3c91a626);\nexit_label:\n    result = calculate_result_2((int)result,(int)((ulonglong)result >> 0x20),(int)temp_result1,\n                         (int)((ulonglong)temp_result1 >> 0x20));\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_improved_result_08005c70",
            "entrypoint": "0x08005c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c70": "calculate_improved_result_08005c70",
                "LAB_08005cba": "exit_label",
                "calculate_floating_point_number_08006c0c": "calculate_floating_point_number",
                "calculate_floating_point_value_08000724": "calculate_result_4",
                "calculate_result_0800016c": "calculate_result_2",
                "calculate_result_080004d0": "calculate_result_1",
                "calculate_unsigned_binary_result_08000168": "calculate_result_3",
                "check_if_string_is_empty_080009f0": "check_if_string_is_empty",
                "iVar1": "is_empty",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "result_1",
                "uVar10": "temp_result1",
                "uVar11": "temp_result2",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "temp3",
                "uVar5": "temp4",
                "uVar6": "temp5",
                "uVar7": "temp6",
                "uVar8": "abs_input_2",
                "uVar9": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006070": {
            "additional_data": {
                "FUNC_0800708c": {
                    "perform_operation": 1
                },
                "FUN_08006070": {
                    "calculate": 1,
                    "calculate_floating_point": 2,
                    "calculate_floating_point_value": 2,
                    "calculate_improved_result": 1,
                    "calculate_improved_value": 1,
                    "calculate_result": 24
                },
                "calculate_floating_point_value_08000724": {
                    "calculate_floating_point_value": 1
                },
                "calculate_improved_result_08006d68": {
                    "calculate_improved_result": 1
                },
                "calculate_result_0800016c": {
                    "calculate_result": 1
                },
                "calculate_unsigned_binary_result_08000168": {
                    "calculate_unsigned_binary_result": 1
                },
                "iVar4": {
                    "diff": 1,
                    "difference": 9,
                    "integer_var_4": 1,
                    "result4": 10,
                    "result_4": 4,
                    "temp2": 2,
                    "temp4": 1,
                    "temp_4": 2,
                    "temp_var4": 1
                },
                "param_1": {
                    "first_parameter": 1,
                    "input1": 13,
                    "input_1": 11,
                    "input_param_1": 3,
                    "num1": 1,
                    "parameter_1": 1,
                    "x1": 1
                },
                "param_2": {
                    "input2": 13,
                    "input_2": 11,
                    "input_param_2": 3,
                    "num2": 1,
                    "parameter_2": 1,
                    "second_parameter": 1,
                    "x2": 1
                },
                "param_3": {
                    "input3": 13,
                    "input_3": 11,
                    "input_param_3": 3,
                    "num3": 1,
                    "parameter_3": 1,
                    "third_parameter": 1,
                    "x3": 1
                },
                "param_4": {
                    "fourth_parameter": 1,
                    "input4": 13,
                    "input_4": 11,
                    "input_param_4": 3,
                    "num4": 1,
                    "parameter_4": 1,
                    "x4": 1
                },
                "uVar1": {
                    "lower_part": 1,
                    "result": 2,
                    "result1": 11,
                    "result_1": 4,
                    "result_low": 3,
                    "result_lower": 1,
                    "result_part1": 1,
                    "result_part_1": 1,
                    "temp1": 1,
                    "temp_1": 2,
                    "temp_var1": 1,
                    "unsigned_var_1": 1
                },
                "uVar2": {
                    "bitwise_result": 1,
                    "condition_check": 1,
                    "flag": 4,
                    "result2": 10,
                    "result_2": 4,
                    "shifted_input": 2,
                    "shifted_param": 1,
                    "shifted_param_2": 1,
                    "shifted_value": 1,
                    "temp2": 1,
                    "temp_2": 2,
                    "temp_var2": 1,
                    "u_var2": 1,
                    "unsigned_var_2": 1
                },
                "uVar3": {
                    "abs_input2": 1,
                    "abs_input_2": 1,
                    "abs_x2": 1,
                    "masked_input_2": 1,
                    "masked_param_2": 1,
                    "modified_input_2": 1,
                    "normalized_param_2": 1,
                    "positive_input2": 1,
                    "result3": 10,
                    "result_3": 4,
                    "result_part2": 1,
                    "temp1": 2,
                    "temp3": 1,
                    "temp_3": 2,
                    "temp_var3": 1,
                    "u_var3": 1,
                    "unsigned_var_3": 1
                },
                "uVar5": {
                    "abs_input4": 1,
                    "abs_input_4": 1,
                    "abs_x4": 1,
                    "masked_input_4": 1,
                    "masked_param_4": 1,
                    "modified_input_4": 1,
                    "normalized_param_4": 1,
                    "positive_input4": 1,
                    "positive_param4": 1,
                    "result5": 10,
                    "result_5": 4,
                    "temp3": 2,
                    "temp5": 1,
                    "temp_5": 2,
                    "temp_var5": 1,
                    "u_var5": 1,
                    "unsigned_var_5": 1
                },
                "uVar6": {
                    "calculated_result": 1,
                    "final_result": 10,
                    "output": 4,
                    "result": 11,
                    "result2": 1,
                    "result_1": 1,
                    "result_6": 1,
                    "unsigned_var_6": 1
                },
                "uVar7": {
                    "binary_result": 12,
                    "helper_result": 1,
                    "output2": 2,
                    "result3": 1,
                    "result_2": 1,
                    "result_6": 1,
                    "result_7": 1,
                    "secondary_result": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "u_var7": 1,
                    "unsigned_binary_result": 1,
                    "unsigned_result": 5,
                    "unsigned_var_7": 1
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_0800016c",
                "FUN_08000724",
                "FUN_0800708c",
                "FUN_08006d68"
            ],
            "calling": [
                "thunk_FUN_08006070"
            ],
            "code": "\nundefined8 calculate_improved_result_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result3;\n  int result4;\n  uint result5;\n  undefined8 result;\n  undefined8 binary_result;\n  \n  result5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result5 | (-input3 | input3) >> 0x1f)) ||\n     (result3 = input2 & 0x7fffffff, 0x7ff00000 < (result3 | (-input1 | input1) >> 0x1f))) {\n    result = calculate_result(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = calculate_improved_result_08006070();\n    return result;\n  }\n  result2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | result3) == 0) {\n    if (result2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | result5) != 0) {\n      if (result5 == 0x7ff00000) {\n        if (result3 == 0x7ff00000) {\n          if (result2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result2 != 3) {\n          if (result2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result3 != 0x7ff00000) {\n        result4 = (int)(result3 - result5) >> 0x14;\n        if (result4 < 0x3d) {\n          if (((int)input4 < 0) && (result4 + 0x3c < 0 != SCARRY4(result4,0x3c))) {\n            result = 0;\n          }\n          else {\n            calculate_floating_point_value(input1,input2);\n            FUNC_0800708c();\n            result = calculate_improved_result_08006070();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        result4 = (int)((ulonglong)result >> 0x20);\n        result1 = (undefined4)result;\n        if (result2 == 1) {\n          return CONCAT44(result4 + -0x80000000,result1);\n        }\n        if (result2 == 2) {\n          binary_result = calculate_unsigned_binary_result(result1,result4,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (result2 == 0) {\n            return result;\n          }\n          result = calculate_unsigned_binary_result(result1,result4,0x33145c07,0x3ca1a626);\n          binary_result = 0x400921fb54442d18;\n        }\n        result = calculate_unsigned_binary_result((int)result,(int)((ulonglong)result >> 0x20),(int)binary_result,\n                             (int)((ulonglong)binary_result >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_improved_result_08006070",
            "entrypoint": "0x08006070",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006070": "calculate_improved_result_08006070",
                "calculate_floating_point_value_08000724": "calculate_floating_point_value",
                "calculate_improved_result_08006d68": "calculate_improved_result",
                "calculate_result_0800016c": "calculate_result",
                "calculate_unsigned_binary_result_08000168": "calculate_unsigned_binary_result",
                "iVar4": "result4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar5": "result5",
                "uVar6": "result",
                "uVar7": "binary_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006228": {
            "additional_data": {
                "FUN_08006228": {
                    "calculate_floating_point": 2,
                    "calculate_floating_point_number": 6,
                    "calculate_floating_point_result": 2,
                    "calculate_floating_point_value": 19,
                    "calculate_floating_point_value_08006228": 1,
                    "convert_floating_point_to_unsigned": 1
                },
                "extraout_r1": {
                    "extra_output_1": 1,
                    "extra_output_value": 1,
                    "extra_result": 1,
                    "extra_result_1": 1,
                    "result3": 3,
                    "result_3": 3,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp_extraout_r1": 1,
                    "temp_result": 1
                },
                "extraout_r1_00": {
                    "extra_output_2": 1,
                    "extra_output_value1": 1,
                    "extra_result_4": 1,
                    "extra_temp": 1,
                    "result6": 3,
                    "result_6": 3,
                    "temp1": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_extraout_r1_00": 1,
                    "temp_result4": 1
                },
                "extraout_r1_01": {
                    "extra_output_3": 1,
                    "extra_output_value2": 1,
                    "extra_result_5": 1,
                    "extra_temp_1": 1,
                    "result7": 3,
                    "result_7": 3,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_extraout_r1_01": 1,
                    "temp_result15": 1,
                    "temp_result5": 1
                },
                "extraout_r1_02": {
                    "extra_output_4": 1,
                    "extra_output_value3": 1,
                    "extra_result_6": 1,
                    "extra_temp_2": 1,
                    "result8": 3,
                    "result_8": 3,
                    "shifted_bits": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_extraout_r1_02": 1,
                    "temp_result6": 1
                },
                "extraout_r1_03": {
                    "extra_output_5": 1,
                    "extra_output_value4": 1,
                    "extra_result_7": 1,
                    "extra_temp_3": 1,
                    "result9": 3,
                    "result_9": 3,
                    "temp4": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_extraout_r1_03": 1,
                    "temp_result16": 1,
                    "temp_result7": 1
                },
                "iVar10": {
                    "count3": 1,
                    "index": 1,
                    "index_shifted": 1,
                    "integer_value_3": 1,
                    "integer_variable3": 1,
                    "just_offset": 1,
                    "local_var_3": 1,
                    "loop_variable_3": 1,
                    "power2_shifted_mantissa": 1,
                    "result_15": 1,
                    "temp10": 1,
                    "temp14": 1,
                    "temp6": 3,
                    "temp7": 1,
                    "temp_4": 1,
                    "temp_i_var10": 1,
                    "temp_index": 1,
                    "temp_int3": 1,
                    "temp_shift": 1,
                    "temp_var_4": 1,
                    "variable_6": 1
                },
                "iVar5": {
                    "count1": 2,
                    "exponent_diff": 1,
                    "index1": 1,
                    "integer_value_1": 1,
                    "integer_variable1": 1,
                    "local_var_1": 1,
                    "loop_variable_1": 1,
                    "result_10": 1,
                    "shift": 2,
                    "shift_amount": 2,
                    "shift_flag": 1,
                    "temp1": 4,
                    "temp5": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_1": 1,
                    "temp_i_var5": 1,
                    "temp_int1": 1,
                    "temp_var_1": 1,
                    "variable_1": 1
                },
                "iVar6": {
                    "approx_power": 1,
                    "clamp_shift": 1,
                    "count2": 2,
                    "index": 3,
                    "index2": 1,
                    "integer_value_2": 1,
                    "integer_variable2": 1,
                    "iteration": 1,
                    "local_var_2": 1,
                    "loop_variable_2": 1,
                    "result_11": 1,
                    "temp10": 1,
                    "temp2": 4,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_2": 1,
                    "temp_i_var6": 1,
                    "temp_int2": 1,
                    "temp_var_2": 1,
                    "variable_2": 1
                },
                "lVar18": {
                    "l_var18": 2,
                    "local_result_5": 1,
                    "long_long_value": 1,
                    "long_variable": 1,
                    "result10": 1,
                    "result13": 1,
                    "result17": 1,
                    "result18": 1,
                    "result64": 1,
                    "result_long": 1,
                    "temp10": 1,
                    "temp14": 3,
                    "temp18": 1,
                    "temp21": 1,
                    "temp_5": 1,
                    "temp_l_var18": 1,
                    "temp_result": 1,
                    "temp_result11": 1,
                    "temp_result16": 1,
                    "temp_result7": 1,
                    "temp_result_9": 1,
                    "temp_result_long_shift": 1,
                    "temp_var4_64": 1,
                    "unsigned_binary_result_long": 1,
                    "variable_14": 1
                },
                "lVar21": {
                    "temp17": 1
                },
                "local_54": {
                    "condition4": 1,
                    "count4": 1,
                    "exponent_shift": 1,
                    "flag4": 1,
                    "integer_value_4": 1,
                    "local_54": 2,
                    "local_result_4": 1,
                    "local_shift_amount": 1,
                    "local_value4": 1,
                    "local_var4": 1,
                    "local_var_1": 1,
                    "local_variable4": 1,
                    "local_variable_4": 1,
                    "power_offset": 1,
                    "res4": 1,
                    "result19": 1,
                    "result54": 1,
                    "result8": 1,
                    "shift2": 1,
                    "shift_count": 1,
                    "shift_value": 2,
                    "temp4": 1,
                    "temp54": 1,
                    "temp_9": 1,
                    "temp_int4": 1,
                    "temp_local_54": 1,
                    "var3": 1,
                    "variable_17": 1
                },
                "local_64": {
                    "condition3": 1,
                    "flag3": 1,
                    "local_result_2": 1,
                    "local_result_3": 1,
                    "local_value3": 1,
                    "local_var3": 1,
                    "local_var_2": 1,
                    "local_variable3": 1,
                    "local_variable_3": 1,
                    "mantissa_bits_result": 1,
                    "new_exponent_bits_high": 1,
                    "new_fraction_bits": 1,
                    "res3": 1,
                    "result12": 1,
                    "result18": 1,
                    "result64": 1,
                    "result7": 1,
                    "result_12": 1,
                    "result_high_value": 1,
                    "result_lower_half": 1,
                    "temp3": 1,
                    "temp64": 1,
                    "temp8": 2,
                    "temp_8": 1,
                    "temp_local_64": 1,
                    "temp_result20": 1,
                    "temp_result_low_unsigned": 1,
                    "temp_result_significand2": 1,
                    "temp_var3": 1,
                    "var2": 1
                },
                "local_68": {
                    "condition2": 1,
                    "exponent_bits_result": 1,
                    "exponent_unsigned_value": 1,
                    "flag2": 1,
                    "local_result_1": 1,
                    "local_result_2": 1,
                    "local_value2": 1,
                    "local_var2": 1,
                    "local_var_3": 1,
                    "local_variable2": 1,
                    "local_variable_2": 1,
                    "new_exponent_bits": 2,
                    "res2": 1,
                    "result11": 1,
                    "result17": 1,
                    "result6": 1,
                    "result68": 1,
                    "result_11": 1,
                    "result_upper_half": 1,
                    "sign_bit_abs_result": 1,
                    "temp2": 1,
                    "temp68": 1,
                    "temp7": 1,
                    "temp_7": 1,
                    "temp_local_68": 1,
                    "temp_result19": 1,
                    "temp_result_exponent2": 1,
                    "temp_result_high_unsigned": 1,
                    "temp_var2": 1,
                    "var1": 1
                },
                "local_70": {
                    "comparison_result": 1,
                    "condition1": 1,
                    "flag": 1,
                    "flag1": 2,
                    "is_zero": 1,
                    "local_result": 1,
                    "local_result_1": 1,
                    "local_value1": 1,
                    "local_var1": 1,
                    "local_var_4": 1,
                    "local_variable1": 1,
                    "local_variable_1": 1,
                    "res1": 1,
                    "result": 4,
                    "result16": 1,
                    "result5": 1,
                    "result70": 1,
                    "result_10": 1,
                    "result_bits": 1,
                    "result_sign": 1,
                    "result_type": 1,
                    "sign_bit_value": 1,
                    "temp1": 1,
                    "temp_6": 1,
                    "temp_result14": 1,
                    "temporary_result": 1,
                    "zero_case_result_shifted": 1
                },
                "param_1": {
                    "exponent": 5,
                    "exponent_bits": 3,
                    "first_part_of_param": 1,
                    "input1": 5,
                    "input_1": 1,
                    "input_mask": 1,
                    "input_param_1": 1,
                    "mantissa": 2,
                    "mantissa1": 1,
                    "num1": 1,
                    "number1": 1,
                    "sign_bit": 1,
                    "sign_parameter": 1,
                    "value": 1,
                    "value1": 4,
                    "value_1": 1,
                    "value_a": 1
                },
                "param_2": {
                    "combined_bits": 1,
                    "combined_params": 2,
                    "exponent": 4,
                    "exponent_parameter": 1,
                    "fraction_bits": 1,
                    "input2": 5,
                    "input_2": 1,
                    "input_param_2": 1,
                    "input_value": 1,
                    "mantissa2": 1,
                    "mantissa_bits": 1,
                    "num2": 1,
                    "number2": 1,
                    "second_part_of_param": 1,
                    "sign_and_mantissa": 2,
                    "significand": 1,
                    "value2": 4,
                    "value_2": 1,
                    "value_b": 1
                },
                "param_3": {
                    "exponent1": 1,
                    "exponent_bits2": 1,
                    "exponent_bits_2": 1,
                    "exponent_other": 1,
                    "fraction_bits": 1,
                    "fraction_parameter": 1,
                    "input3": 5,
                    "input_3": 1,
                    "input_param_3": 1,
                    "mantissa": 2,
                    "mantissa_high": 2,
                    "num3": 1,
                    "number3": 1,
                    "numerator": 1,
                    "operation_mask": 1,
                    "other_bit_and_exponent": 1,
                    "param_3": 1,
                    "sign_bit": 1,
                    "third_part_of_param": 1,
                    "value3": 4,
                    "value_3": 1,
                    "value_c": 1
                },
                "param_4": {
                    "aux_parameter": 1,
                    "denominator": 1,
                    "exponent2": 1,
                    "fourth_part_of_param": 1,
                    "fraction_bits2": 1,
                    "input4": 5,
                    "input_4": 1,
                    "input_param_4": 1,
                    "mantissa_bits_2": 1,
                    "mantissa_low": 2,
                    "nan_bit": 1,
                    "num4": 1,
                    "number4": 1,
                    "operation_value": 1,
                    "other_bit_and_sign": 1,
                    "param_4": 1,
                    "sign": 2,
                    "sign_and_mantissa_other": 1,
                    "sign_bit": 1,
                    "value4": 4,
                    "value_4": 1,
                    "value_d": 1
                },
                "uVar1": {
                    "exponent_bitmask": 1,
                    "exponent_bits_high": 1,
                    "exponent_mask": 1,
                    "exponent_part": 1,
                    "exponent_result": 2,
                    "exponent_value": 1,
                    "floating_point_value1": 1,
                    "result": 2,
                    "result1": 11,
                    "result_1": 4,
                    "result_mask": 1,
                    "result_u_var1": 1,
                    "sign_bit": 1,
                    "sign_bit_abs": 1,
                    "sign_bit_result": 1,
                    "temp1": 1
                },
                "uVar10": {
                    "i_var10": 1,
                    "temp3": 1,
                    "temp6": 1
                },
                "uVar11": {
                    "abs_c": 1,
                    "final_result": 5,
                    "floating_point_result": 2,
                    "output": 1,
                    "param_4_unsigned": 1,
                    "result": 4,
                    "result2": 1,
                    "result6": 1,
                    "result8": 1,
                    "result_12": 1,
                    "result_16": 1,
                    "result_shifted": 1,
                    "return_value": 1,
                    "temp11": 1,
                    "temp7": 4,
                    "u_var11": 1,
                    "value4": 1,
                    "variable_7": 1
                },
                "uVar12": {
                    "exponent_bits_high_unsigned": 1,
                    "exponent_value_unsigned": 1,
                    "floating_point_value8": 1,
                    "mantissa_result": 1,
                    "result7": 1,
                    "result9": 1,
                    "result_13": 1,
                    "result_17": 1,
                    "result_7": 1,
                    "result_high": 1,
                    "result_mask_2": 1,
                    "sign_and_mantissa_calculated": 1,
                    "sign_bitmask": 1,
                    "temp12": 1,
                    "temp15": 1,
                    "temp2_high": 1,
                    "temp4": 1,
                    "temp8": 4,
                    "temp_result1": 1,
                    "temp_result10": 1,
                    "temp_result5": 1,
                    "temp_result_3": 1,
                    "temp_u_var12": 1,
                    "u_var12": 1,
                    "upper_half": 1,
                    "value5": 1,
                    "variable_8": 1
                },
                "uVar13": {
                    "converted_result_exponent": 1,
                    "exponent_result_shifted": 1,
                    "floating_point_value9": 1,
                    "lower_half": 1,
                    "mantissa_value_unsigned": 1,
                    "result10": 1,
                    "result13": 1,
                    "result8": 1,
                    "result_14": 1,
                    "result_18": 1,
                    "result_8": 1,
                    "result_low": 1,
                    "result_value_2": 1,
                    "temp13": 1,
                    "temp16": 1,
                    "temp5": 1,
                    "temp9": 4,
                    "temp_result11": 1,
                    "temp_result2": 1,
                    "temp_result6": 1,
                    "temp_result_4": 1,
                    "temp_result_low_outer": 1,
                    "temp_u_var13": 1,
                    "temp_var3_unsigned": 1,
                    "u_var13": 1,
                    "value6": 1,
                    "variable_9": 1
                },
                "uVar14": {
                    "calc_result": 1,
                    "floating_point_number": 1,
                    "floating_point_value": 1,
                    "floating_point_value10": 1,
                    "intermediate_result": 1,
                    "result11": 1,
                    "result14": 1,
                    "result9": 1,
                    "result_15": 1,
                    "result_19": 1,
                    "result_9": 1,
                    "result_temp": 1,
                    "temp10": 4,
                    "temp14": 1,
                    "temp17": 1,
                    "temp6": 1,
                    "temp_result12": 1,
                    "temp_result3": 1,
                    "temp_result7": 1,
                    "temp_result_1": 1,
                    "temp_result_5": 1,
                    "temp_result_high_outer": 1,
                    "temp_result_significand": 1,
                    "u_var14": 1,
                    "value7": 1,
                    "value_converted": 1,
                    "variable_10": 1
                },
                "uVar15": {
                    "clamp_result": 1,
                    "combined_params_temp": 1,
                    "concat_ab": 1,
                    "floating_point_value11": 1,
                    "result10": 1,
                    "result12": 1,
                    "result15": 1,
                    "result_16": 1,
                    "result_20": 1,
                    "result_operation": 1,
                    "temp11": 4,
                    "temp15": 1,
                    "temp18": 1,
                    "temp2": 1,
                    "temp7": 1,
                    "temp_result": 1,
                    "temp_result13": 1,
                    "temp_result4": 1,
                    "temp_result8": 1,
                    "temp_result_2": 1,
                    "temp_result_6": 1,
                    "temp_result_significand_and_exponent": 1,
                    "temp_u_var15": 1,
                    "temp_var1_64": 1,
                    "value8": 1,
                    "value_converted_temp": 1,
                    "variable_11": 1
                },
                "uVar16": {
                    "floating_point_value12": 1,
                    "result11": 1,
                    "result13": 1,
                    "result16": 1,
                    "result_10": 1,
                    "result_17": 1,
                    "result_21": 1,
                    "result_temp": 1,
                    "signed_power2_shifted_mantissa": 1,
                    "temp12": 4,
                    "temp16": 1,
                    "temp19": 1,
                    "temp3": 1,
                    "temp8": 1,
                    "temp_operation": 1,
                    "temp_result14": 1,
                    "temp_result5": 1,
                    "temp_result9": 1,
                    "temp_result_3": 1,
                    "temp_result_7": 1,
                    "temp_result_outer": 1,
                    "temp_result_significand_and_exponent2": 1,
                    "temp_u_var16": 1,
                    "temp_var1": 1,
                    "temp_var2_64": 1,
                    "value9": 1,
                    "variable_12": 1
                },
                "uVar17": {
                    "additional_term": 1,
                    "floating_point_value13": 1,
                    "result12": 1,
                    "result14": 1,
                    "result17": 1,
                    "result_11": 1,
                    "result_18": 1,
                    "result_22": 1,
                    "temp13": 4,
                    "temp17": 1,
                    "temp20": 1,
                    "temp4": 1,
                    "temp9": 1,
                    "temp_result10": 1,
                    "temp_result15": 1,
                    "temp_result6": 1,
                    "temp_result_4": 1,
                    "temp_result_8": 1,
                    "temp_result_low_shift2": 1,
                    "temp_result_significand_and_exponent3": 1,
                    "temp_u_var17": 1,
                    "temp_var3_64": 1,
                    "u_var17": 2,
                    "unsigned_binary_result": 1,
                    "value10": 1,
                    "variable_13": 1
                },
                "uVar18": {
                    "l_var18": 1,
                    "temp14": 1
                },
                "uVar19": {
                    "combined_bits_64": 1,
                    "concat_ab_abs": 1,
                    "converted_significand": 1,
                    "result14": 1,
                    "result15": 1,
                    "result19": 1,
                    "result_19": 1,
                    "result_23": 1,
                    "rounded_down_offset": 1,
                    "temp11": 1,
                    "temp15": 4,
                    "temp19": 1,
                    "temp1_unsigned": 1,
                    "temp22": 1,
                    "temp5": 1,
                    "temp_result12": 1,
                    "temp_result17": 1,
                    "temp_result8": 1,
                    "temp_result_10": 1,
                    "temp_u_var19": 1,
                    "u_var19": 2,
                    "unsigned_binary_result_unsigned": 1,
                    "unsigned_long_long_value": 1,
                    "unsigned_long_variable": 1,
                    "value11": 1,
                    "variable_15": 1
                },
                "uVar2": {
                    "exponent_abs": 1,
                    "exponent_bits": 1,
                    "exponent_result": 1,
                    "floating_point_value2": 1,
                    "mantissa1_normalized": 1,
                    "mantissa_value": 1,
                    "mask": 1,
                    "param2_part": 1,
                    "result": 1,
                    "result2": 10,
                    "result_2": 4,
                    "result_exponent": 1,
                    "result_value": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp_u_var2": 1,
                    "temp_var1": 1
                },
                "uVar20": {
                    "floating_point_value14": 1,
                    "result15": 1,
                    "result16": 1,
                    "result20": 1,
                    "result_12": 1,
                    "result_20": 1,
                    "result_24": 1,
                    "temp12": 1,
                    "temp16": 4,
                    "temp20": 1,
                    "temp23": 1,
                    "temp2_unsigned": 1,
                    "temp6": 1,
                    "temp_result13": 1,
                    "temp_result18": 1,
                    "temp_result2": 1,
                    "temp_result9": 1,
                    "temp_result_11": 1,
                    "temp_result_5": 1,
                    "temp_shifted_mantissa": 1,
                    "temp_u_var20": 1,
                    "u_var20": 2,
                    "unsigned_binary_result_temp": 1,
                    "value12": 1,
                    "variable_16": 1
                },
                "uVar3": {
                    "exponent_lower_bound": 1,
                    "exponent_value_2": 1,
                    "extra_result_2": 1,
                    "floating_point_value3": 1,
                    "mantissa2_normalized": 1,
                    "mantissa_part": 1,
                    "result2": 1,
                    "result3": 6,
                    "result4": 3,
                    "result_3": 1,
                    "result_4": 3,
                    "sign_bit_temp": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_mask": 1,
                    "temp_result": 2,
                    "temp_result1": 1,
                    "temp_result2": 1,
                    "temp_u_var3": 1,
                    "temp_var2": 1
                },
                "uVar4": {
                    "exponent1_shifted": 1,
                    "exponent_upper_bound": 1,
                    "extra_result_3": 1,
                    "floating_point_value4": 1,
                    "mantissa_value_2": 1,
                    "normalization_tries": 1,
                    "result3": 1,
                    "result4": 6,
                    "result5": 3,
                    "result_4": 1,
                    "result_5": 3,
                    "sign_part": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp_result2": 2,
                    "temp_result3": 1,
                    "temp_result_exponent": 1,
                    "temp_u_var4": 1,
                    "temp_value": 1,
                    "temp_var3": 1
                },
                "uVar5": {
                    "i_var5": 1,
                    "result1": 1,
                    "temp1": 1
                },
                "uVar6": {
                    "i_var6": 1,
                    "result2": 1,
                    "temp2": 1
                },
                "uVar7": {
                    "constant_1": 1,
                    "exponent2_shifted": 1,
                    "floating_point_value5": 1,
                    "result": 1,
                    "result3": 1,
                    "result4": 1,
                    "result5": 1,
                    "result7": 1,
                    "result_10": 1,
                    "result_12": 1,
                    "result_5": 1,
                    "shifted_mantissa": 1,
                    "table_value1": 1,
                    "temp1": 1,
                    "temp11": 1,
                    "temp3": 4,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_result3": 1,
                    "temp_result8": 1,
                    "temp_result_1": 1,
                    "temp_u_var7": 1,
                    "temp_var4": 1,
                    "temp_var_3": 1,
                    "u_var7": 1,
                    "value1": 2,
                    "variable_3": 1
                },
                "uVar8": {
                    "abs_b": 1,
                    "exponent_unsigned": 1,
                    "floating_point_value6": 1,
                    "mantissa1_extended": 1,
                    "mantissa_bits_unsigned": 1,
                    "masked_params": 1,
                    "normalized_exponent": 1,
                    "normalized_significand": 1,
                    "positive_mask": 1,
                    "result6": 1,
                    "result_13": 1,
                    "sign_and_mantissa_checked": 1,
                    "sign_and_mantissa_result": 1,
                    "temp1": 1,
                    "temp12": 1,
                    "temp2": 1,
                    "temp4": 4,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_3": 1,
                    "temp_var5": 1,
                    "u_var8": 2,
                    "unsigned_exponent": 1,
                    "value2": 2,
                    "variable_4": 1
                },
                "uVar9": {
                    "constant_2": 1,
                    "converted_result": 1,
                    "exponent_unsigned_temp": 1,
                    "floating_point_value7": 1,
                    "fraction": 1,
                    "mantissa2_extended": 1,
                    "result5": 1,
                    "result7": 1,
                    "result9": 1,
                    "result_11": 1,
                    "result_14": 1,
                    "result_6": 1,
                    "table_value2": 1,
                    "temp13": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 4,
                    "temp9": 1,
                    "temp_result4": 1,
                    "temp_result9": 1,
                    "temp_result_2": 1,
                    "temp_u_var9": 1,
                    "temp_var6": 1,
                    "u_var9": 2,
                    "value3": 2,
                    "variable_5": 1
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_080070a4",
                "FUN_080071c0",
                "FUN_080009c8",
                "FUN_080009f0",
                "FUN_08006c0c",
                "FUN_0800016c",
                "FUN_080004d0",
                "FUN_08000404",
                "FUN_08000724",
                "FUN_0800708c"
            ],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nuint calculate_floating_point_value_08006228_08006228(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result2;\n  uint result_3;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result6;\n  undefined4 result7;\n  uint result8;\n  undefined4 result_9;\n  int temp1;\n  int temp2;\n  undefined4 temp3;\n  uint temp4;\n  undefined4 temp5;\n  int temp6;\n  uint final_result;\n  undefined4 temp8;\n  undefined4 temp9;\n  undefined8 temp10;\n  undefined8 temp11;\n  undefined8 temp12;\n  undefined8 temp13;\n  longlong temp14;\n  ulonglong temp15;\n  undefined8 temp16;\n  uint result;\n  undefined4 new_exponent_bits;\n  undefined4 temp8;\n  int local_54;\n  \n  temp11 = CONCAT44(input2,input1);\n  final_result = input4 & 0x7fffffff;\n  if ((final_result | input3) == 0) {\n    return 0;\n  }\n  temp4 = input2 & 0x7fffffff;\n  if (temp4 < 0x7ff00001) {\n    if (temp4 == 0x7ff00000) {\n      if (input1 == 0) {\n        if (0x7ff00000 < final_result) goto LAB_08006278;\nLAB_08006262:\n        if ((final_result != 0x7ff00000) || (input3 == 0)) {\n          if (-1 < (int)input2) goto LAB_0800632a;\n          if (final_result < 0x43400000) {\n            if (final_result < 0x3ff00000) {\nLAB_0800632a:\n              result = 0;\n              goto LAB_080062ba;\n            }\n            temp1 = ((int)final_result >> 0x14) + -0x3ff;\n            if (0x14 < temp1) {\n              result2 = input3 >> (0x34U - temp1 & 0xff);\n              if (input3 == result2 << (0x34U - temp1 & 0xff)) {\n                result = 2 - (result2 & 1);\n                goto LAB_080062ba;\n              }\n              goto LAB_0800632a;\n            }\n            if (input3 == 0) {\n              result2 = (int)final_result >> (0x14U - temp1 & 0xff);\n              if (final_result == result2 << (0x14U - temp1 & 0xff)) {\n                result = 2 - (result2 & 1);\n              }\n              else {\n                result = 0;\n              }\n              goto LAB_0800630c;\n            }\n            result = 0;\n          }\n          else {\n            result = 2;\nLAB_080062ba:\n            if (input3 == 0) {\n              if (final_result == 0x7ff00000) {\n                if ((temp4 + 0xc0100000 | input1) == 0) {\n                  return 0;\n                }\n                if (0x3fefffff < temp4) {\n                  if ((int)input4 < 0) {\n                    return 0;\n                  }\n                  return 0;\n                }\n                if (-1 < (int)input4) {\n                  return 0;\n                }\n                return 0;\n              }\nLAB_0800630c:\n              if (final_result == 0x3ff00000) {\n                if (-1 < (int)input4) {\n                  return input1;\n                }\n                temp10 = 0x3ff0000000000000;\n                goto LAB_08006320;\n              }\n              if (input4 == 0x40000000) goto LAB_0800634a;\n              if ((input4 == 0x3fe00000) && (-1 < (int)input2)) {\n                final_result = calculate_floating_point_number_08006c0c(input1,input2);\n                return final_result;\n              }\n            }\n          }\n          temp10 = FUNC_0800708c(input1,input2);\n          temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n          result1 = (undefined4)temp10;\n          temp15 = CONCAT44(input2,result1) & 0x7fffffffffffffff;\n          if ((input1 == 0) && ((temp4 == 0 || ((input2 & 0x3fffffff) == 0x3ff00000)))) {\n            if ((int)input4 < 0) {\n              temp10 = calculate_floating_point_value_08000724(0,0x3ff00000,result1,temp8);\n            }\n            if (-1 < (int)input2) {\n              return (uint)temp10;\n            }\n            if ((result | temp4 + 0xc0100000) != 0) {\n              return (uint)temp10;\n            }\n          }\n          else {\n            result2 = 0xffffffff - ((int)input2 >> 0x1f);\n            temp10 = temp11;\n            if ((result | result2) != 0) {\n              if (final_result < 0x41e00001) {\n                local_54 = 0;\n                if (temp4 < 0x100000) {\n                  temp15 = calculate_result_080004d0();\n                  local_54 = -0x35;\n                }\n                final_result = (uint)(temp15 >> 0x20);\n                result1 = (undefined4)temp15;\n                local_54 = ((int)final_result >> 0x14) + -0x3ff + local_54;\n                final_result = final_result & 0xfffff;\n                temp4 = final_result | 0x3ff00000;\n                if (final_result < 0x3988f) {\nLAB_08006628:\n                  temp1 = 0;\n                }\n                else {\n                  if (0xbb679 < final_result) {\n                    temp4 = temp4 - 0x100000;\n                    local_54 = local_54 + 1;\n                    goto LAB_08006628;\n                  }\n                  temp1 = 1;\n                }\n                temp2 = temp1 * 8;\n                temp3 = (&DAT_080073c0)[temp1 * 2];\n                temp5 = (&DAT_080073c4)[temp1 * 2];\n                temp11 = calculate_unsigned_binary_result_08000168(result1,temp4,temp3,temp5);\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_0800016c(result1,temp4,temp3,temp5);\n                temp10 = calculate_floating_point_value_08000724(0,0x3ff00000,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                result3 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0((int)temp11,temp9,(int)temp10,result3);\n                result4 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = (undefined4)temp12;\n                temp12 = calculate_result_080004d0(0,result4);\n                temp11 = calculate_unsigned_binary_result_08000168((int)temp11,temp9,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_unsigned_binary_result_08000168(0,((int)temp4 >> 1 | 0x20000000U) + 0x80000 + temp1 * 0x40000,\n                                      temp3,temp5);\n                temp12 = calculate_unsigned_binary_result_08000168(result1,temp4,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0,result4);\n                temp11 = calculate_unsigned_binary_result_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp11 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,result3\n                                     );\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_080004d0(temp8,result4);\n                result3 = (undefined4)((ulonglong)temp10 >> 0x20);\n                result1 = (undefined4)temp10;\n                temp10 = calculate_result_080004d0(result1,result3,0x4a454eef,0x3fca7e28);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x93c9db65,\n                                      0x3fcd864a);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xa91d4101,\n                                      0x3fd17460);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x518f264d,\n                                      0x3fd55555);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdb6fabff,\n                                      0x3fdb6db6);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),result1,result3);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x33333303,\n                                      0x3fe33333);\n                temp12 = calculate_result_080004d0(result1,result3,result1,result3);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_0800016c(temp8,result4,0,result4);\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp10 = calculate_result_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0(0,result4,0,result4);\n                result3 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp13 = calculate_result_0800016c((int)temp12,result3,0,0x40080000);\n                calculate_result_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp10,result1);\n                temp13 = calculate_result_080004d0(0,result4,0,result6);\n                temp3 = (undefined4)((ulonglong)temp13 >> 0x20);\n                temp16 = calculate_unsigned_binary_result_08000168(0,result6,0,0x40080000);\n                temp12 = calculate_unsigned_binary_result_08000168((int)temp16,(int)((ulonglong)temp16 >> 0x20),(int)temp12,result3\n                                     );\n                temp10 = calculate_unsigned_binary_result_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp11 = calculate_result_080004d0((int)temp11,temp9,0,result6);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n                calculate_result_0800016c((int)temp13,temp3,(int)temp10,result1);\n                temp11 = calculate_result_080004d0(0,result7,0xe0000000,0x3feec709);\n                temp12 = calculate_unsigned_binary_result_08000168(0,result7,(int)temp13,temp3);\n                temp10 = calculate_unsigned_binary_result_08000168((int)temp10,result1,(int)temp12,(int)((ulonglong)temp12 >> 0x20)\n                                     );\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xdc3a03fd,\n                                      0x3feec709);\n                temp12 = calculate_result_080004d0(0,result7,0x145b01f5,0xbe3e2fe0);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),\n                                      *(undefined4 *)(&DAT_080073e0 + temp2),\n                                      *(undefined4 *)(&DAT_080073e4 + temp2));\n                temp12 = reverse_bits_and_shift_08000404(local_54);\n                result1 = (undefined4)((ulonglong)temp12 >> 0x20);\n                temp8 = *(undefined4 *)(&DAT_080073d0 + temp2);\n                temp9 = *(undefined4 *)(&DAT_080073d4 + temp2);\n                temp13 = calculate_result_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp13 = calculate_result_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),temp8,temp9);\n                calculate_result_0800016c((int)temp13,(int)((ulonglong)temp13 >> 0x20),(int)temp12,result1);\n                temp12 = calculate_unsigned_binary_result_08000168(0,result8,(int)temp12,result1);\n                temp14 = calculate_unsigned_binary_result_08000168((int)temp12,(int)((ulonglong)temp12 >> 0x20),temp8,temp9);\n                final_result = result8;\n              }\n              else {\n                if (0x43f00000 < final_result) {\n                  if (temp4 < 0x3ff00000) goto LAB_080063fa;\nLAB_08006418:\n                  if ((int)input4 < 1) {\n                    return 0;\n                  }\nLAB_08006400:\n                  input1 = 0x8800759c;\n                  input2 = 0x7e37e43c;\n                  temp11 = 0x7e37e43c8800759c;\n                  goto LAB_0800634a;\n                }\n                if (temp4 < 0x3fefffff) {\nLAB_080063fa:\n                  if (-1 < (int)input4) {\n                    return 0;\n                  }\n                  goto LAB_08006400;\n                }\n                if (0x3ff00000 < temp4) goto LAB_08006418;\n                temp11 = calculate_unsigned_binary_result_08000168(result1,temp8,0,0x3ff00000);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                result1 = (undefined4)temp11;\n                temp11 = calculate_result_080004d0(result1,temp8,0x60000000,0x3ff71547);\n                temp10 = calculate_result_080004d0(result1,temp8,0xf85ddf44,0x3e54ae0b);\n                temp12 = calculate_result_080004d0(result1,temp8,0,0x3fd00000);\n                temp12 = calculate_unsigned_binary_result_08000168(0x55555555,0x3fd55555,(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),result1,temp8);\n                temp12 = calculate_unsigned_binary_result_08000168(0,0x3fe00000,(int)temp12,(int)((ulonglong)temp12 >> 0x20));\n                temp13 = calculate_result_080004d0(result1,temp8,result1,temp8);\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp13,\n                                      (int)((ulonglong)temp13 >> 0x20));\n                temp12 = calculate_result_080004d0((int)temp12,(int)((ulonglong)temp12 >> 0x20),0x652b82fe,\n                                      0x3ff71547);\n                temp10 = calculate_unsigned_binary_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                calculate_result_0800016c((int)temp11,(int)((ulonglong)temp11 >> 0x20),(int)temp10,\n                             (int)((ulonglong)temp10 >> 0x20));\n                temp14 = (ulonglong)result_3 << 0x20;\n                final_result = result_3;\n              }\n              temp11 = calculate_unsigned_binary_result_08000168((int)temp14,(int)((ulonglong)temp14 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp11 = calculate_unsigned_binary_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              if ((result - 1 | result2) == 0) {\n                input2 = 0xbff00000;\n              }\n              else {\n                input2 = 0x3ff00000;\n              }\n              result = 0;\n              temp10 = calculate_unsigned_binary_result_08000168(input3,input4,0,input4);\n              temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0,final_result);\n              temp11 = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input3,input4);\n              temp11 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                    (int)((ulonglong)temp11 >> 0x20));\n              temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n              result1 = (undefined4)temp11;\n              temp11 = calculate_result_080004d0(0,final_result,0,input4);\n              result3 = (undefined4)((ulonglong)temp11 >> 0x20);\n              temp8 = (undefined4)temp11;\n              temp14 = calculate_result_0800016c(result1,temp9,temp8,result3);\n              temp4 = (uint)((ulonglong)temp14 >> 0x20);\n              final_result = (uint)temp14;\n              if (0x408fffffffffffff < temp14) {\n                if ((temp4 + 0xbf700000 | final_result) == 0) {\n                  temp10 = calculate_result_0800016c(result1,temp9,0x652b82fe,0x3c971547);\n                  temp12 = calculate_unsigned_binary_result_08000168(final_result,temp4,temp8,result3);\n                  temp1 = check_if_string_is_empty_080009f0((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                       (int)((ulonglong)temp12 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_result_080004d0(0,input2,0x8800759c,0x7e37e43c);\n                input1 = 0x8800759c;\n                input2 = 0x7e37e43c;\n                goto LAB_0800634a;\n              }\n              if ((temp4 & 0x7fffffff) < 0x4090cc00) {\nLAB_08006968:\n                if ((temp4 & 0x7fffffff) < 0x3fe00001) {\n                  temp1 = 0;\n                }\n                else {\n                  temp4 = (0x100000 >> (((int)(temp4 & 0x7fffffff) >> 0x14) - 0x3feU & 0xff)) +\n                          temp4;\n                  final_result = (temp4 * 2 >> 0x15) - 0x3ff;\n                  temp1 = (int)(temp4 & 0xfffff | 0x100000) >> (0x14 - final_result & 0xff);\n                  if (temp14 < 0) {\n                    temp1 = -temp1;\n                  }\n                  temp11 = calculate_unsigned_binary_result_08000168(temp8,result3,0,temp4 & ~(0xfffff >> (final_result & 0xff)));\n                }\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                new_exponent_bits = (undefined4)temp11;\n                calculate_result_0800016c(new_exponent_bits,temp8,result1,temp9);\n                temp11 = calculate_result_080004d0(0,result_9,0,0x3fe62e43);\n                temp8 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_unsigned_binary_result_08000168(0,result_9,new_exponent_bits,temp8);\n                temp10 = calculate_unsigned_binary_result_08000168(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xfefa39ef,\n                                      0x3fe62e42);\n                temp12 = calculate_result_080004d0(0,result_9,0xca86c39,0xbe205c61);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp12,\n                                      (int)((ulonglong)temp12 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_0800016c((int)temp11,temp8,(int)temp10,temp9);\n                result3 = (undefined4)((ulonglong)temp12 >> 0x20);\n                result1 = (undefined4)temp12;\n                temp11 = calculate_unsigned_binary_result_08000168(result1,result3,(int)temp11,temp8);\n                temp11 = calculate_unsigned_binary_result_08000168((int)temp10,temp9,(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp9 = (undefined4)((ulonglong)temp11 >> 0x20);\n                temp10 = calculate_result_080004d0(result1,result3,result1,result3);\n                result4 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp8 = (undefined4)temp10;\n                temp10 = calculate_result_080004d0(temp8,result4,0x72bea4d0,0x3e663769);\n                temp10 = calculate_unsigned_binary_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xc5d26bf1,\n                                      0x3ebbbd41);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0xaf25de2c,\n                                      0x3f11566a);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_unsigned_binary_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x16bebd93,\n                                      0x3f66c16c);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_result_0800016c((int)temp10,(int)((ulonglong)temp10 >> 0x20),0x5555553e,\n                                      0x3fc55555);\n                temp10 = calculate_result_080004d0((int)temp10,(int)((ulonglong)temp10 >> 0x20),temp8,result4);\n                temp10 = calculate_unsigned_binary_result_08000168(result1,result3,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                temp8 = (undefined4)((ulonglong)temp10 >> 0x20);\n                temp12 = calculate_result_080004d0(result1,result3,(int)temp10,temp8);\n                temp10 = calculate_unsigned_binary_result_08000168((int)temp10,temp8,0,0x40000000);\n                temp10 = calculate_floating_point_value_08000724((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp10,\n                                      (int)((ulonglong)temp10 >> 0x20));\n                temp12 = calculate_result_080004d0(result1,result3,(int)temp11,temp9);\n                temp11 = calculate_result_0800016c((int)temp12,(int)((ulonglong)temp12 >> 0x20),(int)temp11,\n                                      temp9);\n                temp11 = calculate_unsigned_binary_result_08000168((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                      (int)((ulonglong)temp11 >> 0x20));\n                temp11 = calculate_unsigned_binary_result_08000168((int)temp11,(int)((ulonglong)temp11 >> 0x20),result1,result3);\n                temp10 = calculate_unsigned_binary_result_08000168(0,0x3ff00000,(int)temp11,(int)((ulonglong)temp11 >> 0x20));\n                temp2 = (int)((ulonglong)temp10 >> 0x20);\n                temp6 = temp2 + temp1 * 0x100000;\n                temp11 = CONCAT44(temp6,(int)temp10);\n                input1 = result;\n                if (temp6 < 0x100000) {\n                  temp11 = calculate_final_result_080071c0((int)temp10,temp2,temp1);\n                }\n              }\n              else {\n                if ((temp4 + 0x3f6f3400 | final_result) == 0) {\n                  temp10 = calculate_unsigned_binary_result_08000168(final_result,temp4,temp8,result3);\n                  temp1 = check_and_return_parameters_080009c8(result1,temp9,(int)temp10,(int)((ulonglong)temp10 >> 0x20));\n                  if (temp1 == 0) goto LAB_08006968;\n                }\n                temp11 = calculate_result_080004d0(0,input2,0xc2f8f359,0x1a56e1f);\n                input1 = 0xc2f8f359;\n                input2 = 0x1a56e1f;\n              }\nLAB_0800634a:\n              final_result = calculate_result_080004d0((int)temp11,(int)((ulonglong)temp11 >> 0x20),input1,input2);\n              return final_result;\n            }\n          }\n          result1 = (undefined4)((ulonglong)temp10 >> 0x20);\n          temp10 = calculate_unsigned_binary_result_08000168((int)temp10,result1,(int)temp10,result1);\n          temp11 = temp10;\nLAB_08006320:\n          final_result = calculate_floating_point_value_08000724((int)temp10,(int)((ulonglong)temp10 >> 0x20),(int)temp11,\n                                (int)((ulonglong)temp11 >> 0x20));\n          return final_result;\n        }\n      }\n    }\n    else if (final_result < 0x7ff00001) goto LAB_08006262;\n  }\n  if ((temp4 + 0xc0100000 | input1) == 0) {\n    return 0;\n  }\nLAB_08006278:\n  final_result = get_positive_infinity_080070a4(&DAT_0800737e);\n  return final_result;\n}\n\n",
            "current_name": "calculate_floating_point_value_08006228_08006228",
            "entrypoint": "0x08006228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006228": "calculate_floating_point_value_08006228_08006228",
                "extraout_r1": "result_3",
                "extraout_r1_00": "result6",
                "extraout_r1_01": "result7",
                "extraout_r1_02": "result8",
                "extraout_r1_03": "result_9",
                "iVar10": "temp6",
                "iVar5": "temp1",
                "iVar6": "temp2",
                "lVar18": "temp14",
                "local_64": "temp8",
                "local_68": "new_exponent_bits",
                "local_70": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar11": "final_result",
                "uVar12": "temp8",
                "uVar13": "temp9",
                "uVar14": "temp10",
                "uVar15": "temp11",
                "uVar16": "temp12",
                "uVar17": "temp13",
                "uVar19": "temp15",
                "uVar2": "result2",
                "uVar20": "temp16",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar7": "temp3",
                "uVar8": "temp4",
                "uVar9": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c0c": {
            "additional_data": {
                "FUN_08006c0c": {
                    "calculate_binary_floating_point": 1,
                    "calculate_float": 7,
                    "calculate_float_from_uint": 1,
                    "calculate_float_point_conversion": 1,
                    "calculate_float_sum": 1,
                    "calculate_float_value": 4,
                    "calculate_floating_point": 4,
                    "calculate_floating_point_number": 1,
                    "calculate_floating_point_value": 7,
                    "convert_float_to_binary": 1,
                    "improved_calculate_result": 1,
                    "reverse_binary_calculation": 1
                },
                "iVar10": {
                    "bit_count": 1,
                    "bit_index": 1,
                    "bit_position": 1,
                    "bit_value_temp": 1,
                    "constant2": 1,
                    "count": 1,
                    "count2": 1,
                    "counter1": 1,
                    "counter2": 1,
                    "i_var10": 1,
                    "inner_loop_count": 1,
                    "int_var10": 1,
                    "iterate": 1,
                    "limit": 1,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "loop_counter_1": 1,
                    "loop_counter_2": 1,
                    "mask_count": 1,
                    "result_2": 1,
                    "shift": 1,
                    "temp10": 1,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_9": 3,
                    "var4": 1
                },
                "iVar3": {
                    "adjusted_exponent": 1,
                    "count": 1,
                    "exp": 1,
                    "exponent": 4,
                    "int_var3": 1,
                    "shift": 1,
                    "shift1": 1,
                    "shift_1": 1,
                    "shift_amount": 5,
                    "shift_count": 6,
                    "shifts": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_2": 3
                },
                "iVar4": {
                    "count": 3,
                    "count1": 1,
                    "counter": 3,
                    "counter1": 1,
                    "i": 2,
                    "int_var4": 1,
                    "loop_count": 2,
                    "loop_counter": 2,
                    "loop_counter_1": 1,
                    "lower_boundary": 1,
                    "shift2": 1,
                    "shift_2": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_3": 3,
                    "temp_4": 1,
                    "temp_count": 1,
                    "var5": 1
                },
                "iVar7": {
                    "accum1": 1,
                    "add_result": 1,
                    "cumulative_sum": 1,
                    "exponent": 3,
                    "exponent_temp": 1,
                    "i_var7": 1,
                    "int_value": 1,
                    "int_var7": 1,
                    "integer": 1,
                    "integer_part": 3,
                    "numerator": 1,
                    "result": 1,
                    "result2": 1,
                    "result_low_1": 1,
                    "shift_count": 1,
                    "shifted_value": 1,
                    "sum": 3,
                    "temp5": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "temp_6": 3
                },
                "param_1": {
                    "a": 1,
                    "float_value": 1,
                    "input1": 15,
                    "input_1": 8,
                    "input_val_1": 2,
                    "input_value_1": 3,
                    "num1": 1
                },
                "param_2": {
                    "b": 1,
                    "input2": 15,
                    "input_2": 8,
                    "input_val_2": 2,
                    "input_value_2": 3,
                    "int_value": 1,
                    "num2": 1
                },
                "uVar1": {
                    "float_result": 1,
                    "result": 2,
                    "result1": 11,
                    "result_1": 5,
                    "result_high_1": 1,
                    "temp1": 5,
                    "temp_1": 1,
                    "unsigned_var1": 1
                },
                "uVar11": {
                    "addend": 1,
                    "addition": 1,
                    "counter2": 1,
                    "inner_remainder": 1,
                    "inner_shift_result": 1,
                    "loop_counter_2": 1,
                    "mask_remainder": 1,
                    "result_3": 1,
                    "sub_2": 1,
                    "sum_2": 1,
                    "temp": 2,
                    "temp10": 2,
                    "temp11": 1,
                    "temp2": 2,
                    "temp3": 3,
                    "temp5": 2,
                    "temp9": 1,
                    "temp_10": 3,
                    "temp_4": 1,
                    "u_var11": 1,
                    "unsigned_var11": 1,
                    "var3": 1
                },
                "uVar12": {
                    "final_result": 14,
                    "final_value": 1,
                    "output": 3,
                    "output_val": 1,
                    "result": 7,
                    "result3": 1,
                    "result_value": 1,
                    "return_value": 1
                },
                "uVar2": {
                    "bitwise_and_result": 1,
                    "exponent": 1,
                    "mantissa": 1,
                    "normalized_exponent": 1,
                    "result2": 6,
                    "result_2": 1,
                    "result_high_2": 1,
                    "significand": 1,
                    "sub_1": 1,
                    "temp1": 5,
                    "temp2": 5,
                    "temp_1": 4,
                    "temp_2": 1,
                    "unsigned_var2": 1
                },
                "uVar5": {
                    "add_or_result": 1,
                    "bit_shift": 1,
                    "mantissa": 1,
                    "mask": 1,
                    "mask1": 1,
                    "multiplier": 1,
                    "remainder": 3,
                    "remaining_bits": 1,
                    "temp1": 2,
                    "temp2": 4,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_4": 3,
                    "temp_result_1": 1,
                    "temp_value": 1,
                    "u_var5": 2,
                    "unsigned_var5": 1
                },
                "uVar6": {
                    "add_or_result_temp": 1,
                    "mask2": 1,
                    "remainder_temp": 1,
                    "remaining_bits_temp": 1,
                    "temp": 3,
                    "temp2": 2,
                    "temp3": 3,
                    "temp4": 2,
                    "temp5": 2,
                    "temp6": 1,
                    "temp_3": 1,
                    "temp_5": 3,
                    "temp_6": 1,
                    "temp_mantissa": 1,
                    "temp_result": 1,
                    "temp_result_2": 1,
                    "temp_var": 1,
                    "u_var6": 2,
                    "unsigned_var6": 1
                },
                "uVar8": {
                    "accum2": 1,
                    "add_shift_sub": 1,
                    "exponent": 1,
                    "exponent_temp": 1,
                    "final_result": 1,
                    "final_result_low": 1,
                    "final_value1": 1,
                    "fraction_part": 1,
                    "fractional_part": 1,
                    "mantissa": 1,
                    "result": 1,
                    "result1": 1,
                    "result_3": 1,
                    "result_low_2": 1,
                    "rounded_mantissa": 1,
                    "sign": 1,
                    "sign_bit": 1,
                    "sum": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp8": 1,
                    "temp_7": 3,
                    "temp_8": 1,
                    "u_var8": 1,
                    "unsigned_var8": 1,
                    "value1": 1
                },
                "uVar9": {
                    "accum3": 1,
                    "base": 1,
                    "bit_mask": 2,
                    "bitwise_or_result": 1,
                    "constant1": 1,
                    "exponent_temp1": 1,
                    "mask": 7,
                    "mask_result": 1,
                    "power": 1,
                    "result_1": 1,
                    "shifted_bits": 1,
                    "sign_bit": 1,
                    "temp": 1,
                    "temp7": 1,
                    "temp8": 2,
                    "temp9": 1,
                    "temp_8": 3,
                    "u_var9": 1,
                    "unsigned_var9": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_0800016c",
                "FUN_080004d0",
                "FUN_08000724"
            ],
            "calling": [
                "FUN_08005bc8",
                "FUN_08006228",
                "FUN_08005c70"
            ],
            "code": "\nundefined8 calculate_floating_point_number_08006c0c(uint input1,uint input2)\n\n{\n  undefined4 result1;\n  uint result2;\n  int shift_count;\n  int count;\n  uint temp2;\n  uint temp_5;\n  int integer_part;\n  uint temp_7;\n  uint mask;\n  int temp_9;\n  uint temp_10;\n  undefined8 final_result;\n  \n  if ((~input2 & 0x7ff00000) == 0) {\n    final_result = calculate_result_080004d0(input1,input2,input1,input2);\n    final_result = calculate_result_0800016c(input1,input2,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    return final_result;\n  }\n  if ((int)input2 < 1) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != 0) {\n      final_result = calculate_unsigned_binary_result_08000168(input1,input2,input1,input2);\n      result1 = (undefined4)((ulonglong)final_result >> 0x20);\n      final_result = calculate_floating_point_value_08000724((int)final_result,result1,(int)final_result,result1);\n      return final_result;\n    }\n  }\n  shift_count = (int)input2 >> 0x14;\n  if (shift_count == 0) {\n    while (input2 == 0) {\n      shift_count = shift_count + -0x15;\n      input2 = input1 >> 0xb;\n      input1 = input1 << 0x15;\n    }\n    result2 = 0;\n    for (; -1 < (int)(input2 << 0xb); input2 = input2 << 1) {\n      result2 = result2 + 1;\n    }\n    shift_count = shift_count - (result2 - 1);\n    input2 = input2 | input1 >> (0x20 - result2 & 0xff);\n    input1 = input1 << (result2 & 0xff);\n  }\n  integer_part = 0;\n  result2 = input2 & 0xfffff | 0x100000;\n  if ((shift_count + -0x3ff) * -0x80000000 < 0) {\n    result2 = result2 * 2 - ((int)input1 >> 0x1f);\n    input1 = input1 << 1;\n  }\n  result2 = result2 * 2 - ((int)input1 >> 0x1f);\n  count = 0x16;\n  temp2 = 0;\n  temp_7 = 0x200000;\n  input1 = input1 << 1;\n  do {\n    temp_9 = temp2 + temp_7;\n    if (temp_9 <= (int)result2) {\n      result2 = result2 - temp_9;\n      temp2 = temp_9 + temp_7;\n      integer_part = integer_part + temp_7;\n    }\n    count = count + -1;\n    result2 = result2 * 2 - ((int)input1 >> 0x1f);\n    temp_7 = temp_7 >> 1;\n    input1 = input1 << 1;\n  } while (count != 0);\n  temp_9 = 0x20;\n  mask = 0x80000000;\n  temp_7 = 0;\n  count = 0;\n  do {\n    temp_10 = mask + count;\n    temp_5 = temp2;\n    if (((int)temp2 < (int)result2) || ((result2 == temp2 && (temp_10 <= input1)))) {\n      count = temp_10 + mask;\n      if (((int)temp_10 < 0) && (-1 < count)) {\n        temp_5 = temp2 + 1;\n      }\n      result2 = result2 - temp2;\n      if (input1 < temp_10) {\n        result2 = result2 - 1;\n      }\n      input1 = input1 - temp_10;\n      temp_7 = temp_7 + mask;\n    }\n    result2 = result2 * 2 - ((int)input1 >> 0x1f);\n    temp_9 = temp_9 + -1;\n    input1 = input1 << 1;\n    mask = mask >> 1;\n    temp2 = temp_5;\n  } while (temp_9 != 0);\n  if ((input1 | result2) != 0) {\n    if (temp_7 == 0xffffffff) {\n      integer_part = integer_part + 1;\n      temp_7 = 0;\n    }\n    else {\n      temp_7 = temp_7 + 1 & 0xfffffffe;\n    }\n  }\n  temp_7 = temp_7 >> 1;\n  if (integer_part << 0x1f < 0) {\n    temp_7 = temp_7 | 0x80000000;\n  }\n  return CONCAT44((integer_part >> 1) + 0x3fe00000 + (shift_count + -0x3ff >> 1) * 0x100000,temp_7);\n}\n\n",
            "current_name": "calculate_floating_point_number_08006c0c",
            "entrypoint": "0x08006c0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c0c": "calculate_floating_point_number_08006c0c",
                "iVar10": "temp_9",
                "iVar3": "shift_count",
                "iVar4": "count",
                "iVar7": "integer_part",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar11": "temp_10",
                "uVar12": "final_result",
                "uVar2": "result2",
                "uVar5": "temp2",
                "uVar6": "temp_5",
                "uVar8": "temp_7",
                "uVar9": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d68": {
            "additional_data": {
                "FUNC_0800708c": {
                    "calculate_result_0800708c": 1,
                    "example_function_1": 1,
                    "get_func_value": 1,
                    "get_some_value": 1
                },
                "FUN_08006d68": {
                    "calculate": 3,
                    "calculate_and_return_value": 1,
                    "calculate_improved_result": 2,
                    "calculate_result": 18,
                    "calculate_value": 6
                },
                "calculate_floating_point_value_08000724": {
                    "calc_floating_point_value": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point_value": 2
                },
                "calculate_result_0800016c": {
                    "calc_result_1": 1,
                    "calculate": 1,
                    "calculate_result": 1,
                    "calculate_result_1": 1
                },
                "calculate_result_080004d0": {
                    "calc_result_2": 1,
                    "calculate2": 1,
                    "calculate_result_2": 1,
                    "example_function_2": 1
                },
                "calculate_result_080009f0": {
                    "check_if_string_is_empty": 1
                },
                "calculate_unsigned_binary_result_08000168": {
                    "calc_unsigned_binary_result": 1,
                    "calculate_binary": 1,
                    "calculate_unsigned_binary_result": 2
                },
                "check_if_string_is_empty_080009f0": {
                    "check_if_string_is_empty": 1,
                    "check_is_string_empty": 1,
                    "is_string_empty": 1
                },
                "concat44": {
                    "create_64bit_value": 1
                },
                "iVar1": {
                    "check_result": 1,
                    "condition": 2,
                    "index": 1,
                    "result": 22,
                    "result1": 1,
                    "result_code": 2,
                    "result_type": 1,
                    "return_value": 1
                },
                "iVar2": {
                    "condition": 1
                },
                "param_1": {
                    "input1": 12,
                    "input_1": 7,
                    "input_data_1": 1,
                    "input_param": 3,
                    "input_param1": 3,
                    "input_param_1": 3,
                    "input_val_1": 1,
                    "input_value_1": 1
                },
                "param_2": {
                    "flags": 3,
                    "input2": 12,
                    "input_2": 7,
                    "input_data_2": 1,
                    "input_param2": 3,
                    "input_param_2": 3,
                    "input_val_2": 1,
                    "input_value_2": 1
                },
                "param_3": {
                    "constant1": 1,
                    "constant_1": 2,
                    "input3": 5,
                    "input_3": 6,
                    "input_data_3": 1,
                    "input_param3": 2,
                    "input_param_3": 3,
                    "param3": 4,
                    "param_a": 1,
                    "temporary_var_1": 1,
                    "unused_param3": 1,
                    "unused_param_1": 2,
                    "unused_parameter": 1,
                    "x": 1
                },
                "param_4": {
                    "constant2": 1,
                    "constant_2": 2,
                    "input4": 5,
                    "input_4": 6,
                    "input_data_4": 1,
                    "input_param4": 2,
                    "input_param_4": 3,
                    "param4": 4,
                    "param_b": 1,
                    "temporary_var_2": 1,
                    "unused_param4": 1,
                    "unused_param_2": 2,
                    "unused_parameter": 1,
                    "y": 1
                },
                "uVar1": {
                    "combined_params": 1
                },
                "uVar10": {
                    "calc_result": 1,
                    "calculation_result": 2,
                    "final_result2": 3,
                    "final_result_high": 1,
                    "output_2": 3,
                    "output_var2": 1,
                    "result2": 3,
                    "result_2": 3,
                    "temp_result": 12,
                    "temp_result2": 1,
                    "temp_value": 1
                },
                "uVar11": {
                    "constant3": 1,
                    "sub_value": 1
                },
                "uVar12": {
                    "constant4": 1,
                    "sub_result": 1
                },
                "uVar2": {
                    "result1": 2,
                    "result1_low": 1,
                    "result2": 1,
                    "result_1": 2,
                    "result_2": 1,
                    "result_low": 1,
                    "result_var_1": 1,
                    "temp1": 2,
                    "temp_1": 5,
                    "temp_var1": 2,
                    "temp_var2": 2,
                    "value1": 2,
                    "value_1": 2,
                    "var1": 6,
                    "var2": 1
                },
                "uVar3": {
                    "result1_high": 1,
                    "result2": 2,
                    "result3": 1,
                    "result_2": 2,
                    "result_3": 1,
                    "result_high": 1,
                    "result_var_2": 1,
                    "temp2": 2,
                    "temp_2": 5,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "value2": 2,
                    "value_2": 2,
                    "var2": 6,
                    "var3": 1
                },
                "uVar4": {
                    "result2_low": 1,
                    "result3": 2,
                    "result4": 1,
                    "result_3": 2,
                    "result_4": 1,
                    "result_var_3": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp_3": 5,
                    "temp_var3": 2,
                    "temp_var4": 2,
                    "value3": 2,
                    "value_3": 2,
                    "var3": 6,
                    "var4": 1
                },
                "uVar5": {
                    "result2_high": 1,
                    "result4": 2,
                    "result5": 1,
                    "result_4": 2,
                    "result_5": 1,
                    "result_var_4": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp_4": 5,
                    "temp_var4": 2,
                    "temp_var5": 2,
                    "value4": 2,
                    "value_4": 2,
                    "var4": 6,
                    "var5": 1
                },
                "uVar6": {
                    "result3_low": 1,
                    "result5": 2,
                    "result6": 1,
                    "result_5": 2,
                    "result_6": 1,
                    "result_var_5": 1,
                    "temp3": 1,
                    "temp5": 2,
                    "temp_5": 5,
                    "temp_var5": 2,
                    "temp_var6": 2,
                    "value5": 2,
                    "value_5": 2,
                    "var5": 6,
                    "var6": 1
                },
                "uVar7": {
                    "result3_high": 1,
                    "result6": 2,
                    "result7": 1,
                    "result_6": 2,
                    "result_7": 1,
                    "result_var_6": 1,
                    "temp4": 1,
                    "temp6": 2,
                    "temp_6": 5,
                    "temp_var6": 2,
                    "temp_var7": 2,
                    "value6": 2,
                    "value_6": 2,
                    "var6": 6,
                    "var7": 1
                },
                "uVar8": {
                    "abs_flags": 1,
                    "abs_input2": 2,
                    "abs_input_2": 1,
                    "abs_param_2": 1,
                    "abs_value": 1,
                    "absolute_value": 1,
                    "flags_mask": 1,
                    "masked_param_2": 1,
                    "param2_mod": 1,
                    "positive_flags": 1,
                    "positive_input": 1,
                    "positive_param2": 1,
                    "positive_val": 1,
                    "temp": 3,
                    "temp_7": 2,
                    "temp_input1": 1,
                    "u_value": 1,
                    "u_var8": 5,
                    "unsigned_input": 1,
                    "unsigned_input2": 2,
                    "unsigned_param": 1,
                    "var7": 1
                },
                "uVar9": {
                    "final_result": 14,
                    "final_result1": 3,
                    "final_result_low": 1,
                    "output_1": 3,
                    "output_var1": 1,
                    "result1": 3,
                    "result_1": 3,
                    "result_temp": 1,
                    "result_value": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_080009f0",
                "FUN_08000724",
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800708c"
            ],
            "calling": [
                "FUN_08006070"
            ],
            "code": "\nundefined8 calculate_improved_result_08006d68(int input1,uint input2,undefined4 input_3,undefined4 input_4)\n\n{\n  int result;\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 var6;\n  uint u_var8;\n  undefined8 final_result;\n  undefined8 temp_result;\n  \n  final_result = CONCAT44(input2,input1);\n  u_var8 = input2 & 0x7fffffff;\n  if (u_var8 < 0x44100000) {\n    if (u_var8 < 0x3fdc0000) {\n      if (u_var8 < 0x3e200000) {\n        temp_result = calculate(input1,input2,0x8800759c,0x7e37e43c,input_4);\n        result = is_string_empty((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return final_result;\n        }\n      }\n      result = -1;\n    }\n    else {\n      final_result = FUNC_0800708c();\n      var2 = (undefined4)((ulonglong)final_result >> 0x20);\n      var1 = (undefined4)final_result;\n      if (u_var8 < 0x3ff30000) {\n        if (u_var8 < 0x3fe60000) {\n          final_result = calculate(var1,var2,var1,var2);\n          final_result = calculate_unsigned_binary_result((int)final_result,(int)((ulonglong)final_result >> 0x20),0,0x3ff00000);\n          temp_result = calculate(var1,var2,0,0x40000000);\n          final_result = calculate_floating_point_value((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 0;\n        }\n        else {\n          final_result = calculate_unsigned_binary_result(var1,var2,0,0x3ff00000);\n          temp_result = calculate(var1,var2,0,0x3ff00000);\n          final_result = calculate_floating_point_value((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                               (int)((ulonglong)temp_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (u_var8 < 0x40038000) {\n        final_result = calculate_unsigned_binary_result(var1,var2,0,0x3ff80000);\n        temp_result = example_function_2(var1,var2,0,0x3ff80000);\n        temp_result = calculate((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0,0x3ff00000);\n        final_result = calculate_floating_point_value((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)temp_result,\n                             (int)((ulonglong)temp_result >> 0x20));\n        result = 2;\n      }\n      else {\n        final_result = calculate_floating_point_value(0,0xbff00000,var1,var2);\n        result = 3;\n      }\n    }\n    var6 = (undefined4)((ulonglong)final_result >> 0x20);\n    var5 = (undefined4)final_result;\n    final_result = example_function_2(var5,var6,var5,var6);\n    var3 = (undefined4)((ulonglong)final_result >> 0x20);\n    var1 = (undefined4)final_result;\n    final_result = example_function_2(var1,var3,var1,var3);\n    var4 = (undefined4)((ulonglong)final_result >> 0x20);\n    var2 = (undefined4)final_result;\n    final_result = example_function_2(var2,var4,0xe322da11,0x3f90ad3a);\n    final_result = calculate((int)final_result,(int)((ulonglong)final_result >> 0x20),0x24760deb,0x3fa97b4b);\n    final_result = example_function_2((int)final_result,(int)((ulonglong)final_result >> 0x20),var2,var4);\n    final_result = calculate((int)final_result,(int)((ulonglong)final_result >> 0x20),0xa0d03d51,0x3fb10d66);\n    final_result = example_function_2((int)final_result,(int)((ulonglong)final_result >> 0x20),var2,var4);\n    final_result = calculate((int)final_result,(int)((ulonglong)final_result >> 0x20),0xc54c206e,0x3fb745cd);\n    final_result = example_function_2((int)final_result,(int)((ulonglong)final_result >> 0x20),var2,var4);\n    final_result = calculate((int)final_result,(int)((ulonglong)final_result >> 0x20),0x920083ff,0x3fc24924);\n    final_result = example_function_2((int)final_result,(int)((ulonglong)final_result >> 0x20),var2,var4);\n    final_result = calculate((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555550d,0x3fd55555);\n    final_result = example_function_2((int)final_result,(int)((ulonglong)final_result >> 0x20),var1,var3);\n    var1 = (undefined4)((ulonglong)final_result >> 0x20);\n    temp_result = example_function_2(var2,var4,0x2c6a6c2f,0xbfa2b444);\n    temp_result = calculate_unsigned_binary_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x52defd9a,0x3fadde2d);\n    temp_result = example_function_2((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    temp_result = calculate_unsigned_binary_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp_result = example_function_2((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    temp_result = calculate_unsigned_binary_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0xfe231671,0x3fbc71c6);\n    temp_result = example_function_2((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    temp_result = calculate_unsigned_binary_result((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x9998ebc4,0x3fc99999);\n    temp_result = example_function_2((int)temp_result,(int)((ulonglong)temp_result >> 0x20),var2,var4);\n    var2 = (undefined4)((ulonglong)temp_result >> 0x20);\n    if (result == -1) {\n      final_result = calculate((int)final_result,var1,(int)temp_result,var2);\n      final_result = example_function_2((int)final_result,(int)((ulonglong)final_result >> 0x20),var5,var6);\n      final_result = calculate_unsigned_binary_result(var5,var6,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n    }\n    else {\n      final_result = calculate((int)final_result,var1,(int)temp_result,var2);\n      final_result = example_function_2((int)final_result,(int)((ulonglong)final_result >> 0x20),var5,var6);\n      result = result * 8;\n      final_result = calculate_unsigned_binary_result((int)final_result,(int)((ulonglong)final_result >> 0x20),\n                           *(undefined4 *)(&UNK_08007410 + result),\n                           *(undefined4 *)(&UNK_08007414 + result));\n      final_result = calculate_unsigned_binary_result((int)final_result,(int)((ulonglong)final_result >> 0x20),var5,var6);\n      final_result = calculate_unsigned_binary_result(*(undefined4 *)(&UNK_080073f0 + result),\n                           *(undefined4 *)(&UNK_080073f4 + result),(int)final_result,\n                           (int)((ulonglong)final_result >> 0x20));\n      if ((int)input2 < 0) {\n        final_result = CONCAT44((int)((ulonglong)final_result >> 0x20) + -0x80000000,(int)final_result);\n      }\n    }\n  }\n  else if ((u_var8 < 0x7ff00001) && ((u_var8 != 0x7ff00000 || (input1 == 0)))) {\n    if ((int)input2 < 1) {\n      final_result = 0xbff921fb54442d18;\n    }\n    else {\n      final_result = 0x3ff921fb54442d18;\n    }\n  }\n  else {\n    final_result = calculate(input1,input2,input1,input2,input_4);\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_improved_result_08006d68",
            "entrypoint": "0x08006d68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d68": "calculate_improved_result_08006d68",
                "calculate_floating_point_value_08000724": "calculate_floating_point_value",
                "calculate_result_0800016c": "calculate",
                "calculate_result_080004d0": "example_function_2",
                "calculate_unsigned_binary_result_08000168": "calculate_unsigned_binary_result",
                "check_if_string_is_empty_080009f0": "is_string_empty",
                "iVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "combined_params",
                "uVar10": "temp_result",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "u_var8",
                "uVar9": "final_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800708c": {
            "called": [],
            "calling": [
                "FUN_08005854",
                "FUN_08006228",
                "FUN_08006d68",
                "FUN_08006070",
                "FUN_08005c70"
            ],
            "code": "\nvoid FUNC_0800708c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800708c",
            "entrypoint": "0x0800708c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800708c": "FUNC_0800708c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08007092": {
            "additional_data": {
                "0x100000": {
                    "magic_number": 1
                },
                "0x1f": {
                    "shift_amount": 1
                },
                "0x80000000": {
                    "sign_bit": 1
                },
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_08007092": {
                    "calculate_modified_bit": 1,
                    "calculate_msb": 1,
                    "calculate_offset": 1,
                    "calculate_shifted_bits": 1,
                    "extract_bit": 3,
                    "extract_sign_bit": 1,
                    "extract_top_bit": 1,
                    "get_bit_status": 1,
                    "get_bitwise_result": 3,
                    "get_highest_bit": 1,
                    "get_highest_bit_set": 1,
                    "get_most_significant_bit_position": 1,
                    "get_msb_bit": 1,
                    "get_sign_bit": 4,
                    "mask_set_bit_to_zero": 1,
                    "reverse_and_shift_right": 1,
                    "reverse_bits": 1,
                    "set_bit_and_shift": 1,
                    "set_bit_and_shift_right": 1,
                    "set_bit_to1": 1,
                    "set_sign_bit": 2,
                    "sign_extension": 1
                },
                "PTR_": {
                    "unchanged": 1
                },
                "local_var_1": {
                    "shifted_result": 1
                },
                "new_variable_name": {
                    "result": 1
                },
                "param_1": {
                    "arg1": 2,
                    "first_param": 1,
                    "flag": 1,
                    "input_flag": 7,
                    "input_mask": 1,
                    "input_param": 1,
                    "input_value": 6,
                    "param": 1,
                    "param1": 2,
                    "source": 1,
                    "state": 1,
                    "status": 1,
                    "status_flag": 1,
                    "value": 3,
                    "var1": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bit_masked_value": 1,
                    "bit_pattern": 2,
                    "bitmask": 3,
                    "bitwise_operand": 1,
                    "data": 1,
                    "flag": 1,
                    "input": 3,
                    "input_value": 7,
                    "num": 2,
                    "number": 1,
                    "original_value": 1,
                    "param2": 1,
                    "value": 3,
                    "var2": 1
                },
                "param_3": {
                    "count": 1,
                    "mask": 1,
                    "new_flag": 1,
                    "num_bits_to_shift": 1,
                    "result": 4,
                    "shift_amount": 1,
                    "temporary_variable": 1
                },
                "param_4": {
                    "shift_value": 1,
                    "shifted_value": 1
                },
                "result": {
                    "sign_bit": 1
                },
                "undefined4": {
                    "result": 1
                },
                "var_1": {
                    "modified_operand": 1
                },
                "var_2": {
                    "shifted_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nuint get_highest_bit_set_08007092(result input_flag,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "current_name": "get_highest_bit_set_08007092",
            "entrypoint": "0x08007092",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007092": "get_highest_bit_set_08007092",
                "param_1": "input_flag",
                "param_2": "input_value",
                "undefined4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800709e": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_0800800f": {
                    "default_return_value": 1
                },
                "FUN_0800709e": {
                    "calculate_return_value": 1,
                    "execute_default_process": 1,
                    "get_default_value": 1,
                    "get_return_value": 2,
                    "get_value": 1,
                    "initialize": 15,
                    "initialize_application": 5,
                    "initialize_program": 3,
                    "initialize_return_value": 1,
                    "return_zero": 1
                },
                "PTR_0800800b": {
                    "application_config": 1
                },
                "PTR_param1": {
                    "param1": 1
                },
                "PTR_param2": {
                    "param2": 1
                },
                "original_variable_name_1": {
                    "result": 1
                },
                "ret": {
                    "return_value": 1
                },
                "retValue": {
                    "return_value": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "int": 2,
                    "void": 7
                },
                "val": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900",
                "FUN_08005854"
            ],
            "code": "\nvoid initialize_application_0800709e(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_application_0800709e",
            "entrypoint": "0x0800709e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800709e": "initialize_application_0800709e",
                "ret": "return_value",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080070a4": {
            "additional_data": {
                "0x7ff8000000000000": {
                    "infinity": 4,
                    "largest_na_n": 1,
                    "positive_infinity": 10
                },
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_080070a4": {
                    "get_double_infinity": 1,
                    "get_infinity": 20,
                    "get_infinity_value": 3,
                    "get_largest_na_n": 1,
                    "get_negative_infinity": 1,
                    "get_positive_infinity": 5
                },
                "FUN_080070a4_Parameters": {
                    "": 1
                },
                "PTR_": {
                    "unchanged": 1
                },
                "ReturnValue": {
                    "positive_infinity": 1
                },
                "return_value": {
                    "infinity": 1
                },
                "undefined8": {
                    "double": 17
                }
            },
            "called": [],
            "calling": [
                "FUN_08005854",
                "FUN_08006228"
            ],
            "code": "\ndouble get_positive_infinity_080070a4(void)\n\n{\n  return 0x7ff8000000000000;\n}\n\n",
            "current_name": "get_positive_infinity_080070a4",
            "entrypoint": "0x080070a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080070a4": "get_positive_infinity_080070a4",
                "undefined8": "double"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080070b0": {
            "additional_data": {
                "FUN_080070b0": {
                    "calculate": 2,
                    "calculate_advanced_result": 1,
                    "calculate_and_update_result": 2,
                    "calculate_combined_result": 1,
                    "calculate_final_result": 1,
                    "calculate_modified_result": 1,
                    "calculate_result": 17,
                    "calculate_result_with_flags": 1,
                    "calculate_result_with_param": 1,
                    "calculate_signed_binary_result": 1,
                    "calculate_unsigned_binary": 1,
                    "calculate_updated_result": 1
                },
                "calculate_result_0800016c": {
                    "calculate_result": 1,
                    "calculate_result_1": 1
                },
                "calculate_unsigned_binary_result_08000168": {
                    "calculate_result_2": 1,
                    "calculate_unsigned_binary_result": 1
                },
                "iVar1": {
                    "index": 11,
                    "index_var": 2,
                    "shift": 2,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "shifted_input_param": 1,
                    "temp": 1,
                    "temp_index": 1,
                    "temp_var": 1,
                    "temp_var_1": 1,
                    "var1": 1
                },
                "param_1": {
                    "input1": 14,
                    "input_1": 6,
                    "input_a": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_value_1": 7,
                    "input_var1": 1
                },
                "param_2": {
                    "input2": 14,
                    "input_2": 6,
                    "input_b": 1,
                    "input_param2": 1,
                    "input_value_2": 7,
                    "input_var2": 1,
                    "shift_amount": 1
                },
                "param_3": {
                    "input3": 12,
                    "input_3": 6,
                    "input_c": 1,
                    "input_param3": 1,
                    "input_value_3": 7,
                    "input_var3": 1,
                    "param3": 2,
                    "param_3": 1
                },
                "uVar1": {
                    "shift_value": 1,
                    "shifted_input": 1,
                    "shifted_value": 2
                },
                "uVar2": {
                    "calculated_value_1": 1,
                    "calculation_var_1": 1,
                    "constant_value_1": 1,
                    "data_1": 1,
                    "ptr1": 1,
                    "ptr_1": 1,
                    "selected_index": 1,
                    "some_value": 1,
                    "some_value1": 1,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_var1": 1,
                    "temp_var_2": 1,
                    "val2": 1,
                    "val_1": 1,
                    "value1": 1,
                    "value_var1": 1,
                    "var1": 8,
                    "var2": 1,
                    "var_1": 2,
                    "var_2": 2
                },
                "uVar3": {
                    "calculation_var_2": 1,
                    "computed_1": 1,
                    "data_2": 1,
                    "input2_temp": 1,
                    "masked_input_b": 1,
                    "masked_input_value_2": 1,
                    "masked_value_1": 1,
                    "modified_input2": 1,
                    "modified_input_2": 1,
                    "modified_input_var2": 1,
                    "result": 1,
                    "some_value2": 1,
                    "temp1": 1,
                    "temp_2": 1,
                    "temp_var_3": 1,
                    "u_var3": 1,
                    "updated_shift_amount": 1,
                    "updated_value_3": 1,
                    "value_var2": 1,
                    "var2": 6,
                    "var3": 1,
                    "var_2": 2,
                    "var_3": 2
                },
                "uVar4": {
                    "another_value": 1,
                    "calculation_var_3": 1,
                    "constant_value_2": 1,
                    "data_3": 1,
                    "masked_value_2": 1,
                    "ptr2": 1,
                    "ptr_2": 1,
                    "selected_value_1": 1,
                    "some_value3": 1,
                    "temp2": 1,
                    "temp_3": 1,
                    "temp_var2": 1,
                    "temp_var_4": 1,
                    "val1": 1,
                    "val_2": 1,
                    "value2": 1,
                    "value_var3": 1,
                    "var2": 2,
                    "var3": 6,
                    "var4": 1,
                    "var_3": 2,
                    "var_4": 2
                },
                "uVar5": {
                    "calculated_var1": 1,
                    "calculation_var_4": 1,
                    "computed_2": 1,
                    "masked_input": 1,
                    "masked_input_a": 1,
                    "modified_input1": 1,
                    "result": 1,
                    "result_1": 1,
                    "some_value4": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_4": 1,
                    "temp_var3": 1,
                    "temp_var_5": 1,
                    "u_var5": 1,
                    "updated_value_1": 1,
                    "updated_value_5": 1,
                    "var3": 1,
                    "var4": 6,
                    "var5": 1,
                    "var_4": 2,
                    "var_5": 2
                },
                "uVar6": {
                    "bit_shift": 1,
                    "calculated_var2": 1,
                    "calculation_var_5": 1,
                    "difference": 2,
                    "shift_amount": 2,
                    "shifted_bits_diff": 1,
                    "shifted_input": 1,
                    "shifted_input2_minus_ff": 1,
                    "shifted_shift_amount_minus_0x3ff": 1,
                    "some_value5": 1,
                    "temp_5": 1,
                    "temp_var": 1,
                    "temp_var4": 1,
                    "temp_var_6": 1,
                    "updated_value_2": 1,
                    "updated_value_6": 1,
                    "value_1": 1,
                    "var5": 6,
                    "var6": 1,
                    "var_5": 2,
                    "var_6": 2
                },
                "uVar7": {
                    "bit_mask": 1,
                    "calculated_var3": 1,
                    "calculation_var_6": 1,
                    "mask": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shifted_bits": 3,
                    "shifted_input2": 1,
                    "shifted_param2": 1,
                    "shifted_shift_amount": 1,
                    "some_value6": 1,
                    "temp_6": 1,
                    "temp_var5": 1,
                    "temp_var_2": 1,
                    "temp_var_7": 1,
                    "updated_value_7": 1,
                    "value_2": 1,
                    "var6": 6,
                    "var7": 1,
                    "var_6": 2,
                    "var_7": 2
                },
                "uVar8": {
                    "final_result": 2,
                    "result": 26,
                    "result_var": 1,
                    "updated_value_8": 1
                }
            },
            "called": [
                "FUN_08000168",
                "FUN_0800016c"
            ],
            "calling": [
                "FUN_08005900"
            ],
            "code": "\nundefined8 calculate_and_update_result_080070b0(uint input1,uint input2,undefined4 input3)\n\n{\n  int index;\n  undefined4 var1;\n  uint var2;\n  undefined4 var3;\n  uint var4;\n  uint var5;\n  uint var6;\n  undefined8 result;\n  \n  var6 = (input2 << 1) >> 0x15;\n  var5 = var6 - 0x3ff;\n  var2 = input2;\n  if ((int)var5 < 0x14) {\n    if ((int)var5 < 0) {\n      if ((input2 & 0x7fffffff | input1) == 0) {\n        return CONCAT44(input2,input1);\n      }\n      var2 = input2 & 0xfffff | input1;\n      index = ((int)input2 >> 0x1f) * -8;\n      var1 = *(undefined4 *)(&DAT_08007430 + index);\n      var3 = *(undefined4 *)(&DAT_08007434 + index);\n      result = calculate_result(input1,(-var2 | var2) >> 0xc & 0x80000 | input2 & 0xfffe0000,var1,\n                           var3,input1,input2,input3);\n      result = calculate_unsigned_binary_result((int)result,(int)((ulonglong)result >> 0x20),var1,var3);\n      return CONCAT44((uint)((ulonglong)result >> 0x20) & 0x7fffffff | input2 & 0x80000000,\n                      (int)result);\n    }\n    var6 = 0xfffff >> (var5 & 0xff);\n    if ((input2 & var6 | input1) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    var6 = var6 >> 1;\n    var4 = input2 & var6 | input1;\n    if (var4 != 0) {\n      if (var5 == 0x13) {\n        var4 = 0x80000000;\n      }\n      else {\n        var4 = 0;\n      }\n      var2 = 0x40000 >> (var5 & 0xff) | input2 & ~var6;\n    }\n  }\n  else {\n    if (0x33 < (int)var5) {\n      if (var5 != 0x400) {\n        return CONCAT44(input2,input1);\n      }\n      result = calculate_result();\n      return result;\n    }\n    var6 = var6 - 0x413;\n    var5 = 0xffffffff >> (var6 & 0xff);\n    if ((input1 & var5) == 0) {\n      return CONCAT44(input2,input1);\n    }\n    var5 = var5 >> 1;\n    var4 = input1;\n    if ((input1 & var5) != 0) {\n      var4 = 0x40000000 >> (var6 & 0xff) | input1 & ~var5;\n    }\n  }\n  index = ((int)input2 >> 0x1f) * -8;\n  var1 = *(undefined4 *)(&DAT_08007430 + index);\n  var3 = *(undefined4 *)(&DAT_08007434 + index);\n  result = calculate_result(var4,var2,var1,var3,input1,input2,input3);\n  result = calculate_unsigned_binary_result((int)result,(int)((ulonglong)result >> 0x20),var1,var3);\n  return result;\n}\n\n",
            "current_name": "calculate_and_update_result_080070b0",
            "entrypoint": "0x080070b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080070b0": "calculate_and_update_result_080070b0",
                "calculate_result_0800016c": "calculate_result",
                "calculate_unsigned_binary_result_08000168": "calculate_unsigned_binary_result",
                "iVar1": "index",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "uVar2": "var1",
                "uVar3": "var2",
                "uVar4": "var3",
                "uVar5": "var4",
                "uVar6": "var5",
                "uVar7": "var6",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080071c0": {
            "additional_data": {
                "0x1a56e1f": {
                    "constant_5": 1
                },
                "0x35": {
                    "constant_2": 1
                },
                "0x36": {
                    "constant_3": 1
                },
                "0x3c900000": {
                    "constant_6": 1
                },
                "0x7e37e43c": {
                    "constant_8": 1
                },
                "0x8800759c": {
                    "constant_7": 1
                },
                "0xc2f8f359": {
                    "constant_4": 1
                },
                "0xc351": {
                    "constant_1": 1
                },
                "CONCAT44": {
                    "concatenate_44": 1
                },
                "FUNC_0800729c": {
                    "calculate_result3": 1,
                    "calculate_result4": 1,
                    "calculate_result_2": 1,
                    "calculate_result_3": 4,
                    "calculate_result_c": 1,
                    "calculate_result_option_3": 1,
                    "calculate_result_with_params2": 1,
                    "new_function": 1,
                    "some_function": 1
                },
                "FUN_080071c0": {
                    "calculate_combined_result": 1,
                    "calculate_final_result": 4,
                    "calculate_new_result": 1,
                    "calculate_new_value": 2,
                    "calculate_result": 10,
                    "calculate_result1": 1,
                    "calculate_result_and_return": 1,
                    "calculate_result_with_conditions": 4,
                    "calculate_result_with_params": 3,
                    "calculate_updated_value": 2,
                    "calculate_value": 1
                },
                "LAB_080071ec": {
                    "condition2": 1,
                    "handle_shift_zero": 1,
                    "label2": 1,
                    "label_2": 1,
                    "perform_calculation": 1
                },
                "LAB_08007210": {
                    "condition1": 1,
                    "handle_shift_7ff": 1,
                    "label1": 1,
                    "label_1": 1,
                    "skip_calculation": 1
                },
                "LAB_0800722e": {
                    "condition3": 1,
                    "handle_result_calculation": 1,
                    "label3": 1
                },
                "SCARRY4": {
                    "check_carry": 1,
                    "check_overflow": 1,
                    "is_negative": 1,
                    "is_overflowing": 1,
                    "is_sum_negative": 1,
                    "is_sum_overflow": 2,
                    "signed_overflow_check": 1
                },
                "calculate_result_0800016c": {
                    "calculate_result2": 2,
                    "calculate_result3": 1,
                    "calculate_result_16c": 1,
                    "calculate_result_2": 4,
                    "calculate_result_b": 1,
                    "calculate_result_option_2": 1
                },
                "calculate_result_080004d0": {
                    "calculate_result1": 2,
                    "calculate_result2": 1,
                    "calculate_result_1": 4,
                    "calculate_result_a": 1,
                    "calculate_result_d0": 1,
                    "calculate_result_option_1": 1
                },
                "iVar3": {
                    "adjusted_offset": 1,
                    "combined": 1,
                    "combined_modifier": 1,
                    "manipulated_param3": 1,
                    "modified_value": 1,
                    "new_shift_value": 1,
                    "result": 1,
                    "result2": 2,
                    "result_modifier": 1,
                    "shifted_modifier": 1,
                    "sum": 5,
                    "sum_condition_1_3": 1,
                    "sum_result": 2,
                    "temp": 2,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "updated_condition": 1,
                    "updated_offset": 2,
                    "updated_param3": 1,
                    "updated_value": 1,
                    "updated_value_2": 1,
                    "var2": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 8,
                    "input_1": 7,
                    "input_param": 1,
                    "input_param1": 5,
                    "input_param_1": 3,
                    "input_value_1": 6
                },
                "param_2": {
                    "conversion_param": 1,
                    "input2": 8,
                    "input_2": 7,
                    "input_param2": 5,
                    "input_param_2": 3,
                    "input_value_2": 6,
                    "second_param": 1
                },
                "param_3": {
                    "condition": 3,
                    "condition_1": 1,
                    "condition_param": 2,
                    "increment": 1,
                    "input_3": 1,
                    "input_param3": 4,
                    "input_param_3": 2,
                    "modification_factor": 1,
                    "modifier": 6,
                    "offset": 5,
                    "offset_param": 1,
                    "shift_value": 2,
                    "third_param": 1,
                    "value_3": 1
                },
                "param_4": {
                    "additional_param": 6,
                    "additional_parameter": 1,
                    "condition_2": 1,
                    "config_value": 1,
                    "constant": 3,
                    "extra_param": 1,
                    "flag": 2,
                    "fourth_param": 1,
                    "input_4": 1,
                    "input_param4": 4,
                    "input_param_4": 2,
                    "modifier_2": 1,
                    "param4": 1,
                    "param_4": 2,
                    "parameter4": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "value_4": 1
                },
                "uVar1": {
                    "shift_result": 1,
                    "shifted": 1,
                    "shifted_bit": 1,
                    "shifted_bits": 2,
                    "shifted_conversion": 1,
                    "shifted_input": 2,
                    "shifted_input2": 6,
                    "shifted_input_2": 5,
                    "shifted_input_param_2": 1,
                    "shifted_param2": 4,
                    "shifted_value": 7
                },
                "uVar2": {
                    "constant1": 1,
                    "new_u_var2": 1,
                    "result1": 4,
                    "result_1": 6,
                    "result_high": 1,
                    "result_lo": 1,
                    "result_low": 3,
                    "result_part1": 2,
                    "result_part_1": 1,
                    "result_var1": 1,
                    "result_variable_1": 1,
                    "temp1": 2,
                    "temp_value1": 1,
                    "temp_var_1": 1,
                    "updated_value_1": 1,
                    "value_1": 1,
                    "var1": 3
                },
                "uVar4": {
                    "constant1": 2,
                    "constant2": 1,
                    "new_u_var4": 1,
                    "result2": 2,
                    "result_2": 6,
                    "result_hi": 1,
                    "result_high": 3,
                    "result_low": 1,
                    "result_part2": 2,
                    "result_part_2": 1,
                    "result_var2": 1,
                    "result_variable_2": 1,
                    "temp2": 2,
                    "temp_value3": 1,
                    "temp_var_2": 1,
                    "updated_value_3": 1,
                    "value_2": 1,
                    "var2": 2,
                    "var3": 1
                },
                "uVar5": {
                    "high_bits": 4,
                    "input1_high": 1,
                    "input_1_upper": 1,
                    "result_hi_shifted": 1,
                    "result_high": 1,
                    "result_high_shifted": 3,
                    "result_part3": 1,
                    "result_part_1_shifted": 1,
                    "shifted_input1": 1,
                    "shifted_result1": 1,
                    "shifted_result_1": 1,
                    "shifted_result_part1": 1,
                    "shifted_upper_input1": 1,
                    "shifted_value": 1,
                    "upper32": 1,
                    "upper_bits": 4,
                    "upper_bits_of_input_2": 1,
                    "upper_bits_of_input_param_1": 1,
                    "upper_bits_param1": 1,
                    "upper_half_input_1": 1,
                    "upper_input1": 1,
                    "upper_val": 1,
                    "var4": 1
                },
                "uVar6": {
                    "calculated_result": 2,
                    "combined": 1,
                    "combined_input": 1,
                    "combined_inputs": 5,
                    "combined_result": 3,
                    "combined_value": 1,
                    "concatenated_input_params": 1,
                    "final_result": 3,
                    "result": 13,
                    "result_value": 1
                }
            },
            "called": [
                "FUN_080004d0",
                "FUN_0800016c",
                "FUN_0800729c"
            ],
            "calling": [
                "FUN_08006228"
            ],
            "code": "\nundefined8 calculate_final_result_080071c0(uint input1,uint input2,int modifier,undefined4 additional_param)\n\n{\n  uint shifted_value;\n  undefined4 result_1;\n  int sum;\n  undefined4 result_2;\n  uint upper_bits;\n  undefined8 result;\n  \n  result = concatenate_44(input2,input1);\n  shifted_value = (input2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input2 & 0x7fffffff | input1) == 0) {\n      return result;\n    }\n    result = calculate_result_1(input1,input2,0,0x43500000);\n    if (-0xc351 < modifier) {\n      shifted_value = ((uint)((int)((ulonglong)result >> 0x20) << 1) >> 0x15) - 0x36;\n      goto label_1;\n    }\nlabel2:\n    result_1 = 0xc2f8f359;\n    result_2 = 0x1a56e1f;\n  }\n  else {\n    if (shifted_value == 0x7ff) {\n      result = calculate_result_2(input1,input2,input1,input2,additional_param);\n      return result;\n    }\nlabel_1:\n    upper_bits = (uint)((ulonglong)result >> 0x20);\n    result_1 = (undefined4)result;\n    sum = shifted_value + modifier;\n    if (sum < 0x7ff) {\n      if (0 < sum) {\n        return concatenate_44(upper_bits & 0x800fffff | sum * 0x100000,result_1);\n      }\n      if (sum + 0x35 < 0 == is_sum_overflow(sum,0x35)) {\n        result = concatenate_44(upper_bits & 0x800fffff | (sum + 0x36) * 0x100000,result_1);\n        result_1 = 0;\n        result_2 = 0x3c900000;\n        goto condition3;\n      }\n      if (modifier < 0xc351) {\n        result = FUNC_0800729c(0xc2f8f359,0x1a56e1f,result_1,upper_bits);\n        goto label2;\n      }\n    }\n    result = FUNC_0800729c(0x8800759c,0x7e37e43c,result_1,upper_bits);\n    result_1 = 0x8800759c;\n    result_2 = 0x7e37e43c;\n  }\ncondition3:\n  result = calculate_result_1((int)result,(int)((ulonglong)result >> 0x20),result_1,result_2);\n  return result;\n}\n\n",
            "current_name": "calculate_final_result_080071c0",
            "entrypoint": "0x080071c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_44",
                "FUN_080071c0": "calculate_final_result_080071c0",
                "LAB_080071ec": "label2",
                "LAB_08007210": "label_1",
                "LAB_0800722e": "condition3",
                "SCARRY4": "is_sum_overflow",
                "calculate_result_0800016c": "calculate_result_2",
                "calculate_result_080004d0": "calculate_result_1",
                "iVar3": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "modifier",
                "param_4": "additional_param",
                "uVar1": "shifted_value",
                "uVar2": "result_1",
                "uVar4": "result_2",
                "uVar5": "upper_bits",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800729c": {
            "called": [],
            "calling": [
                "FUN_080071c0"
            ],
            "code": "\nvoid FUNC_0800729c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800729c",
            "entrypoint": "0x0800729c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800729c": "FUNC_0800729c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080072ac": {
            "additional_data": {
                "DAT_200001c0": {
                    "data": 14,
                    "data_value": 4,
                    "value": 1
                },
                "FUN_080072ac": {
                    "get_data": 16,
                    "get_data_pointer": 1,
                    "get_data_value": 11,
                    "get_global_value": 2,
                    "get_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005bc8",
                "FUN_08005900",
                "FUN_08005854"
            ],
            "code": "\nundefined4 get_data_value_080072ac(void)\n\n{\n  return DAT_200001c0;\n}\n\n",
            "current_name": "get_data_value_080072ac",
            "entrypoint": "0x080072ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080072ac": "get_data_value_080072ac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080072b8": {
            "additional_data": {
                "DAT_200002b4": {
                    "counter": 1,
                    "current_data": 2,
                    "current_offset": 1,
                    "current_pointer": 7,
                    "data": 1,
                    "data_pointer": 8,
                    "data_ptr": 2,
                    "global_pointer": 1,
                    "pointer": 3
                },
                "DAT_200016a0": {
                    "base_address": 1,
                    "default_data": 6,
                    "default_data_pointer": 2,
                    "default_pointer": 3
                },
                "FUN_080072b8": {
                    "accumulate_value": 1,
                    "add_offset_to_data": 1,
                    "add_offset_to_global_pointer": 1,
                    "add_offset_to_pointer": 3,
                    "increment_offset": 1,
                    "increment_pointer": 1,
                    "update_counter": 1,
                    "update_data": 9,
                    "update_data_offset": 1,
                    "update_data_pointer": 4,
                    "update_pointer": 8
                },
                "param_1": {
                    "amount": 5,
                    "increment": 6,
                    "increment_amount": 1,
                    "increment_value": 2,
                    "new_value": 1,
                    "offset": 10,
                    "value": 3,
                    "value_to_add": 2,
                    "value_to_update": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800581c"
            ],
            "code": "\nvoid update_data_pointer_080072b8(int offset)\n\n{\n  if (DAT_200002b4 == (undefined *)0x0) {\n    DAT_200002b4 = &DAT_200016a0;\n  }\n  DAT_200002b4 = DAT_200002b4 + offset;\n  return;\n}\n\n",
            "current_name": "update_data_pointer_080072b8",
            "entrypoint": "0x080072b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080072b8": "update_data_pointer_080072b8",
                "param_1": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080072d4": {
            "called": [],
            "calling": [
                "FUN_08000110",
                "FUN_08004fb4",
                "FUN_08000134"
            ],
            "code": "\nvoid FUNC_080072d4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080072d4",
            "entrypoint": "0x080072d4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080072d4": "FUNC_080072d4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080072e0": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_080072e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080072e0",
            "entrypoint": "0x080072e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080072e0": "FUNC_080072e0"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_08004f10",
                "FUN_08004fb4",
                "FUN_080041ae"
            ],
            "calling": [],
            "code": "\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_20000228; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x8007448);\n  }\n  for (puVar2 = &DAT_20000228; puVar2 < &DAT_200016a0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_peripheral_registers_08004f10();\n  execute_all_functions_08004fb4();\n  UNRECOVERED_JUMPTABLE = (code *)0x8004f9a;\n  process_sensor_data_loop_080041ae();\n                    /* WARNING: Could not recover jumptable at 0x08004f9a. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x08004f68",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_0800115c": {
            "additional_data": {
                "DAT_20000244": {
                    "data": 11,
                    "global_constant": 1,
                    "global_data": 1,
                    "global_variable": 3,
                    "global_variable_value": 1,
                    "result": 1,
                    "retrieved_value": 1,
                    "value": 1
                },
                "thunk_FUN_0800115c": {
                    "get_dat_20000244": 1,
                    "get_data": 11,
                    "get_data_from_address": 1,
                    "get_data_value": 7,
                    "get_global_constant": 1,
                    "get_global_data": 1,
                    "get_global_value": 1,
                    "get_global_variable": 2,
                    "get_global_variable_value": 3,
                    "get_value": 2,
                    "retrieve_value": 1
                },
                "undefined4": {
                    "uint32_t": 1
                }
            },
            "called": [
                "FUN_0800115c"
            ],
            "calling": [
                "FUN_08002f28"
            ],
            "code": "\nuint32_t get_data_value_thunk_0800115c(void)\n\n{\n  return DAT_20000244;\n}\n\n",
            "current_name": "get_data_value_thunk_0800115c",
            "entrypoint": "0x08004f60",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_0800115c": "get_data_value_thunk_0800115c",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08001168": {
            "called": [
                "FUN_08001168"
            ],
            "calling": [
                "FUN_0800403c",
                "FUN_08003298",
                "FUN_08004028",
                "FUN_08004490"
            ],
            "code": "\nvoid thunk_FUNC_08001168(void)\n\n{\n  return;\n}\n\n",
            "current_name": "thunk_FUNC_08001168",
            "entrypoint": "0x08004f64",
            "imported": false,
            "improved": false,
            "renaming": {
                "thunk_FUN_08001168": "thunk_FUNC_08001168"
            },
            "skipped": true,
            "tags": []
        },
        "thunk_FUN_08006070": {
            "additional_data": {
                "FUNC_0800708c": {
                    "func": 1,
                    "perform_additional_calculations": 1
                },
                "calculate_floating_point_value_08000724": {
                    "calculate_floating_point_value": 2
                },
                "calculate_improved_result_08006d68": {
                    "calculate_improved_result": 2
                },
                "calculate_result_0800016c": {
                    "calculate_result": 1,
                    "calculate_result_with_input": 1
                },
                "calculate_unsigned_binary_result_08000168": {
                    "calculate_unsigned_binary_result": 2
                },
                "iVar4": {
                    "diff": 1,
                    "difference": 9,
                    "difference_exponents": 1,
                    "result4": 6,
                    "result_4": 6,
                    "result_difference": 1,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_value_2": 1,
                    "temp_var": 2,
                    "var4": 1
                },
                "param_1": {
                    "argument_1": 1,
                    "exponent1": 1,
                    "first_param": 1,
                    "float_param1": 1,
                    "input1": 12,
                    "input_1": 11,
                    "number_1": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "argument_2": 1,
                    "float_param2": 1,
                    "input2": 12,
                    "input_2": 11,
                    "number_2": 1,
                    "second_param": 1,
                    "significand1": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "argument_3": 1,
                    "exponent2": 1,
                    "float_param3": 1,
                    "input3": 12,
                    "input_3": 11,
                    "number_3": 1,
                    "third_param": 1,
                    "value3": 1,
                    "value_3": 1
                },
                "param_4": {
                    "argument_4": 1,
                    "float_param4": 1,
                    "fourth_param": 1,
                    "input4": 12,
                    "input_4": 11,
                    "number_4": 1,
                    "significand2": 1,
                    "value4": 1,
                    "value_4": 1
                },
                "thunk_FUN_08006070": {
                    "calculate": 3,
                    "calculate_final_result": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point_value": 4,
                    "calculate_improved_value": 1,
                    "calculate_output": 1,
                    "calculate_result": 20
                },
                "uVar1": {
                    "converted_result": 1,
                    "result": 5,
                    "result1": 8,
                    "result_1": 7,
                    "result_low": 1,
                    "temp1": 1,
                    "u_var1": 1,
                    "var1": 1
                },
                "uVar2": {
                    "condition_1": 1,
                    "flag": 4,
                    "flags": 2,
                    "number_flags": 1,
                    "param_mask": 1,
                    "result2": 6,
                    "result_2": 7,
                    "result_type": 1,
                    "shift": 1,
                    "shifted": 1,
                    "shifted_param2": 1,
                    "sign_bit1": 1,
                    "sign_bit_mask": 1,
                    "sign_flags": 1,
                    "temp2": 1,
                    "var2": 1
                },
                "uVar3": {
                    "abs_input2": 3,
                    "abs_value_2": 1,
                    "condition_2": 1,
                    "input2_abs": 1,
                    "input2_unsigned": 1,
                    "input_2_masked": 1,
                    "modified_number_2": 1,
                    "param2_masked": 1,
                    "param_2_masked": 1,
                    "result2": 2,
                    "result3": 6,
                    "result_3": 7,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_value_1": 1,
                    "u_var3": 1,
                    "var3": 1
                },
                "uVar4": {
                    "difference": 1
                },
                "uVar5": {
                    "abs_input4": 4,
                    "abs_input_4": 1,
                    "abs_value": 1,
                    "abs_value_4": 1,
                    "input4_abs": 1,
                    "input4_unsigned": 1,
                    "input_4_masked": 1,
                    "modified_number_4": 1,
                    "param4_masked": 1,
                    "param_4_masked": 1,
                    "positive_significand2": 1,
                    "result5": 5,
                    "result_4": 1,
                    "result_5": 6,
                    "temp1": 1,
                    "temp5": 1,
                    "temp_3": 1,
                    "u_var5": 1,
                    "var5": 1
                },
                "uVar6": {
                    "final_result": 10,
                    "final_result1": 1,
                    "improved_result": 1,
                    "improved_result1": 1,
                    "output": 2,
                    "output_1": 1,
                    "result": 11,
                    "result1": 2,
                    "temp2": 1
                },
                "uVar7": {
                    "binary_result": 16,
                    "final_result2": 1,
                    "improved_result2": 1,
                    "other_result": 1,
                    "output_2": 1,
                    "result2": 2,
                    "result6": 1,
                    "result7": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "unsigned_binary_result": 1,
                    "unsigned_result": 2
                }
            },
            "called": [
                "FUN_08006070"
            ],
            "calling": [
                "FUN_08003330"
            ],
            "code": "\nundefined8 calculate_final_result_thunk_08006070(uint input1,uint input2,uint input3,uint input4)\n\n{\n  undefined4 result1;\n  uint result_2;\n  uint result_3;\n  int difference;\n  uint result_5;\n  undefined8 result;\n  undefined8 binary_result;\n  \n  result_5 = input4 & 0x7fffffff;\n  if ((0x7ff00000 < (result_5 | (-input3 | input3) >> 0x1f)) ||\n     (result_3 = input2 & 0x7fffffff, 0x7ff00000 < (result_3 | (-input1 | input1) >> 0x1f))) {\n    result = calculate_result_with_input(input1,input2,input3,input4,input4);\n    return result;\n  }\n  if ((input4 + 0xc0100000 | input3) == 0) {\n    result = calculate_improved_result();\n    return result;\n  }\n  result_2 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n  if ((input1 | result_3) == 0) {\n    if (result_2 == 2) {\n      return 0x400921fb54442d18;\n    }\n    if (result_2 != 3) {\n      return CONCAT44(input2,input1);\n    }\nLAB_0800613e:\n    result = 0xc00921fb54442d18;\n  }\n  else {\n    if ((input3 | result_5) != 0) {\n      if (result_5 == 0x7ff00000) {\n        if (result_3 == 0x7ff00000) {\n          if (result_2 == 2) {\n            return 0x4002d97c7f3321d2;\n          }\n          if (result_2 == 3) {\n            return 0xc002d97c7f3321d2;\n          }\n          if (result_2 != 1) {\n            return 0x3fe921fb54442d18;\n          }\n          return 0xbfe921fb54442d18;\n        }\n        if (result_2 == 2) {\n          return 0x400921fb54442d18;\n        }\n        if (result_2 != 3) {\n          if (result_2 != 1) {\n            return 0;\n          }\n          return 0x8000000000000000;\n        }\n        goto LAB_0800613e;\n      }\n      if (result_3 != 0x7ff00000) {\n        difference = (int)(result_3 - result_5) >> 0x14;\n        if (difference < 0x3d) {\n          if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n            result = 0;\n          }\n          else {\n            calculate_floating_point_value(input1,input2);\n            FUNC_0800708c();\n            result = calculate_improved_result();\n          }\n        }\n        else {\n          result = 0x3ff921fb54442d18;\n        }\n        difference = (int)((ulonglong)result >> 0x20);\n        result1 = (undefined4)result;\n        if (result_2 == 1) {\n          return CONCAT44(difference + -0x80000000,result1);\n        }\n        if (result_2 == 2) {\n          binary_result = calculate_unsigned_binary_result(result1,difference,0x33145c07,0x3ca1a626);\n          result = 0x400921fb54442d18;\n        }\n        else {\n          if (result_2 == 0) {\n            return result;\n          }\n          result = calculate_unsigned_binary_result(result1,difference,0x33145c07,0x3ca1a626);\n          binary_result = 0x400921fb54442d18;\n        }\n        result = calculate_unsigned_binary_result((int)result,(int)((ulonglong)result >> 0x20),(int)binary_result,\n                             (int)((ulonglong)binary_result >> 0x20));\n        return result;\n      }\n    }\n    if ((int)input2 < 0) {\n      result = 0xbff921fb54442d18;\n    }\n    else {\n      result = 0x3ff921fb54442d18;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_final_result_thunk_08006070",
            "entrypoint": "0x080058fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "calculate_floating_point_value_08000724": "calculate_floating_point_value",
                "calculate_improved_result_08006d68": "calculate_improved_result",
                "calculate_result_0800016c": "calculate_result_with_input",
                "calculate_unsigned_binary_result_08000168": "calculate_unsigned_binary_result",
                "iVar4": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "thunk_FUN_08006070": "calculate_final_result_thunk_08006070",
                "uVar1": "result1",
                "uVar2": "result_2",
                "uVar3": "result_3",
                "uVar5": "result_5",
                "uVar6": "result",
                "uVar7": "binary_result"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000110",
            "FUN_08000134",
            "FUN_08000150",
            "FUN_08000168",
            "FUN_0800016c",
            "FUN_08000404",
            "FUN_08000428",
            "FUN_080006ac",
            "FUN_08000892",
            "FUN_08000904",
            "FUN_08000a04",
            "FUN_08000a30",
            "FUN_08000ad8",
            "FUN_08000adc",
            "FUN_08000c3c",
            "FUN_08000c44",
            "FUN_08000cec",
            "FUN_08000e54",
            "FUN_08000f9c",
            "FUN_08001078",
            "FUN_080010c4",
            "FUN_0800114c",
            "FUN_0800115c",
            "FUN_08001170",
            "FUN_08001194",
            "FUN_080011fc",
            "FUN_08001214",
            "FUN_08001240",
            "FUN_08001264",
            "FUN_08001424",
            "FUN_0800142e",
            "FUN_08001436",
            "FUN_08002008",
            "FUN_08002214",
            "FUN_08002220",
            "FUN_08002250",
            "FUN_08002280",
            "FUN_080022d0",
            "FUN_08002324",
            "FUN_08002368",
            "FUN_08002404",
            "FUN_08002520",
            "FUN_08002564",
            "FUN_080025a4",
            "FUN_08002ed4",
            "FUN_08003068",
            "FUN_08003314",
            "FUN_08003320",
            "FUN_08003eb0",
            "FUN_08003ec8",
            "FUN_08003fc4",
            "FUN_08003fd0",
            "FUN_08003fdc",
            "FUN_08003fe8",
            "FUN_08004c64",
            "FUN_08004d8c",
            "FUN_08004f10",
            "thunk_FUN_0800115c",
            "FUN_08004fb4",
            "FUN_080052e4",
            "FUN_08005614",
            "FUN_08005630",
            "FUN_08005646",
            "FUN_0800567c",
            "FUN_08005840",
            "FUN_08007092",
            "FUN_0800709e",
            "FUN_080070a4",
            "FUN_080072ac",
            "FUN_080072b8"
        ],
        [
            "FUN_080004d0",
            "FUN_08000724",
            "FUN_08000990",
            "FUN_08001004",
            "FUN_08001104",
            "FUN_08001460",
            "FUN_080014e2",
            "FUN_080016f4",
            "FUN_08001b58",
            "FUN_080023d0",
            "FUN_0800245c",
            "FUN_08002538",
            "FUN_080025e8",
            "FUN_08002ec0",
            "FUN_08003f3c",
            "FUN_080041c4",
            "FUN_0800426c",
            "FUN_08004a30",
            "FUN_08004c18",
            "FUN_08004c30",
            "FUN_08004c70",
            "FUN_08004ccc",
            "FUN_08004d48",
            "FUN_08004e14",
            "FUN_08004e7c",
            "FUN_080053d4",
            "FUN_0800581c",
            "FUN_080070b0"
        ],
        [
            "FUN_08000980",
            "FUN_080009a0",
            "FUN_080009b4",
            "FUN_080009c8",
            "FUN_08000ffc",
            "FUN_08001014",
            "FUN_08001028",
            "FUN_08001128",
            "FUN_08001530",
            "FUN_080015e8",
            "FUN_08001754",
            "FUN_0800209c",
            "FUN_08002724",
            "FUN_0800290c",
            "FUN_08003ff4",
            "FUN_08004c8c",
            "FUN_08005714",
            "FUN_08006c0c",
            "FUN_080071c0"
        ],
        [
            "FUN_080009f0",
            "FUN_08001050",
            "FUN_08001064",
            "FUN_08001828",
            "FUN_08001938",
            "FUN_0800299a",
            "FUN_08004300",
            "FUN_080057d0",
            "FUN_08005bc8"
        ],
        [
            "FUN_08002ee8",
            "FUN_08004348",
            "FUN_08004384",
            "FUN_080043bc",
            "FUN_080043f0",
            "FUN_08004410",
            "FUN_08004434",
            "FUN_08004458",
            "FUN_0800483c",
            "FUN_08005044",
            "FUN_08005c70",
            "FUN_08006228",
            "FUN_08006d68"
        ],
        [
            "FUN_08004a84",
            "FUN_080050fc",
            "FUN_08005854",
            "thunk_FUN_08006070",
            "FUN_08005900",
            "FUN_08006070"
        ],
        [
            "FUN_08003330",
            "FUN_08004ffc"
        ],
        [
            "FUN_08004cac"
        ],
        [
            "FUN_08004490"
        ],
        [
            "FUN_0800403c",
            "FUN_0800407c",
            "FUN_080040b8",
            "FUN_08004514"
        ],
        [
            "FUN_08002ad0",
            "FUN_08003034",
            "FUN_080040e8",
            "FUN_0800458c"
        ],
        [
            "FUN_08002b48",
            "FUN_08002bf0",
            "FUN_08002cb0",
            "FUN_08002d88",
            "FUN_08003298",
            "FUN_08004028"
        ],
        [
            "FUN_08002ea0",
            "FUN_08002f28"
        ],
        [
            "FUN_0800411c",
            "FUN_08004194"
        ],
        [
            "FUN_080041ae"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 745548
}