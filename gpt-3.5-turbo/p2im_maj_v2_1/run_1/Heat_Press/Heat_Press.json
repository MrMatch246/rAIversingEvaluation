{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_2007089c": {
                    "flag": 16,
                    "flag_status": 1,
                    "flag_variable": 2
                },
                "FUN_000800f4": {
                    "initialize_flag": 20,
                    "initialize_flag_if_needed": 1,
                    "set_flag": 1,
                    "set_flag_if_unset": 5,
                    "update_flag": 3,
                    "update_flag_if_needed": 1
                },
                "param_1": {
                    "flag": 1,
                    "input": 15,
                    "input_param": 1,
                    "input_parameter": 3,
                    "input_value": 8,
                    "value": 3
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_if_needed_000800f4(undefined4 input)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_if_needed_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_needed_000800f4",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "FUN_00080164": {
                    "extract_data": 1,
                    "initialize_and_execute": 3,
                    "initialize_application": 1,
                    "initialize_data": 13,
                    "initialize_data_and_execute": 1,
                    "initialize_data_structures": 1,
                    "initialize_function": 1,
                    "initialize_param": 1,
                    "initialize_parameters": 8,
                    "update_parameter_values": 1
                },
                "PTR_DAT_20070b60": {
                    "data_pointer": 1
                },
                "PTR_FUN_00080164": {
                    "function_pointer": 1
                },
                "iVar1": {
                    "iteration": 1,
                    "loop_condition": 2,
                    "loop_counter": 1,
                    "result": 10,
                    "return_code": 1,
                    "return_value": 16
                },
                "param_1": {
                    "app_data": 1,
                    "data": 4,
                    "data_pointer": 8,
                    "data_ptr": 3,
                    "data_structures": 1,
                    "input_pointer": 1,
                    "param": 1,
                    "param_array": 1,
                    "parameter": 3,
                    "parameter_array": 3,
                    "parameter_list": 2,
                    "parameters": 3
                },
                "update_parameter_value_00081210": {
                    "update_param_value1": 2,
                    "update_param_value_1": 1,
                    "update_param_value_a": 1,
                    "update_parameter1": 2,
                    "update_parameter_value": 4,
                    "update_parameter_value1": 5
                },
                "update_parameter_value_00081318": {
                    "reset_parameter_value": 1,
                    "update_param_value2": 2,
                    "update_param_value_2": 1,
                    "update_param_value_b": 1,
                    "update_parameter2": 2,
                    "update_parameter_flag": 1,
                    "update_parameter_status": 2,
                    "update_parameter_value2": 5
                }
            },
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000804a8"
            ],
            "code": "\nvoid initialize_data_structures_00080164(int **data_pointer)\n\n{\n  int return_value;\n  \n  *data_pointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data_pointer + 6)) {\n    update_parameter_value1(*(byte *)((int)data_pointer + 6),1);\n    update_parameter_value2(*(undefined *)((int)data_pointer + 6),0);\n  }\n  do {\n    return_value = (**(code **)(**data_pointer + 0xc))();\n  } while (-1 < return_value);\n  *(undefined *)((int)data_pointer + 0x49) = 0;\n  *(undefined *)((int)data_pointer + 0x4a) = 0;\n  *(undefined2 *)(data_pointer + 0x15) = 0;\n  *(undefined2 *)((int)data_pointer + 0x52) = 0;\n  *(undefined2 *)(data_pointer + 0x14) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "initialize_data_structures_00080164",
                "iVar1": "return_value",
                "param_1": "data_pointer",
                "update_parameter_value_00081210": "update_parameter_value1",
                "update_parameter_value_00081318": "update_parameter_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801b0": {
            "additional_data": {
                "FUN_000801b0": {
                    "decode_and_update_parameters": 1,
                    "process_data": 6,
                    "process_param1": 1,
                    "process_parameter": 12,
                    "process_parameter_array": 2,
                    "process_parameter_updates": 1,
                    "update_and_count_characters": 1,
                    "update_parameter_value": 6,
                    "update_parameter_values": 1
                },
                "PTR_FUN_00081318": {
                    "function_pointer1": 1
                },
                "PTR_FUN_0008131C": {
                    "function_pointer2": 1
                },
                "bVar1": {
                    "exceed_limit": 1,
                    "exceeded_limit": 2,
                    "exceeded_max_count": 1,
                    "exceeded_threshold": 2,
                    "found_overflow": 1,
                    "has_overflow": 1,
                    "is_exceed_threshold": 1,
                    "is_exceeded": 2,
                    "is_full": 1,
                    "is_max_reached": 1,
                    "is_over_limit": 2,
                    "is_overflow": 16
                },
                "bVar5": {
                    "byte_value": 4,
                    "character_count": 1,
                    "character_index": 1,
                    "count": 2,
                    "counter": 4,
                    "current_char": 1,
                    "current_count": 1,
                    "current_index": 2,
                    "current_position": 1,
                    "current_value": 2,
                    "num_iterations": 1,
                    "offset": 1,
                    "old_counter_value": 1,
                    "temp": 3,
                    "temp_byte": 3,
                    "temp_counter": 3
                },
                "cVar3": {
                    "char_value": 4,
                    "character": 2,
                    "count": 3,
                    "counter": 14,
                    "current_char": 1,
                    "current_count": 1,
                    "current_value": 1,
                    "new_char": 1,
                    "param_count": 1,
                    "result": 2,
                    "value_to_return": 1
                },
                "code": {
                    "function": 1
                },
                "count": {
                    "count": 1
                },
                "counter": {
                    "counter": 1
                },
                "iVar4": {
                    "function_result": 2,
                    "result": 18,
                    "return_value": 11
                },
                "inputData": {
                    "input_data": 1
                },
                "param_1": {
                    "data": 5,
                    "input_data": 1,
                    "param": 2,
                    "param_array": 2,
                    "param_list": 1,
                    "parameter": 7,
                    "parameter_array": 2,
                    "parameter_list": 5,
                    "parameter_values": 1,
                    "parameters": 5
                },
                "parameterValue": {
                    "parameter_value": 1
                },
                "processData": {
                    "process_data": 1
                },
                "result": {
                    "result": 1
                },
                "uVar2": {
                    "new_value": 2,
                    "param_value": 2,
                    "parameter_value": 15,
                    "result": 1,
                    "updated_value": 3,
                    "value": 7
                },
                "update_parameter_value_00081318": {
                    "update_parameter": 1,
                    "update_parameter_value": 6
                }
            },
            "called": [
                "FUN_00081318"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nint process_parameter_array_000801b0(int **parameter)\n\n{\n  bool is_overflow;\n  undefined parameter_value;\n  char counter;\n  int result;\n  byte byte_value;\n  \n  if (1 < *(byte *)((int)parameter + 6)) {\n    update_parameter_value(*(byte *)((int)parameter + 6),0);\n  }\n  is_overflow = false;\n  *(undefined *)((int)parameter + 0x49) = 0;\n  if (*(byte *)((int)parameter + 5) < 4) {\n    while (result = (**(function **)(**parameter + 8))(), result != 0) {\n      byte_value = *(byte *)((int)parameter + 0x49);\n      parameter_value = (**(function **)(**parameter + 0xc))();\n      counter = *(char *)((int)parameter + 0x49);\n      *(undefined *)((int)parameter + byte_value + 9) = parameter_value;\n      byte_value = counter + 1;\n      *(byte *)((int)parameter + 0x49) = byte_value;\n      if (0x3f < byte_value) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(short *)(parameter + 0x14) = *(short *)(parameter + 0x14) + 1;\n  if (is_overflow) {\n    counter = -3;\n    *(short *)(parameter + 0x15) = *(short *)(parameter + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)parameter + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "current_name": "process_parameter_array_000801b0",
            "entrypoint": "0x000801b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801b0": "process_parameter_array_000801b0",
                "bVar1": "is_overflow",
                "bVar5": "byte_value",
                "cVar3": "counter",
                "code": "function",
                "iVar4": "result",
                "param_1": "parameter",
                "uVar2": "parameter_value",
                "update_parameter_value_00081318": "update_parameter_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008021c": {
            "additional_data": {
                "0xffff": {
                    "initial_crc": 1
                },
                "FUN_0008021c": {
                    "calculate_checksum": 26,
                    "calculate_crc": 4,
                    "xor_rotate_bytes": 1
                },
                "cVar3": {
                    "bit_count": 7,
                    "bit_counter": 13,
                    "bit_index": 1,
                    "bit_position": 1,
                    "bit_shift": 2,
                    "counter": 3,
                    "shift_count": 2
                },
                "iVar1": {
                    "current_address": 7,
                    "current_byte": 2,
                    "current_index": 13,
                    "index": 5,
                    "loop_index": 1
                },
                "param_1": {
                    "data": 1,
                    "data_address": 3,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "data_start": 8,
                    "data_start_index": 4,
                    "input_address": 2,
                    "input_data": 1,
                    "start_address": 4,
                    "start_index": 3
                },
                "param_2": {
                    "data_length": 21,
                    "input_length": 2,
                    "length": 8
                },
                "uVar2": {
                    "checksum": 22,
                    "crc": 2,
                    "crc_value": 2,
                    "result": 1,
                    "temp": 1,
                    "updated_checksum": 1
                },
                "uVar2_new": {
                    "updated_checksum": 1
                },
                "uVar4": {
                    "bit": 15,
                    "bit_result": 1,
                    "bit_shifted": 1,
                    "bit_value": 9,
                    "lsb": 1,
                    "shifted_bit": 1,
                    "temp": 1
                },
                "uVar5": {
                    "shifted_result": 1,
                    "temp": 2,
                    "temp_checksum": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080258"
            ],
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_counter;\n  uint bit;\n  \n  checksum = 0xffff;\n  for (current_index = data_start; (current_index - data_start & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_counter = '\\b';\n    do {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "current_name": "calculate_checksum_0008021c",
            "entrypoint": "0x0008021c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "cVar3": "bit_counter",
                "iVar1": "current_index",
                "param_1": "data_start",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar4": "bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080258": {
            "additional_data": {
                "FUN_00080258": {
                    "calculate_and_set_checksum": 1,
                    "calculate_and_update_checksum": 2,
                    "calculate_checksum_and_update": 2,
                    "update_and_calculate_checksum": 1,
                    "update_checksum": 9,
                    "update_checksum_and_parameter": 2,
                    "update_checksum_and_parameters": 1,
                    "update_checksum_and_value": 1,
                    "update_checksum_and_values": 12
                },
                "bVar1": {
                    "byte1": 1,
                    "byte_val": 3,
                    "byte_value": 15,
                    "byte_var": 2,
                    "checksum": 2,
                    "checksum_byte": 6,
                    "current_byte": 1,
                    "current_value": 1
                },
                "calculateChecksum": {
                    "calculate_checksum": 1
                },
                "calculate_checksum_0008021c": {
                    "calculate_checksum": 7
                },
                "getGlobalVarValue": {
                    "get_global_var_value": 1
                },
                "getGlobalVariableValue": {
                    "get_global_variable_value": 1
                },
                "get_global_variable_value_thunk_00081714": {
                    "get_global_var_value": 1,
                    "get_global_variable_value": 5,
                    "get_global_variable_value_thunk": 2
                },
                "iVar3": {
                    "counter": 1,
                    "int_value": 1,
                    "loop_counter": 1,
                    "loop_variable": 1,
                    "result": 10,
                    "return_value": 12,
                    "update_result": 2,
                    "value": 1,
                    "variable": 1,
                    "variable3": 1
                },
                "param_1": {
                    "array_ptr": 1,
                    "checksum_data": 1,
                    "checksum_ptr": 1,
                    "data": 13,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "function_params": 1,
                    "input_array": 2,
                    "input_data": 2,
                    "param": 1,
                    "param_array": 1,
                    "parameter": 2,
                    "parameter_array": 1,
                    "parameters": 2,
                    "ptr_to_values": 1
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 1,
                    "checksum_param_2": 1,
                    "param1": 1,
                    "param2": 19,
                    "param_2": 4,
                    "size1": 1,
                    "unused_param1": 1,
                    "value1": 1,
                    "value2": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 1,
                    "checksum_param_3": 1,
                    "param2": 1,
                    "param3": 19,
                    "param_3": 4,
                    "size2": 1,
                    "unused_param2": 1,
                    "value2": 1,
                    "value3": 1
                },
                "param_4": {
                    "arg3": 1,
                    "arg4": 1,
                    "checksum_param_4": 1,
                    "param3": 1,
                    "param4": 19,
                    "param_4": 4,
                    "size3": 1,
                    "unused_param3": 1,
                    "value3": 1,
                    "value4": 1
                },
                "uVar2": {
                    "calculated_checksum": 3,
                    "checksum": 26,
                    "checksum_result": 2
                },
                "uVar4": {
                    "byte1_as_uint": 1,
                    "byte_val_as_uint": 1,
                    "byte_val_u_int": 1,
                    "byte_value": 2,
                    "byte_value_as_int": 1,
                    "byte_value_as_u_int": 1,
                    "byte_value_as_uint": 3,
                    "byte_value_converted": 2,
                    "byte_value_uint": 1,
                    "byte_var2": 1,
                    "checksum_as_u_int": 1,
                    "checksum_byte_as_uint": 1,
                    "checksum_int": 1,
                    "checksum_uint": 1,
                    "checksum_value": 3,
                    "converted_byte_value": 3,
                    "converted_checksum": 1,
                    "index": 2,
                    "int_value": 1,
                    "temp_value": 1,
                    "uint_value": 1,
                    "value": 1
                },
                "updateChecksumAndValue": {
                    "update_checksum_and_value": 1
                },
                "updateChecksumAndValues": {
                    "update_checksum_and_values": 1
                },
                "updateParamValue": {
                    "update_param_value": 1
                },
                "update_parameter_value_00081318": {
                    "update_param_value": 1,
                    "update_parameter_value": 7
                }
            },
            "called": [
                "FUN_0008021c",
                "thunk_FUN_00081714",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000802da"
            ],
            "code": "\nvoid update_checksum_and_values_00080258(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byte_value;\n  undefined2 checksum;\n  int return_value;\n  uint byte_value_as_uint;\n  \n  byte_value = *(byte *)((int)data + 0x49);\n  byte_value_as_uint = (uint)byte_value;\n  checksum = calculate_checksum(data,byte_value_as_uint,param3,param4,param4);\n  *(char *)((int)data + byte_value_as_uint + 9) = (char)((ushort)checksum >> 8);\n  *(char *)((int)data + (byte_value_as_uint + 1 & 0xff) + 9) = (char)checksum;\n  *(byte *)((int)data + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameter_value(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    update_parameter_value(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      return_value = (**(code **)(**data + 0xc))();\n    } while (-1 < return_value);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  return_value = get_global_variable_value();\n  data[0x17] = (int *)(return_value + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "current_name": "update_checksum_and_values_00080258",
            "entrypoint": "0x00080258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080258": "update_checksum_and_values_00080258",
                "bVar1": "byte_value",
                "calculate_checksum_0008021c": "calculate_checksum",
                "get_global_variable_value_thunk_00081714": "get_global_variable_value",
                "iVar3": "return_value",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "checksum",
                "uVar4": "byte_value_as_uint",
                "update_parameter_value_00081318": "update_parameter_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000802da": {
            "additional_data": {
                "FUN_000802da": {
                    "extract_data": 1,
                    "extract_parameters": 1,
                    "initialize_device": 1,
                    "initialize_parameters": 1,
                    "initialize_values": 1,
                    "parse_data": 2,
                    "process_data": 4,
                    "process_params": 1,
                    "update_function": 1,
                    "update_param_values": 1,
                    "update_parameters": 1,
                    "update_parameters_and_values": 2,
                    "update_values_and_checksum": 1,
                    "validate_and_setup_parameters": 1,
                    "validate_data": 1,
                    "validate_input_parameters": 1,
                    "validate_parameters": 5,
                    "validate_params": 1
                },
                "bVar2": {
                    "b_var": 1,
                    "byte_2": 1,
                    "byte_val": 1,
                    "byte_value": 5,
                    "byte_var": 7,
                    "loop_counter": 1,
                    "temp_byte": 12,
                    "var1": 1
                },
                "cVar1": {
                    "error_code": 13,
                    "result": 14,
                    "result_code": 1,
                    "return_value": 1,
                    "status": 1
                },
                "local_18": {
                    "byte_3": 1,
                    "data_length": 1,
                    "input_ushort": 1,
                    "local_ushort": 1,
                    "local_var3": 2,
                    "local_var_3": 1,
                    "lower_byte_param_3": 1,
                    "lower_word": 1,
                    "param2_lower_byte": 1,
                    "param3_low16": 1,
                    "param3_low_word": 1,
                    "param3_lowushort": 1,
                    "param_3_low_word": 1,
                    "param_3_lower_short": 1,
                    "payload_length": 1,
                    "temp_short2": 1,
                    "temp_u_short_value": 1,
                    "temp_var_3": 1,
                    "ushort1": 1,
                    "ushort_val": 1,
                    "ushort_value": 3,
                    "ushort_var2": 1,
                    "value_as_short": 1,
                    "value_low": 1,
                    "var3": 1,
                    "var8": 1
                },
                "local_1b": {
                    "byte2": 5,
                    "byte_2": 1,
                    "config_upper_byte": 1,
                    "flags_high": 1,
                    "header_high_byte": 1,
                    "input_16bit": 1,
                    "local_undefined2": 1,
                    "local_var2": 2,
                    "local_var_2": 1,
                    "low_byte": 1,
                    "param1_upper_byte": 1,
                    "param2_high_byte": 2,
                    "param2_highbyte": 1,
                    "param_2_high_byte": 1,
                    "param_2_upper_byte": 1,
                    "temp_byte2": 1,
                    "temp_flag2": 1,
                    "temp_var_2": 1,
                    "upper_byte": 2,
                    "upper_byte_param_2": 1,
                    "var2": 1,
                    "var7": 1
                },
                "local_1c": {
                    "byte1": 5,
                    "byte_1": 1,
                    "config_lower_byte": 1,
                    "flags_low": 1,
                    "header_low_byte": 1,
                    "high_byte": 1,
                    "input_8bit": 1,
                    "local_undefined": 1,
                    "local_var1": 2,
                    "local_var_1": 1,
                    "lower_byte": 2,
                    "lower_byte_param_2": 1,
                    "param1_lower_byte": 1,
                    "param2_low_byte": 2,
                    "param2_lowbyte": 1,
                    "param_2_low_byte": 1,
                    "param_2_lower_byte": 1,
                    "temp_byte1": 1,
                    "temp_flag1": 1,
                    "temp_var_1": 1,
                    "var1": 1,
                    "var6": 1
                },
                "param_1": {
                    "buffer": 1,
                    "config": 1,
                    "data": 4,
                    "data_address": 1,
                    "data_array": 1,
                    "data_buffer": 2,
                    "data_ptr": 3,
                    "device_ptr": 1,
                    "func_data": 1,
                    "function_data": 3,
                    "input": 1,
                    "input_buffer": 2,
                    "input_data": 2,
                    "input_param": 2,
                    "input_value1": 1,
                    "object_address": 1,
                    "param1": 1,
                    "param_address": 1,
                    "param_pointer": 1,
                    "parameter_1": 1
                },
                "param_2": {
                    "config": 2,
                    "data_value1": 1,
                    "device_data": 1,
                    "flag": 3,
                    "flags": 4,
                    "header": 2,
                    "input1": 2,
                    "input_param": 1,
                    "input_value": 1,
                    "input_value1": 1,
                    "input_value2": 1,
                    "input_value_1": 2,
                    "param1": 4,
                    "parameter_1": 2,
                    "value1": 2,
                    "value_1": 2
                },
                "param_3": {
                    "data_size": 2,
                    "data_value2": 1,
                    "flags": 1,
                    "input2": 2,
                    "input_value2": 1,
                    "input_value3": 1,
                    "input_value_2": 2,
                    "length": 3,
                    "output_value": 1,
                    "param2": 4,
                    "parameter_2": 2,
                    "value": 7,
                    "value2": 2,
                    "value_2": 2
                },
                "param_4": {
                    "buffer": 2,
                    "data": 10,
                    "data_array": 5,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input_array": 4,
                    "input_data": 1,
                    "parameter_3": 1,
                    "payload": 2,
                    "pointer_data": 2,
                    "values_array": 1
                },
                "puVar6": {
                    "current_data_pointer": 1,
                    "data_array": 1,
                    "data_ptr": 1,
                    "param4_ptr": 1,
                    "payload_ptr": 2,
                    "pointer_value": 2,
                    "pointer_var": 1,
                    "ptr": 1,
                    "ptr_param_4": 1,
                    "ptr_var": 1,
                    "temp_buffer": 1,
                    "temp_pointer": 4,
                    "temp_ptr": 3,
                    "temp_u_short_pointer": 1,
                    "temp_ushort_ptr": 2,
                    "ushort_ptr": 4,
                    "values_array_ptr": 1,
                    "var5": 1
                },
                "uVar3": {
                    "param2_upper_byte": 1,
                    "param_3_upper_byte": 1,
                    "temp": 5,
                    "temp_byte2": 1,
                    "temp_undefined": 5,
                    "temp_value": 3,
                    "temp_var": 2,
                    "undefined_value": 2,
                    "undefined_var": 6,
                    "upper_byte": 1,
                    "var2": 1,
                    "var_3": 1
                },
                "uVar4": {
                    "temp2": 3,
                    "temp_short": 5,
                    "temp_u_short": 2,
                    "temp_ushort": 6,
                    "temp_value_1": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "ushort_value": 1,
                    "ushort_var": 6,
                    "var3": 1,
                    "var_4": 1
                },
                "uVar5": {
                    "param2_lower_byte_and": 1,
                    "param3_low16_and_masked": 1,
                    "param_3_masked": 1,
                    "temp3": 3,
                    "temp_int": 1,
                    "temp_u_int": 4,
                    "temp_uint": 6,
                    "temp_value": 2,
                    "temp_value_2": 1,
                    "temp_var3": 1,
                    "uint_value": 1,
                    "uint_var": 6,
                    "var4": 1,
                    "var_5": 1
                },
                "update_checksum_and_values_00080258": {
                    "update_checksum_and_values": 1
                }
            },
            "called": [
                "FUN_00080258"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint validate_and_setup_parameters_000802da(int data,uint param1,uint value,ushort *data)\n\n{\n  char result;\n  byte temp_byte;\n  undefined undefined_var;\n  ushort ushort_var;\n  uint uint_var;\n  ushort *ushort_ptr;\n  undefined byte1;\n  undefined byte2;\n  ushort ushort_value;\n  \n  byte1 = (undefined)param1;\n  byte2 = (undefined)(param1 >> 8);\n  ushort_value = (ushort)value;\n  uint_var = value & 0xffff;\n  if (*(char *)(data + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(data + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((param1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(data + 9) = byte1;\n  *(undefined *)(data + 10) = byte2;\n  *(ushort **)(data + 0x4c) = data;\n  *(char *)(data + 0xb) = (char)(param1 >> 0x18);\n  *(char *)(data + 0xc) = (char)(param1 >> 0x10);\n  undefined_var = (undefined)(value >> 8);\n  switch(byte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(data + 0xd) = undefined_var;\n    break;\n  case 5:\n    ushort_var = *data;\n    if (ushort_var != 0) {\n      ushort_var = 1;\n    }\n    *(char *)(data + 0xd) = -(char)ushort_var;\n    uint_var = 0;\n    break;\n  case 6:\n    *(char *)(data + 0xd) = (char)(*data >> 8);\n    uint_var = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    temp_byte = (byte)(ushort_value >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      temp_byte = temp_byte + 1;\n    }\n    *(char *)(data + 0xe) = (char)value;\n    *(undefined *)(data + 0xd) = undefined_var;\n    *(byte *)(data + 0xf) = temp_byte;\n    undefined_var = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(data + 0xd) = undefined_var;\n    *(char *)(data + 0xe) = (char)value;\n    data = data + -1;\n    *(char *)(data + 0xf) = (char)uint_var * '\\x02';\n    *(undefined *)(data + 0x49) = 7;\n    ushort_ptr = data + uint_var;\n    while (data != ushort_ptr) {\n      temp_byte = *(byte *)(data + 0x49);\n      *(char *)(data + (uint)temp_byte + 9) = (char)(data[1] >> 8);\n      uint_var = temp_byte + 1 & 0xff;\n      *(char *)(data + 0x49) = (char)uint_var;\n      data = data + 1;\n      *(char *)(uint_var + data + 9) = (char)*data;\n      *(byte *)(data + 0x49) = temp_byte + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(data + 0xe) = (char)uint_var;\n  undefined_var = 6;\nLAB_0008034a:\n  *(undefined *)(data + 0x49) = undefined_var;\nswitchD_0008031e_caseD_7:\n  update_checksum_and_values(data);\n  *(undefined *)(data + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "current_name": "validate_and_setup_parameters_000802da",
            "entrypoint": "0x000802da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000802da": "validate_and_setup_parameters_000802da",
                "bVar2": "temp_byte",
                "cVar1": "result",
                "local_18": "ushort_value",
                "local_1b": "byte2",
                "local_1c": "byte1",
                "param_1": "data",
                "param_2": "param1",
                "param_3": "value",
                "param_4": "data",
                "puVar6": "ushort_ptr",
                "uVar3": "undefined_var",
                "uVar4": "ushort_var",
                "uVar5": "uint_var",
                "update_checksum_and_values_00080258": "update_checksum_and_values"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803d4": {
            "additional_data": {
                "0": {
                    "success_code": 1
                },
                "0xfb": {
                    "error_code": 1
                },
                "FUN_000803d4": {
                    "check_and_increment": 2,
                    "check_and_increment_counter": 1,
                    "check_and_increment_value": 6,
                    "check_and_update_value": 7,
                    "check_byte": 1,
                    "check_byte_and_increment": 1,
                    "check_byte_value": 2,
                    "check_character": 1,
                    "check_condition": 1,
                    "check_condition_and_increment": 1,
                    "check_input_and_increment": 1,
                    "check_value": 1,
                    "check_value_and_increment": 3,
                    "check_value_and_update_counter": 1,
                    "validate_character": 1,
                    "validate_input": 1
                },
                "byte_1": {
                    "byte_to_check": 1
                },
                "iVar1": {
                    "counter": 1,
                    "index": 28,
                    "iterator": 1,
                    "loop_index": 1
                },
                "param_1": {
                    "character": 1,
                    "character_code": 1,
                    "data": 1,
                    "input": 8,
                    "input_data": 1,
                    "input_value": 12,
                    "value": 7
                },
                "short_1": {
                    "counter": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nundefined4 check_value_and_increment_000803d4(int input_value)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte *)(input_value + 10) << 0x18) < 0) {\n    *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte *)(input_value + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short *)(input_value + 0x54) = *(short *)(input_value + 0x54) + 1;\n  return 1;\n}\n\n",
            "current_name": "check_value_and_increment_000803d4",
            "entrypoint": "0x000803d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803d4": "check_value_and_increment_000803d4",
                "iVar1": "index",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080410": {
            "additional_data": {
                "FUN_00080410": {
                    "decode_and_store_values": 3,
                    "decode_data": 1,
                    "extract_values": 1,
                    "process_data": 17,
                    "process_values": 1,
                    "reverse_and_save_values": 1,
                    "reverse_and_store_data": 1,
                    "reverse_and_store_values": 3,
                    "reverse_and_update_values": 2,
                    "update_values": 1
                },
                "bVar3": {
                    "counter": 29,
                    "index": 1,
                    "loop_counter": 1
                },
                "combine_values_000815f8": {
                    "combine_values": 1
                },
                "iVar2": {
                    "address": 1,
                    "address_offset": 1,
                    "calculated_address": 2,
                    "calculated_value": 2,
                    "calculation_result": 1,
                    "combined_value_pointer": 1,
                    "computed_value": 1,
                    "current_element": 1,
                    "current_index": 2,
                    "current_value": 1,
                    "decoded_value_address": 1,
                    "index": 2,
                    "index_offset": 1,
                    "modified_index": 1,
                    "modified_value": 1,
                    "offset": 7,
                    "updated_address": 1,
                    "updated_data_pointer": 1,
                    "updated_pointer": 1,
                    "value_offset": 1,
                    "var1": 1
                },
                "iVar5": {
                    "array_address": 2,
                    "array_index": 2,
                    "array_ptr": 2,
                    "array_size": 1,
                    "array_start": 1,
                    "array_start_address": 1,
                    "data_address": 1,
                    "data_array_size": 1,
                    "data_offset": 2,
                    "data_pointer": 1,
                    "decoded_data_address": 1,
                    "dest_index": 1,
                    "destination_address": 2,
                    "existing_pointer": 1,
                    "offset": 1,
                    "output_address": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "result_address": 1,
                    "result_array": 1,
                    "result_index": 1,
                    "result_ptr": 1,
                    "storage_index": 1,
                    "stored_values_address": 1,
                    "values_array_pointer": 1,
                    "var2": 1
                },
                "param_1": {
                    "base_address": 2,
                    "data": 4,
                    "data_address": 6,
                    "data_pointer": 3,
                    "data_ptr": 5,
                    "input": 1,
                    "input_address": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "source_address": 1
                },
                "param_2": {
                    "arg1": 1,
                    "arg2": 1,
                    "param": 1,
                    "param2": 18,
                    "param_2": 2,
                    "param_size": 1,
                    "unused1": 1,
                    "unused_param_2": 1,
                    "value1": 2,
                    "value_1": 1
                },
                "param_3": {
                    "arg2": 1,
                    "arg3": 1,
                    "param3": 19,
                    "param_3": 2,
                    "unused": 1,
                    "unused2": 1,
                    "unused_param_3": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "arg3": 1,
                    "arg4": 1,
                    "flag": 1,
                    "modifier": 1,
                    "param4": 20,
                    "param_4": 2,
                    "update_value": 1,
                    "value3": 2,
                    "value_3": 1
                },
                "uVar1": {
                    "combined_value": 28,
                    "combined_values": 3
                },
                "uVar4": {
                    "byte_index": 1,
                    "byte_value": 1,
                    "converted_counter": 12,
                    "counter_as_u_int": 1,
                    "counter_as_uint": 1,
                    "counter_uint": 2,
                    "counter_value": 1,
                    "current_index": 1,
                    "index": 6,
                    "loop_index": 1,
                    "temp": 1,
                    "unsigned_counter": 2,
                    "value": 1
                }
            },
            "called": [
                "FUN_000815f8"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nvoid process_data_00080410(int data_address,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 combined_value;\n  int offset;\n  byte counter;\n  uint converted_counter;\n  int array_ptr;\n  \n  counter = 0;\n  while( true ) {\n    converted_counter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data_address + 0xb) >> 1 <= converted_counter) break;\n    offset = (converted_counter * 2 + 3 & 0xff) + data_address;\n    array_ptr = *(int *)(data_address + 0x4c);\n    combined_value = combine_values(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(data_address + 0xb),param4);\n    *(undefined2 *)(array_ptr + converted_counter * 2) = combined_value;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00080410",
            "entrypoint": "0x00080410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080410": "process_data_00080410",
                "bVar3": "counter",
                "combine_values_000815f8": "combine_values",
                "iVar2": "offset",
                "iVar5": "array_ptr",
                "param_1": "data_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "combined_value",
                "uVar4": "converted_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008043e": {
            "additional_data": {
                "FUN_0008043e": {
                    "calculate_return_value": 1,
                    "check_and_process": 1,
                    "check_and_process_data": 2,
                    "check_and_process_parameters": 1,
                    "check_data_and_increment": 1,
                    "check_input_and_process": 1,
                    "check_parameter": 1,
                    "check_user_access": 1,
                    "process_and_check_parameters": 1,
                    "process_and_get_result": 1,
                    "process_and_increment": 1,
                    "process_data": 9,
                    "process_data_check": 2,
                    "process_data_validation": 1,
                    "process_function": 2,
                    "process_param": 1,
                    "process_param_data": 1,
                    "process_parameter": 2,
                    "update_data": 1
                },
                "cVar1": {
                    "condition_result": 1,
                    "result": 28,
                    "return_value": 2
                },
                "check_value_and_increment_000803d4": {
                    "check_value_and_increment": 4
                },
                "iVar4": {
                    "check_result": 26,
                    "check_value": 4,
                    "check_value_result": 1
                },
                "param_1": {
                    "arguments": 1,
                    "array": 2,
                    "data_array": 4,
                    "data_pointer": 1,
                    "input_array": 2,
                    "param_array": 2,
                    "parameter": 2,
                    "parameter_array": 14,
                    "parameter_list": 1,
                    "params": 1,
                    "user_data": 1
                },
                "piVar3": {
                    "global_value": 1,
                    "global_var": 1,
                    "global_var_value": 2,
                    "global_variable": 9,
                    "global_variable_value": 17,
                    "global_variable_value_ptr": 1
                },
                "process_data_00080410": {
                    "process_data": 4
                },
                "process_parameter_array_000801b0": {
                    "process_parameter_array": 4
                },
                "uVar2": {
                    "callback_result": 1,
                    "execution_result": 1,
                    "function_result": 13,
                    "result": 2,
                    "return_value": 3,
                    "temp_var": 1,
                    "validation_result": 1,
                    "value": 8
                },
                "unaff_r6": {
                    "byte_value": 1,
                    "index": 1,
                    "length": 1,
                    "loop_counter": 1,
                    "masked_result": 1,
                    "param_value": 2,
                    "parameter": 2,
                    "parameter_6": 1,
                    "parameter_count": 1,
                    "parameter_length": 1,
                    "parameter_size": 1,
                    "parameter_value": 3,
                    "result": 1,
                    "threshold": 1,
                    "value": 2,
                    "value_mask": 1,
                    "value_r6": 1
                }
            },
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080410",
                "FUN_000801b0",
                "FUN_000803d4"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint check_and_process_data_0008043e(int **parameter_array)\n\n{\n  char result;\n  uint function_result;\n  int *global_variable_value;\n  int check_result;\n  uint parameter_value;\n  \n  if (*(byte *)((int)parameter_array + 5) < 4) {\n    function_result = (**(code **)(**parameter_array + 8))();\n    parameter_value = function_result & 0xff;\n  }\n  global_variable_value = (int *)get_global_variable_value_thunk_00081714();\n  if (parameter_array[0x17] < global_variable_value) {\n    *(undefined *)(parameter_array + 2) = 0xff;\n    *(undefined *)((int)parameter_array + 7) = 0;\n    *(short *)(parameter_array + 0x15) = *(short *)(parameter_array + 0x15) + 1;\n  }\n  else if (7 < parameter_value) {\n    process_parameter_array(parameter_array);\n    check_result = check_value_and_increment(parameter_array);\n    if (check_result == 0) {\n      if (*(byte *)((int)parameter_array + 10) - 3 < 2) {\n        process_data(parameter_array);\n      }\n      *(undefined *)((int)parameter_array + 7) = 0;\n      result = *(char *)((int)parameter_array + 0x49);\n    }\n    else {\n      *(undefined *)((int)parameter_array + 7) = 0;\n      result = (char)check_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "current_name": "check_and_process_data_0008043e",
            "entrypoint": "0x0008043e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008043e": "check_and_process_data_0008043e",
                "cVar1": "result",
                "check_value_and_increment_000803d4": "check_value_and_increment",
                "iVar4": "check_result",
                "param_1": "parameter_array",
                "piVar3": "global_variable_value",
                "process_data_00080410": "process_data",
                "process_parameter_array_000801b0": "process_parameter_array",
                "uVar2": "function_result",
                "unaff_r6": "parameter_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000804a8": {
            "additional_data": {
                "DAT_200708c0": {
                    "global_variable_value_plus_1000_4": 1
                },
                "DAT_200708c8": {
                    "global_variable_value": 1
                },
                "DAT_200708cc": {
                    "parameter_f_value": 1
                },
                "DAT_200708f2": {
                    "parameter_a_value": 1
                },
                "DAT_20070904": {
                    "parameter_l_value": 1
                },
                "DAT_20070934": {
                    "global_variable_value_plus_1000_3": 1
                },
                "DAT_20070948": {
                    "temporary_variable": 1
                },
                "DAT_200709cc": {
                    "parameter_o_value": 1
                },
                "DAT_200709d0": {
                    "data_structure1": 1
                },
                "DAT_200709e0": {
                    "global_variable_value_plus_1000_1": 1
                },
                "DAT_200709e4": {
                    "data_structure2": 1
                },
                "DAT_20070a3a": {
                    "timeout_value": 1
                },
                "DAT_20070a48": {
                    "global_variable_value_plus_1000_2": 1
                },
                "FUN_000804a8": {
                    "initialize": 2,
                    "initialize_and_configure": 3,
                    "initialize_and_configure_device": 1,
                    "initialize_and_configure_system": 5,
                    "initialize_and_setup": 1,
                    "initialize_and_update_parameters": 1,
                    "initialize_system": 18
                },
                "PTR_2007097d": {
                    "parameter_b_ptr": 1
                },
                "PTR_20070980": {
                    "parameter_e_ptr": 1
                },
                "PTR_20070984": {
                    "parameter_f_ptr": 1
                },
                "PTR_20070989": {
                    "parameter_g_ptr": 1
                },
                "PTR_2007098a": {
                    "parameter_a_ptr": 1
                },
                "PTR_20070995": {
                    "parameter_c_ptr": 1
                },
                "PTR_20070998": {
                    "parameter_h_ptr": 1
                },
                "PTR_2007099c": {
                    "parameter_q_ptr": 1
                },
                "PTR_200709a1": {
                    "parameter_i_ptr": 1
                },
                "PTR_200709a2": {
                    "parameter_k_ptr": 1
                },
                "PTR_200709a4": {
                    "parameter_d_ptr": 1
                },
                "PTR_200709a8": {
                    "parameter_l_ptr": 1
                },
                "PTR_200709ac": {
                    "parameter_m_ptr": 1
                },
                "PTR_200709ad": {
                    "parameter_n_ptr": 1
                },
                "PTR_200709ae": {
                    "parameter_r_ptr": 1
                },
                "PTR_200709b0": {
                    "parameter_j_ptr": 1
                },
                "PTR_200709b4": {
                    "parameter_o_ptr": 1
                },
                "PTR_200709b8": {
                    "parameter_p_ptr": 1
                },
                "PTR_200709b9": {
                    "parameter_s_ptr": 1
                },
                "PTR_200709c0": {
                    "parameter_t_ptr": 1
                },
                "get_global_variable_value_thunk_00081714": {
                    "get_global_variable_value": 26,
                    "get_global_variable_value_thunk": 5
                },
                "iVar1": {
                    "result": 1
                },
                "initialize_data_structures_00080164": {
                    "initialize_data_structures": 30
                },
                "software_interrupt": {
                    "execute_interrupt": 1,
                    "interrupt": 1,
                    "perform_interrupt": 1,
                    "perform_software_interrupt": 7,
                    "trigger_interrupt": 4,
                    "trigger_software_interrupt": 15
                },
                "update_parameter_value_00081210": {
                    "set_parameter_value": 3,
                    "update_configuration_value": 1,
                    "update_parameter": 3,
                    "update_parameter_1": 1,
                    "update_parameter_value": 23
                },
                "update_parameter_value_00081318": {
                    "set_configuration_value": 1,
                    "set_other_parameter_value": 2,
                    "set_parameter_value": 1,
                    "update_another_parameter_value": 6,
                    "update_other_parameter": 3,
                    "update_other_parameter_value": 6,
                    "update_other_value": 3,
                    "update_parameter_2": 1,
                    "update_parameter_status": 3,
                    "update_parameter_value": 1,
                    "update_parameter_value2": 3,
                    "update_secondary_parameter_value": 1
                }
            },
            "called": [
                "thunk_FUN_00081714",
                "FUN_00080164",
                "FUN_00081210",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nundefined8 initialize_and_configure_system_000804a8(void)\n\n{\n  int result;\n  \n  update_parameter_value(1,0);\n  update_parameter_value(6,1);\n  update_parameter_value(0,1);\n  update_parameter_value(1,1);\n  update_other_parameter_value(0,0);\n  update_other_parameter_value(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_data_structures(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_global_variable_value();\n  result = get_global_variable_value();\n  DAT_200709e0 = result + 1000;\n  result = get_global_variable_value();\n  DAT_20070a48 = result + 1000;\n  result = get_global_variable_value();\n  DAT_20070934 = result + 1000;\n  result = get_global_variable_value();\n  DAT_200708c0 = result + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    trigger_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_and_configure_system_000804a8",
            "entrypoint": "0x000804a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000804a8": "initialize_and_configure_system_000804a8",
                "get_global_variable_value_thunk_00081714": "get_global_variable_value",
                "iVar1": "result",
                "initialize_data_structures_00080164": "initialize_data_structures",
                "software_interrupt": "trigger_software_interrupt",
                "update_parameter_value_00081210": "update_parameter_value",
                "update_parameter_value_00081318": "update_other_parameter_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805d0": {
            "additional_data": {
                "DAT_200708bc": {
                    "result4": 2
                },
                "DAT_200708c0": {
                    "result6": 1
                },
                "DAT_200708c4": {
                    "float_parameter_value": 1,
                    "result10": 1
                },
                "DAT_200708c8": {
                    "threshold_value": 1,
                    "thunk_value": 1
                },
                "DAT_200708ce": {
                    "parameter3": 1
                },
                "DAT_200708d0": {
                    "parameter4": 1
                },
                "DAT_200708d8": {
                    "bit_count": 1
                },
                "DAT_200708da": {
                    "parameter5": 1
                },
                "DAT_200708dc": {
                    "parameter6": 1
                },
                "DAT_200708de": {
                    "parameter7": 1
                },
                "DAT_200708e4": {
                    "parameter8": 1
                },
                "DAT_200708e8": {
                    "parameter9": 1
                },
                "DAT_200708f6": {
                    "result11": 1,
                    "result14": 1
                },
                "DAT_20070902": {
                    "result1": 1,
                    "signed_result1": 1
                },
                "DAT_20070904": {
                    "result2": 1,
                    "signed_result2": 1
                },
                "DAT_20070906": {
                    "initial_value": 1,
                    "temporary_var1": 1
                },
                "DAT_20070908": {
                    "parameter15": 1
                },
                "DAT_2007090c": {
                    "result9": 1,
                    "temporary_var3": 1
                },
                "DAT_20070910": {
                    "int_value": 1,
                    "result7": 1
                },
                "DAT_20070914": {
                    "float_parameter": 1,
                    "result11": 1
                },
                "DAT_20070918": {
                    "flag_2": 1,
                    "is_condition_met": 1
                },
                "DAT_2007091c": {
                    "bit_count_result2": 1,
                    "result8": 1
                },
                "DAT_20070920": {
                    "condition_value": 1,
                    "global_variable8": 1
                },
                "DAT_20070924": {
                    "global_variable5": 1,
                    "value1": 1
                },
                "DAT_20070928": {
                    "global_variable6": 1,
                    "value2": 1
                },
                "DAT_2007092c": {
                    "result10": 1,
                    "result9": 1
                },
                "DAT_20070930": {
                    "float_result1": 1,
                    "result3": 1
                },
                "DAT_20070938": {
                    "global_variable7": 1,
                    "parameter14": 1
                },
                "DAT_2007093c": {
                    "result12": 1,
                    "result15": 1
                },
                "DAT_20070940": {
                    "global_variable1": 1,
                    "parameter16": 1
                },
                "DAT_20070944": {
                    "global_variable2": 1
                },
                "DAT_20070948": {
                    "switch_value": 1,
                    "switch_variable": 1
                },
                "DAT_2007094c": {
                    "bit_count2": 1,
                    "bit_count_result": 1
                },
                "DAT_20070950": {
                    "result8": 1,
                    "temporary_var2": 1
                },
                "DAT_20070960": {
                    "result5": 1,
                    "temporary_var4": 1
                },
                "DAT_20070964": {
                    "global_variable9": 1,
                    "result6": 1
                },
                "DAT_20070968": {
                    "result7": 1,
                    "temporary_var5": 1
                },
                "DAT_2007096c": {
                    "float_value": 1,
                    "result12": 1
                },
                "DAT_20070970": {
                    "global_variable4": 1,
                    "parameter18": 1
                },
                "DAT_20070974": {
                    "global_variable3": 1
                },
                "DAT_20070978": {
                    "result1": 1,
                    "result5": 1
                },
                "DAT_20070980": {
                    "param_2": 1,
                    "parameter1": 1
                },
                "DAT_20070984": {
                    "param_3": 1,
                    "parameter2": 1
                },
                "DAT_20070998": {
                    "param_5": 1
                },
                "DAT_2007099c": {
                    "param_6": 1
                },
                "DAT_200709a0": {
                    "parameter10": 1
                },
                "DAT_200709ac": {
                    "parameter11": 1
                },
                "DAT_200709b0": {
                    "param_10": 1,
                    "parameter12": 1
                },
                "DAT_200709b4": {
                    "param_11": 1,
                    "parameter13": 1
                },
                "DAT_200709c4": {
                    "adjusted_bit_count_result": 1,
                    "bit_count3": 1
                },
                "DAT_200709c8": {
                    "float_value": 1,
                    "parameter17": 1
                },
                "DAT_200709cc": {
                    "flag_3": 1,
                    "parameter19": 1
                },
                "DAT_200709e0": {
                    "result13": 1,
                    "threshold_value2": 1
                },
                "DAT_200709e4": {
                    "data_2": 1,
                    "data_variable": 1
                },
                "DAT_200709eb": {
                    "flag_1": 1,
                    "is_data_valid": 1
                },
                "DAT_20070a4c": {
                    "bit_count1": 1
                },
                "FUN_000805d0": {
                    "calculate_data": 1,
                    "process_data": 29
                },
                "LAB_000806ca": {
                    "label_1": 1
                },
                "_DAT_2007097c": {
                    "param_1": 1
                },
                "_DAT_20070988": {
                    "param_7": 1
                },
                "_DAT_20070994": {
                    "param_4": 1
                },
                "_DAT_200709a0": {
                    "param_8": 1
                },
                "_DAT_200709ac": {
                    "param_9": 1
                },
                "calculate_float_value_00081734": {
                    "calculate_float_value": 4
                },
                "calculate_float_value_00081944": {
                    "calculate_float_value2": 3,
                    "calculate_second_float_value": 1
                },
                "calculate_floating_point_00081730": {
                    "calculate_floating_point": 4
                },
                "check_and_process_data_0008043e": {
                    "check_and_process_data": 4
                },
                "check_concatenation_result_00081c94": {
                    "check_another_concatenation": 1,
                    "check_concatenation_result2": 3
                },
                "check_concatenation_result_00081ca8": {
                    "check_concatenation_result": 4
                },
                "convert_to_signed_integer_00081cd0": {
                    "convert_to_signed_int": 1,
                    "convert_to_signed_integer": 3
                },
                "count_bits_and_adjust_00081894": {
                    "count_bits_and_adjust": 4
                },
                "count_set_bits_0008189c": {
                    "count_set_bits": 4
                },
                "get_global_variable_value_thunk_00081714": {
                    "get_global_value": 1,
                    "get_global_var_value": 2,
                    "get_global_var_value_thunk": 1
                },
                "iVar6": {
                    "int_value": 1,
                    "integer_variable": 1,
                    "internal_var": 1,
                    "return_value": 1,
                    "temp": 1,
                    "temp5": 1,
                    "temp_var": 7,
                    "temp_variable": 9,
                    "temp_variable1": 1,
                    "value": 1,
                    "variable1": 1,
                    "variable6": 1
                },
                "puVar7": {
                    "pointer": 1,
                    "pointer1": 3,
                    "pointer_var": 2,
                    "pointer_variable": 5,
                    "pointer_variable1": 1,
                    "ptr1": 2,
                    "ptr_var": 5,
                    "ptr_var1": 2,
                    "ptr_variable": 2,
                    "ptr_variable1": 2,
                    "temp_pointer": 1
                },
                "puVar8": {
                    "another_pointer_variable": 1,
                    "parameter_pointer": 2,
                    "parameters": 1,
                    "parameters_pointer": 1,
                    "params_ptr": 1,
                    "pointer2": 3,
                    "pointer_var2": 2,
                    "pointer_variable2": 3,
                    "ptr2": 2,
                    "ptr_array": 1,
                    "ptr_func_pointer": 1,
                    "ptr_var2": 6,
                    "ptr_variable2": 2
                },
                "reverse_bits_00081d1c": {
                    "reverse_bits": 4
                },
                "uVar1": {
                    "global_val1": 1,
                    "global_var_value": 10,
                    "global_variable": 1,
                    "global_variable_value": 13,
                    "global_variable_value1": 1,
                    "value": 1
                },
                "uVar2": {
                    "calculation1": 1,
                    "calculation_result": 1,
                    "fl_pt_val1": 1,
                    "float_val1": 1,
                    "float_value": 3,
                    "float_value1": 9,
                    "floating_point_result": 2,
                    "floating_point_value1": 1,
                    "fp_value1": 1,
                    "param_value1": 1,
                    "result1": 2,
                    "result_var1": 1,
                    "temp1": 1,
                    "temp_value1": 1
                },
                "uVar3": {
                    "calculation2": 1,
                    "fl_pt_val2": 1,
                    "float_calculation_result": 1,
                    "float_val2": 1,
                    "float_value2": 11,
                    "floating_point_result2": 1,
                    "floating_point_value": 2,
                    "floating_point_value2": 1,
                    "fp_value2": 1,
                    "param_value2": 1,
                    "result2": 2,
                    "result_var2": 1,
                    "temp2": 1,
                    "temp_value2": 1
                },
                "uVar4": {
                    "adjusted_float_value": 2,
                    "calculation3": 1,
                    "fl_pt_val3": 1,
                    "float_val3": 1,
                    "float_value": 1,
                    "float_value1": 1,
                    "float_value3": 11,
                    "float_value_result1": 1,
                    "fp_value3": 1,
                    "param_value3": 1,
                    "result3": 2,
                    "result_var3": 1,
                    "temp3": 1,
                    "temp_value3": 1
                },
                "uVar5": {
                    "calculation4": 1,
                    "final_float_value": 1,
                    "fl_pt_val4": 1,
                    "float_val4": 1,
                    "float_value2": 1,
                    "float_value4": 11,
                    "float_value_result2": 1,
                    "fp_value4": 1,
                    "param_value4": 1,
                    "result4": 2,
                    "result_float_value": 2,
                    "result_var4": 1,
                    "temp4": 1,
                    "temp_value4": 1
                },
                "validate_and_setup_parameters_000802da": {
                    "validate_and_setup_params": 4
                }
            },
            "called": [
                "thunk_FUN_00081714",
                "FUN_0008189c",
                "FUN_00081730",
                "FUN_00081944",
                "FUN_0008043e",
                "FUN_00081d1c",
                "FUN_000802da",
                "FUN_00081734",
                "FUN_00081c94",
                "FUN_00081ca8",
                "FUN_00081894",
                "FUN_00081cd0"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid process_data_000805d0(void)\n\n{\n  uint global_variable_value;\n  undefined4 float_value1;\n  undefined4 float_value2;\n  undefined4 float_value3;\n  undefined4 float_value4;\n  int temp_variable;\n  uint *pointer_variable;\n  undefined4 *ptr_var2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    global_variable_value = get_global_var_value();\n    if (DAT_200708c8 < global_variable_value) goto label_1;\n    break;\n  case '\\x01':\n    check_and_process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_setup_params(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_var_value();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = count_bits_and_adjust(DAT_200708d8);\n      DAT_2007094c = count_set_bits(DAT_200708da / 10);\n      DAT_200709c4 = count_bits_and_adjust(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    check_and_process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_var_value();\n    }\n    break;\n  case '\\x03':\n    check_and_process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_setup_params(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = get_global_var_value();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    check_and_process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr_var2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      validate_and_setup_params(&DAT_200709e4,*ptr_var2,ptr_var2[1],ptr_var2[2]);\n      goto label_1;\n    }\n    break;\n  case '\\a':\n    check_and_process_data_000805d0(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr_var2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nlabel_1:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    check_and_process_data_000805d0(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      validate_and_setup_params(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = get_global_var_value();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointer_variable = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointer_variable = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (global_variable_value = get_global_var_value(), DAT_200708c0 < global_variable_value))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      temp_variable = get_global_var_value();\n      DAT_200708c0 = temp_variable + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      global_variable_value = get_global_var_value();\n      if (DAT_200708c0 < global_variable_value) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_variable = get_global_var_value();\n        DAT_200708c0 = temp_variable + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointer_variable = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      global_variable_value = get_global_var_value();\n      if (DAT_200708c0 < global_variable_value) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_variable = get_global_var_value();\n        DAT_200708c0 = temp_variable + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  global_variable_value = get_global_var_value();\n  if (DAT_200709e0 < global_variable_value) {\n    float_value1 = count_set_bits(DAT_20070940);\n    float_value2 = calculate_floating_point(float_value1,DAT_200709c8);\n    float_value1 = DAT_200708c4;\n    DAT_20070930 = float_value2;\n    float_value3 = calculate_float_value(float_value2,DAT_200708c4);\n    float_value3 = calculate_float_value2(float_value3,DAT_2007094c);\n    float_value3 = calculate_float_value(float_value3,DAT_20070914);\n    DAT_2007094c = float_value3;\n    float_value1 = calculate_floating_point(float_value2,float_value1);\n    float_value1 = calculate_float_value2(float_value1,DAT_200709c4);\n    float_value1 = calculate_floating_point(float_value1,DAT_2007096c);\n    DAT_200709c4 = float_value1;\n    float_value4 = calculate_float_value2(float_value2,DAT_20070a4c);\n    float_value4 = calculate_float_value(float_value4,float_value3);\n    calculate_float_value(float_value4,float_value1);\n    DAT_20070910 = convert_to_signed_integer();\n    DAT_2007091c = count_set_bits();\n    DAT_2007092c = 0;\n    DAT_200708c4 = float_value2;\n    DAT_20070914 = float_value3;\n    DAT_2007096c = float_value1;\n    temp_variable = get_global_var_value();\n    DAT_200709e0 = temp_variable + DAT_20070970;\n  }\n  float_value1 = count_set_bits(DAT_20070970);\n  temp_variable = check_concatenation_result(DAT_2007091c,float_value1);\n  if (temp_variable != 0) {\n    DAT_2007091c = float_value1;\n  }\n  temp_variable = check_concatenation_result2(DAT_2007091c,0);\n  if (temp_variable != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = reverse_bits(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "current_name": "process_data_000805d0",
            "entrypoint": "0x000805d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "LAB_000806ca": "label_1",
                "calculate_float_value_00081734": "calculate_float_value",
                "calculate_float_value_00081944": "calculate_float_value2",
                "calculate_floating_point_00081730": "calculate_floating_point",
                "check_and_process_data_0008043e": "check_and_process_data",
                "check_concatenation_result_00081c94": "check_concatenation_result2",
                "check_concatenation_result_00081ca8": "check_concatenation_result",
                "convert_to_signed_integer_00081cd0": "convert_to_signed_integer",
                "count_bits_and_adjust_00081894": "count_bits_and_adjust",
                "count_set_bits_0008189c": "count_set_bits",
                "get_global_variable_value_thunk_00081714": "get_global_var_value",
                "iVar6": "temp_variable",
                "puVar7": "pointer_variable",
                "puVar8": "ptr_var2",
                "reverse_bits_00081d1c": "reverse_bits",
                "uVar1": "global_variable_value",
                "uVar2": "float_value1",
                "uVar3": "float_value2",
                "uVar4": "float_value3",
                "uVar5": "float_value4",
                "validate_and_setup_parameters_000802da": "validate_and_setup_params"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a68": {
            "additional_data": {
                "0": {
                    "variable1": 1
                },
                "0x2007002c": {
                    "end_address": 1,
                    "memory_block_address": 1,
                    "memory_block_value": 1,
                    "relocation_end_address": 1,
                    "relocation_table_address": 2,
                    "relocation_table_entry2": 2
                },
                "0x20070954": {
                    "memory_block": 1
                },
                "0x200709e8": {
                    "variable1": 1
                },
                "0x200709e9": {
                    "variable2": 1
                },
                "0x200709ea": {
                    "variable3": 1
                },
                "0x20070a3a": {
                    "variable4": 1
                },
                "0x815ff": {
                    "relocation_start_address": 1,
                    "relocation_table_address": 1,
                    "relocation_table_entry": 2,
                    "relocation_table_entry1": 2,
                    "relocation_table_offset": 1,
                    "start_address": 1
                },
                "1000": {
                    "variable3": 1
                },
                "6": {
                    "variable2": 1
                },
                "DAT_20070954": {
                    "memory_block": 2,
                    "memory_blocks": 2,
                    "memory_blocks_data": 1,
                    "memory_data": 1
                },
                "DAT_200709e8": {
                    "flag_e8": 1,
                    "param1": 1,
                    "some_data1": 1,
                    "variable1": 7,
                    "variable_e8": 1
                },
                "DAT_200709e9": {
                    "flag_e9": 1,
                    "param2": 1,
                    "some_data2": 1,
                    "variable2": 7,
                    "variable_e9": 1
                },
                "DAT_200709ea": {
                    "flag_ea": 1,
                    "param3": 1,
                    "some_data3": 1,
                    "variable3": 7,
                    "variable_ea": 1
                },
                "DAT_20070a3a": {
                    "flag_a3_a": 1,
                    "param4": 1,
                    "some_data4": 1,
                    "variable4": 7,
                    "variable_a3_a": 1
                },
                "FUN_00080a68": {
                    "initialize": 1,
                    "initialize_application": 1,
                    "initialize_function": 2,
                    "initialize_memory": 12,
                    "initialize_memory_blocks": 13,
                    "initialize_program": 1,
                    "initialize_system": 1
                },
                "PTR_20070954": {
                    "memory_block": 1
                },
                "blocks": {
                    "memory_blocks": 1
                },
                "endAddress": {
                    "end": 1
                },
                "initializationParameter1": {
                    "new_initialization_parameter1": 1
                },
                "initializationParameter2": {
                    "new_initialization_parameter2": 1
                },
                "initializationParameter3": {
                    "new_initialization_parameter3": 1
                },
                "initializeFunction": {
                    "initialize_function": 1,
                    "void": 1
                },
                "initializeMemory": {
                    "": 1,
                    "initialize_memory": 5,
                    "memory_initialization": 1
                },
                "initializeMemoryBlocks": {
                    "": 1,
                    "blocks": 1,
                    "initialize_memory": 1,
                    "initialize_memory_blocks": 4,
                    "memory_blocks": 1,
                    "new_memory_blocks": 1,
                    "void": 1
                },
                "initializeMemoryBlocksHelper": {
                    "helper": 1,
                    "helper_function": 2
                },
                "initializeMemoryBlocksHelper_param_1": {
                    "memory_blocks_pointer": 1
                },
                "initializeMemoryBlocksHelper_param_2": {
                    "empty_string": 1
                },
                "initializeMemoryBlocksHelper_parameter1": {
                    "memory_block": 1
                },
                "initializeMemoryBlocksHelper_parameter2": {
                    "optional_description": 1
                },
                "initializeMemoryBlocks_00081682": {
                    "memory_blocks": 1
                },
                "initialize_memory_blocks_00081682": {
                    "initialize_memory_blocks": 22,
                    "initialize_memory_blocks_helper": 8
                },
                "memoryBlock": {
                    "block": 1
                },
                "newMemoryBlocks": {
                    "new_memory_blocks": 1
                },
                "newParameterName1": {
                    "param1": 1
                },
                "newParameterName2": {
                    "param2": 1
                },
                "newRelocationTableEntry": {
                    "new_relocation_table_entry": 1
                },
                "newVariableName1": {
                    "var1": 1
                },
                "newVariableName2": {
                    "var2": 1
                },
                "new_variable_name_1": {
                    "memory_block": 1
                },
                "new_variable_name_2": {
                    "relocation_index": 1
                },
                "new_variable_name_3": {
                    "relocation_address": 1
                },
                "original_function_name": {
                    "new_function_name": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name1": 2
                },
                "original_parameter_name_2": {
                    "new_parameter_name2": 2
                },
                "original_variable_name_1": {
                    "new_variable_name1": 2
                },
                "original_variable_name_2": {
                    "new_variable_name2": 2
                },
                "relocationEntry": {
                    "entry": 1
                },
                "relocationTableEntry": {
                    "entry": 1
                },
                "relocationTableEntry1": {
                    "new_relocation_table_entry1": 1
                },
                "relocationTableEntry2": {
                    "new_relocation_table_entry2": 1
                },
                "startAddress": {
                    "start": 1
                },
                "updateRelocationEntry": {
                    "update_relocation_entry": 1
                },
                "updateRelocationTableEntry": {
                    "": 1,
                    "new_relocation_table_entry": 1,
                    "relocation_entry": 2,
                    "relocation_table_entry": 1,
                    "update_entry": 1,
                    "update_relocation_entry": 1,
                    "update_relocation_table_entry": 4,
                    "void": 1
                },
                "updateRelocationTableEntry_param_1": {
                    "relocation_table_pointer": 1
                },
                "updateRelocationTableEntry_param_2": {
                    "entry1": 1
                },
                "updateRelocationTableEntry_param_3": {
                    "entry2": 1
                },
                "updateRelocationTableEntry_parameter1": {
                    "relocation_table_entry": 1
                },
                "updateRelocationTableEntry_parameter2": {
                    "start_address": 1
                },
                "updateRelocationTableEntry_parameter3": {
                    "end_address": 1
                },
                "update_relocation_table_entry_00081d5c": {
                    "relocation_table_entry": 1,
                    "update_relocation_entry": 3,
                    "update_relocation_table_entry": 27
                }
            },
            "called": [
                "FUN_00081682",
                "FUN_00081d5c"
            ],
            "calling": [],
            "code": "\nvoid initialize_memory_blocks_00080a68(void)\n\n{\n  initialize_memory_blocks_00080a68(&DAT_20070954,\"\");\n  update_relocation_table_entry(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_blocks_00080a68",
            "entrypoint": "0x00080a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a68": "initialize_memory_blocks_00080a68",
                "blocks": "memory_blocks",
                "initialize_memory_blocks_00081682": "initialize_memory_blocks",
                "update_relocation_table_entry_00081d5c": "update_relocation_table_entry"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ab8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080ab8",
            "entrypoint": "0x00080ab8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080aba": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aba",
            "entrypoint": "0x00080aba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080abc": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080abc",
            "entrypoint": "0x00080abc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ae4": {
            "additional_data": {
                "DAT_e000ed23": {
                    "config_flag": 1,
                    "constant": 2,
                    "constant_value": 7,
                    "data_flag": 1,
                    "error_value": 1,
                    "flag_value": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf_rel_array": 2,
                    "elf_relocation_array": 3,
                    "elf_relocation_table": 1,
                    "rel_array": 2,
                    "relocation_array": 6,
                    "relocation_table": 3
                },
                "FUN_00080ae4": {
                    "initialize_and_configure": 5,
                    "initialize_and_configure_system": 10,
                    "initialize_and_execute": 2,
                    "initialize_and_set_parameters": 2,
                    "initialize_and_set_values": 1,
                    "initialize_and_update_parameters": 5,
                    "initialize_function": 2,
                    "initialize_program": 1,
                    "initialize_system": 3
                },
                "_DAT_400e0e00": {
                    "data_addr3": 1,
                    "param1": 1,
                    "variable5": 1
                },
                "_DAT_400e0ea0": {
                    "constant1": 1,
                    "data_value1": 1,
                    "default_value1": 1,
                    "global_variable_1": 1,
                    "initialized_value_3": 1,
                    "memory_1": 1,
                    "memory_address_1": 1,
                    "memory_value_1": 1,
                    "param1": 1,
                    "parameter_1": 1,
                    "value1": 1,
                    "var1": 1,
                    "variable1": 2,
                    "variable_1": 1,
                    "variable_3": 2
                },
                "_DAT_400e1000": {
                    "data_addr5": 1,
                    "param3": 1,
                    "variable7": 1
                },
                "_DAT_400e10a0": {
                    "constant2": 1,
                    "data_value2": 1,
                    "default_value2": 1,
                    "global_variable_2": 1,
                    "initialized_value_4": 1,
                    "memory_2": 1,
                    "memory_address_2": 1,
                    "memory_value_2": 1,
                    "param2": 1,
                    "parameter_2": 1,
                    "value2": 1,
                    "var2": 1,
                    "variable2": 2,
                    "variable_2": 1,
                    "variable_4": 2
                },
                "_DAT_400e12a0": {
                    "constant3": 1,
                    "data_value3": 1,
                    "default_value3": 1,
                    "global_variable_3": 1,
                    "initialized_value_5": 1,
                    "memory_3": 1,
                    "memory_address_3": 1,
                    "memory_value_3": 1,
                    "param3": 1,
                    "parameter_3": 1,
                    "value3": 1,
                    "var3": 1,
                    "variable3": 2,
                    "variable_3": 1,
                    "variable_5": 2
                },
                "_DAT_400e1400": {
                    "data_addr4": 1,
                    "param2": 1,
                    "variable6": 1
                },
                "_DAT_400e14a0": {
                    "constant4": 1,
                    "data_value4": 1,
                    "default_value4": 1,
                    "global_variable_4": 1,
                    "initialized_value_6": 1,
                    "memory_4": 1,
                    "memory_address_4": 1,
                    "memory_value_4": 1,
                    "param4": 1,
                    "parameter_4": 1,
                    "value4": 1,
                    "var4": 1,
                    "variable4": 2,
                    "variable_4": 1,
                    "variable_6": 2
                },
                "_DAT_e000e010": {
                    "initialized_value_2": 1,
                    "loop_counter": 2,
                    "loop_limit": 1,
                    "parameter_1": 1,
                    "value2": 2,
                    "variable2": 1,
                    "variable_2": 2
                },
                "_DAT_e000e014": {
                    "offset": 4,
                    "offset_divided_by1000": 1,
                    "offset_divided_by_1000": 1,
                    "offset_divisor": 1,
                    "offset_index": 1,
                    "rel_offset_divided": 1,
                    "relocation_offset": 4
                },
                "_DAT_e000e018": {
                    "counter_var": 1,
                    "initial_value": 1,
                    "initialize_flag": 1,
                    "initialized_value_1": 1,
                    "parameter_2": 1,
                    "value1": 2,
                    "variable1": 1,
                    "variable_1": 2
                },
                "calculate_threshold_00080f9c": {
                    "calculate_threshold": 25
                },
                "check_bit_and_set_00080e18": {
                    "check_and_set_bit": 1,
                    "check_bit_and_set": 24
                },
                "execute_function_set_00081d7c": {
                    "execute_function_set": 20,
                    "execute_set_function": 1,
                    "execute_system_functions": 1
                },
                "iVar1": {
                    "i": 1,
                    "index": 5
                },
                "iVar2": {
                    "j": 1,
                    "next_index": 5
                },
                "initialize_memory_and_variables_00080e9c": {
                    "initialize_memory": 1,
                    "initialize_memory_and_variables": 17
                },
                "r_offset": {
                    "offset": 1
                },
                "set_default_value_00081066": {
                    "set_default": 1,
                    "set_default_param_value": 1,
                    "set_default_parameter_value": 1,
                    "set_default_value": 20,
                    "set_defaultvalue": 1
                },
                "set_param_value_0008106e": {
                    "set_param_value": 20,
                    "set_parameter_value": 4,
                    "set_parameter_value_to_max": 1
                },
                "update_config_flags_00081042": {
                    "update_config_flags": 25
                },
                "update_parameter_value_00080da0": {
                    "change_param_value": 1,
                    "update_another_parameter_value": 1,
                    "update_param_value": 1,
                    "update_param_value2": 1,
                    "update_parameter": 4,
                    "update_parameter_config": 1,
                    "update_parameter_data": 1,
                    "update_parameter_value": 7,
                    "update_parameter_value2": 2,
                    "update_parameter_value8": 1,
                    "update_parameter_value_2": 3,
                    "update_parameter_value_4": 1,
                    "update_parameter_value_8": 1
                },
                "update_parameter_value_00081034": {
                    "update_param_value": 2,
                    "update_param_value3": 1,
                    "update_parameter_value": 11,
                    "update_parameter_value2": 1,
                    "update_parameter_value3": 1,
                    "update_parameter_value4": 1,
                    "update_parameter_value9": 1,
                    "update_parameter_value_2": 2,
                    "update_parameter_value_3": 2,
                    "update_parameter_value_4": 1,
                    "update_parameter_value_5": 1,
                    "update_parameter_value_9": 1
                },
                "update_parameter_value_00081318": {
                    "update_param_value": 1,
                    "update_parameter_value": 20,
                    "update_parameter_value3": 1,
                    "update_parameter_value_1": 1,
                    "update_parameter_value_3": 2
                },
                "update_parametervalue_00080da0": {
                    "update_parameter_value": 1
                }
            },
            "called": [
                "FUN_00080da0",
                "FUN_00080f9c",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00080e9c",
                "FUN_0008106e",
                "FUN_00081034",
                "FUN_00080e18",
                "FUN_00081318",
                "FUN_00081d7c"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_and_configure_system_00080ae4(void)\n\n{\n  int index;\n  int next_index;\n  \n  initialize_memory_and_variables();\n  _DAT_e000e014 = relocation_array[6].offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  execute_function_set();\n  index = 0;\n  do {\n    next_index = index + 1;\n    update_parameter_value(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  update_parameter_value(0x400e0e00,1,0x300,0);\n  update_parameter_value(0,1);\n  update_parameter_value(0x400e0e00,1,0xc00,0);\n  update_parameter_value(0x400e0e00,1,0x3000,0);\n  update_parameter_value(0x400e1400,2,0x30,0);\n  update_parameter_value(0x400e1000,1,0xc00,0);\n  update_parameter_value(0x400e0e00,1,3,0);\n  update_parameter_value(0x400e1000,1,0xc000,0);\n  check_bit_and_set(0x25);\n  calculate_threshold(0x400c0000,relocation_array[6].offset,20000000,0xc);\n  update_config_flags(0x400c0000,0,0x300000,1);\n  update_parameter_value(0x400c0000,0,0);\n  set_param_value(0x400c0000,0xffffffff);\n  set_default_value(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_and_configure_system_00080ae4",
            "entrypoint": "0x00080ae4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00080ae4": "initialize_and_configure_system_00080ae4",
                "calculate_threshold_00080f9c": "calculate_threshold",
                "check_bit_and_set_00080e18": "check_bit_and_set",
                "execute_function_set_00081d7c": "execute_function_set",
                "iVar1": "index",
                "iVar2": "next_index",
                "initialize_memory_and_variables_00080e9c": "initialize_memory_and_variables",
                "r_offset": "offset",
                "set_default_value_00081066": "set_default_value",
                "set_param_value_0008106e": "set_param_value",
                "update_config_flags_00081042": "update_config_flags",
                "update_parameter_value_00080da0": "update_parameter_value",
                "update_parameter_value_00081034": "update_parameter_value",
                "update_parameter_value_00081318": "update_parameter_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "additional_data": {
                "DAT_20070a50": {
                    "memory_6": 1,
                    "memory_data_structure_6": 1
                },
                "DAT_20070ad8": {
                    "memory_2": 1,
                    "memory_data_structure_2": 1
                },
                "DAT_20070b60": {
                    "data_structure_1": 1,
                    "parameter_data_structure": 1
                },
                "DAT_20070b84": {
                    "memory_1": 1,
                    "memory_data_structure_1": 1
                },
                "DAT_20070c0c": {
                    "data_structure_1": 1,
                    "data_structure_2": 1
                },
                "DAT_20070c34": {
                    "data_structure_2": 1,
                    "data_structure_3": 1
                },
                "DAT_20070c5c": {
                    "data_structure_3": 1,
                    "data_structure_4": 1
                },
                "DAT_20070c84": {
                    "memory_7": 1,
                    "memory_data_structure_7": 1
                },
                "DAT_20070d0c": {
                    "memory_8": 1,
                    "memory_data_structure_8": 1
                },
                "DAT_20070de4": {
                    "memory_3": 1,
                    "memory_data_structure_3": 1
                },
                "DAT_20070e6c": {
                    "memory_4": 1,
                    "memory_data_structure_4": 1
                },
                "DAT_20070ef4": {
                    "memory_5": 1,
                    "memory_data_structure_5": 1
                },
                "FUN_00080c0c": {
                    "initialize_all_data_structures": 2,
                    "initialize_all_memory_and_data_structures": 3,
                    "initialize_and_set_data": 1,
                    "initialize_and_set_data_structures": 5,
                    "initialize_and_setup_data_structures": 1,
                    "initialize_data_structures": 15,
                    "initialize_default_memory_and_data_structures": 1,
                    "initialize_memory": 1,
                    "initialize_system": 2
                },
                "initialize_and_set_data_structure": {
                    "initialize_and_set_data_structure": 1
                },
                "initialize_and_set_data_structure_000815d4": {
                    "initialize_and_set_data_structure": 17
                },
                "initialize_data_structures": {
                    "initialize_data_structures": 1
                },
                "initialize_memory_with_default_value": {
                    "initialize_memory_with_default_value": 1
                },
                "initialize_memory_with_default_value_000813a8": {
                    "initialize_default_memory": 1,
                    "initialize_memory": 1,
                    "initialize_memory_with_default_value": 15
                },
                "initialize_parameters": {
                    "initialize_parameters": 1
                },
                "initialize_parameters_000814e4": {
                    "initialize_parameters": 17
                },
                "param_1": {
                    "": 1,
                    "arg1": 3,
                    "param1": 9,
                    "param_1": 14,
                    "param_ptr_1": 1,
                    "parameter1": 1,
                    "unknown_param": 1,
                    "unused_param": 1
                },
                "param_2": {
                    "": 1,
                    "arg2": 3,
                    "param2": 9,
                    "param_2": 14,
                    "param_ptr_2": 1,
                    "parameter2": 1,
                    "unknown_param": 1,
                    "unused_param": 1
                },
                "param_3": {
                    "arg3": 3,
                    "data_param": 1,
                    "param3": 9,
                    "param_3": 16,
                    "param_ptr_3": 1,
                    "parameter3": 1
                }
            },
            "called": [
                "FUN_000813a8",
                "FUN_000815d4",
                "FUN_000814e4"
            ],
            "calling": [],
            "code": "\nvoid initialize_and_set_data_structures_00080c0c(undefined4 param_1,undefined4 param_2,undefined4 param_3)\n\n{\n  initialize_memory_with_default_value(&DAT_20070b84);\n  initialize_memory_with_default_value(&DAT_20070ad8);\n  initialize_parameters(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param_3);\n  initialize_memory_with_default_value(&DAT_20070de4);\n  initialize_memory_with_default_value(&DAT_20070e6c);\n  initialize_memory_with_default_value(&DAT_20070ef4);\n  initialize_memory_with_default_value(&DAT_20070a50);\n  initialize_memory_with_default_value(&DAT_20070c84);\n  initialize_memory_with_default_value(&DAT_20070d0c);\n  initialize_and_set_data_structure(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_and_set_data_structure(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_and_set_data_structure(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "current_name": "initialize_and_set_data_structures_00080c0c",
            "entrypoint": "0x00080c0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c0c": "initialize_and_set_data_structures_00080c0c",
                "initialize_and_set_data_structure_000815d4": "initialize_and_set_data_structure",
                "initialize_memory_with_default_value_000813a8": "initialize_memory_with_default_value",
                "initialize_parameters_000814e4": "initialize_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "additional_data": {
                "FUNC_00080aa8": {
                    "call_function_a": 4,
                    "execute_action_a": 1,
                    "execute_case_1": 1,
                    "execute_func_00080aa8": 1,
                    "execute_function_1": 1,
                    "execute_function_a": 5,
                    "execute_operation_1": 1,
                    "function_1": 2,
                    "function_a": 1,
                    "handle_difference": 1,
                    "handle_difference1": 1,
                    "handle_difference_a": 2,
                    "handle_difference_case_1": 2,
                    "handle_result_1": 1,
                    "perform_action1": 1,
                    "process_error_case_1": 1,
                    "trigger_event_a": 1
                },
                "FUNC_00080ab8": {
                    "call_function_b": 4,
                    "execute_action_b": 1,
                    "execute_case_2": 1,
                    "execute_func_00080ab8": 1,
                    "execute_function_2": 1,
                    "execute_function_b": 5,
                    "execute_operation_2": 1,
                    "function_2": 2,
                    "function_b": 1,
                    "handle_difference": 1,
                    "handle_difference2": 1,
                    "handle_difference_b": 2,
                    "handle_difference_case_2": 2,
                    "handle_result_2": 1,
                    "perform_action2": 1,
                    "process_error_case_2": 1,
                    "trigger_event_b": 1
                },
                "FUNC_00080aba": {
                    "call_function_c": 4,
                    "execute_action_c": 1,
                    "execute_case_3": 1,
                    "execute_func_00080aba": 1,
                    "execute_function_3": 1,
                    "execute_function_c": 5,
                    "execute_operation_3": 1,
                    "function_3": 2,
                    "function_c": 1,
                    "handle_difference": 1,
                    "handle_difference3": 1,
                    "handle_difference_c": 2,
                    "handle_difference_case_3": 2,
                    "handle_result_3": 1,
                    "perform_action3": 1,
                    "process_error_case_3": 1,
                    "trigger_event_c": 1
                },
                "FUNC_00080abc": {
                    "call_function_d": 4,
                    "execute_action_d": 1,
                    "execute_case_4": 1,
                    "execute_func_00080abc": 1,
                    "execute_function_4": 1,
                    "execute_function_d": 5,
                    "execute_operation_4": 1,
                    "function_4": 2,
                    "function_d": 1,
                    "handle_difference": 1,
                    "handle_difference4": 1,
                    "handle_difference_case_4": 2,
                    "handle_difference_d": 2,
                    "handle_result_4": 1,
                    "perform_action4": 1,
                    "process_error_case_4": 1,
                    "trigger_event_d": 1
                },
                "FUN_00080ce0": {
                    "calculate_and_check_differences": 1,
                    "calculate_and_execute_difference": 1,
                    "calculate_and_handle_differences": 6,
                    "calculate_differences": 2,
                    "check_and_call_difference_calculation_functions": 1,
                    "check_and_call_functions": 6,
                    "check_and_execute_calculations": 4,
                    "check_and_execute_difference_calculations": 2,
                    "check_and_execute_functions": 3,
                    "check_and_execute_operations": 1,
                    "check_and_perform_differences": 1,
                    "check_and_process_data": 1,
                    "check_and_trigger_events": 1,
                    "check_differences": 1
                },
                "calculate_difference_000813e4": {
                    "calculate_difference": 27
                },
                "iVar1": {
                    "difference": 3,
                    "difference_result": 2,
                    "result": 15
                }
            },
            "called": [
                "FUN_000813e4",
                "FUN_00080abc",
                "FUN_00080ab8",
                "FUN_00080aba",
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid calculate_and_handle_differences_00080ce0(void)\n\n{\n  int result;\n  \n  result = calculate_difference(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = calculate_difference(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = calculate_difference(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = calculate_difference(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "current_name": "calculate_and_handle_differences_00080ce0",
            "entrypoint": "0x00080ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ce0": "calculate_and_handle_differences_00080ce0",
                "calculate_difference_000813e4": "calculate_difference",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "additional_data": {
                "FUN_00080d2e": {
                    "set_value_and_operate": 1,
                    "update_data": 5,
                    "update_flags": 1,
                    "update_memory": 1,
                    "update_memory_with_switch": 1,
                    "update_param": 4,
                    "update_parameter": 10,
                    "update_parameter_value": 5,
                    "update_value": 2,
                    "update_values": 1
                },
                "param_1": {
                    "base_address": 19,
                    "data": 1,
                    "data_address": 1,
                    "data_offset": 1,
                    "data_pointer": 2,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_location": 1,
                    "object_address": 1,
                    "ptr": 2,
                    "struct_ptr": 1
                },
                "param_2": {
                    "action_type": 4,
                    "case_switch": 1,
                    "case_type": 1,
                    "mode": 3,
                    "operation": 5,
                    "operation_type": 7,
                    "option": 7,
                    "parameter_type": 1,
                    "switch_case": 1,
                    "update_type": 1
                },
                "param_3": {
                    "data_value": 1,
                    "flag_value": 1,
                    "new_data": 1,
                    "new_parameter": 2,
                    "new_value": 16,
                    "value": 10
                },
                "uVar1": {
                    "new_value": 1,
                    "result": 2,
                    "result_value": 1,
                    "updated_flags": 1,
                    "updated_value": 25
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid update_parameter_value_00080d2e(int base_address,undefined4 option,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(option) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\nswitchD_00080d34_caseD_6:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_00080d2e",
            "entrypoint": "0x00080d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d2e": "update_parameter_value_00080d2e",
                "param_1": "base_address",
                "param_2": "option",
                "param_3": "new_value",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d54": {
            "additional_data": {
                "0x11": {
                    "array_index1": 2,
                    "index1": 5
                },
                "0x18": {
                    "array_index2": 2,
                    "index3": 5
                },
                "0x19": {
                    "array_index3": 2,
                    "index2": 5
                },
                "0x20": {
                    "array_index6": 2,
                    "index6": 5
                },
                "5": {
                    "array_index7": 2,
                    "index7": 5
                },
                "8": {
                    "array_index4": 2,
                    "index4": 5
                },
                "9": {
                    "array_index5": 2,
                    "index5": 5
                },
                "FUN_00080d54": {
                    "set_data": 1,
                    "set_param_values": 1,
                    "set_parameters": 6,
                    "set_values": 3,
                    "set_values_based_on_flag": 1,
                    "update_flags_and_values": 1,
                    "update_param": 1,
                    "update_param_array": 1,
                    "update_param_values": 2,
                    "update_parameter_values": 3,
                    "update_parameters": 3,
                    "update_params": 2,
                    "update_values": 6
                },
                "bVar1": {
                    "has_negative_flag": 1,
                    "is_flag_set": 3,
                    "is_negative": 20,
                    "is_negative_flag": 5,
                    "is_zero_bit_set": 1,
                    "negative_flag": 1
                },
                "param_1": {
                    "array": 6,
                    "data": 2,
                    "destination_array": 1,
                    "output": 1,
                    "output_array": 5,
                    "param_array": 5,
                    "parameter_array": 2,
                    "parameters": 6,
                    "params": 1,
                    "params_array": 1,
                    "result_array": 1
                },
                "param_2": {
                    "new_value": 10,
                    "param_value": 1,
                    "value": 19,
                    "value_to_update": 1
                },
                "param_3": {
                    "bit_mask": 3,
                    "bitmask": 1,
                    "flag": 3,
                    "flags": 21,
                    "input_value": 2,
                    "param_flags": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid update_parameter_values_00080d54(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[0x11] = value;\n  if (is_negative) {\n    array[0x19] = value;\n  }\n  if (!is_negative) {\n    array[0x18] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = value;\n  }\n  if (!is_negative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "current_name": "update_parameter_values_00080d54",
            "entrypoint": "0x00080d54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d54": "update_parameter_values_00080d54",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "additional_data": {
                "0x11": {
                    "parameter_index1": 1
                },
                "0x14": {
                    "parameter_index5": 1
                },
                "0x15": {
                    "parameter_index4": 1
                },
                "0x18": {
                    "parameter_index2": 1
                },
                "0x19": {
                    "parameter_index3": 1
                },
                "0xc": {
                    "parameter_index7": 1
                },
                "0xd": {
                    "parameter_index6": 1
                },
                "FUN_00080d7a": {
                    "assign_param_values": 1,
                    "assign_values": 1,
                    "assign_values_to_params": 1,
                    "initialize_params": 1,
                    "map_values_to_params": 1,
                    "set_param_values": 2,
                    "set_parameters": 5,
                    "update_param_values": 6,
                    "update_parameter_values": 1,
                    "update_parameters": 11,
                    "update_values": 1
                },
                "param_1": {
                    "data": 1,
                    "output_array": 6,
                    "output_buffer": 1,
                    "param_array": 5,
                    "parameters": 12,
                    "params": 5,
                    "result": 1
                },
                "param_2": {
                    "input_value": 2,
                    "new_param": 2,
                    "new_param_value": 2,
                    "new_value": 9,
                    "value": 16
                },
                "param_3": {
                    "check_a": 1,
                    "check_value1": 1,
                    "condition1": 12,
                    "condition_a": 3,
                    "first_condition": 1,
                    "flag1": 6,
                    "flag_1": 1,
                    "is_param3_zero": 4,
                    "is_zero1": 1,
                    "is_zero_a": 1
                },
                "param_4": {
                    "check_b": 1,
                    "check_value2": 1,
                    "condition2": 12,
                    "condition_b": 3,
                    "flag2": 6,
                    "flag_2": 1,
                    "is_param4_zero": 4,
                    "is_zero2": 1,
                    "is_zero_b": 1,
                    "second_condition": 1
                },
                "param_5": {
                    "check_c": 1,
                    "check_value3": 1,
                    "condition3": 12,
                    "condition_c": 3,
                    "flag3": 6,
                    "flag_3": 1,
                    "is_param5_zero": 4,
                    "is_zero3": 1,
                    "is_zero_c": 1,
                    "third_condition": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "code": "\nvoid update_parameters_00080d7a(undefined4 *parameters,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  parameters[0x11] = value;\n  if (condition3 == 0) {\n    parameters[0x18] = value;\n  }\n  else {\n    parameters[0x19] = value;\n  }\n  if (condition2 == 0) {\n    parameters[0x15] = value;\n  }\n  else {\n    parameters[0x14] = value;\n  }\n  if (condition1 == 0) {\n    parameters[0xd] = value;\n  }\n  else {\n    parameters[0xc] = value;\n  }\n  parameters[4] = value;\n  *parameters = value;\n  return;\n}\n\n",
            "current_name": "update_parameters_00080d7a",
            "entrypoint": "0x00080d7a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1": "parameters",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080da0": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1
                },
                "FUN_00080da0": {
                    "update_parameter": 13,
                    "update_parameter_value": 17,
                    "update_parameter_values": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "bVar1": {
                    "is_flag_negative": 2,
                    "is_negative": 24,
                    "is_negative_flag": 4
                },
                "param_1": {
                    "context": 1,
                    "data": 1,
                    "data_struct": 1,
                    "device": 13,
                    "device_address": 6,
                    "device_param1": 1,
                    "device_ptr": 1,
                    "function_context": 1,
                    "function_ptr": 1,
                    "obj_ptr": 1,
                    "param1": 1,
                    "parameter1": 2,
                    "target_address": 1
                },
                "param_2": {
                    "device_param2": 1,
                    "input_type": 1,
                    "option": 1,
                    "param2": 1,
                    "param_type": 4,
                    "parameter2": 1,
                    "parameter_type": 17,
                    "type": 5
                },
                "param_3": {
                    "new_value": 16,
                    "param3": 1,
                    "param_value": 1,
                    "parameter3": 1,
                    "parameter_value": 3,
                    "value": 9
                },
                "param_4": {
                    "bit_value": 1,
                    "bitmask": 4,
                    "flag": 11,
                    "flags": 12,
                    "param4": 1,
                    "parameter4": 1,
                    "parameter_flag": 1
                },
                "update_parameter_value_00080d2e": {
                    "update_param_value": 1,
                    "update_parameter": 1,
                    "update_parameter_value": 4,
                    "update_parameter_value_helper": 5,
                    "update_parameter_value_helper1": 1,
                    "update_parameter_value_internal": 1,
                    "update_single_parameter": 1,
                    "update_single_parameter_value": 3
                },
                "update_parameter_values_00080d54": {
                    "update_multiple_parameter_values": 2,
                    "update_multiple_parameters": 1,
                    "update_param_values": 1,
                    "update_parameter_value_helper2": 1,
                    "update_parameter_values": 9,
                    "update_parameter_values_helper": 2,
                    "update_parameter_with_flag": 1
                },
                "update_parameters_00080d7a": {
                    "update_multiple_parameters": 1,
                    "update_parameters": 14,
                    "update_parameters_helper": 1,
                    "update_params": 1
                }
            },
            "called": [
                "FUN_00080d7a",
                "FUN_00080d54",
                "FUN_00080d2e"
            ],
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "code": "\nundefined4 update_parameter_value_00080da0(int device,int parameter_type,undefined4 new_value,uint flags)\n\n{\n  bool is_negative;\n  \n  switch(parameter_type) {\n  case 1:\n  case 2:\n    update_parameter_value_00080da0_helper(device,parameter_type,new_value);\n    is_negative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = new_value;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = new_value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = new_value;\n    }\n    break;\n  case 3:\n    update_parameter_value_00080da0s(device,new_value,flags,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    update_parameters(device,new_value,parameter_type == 5,(flags << 0x1d) >> 0x1f,flags & 1,parameter_type,new_value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_parameter_value_00080da0",
            "entrypoint": "0x00080da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080da0": "update_parameter_value_00080da0",
                "bVar1": "is_negative",
                "param_1": "device",
                "param_2": "parameter_type",
                "param_3": "new_value",
                "param_4": "flags",
                "update_parameter_value_00080d2e": "update_parameter_value_helper",
                "update_parameter_values_00080d54": "update_parameter_values",
                "update_parameters_00080d7a": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e04": {
            "additional_data": {
                "FUN_00080e04": {
                    "apply_bitwise_and_check": 1,
                    "bitwise_and_check": 1,
                    "check_and_extract_flags": 1,
                    "check_bits": 1,
                    "check_bitwise_combination": 1,
                    "check_bitwise_condition": 3,
                    "check_bitwise_conditions": 2,
                    "check_bitwise_conjunction": 1,
                    "check_bitwise_intersection": 1,
                    "check_bitwise_operation": 1,
                    "check_bitwise_operations": 1,
                    "check_condition": 1,
                    "check_conditions": 2,
                    "check_flag": 1,
                    "check_flags": 1,
                    "check_intersection": 5,
                    "check_mask": 1,
                    "check_permission": 2,
                    "check_permissions": 2,
                    "check_value_and_mask": 1
                },
                "FUN_080e04": {
                    "check_bitwise_and_comparison": 1
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "base_address": 3,
                    "data_address": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input_address": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "input_value": 4,
                    "obj_ptr": 1,
                    "object1": 2,
                    "object_address": 1,
                    "offset": 4,
                    "pointer_1": 1,
                    "rect_address": 1,
                    "struct_address": 1,
                    "struct_offset": 1,
                    "struct_pointer": 1,
                    "structure_offset": 1
                },
                "param_2": {
                    "arg2": 1,
                    "bit_mask": 1,
                    "bitmask": 4,
                    "flag": 1,
                    "flag_mask": 1,
                    "flags": 2,
                    "flags_param": 1,
                    "input_mask": 1,
                    "mask": 11,
                    "mask_value": 2,
                    "object2": 2,
                    "permission_mask": 3,
                    "permissions": 1
                },
                "uVar1": {
                    "extracted_flags": 1,
                    "intersection_mask": 1,
                    "output_mask": 1,
                    "result": 28
                }
            },
            "called": [],
            "calling": [
                "FUN_00081318"
            ],
            "code": "\nuint check_bitwise_intersection_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_bitwise_intersection_00080e04",
            "entrypoint": "0x00080e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e18": {
            "additional_data": {
                "FUN_00080e18": {
                    "check_and_set_bit": 15,
                    "check_and_update_bit": 6,
                    "check_and_update_flag": 1,
                    "check_bit_and_set": 5,
                    "check_bit_position": 1,
                    "check_bit_set": 1,
                    "check_bitmask": 1,
                    "set_bit": 1
                },
                "_DAT_400e0610": {
                    "bit_setting1": 1,
                    "output_a": 1,
                    "result1": 1,
                    "result_1": 1
                },
                "_DAT_400e0618": {
                    "bit_mask1": 1,
                    "bitmask_a": 1,
                    "data_1": 1,
                    "mask1": 1
                },
                "_DAT_400e0700": {
                    "bit_setting2": 1,
                    "output_b": 1,
                    "result2": 1,
                    "result_2": 1
                },
                "_DAT_400e0708": {
                    "bit_mask2": 1,
                    "bitmask_b": 1,
                    "data_2": 1,
                    "mask2": 1
                },
                "param_1": {
                    "bit_index": 3,
                    "bit_position": 10,
                    "input": 3,
                    "input_value": 3,
                    "num": 1,
                    "number": 1,
                    "position": 1,
                    "value": 9
                },
                "uVar1": {
                    "bit": 2,
                    "bit_mask": 22,
                    "bitmask": 2,
                    "mask": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00081210",
                "FUN_00081508",
                "FUN_00080ae4"
            ],
            "code": "\n\n\nundefined4 check_bit_and_set_00080e18(uint bit_position)\n\n{\n  uint bit_mask;\n  \n  if (bit_position < 0x2d) {\n    if (bit_position < 0x20) {\n      bit_mask = 1 << (bit_position & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (bit_position - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_bit_and_set_00080e18",
            "entrypoint": "0x00080e18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e18": "check_bit_and_set_00080e18",
                "param_1": "bit_position",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "additional_data": {
                "84000000": {
                    "array_value": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array_of_structures": 1,
                    "elf_rel_array": 4,
                    "elf_relocation_array": 4,
                    "memory_array": 1,
                    "rel_array": 1,
                    "relocation_array": 4,
                    "relocation_table": 5
                },
                "FUN_00080e9c": {
                    "initialize_data": 5,
                    "initialize_memory": 21,
                    "initialize_memory_and_variables": 1,
                    "set_initial_values": 1
                },
                "_DAT_400e0620": {
                    "counter": 3,
                    "data": 1,
                    "data1": 1,
                    "data_value": 3,
                    "data_variable1": 1,
                    "memory_address": 1,
                    "memory_size": 1,
                    "memory_value": 3,
                    "offset": 2,
                    "offset1": 1,
                    "shift_value": 1,
                    "shifted_value": 5,
                    "shifted_value1": 1,
                    "some_memory_address": 1,
                    "temp_value": 1,
                    "value": 3,
                    "value1": 1,
                    "value_1": 1
                },
                "_DAT_400e0628": {
                    "another_data": 1,
                    "constant": 1,
                    "constant1": 2,
                    "constant_value": 3,
                    "constant_value1": 2,
                    "data": 1,
                    "data3": 1,
                    "data_value": 1,
                    "data_variable3": 1,
                    "flag": 1,
                    "initialized_value1": 1,
                    "loop_control_value": 1,
                    "magic_number": 1,
                    "offset": 1,
                    "offset3": 1,
                    "output_value": 1,
                    "register": 1,
                    "result": 1,
                    "value3": 2
                },
                "_DAT_400e0630": {
                    "constant": 4,
                    "constant2": 2,
                    "constant_value": 1,
                    "constant_value2": 2,
                    "constant_value_2": 1,
                    "count": 1,
                    "counter": 2,
                    "data4": 1,
                    "data_variable4": 1,
                    "initialized_value2": 1,
                    "loop_iteration": 1,
                    "more_data": 1,
                    "offset4": 1,
                    "value": 2,
                    "value4": 2
                },
                "_DAT_400e0668": {
                    "bitmask": 1,
                    "counter": 1,
                    "data2": 1,
                    "data_variable2": 1,
                    "loop_condition": 4,
                    "loop_control1": 1,
                    "loop_counter": 2,
                    "loop_variable": 3,
                    "mask": 2,
                    "offset2": 1,
                    "some_variable": 1,
                    "temp": 4,
                    "temp_value": 4,
                    "temporary_value": 1,
                    "value": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "_DAT_400e0668_2": {
                    "loop_condition_2": 1
                },
                "_DAT_400e0668_3": {
                    "loop_condition_3": 1
                },
                "_DAT_400e0a00": {
                    "address1": 1,
                    "base_address": 2,
                    "buffer_size": 5,
                    "buffer_size1": 1,
                    "mem_block_a": 1,
                    "memory_address1": 1,
                    "memory_block1": 2,
                    "memory_block_size": 1,
                    "memory_region1": 1,
                    "memory_size1": 3,
                    "memory_size_1": 1,
                    "memory_start": 1,
                    "memory_start_address": 1,
                    "page_size": 1,
                    "start_address": 1,
                    "value1": 1
                },
                "_DAT_400e0c00": {
                    "address2": 1,
                    "buffer_capacity": 1,
                    "buffer_size2": 3,
                    "data_size": 1,
                    "end_address": 1,
                    "input_size": 1,
                    "mem_block_b": 1,
                    "memory_address2": 1,
                    "memory_block2": 2,
                    "memory_block_size2": 1,
                    "memory_end": 1,
                    "memory_end_address": 1,
                    "memory_region2": 1,
                    "memory_size2": 3,
                    "memory_size_2": 1,
                    "size": 2,
                    "stack_size": 1,
                    "value2": 1
                },
                "_FUN_00080e9c": {
                    "initialize_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n\n\nvoid initialize_memory_and_variables_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_table[6].r_offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_and_variables_00080e9c",
            "entrypoint": "0x00080e9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_00080e9c": "initialize_memory_and_variables_00080e9c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "additional_data": {
                "FUN_00080f9c": {
                    "calculate_function_output": 1,
                    "calculate_index": 5,
                    "calculate_params": 1,
                    "calculate_position": 1,
                    "calculate_result": 1,
                    "calculate_threshold": 15,
                    "calculate_value": 1,
                    "find_config_index": 1,
                    "find_matching_threshold": 1,
                    "find_threshold": 2,
                    "reverse_and_find_threshold": 1
                },
                "local_58": {
                    "allowed_thresholds": 1,
                    "indexes": 1,
                    "threshold_array": 4,
                    "threshold_table": 1,
                    "threshold_values": 7,
                    "thresholds": 16,
                    "thresholds_array": 1
                },
                "param_1": {
                    "config_data": 1,
                    "output": 9,
                    "output_array": 6,
                    "result": 9,
                    "result_ptr": 1,
                    "threshold": 4,
                    "threshold_ptr": 1
                },
                "param_2": {
                    "array_size": 1,
                    "data_size": 2,
                    "input_data_size": 1,
                    "input_length": 3,
                    "input_size": 7,
                    "input_value": 7,
                    "size": 2,
                    "total": 1,
                    "total_cycles": 1,
                    "total_instructions": 1,
                    "total_size": 3,
                    "total_time": 2
                },
                "param_3": {
                    "block_size": 5,
                    "chunk_size": 3,
                    "complexity_factor": 1,
                    "constant_a": 1,
                    "divisor": 5,
                    "factor": 2,
                    "factor1": 2,
                    "factor_1": 2,
                    "factor_a": 1,
                    "mul_factor": 1,
                    "multiplier": 2,
                    "num_iterations": 1,
                    "threshold_factor": 2,
                    "threshold_mul": 1,
                    "threshold_step": 1,
                    "threshold_unit": 1
                },
                "param_4": {
                    "constant_b": 1,
                    "conversion_factor": 1,
                    "cut_off": 1,
                    "div_factor": 1,
                    "factor2": 2,
                    "factor_2": 2,
                    "factor_b": 1,
                    "multiplication_factor": 1,
                    "multiplier": 6,
                    "threshold": 8,
                    "threshold_factor": 2,
                    "threshold_multiplier": 1,
                    "time": 1,
                    "time_constraint": 1,
                    "time_factor": 1,
                    "value": 1
                },
                "uVar1": {
                    "div_result": 3,
                    "division_result": 2,
                    "divisor": 5,
                    "num_blocks": 3,
                    "num_chunks": 2,
                    "num_thresholds": 3,
                    "quotient": 7,
                    "threshold": 1,
                    "threshold_count": 1,
                    "threshold_index": 1,
                    "total_blocks": 1
                },
                "uVar2": {
                    "current_index": 1,
                    "i": 4,
                    "index": 23,
                    "local_index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *output,uint input_size,int block_size,int threshold)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output = 1;\n  output[1] = 0;\n  output[0x48] = 0x202;\n  output[0x41] = 0;\n  output[0x45] = 0;\n  quotient = input_size / (uint)(block_size * 2);\n  if (input_size == block_size * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(threshold * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_00080f9c",
            "entrypoint": "0x00080f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "local_58": "thresholds",
                "param_1": "output",
                "param_2": "input_size",
                "param_3": "block_size",
                "param_4": "threshold",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081034": {
            "additional_data": {
                "4": {
                    "flag_in_memory": 1
                },
                "FUN_00081034": {
                    "combine_values": 1,
                    "modify_register": 1,
                    "set_flag_bits": 1,
                    "set_flag_in_register": 1,
                    "update_config": 2,
                    "update_data": 1,
                    "update_flag": 1,
                    "update_flag_bits": 1,
                    "update_flag_in_memory": 2,
                    "update_flags": 3,
                    "update_memory_value": 1,
                    "update_param_with_flag": 2,
                    "update_parameter": 3,
                    "update_parameter_flags": 2,
                    "update_parameter_value": 3,
                    "update_parameters": 1,
                    "update_register": 1,
                    "update_register_value": 1,
                    "update_value": 2,
                    "update_value_in_memory": 1
                },
                "bitMask": {
                    "mask_val": 1
                },
                "newValue": {
                    "new_val": 1
                },
                "param_1": {
                    "base_address": 11,
                    "config_address": 2,
                    "data_address": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "flag_address": 1,
                    "memory_address": 4,
                    "param_address": 1,
                    "parameter_address": 2,
                    "register_address": 4,
                    "target_address": 1
                },
                "param_2": {
                    "flag_mask": 1,
                    "flag_value": 2,
                    "new_bit_value": 1,
                    "new_bit_values": 1,
                    "new_data": 2,
                    "new_flag": 1,
                    "new_flag_value": 1,
                    "new_flags": 1,
                    "new_param": 1,
                    "new_param2": 1,
                    "new_parameter_value": 1,
                    "new_value": 7,
                    "original_value": 1,
                    "value": 4,
                    "value1": 3,
                    "value_1": 1,
                    "value_to_set": 1,
                    "value_to_update": 1
                },
                "param_3": {
                    "bit": 1,
                    "bit_flag": 2,
                    "bit_mask": 5,
                    "bit_selector": 1,
                    "bit_to_modify": 1,
                    "bit_value": 3,
                    "bitmask": 2,
                    "extra_flag": 1,
                    "flag": 6,
                    "flag_mask": 1,
                    "flag_value": 1,
                    "mask": 1,
                    "new_flag_value": 1,
                    "new_param3": 1,
                    "value2": 3,
                    "value_2": 1
                },
                "param_4": {
                    "bit_mask": 1,
                    "bit_position": 1,
                    "new_bit_value": 1
                },
                "param_5": {
                    "bit_shift": 1,
                    "bit_value": 1,
                    "shifted_mask": 1
                },
                "param_6": {
                    "bit_shift": 1,
                    "existing_value": 1
                },
                "param_7": {
                    "mask": 1
                },
                "param_8": {
                    "new_masked_value": 1
                },
                "registerAddress": {
                    "reg_addr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_parameter_value_00081034(int base_address,uint new_value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = new_value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_00081034",
            "entrypoint": "0x00081034",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081034": "update_parameter_value_00081034",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081042": {
            "additional_data": {
                "0x18": {
                    "shift_bits1": 1
                },
                "0x1c": {
                    "shift_bits2": 1
                },
                "0xf": {
                    "bit_mask": 1
                },
                "FUN_00081042": {
                    "combine_bit_fields": 1,
                    "combine_bits": 1,
                    "combine_parameters": 2,
                    "combine_params": 1,
                    "merge_bits": 1,
                    "set_bit_field": 1,
                    "set_bit_fields": 1,
                    "set_bit_values": 1,
                    "set_flags": 1,
                    "set_register_values": 1,
                    "update_config": 1,
                    "update_config_flags": 1,
                    "update_configuration": 2,
                    "update_data": 1,
                    "update_flags": 4,
                    "update_memory": 1,
                    "update_param_values": 2,
                    "update_parameter": 1,
                    "update_parameter_bits": 1,
                    "update_parameters": 1,
                    "update_register": 4,
                    "update_registers": 1
                },
                "param_1": {
                    "address": 1,
                    "array_address": 1,
                    "base_address": 5,
                    "config": 1,
                    "config_address": 1,
                    "config_ptr": 2,
                    "data": 1,
                    "data_address": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "dest_address": 1,
                    "input_address": 2,
                    "memory_address": 2,
                    "param_address": 2,
                    "ptr": 1,
                    "register_address": 5,
                    "register_base": 1
                },
                "param_2": {
                    "bit_field1": 2,
                    "bit_value": 1,
                    "bitmask": 1,
                    "bitmask1": 1,
                    "bitmask_value": 1,
                    "field1": 1,
                    "flag_value": 1,
                    "input_flags": 1,
                    "input_value": 1,
                    "input_value1": 3,
                    "mask1": 1,
                    "new_bits": 1,
                    "new_option": 1,
                    "new_param": 1,
                    "new_value": 1,
                    "new_value1": 1,
                    "param_a": 1,
                    "source_value": 1,
                    "value": 1,
                    "value1": 7,
                    "value_1": 1,
                    "value_a": 1
                },
                "param_3": {
                    "bit_field2": 2,
                    "bit_mask1": 1,
                    "bitmask2": 1,
                    "current_config": 1,
                    "current_data": 1,
                    "current_dest_value": 1,
                    "current_flags": 1,
                    "current_value": 1,
                    "existing_value": 1,
                    "field2": 1,
                    "input_value2": 3,
                    "mask1": 2,
                    "mask2": 1,
                    "new_value2": 1,
                    "old_value": 2,
                    "param_b": 1,
                    "register_value": 1,
                    "value2": 7,
                    "value_2": 1,
                    "value_b": 1
                },
                "param_4": {
                    "additional_flags": 1,
                    "additional_value": 1,
                    "bit_field3": 2,
                    "bit_mask2": 1,
                    "bit_value": 1,
                    "bitmask3": 1,
                    "bits_to_update": 1,
                    "current_source_value": 1,
                    "field3": 1,
                    "flag_value": 2,
                    "input_value3": 3,
                    "mask": 1,
                    "mask2": 2,
                    "mask3": 1,
                    "new_value": 1,
                    "new_value3": 1,
                    "param_c": 1,
                    "value3": 7,
                    "value_3": 1,
                    "value_c": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_config_flags_00081042(int register_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(register_address + 4) =\n       value2 | *(uint *)(register_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_config_flags_00081042",
            "entrypoint": "0x00081042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081042": "update_config_flags_00081042",
                "param_1": "register_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008105c": {
            "additional_data": {
                "0x14": {
                    "offset": 1
                },
                "FUN_0008105c": {
                    "set_bit": 16,
                    "set_bit_at_index": 3,
                    "set_bit_at_offset": 1,
                    "set_bit_at_position": 1,
                    "set_bit_flag": 1,
                    "set_bit_in_memory": 4,
                    "set_bit_in_value": 2,
                    "set_bit_value": 2,
                    "set_bitmask": 1
                },
                "param_1": {
                    "address": 2,
                    "array": 1,
                    "array_address": 2,
                    "base_address": 19,
                    "data": 2,
                    "input": 1,
                    "memory_address": 3,
                    "value": 1
                },
                "param_2": {
                    "bit_index": 7,
                    "bit_position": 23,
                    "index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081210"
            ],
            "code": "\nvoid set_bit_in_memory_0008105c(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_0008105c",
            "entrypoint": "0x0008105c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008105c": "set_bit_in_memory_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081066": {
            "additional_data": {
                "0x14": {
                    "error_code": 1
                },
                "0xffff": {
                    "default_value": 2
                },
                "FUN_00081066": {
                    "initialize_memory": 2,
                    "initialize_memory_address": 1,
                    "initialize_value": 3,
                    "set_default_value": 13,
                    "set_error_code": 2,
                    "set_invalid_value": 1,
                    "set_memory_to_ffff": 1,
                    "set_memory_value": 1,
                    "set_param_to_ffff": 1,
                    "set_param_to_max_value": 2,
                    "set_param_to_maximum": 1,
                    "set_param_value": 1,
                    "set_param_value_to_max": 1,
                    "set_to_max_value": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 7,
                    "data": 2,
                    "data_address": 1,
                    "error_code": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_parameter": 1,
                    "input_value": 1,
                    "memory_address": 2,
                    "object": 2,
                    "object_address": 6,
                    "param": 2,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid set_default_value_00081066(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00081066",
            "entrypoint": "0x00081066",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008106e": {
            "additional_data": {
                "FUN_0008106e": {
                    "save_parameter": 1,
                    "set_param": 5,
                    "set_param2": 1,
                    "set_param_at_offset": 1,
                    "set_param_value": 18,
                    "set_parameter": 2,
                    "set_parameter_value": 2,
                    "store_parameter_value": 1
                },
                "param_1": {
                    "base_address": 7,
                    "data": 1,
                    "memory_address": 1,
                    "obj_address": 1,
                    "object_address": 17,
                    "object_ptr": 2,
                    "parameter_address": 1,
                    "target_address": 1
                },
                "param_2": {
                    "new_value": 13,
                    "param_value": 7,
                    "parameter_value": 4,
                    "value": 6,
                    "value_to_update": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid set_param_value_0008106e(int object_address,undefined4 new_value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = new_value;\n  return;\n}\n\n",
            "current_name": "set_param_value_0008106e",
            "entrypoint": "0x0008106e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "object_address",
                "param_2": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081184": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_00000234": {
                    "result": 1
                },
                "FUN_00081184": {
                    "get_default_value": 5,
                    "get_return_value": 3,
                    "get_zero": 2,
                    "initialize": 15,
                    "initialize_application": 1,
                    "initialize_function": 1,
                    "initialize_program": 1,
                    "initialize_system": 1,
                    "initialize_value": 1,
                    "return_zero": 1
                },
                "PTR_00000123": {
                    "buffer": 1
                },
                "return": {
                    "result": 2
                },
                "undefined4": {
                    "int": 1,
                    "uint32_t": 1,
                    "void": 6
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_system_00081184(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_system_00081184",
            "entrypoint": "0x00081184",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081184": "initialize_system_00081184",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008118c": {
            "additional_data": {
                "DAT_20071180": {
                    "accumulated_value": 1,
                    "current_offset": 1,
                    "global_var": 1,
                    "sum": 2,
                    "sum_before": 1
                },
                "FUN_0008118c": {
                    "add_and_return_value": 1,
                    "add_param_to_global_var": 1,
                    "addition_function": 1,
                    "calculate_incremented_value": 1,
                    "calculate_new_offset": 1,
                    "calculate_new_value": 7,
                    "calculate_next_value": 1,
                    "calculate_offset": 1,
                    "calculate_sum": 17
                },
                "iVar1": {
                    "initial_offset": 1,
                    "initial_value": 3,
                    "old_offset": 1,
                    "old_value": 2,
                    "original_value": 2,
                    "previous_sum": 10,
                    "previous_sum_value": 1,
                    "previous_value": 9,
                    "saved_value": 1,
                    "sum_after": 1
                },
                "param_1": {
                    "input": 7,
                    "input_number": 3,
                    "input_offset": 1,
                    "input_value": 15,
                    "num": 1,
                    "num_to_add": 2,
                    "number": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00082970"
            ],
            "code": "\nint calculate_sum_0008118c(int input_value)\n\n{\n  int previous_sum;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previous_sum = DAT_20071180;\n  DAT_20071180 = input_value + DAT_20071180;\n  return previous_sum;\n}\n\n",
            "current_name": "calculate_sum_0008118c",
            "entrypoint": "0x0008118c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "iVar1": "previous_sum",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ae": {
            "additional_data": {
                "0xffffffff": {
                    "error_code": 1
                },
                "FUN_000811ae": {
                    "clear_error_flag": 1,
                    "get_constant_value": 1,
                    "get_default_value": 6,
                    "get_error_code": 13,
                    "get_negative_one": 3,
                    "get_return_value": 2,
                    "initialize_error_code": 1,
                    "initialize_error_value": 1,
                    "initialize_flag": 1,
                    "return_error_code": 1
                },
                "PTR_UNDEFINED": {
                    "error_flag": 1
                },
                "undefined4": {
                    "error_code": 4,
                    "int": 2,
                    "status": 1,
                    "uint32_t": 8,
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_000811ae(void)\n\n{\n  return 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_000811ae",
            "entrypoint": "0x000811ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b4": {
            "additional_data": {
                "0x2000": {
                    "initial_value": 1,
                    "new_value": 1
                },
                "FUN_000811b4": {
                    "initialize_memory": 13,
                    "set_memory": 1,
                    "set_memory_address": 1,
                    "set_memory_flag": 1,
                    "set_memory_mapped_value": 1,
                    "set_memory_page_size": 1,
                    "set_memory_permission": 2,
                    "set_memory_segment_permissions": 1,
                    "set_memory_size": 2,
                    "set_memory_value": 8
                },
                "param_1": {
                    "base_address": 1,
                    "input": 1,
                    "memory_address": 1,
                    "new_value": 1,
                    "output_address": 1,
                    "param": 7,
                    "param1": 12,
                    "reg1": 1,
                    "result": 2,
                    "unused_parameter": 1,
                    "value": 3
                },
                "param_2": {
                    "address": 5,
                    "base_address": 1,
                    "buffer": 1,
                    "data_address": 1,
                    "destination_address": 1,
                    "input_address": 1,
                    "memory_address": 12,
                    "memory_location": 1,
                    "memory_offset": 1,
                    "param2": 4,
                    "reg2": 1,
                    "start_address": 1,
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000846b4"
            ],
            "code": "\nundefined4 initialize_memory_000811b4(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_000811b4",
            "entrypoint": "0x000811b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811be": {
            "additional_data": {
                "FUN_000811be": {
                    "calculate_return_value": 4,
                    "get_constant_value": 2,
                    "get_one": 4,
                    "get_return_value": 7,
                    "get_status": 1,
                    "get_success_flag": 1,
                    "get_true_value": 1,
                    "initialize": 3,
                    "initialize_flag": 1,
                    "initialize_return": 1,
                    "initialize_return_value": 1,
                    "initialize_thing": 1,
                    "initialize_value": 1,
                    "is_one": 1,
                    "perform_task": 1,
                    "set_return_value_to_one": 1
                },
                "PTH_fun_arg": {
                    "fun_arg": 1
                },
                "PTR_fun_ptr": {
                    "fun_ptr": 1
                },
                "VAR_1": {
                    "result": 1
                },
                "return": {
                    "result": 6,
                    "return_value": 1,
                    "success_flag": 1
                },
                "undefined4": {
                    "bool": 1,
                    "flag_type": 1,
                    "int": 3,
                    "return_value": 1,
                    "status": 2,
                    "uint32": 1,
                    "uint32_t": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000846dc"
            ],
            "code": "\nint get_return_value_000811be(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_000811be",
            "entrypoint": "0x000811be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811be": "get_return_value_000811be",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c2": {
            "additional_data": {
                "FUN_000811c2": {
                    "calculate_final_value": 1,
                    "calculate_return_value": 1,
                    "clear_memory": 1,
                    "get_default_value": 3,
                    "get_return_value": 5,
                    "get_zero": 2,
                    "initialize": 11,
                    "initialize_app": 1,
                    "initialize_application": 2,
                    "initialize_program": 1,
                    "initialize_system": 1,
                    "initialize_value": 1,
                    "initialize_zero": 1
                },
                "PTR_fun_000811c2": {
                    "ptr": 1
                },
                "PTR_fun_000811c2_00": {
                    "data": 1
                },
                "PTR_fun_000811c2_01": {
                    "result": 1
                },
                "undefined4": {
                    "int": 4,
                    "status": 1,
                    "uint32_t": 1,
                    "void": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_00084700"
            ],
            "code": "\nvoid initialize_application_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "initialize_application_000811c2",
            "entrypoint": "0x000811c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c2": "initialize_application_000811c2",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c6": {
            "additional_data": {
                "FUN_000811c6": {
                    "calculate_result": 1,
                    "clear_memory": 1,
                    "get_default_value": 6,
                    "get_error_code": 3,
                    "get_result": 1,
                    "get_return_value": 4,
                    "get_zero": 2,
                    "get_zero_value": 1,
                    "initialize": 4,
                    "initialize_application": 1,
                    "initialize_data": 2,
                    "initialize_game": 1,
                    "initialize_program": 1,
                    "initialize_system": 1,
                    "return_zero": 1
                },
                "return": {
                    "result": 1
                },
                "return_value": {
                    "result": 1
                },
                "undefined4": {
                    "int": 1,
                    "void": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_00084728"
            ],
            "code": "\nvoid get_zero_value_000811c6(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "get_zero_value_000811c6",
            "entrypoint": "0x000811c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c6": "get_zero_value_000811c6",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811cc": {
            "additional_data": {
                "FUN_000811cc": {
                    "convert_byte_array_to_unsigned_int": 1,
                    "convert_bytes_to_int": 1,
                    "convert_bytes_to_u_int": 1,
                    "convert_bytes_to_unsigned_int": 1,
                    "convert_data": 1,
                    "copy_byte_array": 2,
                    "copy_bytes": 7,
                    "copy_bytes_to_array": 2,
                    "copy_bytes_to_memory": 2,
                    "decode_and_store_data": 1,
                    "extract_bytes": 1,
                    "extract_data": 1,
                    "process_data": 10
                },
                "iVar1": {
                    "byte_index": 1,
                    "counter": 2,
                    "i": 7,
                    "idx": 1,
                    "index": 19
                },
                "param_1": {
                    "arg1": 3,
                    "buffer": 1,
                    "dest": 1,
                    "dest_array": 1,
                    "dest_ptr": 1,
                    "destination": 2,
                    "dst": 1,
                    "dst_buffer": 1,
                    "input_param": 1,
                    "input_size": 1,
                    "input_value": 2,
                    "output_data": 1,
                    "output_pointer": 1,
                    "param": 3,
                    "param1": 5,
                    "param_1": 1,
                    "param_a": 1,
                    "result": 1,
                    "size": 1,
                    "source": 1,
                    "source_array": 1
                },
                "param_2": {
                    "arg2": 3,
                    "array_start_index": 1,
                    "byte_array": 2,
                    "data_address": 1,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input_address": 1,
                    "input_array": 2,
                    "input_data": 2,
                    "input_pointer": 1,
                    "param2": 2,
                    "param_b": 1,
                    "source": 3,
                    "source_address": 1,
                    "source_array": 1,
                    "source_offset": 1,
                    "source_ptr": 1,
                    "src": 2,
                    "src_address": 1,
                    "src_buffer": 1,
                    "src_ptr": 1
                },
                "param_3": {
                    "arg3": 3,
                    "array_size": 2,
                    "byte_array_size": 2,
                    "data_length": 4,
                    "length": 3,
                    "num_bytes": 11,
                    "num_elements": 2,
                    "output_size": 1,
                    "param3": 1,
                    "param_c": 1,
                    "size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00084464"
            ],
            "code": "\n\n\nuint process_data_000811cc(undefined4 param1,int source,uint num_bytes)\n\n{\n  int index;\n  \n  for (index = 0; index < (int)num_bytes; index = index + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(source + index);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "process_data_000811cc",
            "entrypoint": "0x000811cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811cc": "process_data_000811cc",
                "iVar1": "index",
                "param_1": "param1",
                "param_2": "source",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008120c": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008120c",
            "entrypoint": "0x0008120c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081210": {
            "additional_data": {
                "FUN_00081210": {
                    "update_parameter": 6,
                    "update_parameter_value": 25
                },
                "_DAT_400e0614": {
                    "bit_storage_a_updated": 1,
                    "data11": 1,
                    "data_register1_result": 1,
                    "global_var2": 1,
                    "mask1_result": 1,
                    "mask_result1": 1,
                    "memory1_value": 1,
                    "memory_value2": 1,
                    "output1": 1,
                    "register1_masked": 1,
                    "register1_updated": 1,
                    "register2": 4
                },
                "_DAT_400e0618": {
                    "bit_storage_a": 1,
                    "data10": 1,
                    "data_register1": 1,
                    "global_var1": 1,
                    "mask1": 3,
                    "memory1": 1,
                    "memory_value1": 1,
                    "register1": 6
                },
                "_DAT_400e0704": {
                    "bit_storage_b_updated": 1,
                    "data13": 1,
                    "data_register2_result": 1,
                    "global_var4": 1,
                    "mask2_result": 1,
                    "mask_result2": 1,
                    "memory2_value": 1,
                    "memory_value4": 1,
                    "output2": 1,
                    "register2_masked": 1,
                    "register2_updated": 1,
                    "register4": 4
                },
                "_DAT_400e0708": {
                    "bit_storage_b": 1,
                    "data12": 1,
                    "data_register2": 1,
                    "global_var3": 1,
                    "mask2": 3,
                    "memory2": 1,
                    "memory_value3": 1,
                    "register2": 2,
                    "register3": 4
                },
                "bVar5": {
                    "bit_field_value1": 1,
                    "bit_value": 2,
                    "bit_value1": 3,
                    "bit_var1": 1,
                    "data_type": 1,
                    "input_type": 1,
                    "low_bits": 3,
                    "low_nibble": 3,
                    "lower_bits": 2,
                    "lower_nibble": 10,
                    "mode_low": 1,
                    "mode_lower": 1,
                    "mode_lower_bits": 1,
                    "type_low": 1
                },
                "bVar6": {
                    "all_bits": 1,
                    "bit_and_value": 2,
                    "bit_field_value2": 1,
                    "bit_masked": 1,
                    "bit_value2": 3,
                    "bit_var2": 1,
                    "byte": 1,
                    "byte_value": 4,
                    "byte_var": 6,
                    "combined_bits": 1,
                    "combined_nibbles": 1,
                    "current_value": 1,
                    "flag": 1,
                    "flags": 2,
                    "mode_bits": 1,
                    "mode_high": 1,
                    "mode_upper": 1,
                    "original_value": 1,
                    "type_full": 1
                },
                "check_bit_and_set_00080e18": {
                    "check_and_set_bit": 5,
                    "check_bit_and_set": 4
                },
                "iVar1": {
                    "new_value": 1,
                    "output_value": 2,
                    "result": 19,
                    "return_value": 9
                },
                "iVar7": {
                    "i_var": 1,
                    "index_multiply": 1,
                    "index_offset": 1,
                    "index_times1_c": 1,
                    "mem_var1": 1,
                    "offset": 8,
                    "param1_index": 1,
                    "param_index": 5,
                    "param_offset": 3,
                    "param_value": 1,
                    "parameter_index": 1,
                    "ptr_offset": 1,
                    "temp4": 2,
                    "temp_index": 2,
                    "temp_var4": 1,
                    "temp_variable1": 1
                },
                "iVar8": {
                    "i_var8": 1,
                    "mem_var2": 1,
                    "param1_value": 1,
                    "param_address": 2,
                    "param_value": 9,
                    "parameter": 2,
                    "parameter_addr": 1,
                    "parameter_address": 1,
                    "parameter_value": 8,
                    "ptr_value": 1,
                    "temp5": 1,
                    "temp_value": 1,
                    "temp_var5": 1,
                    "temp_variable2": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "index": 23,
                    "input_index": 2,
                    "input_param": 1,
                    "param1": 2,
                    "parameter_index": 2
                },
                "param_2": {
                    "mode": 4,
                    "new_value": 2,
                    "param2": 2,
                    "type": 1,
                    "update_type": 1,
                    "value": 21
                },
                "set_bit_in_memory_0008105c": {
                    "set_bit_in_memory": 1
                },
                "uVar2": {
                    "bit": 1,
                    "bit_index": 3,
                    "bit_mask": 9,
                    "bit_number": 1,
                    "bit_value": 1,
                    "mask": 3,
                    "position": 1,
                    "temp1": 3,
                    "temp_value": 3,
                    "temp_value1": 1,
                    "temp_var": 1,
                    "temp_var1": 4
                },
                "uVar3": {
                    "flag": 1,
                    "new_value": 1,
                    "new_value_type": 1,
                    "param_type": 1,
                    "parameter_type": 3,
                    "temp2": 3,
                    "temp_var2": 4,
                    "type": 3,
                    "update_type": 13,
                    "value_type": 1
                },
                "uVar4": {
                    "bit_and_result": 1,
                    "bit_check": 1,
                    "bit_mask": 6,
                    "bit_pattern": 1,
                    "bitmask": 1,
                    "check_value": 2,
                    "current_value": 1,
                    "masked_value": 1,
                    "result": 1,
                    "temp": 4,
                    "temp3": 3,
                    "temp_mask": 2,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var3": 4
                },
                "update_parameter_value_00080da0": {
                    "update_param_value": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 5,
                    "update_parameter_value_helper": 1
                }
            },
            "called": [
                "FUN_00080da0",
                "FUN_0008105c",
                "FUN_00080e18"
            ],
            "calling": [
                "FUN_00080164",
                "FUN_000804a8",
                "FUN_00081318"
            ],
            "code": "\n\n\nint update_parameter_value_00081210(int index,int value)\n\n{\n  int result;\n  uint bit_mask;\n  undefined4 update_type;\n  uint bit_mask;\n  byte lower_nibble;\n  byte byte_var;\n  int offset;\n  int param_value;\n  \n  result = index;\n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 4) {\n      result = set_bit_in_memory(0x400c0000,(&DAT_00084d31)[index * 0x1c]);\n    }\n    byte_var = (&DAT_20070d94)[index];\n    lower_nibble = byte_var & 0xf;\n    if ((lower_nibble < 3) && (byte_var != 0)) {\n      if (lower_nibble == 2) {\n        if (value == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (value == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (value == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (value != 1) {\nLAB_0008126c:\n      if (value == 0) {\n        result = index * 0x1c;\n        check_and_set_bit(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameter_value_00081210(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        byte_var = (&DAT_20070d94)[index] & 0xf0 | 2;\n      }\n      else {\n        if (value != 2) {\n          return result;\n        }\n        result = index * 0x1c;\n        check_and_set_bit(*(undefined4 *)(&DAT_00084d20 + result));\n        result = update_parameter_value_00081210(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        byte_var = (&DAT_20070d94)[index] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[index] = byte_var;\n      return result;\n    }\n    offset = index * 0x1c;\n    param_value = *(int *)(&DAT_00084d18 + offset);\n    if (byte_var >> 4 == 0) {\n      update_type = 4;\n    }\n    else {\n      update_type = 5;\n    }\n    result = update_parameter_value_00081210(param_value,update_type,*(undefined4 *)(&DAT_00084d1c + offset),\n                         *(undefined4 *)(&DAT_00084d28 + offset));\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf0 | 3;\n    if (*(int *)(param_value + 0x18) == -1) {\n      bit_mask = *(uint *)(&DAT_00084d20 + offset);\n      if (0x2c < bit_mask) {\n        return 1;\n      }\n      if (bit_mask < 0x20) {\n        bit_mask = 1 << (bit_mask & 0xff);\n        bit_mask = _DAT_400e0618 & bit_mask;\n        if (bit_mask == bit_mask) {\n          _DAT_400e0614 = bit_mask;\n        }\n      }\n      else {\n        bit_mask = 1 << (bit_mask - 0x20 & 0xff);\n        bit_mask = _DAT_400e0708 & bit_mask;\n        if (bit_mask == bit_mask) {\n          _DAT_400e0704 = bit_mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "update_parameter_value_00081210",
            "entrypoint": "0x00081210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081210": "update_parameter_value_00081210",
                "bVar5": "lower_nibble",
                "bVar6": "byte_var",
                "check_bit_and_set_00080e18": "check_and_set_bit",
                "iVar1": "result",
                "iVar7": "offset",
                "iVar8": "param_value",
                "param_1": "index",
                "param_2": "value",
                "set_bit_in_memory_0008105c": "set_bit_in_memory",
                "uVar2": "bit_mask",
                "uVar3": "update_type",
                "uVar4": "bit_mask",
                "update_parameter_value_00080da0": "update_parameter_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081318": {
            "additional_data": {
                "DAT_00084d24": {
                    "parameter_flags_array": 1
                },
                "DAT_20070d94": {
                    "parameter_values_array": 1
                },
                "FUN_00081318": {
                    "process_parameter": 1,
                    "update_parameter": 13,
                    "update_parameter_value": 17
                },
                "check_bitwise_intersection_00080e04": {
                    "check_bitwise_intersection": 9,
                    "check_intersection": 5
                },
                "iVar1": {
                    "bitwise_intersection_result": 1,
                    "bitwise_result": 2,
                    "intersection": 2,
                    "intersection_check_result": 1,
                    "intersection_result": 12,
                    "result": 13
                },
                "iVar3": {
                    "address": 3,
                    "param_address": 2,
                    "param_table_entry": 1,
                    "parameter": 5,
                    "parameter_address": 14,
                    "parameter_offset": 1,
                    "ptr": 3,
                    "ptr_value": 1,
                    "var1": 1
                },
                "param_1": {
                    "index": 30,
                    "param_index": 1
                },
                "param_2": {
                    "bit_value": 2,
                    "flag": 1,
                    "new_value": 1,
                    "value": 26,
                    "value1": 1
                },
                "param_3": {
                    "new_value": 12,
                    "param": 12,
                    "param_value": 3,
                    "value": 3,
                    "value2": 1
                },
                "uVar2": {
                    "current_value": 1,
                    "data": 1,
                    "new_param_value": 1,
                    "new_value": 1,
                    "original_value": 2,
                    "param_value": 4,
                    "param_value2": 2,
                    "parameter_value": 13,
                    "update_value": 1,
                    "updated_value": 2,
                    "value_to_update": 1,
                    "var1": 1,
                    "var2": 1
                },
                "update_parameter_value_00081210": {
                    "update_param_value": 1,
                    "update_parameter": 4,
                    "update_parameter_value": 5,
                    "update_value": 2
                },
                "update_parameters_00080d7a": {
                    "update_parameters": 12,
                    "update_params": 2
                }
            },
            "called": [
                "FUN_00080d7a",
                "FUN_00080e04",
                "FUN_00081210"
            ],
            "calling": [
                "FUN_00080164",
                "FUN_00080258",
                "FUN_000804a8",
                "FUN_000801b0",
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_parameter_value_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 parameter_value;\n  int parameter_address;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      update_parameter_value_00081318(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    parameter_address = *(int *)(&DAT_00084d18 + index * 0x1c);\n    parameter_value = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = check_bitwise_intersection(parameter_address,parameter_value);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(parameter_address + 100) = parameter_value;\n        return;\n      }\n      *(undefined4 *)(parameter_address + 0x60) = parameter_value;\n      return;\n    }\n    update_parameters(parameter_address,parameter_value,value,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "update_parameter_value_00081318",
            "entrypoint": "0x00081318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081318": "update_parameter_value_00081318",
                "check_bitwise_intersection_00080e04": "check_bitwise_intersection",
                "iVar1": "result",
                "iVar3": "parameter_address",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "uVar2": "parameter_value",
                "update_parameter_value_00081210": "update_parameter_value",
                "update_parameters_00080d7a": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081388": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 2,
                    "rel_array": 10,
                    "relocation_array": 7,
                    "relocation_entries": 7,
                    "relocation_info_array": 2,
                    "relocation_table": 2
                },
                "FUN_00081388": {
                    "call_if_rel_info_is_zero": 1,
                    "check_and_call_function": 1,
                    "decrement_and_call_function": 1,
                    "execute_callback_if_condition_met": 1,
                    "execute_callback_if_info_is_zero": 1,
                    "execute_function_if_condition_met": 4,
                    "execute_function_if_r_info_is_zero": 1,
                    "execute_function_if_relocation_info_matches": 1,
                    "execute_if_array_index_reduced_to_zero": 1,
                    "execute_if_condition_met": 1,
                    "execute_if_last_rel_info_not_zero": 1,
                    "execute_if_r_info_is_zero": 3,
                    "execute_if_r_info_match": 1,
                    "execute_if_r_info_not_minus_one": 2,
                    "execute_if_r_info_zero": 2,
                    "execute_if_relocation": 1,
                    "execute_if_relocation_is_complete": 1,
                    "execute_if_relocation_is_zero": 1,
                    "execute_if_relocation_not_invalid": 1,
                    "execute_if_zero": 1,
                    "execute_if_zero_r_info": 1,
                    "execute_offset_routine": 1,
                    "execute_relocated_function": 1,
                    "perform_action": 1
                },
                "code": {
                    "function_pointer": 1,
                    "function_ptr": 1,
                    "function_to_execute": 1
                },
                "r_info": {
                    "entry_info": 1,
                    "info": 11,
                    "info_field": 1,
                    "rel_info": 2,
                    "relocation_info": 12,
                    "relocation_value": 1
                },
                "r_offset": {
                    "entry_offset": 1,
                    "offset": 12,
                    "offset_field": 1,
                    "rel_offset": 2,
                    "relocation_offset": 12
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_function_if_r_info_is_zero_00081388(void)\n\n{\n  if ((rel_array[6].relocation_info != 0xffffffff) &&\n     (rel_array[6].relocation_info = rel_array[6].relocation_info - 1,\n     rel_array[6].relocation_info == 0)) {\n    (*(function_to_execute *)((int)&rel_array[0].offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_function_if_r_info_is_zero_00081388",
            "entrypoint": "0x00081388",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081388": "execute_function_if_r_info_is_zero_00081388",
                "code": "function_to_execute",
                "r_info": "relocation_info",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813a8": {
            "additional_data": {
                "0": {
                    "byte_to_fill": 2,
                    "byte_value": 2,
                    "fill_value": 1,
                    "null_byte": 1,
                    "start_address": 1,
                    "start_byte_value": 1,
                    "start_memory_offset": 1,
                    "start_offset": 4,
                    "start_position": 1,
                    "start_value": 1,
                    "value2": 1
                },
                "0x80": {
                    "byte_count": 1,
                    "byte_to_fill": 2,
                    "byte_value": 3,
                    "end_byte_value": 1,
                    "end_offset": 1,
                    "end_position": 1,
                    "fill_size": 1,
                    "length": 1,
                    "memory_length": 1,
                    "num_bytes": 2,
                    "num_bytes_to_fill": 1
                },
                "0x84": {
                    "first_value": 1,
                    "value1": 1,
                    "zero_value": 1
                },
                "FUN_000813a8": {
                    "fill_memory_with_byte": 1,
                    "initialize_memory": 29,
                    "initialize_memory_with_default_value": 1
                },
                "PTR_00082504": {
                    "value_to_fill": 1
                },
                "fill_memory_with_byte_00082504": {
                    "fill_memory": 11,
                    "fill_memory_with_byte": 14,
                    "fill_memory_with_zero": 1,
                    "fill_memory_with_zeroes": 1
                },
                "new_variable_name_1": {
                    "count": 1,
                    "offset": 1
                },
                "new_variable_name_2": {
                    "start_address": 1,
                    "zero": 1
                },
                "new_variable_name_3": {
                    "null": 1
                },
                "original_variable_name_1": {
                    "memory_start": 1
                },
                "original_variable_name_2": {
                    "memory_end": 1
                },
                "param_1": {
                    "base_address": 1,
                    "mem_address": 1,
                    "memory_address": 25,
                    "memory_array": 1,
                    "memory_pointer": 2,
                    "start_address": 1
                },
                "param_2": {
                    "start_offset": 1
                },
                "param_3": {
                    "size": 1
                },
                "start_address": {
                    "mem_start": 1
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nint initialize_memory_with_default_value_000813a8(int memory_address)\n\n{\n  fill_memory_with_byte(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "current_name": "initialize_memory_with_default_value_000813a8",
            "entrypoint": "0x000813a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813a8": "initialize_memory_with_default_value_000813a8",
                "fill_memory_with_byte_00082504": "fill_memory_with_byte",
                "param_1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813c2": {
            "additional_data": {
                "FUN_000813c2": {
                    "update_and_store_data": 2,
                    "update_and_store_value": 5,
                    "update_and_validate": 1,
                    "update_buffer": 15,
                    "update_buffer_and_index": 1,
                    "update_buffer_and_pointer": 1,
                    "update_circular_buffer": 1,
                    "update_index_and_value": 1,
                    "update_param": 1,
                    "update_pointer_and_value": 1,
                    "update_value": 1,
                    "update_value_with_roll_over": 1
                },
                "param_1": {
                    "array": 1,
                    "base_address": 7,
                    "buffer": 11,
                    "buffer_addr": 1,
                    "buffer_address": 5,
                    "buffer_index": 1,
                    "data_address": 1,
                    "data_struct_pointer": 1,
                    "data_struct_ptr": 1,
                    "memory_address": 1,
                    "pointer": 1
                },
                "param_2": {
                    "data": 2,
                    "new_byte": 1,
                    "new_data": 1,
                    "new_element": 2,
                    "new_value": 19,
                    "value": 6
                },
                "uVar1": {
                    "current_index": 2,
                    "current_value": 1,
                    "incremented_index": 1,
                    "modified_index": 1,
                    "new_index": 11,
                    "next_index": 3,
                    "updated_index": 8,
                    "updated_pointer": 2,
                    "updated_value": 2
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_circular_buffer_000813c2(int buffer,undefined new_value)\n\n{\n  uint new_index;\n  \n  new_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (new_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = new_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_circular_buffer_000813c2",
            "entrypoint": "0x000813c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813c2": "update_circular_buffer_000813c2",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813e4": {
            "additional_data": {
                "0x10": {
                    "base_address": 1,
                    "offset": 2
                },
                "0x80": {
                    "first_offset": 1,
                    "first_value_offset": 2,
                    "offset_1": 2
                },
                "0x84": {
                    "offset_2": 2,
                    "second_offset": 1,
                    "second_value_offset": 2
                },
                "DAT_000813e4_exp_1": {
                    "exp1_result": 1
                },
                "DAT_000813e4_exp_2": {
                    "exp2_result": 1
                },
                "FUN_000813e4": {
                    "calculate_difference": 28,
                    "subtract_and_mask": 2
                },
                "INT_PTR1": {
                    "temp_pointer1": 1
                },
                "INT_PTR2": {
                    "temp_pointer2": 1
                },
                "INT_VAR1": {
                    "result1": 1
                },
                "INT_VAR2": {
                    "result2": 1
                },
                "PTR1": {
                    "pointer1": 1
                },
                "PTR2": {
                    "pointer2": 1
                },
                "PTR_param_1": {
                    "ptr_input_value": 1
                },
                "new_variable_name_1": {
                    "offset": 1
                },
                "new_variable_name_2": {
                    "first_value": 1
                },
                "new_variable_name_3": {
                    "second_value": 1
                },
                "param_1": {
                    "input": 4,
                    "input_parameter": 4,
                    "input_value": 22,
                    "offset": 1
                },
                "return": {
                    "difference": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nuint calculate_difference_000813e4(int input_value)\n\n{\n  difference *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_000813e4",
            "entrypoint": "0x000813e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813e4": "calculate_difference_000813e4",
                "param_1": "input_value",
                "return": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081454": {
            "additional_data": {
                "FUN_00081454": {
                    "set_parameter_value": 1,
                    "update_buffer_with_check": 1,
                    "update_data": 19,
                    "update_param": 1,
                    "update_parameter": 2,
                    "update_value": 4,
                    "update_value_in_array": 1,
                    "update_value_in_data_structure": 1,
                    "update_value_in_memory": 1
                },
                "iVar1": {
                    "buffer_info": 1,
                    "data": 2,
                    "data_address": 1,
                    "data_block": 1,
                    "data_offset": 7,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "data_var1": 2,
                    "element": 1,
                    "entry_offset": 1,
                    "mem_value_1": 1,
                    "pointer1": 1,
                    "ptr1": 3,
                    "ptr_data": 1,
                    "ptr_to_data": 2,
                    "struct_var": 1,
                    "struct_var1": 1
                },
                "param_1": {
                    "array": 1,
                    "buffer_address": 1,
                    "context": 1,
                    "data": 2,
                    "data_address": 2,
                    "data_offset": 1,
                    "data_pointer": 7,
                    "data_ptr": 3,
                    "data_struct": 5,
                    "data_struct_pointer": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 2,
                    "input": 1,
                    "input_param": 1,
                    "mem_address_1": 1,
                    "struct_ptr": 1
                },
                "param_2": {
                    "new_data": 5,
                    "new_param": 1,
                    "new_param_value": 1,
                    "new_value": 23,
                    "value": 1
                },
                "uVar2": {
                    "incremented_value": 2,
                    "new_index": 11,
                    "new_offset": 1,
                    "new_value": 1,
                    "next_index": 1,
                    "updated_index": 2,
                    "updated_offset": 1,
                    "updated_value": 10
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_value_in_data_structure_00081454(int data_pointer,undefined4 new_value)\n\n{\n  int data_offset;\n  uint new_index;\n  \n  data_offset = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_offset + 0x84) == *(int *)(data_offset + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    new_index = *(int *)(data_offset + 0x80) + 1U & 0x8000007f;\n    if ((int)new_index < 0) {\n      new_index = (new_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_offset + 0x84) == new_index);\n    *(char *)(data_offset + *(int *)(data_offset + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = new_index;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_value_in_data_structure_00081454",
            "entrypoint": "0x00081454",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081454": "update_value_in_data_structure_00081454",
                "iVar1": "data_offset",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "uVar2": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814e4": {
            "additional_data": {
                "FUN_000814e4": {
                    "initialize_data": 1,
                    "initialize_function": 3,
                    "initialize_param": 1,
                    "initialize_param_array": 3,
                    "initialize_parameters": 20,
                    "initialize_params": 3
                },
                "param_1": {
                    "array": 1,
                    "data": 1,
                    "function_params": 2,
                    "output": 1,
                    "output_array": 3,
                    "param_array": 4,
                    "parameter_array": 2,
                    "parameters": 14,
                    "params": 3
                },
                "param_2": {
                    "param2": 3,
                    "parameter2": 1,
                    "value": 4,
                    "value1": 13,
                    "value2": 8,
                    "value_1": 1,
                    "value_2": 1
                },
                "param_3": {
                    "flag": 10,
                    "param3": 2,
                    "parameter3": 1,
                    "value2": 8,
                    "value3": 8,
                    "value_2": 1,
                    "value_3": 1
                },
                "param_4": {
                    "data": 1,
                    "data1": 1,
                    "param4": 3,
                    "param8": 1,
                    "parameter4": 1,
                    "value2": 6,
                    "value3": 8,
                    "value4": 8,
                    "value_3": 1,
                    "value_4": 1
                },
                "param_5": {
                    "data2": 1,
                    "param4": 1,
                    "param5": 3,
                    "parameter5": 1,
                    "setting": 1,
                    "value3": 6,
                    "value4": 8,
                    "value5": 8,
                    "value_4": 1,
                    "value_5": 1
                },
                "param_6": {
                    "data3": 1,
                    "option": 1,
                    "param5": 1,
                    "param6": 3,
                    "parameter6": 1,
                    "value4": 6,
                    "value5": 8,
                    "value6": 8,
                    "value_5": 1,
                    "value_6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080c0c",
                "FUN_000815d4"
            ],
            "code": "\nvoid initialize_parameters_000814e4(undefined4 *parameters,undefined4 value1,undefined flag,undefined4 value3,\n                 undefined4 value5,undefined4 value5)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = flag;\n  parameters[4] = value5;\n  parameters[8] = value3;\n  parameters[5] = value5;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_000814e4",
            "entrypoint": "0x000814e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "flag",
                "param_4": "value3",
                "param_5": "value5",
                "param_6": "value5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081508": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array_var": 2,
                    "elf_rel_array": 1,
                    "elf_relocation_array": 1,
                    "rel_array": 2,
                    "relocation_array": 5
                },
                "FUN_00081508": {
                    "initialize": 1,
                    "initialize_application": 1,
                    "initialize_configuration": 1,
                    "initialize_data": 4,
                    "initialize_data_structures": 3,
                    "initialize_device": 1,
                    "initialize_elf_structure": 1,
                    "initialize_function": 6,
                    "initialize_memory": 2,
                    "initialize_module": 4,
                    "initialize_process": 1,
                    "initialize_settings": 1,
                    "set_bit_and_offset": 1,
                    "set_configuration": 3,
                    "set_relocation_data": 1
                },
                "check_bit_and_set_00080e18": {
                    "check_and_set_bits": 1
                },
                "iVar1": {
                    "address": 1,
                    "config_value": 1,
                    "data_struct1": 1,
                    "i_var": 1,
                    "index": 1,
                    "internal_var1": 1,
                    "local_var1": 1,
                    "mem_offset": 1,
                    "offset": 3,
                    "ptr1": 2,
                    "section1_address": 1,
                    "temp_var": 3,
                    "temp_var1": 5,
                    "temp_variable": 2,
                    "temp_variable1": 4,
                    "var1": 2,
                    "variable1": 1
                },
                "param_1": {
                    "address": 1,
                    "application_data": 1,
                    "arg1": 1,
                    "config_address": 2,
                    "config_base_address": 1,
                    "config_data": 1,
                    "data_address": 3,
                    "data_offset": 1,
                    "data_struct": 1,
                    "data_struct_base": 1,
                    "data_structures": 1,
                    "device_address": 1,
                    "function_data": 1,
                    "input_offset": 1,
                    "mem_block": 1,
                    "memory_address": 1,
                    "module_address": 2,
                    "module_base": 1,
                    "module_base_address": 1,
                    "param": 1,
                    "param1": 3,
                    "param_ptr": 1,
                    "process_id": 1,
                    "settings": 1,
                    "structure_address": 1
                },
                "param_2": {
                    "arg2": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "divider": 1,
                    "divisor": 2,
                    "input_size": 1,
                    "memory_size": 1,
                    "offset": 2,
                    "page_size": 11,
                    "param2": 4,
                    "param2_size": 1,
                    "param_divisor": 1,
                    "param_size": 1,
                    "param_value": 2,
                    "shift_value": 1
                },
                "param_3": {
                    "arg3": 1,
                    "config_value": 1,
                    "data_param": 1,
                    "elf_header_offset": 1,
                    "initial_value": 4,
                    "offset": 2,
                    "param3": 6,
                    "param3_value": 1,
                    "param_3": 1,
                    "param_value": 5,
                    "parameter": 1,
                    "target_address": 1,
                    "value": 6
                },
                "puVar2": {
                    "config": 1,
                    "config_array": 1,
                    "config_ptr": 3,
                    "data_pointer": 4,
                    "data_struct2": 1,
                    "data_struct_ptr": 1,
                    "device_settings_ptr": 1,
                    "elf_structure_ptr": 1,
                    "function_pointer": 1,
                    "mem_pointer": 1,
                    "module_data": 2,
                    "module_data_pointer": 1,
                    "module_pointer": 1,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer_to_data": 2,
                    "pointer_var": 4,
                    "process_data": 1,
                    "ptr2": 1,
                    "relocation_data": 1
                }
            },
            "called": [
                "FUN_00080e18"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_structures_00081508(int param1,uint page_size,undefined4 param3)\n\n{\n  int temp_var1;\n  undefined4 *pointer_var;\n  \n  check_and_set_bits(*(undefined4 *)(param1 + 0x20));\n  pointer_var = *(undefined4 **)(param1 + 0x18);\n  pointer_var[0x48] = 0x202;\n  *pointer_var = 0xac;\n  pointer_var[1] = param3;\n  pointer_var[8] = relocation_array[6].r_offset / page_size >> 4;\n  pointer_var[3] = 0xffffffff;\n  pointer_var[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  temp_var1 = *(int *)(param1 + 0x10);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  temp_var1 = *(int *)(param1 + 0x14);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  *pointer_var = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00081508",
            "entrypoint": "0x00081508",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081508": "initialize_data_structures_00081508",
                "check_bit_and_set_00080e18": "check_and_set_bits",
                "iVar1": "temp_var1",
                "param_1": "param1",
                "param_2": "page_size",
                "param_3": "param3",
                "puVar2": "pointer_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815d4": {
            "additional_data": {
                "FUN_000815d4": {
                    "initialize_and_set_data_structure": 1,
                    "initialize_and_set_parameters": 3,
                    "initialize_and_update_data_structure": 1,
                    "initialize_data_structure": 26
                },
                "PTR_update_value_in_data_structure_00081454_1_000857d8": {
                    "data_update_pointer": 1,
                    "update_value_data_ptr": 1,
                    "update_value_function": 2,
                    "update_value_in_data_structure": 4
                },
                "initialize_parameters_000814e4": {
                    "initialize_data_parameters": 2,
                    "initialize_data_structure": 1,
                    "initialize_data_structure_parameters": 1,
                    "initialize_parameters": 16
                },
                "param_1": {
                    "data_structure": 19,
                    "data_structure_pointer": 1,
                    "output": 2,
                    "output_array": 3,
                    "output_data_ptr": 1,
                    "output_data_structure": 1,
                    "output_param": 1,
                    "output_structure": 2,
                    "parameter_array": 1
                },
                "param_2": {
                    "input": 1,
                    "input_param": 1,
                    "input_parameter_value": 1,
                    "input_value": 8,
                    "new_value": 4,
                    "param": 1,
                    "param_value": 1,
                    "parameter_value": 1,
                    "update_value": 1,
                    "value": 10,
                    "value_to_update": 2
                },
                "update_value_in_data_structure_00081454_1_000857d8": {
                    "update_data_value": 1,
                    "update_value": 1,
                    "update_value_function": 1,
                    "value_update_function": 1
                }
            },
            "called": [
                "FUN_000814e4"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nundefined4 * initialize_and_set_data_structure_000815d4(undefined4 *data_structure,undefined4 value)\n\n{\n  initialize_parameters();\n  *data_structure = &PTR_update_data_value;\n  data_structure[9] = value;\n  return data_structure;\n}\n\n",
            "current_name": "initialize_and_set_data_structure_000815d4",
            "entrypoint": "0x000815d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815d4": "initialize_and_set_data_structure_000815d4",
                "initialize_parameters_000814e4": "initialize_parameters",
                "param_1": "data_structure",
                "param_2": "value",
                "update_value_in_data_structure_00081454_1_000857d8": "update_data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815f8": {
            "additional_data": {
                "FUN_000815f8": {
                    "bitwise_combine": 1,
                    "combine_and_shift": 1,
                    "combine_bits": 2,
                    "combine_bytes": 1,
                    "combine_integer_and_bitwise_shift": 1,
                    "combine_numbers": 1,
                    "combine_param_and_shift": 2,
                    "combine_param_and_shift_left": 1,
                    "combine_parameters": 1,
                    "combine_params": 1,
                    "combine_shift": 1,
                    "combine_values": 14,
                    "combine_variables": 1,
                    "combine_with_shift": 1,
                    "merge_bytes": 1,
                    "merge_shift": 1
                },
                "param_1": {
                    "byte_value": 2,
                    "input": 1,
                    "input1": 4,
                    "input_byte": 1,
                    "input_number": 1,
                    "input_value": 6,
                    "input_value1": 1,
                    "number": 1,
                    "shift_value": 1,
                    "shifted_value": 2,
                    "value1": 11
                },
                "param_2": {
                    "bitmask": 2,
                    "bits": 1,
                    "bits_value": 1,
                    "bitwise_value": 2,
                    "combined_value": 1,
                    "existing_bits": 1,
                    "flag": 1,
                    "input2": 4,
                    "input_value2": 1,
                    "mask": 1,
                    "original_value": 1,
                    "shifted_value": 1,
                    "updated_output": 1,
                    "value": 1,
                    "value2": 11,
                    "value_to_combine": 1
                },
                "param_3": {
                    "input3": 1,
                    "result": 2,
                    "shifted_output": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                },
                "return": {
                    "combined_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080410"
            ],
            "code": "\nuint combine_values_000815f8(int value1,uint value2)\n\n{\n  combined_value value2 | value1 << 8;\n}\n\n",
            "current_name": "combine_values_000815f8",
            "entrypoint": "0x000815f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815f8": "combine_values_000815f8",
                "param_1": "value1",
                "param_2": "value2",
                "return": "combined_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815fe": {
            "additional_data": {
                "FUN_000815fe": {
                    "calculate_and_return_offset": 1,
                    "calculate_and_return_parameter": 1,
                    "calculate_and_update_relocation_offset": 2,
                    "calculate_relocation_offset": 1,
                    "update_and_return_param": 1,
                    "update_relocation_offset": 25
                },
                "calculate_and_update_relocation_offset_00081e04": {
                    "calculate_and_update_offset": 6,
                    "calculate_and_update_relocation_offset": 3
                },
                "param_1": {
                    "data": 3,
                    "data_pointer": 2,
                    "input": 4,
                    "input_array": 2,
                    "input_parameter": 1,
                    "input_ptr": 1,
                    "offset": 1,
                    "param": 1,
                    "relocation_info": 1,
                    "relocation_offset": 14,
                    "relocation_offset_ptr": 1
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [],
            "code": "\nundefined4 * calculate_and_update_relocation_offset_000815fe(undefined4 *relocation_offset)\n\n{\n  calculate_and_update_offset(*relocation_offset);\n  return relocation_offset;\n}\n\n",
            "current_name": "calculate_and_update_relocation_offset_000815fe",
            "entrypoint": "0x000815fe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815fe": "calculate_and_update_relocation_offset_000815fe",
                "calculate_and_update_relocation_offset_00081e04": "calculate_and_update_offset",
                "param_1": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008160c": {
            "additional_data": {
                "FUN_0008160c": {
                    "clear_and_reset_param": 1,
                    "clear_and_reset_param1": 1,
                    "clear_and_reset_relocation_info": 1,
                    "clear_and_reset_values": 1,
                    "reset_and_calculate_relocation_offset": 1,
                    "reset_and_clear_data": 3,
                    "reset_and_clear_param": 1,
                    "reset_and_clear_parameters": 1,
                    "reset_and_clear_values": 1,
                    "reset_and_update_relocation_offset": 1,
                    "reset_and_zero_memory": 1,
                    "reset_data": 1,
                    "reset_memory": 2,
                    "reset_param": 3,
                    "reset_param_values": 1,
                    "reset_parameters": 4,
                    "reset_params": 1,
                    "reset_relocation_offset": 5,
                    "reset_variable": 1
                },
                "calculate_and_update_relocation_offset_00081e04": {
                    "calculate_and_update_relocation_offset": 5,
                    "calculate_relocation_offset": 5,
                    "update_relocation_offset": 7
                },
                "param_1": {
                    "array": 1,
                    "data": 3,
                    "data_array": 1,
                    "data_ptr": 1,
                    "input_array": 1,
                    "input_param": 1,
                    "input_params": 1,
                    "memory": 2,
                    "offset_array": 1,
                    "param": 5,
                    "parameter": 2,
                    "parameters": 1,
                    "params": 2,
                    "relocation_info": 1,
                    "relocation_offset": 6,
                    "variable": 1
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid reset_and_update_relocation_offset_0008160c(int *relocation_offset)\n\n{\n  if (*relocation_offset != 0) {\n    update_relocation_offset();\n  }\n  *relocation_offset = 0;\n  relocation_offset[2] = 0;\n  relocation_offset[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_and_update_relocation_offset_0008160c",
            "entrypoint": "0x0008160c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008160c": "reset_and_update_relocation_offset_0008160c",
                "calculate_and_update_relocation_offset_00081e04": "update_relocation_offset",
                "param_1": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081622": {
            "additional_data": {
                "FUN_00081622": {
                    "assign_and_rearrange_memory_blocks": 1,
                    "assign_and_reorder_memory_blocks": 1,
                    "assign_memory_blocks": 2,
                    "assign_memory_with_rearrangement": 1,
                    "rearrange_and_assign_memory": 3,
                    "rearrange_and_assign_memory_blocks": 22,
                    "rearrange_memory_blocks": 1
                },
                "iVar1": {
                    "result": 28,
                    "return_value": 2
                },
                "param_1": {
                    "array": 4,
                    "input_array": 10,
                    "memory_array": 6,
                    "memory_block": 1,
                    "memory_block_array": 2,
                    "memory_blocks": 8
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 1,
                    "block_count": 1,
                    "block_size": 3,
                    "length": 2,
                    "memory_size": 2,
                    "num_blocks": 3,
                    "num_elements": 2,
                    "size": 16
                },
                "param_3": {
                    "arg1": 1,
                    "arg3": 8,
                    "param3": 14,
                    "param_a": 3,
                    "value1": 3
                },
                "param_4": {
                    "arg2": 1,
                    "arg4": 8,
                    "param4": 14,
                    "param_b": 3,
                    "value2": 3
                }
            },
            "called": [
                "FUN_000825a0"
            ],
            "calling": [
                "FUN_0008163a"
            ],
            "code": "\nint assign_and_rearrange_memory_blocks_00081622(int *input_array,int size,undefined4 param3,undefined4 param4)\n\n{\n  int result;\n  \n  result = rearrange_and_assign_memory_blocks_000825a0(*input_array,size + 1,param3,param4,param4);\n  if (result != 0) {\n    *input_array = result;\n    input_array[1] = size;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "assign_and_rearrange_memory_blocks_00081622",
            "entrypoint": "0x00081622",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081622": "assign_and_rearrange_memory_blocks_00081622",
                "iVar1": "result",
                "param_1": "input_array",
                "param_2": "size",
                "param_3": "param3",
                "param_4": "param4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008163a": {
            "additional_data": {
                "FUN_0008163a": {
                    "allocate_memory_if_needed": 1,
                    "assign_and_rearrange_memory_blocks": 1,
                    "check_allocation_availability": 1,
                    "check_and_alloc_memory": 1,
                    "check_and_allocate_memory": 3,
                    "check_and_assign_memory": 5,
                    "check_and_assign_memory_block": 1,
                    "check_and_assign_memory_blocks": 2,
                    "check_and_initialize_memory": 1,
                    "check_and_update_memory": 1,
                    "check_memory_and_assign": 1,
                    "check_memory_assignments": 1,
                    "check_memory_availability": 5,
                    "check_memory_blocks": 4,
                    "memory_blocks_check": 1,
                    "validate_and_allocate_memory": 1,
                    "validate_and_assign_memory": 1
                },
                "assign_and_rearrange_memory_blocks_00081622": {
                    "allocate_memory_blocks": 1
                },
                "iVar1": {
                    "allocation_result": 5,
                    "allocation_status": 5,
                    "allocation_success": 1,
                    "error_code": 2,
                    "result": 15
                },
                "param_1": {
                    "allocation": 1,
                    "array": 1,
                    "blocks": 1,
                    "data_array": 1,
                    "memory": 5,
                    "memory_array": 3,
                    "memory_block": 2,
                    "memory_block_info": 1,
                    "memory_blocks": 11,
                    "memory_info": 3,
                    "memory_pointer": 1,
                    "memory_ptr": 1
                },
                "param_2": {
                    "block_size": 1,
                    "requested_size": 3,
                    "required_block_size": 2,
                    "required_blocks": 7,
                    "required_memory": 1,
                    "required_memory_size": 5,
                    "required_size": 11,
                    "threshold": 1
                }
            },
            "called": [
                "FUN_00081622"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nundefined4 check_and_assign_memory_blocks_0008163a(int *memory_blocks,uint required_size)\n\n{\n  int result;\n  \n  if ((*memory_blocks == 0) || ((uint)memory_blocks[1] < required_size)) {\n    result = allocate_memory_blocks(memory_blocks);\n    if (result == 0) {\n      return 0;\n    }\n    if (memory_blocks[2] == 0) {\n      *(undefined *)*memory_blocks = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_assign_memory_blocks_0008163a",
            "entrypoint": "0x0008163a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008163a": "check_and_assign_memory_blocks_0008163a",
                "assign_and_rearrange_memory_blocks_00081622": "allocate_memory_blocks",
                "iVar1": "result",
                "param_1": "memory_blocks",
                "param_2": "required_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008165c": {
            "additional_data": {
                "FUN_0008165c": {
                    "copy_and_assign_memory": 1,
                    "copy_string_or_reset_relocation_offset": 2,
                    "initialize_memory": 1,
                    "process_memory": 9,
                    "process_memory_blocks": 14,
                    "update_memory_and_copy_string": 1,
                    "update_memory_blocks": 3
                },
                "check_and_assign_memory_blocks_0008163a": {
                    "check_and_assign_memory_blocks": 1
                },
                "copy_string_with_alignment_check_00082994": {
                    "copy_string_with_alignment_check": 1
                },
                "iVar1": {
                    "check_result": 5,
                    "memory_block_check_result": 1,
                    "memory_check_result": 5,
                    "result": 17
                },
                "param_1": {
                    "blocks_array": 1,
                    "destination_ptr": 1,
                    "memory": 3,
                    "memory_array": 2,
                    "memory_block": 3,
                    "memory_blocks": 11,
                    "memory_info": 1,
                    "output": 4,
                    "output_array": 1,
                    "output_buffer": 1,
                    "result": 3
                },
                "param_2": {
                    "input": 1,
                    "input_string": 3,
                    "source": 2,
                    "source_ptr": 1,
                    "source_string": 24
                },
                "param_3": {
                    "alignment": 1,
                    "block_size": 2,
                    "count": 1,
                    "destination_size": 1,
                    "destination_string": 3,
                    "length": 1,
                    "memory_block": 4,
                    "memory_size": 1,
                    "memory_value": 1,
                    "new_block": 1,
                    "new_block_size": 2,
                    "new_memory_block": 1,
                    "new_size": 3,
                    "size": 2,
                    "size_of_string": 1,
                    "target_memory": 1,
                    "target_size": 2,
                    "target_string": 3
                },
                "reset_and_update_relocation_offset_0008160c": {
                    "reset_and_update_relocation_offset": 1
                }
            },
            "called": [
                "FUN_0008163a",
                "FUN_0008160c",
                "FUN_00082994"
            ],
            "calling": [
                "FUN_00081682"
            ],
            "code": "\nundefined4 * process_memory_blocks_0008165c(undefined4 *memory_blocks,undefined4 source_string,undefined4 memory_block)\n\n{\n  int result;\n  \n  result = check_and_assign_memory_blocks(memory_blocks,memory_block);\n  if (result == 0) {\n    reset_and_update_relocation_offset(memory_blocks);\n  }\n  else {\n    memory_blocks[2] = memory_block;\n    copy_string_with_alignment_check(*memory_blocks,source_string);\n  }\n  return memory_blocks;\n}\n\n",
            "current_name": "process_memory_blocks_0008165c",
            "entrypoint": "0x0008165c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008165c": "process_memory_blocks_0008165c",
                "check_and_assign_memory_blocks_0008163a": "check_and_assign_memory_blocks",
                "copy_string_with_alignment_check_00082994": "copy_string_with_alignment_check",
                "iVar1": "result",
                "param_1": "memory_blocks",
                "param_2": "source_string",
                "param_3": "memory_block",
                "reset_and_update_relocation_offset_0008160c": "reset_and_update_relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081682": {
            "additional_data": {
                "FUN_00081682": {
                    "initialize_memory": 26,
                    "initialize_memory_block": 1,
                    "initialize_memory_blocks": 4
                },
                "count_leading_zeros_00082a50": {
                    "count_leading_zeros": 7
                },
                "param_1": {
                    "mem_block": 1,
                    "memory": 2,
                    "memory_array": 19,
                    "memory_block": 2,
                    "memory_block_array": 1,
                    "memory_blocks": 4,
                    "memory_ptr": 2
                },
                "param_2": {
                    "block_count": 1,
                    "data": 2,
                    "input_data": 1,
                    "input_value": 17,
                    "value": 9,
                    "value_to_process": 1
                },
                "process_memory_blocks_0008165c": {
                    "calculate_memory_blocks": 1,
                    "process_memory_blocks": 9
                },
                "uVar1": {
                    "leading_zero_count": 1,
                    "leading_zeros": 15,
                    "leading_zeros_count": 14,
                    "num_leading_zeros": 1
                }
            },
            "called": [
                "FUN_0008165c",
                "FUN_00082a50"
            ],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 * initialize_memory_blocks_00081682(undefined4 *memory_array,int input_value)\n\n{\n  undefined4 leading_zeros;\n  \n  *memory_array = 0;\n  memory_array[1] = 0;\n  memory_array[2] = 0;\n  if (input_value != 0) {\n    leading_zeros = count_leading_zeros(input_value);\n    process_memory_blocks(memory_array,input_value,leading_zeros);\n  }\n  return memory_array;\n}\n\n",
            "current_name": "initialize_memory_blocks_00081682",
            "entrypoint": "0x00081682",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081682": "initialize_memory_blocks_00081682",
                "count_leading_zeros_00082a50": "count_leading_zeros",
                "param_1": "memory_array",
                "param_2": "input_value",
                "process_memory_blocks_0008165c": "process_memory_blocks",
                "uVar1": "leading_zeros"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816a6": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000816a6",
            "entrypoint": "0x000816a6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000816a8": {
            "additional_data": {
                "FUNC_0008120c": {
                    "configure_device": 1,
                    "configure_settings": 1,
                    "function2": 1,
                    "function_2": 1,
                    "function_b": 1,
                    "initialize_system": 1,
                    "perform_action": 1,
                    "set_configuration": 4,
                    "set_configuration_parameter": 1,
                    "set_data_mode": 1,
                    "set_data_processing_mode": 3,
                    "set_flag": 3,
                    "set_loop_count": 1,
                    "set_mode": 7,
                    "set_parameter": 2,
                    "set_parameter_value": 1,
                    "set_parameters": 1
                },
                "FUNC_000816a6": {
                    "calculate_thresholds": 1,
                    "do_something": 1,
                    "do_something_special": 1,
                    "execute_function": 2,
                    "execute_preparation": 1,
                    "execute_preprocessing": 1,
                    "function1": 1,
                    "function_1": 1,
                    "function_a": 1,
                    "handle_functional_operation": 1,
                    "handle_initialization": 1,
                    "handle_startup_tasks": 1,
                    "initialize_buffer": 1,
                    "initialize_data": 1,
                    "initialize_data_processing": 1,
                    "initialize_device": 1,
                    "initialize_other_components": 1,
                    "initialize_specific_functions": 1,
                    "initialize_subsystems": 1,
                    "perform_additional_setup": 2,
                    "perform_initial_checks": 1,
                    "perform_initial_configuration": 1,
                    "perform_initial_function": 1,
                    "perform_initialization": 2,
                    "process_data_step": 1,
                    "process_initial": 1,
                    "setup_configuration": 1,
                    "setup_process": 1
                },
                "FUN_000816a8": {
                    "continuous_data_processing": 7,
                    "initialize_and_process_data": 3,
                    "initialize_system": 1,
                    "initialize_system_and_process_data": 1,
                    "main_loop": 1,
                    "main_process_loop": 1,
                    "manage_system": 1,
                    "perform_data_processing": 1,
                    "process_data": 1,
                    "process_data_and_handle_differences": 2,
                    "process_data_forever": 3,
                    "process_data_in_loop": 2,
                    "process_data_loop": 1,
                    "run_continuous_processing": 2,
                    "run_data_processing_loop": 3,
                    "run_processing_loop": 1
                },
                "calculate_and_handle_differences_00080ce0": {
                    "calculate_and_handle_differences": 31
                },
                "initialize_and_configure_system_000804a8": {
                    "configure_additional_system_features": 1,
                    "configure_additional_system_settings": 1,
                    "configure_system": 2,
                    "initialize_and_configure": 1,
                    "initialize_and_configure_another_system": 1,
                    "initialize_and_configure_network": 1,
                    "initialize_and_configure_subsystem": 3,
                    "initialize_and_configure_system": 7,
                    "initialize_and_configure_system2": 4,
                    "initialize_and_configure_system_2": 6,
                    "initialize_and_configure_system_components": 1,
                    "initialize_and_configure_system_two": 1,
                    "initialize_other_system": 1,
                    "reconfigure_system": 1
                },
                "initialize_and_configure_system_00080ae4": {
                    "initialize_and_configure_system": 26,
                    "initialize_and_configure_system1": 2,
                    "initialize_and_configure_system_1": 1,
                    "initialize_and_configure_system_one": 1,
                    "initialize_and_configure_system_subsystems": 1
                },
                "initialize_data_000816d4": {
                    "initialize_data": 25,
                    "initialize_data_buffer": 1,
                    "initialize_data_structure": 1,
                    "initialize_data_structures": 3,
                    "initialize_global_data": 1
                },
                "process_data_000805d0": {
                    "process_data": 31
                }
            },
            "called": [
                "FUN_000816a6",
                "FUN_000816d4",
                "FUN_000804a8",
                "FUN_0008120c",
                "FUN_000805d0",
                "FUN_00080ae4",
                "FUN_00080ce0"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid continuous_data_processing_000816a8(void)\n\n{\n  initialize_data();\n  initialize_and_configure_system();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  initialize_and_configure_system();\n  do {\n    process_data();\n    calculate_and_handle_differences();\n  } while( true );\n}\n\n",
            "current_name": "continuous_data_processing_000816a8",
            "entrypoint": "0x000816a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816a8": "continuous_data_processing_000816a8",
                "calculate_and_handle_differences_00080ce0": "calculate_and_handle_differences",
                "initialize_and_configure_system_000804a8": "initialize_and_configure_system",
                "initialize_and_configure_system_00080ae4": "initialize_and_configure_system",
                "initialize_data_000816d4": "initialize_data",
                "process_data_000805d0": "process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d4": {
            "additional_data": {
                "FUN_000816d4": {
                    "initialize_data": 15,
                    "initialize_global_variable": 2,
                    "initialize_memory": 9,
                    "initialize_memory_address": 2,
                    "initialize_register": 1,
                    "set_initial_value": 2
                },
                "_DAT_400e1a54": {
                    "base_address": 1,
                    "data_address": 2,
                    "data_flag": 4,
                    "data_offset": 1,
                    "data_value": 4,
                    "data_variable": 1,
                    "global_variable": 1,
                    "initial_value": 2,
                    "memory_address": 7,
                    "memory_start_address": 1,
                    "memory_value": 2,
                    "register_value": 1,
                    "setting_value": 1
                },
                "none": {
                    "": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_data_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_data_000816d4",
            "entrypoint": "0x000816d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081714": {
            "additional_data": {
                "DAT_20071184": {
                    "data": 3,
                    "data_value": 1,
                    "global_data": 4,
                    "global_value": 3,
                    "global_variable": 6
                },
                "FUN_00081714": {
                    "get_dat_value": 1,
                    "get_data": 3,
                    "get_data_value": 11,
                    "get_global_data": 5,
                    "get_global_data_value": 1,
                    "get_global_value": 4,
                    "get_global_variable": 6
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_00081714"
            ],
            "code": "\nundefined4 get_global_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "get_global_data_value_00081714",
            "entrypoint": "0x00081714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081714": "get_global_data_value_00081714"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081730": {
            "additional_data": {
                "FUN_00081730": {
                    "calculate_bits": 1,
                    "calculate_float": 6,
                    "calculate_float_result": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 10,
                    "calculate_new_value": 1,
                    "calculate_next_float": 1,
                    "calculate_result": 3,
                    "perform_arithmetic": 1,
                    "reverse_binary": 1,
                    "reverse_bits": 2,
                    "reverse_bitwise_operation": 1,
                    "shift_and_round": 1
                },
                "LAB_0008186a": {
                    "label": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 2,
                    "leading_zeros_count": 1
                },
                "bVar8": {
                    "check_condition": 2,
                    "comparison_result": 1,
                    "condition": 1,
                    "flag": 2,
                    "is_condition_met": 1,
                    "is_condition_true": 2,
                    "is_equal": 13,
                    "is_negative": 1,
                    "is_true": 2,
                    "is_zero": 5
                },
                "iVar1": {
                    "current_float_sign_bit": 1,
                    "exp1": 1,
                    "high_bit_shifted_input_number": 1,
                    "input_shift": 1,
                    "input_shifted": 1,
                    "normalized_mantissa": 1,
                    "result_1": 1,
                    "shift_amount1": 2,
                    "shift_count": 1,
                    "shift_value": 1,
                    "shifted_input": 2,
                    "shifted_input1": 5,
                    "shifted_input1_sign": 1,
                    "shifted_input_1": 1,
                    "shifted_input_sign": 1,
                    "shifted_param1_signed": 1,
                    "shifted_val1": 1,
                    "shifted_value": 3,
                    "shifted_value1": 1,
                    "shifted_x": 1
                },
                "iVar2": {
                    "exp2": 1,
                    "exponent_shift": 1,
                    "high_bit_shifted_input_flag": 1,
                    "i_var2": 1,
                    "mask_shifted": 1,
                    "normalized_exponent": 1,
                    "precision_shift": 1,
                    "previous_float_sign_bit": 1,
                    "result_2": 1,
                    "second_shift_count": 1,
                    "shift_amount2": 2,
                    "shift_value_2": 1,
                    "shifted_bitmask": 1,
                    "shifted_flag": 1,
                    "shifted_input2": 5,
                    "shifted_input_2": 1,
                    "shifted_mask_sign": 1,
                    "shifted_result_sign": 1,
                    "shifted_val2": 1,
                    "shifted_value": 1,
                    "shifted_value2": 2,
                    "shifted_y": 1
                },
                "param_1": {
                    "current_float": 1,
                    "input": 5,
                    "input1": 9,
                    "input_1": 4,
                    "input_a": 1,
                    "input_number": 1,
                    "input_val1": 1,
                    "input_value": 4,
                    "input_value1": 1,
                    "mantissa": 2,
                    "x": 2
                },
                "param_2": {
                    "bitmask": 1,
                    "exponent": 3,
                    "flag": 2,
                    "input2": 9,
                    "input_2": 4,
                    "input_b": 1,
                    "input_flag": 1,
                    "input_mask": 1,
                    "input_val2": 1,
                    "input_value2": 1,
                    "mask": 3,
                    "mask_value": 1,
                    "previous_float": 1,
                    "y": 2
                },
                "param_3": {
                    "constant": 5,
                    "flag": 1,
                    "flag_value": 1,
                    "input3": 6,
                    "input_3": 4,
                    "input_c": 1,
                    "input_precision": 1,
                    "input_val3": 1,
                    "input_value3": 1,
                    "param3": 1,
                    "placeholder": 1,
                    "rounding_mode": 2,
                    "sign": 1,
                    "temp": 1,
                    "undefined": 1,
                    "unused": 1,
                    "z": 2
                },
                "param_4": {
                    "comparison_threshold": 1,
                    "input4": 6,
                    "input_4": 4,
                    "input_d": 1,
                    "input_shift": 1,
                    "input_val4": 1,
                    "input_value4": 1,
                    "iterations": 1,
                    "output": 1,
                    "output_flag": 1,
                    "param4": 1,
                    "result": 3,
                    "result_value": 1,
                    "rounding_mode": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shifted_mask": 1,
                    "threshold": 1,
                    "unused": 1,
                    "w": 2
                },
                "uVar14": {
                    "shifted_input": 1
                },
                "uVar15": {
                    "shifted_exponent": 1
                },
                "uVar16": {
                    "shifted_input_xor": 1
                },
                "uVar17": {
                    "shifted_input_and_output_xor": 1
                },
                "uVar18": {
                    "shifted_input_and_output_xor": 1
                },
                "uVar19": {
                    "input_sign_bit": 1
                },
                "uVar23": {
                    "shifted_input_times_two": 1
                },
                "uVar27": {
                    "shifted_input_times_two_or_sign_bit": 1
                },
                "uVar28": {
                    "shifted_exponent_or_minus_one": 1
                },
                "uVar29": {
                    "shifted_exponent_minus_one": 1
                },
                "uVar3": {
                    "bitwise_xor": 1,
                    "complement_shifted_input2": 1,
                    "current_float_abs": 1,
                    "exponent_sign_bit": 1,
                    "flag": 1,
                    "flipped_mask": 1,
                    "mant1": 1,
                    "mask_negated": 1,
                    "masked_value": 1,
                    "modified_input2": 3,
                    "negated_x": 1,
                    "param2_negated": 1,
                    "result1": 2,
                    "result_value": 1,
                    "shifted_input_2": 1,
                    "temp1": 5,
                    "temp_1": 2,
                    "temp_result1": 1,
                    "temp_var1": 1,
                    "xor_result": 1,
                    "xored_input": 1,
                    "xored_val1": 1,
                    "xored_value": 1
                },
                "uVar31": {
                    "exponent_difference": 1
                },
                "uVar32": {
                    "shifted_input_float": 1
                },
                "uVar33": {
                    "shifted_output_float": 1
                },
                "uVar34": {
                    "shift_remainder": 1
                },
                "uVar35": {
                    "shifted_input_float_inverse": 1
                },
                "uVar36": {
                    "shift_count": 1
                },
                "uVar37": {
                    "shifted_input_float_plus_mantissa": 1
                },
                "uVar38": {
                    "shifted_output_remainder": 1
                },
                "uVar39": {
                    "is_output_negative": 1
                },
                "uVar4": {
                    "complement_shifted_result": 1,
                    "exponent_negated": 1,
                    "flipped_input": 1,
                    "mant2": 1,
                    "mask_value": 1,
                    "modified_input1": 1,
                    "modified_input3": 1,
                    "modified_input_number": 1,
                    "negated_y": 1,
                    "normalized_bitmask": 1,
                    "previous_float_abs": 1,
                    "result2": 2,
                    "shifted_input_1": 1,
                    "shifted_result1": 1,
                    "shifted_value": 1,
                    "shifted_value_loop": 1,
                    "temp1": 2,
                    "temp2": 5,
                    "temp_2": 2,
                    "temp_result2": 1,
                    "temp_var2": 1,
                    "u_var4": 1,
                    "xored_val2": 1
                },
                "uVar40": {
                    "is_output_positive": 1
                },
                "uVar41": {
                    "output_float_with_remainder": 1
                },
                "uVar42": {
                    "output_float": 1
                },
                "uVar5": {
                    "input_shifted": 2,
                    "normalized_input": 1,
                    "output": 1,
                    "output_1": 1,
                    "res1": 1,
                    "result": 5,
                    "result1": 1,
                    "result3": 1,
                    "shifted_input": 2,
                    "shifted_input1": 2,
                    "shifted_input_1": 1,
                    "shifted_input_number": 1,
                    "shifted_negated_x": 1,
                    "shifted_param1": 1,
                    "shifted_result2": 1,
                    "shifted_value": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_3": 1,
                    "temp_float1": 1,
                    "temp_var3": 1
                },
                "uVar6": {
                    "adjusted_negated_x": 1,
                    "conditional_shift": 1,
                    "difference": 1,
                    "equal_shift": 1,
                    "iterations": 1,
                    "modified_shifted_input_number": 1,
                    "new_input": 1,
                    "output_2": 1,
                    "output_shifted": 1,
                    "res2": 1,
                    "result2": 1,
                    "result4": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_value": 1,
                    "shifted_input_2": 1,
                    "shifted_input_plus_delta": 1,
                    "shifted_normalized_input": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "temp2": 2,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_4": 1,
                    "temp_float2": 1,
                    "temp_value1": 1,
                    "temp_var4": 1,
                    "u_var6": 1,
                    "updated_input1": 1
                },
                "uVar7": {
                    "abs_difference": 1,
                    "diff": 2,
                    "difference": 17,
                    "difference_shift": 1,
                    "difference_value": 1,
                    "result5": 1,
                    "shift_delta": 1,
                    "shift_difference": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_5": 1,
                    "temp_value2": 1,
                    "temp_var5": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_floating_point_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint result;\n  uint temp2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  result = input1 << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == input4;\n  }\n  shifted_input1 = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result = temp1;\n      if (shifted_input1 == -1) {\n        result = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == temp1;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (result < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nlabel:\n    return input1 | 0x7f800000;\n  }\n  result = result >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result;\n  is_equal = difference != 0;\n  temp2 = result;\n  if (is_equal && result <= input4) {\n    temp2 = result + difference;\n  }\n  if (is_equal && result <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && result <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && result <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result = -result;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (temp2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (temp2 == 0) {\n      result = result ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    result = result * 2 + (uint)(temp1 != 0);\n    temp1 = temp2 - 2;\n    if ((result & 0x800000) == 0) {\n      difference = leading_zero_count(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        result = result >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        result = result + (temp1 - difference) * 0x800000;\n      }\n      return result | input1;\n    }\n  }\n  else {\n    temp1 = temp2 - 1;\n    if (0xffffff < result) {\n      temp1 = result & 1;\n      result = result >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = temp2;\n      if (0xfd < temp2) goto label;\n    }\n  }\n  result = result + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input1;\n}\n\n",
            "current_name": "calculate_floating_point_00081730",
            "entrypoint": "0x00081730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081730": "calculate_floating_point_00081730",
                "LAB_0008186a": "label",
                "LZCOUNT": "leading_zero_count",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "result",
                "uVar6": "temp2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081734": {
            "additional_data": {
                "FUN_00081734": {
                    "binary_arithmetic": 1,
                    "calculate_float": 14,
                    "calculate_float_value": 2,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_unary": 1,
                    "calculate_floating_point_value": 1,
                    "check_and_modify_numbers": 1,
                    "convert_float_to_binary": 1,
                    "float_to_fixed_point": 1,
                    "reverse_bits": 1
                },
                "LZCOUNT": {
                    "leading_zero_bit_count": 1,
                    "leading_zero_count": 1
                },
                "bVar7": {
                    "flag": 1,
                    "is_condition_met": 1,
                    "is_equal": 15,
                    "is_equal_exponent": 1,
                    "is_zero": 13
                },
                "iVar1": {
                    "exponent_result1": 1,
                    "msb_input1": 1,
                    "original_float_shifted": 1,
                    "right_shifted_value1": 1,
                    "shift": 1,
                    "shift1": 3,
                    "shift_amount1": 1,
                    "shift_value1": 1,
                    "shifted_a": 1,
                    "shifted_float1": 3,
                    "shifted_input1": 5,
                    "shifted_input1_sign": 1,
                    "shifted_number1": 2,
                    "shifted_value1": 3,
                    "temp1": 1
                },
                "iVar2": {
                    "exponent_result2": 1,
                    "modified_float_shifted": 1,
                    "msb_input2": 1,
                    "right_shifted_value2": 1,
                    "shift2": 4,
                    "shift_amount2": 1,
                    "shift_value2": 1,
                    "shifted_b": 1,
                    "shifted_float2": 3,
                    "shifted_input2": 5,
                    "shifted_number2": 2,
                    "shifted_value2": 3,
                    "temp2": 1,
                    "temp_var": 1
                },
                "param_1": {
                    "a": 1,
                    "float_input1": 1,
                    "float_num1": 1,
                    "input1": 13,
                    "input_float": 1,
                    "input_float1": 4,
                    "input_number1": 1,
                    "input_value1": 2,
                    "num1": 1,
                    "number1": 1,
                    "operand1": 1,
                    "original_float": 1,
                    "value1": 3
                },
                "param_2": {
                    "b": 1,
                    "float_input2": 1,
                    "float_num2": 1,
                    "input2": 13,
                    "input_float2": 5,
                    "input_number2": 1,
                    "input_value2": 2,
                    "modified_float": 1,
                    "num2": 1,
                    "number2": 1,
                    "operand2": 1,
                    "value2": 3
                },
                "param_3": {
                    "c": 1,
                    "constant": 2,
                    "float_input3": 1,
                    "float_param": 1,
                    "input3": 7,
                    "input_float3": 1,
                    "input_mask": 1,
                    "input_value1": 1,
                    "param3": 5,
                    "parameter3": 1,
                    "precision": 1,
                    "rounding_mode": 1,
                    "undefined": 1,
                    "unknown": 1,
                    "unknown_value": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "value3": 2
                },
                "param_4": {
                    "comparison_float": 1,
                    "d": 1,
                    "float_input4": 1,
                    "float_param2": 1,
                    "input3": 1,
                    "input4": 7,
                    "input_flag": 1,
                    "input_float4": 1,
                    "input_value2": 1,
                    "output_float": 1,
                    "output_value": 1,
                    "param4": 5,
                    "parameter4": 1,
                    "result": 3,
                    "rounding": 1,
                    "rounding_mode": 1,
                    "unknown_value2": 1,
                    "unused_parameter": 1,
                    "value4": 1
                },
                "uVar3": {
                    "abs_float1": 2,
                    "abs_input1": 1,
                    "abs_value_input2": 1,
                    "fixed_point2": 1,
                    "float1": 1,
                    "mantissa1": 2,
                    "modified_float_masked": 1,
                    "modified_number1": 1,
                    "normalized_a": 1,
                    "normalized_value1": 1,
                    "result": 7,
                    "result1": 4,
                    "result_float1": 1,
                    "result_value1": 1,
                    "shifted_input2": 1,
                    "shifted_value1": 1,
                    "temp1": 2,
                    "tmp_result": 1,
                    "zero_sign": 1
                },
                "uVar4": {
                    "abs1": 1,
                    "abs_float2": 2,
                    "abs_input2": 1,
                    "fixed_point1": 1,
                    "float1": 1,
                    "mantissa2": 2,
                    "modified_number2": 1,
                    "normalized_b": 1,
                    "normalized_input1": 1,
                    "normalized_value2": 1,
                    "original_float_shifted_masked": 1,
                    "result": 1,
                    "result2": 2,
                    "result_float2": 1,
                    "result_value2": 1,
                    "shifted_input1": 2,
                    "shifted_result": 2,
                    "shifted_result1": 1,
                    "shifted_value2": 1,
                    "temp1": 3,
                    "temp2": 2,
                    "temp3": 1,
                    "value1_shifted": 1
                },
                "uVar5": {
                    "abs2": 1,
                    "abs_diff": 1,
                    "abs_difference": 1,
                    "diff": 1,
                    "equal_float_shifts": 1,
                    "exponent1": 2,
                    "exponent_diff": 1,
                    "exponent_difference": 1,
                    "float2": 1,
                    "loop_counter": 1,
                    "num_shifts": 1,
                    "quotient": 1,
                    "remainder": 1,
                    "result3": 1,
                    "shift_count": 1,
                    "shift_value1": 1,
                    "shifted_difference": 1,
                    "shifted_input1_copy": 1,
                    "shifted_input2": 1,
                    "shifted_result2": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_float1": 1,
                    "temp_value1": 1,
                    "u_var5": 1
                },
                "uVar6": {
                    "abs_diff": 2,
                    "abs_exponent_difference": 1,
                    "absolute_difference": 1,
                    "diff": 2,
                    "diff_shifts": 1,
                    "difference": 10,
                    "exponent2": 2,
                    "result4": 1,
                    "shift_amount": 1,
                    "shift_difference": 1,
                    "shift_value2": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_float2": 1,
                    "temp_value2": 1,
                    "u_var6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_value_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input1 << 1;\n  is_equal = temp1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = temp1 == input4;\n  }\n  shifted_input1 = (int)temp1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      temp1 = input2;\n      if (shifted_input1 == -1) {\n        temp1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = temp1;\n      }\n      is_equal = (temp1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (input2 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = temp1 == input2;\n      }\n      if (!is_equal) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  is_equal = difference != 0;\n  temp2 = temp1;\n  if (is_equal && temp1 <= input4) {\n    temp2 = temp1 + difference;\n  }\n  if (is_equal && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_equal && temp1 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_equal && temp1 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  result = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result = -result;\n  }\n  if (temp2 == difference) {\n    result = result ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)result >> (difference & 0xff));\n  result = result << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    is_equal = result != 0;\n    result = -result;\n    temp1 = -temp1 - (uint)is_equal;\n  }\n  if (temp1 < 0x800000) {\n    difference = result & 0x80000000;\n    result = result << 1;\n    temp1 = temp1 * 2 + (uint)(difference != 0);\n    difference = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      temp2 = leading_zero_bit_count(temp1) - 8;\n      temp1 = temp1 << (temp2 & 0xff);\n      if ((int)difference < (int)temp2) {\n        temp1 = temp1 >> (-(difference - temp2) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (difference - temp2) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    difference = temp2 - 1;\n    if (0xffffff < temp1) {\n      difference = temp1 & 1;\n      temp1 = temp1 >> 1;\n      result = (uint)(difference != 0) << 0x1f | result >> 1;\n      difference = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + difference * 0x800000 + (uint)(0x7fffffff < result);\n  if (result == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "current_name": "calculate_float_value_00081734",
            "entrypoint": "0x00081734",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081734": "calculate_float_value_00081734",
                "LZCOUNT": "leading_zero_bit_count",
                "bVar7": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081894": {
            "additional_data": {
                "FUN_00081894": {
                    "calculate_hash": 2,
                    "calculate_modified_value": 4,
                    "calculate_new_value": 1,
                    "calculate_result": 1,
                    "calculate_value": 1,
                    "count_bits": 1,
                    "count_bits_and_adjust": 1,
                    "count_bits_and_shift": 2,
                    "count_leading_zeros": 4,
                    "count_set_bits": 1,
                    "decode_integer": 2,
                    "decode_number": 1,
                    "decode_value": 1,
                    "process_data": 1,
                    "reverse_bits": 5,
                    "reverse_bitwise_operation": 2,
                    "reverse_number": 1
                },
                "iVar3": {
                    "adjustment": 1,
                    "base_offset": 1,
                    "base_value": 1,
                    "calculation_value": 1,
                    "constant": 8,
                    "constant1": 1,
                    "constant_offset": 1,
                    "constant_value": 2,
                    "initial_value": 1,
                    "intermediate_result": 1,
                    "intermediate_value": 1,
                    "offset": 6,
                    "result": 3,
                    "shifted_value": 2,
                    "temporary_var": 1
                },
                "iVar3_1": {
                    "result": 1
                },
                "iVar3_shifted": {
                    "shifted_constant": 1
                },
                "param_1": {
                    "input": 14,
                    "input_num": 1,
                    "input_number": 1,
                    "input_val": 1,
                    "input_value": 10,
                    "integer": 1,
                    "number": 2,
                    "value": 1
                },
                "param_1_1": {
                    "input": 1
                },
                "uVar1": {
                    "count": 1,
                    "final_result": 1,
                    "leading_zero_count": 2,
                    "leading_zeroes": 2,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 14,
                    "leading_zeros_count": 1,
                    "num_set_bits": 1,
                    "output": 1,
                    "result": 5,
                    "shifted_number15": 1,
                    "temporary_result2": 1
                },
                "uVar11": {
                    "result": 1
                },
                "uVar1_1": {
                    "count": 1
                },
                "uVar1_2": {
                    "count": 1
                },
                "uVar1_3": {
                    "count": 1
                },
                "uVar1_4": {
                    "count": 1
                },
                "uVar1_plus_24": {
                    "shifted_leading_zeros": 1
                },
                "uVar1_plus_24_shifted": {
                    "shifted_output": 1
                },
                "uVar1_shifted": {
                    "truncated_input": 1
                },
                "uVar2": {
                    "shift": 3,
                    "shift_amount": 19,
                    "shift_count": 1,
                    "shift_value": 2,
                    "shifted_input": 1,
                    "shifted_number": 1,
                    "shifted_value": 2,
                    "temp": 1,
                    "temp_var3": 1
                },
                "uVar2_1": {
                    "shift": 1
                },
                "uVar2_2": {
                    "shift": 1
                },
                "uVar2_3": {
                    "shift": 1
                },
                "uVar2_4": {
                    "shift": 1
                },
                "uVar2_shifted": {
                    "shifted_input": 1
                },
                "uVar2_shifted_truncated": {
                    "truncated_shifted_input": 1
                },
                "uVar3": {
                    "shifted_integer": 1
                },
                "uVar4": {
                    "bit_mask": 2,
                    "carry": 1,
                    "check_overflow": 1,
                    "check_value": 3,
                    "conditional_var": 1,
                    "high_bit_check": 1,
                    "mask": 13,
                    "mask_value": 1,
                    "overflow": 2,
                    "result": 1,
                    "sign_bit": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temporary_result1": 1
                },
                "uVar4_1": {
                    "mask": 1
                },
                "uVar5": {
                    "mask": 1,
                    "result": 1,
                    "shifted_input": 1
                },
                "uVar6": {
                    "adjusted_result": 1,
                    "shifted_offset": 1
                },
                "uVar7": {
                    "condition_check": 1
                },
                "uVar8": {
                    "final_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint count_bits_and_adjust_00081894(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  leading_zeros = constant + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_bits_and_adjust_00081894",
            "entrypoint": "0x00081894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081894": "count_bits_and_adjust_00081894",
                "iVar3": "constant",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008189c": {
            "additional_data": {
                "FUN_0008189c": {
                    "calculate_absolute_difference": 1,
                    "calculate_integer_parity": 1,
                    "calculate_inverse": 1,
                    "calculate_result": 1,
                    "calculate_unsigned_value": 2,
                    "compute_abs_value_and_shift": 1,
                    "compute_checksum": 1,
                    "convert_to_positive": 1,
                    "count_bits": 1,
                    "count_bits_and_position": 1,
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 1,
                    "count_ones": 1,
                    "count_set_bits": 5,
                    "decode_int": 1,
                    "decode_number": 1,
                    "decode_unsigned_number": 2,
                    "get_absolute_value": 1,
                    "perform_unsigned_integer_conversion": 1,
                    "reverse_bits": 4
                },
                "LZCOUNT": {
                    "count_leading_zeros": 1
                },
                "iVar4": {
                    "adjusted_value": 1,
                    "calculation_result": 2,
                    "final_result": 1,
                    "multiplier": 1,
                    "offset": 1,
                    "result": 24
                },
                "param_1": {
                    "input": 15,
                    "input_number": 5,
                    "input_value": 3,
                    "num": 2,
                    "number": 5
                },
                "uVar1": {
                    "bit_count": 2,
                    "count": 2,
                    "leading_zeroes": 5,
                    "leading_zeros": 14,
                    "leading_zeros_count": 1,
                    "mask": 1,
                    "num_leading_zeroes": 1,
                    "ones_count": 1,
                    "output": 1,
                    "set_bits": 1,
                    "temp_result": 1
                },
                "uVar1_1": {
                    "continue": 1
                },
                "uVar2": {
                    "offset": 1,
                    "shift": 7,
                    "shift_amount": 16,
                    "shift_by": 1,
                    "shift_factor": 1,
                    "shift_value": 2,
                    "shifted": 1,
                    "shifted_set_bits": 1
                },
                "uVar3": {
                    "carry": 1,
                    "is_negative": 11,
                    "msb_check": 1,
                    "result": 1,
                    "sign": 1,
                    "sign_bit": 13,
                    "sign_mask": 1,
                    "temp": 1
                },
                "uVar3_1": {
                    "sign_bit_mask": 1
                },
                "uVar3_2": {
                    "new_result": 1
                },
                "uVar6": {
                    "result": 1
                },
                "uVar7": {
                    "mask1": 1
                },
                "uVar8": {
                    "mask2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint count_set_bits_0008189c(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_set_bits_0008189c",
            "entrypoint": "0x0008189c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008189c": "count_set_bits_0008189c",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081944": {
            "additional_data": {
                "FUN_00081944": {
                    "calculate_float": 12,
                    "calculate_float_exponent": 1,
                    "calculate_float_operation": 1,
                    "calculate_float_value": 3,
                    "calculate_floating_point": 8,
                    "calculate_floating_point_number": 1,
                    "compute_floating_point_result": 1,
                    "float_conversion": 1,
                    "float_to_uint_bits": 1,
                    "reverse_bits": 1
                },
                "bVar10": {
                    "bool2": 1,
                    "carry_flag": 2,
                    "check_carry": 1,
                    "check_condition2": 1,
                    "check_value2": 1,
                    "condition2": 4,
                    "condition_b": 1,
                    "flag2": 1,
                    "is_carry": 3,
                    "is_condition_false": 1,
                    "is_high_diff": 1,
                    "is_negative": 9,
                    "is_negative_result": 1,
                    "is_overflow": 1,
                    "is_zero2": 1,
                    "overflow_check": 1,
                    "overflow_flag": 1
                },
                "bVar9": {
                    "bool1": 1,
                    "check_condition1": 1,
                    "check_value": 1,
                    "check_zero": 1,
                    "condition1": 4,
                    "condition_a": 1,
                    "flag1": 1,
                    "has_zero_exponent": 1,
                    "is_condition_true": 2,
                    "is_zero": 9,
                    "is_zero1": 3,
                    "is_zero_check": 1,
                    "is_zero_exp1": 1,
                    "is_zero_input1": 1,
                    "is_zero_msb": 1,
                    "is_zero_or_infinity": 1,
                    "is_zero_value1": 1
                },
                "iVar4": {
                    "added_bits": 1,
                    "msb_sum": 1,
                    "num_sum": 1,
                    "shift_sum": 2,
                    "sum": 12,
                    "sum_bits": 1,
                    "sum_exp": 1,
                    "sum_exponents": 1,
                    "sum_msb": 1,
                    "sum_of_bits": 1,
                    "sum_of_shifted_bits": 1,
                    "sum_of_shifts": 1,
                    "sum_shifted": 3,
                    "temporary1": 1,
                    "total_bits": 1,
                    "total_exponent": 2
                },
                "iVar5": {
                    "diff": 5,
                    "diff_exp": 1,
                    "diff_sum_shifted": 1,
                    "difference": 2,
                    "difference_from_max_exponent": 1,
                    "exponent": 1,
                    "index_diff": 1,
                    "msb_diff": 1,
                    "normalized_result": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_diff": 2,
                    "shift_difference": 1,
                    "shifted_exponent": 1,
                    "shifted_sum": 2,
                    "sum_adjusted": 2,
                    "sum_diff": 1,
                    "sum_normalized_bits": 1,
                    "sum_shifted_by127": 1,
                    "temp1": 2,
                    "temp_var1": 1,
                    "temporary2": 1
                },
                "iVar7": {
                    "count": 1,
                    "counter": 1,
                    "delta_exponent": 1,
                    "diff2": 2,
                    "diff_of_shifted_bits": 1,
                    "difference2": 1,
                    "difference_from_max_exponent2": 1,
                    "exp_diff": 1,
                    "exponent_difference": 1,
                    "index_diff_adjusted": 1,
                    "loop_counter": 1,
                    "msb_diff_adjusted": 1,
                    "mul_diff": 1,
                    "reduced_shift": 1,
                    "remaining_bits": 2,
                    "shift_val": 1,
                    "shifted_num_bytes": 1,
                    "shifted_product": 1,
                    "shifted_sum2": 1,
                    "sum_adjusted2": 1,
                    "sum_diff2": 1,
                    "sum_lsb": 1,
                    "sum_shifted_by_max": 1,
                    "temp2": 3,
                    "temp_shift": 1,
                    "temp_var2": 1,
                    "temporary3": 1
                },
                "lVar1": {
                    "extended_product": 1,
                    "large_number": 1,
                    "long_product": 1,
                    "multiplication_result": 1,
                    "multiplication_result_extended": 1,
                    "product": 4,
                    "product_long": 1,
                    "temp_long": 1
                },
                "param_1": {
                    "exponent_a": 1,
                    "float1": 1,
                    "float_value1": 1,
                    "input1": 16,
                    "input_a": 2,
                    "input_param1": 1,
                    "input_value1": 1,
                    "num1": 4,
                    "operand1": 1,
                    "value1": 3
                },
                "param_2": {
                    "exponent_b": 1,
                    "float2": 1,
                    "float_value2": 1,
                    "input2": 16,
                    "input_b": 2,
                    "input_param2": 1,
                    "input_value2": 1,
                    "num2": 4,
                    "operand2": 1,
                    "value2": 3
                },
                "param_3": {
                    "coeff1": 1,
                    "constant": 2,
                    "constant1": 1,
                    "float3": 1,
                    "float_mask": 1,
                    "input3": 6,
                    "input_c": 1,
                    "num3": 1,
                    "param3": 8,
                    "param_a": 1,
                    "rounding_mode": 2,
                    "undefined": 1,
                    "unused": 1,
                    "unused_param": 2,
                    "value3": 2
                },
                "param_4": {
                    "coeff2": 1,
                    "constant2": 1,
                    "exception_flags": 2,
                    "flag": 1,
                    "float4": 1,
                    "input3": 2,
                    "input4": 6,
                    "input_d": 1,
                    "input_param3": 1,
                    "input_value3": 1,
                    "num4": 1,
                    "num_bytes": 1,
                    "param4": 8,
                    "param_b": 1,
                    "unused": 1,
                    "value4": 2
                },
                "uVar2": {
                    "exponent2": 1,
                    "result": 24,
                    "result1": 1,
                    "result2": 1,
                    "result_bits": 1,
                    "result_value": 1,
                    "temp": 2
                },
                "uVar3": {
                    "bit17_input1": 1,
                    "bit_count1": 1,
                    "bit_pattern1": 1,
                    "bit_shifted1": 1,
                    "exp1": 1,
                    "exponent1": 5,
                    "float_value1_exponent": 1,
                    "input1_byte": 1,
                    "input1_msb": 1,
                    "input1_shifted": 3,
                    "input_amsb": 1,
                    "msb1": 1,
                    "num1_shifted": 1,
                    "shift1": 2,
                    "shift_a": 1,
                    "shift_amount1": 1,
                    "shift_count": 1,
                    "shifted_bits": 1,
                    "shifted_val1": 1,
                    "temp1": 2,
                    "upper8_bits_input1": 1,
                    "value1_shifted": 2
                },
                "uVar6": {
                    "fraction1": 1,
                    "mantissa1": 1,
                    "mul_result": 1,
                    "mult_result_lower": 1,
                    "multiplication_result": 3,
                    "multiplied_result": 1,
                    "product": 8,
                    "product_bits": 1,
                    "product_low": 3,
                    "product_lower": 1,
                    "product_lsb": 1,
                    "result1": 1,
                    "result_lower": 1,
                    "shifted_bits_product": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_result": 2
                },
                "uVar8": {
                    "combined": 1,
                    "combined_bits": 1,
                    "combined_input": 1,
                    "computed_result": 1,
                    "exp2": 1,
                    "fraction2": 1,
                    "mantissa": 1,
                    "mask": 1,
                    "modified_value1": 1,
                    "num_sign": 1,
                    "operand": 1,
                    "product_high": 1,
                    "product_upper": 1,
                    "result": 3,
                    "result2": 1,
                    "result3": 1,
                    "result_msb": 2,
                    "result_upper": 1,
                    "shifted_and_combined": 1,
                    "shifted_input_a": 1,
                    "shifted_result": 1,
                    "sign_and_mantissa": 1,
                    "temp": 2,
                    "temp3": 2,
                    "temp_value": 1,
                    "value_shifted": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_value_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int diff;\n  uint product;\n  int temp2;\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      result = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (result = input2, (input2 & 0x7fffff) != 0)))) {\n        return result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  result = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    diff = sum + -0x7f;\n    is_zero = diff == 0;\n    temp2 = diff;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,diff);\n      temp2 = 0xff - diff;\n      is_zero = diff == 0xff;\n    }\n    if (!is_zero && temp2 < 0 == is_negative) {\n      result = result | diff * 0x800000;\n    }\n    if (!is_zero && temp2 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(diff,1);\n    result = sum - 0x80;\n    is_zero = result == 0;\n    exponent1 = result;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = result & 0x80000000 | result;\n    result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(result,0xfd);\n    is_zero = result == 0xfd;\n    exponent1 = result - 0xfd;\n    if (result < 0xfe) {\n      result = result + result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(result + 0x19) < 0;\n    if (result == 0xffffffe7 || is_zero != SCARRY4(result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (result != 0xffffffe7 && is_zero == SCARRY4(result,0x19)) {\n      exponent1 = (result << 1) >> (-result & 0xff);\n      result = result << (result + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | result << 1) == 0) {\n        exponent1 = exponent1 & ~(result >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_value_00081944",
            "entrypoint": "0x00081944",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081944": "calculate_float_value_00081944",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "temp2",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "additional_data": {
                "FUN_00081bf4": {
                    "apply_logic": 1,
                    "calculate_integer": 1,
                    "calculate_result": 3,
                    "check_integer_overflow": 1,
                    "check_overflow": 9,
                    "check_overflow_and_bitwise_operations": 2,
                    "check_overflow_and_negation": 1,
                    "check_overflow_and_sign": 4,
                    "check_overflow_parameters": 1,
                    "check_param_validity": 1,
                    "check_parameters": 1,
                    "determine_overflow_and_sign": 1,
                    "multiply_and_compare": 3,
                    "twice_the_sum": 1,
                    "validate_inputs": 1
                },
                "bVar1": {
                    "has_overflow": 1,
                    "is_combined_negative": 1,
                    "is_negative": 23,
                    "is_negative_combined": 1,
                    "is_negative_result": 1,
                    "is_non_negative_xor_zero": 1,
                    "is_overflow": 3
                },
                "bVar5": {
                    "is_any_input_zero": 1,
                    "is_combined_vars_zero": 1,
                    "is_zero": 27,
                    "is_zero_combined": 1,
                    "is_zero_result": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 8,
                    "input_1": 10,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "modified_input_value1": 1,
                    "num1": 3,
                    "num_1": 1,
                    "output": 1,
                    "result": 4
                },
                "param_1_result": {
                    "result": 1
                },
                "param_1_sign": {
                    "result_sign": 1
                },
                "param_1_times_neg_2": {
                    "input_1_times_negative_2": 1
                },
                "param_2": {
                    "input2": 9,
                    "input_2": 11,
                    "input_value2": 2,
                    "input_value_2": 1,
                    "mask": 1,
                    "num2": 3,
                    "num_2": 1,
                    "number2": 1,
                    "result": 1,
                    "second_param": 1
                },
                "return": {
                    "output": 1,
                    "result": 3
                },
                "uVar2": {
                    "double_input1": 2,
                    "double_input_1": 5,
                    "double_num1": 1,
                    "double_number1": 1,
                    "doubled_first_param": 1,
                    "doubled_input1": 1,
                    "doubled_num_1": 1,
                    "input1_doubled": 1,
                    "input1_multiplied_by2": 1,
                    "input1_shifted": 2,
                    "input1_times2": 2,
                    "input1_times_2": 1,
                    "input1_times_two": 2,
                    "input_1_doubled": 2,
                    "input_1_times_2": 2,
                    "multiplied_input_1": 2,
                    "num1_times_2": 1,
                    "product_1": 1,
                    "temp1": 1,
                    "twice_num1": 1
                },
                "uVar3": {
                    "double_input2": 2,
                    "double_input_2": 5,
                    "double_num2": 1,
                    "double_number2": 1,
                    "doubled_input2": 1,
                    "doubled_num_2": 1,
                    "doubled_second_param": 1,
                    "input2_doubled": 1,
                    "input2_multiplied_by2": 1,
                    "input2_shifted": 2,
                    "input2_times2": 2,
                    "input2_times_2": 1,
                    "input2_times_two": 2,
                    "input_2_doubled": 2,
                    "input_2_times_2": 2,
                    "multiplied_input_2": 2,
                    "num2_times_2": 1,
                    "product_2": 1,
                    "temp2": 1,
                    "twice_num2": 1
                },
                "uVar4": {
                    "combined": 1,
                    "combined_input": 5,
                    "combined_inputs": 8,
                    "combined_multiplied_inputs": 1,
                    "combined_number": 1,
                    "combined_nums": 4,
                    "combined_params": 1,
                    "combined_product": 1,
                    "combined_result": 1,
                    "combined_shifted": 1,
                    "combined_value": 2,
                    "combined_values": 1,
                    "combined_vars": 1,
                    "merged_inputs": 1,
                    "modified_input": 1,
                    "temp3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081c5c"
            ],
            "code": "\nuint check_overflow_and_sign_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = double_input_1 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = double_input_1 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "check_overflow_and_sign_00081bf4",
            "entrypoint": "0x00081bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081bf4": "check_overflow_and_sign_00081bf4",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c54": {
            "additional_data": {
                "FUN_00081c54": {
                    "concatenate_parameters": 9,
                    "concatenate_params": 22
                },
                "param_1": {
                    "dest": 1,
                    "destination": 9,
                    "destination_param": 1,
                    "first_param": 2,
                    "input1": 1,
                    "param1": 2,
                    "param_a": 1,
                    "param_source": 1,
                    "parameter1": 1,
                    "source": 2,
                    "source_param": 8,
                    "src_param": 1,
                    "target_param": 1
                },
                "param_2": {
                    "dest_param": 1,
                    "destination": 2,
                    "destination_param": 7,
                    "input2": 1,
                    "param2": 2,
                    "param_b": 1,
                    "param_destination": 1,
                    "parameter2": 1,
                    "second_param": 2,
                    "source": 9,
                    "source_param": 2,
                    "src": 1,
                    "target_param": 1
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_00081ca8"
            ],
            "code": "\nvoid concatenate_params_00081c54(undefined4 destination,undefined4 source)\n\n{\n  concatenate_params_00081c54_00081c5c(source,destination);\n  return;\n}\n\n",
            "current_name": "concatenate_params_00081c54",
            "entrypoint": "0x00081c54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c54": "concatenate_params_00081c54",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "additional_data": {
                "FUN_00081c5c": {
                    "concatenate_32bit_to_64bit": 1,
                    "concatenate_and_convert": 1,
                    "concatenate_and_extend": 2,
                    "concatenate_and_return": 3,
                    "concatenate_integers": 5,
                    "concatenate_ints": 1,
                    "concatenate_param": 1,
                    "concatenate_param_and_return": 1,
                    "concatenate_parameters": 4,
                    "concatenate_params": 8,
                    "concatenate_values": 4
                },
                "param_1": {
                    "first_int": 1,
                    "first_integer": 3,
                    "first_param": 5,
                    "first_parameter": 6,
                    "first_part": 1,
                    "first_value": 1,
                    "input1": 2,
                    "input_1": 1,
                    "input_param_1": 1,
                    "integer1": 1,
                    "lower_32bit": 1,
                    "param1": 1,
                    "param_a": 1,
                    "parameter1": 1,
                    "value1": 5
                },
                "param_2": {
                    "input2": 2,
                    "input_2": 1,
                    "input_param_2": 1,
                    "integer2": 1,
                    "param2": 1,
                    "param_b": 1,
                    "parameter2": 1,
                    "second_int": 1,
                    "second_integer": 3,
                    "second_param": 5,
                    "second_parameter": 6,
                    "second_part": 1,
                    "second_value": 1,
                    "upper_32bit": 1,
                    "value2": 5
                }
            },
            "called": [
                "FUN_00081bf4"
            ],
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  check_overflow_and_sign_00081bf4();\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_params_00081c5c",
            "entrypoint": "0x00081c5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "first_parameter",
                "param_2": "second_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c94": {
            "additional_data": {
                "FUN_00081c94": {
                    "check_and_return_result": 1,
                    "check_combined_conditions": 1,
                    "check_concated_params": 1,
                    "check_concatenate_result": 1,
                    "check_concatenated_params": 2,
                    "check_concatenation": 1,
                    "check_concatenation_result": 14,
                    "check_condition_and_concatenate": 1,
                    "check_conditions": 1,
                    "check_if_concatenated_params_are_not_empty": 1,
                    "check_input_conditions": 1,
                    "check_param_condition": 1,
                    "check_parameters": 1,
                    "check_params": 1,
                    "concatenate_params_and_check": 2,
                    "is_any_param_concatenated_empty": 1
                },
                "concatenate_params_00081c5c": {
                    "combine_parameters": 1,
                    "concatenate_params": 1
                },
                "in_CY": {
                    "carry": 1,
                    "carry_flag": 8,
                    "concatenated_params_result": 1,
                    "concatenation_result_nonzero": 1,
                    "is_carry": 6,
                    "is_carry_flag": 2,
                    "is_carry_flag_set": 2,
                    "is_carry_result": 4,
                    "is_carry_set": 4,
                    "is_cy_true": 1,
                    "result_carry": 1
                },
                "in_ZR": {
                    "concatenation_result_zero": 1,
                    "is_param_zero": 1,
                    "is_zero": 4,
                    "is_zero_result": 13,
                    "is_zero_return": 1,
                    "is_zero_returned": 1,
                    "is_zr_true": 1,
                    "result_zero": 1,
                    "zero_flag": 7,
                    "zero_result": 1
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_concatenation_result_00081c94(void)\n\n{\n  undefined is_zero_result;\n  undefined carry_flag;\n  \n  combine_parameters();\n  return !(bool)carry_flag || (bool)is_zero_result;\n}\n\n",
            "current_name": "check_concatenation_result_00081c94",
            "entrypoint": "0x00081c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c94": "check_concatenation_result_00081c94",
                "concatenate_params_00081c5c": "combine_parameters",
                "in_CY": "carry_flag",
                "in_ZR": "is_zero_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "additional_data": {
                "FUN_00081ca8": {
                    "check_and_concatenate_params": 1,
                    "check_concatenated_params": 5,
                    "check_concatenation_result": 12,
                    "check_concatenation_results": 1,
                    "check_condition_and_concatenate_params": 1,
                    "check_conditions": 1,
                    "check_error_flags": 1,
                    "check_parameters": 1,
                    "check_params_and_return": 1,
                    "check_params_and_return_flag": 1,
                    "concatenate_parameters": 1,
                    "concatenation_check": 1,
                    "concatenation_or": 1,
                    "is_concatenation_successful": 2,
                    "is_either_in_c_yor_zr": 1
                },
                "concatenate_params_00081c54": {
                    "concatenate_parameters": 3
                },
                "in_CY": {
                    "carry": 1,
                    "carry_flag": 4,
                    "concatenation_result_carry": 1,
                    "concatenation_result_non_zero": 1,
                    "concatenation_succeeded": 1,
                    "is_carry": 4,
                    "is_carry_flag": 2,
                    "is_carry_flag_set": 2,
                    "is_carry_parameter": 1,
                    "is_carry_result": 2,
                    "is_carry_returned": 1,
                    "is_carry_set": 4,
                    "is_concatenation_successful": 3,
                    "is_concatenation_valid": 1,
                    "is_cond_carry": 1,
                    "is_cy_true": 1,
                    "is_zero": 1
                },
                "in_ZR": {
                    "concatenation_failed": 1,
                    "concatenation_result_zero": 2,
                    "is_carry_zero": 1,
                    "is_concatenation_successful": 1,
                    "is_cond_zero": 1,
                    "is_zero": 2,
                    "is_zero_flag_set": 1,
                    "is_zero_parameter": 1,
                    "is_zero_result": 13,
                    "is_zero_return": 1,
                    "is_zero_returned": 1,
                    "is_zr_true": 1,
                    "zero_flag": 5
                }
            },
            "called": [
                "FUN_00081c54"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_concatenation_result_00081ca8(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry_set;\n  \n  concatenate_parameters();\n  return !(bool)is_carry_set || (bool)is_zero_result;\n}\n\n",
            "current_name": "check_concatenation_result_00081ca8",
            "entrypoint": "0x00081ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081ca8": "check_concatenation_result_00081ca8",
                "concatenate_params_00081c54": "concatenate_parameters",
                "in_CY": "is_carry_set",
                "in_ZR": "is_zero_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "additional_data": {
                "FUN_00081cd0": {
                    "binary_to_signed_int": 1,
                    "convert_integer": 1,
                    "convert_integer_to_fixed_point": 1,
                    "convert_param_to_integer": 1,
                    "convert_to_positive_integer": 1,
                    "convert_to_signed_int": 3,
                    "convert_to_signed_integer": 5,
                    "convert_unsigned_int_to_signed_int": 1,
                    "convert_unsigned_to_signed": 1,
                    "decode_integer": 1,
                    "decode_signed_integer": 1,
                    "extract_and_convert": 1,
                    "extract_integer": 3,
                    "extract_integer_from_param": 1,
                    "extract_integer_value": 1,
                    "extract_number": 1,
                    "extract_number_from_param": 1,
                    "extract_number_from_parameter": 1,
                    "extract_value": 1,
                    "parse_integer": 1,
                    "reverse_number": 2
                },
                "param_1": {
                    "binary_number": 1,
                    "input": 4,
                    "input_num": 1,
                    "input_number": 2,
                    "input_sign": 1,
                    "input_value": 9,
                    "is_negative": 1,
                    "masked_input": 1,
                    "num": 2,
                    "original_number": 1,
                    "positive_number_check": 1,
                    "result": 1,
                    "unsigned_input": 1,
                    "unsigned_int": 1,
                    "unsigned_int_with_sign": 1,
                    "unsigned_value": 1,
                    "value": 2
                },
                "param_1_temp": {
                    "temp_input": 1
                },
                "param_2": {
                    "positive_shift": 1
                },
                "param_3": {
                    "is_negative_input": 1
                },
                "result": {
                    "converted_value": 1
                },
                "uVar1": {
                    "converted_value": 1,
                    "modified_value": 1,
                    "result": 2,
                    "result_value": 1,
                    "shift_bits": 1,
                    "shifted_bits": 1,
                    "shifted_by8": 1,
                    "shifted_input": 4,
                    "shifted_num": 3,
                    "shifted_number": 4,
                    "shifted_result": 1,
                    "shifted_value": 10,
                    "temp": 1
                },
                "uVar1_new": {
                    "shifted_result": 1
                },
                "uVar1_old": {
                    "shifted_input": 1
                },
                "uVar1_signed": {
                    "signed_number": 1
                },
                "uVar1_temp": {
                    "temp_number": 1
                },
                "uVar2": {
                    "calculation": 1,
                    "constant": 1,
                    "difference": 15,
                    "difference_with_nine": 1,
                    "exponent": 1,
                    "result": 1,
                    "shift_amount": 7,
                    "shift_value": 1,
                    "shifted_difference": 1,
                    "shifted_masked": 1,
                    "temp_value": 1
                },
                "uVar2_new": {
                    "difference_new": 1
                },
                "uVar2_old": {
                    "difference_old": 1
                },
                "uVar2_shifted": {
                    "shifted_temp": 1
                },
                "uVar3": {
                    "converted_number": 1,
                    "result": 3,
                    "shift_amount": 2,
                    "shifted_input": 2,
                    "shifted_input_inverted": 1,
                    "temp_value": 1
                },
                "uVar4": {
                    "negative_shift": 1,
                    "result": 2,
                    "shifted_negative_value": 1,
                    "sign_bit": 1
                },
                "uVar5": {
                    "is_negative": 1,
                    "masked_input": 1
                },
                "uVar6": {
                    "mask": 1
                },
                "uVar_1_9f": {
                    "mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint convert_to_signed_integer_00081cd0(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_to_signed_integer_00081cd0",
            "entrypoint": "0x00081cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081cd0": "convert_to_signed_integer_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "additional_data": {
                "FUN_00081d1c": {
                    "calculate_shift_value": 1,
                    "calculate_shifted_value": 1,
                    "convert_and_shift": 1,
                    "convert_to_big_endian": 1,
                    "convert_to_little_endian": 2,
                    "convert_to_unsigned": 1,
                    "decode_and_shift": 1,
                    "decode_number": 1,
                    "decode_unsigned_integer": 5,
                    "evaluate_parameter_value": 1,
                    "extract_bitfield": 1,
                    "extract_bits": 2,
                    "extracted_value": 1,
                    "reverse_bits": 11,
                    "reverse_endian_conversion": 1
                },
                "param_1": {
                    "input": 11,
                    "input_number": 2,
                    "input_value": 11,
                    "number": 4,
                    "value": 3
                },
                "uVar1": {
                    "bit_count": 1,
                    "bit_shift_value": 1,
                    "result": 2,
                    "shift": 1,
                    "shift_amount": 16,
                    "shift_count": 5,
                    "shifted_value": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint reverse_bits_00081d1c(uint input)\n\n{\n  uint shift_amount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_bits_00081d1c",
            "entrypoint": "0x00081d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d1c": "reverse_bits_00081d1c",
                "param_1": "input",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "rel_array": 1,
                    "relocation_array": 7,
                    "relocation_entries": 4,
                    "relocation_entry_array": 1,
                    "relocation_table": 4,
                    "relocations": 1
                },
                "FUN_00081d5c": {
                    "configure_relocation_entry": 1,
                    "map_values_to_offset": 1,
                    "store_data": 1,
                    "update_array_element": 1,
                    "update_data": 1,
                    "update_parameters": 1,
                    "update_rel_entry": 1,
                    "update_rel_offset": 1,
                    "update_relocation": 2,
                    "update_relocation_entry": 19,
                    "update_relocation_record": 1,
                    "update_relocation_table_entry": 1
                },
                "param_1": {
                    "address": 4,
                    "data1": 1,
                    "function_address": 1,
                    "new_address": 3,
                    "new_offset": 1,
                    "new_param_1": 1,
                    "new_value": 5,
                    "new_value1": 9,
                    "old_address": 1,
                    "target_address": 1,
                    "value1": 3,
                    "value_1": 1
                },
                "param_2": {
                    "data": 1,
                    "data2": 1,
                    "index": 1,
                    "new_address": 1,
                    "new_param_2": 1,
                    "new_value": 4,
                    "new_value2": 11,
                    "next_value": 1,
                    "source_address": 1,
                    "symbol_address": 1,
                    "value": 4,
                    "value2": 3,
                    "value_2": 1
                },
                "param_3": {
                    "additional_value": 2,
                    "bit_flag": 1,
                    "bit_mask": 1,
                    "data": 1,
                    "data3": 1,
                    "new_address": 1,
                    "new_offset": 1,
                    "new_param_3": 1,
                    "new_value2": 1,
                    "new_value3": 11,
                    "offset": 1,
                    "original_value": 1,
                    "relocation_type": 1,
                    "status": 1,
                    "symbol_info": 1,
                    "value3": 3,
                    "value_3": 1,
                    "value_to_assign": 1
                },
                "pdVar1": {
                    "current_entry": 3,
                    "current_entry_ptr": 3,
                    "entry": 1,
                    "entry_ptr": 1,
                    "new_array": 1,
                    "new_relocation": 1,
                    "pointer_to_rel_array": 1,
                    "ptr_to_data": 1,
                    "rel_array": 2,
                    "rel_entry": 2,
                    "reloc_entry": 1,
                    "relocated_data": 2,
                    "relocated_values": 1,
                    "relocation_entry": 8,
                    "relocation_entry_pointer": 1,
                    "relocation_record": 1
                },
                "r_offset": {
                    "offset": 1
                },
                "uVar2": {
                    "current_index": 2,
                    "entry_index": 8,
                    "index": 17,
                    "offset": 1,
                    "rel_index": 1,
                    "relocation_index": 1
                },
                "uVar3": {
                    "bit_flag": 1,
                    "bit_mask": 16,
                    "bit_position": 1,
                    "bitmask": 6,
                    "bitwise_flag": 1,
                    "mask": 4,
                    "shifted_bit": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 update_relocation_table_entry_00081d5c(dword new_value1,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  \n  if (relocation_array[48].offset == 0) {\n    relocation_array[48].offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_array[48].offset + 4);\n  relocation_entry = (dword *)relocation_array[48].offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)rearrange_and_assign_memory_blocks_00081df4(400);\n    if (relocation_entry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocation_entry = relocation_array[48].offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocation_array[48].offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_value1;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n  return 0;\n}\n\n",
            "current_name": "update_relocation_table_entry_00081d5c",
            "entrypoint": "0x00081d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081d5c": "update_relocation_table_entry_00081d5c",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "pdVar1": "relocation_entry",
                "r_offset": "offset",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "additional_data": {
                "0x85860": {
                    "function_pointer_array": 3
                },
                "FANCY_FUNCTION": {
                    "execute_and_increment": 1
                },
                "FUNC_00085858": {
                    "initialize": 3,
                    "initialize_function_set": 2,
                    "initialize_functions": 1,
                    "initialize_sequence": 1
                },
                "FUN_00081d7c": {
                    "execute_and_increment": 1,
                    "execute_callback_functions": 1,
                    "execute_callbacks": 3,
                    "execute_code_blocks": 2,
                    "execute_four_functions": 2,
                    "execute_function_list": 1,
                    "execute_function_pointers": 1,
                    "execute_function_sequence": 1,
                    "execute_function_series": 1,
                    "execute_function_set": 9,
                    "execute_functions": 1,
                    "execute_functions_with_offset_increment": 1,
                    "execute_multiple_functions": 4,
                    "execute_operations": 1
                },
                "code": {
                    "function_type": 1
                },
                "iVar1": {
                    "block_index": 1,
                    "callback_index": 1,
                    "count": 1,
                    "counter": 5,
                    "iteration_count": 15,
                    "iteration_counter": 7,
                    "operation_count": 1
                },
                "ppcVar2": {
                    "callback_array": 2,
                    "callback_function_pointer": 1,
                    "code_block_array": 1,
                    "code_pointers": 1,
                    "function_list": 1,
                    "function_list_ptr": 1,
                    "function_pointer": 8,
                    "function_pointer_array": 5,
                    "function_pointer_list": 1,
                    "function_pointers": 5,
                    "function_set_pointer": 3,
                    "function_set_ptr": 1,
                    "operation_pointers": 1
                }
            },
            "called": [
                "FUN_00083974",
                "FUN_00085858",
                "FUN_00080118"
            ],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_function_set_00081d7c(void)\n\n{\n  int iteration_count;\n  function_type **function_pointer;\n  \n  FUNC_00085858();\n  function_pointer = (function_type **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointer = function_pointer + 1;\n    (**function_pointer)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_function_set_00081d7c",
            "entrypoint": "0x00081d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d7c": "execute_function_set_00081d7c",
                "code": "function_type",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081df4": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_rel_array": 2,
                    "memory_blocks_array": 1,
                    "new_array": 3,
                    "new_rel_array": 1,
                    "rel_array": 2,
                    "relocation_array": 6,
                    "relocation_entries": 1,
                    "relocation_table": 6
                },
                "FUN_00081df4": {
                    "assign_memory_blocks": 3,
                    "rearrange_and_assign_memory": 1,
                    "rearrange_and_assign_memory_blocks": 25,
                    "rearrange_memory_blocks": 2
                },
                "param_1": {
                    "data": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 5,
                    "input_parameter": 3,
                    "memory_address": 2,
                    "memory_array": 1,
                    "memory_block": 3,
                    "memory_blocks": 4,
                    "memory_blocks_array": 1,
                    "new_param": 7,
                    "new_parameter": 1,
                    "parameter": 1
                },
                "r_offset": {
                    "new_offset": 2,
                    "offset": 6,
                    "relocation_offset": 1
                },
                "rearrange_and_assign_memory_blocks_00081e14": {
                    "rearrange_and_assign_memory_blocks": 1
                }
            },
            "called": [
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083974"
            ],
            "code": "\nvoid rearrange_and_assign_memory_blocks_00081df4(undefined4 new_param)\n\n{\n  rearrange_and_assign_memory_blocks_00081df4(relocation_array[140].offset,new_param);\n  return;\n}\n\n",
            "current_name": "rearrange_and_assign_memory_blocks_00081df4",
            "entrypoint": "0x00081df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081df4": "rearrange_and_assign_memory_blocks_00081df4",
                "param_1": "new_param",
                "r_offset": "offset",
                "rearrange_and_assign_memory_blocks_00081e14": "rearrange_and_assign_memory_blocks"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e04": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_rel_array": 1,
                    "rel_array": 15,
                    "relocation_array": 4,
                    "relocation_table": 4
                },
                "FUN_00081e04": {
                    "calculate_and_update_offset": 9,
                    "calculate_and_update_relocation_offset": 2,
                    "update_offset": 18,
                    "update_relocation_offset": 2
                },
                "param_1": {
                    "argument": 1,
                    "input": 9,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 2,
                    "new_parameter": 1,
                    "offset": 7,
                    "offset_value": 2,
                    "param": 2,
                    "parameter": 1,
                    "value": 2
                },
                "r_offset": {
                    "offset": 2,
                    "offset_to_update": 1
                }
            },
            "called": [
                "FUN_00083d9c"
            ],
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "code": "\nvoid calculate_and_update_relocation_offset_00081e04(undefined4 input)\n\n{\n  calculate_and_update_offset_00083d9c(rel_array[140].offset,input);\n  return;\n}\n\n",
            "current_name": "calculate_and_update_relocation_offset_00081e04",
            "entrypoint": "0x00081e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081e04": "calculate_and_update_relocation_offset_00081e04",
                "param_1": "input",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e14": {
            "additional_data": {
                "DAT_20071188": {
                    "minimum_value": 1
                },
                "DAT_2007118c": {
                    "maximum_value": 1
                },
                "DAT_20071190": {
                    "constant_1": 1
                },
                "DAT_20071194": {
                    "constant_2": 1
                },
                "FUN_00081e14": {
                    "allocate_and_fill_block": 1,
                    "allocate_and_init_memory": 1,
                    "allocate_and_initialize_memory": 1,
                    "allocate_and_insert": 1,
                    "allocate_and_link_memory": 1,
                    "allocate_memory": 1,
                    "allocate_memory_and_assign_values": 1,
                    "decompose_binary_function": 1,
                    "improved_code": 1,
                    "perform_memory_allocation": 1,
                    "reallocate_memory": 1,
                    "rearrange_and_assign_memory_blocks": 1,
                    "rearrange_function": 1,
                    "rearrange_memory_blocks": 1,
                    "reorder_and_assign_offset": 1,
                    "update_memory_allocation": 1
                },
                "F_00082598": {
                    "function1": 1
                },
                "F_0008259c": {
                    "function2": 1
                },
                "calculate_and_update_offset_00083d9c": {
                    "calculate_and_update_offset": 1
                },
                "calculate_sum_and_assign_to_param_00082970": {
                    "calculate_and_assign_sum": 1
                },
                "dVar1": {
                    "current_offset": 1,
                    "dword1": 1,
                    "entry_index": 2,
                    "first_rel_info": 1,
                    "info": 1,
                    "offset": 3,
                    "offset_1": 1,
                    "original_index": 1,
                    "previous_offset": 1,
                    "rel_info": 2,
                    "rel_info1": 1,
                    "rel_info_1": 1,
                    "rel_offset1": 1,
                    "result": 4,
                    "temp1": 4,
                    "temp_1": 1,
                    "temp_dword": 1,
                    "temp_offset": 1,
                    "temp_var1": 1,
                    "temp_var33": 1,
                    "tmp58": 1
                },
                "dVar11": {
                    "current_rel_info": 1,
                    "dword3": 1,
                    "info2": 1,
                    "initial_offset": 1,
                    "next": 1,
                    "offset2": 1,
                    "offset_3": 1,
                    "previous_index": 1,
                    "ptr_offset": 1,
                    "rel_info3": 1,
                    "rel_offset3": 1,
                    "temp10": 2,
                    "temp11": 2,
                    "temp7": 2,
                    "temp_10": 1,
                    "temp_dword2": 1,
                    "temp_entry": 1,
                    "temp_offset": 2,
                    "temp_offset3": 1,
                    "temp_rel_offset1": 1,
                    "temp_var11": 1,
                    "temp_var22": 1,
                    "temp_var_20": 1,
                    "temp_var_9": 1,
                    "tmp69": 1,
                    "tmp8": 1,
                    "var11": 1
                },
                "dVar12": {
                    "current_pointer": 1,
                    "dword4": 1,
                    "last_info": 1,
                    "offset3": 1,
                    "offset_4": 1,
                    "prev_entry": 1,
                    "prev_offset": 2,
                    "previous_offset": 2,
                    "ptr_offset_2": 1,
                    "rel_offset4": 1,
                    "temp11": 2,
                    "temp12": 2,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_11": 1,
                    "temp_dword3": 1,
                    "temp_offset4": 1,
                    "temp_rel_offset2": 1,
                    "temp_var12": 1,
                    "temp_var13": 1,
                    "temp_var_10": 1,
                    "temp_var_9": 1,
                    "tmp73": 1,
                    "tmp9": 1,
                    "var12": 1
                },
                "dVar7": {
                    "current_entry": 1,
                    "current_index": 1,
                    "current_info": 1,
                    "current_offset": 7,
                    "current_rel_offset": 2,
                    "dword2": 1,
                    "offset": 2,
                    "offset_2": 1,
                    "rel_info2": 1,
                    "rel_offset2": 1,
                    "temp7": 4,
                    "temp_7": 1,
                    "temp_dword1": 1,
                    "temp_entry": 1,
                    "temp_offset2": 1,
                    "temp_var31": 1,
                    "temp_var7": 1,
                    "temp_var_16": 1,
                    "temp_var_6": 1,
                    "tmp78": 1
                },
                "iVar13": {
                    "current_index": 1,
                    "i_var13": 1,
                    "idx1": 1,
                    "index": 3,
                    "index_var5": 1,
                    "int_var13": 1,
                    "loop_var": 1,
                    "offset_index": 1,
                    "temp11": 1,
                    "temp12": 2,
                    "temp13": 2,
                    "temp8": 2,
                    "temp9": 1,
                    "temp_12": 1,
                    "temp_index": 2,
                    "temp_int4": 1,
                    "temp_int6": 1,
                    "temp_var8": 2,
                    "temp_var_11": 1,
                    "temp_var_15": 1,
                    "temp_var_4": 1,
                    "temp_variable3": 1,
                    "tmp10": 2
                },
                "iVar19": {
                    "var19": 1
                },
                "iVar2": {
                    "index": 5,
                    "index_var1": 1,
                    "int_var2": 1,
                    "offset": 2,
                    "offset1": 1,
                    "prev_entry_index": 1,
                    "temp1": 1,
                    "temp2": 4,
                    "temp_1": 1,
                    "temp_2": 1,
                    "temp_index2": 2,
                    "temp_int1": 1,
                    "temp_int7": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "temp_var_14": 1,
                    "temp_var_2": 2,
                    "tmp": 1,
                    "tmp1": 2
                },
                "iVar20": {
                    "var20": 1
                },
                "iVar21": {
                    "var21": 1
                },
                "iVar22": {
                    "var22": 1
                },
                "iVar23": {
                    "var23": 1
                },
                "iVar5": {
                    "block_index": 1,
                    "i_var1": 1,
                    "i_var5": 1,
                    "idx2": 1,
                    "index_var2": 1,
                    "int_var5": 1,
                    "next_offset": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp5": 4,
                    "temp_2": 1,
                    "temp_5": 1,
                    "temp_index": 1,
                    "temp_index3": 1,
                    "temp_int2": 2,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "temp_var_1": 1,
                    "temp_var_4": 2,
                    "temp_variable": 1,
                    "tmp11": 1,
                    "tmp4": 1,
                    "var5": 1
                },
                "iVar9": {
                    "i_var2": 1,
                    "i_var9": 1,
                    "index_var3": 1,
                    "int_var9": 1,
                    "new_link": 1,
                    "next_index": 1,
                    "prev": 1,
                    "temp6": 3,
                    "temp7": 1,
                    "temp9": 4,
                    "temp_9": 1,
                    "temp_index": 1,
                    "temp_int3": 2,
                    "temp_value_aligned": 1,
                    "temp_var7": 2,
                    "temp_var9": 1,
                    "temp_var_5": 1,
                    "temp_var_7": 1,
                    "temp_var_8": 1,
                    "temp_variable2": 1,
                    "tmp67": 1,
                    "tmp7": 1,
                    "var9": 1
                },
                "pVar80": {
                    "tmp80": 1
                },
                "param_1": {
                    "allocation_size": 1,
                    "array_pointer": 1,
                    "buffer": 1,
                    "destination_buffer": 1,
                    "input_array": 3,
                    "input_pointer": 1,
                    "mem_ptr": 1,
                    "output": 1,
                    "output_buffer": 2,
                    "output_parameters": 1,
                    "output_ptr": 2,
                    "param": 1,
                    "param_address": 1,
                    "param_array": 5,
                    "param_struct_pointer": 1,
                    "parameter1": 2,
                    "parameter_1": 1,
                    "parameters": 3,
                    "pointer": 1,
                    "result": 1
                },
                "param_2": {
                    "alignment": 1,
                    "array_length": 6,
                    "array_size": 1,
                    "buffer_size": 1,
                    "input_length": 1,
                    "input_size": 2,
                    "length": 1,
                    "mem_size": 1,
                    "param_value": 1,
                    "parameter2": 2,
                    "parameter_2": 1,
                    "size": 13
                },
                "pdVar14": {
                    "current_ptr": 1,
                    "current_section": 1,
                    "entry_ptr": 1,
                    "offset_list": 1,
                    "pd_var14": 1,
                    "pointer1": 1,
                    "pointer2": 5,
                    "pointer_array1": 1,
                    "pointer_array_1": 1,
                    "pointer_var14": 1,
                    "pointer_var5": 1,
                    "ptr2": 1,
                    "ptr_array": 1,
                    "ptr_to_rel_info_1": 1,
                    "rel_info_array": 1,
                    "rel_ptr": 1,
                    "rel_ptr1": 1,
                    "temp14": 2,
                    "temp_pointer2": 1,
                    "temp_pointer_array": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_2": 2,
                    "temp_rel_pointer1": 1,
                    "tmp63": 1
                },
                "pdVar17": {
                    "current_entry": 2,
                    "current_pointer_array": 1,
                    "entry_array_ptr": 1,
                    "pd_var17": 1,
                    "pointer2": 1,
                    "pointer4": 5,
                    "pointer_array2": 1,
                    "pointer_array_2": 1,
                    "pointer_var17": 1,
                    "pointer_var4": 1,
                    "ptr4": 1,
                    "ptr_array_2": 1,
                    "ptr_to_rel_info_2": 1,
                    "rel_ptr2": 1,
                    "rel_ptr3": 1,
                    "temp17": 2,
                    "temp_pointer3": 1,
                    "temp_pointer4": 1,
                    "temp_ptr4": 2,
                    "temp_ptr_4": 2,
                    "temp_rel_pointer2": 1,
                    "tmp62": 1
                },
                "puVar10": {
                    "current_link": 1,
                    "current_pointer": 1,
                    "current_rel": 1,
                    "pointer": 2,
                    "pointer1": 4,
                    "pointer_var": 1,
                    "pointer_var1": 1,
                    "pointer_var10": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "temp10": 2,
                    "temp_pointer": 5,
                    "temp_pointer1": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 2,
                    "temp_ptr_1": 3,
                    "tmp68": 1,
                    "var10": 1
                },
                "puVar16": {
                    "aligned_pointer": 2,
                    "aligned_ptr": 1,
                    "new_entry": 1,
                    "new_pointer": 1,
                    "new_ptr": 2,
                    "pointer3": 5,
                    "pointer_var16": 1,
                    "pointer_var3": 1,
                    "pointer_var_2": 1,
                    "ptr": 1,
                    "ptr3": 1,
                    "ptr_offset_3": 1,
                    "rel_ptr2": 1,
                    "temp16": 2,
                    "temp_pointer2": 2,
                    "temp_pointer3": 1,
                    "temp_ptr3": 2,
                    "temp_ptr_2": 1,
                    "temp_ptr_3": 1,
                    "temp_ptr_5": 1,
                    "tmp72": 1
                },
                "uVar15": {
                    "adjusted_size": 2,
                    "aligned_length": 2,
                    "aligned_size": 6,
                    "alignment": 1,
                    "idx3": 1,
                    "normalized_buffer_size": 1,
                    "rounded_size": 1,
                    "size": 1,
                    "size_aligned": 1,
                    "size_var_5": 1,
                    "temp13": 2,
                    "temp15": 2,
                    "temp9": 1,
                    "temp_value5": 1,
                    "temp_var15": 1,
                    "temp_var19": 1,
                    "temp_var_11": 1,
                    "temp_var_12": 1,
                    "tmp13": 1,
                    "tmp51": 1,
                    "uint_var15": 1,
                    "updated_array_length": 1
                },
                "uVar18": {
                    "block_index": 1,
                    "block_size": 1,
                    "count": 1,
                    "divider": 1,
                    "entry_array_index": 1,
                    "index": 1,
                    "loop_counter": 2,
                    "region_index": 1,
                    "rel_index": 1,
                    "size_var_6": 1,
                    "temp10": 2,
                    "temp14": 2,
                    "temp18": 2,
                    "temp9": 1,
                    "temp_13": 1,
                    "temp_u_int5": 1,
                    "temp_uint5": 1,
                    "temp_value6": 1,
                    "temp_var18": 1,
                    "temp_var28": 1,
                    "temp_var9": 1,
                    "temp_var_12": 1,
                    "temp_var_13": 1,
                    "tmp12": 1,
                    "tmp79": 1,
                    "u_var18": 1,
                    "uint_var18": 1
                },
                "uVar3": {
                    "flag": 1,
                    "flags": 1,
                    "mask": 4,
                    "remaining_size": 1,
                    "size_var_1": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp3": 4,
                    "temp_3": 1,
                    "temp_size": 1,
                    "temp_u_int1": 1,
                    "temp_uint1": 1,
                    "temp_value": 1,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_var32": 1,
                    "temp_var_17": 1,
                    "temp_var_2": 1,
                    "tmp2": 1,
                    "tmp71": 1,
                    "u_var1": 1,
                    "uint_var3": 1
                },
                "uVar4": {
                    "align": 1,
                    "aligned_size": 2,
                    "calculated_offset": 1,
                    "diff": 1,
                    "difference": 1,
                    "new_value": 1,
                    "size_var_2": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp4": 4,
                    "temp_4": 1,
                    "temp_size_aligned": 1,
                    "temp_u_int2": 1,
                    "temp_uint2": 1,
                    "temp_value2": 1,
                    "temp_var16": 1,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "temp_var_21": 1,
                    "temp_var_3": 1,
                    "tmp14": 1,
                    "tmp77": 1,
                    "u_var2": 1,
                    "uint_var4": 1
                },
                "uVar6": {
                    "diff": 2,
                    "difference": 1,
                    "new_offset": 1,
                    "offset": 1,
                    "size_var_3": 1,
                    "sum_value": 1,
                    "temp4": 3,
                    "temp5": 1,
                    "temp6": 4,
                    "temp_6": 1,
                    "temp_size": 1,
                    "temp_u_int3": 1,
                    "temp_uint3": 1,
                    "temp_value3": 1,
                    "temp_var23": 1,
                    "temp_var5": 2,
                    "temp_var6": 1,
                    "temp_var_22": 1,
                    "temp_var_5": 1,
                    "tmp15": 1,
                    "tmp65": 1,
                    "u_var3": 1,
                    "uint_var6": 1,
                    "var6": 1
                },
                "uVar8": {
                    "next_size": 1,
                    "remaining_space": 1,
                    "size": 1,
                    "size_var_4": 1,
                    "temp5": 3,
                    "temp6": 1,
                    "temp8": 4,
                    "temp_8": 1,
                    "temp_size": 1,
                    "temp_u_int4": 1,
                    "temp_uint4": 1,
                    "temp_value": 1,
                    "temp_value4": 1,
                    "temp_var24": 1,
                    "temp_var6": 2,
                    "temp_var8": 1,
                    "temp_var_23": 1,
                    "temp_var_7": 1,
                    "tmp6": 1,
                    "tmp66": 1,
                    "u_var4": 1,
                    "uint_var8": 1,
                    "value": 1,
                    "var8": 1
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_00083d9c",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081df4",
                "FUN_000842a4"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * rearrange_and_assign_memory_blocks_00081e14(undefined4 *param_array,uint size)\n\n{\n  dword result;\n  int index;\n  uint mask;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  dword current_offset;\n  uint temp8;\n  int temp9;\n  undefined *temp_pointer;\n  dword temp10;\n  dword temp12;\n  int index;\n  dword *pointer2;\n  uint aligned_size;\n  undefined *pointer3;\n  dword *pointer4;\n  uint temp10;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *param_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(param_array);\n  result = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (index = index + 8, index = *(int *)(index + 0x14), index != index)) {\n      temp5 = *(int *)(index + 0xc);\n      temp9 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(temp9 + 4);\n      index = *(int *)(index + 8);\n      *(int *)(index + 0xc) = temp5;\n      *(int *)(temp5 + 8) = index;\n      *(uint *)(temp9 + 4) = aligned_size | 1;\n      FUNC_0008259c(param_array);\n      return (int *)(index + 8);\n    }\n    temp10 = (aligned_size >> 3) + 2;\n  }\n  else {\n    temp10 = aligned_size >> 9;\n    if (temp10 == 0) {\n      index = 0x7e;\n      index = 0x3f;\n    }\n    else if (temp10 < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      index = index * 2;\n    }\n    else if (temp10 < 0x15) {\n      index = temp10 + 0x5b;\n      index = index * 2;\n    }\n    else if (temp10 < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      index = index * 2;\n    }\n    else if (temp10 < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      index = index * 2;\n    }\n    else if (temp10 < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      index = index * 2;\n    }\n    else {\n      index = 0xfc;\n      index = 0x7e;\n    }\n    for (current_offset = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[index]; index * 4 + 0x20070464U != current_offset\n        ; current_offset = *(dword *)(current_offset + 0xc)) {\n      temp10 = *(uint *)(current_offset + 4) & 0xfffffffc;\n      temp5 = temp10 - aligned_size;\n      if (0xf < temp5) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        index = temp10 + current_offset;\n        aligned_size = *(uint *)(index + 4);\n        temp5 = *(int *)(current_offset + 0xc);\n        index = *(int *)(current_offset + 8);\n        *(int *)(index + 0xc) = temp5;\n        *(int *)(temp5 + 8) = index;\n        *(uint *)(index + 4) = aligned_size | 1;\n        FUNC_0008259c(param_array);\n        return (int *)(current_offset + 8);\n      }\n    }\n    temp10 = index + 1;\n  }\n  current_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    mask = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp4 = mask & 0xfffffffc;\n    temp6 = temp4 - aligned_size;\n    if (0xf < (int)temp6) {\n      current_offset = aligned_size + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = aligned_size | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = current_offset;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = current_offset;\n      *(undefined4 *)(current_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_offset + 8) = 0x2007046c;\n      *(uint *)(current_offset + 4) = temp6 | 1;\n      *(uint *)(current_offset + temp6) = temp6;\n      FUNC_0008259c(param_array);\n      return (int *)(result + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp6) {\n      *(uint *)(temp4 + result + 4) = *(uint *)(temp4 + result + 4) | 1;\n      FUNC_0008259c(param_array);\n      return (int *)(result + 8);\n    }\n    if (temp4 < 0x200) {\n      temp4 = mask & 0xfffffff8;\n      index = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4);\n      current_offset = 1 << ((int)(mask >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(result + 8) = index;\n      *(uint *)(result + 0xc) = temp4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = current_offset;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4) = result;\n      *(dword *)(index + 0xc) = result;\n    }\n    else {\n      temp6 = mask >> 9;\n      if (temp6 < 5) {\n        index = (mask >> 6) + 0x38;\n        index = index * 2;\n      }\n      else if (temp6 < 0x15) {\n        index = temp6 + 0x5b;\n        index = index * 2;\n      }\n      else if (temp6 < 0x55) {\n        index = (mask >> 0xc) + 0x6e;\n        index = index * 2;\n      }\n      else if (temp6 < 0x155) {\n        index = (mask >> 0xf) + 0x77;\n        index = index * 2;\n      }\n      else if (temp6 < 0x555) {\n        index = (mask >> 0x12) + 0x7c;\n        index = index * 2;\n      }\n      else {\n        index = 0xfc;\n        index = 0x7e;\n      }\n      current_offset = index * 4 + 0x20070464;\n      temp10 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[index];\n      if (temp10 == current_offset) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (index >> 2 & 0xffU);\n        temp12 = temp10;\n      }\n      else {\n        do {\n          temp12 = temp10;\n          if ((*(uint *)(temp10 + 4) & 0xfffffffc) <= temp4) break;\n          temp10 = *(dword *)(temp10 + 8);\n          temp12 = temp10;\n        } while (current_offset != temp10);\n        temp10 = *(dword *)(temp12 + 0xc);\n      }\n      current_offset = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(result + 0xc) = temp10;\n      *(dword *)(result + 8) = temp12;\n      *(dword *)(temp10 + 8) = result;\n      *(dword *)(temp12 + 0xc) = result;\n    }\n  }\n  result = Elf32_Rel_ARRAY_20070000[141].r_info;\n  mask = 1 << ((int)temp10 >> 2 & 0xffU);\n  if (mask <= current_offset) {\n    if ((current_offset & mask) == 0) {\n      temp10 = temp10 & 0xfffffffc;\n      do {\n        mask = mask << 1;\n        temp10 = temp10 + 4;\n      } while ((current_offset & mask) == 0);\n    }\n    do {\n      pointer4 = &Elf32_Rel_ARRAY_20070000[temp10 + 0x8c].r_info;\n      pointer2 = pointer4;\n      temp4 = temp10;\n      do {\n        for (temp_pointer = (undefined *)pointer2[3]; pointer2 != (dword *)temp_pointer;\n            temp_pointer = *(undefined **)(temp_pointer + 0xc)) {\n          temp6 = *(uint *)(temp_pointer + 4) & 0xfffffffc;\n          temp8 = temp6 - aligned_size;\n          if (0xf < (int)temp8) {\n            index = *(int *)(temp_pointer + 8);\n            index = *(int *)(temp_pointer + 0xc);\n            pointer3 = temp_pointer + aligned_size;\n            *(uint *)(temp_pointer + 4) = aligned_size | 1;\n            *(int *)(index + 0xc) = index;\n            *(int *)(index + 8) = index;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)pointer3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)pointer3;\n            *(undefined4 *)(pointer3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(pointer3 + 8) = 0x2007046c;\n            *(uint *)(pointer3 + 4) = temp8 | 1;\n            *(uint *)(pointer3 + temp8) = temp8;\n            FUNC_0008259c(param_array);\n            return (int *)(temp_pointer + 8);\n          }\n          if (-1 < (int)temp8) {\n            index = *(int *)(temp_pointer + 8);\n            index = *(int *)(temp_pointer + 0xc);\n            *(uint *)(temp_pointer + temp6 + 4) = *(uint *)(temp_pointer + temp6 + 4) | 1;\n            *(int *)(index + 0xc) = index;\n            *(int *)(index + 8) = index;\n            FUNC_0008259c(param_array);\n            return (int *)(temp_pointer + 8);\n          }\n        }\n        temp4 = temp4 + 1;\n        pointer2 = pointer2 + 2;\n      } while ((temp4 & 3) != 0);\n      do {\n        temp6 = temp10 & 3;\n        temp_pointer = (undefined *)(pointer4 + -2);\n        temp10 = temp10 - 1;\n        if (temp6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~mask;\n          break;\n        }\n        pointer4 = (dword *)*pointer4;\n      } while (pointer4 == (dword *)temp_pointer);\n      mask = mask * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= mask &&\n           mask - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp10 = temp4, mask == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & mask) == 0; mask = mask << 1) {\n        temp10 = temp10 + 4;\n      }\n    } while( true );\n  }\n  temp10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= temp10) &&\n     (mask = temp10 - aligned_size, current_offset = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)mask))\n  goto LAB_0008211e;\n  mask = Elf32_Rel_ARRAY_20070000[141].r_info + temp10;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp4 = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    temp4 = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  current_offset = calculate_and_assign_sum(param_array,temp4);\n  if ((current_offset == 0xffffffff) || ((current_offset < mask && (result != 0x20070464)))) {\n    temp10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp6 = DAT_20071194 + temp4;\n    DAT_20071194 = temp6;\n    if ((mask == current_offset) && ((mask & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp4 + temp10 | 1;\n    }\n    else {\n      temp10 = current_offset;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp10 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = temp6 + (current_offset - mask);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp10;\n      mask = current_offset & 7;\n      if (mask == 0) {\n        index = 0x1000;\n      }\n      else {\n        current_offset = current_offset + (8 - mask);\n        index = 0x1008 - mask;\n      }\n      index = index - (temp4 + current_offset & 0xfff);\n      index = calculate_and_assign_sum(param_array,index);\n      if (index == -1) {\n        mask = 1;\n        index = 0;\n      }\n      else {\n        mask = (index - current_offset) + index | 1;\n      }\n      temp6 = DAT_20071194 + index;\n      Elf32_Rel_ARRAY_20070000[141].r_info = current_offset;\n      DAT_20071194 = temp6;\n      *(uint *)(current_offset + 4) = mask;\n      if (result != 0x20070464) {\n        if (temp10 < 0x10) {\n          *(undefined4 *)(current_offset + 4) = 1;\n          temp10 = 0;\n          goto LAB_00082108;\n        }\n        temp10 = temp10 - 0xc & 0xfffffff8;\n        *(uint *)(result + 4) = temp10 | *(uint *)(result + 4) & 1;\n        *(undefined4 *)(result + temp10 + 4) = 5;\n        *(undefined4 *)(result + temp10 + 8) = 5;\n        if (0xf < temp10) {\n          calculate_and_update_offset(param_array,result + 8);\n          temp6 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp6) {\n      DAT_2007118c = temp6;\n    }\n    if (DAT_20071188 < temp6) {\n      DAT_20071188 = temp6;\n    }\n    temp10 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    current_offset = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  mask = temp10 - aligned_size;\n  if ((temp10 < aligned_size) || ((int)mask < 0x10)) {\n    FUNC_0008259c(param_array);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = aligned_size + current_offset;\n  *(uint *)(current_offset + 4) = aligned_size | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = mask | 1;\n  FUNC_0008259c(param_array);\n  return (int *)(current_offset + 8);\n}\n\n",
            "current_name": "rearrange_and_assign_memory_blocks_00081e14",
            "entrypoint": "0x00081e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e14": "rearrange_and_assign_memory_blocks_00081e14",
                "calculate_and_update_offset_00083d9c": "calculate_and_update_offset",
                "calculate_sum_and_assign_to_param_00082970": "calculate_and_assign_sum",
                "dVar1": "result",
                "dVar11": "temp10",
                "dVar12": "temp12",
                "dVar7": "current_offset",
                "iVar13": "index",
                "iVar2": "index",
                "iVar5": "temp5",
                "iVar9": "temp9",
                "param_1": "param_array",
                "param_2": "size",
                "pdVar14": "pointer2",
                "pdVar17": "pointer4",
                "puVar10": "temp_pointer",
                "puVar16": "pointer3",
                "uVar15": "aligned_size",
                "uVar18": "temp10",
                "uVar3": "mask",
                "uVar4": "temp4",
                "uVar6": "temp6",
                "uVar8": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008234c": {
            "additional_data": {
                "B_VAR_6": {
                    "loop_flag": 1
                },
                "FUN_0008234c": {
                    "copy_and_adjust_data": 1,
                    "copy_and_align_data": 1,
                    "copy_and_extend_data": 1,
                    "copy_byte_array": 1,
                    "copy_data": 2,
                    "copy_memory": 23,
                    "copy_memory_segment": 1
                },
                "LAB_000823d0": {
                    "copy_remaining": 1,
                    "copy_remaining_data": 1,
                    "end_copy_loop": 1,
                    "skip_to_loop": 1
                },
                "PU_1": {
                    "dest": 1
                },
                "PU_2": {
                    "src": 1
                },
                "U_VAR_4": {
                    "length": 1
                },
                "U_VAR_5": {
                    "remaining": 1
                },
                "bVar6": {
                    "condition": 1,
                    "continue_copying": 2,
                    "continue_loop": 1,
                    "has_remainder": 1,
                    "has_remaining": 1,
                    "is_copy_safe": 1,
                    "is_end_reached": 1,
                    "is_greater_than_four": 1,
                    "is_looping": 1,
                    "is_not_zero": 2,
                    "is_remaining": 3,
                    "is_remaining_copy_size_nonzero": 1,
                    "is_remaining_length_non_zero": 1,
                    "is_remaining_size": 1,
                    "is_remaining_size_minus_one_or_zero": 1,
                    "is_remaining_size_non_zero": 1,
                    "is_remaining_size_positive": 1,
                    "loop_check": 2,
                    "loop_condition": 6,
                    "should_continue": 1
                },
                "param_1": {
                    "dest": 15,
                    "destination": 15
                },
                "param_2": {
                    "current_source_ptr": 1,
                    "source": 14,
                    "src": 15
                },
                "param_3": {
                    "count": 1,
                    "length": 6,
                    "size": 23
                },
                "puVar1": {
                    "current_dest_ptr": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 23,
                    "dst_ptr": 3,
                    "src_ptr": 2
                },
                "puVar2": {
                    "current_dest_ptr": 1,
                    "dest": 3,
                    "dest_end": 4,
                    "dest_end_ptr": 5,
                    "dest_iter": 3,
                    "dest_next_pointer": 1,
                    "dest_ptr": 2,
                    "dest_ptr_end": 1,
                    "dest_ptr_iter": 1,
                    "dest_ptr_next": 1,
                    "dest_ptr_temp": 1,
                    "dst": 1,
                    "dst_ptr2": 1,
                    "dst_ptr_end": 1,
                    "final_dest_ptr": 1,
                    "src_ptr": 3
                },
                "puVar3": {
                    "current_source_ptr": 1,
                    "dest_end_ptr": 1,
                    "dest_ptr2": 1,
                    "dest_ptr_temp": 1,
                    "dest_temp": 1,
                    "final_source_ptr": 1,
                    "source_ptr": 1,
                    "src": 4,
                    "src_iter": 3,
                    "src_pointer": 1,
                    "src_ptr": 14,
                    "temp_dest_ptr": 1
                },
                "uVar4": {
                    "block_size": 1,
                    "remainder": 1,
                    "remaining": 1,
                    "remaining_count": 1,
                    "remaining_length": 4,
                    "remaining_size": 22
                },
                "uVar5": {
                    "adjusted_size": 1,
                    "aligned_length": 1,
                    "copy_length": 1,
                    "copy_size": 6,
                    "inner_size": 1,
                    "iteration_size": 1,
                    "loop_count": 2,
                    "loop_counter": 2,
                    "loop_size": 1,
                    "remainder_loop": 1,
                    "remaining_copy_size": 1,
                    "remaining_length2": 1,
                    "remaining_length_minus_four": 1,
                    "remaining_size": 2,
                    "remaining_size2": 1,
                    "remaining_size_copy": 1,
                    "remaining_size_minus_four": 1,
                    "temp": 1,
                    "temp_size": 1,
                    "unrolled_size": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34"
            ],
            "code": "\nundefined4 * copy_memory_segment_0008234c(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_end_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint copy_size;\n  bool loop_condition;\n  \n  dest_end_ptr = dest;\n  if ((((uint)src | (uint)dest) & 3) != 0) {\n    if (size < 8) {\n      copy_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = src;\n          src_ptr = dest_end_ptr;\n          loop_condition = copy_size != 0;\n          copy_size = copy_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest_end_ptr = (undefined4 *)((int)src_ptr + 1);\n          src = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return dest;\n      }\n      goto end_copy_loop;\n    }\n    if ((((uint)src & 3) != 0) && (((uint)dest & 3) != 0)) {\n      copy_size = 4 - ((uint)dest & 3);\n      size = size - copy_size;\n      dest_ptr = dest;\n      src_ptr = src;\n      if (((uint)dest & 1) != 0) {\n        src_ptr = (undefined4 *)((int)src + 1);\n        dest_ptr = (undefined4 *)((int)dest + 1);\n        *(undefined *)dest = *(undefined *)src;\n      }\n      dest_end_ptr = dest_ptr;\n      src = src_ptr;\n      if ((copy_size & 2) != 0) {\n        src = (undefined4 *)((int)src_ptr + 2);\n        dest_end_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest_end_ptr = *src;\n    dest_end_ptr[1] = src[1];\n    dest_end_ptr[2] = src[2];\n    dest_end_ptr[3] = src[3];\n    dest_end_ptr[4] = src[4];\n    dest_end_ptr[5] = src[5];\n    dest_end_ptr[6] = src[6];\n    dest_end_ptr[7] = src[7];\n    dest_end_ptr[8] = src[8];\n    dest_end_ptr[9] = src[9];\n    dest_end_ptr[10] = src[10];\n    dest_end_ptr[0xb] = src[0xb];\n    dest_end_ptr[0xc] = src[0xc];\n    dest_end_ptr[0xd] = src[0xd];\n    dest_end_ptr[0xe] = src[0xe];\n    dest_end_ptr[0xf] = src[0xf];\n    dest_end_ptr = dest_end_ptr + 0x10;\n    src = src + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest_end_ptr = *src;\n      dest_end_ptr[1] = src[1];\n      dest_end_ptr[2] = src[2];\n      dest_end_ptr[3] = src[3];\n      dest_end_ptr = dest_end_ptr + 4;\n      src = src + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  copy_size = remaining_size + 0xc;\n  src_ptr = dest_end_ptr;\n  dest_ptr = src;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      src = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < copy_size;\n      copy_size = copy_size - 4;\n      dest_end_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = src;\n    } while (loop_condition);\n  }\nend_copy_loop:\n  if (copy_size + 4 != 0) {\n    dest_ptr = dest_end_ptr;\n    src_ptr = src;\n    if ((copy_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)src + 1);\n      dest_ptr = (undefined4 *)((int)dest_end_ptr + 1);\n      *(undefined *)dest_end_ptr = *(undefined *)src;\n    }\n    if ((copy_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return dest;\n}\n\n",
            "current_name": "copy_memory_segment_0008234c",
            "entrypoint": "0x0008234c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008234c": "copy_memory_segment_0008234c",
                "LAB_000823d0": "end_copy_loop",
                "bVar6": "loop_condition",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_end_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082438": {
            "additional_data": {
                "FUN_00082438": {
                    "copy_and_reverse": 1,
                    "copy_array": 1,
                    "copy_memory": 15,
                    "reverse_and_copy": 1,
                    "reverse_copy": 8,
                    "reverse_copy_bytes": 1,
                    "reverse_copy_memory": 1,
                    "reverse_data": 1,
                    "reverse_memory": 2
                },
                "iVar1": {
                    "count": 3,
                    "counter": 1,
                    "i": 1,
                    "index": 21,
                    "iteration_count": 1,
                    "iterator": 1,
                    "num_iter": 1,
                    "remaining_size": 1,
                    "temp_index": 1
                },
                "param_1": {
                    "dest": 12,
                    "destination": 17,
                    "dst": 1,
                    "source": 1
                },
                "param_2": {
                    "destination": 1,
                    "source": 17,
                    "src": 13
                },
                "param_3": {
                    "length": 12,
                    "size": 19
                },
                "puVar2": {
                    "dest_addr": 1,
                    "dest_iter": 1,
                    "dest_ptr": 24,
                    "dest_ptr_temp": 1,
                    "dst_ptr": 3,
                    "source_ptr": 1
                },
                "puVar3": {
                    "dest_ptr": 1,
                    "src_addr": 1,
                    "src_iter": 1,
                    "src_ptr": 28
                },
                "puVar4": {
                    "copy_ptr": 1,
                    "dest_end": 1,
                    "dest_end_ptr": 4,
                    "dest_ptr2": 1,
                    "dest_ptr_2": 1,
                    "dst_end": 2,
                    "end_ptr": 1,
                    "iter_ptr": 1,
                    "src_copy_ptr": 1,
                    "src_end": 1,
                    "src_ptr_temp": 1,
                    "temp_dest": 1,
                    "temp_dest_addr": 1,
                    "temp_dest_ptr": 1,
                    "temp_ptr": 12,
                    "tmp_ptr": 1
                },
                "puVar6": {
                    "copy_end": 1,
                    "dest_byte_ptr": 3,
                    "dest_copy_ptr": 1,
                    "dest_end": 2,
                    "dest_end_ptr": 1,
                    "dest_ptr": 1,
                    "dest_ptr_temp": 1,
                    "dst_byte_ptr": 1,
                    "dst_end_ptr": 1,
                    "end_ptr": 2,
                    "src_end_ptr": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_byte": 4,
                    "temp_char": 2,
                    "temp_data": 1,
                    "temp_dest_ptr": 1,
                    "temp_ptr": 2,
                    "temp_ptr2": 2,
                    "temp_src": 1,
                    "tmp_data": 1
                },
                "uVar5": {
                    "copy_count": 1,
                    "copy_size": 2,
                    "remaining": 2,
                    "remaining_bytes": 1,
                    "remaining_length": 2,
                    "remaining_size": 6,
                    "temp": 1,
                    "temp1": 1,
                    "temp_count": 1,
                    "temp_len": 1,
                    "temp_length": 3,
                    "temp_size": 8,
                    "tmp_size": 1,
                    "u_size": 1
                },
                "uVar7": {
                    "copy_size_mod4": 1,
                    "last_bytes": 1,
                    "mod_size": 1,
                    "rem_size": 1,
                    "remainder": 9,
                    "remainder_len": 1,
                    "remainder_size": 1,
                    "remaining_bytes": 3,
                    "remaining_length": 1,
                    "remaining_size": 4,
                    "remaining_size_2": 1,
                    "remaining_words": 1,
                    "src_byte_ptr": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_mod_length": 1,
                    "temp_size": 1,
                    "u_mod_size": 1
                },
                "uVar8": {
                    "alignment_pad": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "code": "\nvoid reverse_copy_memory_00082438(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp_byte;\n  uint remainder;\n  \n  if ((source < destination) && (temp_ptr = (undefined4 *)((int)source + size), destination < temp_ptr)) {\n    temp_byte = (undefined *)((int)destination + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_byte = temp_byte + -1;\n        *temp_byte = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)destination | (uint)source) & 3) == 0) {\n    temp_ptr = destination;\n    src_ptr = source;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)destination + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    source = source + index * 4;\n    destination = destination + index * 4;\n    temp_size = remainder;\n    temp_ptr = destination;\n    src_ptr = source;\n    if (3 < remainder) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      destination = (undefined4 *)((int)destination + index);\n      source = (undefined4 *)((int)source + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = destination;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)source;\n    source = (undefined4 *)((int)source + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)destination));\n  return;\n}\n\n",
            "current_name": "reverse_copy_memory_00082438",
            "entrypoint": "0x00082438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082438": "reverse_copy_memory_00082438",
                "iVar1": "index",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "temp_byte",
                "uVar5": "temp_size",
                "uVar7": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082504": {
            "additional_data": {
                "FUN_00082504": {
                    "copy_and_fill_buffer": 1,
                    "copy_data": 1,
                    "fill_array_with_byte": 1,
                    "fill_buffer": 1,
                    "fill_buffer_with_byte": 1,
                    "fill_memory": 2,
                    "fill_memory_with_byte": 6,
                    "fill_memory_with_pattern": 1,
                    "fill_with_byte": 1,
                    "memcpy_with_alignment_check": 1,
                    "memset": 6,
                    "memset_array": 1,
                    "memset_buffer": 1,
                    "memset_function": 1,
                    "memset_with_check": 1,
                    "memset_with_limit": 1,
                    "memset_with_repeat": 1,
                    "write_memory": 1
                },
                "LAB_00082580": {
                    "copy_remaining": 1,
                    "end_loop": 1,
                    "fill_remaining_bytes": 1
                },
                "bVar5": {
                    "done": 1,
                    "empty_buffer": 1,
                    "end_reached": 1,
                    "is_count_zero": 2,
                    "is_length_zero": 3,
                    "is_size_zero": 4,
                    "is_zero": 10,
                    "is_zero_count": 1,
                    "is_zero_length": 1,
                    "is_zero_size": 4,
                    "loop_condition": 1
                },
                "param_1": {
                    "array": 2,
                    "buffer": 5,
                    "dest": 10,
                    "destination": 11,
                    "memory": 1
                },
                "param_2": {
                    "byte": 5,
                    "byte_to_fill": 1,
                    "byte_to_fill_with": 1,
                    "byte_value": 1,
                    "pattern": 1,
                    "value": 20
                },
                "param_3": {
                    "count": 6,
                    "length": 9,
                    "num": 2,
                    "num_bytes": 1,
                    "num_elements": 1,
                    "size": 10
                },
                "puVar1": {
                    "current_pointer": 2,
                    "dest_ptr": 17,
                    "dest_temp": 1,
                    "destination_ptr": 1,
                    "dst_ptr": 2,
                    "p_buffer": 1,
                    "pointer": 1,
                    "ptr": 3,
                    "ptr1": 1
                },
                "puVar2": {
                    "dest_ptr2": 1,
                    "dest_ptr_temp": 1,
                    "dest_temp2": 1,
                    "next_dest_ptr": 12,
                    "next_destination_ptr": 1,
                    "next_dst_ptr": 1,
                    "next_pointer": 3,
                    "next_ptr": 5,
                    "p_next_buffer": 1,
                    "ptr2": 1,
                    "temp_ptr": 2
                },
                "uVar3": {
                    "aligned_value": 1,
                    "byte_pattern": 3,
                    "byte_value": 1,
                    "combined_value": 1,
                    "constant_value": 1,
                    "expanded_value": 1,
                    "fill_value": 6,
                    "masked_value": 1,
                    "packed_value": 1,
                    "pattern": 4,
                    "pattern32": 1,
                    "repeat_value": 1,
                    "value32": 1,
                    "value_32": 2,
                    "value_concat": 1,
                    "value_copy": 1,
                    "value_rep": 1,
                    "word": 1,
                    "word_value": 1
                },
                "uVar4": {
                    "count_32": 1,
                    "num_copy": 2,
                    "remaining": 3,
                    "remaining_bytes": 1,
                    "remaining_count": 4,
                    "remaining_elements": 1,
                    "remaining_length": 9,
                    "remaining_size": 8,
                    "temp_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000813a8",
                "FUN_00083b14"
            ],
            "code": "\nvoid fill_memory_with_byte_00082504(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 fill_value;\n  uint remaining_length;\n  bool is_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = destination;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)destination & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = destination;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_length = size;\n    dest_ptr = destination;\n    if (0xf < size) {\n      remaining_length = size - 0x10;\n      do {\n        *dest_ptr = fill_value;\n        dest_ptr[1] = fill_value;\n        dest_ptr[2] = fill_value;\n        dest_ptr[3] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_length & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remaining_length >> 4) + 1) * 4;\n      remaining_length = size;\n      dest_ptr = destination;\n      if (size < 4) goto end_loop;\n    }\n    do {\n      size = size - 4;\n      *destination = fill_value;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_length - 4 & 0xfffffffc) + 4);\n    size = remaining_length & 3;\n  }\nend_loop:\n  if (size != 0) {\n    dest_ptr = destination;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "current_name": "fill_memory_with_byte_00082504",
            "entrypoint": "0x00082504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082504": "fill_memory_with_byte_00082504",
                "LAB_00082580": "end_loop",
                "bVar5": "is_zero",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "fill_value",
                "uVar4": "remaining_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082598": {
            "called": [],
            "calling": [
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00082598",
            "entrypoint": "0x00082598",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008259c": {
            "called": [],
            "calling": [
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008259c",
            "entrypoint": "0x0008259c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000825a0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "new_rel_array": 2,
                    "rel_array": 1,
                    "reloc_table": 1,
                    "relocation_array": 3,
                    "relocation_table": 2
                },
                "FUN_000825a0": {
                    "assign_memory_blocks": 3,
                    "rearrange_and_assign_memory_blocks": 25,
                    "rearrange_memory_blocks": 3
                },
                "param_1": {
                    "input1": 2,
                    "input_param1": 1,
                    "input_parameter1": 1,
                    "memory_address": 2,
                    "memory_block1": 1,
                    "memory_offset": 1,
                    "new_memory": 1,
                    "new_param1": 7,
                    "offset": 11,
                    "old_memory_offset": 1,
                    "parameter1": 1,
                    "source": 1,
                    "source_param": 1
                },
                "param_2": {
                    "arg1": 2,
                    "data": 1,
                    "destination": 1,
                    "destination_param": 1,
                    "input2": 2,
                    "input_param2": 1,
                    "input_parameter2": 1,
                    "memory_block2": 1,
                    "new_memory_offset": 1,
                    "new_param2": 7,
                    "param": 4,
                    "param2": 8,
                    "parameter2": 1
                },
                "r_offset": {
                    "new_r_offset": 1
                }
            },
            "called": [
                "FUN_000825b0"
            ],
            "calling": [
                "FUN_00081622"
            ],
            "code": "\nvoid rearrange_and_assign_memory_blocks_000825a0(undefined4 offset,undefined4 param2)\n\n{\n  rearrange_and_assign_memory_blocks_000825a0_000825b0(relocation_array[140].new_r_offset,offset,param2);\n  return;\n}\n\n",
            "current_name": "rearrange_and_assign_memory_blocks_000825a0",
            "entrypoint": "0x000825a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000825a0": "rearrange_and_assign_memory_blocks_000825a0",
                "param_1": "offset",
                "param_2": "param2",
                "r_offset": "new_r_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825b0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2
                },
                "FUNC_00082598": {
                    "initialize": 1
                },
                "FUNC_0008259c": {
                    "cleanup": 1
                },
                "FUN_000825b0": {
                    "allocate_and_copy_memory": 1,
                    "allocate_and_update_memory": 1,
                    "allocate_memory_blocks": 1,
                    "rearrange_and_assign_memory": 5,
                    "rearrange_and_assign_memory_blocks": 5,
                    "rearrange_memory_blocks": 13
                },
                "LAB_0008267c": {
                    "error_label": 1
                },
                "calculate_and_update_offset_00083d9c": {
                    "calculate_and_update_offset": 1
                },
                "dVar1": {
                    "dword_var": 1,
                    "offset": 5,
                    "temp": 2,
                    "temp1": 7,
                    "temp4": 1,
                    "temp_1": 1,
                    "temp_dword_1": 1,
                    "temp_value": 1,
                    "temp_var1": 5,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var_1": 2,
                    "temp_variable_1": 1,
                    "var1": 1
                },
                "iVar4": {
                    "data1": 1,
                    "prev_block_offset": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 4,
                    "temp4": 3,
                    "temp_3": 1,
                    "temp_int_1": 1,
                    "temp_var": 2,
                    "temp_var1": 2,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var4": 2,
                    "temp_var_3": 2,
                    "temp_variable_3": 1,
                    "tmp1": 1,
                    "var1": 2,
                    "var4": 2
                },
                "iVar6": {
                    "data2": 1,
                    "next_block_offset": 1,
                    "temp2": 2,
                    "temp4": 3,
                    "temp5": 2,
                    "temp6": 3,
                    "temp_5": 1,
                    "temp_int_2": 1,
                    "temp_var2": 4,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_var6": 2,
                    "temp_var_5": 2,
                    "temp_variable_5": 1,
                    "tmp2": 1,
                    "var3": 2,
                    "var6": 2
                },
                "param_1": {
                    "buffer": 1,
                    "config_pointer": 1,
                    "data_array": 1,
                    "input": 1,
                    "input_array": 4,
                    "input_buffer": 1,
                    "input_memory": 1,
                    "input_pointer": 3,
                    "input_ptr": 1,
                    "memory": 1,
                    "memory_blocks": 1,
                    "memory_ptr": 1,
                    "param1": 4,
                    "param_1": 1,
                    "param_address": 1,
                    "param_array": 2,
                    "param_pointer": 2,
                    "param_ptr": 2,
                    "parameter_1": 1,
                    "ptr1": 1
                },
                "param_2": {
                    "existing_array": 2,
                    "existing_block": 1,
                    "existing_blocks": 1,
                    "existing_memory": 3,
                    "input_array": 3,
                    "memory_array": 1,
                    "memory_block_pointer": 1,
                    "memory_blocks": 4,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "original_memory_block": 1,
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_pointer": 1,
                    "param2": 4,
                    "param_2": 1,
                    "parameter_2": 1,
                    "ptr": 1,
                    "ptr2": 1,
                    "source_array": 1
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 2,
                    "block_count": 1,
                    "block_length": 1,
                    "block_size": 3,
                    "input_size": 1,
                    "memory_block_size": 1,
                    "memory_size": 1,
                    "new_block_size": 1,
                    "new_memory_size": 1,
                    "num_elements": 1,
                    "param3": 4,
                    "param_3": 1,
                    "parameter_3": 1,
                    "size": 10,
                    "source_array_length": 1
                },
                "piVar10": {
                    "aligned_block": 1,
                    "aligned_buffer": 1,
                    "allocated_memory": 2,
                    "new_array": 1,
                    "new_array_pointer": 1,
                    "new_memory_blocks": 2,
                    "new_memory_pointer": 1,
                    "new_memory_ptr": 1,
                    "new_output_pointer": 1,
                    "new_result": 2,
                    "reallocated_blocks": 1,
                    "temp10": 3,
                    "temp6": 1,
                    "temp9": 2,
                    "temp_9": 1,
                    "temp_memory_ptr_2": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr2": 1,
                    "temp_var10": 1,
                    "temp_var4": 1,
                    "temp_var_9": 2,
                    "var10": 2,
                    "var7": 1
                },
                "piVar2": {
                    "allocated_memory_ptr": 1,
                    "new_block": 1,
                    "new_blocks": 1,
                    "new_memory": 1,
                    "new_memory_block": 1,
                    "new_memory_block_pointer": 1,
                    "new_memory_blocks": 1,
                    "new_output_buffer": 1,
                    "new_ptr": 1,
                    "output_pointer_moved": 1,
                    "result": 8,
                    "result_array": 3,
                    "result_array_pointer": 1,
                    "result_pointer": 1,
                    "result_ptr": 3,
                    "temp2": 3,
                    "updated_array": 1,
                    "var2": 1
                },
                "piVar7": {
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp7": 3,
                    "temp_6": 1,
                    "temp_array": 1,
                    "temp_block": 1,
                    "temp_memory_ptr_1": 1,
                    "temp_output_buffer": 1,
                    "temp_pointer": 2,
                    "temp_pointer_1": 1,
                    "temp_ptr": 2,
                    "temp_ptr1": 1,
                    "temp_result": 2,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var7": 2,
                    "temp_var_6": 2,
                    "tmp3": 1,
                    "var4": 2,
                    "var7": 2
                },
                "reverse_copy_memory_00082438": {
                    "reverse_copy_memory": 1
                },
                "uVar3": {
                    "allocated_size": 1,
                    "block_size": 2,
                    "new_size": 1,
                    "remaining_size": 1,
                    "rounded_size": 1,
                    "size": 1,
                    "size_value": 1,
                    "temp1": 1,
                    "temp2": 5,
                    "temp3": 3,
                    "temp_2": 1,
                    "temp_size": 1,
                    "temp_uint_1": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "temp_var5": 1,
                    "temp_var_2": 2,
                    "temp_variable_2": 1,
                    "var3": 2
                },
                "uVar5": {
                    "array_offset": 1,
                    "block_info": 2,
                    "block_length_with_flag": 1,
                    "block_size": 1,
                    "last_block_size": 1,
                    "old_block_size": 1,
                    "old_size": 1,
                    "original_block_size": 1,
                    "param2_size": 1,
                    "prev_block_size": 1,
                    "prev_size": 1,
                    "prev_size_value": 1,
                    "size_and_flags": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_4": 1,
                    "temp_uint_2": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var_4": 2,
                    "temp_variable_4": 1,
                    "var2": 2,
                    "var5": 2
                },
                "uVar8": {
                    "actual_size": 1,
                    "adjusted_size": 3,
                    "aligned_block_start": 1,
                    "block_size": 2,
                    "combined_size": 1,
                    "existing_block_size": 1,
                    "new_block_size": 3,
                    "original_size": 1,
                    "output_size": 1,
                    "remaining_size": 1,
                    "temp7": 2,
                    "temp8": 3,
                    "temp_7": 1,
                    "temp_uint_3": 1,
                    "temp_var8": 1,
                    "temp_var_7": 2,
                    "temp_variable_6": 1,
                    "total_size": 2,
                    "var5": 1,
                    "var8": 2
                },
                "uVar9": {
                    "adjusted_block_size": 2,
                    "aligned_block_size": 3,
                    "aligned_size": 8,
                    "minimum_size": 1,
                    "rounded_size": 3,
                    "temp8": 2,
                    "temp9": 3,
                    "temp_8": 1,
                    "temp_uint_4": 1,
                    "temp_var9": 1,
                    "temp_var_8": 2,
                    "temp_variable_7": 1,
                    "var6": 1,
                    "var9": 2
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082438",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_000825a0",
                "FUN_00083f34"
            ],
            "code": "\nint * rearrange_and_assign_memory_blocks_000825b0(undefined4 *param1,int *memory_blocks,uint size)\n\n{\n  dword temp1;\n  int *result;\n  uint temp2;\n  int temp3;\n  uint temp5;\n  int temp_var2;\n  int *temp7;\n  uint adjusted_size;\n  uint aligned_size;\n  int *temp10;\n  \n  if (memory_blocks == (int *)0x0) {\n    result = (int *)rearrange_and_assign_memory_blocks_000825b0_00081e14(param1,size);\n    return result;\n  }\n  FUNC_00082598();\n  temp5 = memory_blocks[-1];\n  adjusted_size = temp5 & 0xfffffffc;\n  result = memory_blocks + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto error_label;\n  }\n  if (aligned_size < size) {\nerror_label:\n    *param1 = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)adjusted_size < (int)aligned_size) {\n    temp1 = (int)result + adjusted_size;\n    if (rel_array[141].r_info == temp1) {\n      temp2 = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n      temp1 = rel_array[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + adjusted_size)) {\n        rel_array[141].r_info = (int)result + aligned_size;\n        *(uint *)(rel_array[141].r_info + 4) = (temp2 + adjusted_size) - aligned_size | 1;\n        memory_blocks[-1] = aligned_size | memory_blocks[-1] & 1U;\n        FUNC_0008259c(param1);\n        return memory_blocks;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + adjusted_size)) {\n        temp_var2 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp3;\n        adjusted_size = temp2 + adjusted_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp5 << 0x1f)) {\n      temp10 = (int *)((int)result - memory_blocks[-2]);\n      temp5 = (temp10[1] & 0xfffffffcU) + adjusted_size;\n      if (temp1 != 0) {\n        if (temp1 == rel_array[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + temp5)) {\n            result = temp10 + 2;\n            temp3 = *result;\n            temp_var2 = temp10[3];\n            adjusted_size = adjusted_size - 4;\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            if (adjusted_size < 0x25) {\n              temp7 = result;\n              if (0x13 < adjusted_size) {\n                temp10[2] = *memory_blocks;\n                temp10[3] = memory_blocks[1];\n                if (adjusted_size < 0x1c) {\n                  memory_blocks = memory_blocks + 2;\n                  temp7 = temp10 + 4;\n                }\n                else {\n                  temp10[4] = memory_blocks[2];\n                  temp10[5] = memory_blocks[3];\n                  if (adjusted_size == 0x24) {\n                    temp10[6] = memory_blocks[4];\n                    temp7 = memory_blocks + 5;\n                    memory_blocks = memory_blocks + 6;\n                    temp10[7] = *temp7;\n                    temp7 = temp10 + 8;\n                  }\n                  else {\n                    memory_blocks = memory_blocks + 4;\n                    temp7 = temp10 + 6;\n                  }\n                }\n              }\n              *temp7 = *memory_blocks;\n              temp7[1] = memory_blocks[1];\n              temp7[2] = memory_blocks[2];\n            }\n            else {\n              reverse_copy_memory(result,memory_blocks);\n            }\n            rel_array[141].r_info = (int)temp10 + aligned_size;\n            *(uint *)(rel_array[141].r_info + 4) = (temp2 + temp5) - aligned_size | 1;\n            temp10[1] = aligned_size | temp10[1] & 1U;\n            FUNC_0008259c(param1);\n            return result;\n          }\n        }\n        else {\n          temp2 = temp2 + temp5;\n          if ((int)aligned_size <= (int)temp2) {\n            temp_var2 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            temp7 = temp10 + 2;\n            temp3 = *temp7;\n            temp_var2 = temp10[3];\n            temp5 = adjusted_size - 4;\n            *(int *)(temp3 + 0xc) = temp_var2;\n            *(int *)(temp_var2 + 8) = temp3;\n            adjusted_size = temp2;\n            if (temp5 < 0x25) {\n              result = temp7;\n              if (0x13 < temp5) {\n                temp10[2] = *memory_blocks;\n                temp10[3] = memory_blocks[1];\n                if (temp5 < 0x1c) {\n                  memory_blocks = memory_blocks + 2;\n                  result = temp10 + 4;\n                }\n                else {\n                  temp10[4] = memory_blocks[2];\n                  temp10[5] = memory_blocks[3];\n                  if (temp5 == 0x24) {\n                    temp10[6] = memory_blocks[4];\n                    result = memory_blocks + 5;\n                    memory_blocks = memory_blocks + 6;\n                    temp10[7] = *result;\n                    result = temp10 + 8;\n                  }\n                  else {\n                    memory_blocks = memory_blocks + 4;\n                    result = temp10 + 6;\n                  }\n                }\n              }\n              *result = *memory_blocks;\n              result[1] = memory_blocks[1];\n              result[2] = memory_blocks[2];\n              temp5 = temp10[1];\n              result = temp10;\n              memory_blocks = temp7;\n            }\n            else {\n              reverse_copy_memory(temp7,memory_blocks);\n              temp5 = temp10[1];\n              result = temp10;\n              memory_blocks = temp7;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)temp5) {\n        temp7 = temp10 + 2;\n        temp3 = *temp7;\n        temp_var2 = temp10[3];\n        temp2 = adjusted_size - 4;\n        *(int *)(temp3 + 0xc) = temp_var2;\n        *(int *)(temp_var2 + 8) = temp3;\n        adjusted_size = temp5;\n        if (temp2 < 0x25) {\n          result = temp7;\n          if (0x13 < temp2) {\n            temp10[2] = *memory_blocks;\n            temp10[3] = memory_blocks[1];\n            if (temp2 < 0x1c) {\n              memory_blocks = memory_blocks + 2;\n              result = temp10 + 4;\n            }\n            else {\n              temp10[4] = memory_blocks[2];\n              temp10[5] = memory_blocks[3];\n              if (temp2 == 0x24) {\n                temp10[6] = memory_blocks[4];\n                result = memory_blocks + 5;\n                memory_blocks = memory_blocks + 6;\n                temp10[7] = *result;\n                result = temp10 + 8;\n              }\n              else {\n                memory_blocks = memory_blocks + 4;\n                result = temp10 + 6;\n              }\n            }\n          }\n          *result = *memory_blocks;\n          result[1] = memory_blocks[1];\n          result[2] = memory_blocks[2];\n          temp5 = temp10[1];\n          result = temp10;\n          memory_blocks = temp7;\n        }\n        else {\n          reverse_copy_memory(temp7,memory_blocks);\n          temp5 = temp10[1];\n          result = temp10;\n          memory_blocks = temp7;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp10 = (int *)rearrange_and_assign_memory_blocks_000825b0_00081e14(param1,size);\n    if (temp10 == (int *)0x0) goto LAB_000826a4;\n    temp5 = memory_blocks[-1];\n    if (temp10 + -2 != (int *)((temp5 & 0xfffffffe) + (int)result)) {\n      adjusted_size = adjusted_size - 4;\n      if (adjusted_size < 0x25) {\n        result = memory_blocks;\n        temp7 = temp10;\n        if (0x13 < adjusted_size) {\n          *temp10 = *memory_blocks;\n          temp10[1] = memory_blocks[1];\n          if (adjusted_size < 0x1c) {\n            result = memory_blocks + 2;\n            temp7 = temp10 + 2;\n          }\n          else {\n            temp10[2] = memory_blocks[2];\n            temp10[3] = memory_blocks[3];\n            if (adjusted_size == 0x24) {\n              temp10[4] = memory_blocks[4];\n              temp10[5] = memory_blocks[5];\n              result = memory_blocks + 6;\n              temp7 = temp10 + 6;\n            }\n            else {\n              result = memory_blocks + 4;\n              temp7 = temp10 + 4;\n            }\n          }\n        }\n        *temp7 = *result;\n        temp7[1] = result[1];\n        temp7[2] = result[2];\n      }\n      else {\n        reverse_copy_memory(temp10,memory_blocks);\n      }\n      calculate_and_update_offset(param1,memory_blocks);\n      goto LAB_000826a4;\n    }\n    adjusted_size = adjusted_size + (temp10[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = adjusted_size - aligned_size;\n  temp10 = memory_blocks;\n  if (temp2 < 0x10) {\n    result[1] = temp5 & 1 | adjusted_size;\n    *(uint *)((int)result + adjusted_size + 4) = *(uint *)((int)result + adjusted_size + 4) | 1;\n  }\n  else {\n    result[1] = temp5 & 1 | aligned_size;\n    *(uint *)((int)result + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)result + temp2 + aligned_size + 4) = *(uint *)((int)result + temp2 + aligned_size + 4) | 1;\n    calculate_and_update_offset(param1,(int)result + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(param1);\n  return temp10;\n}\n\n",
            "current_name": "rearrange_and_assign_memory_blocks_000825b0",
            "entrypoint": "0x000825b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000825b0": "rearrange_and_assign_memory_blocks_000825b0",
                "LAB_0008267c": "error_label",
                "calculate_and_update_offset_00083d9c": "calculate_and_update_offset",
                "dVar1": "temp1",
                "iVar4": "temp3",
                "iVar6": "temp_var2",
                "param_1": "param1",
                "param_2": "memory_blocks",
                "param_3": "size",
                "piVar10": "temp10",
                "piVar2": "result",
                "piVar7": "temp7",
                "reverse_copy_memory_00082438": "reverse_copy_memory",
                "uVar3": "temp2",
                "uVar5": "temp5",
                "uVar8": "adjusted_size",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082970": {
            "additional_data": {
                "DAT_200711bc": {
                    "calculated_sum": 1,
                    "stored_sum": 1
                },
                "FUN_00082970": {
                    "calculate_and_assign_sum": 9,
                    "calculate_and_check_sum": 2,
                    "calculate_and_set_sum": 3,
                    "calculate_and_store_result": 1,
                    "calculate_and_store_sum": 4,
                    "calculate_and_update_sum": 5,
                    "calculate_sum_and_assign_to_param": 1,
                    "copy_and_update_sum": 1,
                    "update_param": 1,
                    "update_param_if_sum_invalid": 1,
                    "update_param_if_sum_is_negative": 1,
                    "update_param_if_sum_negative": 1,
                    "update_param_if_valid": 1
                },
                "calculate_sum_0008118c": {
                    "calculate_sum": 2
                },
                "iVar1": {
                    "sum": 23,
                    "sum_result": 8
                },
                "param_1": {
                    "assigned_value": 1,
                    "output": 1,
                    "output_param": 1,
                    "result": 19,
                    "result_param": 2,
                    "result_pointer": 2,
                    "result_ptr": 5
                },
                "param_2": {
                    "input": 5,
                    "input_number": 1,
                    "input_param": 1,
                    "input_value": 23,
                    "value": 1
                }
            },
            "called": [
                "FUN_0008118c"
            ],
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "code": "\nvoid calculate_sum_and_assign_to_param_00082970(int *result,undefined4 input_value)\n\n{\n  int sum;\n  \n  DAT_200711bc = 0;\n  sum = calculate_sum(input_value);\n  if ((sum == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_sum_and_assign_to_param_00082970",
            "entrypoint": "0x00082970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082970": "calculate_sum_and_assign_to_param_00082970",
                "calculate_sum_0008118c": "calculate_sum",
                "iVar1": "sum",
                "param_1": "result",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082994": {
            "additional_data": {
                "DAT_80808080": {
                    "mask_80808080": 1
                },
                "DAT_fefefeff": {
                    "mask_fefefeff": 1
                },
                "FUN_00082994": {
                    "copy_and_terminate_string": 2,
                    "copy_string": 20,
                    "copy_string_with_alignment": 2,
                    "copy_string_with_alignment_check": 3,
                    "copy_string_with_length_check": 1,
                    "copy_string_with_offset": 1,
                    "copy_string_with_terminator": 1,
                    "string_copy": 1
                },
                "LAB_000829f8": {
                    "check_alignment": 1,
                    "end_loop": 1,
                    "label": 1
                },
                "bVar8": {
                    "is_aligned": 2,
                    "is_alignment_needed": 1,
                    "is_byte_zero": 1,
                    "is_char_zero": 1,
                    "is_first_byte_zero": 1,
                    "is_short_zero": 4,
                    "is_zero": 11,
                    "is_zero_byte": 8,
                    "zero_byte_check": 1
                },
                "cVar1": {
                    "ch": 1,
                    "current_char": 28,
                    "current_character": 1
                },
                "param_1": {
                    "dest": 8,
                    "dest_buffer": 1,
                    "dest_string": 1,
                    "destination": 17,
                    "dst": 2,
                    "dst_string": 1,
                    "src": 1
                },
                "param_2": {
                    "dest": 1,
                    "source": 17,
                    "src": 10,
                    "src_buffer": 1,
                    "src_string": 2
                },
                "puVar3": {
                    "current_source": 1,
                    "current_uint_pointer": 1,
                    "current_word_pointer": 1,
                    "next_int_pointer": 1,
                    "next_int_ptr": 1,
                    "next_pointer": 4,
                    "next_ptr": 4,
                    "next_source": 5,
                    "next_src": 2,
                    "next_src_string": 2,
                    "next_uint_pointer": 1,
                    "next_word": 1,
                    "source_pointer": 1,
                    "source_ptr": 1,
                    "src_ptr": 2,
                    "temp_pointer": 1,
                    "temp_ptr": 2
                },
                "puVar4": {
                    "current_pointer": 4,
                    "current_ptr": 2,
                    "current_source_plus_one": 1,
                    "current_uint_pointer": 1,
                    "current_uint_pointer2": 1,
                    "next_byte": 1,
                    "next_char_ptr": 1,
                    "next_dest": 2,
                    "next_dest_string": 1,
                    "next_destination": 1,
                    "next_dst_string": 1,
                    "next_pointer2": 1,
                    "next_pointer_plus1": 1,
                    "next_ptr_1": 1,
                    "next_ptr_aligned": 1,
                    "next_source_aligned": 3,
                    "next_source_byte": 1,
                    "source_pointer2": 1,
                    "source_ptr": 1,
                    "src_ptr": 2,
                    "temp_pointer2": 1,
                    "temp_ptr2": 1,
                    "tmp_ptr": 1
                },
                "puVar7": {
                    "current_dest": 1,
                    "current_destination": 2,
                    "dest_pointer": 3,
                    "dest_ptr": 5,
                    "destination_pointer": 5,
                    "destination_ptr": 2,
                    "destination_word": 1,
                    "dst_aligned": 1,
                    "dst_ptr": 1,
                    "next_destination": 4,
                    "next_dst_string": 1,
                    "next_int_pointer_plus1": 1,
                    "next_next_dest_string": 1,
                    "next_uint_ptr": 1,
                    "next_word": 1,
                    "result_ptr": 1
                },
                "uVar2": {
                    "current_short": 28,
                    "current_ushort": 1,
                    "short_val": 1
                },
                "uVar5": {
                    "current_data": 1,
                    "current_dword": 1,
                    "current_int": 3,
                    "current_source_value": 1,
                    "current_source_word": 1,
                    "current_uint": 7,
                    "current_value": 5,
                    "current_word": 10,
                    "src_value": 1,
                    "val": 1
                },
                "uVar6": {
                    "current_byte": 2,
                    "current_char": 1,
                    "current_source": 1,
                    "current_uint2": 1,
                    "current_value": 1,
                    "next_data": 1,
                    "next_uint": 1,
                    "next_value": 1,
                    "rotated_word": 1,
                    "shifted_int": 1,
                    "shifted_value": 1,
                    "shifted_word": 1,
                    "temp": 2,
                    "temp_dword": 1,
                    "temp_int": 2,
                    "temp_uint": 5,
                    "temp_value": 2,
                    "temp_word": 5,
                    "tmp_val": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid copy_string_with_alignment_check_00082994(uint *destination,uint *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_source;\n  uint *current_pointer;\n  uint current_word;\n  uint temp_uint;\n  uint *destination_pointer;\n  bool is_zero;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    current_pointer = source;\n    if (((uint)source & 1) != 0) {\n      current_pointer = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = current_pointer;\n    if (((uint)current_pointer & 2) != 0) {\n      source = (uint *)((int)current_pointer + 2);\n      current_short = *(ushort *)current_pointer;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *source;\n  current_pointer = source + 1;\n  destination_pointer = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto label;\n    destination_pointer = destination + 1;\n    *destination = current_word;\n    current_pointer = source + 2;\n    current_word = source[1];\n  }\n  while( true ) {\n    next_source = current_pointer + 1;\n    temp_uint = *current_pointer;\n    destination = destination_pointer;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    destination = destination_pointer + 1;\n    *destination_pointer = current_word;\n    current_word = temp_uint;\n    if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n    current_pointer = current_pointer + 2;\n    current_word = *next_source;\n    destination_pointer = destination_pointer + 2;\n    *destination = temp_uint;\n  }\nlabel:\n  do {\n    *(char *)destination = (char)current_word;\n    temp_uint = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (temp_uint != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_with_alignment_check_00082994",
            "entrypoint": "0x00082994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "LAB_000829f8": "label",
                "bVar8": "is_zero",
                "cVar1": "current_char",
                "param_1": "destination",
                "param_2": "source",
                "puVar3": "next_source",
                "puVar4": "current_pointer",
                "puVar7": "destination_pointer",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "temp_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082a50": {
            "additional_data": {
                "FUN_00082a50": {
                    "calculate_num_zeros": 1,
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 19,
                    "count_non_null_bytes": 1,
                    "count_non_zero_bytes": 1,
                    "count_set_bits": 2,
                    "count_trailing_zeroes": 1,
                    "count_trailing_zeros": 1,
                    "find_first_nonzero_byte_offset": 1,
                    "find_first_zero_byte_aligned": 1,
                    "find_last_non_zero_byte_index": 1,
                    "get_non_zero_byte_count": 1
                },
                "bVar4": {
                    "all_zeros": 1,
                    "is_byte_zero": 1,
                    "is_end_zero": 1,
                    "is_value_zero": 1,
                    "is_zero": 25,
                    "is_zero_byte": 2
                },
                "iVar1": {
                    "bit_count": 1,
                    "byte_count": 2,
                    "count": 2,
                    "index": 1,
                    "leading_zeros": 17,
                    "leading_zeros_count": 3,
                    "offset": 3,
                    "shift_amount": 1,
                    "trailing_zeroes": 1
                },
                "param_1": {
                    "input": 16,
                    "input_number": 2,
                    "input_value": 3,
                    "num": 6,
                    "value": 4
                },
                "puVar2": {
                    "aligned_address": 1,
                    "aligned_ptr": 1,
                    "data": 2,
                    "data_pointer": 1,
                    "input_ptr": 1,
                    "p": 1,
                    "p_num": 2,
                    "p_value": 1,
                    "p_word": 1,
                    "ptr": 13,
                    "ptr_to_input": 1,
                    "ptr_to_input_number": 1,
                    "ptr_to_input_value": 1,
                    "ptr_u_var": 1,
                    "ptr_value": 1,
                    "word_ptr": 2
                },
                "uVar3": {
                    "current_number": 1,
                    "current_value": 4,
                    "current_word": 1,
                    "mask": 2,
                    "temp_value": 1,
                    "value": 16,
                    "word": 6
                },
                "uVar5": {
                    "mask": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "code": "\nint count_leading_zeros_00082a50(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_00082a50",
            "entrypoint": "0x00082a50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "additional_data": {
                "FUN_00082ac0": {
                    "copy_and_process_data": 1,
                    "process_and_copy_data": 1,
                    "process_and_validate_data": 3,
                    "process_data": 25,
                    "process_validated_data": 1
                },
                "LAB_00082b00": {
                    "error": 1
                },
                "iVar2": {
                    "result": 28,
                    "return_value": 3
                },
                "param_1": {
                    "arg1": 8,
                    "config": 1,
                    "config_param": 1,
                    "context": 1,
                    "data": 2,
                    "data_address": 1,
                    "data_handler": 1,
                    "data_param": 1,
                    "data_struct": 1,
                    "input": 4,
                    "input_param": 1,
                    "input_val": 1,
                    "input_var": 1,
                    "input_var_1": 1,
                    "param": 1,
                    "param1": 5
                },
                "param_2": {
                    "arg2": 8,
                    "array_length": 1,
                    "data_length": 1,
                    "data_size": 3,
                    "input_var_2": 1,
                    "length": 3,
                    "num_param": 1,
                    "offset": 1,
                    "param2": 5,
                    "param_size": 1,
                    "size": 6
                },
                "param_3": {
                    "arg3": 8,
                    "data": 4,
                    "data_arr": 1,
                    "data_array": 5,
                    "data_buffer": 2,
                    "data_ptr": 3,
                    "data_structure": 1,
                    "input_var_3": 1,
                    "param3": 5,
                    "pointers": 1
                },
                "piVar1": {
                    "current_array": 1,
                    "current_data": 10,
                    "current_data_ptr": 4,
                    "current_pointer": 3,
                    "current_pointer1": 1,
                    "current_ptr": 3,
                    "data_pointer": 4,
                    "data_ptr": 2,
                    "pointer1": 2,
                    "ptr_to_data_arr": 1
                },
                "piVar3": {
                    "array_ptr": 1,
                    "chunk_ptr": 1,
                    "current_data": 1,
                    "current_offset": 1,
                    "current_pointer": 1,
                    "current_pointer2": 1,
                    "data_pointer": 1,
                    "list_pointer": 1,
                    "param3_ptr": 1,
                    "pointer": 1,
                    "pointer2": 2,
                    "ptr_to_data_arr2": 1,
                    "remaining_data": 10,
                    "remaining_data_ptr": 2,
                    "remaining_pointer": 1,
                    "remaining_ptr": 1,
                    "sub_data_ptr": 1,
                    "temp_pointer": 2,
                    "temp_ptr": 1
                },
                "puVar5": {
                    "current_data": 3,
                    "current_data_ptr": 1,
                    "current_data_value_ptr": 1,
                    "current_element": 3,
                    "current_ptr": 2,
                    "current_value": 2,
                    "current_value_ptr": 1,
                    "data_address": 1,
                    "data_pointer": 3,
                    "data_ptr": 4,
                    "data_ptr_iter": 1,
                    "data_start_pointer": 1,
                    "pointer3": 1,
                    "processed_data": 1,
                    "ptr": 4,
                    "ptr_data": 1,
                    "ptr_to_data": 1
                },
                "uVar4": {
                    "count1": 1,
                    "counter": 19,
                    "index": 4,
                    "iteration": 1,
                    "iteration_count": 4,
                    "loop_counter": 2
                },
                "uVar6": {
                    "chunk_size": 1,
                    "current_data_size": 2,
                    "current_data_value": 1,
                    "current_value": 1,
                    "current_value_shifted": 1,
                    "data": 1,
                    "data1": 1,
                    "data_length": 2,
                    "data_offset": 1,
                    "data_size": 7,
                    "data_value": 1,
                    "elem_size": 1,
                    "element_size": 2,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "value": 1,
                    "value1": 2,
                    "var2": 1,
                    "var6": 1
                },
                "uVar7": {
                    "data_size": 1,
                    "divided_data_value": 1,
                    "element_count": 1,
                    "loop_count": 1,
                    "loop_counter": 3,
                    "loop_index": 1,
                    "num_chunks": 1,
                    "num_elements": 1,
                    "num_elems": 1,
                    "num_iterations": 1,
                    "processed_size": 1,
                    "shifted": 1,
                    "shifted_data": 2,
                    "shifted_data1": 1,
                    "shifted_data_size": 2,
                    "shifted_data_value": 1,
                    "shifted_size": 1,
                    "shifted_value": 4,
                    "shifted_var": 2,
                    "temp_var2": 1,
                    "value2": 1,
                    "var3": 1,
                    "var7": 1
                }
            },
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint process_and_validate_data_00082ac0(undefined4 arg1,int arg2,int **arg3)\n\n{\n  int *current_data;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *data_ptr;\n  uint data_size;\n  uint shifted_value;\n  \n  if (-1 < *(int *)(arg2 + 100) << 0x12) {\n    result = process_and_copy_data_00083f34();\n    arg3[2] = (int *)0x0;\n    arg3[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = arg3[2];\n  current_data = *arg3;\n  while (remaining_data != (int *)0x0) {\n    data_size = current_data[1];\n    shifted_value = data_size >> 2;\n    if (shifted_value != 0) {\n      data_ptr = (undefined4 *)(*current_data + -4);\n      counter = 0;\n      do {\n        data_ptr = data_ptr + 1;\n        result = process_and_validate_data_00082ac0_00083c40(arg1,*data_ptr,arg2);\n        counter = counter + 1;\n        if (result == -1) goto error;\n      } while (shifted_value != counter);\n      remaining_data = arg3[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (data_size & 0xfffffffc));\n    arg3[2] = remaining_data;\n    current_data = current_data + 2;\n  }\n  result = 0;\nerror:\n  arg3[2] = (int *)0x0;\n  arg3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "process_and_validate_data_00082ac0",
            "entrypoint": "0x00082ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082ac0": "process_and_validate_data_00082ac0",
                "LAB_00082b00": "error",
                "iVar2": "result",
                "param_1": "arg1",
                "param_2": "arg2",
                "param_3": "arg3",
                "piVar1": "current_data",
                "piVar3": "remaining_data",
                "puVar5": "data_ptr",
                "uVar4": "counter",
                "uVar6": "data_size",
                "uVar7": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082b38": {
            "called": [
                "FUN_0008378c",
                "FUN_00084750",
                "FUN_00084384",
                "FUN_00082ac0",
                "FUN_00083808",
                "FUN_00082a50",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_0008378c"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint FUNC_00082b38(int param_1,int param_2,int *******param_3,int **param_4)\n\n{\n  bool bVar1;\n  bool bVar2;\n  bool bVar3;\n  char cVar4;\n  bool bVar5;\n  int ********ppppppppiVar6;\n  int *piVar7;\n  int iVar8;\n  char cVar9;\n  int *******pppppppiVar10;\n  uint uVar11;\n  int **ppiVar12;\n  uint uVar13;\n  uint uVar14;\n  int iVar15;\n  int ********ppppppppiVar16;\n  int iVar17;\n  int *******pppppppiVar18;\n  int *piVar19;\n  int *******pppppppiVar20;\n  uint uVar21;\n  int *piVar22;\n  int *******pppppppiVar23;\n  undefined4 uVar24;\n  int ********ppppppppiVar25;\n  bool bVar26;\n  longlong lVar27;\n  int *******local_dc;\n  int *******local_d4;\n  int **local_c8;\n  int local_c4;\n  char *local_c0;\n  char local_a1;\n  undefined local_a0;\n  undefined local_9f;\n  int ********local_9c;\n  int local_98;\n  int *******local_94;\n  undefined local_90;\n  char cStack_6a;\n  undefined local_69;\n  undefined local_68 [4];\n  int *******local_64 [16];\n  \n  if ((param_1 != 0) && (*(int *)(param_1 + 0x38) == 0)) {\n    initialize_data_structures_00083b14();\n  }\n  uVar13 = (uint)*(ushort *)(param_2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(param_2 + 0xc) << 0x12)) {\n    uVar13 = uVar13 | 0x2000;\n    *(short *)(param_2 + 0xc) = (short)uVar13;\n    *(uint *)(param_2 + 100) = *(uint *)(param_2 + 100) & 0xffffdfff;\n  }\n  if (((int)(uVar13 << 0x1c) < 0) && (*(int *)(param_2 + 0x10) != 0)) {\n    if ((uVar13 & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    iVar8 = process_data_00083808(param_1,param_2);\n    if (iVar8 != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(param_2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(param_2 + 0xe)) {\n    iVar8 = decode_and_process_data_0008378c(param_1,param_2,param_3,param_4);\n    return iVar8;\n  }\nLAB_00082b8a:\n  local_c0 = (char *)0x0;\n  local_94 = (int *******)0x0;\n  local_98 = 0;\n  local_c4 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  local_c8 = param_4;\n  local_9c = (int ********)local_68;\nLAB_00082b9e:\n  pppppppiVar10 = param_3;\n  if ((*(char *)param_3 != '\\0') && (*(char *)param_3 != '%')) {\n    do {\n      pppppppiVar10 = (int *******)((int)pppppppiVar10 + 1);\n      if (*(char *)pppppppiVar10 == '\\0') break;\n    } while (*(char *)pppppppiVar10 != '%');\n    pppppppiVar20 = (int *******)((int)pppppppiVar10 - (int)param_3);\n    if (pppppppiVar20 != (int *******)0x0) {\n      local_98 = local_98 + 1;\n      local_94 = (int *******)((int)local_94 + (int)pppppppiVar20);\n      *ppppppppiVar6 = param_3;\n      ppppppppiVar6[1] = pppppppiVar20;\n      if (local_98 < 8) {\n        ppppppppiVar6 = ppppppppiVar6 + 2;\n      }\n      else {\n        if (local_94 == (int *******)0x0) {\n          local_c4 = local_c4 + (int)pppppppiVar20;\n          local_98 = 0;\n          ppppppppiVar6 = (int ********)local_68;\n          goto LAB_00082bee;\n        }\n        iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n        ppppppppiVar6 = (int ********)local_68;\n        if (iVar8 != 0) goto LAB_000833de;\n      }\n      local_c4 = local_c4 + (int)pppppppiVar20;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pppppppiVar10 != '\\0') {\n    local_a1 = '\\0';\n    uVar14 = (uint)*(byte *)((int)pppppppiVar10 + 1);\n    uVar13 = 0;\n    bVar5 = false;\n    bVar2 = false;\n    bVar1 = false;\n    bVar3 = false;\n    bVar26 = false;\n    pppppppiVar20 = (int *******)0x0;\n    local_d4 = (int *******)0xffffffff;\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\nLAB_00082c12:\n    param_3 = (int *******)((int)param_3 + 1);\nLAB_00082c16:\n    switch(uVar14) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (uVar14 != 0) {\n        local_dc = (int *******)0x1;\n        local_d4 = (int *******)0x1;\n        ppppppppiVar25 = (int ********)&local_90;\n        local_90 = (char)uVar14;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      bVar3 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pppppppiVar20 = (int *******)*local_c8;\n      local_c8 = local_c8 + 1;\n      if ((int)pppppppiVar20 < 0) {\n        pppppppiVar20 = (int *******)-(int)pppppppiVar20;\n        goto switchD_00082c20_caseD_2d;\n      }\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2b:\n      uVar14 = (uint)*(byte *)param_3;\n      local_a1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      uVar13 = uVar13 | 4;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x2e:\n      uVar14 = (uint)*(byte *)param_3;\n      pppppppiVar10 = (int *******)((int)param_3 + 1);\n      if (uVar14 == 0x2a) {\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        local_d4 = (int *******)*local_c8;\n        local_c8 = local_c8 + 1;\n        param_3 = pppppppiVar10;\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      uVar11 = uVar14 - 0x30;\n      if (uVar11 < 10) {\n        uVar21 = 0;\n        do {\n          param_3 = (int *******)((int)pppppppiVar10 + 1);\n          uVar14 = (uint)*(byte *)pppppppiVar10;\n          uVar21 = uVar11 + uVar21 * 10;\n          uVar11 = uVar14 - 0x30;\n          pppppppiVar10 = param_3;\n        } while (uVar11 < 10);\n        local_d4 = (int *******)(uVar21 | (int)uVar21 >> 0x1f);\n      }\n      else {\n        local_d4 = (int *******)0x0;\n        param_3 = pppppppiVar10;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      uVar13 = uVar13 | 0x80;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      bVar2 = true;\n      if (bVar1 == false) goto LAB_00083028;\nLAB_00082e98:\n      local_c8 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      piVar19 = *local_c8;\n      piVar22 = local_c8[1];\n      local_c8 = local_c8 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082d42;\nLAB_00082f2a:\n      iVar8 = (uint)bVar2 << 4;\n      iVar15 = (uint)bVar1 << 5;\n      if ((bVar2 == 0) && (iVar15 = (uint)bVar26 << 6, bVar26 != 0)) {\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        iVar8 = iVar15;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      bVar2 = true;\n      if (bVar1 != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((bVar2) || (bVar26 == false)) {\n        iVar8 = 1;\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\n      else {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n        iVar8 = 1;\n      }\n      break;\n    case 0x58:\n      local_c0 = \"0123456789ABCDEF\";\n      if (bVar1 == false) goto LAB_00083196;\nLAB_00082fb6:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      goto LAB_00082fca;\n    case 99:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_dc = (int *******)0x1;\n      local_90 = SUB41(piVar19,0);\n      local_d4 = (int *******)0x1;\n      ppppppppiVar25 = (int ********)&local_90;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (bVar1 != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar19 = (int *)(int)*(short *)local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)((int)piVar19 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)piVar22 < 0) {\n        bVar26 = piVar19 != (int *)0x0;\n        piVar19 = (int *)-(int)piVar19;\n        piVar22 = (int *)(-(int)piVar22 - (uint)bVar26);\n        local_a1 = '-';\n        cVar4 = '-';\n        iVar8 = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)local_d4) {\n        uVar13 = uVar13 & 0xffffff7f;\n      }\n      bVar5 = false;\n      uVar14 = (uint)piVar19 | (uint)piVar22;\n      iVar8 = 1;\n      cVar4 = local_a1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      bVar26 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x6c:\n      uVar14 = (uint)*(byte *)param_3;\n      if (uVar14 == 0x6c) {\n        bVar1 = true;\n        uVar14 = (uint)*(byte *)((int)param_3 + 1);\n        param_3 = (int *******)((int)param_3 + 1);\n      }\n      else {\n        bVar2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (bVar1 == false) {\n        if (bVar2 == false) {\n          if (bVar26) {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *(short *)piVar19 = (short)local_c4;\n          }\n          else {\n            piVar19 = *local_c8;\n            local_c8 = local_c8 + 1;\n            *piVar19 = local_c4;\n          }\n        }\n        else {\n          piVar19 = *local_c8;\n          local_c8 = local_c8 + 1;\n          *piVar19 = local_c4;\n        }\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        *piVar19 = local_c4;\n        piVar19[1] = local_c4 >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (bVar1 == false) goto LAB_00082f2a;\nLAB_00082d42:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 0;\n      break;\n    case 0x70:\n      piVar19 = *local_c8;\n      local_c8 = local_c8 + 1;\n      local_9f = 0x78;\n      bVar5 = true;\n      piVar22 = (int *)0x0;\n      local_a0 = 0x30;\n      local_c0 = \"0123456789abcdef\";\n      iVar8 = 2;\n      break;\n    case 0x71:\n      bVar1 = true;\n      uVar14 = (uint)*(byte *)param_3;\n      goto LAB_00082c12;\n    case 0x73:\n      ppppppppiVar25 = (int ********)*local_c8;\n      local_a1 = '\\0';\n      local_c8 = local_c8 + 1;\n      if (ppppppppiVar25 != (int ********)0x0) {\n        if ((int)local_d4 < 0) {\n          local_d4 = (int *******)count_leading_zeros_00082a50(ppppppppiVar25);\n          pppppppiVar10 = (int *******)0x0;\n          cVar4 = local_a1;\n        }\n        else {\n          iVar8 = find_first_occurrence_00084384(ppppppppiVar25,0,local_d4);\n          cVar4 = local_a1;\n          if (iVar8 == 0) {\n            pppppppiVar10 = (int *******)0x0;\n          }\n          else {\n            pppppppiVar18 = (int *******)(iVar8 - (int)ppppppppiVar25);\n            if ((int)local_d4 <= (int)(int *******)(iVar8 - (int)ppppppppiVar25)) {\n              pppppppiVar18 = local_d4;\n            }\n            pppppppiVar10 = (int *******)0x0;\n            local_d4 = pppppppiVar18;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < local_d4) {\n        local_d4 = (int *******)0x6;\n      }\n      local_dc = (int *******)((uint)local_d4 & ~((int)local_d4 >> 0x1f));\n      ppppppppiVar25 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_a1 = '\\0';\n      pppppppiVar10 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!bVar1) goto LAB_00082f7c;\nLAB_00082e62:\n      ppiVar12 = (int **)((int)local_c8 + 7U & 0xfffffff8);\n      local_c8 = ppiVar12 + 2;\n      piVar19 = *ppiVar12;\n      piVar22 = ppiVar12[1];\n      iVar8 = 1;\n      break;\n    case 0x78:\n      local_c0 = \"0123456789abcdef\";\n      if (bVar1 != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((bVar2 == false) && (bVar26 != false)) {\n        piVar22 = (int *)0x0;\n        piVar19 = (int *)(uint)*(ushort *)local_c8;\n        local_c8 = local_c8 + 1;\n      }\n      else {\n        piVar19 = *local_c8;\n        local_c8 = local_c8 + 1;\n        piVar22 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((bVar3) && (((uint)piVar19 | (uint)piVar22) != 0)) {\n        bVar5 = true;\n        local_a0 = 0x30;\n        iVar8 = 2;\n        local_9f = (char)uVar14;\n      }\n      else {\n        iVar8 = 2;\n      }\n    }\n    local_a1 = '\\0';\n    cVar4 = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)local_d4) {\n      uVar13 = uVar13 & 0xffffff7f;\n    }\n    uVar14 = (uint)piVar19 | (uint)piVar22;\njoined_r0x00082d78:\n    lVar27 = CONCAT44(piVar22,piVar19);\n    pppppppiVar10 = local_d4;\n    if ((uVar14 == 0) && (local_d4 == (int *******)0x0)) {\n      ppppppppiVar25 = (int ********)local_68;\n      if ((iVar8 != 0) || (!bVar3)) goto LAB_00082da0;\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      local_69 = '0';\n      goto LAB_00082d9a;\n    }\n    if (iVar8 == 1) {\n      if (piVar22 != (int *)0x0 || (int *)0x9 < piVar19) {\n        ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n        do {\n          ppppppppiVar25 = ppppppppiVar16;\n          uVar24 = (undefined4)((ulonglong)lVar27 >> 0x20);\n          cVar9 = '\\n';\n          calculate_difference_and_update_00084750((int)lVar27,uVar24,10,0);\n          *(char *)ppppppppiVar25 = cVar9 + '0';\n          lVar27 = calculate_difference_and_update_00084750((int)lVar27,uVar24,10,0);\n          ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n        } while (lVar27 != 0);\n        local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n        goto LAB_00082da0;\n      }\n      local_69 = (char)piVar19 + '0';\n      ppppppppiVar25 = (int ********)(&cStack_6a + 1);\n      goto LAB_0008351e;\n    }\n    ppppppppiVar16 = (int ********)(&cStack_6a + 1);\n    if (iVar8 != 2) goto LAB_0008337e;\n    do {\n      ppppppppiVar25 = ppppppppiVar16;\n      uVar14 = (uint)piVar19 & 0xf;\n      piVar19 = (int *)((uint)piVar19 >> 4 | (int)piVar22 << 0x1c);\n      piVar22 = (int *)((uint)piVar22 >> 4);\n      *(char *)ppppppppiVar25 = local_c0[uVar14];\n      ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    } while (((uint)piVar19 | (uint)piVar22) != 0);\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_94 != (int *******)0x0) {\n    process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(param_2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return local_c4;\nLAB_0008337e:\n  do {\n    ppppppppiVar25 = ppppppppiVar16;\n    piVar7 = (int *)((uint)piVar19 >> 3 | (int)piVar22 << 0x1d);\n    piVar22 = (int *)((uint)piVar22 >> 3);\n    iVar8 = ((uint)piVar19 & 7) + 0x30;\n    *(char *)ppppppppiVar25 = (char)iVar8;\n    ppppppppiVar16 = (int ********)((int)ppppppppiVar25 + -1);\n    piVar19 = piVar7;\n  } while (((uint)piVar7 | (uint)piVar22) != 0);\n  if (bVar3) {\n    if (iVar8 == 0x30) {\nLAB_00082d9a:\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n    }\n    else {\n      *(undefined *)((int)ppppppppiVar25 + -1) = 0x30;\n      ppppppppiVar25 = ppppppppiVar16;\n      local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar16);\n    }\n  }\n  else {\nLAB_0008351e:\n    local_d4 = (int *******)((int)local_68 - (int)ppppppppiVar25);\n  }\nLAB_00082da0:\n  local_dc = local_d4;\n  if ((int)local_d4 < (int)pppppppiVar10) {\n    local_dc = pppppppiVar10;\n  }\n  if (cVar4 != '\\0') {\n    local_dc = (int *******)((int)local_dc + 1);\n  }\nLAB_00082dba:\n  if (bVar5) {\n    local_dc = (int *******)((int)local_dc + 2);\n  }\n  if ((uVar13 == 0) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if ((int)pppppppiVar18 < 0x11) {\n      local_98 = local_98 + 1;\n    }\n    else {\n      do {\n        pppppppiVar23 = pppppppiVar18;\n        iVar8 = local_98 + 1;\n        local_94 = local_94 + 4;\n        *ppppppppiVar6 = (int *******)0x85808;\n        ppppppppiVar6[1] = (int *******)0x10;\n        if (iVar8 < 8) {\n          iVar15 = local_98 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\n          local_98 = iVar8;\n        }\n        else if (local_94 == (int *******)0x0) {\n          iVar15 = 1;\n          ppppppppiVar6 = (int ********)local_68;\n          local_98 = 0;\n        }\n        else {\n          local_98 = iVar8;\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 != 0) goto LAB_000833de;\n          iVar15 = local_98 + 1;\n          ppppppppiVar6 = (int ********)local_68;\n        }\n        pppppppiVar18 = pppppppiVar23 + -4;\n      } while (0x10 < (int)pppppppiVar18);\n      pppppppiVar18 = pppppppiVar23 + -4;\n      local_98 = iVar15;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)0x85808;\n    ppppppppiVar6[1] = pppppppiVar18;\n    if (local_98 < 8) {\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  else {\n    iVar8 = local_98 + 1;\n  }\n  iVar15 = iVar8;\n  if (local_a1 != '\\0') {\n    local_94 = (int *******)((int)local_94 + 1);\n    iVar15 = 1;\n    *ppppppppiVar6 = (int *******)&local_a1;\n    ppppppppiVar6[1] = (int *******)0x1;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar15 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar15 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  iVar8 = iVar15;\n  iVar17 = local_98;\n  if (bVar5) {\n    local_94 = (int *******)((int)local_94 + 2);\n    *ppppppppiVar6 = (int *******)&local_a0;\n    ppppppppiVar6[1] = (int *******)0x2;\n    if (iVar15 < 8) {\n      iVar8 = iVar15 + 1;\n      iVar17 = iVar15;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      iVar17 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      local_98 = iVar15;\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      iVar17 = local_98;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  local_98 = iVar17;\n  if ((uVar13 == 0x80) &&\n     (pppppppiVar18 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar18)) {\n    if (0x10 < (int)pppppppiVar18) {\n      do {\n        while( true ) {\n          pppppppiVar23 = pppppppiVar18;\n          local_98 = iVar17 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar17 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_0008348e:\n          iVar17 = local_98;\n          pppppppiVar18 = pppppppiVar23 + -4;\n          if ((int)(pppppppiVar23 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        iVar17 = 0;\n        pppppppiVar18 = pppppppiVar23 + -4;\n        ppppppppiVar6 = (int ********)local_68;\n      } while (0x10 < (int)(pppppppiVar23 + -4));\nLAB_000834b4:\n      pppppppiVar18 = pppppppiVar23 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar18);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar18;\n    local_98 = iVar8;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n    }\n    else if (local_94 == (int *******)0x0) {\n      iVar8 = 1;\n      local_98 = 0;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n    }\n  }\n  pppppppiVar10 = (int *******)((int)pppppppiVar10 - (int)local_d4);\n  ppppppppiVar16 = (int ********)local_68;\n  if ((int)pppppppiVar10 < 1) {\nLAB_000832c6:\n    local_94 = (int *******)((int)local_94 + (int)local_d4);\n    *ppppppppiVar6 = (int *******)ppppppppiVar25;\n    ppppppppiVar6[1] = local_d4;\n    local_d4 = local_94;\n    local_98 = iVar8;\n    if (iVar8 < 8) goto LAB_0008345a;\n    if (local_94 == (int *******)0x0) {\n      local_98 = 0;\n    }\n    else {\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    iVar15 = local_98;\n    if (0x10 < (int)pppppppiVar10) {\n      do {\n        while( true ) {\n          pppppppiVar18 = pppppppiVar10;\n          local_98 = iVar15 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar6 = (int *******)&DAT_00085848;\n          ppppppppiVar6[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar8 = iVar15 + 2;\n          ppppppppiVar6 = ppppppppiVar6 + 2;\nLAB_00083282:\n          iVar15 = local_98;\n          pppppppiVar10 = pppppppiVar18 + -4;\n          if ((int)(pppppppiVar18 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar8 = local_98 + 1;\n            ppppppppiVar6 = (int ********)local_68;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        iVar8 = 1;\n        ppppppppiVar6 = (int ********)local_68;\n        iVar15 = 0;\n        pppppppiVar10 = pppppppiVar18 + -4;\n      } while (0x10 < (int)(pppppppiVar18 + -4));\nLAB_000832aa:\n      pppppppiVar10 = pppppppiVar18 + -4;\n    }\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar6 = (int *******)&DAT_00085848;\n    ppppppppiVar6[1] = pppppppiVar10;\n    if (iVar8 < 8) {\n      iVar8 = iVar8 + 1;\n      ppppppppiVar6 = ppppppppiVar6 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_94 != (int *******)0x0) {\n      local_98 = iVar8;\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n      iVar8 = local_98 + 1;\n      ppppppppiVar6 = (int ********)local_68;\n      goto LAB_000832c6;\n    }\n    local_64[0] = local_d4;\n    local_98 = 1;\n    ppppppppiVar6 = (int ********)local_68;\n    local_68 = (undefined  [4])ppppppppiVar25;\nLAB_0008345a:\n    ppppppppiVar16 = ppppppppiVar6 + 2;\n    local_94 = local_d4;\n  }\n  if (((uVar13 & 4) != 0) &&\n     (pppppppiVar10 = (int *******)((int)pppppppiVar20 - (int)local_dc), 0 < (int)pppppppiVar10)) {\n    iVar8 = local_98;\n    if ((int)pppppppiVar10 < 0x11) {\n      iVar15 = local_98 + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          local_98 = iVar8 + 1;\n          local_94 = local_94 + 4;\n          *ppppppppiVar16 = (int *******)0x85808;\n          ppppppppiVar16[1] = (int *******)0x10;\n          if (7 < local_98) break;\n          iVar15 = iVar8 + 2;\n          ppppppppiVar16 = ppppppppiVar16 + 2;\nLAB_00083316:\n          pppppppiVar10 = pppppppiVar10 + -4;\n          iVar8 = local_98;\n          if ((int)pppppppiVar10 < 0x11) goto LAB_0008333e;\n        }\n        if (local_94 != (int *******)0x0) {\n          iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n          if (iVar8 == 0) {\n            iVar15 = local_98 + 1;\n            ppppppppiVar16 = (int ********)local_68;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pppppppiVar10 = pppppppiVar10 + -4;\n        iVar15 = 1;\n        iVar8 = 0;\n        ppppppppiVar16 = (int ********)local_68;\n      } while (0x10 < (int)pppppppiVar10);\n    }\nLAB_0008333e:\n    local_94 = (int *******)((int)local_94 + (int)pppppppiVar10);\n    *ppppppppiVar16 = (int *******)0x85808;\n    ppppppppiVar16[1] = pppppppiVar10;\n    local_98 = iVar15;\n    if (7 < iVar15) {\n      if (local_94 == (int *******)0x0) {\n        if ((int)local_dc < (int)pppppppiVar20) {\n          local_dc = pppppppiVar20;\n        }\n        local_c4 = local_c4 + (int)local_dc;\n        goto LAB_00083422;\n      }\n      iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c);\n      if (iVar8 != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)local_dc < (int)pppppppiVar20) {\n    local_dc = pppppppiVar20;\n  }\n  local_c4 = local_c4 + (int)local_dc;\n  if ((local_94 != (int *******)0x0) &&\n     (iVar8 = process_and_validate_data_00082ac0(param_1,param_2,&local_9c), iVar8 != 0)) goto LAB_000833de;\nLAB_00083422:\n  local_98 = 0;\n  ppppppppiVar6 = (int ********)local_68;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  uVar11 = uVar14 - 0x30;\n  pppppppiVar20 = (int *******)0x0;\n  pppppppiVar10 = param_3;\n  do {\n    param_3 = (int *******)((int)pppppppiVar10 + 1);\n    uVar14 = (uint)*(byte *)pppppppiVar10;\n    pppppppiVar20 = (int *******)(uVar11 + (int)pppppppiVar20 * 10);\n    uVar11 = uVar14 - 0x30;\n    pppppppiVar10 = param_3;\n  } while (uVar11 < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  uVar14 = (uint)*(byte *)param_3;\n  if (local_a1 == '\\0') {\n    local_a1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "current_name": "FUNC_00082b38",
            "entrypoint": "0x00082b38",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00082b38": "FUNC_00082b38"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008378c": {
            "additional_data": {
                "FUNC_00082b38": {
                    "some_function": 1
                },
                "FUN_0008378c": {
                    "decode_and_process_data": 1,
                    "process_data": 27,
                    "process_function": 1,
                    "validate_and_process_data": 1,
                    "validate_data": 1
                },
                "auStack_420": {
                    "additional_stack": 1,
                    "data": 1,
                    "data_buffer": 2,
                    "data_stack": 1,
                    "stack": 1,
                    "stack_array": 3,
                    "stack_buffer": 8,
                    "stack_data": 4,
                    "temp_buffer": 3,
                    "temporary_buffer": 1
                },
                "iVar1": {
                    "result": 20,
                    "return_value": 2
                },
                "iVar2": {
                    "validation_result": 22
                },
                "local_424": {
                    "const_value_5": 1,
                    "constant4": 1,
                    "constant5": 1,
                    "data": 1,
                    "data1": 1,
                    "data_ptr": 1,
                    "data_value5": 1,
                    "local_data": 1,
                    "local_variable": 1,
                    "local_variable2": 1,
                    "param": 1,
                    "param2_100": 1,
                    "ptr2": 1,
                    "temp": 2,
                    "temp_var": 1,
                    "temporary_buffer": 1,
                    "unused": 1,
                    "value1": 1,
                    "value3": 2,
                    "value4": 1,
                    "var1": 1,
                    "variable": 2,
                    "variable3": 1
                },
                "local_464": {
                    "buffer_size2": 2,
                    "buffer_size3": 2,
                    "buffer_size4": 1,
                    "const_value_4": 1,
                    "constant3": 1,
                    "constant4": 1,
                    "data2": 1,
                    "data_pointer": 1,
                    "data_size": 1,
                    "data_value4": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "param4": 1,
                    "param5": 1,
                    "size": 1,
                    "size4": 1,
                    "value": 1,
                    "value2": 3,
                    "value3": 2,
                    "variable2": 1
                },
                "local_46c": {
                    "address": 1,
                    "buffer_size2": 1,
                    "const_value_3": 1,
                    "constant2": 1,
                    "constant3": 1,
                    "data": 2,
                    "data_value3": 1,
                    "local_variable": 1,
                    "param3": 1,
                    "param4": 1,
                    "size3": 1,
                    "value": 1,
                    "value1": 1,
                    "value2": 2,
                    "value_ptr": 1,
                    "variable1": 1
                },
                "local_470": {
                    "const_value_2": 1,
                    "constant1": 1,
                    "constant2": 1,
                    "counter": 2,
                    "data_offset": 1,
                    "flag": 1,
                    "initial_value": 1,
                    "initialized": 1,
                    "offset": 1,
                    "size": 1,
                    "size2": 1,
                    "unused": 1,
                    "value": 1,
                    "zero": 8,
                    "zero_value": 2
                },
                "local_474": {
                    "buffer_size": 1,
                    "buffer_size1": 4,
                    "buffer_size2": 11,
                    "buffer_size3": 1,
                    "buffer_size_copy": 2,
                    "const_value_1": 1,
                    "constant1": 1,
                    "size": 1,
                    "size1": 1,
                    "size2": 1,
                    "validation_buffer": 1
                },
                "local_478": {
                    "buffer": 13,
                    "buffer_pointer": 1,
                    "buffer_ptr": 4,
                    "buffer_size2": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "local_buffer": 2,
                    "output_buffer": 1,
                    "output_data": 1,
                    "pointer": 1,
                    "ptr": 2
                },
                "local_47a": {
                    "data": 2,
                    "data_flag": 1,
                    "data_flags": 1,
                    "data_value": 1,
                    "data_value2": 1,
                    "extracted_value": 1,
                    "flag_value": 1,
                    "masked_flag": 1,
                    "modified_value2": 1,
                    "offset": 2,
                    "param3": 1,
                    "short_value": 2,
                    "specific_value": 1,
                    "value": 14,
                    "value_1": 1
                },
                "local_47c": {
                    "bitmask": 1,
                    "data_value1": 1,
                    "flag": 9,
                    "masked_input": 1,
                    "masked_value": 13,
                    "modified_data": 1,
                    "modified_flag": 1,
                    "modified_value": 3,
                    "modified_value1": 1
                },
                "local_480": {
                    "buffer_size": 18,
                    "buffer_size1": 7,
                    "size1": 1
                },
                "local_488": {
                    "buffer": 9,
                    "buffer_array": 8,
                    "local_buffer": 2,
                    "local_buffers": 2,
                    "stack_array": 2,
                    "stack_buffer": 2,
                    "stack_memory": 1
                },
                "param_1": {
                    "arg1": 5,
                    "data_handler": 1,
                    "input": 3,
                    "input_param": 2,
                    "param": 2,
                    "param1": 15,
                    "param_1": 1,
                    "result": 1,
                    "status": 1
                },
                "param_2": {
                    "arg2": 5,
                    "data": 8,
                    "data_ptr": 3,
                    "input_param": 1,
                    "param2": 14
                },
                "validate_and_process_data_00083adc": {
                    "validate_and_process_data": 1
                }
            },
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint decode_and_process_data_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int validation_result;\n  undefined *buffer [2];\n  undefined4 buffer_size;\n  ushort masked_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 zero;\n  undefined4 value2;\n  undefined4 value2;\n  undefined4 value3;\n  undefined stack_buffer [1024];\n  \n  value3 = *(undefined4 *)(param2 + 100);\n  value2 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  value2 = *(undefined4 *)(param2 + 0x24);\n  buffer[0] = stack_buffer;\n  masked_value = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  zero = 0;\n  buffer = buffer[0];\n  result = FUNC_00082b38(param1,buffer);\n  if ((-1 < result) && (validation_result = validate_and_process_data(param1,buffer), validation_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "code_backup": "\nint FUN_0008378c(undefined4 param_1,int param_2)\n\n{\n  int iVar1;\n  int iVar2;\n  undefined *local_488 [2];\n  undefined4 local_480;\n  ushort local_47c;\n  undefined2 local_47a;\n  undefined *local_478;\n  undefined4 local_474;\n  undefined4 local_470;\n  undefined4 local_46c;\n  undefined4 local_464;\n  undefined4 local_424;\n  undefined auStack_420 [1024];\n  \n  local_424 = *(undefined4 *)(param_2 + 100);\n  local_46c = *(undefined4 *)(param_2 + 0x1c);\n  local_47a = *(undefined2 *)(param_2 + 0xe);\n  local_464 = *(undefined4 *)(param_2 + 0x24);\n  local_488[0] = auStack_420;\n  local_47c = *(ushort *)(param_2 + 0xc) & 0xfffd;\n  local_480 = 0x400;\n  local_474 = 0x400;\n  local_470 = 0;\n  local_478 = local_488[0];\n  iVar1 = FUNC_00082b38(param_1,local_488);\n  if ((-1 < iVar1) && (iVar2 = validate_and_process_data_00083adc(param_1,local_488), iVar2 != 0)) {\n    iVar1 = -1;\n  }\n  if ((int)((uint)local_47c << 0x19) < 0) {\n    *(ushort *)(param_2 + 0xc) = *(ushort *)(param_2 + 0xc) | 0x40;\n  }\n  return iVar1;\n}\n\n",
            "current_name": "decode_and_process_data_0008378c",
            "entrypoint": "0x0008378c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008378c": "decode_and_process_data_0008378c",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "validation_result",
                "local_424": "value3",
                "local_464": "value2",
                "local_46c": "value2",
                "local_470": "zero",
                "local_474": "buffer_size2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "masked_value",
                "local_480": "buffer_size",
                "local_488": "buffer",
                "param_1": "param1",
                "param_2": "param2",
                "validate_and_process_data_00083adc": "validate_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083808": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 1
                },
                "FUN_00083808": {
                    "improve_and_check_later_stage": 1,
                    "initialize_and_check_data": 4,
                    "initialize_and_check_data_structures": 1,
                    "initialize_and_check_errors": 1,
                    "initialize_and_check_memory": 3,
                    "initialize_and_check_offset": 1,
                    "initialize_and_check_parameters": 2,
                    "initialize_data": 1,
                    "initialize_data_structures": 1,
                    "initialize_or_check_data": 2,
                    "initialize_or_update_data": 1,
                    "process_data": 10,
                    "update_data_structures": 1,
                    "validate_data": 1
                },
                "calculate_and_update_offset_00083d9c": {
                    "calculate_and_update_offset": 4
                },
                "iVar1": {
                    "calculated_value": 1,
                    "i_var1": 1,
                    "index1": 1,
                    "initialized_value": 2,
                    "int_var1": 1,
                    "int_var_2": 1,
                    "offset": 4,
                    "result": 1,
                    "return_value": 1,
                    "temp1": 2,
                    "temp_var1": 4,
                    "value1": 8,
                    "value_1": 1,
                    "var1": 3
                },
                "iVar2": {
                    "data_offset": 1,
                    "data_value": 1,
                    "i_var2": 1,
                    "index2": 1,
                    "initial_value": 1,
                    "int_var": 1,
                    "int_var2": 1,
                    "length": 1,
                    "temp2": 2,
                    "temp_value": 1,
                    "temp_var2": 4,
                    "value": 4,
                    "value2": 8,
                    "value_2": 1,
                    "var2": 3
                },
                "initialize_data_structures_00083b14": {
                    "initialize_data_structures": 4
                },
                "initialize_memory_and_check_errors_000842a4": {
                    "initialize_memory_and_check_errors": 4
                },
                "param_1": {
                    "data_param": 1,
                    "data_result": 1,
                    "data_structures": 1,
                    "error_code": 1,
                    "out_param": 3,
                    "output": 5,
                    "output_array": 1,
                    "output_code": 1,
                    "output_param": 2,
                    "output_result": 1,
                    "output_status": 2,
                    "output_value": 1,
                    "result": 7,
                    "status": 4
                },
                "param_2": {
                    "data": 9,
                    "data_array": 1,
                    "data_input": 1,
                    "input": 6,
                    "input_array": 2,
                    "input_data": 3,
                    "input_param": 5,
                    "input_params": 1,
                    "parameters": 2,
                    "struct_param": 1
                },
                "uVar3": {
                    "bitwise_result": 1,
                    "converted_value": 1,
                    "data_mask": 1,
                    "data_value": 2,
                    "flag": 2,
                    "flag_value": 1,
                    "flags": 2,
                    "num_bits": 1,
                    "temp": 1,
                    "temp_1": 1,
                    "temp_uint": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var3": 2,
                    "u_value": 1,
                    "u_var3": 1,
                    "ushort_value": 1,
                    "value": 3,
                    "value3": 2,
                    "value_shifted": 1,
                    "var3": 2,
                    "variable1": 1
                },
                "uVar4": {
                    "data_flag": 1,
                    "data_value_short": 1,
                    "flag": 4,
                    "flag_mask": 2,
                    "input_flag": 1,
                    "original_value": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_ushort": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "u_short_value": 1,
                    "u_var4": 1,
                    "ushort_temp": 1,
                    "ushort_value": 3,
                    "value": 2,
                    "value4": 2,
                    "var4": 2,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "code": "\nundefined4 process_data_00083808(undefined4 *result,int *data)\n\n{\n  int value1;\n  int value2;\n  uint value;\n  ushort flag;\n  \n  if ((rel_array[140].r_offset != 0) &&\n     (*(int *)(rel_array[140].r_offset + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  flag = *(ushort *)(data + 3);\n  value = (uint)flag;\n  if ((int)(value << 0x1c) < 0) {\n    value2 = data[4];\n  }\n  else {\n    if (-1 < (int)(value << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = flag | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(value << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          calculate_and_update_offset(result);\n          flag = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      value2 = data[4];\n      flag = flag & 0xffdb;\n      *data = value2;\n      data[1] = 0;\n    }\n    else {\n      value2 = data[4];\n    }\n    *(ushort *)(data + 3) = flag | 8;\n    value = (uint)(flag | 8);\n  }\n  if ((value2 == 0) && ((value & 0x280) != 0x200)) {\n    initialize_memory_and_check_errors(result,data);\n    value = (uint)*(ushort *)(data + 3);\n    value2 = data[4];\n  }\n  if ((value & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(value << 0x1e)) {\n      value1 = data[5];\n    }\n    data[2] = value1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00083808",
            "entrypoint": "0x00083808",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083808": "process_data_00083808",
                "calculate_and_update_offset_00083d9c": "calculate_and_update_offset",
                "iVar1": "value1",
                "iVar2": "value2",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "initialize_memory_and_check_errors_000842a4": "initialize_memory_and_check_errors",
                "param_1": "result",
                "param_2": "data",
                "uVar3": "value",
                "uVar4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083974": {
            "additional_data": {
                "FUN_00083974": {
                    "copy_parameter": 5,
                    "copy_value": 6,
                    "echo": 1,
                    "identity": 3,
                    "identity_function": 12,
                    "pass_through": 1,
                    "return_input_value": 1,
                    "return_parameter": 2
                },
                "param_1": {
                    "input": 14,
                    "input_value": 3,
                    "output": 1,
                    "value": 5,
                    "value_to_copy": 3
                },
                "param_2": {
                    "output": 1
                },
                "return": {
                    "output": 1
                },
                "undefined4": {
                    "data": 1,
                    "output": 3,
                    "return_type": 2
                }
            },
            "called": [
                "FUN_00081df4"
            ],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\noutput identity_function_00083974(output input)\n\n{\n  output input;\n}\n\n",
            "current_name": "identity_function_00083974",
            "entrypoint": "0x00083974",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input",
                "return": "output",
                "undefined4": "output"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083adc": {
            "additional_data": {
                "FUN_00083adc": {
                    "decode_and_update_data": 1,
                    "process_data": 28,
                    "validate_and_process_data": 1
                },
                "LAB_00083a54": {
                    "exit_label": 1
                },
                "calculate_and_update_offset_00083d9c": {
                    "calculate_and_update_offset": 5
                },
                "code": {
                    "function_type": 1
                },
                "iVar2": {
                    "counter": 1,
                    "index": 1,
                    "index_var": 2,
                    "int_var": 1,
                    "int_var1": 1,
                    "int_var_2": 1,
                    "iterator": 1,
                    "offset": 2,
                    "temp_integer": 1,
                    "temp_var": 1,
                    "temp_var1": 9,
                    "temp_var2": 1,
                    "value1": 1,
                    "var1": 5,
                    "var2": 1,
                    "variable1": 1
                },
                "iVar5": {
                    "another_int_var": 1,
                    "i_var": 1,
                    "int_var2": 1,
                    "int_var_5": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_integer_2": 1,
                    "temp_offset": 1,
                    "temp_var2": 7,
                    "temp_var3": 2,
                    "temp_var4": 4,
                    "temp_var5": 1,
                    "value2": 1,
                    "var2": 2,
                    "var4": 3,
                    "var5": 1,
                    "variable4": 1
                },
                "iVar7": {
                    "int_var3": 1,
                    "int_var_7": 1,
                    "original_offset": 1,
                    "temp3": 1,
                    "temp_integer_3": 1,
                    "temp_var2": 1,
                    "temp_var3": 7,
                    "temp_var4": 2,
                    "temp_var5": 4,
                    "temp_var7": 1,
                    "value3": 1,
                    "var": 1,
                    "var3": 2,
                    "var5": 2,
                    "var6": 1,
                    "var7": 1,
                    "variable5": 1,
                    "yet_another_int_var": 1
                },
                "initialize_data_structures_00083b14": {
                    "initialize_data_structures": 5
                },
                "int": {
                    "integer": 1
                },
                "param_1": {
                    "data": 2,
                    "data1": 1,
                    "data_array": 6,
                    "data_pointer": 4,
                    "data_pointer1": 3,
                    "data_ptr": 4,
                    "data_struct1": 1,
                    "data_structure": 1,
                    "input_array": 7,
                    "input_data": 2
                },
                "param_2": {
                    "arguments": 1,
                    "config_ptr": 1,
                    "control_array": 1,
                    "data2": 1,
                    "data_pointer2": 3,
                    "data_struct": 2,
                    "data_struct2": 1,
                    "info": 1,
                    "info_array": 2,
                    "info_pointer": 4,
                    "info_ptr": 3,
                    "output_array": 4,
                    "output_data": 2,
                    "param_array": 4,
                    "parameters": 1
                },
                "pcVar6": {
                    "callback": 3,
                    "callback_func": 1,
                    "callback_function": 2,
                    "func_ptr": 3,
                    "function_pointer": 5,
                    "function_ptr": 15,
                    "function_ptr_var": 1
                },
                "piVar1": {
                    "auxiliary_pointer": 1,
                    "pointer1": 1,
                    "pointer_var": 2,
                    "pointer_var1": 1,
                    "ptr": 1,
                    "ptr1": 5,
                    "ptr_var1": 2,
                    "ptr_var_1": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 3,
                    "temp_ptr1": 4,
                    "temp_var1": 2,
                    "var1": 1
                },
                "uVar3": {
                    "flag": 5,
                    "flags": 9,
                    "flags_var": 1,
                    "temp_unsigned_short": 1,
                    "temp_var2": 4,
                    "temp_var3": 1,
                    "ushort_var": 2,
                    "ushort_var1": 1,
                    "ushort_var_3": 1,
                    "var2": 3,
                    "var3": 1,
                    "variable2": 1
                },
                "uVar4": {
                    "combined_flags": 1,
                    "flag2": 2,
                    "flag_value": 1,
                    "flags2": 1,
                    "temp": 4,
                    "temp_uint": 1,
                    "temp_var": 3,
                    "temp_var2": 2,
                    "temp_var3": 4,
                    "temp_var4": 1,
                    "u_flag": 1,
                    "uint_var": 2,
                    "uint_var1": 1,
                    "uint_var_4": 1,
                    "var3": 3,
                    "var4": 1,
                    "variable3": 1
                },
                "unaff_r4": {
                    "result": 10,
                    "return_val": 4,
                    "return_value": 10,
                    "temp_unaff_r4": 1,
                    "unaff_r4": 1,
                    "unaff_var": 2,
                    "unaff_var1": 1,
                    "unaff_var_4": 1,
                    "var5": 1
                },
                "ushort": {
                    "unsigned_short": 1
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_0008378c",
                "FUN_000846a4",
                "FUN_00083f34",
                "FUN_000844c4"
            ],
            "code": "\nundefined4 validate_and_process_data_00083adc(integer *input_array,integer *info_pointer)\n\n{\n  integer *ptr1;\n  integer temp_var1;\n  unsigned_short flags;\n  uinteger temp;\n  integer temp_var2;\n  function_type *function_ptr;\n  undefined4 return_value;\n  integer temp_var3;\n  \n  if ((input_array != (integer *)0x0) && (input_array[0xe] == 0)) {\n    initialize_data_structures();\n  }\n  if (*(short *)(info_pointer + 3) == 0) {\n    return 0;\n  }\n  flags = *(unsigned_short *)(info_pointer + 3);\n  if ((integer)((uinteger)flags << 0x1c) < 0) {\n    temp_var3 = info_pointer[4];\n    if (temp_var3 == 0) {\n      return 0;\n    }\n    temp_var1 = *info_pointer;\n    if ((flags & 3) == 0) {\n      temp_var2 = info_pointer[5];\n    }\n    else {\n      temp_var2 = 0;\n    }\n    *info_pointer = temp_var3;\n    temp_var1 = temp_var1 - temp_var3;\n    info_pointer[2] = temp_var2;\n    do {\n      if (temp_var1 < 1) {\n        return 0;\n      }\n      temp_var2 = (*(function_type *)info_pointer[9])(input_array,info_pointer[7],temp_var3,temp_var1,return_value);\n      temp_var1 = temp_var1 - temp_var2;\n      temp_var3 = temp_var3 + temp_var2;\n    } while (0 < temp_var2);\nexit_label:\n    *(unsigned_short *)(info_pointer + 3) = *(unsigned_short *)(info_pointer + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(unsigned_short *)(info_pointer + 3) = flags | 0x800;\n  if ((info_pointer[1] < 1) && (info_pointer[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (function_type *)info_pointer[10];\n  if (function_ptr == (function_type *)0x0) {\n    return 0;\n  }\n  temp = (uinteger)(flags | 0x800);\n  temp_var3 = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var1 = (*function_ptr)(input_array,info_pointer[7],temp & 0x1000,1);\n    if ((temp_var1 == -1) && (temp_var2 = *input_array, temp_var2 != 0)) {\n      if ((temp_var2 == 0x1d) || (temp_var2 == 0x16)) {\n        *input_array = temp_var3;\n        return 0;\n      }\n      goto exit_label;\n    }\n    temp = (uinteger)*(unsigned_short *)(info_pointer + 3);\n    function_ptr = (function_type *)info_pointer[10];\n  }\n  else {\n    temp_var1 = info_pointer[0x14];\n  }\n  if (((integer)(temp << 0x1d) < 0) && (temp_var1 = temp_var1 - info_pointer[1], info_pointer[0xc] != 0)) {\n    temp_var1 = temp_var1 - info_pointer[0xf];\n  }\n  temp_var1 = (*function_ptr)(input_array,info_pointer[7],temp_var1,0);\n  if (temp_var1 == -1) {\n    temp_var2 = *input_array;\n    if (temp_var2 != 0) {\n      if ((temp_var2 != 0x1d) && (temp_var2 != 0x16)) {\n        *(unsigned_short *)(info_pointer + 3) = *(unsigned_short *)(info_pointer + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(unsigned_short *)(info_pointer + 3) = *(unsigned_short *)(info_pointer + 3) & 0xf7ff;\n      *info_pointer = info_pointer[4];\n      info_pointer[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(unsigned_short *)(info_pointer + 3) & 0xf7ff;\n    info_pointer[1] = 0;\n    *(unsigned_short *)(info_pointer + 3) = flags;\n    *info_pointer = info_pointer[4];\n  }\n  else {\n    flags = *(unsigned_short *)(info_pointer + 3) & 0xf7ff;\n    *info_pointer = info_pointer[4];\n    *(unsigned_short *)(info_pointer + 3) = flags;\n    info_pointer[1] = 0;\n  }\n  if ((integer)((uinteger)flags << 0x13) < 0) {\n    info_pointer[0x14] = temp_var1;\n  }\nLAB_00083a00:\n  ptr1 = (integer *)info_pointer[0xc];\n  *input_array = temp_var3;\n  if (ptr1 == (integer *)0x0) {\n    return 0;\n  }\n  if (ptr1 != info_pointer + 0x10) {\n    calculate_and_update_offset(input_array);\n  }\n  info_pointer[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "validate_and_process_data_00083adc",
            "entrypoint": "0x00083adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083adc": "validate_and_process_data_00083adc",
                "LAB_00083a54": "exit_label",
                "calculate_and_update_offset_00083d9c": "calculate_and_update_offset",
                "code": "function_type",
                "iVar2": "temp_var1",
                "iVar5": "temp_var2",
                "iVar7": "temp_var3",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "int": "integer",
                "param_1": "input_array",
                "param_2": "info_pointer",
                "pcVar6": "function_ptr",
                "piVar1": "ptr1",
                "uVar3": "flags",
                "uVar4": "temp",
                "unaff_r4": "return_value",
                "ushort": "unsigned_short"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b14": {
            "additional_data": {
                "FUN_00083b14": {
                    "initialize_buffers": 1,
                    "initialize_data": 1,
                    "initialize_data_structures": 22,
                    "initialize_function": 1,
                    "initialize_memory": 4,
                    "initialize_parameters": 2
                },
                "param_1": {
                    "base_address": 4,
                    "buffer": 1,
                    "data": 2,
                    "data_ptr": 2,
                    "data_struct": 3,
                    "data_struct_ptr": 4,
                    "data_structure": 2,
                    "data_structure_address": 2,
                    "data_structure_pointer": 2,
                    "data_structures_ptr": 2,
                    "function_param1": 1,
                    "memory_address": 2,
                    "memory_pointer": 1,
                    "param": 2,
                    "struct_ptr": 1
                },
                "puVar1": {
                    "array1_pointer": 1,
                    "array1_ptr": 1,
                    "buffer_ptr": 1,
                    "data_struct_array_ptr": 1,
                    "data_struct_ptr1": 1,
                    "data_structure1": 2,
                    "data_structure_ptr1": 1,
                    "first_data_structure_pointer": 2,
                    "local_var1": 1,
                    "memory_block1": 1,
                    "param1": 1,
                    "parameter1": 1,
                    "pointer0": 1,
                    "pointer1": 2,
                    "ptr1": 10,
                    "ptr_a": 1,
                    "ptr_struct1": 2,
                    "struct1": 1
                },
                "puVar2": {
                    "array2_pointer": 1,
                    "array2_ptr": 1,
                    "buffer_ptr2": 1,
                    "data_struct_array_ptr2": 1,
                    "data_struct_ptr2": 1,
                    "data_structure2": 2,
                    "data_structure_ptr2": 1,
                    "local_var2": 1,
                    "memory_block2": 1,
                    "param2": 1,
                    "parameter2": 1,
                    "pointer1": 1,
                    "pointer2": 2,
                    "ptr2": 10,
                    "ptr_b": 1,
                    "ptr_struct2": 2,
                    "second_data_structure_pointer": 2,
                    "struct2": 1
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_00083adc",
                "FUN_000846a4",
                "FUN_00083808",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "code": "\nvoid initialize_data_structures_00083b14(int base_address)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(base_address + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(base_address + 4);\n    *(undefined **)(base_address + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(base_address + 0x2e4) = 3;\n    *(int *)(base_address + 0x2e8) = base_address + 0x2ec;\n    *(undefined4 *)(base_address + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_with_byte_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(base_address + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    fill_memory_with_byte_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(base_address + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &LAB_00084440_1;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    fill_memory_with_byte_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &LAB_00084440_1;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(base_address + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083b14",
            "entrypoint": "0x00083b14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "base_address",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083c08": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c08",
            "entrypoint": "0x00083c08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c0c": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c0c",
            "entrypoint": "0x00083c0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c40": {
            "additional_data": {
                "FUN_00083c40": {
                    "process_and_modify_data": 1,
                    "process_and_store_data": 1,
                    "process_and_validate_data": 4,
                    "process_and_write_data": 1,
                    "process_data": 24
                },
                "abStack_1b": {
                    "additional_data": 1,
                    "backup_array": 1,
                    "buffer": 1,
                    "byte_arr": 1,
                    "byte_array": 3,
                    "byte_stack": 2,
                    "constant_array": 1,
                    "data_array": 1,
                    "data_bytes": 1,
                    "data_stack": 1,
                    "stack_arr": 1,
                    "stack_array": 9,
                    "stack_buffer": 1,
                    "stack_bytes": 2,
                    "stack_data": 2,
                    "stack_vals": 1,
                    "temp_array": 2
                },
                "iVar1": {
                    "reloc_info": 2,
                    "relocation_info": 23,
                    "relocation_info_result": 1,
                    "relocation_result": 3,
                    "relocation_status": 1,
                    "result": 1
                },
                "local_1c": {
                    "buffer": 1,
                    "byte_data": 1,
                    "byte_to_write": 1,
                    "byte_val": 2,
                    "byte_val1": 2,
                    "byte_value": 1,
                    "current_byte": 4,
                    "current_byte_backup": 1,
                    "current_byte_copy": 1,
                    "current_byte_value": 1,
                    "current_data": 1,
                    "current_value": 2,
                    "data_byte": 3,
                    "local_byte": 3,
                    "local_byte2": 1,
                    "local_byte_value": 1,
                    "temp_byte": 4,
                    "temp_data": 1
                },
                "param_1": {
                    "arg1": 8,
                    "input": 1,
                    "input1": 1,
                    "input_param": 1,
                    "input_parameter_1": 1,
                    "input_var": 1,
                    "param": 2,
                    "param1": 14,
                    "param_1": 1,
                    "param_elf_info": 1
                },
                "param_2": {
                    "arg2": 6,
                    "count": 1,
                    "data_length": 1,
                    "data_size": 5,
                    "input2": 1,
                    "input_length": 1,
                    "input_parameter_2": 1,
                    "input_size": 1,
                    "param2": 11,
                    "size": 3
                },
                "param_3": {
                    "arg3": 6,
                    "data": 4,
                    "data_arr": 1,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 4,
                    "input_array": 1,
                    "input_parameter_3": 1,
                    "param3": 11
                },
                "pbVar4": {
                    "byte_pointer": 2,
                    "byte_ptr": 5,
                    "byte_variable": 1,
                    "bytes_ptr": 1,
                    "current_byte": 4,
                    "current_byte_ptr": 2,
                    "current_data": 2,
                    "current_ptr": 5,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "ptr": 3,
                    "ptr_byte": 1,
                    "tmp_pointer": 1
                },
                "uVar2": {
                    "data_processing_result": 2,
                    "data_result": 1,
                    "process_result": 1,
                    "result": 24,
                    "status": 3
                },
                "uVar3": {
                    "byte_result": 1,
                    "byte_val": 1,
                    "byte_value": 4,
                    "current_byte": 8,
                    "current_data": 1,
                    "data": 3,
                    "data_byte": 1,
                    "data_value": 3,
                    "local_byte": 1,
                    "local_data": 1,
                    "local_value": 1,
                    "processed_data": 2,
                    "temp": 1,
                    "temp_value": 1,
                    "value": 2
                },
                "uVar5": {
                    "counter": 11,
                    "current_index": 1,
                    "index": 16,
                    "iteration": 1,
                    "loop_index": 1,
                    "temp_index": 1
                }
            },
            "called": [
                "FUN_0008456c",
                "FUN_00084298",
                "FUN_000844c4"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nuint process_and_validate_data_00083c40(undefined4 param1,uint param2,byte **param3)\n\n{\n  int relocation_info;\n  uint result;\n  uint current_byte;\n  byte *byte_ptr;\n  uint index;\n  byte current_byte;\n  byte stack_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(param3 + 3) << 0x12)) {\n    *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x2000;\n    param3[0x19] = (byte *)((uint)param3[0x19] | 0x2000);\n  }\n  relocation_info = get_elf_relocation_info_00084298();\n  if ((relocation_info == 1) && (param2 - 1 < 0xff)) {\n    current_byte = param2 & 0xff;\n    current_byte = (byte)current_byte;\n    result = 1;\n  }\n  else {\n    result = process_data_0008456c(param1,&current_byte,param2,param3 + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(param3 + 3) = *(ushort *)(param3 + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return param2;\n    }\n    current_byte = (uint)current_byte;\n  }\n  index = 0;\n  do {\n    byte_ptr = param3[2] + -1;\n    param3[2] = byte_ptr;\n    if ((int)byte_ptr < 0) {\n      if ((int)param3[6] <= (int)byte_ptr) {\n        **param3 = (byte)current_byte;\n        byte_ptr = *param3;\n        current_byte = (uint)*byte_ptr;\n        if (current_byte != 10) goto LAB_00083c90;\n      }\n      relocation_info = process_and_validate_data_00083c40_000844c4(param1,current_byte,param3);\n      if (relocation_info == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **param3 = (byte)current_byte;\n      byte_ptr = *param3;\nLAB_00083c90:\n      *param3 = byte_ptr + 1;\n    }\n    if (result <= index + 1) {\n      return param2;\n    }\n    current_byte = (uint)stack_array[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_and_validate_data_00083c40",
            "entrypoint": "0x00083c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083c40": "process_and_validate_data_00083c40",
                "abStack_1b": "stack_array",
                "iVar1": "relocation_info",
                "local_1c": "current_byte",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "pbVar4": "byte_ptr",
                "uVar2": "result",
                "uVar3": "current_byte",
                "uVar5": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d00": {
            "additional_data": {
                "DAT_20071194": {
                    "data_1": 1,
                    "data_1194": 1,
                    "data_address": 1,
                    "data_offset": 2,
                    "decremented_offset": 1,
                    "global_offset": 1,
                    "offset_value": 1,
                    "offset_variable": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_elf32_rel": 1,
                    "rel_array": 2,
                    "relocation_array": 1,
                    "relocation_info_array": 1,
                    "relocation_table": 1
                },
                "FUNC_00082598": {
                    "initial_setup": 1,
                    "initialize": 1,
                    "initialize_function": 3,
                    "initialize_function_1": 1,
                    "perform_initialization": 1
                },
                "FUNC_0008259c": {
                    "cleanup": 2,
                    "cleanup_function": 1,
                    "finalize_function": 1,
                    "initialize_function_2": 1,
                    "perform_cleanup": 1
                },
                "FUN_00083d00": {
                    "calculate_and_adjust_memory": 1,
                    "calculate_and_adjust_offset": 3,
                    "calculate_and_update_offset": 4,
                    "calculate_new_pointer": 1,
                    "calculate_offset": 1,
                    "improve_and_relocate": 1,
                    "optimize_code": 1,
                    "perform_relocation": 1,
                    "rellocate_memory_region": 1,
                    "reloc_and_adjust_param": 1,
                    "relocate_function": 1,
                    "reverse_and_modify": 1,
                    "reverse_and_update": 1,
                    "reverse_and_update_memory_block": 1
                },
                "calculate_sum_and_assign_to_param_00082970": {
                    "calculate_sum": 2,
                    "calculate_sum_and_assign": 5
                },
                "iVar1": {
                    "result": 18,
                    "result1": 1,
                    "result_1": 1,
                    "sum": 2,
                    "sum_assigned": 1,
                    "sum_result": 8
                },
                "iVar3": {
                    "adjusted_offset": 18,
                    "adjusted_size": 1,
                    "adjusted_value": 1,
                    "calculated_offset": 1,
                    "new_offset": 7,
                    "target_address": 1,
                    "updated_offset": 2
                },
                "param_1": {
                    "arg1": 1,
                    "data": 2,
                    "input_param": 12,
                    "input_parameter": 4,
                    "input_ptr": 1,
                    "input_value": 2,
                    "offset_param": 1,
                    "original_param": 1,
                    "param": 3,
                    "pointer": 1,
                    "ptr": 1,
                    "result": 2
                },
                "param_2": {
                    "current_offset": 1,
                    "initial_offset": 4,
                    "input_value": 1,
                    "offset": 21,
                    "offset_param": 1,
                    "original_offset": 1,
                    "size": 2
                },
                "uVar2": {
                    "adjusted_offset": 2,
                    "info": 6,
                    "info_value": 1,
                    "mask": 4,
                    "masked_offset": 1,
                    "masked_value": 1,
                    "offset": 2,
                    "offset_aligned": 1,
                    "offset_extracted": 1,
                    "r_info_offset": 1,
                    "rel_entry": 1,
                    "rel_info": 3,
                    "rel_offset": 1,
                    "rel_table_offset": 1,
                    "rel_var": 1,
                    "relative_info": 1,
                    "relocation_value": 1,
                    "u_var_offset": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00082970"
            ],
            "calling": [
                "FUN_00083d9c"
            ],
            "code": "\nundefined4 calculate_and_update_offset_00083d00(undefined4 input_param,int offset)\n\n{\n  int result;\n  uint info;\n  int adjusted_offset;\n  \n  FUNC_00082598();\n  info = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  adjusted_offset = ((info - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result = calculate_sum_and_assign(input_param,0);\n    if (result == rel_array[141].r_info + info) {\n      result = calculate_sum_and_assign(input_param,-adjusted_offset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_offset;\n        *(uint *)(rel_array[141].r_info + 4) = info - adjusted_offset | 1;\n        FUNC_0008259c(input_param);\n        return 1;\n      }\n      adjusted_offset = calculate_sum_and_assign(input_param,0);\n      if (0xf < (int)(adjusted_offset - rel_array[141].r_info)) {\n        DAT_20071194 = adjusted_offset - rel_array[270].r_offset;\n        *(dword *)(rel_array[141].r_info + 4) =\n             adjusted_offset - rel_array[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(input_param);\n  return 0;\n}\n\n",
            "current_name": "calculate_and_update_offset_00083d00",
            "entrypoint": "0x00083d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083d00": "calculate_and_update_offset_00083d00",
                "calculate_sum_and_assign_to_param_00082970": "calculate_sum_and_assign",
                "iVar1": "result",
                "iVar3": "adjusted_offset",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar2": "info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "additional_data": {
                "DAT_20071190": {
                    "max_offset": 1,
                    "some_data": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 1,
                    "relocation_array": 1,
                    "relocation_table": 1,
                    "relocations_array": 1
                },
                "FUNC_00082598": {
                    "initialize": 3,
                    "some_function": 1
                },
                "FUNC_0008259c": {
                    "another_function": 1,
                    "finalize": 1,
                    "finalize_processing": 1
                },
                "FUN_00083d9c": {
                    "calculate_and_update_offset": 3,
                    "perform_relocation": 1,
                    "process_binary_function": 1,
                    "process_relocation": 2,
                    "update_function": 1,
                    "update_offset": 1,
                    "update_offsets": 1,
                    "update_relocation_entries": 3,
                    "update_relocation_entry": 3,
                    "update_relocation_info": 1,
                    "update_relocation_offset": 1,
                    "update_relocation_table": 4,
                    "update_relocations": 4
                },
                "LAB_00083e30": {
                    "finish_processing": 1,
                    "label1": 1
                },
                "bVar2": {
                    "bool_variable": 1,
                    "is2007046c": 1,
                    "is_addr_included": 1,
                    "is_condition_met": 4,
                    "is_condition_true": 3,
                    "is_current_equal": 1,
                    "is_elf_reloc": 1,
                    "is_elf_reloc_array_header": 1,
                    "is_flag_set": 1,
                    "is_found": 1,
                    "is_match": 1,
                    "is_offset2007046c": 1,
                    "is_offset_valid": 1,
                    "is_previous_index2007046c": 1,
                    "is_rva_address": 1,
                    "is_special_case": 5,
                    "is_temp_var_true": 1,
                    "is_true": 1,
                    "is_value_one": 1,
                    "is_value_zero": 1,
                    "is_var2_true": 1
                },
                "calculate_and_update_offset_00083d00": {
                    "calculate_and_apply_offset": 1,
                    "calculate_and_update_offset": 3
                },
                "dVar4": {
                    "address1": 1,
                    "adjusted_ptr": 1,
                    "current_entry": 2,
                    "current_index": 1,
                    "current_offset": 4,
                    "current_reloc_offset": 1,
                    "current_relocation": 4,
                    "dword_var": 1,
                    "dword_variable1": 1,
                    "entry": 1,
                    "entry_address": 1,
                    "entry_ptr": 1,
                    "offset": 2,
                    "previous_relocation": 1,
                    "rel_entry": 1,
                    "rel_info_ptr": 1,
                    "target_addr": 1,
                    "temp_var2": 1,
                    "updated_index": 1,
                    "var2": 1,
                    "var4": 1
                },
                "dVar7": {
                    "address2": 1,
                    "adjusted_data": 1,
                    "base_address": 1,
                    "current": 1,
                    "current_entry": 1,
                    "current_entry_address": 1,
                    "current_entry_ptr": 1,
                    "current_reloc": 1,
                    "current_relocation": 1,
                    "d_var7": 1,
                    "dword_var2": 1,
                    "dword_variable2": 1,
                    "new_entry": 1,
                    "new_offset": 2,
                    "new_relocation": 2,
                    "next_index": 1,
                    "offset_to_insert": 1,
                    "prev_addr": 1,
                    "prev_entry": 1,
                    "previous_offset": 1,
                    "ptr2": 1,
                    "rel_table": 1,
                    "temp_var4": 1,
                    "temp_variable2": 1,
                    "updated_index2": 1,
                    "var4": 1,
                    "var7": 1
                },
                "dVar9": {
                    "corresponding_relocation": 1,
                    "current_offset_target": 1,
                    "dword_var3": 1,
                    "dword_variable3": 1,
                    "final_offset": 1,
                    "new_addr": 1,
                    "new_data": 1,
                    "new_entry_ptr": 1,
                    "new_index": 1,
                    "new_rel_info_ptr": 1,
                    "new_rel_table": 1,
                    "new_reloc": 1,
                    "new_relocation": 1,
                    "new_relocation_data": 1,
                    "next_entry": 2,
                    "next_offset": 2,
                    "next_relocation": 2,
                    "prev_entry": 1,
                    "prev_entry_address": 1,
                    "prev_offset": 1,
                    "target_offset": 1,
                    "temp_var6": 1,
                    "updated_address": 1,
                    "updated_offset": 1,
                    "var6": 1,
                    "var9": 1
                },
                "iVar1": {
                    "current_offset": 2,
                    "first_offset": 1,
                    "first_offset_value": 1,
                    "index": 2,
                    "index1": 2,
                    "int_variable1": 1,
                    "iterator": 1,
                    "offset": 4,
                    "prev_offset": 2,
                    "previous_index": 1,
                    "shifted_value": 1,
                    "source_offset": 1,
                    "temp1": 3,
                    "temp_index1": 1,
                    "temp_var1": 5,
                    "var1": 1,
                    "variable1": 1
                },
                "iVar5": {
                    "current_index2": 1,
                    "current_offset": 1,
                    "index2": 3,
                    "int_variable2": 1,
                    "next_offset": 5,
                    "prev_entry_address": 1,
                    "prev_offset": 1,
                    "ptr1": 1,
                    "temp2": 3,
                    "temp_index": 1,
                    "temp_index2": 1,
                    "temp_offset": 1,
                    "temp_var": 1,
                    "temp_var2": 5,
                    "temp_variable1": 1,
                    "var5": 1,
                    "variable2": 1
                },
                "param_1": {
                    "arg1": 3,
                    "context": 1,
                    "data": 2,
                    "function_data": 1,
                    "function_param": 1,
                    "input1": 2,
                    "new_param_1": 1,
                    "param": 5,
                    "param1": 11,
                    "param_1": 3,
                    "parameter": 1
                },
                "param_2": {
                    "arg2": 3,
                    "binary_offset": 1,
                    "data_size": 1,
                    "input": 2,
                    "input2": 2,
                    "input_value": 1,
                    "new_param_2": 1,
                    "offset": 1,
                    "param2": 11,
                    "rel_table": 1,
                    "relocation_data": 1,
                    "relocation_entry": 1,
                    "relocation_index": 1,
                    "relocation_offset": 1,
                    "relocation_ptr": 1,
                    "relocation_table": 1,
                    "table_size": 1
                },
                "uVar3": {
                    "adjusted_offset": 1,
                    "adjusted_size": 1,
                    "entry_address": 1,
                    "entry_offset": 1,
                    "entry_size": 1,
                    "extracted_info": 1,
                    "first_value": 1,
                    "first_word": 1,
                    "flag": 2,
                    "flags": 5,
                    "offset": 2,
                    "rel_info": 1,
                    "rel_type_offset": 1,
                    "relocation_flag": 1,
                    "size_value": 1,
                    "temp": 1,
                    "temp_var1": 1,
                    "uint_variable1": 1,
                    "unsigned_var": 1,
                    "value": 1,
                    "value1": 1,
                    "var1": 1,
                    "var3": 1
                },
                "uVar6": {
                    "adjusted_offset": 3,
                    "base_offset": 1,
                    "current_size": 1,
                    "entry_size": 1,
                    "offset": 4,
                    "offset_delta": 1,
                    "offset_diff": 1,
                    "offset_value": 1,
                    "rel_offset": 2,
                    "relative_offset": 2,
                    "relocation_offset": 1,
                    "size": 1,
                    "temp_var3": 1,
                    "total_size": 1,
                    "u_var6": 1,
                    "uint_variable2": 1,
                    "unsigned_var2": 1,
                    "updated_info": 1,
                    "updated_temp": 1,
                    "value2": 1,
                    "var3": 1,
                    "var6": 1
                },
                "uVar8": {
                    "adjusted_address": 1,
                    "adjusted_size": 3,
                    "final_info": 1,
                    "final_offset": 1,
                    "new_entry_size": 1,
                    "new_offset": 7,
                    "new_rel_offset": 1,
                    "new_relocation_offset": 1,
                    "next_offset": 1,
                    "next_size": 1,
                    "offset": 1,
                    "rel_info": 1,
                    "size": 1,
                    "temp_var5": 1,
                    "uint_variable3": 1,
                    "unsigned_var3": 1,
                    "updated_offset": 2,
                    "updated_value": 1,
                    "var5": 1,
                    "var8": 1
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "calling": [
                "FUN_00083adc",
                "FUN_000846a4",
                "FUN_00081e04",
                "FUN_00083808",
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081e14"
            ],
            "code": "\nvoid calculate_and_update_offset_00083d9c(undefined4 param1,int param2)\n\n{\n  int temp_var1;\n  bool is_special_case;\n  uint flags;\n  dword current_relocation;\n  int next_offset;\n  uint offset;\n  dword new_offset;\n  uint new_offset;\n  dword next_offset;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  flags = *(uint *)(param2 + -4);\n  new_offset = param2 - 8;\n  offset = flags & 0xfffffffe;\n  current_relocation = new_offset + offset;\n  new_offset = *(uint *)(current_relocation + 4) & 0xfffffffc;\n  if (relocation_array[141].r_info == current_relocation) {\n    new_offset = new_offset + offset;\n    if (-1 < (int)(flags << 0x1f)) {\n      new_offset = new_offset - *(int *)(param2 + -8);\n      next_offset = *(int *)(new_offset + 0xc);\n      temp_var1 = *(int *)(new_offset + 8);\n      new_offset = new_offset + *(int *)(param2 + -8);\n      *(int *)(temp_var1 + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = temp_var1;\n    }\n    current_relocation = relocation_array[269].r_info;\n    *(uint *)(new_offset + 4) = new_offset | 1;\n    relocation_array[141].r_info = new_offset;\n    if (current_relocation <= new_offset) {\n      calculate_and_update_offset_00083d9c(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(current_relocation + 4) = new_offset;\n    if ((flags & 1) == 0) {\n      new_offset = new_offset - *(int *)(param2 + -8);\n      temp_var1 = *(int *)(new_offset + 8);\n      offset = offset + *(int *)(param2 + -8);\n      if (temp_var1 == 0x2007046c) {\n        is_special_case = true;\n      }\n      else {\n        next_offset = *(int *)(new_offset + 0xc);\n        *(int *)(temp_var1 + 0xc) = next_offset;\n        *(int *)(next_offset + 8) = temp_var1;\n        is_special_case = false;\n      }\n    }\n    else {\n      is_special_case = false;\n    }\n    if (-1 < *(int *)(current_relocation + new_offset + 4) << 0x1f) {\n      offset = offset + new_offset;\n      temp_var1 = *(int *)(current_relocation + 8);\n      if ((!is_special_case) && (temp_var1 == 0x2007046c)) {\n        relocation_array[142].r_info = new_offset;\n        relocation_array[143].r_offset = new_offset;\n        *(undefined4 *)(new_offset + 0xc) = 0x2007046c;\n        *(undefined4 *)(new_offset + 8) = 0x2007046c;\n        *(uint *)(new_offset + 4) = offset | 1;\n        *(uint *)(new_offset + offset) = offset;\n        goto label1;\n      }\n      next_offset = *(int *)(current_relocation + 0xc);\n      *(int *)(temp_var1 + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = temp_var1;\n    }\n    *(uint *)(new_offset + 4) = offset | 1;\n    *(uint *)(new_offset + offset) = offset;\n    if (!is_special_case) {\n      if (offset < 0x200) {\n        flags = offset & 0xfffffff8;\n        temp_var1 = *(int *)((int)&relocation_array[0x8d].r_info + flags);\n        relocation_array[141].r_offset =\n             relocation_array[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(new_offset + 8) = temp_var1;\n        *(uint *)(new_offset + 0xc) = flags + 0x20070464;\n        *(dword *)((int)&relocation_array[0x8d].r_info + flags) = new_offset;\n        *(dword *)(temp_var1 + 0xc) = new_offset;\n        FUNC_0008259c(param1);\n        return;\n      }\n      flags = offset >> 9;\n      if (flags < 5) {\n        temp_var1 = (offset >> 6) + 0x38;\n        next_offset = temp_var1 * 2;\n      }\n      else if (flags < 0x15) {\n        temp_var1 = flags + 0x5b;\n        next_offset = temp_var1 * 2;\n      }\n      else if (flags < 0x55) {\n        temp_var1 = (offset >> 0xc) + 0x6e;\n        next_offset = temp_var1 * 2;\n      }\n      else if (flags < 0x155) {\n        temp_var1 = (offset >> 0xf) + 0x77;\n        next_offset = temp_var1 * 2;\n      }\n      else if (flags < 0x555) {\n        temp_var1 = (offset >> 0x12) + 0x7c;\n        next_offset = temp_var1 * 2;\n      }\n      else {\n        next_offset = 0xfc;\n        temp_var1 = 0x7e;\n      }\n      next_offset = next_offset * 4 + 0x20070464;\n      current_relocation = (&relocation_array[0x8d].r_info)[next_offset];\n      if (current_relocation == next_offset) {\n        relocation_array[141].r_offset =\n             relocation_array[141].r_offset | 1 << (temp_var1 >> 2 & 0xffU);\n        next_offset = current_relocation;\n      }\n      else {\n        do {\n          if ((*(uint *)(current_relocation + 4) & 0xfffffffc) <= offset) break;\n          current_relocation = *(dword *)(current_relocation + 8);\n        } while (next_offset != current_relocation);\n        next_offset = *(dword *)(current_relocation + 0xc);\n      }\n      *(dword *)(new_offset + 0xc) = next_offset;\n      *(dword *)(new_offset + 8) = current_relocation;\n      *(dword *)(next_offset + 8) = new_offset;\n      *(dword *)(current_relocation + 0xc) = new_offset;\n    }\n  }\nlabel1:\n  FUNC_0008259c(param1);\n  return;\n}\n\n",
            "current_name": "calculate_and_update_offset_00083d9c",
            "entrypoint": "0x00083d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00083d9c": "calculate_and_update_offset_00083d9c",
                "LAB_00083e30": "label1",
                "bVar2": "is_special_case",
                "calculate_and_update_offset_00083d00": "calculate_and_update_offset",
                "dVar4": "current_relocation",
                "dVar7": "new_offset",
                "dVar9": "next_offset",
                "iVar1": "temp_var1",
                "iVar5": "next_offset",
                "param_1": "param1",
                "param_2": "param2",
                "uVar3": "flags",
                "uVar6": "offset",
                "uVar8": "new_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083f34": {
            "additional_data": {
                "FUN_00083f34": {
                    "process_and_copy_data": 3,
                    "process_data": 25,
                    "process_data_and_assign_memory_blocks": 1,
                    "process_input": 1
                },
                "calculate_and_update_offset_00083d9c": {
                    "calculate_and_update_offset": 2
                },
                "copy_memory_segment_0008234c": {
                    "copy_memory_segment": 2
                },
                "find_first_occurrence_00084384": {
                    "find_first_occurrence": 2
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 24,
                    "return_value": 3,
                    "status": 1,
                    "temp_result": 1
                },
                "local_2c": {
                    "local": 1,
                    "local_count": 1,
                    "local_flag": 2,
                    "local_flag_var": 1,
                    "local_value": 2,
                    "local_var": 6,
                    "local_variable": 1,
                    "offset": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 3,
                    "temp7": 3,
                    "temp_flag": 1,
                    "temp_local_var1": 1,
                    "temp_size4": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "var9": 1
                },
                "param_1": {
                    "data": 2,
                    "data_buffer": 2,
                    "destination": 1,
                    "output": 14,
                    "output_array": 2,
                    "output_buffer": 3,
                    "output_data_buffer": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "result": 2,
                    "temp_param1": 1
                },
                "param_2": {
                    "data": 3,
                    "info": 1,
                    "input": 10,
                    "input1": 1,
                    "input_array": 2,
                    "input_buffer": 3,
                    "input_data": 3,
                    "input_data_buffer": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "param_array": 1,
                    "params": 1,
                    "source_array": 1,
                    "temp_param2": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "blocks": 1,
                    "context": 1,
                    "data": 2,
                    "info": 1,
                    "info_array": 1,
                    "input2": 1,
                    "mem_blocks": 2,
                    "memory": 1,
                    "memory_blocks": 3,
                    "memory_info": 1,
                    "memory_pointer": 1,
                    "metadata": 1,
                    "offset_ptr": 1,
                    "output": 1,
                    "param_pointer_array": 1,
                    "parameters": 1,
                    "params": 1,
                    "params_array": 1,
                    "pointers": 1,
                    "ptr_list": 2,
                    "ptrs": 1,
                    "resources": 2,
                    "temp_param3": 1
                },
                "puVar6": {
                    "current_pointer": 1,
                    "input_ptr": 1,
                    "next_pos": 1,
                    "pointer1": 1,
                    "ptr1": 18,
                    "ptr_a": 1,
                    "temp_pointer": 2,
                    "temp_pointer1": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 2
                },
                "puVar7": {
                    "array_pointer": 1,
                    "chunk": 1,
                    "current_pointer": 1,
                    "data_type_ptr": 1,
                    "input_ptr": 1,
                    "next_pointer": 1,
                    "pointer2": 1,
                    "ptr2": 18,
                    "ptr_b": 1,
                    "temp_pointer2": 2,
                    "temp_ptr2": 2
                },
                "rearrange_and_assign_memory_blocks_00081e14": {
                    "rearrange_and_assign_memory_blocks": 1,
                    "rearrange_and_assign_memory_blocks1": 1
                },
                "rearrange_and_assign_memory_blocks_000825b0": {
                    "rearrange_and_assign_memory_blocks2": 2
                },
                "reverse_copy_memory_00082438": {
                    "reverse_copy_memory": 2
                },
                "uVar10": {
                    "copy_size": 1,
                    "copy_size_var": 1,
                    "count": 2,
                    "count3": 1,
                    "offset": 2,
                    "partial_size": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp2": 3,
                    "temp5": 3,
                    "temp_count22": 1,
                    "temp_size": 2,
                    "temp_size2": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "temp_value4": 1,
                    "total_copied": 1,
                    "u_var10": 1,
                    "var10": 1,
                    "var2": 1,
                    "var3": 1,
                    "var7": 1
                },
                "uVar11": {
                    "amount": 1,
                    "copy_result": 1,
                    "count4": 1,
                    "increment": 2,
                    "multiplier": 1,
                    "num_bytes": 1,
                    "offset": 1,
                    "result_var": 1,
                    "temp2": 2,
                    "temp3": 3,
                    "temp6": 3,
                    "temp_count5": 1,
                    "temp_result": 1,
                    "temp_size2": 1,
                    "temp_size3": 1,
                    "temp_value3": 1,
                    "temp_value4": 1,
                    "temp_value5": 1,
                    "temp_var3": 1,
                    "u_var11": 1,
                    "var11": 1,
                    "var3": 1,
                    "var4": 1,
                    "var5": 1
                },
                "uVar2": {
                    "block_offset": 1,
                    "block_size": 2,
                    "count": 1,
                    "data1": 1,
                    "element1": 1,
                    "first_value": 1,
                    "length": 1,
                    "offset": 1,
                    "start": 1,
                    "start_index": 1,
                    "start_pos": 1,
                    "temp1": 2,
                    "temp_count24": 1,
                    "temp_var1": 3,
                    "value1": 9,
                    "value_a": 1,
                    "var1": 1,
                    "var2": 1
                },
                "uVar3": {
                    "block_size": 1,
                    "data2": 1,
                    "element2": 1,
                    "end": 1,
                    "flag": 1,
                    "size": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp_count14": 1,
                    "temp_value": 1,
                    "temp_var": 4,
                    "temp_var2": 3,
                    "value2": 9,
                    "value_b": 1,
                    "var2": 1,
                    "var3": 1
                },
                "uVar4": {
                    "flag": 11,
                    "flag1": 1,
                    "flags": 15,
                    "temp": 1,
                    "temp2": 1,
                    "temp_result4": 1
                },
                "uVar5": {
                    "count": 2,
                    "flag_value": 3,
                    "flag_var": 1,
                    "num_blocks": 1,
                    "size": 1,
                    "temp": 6,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_flag": 1,
                    "temp_result3": 1,
                    "temp_value": 2,
                    "temp_value1": 1,
                    "temp_var2": 1,
                    "u_var5": 1,
                    "value": 2,
                    "value1": 2,
                    "var1": 1,
                    "var5": 1
                },
                "uVar8": {
                    "copy_size": 1,
                    "count": 5,
                    "count1": 1,
                    "data_var": 1,
                    "len": 1,
                    "length": 4,
                    "size": 5,
                    "size1": 1,
                    "size_a": 1,
                    "temp3": 1,
                    "temp_count3": 1,
                    "temp_value": 2,
                    "temp_value2": 1,
                    "u_var8": 1,
                    "value2": 1,
                    "var1": 1,
                    "var8": 2
                },
                "uVar9": {
                    "allocation_size": 1,
                    "count2": 1,
                    "limit": 1,
                    "new_pos": 1,
                    "new_size": 1,
                    "new_value": 1,
                    "size": 3,
                    "size2": 1,
                    "size_b": 1,
                    "size_var": 1,
                    "temp1": 3,
                    "temp4": 3,
                    "temp_count23": 1,
                    "temp_size1": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "threshold": 1,
                    "u_var9": 2,
                    "value3": 1,
                    "var1": 1,
                    "var2": 1,
                    "var3": 1,
                    "var9": 1
                },
                "validate_and_process_data_00083adc": {
                    "validate_and_process_data": 2
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00084384",
                "FUN_00083808",
                "FUN_000825b0",
                "FUN_00082438",
                "FUN_00081e14",
                "FUN_0008234c"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nundefined4 process_and_copy_data_00083f34(undefined4 *output,uint *input,uint **memory_blocks)\n\n{\n  int result;\n  uint value1;\n  uint value2;\n  ushort flags;\n  uint temp;\n  uint *ptr1;\n  uint *ptr2;\n  uint count;\n  uint size;\n  uint temp2;\n  uint temp6;\n  uint local_var;\n  \n  if (memory_blocks[2] != (uint *)0x0) {\n    flags = *(ushort *)(input + 3);\n    temp = (uint)flags;\n    if (((int)(temp << 0x1c) < 0) && (input[4] != 0)) {\n      ptr2 = *memory_blocks;\n    }\n    else {\n      result = process_data_00083808(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flags = *(ushort *)(input + 3);\n      temp = (uint)flags;\n      ptr2 = *memory_blocks;\n    }\n    if ((flags & 2) == 0) {\n      value1 = temp & 2;\n      temp2 = value1;\n      count = value1;\n      local_var = value1;\n      if ((temp & 1) == 0) {\n        value1 = 0;\n        temp2 = 0;\n        while( true ) {\n          while (value1 == 0) {\n            temp2 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            value1 = *ptr1;\n          }\n          count = input[2];\n          if ((int)(temp << 0x16) < 0) {\n            if (value1 < count) {\n              temp = *input;\n              count = value1;\n            }\n            else if ((temp & 0x480) == 0) {\n              temp = *input;\n            }\n            else {\n              result = *input - input[4];\n              count = result + 1 + value1;\n              size = (int)(input[5] * 3) / 2;\n              if (count <= size) {\n                count = size;\n              }\n              if ((int)(temp << 0x15) < 0) {\n                size = rearrange_and_assign_memory_blocks(output,count);\n                if (size == 0) {\n                  *output = 0xc;\n                  flags = *(ushort *)(input + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory_segment(size,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                size = rearrange_and_assign_memory_blocks2(output);\n                if (size == 0) {\n                  calculate_and_update_offset(output,input[4]);\n                  flags = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp = size + result;\n              input[4] = size;\n              input[5] = count;\n              *input = temp;\n              input[2] = count - result;\n              count = value1;\n            }\n            reverse_copy_memory(temp,temp2,count);\n            input[2] = input[2] - count;\n            *input = *input + count;\n            count = value1;\n          }\n          else if ((input[4] < *input) || (temp = input[5], value1 < temp)) {\n            if (value1 < count) {\n              count = value1;\n            }\n            reverse_copy_memory(*input,temp2,count);\n            temp = input[2];\n            input[2] = temp - count;\n            *input = *input + count;\n            if ((temp - count == 0) && (result = validate_and_process_data(output,input), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            count = 0x7fffffff;\n            if (value1 < 0x7fffffff) {\n              count = value1;\n            }\n            count = (*(code *)input[9])(output,input[7],temp2,(count / temp) * temp);\n            if ((int)count < 1) goto LAB_0008402e;\n          }\n          ptr1 = memory_blocks[2];\n          temp2 = temp2 + count;\n          value1 = value1 - count;\n          memory_blocks[2] = (uint *)((int)ptr1 - count);\n          if ((uint *)((int)ptr1 - count) == (uint *)0x0) break;\n          temp = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (value1 == 0) {\n            count = *ptr2;\n            value1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_first_occurrence(count,10,value1);\n            if (result == 0) {\n              temp2 = value1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp2 = (result + 1) - count;\n              local_var = 1;\n            }\n          }\n          size = *input;\n          temp = temp2;\n          if (value1 <= temp2) {\n            temp = value1;\n          }\n          value2 = input[5];\n          if ((input[4] < size) && (temp6 = input[2] + value2, (int)temp6 < (int)temp)) {\n            reverse_copy_memory(size,count,temp6);\n            *input = *input + temp6;\n            result = validate_and_process_data(output,input);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp < (int)value2) {\n            reverse_copy_memory(size,count,temp);\n            input[2] = input[2] - temp;\n            *input = temp + *input;\n            temp6 = temp;\n          }\n          else {\n            temp6 = (*(code *)input[9])(output,input[7],count,value2);\n            if ((int)temp6 < 1) goto LAB_0008402e;\n          }\n          temp2 = temp2 - temp6;\n          if (temp2 == 0) {\n            result = validate_and_process_data(output,input);\n            if (result != 0) goto LAB_0008402e;\n            local_var = 0;\n          }\n          ptr1 = memory_blocks[2];\n          count = count + temp6;\n          value1 = value1 - temp6;\n          memory_blocks[2] = (uint *)((int)ptr1 - temp6);\n        } while ((uint *)((int)ptr1 - temp6) != (uint *)0x0);\n      }\n    }\n    else {\n      value1 = 0;\n      temp = 0;\n      do {\n        while( true ) {\n          temp2 = temp;\n          if (0x7ffffbff < temp) {\n            temp2 = 0x7ffffc00;\n          }\n          if (temp != 0) break;\n          value1 = *ptr2;\n          temp = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],value1,temp2);\n        if (result < 1) {\nLAB_0008402e:\n          flags = *(ushort *)(input + 3);\nLAB_00084030:\n          *(ushort *)(input + 3) = flags | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = memory_blocks[2];\n        value1 = value1 + result;\n        temp = temp - result;\n        memory_blocks[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_and_copy_data_00083f34",
            "entrypoint": "0x00083f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083f34": "process_and_copy_data_00083f34",
                "calculate_and_update_offset_00083d9c": "calculate_and_update_offset",
                "copy_memory_segment_0008234c": "copy_memory_segment",
                "find_first_occurrence_00084384": "find_first_occurrence",
                "iVar1": "result",
                "local_2c": "local_var",
                "param_1": "output",
                "param_2": "input",
                "param_3": "memory_blocks",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "rearrange_and_assign_memory_blocks_00081e14": "rearrange_and_assign_memory_blocks",
                "rearrange_and_assign_memory_blocks_000825b0": "rearrange_and_assign_memory_blocks2",
                "reverse_copy_memory_00082438": "reverse_copy_memory",
                "uVar10": "temp2",
                "uVar11": "temp6",
                "uVar2": "value1",
                "uVar3": "value2",
                "uVar4": "flags",
                "uVar5": "temp",
                "uVar8": "count",
                "uVar9": "size",
                "validate_and_process_data_00083adc": "validate_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084290": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0x20070874": {
                    "memory_address": 5
                },
                "DAT_FUN_00084290": {
                    "new_variable": 1
                },
                "FUN_00084290": {
                    "get_base_address": 1,
                    "get_default_value": 2,
                    "get_initial_value": 2,
                    "get_magic_number": 1,
                    "get_memory_address": 24,
                    "get_return_value": 1
                },
                "PTR_00000000": {
                    "memory_address": 1
                },
                "PTR_20070874": {
                    "address": 1
                },
                "PTR_DAT_00084290": {
                    "pointer_to_data": 1
                },
                "PTR_FUN_00084290": {
                    "new_pointer1": 1,
                    "pointer_to_function": 1
                },
                "PTR_FUN_00084290_00": {
                    "new_pointer2": 1
                },
                "PTR_dat_20070874": {
                    "memory_address": 1
                },
                "new_variable_name_1": {
                    "memory_address": 1
                },
                "undefined4": {
                    "uint32": 1,
                    "uint32_t": 9,
                    "unsigned_int": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nuint32_t get_memory_address_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "current_name": "get_memory_address_00084290",
            "entrypoint": "0x00084290",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084298": {
            "additional_data": {
                "274": {
                    "index": 2
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 2,
                    "elf32_rel_table": 1,
                    "elf_rel_array": 5,
                    "elf_relocation_array": 3,
                    "rel_array": 9,
                    "relocation_array": 7,
                    "relocation_table": 4
                },
                "FUN_00084298": {
                    "get_elf32_rel_info": 1,
                    "get_elf32_rel_r_info": 1,
                    "get_elf_rel_info": 4,
                    "get_elf_relocation_info": 3,
                    "get_elf_relocation_type": 1,
                    "get_r_info": 2,
                    "get_r_info_from_elf32_rel_array": 1,
                    "get_r_info_of_elf32_rel_array": 1,
                    "get_r_info_value": 2,
                    "get_rel_info": 2,
                    "get_rel_r_info": 3,
                    "get_reloc_type": 1,
                    "get_relocation_info": 9
                },
                "r_info": {
                    "info": 2,
                    "r_info_of_index_274": 1,
                    "rel_r_info": 1,
                    "relocation_info": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\ndword get_elf_relocation_info_00084298(void)\n\n{\n  return rel_array[274].info;\n}\n\n",
            "current_name": "get_elf_relocation_info_00084298",
            "entrypoint": "0x00084298",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00084298": "get_elf_relocation_info_00084298",
                "r_info": "info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "FUN_000842a4": {
                    "handle_memory_initialization": 1,
                    "initialize_and_assign_memory": 1,
                    "initialize_and_check_memory": 1,
                    "initialize_memory": 8,
                    "initialize_memory_and_assign_blocks": 2,
                    "initialize_memory_and_check_error": 1,
                    "initialize_memory_and_check_errors": 5,
                    "initialize_memory_blocks": 1,
                    "process_memory_block": 1,
                    "rearrange_and_assign_memory_blocks": 6,
                    "rearrange_memory_and_assign_blocks": 1,
                    "rearrange_memory_blocks": 2
                },
                "auStack_54": {
                    "additional_memory": 1,
                    "auxiliary_stack": 2,
                    "buffer": 2,
                    "error_buffer": 1,
                    "local_stack_54": 1,
                    "memory_stack": 1,
                    "stack_array": 11,
                    "stack_data": 1,
                    "stack_value": 1,
                    "stack_var": 2,
                    "temp_array": 1,
                    "temp_stack": 2,
                    "temporary_buffer": 1,
                    "temporary_memory": 1,
                    "temporary_stack": 1,
                    "tmp_array": 1
                },
                "bVar5": {
                    "bool_var": 1,
                    "check_condition": 1,
                    "check_flag": 3,
                    "check_value": 2,
                    "condition": 1,
                    "condition_check": 1,
                    "flag": 2,
                    "flag1": 1,
                    "flag_value": 1,
                    "is_block2000": 1,
                    "is_condition_met": 7,
                    "is_condition_satisfied": 1,
                    "is_flag_set": 1,
                    "is_matched": 1,
                    "is_memory_check_pass": 1,
                    "is_special_block": 1,
                    "is_special_case": 2,
                    "is_type8000": 1,
                    "is_valid": 1,
                    "is_writable": 1
                },
                "extract_return_value_and_update_param_000846dc": {
                    "extract_and_update_return_value_helper": 1,
                    "extract_return_value_and_update_param": 2
                },
                "iVar2": {
                    "allocation_size": 1,
                    "block_size": 2,
                    "error_code": 2,
                    "init_result": 1,
                    "initialization_result": 1,
                    "initialize_error": 1,
                    "initialize_value": 1,
                    "int_value1": 1,
                    "int_var1": 1,
                    "memory_size": 2,
                    "memory_status": 2,
                    "result": 5,
                    "result1": 1,
                    "return_value": 7,
                    "status": 2,
                    "value2": 1
                },
                "iVar3": {
                    "allocated_memory": 1,
                    "assigned_memory": 2,
                    "extract_return_value": 1,
                    "int_value2": 1,
                    "int_var2": 1,
                    "memory_value": 1,
                    "rearrange_result": 2,
                    "rearrange_status": 1,
                    "rearrange_value": 2,
                    "rearranged_block": 1,
                    "rearranged_blocks": 1,
                    "rearranged_memory": 5,
                    "rearranged_memory_blocks": 1,
                    "rearranged_result": 1,
                    "rearranged_value": 2,
                    "rearrangement_result": 1,
                    "result": 4,
                    "result2": 1,
                    "return_value": 1,
                    "value3": 1
                },
                "initialize_memory_and_check_errors_000846b4": {
                    "initialize_memory_and_check_errors": 1,
                    "initialize_memory_and_check_errors_helper": 1
                },
                "local_50": {
                    "local_flag": 1,
                    "local_flags": 2,
                    "local_val": 2,
                    "local_value": 15,
                    "local_value_50": 1,
                    "local_var": 6,
                    "local_variable": 3,
                    "some_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "function_param": 1,
                    "function_param1": 2,
                    "function_pointer": 1,
                    "input_1": 1,
                    "input_param": 2,
                    "input_ptr": 1,
                    "memory": 1,
                    "memory_address": 1,
                    "memory_blocks": 1,
                    "memory_pointer": 1,
                    "memory_size": 2,
                    "param": 1,
                    "param1": 11,
                    "param_one": 1,
                    "param_size": 1,
                    "ptr_to_memory": 2
                },
                "param_2": {
                    "arg2": 1,
                    "function_data": 1,
                    "function_param2": 2,
                    "function_params": 1,
                    "input_2": 1,
                    "memory_block": 2,
                    "memory_data": 1,
                    "memory_info": 1,
                    "output_param": 2,
                    "output_ptr": 1,
                    "param2": 11,
                    "param_array": 2,
                    "param_two": 1,
                    "parameters": 1,
                    "ptr_to_param": 1,
                    "ptr_to_params": 1,
                    "struct_ptr": 1
                },
                "rearrange_and_assign_memory_blocks_00081e14": {
                    "rearrange_and_assign_memory_blocks": 2,
                    "rearrange_and_assign_memory_blocks_helper": 1
                },
                "uVar1": {
                    "block_flags": 1,
                    "field_value": 1,
                    "flag": 1,
                    "flags": 5,
                    "param2_value": 1,
                    "param_value": 1,
                    "param_value1": 1,
                    "temp_value": 1,
                    "ushort_val": 3,
                    "ushort_value": 9,
                    "ushort_var": 2,
                    "value": 1,
                    "value1": 4
                },
                "uVar4": {
                    "block_id": 1,
                    "converted_flags": 1,
                    "converted_value": 1,
                    "field_value_as_int": 1,
                    "flag_value": 1,
                    "flags": 1,
                    "flags_copy": 1,
                    "param2_value_as_u_int": 1,
                    "param_value2": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "u_val": 1,
                    "u_value": 1,
                    "u_var4": 1,
                    "uint_val": 2,
                    "uint_value": 8,
                    "uint_var": 1,
                    "unsigned_flags": 1,
                    "ushort_var2": 1,
                    "value2": 3,
                    "value4": 1
                }
            },
            "called": [
                "FUN_000846b4",
                "FUN_000846dc",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083808"
            ],
            "code": "\nvoid initialize_memory_and_check_errors_000842a4(int param1,int *param2)\n\n{\n  ushort ushort_value;\n  int return_value;\n  int rearranged_memory;\n  uint uint_value;\n  bool is_condition_met;\n  undefined stack_array [4];\n  uint local_value;\n  \n  ushort_value = *(ushort *)(param2 + 3);\n  uint_value = (uint)ushort_value;\n  if ((int)(uint_value << 0x1e) < 0) {\n    *param2 = (int)param2 + 0x43;\n    param2[4] = (int)param2 + 0x43;\n    param2[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)param2 + 0xe)) {\n    return_value = initialize_memory_and_check_errors_000842a4(param1,(int)*(short *)((int)param2 + 0xe),stack_array);\n    if (-1 < return_value) {\n      is_condition_met = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (param2[10] == 0x8449d)) {\n        return_value = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x400;\n        param2[0x13] = 0x400;\n      }\n      else {\n        return_value = 0x400;\n        *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    ushort_value = *(ushort *)(param2 + 3);\n    uint_value = (uint)ushort_value;\n  }\n  *(ushort *)(param2 + 3) = ushort_value | 0x800;\n  if ((uint_value & 0x80) == 0) {\n    return_value = 0x400;\n  }\n  else {\n    return_value = 0x40;\n  }\n  is_condition_met = false;\nLAB_00084300:\n  rearranged_memory = rearrange_and_assign_memory_blocks(param1,return_value);\n  ushort_value = *(ushort *)(param2 + 3);\n  if (rearranged_memory == 0) {\n    if (-1 < (int)((uint)ushort_value << 0x16)) {\n      *(ushort *)(param2 + 3) = ushort_value | 2;\n      *param2 = (int)param2 + 0x43;\n      param2[4] = (int)param2 + 0x43;\n      param2[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(param1 + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(param2 + 3) = ushort_value | 0x80;\n    *param2 = rearranged_memory;\n    param2[4] = rearranged_memory;\n    param2[5] = return_value;\n    if ((is_condition_met) && (return_value = extract_return_value_and_update_param(param1,(int)*(short *)((int)param2 + 0xe)), return_value != 0))\n    {\n      *(ushort *)(param2 + 3) = *(ushort *)(param2 + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_and_check_errors_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "initialize_memory_and_check_errors_000842a4",
                "auStack_54": "stack_array",
                "bVar5": "is_condition_met",
                "extract_return_value_and_update_param_000846dc": "extract_return_value_and_update_param",
                "iVar2": "return_value",
                "iVar3": "rearranged_memory",
                "initialize_memory_and_check_errors_000846b4": "initialize_memory_and_check_errors",
                "local_50": "local_value",
                "param_1": "param1",
                "param_2": "param2",
                "rearrange_and_assign_memory_blocks_00081e14": "rearrange_and_assign_memory_blocks",
                "uVar1": "ushort_value",
                "uVar4": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084384": {
            "additional_data": {
                "FUN_00084384": {
                    "find_char_in_array": 5,
                    "find_char_in_buffer": 1,
                    "find_char_sequence": 3,
                    "find_character": 3,
                    "find_character_sequence": 4,
                    "find_first_char_index": 1,
                    "find_first_character": 1,
                    "find_first_occurrence": 12,
                    "find_next_occurrence": 1
                },
                "bVar4": {
                    "end_condition": 1,
                    "found": 2,
                    "is_last": 3,
                    "is_last_char": 1,
                    "is_last_character": 2,
                    "is_last_element": 3,
                    "is_last_index": 9,
                    "is_last_iteration": 5,
                    "loop_condition": 1,
                    "reached_end": 4
                },
                "iVar2": {
                    "current_index": 1,
                    "index": 30
                },
                "param_1": {
                    "arr": 1,
                    "array": 14,
                    "array_ptr": 1,
                    "buffer": 5,
                    "data": 2,
                    "input_array": 7,
                    "input_buffer": 1
                },
                "param_2": {
                    "char_to_find": 1,
                    "character": 8,
                    "search_char": 1,
                    "target": 10,
                    "target_byte": 1,
                    "target_char": 6,
                    "target_character": 2,
                    "target_value": 1,
                    "value": 1
                },
                "param_3": {
                    "array_length": 12,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "length": 11,
                    "size": 6
                },
                "puVar3": {
                    "array_pointer": 1,
                    "current": 2,
                    "current_element": 2,
                    "current_pointer": 2,
                    "current_position": 1,
                    "current_ptr": 11,
                    "next_data": 1,
                    "next_occurrence": 1,
                    "ptr": 9,
                    "temp_ptr": 1
                },
                "uVar1": {
                    "current_value": 1,
                    "result": 4,
                    "temp": 7,
                    "temp_var": 2,
                    "value": 1,
                    "xor_result": 15,
                    "xor_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint array_length)\n\n{\n  uint xor_result;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < array_length) {\n      current_ptr = array;\n      do {\n        xor_result = *current_ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = current_ptr;\n        if ((xor_result + 0xfefefeff & ~xor_result & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_000843dc;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (array_length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    current_ptr = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (array_length == 0) goto LAB_000843dc;\n      current_ptr = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "current_name": "find_first_occurrence_00084384",
            "entrypoint": "0x00084384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "bVar4": "is_last_index",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "target",
                "param_3": "array_length",
                "puVar3": "current_ptr",
                "uVar1": "xor_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084464": {
            "additional_data": {
                "DAT_200711bc": {
                    "error_code": 1
                },
                "FUN_00084464": {
                    "check_and_process_data": 1,
                    "process_and_check_data": 7,
                    "process_and_handle_data": 2,
                    "process_and_initialize": 1,
                    "process_application_data": 1,
                    "process_data": 16,
                    "process_data_and_check": 1,
                    "process_data_and_check_error": 1,
                    "process_function": 1
                },
                "iVar1": {
                    "process_result": 2,
                    "result": 22,
                    "return_value": 6,
                    "status": 1
                },
                "in_lr": {
                    "in_link_register": 1,
                    "in_lr": 3,
                    "link_register": 2,
                    "temp_var4": 1,
                    "unaff_param_4": 1,
                    "unknown_value4": 1,
                    "unused4": 11,
                    "unused_4": 1,
                    "unused_lr": 1,
                    "unused_param4": 2,
                    "unused_ret_val": 1,
                    "unused_var4": 3,
                    "unused_variable_lr": 1
                },
                "initialize_application_and_check_error_00084700": {
                    "initialize_and_check_error": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "error_flag": 1,
                    "error_status": 1,
                    "output": 20,
                    "output_array": 2,
                    "result": 6
                },
                "param_2": {
                    "data": 6,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input": 19,
                    "input_array": 2,
                    "input_buffer": 1,
                    "input_pointer": 1
                },
                "param_3": {
                    "arg1": 3,
                    "config": 1,
                    "config_param1": 1,
                    "initial_value": 1,
                    "param1": 2,
                    "param3": 8,
                    "param_a": 11,
                    "value1": 4
                },
                "param_4": {
                    "arg2": 3,
                    "config_param2": 1,
                    "new_value": 1,
                    "param2": 2,
                    "param4": 8,
                    "param_b": 11,
                    "settings": 1,
                    "value2": 4
                },
                "process_data_000811cc": {
                    "process_data": 1
                },
                "uVar2": {
                    "data": 2,
                    "data_value": 5,
                    "extracted_value": 1,
                    "input_value": 1,
                    "short_value": 4,
                    "ushort_val": 1,
                    "ushort_value": 2,
                    "value": 15
                },
                "unaff_r4": {
                    "register_r4": 1,
                    "temp_var1": 1,
                    "unaff_param_1": 1,
                    "unaff_r4": 1,
                    "unaff_value4": 1,
                    "unaff_var1": 1,
                    "unaffected_r4": 1,
                    "unknown_value1": 1,
                    "unused1": 11,
                    "unused4": 1,
                    "unused_1": 1,
                    "unused_param1": 2,
                    "unused_r4": 1,
                    "unused_var1": 3,
                    "unused_variable4": 1
                },
                "unaff_r5": {
                    "register_r5": 1,
                    "temp_var2": 1,
                    "unaff_param_2": 1,
                    "unaff_r5": 1,
                    "unaff_value5": 1,
                    "unaff_var2": 1,
                    "unaffected_r5": 1,
                    "unknown_value2": 1,
                    "unused2": 11,
                    "unused5": 1,
                    "unused_2": 1,
                    "unused_param2": 2,
                    "unused_r5": 1,
                    "unused_var2": 3,
                    "unused_variable5": 1
                },
                "unaff_r6": {
                    "register_r6": 1,
                    "temp_var3": 1,
                    "unaff_param_3": 1,
                    "unaff_r6": 1,
                    "unaff_value6": 1,
                    "unaff_var3": 1,
                    "unaffected_r6": 1,
                    "unknown_value3": 1,
                    "unused3": 11,
                    "unused6": 1,
                    "unused_3": 1,
                    "unused_param3": 2,
                    "unused_r6": 1,
                    "unused_var3": 3,
                    "unused_variable6": 1
                }
            },
            "called": [
                "FUN_000811cc",
                "FUN_00084700"
            ],
            "calling": [],
            "code": "\nvoid process_data_and_check_error_00084464(int *output,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    initialize_and_check_error(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = process_data((int)*(short *)(input + 0xe),param_a,param_b,param_b,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_and_check_error_00084464",
            "entrypoint": "0x00084464",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084464": "process_data_and_check_error_00084464",
                "iVar1": "result",
                "in_lr": "unused4",
                "initialize_application_and_check_error_00084700": "initialize_and_check_error",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "process_data_000811cc": "process_data",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008449c": {
            "additional_data": {
                "FUN_0008449c": {
                    "initialize_and_check_app": 1,
                    "initialize_and_check_app_errors": 1,
                    "initialize_and_check_application": 2,
                    "initialize_and_check_error": 5,
                    "initialize_and_check_errors": 2,
                    "initialize_and_set_error_flags": 1,
                    "initialize_and_update_app_status": 2,
                    "initialize_and_update_application": 2,
                    "initialize_and_update_status": 1,
                    "initialize_application": 10,
                    "initialize_application_and_check_error": 2,
                    "initialize_application_and_set_error_flags": 1,
                    "initialize_application_and_update_flags": 1
                },
                "iVar1": {
                    "app_check_result": 1,
                    "app_initialization_result": 2,
                    "app_initializer_result": 1,
                    "app_result": 1,
                    "app_status": 3,
                    "error_check": 1,
                    "error_check_result": 4,
                    "error_code": 6,
                    "init_result": 2,
                    "result": 9,
                    "return_value": 1
                },
                "initialize_application_and_check_error_00084700": {
                    "initialize_check_error": 1
                },
                "param_1": {
                    "app_config": 1,
                    "app_data": 1,
                    "application": 4,
                    "application_config": 2,
                    "application_data": 1,
                    "application_handler": 1,
                    "application_id": 1,
                    "application_instance": 1,
                    "application_param": 1,
                    "arg": 1,
                    "arg1": 1,
                    "param": 3,
                    "param1": 8,
                    "param_1": 1,
                    "param_a": 2,
                    "param_pointer": 1,
                    "status": 1
                },
                "param_2": {
                    "application_data": 1,
                    "arg": 1,
                    "arg2": 1,
                    "buffer_address": 1,
                    "context_ptr": 1,
                    "data": 3,
                    "data_param": 1,
                    "data_ptr": 3,
                    "function_data": 3,
                    "input": 1,
                    "param2": 8,
                    "param_2": 1,
                    "param_b": 2,
                    "ptr_data": 1,
                    "struct_data": 1,
                    "struct_pointer": 1,
                    "struct_ptr": 1
                },
                "uVar2": {
                    "flag": 7,
                    "flag_value": 1,
                    "flags": 2,
                    "modified_flag": 6,
                    "modified_flags": 1,
                    "modified_value": 2,
                    "new_flag": 1,
                    "new_flags": 1,
                    "status": 1,
                    "updated_flag": 4,
                    "updated_flags": 1,
                    "updated_status": 2,
                    "updated_value": 2
                }
            },
            "called": [
                "FUN_00084700"
            ],
            "calling": [],
            "code": "\nvoid initialize_application_and_check_error_0008449c(undefined4 param1,int param2)\n\n{\n  int result;\n  ushort flag;\n  \n  result = initialize_check_error(param1,(int)*(short *)(param2 + 0xe));\n  if (result == -1) {\n    flag = *(ushort *)(param2 + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(param2 + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(param2 + 0x50) = result;\n  }\n  *(ushort *)(param2 + 0xc) = flag;\n  return;\n}\n\n",
            "current_name": "initialize_application_and_check_error_0008449c",
            "entrypoint": "0x0008449c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008449c": "initialize_application_and_check_error_0008449c",
                "iVar1": "result",
                "initialize_application_and_check_error_00084700": "initialize_check_error",
                "param_1": "param1",
                "param_2": "param2",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844c4": {
            "additional_data": {
                "FUN_000844c4": {
                    "process_and_validate": 1,
                    "process_and_validate_data": 8,
                    "process_and_validate_input": 1,
                    "process_data": 18,
                    "process_function": 1,
                    "process_input": 1,
                    "reverse_and_process_data": 1
                },
                "iVar4": {
                    "array_offset": 1,
                    "data_index": 2,
                    "data_offset": 2,
                    "index": 12,
                    "index_var": 1,
                    "int_value": 6,
                    "offset": 1,
                    "result": 1,
                    "temp_var": 2,
                    "temp_variable": 2,
                    "variable": 1
                },
                "initialize_data_structures_00083b14": {
                    "initialize_data_structures": 6
                },
                "param_1": {
                    "arg_1": 1,
                    "data_pointer": 4,
                    "data_ptr": 3,
                    "data_structure": 1,
                    "input": 4,
                    "input1": 1,
                    "input_data": 5,
                    "input_param": 5,
                    "input_pointer": 4,
                    "input_ptr": 2,
                    "parameter1": 1
                },
                "param_2": {
                    "arg_2": 1,
                    "byte_input": 1,
                    "byte_value": 1,
                    "character": 4,
                    "data": 5,
                    "data_length": 1,
                    "data_param": 1,
                    "flag": 3,
                    "input2": 1,
                    "input_data": 2,
                    "input_length": 2,
                    "input_value": 5,
                    "parameter2": 1,
                    "value": 3
                },
                "param_3": {
                    "arg_3": 1,
                    "data": 2,
                    "data_array": 9,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "data_struct": 6,
                    "data_struct_ptr": 1,
                    "data_structure": 1,
                    "data_structures": 2,
                    "params_array": 1,
                    "struct_param": 1,
                    "struct_ptr": 1,
                    "structures": 1
                },
                "param_4": {
                    "additional_parameter": 1,
                    "arg_4": 1,
                    "config": 1,
                    "config_value": 1,
                    "constant_value": 2,
                    "data_value": 1,
                    "extra_param": 2,
                    "extra_value": 1,
                    "flag": 3,
                    "flags": 1,
                    "info_param": 1,
                    "input": 1,
                    "input4": 1,
                    "optional_data": 1,
                    "param": 1,
                    "param_4": 1,
                    "param_value": 1,
                    "parameter": 1,
                    "parameter4": 1,
                    "size": 4,
                    "some_value": 1,
                    "unknown_data": 1,
                    "value": 2
                },
                "process_data_00083808": {
                    "process_data": 5,
                    "process_data_blocks": 1
                },
                "puVar3": {
                    "byte_pointer": 4,
                    "byte_ptr": 2,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "data_byte_pointer": 1,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "element_ptr": 1,
                    "pointer": 7,
                    "pointer_to_data": 1,
                    "pointer_var": 1,
                    "ptr": 5,
                    "ptr_value": 2,
                    "undefined_pointer": 1
                },
                "uVar1": {
                    "array_element": 1,
                    "data_length": 2,
                    "data_type": 1,
                    "data_value": 4,
                    "element_value": 1,
                    "secondary_data": 1,
                    "short_value": 2,
                    "temp_var1": 1,
                    "third_element": 1,
                    "u_short_value": 1,
                    "ushort_val": 1,
                    "ushort_value": 12,
                    "ushort_var": 1,
                    "value": 1,
                    "value1": 1
                },
                "uVar2": {
                    "array_element_value": 1,
                    "converted_data": 1,
                    "converted_length": 1,
                    "converted_value": 3,
                    "data_type_u_int": 1,
                    "data_u_int": 1,
                    "data_value": 1,
                    "data_value_as_u_int": 1,
                    "data_value_uint": 1,
                    "element_value_uint": 1,
                    "int_value": 1,
                    "shifted_data_value": 1,
                    "temp_var2": 1,
                    "u_int_value": 1,
                    "uint_val": 1,
                    "uint_value": 10,
                    "uint_var": 1,
                    "unsigned_value": 1,
                    "value": 1,
                    "value2": 1
                },
                "validate_and_process_data_00083adc": {
                    "validate_and_process_data": 6
                }
            },
            "called": [
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nuint process_and_validate_data_000844c4(int input_data,uint data,undefined4 *data_array,undefined4 size)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *pointer;\n  int index;\n  \n  if ((input_data != 0) && (*(int *)(input_data + 0x38) == 0)) {\n    initialize_data_structures();\n  }\n  ushort_value = *(ushort *)(data_array + 3);\n  uint_value = (uint)ushort_value;\n  data_array[2] = data_array[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data_array[4], index == 0)) {\n    index = process_data(input_data,data_array,ushort_value,uint_value,size);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data_array + 3);\n    index = data_array[4];\n    uint_value = (uint)ushort_value;\n  }\n  data = data & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    pointer = (undefined *)*data_array;\n    index = (int)pointer - index;\n    if (index < (int)data_array[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data_array[0x19] = data_array[0x19] & 0xffffdfff;\n    pointer = (undefined *)*data_array;\n    *(ushort *)(data_array + 3) = ushort_value | 0x2000;\n    index = (int)pointer - index;\n    if (index < (int)data_array[5]) goto LAB_000844f6;\n  }\n  index = validate_and_process_data(input_data,data_array);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*data_array;\n  index = 1;\nLAB_000844f8:\n  data_array[2] = data_array[2] + -1;\n  *data_array = pointer + 1;\n  *pointer = (char)data;\n  if (((data_array[5] == index) ||\n      (((int)((uint)*(ushort *)(data_array + 3) << 0x1f) < 0 && (data == 10)))) &&\n     (index = validate_and_process_data(input_data,data_array), index != 0)) {\n    return 0xffffffff;\n  }\n  return data;\n}\n\n",
            "current_name": "process_and_validate_data_000844c4",
            "entrypoint": "0x000844c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844c4": "process_and_validate_data_000844c4",
                "iVar4": "index",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "param_1": "input_data",
                "param_2": "data",
                "param_3": "data_array",
                "param_4": "size",
                "process_data_00083808": "process_data",
                "puVar3": "pointer",
                "uVar1": "ushort_value",
                "uVar2": "uint_value",
                "validate_and_process_data_00083adc": "validate_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008456c": {
            "additional_data": {
                "FUN_0008456c": {
                    "execute_code": 1,
                    "execute_function": 4,
                    "execute_memory_operation": 1,
                    "execute_process": 1,
                    "improve_code": 1,
                    "memory_operation": 1,
                    "perform_operation": 1,
                    "process_data": 13,
                    "process_function": 3,
                    "process_memory_allocation": 1,
                    "process_param": 1,
                    "reverse_and_set_parameters": 1,
                    "reverse_and_update_value": 1
                },
                "auStack_24": {
                    "auxiliary_buffer": 1,
                    "buffer": 1,
                    "local_buffer": 2,
                    "local_variable": 2,
                    "stack_buffer": 3,
                    "stack_data": 5,
                    "temp_array": 1,
                    "temp_buffer": 3,
                    "temporary_buffer": 4,
                    "temporary_data": 2,
                    "temporary_memory": 1,
                    "temporary_stack": 1
                },
                "iVar3": {
                    "function_result": 1,
                    "operation_result": 1,
                    "response": 1,
                    "result": 12,
                    "result_code": 1,
                    "result_value": 1,
                    "return_value": 12,
                    "status": 2
                },
                "param_1": {
                    "function_output": 1,
                    "function_pointer": 1,
                    "output": 5,
                    "output_address": 1,
                    "output_array": 1,
                    "output_buffer": 8,
                    "output_data": 3,
                    "output_param": 2,
                    "output_pointer": 2,
                    "output_ptr": 1,
                    "process": 1,
                    "result": 3,
                    "result_ptr": 1
                },
                "param_2": {
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "data_size": 1,
                    "input_length": 7,
                    "input_size": 9,
                    "input_value": 1,
                    "is_zero": 1,
                    "num_args": 1,
                    "operation_type": 1,
                    "param_size": 1,
                    "size": 6,
                    "size_of_param": 1
                },
                "param_3": {
                    "additional_param": 2,
                    "arg": 1,
                    "arg3": 1,
                    "extra_parameter": 1,
                    "input_data": 4,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 5,
                    "param": 1,
                    "param3": 2,
                    "param_3": 4,
                    "param_value": 1,
                    "unused_parameter": 1,
                    "value": 5
                },
                "param_4": {
                    "error_code": 3,
                    "output": 1,
                    "result": 11,
                    "result_param": 2,
                    "result_pointer": 1,
                    "result_status": 1,
                    "status": 9,
                    "status_pointer": 1,
                    "status_ptr": 2
                },
                "pcVar1": {
                    "code_pointer": 1,
                    "execute_function": 1,
                    "function_pointer": 23,
                    "function_ptr": 5,
                    "function_to_call": 1
                },
                "uVar2": {
                    "mem_address": 3,
                    "memory_addr": 1,
                    "memory_address": 27
                }
            },
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nvoid process_data_0008456c(undefined4 *output_buffer,int input_size,undefined4 value,undefined4 *result)\n\n{\n  code *function_pointer;\n  undefined4 memory_address;\n  int return_value;\n  undefined stack_data [12];\n  \n  function_pointer = DAT_20070898;\n  if (input_size == 0) {\n    memory_address = get_memory_address_00084290();\n    return_value = (*function_pointer)(output_buffer,stack_data,0,memory_address,result);\n  }\n  else {\n    memory_address = get_memory_address_00084290();\n    return_value = (*function_pointer)(output_buffer,input_size,value,memory_address,result);\n  }\n  if (return_value == -1) {\n    *result = 0;\n    *output_buffer = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0008456c",
            "entrypoint": "0x0008456c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "auStack_24": "stack_data",
                "iVar3": "return_value",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "param_3": "value",
                "param_4": "result",
                "pcVar1": "function_pointer",
                "uVar2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845bc": {
            "additional_data": {
                "0x0": {
                    "null": 3,
                    "nullptr": 1
                },
                "0x100": {
                    "256": 2,
                    "buffer_size": 1,
                    "max_value": 1,
                    "threshold": 1
                },
                "0x8a": {
                    "138": 1,
                    "error_code": 3,
                    "failure_value": 1
                },
                "0xffffffff": {
                    "failure_return_value": 1
                },
                "FUN_000845bc": {
                    "convert_byte_to_char": 1,
                    "convert_number_to_byte": 1,
                    "convert_to_byte": 3,
                    "convert_to_char": 1,
                    "convert_unsigned_int_to_char": 1,
                    "convert_value_to_byte": 3,
                    "convert_value_to_char": 3,
                    "convert_value_to_character": 1,
                    "copy_data_to_buffer": 1,
                    "copy_uint_to_ptr": 1,
                    "copy_value_to_buffer": 1,
                    "decode_and_store_byte": 1,
                    "decode_byte": 1,
                    "decode_param": 1,
                    "decode_single_byte": 1,
                    "process_byte": 1,
                    "set_value_if_valid": 1,
                    "store_byte_or_fail": 1,
                    "store_value_or_error": 1,
                    "write_byte_to_memory": 3,
                    "write_single_byte": 1,
                    "write_value_to_memory": 2
                },
                "char": {
                    "byte_value": 1,
                    "converted_byte": 1
                },
                "param_1": {
                    "buffer": 1,
                    "converted_value": 1,
                    "dest": 1,
                    "destination": 2,
                    "dst_buffer": 1,
                    "memory_address": 1,
                    "output": 3,
                    "output_buffer": 1,
                    "output_byte": 4,
                    "output_pointer": 2,
                    "output_ptr": 3,
                    "output_value": 4,
                    "result": 5,
                    "status": 2
                },
                "param_2": {
                    "address": 1,
                    "buffer": 5,
                    "byte_pointer": 1,
                    "byte_ptr": 1,
                    "character_array": 1,
                    "input": 2,
                    "input_byte": 2,
                    "input_ptr": 2,
                    "memory": 1,
                    "memory_address": 1,
                    "memory_pointer": 1,
                    "output": 3,
                    "output_buffer": 4,
                    "output_ptr": 1,
                    "result_ptr": 1,
                    "src": 1,
                    "src_data": 1,
                    "target_address": 1,
                    "value_pointer": 1
                },
                "param_3": {
                    "byte_to_write": 1,
                    "byte_value": 1,
                    "data_size": 1,
                    "input": 1,
                    "input_byte": 2,
                    "input_value": 8,
                    "number": 2,
                    "value": 15
                },
                "param_4": {
                    "size": 1
                },
                "uint": {
                    "uint32": 1
                },
                "undefined": {
                    "uint8": 1
                },
                "undefined4": {
                    "uint32": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nuint32 convert_value_to_byte_000845bc(uint32 *result,uint8 *buffer,uint32 value)\n\n{\n  if (buffer == (uint8 *)0x0) {\n    return 0;\n  }\n  if (value < 0x100) {\n    *buffer = (byte_value)value;\n    return 1;\n  }\n  *result = 0x8a;\n  return 0xffffffff;\n}\n\n",
            "current_name": "convert_value_to_byte_000845bc",
            "entrypoint": "0x000845bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000845bc": "convert_value_to_byte_000845bc",
                "char": "byte_value",
                "param_1": "result",
                "param_2": "buffer",
                "param_3": "value",
                "uint": "uint32",
                "undefined": "uint8",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846a4": {
            "additional_data": {
                "FUNC_00083c08": {
                    "cleanup_1": 1,
                    "func1": 1,
                    "function_a": 1,
                    "perform_additional_processing": 1
                },
                "FUNC_00083c0c": {
                    "clean_up_and_finalize": 1,
                    "cleanup_2": 1,
                    "func2": 1,
                    "function_b": 1
                },
                "FUN_000846a4": {
                    "process_binary_data": 1,
                    "process_data": 28,
                    "process_data_and_calculate_offset": 1,
                    "validate_and_process_data": 1
                },
                "calc_and_update_offset_00083d9c": {
                    "calculate_and_update_offset": 1
                },
                "calculate_and_update_offset_00083d9c": {
                    "calculate_and_update_offset": 2,
                    "update_offset": 1
                },
                "dVar1": {
                    "base_offset": 1,
                    "data_offset": 1,
                    "offset": 18,
                    "r_offset": 2,
                    "rel_offset": 5,
                    "relative_offset": 1,
                    "relocation_offset": 3
                },
                "iVar3": {
                    "error": 1,
                    "error_code": 1,
                    "function_result": 1,
                    "process_result": 1,
                    "result": 2,
                    "return_value": 8,
                    "status": 9,
                    "validation_result": 8
                },
                "initialize_data_structures_00083b14": {
                    "initialize_data_structures": 4
                },
                "param_1": {
                    "data": 17,
                    "data_offset": 2,
                    "data_ptr": 2,
                    "input_data": 8,
                    "input_param": 2
                },
                "uVar2": {
                    "result": 25,
                    "result_var": 1,
                    "return_value": 5
                },
                "validate_and_process_data_00083adc": {
                    "validate_and_process_data": 4
                }
            },
            "called": [
                "FUN_00083c08",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083c0c",
                "FUN_00083b14"
            ],
            "calling": [],
            "code": "\nundefined4 validate_and_process_data_000846a4(int data)\n\n{\n  dword offset;\n  undefined4 result;\n  int status;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (data != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      initialize_data_structures();\n    }\n    if (*(short *)(data + 0xc) != 0) {\n      result = validate_and_process_data_000846a4(offset,data);\n      if ((*(code **)(data + 0x2c) != (code *)0x0) &&\n         (status = (**(code **)(data + 0x2c))(offset,*(undefined4 *)(data + 0x1c)), status < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(data + 0xc) << 0x18) < 0) {\n        calculate_and_update_offset(offset,*(undefined4 *)(data + 0x10));\n      }\n      if (*(int *)(data + 0x30) != 0) {\n        if (*(int *)(data + 0x30) != data + 0x40) {\n          calculate_and_update_offset(offset);\n        }\n        *(undefined4 *)(data + 0x30) = 0;\n      }\n      if (*(int *)(data + 0x44) != 0) {\n        calculate_and_update_offset(offset);\n        *(undefined4 *)(data + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(data + 0xc) = 0;\n      FUNC_00083c0c();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "validate_and_process_data_000846a4",
            "entrypoint": "0x000846a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846a4": "validate_and_process_data_000846a4",
                "calculate_and_update_offset_00083d9c": "calculate_and_update_offset",
                "dVar1": "offset",
                "iVar3": "status",
                "initialize_data_structures_00083b14": "initialize_data_structures",
                "param_1": "data",
                "uVar2": "result",
                "validate_and_process_data_00083adc": "validate_and_process_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846b4": {
            "additional_data": {
                "FUN_000846b4": {
                    "initialize_and_check_memory": 7,
                    "initialize_and_return_memory": 1,
                    "initialize_memory": 15,
                    "initialize_memory_and_check": 3,
                    "initialize_memory_and_check_errors": 1,
                    "initialize_memory_check": 2,
                    "initialize_memory_if_failed": 1,
                    "initialize_with_memory": 1
                },
                "iVar1": {
                    "error_code": 3,
                    "error_flag": 1,
                    "error_status": 1,
                    "init_result": 5,
                    "initialize_result": 1,
                    "memory_init_result": 3,
                    "memory_initialization_result": 1,
                    "result": 7,
                    "result_code": 1,
                    "result_initialize_memory": 1,
                    "result_status": 1,
                    "return_value": 1
                },
                "initialize_memory_000811b4": {
                    "initialize_memory": 1
                },
                "param_1": {
                    "output": 6,
                    "output_pointer": 3,
                    "output_ptr": 1,
                    "output_value": 1,
                    "result": 18,
                    "result_pointer": 1,
                    "result_ptr": 1
                },
                "param_2": {
                    "arg1": 12,
                    "input1": 3,
                    "mem_addr1": 1,
                    "mem_param_1": 1,
                    "mem_size": 1,
                    "param1": 3,
                    "param2": 1,
                    "param_2": 1,
                    "param_a": 2,
                    "size1": 1,
                    "size_1": 1,
                    "value1": 2,
                    "value_1": 2
                },
                "param_3": {
                    "arg2": 12,
                    "input2": 3,
                    "mem_addr2": 1,
                    "mem_param_2": 1,
                    "param2": 3,
                    "param3": 1,
                    "param_3": 2,
                    "param_b": 2,
                    "size2": 1,
                    "size_2": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "param_4": {
                    "arg3": 12,
                    "flag": 1,
                    "input3": 3,
                    "mem_param_3": 1,
                    "param3": 3,
                    "param4": 2,
                    "param_4": 2,
                    "param_c": 2,
                    "size3": 1,
                    "value3": 2,
                    "value_2": 1,
                    "value_3": 1
                }
            },
            "called": [
                "FUN_000811b4"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid initialize_memory_and_check_errors_000846b4(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = initialize_memory(arg1,arg2,arg2,0,arg3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_memory_and_check_errors_000846b4",
            "entrypoint": "0x000846b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846b4": "initialize_memory_and_check_errors_000846b4",
                "iVar1": "result",
                "initialize_memory_000811b4": "initialize_memory",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846dc": {
            "additional_data": {
                "DAT_200711bc": {
                    "saved_value": 1
                },
                "FUN_000846dc": {
                    "check_return_value_and_update_param": 1,
                    "compute_return_value": 1,
                    "extract_return_value": 5,
                    "extract_return_value_and_update_param": 1,
                    "extract_return_value_and_update_param1": 1,
                    "extract_value": 1,
                    "find_and_set_return_value": 1,
                    "find_return_value_and_update": 1,
                    "find_return_value_and_update_param": 2,
                    "get_return_value_and_check": 1,
                    "get_return_value_and_update": 1,
                    "get_return_value_and_update_param": 1,
                    "handle_return_value": 1,
                    "process_return_value": 8,
                    "retrieved_value_or_zero": 1,
                    "update_param_and_return": 1,
                    "update_return_value": 2,
                    "update_return_value_if_needed": 1
                },
                "get_return_value_000811be": {
                    "retrieve_value": 1
                },
                "iVar1": {
                    "return_value": 31
                },
                "param_1": {
                    "output": 8,
                    "output_param": 2,
                    "output_ptr": 1,
                    "output_value": 5,
                    "result": 10,
                    "result_param": 1,
                    "result_pointer": 2,
                    "result_ptr": 1,
                    "updated_param": 1
                },
                "param_2": {
                    "input": 11,
                    "input_param": 1,
                    "input_value": 18,
                    "value": 1
                }
            },
            "called": [
                "FUN_000811be"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid extract_return_value_and_update_param_000846dc(int *result,undefined4 input_value)\n\n{\n  int return_value;\n  \n  DAT_200711bc = 0;\n  return_value = retrieve_value(input_value);\n  if ((return_value == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "extract_return_value_and_update_param_000846dc",
            "entrypoint": "0x000846dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846dc": "extract_return_value_and_update_param_000846dc",
                "get_return_value_000811be": "retrieve_value",
                "iVar1": "return_value",
                "param_1": "result",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084700": {
            "additional_data": {
                "FUN_00084700": {
                    "initialize_and_check_application": 11,
                    "initialize_and_check_error": 2,
                    "initialize_and_handle_errors": 2,
                    "initialize_and_return_result": 1,
                    "initialize_application": 14,
                    "initialize_application_and_check_error": 1
                },
                "iVar1": {
                    "init_result": 16,
                    "initialize_result": 2,
                    "result": 2,
                    "status": 1
                },
                "param_1": {
                    "error_code": 1,
                    "output": 1,
                    "output_error_code": 1,
                    "output_param": 3,
                    "output_result": 1,
                    "output_value": 3,
                    "result": 18,
                    "result_pointer": 2,
                    "result_ptr": 1
                },
                "param_2": {
                    "arg1": 16,
                    "arg2": 1,
                    "input_1": 1,
                    "input_param1": 1,
                    "input_param_1": 4,
                    "input_value_1": 1,
                    "param2": 2,
                    "param_2": 2,
                    "value_1": 1
                },
                "param_3": {
                    "arg2": 16,
                    "arg3": 1,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_param_2": 4,
                    "input_value_2": 1,
                    "param3": 2,
                    "param_3": 2,
                    "value_2": 1
                },
                "param_4": {
                    "arg3": 16,
                    "arg4": 1,
                    "input_3": 1,
                    "input_param3": 1,
                    "input_param_3": 4,
                    "input_value_3": 1,
                    "param4": 2,
                    "param_4": 2,
                    "value_3": 1
                }
            },
            "called": [
                "FUN_000811c2"
            ],
            "calling": [
                "FUN_0008449c",
                "FUN_00084464"
            ],
            "code": "\nvoid initialize_application_and_check_error_00084700(int *result,undefined4 arg1,undefined4 arg2,undefined4 arg3)\n\n{\n  int init_result;\n  \n  DAT_200711bc = 0;\n  init_result = initialize_application_000811c2(arg1,arg2,arg3);\n  if ((init_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_application_and_check_error_00084700",
            "entrypoint": "0x00084700",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084700": "initialize_application_and_check_error_00084700",
                "iVar1": "init_result",
                "param_1": "result",
                "param_2": "arg1",
                "param_3": "arg2",
                "param_4": "arg3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084728": {
            "additional_data": {
                "DAT_200711bc": {
                    "non_negative_value": 1,
                    "stored_value": 4,
                    "zero_value": 1
                },
                "FUN_00084728": {
                    "assign_zero_value": 1,
                    "assign_zero_value_if_error": 1,
                    "assign_zero_value_if_needed": 1,
                    "assign_zero_value_to_pointer": 1,
                    "check_error_and_assign_value": 1,
                    "check_for_zero_value": 1,
                    "copy_if_nonzero": 1,
                    "copy_non_negative_value": 1,
                    "find_and_set_non_zero_value": 1,
                    "find_non_negative_value": 2,
                    "find_valid_value": 1,
                    "find_value_and_set_result": 1,
                    "find_zero_value": 4,
                    "get_zero_value": 1,
                    "initialize_data": 1,
                    "initialize_variable": 1,
                    "process_and_check_value": 1,
                    "process_and_get_zero_value": 1,
                    "process_data": 1,
                    "process_zero_value": 1,
                    "set_result_if_value_not_found": 1,
                    "set_value_if_condition_met": 1,
                    "set_zero_value": 1,
                    "update_parameter_if_needed": 1,
                    "update_value_if_negative": 1,
                    "update_value_if_zero": 1
                },
                "get_zero_value_000811c6": {
                    "get_zero_value": 2
                },
                "iVar1": {
                    "calculation_result": 1,
                    "error_code": 1,
                    "is_negative": 1,
                    "result": 11,
                    "return_value": 8,
                    "status": 1,
                    "value": 2,
                    "zero_value": 3
                },
                "param_1": {
                    "destination": 1,
                    "output": 7,
                    "output_value": 6,
                    "result": 14,
                    "result_pointer": 1,
                    "target": 1,
                    "value": 1
                },
                "param_2": {
                    "arg1": 5,
                    "arg_1": 1,
                    "input1": 11,
                    "input_1": 5,
                    "input_arg1": 1,
                    "input_param1": 1,
                    "input_val1": 1,
                    "input_value1": 1,
                    "param2": 2,
                    "value1": 3
                },
                "param_3": {
                    "arg2": 5,
                    "arg_2": 1,
                    "input2": 11,
                    "input_2": 5,
                    "input_arg2": 1,
                    "input_param2": 1,
                    "input_val2": 1,
                    "input_value2": 1,
                    "param3": 2,
                    "value2": 3
                },
                "param_4": {
                    "arg3": 5,
                    "arg_3": 1,
                    "input3": 11,
                    "input_3": 5,
                    "input_arg3": 1,
                    "input_param3": 1,
                    "input_val3": 1,
                    "input_value3": 1,
                    "param4": 2,
                    "value3": 3
                }
            },
            "called": [
                "FUN_000811c6"
            ],
            "calling": [],
            "code": "\nvoid find_and_set_non_zero_value_00084728(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = get_zero_value(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "find_and_set_non_zero_value_00084728",
            "entrypoint": "0x00084728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084728": "find_and_set_non_zero_value_00084728",
                "get_zero_value_000811c6": "get_zero_value",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084750": {
            "additional_data": {
                "FUN_00084750": {
                    "calculate_and_update": 1,
                    "calculate_difference": 13,
                    "calculate_difference_and_update": 5,
                    "calculate_difference_or_default": 1,
                    "calculate_difference_or_return_default": 1,
                    "calculate_difference_or_return_neg1": 1,
                    "calculate_difference_or_return_negative": 1,
                    "calculate_difference_or_return_negative_one": 1,
                    "calculate_or_return_difference": 2,
                    "calculate_updated_difference": 3,
                    "check_and_update_difference": 1,
                    "update_difference": 1
                },
                "iVar1": {
                    "calculated_difference": 1,
                    "difference": 21,
                    "result": 5,
                    "updated_difference": 3
                },
                "param_1": {
                    "first_parameter": 2,
                    "input1": 6,
                    "input_1": 10,
                    "input_a": 1,
                    "input_param_1": 3,
                    "input_value_1": 6,
                    "value1": 3
                },
                "param_2": {
                    "input2": 6,
                    "input_2": 10,
                    "input_b": 1,
                    "input_param_2": 3,
                    "input_value_2": 6,
                    "second_parameter": 2,
                    "value2": 3
                },
                "param_3": {
                    "comparison_1": 1,
                    "condition_1": 2,
                    "flag1": 3,
                    "flag_1": 2,
                    "input3": 3,
                    "input_3": 7,
                    "input_c": 1,
                    "input_param_3": 3,
                    "input_value_3": 4,
                    "third_parameter": 2,
                    "value3": 3
                },
                "param_4": {
                    "comparison_2": 1,
                    "condition_2": 2,
                    "flag2": 3,
                    "flag_2": 2,
                    "fourth_parameter": 2,
                    "input4": 3,
                    "input_4": 7,
                    "input_d": 1,
                    "input_param_4": 3,
                    "input_value_4": 4,
                    "value4": 3
                }
            },
            "called": [
                "FUN_000847ac"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint calculate_difference_and_update_00084750(int input_1,int input_2,int input_3,int input_4)\n\n{\n  int difference;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (input_2 != 0 || input_1 != 0) {\n      input_1 = -1;\n    }\n    return input_1;\n  }\n  difference = calculate_and_update_difference_000847ac();\n  return difference;\n}\n\n",
            "current_name": "calculate_difference_and_update_00084750",
            "entrypoint": "0x00084750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084750": "calculate_difference_and_update_00084750",
                "iVar1": "difference",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008477c": {
            "additional_data": {
                "FUN_0008477c": {
                    "subtract_and_adjust": 1,
                    "subtract_and_adjust_parameters": 1,
                    "subtract_and_assign": 3,
                    "subtract_and_compare_values": 1,
                    "subtract_and_store": 5,
                    "subtract_and_store_result": 5,
                    "subtract_and_update": 3,
                    "subtract_and_update_param": 1,
                    "subtract_from_params_and_store_result": 1,
                    "subtract_param": 1,
                    "subtract_params": 1,
                    "subtract_params_and_assign": 1,
                    "subtract_ulong_from_int": 1,
                    "subtract_values": 3,
                    "subtract_values_and_store_result": 1,
                    "subtract_with_overflow": 1,
                    "subtract_with_threshold": 1
                },
                "divide_unsigned_integers_000847e0": {
                    "divide_unsigned_integers": 1
                },
                "lVar2": {
                    "multiplied_result": 3,
                    "multiplied_value": 4,
                    "product": 17,
                    "result": 2,
                    "result2": 2,
                    "temp_value": 2,
                    "temp_var2": 1
                },
                "param_1": {
                    "base_value": 1,
                    "first_number": 1,
                    "first_parameter": 1,
                    "input1": 5,
                    "input_1": 1,
                    "input_param": 4,
                    "input_param1": 1,
                    "input_value": 7,
                    "minuend": 1,
                    "num1": 1,
                    "original_value": 3,
                    "value1": 2,
                    "value_1": 3
                },
                "param_2": {
                    "another_param": 1,
                    "counter": 1,
                    "input2": 5,
                    "input_2": 1,
                    "input_param2": 1,
                    "int_param": 1,
                    "int_value": 2,
                    "integer_param": 1,
                    "limit_param": 1,
                    "num2": 1,
                    "offset": 2,
                    "second_number": 1,
                    "second_param": 1,
                    "second_parameter": 1,
                    "subtract_value": 1,
                    "subtracted_value": 1,
                    "subtrahend": 1,
                    "threshold": 1,
                    "value2": 2,
                    "value_2": 3,
                    "value_to_subtract": 2
                },
                "param_3": {
                    "constant1": 1,
                    "first_part": 1,
                    "left_multiplier": 1,
                    "low_word": 1,
                    "low_word_param": 1,
                    "lower_bits": 1,
                    "lower_part": 1,
                    "lower_part_multiplier": 1,
                    "multiplier1": 1,
                    "param3": 1,
                    "second_part": 1
                },
                "param_4": {
                    "constant2": 1,
                    "first_part": 1,
                    "high_word": 1,
                    "high_word_param": 1,
                    "higher_part": 1,
                    "multiplier2": 1,
                    "param4": 1,
                    "right_multiplier": 1,
                    "second_part": 1,
                    "upper_bits": 1,
                    "upper_part_multiplier": 1
                },
                "param_5": {
                    "output": 1,
                    "output_arr": 1,
                    "output_array": 4,
                    "output_param": 3,
                    "result": 5,
                    "result_array": 16,
                    "result_pointer": 1
                },
                "uVar1": {
                    "calculated_value": 3,
                    "computed_value": 2,
                    "converted_result": 3,
                    "lower_bits_result": 1,
                    "multiplied_value": 2,
                    "product_low": 1,
                    "quotient": 1,
                    "result": 11,
                    "result1": 3,
                    "temp_var1": 1,
                    "unsigned_result": 3
                }
            },
            "called": [
                "FUN_000847e0"
            ],
            "calling": [],
            "code": "\nvoid subtract_values_and_store_result_0008477c(uint input_value,int input2,undefined4 low_word_param,undefined4 right_multiplier,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide_unsigned_integers();\n  product = product * CONCAT44(right_multiplier,low_word_param);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (input2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_values_and_store_result_0008477c",
            "entrypoint": "0x0008477c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008477c": "subtract_values_and_store_result_0008477c",
                "divide_unsigned_integers_000847e0": "divide_unsigned_integers",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "input2",
                "param_3": "low_word_param",
                "param_4": "right_multiplier",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847ac": {
            "additional_data": {
                "CONCAT44": {
                    "combine_quotients": 1,
                    "concat_arguments": 1
                },
                "FUN_000847ac": {
                    "calculate_and_subtract": 2,
                    "calculate_and_update": 1,
                    "calculate_and_update_difference": 1,
                    "calculate_and_update_result": 1,
                    "calculate_and_update_values": 2,
                    "calculate_difference": 12,
                    "calculate_remainder": 1,
                    "calculate_remainder_and_update": 1,
                    "calculate_subtraction": 1,
                    "subtract_and_adjust": 3,
                    "subtract_and_store_result": 1,
                    "subtract_and_update": 1,
                    "subtract_quotient_and_remainder": 1,
                    "subtract_values": 2,
                    "update_values": 1
                },
                "calculate_quotient_and_remainder_00084a80": {
                    "calculate_quotient": 1,
                    "calculate_quotient_and_remainder": 3,
                    "compute_quotient_and_remainder": 1
                },
                "lVar2": {
                    "calculation_result": 1,
                    "product": 14,
                    "quotient": 7,
                    "quotient_and_remainder": 5,
                    "quotient_remainder": 3
                },
                "param_1": {
                    "dividend": 15,
                    "initial_value": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_value": 7,
                    "minuend": 1,
                    "original_value": 2,
                    "result": 1,
                    "value_1": 2
                },
                "param_2": {
                    "count": 2,
                    "divisor": 15,
                    "int_param": 1,
                    "int_value": 2,
                    "other_input_value": 1,
                    "other_value": 1,
                    "param2": 1,
                    "param_2": 1,
                    "second_input": 1,
                    "second_parameter": 1,
                    "subtrahend": 1,
                    "value": 1,
                    "value_2": 2,
                    "value_to_subtract": 1
                },
                "param_3": {
                    "concatenated_parameter_1": 1,
                    "concatenated_value_1": 1,
                    "concatenated_value_low": 1,
                    "constant_1": 1,
                    "lower_bits": 1,
                    "lower_part_multiplier": 1,
                    "multiplier_low": 1,
                    "param3": 1,
                    "quotient": 1,
                    "quotient_low": 1,
                    "undefined4_param": 1
                },
                "param_4": {
                    "concatenated_parameter_2": 1,
                    "concatenated_value_2": 1,
                    "concatenated_value_high": 1,
                    "constant_2": 1,
                    "multiplier_high": 1,
                    "param4": 1,
                    "quotient_high": 1,
                    "remainder": 1,
                    "undefined4_param2": 1,
                    "upper_bits": 1,
                    "upper_part_multiplier": 1
                },
                "param_5": {
                    "output": 1,
                    "output_array": 3,
                    "output_params": 1,
                    "output_values": 4,
                    "result": 8,
                    "result_array": 12,
                    "results": 1,
                    "results_array": 1
                },
                "uVar1": {
                    "calculated_value": 1,
                    "calculation_result": 1,
                    "new_value": 1,
                    "quotient": 16,
                    "quotient_as_uint": 1,
                    "remainder": 3,
                    "result": 5,
                    "result_as_uint": 2
                }
            },
            "called": [
                "FUN_00084a80"
            ],
            "calling": [
                "FUN_00084750"
            ],
            "code": "\nvoid calculate_and_update_difference_000847ac(uint dividend,int divisor,undefined4 undefined4_param,undefined4 quotient_high,int *result_array)\n\n{\n  uint quotient;\n  longlong product;\n  \n  product = calculate_quotient_and_remainder();\n  product = product * combine_quotients(quotient_high,undefined4_param);\n  quotient = (uint)product;\n  *result_array = dividend - quotient;\n  result_array[1] = (divisor - (int)((ulonglong)product >> 0x20)) - (uint)(dividend < quotient);\n  return;\n}\n\n",
            "current_name": "calculate_and_update_difference_000847ac",
            "entrypoint": "0x000847ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_quotients",
                "FUN_000847ac": "calculate_and_update_difference_000847ac",
                "calculate_quotient_and_remainder_00084a80": "calculate_quotient_and_remainder",
                "lVar2": "product",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "undefined4_param",
                "param_4": "quotient_high",
                "param_5": "result_array",
                "uVar1": "quotient"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847e0": {
            "additional_data": {
                "CARRY4": {
                    "carry": 1
                },
                "FUN_000847e0": {
                    "calculate_division": 1,
                    "divide": 1,
                    "divide_and_remainder": 1,
                    "divide_unsigned": 4,
                    "divide_unsigned_integers": 7,
                    "divide_unsigned_numbers": 1,
                    "divide_unsigned_with_remainder": 1,
                    "divide_with_overflow_check": 1,
                    "divide_with_remainder": 3,
                    "divided_integers": 1,
                    "division_with_remainder": 5,
                    "integer_division": 3,
                    "multiply_uintegers": 1
                },
                "F_000847e0": {
                    "divide_unsigned_numbers": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "bVar10": {
                    "temp_bool": 1
                },
                "bVar13": {
                    "carry_flag": 11,
                    "carry_occurred": 1,
                    "check_carry": 1,
                    "is_borrow": 1,
                    "is_carry": 5,
                    "is_carry_out": 1,
                    "is_divisor_negative": 2,
                    "is_negative": 1,
                    "is_negative_quotient": 1,
                    "is_negative_result": 1,
                    "is_next_subtraction_needed": 1,
                    "is_overflow": 1,
                    "overflow": 1
                },
                "iVar20": {
                    "shift_amount": 1
                },
                "iVar6": {
                    "bits_to_shift": 2,
                    "leading_zero_count": 1,
                    "num_shifted": 1,
                    "number_of_leading_zeros": 1,
                    "shift": 4,
                    "shift_amount": 9,
                    "shift_count": 7,
                    "shift_value": 1
                },
                "lVar1": {
                    "mul_result": 1,
                    "multiply_result": 1,
                    "product": 4,
                    "quotient": 2,
                    "quotient_and_remainder": 1,
                    "quotient_long": 1,
                    "result64": 1,
                    "temp": 5,
                    "temp11": 1,
                    "temp_long": 3,
                    "temp_result": 1
                },
                "param_1": {
                    "dividend": 30,
                    "dividend_part1": 1
                },
                "param_2": {
                    "dividend_bits": 1,
                    "dividend_h": 1,
                    "dividend_high": 9,
                    "dividend_high_word": 1,
                    "dividend_higher": 1,
                    "dividend_length": 1,
                    "dividend_low": 2,
                    "dividend_negative_flag": 1,
                    "dividend_part2": 1,
                    "dividend_sign": 1,
                    "dividend_upper": 6,
                    "dividend_upper32_bits": 1,
                    "divisor": 4,
                    "numerator": 1
                },
                "param_3": {
                    "dividend_temp": 1,
                    "divisor": 23,
                    "divisor_high": 2,
                    "divisor_lower": 1,
                    "divisor_part1": 1,
                    "quotient": 2,
                    "quotient_high": 1
                },
                "param_4": {
                    "denominator": 1,
                    "divisor": 1,
                    "divisor_bits": 1,
                    "divisor_h": 1,
                    "divisor_high": 9,
                    "divisor_high_word": 1,
                    "divisor_higher": 1,
                    "divisor_length": 1,
                    "divisor_low": 2,
                    "divisor_negative_flag": 1,
                    "divisor_part2": 1,
                    "divisor_sign": 1,
                    "divisor_temp": 1,
                    "divisor_upper": 5,
                    "divisor_upper32_bits": 1,
                    "quotient_low": 1,
                    "remainder": 2
                },
                "uCARRY4": {
                    "carry_check": 1
                },
                "uVar1": {
                    "bit_position": 1,
                    "quotient": 1
                },
                "uVar10": {
                    "bit_shifted_upper": 1,
                    "divisor_sign_mask": 1,
                    "divisor_temp": 1,
                    "is_divisor_negative": 5,
                    "is_neg_divisor": 1,
                    "is_negative_divisor": 3,
                    "partial_product": 1,
                    "partial_quotient": 1,
                    "quotient_digit1": 1,
                    "quotient_guess_minus_one": 1,
                    "quotient_high_temp": 1,
                    "quotient_low_temp2": 1,
                    "quotient_lower_temp": 1,
                    "quotient_middle": 1,
                    "quotient_partial_final_2": 1,
                    "quotient_temp": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_quotient2": 1,
                    "temp_quotient_part": 1,
                    "temp_var3": 1,
                    "tmp8": 1
                },
                "uVar11": {
                    "is_divisor_zero": 1,
                    "is_negative": 1,
                    "partial_product": 1,
                    "partial_product_high": 2,
                    "product_temp": 1,
                    "quotient2_lower": 1,
                    "quotient_digit2": 1,
                    "quotient_high_final": 1,
                    "quotient_high_temp2": 1,
                    "quotient_higher_temp": 1,
                    "quotient_low_temp": 1,
                    "rem_product_high": 1,
                    "remainder_partial_final": 1,
                    "shifted_quotient": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp5": 2,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_divisor": 1,
                    "temp_mult_part": 1,
                    "temp_product2": 1,
                    "temp_quotient": 1,
                    "temp_var4": 1,
                    "tmp9": 1,
                    "tmp_quotient_l_sub1": 1
                },
                "uVar12": {
                    "adjusted_divisor": 1,
                    "divisor": 2,
                    "divisor_bits_low": 1,
                    "divisor_digit1": 1,
                    "divisor_element": 1,
                    "divisor_high_concat": 1,
                    "divisor_high_temp": 1,
                    "divisor_low": 1,
                    "divisor_part2_copy": 1,
                    "divisor_shifted": 1,
                    "extended_divisor": 1,
                    "numerator_higher": 1,
                    "quotient2_upper": 1,
                    "quotient_high": 1,
                    "quotient_high_temp": 1,
                    "shifted_divisor": 1,
                    "temp4": 2,
                    "temp6": 2,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_divisor": 1,
                    "temp_divisor_high": 1,
                    "temp_divisor_high_half": 1,
                    "temp_shl_divisor": 1,
                    "temp_var5": 1,
                    "tmp10": 1,
                    "tmp_quotient_h_sub1": 1
                },
                "uVar13": {
                    "is_negative_divisor": 1,
                    "is_quotient_negative": 1,
                    "temp9": 1
                },
                "uVar14": {
                    "carry4_value": 1,
                    "quotient_upper": 1,
                    "temp10": 1,
                    "temp_divisor_low": 1
                },
                "uVar15": {
                    "remainder_lower": 1,
                    "shifted_divisor_higher": 1,
                    "temp11": 1,
                    "temp_remainder_low": 1
                },
                "uVar16": {
                    "remainder_upper": 1,
                    "temp12": 1,
                    "temp_remainder_high": 1
                },
                "uVar17": {
                    "is_remainder_negative": 1,
                    "temp13": 1,
                    "temp8": 1
                },
                "uVar18": {
                    "temp14": 1,
                    "temp9": 1
                },
                "uVar19": {
                    "temp10": 1,
                    "temp15": 1
                },
                "uVar2": {
                    "quotient": 7,
                    "quotient_bit": 1,
                    "quotient_l": 1,
                    "quotient_low": 10,
                    "quotient_lower": 3,
                    "quotient_lower32_bits": 1,
                    "quotient_part1": 1,
                    "quotient_partial": 1,
                    "quotient_upper": 1,
                    "quotient_upper_part": 1,
                    "remainder": 1,
                    "result": 1,
                    "result_lower": 2
                },
                "uVar3": {
                    "partial_quotient": 1,
                    "quotient": 1,
                    "quotient1": 1,
                    "quotient_h": 1,
                    "quotient_high": 11,
                    "quotient_high_bits": 1,
                    "quotient_high_word": 1,
                    "quotient_lower": 1,
                    "quotient_lower_part": 1,
                    "quotient_part2": 1,
                    "quotient_upper": 3,
                    "quotient_upper32_bits": 1,
                    "remainder": 2,
                    "remainder_high": 1,
                    "result_higher": 1,
                    "result_upper": 1,
                    "temp1": 1,
                    "temp_quotient": 1
                },
                "uVar4": {
                    "count": 1,
                    "dividend_high": 1,
                    "dividend_remainder": 1,
                    "divisor_bits_high": 1,
                    "divisor_high": 2,
                    "divisor_high_half": 1,
                    "divisor_low": 1,
                    "divisor_part1_copy": 1,
                    "divisor_partial": 2,
                    "quotient2": 1,
                    "quotient_digit": 1,
                    "quotient_guess": 1,
                    "quotient_high": 1,
                    "quotient_high_temp": 1,
                    "quotient_low_temp": 1,
                    "quotient_lower": 1,
                    "quotient_lower2": 1,
                    "quotient_temp1": 1,
                    "remainder": 1,
                    "remainder_low": 1,
                    "temp": 1,
                    "temp1": 4,
                    "temp2": 1,
                    "temp_dividend_low": 1,
                    "temp_quotient": 1,
                    "tmp_quotient_l": 1
                },
                "uVar5": {
                    "divisor_low": 1,
                    "divisor_remainder": 1,
                    "partial_product_lower": 1,
                    "product": 3,
                    "product_partial": 1,
                    "quotient3": 1,
                    "quotient_high_temp": 1,
                    "quotient_higher": 1,
                    "quotient_multiplier": 1,
                    "quotient_partial_final": 1,
                    "quotient_temp2": 1,
                    "quotient_upper2": 1,
                    "remainder": 2,
                    "remainder_high": 2,
                    "remainder_low": 3,
                    "temp": 1,
                    "temp2": 4,
                    "temp3": 1,
                    "temp_mult": 1,
                    "temp_quotient_low": 1,
                    "temp_result": 1,
                    "tmp_quotient_h": 1
                },
                "uVar6": {
                    "divider": 1,
                    "quotient_lower": 1,
                    "shift_count": 1,
                    "temp4": 1,
                    "temp_quotient_high": 1
                },
                "uVar7": {
                    "dividend_high_half": 1,
                    "divider": 1,
                    "divisor_digit": 1,
                    "partial_product_upper": 1,
                    "partial_result": 1,
                    "product_low": 1,
                    "rem_product_low": 1,
                    "remainder": 1,
                    "remainder_lower": 1,
                    "remainder_partial": 1,
                    "temp": 2,
                    "temp1": 4,
                    "temp2": 1,
                    "temp3": 4,
                    "temp5": 1,
                    "temp_dividend_low": 1,
                    "temp_lower": 1,
                    "temp_quotient": 1,
                    "temp_remainder_low": 1,
                    "temp_result_upper": 1,
                    "temp_sum": 1,
                    "temp_var1": 1,
                    "tmp5": 1,
                    "tmp_product_l": 1
                },
                "uVar8": {
                    "dividend_high": 1,
                    "dividend_partial": 1,
                    "divisor_remainder": 1,
                    "partial_product": 1,
                    "partial_product_lower": 1,
                    "partial_product_upper": 1,
                    "partial_result_part1": 1,
                    "product_high": 1,
                    "remainder_high": 1,
                    "remainder_upper": 1,
                    "temp1": 1,
                    "temp2": 5,
                    "temp3": 1,
                    "temp4": 3,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_dividend_high": 1,
                    "temp_dividend_part": 1,
                    "temp_divisor_low": 1,
                    "temp_higher": 1,
                    "temp_product": 1,
                    "temp_remainder": 1,
                    "temp_var2": 1,
                    "tmp6": 1,
                    "tmp_product_h": 1
                },
                "uVar9": {
                    "dividend_negative": 1,
                    "dividend_sign_bit": 1,
                    "dividend_sign_extension": 1,
                    "dividend_sign_mask": 1,
                    "is_dividend_negative": 14,
                    "is_neg_dividend": 1,
                    "is_negative": 1,
                    "is_negative_dividend": 6,
                    "is_negative_divident": 1,
                    "negative_flag": 1,
                    "quotient_sign": 1,
                    "sign_flag": 1,
                    "tmp7": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008477c"
            ],
            "code": "\nundefined8 divide_unsigned_integers_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong temp;\n  uint quotient_low;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint is_divisor_negative;\n  uint temp3;\n  uint divisor;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      temp1 = dividend_high / quotient_low;\n      temp1 = (divisor & 0xffff) * temp1;\n      is_divisor_negative = dividend >> 0x10 | (dividend_high - quotient_low * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0) {\n        carry_flag = carry(is_divisor_negative,divisor);\n        is_divisor_negative = is_divisor_negative + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0)) {\n          quotient_high = temp1 - 2;\n          is_divisor_negative = is_divisor_negative + divisor;\n        }\n      }\n      temp2 = (is_divisor_negative - temp1) / quotient_low;\n      temp1 = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((is_divisor_negative - temp1) - quotient_low * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((carry(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp1 && temp1 - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = leading_zero_count(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        divisor = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        is_divisor_negative = quotient_high / temp1;\n        divisor = divisor & 0xffff;\n        temp1 = divisor * is_divisor_negative;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp2 >> 0x10 | (quotient_high - temp1 * is_divisor_negative) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_low = is_divisor_negative;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = carry(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = is_divisor_negative - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient_low = is_divisor_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp1) / temp1;\n        is_divisor_negative = divisor * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0) {\n          carry_flag = carry(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_divisor_negative;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / temp1;\n      is_divisor_negative = divisor * quotient_low;\n      temp2 = dividend >> 0x10 | (dividend_high - temp1 * quotient_low) * 0x10000;\n      temp1 = quotient_low;\n      if (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0) {\n        carry_flag = carry(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient_low - 1;\n        if ((carry_flag == false) && (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0)) {\n          temp1 = quotient_low - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - is_divisor_negative) / temp1;\n      divisor = divisor * temp2;\n      temp1 = dividend & 0xffff | ((temp2 - is_divisor_negative) - temp1 * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= divisor && divisor - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((carry(temp1,divisor) == false) &&\n           (temp1 + divisor <= divisor && divisor - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = leading_zero_count(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      divisor = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      is_divisor_negative = divisor >> 0x10;\n      quotient_low = temp1 / is_divisor_negative;\n      temp2 = (divisor & 0xffff) * quotient_low;\n      temp1 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp1 >> 0x10 | (temp1 - is_divisor_negative * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = carry(temp1,divisor);\n        temp1 = temp1 + divisor;\n        quotient_high = quotient_low - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          quotient_high = quotient_low - 2;\n          temp1 = temp1 + divisor;\n        }\n      }\n      temp2 = (temp1 - temp2) / is_divisor_negative;\n      temp3 = (divisor & 0xffff) * temp2;\n      temp1 = temp1 & 0xffff | ((temp1 - temp2) - is_divisor_negative * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= temp3 && temp3 - temp1 != 0) {\n        carry_flag = carry(temp1,divisor);\n        temp1 = temp1 + divisor;\n        quotient_low = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp3 && temp3 - temp1 != 0)) {\n          quotient_low = temp2 - 2;\n          temp1 = temp1 + divisor;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      temp = (ulonglong)quotient_low * (ulonglong)(divisor << shift_amount);\n      temp1 = (uint)((ulonglong)temp >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp3 < temp1) ||\n         ((temp1 - temp3 == temp1 && (dividend << shift_amount < (uint)temp)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "current_name": "divide_unsigned_integers_000847e0",
            "entrypoint": "0x000847e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry",
                "FUN_000847e0": "divide_unsigned_integers_000847e0",
                "LZCOUNT": "leading_zero_count",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "temp",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar1": "quotient",
                "uVar10": "is_divisor_negative",
                "uVar11": "temp3",
                "uVar12": "divisor",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_dividend_negative"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084a80": {
            "additional_data": {
                "FUN_00084a80": {
                    "big_divide": 1,
                    "calculate_division": 6,
                    "calculate_quotient": 5,
                    "calculate_quotient_and_remainder": 1,
                    "calculate_quotient_remainder": 2,
                    "compute_quotient_remainder": 1,
                    "decrease_and_multiply": 1,
                    "div_and_mod": 1,
                    "div_rem_with_overflow": 1,
                    "divide_and_conquer": 1,
                    "divide_and_modulo": 2,
                    "divide_and_modulus": 1,
                    "divide_and_remainder": 1,
                    "divide_unsigned": 1,
                    "divide_with_carry": 1,
                    "divide_with_remainder": 1,
                    "divided_multiplication": 1,
                    "divmod": 1,
                    "perform_division": 1,
                    "perform_unsigned_division": 1
                },
                "bVar11": {
                    "carry": 6,
                    "carry_flag": 25
                },
                "iVar10": {
                    "bit_count": 1,
                    "count": 1,
                    "leading_zeros": 1,
                    "shift": 4,
                    "shift_amount": 8,
                    "shift_bits": 1,
                    "shift_count": 14,
                    "shifts": 1
                },
                "lVar1": {
                    "calculate": 1,
                    "extended_result": 1,
                    "product": 2,
                    "quotient": 4,
                    "quotient1": 1,
                    "result": 4,
                    "temp": 2,
                    "temp_result": 2
                },
                "param_1": {
                    "dividend": 30,
                    "num1": 1
                },
                "param_2": {
                    "dividend_high": 6,
                    "dividend_upper": 1,
                    "dividend_upper_bits": 1,
                    "divisor": 21,
                    "num2": 1,
                    "remainder": 1
                },
                "param_3": {
                    "divisor": 9,
                    "divisor_low": 1,
                    "multiplier1": 1,
                    "partial_quotient": 1,
                    "quotient": 13,
                    "quotient1": 1,
                    "quotient_bits": 1,
                    "quotient_low": 1,
                    "quotient_part1": 1,
                    "temp1": 1,
                    "temp3": 1
                },
                "param_4": {
                    "divisor_high": 6,
                    "divisor_upper": 1,
                    "divisor_upper_bits": 1,
                    "multiplier2": 1,
                    "quotient2": 1,
                    "quotient_high": 1,
                    "quotient_part2": 1,
                    "remainder": 14,
                    "remaining_divisor": 1,
                    "shift_bits": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "threshold": 1
                },
                "uVar12": {
                    "result": 1
                },
                "uVar2": {
                    "dividend_part1": 1,
                    "high32": 1,
                    "partial_quotient": 1,
                    "partial_quotient1": 1,
                    "q1": 1,
                    "quotient": 3,
                    "quotient1": 7,
                    "quotient2": 1,
                    "quotient_low": 5,
                    "quotient_lower": 2,
                    "quotient_part1": 1,
                    "result": 3,
                    "result_lower": 1,
                    "temp1": 3
                },
                "uVar3": {
                    "dividend_high": 1,
                    "dividend_part2": 1,
                    "divisor_low": 2,
                    "divisor_part1": 1,
                    "divisor_upper_half": 1,
                    "q2": 1,
                    "quotient2": 7,
                    "quotient32": 1,
                    "quotient_high": 4,
                    "quotient_higher": 1,
                    "quotient_part": 1,
                    "quotient_part1": 2,
                    "quotient_part2": 1,
                    "quotient_top": 1,
                    "quotient_upper": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp_dividend": 1,
                    "u_var3": 1
                },
                "uVar4": {
                    "dividend_part3": 1,
                    "divisor_part2": 1,
                    "divisor_quotient": 1,
                    "product": 1,
                    "q3": 1,
                    "quotient1": 1,
                    "quotient3": 4,
                    "quotient_high": 2,
                    "quotient_low": 1,
                    "quotient_mid": 1,
                    "quotient_part2": 1,
                    "quotient_rem1": 1,
                    "remainder": 1,
                    "remainder_low": 3,
                    "remainder_lower": 1,
                    "remainder_part": 1,
                    "remainder_part1": 2,
                    "remainder_upper": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_dividend_upper_bits": 1,
                    "u_var4": 1
                },
                "uVar5": {
                    "dividend_low": 1,
                    "multiplier": 1,
                    "partial_product": 1,
                    "partial_quotient1": 1,
                    "partial_result_lower": 1,
                    "product_lower": 1,
                    "product_part1": 2,
                    "q4": 1,
                    "quotient4": 2,
                    "quotient_rem2": 1,
                    "remainder1": 2,
                    "remainder_high": 3,
                    "remainder_lower": 1,
                    "remainder_part2": 1,
                    "remainder_product": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 2,
                    "temp4": 2,
                    "temp_low": 1,
                    "temp_product": 1
                },
                "uVar6": {
                    "dividend_part2": 1,
                    "dividend_rem1": 1,
                    "dividend_shifted": 1,
                    "numerator1": 1,
                    "partial_quotient": 1,
                    "partial_quotient2": 1,
                    "product_higher": 1,
                    "product_part2": 2,
                    "remainder1": 1,
                    "remainder2": 1,
                    "remainder_low": 1,
                    "result_middle": 1,
                    "temp1": 4,
                    "temp2": 2,
                    "temp3": 1,
                    "temp32": 1,
                    "temp4": 2,
                    "temp5": 2,
                    "temp_dividend": 2,
                    "temp_dividend1": 1,
                    "temp_lower": 1,
                    "temp_product_upper_bits": 1,
                    "temp_var": 1
                },
                "uVar7": {
                    "dividend_rem2": 1,
                    "divisor_count": 1,
                    "numerator2": 1,
                    "partial_product": 1,
                    "partial_product_1": 1,
                    "partial_quotient2": 1,
                    "quotient_middle": 1,
                    "quotient_part1": 1,
                    "quotient_part2": 2,
                    "quotient_remainder": 1,
                    "quotient_temp": 1,
                    "remainder2": 1,
                    "remainder3": 1,
                    "remainder_part1": 2,
                    "temp2": 4,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 2,
                    "temp6": 2,
                    "temp_high": 1,
                    "temp_quotient": 1,
                    "temp_upper": 1,
                    "u_var7": 1
                },
                "uVar8": {
                    "dividend_new": 1,
                    "divisor32": 1,
                    "divisor_lower_half": 1,
                    "divisor_part": 1,
                    "divisor_part1": 1,
                    "divisor_remainder": 1,
                    "numerator3": 1,
                    "partial_product_2": 1,
                    "partial_result_top": 1,
                    "quotient": 1,
                    "quotient1": 1,
                    "quotient2_lower": 1,
                    "quotient_divisor_high": 1,
                    "quotient_factor": 1,
                    "quotient_lower_bits": 1,
                    "quotient_mid": 1,
                    "quotient_part2": 1,
                    "remainder1": 1,
                    "remainder3": 1,
                    "remainder_part2": 2,
                    "temp1": 1,
                    "temp3": 4,
                    "temp5": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "u_var8": 1
                },
                "uVar9": {
                    "divisor_quotient2": 1,
                    "numerator4": 1,
                    "partial_quotient_mod": 1,
                    "product32": 1,
                    "product_temp": 1,
                    "quotient2": 2,
                    "quotient2_upper": 1,
                    "quotient_division": 1,
                    "quotient_divisor_low": 1,
                    "quotient_lower": 1,
                    "quotient_new": 1,
                    "quotient_part3": 1,
                    "remainder": 1,
                    "remainder2": 1,
                    "remainder4": 1,
                    "remainder_high": 1,
                    "remainder_part2": 2,
                    "temp": 1,
                    "temp2": 1,
                    "temp4": 4,
                    "temp6": 1,
                    "temp7": 2,
                    "temp8": 1,
                    "temp_quotient": 1,
                    "u_var9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000847ac"
            ],
            "code": "\nulonglong calculate_quotient_and_remainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint quotient1;\n  uint quotient2;\n  uint quotient3;\n  uint remainder_high;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient2 = quotient >> 0x10;\n        remainder_high = quotient & 0xffff;\n        quotient1 = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        temp3 = divisor >> (0x20U - shift_count & 0xff);\n        quotient2 = quotient >> 0x10;\n        temp4 = temp3 / quotient2;\n        remainder_high = quotient & 0xffff;\n        quotient1 = remainder_high * temp4;\n        temp1 = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        quotient3 = temp1 >> 0x10 | (temp3 - quotient2 * temp4) * 0x10000;\n        dividend = dividend << shift_count;\n        temp3 = temp4;\n        if (quotient3 <= quotient1 && quotient1 - quotient3 != 0) {\n          carry_flag = CARRY4(quotient3,quotient);\n          quotient3 = quotient3 + quotient;\n          temp3 = temp4 - 1;\n          if ((carry_flag == false) && (quotient3 <= quotient1 && quotient1 - quotient3 != 0)) {\n            temp3 = temp4 - 2;\n            quotient3 = quotient3 + quotient;\n          }\n        }\n        temp2 = (quotient3 - quotient1) / quotient2;\n        temp4 = remainder_high * temp2;\n        divisor = temp1 & 0xffff | ((quotient3 - quotient1) - quotient2 * temp2) * 0x10000;\n        quotient1 = temp2;\n        if (divisor <= temp4 && temp4 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient1 = temp2 - 1;\n          if ((carry_flag == false) && (divisor <= temp4 && temp4 - divisor != 0)) {\n            quotient1 = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp4;\n        quotient1 = quotient1 | temp3 << 0x10;\n      }\n      temp4 = divisor / quotient2;\n      quotient3 = remainder_high * temp4;\n      temp1 = dividend >> 0x10 | (divisor - quotient2 * temp4) * 0x10000;\n      temp3 = temp4;\n      if (temp1 <= quotient3 && quotient3 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,quotient);\n        temp1 = temp1 + quotient;\n        temp3 = temp4 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient3 && quotient3 - temp1 != 0)) {\n          temp3 = temp4 - 2;\n          temp1 = temp1 + quotient;\n        }\n      }\n      temp4 = (temp1 - quotient3) / quotient2;\n      remainder_high = remainder_high * temp4;\n      temp1 = dividend & 0xffff | ((temp1 - quotient3) - quotient2 * temp4) * 0x10000;\n      quotient2 = temp4;\n      if (temp1 <= remainder_high && remainder_high - temp1 != 0) {\n        quotient2 = temp4 - 1;\n        if ((CARRY4(temp1,quotient) == false) &&\n           (temp1 + quotient <= remainder_high && remainder_high - (temp1 + quotient) != 0)) {\n          quotient2 = temp4 - 2;\n        }\n      }\n      return CONCAT44(quotient1,quotient2 | temp3 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      temp3 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = temp3 | divisor << shift_count;\n    }\n    quotient1 = quotient >> 0x10;\n    quotient2 = divisor / quotient1;\n    remainder_high = (quotient & 0xffff) * quotient2;\n    temp4 = dividend >> 0x10 | (divisor - quotient1 * quotient2) * 0x10000;\n    temp3 = quotient2;\n    if (temp4 <= remainder_high && remainder_high - temp4 != 0) {\n      carry_flag = CARRY4(temp4,quotient);\n      temp4 = temp4 + quotient;\n      temp3 = quotient2 - 1;\n      if ((carry_flag == false) && (temp4 <= remainder_high && remainder_high - temp4 != 0)) {\n        temp3 = quotient2 - 2;\n        temp4 = temp4 + quotient;\n      }\n    }\n    temp1 = (temp4 - remainder_high) / quotient1;\n    quotient2 = (quotient & 0xffff) * temp1;\n    remainder_high = dividend & 0xffff | ((temp4 - remainder_high) - quotient1 * temp1) * 0x10000;\n    quotient1 = temp1;\n    if (remainder_high <= quotient2 && quotient2 - remainder_high != 0) {\n      quotient1 = temp1 - 1;\n      if ((CARRY4(remainder_high,quotient) == false) &&\n         (remainder_high + quotient <= quotient2 && quotient2 - (remainder_high + quotient) != 0)) {\n        quotient1 = temp1 - 2;\n      }\n    }\n    quotient1 = quotient1 | temp3 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient1 = 0;\n    }\n    else {\n      quotient1 = 0x20 - shift_count;\n      temp3 = divisor >> (quotient1 & 0xff);\n      quotient2 = remainder << shift_count | quotient >> (quotient1 & 0xff);\n      remainder_high = quotient2 >> 0x10;\n      quotient3 = temp3 / remainder_high;\n      temp4 = (quotient2 & 0xffff) * quotient3;\n      temp1 = dividend >> (quotient1 & 0xff) | divisor << shift_count;\n      quotient1 = temp1 >> 0x10 | (temp3 - remainder_high * quotient3) * 0x10000;\n      temp3 = quotient3;\n      if (quotient1 <= temp4 && temp4 - quotient1 != 0) {\n        carry_flag = CARRY4(quotient1,quotient2);\n        quotient1 = quotient1 + quotient2;\n        temp3 = quotient3 - 1;\n        if ((carry_flag == false) && (quotient1 <= temp4 && temp4 - quotient1 != 0)) {\n          temp3 = quotient3 - 2;\n          quotient1 = quotient1 + quotient2;\n        }\n      }\n      quotient3 = (quotient1 - temp4) / remainder_high;\n      temp2 = (quotient2 & 0xffff) * quotient3;\n      remainder_high = temp1 & 0xffff | ((quotient1 - temp4) - remainder_high * quotient3) * 0x10000;\n      quotient1 = quotient3;\n      if (remainder_high <= temp2 && temp2 - remainder_high != 0) {\n        carry_flag = CARRY4(remainder_high,quotient2);\n        remainder_high = remainder_high + quotient2;\n        quotient1 = quotient3 - 1;\n        if ((carry_flag == false) && (remainder_high <= temp2 && temp2 - remainder_high != 0)) {\n          quotient1 = quotient3 - 2;\n          remainder_high = remainder_high + quotient2;\n        }\n      }\n      quotient1 = quotient1 | temp3 << 0x10;\n      result = (ulonglong)quotient1 * (ulonglong)(quotient << shift_count);\n      temp3 = (uint)((ulonglong)result >> 0x20);\n      if ((remainder_high - temp2 < temp3) || ((remainder_high - temp2 == temp3 && (dividend << shift_count < (uint)result)))\n         ) {\n        quotient1 = quotient1 - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient1;\n}\n\n",
            "current_name": "calculate_quotient_and_remainder_00084a80",
            "entrypoint": "0x00084a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084a80": "calculate_quotient_and_remainder_00084a80",
                "bVar11": "carry_flag",
                "iVar10": "shift_count",
                "lVar1": "result",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient1",
                "uVar3": "quotient2",
                "uVar4": "quotient3",
                "uVar5": "remainder_high",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085858": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085858",
            "entrypoint": "0x00085858",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_000816a8"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  continuous_data_processing_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00080f24",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20071184": {
                    "configuration_value": 1,
                    "data": 1,
                    "data_variable": 1,
                    "global_data": 3,
                    "global_value": 2,
                    "global_variable": 4,
                    "global_variable_value": 1,
                    "ret_value": 1
                },
                "thunk_FUN_00081714": {
                    "get_configuration_value": 1,
                    "get_data": 1,
                    "get_data_from_memory": 2,
                    "get_data_value": 4,
                    "get_data_variable": 1,
                    "get_default_value": 1,
                    "get_global_data": 4,
                    "get_global_data_value": 1,
                    "get_global_value": 4,
                    "get_global_variable": 5,
                    "get_global_variable_value": 5,
                    "get_ret_value": 1
                },
                "undefined4": {
                    "uint32": 2
                }
            },
            "called": [
                "FUN_00081714"
            ],
            "calling": [
                "FUN_0008043e",
                "FUN_00080258",
                "FUN_000804a8",
                "FUN_000805d0"
            ],
            "code": "\nuint32 get_global_variable_value_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "get_global_variable_value_thunk_00081714",
            "entrypoint": "0x00081208",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_00081714": "get_global_variable_value_thunk_00081714",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_0008021c",
            "FUN_000803d4",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081388",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_000815f8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00083974",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_00084384",
            "FUN_000845bc",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_00080410",
            "FUN_00080ce0",
            "FUN_00080da0",
            "FUN_000813a8",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_00081c5c",
            "FUN_00082970",
            "FUN_00083b14",
            "FUN_0008456c",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_0008477c",
            "FUN_000847ac"
        ],
        [
            "FUN_00080c0c",
            "FUN_00081210",
            "FUN_00081c54",
            "FUN_00081c94",
            "FUN_00083d00",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_00084750"
        ],
        [
            "FUN_00081318",
            "FUN_00081ca8",
            "FUN_00083d9c"
        ],
        [
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_00080258",
            "FUN_00080ae4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_00083adc"
        ],
        [
            "FUN_000802da",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081df4",
            "FUN_000825b0",
            "FUN_000842a4",
            "FUN_000846a4"
        ],
        [
            "FUN_000805d0",
            "FUN_000825a0",
            "FUN_00083808"
        ],
        [
            "FUN_00081622",
            "FUN_000816a8",
            "FUN_00083f34",
            "FUN_000844c4"
        ],
        [
            "FUN_0008163a",
            "FUN_00083c40"
        ],
        [
            "FUN_0008165c",
            "FUN_00082ac0"
        ],
        [
            "FUN_00081682"
        ],
        [
            "FUN_00080a68"
        ],
        [
            "FUN_0008378c"
        ]
    ],
    "locked_functions": [
        "FUN_00082b38"
    ],
    "used_tokens": 430532
}