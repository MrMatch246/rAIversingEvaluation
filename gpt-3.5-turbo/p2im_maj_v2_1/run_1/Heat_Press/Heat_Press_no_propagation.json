{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_2007089c": {
                    "flag": 8,
                    "flag_char": 1,
                    "flag_variable": 1,
                    "initialized_flag": 1,
                    "is_data_initialized": 1
                },
                "FUN_000800f4": {
                    "check_and_update_flag": 1,
                    "initialize_data": 1,
                    "initialize_flag": 22,
                    "mark_data_as_initialized": 1,
                    "set_flag_if_unset": 2,
                    "set_value_if_unset": 1,
                    "update_flag_if_zero": 2
                },
                "param_1": {
                    "flag": 1,
                    "flag_value": 1,
                    "input": 3,
                    "input_param": 4,
                    "input_parameter": 2,
                    "input_value": 16,
                    "output": 1,
                    "value": 3
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_000800f4(undefined4 input_value)\n\n{\n  if ((char)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_000800f4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "FUN_00080164": {
                    "initialize_data": 17,
                    "initialize_data_and_execute": 1,
                    "initialize_data_structure": 2,
                    "initialize_data_structures": 3,
                    "initialize_device": 2,
                    "initialize_function": 3,
                    "initialize_process": 1,
                    "initiate_process": 1
                },
                "FUN_00081210": {
                    "initialize_variable1": 1,
                    "modify_data": 2,
                    "perform_action1": 1,
                    "process_data": 4,
                    "process_value": 1,
                    "set_flag": 2,
                    "set_flag_value": 1,
                    "update_data": 2
                },
                "FUN_00081318": {
                    "change_data": 1,
                    "finalize_processing": 1,
                    "initialize_variable2": 1,
                    "perform_action2": 1,
                    "process_data": 1,
                    "reset_flag": 1,
                    "set_flag": 2,
                    "update_data": 1,
                    "update_flag": 1,
                    "update_parameters": 1,
                    "update_status": 2,
                    "update_value": 1
                },
                "F_00081210": {
                    "process_data": 1
                },
                "F_00081318": {
                    "update_data": 1
                },
                "FunnyFunction": {
                    "initialize_data": 1
                },
                "iVar1": {
                    "loop_condition": 1,
                    "loop_result": 1,
                    "result": 15,
                    "return_value": 11,
                    "status": 2
                },
                "param_1": {
                    "data": 7,
                    "data_pointer": 8,
                    "data_ptr": 1,
                    "data_struct_ptr": 1,
                    "data_structure": 2,
                    "data_structures": 1,
                    "data_to_change1": 1,
                    "device": 1,
                    "device_data": 1,
                    "flag": 1,
                    "function_data": 1,
                    "input1": 1,
                    "param1": 2,
                    "param_1": 1,
                    "process_data": 1,
                    "status": 1
                },
                "param_2": {
                    "data_to_change2": 1,
                    "flag": 1,
                    "input2": 1,
                    "param2": 2,
                    "param_2": 1,
                    "value": 4
                },
                "param_3": {
                    "value": 1
                }
            },
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000804a8"
            ],
            "code": "\nvoid initialize_data_structures_00080164(int **data_pointer)\n\n{\n  int result;\n  \n  *data_pointer = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte *)((int)data_pointer + 6)) {\n    FUN_00081210(*(byte *)((int)data_pointer + 6),1);\n    FUN_00081318(*(undefined *)((int)data_pointer + 6),0);\n  }\n  do {\n    result = (**(code **)(**data_pointer + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)data_pointer + 0x49) = 0;\n  *(undefined *)((int)data_pointer + 0x4a) = 0;\n  *(undefined2 *)(data_pointer + 0x15) = 0;\n  *(undefined2 *)((int)data_pointer + 0x52) = 0;\n  *(undefined2 *)(data_pointer + 0x14) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "initialize_data_structures_00080164",
                "iVar1": "result",
                "param_1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801b0": {
            "additional_data": {
                "FUN_000801b0": {
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "perform_function": 1,
                    "process_data": 28
                },
                "FUN_00081318": {
                    "handle_overflow": 5,
                    "initialize_binary_data": 1,
                    "initialize_data": 1,
                    "perform_action": 1,
                    "perform_cleanup": 1,
                    "reset_data": 1
                },
                "bVar1": {
                    "exceed_limit": 1,
                    "exceeded_limit": 1,
                    "exceeded_threshold": 2,
                    "is_boundary_exceeded": 1,
                    "is_exceeded": 1,
                    "is_full": 2,
                    "is_looping": 1,
                    "is_over_limit": 1,
                    "is_overflow": 18,
                    "is_overflow_occurred": 1,
                    "is_overflowed": 1,
                    "overflow_flag": 1
                },
                "bVar5": {
                    "assignment_index": 1,
                    "byte_counter": 1,
                    "byte_value": 5,
                    "count": 2,
                    "counter": 1,
                    "current_idx": 1,
                    "current_pos": 1,
                    "index": 6,
                    "old_counter": 1,
                    "previous_byte": 1,
                    "previous_counter": 1,
                    "temp": 6,
                    "temp_byte": 3,
                    "temp_counter": 1
                },
                "cVar3": {
                    "byte_count": 1,
                    "byte_counter": 1,
                    "char_value": 6,
                    "count": 5,
                    "counter": 15,
                    "data_index": 1,
                    "num_assignments": 1,
                    "result": 1
                },
                "iVar4": {
                    "result": 13,
                    "return_code": 1,
                    "return_value": 16,
                    "status": 1
                },
                "param_1": {
                    "binary_data": 1,
                    "data": 23,
                    "data_array": 1,
                    "data_pointer": 1,
                    "input_array": 1,
                    "input_data": 3
                },
                "param_2": {
                    "param2": 2
                },
                "param_3": {
                    "param3": 2
                },
                "uVar2": {
                    "current_value": 1,
                    "data_byte": 1,
                    "data_value": 1,
                    "element": 1,
                    "new_value": 5,
                    "result": 14,
                    "return_value": 2,
                    "returned_value": 1,
                    "temp_value": 1,
                    "unknown_value": 1,
                    "value": 3
                }
            },
            "called": [
                "FUN_00081318"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nint process_data_000801b0(int **data)\n\n{\n  bool is_overflow;\n  undefined result;\n  char counter;\n  int return_value;\n  byte temp;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  is_overflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (return_value = (**(code **)(**data + 8))(), return_value != 0) {\n      temp = *(byte *)((int)data + 0x49);\n      result = (**(code **)(**data + 0xc))();\n      counter = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + temp + 9) = result;\n      temp = counter + 1;\n      *(byte *)((int)data + 0x49) = temp;\n      if (0x3f < temp) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_overflow) {\n    counter = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)data + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "current_name": "process_data_000801b0",
            "entrypoint": "0x000801b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "bVar1": "is_overflow",
                "bVar5": "temp",
                "cVar3": "counter",
                "iVar4": "return_value",
                "param_1": "data",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008021c": {
            "additional_data": {
                "FUN_0008021c": {
                    "calculate_checksum": 29,
                    "calculate_crc": 2
                },
                "cVar3": {
                    "bit_count": 6,
                    "bit_counter": 18,
                    "bit_shift": 1,
                    "bit_shift_counter": 1,
                    "count": 1,
                    "iteration": 1,
                    "loop_counter": 2,
                    "shift_bits": 1
                },
                "iVar1": {
                    "current_address": 4,
                    "current_byte": 1,
                    "current_index": 21,
                    "current_offset": 2,
                    "index": 3
                },
                "param_1": {
                    "data_address": 2,
                    "data_offset": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_start": 7,
                    "data_start_address": 2,
                    "data_start_index": 6,
                    "input_data": 1,
                    "input_start": 2,
                    "start_address": 2,
                    "start_index": 4,
                    "start_offset": 1
                },
                "param_2": {
                    "byte_count": 1,
                    "data_length": 21,
                    "data_size": 1,
                    "input_length": 2,
                    "length": 5,
                    "num_bytes": 1
                },
                "uVar2": {
                    "checksum": 25,
                    "crc": 1,
                    "crc_value": 1,
                    "reversed_checksum": 1,
                    "temp_checksum": 3
                },
                "uVar2_temp": {
                    "temp_checksum": 1
                },
                "uVar4": {
                    "bit": 10,
                    "bit_check": 1,
                    "bit_mask": 1,
                    "bit_value": 16,
                    "temp": 2,
                    "temp_bit": 1
                },
                "uVar5": {
                    "temp": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080258"
            ],
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_counter;\n  uint bit_value;\n  \n  checksum = 0xffff;\n  for (current_index = data_start; (current_index - data_start & 0xffU) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_counter = '\\b';\n    do {\n      bit_value = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit_value != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "current_name": "calculate_checksum_0008021c",
            "entrypoint": "0x0008021c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008021c": "calculate_checksum_0008021c",
                "cVar3": "bit_counter",
                "iVar1": "current_index",
                "param_1": "data_start",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar4": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080258": {
            "additional_data": {
                "FUN_0008021c": {
                    "calculate_result": 1,
                    "convert_to_byte": 1,
                    "convert_value": 1,
                    "get_result": 1,
                    "perform_computation": 1
                },
                "FUN_00080258": {
                    "update_data": 6,
                    "update_data_and_call_functions": 4,
                    "update_data_and_perform_actions": 1,
                    "update_param": 7,
                    "update_param_and_call_functions": 3,
                    "update_param_value": 2,
                    "update_param_values": 3,
                    "update_parameter": 3,
                    "update_parameter_and_call_functions": 1,
                    "update_params_and_call_functions": 1
                },
                "FUN_00081318": {
                    "change_flag": 1,
                    "perform_action": 1,
                    "toggle_flag": 2,
                    "update_function1": 1
                },
                "bVar1": {
                    "byte_val": 7,
                    "byte_value": 19,
                    "byte_var": 5
                },
                "iVar3": {
                    "int_val": 1,
                    "int_value": 1,
                    "int_var": 4,
                    "iteration": 1,
                    "iteration_count": 1,
                    "loop_count": 1,
                    "loop_counter": 5,
                    "loop_index": 1,
                    "loop_var": 2,
                    "loop_variable": 2,
                    "return_value": 9,
                    "temp": 2,
                    "temp_var": 1
                },
                "param_1": {
                    "data": 11,
                    "p_data": 1,
                    "param": 4,
                    "param_array": 10,
                    "param_list": 2,
                    "parameter": 1,
                    "parameter_list": 1,
                    "params": 1
                },
                "param_2": {
                    "arg1": 2,
                    "length": 1,
                    "new_value1": 1,
                    "param1": 2,
                    "param2": 6,
                    "param_a": 3,
                    "size": 1,
                    "val1": 2,
                    "value1": 13
                },
                "param_3": {
                    "arg2": 2,
                    "new_value2": 1,
                    "param2": 2,
                    "param3": 8,
                    "param_b": 3,
                    "val2": 2,
                    "value2": 13
                },
                "param_4": {
                    "arg3": 2,
                    "new_value3": 1,
                    "param3": 2,
                    "param4": 8,
                    "param_c": 3,
                    "val3": 2,
                    "value3": 13
                },
                "thunk_FUN_00081714": {
                    "execute_thunk": 1,
                    "get_address": 1,
                    "get_memory_offset": 1,
                    "get_thunk_result": 1,
                    "thunk_function": 1
                },
                "uVar2": {
                    "converted_value": 1,
                    "fun_result": 1,
                    "result": 16,
                    "result_value": 2,
                    "return_value": 3,
                    "ushort_val": 2,
                    "ushort_value": 2,
                    "ushort_var": 4
                },
                "uVar4": {
                    "byte_val_u_int": 1,
                    "byte_value": 1,
                    "byte_value_converted": 1,
                    "casted_byte_value": 1,
                    "converted_byte": 6,
                    "converted_byte_val": 1,
                    "converted_byte_value": 2,
                    "converted_value": 7,
                    "test": 1,
                    "u_byte_value": 1,
                    "uint_val": 2,
                    "uint_value": 2,
                    "uint_var": 4,
                    "unsigned_byte": 1
                }
            },
            "called": [
                "FUN_0008021c",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "calling": [
                "FUN_000802da"
            ],
            "code": "\nvoid update_params_and_call_functions_00080258(int **data,undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  byte byte_value;\n  undefined2 result;\n  int return_value;\n  uint converted_value;\n  \n  byte_value = *(byte *)((int)data + 0x49);\n  converted_value = (uint)byte_value;\n  result = FUN_0008021c(data,converted_value,value2,value3,value3);\n  *(char *)((int)data + converted_value + 9) = (char)((ushort)result >> 8);\n  *(char *)((int)data + (converted_value + 1 & 0xff) + 9) = (char)result;\n  *(byte *)((int)data + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    FUN_00081318(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      return_value = (**(code **)(**data + 0xc))();\n    } while (-1 < return_value);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  return_value = thunk_FUN_00081714();\n  data[0x17] = (int *)(return_value + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "current_name": "update_params_and_call_functions_00080258",
            "entrypoint": "0x00080258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080258": "update_params_and_call_functions_00080258",
                "bVar1": "byte_value",
                "iVar3": "return_value",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "uVar2": "result",
                "uVar4": "converted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000802da": {
            "additional_data": {
                "FUN_00080258": {
                    "perform_operation": 1,
                    "process_data": 1
                },
                "FUN_000802da": {
                    "decode_data": 3,
                    "decode_param": 1,
                    "decode_parameters": 2,
                    "extract_and_validate_parameters": 1,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "improve_code": 1,
                    "parse_data": 1,
                    "parse_parameters": 1,
                    "process_data": 10,
                    "process_parameters": 1,
                    "validate_input": 1,
                    "validate_input_parameters": 1
                },
                "bVar2": {
                    "byte_result": 1,
                    "byte_value": 6,
                    "byte_var": 13,
                    "temp_byte": 10
                },
                "cVar1": {
                    "error": 1,
                    "error_code": 8,
                    "result": 17,
                    "return_value": 3,
                    "status": 1
                },
                "local_18": {
                    "data_value_short": 1,
                    "local_ushort": 1,
                    "local_var3": 2,
                    "local_var_18": 1,
                    "param3_low_ushort": 1,
                    "param3_low_word": 1,
                    "param_b_low_word": 1,
                    "short_value": 1,
                    "temp_short": 1,
                    "temp_short2": 1,
                    "temp_u_short": 1,
                    "temp_u_short1": 1,
                    "temp_ushort": 1,
                    "temp_ushort1": 1,
                    "temp_ushort2": 1,
                    "temp_ushort_1": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "ushort1": 1,
                    "ushort_value": 1,
                    "ushort_var2": 2,
                    "value2": 1,
                    "value2_low": 1,
                    "value2_lower": 1,
                    "value_low": 1,
                    "value_low_word": 1,
                    "var3": 2
                },
                "local_1b": {
                    "byte2": 2,
                    "config_byte_high": 1,
                    "flag_high_byte": 1,
                    "flags2": 1,
                    "key_high": 1,
                    "local_byte2": 1,
                    "local_var2": 2,
                    "local_var_b": 1,
                    "param2_high_byte": 2,
                    "param_a_high_byte": 1,
                    "temp_byte2": 2,
                    "temp_byte3": 1,
                    "temp_char2": 1,
                    "temp_flags_high": 1,
                    "temp_uchar2": 1,
                    "temp_undefined2": 1,
                    "temp_undefined_2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "undefined_var2": 2,
                    "upper_byte": 1,
                    "value1_high": 1,
                    "value1_high_byte": 1,
                    "var2": 2
                },
                "local_1c": {
                    "byte1": 2,
                    "config_byte_low": 1,
                    "flag_low_byte": 1,
                    "flags1": 1,
                    "key_low": 1,
                    "local_byte1": 1,
                    "local_var1": 2,
                    "local_var_c": 1,
                    "lower_byte": 1,
                    "param2_low_byte": 2,
                    "param_a_low_byte": 1,
                    "temp_byte1": 2,
                    "temp_byte2": 1,
                    "temp_char1": 1,
                    "temp_flags_low": 1,
                    "temp_uchar1": 1,
                    "temp_undefined1": 1,
                    "temp_undefined_1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "undefined_var1": 2,
                    "value1_low": 1,
                    "value2_upper": 1,
                    "var1": 2
                },
                "param_1": {
                    "binary_address": 1,
                    "buffer": 2,
                    "data": 2,
                    "data_address": 2,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "data_ptr": 2,
                    "function_data": 1,
                    "function_pointer": 1,
                    "input": 4,
                    "input_address": 1,
                    "input_buffer": 5,
                    "input_data": 3,
                    "input_param": 1,
                    "input_pointer": 1,
                    "input_ptr": 1
                },
                "param_2": {
                    "bit_field": 1,
                    "config_byte": 1,
                    "data_byte1": 1,
                    "flag": 4,
                    "flag1": 2,
                    "flags": 4,
                    "header": 1,
                    "input_size": 1,
                    "input_value": 1,
                    "input_value1": 2,
                    "key": 1,
                    "num_bytes": 1,
                    "param_a": 1,
                    "parameter1": 1,
                    "value1": 9
                },
                "param_3": {
                    "data_byte2": 1,
                    "data_value": 1,
                    "flag2": 2,
                    "input_value2": 2,
                    "length": 1,
                    "output_value": 1,
                    "param": 1,
                    "param_b": 1,
                    "param_value": 1,
                    "parameter2": 1,
                    "value": 10,
                    "value2": 9
                },
                "param_4": {
                    "array": 3,
                    "array_pointer": 1,
                    "buffer": 2,
                    "data": 5,
                    "data_array": 3,
                    "data_pointer": 1,
                    "data_ptr": 6,
                    "input": 1,
                    "input_array": 5,
                    "param_array": 1,
                    "parameter_array": 1,
                    "payload": 1,
                    "storage_array": 1
                },
                "puVar6": {
                    "current_param": 1,
                    "data_ptr": 1,
                    "ptr_temp": 1,
                    "ptr_var": 1,
                    "temp4": 1,
                    "temp_buffer": 1,
                    "temp_payload": 1,
                    "temp_pointer": 7,
                    "temp_ptr": 4,
                    "temp_u_short_pointer": 1,
                    "ushort_pointer": 1,
                    "ushort_ptr": 11
                },
                "uVar3": {
                    "temp": 3,
                    "temp1": 2,
                    "temp_byte": 1,
                    "temp_byte1": 1,
                    "temp_byte2": 1,
                    "temp_data": 1,
                    "temp_undefined": 5,
                    "temp_value": 1,
                    "temp_var": 3,
                    "undefined_var": 13
                },
                "uVar4": {
                    "temp2": 3,
                    "temp_flag": 1,
                    "temp_short": 4,
                    "temp_u_short": 1,
                    "temp_ushort": 4,
                    "temp_value": 3,
                    "temp_value2": 1,
                    "u_short_var": 1,
                    "ushort_var": 13
                },
                "uVar5": {
                    "temp2": 1,
                    "temp3": 3,
                    "temp_int": 2,
                    "temp_number": 1,
                    "temp_u_int": 1,
                    "temp_uint": 5,
                    "temp_value": 2,
                    "temp_value3": 1,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "uint_var": 13
                }
            },
            "called": [
                "FUN_00080258"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint process_data_000802da(int input_buffer,uint value1,uint value,ushort *data_ptr)\n\n{\n  char result;\n  byte byte_var;\n  undefined undefined_var;\n  ushort ushort_var;\n  uint uint_var;\n  ushort *ushort_ptr;\n  undefined var1;\n  undefined byte2;\n  ushort ushort_var2;\n  \n  var1 = (undefined)value1;\n  byte2 = (undefined)(value1 >> 8);\n  ushort_var2 = (ushort)value;\n  uint_var = value & 0xffff;\n  if (*(char *)(input_buffer + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(input_buffer + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((value1 & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(input_buffer + 9) = var1;\n  *(undefined *)(input_buffer + 10) = byte2;\n  *(ushort **)(input_buffer + 0x4c) = data_ptr;\n  *(char *)(input_buffer + 0xb) = (char)(value1 >> 0x18);\n  *(char *)(input_buffer + 0xc) = (char)(value1 >> 0x10);\n  undefined_var = (undefined)(value >> 8);\n  switch(byte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(input_buffer + 0xd) = undefined_var;\n    break;\n  case 5:\n    ushort_var = *data_ptr;\n    if (ushort_var != 0) {\n      ushort_var = 1;\n    }\n    *(char *)(input_buffer + 0xd) = -(char)ushort_var;\n    uint_var = 0;\n    break;\n  case 6:\n    *(char *)(input_buffer + 0xd) = (char)(*data_ptr >> 8);\n    uint_var = (uint)*data_ptr;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_var = (byte)(ushort_var2 >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      byte_var = byte_var + 1;\n    }\n    *(char *)(input_buffer + 0xe) = (char)value;\n    *(undefined *)(input_buffer + 0xd) = undefined_var;\n    *(byte *)(input_buffer + 0xf) = byte_var;\n    undefined_var = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(input_buffer + 0xd) = undefined_var;\n    *(char *)(input_buffer + 0xe) = (char)value;\n    data_ptr = data_ptr + -1;\n    *(char *)(input_buffer + 0xf) = (char)uint_var * '\\x02';\n    *(undefined *)(input_buffer + 0x49) = 7;\n    ushort_ptr = data_ptr + uint_var;\n    while (data_ptr != ushort_ptr) {\n      byte_var = *(byte *)(input_buffer + 0x49);\n      *(char *)(input_buffer + (uint)byte_var + 9) = (char)(data_ptr[1] >> 8);\n      uint_var = byte_var + 1 & 0xff;\n      *(char *)(input_buffer + 0x49) = (char)uint_var;\n      data_ptr = data_ptr + 1;\n      *(char *)(uint_var + input_buffer + 9) = (char)*data_ptr;\n      *(byte *)(input_buffer + 0x49) = byte_var + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(input_buffer + 0xe) = (char)uint_var;\n  undefined_var = 6;\nLAB_0008034a:\n  *(undefined *)(input_buffer + 0x49) = undefined_var;\nswitchD_0008031e_caseD_7:\n  FUN_00080258(input_buffer);\n  *(undefined *)(input_buffer + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "current_name": "process_data_000802da",
            "entrypoint": "0x000802da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000802da": "process_data_000802da",
                "bVar2": "byte_var",
                "cVar1": "result",
                "local_18": "ushort_var2",
                "local_1b": "byte2",
                "local_1c": "var1",
                "param_1": "input_buffer",
                "param_2": "value1",
                "param_3": "value",
                "param_4": "data_ptr",
                "puVar6": "ushort_ptr",
                "uVar3": "undefined_var",
                "uVar4": "ushort_var",
                "uVar5": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803d4": {
            "additional_data": {
                "0": {
                    "valid_value": 1
                },
                "0xfb": {
                    "check_failure": 1,
                    "failure_code": 1,
                    "failure_condition": 1,
                    "invalid_value": 1,
                    "return_code1": 1
                },
                "8": {
                    "array_length": 2,
                    "valid_values_count": 1
                },
                "DAT_00084d10": {
                    "comparison_array": 1
                },
                "FUN_000803d4": {
                    "check_and_increment": 4,
                    "check_and_increment_counter": 1,
                    "check_and_increment_value": 2,
                    "check_and_update_value": 9,
                    "check_byte_and_increment": 2,
                    "check_byte_match": 1,
                    "check_character": 1,
                    "check_param": 1,
                    "check_value": 2,
                    "check_value_and_increment": 3,
                    "check_value_and_increment_counter": 3,
                    "check_value_and_update": 1,
                    "check_value_and_update_counter": 1
                },
                "byte": {
                    "target_byte": 1,
                    "value": 1
                },
                "iVar1": {
                    "counter": 2,
                    "i": 1,
                    "index": 28
                },
                "param_1": {
                    "character": 1,
                    "input": 11,
                    "input_value": 13,
                    "value": 6
                },
                "short": {
                    "count": 1,
                    "short_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nundefined4 check_value_and_increment_counter_000803d4(int input_value)\n\n{\n  int index;\n  \n  if ((int)((uint)*(value *)(input_value + 10) << 0x18) < 0) {\n    *(short_value *)(input_value + 0x54) = *(short_value *)(input_value + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(value *)(input_value + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short_value *)(input_value + 0x54) = *(short_value *)(input_value + 0x54) + 1;\n  return 1;\n}\n\n",
            "current_name": "check_value_and_increment_counter_000803d4",
            "entrypoint": "0x000803d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803d4": "check_value_and_increment_counter_000803d4",
                "byte": "value",
                "iVar1": "index",
                "param_1": "input_value",
                "short": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080410": {
            "additional_data": {
                "FUN_00080410": {
                    "copy_data": 1,
                    "decode_and_store_data": 1,
                    "process_and_store_data": 1,
                    "process_byte_data": 1,
                    "process_data": 21,
                    "process_function": 1,
                    "reverse_and_store_data": 1,
                    "reverse_binary": 1
                },
                "FUN_000815f8": {
                    "convert_data": 1,
                    "reverse_byte_bits": 1
                },
                "bVar3": {
                    "count": 2,
                    "counter": 27,
                    "index": 1,
                    "loop_counter": 1
                },
                "iVar2": {
                    "address": 2,
                    "adjusted_address": 2,
                    "calculated_value": 1,
                    "calculation": 1,
                    "computed_value1": 1,
                    "current_index": 1,
                    "decoded_data_address": 1,
                    "index": 3,
                    "new_index": 1,
                    "offset": 8,
                    "offset_addr": 1,
                    "temp1": 2,
                    "temp_var": 2,
                    "temp_var1": 3,
                    "updated_addr": 1,
                    "updated_input": 1
                },
                "iVar5": {
                    "array_addr": 2,
                    "array_index": 2,
                    "array_offset": 1,
                    "array_ptr": 2,
                    "computed_value2": 1,
                    "data_address": 1,
                    "data_array": 1,
                    "data_array_end": 1,
                    "data_offset": 1,
                    "i_var": 1,
                    "offset": 2,
                    "output_address": 1,
                    "output_buffer": 2,
                    "output_offset": 1,
                    "ptr_data": 1,
                    "ptr_value": 1,
                    "storage_address": 1,
                    "stored_data_address": 1,
                    "sub_function_result": 1,
                    "temp2": 2,
                    "temp_var2": 3,
                    "value_ptr": 1,
                    "var5": 1
                },
                "param_1": {
                    "binary_address": 1,
                    "data": 4,
                    "data_address": 6,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "function_param": 1,
                    "input": 1,
                    "input_address": 2,
                    "input_array": 2,
                    "input_base_addr": 1,
                    "input_buffer": 2,
                    "input_data": 3,
                    "input_param": 1,
                    "reversed_parameter1": 1
                },
                "param_2": {
                    "param2": 26,
                    "param_2": 1,
                    "reversed_parameter2": 1,
                    "size1": 1,
                    "unused_param1": 2
                },
                "param_3": {
                    "param3": 26,
                    "param_3": 1,
                    "size2": 1,
                    "unused_param2": 2,
                    "unused_parameter2": 1
                },
                "param_4": {
                    "param": 1,
                    "param4": 26,
                    "param_4": 1,
                    "unused_param3": 2,
                    "unused_parameter3": 1
                },
                "uVar1": {
                    "result": 25,
                    "result_value": 1,
                    "return_val": 1,
                    "return_value": 3,
                    "value": 1
                },
                "uVar4": {
                    "byte_count": 1,
                    "byte_counter": 1,
                    "byte_index": 1,
                    "converted_counter": 9,
                    "converted_index": 1,
                    "counter_uint": 2,
                    "index": 12,
                    "loop_index": 1,
                    "shift_value": 1,
                    "temp_value": 1,
                    "u_counter": 1
                }
            },
            "called": [
                "FUN_000815f8"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nvoid process_byte_data_00080410(int data_address,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 result;\n  int offset;\n  byte counter;\n  uint index;\n  int temp_var2;\n  \n  counter = 0;\n  while( true ) {\n    index = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data_address + 0xb) >> 1 <= index) break;\n    offset = (index * 2 + 3 & 0xff) + data_address;\n    temp_var2 = *(int *)(data_address + 0x4c);\n    result = FUN_000815f8(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                         *(byte *)(data_address + 0xb),param4);\n    *(undefined2 *)(temp_var2 + index * 2) = result;\n  }\n  return;\n}\n\n",
            "current_name": "process_byte_data_00080410",
            "entrypoint": "0x00080410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080410": "process_byte_data_00080410",
                "bVar3": "counter",
                "iVar2": "offset",
                "iVar5": "temp_var2",
                "param_1": "data_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "result",
                "uVar4": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008043e": {
            "additional_data": {
                "7": {
                    "7": 1
                },
                "FUN_000801b0": {
                    "check_condition": 1,
                    "check_threshold": 2,
                    "handle_condition_bigger_than_seven": 1,
                    "handle_large_limit": 1,
                    "perform_action1": 1,
                    "process_data": 1,
                    "process_param_helper_one": 1,
                    "process_parameter": 1,
                    "update_param": 1,
                    "update_parameters1": 1
                },
                "FUN_000803d4": {
                    "check_condition": 1,
                    "check_success": 1,
                    "handle_error": 2,
                    "is_valid_param": 1,
                    "perform_action2": 1,
                    "perform_operation": 1,
                    "process_param_helper_two": 1,
                    "update_parameters2": 1,
                    "validate_data": 1,
                    "validate_return_value": 1
                },
                "FUN_00080410": {
                    "handle_execution_failure": 1,
                    "handle_param_3_condition": 1,
                    "handle_special_case": 1,
                    "perform_action": 1,
                    "set_flag": 1,
                    "set_flags": 1,
                    "update_data": 1,
                    "update_state": 1,
                    "update_status": 1
                },
                "FUN_0008043e": {
                    "check_and_call_function": 1,
                    "check_and_increment_counter": 2,
                    "check_and_increment_value": 1,
                    "check_and_process_data": 3,
                    "check_and_process_input": 1,
                    "check_and_update_data": 2,
                    "check_and_update_param": 2,
                    "check_and_update_parameters": 1,
                    "check_and_update_status": 1,
                    "check_and_update_value": 1,
                    "check_conditions": 1,
                    "check_param": 1,
                    "check_param_and_execute": 1,
                    "check_param_and_return": 1,
                    "check_parameter_validity": 1,
                    "check_parameters": 1,
                    "count_successful_calls": 1,
                    "process_data": 5,
                    "process_function": 1,
                    "process_param": 1,
                    "process_parameter": 1,
                    "validate_input": 1
                },
                "FUN_00081714": {
                    "get_pi_var3": 1,
                    "thunk_function": 1
                },
                "LAB_000804a2": {
                    "end": 1
                },
                "cVar1": {
                    "char_result": 1,
                    "output_char": 1,
                    "result": 25,
                    "result_var": 1,
                    "return_value": 1,
                    "status": 1,
                    "updated_value": 1
                },
                "iVar4": {
                    "check_result": 11,
                    "comparison_result": 2,
                    "comparison_value": 1,
                    "error": 1,
                    "error_code": 3,
                    "func_result": 1,
                    "func_result2": 1,
                    "function_result": 1,
                    "function_return_value": 1,
                    "is_zero": 1,
                    "result": 1,
                    "return_value": 3,
                    "status": 1,
                    "sub_func_result": 1,
                    "sub_result": 1,
                    "temp3": 1
                },
                "param_1": {
                    "array_ptr": 1,
                    "data": 10,
                    "data_pointer": 1,
                    "input": 3,
                    "input_array": 1,
                    "input_data": 2,
                    "input_params": 2,
                    "param": 3,
                    "param_array": 2,
                    "parameter": 2,
                    "parameter_array": 1,
                    "parameters": 2,
                    "pointer_to_integer_pointer": 1
                },
                "piVar3": {
                    "func_ptr": 1,
                    "func_result": 1,
                    "memory_block": 1,
                    "pointer_to_integer": 1,
                    "some_value": 1,
                    "temp2": 1,
                    "threshold": 5,
                    "threshold_value": 2,
                    "thunk_result": 16,
                    "thunk_return_value": 2
                },
                "thunk_FUN_00081714": {
                    "get_checked_value": 1,
                    "get_data": 1,
                    "get_memory_block": 1,
                    "get_threshold": 3,
                    "get_threshold_value": 1,
                    "thunk_function": 2
                },
                "uVar2": {
                    "call_result": 1,
                    "callback_result": 1,
                    "code_result": 1,
                    "error_code": 1,
                    "execution_result": 1,
                    "function_result": 8,
                    "raw_value": 1,
                    "result": 4,
                    "return_value": 7,
                    "returned_value": 1,
                    "status": 1,
                    "temp1": 1,
                    "temp_var": 2
                },
                "unaff_r6": {
                    "byte_count": 1,
                    "byte_value": 3,
                    "call_type": 1,
                    "callback_value": 1,
                    "condition": 1,
                    "condition_value": 2,
                    "counter": 1,
                    "execution_result": 1,
                    "flag": 1,
                    "int_value": 1,
                    "length": 1,
                    "limit": 1,
                    "loop_counter": 1,
                    "mask": 1,
                    "param": 1,
                    "temp4": 1,
                    "threshold": 1,
                    "value": 9
                }
            },
            "called": [
                "FUN_00080410",
                "FUN_000801b0",
                "FUN_000803d4",
                "thunk_FUN_00081714"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint check_and_process_data_0008043e(int **data)\n\n{\n  char result;\n  uint function_result;\n  int *thunk_result;\n  int check_result;\n  uint value;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    function_result = (**(code **)(**data + 8))();\n    value = function_result & 0xff;\n  }\n  thunk_result = (int *)thunk_FUN_00081714();\n  if (data[0x17] < thunk_result) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < value) {\n    FUN_000801b0(data);\n    check_result = FUN_000803d4(data);\n    if (check_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        FUN_00080410(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)check_result;\n    }\n    goto end;\n  }\n  result = '\\0';\nend:\n  return (int)result;\n}\n\n",
            "current_name": "check_and_process_data_0008043e",
            "entrypoint": "0x0008043e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008043e": "check_and_process_data_0008043e",
                "LAB_000804a2": "end",
                "cVar1": "result",
                "iVar4": "check_result",
                "param_1": "data",
                "piVar3": "thunk_result",
                "uVar2": "function_result",
                "unaff_r6": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000804a8": {
            "additional_data": {
                "DAT_200708b8": {
                    "flag_check": 1,
                    "is_error": 1
                },
                "DAT_200708c0": {
                    "result4": 1,
                    "value5": 1
                },
                "DAT_200708c8": {
                    "value1": 1
                },
                "DAT_20070934": {
                    "result3": 1,
                    "value4": 1
                },
                "DAT_20070948": {
                    "error_code": 1,
                    "flag": 1
                },
                "DAT_2007097c": {
                    "data17": 1,
                    "interrupt_enabled": 1
                },
                "DAT_2007097d": {
                    "data1": 1,
                    "module_id": 1
                },
                "DAT_2007097e": {
                    "data23": 1,
                    "is_initialized": 1
                },
                "DAT_20070980": {
                    "data5": 1,
                    "sensor_range": 1
                },
                "DAT_20070984": {
                    "data6": 1,
                    "sensor_buffer_ptr": 1
                },
                "DAT_20070988": {
                    "data18": 1,
                    "interrupt_threshold": 1
                },
                "DAT_20070989": {
                    "buffer_length": 1,
                    "data7": 1
                },
                "DAT_2007098a": {
                    "device_id": 1,
                    "sensor_address": 1
                },
                "DAT_2007098c": {
                    "device_version": 1,
                    "sensor_value": 1
                },
                "DAT_20070990": {
                    "device_name": 1,
                    "sensor_buffer": 1
                },
                "DAT_20070994": {
                    "data19": 1,
                    "interrupt_status": 1
                },
                "DAT_20070995": {
                    "data2": 1,
                    "module_status": 1
                },
                "DAT_20070996": {
                    "data3": 1,
                    "sensor_threshold": 1
                },
                "DAT_20070998": {
                    "buffer_size": 1,
                    "data8": 1
                },
                "DAT_2007099c": {
                    "data24": 1,
                    "input_buffer": 1
                },
                "DAT_200709a0": {
                    "data20": 1,
                    "interrupt_timeout": 1
                },
                "DAT_200709a1": {
                    "data9": 1,
                    "data_size": 1
                },
                "DAT_200709a2": {
                    "data11": 1,
                    "sensor_timeout": 1
                },
                "DAT_200709a4": {
                    "data4": 1,
                    "default_value": 1
                },
                "DAT_200709a8": {
                    "data12": 1,
                    "data_buffer": 1
                },
                "DAT_200709ac": {
                    "data13": 1,
                    "data_length": 1
                },
                "DAT_200709ad": {
                    "data14": 1,
                    "data_format": 1
                },
                "DAT_200709ae": {
                    "data25": 1,
                    "input_length": 1
                },
                "DAT_200709b0": {
                    "data10": 1,
                    "sensor_id": 1
                },
                "DAT_200709b4": {
                    "data15": 1,
                    "output_buffer": 1
                },
                "DAT_200709b8": {
                    "data16": 1,
                    "output_length": 1
                },
                "DAT_200709b9": {
                    "data26": 1,
                    "input_timeout": 1
                },
                "DAT_200709ba": {
                    "data21": 1,
                    "interrupt_enable": 1
                },
                "DAT_200709bc": {
                    "data22": 1,
                    "interrupt_flag": 1
                },
                "DAT_200709c0": {
                    "data27": 1,
                    "output_timeout": 1
                },
                "DAT_200709e0": {
                    "result1": 1,
                    "value2": 1
                },
                "DAT_200709e4": {
                    "buffer_ptr": 1,
                    "memory": 1
                },
                "DAT_20070a3a": {
                    "system_delay": 1,
                    "timeout": 1
                },
                "DAT_20070a48": {
                    "result2": 1,
                    "value3": 1
                },
                "FUN_00080164": {
                    "configure_memory": 1,
                    "initialize_data": 3,
                    "initialize_device": 1,
                    "initialize_memory": 9,
                    "initialize_param": 1,
                    "set_configuration": 4,
                    "set_data": 1,
                    "set_device_info": 1,
                    "set_initial_values": 5,
                    "set_interrupt_vector": 1,
                    "set_memory": 1
                },
                "FUN_000804a8": {
                    "initialize": 4,
                    "initialize_configuration": 1,
                    "initialize_data": 1,
                    "initialize_device": 6,
                    "initialize_settings": 1,
                    "initialize_system": 18
                },
                "FUN_00081210": {
                    "configure_device": 7,
                    "configure_feature": 1,
                    "configure_hardware": 4,
                    "configure_module": 4,
                    "configure_setting": 1,
                    "configure_settings": 1,
                    "configure_subsystem": 1,
                    "set_configuration": 5,
                    "set_device_configuration": 1,
                    "set_mode": 1,
                    "set_setting": 1,
                    "set_system_option": 1
                },
                "FUN_00081318": {
                    "configure_device": 1,
                    "initialize_component": 1,
                    "initialize_data": 2,
                    "initialize_memory": 1,
                    "initialize_peripheral": 1,
                    "initialize_registers": 1,
                    "set_configuration": 2,
                    "set_configuration_values": 1,
                    "set_device_parameters": 2,
                    "set_device_properties": 1,
                    "set_device_state": 1,
                    "set_flag": 1,
                    "set_options": 1,
                    "set_parameter": 2,
                    "set_parameters": 4,
                    "set_preference": 1,
                    "set_values": 1,
                    "setup_device": 1,
                    "update_settings": 2,
                    "write_settings": 1
                },
                "FUN_00081714": {
                    "get_offset": 1
                },
                "iVar1": {
                    "local_var1": 1,
                    "random_number": 1,
                    "random_value": 1,
                    "result": 2,
                    "return_value": 2
                },
                "param_1": {
                    "device": 1,
                    "device_list": 1,
                    "param1": 3
                },
                "param_2": {
                    "flag": 1,
                    "param2": 3,
                    "value": 1
                },
                "param_3": {
                    "param3": 1
                },
                "software_interrupt": {
                    "trigger_interrupt": 2
                },
                "thunk_FUN_00081714": {
                    "generate_random_number": 2,
                    "generate_random_value": 1,
                    "generate_value": 1,
                    "get_current_time": 1,
                    "get_current_value": 1,
                    "get_random_number": 3,
                    "get_random_value": 13,
                    "get_value": 5
                }
            },
            "called": [
                "FUN_00080164",
                "FUN_00081210",
                "FUN_00081318",
                "thunk_FUN_00081714"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nundefined8 initialize_system_000804a8(void)\n\n{\n  int return_value;\n  \n  FUN_00081210(1,0);\n  FUN_00081210(6,1);\n  FUN_00081210(0,1);\n  FUN_00081210(1,1);\n  FUN_00081318(0,0);\n  FUN_00081318(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  FUN_00080164(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = thunk_FUN_00081714();\n  return_value = thunk_FUN_00081714();\n  DAT_200709e0 = return_value + 1000;\n  return_value = thunk_FUN_00081714();\n  DAT_20070a48 = return_value + 1000;\n  return_value = thunk_FUN_00081714();\n  DAT_20070934 = return_value + 1000;\n  return_value = thunk_FUN_00081714();\n  DAT_200708c0 = return_value + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    trigger_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_system_000804a8",
            "entrypoint": "0x000804a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000804a8": "initialize_system_000804a8",
                "iVar1": "return_value",
                "software_interrupt": "trigger_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805d0": {
            "additional_data": {
                "DAT_20070940": {
                    "param33": 1
                },
                "DAT_20070960": {
                    "counter3": 1
                },
                "DAT_20070980": {
                    "param2": 1
                },
                "DAT_20070984": {
                    "param3": 1
                },
                "DAT_20070998": {
                    "param5": 1
                },
                "DAT_2007099c": {
                    "param6": 1
                },
                "DAT_200709b0": {
                    "param8": 1
                },
                "DAT_200709b4": {
                    "param9": 1
                },
                "DISTANCE": {
                    "distance": 1
                },
                "DISTANCE_0": {
                    "distance0": 1
                },
                "DISTANCE_1": {
                    "distance1": 1
                },
                "DISTANCE_10": {
                    "distance12": 1
                },
                "DISTANCE_11": {
                    "distance13": 1
                },
                "DISTANCE_12": {
                    "distance14": 1
                },
                "DISTANCE_13": {
                    "distance15": 1
                },
                "DISTANCE_14": {
                    "distance16": 1
                },
                "DISTANCE_15": {
                    "distance17": 1
                },
                "DISTANCE_2": {
                    "distance3": 1
                },
                "DISTANCE_3": {
                    "distance5": 1
                },
                "DISTANCE_4": {
                    "distance6": 1
                },
                "DISTANCE_5": {
                    "distance7": 1
                },
                "DISTANCE_6": {
                    "distance8": 1
                },
                "DISTANCE_7": {
                    "distance9": 1
                },
                "DISTANCE_8": {
                    "distance10": 1
                },
                "DISTANCE_9": {
                    "distance11": 1
                },
                "DISTANCE_THRESHOLD": {
                    "threshold": 1
                },
                "END_CONDITION": {
                    "end_condition": 1
                },
                "FUN_000802da": {
                    "calculate_checksum": 2,
                    "calculate_metric_a": 1,
                    "calculate_params": 1,
                    "calculate_result": 1,
                    "calculate_sum": 1,
                    "calculate_value": 1,
                    "calculate_values": 2,
                    "perform_calculation": 2,
                    "process_data": 4,
                    "process_data_helper": 4,
                    "process_data_internal": 1,
                    "update_data": 2,
                    "update_data_helper": 1,
                    "update_data_parameters": 1,
                    "update_values": 1
                },
                "FUN_0008043e": {
                    "fetch_data": 1,
                    "get_input_data": 1,
                    "initialize_array": 1,
                    "initialize_data": 8,
                    "initialize_memory": 1,
                    "process_data": 3,
                    "process_data_pointer": 1,
                    "read_data": 1,
                    "reset_data": 4,
                    "retrieve_data": 1,
                    "update_data": 2
                },
                "FUN_000805d0": {
                    "analyze_data": 2,
                    "better_function": 1,
                    "calculate_data": 1,
                    "calculate_metrics": 6,
                    "calculate_statistics": 1,
                    "improved_func": 1,
                    "process_data": 8,
                    "update_data": 2,
                    "update_data_and_calculate": 1,
                    "update_sensor_data": 1,
                    "update_status": 2
                },
                "FUN_00081714": {
                    "get_thunk_value": 1
                },
                "FUN_00081730": {
                    "apply_operation1": 1,
                    "calculate_metric_e": 1,
                    "calculate_something_else": 1,
                    "combine_values": 3,
                    "compute_result_a": 1,
                    "multiply_values": 1,
                    "perform_calculation": 1,
                    "perform_computation": 1,
                    "perform_operation": 9,
                    "perform_operation1": 3,
                    "perform_operation_a": 1,
                    "perform_operation_with_params": 1,
                    "perform_other_calculation": 1
                },
                "FUN_00081734": {
                    "add_value": 1,
                    "apply_changes": 1,
                    "apply_operation4": 1,
                    "calculate_metric_h": 1,
                    "combine_modified_values": 1,
                    "compute_result_d": 1,
                    "modify_value": 2,
                    "perform_additional_operation": 1,
                    "perform_another_operation": 1,
                    "perform_extra_calculation": 1,
                    "perform_operation": 1,
                    "perform_operation2": 1,
                    "perform_operation3": 1,
                    "perform_operation4": 2,
                    "perform_operation_d": 1,
                    "perform_other_operation": 1,
                    "subtract_values": 1,
                    "update_counter": 1,
                    "update_intermediate_result": 1,
                    "update_value": 3
                },
                "FUN_00081894": {
                    "calculate_another_value": 1,
                    "calculate_factor": 2,
                    "calculate_metric_d": 1,
                    "calculate_offset": 1,
                    "calculate_other_value": 2,
                    "calculate_result": 1,
                    "calculate_value": 5,
                    "calculate_value3": 1,
                    "calculate_var4": 1,
                    "compute_result": 1,
                    "compute_value": 2,
                    "convert_to_milliseconds": 1,
                    "get_info": 1,
                    "get_initial_value": 1,
                    "transform_value": 1
                },
                "FUN_0008189c": {
                    "calculate_average": 1,
                    "calculate_checksum": 3,
                    "calculate_final_value": 1,
                    "calculate_metric_b": 1,
                    "calculate_something": 2,
                    "calculate_value": 12,
                    "calculate_value1": 1,
                    "calculate_var1": 1,
                    "convert_to_milliseconds": 1,
                    "convert_to_unsigned": 1,
                    "get_sensor_reading": 1
                },
                "FUN_00081944": {
                    "apply_operation3": 1,
                    "calculate_metric_g": 1,
                    "calculate_new_value": 1,
                    "combine_values": 1,
                    "compute_result_c": 1,
                    "modify_value": 3,
                    "perform_additional_calculation": 1,
                    "perform_another_operation": 1,
                    "perform_complex_operation": 1,
                    "perform_computation": 1,
                    "perform_operation": 1,
                    "perform_operation2": 1,
                    "perform_operation3": 2,
                    "perform_operation_c": 1,
                    "process_values": 1,
                    "update_data": 1,
                    "update_result": 2,
                    "update_state": 1,
                    "update_value": 1,
                    "update_values": 1
                },
                "FUN_00081c94": {
                    "check_condition": 8,
                    "check_condition_a": 1,
                    "check_if_zero": 1,
                    "check_valid": 1,
                    "check_valid_value": 1,
                    "check_validity": 1,
                    "check_value": 7,
                    "check_var2": 1,
                    "is_valid_sensor_reading": 1
                },
                "FUN_00081ca8": {
                    "check_and_set_state": 1,
                    "check_condition": 3,
                    "check_function": 1,
                    "check_sensor_connection": 1,
                    "check_value": 1,
                    "check_var1": 1,
                    "compare_values": 1,
                    "execute_code": 1
                },
                "FUN_00081cd0": {
                    "apply_operation2": 1,
                    "calculate_metric_f": 1,
                    "calculate_result": 2,
                    "calculate_var5": 1,
                    "compute_result": 1,
                    "compute_result_b": 1,
                    "do_something": 2,
                    "fetch_data": 1,
                    "generate_output": 1,
                    "get_data": 1,
                    "get_timestamp": 1,
                    "get_value": 1,
                    "initialize_data": 1,
                    "perform_another_calculation": 1,
                    "perform_calculation": 2,
                    "perform_operation": 1,
                    "perform_operation2": 2,
                    "perform_operation_b": 1,
                    "perform_operation_with_no_params": 1,
                    "retrieve_data": 1
                },
                "FUN_00081d1c": {
                    "calculate_checksum": 6,
                    "calculate_hash": 1,
                    "calculate_metric_c": 1,
                    "calculate_output": 1,
                    "calculate_value2": 1,
                    "calculate_var3": 1,
                    "compute_hash": 1,
                    "compute_result": 1,
                    "convert_sensor_reading": 1,
                    "get_result": 1,
                    "get_some_value": 1,
                    "perform_operation": 2,
                    "process_value": 3,
                    "update_value": 1
                },
                "PARAM1": {
                    "param22": 1
                },
                "PARAM10": {
                    "param31": 1
                },
                "PARAM2": {
                    "param23": 1
                },
                "PARAM3": {
                    "param24": 1
                },
                "PARAM4": {
                    "param25": 1
                },
                "PARAM5": {
                    "param26": 1
                },
                "PARAM6": {
                    "param27": 1
                },
                "PARAM7": {
                    "param28": 1
                },
                "PARAM8": {
                    "param29": 1
                },
                "PARAM9": {
                    "param30": 1
                },
                "THRESHOLD": {
                    "threshold2": 1
                },
                "THRESHOLD_SUBTRACTION": {
                    "threshold_subtraction": 1
                },
                "_DAT_200708bc": {
                    "result6": 1
                },
                "_DAT_200708d0": {
                    "param19": 1
                },
                "_DAT_200708d8": {
                    "param14": 1
                },
                "_DAT_200708da": {
                    "param15": 1
                },
                "_DAT_200708dc": {
                    "param16": 1
                },
                "_DAT_200708de": {
                    "param17": 1
                },
                "_DAT_200708e4": {
                    "param18": 1
                },
                "_DAT_200708e8": {
                    "param20": 1
                },
                "_DAT_200708ea": {
                    "param21": 1
                },
                "_DAT_20070906": {
                    "another_thing3": 1
                },
                "_DAT_20070908": {
                    "another_thing2": 1
                },
                "_DAT_2007090c": {
                    "result7": 1
                },
                "_DAT_2007091c": {
                    "param36": 1
                },
                "_DAT_2007093c": {
                    "param38": 1
                },
                "_DAT_20070950": {
                    "result": 1
                },
                "_DAT_20070960": {
                    "distance2": 1
                },
                "_DAT_20070964": {
                    "distance4": 1
                },
                "_DAT_2007096c": {
                    "param37": 1
                },
                "_DAT_20070970": {
                    "counter2": 1
                },
                "_DAT_20070978": {
                    "result5": 1
                },
                "_DAT_2007097c": {
                    "param1": 1
                },
                "_DAT_20070988": {
                    "param10": 1
                },
                "_DAT_20070994": {
                    "param4": 1
                },
                "_DAT_2007099c": {
                    "param11": 1
                },
                "_DAT_200709a0": {
                    "another_thing4": 1
                },
                "_DAT_200709ac": {
                    "param7": 1
                },
                "_DAT_200709bc": {
                    "result2": 1
                },
                "_DAT_200709c4": {
                    "param35": 1
                },
                "_DAT_200709c8": {
                    "param12": 1
                },
                "_DAT_200709cc": {
                    "something_else": 1
                },
                "_DAT_200709ce": {
                    "another_thing": 1
                },
                "_DAT_200709d0": {
                    "something": 1
                },
                "_DAT_200709e0": {
                    "param34": 1
                },
                "calculateFactor": {
                    "calculate_factor": 1
                },
                "calculateFinalValue": {
                    "calculate_final_value": 1
                },
                "calculateHash": {
                    "calculate_hash": 1
                },
                "calculateMetrics": {
                    "calculate_metrics": 1
                },
                "calculateValue": {
                    "calculate_value": 1
                },
                "checkCondition": {
                    "check_condition": 1
                },
                "getRandomValue": {
                    "get_random_value": 1
                },
                "iVar6": {
                    "counter": 2,
                    "index": 1,
                    "int_value1": 1,
                    "temp": 1,
                    "temp_var": 2
                },
                "param_1": {
                    "data": 1,
                    "input_data": 1
                },
                "param_2": {
                    "value1": 2
                },
                "param_3": {
                    "value2": 2
                },
                "param_4": {
                    "output_data": 1,
                    "result": 1
                },
                "performCalculation": {
                    "perform_calculation": 1
                },
                "performOperation": {
                    "perform_operation": 1
                },
                "processData": {
                    "process_data": 1
                },
                "puVar7": {
                    "pointer1": 1,
                    "pointer_var": 1,
                    "pointer_var7": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_var1": 2
                },
                "puVar8": {
                    "pointer2": 1,
                    "pointer_var2": 1,
                    "pointer_var8": 1,
                    "ptr2": 2,
                    "ptr_var2": 2
                },
                "thunk_FUN_00081714": {
                    "calculate_threshold": 1,
                    "generate_random_number": 1,
                    "get_data": 1,
                    "get_data_value": 1,
                    "get_metric_value": 1,
                    "get_random": 1,
                    "get_random_number": 2,
                    "get_random_value": 10,
                    "get_thunk_value": 2,
                    "get_value": 1,
                    "get_variable": 1,
                    "retrieve_value": 1,
                    "thunk_func": 1
                },
                "uVar1": {
                    "result": 3,
                    "return_value": 2,
                    "threshold": 1,
                    "thunk_result": 1
                },
                "uVar2": {
                    "param1": 1,
                    "result1": 1,
                    "result_value": 1,
                    "temp1": 1,
                    "temp_result1": 1,
                    "temp_var1": 2
                },
                "uVar3": {
                    "calc_value1": 1,
                    "param2": 1,
                    "result2": 1,
                    "temp2": 1,
                    "temp_result2": 1,
                    "temp_var2": 2
                },
                "uVar4": {
                    "calc_value2": 1,
                    "param3": 1,
                    "result3": 1,
                    "temp3": 1,
                    "temp_result3": 1,
                    "temp_var3": 2
                },
                "uVar5": {
                    "calc_value3": 1,
                    "param4": 1,
                    "result4": 1,
                    "temp4": 1,
                    "temp_result4": 1,
                    "temp_var4": 2
                },
                "updateIntermediateResult": {
                    "update_intermediate_result": 1
                },
                "updateResult": {
                    "update_result": 1
                }
            },
            "called": [
                "FUN_000802da",
                "FUN_0008189c",
                "FUN_00081c94",
                "FUN_00081d1c",
                "FUN_0008043e",
                "FUN_00081894",
                "FUN_00081730",
                "FUN_00081cd0",
                "FUN_00081944",
                "FUN_00081734",
                "thunk_FUN_00081714",
                "FUN_00081ca8"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid process_data_000805d0(void)\n\n{\n  uint result;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  int temp_var;\n  uint *ptr_var1;\n  undefined4 *ptr2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    result = thunk_FUN_00081714();\n    if (DAT_200708c8 < result) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = FUN_00081894(DAT_200708d8);\n      DAT_2007094c = FUN_0008189c(DAT_200708da / 10);\n      DAT_200709c4 = FUN_00081894(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    break;\n  case '\\x03':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = thunk_FUN_00081714();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      ptr2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      FUN_000802da(&DAT_200709e4,*ptr2,ptr2[1],ptr2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    FUN_0008043e(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      ptr2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    FUN_0008043e(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      FUN_000802da(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = thunk_FUN_00081714();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    ptr_var1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *ptr_var1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (result = thunk_FUN_00081714(), DAT_200708c0 < result))\n    {\n      DAT_20070960 = DAT_20070960 + 1;\n      temp_var = thunk_FUN_00081714();\n      DAT_200708c0 = temp_var + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var = thunk_FUN_00081714();\n        DAT_200708c0 = temp_var + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        ptr_var1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      result = thunk_FUN_00081714();\n      if (DAT_200708c0 < result) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var = thunk_FUN_00081714();\n        DAT_200708c0 = temp_var + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  result = thunk_FUN_00081714();\n  if (DAT_200709e0 < result) {\n    temp_var1 = FUN_0008189c(DAT_20070940);\n    temp_var2 = FUN_00081730(temp_var1,DAT_200709c8);\n    temp_var1 = DAT_200708c4;\n    DAT_20070930 = temp_var2;\n    temp_var3 = FUN_00081734(temp_var2,DAT_200708c4);\n    temp_var3 = FUN_00081944(temp_var3,DAT_2007094c);\n    temp_var3 = FUN_00081734(temp_var3,DAT_20070914);\n    DAT_2007094c = temp_var3;\n    temp_var1 = FUN_00081730(temp_var2,temp_var1);\n    temp_var1 = FUN_00081944(temp_var1,DAT_200709c4);\n    temp_var1 = FUN_00081730(temp_var1,DAT_2007096c);\n    DAT_200709c4 = temp_var1;\n    temp_var4 = FUN_00081944(temp_var2,DAT_20070a4c);\n    temp_var4 = FUN_00081734(temp_var4,temp_var3);\n    FUN_00081734(temp_var4,temp_var1);\n    DAT_20070910 = FUN_00081cd0();\n    DAT_2007091c = FUN_0008189c();\n    DAT_2007092c = 0;\n    DAT_200708c4 = temp_var2;\n    DAT_20070914 = temp_var3;\n    DAT_2007096c = temp_var1;\n    temp_var = thunk_FUN_00081714();\n    DAT_200709e0 = temp_var + DAT_20070970;\n  }\n  temp_var1 = FUN_0008189c(DAT_20070970);\n  temp_var = FUN_00081ca8(DAT_2007091c,temp_var1);\n  if (temp_var != 0) {\n    DAT_2007091c = temp_var1;\n  }\n  temp_var = FUN_00081c94(DAT_2007091c,0);\n  if (temp_var != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = FUN_00081d1c(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "current_name": "process_data_000805d0",
            "entrypoint": "0x000805d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000805d0": "process_data_000805d0",
                "iVar6": "temp_var",
                "puVar7": "ptr_var1",
                "puVar8": "ptr2",
                "uVar1": "result",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a68": {
            "additional_data": {
                "DAT_20070954": {
                    "data": 2,
                    "data_array": 1,
                    "data_buffer": 1
                },
                "DAT_200709e8": {
                    "counter": 2,
                    "counter1": 1,
                    "variable1": 2
                },
                "DAT_200709e9": {
                    "counter2": 1,
                    "flag": 1,
                    "index": 1,
                    "variable2": 2
                },
                "DAT_200709ea": {
                    "constant": 2,
                    "limit": 1,
                    "variable3": 2
                },
                "DAT_20070a3a": {
                    "delay": 2,
                    "timeout": 1,
                    "variable4": 2
                },
                "FUN_00080a68": {
                    "initialize": 1,
                    "initialize_application": 1,
                    "initialize_data": 25,
                    "initialize_function": 4
                },
                "FUN_00081682": {
                    "clear_memory": 2,
                    "init_array": 1,
                    "initialize_array": 3,
                    "initialize_data": 1,
                    "initialize_memory": 2,
                    "initialize_pointer": 5,
                    "initialize_string": 4,
                    "set_array": 1,
                    "set_default_value": 2,
                    "set_initial_value": 2,
                    "set_string": 2,
                    "string_initialize": 1
                },
                "FUN_00081d5c": {
                    "configure_data": 4,
                    "configure_parameters": 1,
                    "copy_data": 1,
                    "copy_data_buffer": 1,
                    "initialize_array": 1,
                    "set_configuration": 1,
                    "set_data": 1,
                    "set_data_properties": 1,
                    "set_initial_values": 1,
                    "set_memory": 1,
                    "set_memory_range": 2,
                    "set_memory_values": 1,
                    "set_parameters": 5,
                    "set_values": 3,
                    "setup_data": 1,
                    "update_data": 1
                },
                "address": {
                    "memory_address": 1
                },
                "inputArray": {
                    "source_array": 1
                },
                "outputArray": {
                    "data_array": 1
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 2,
                    "data_buffer": 1,
                    "data_pointer": 5,
                    "input_array": 1,
                    "pointer": 2,
                    "pointer_array": 1,
                    "string_array": 1,
                    "string_pointer": 1,
                    "string_ptr": 1
                },
                "param_2": {
                    "array_size": 1,
                    "index": 1,
                    "length": 3,
                    "param1": 1,
                    "param2": 1,
                    "parameter1": 1,
                    "property1": 1,
                    "size": 2,
                    "start_address": 1,
                    "value": 1,
                    "value1": 3
                },
                "param_3": {
                    "address": 4,
                    "data_address": 1,
                    "destination_address": 1,
                    "end_address": 1,
                    "param2": 1,
                    "param3": 1,
                    "parameter2": 2,
                    "property2": 1,
                    "value": 1,
                    "value2": 3
                },
                "size": {
                    "array_size": 1
                }
            },
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "calling": [],
            "code": "\nvoid initialize_data_00080a68(void)\n\n{\n  FUN_00081682(&DAT_20070954,\"\");\n  FUN_00081d5c(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "current_name": "initialize_data_00080a68",
            "entrypoint": "0x00080a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a68": "initialize_data_00080a68"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ab8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080ab8",
            "entrypoint": "0x00080ab8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080aba": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aba",
            "entrypoint": "0x00080aba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080abc": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080abc",
            "entrypoint": "0x00080abc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ae4": {
            "additional_data": {
                "DAT_e000ed23": {
                    "value": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 1
                },
                "FUN_00080ae4": {
                    "initialize_components": 3,
                    "initialize_device": 2,
                    "initialize_hardware": 1,
                    "initialize_system": 25
                },
                "FUN_00080da0": {
                    "configure_component": 1,
                    "configure_device": 1,
                    "configure_memory": 8,
                    "configure_peripheral": 4,
                    "configure_pin": 1,
                    "initialize_component": 1,
                    "initialize_memory": 2,
                    "perform_memory_operation": 1,
                    "set_configuration": 2,
                    "set_hardware_parameter": 1,
                    "set_memory": 2,
                    "set_memory_range": 1,
                    "set_memory_region": 2,
                    "set_peripheral_register": 1,
                    "setup_memory": 1,
                    "write_data_to_memory": 1
                },
                "FUN_00080e18": {
                    "configure_parameter": 1,
                    "display_message": 1,
                    "initialize_timer": 2,
                    "perform_operation": 1,
                    "set_control_register": 1,
                    "set_flag": 3,
                    "set_interrupt": 2,
                    "set_interrupt_priority": 1,
                    "set_interrupts": 1,
                    "set_mode": 12,
                    "set_power_mode": 2,
                    "set_status": 1,
                    "set_system_mode": 1,
                    "set_timer": 1
                },
                "FUN_00080e9c": {
                    "call_function1": 1,
                    "configure_settings": 1,
                    "disable_interrupts": 1,
                    "execute_startup_tasks": 1,
                    "initialize": 1,
                    "initialize_component_b": 1,
                    "initialize_components": 2,
                    "initialize_device": 1,
                    "initialize_hardware": 2,
                    "initialize_interrupts": 1,
                    "initialize_memory": 3,
                    "initialize_modules": 1,
                    "initialize_other": 1,
                    "initialize_peripheral": 1,
                    "initialize_peripherals": 1,
                    "initialize_resources": 1,
                    "initialize_settings": 1,
                    "initialize_system": 1,
                    "perform_initialization": 1,
                    "perform_pre_initialization": 1,
                    "perform_setup": 1,
                    "perform_task_a": 1,
                    "pre_process": 1,
                    "setup": 1,
                    "setup_configuration": 1,
                    "setup_functions": 1
                },
                "FUN_00080f9c": {
                    "configure_clock": 1,
                    "configure_component": 1,
                    "configure_device": 1,
                    "configure_memory": 2,
                    "configure_module": 1,
                    "copy_memory": 2,
                    "initialize_memory": 3,
                    "initialize_module": 1,
                    "initialize_processor": 1,
                    "load_code": 1,
                    "load_data": 3,
                    "load_data_from_memory": 1,
                    "load_firmware": 1,
                    "perform_action": 1,
                    "perform_calculation": 1,
                    "perform_operation": 4,
                    "process_data": 2,
                    "set_memory": 1,
                    "transfer_data": 1,
                    "write_data": 1
                },
                "FUN_00081034": {
                    "clear_memory": 5,
                    "clear_registers": 1,
                    "configure_device": 1,
                    "configure_display": 1,
                    "configure_interrupts": 2,
                    "configure_memory": 1,
                    "configure_options": 1,
                    "configure_register": 1,
                    "configure_uart": 1,
                    "copy_memory": 2,
                    "disable_interrupt": 1,
                    "disable_interrupts": 1,
                    "fill_memory": 1,
                    "initialize_cache": 2,
                    "initialize_dma": 1,
                    "initialize_io": 1,
                    "reset_buffer": 1,
                    "reset_config": 1,
                    "reset_memory": 1,
                    "reset_parameters": 1,
                    "reset_values": 1,
                    "set_interrupt": 1,
                    "set_transfer_length": 1
                },
                "FUN_00081042": {
                    "configure_hardware": 1,
                    "configure_memory": 2,
                    "configure_timer": 1,
                    "copy_data": 4,
                    "copy_data_to_memory": 1,
                    "copy_memory": 5,
                    "do_something": 1,
                    "initialize_transfer": 1,
                    "load_config": 1,
                    "load_data": 3,
                    "perform_memory_operation": 1,
                    "perform_task_b": 1,
                    "perform_transfer": 1,
                    "process_memory": 1,
                    "transfer_data": 4,
                    "transmit_data": 1,
                    "write_memory": 1
                },
                "FUN_00081066": {
                    "clear_flag": 2,
                    "clear_interrupt_flags": 1,
                    "clear_interrupt_mask": 1,
                    "disable_dma": 1,
                    "disable_interrupt": 4,
                    "disable_interrupts": 1,
                    "disable_memory": 1,
                    "enable_interrupt": 3,
                    "enable_interrupts": 3,
                    "erase_memory": 1,
                    "execute": 1,
                    "flush_cache": 1,
                    "initiate_transfer": 1,
                    "perform_operation": 1,
                    "reset_component": 1,
                    "reset_device": 1,
                    "reset_interrupts": 1,
                    "reset_module": 1,
                    "reset_register": 1,
                    "reset_registers": 1,
                    "start_device": 1,
                    "start_execution": 1
                },
                "FUN_0008106e": {
                    "clear_memory": 1,
                    "configure_device": 1,
                    "disable_interrupt": 2,
                    "disable_interrupts": 4,
                    "disable_module": 1,
                    "enable_dma": 1,
                    "enable_interrupt": 4,
                    "enable_interrupts": 1,
                    "enable_memory": 1,
                    "set_cache_size": 1,
                    "set_configuration": 1,
                    "set_flag": 5,
                    "set_integer": 1,
                    "set_interrupt_mask": 1,
                    "set_interrupt_priority": 1,
                    "set_register_value": 2,
                    "set_transfer_end": 1,
                    "wait_for_flag": 1
                },
                "FUN_00081318": {
                    "call_function2": 1,
                    "configure_component": 2,
                    "configure_io": 1,
                    "do_something": 1,
                    "do_something_with_index": 1,
                    "execute_operation": 2,
                    "perform_action": 1,
                    "perform_operation": 1,
                    "perform_operations": 1,
                    "perform_task": 1,
                    "perform_task_c": 1,
                    "process": 1,
                    "process_component": 1,
                    "process_data": 13,
                    "process_item": 1,
                    "set_variable": 1
                },
                "FUN_00081d7c": {
                    "configure_default_settings": 1,
                    "configure_device": 1,
                    "configure_hardware": 1,
                    "configure_modules": 1,
                    "configure_peripheral": 5,
                    "configure_peripherals": 2,
                    "configure_registers": 1,
                    "configure_system": 4,
                    "enable_interrupts": 1,
                    "initialize_component_a": 1,
                    "initialize_components": 1,
                    "initialize_peripheral": 1,
                    "initialize_registers": 7,
                    "initialize_settings": 1,
                    "set_system_defaults": 1,
                    "set_system_parameters": 1
                },
                "_DAT_400e0ea0": {
                    "var_ea0": 1
                },
                "_DAT_400e10a0": {
                    "var_10_a0": 1
                },
                "_DAT_400e12a0": {
                    "var_12_a0": 1
                },
                "_DAT_400e14a0": {
                    "var_14_a0": 1
                },
                "_DAT_e000e010": {
                    "var_10": 1
                },
                "_DAT_e000e014": {
                    "system_offset": 1
                },
                "_DAT_e000e018": {
                    "var_18": 1
                },
                "iVar1": {
                    "counter": 1,
                    "i": 1,
                    "index": 1
                },
                "iVar2": {
                    "j": 1,
                    "next_counter": 1,
                    "next_index": 1
                },
                "param_1": {
                    "mem_addr": 1
                },
                "param_2": {
                    "param1": 1
                },
                "param_3": {
                    "param2": 1
                },
                "param_4": {
                    "param3": 1
                }
            },
            "called": [
                "FUN_00081d7c",
                "FUN_00080da0",
                "FUN_00080f9c",
                "FUN_00080e18",
                "FUN_00081034",
                "FUN_0008106e",
                "FUN_00081066",
                "FUN_00080e9c",
                "FUN_00081042",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_system_00080ae4(void)\n\n{\n  int counter;\n  int next_counter;\n  \n  FUN_00080e9c();\n  _DAT_e000e014 = rel_array[6].r_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  FUN_00081d7c();\n  counter = 0;\n  do {\n    next_counter = counter + 1;\n    FUN_00081318(counter,0);\n    counter = next_counter;\n  } while (next_counter != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  FUN_00080da0(0x400e0e00,1,0x300,0);\n  FUN_00081318(0,1);\n  FUN_00080da0(0x400e0e00,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,0x3000,0);\n  FUN_00080da0(0x400e1400,2,0x30,0);\n  FUN_00080da0(0x400e1000,1,0xc00,0);\n  FUN_00080da0(0x400e0e00,1,3,0);\n  FUN_00080da0(0x400e1000,1,0xc000,0);\n  FUN_00080e18(0x25);\n  FUN_00080f9c(0x400c0000,rel_array[6].r_offset,20000000,0xc);\n  FUN_00081042(0x400c0000,0,0x300000,1);\n  FUN_00081034(0x400c0000,0,0);\n  FUN_0008106e(0x400c0000,0xffffffff);\n  FUN_00081066(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_system_00080ae4",
            "entrypoint": "0x00080ae4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00080ae4": "initialize_system_00080ae4",
                "iVar1": "counter",
                "iVar2": "next_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "additional_data": {
                "0x11": {
                    "comm_size1": 1,
                    "param7": 1,
                    "size2": 2,
                    "sub_config_value2": 1
                },
                "0x12": {
                    "comm_size2": 1,
                    "param9": 1,
                    "size3": 2,
                    "sub_config_value4": 1
                },
                "0x14": {
                    "comm_size3": 1,
                    "param11": 1,
                    "size4": 2,
                    "sub_config_value6": 1
                },
                "0x40098000": {
                    "comm_address1": 1,
                    "config2": 1,
                    "config_value2": 1,
                    "param6": 1
                },
                "0x4009c000": {
                    "comm_address2": 1,
                    "config3": 1,
                    "config_value3": 1,
                    "param8": 1
                },
                "0x400a4000": {
                    "comm_address3": 1,
                    "config4": 1,
                    "config_value4": 1,
                    "param10": 1
                },
                "0x400e0800": {
                    "config1": 1,
                    "config_address1": 1,
                    "config_value1": 1,
                    "param4": 1
                },
                "8": {
                    "config_size1": 1,
                    "param5": 1,
                    "size1": 2
                },
                "DAT_20070a50": {
                    "component6": 1,
                    "device_config6": 1,
                    "pointer6": 1,
                    "sub_component_data2": 1
                },
                "DAT_20070ad8": {
                    "component2": 1,
                    "component_data2": 1,
                    "device_config2": 1,
                    "pointer2": 1
                },
                "DAT_20070b60": {
                    "component_config1": 1,
                    "config_data1": 1,
                    "data_config1": 1,
                    "data_store3": 1
                },
                "DAT_20070b84": {
                    "component1": 1,
                    "component_data1": 1,
                    "device_config1": 1,
                    "pointer1": 1
                },
                "DAT_20070c0c": {
                    "data1": 1,
                    "data_config2": 1,
                    "data_store2": 1,
                    "sub_component_config1": 1
                },
                "DAT_20070c34": {
                    "data2": 1,
                    "data_config3": 1,
                    "data_store4": 1,
                    "sub_component_config2": 1
                },
                "DAT_20070c5c": {
                    "data3": 1,
                    "data_config4": 1,
                    "data_store7": 1,
                    "sub_component_config3": 1
                },
                "DAT_20070c84": {
                    "data_store6": 1,
                    "device_config7": 1,
                    "pointer7": 1,
                    "sub_component_data4": 1
                },
                "DAT_20070d0c": {
                    "data_store9": 1,
                    "device_config8": 1,
                    "pointer8": 1,
                    "sub_component_data6": 1
                },
                "DAT_20070de4": {
                    "component3": 1,
                    "device_config3": 1,
                    "pointer3": 1,
                    "sub_component_data1": 1
                },
                "DAT_20070e6c": {
                    "data_store5": 1,
                    "device_config4": 1,
                    "pointer4": 1,
                    "sub_component_data3": 1
                },
                "DAT_20070ef4": {
                    "data_store8": 1,
                    "device_config5": 1,
                    "pointer5": 1,
                    "sub_component_data5": 1
                },
                "FUN_00080c0c": {
                    "initialize_components": 21,
                    "initialize_devices": 4,
                    "initialize_hardware_components": 3,
                    "initialize_modules": 3
                },
                "FUN_000813a8": {
                    "enable_component": 1,
                    "initialize": 2,
                    "initialize_additional_devices": 1,
                    "initialize_component": 7,
                    "initialize_data": 3,
                    "initialize_device": 2,
                    "initialize_memory": 2,
                    "initialize_module": 2,
                    "initialize_pointer": 1,
                    "initialize_resource": 2,
                    "initialize_single_component": 1,
                    "initialize_variable": 1,
                    "reset_component": 5,
                    "reset_device": 1
                },
                "FUN_000814e4": {
                    "configure_component": 14,
                    "configure_device": 5,
                    "configure_module": 3,
                    "configure_resource": 1,
                    "initialize_component": 2,
                    "initialize_data": 1,
                    "initialize_device": 1,
                    "initialize_memory": 3,
                    "initialize_memory_regions": 1
                },
                "FUN_000815d4": {
                    "configure_component": 3,
                    "configure_device": 1,
                    "configure_module_with_options": 1,
                    "configure_peripheral": 1,
                    "configure_sub_component": 1,
                    "initialize_buffers": 1,
                    "initialize_communication": 1,
                    "initialize_component": 2,
                    "initialize_component_with_config": 1,
                    "initialize_component_with_details": 1,
                    "initialize_data": 3,
                    "initialize_devices": 1,
                    "initialize_module": 3,
                    "initialize_module_with_params": 1,
                    "initialize_sub_component": 1,
                    "initialize_subcomponent": 1,
                    "initialize_subsystem": 2,
                    "prepare_resources": 1,
                    "set_device_configuration": 1,
                    "setup_component": 2
                },
                "param_1": {
                    "arg1": 3,
                    "argument1": 1,
                    "component": 3,
                    "component1": 1,
                    "component1_param": 1,
                    "component_pointer": 1,
                    "components1": 1,
                    "config_param1": 1,
                    "device_ptr": 1,
                    "first_param": 1,
                    "module_config": 1,
                    "module_ptr": 1,
                    "param1": 7,
                    "resource": 1,
                    "subsystem_data": 1,
                    "unknown_param": 1,
                    "unused_param1": 4
                },
                "param_2": {
                    "address": 1,
                    "address1": 1,
                    "arg2": 3,
                    "argument2": 1,
                    "component2_param": 1,
                    "config_address": 1,
                    "config_param": 1,
                    "config_param1": 1,
                    "config_param2": 1,
                    "config_value_1": 1,
                    "data_address": 1,
                    "memory_region_addr": 1,
                    "module_address": 1,
                    "param2": 7,
                    "resource_param1": 1,
                    "second_param": 1,
                    "sub_config_value5": 1,
                    "subsystem_address": 1,
                    "unknown_param_2": 1,
                    "unused_param2": 3
                },
                "param_3": {
                    "arg3": 3,
                    "argument3": 1,
                    "component3_param": 1,
                    "component_type": 1,
                    "config_param2": 2,
                    "config_param3": 1,
                    "config_value2": 1,
                    "config_value_2": 1,
                    "count1": 1,
                    "data_param": 1,
                    "memory_region_size": 1,
                    "module_size": 1,
                    "param3": 9,
                    "size": 2,
                    "third_param": 1,
                    "unknown_param_3": 1,
                    "unused_param3": 2
                },
                "param_4": {
                    "components2": 1,
                    "config_param3": 2,
                    "config_value_3": 1,
                    "count": 1,
                    "count2": 1,
                    "memory_region_param": 1,
                    "module_step": 1,
                    "param4": 2
                }
            },
            "called": [
                "FUN_000815d4",
                "FUN_000814e4",
                "FUN_000813a8"
            ],
            "calling": [],
            "code": "\nvoid initialize_hardware_components_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  FUN_000813a8(&DAT_20070b84);\n  FUN_000813a8(&DAT_20070ad8);\n  FUN_000814e4(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  FUN_000813a8(&DAT_20070de4);\n  FUN_000813a8(&DAT_20070e6c);\n  FUN_000813a8(&DAT_20070ef4);\n  FUN_000813a8(&DAT_20070a50);\n  FUN_000813a8(&DAT_20070c84);\n  FUN_000813a8(&DAT_20070d0c);\n  FUN_000815d4(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  FUN_000815d4(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  FUN_000815d4(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "current_name": "initialize_hardware_components_00080c0c",
            "entrypoint": "0x00080c0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c0c": "initialize_hardware_components_00080c0c",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "additional_data": {
                "FUNC_00080aa8": {
                    "execute_action_a": 1,
                    "execute_func_00080aa8": 1,
                    "execute_func_3": 1,
                    "execute_function1": 2,
                    "execute_function_1": 3,
                    "execute_function_3": 1,
                    "execute_function_a": 2,
                    "execute_function_c": 8,
                    "handle_dat_20070b60": 1,
                    "handle_data3": 1,
                    "handle_error": 1,
                    "handle_error1": 1,
                    "initialize_component1": 1,
                    "perform_action1": 2,
                    "run_function_c": 1
                },
                "FUNC_00080ab8": {
                    "execute_action_b": 1,
                    "execute_func_00080ab8": 1,
                    "execute_func_4": 1,
                    "execute_function2": 2,
                    "execute_function_2": 3,
                    "execute_function_4": 1,
                    "execute_function_b": 2,
                    "execute_function_d": 8,
                    "handle_dat_20070c0c": 1,
                    "handle_data4": 1,
                    "handle_error2": 1,
                    "handle_update_failure": 1,
                    "initialize_component2": 1,
                    "perform_action2": 2,
                    "run_function_d": 1
                },
                "FUNC_00080aba": {
                    "execute_func_00080aba": 1,
                    "execute_func_1": 1,
                    "execute_function3": 2,
                    "execute_function_1": 1,
                    "execute_function_3": 3,
                    "execute_function_a": 8,
                    "execute_function_c": 2,
                    "handle_component1": 1,
                    "handle_dat_20070c34": 1,
                    "handle_data1": 2,
                    "handle_data_a": 1,
                    "handle_error1": 1,
                    "handle_error3": 1,
                    "process_data_update": 1,
                    "run_function_a": 1
                },
                "FUNC_00080abc": {
                    "apply_data_changes": 1,
                    "execute_func_00080abc": 1,
                    "execute_func_2": 1,
                    "execute_function4": 2,
                    "execute_function_2": 1,
                    "execute_function_4": 3,
                    "execute_function_b": 8,
                    "execute_function_d": 2,
                    "handle_component2": 1,
                    "handle_dat_20070c5c": 1,
                    "handle_data2": 2,
                    "handle_data_b": 1,
                    "handle_error2": 1,
                    "handle_error4": 1,
                    "run_function_b": 1
                },
                "FUN_00080ce0": {
                    "check_and_call_sub_functions": 1,
                    "check_and_execute_functions": 15,
                    "check_and_execute_sub_functions": 3,
                    "check_and_execute_subfunctions": 2,
                    "check_and_run_functions": 1,
                    "check_and_update_data": 1,
                    "check_for_data_updates": 1,
                    "initialize_components": 1,
                    "initialize_subsystems": 1,
                    "process_data": 4
                },
                "FUN_000813e4": {
                    "check_data": 7,
                    "check_data_for_validity": 1,
                    "check_data_status": 1,
                    "check_data_validity": 3,
                    "check_data_value": 1,
                    "check_function": 3,
                    "check_if_valid": 1,
                    "check_status": 5,
                    "check_validity": 4
                },
                "iVar1": {
                    "func_result": 1,
                    "result": 26,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_000813e4",
                "FUN_00080aba",
                "FUN_00080abc",
                "FUN_00080aa8",
                "FUN_00080ab8"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid check_and_execute_sub_functions_00080ce0(void)\n\n{\n  int result;\n  \n  result = FUN_000813e4(&DAT_20070b60);\n  if (result != 0) {\n    FUNC_00080aa8();\n  }\n  result = FUN_000813e4(&DAT_20070c0c);\n  if (result != 0) {\n    FUNC_00080ab8();\n  }\n  result = FUN_000813e4(&DAT_20070c34);\n  if (result != 0) {\n    FUNC_00080aba();\n  }\n  result = FUN_000813e4(&DAT_20070c5c);\n  if (result != 0) {\n    FUNC_00080abc();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_execute_sub_functions_00080ce0",
            "entrypoint": "0x00080ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ce0": "check_and_execute_sub_functions_00080ce0",
                "iVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "additional_data": {
                "FUN_00080d2e": {
                    "set_param": 1,
                    "set_param_value": 1,
                    "update_configuration": 2,
                    "update_data": 4,
                    "update_memory": 1,
                    "update_param": 5,
                    "update_param_value": 1,
                    "update_param_values": 1,
                    "update_parameter": 5,
                    "update_parameter_value": 6,
                    "update_value": 3,
                    "update_values": 1
                },
                "param_1": {
                    "base_address": 15,
                    "config_start_address": 1,
                    "configuration": 1,
                    "data_address": 2,
                    "memory_address": 1,
                    "obj_address": 1,
                    "object_address": 6,
                    "object_ptr": 1,
                    "pointer": 1,
                    "ptr_data": 1,
                    "struct_pointer": 1
                },
                "param_2": {
                    "action": 3,
                    "action_type": 2,
                    "case_type": 2,
                    "command": 2,
                    "config_action": 1,
                    "flag": 1,
                    "mode": 1,
                    "operation": 2,
                    "operation_type": 9,
                    "option": 4,
                    "parameter_type": 1,
                    "selection": 1,
                    "switch_value": 1,
                    "type": 1
                },
                "param_3": {
                    "config_value": 1,
                    "new_param": 1,
                    "new_parameter_value": 1,
                    "new_value": 20,
                    "parameter_value": 1,
                    "update_value": 1,
                    "value": 6
                },
                "uVar1": {
                    "modified_value": 1,
                    "new_data": 1,
                    "result": 2,
                    "temp_value": 1,
                    "updated_data": 1,
                    "updated_value": 24
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid update_parameter_value_00080d2e(int base_address,undefined4 operation_type,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(operation_type) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto switchD_00080d34_caseD_6;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\nswitchD_00080d34_caseD_6:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_00080d2e",
            "entrypoint": "0x00080d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d2e": "update_parameter_value_00080d2e",
                "param_1": "base_address",
                "param_2": "operation_type",
                "param_3": "new_value",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d54": {
            "additional_data": {
                "0x11": {
                    "array_index1": 1,
                    "index1": 4,
                    "value_index": 1
                },
                "0x18": {
                    "array_index3": 1,
                    "default_index": 1,
                    "index3": 4
                },
                "0x19": {
                    "alternate_value_index": 1,
                    "array_index2": 1,
                    "index2": 4
                },
                "0x20": {
                    "array_index6": 1,
                    "condition3_index": 1,
                    "index6": 4
                },
                "10": {
                    "bit_mask": 1
                },
                "5": {
                    "array_index7": 1,
                    "index7": 4,
                    "value_index2": 1
                },
                "8": {
                    "array_index4": 1,
                    "condition1_index": 1,
                    "index4": 4
                },
                "9": {
                    "array_index5": 1,
                    "condition2_index": 1,
                    "index5": 4
                },
                "FUN_00080d54": {
                    "assign_values_to_indices": 1,
                    "assign_values_to_parameters": 1,
                    "set_param_values": 2,
                    "set_parameters": 5,
                    "set_params": 1,
                    "set_values": 4,
                    "set_values_and_assign": 1,
                    "set_values_based_on_conditions": 4,
                    "set_values_based_on_flags": 1,
                    "set_values_in_array": 1,
                    "update_data": 1,
                    "update_param_table": 1,
                    "update_param_values": 1,
                    "update_parameters": 5,
                    "update_params": 1,
                    "update_values": 1
                },
                "bVar1": {
                    "has_flag": 1,
                    "is_flag_negative": 2,
                    "is_flag_set": 4,
                    "is_negative": 15,
                    "is_negative_flag": 4,
                    "is_negative_flag_set": 1,
                    "is_negative_flags": 1,
                    "is_negative_or_zero": 1,
                    "is_negative_value": 1,
                    "negative_flag": 1
                },
                "param_1": {
                    "array": 11,
                    "data_array": 1,
                    "destination": 1,
                    "output": 2,
                    "output_array": 4,
                    "param_array": 2,
                    "param_list": 1,
                    "param_table": 1,
                    "parameter_array": 1,
                    "parameters": 4,
                    "parameters_array": 1,
                    "params": 1,
                    "result_array": 1
                },
                "param_2": {
                    "input_value": 1,
                    "new_value": 5,
                    "value": 25
                },
                "param_3": {
                    "bit_flags": 1,
                    "conditions": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "flags": 25,
                    "mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid set_values_based_on_conditions_00080d54(undefined4 *array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  array[0x11] = value;\n  if (is_negative) {\n    array[0x19] = value;\n  }\n  if (!is_negative) {\n    array[0x18] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    array[8] = value;\n  }\n  if (!is_negative) {\n    array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    array[0x20] = value;\n  }\n  array[5] = value;\n  *array = value;\n  return;\n}\n\n",
            "current_name": "set_values_based_on_conditions_00080d54",
            "entrypoint": "0x00080d54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d54": "set_values_based_on_conditions_00080d54",
                "bVar1": "is_negative",
                "param_1": "array",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "additional_data": {
                "0x11": {
                    "param2_index": 1
                },
                "0x14": {
                    "param2_index_flag2_non_zero": 1
                },
                "0x15": {
                    "param2_index_flag2_zero": 1
                },
                "0x18": {
                    "param2_index_flag3_zero": 1
                },
                "0x19": {
                    "param2_index_flag3_non_zero": 1
                },
                "0xc": {
                    "param2_index_flag1_non_zero": 1
                },
                "0xd": {
                    "param2_index_flag1_zero": 1
                },
                "4": {
                    "param2_index4": 1
                },
                "FUN_00080d7a": {
                    "assign_values": 1,
                    "initialize_params": 1,
                    "map_param_to_indices": 1,
                    "set_param_values": 4,
                    "set_parameters": 4,
                    "set_pointers": 1,
                    "update_param_values": 4,
                    "update_parameter_values": 1,
                    "update_parameters": 7,
                    "update_params": 6,
                    "update_variables": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 1,
                    "output": 1,
                    "output_array": 2,
                    "param_array": 2,
                    "param_list": 1,
                    "parameter_array": 2,
                    "parameters": 8,
                    "params": 9,
                    "params_array": 2,
                    "pointer_array": 1,
                    "updated_array": 1
                },
                "param_2": {
                    "input_value": 1,
                    "new_param_value": 1,
                    "new_value": 12,
                    "param_value": 1,
                    "value": 15,
                    "value_to_assign": 1
                },
                "param_3": {
                    "check_condition1": 1,
                    "condition1": 11,
                    "condition3": 1,
                    "condition_1": 1,
                    "condition_a": 3,
                    "flag1": 5,
                    "flag_1": 1,
                    "flag_a": 1,
                    "is_param3_zero": 3,
                    "is_zero1": 3,
                    "param3_cond": 1
                },
                "param_4": {
                    "check_condition2": 1,
                    "condition2": 11,
                    "condition4": 1,
                    "condition_2": 1,
                    "condition_b": 3,
                    "flag2": 5,
                    "flag_2": 1,
                    "flag_b": 1,
                    "is_param4_zero": 3,
                    "is_zero2": 3,
                    "param4_cond": 1
                },
                "param_5": {
                    "check_condition3": 1,
                    "condition3": 11,
                    "condition5": 1,
                    "condition_3": 1,
                    "condition_c": 3,
                    "flag3": 5,
                    "flag_3": 1,
                    "flag_c": 1,
                    "is_param5_zero": 3,
                    "is_zero3": 3,
                    "param5_cond": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "code": "\nvoid update_parameters_00080d7a(undefined4 *params,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  params[0x11] = value;\n  if (condition3 == 0) {\n    params[0x18] = value;\n  }\n  else {\n    params[0x19] = value;\n  }\n  if (condition2 == 0) {\n    params[0x15] = value;\n  }\n  else {\n    params[0x14] = value;\n  }\n  if (condition1 == 0) {\n    params[0xd] = value;\n  }\n  else {\n    params[0xc] = value;\n  }\n  params[4] = value;\n  *params = value;\n  return;\n}\n\n",
            "current_name": "update_parameters_00080d7a",
            "entrypoint": "0x00080d7a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d7a": "update_parameters_00080d7a",
                "param_1": "params",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080da0": {
            "additional_data": {
                "0x80d55": {
                    "constant": 4,
                    "constant_value": 1,
                    "param1": 1
                },
                "FUN_00080d2e": {
                    "do_processing": 1,
                    "handle_case_one_and_two": 1,
                    "handle_option1_or2": 1,
                    "handle_type1_and2": 1,
                    "handle_type1and2": 1,
                    "process_case1_and2": 1,
                    "process_case1or2": 1,
                    "process_type1_or2": 1,
                    "process_type1or2": 2,
                    "process_type_one_and_two": 1,
                    "set_mode": 1,
                    "set_object_value": 1,
                    "update_case_data": 1,
                    "update_config_value": 1,
                    "update_data": 2,
                    "update_data_with_type": 1,
                    "update_param": 1,
                    "update_param_type1or2": 1,
                    "update_param_value": 1,
                    "update_properties": 1,
                    "update_value": 4
                },
                "FUN_00080d54": {
                    "apply_settings": 1,
                    "handle_case3": 1,
                    "handle_case_three": 1,
                    "handle_type3": 1,
                    "process_case3": 6,
                    "process_config_type3": 1,
                    "process_mode_three": 1,
                    "process_option3": 1,
                    "process_type3": 6,
                    "process_type_three": 1,
                    "process_value": 2,
                    "reverse_bits": 1,
                    "update_object_with_uint_value": 1,
                    "update_param_type3": 1,
                    "update_param_with_options": 1
                },
                "FUN_00080d7a": {
                    "calculate_result": 1,
                    "configure_device": 1,
                    "handle_case4_or5": 1,
                    "handle_case_four_and_five": 1,
                    "handle_option": 1,
                    "handle_type4_and5": 1,
                    "perform_action": 1,
                    "process_case4_and5": 3,
                    "process_case4or5": 2,
                    "process_config_type4_and5": 1,
                    "process_data": 1,
                    "process_mode_four_or_five": 1,
                    "process_option4_or5": 1,
                    "process_type4_and5": 1,
                    "process_type4_or5": 1,
                    "process_type4and5": 1,
                    "process_type4or5": 3,
                    "process_type_four_and_five": 1,
                    "update_object_with_bool_value": 1,
                    "update_param_type4or5": 1,
                    "update_param_with_condition": 1
                },
                "FUN_00080da0": {
                    "handle_function": 2,
                    "handle_param_selection": 1,
                    "process_data": 2,
                    "process_function": 3,
                    "process_input": 3,
                    "process_parameters": 1,
                    "process_params": 1,
                    "update_config": 1,
                    "update_configuration": 2,
                    "update_data": 7,
                    "update_param": 1,
                    "update_param_values": 2,
                    "update_parameter": 2,
                    "update_parameter_value": 1,
                    "update_parameters": 2
                },
                "PTR_FUN_00080d2e": {
                    "update_value": 1
                },
                "PTR_FUN_00080d54": {
                    "set_flag": 1
                },
                "PTR_FUN_00080d7a": {
                    "process_option": 1
                },
                "bVar1": {
                    "is_flag_negative": 2,
                    "is_negative": 24,
                    "is_negative_flag": 4
                },
                "param_1": {
                    "address": 1,
                    "base_address": 1,
                    "config": 1,
                    "config_data": 1,
                    "config_ptr": 1,
                    "data": 3,
                    "data_address": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "data_struct": 1,
                    "device": 2,
                    "device_address": 1,
                    "device_data": 1,
                    "function_param1": 1,
                    "input": 2,
                    "input1": 2,
                    "input_address": 1,
                    "input_data": 1,
                    "object": 1,
                    "object_address": 1,
                    "param": 1,
                    "param_address": 1,
                    "target_address": 2
                },
                "param_2": {
                    "action": 1,
                    "case_number": 1,
                    "code": 1,
                    "data_option": 1,
                    "function_param2": 1,
                    "input2": 2,
                    "input_type": 2,
                    "mode": 1,
                    "new_value": 4,
                    "option": 3,
                    "param_type": 3,
                    "parameter_type": 1,
                    "selection": 1,
                    "type": 3,
                    "value": 4,
                    "value1": 1,
                    "value_type": 1
                },
                "param_3": {
                    "function_param3": 1,
                    "input3": 2,
                    "input_value": 2,
                    "is_case5": 1,
                    "is_mode_five": 1,
                    "is_param_type5": 1,
                    "is_type5": 6,
                    "new_value": 6,
                    "param_value": 1,
                    "value": 10
                },
                "param_4": {
                    "bit_mask": 1,
                    "bit_shifted_value": 1,
                    "condition1": 1,
                    "flag": 10,
                    "flags": 8,
                    "function_param4": 1,
                    "input4": 2,
                    "input_flag": 1,
                    "is_negative": 1,
                    "is_negative_shifted": 1,
                    "param_flag": 1,
                    "shift_value": 1,
                    "shifted_value": 1,
                    "shifted_value1": 1
                },
                "param_5": {
                    "bitwise_and": 1,
                    "bitwise_and_value": 1,
                    "condition2": 1,
                    "flag": 1,
                    "is_bit_set": 1,
                    "last_bit": 1,
                    "shifted_value2": 1
                },
                "param_6": {
                    "case_number": 1
                },
                "param_7": {
                    "value": 1
                }
            },
            "called": [
                "FUN_00080d54",
                "FUN_00080d2e",
                "FUN_00080d7a"
            ],
            "calling": [
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "code": "\nundefined4 update_data_00080da0(int data,int new_value,undefined4 value,uint flag)\n\n{\n  bool is_negative;\n  \n  switch(new_value) {\n  case 1:\n  case 2:\n    FUN_00080d2e(data,new_value,value);\n    is_negative = (int)(flag << 0x1f) < 0;\n    *(undefined4 *)(data + 0x44) = value;\n    if (is_negative) {\n      *(undefined4 *)(data + 100) = value;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(data + 0x60) = value;\n    }\n    break;\n  case 3:\n    FUN_00080d54(data,value,flag,0x80d55,data);\n    break;\n  case 4:\n  case 5:\n    FUN_00080d7a(data,value,new_value == 5,(flag << 0x1d) >> 0x1f,flag & 1,new_value,value)\n    ;\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_00080da0",
            "entrypoint": "0x00080da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080da0": "update_data_00080da0",
                "bVar1": "is_negative",
                "param_1": "data",
                "param_2": "new_value",
                "param_3": "value",
                "param_4": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e04": {
            "additional_data": {
                "FUN_00080e04": {
                    "apply_bitwise_and_check": 1,
                    "bitwise_and_check": 2,
                    "bitwise_check": 1,
                    "check_bitmask": 1,
                    "check_bits": 1,
                    "check_bitwise_and": 3,
                    "check_bitwise_conditions": 3,
                    "check_bitwise_intersection": 2,
                    "check_bitwise_operation": 2,
                    "check_bitwise_result": 1,
                    "check_conditions": 2,
                    "check_flags": 2,
                    "check_intersection": 2,
                    "check_masked_bits": 1,
                    "check_param": 1,
                    "check_param_and_mask": 1,
                    "check_permission": 1,
                    "check_permissions": 2,
                    "perform_and_check": 1,
                    "perform_check": 1
                },
                "param_1": {
                    "address": 1,
                    "address_offset": 1,
                    "base_address": 1,
                    "context": 1,
                    "data_address": 3,
                    "data_pointer": 1,
                    "first_param": 1,
                    "input": 1,
                    "input1": 2,
                    "input_data": 1,
                    "input_param_1": 1,
                    "input_pointer": 1,
                    "input_ptr": 2,
                    "input_value": 10,
                    "object_ptr": 1,
                    "offset": 2,
                    "pointer": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bitmask": 5,
                    "flag_mask": 1,
                    "flags": 1,
                    "input2": 2,
                    "input_param_2": 1,
                    "mask": 12,
                    "mask_value": 3,
                    "permission": 1,
                    "permission_mask": 1,
                    "permissions": 1,
                    "second_param": 1
                },
                "uVar1": {
                    "result": 31
                }
            },
            "called": [],
            "calling": [
                "FUN_00081318"
            ],
            "code": "\nuint apply_bitwise_and_check_00080e04(int input_value,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(input_value + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(input_value + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "apply_bitwise_and_check_00080e04",
            "entrypoint": "0x00080e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e04": "apply_bitwise_and_check_00080e04",
                "param_1": "input_value",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e18": {
            "additional_data": {
                "FUN_00080e18": {
                    "check_and_set_bit": 14,
                    "check_and_update_bit": 2,
                    "check_and_update_bitmask": 2,
                    "check_and_update_bits": 1,
                    "check_bit_and_set": 3,
                    "check_bit_and_update": 2,
                    "check_flag": 2,
                    "check_if_bit_set": 1,
                    "set_bit": 1,
                    "set_bit_in_memory": 1,
                    "set_bitmask": 1,
                    "update_bitmask": 1
                },
                "param_1": {
                    "bit_index": 4,
                    "bit_position": 8,
                    "flag": 2,
                    "input": 3,
                    "input_value": 3,
                    "number": 1,
                    "value": 10
                },
                "uVar1": {
                    "bit_mask": 25,
                    "bit_pattern": 1,
                    "bit_value": 1,
                    "bitmask": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00081508",
                "FUN_00080ae4",
                "FUN_00081210"
            ],
            "code": "\n\n\nundefined4 check_bit_and_set_00080e18(uint value)\n\n{\n  uint bit_mask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bit_mask = 1 << (value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_bit_and_set_00080e18",
            "entrypoint": "0x00080e18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e18": "check_bit_and_set_00080e18",
                "param_1": "value",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 3,
                    "array20070000": 1,
                    "elf_rel_array": 3,
                    "elf_relocation_array": 1,
                    "elf_relocations": 2,
                    "rel_array": 4,
                    "relocation_array": 6,
                    "relocation_table": 5,
                    "variable7": 1
                },
                "FUN_00080e9c": {
                    "initialize_data": 6,
                    "initialize_memory": 16,
                    "initialize_registers": 2,
                    "initialize_settings": 1,
                    "initialize_variables": 1,
                    "set_initial_values": 1
                },
                "_DAT_400e0620": {
                    "counter": 3,
                    "counter1": 1,
                    "data": 1,
                    "data1": 1,
                    "data_value1": 1,
                    "first_loop_counter": 1,
                    "loop_counter": 1,
                    "loop_counter1": 1,
                    "memory_value": 2,
                    "register_a": 1,
                    "shift_value": 2,
                    "shifted_value": 10,
                    "shifted_value1": 1,
                    "temp_value": 1,
                    "value": 1,
                    "value1": 1,
                    "value_a": 1,
                    "variable3": 1
                },
                "_DAT_400e0628": {
                    "config_address1": 1,
                    "config_value1": 1,
                    "constant1": 1,
                    "constant_value": 1,
                    "constant_value1": 2,
                    "constant_value_1": 2,
                    "data1": 1,
                    "data3": 1,
                    "data_value1": 1,
                    "data_value3": 1,
                    "init_value": 1,
                    "memory_address1": 1,
                    "memory_address3": 1,
                    "new_data1": 1,
                    "offset": 2,
                    "register_value": 2,
                    "third_loop_counter": 1,
                    "value": 1,
                    "value3": 1,
                    "value_c": 1,
                    "variable5": 1
                },
                "_DAT_400e0630": {
                    "another_constant_value": 1,
                    "config_address2": 1,
                    "config_value2": 1,
                    "constant": 1,
                    "constant2": 1,
                    "constant_value": 3,
                    "constant_value2": 2,
                    "constant_value_2": 2,
                    "data2": 1,
                    "data4": 1,
                    "data_value2": 1,
                    "data_value4": 1,
                    "fourth_loop_counter": 1,
                    "loop_value": 1,
                    "memory_address2": 1,
                    "memory_address4": 1,
                    "new_data2": 1,
                    "offset": 1,
                    "value4": 1,
                    "value_d": 1,
                    "variable6": 1
                },
                "_DAT_400e0668": {
                    "comparison_value": 1,
                    "counter": 1,
                    "counter2": 1,
                    "data2": 1,
                    "data_value2": 1,
                    "loop_condition": 1,
                    "loop_counter": 2,
                    "loop_counter2": 1,
                    "loop_variable1": 1,
                    "mask": 1,
                    "register_b": 1,
                    "second_loop_counter": 1,
                    "shift_control": 1,
                    "shift_value": 1,
                    "shifted_value2": 3,
                    "temp": 3,
                    "temp_value": 3,
                    "temp_variable": 1,
                    "temporary_value": 2,
                    "value2": 1,
                    "value_b": 1,
                    "value_to_shift": 1,
                    "variable4": 1
                },
                "_DAT_400e0a00": {
                    "array_size1": 1,
                    "base_address": 2,
                    "base_address1": 1,
                    "base_memory_size": 1,
                    "buffer_size": 1,
                    "data_buffer1": 1,
                    "data_size1": 1,
                    "heap_start": 1,
                    "memory_address1": 3,
                    "memory_address_1": 1,
                    "memory_address_a": 1,
                    "memory_block_1": 1,
                    "memory_block_size": 1,
                    "memory_block_size1": 1,
                    "memory_offset1": 1,
                    "memory_size1": 2,
                    "output_buffer_1": 1,
                    "register1": 1,
                    "settings_address1": 1,
                    "variable1": 1
                },
                "_DAT_400e0c00": {
                    "array_size2": 1,
                    "base_address2": 1,
                    "data_buffer2": 1,
                    "data_size": 1,
                    "data_size2": 1,
                    "extended_memory_size": 1,
                    "memory_address2": 3,
                    "memory_address_2": 1,
                    "memory_address_b": 1,
                    "memory_block_2": 1,
                    "memory_block_size": 1,
                    "memory_block_size2": 1,
                    "memory_offset2": 1,
                    "memory_size2": 2,
                    "output_buffer_2": 1,
                    "register2": 1,
                    "reset_address": 1,
                    "settings_address2": 1,
                    "size": 1,
                    "stack_start": 1,
                    "variable2": 1
                },
                "_FUN_00080e9c": {
                    "initialize_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n\n\nvoid initialize_memory_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_00080e9c",
            "entrypoint": "0x00080e9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00080e9c": "initialize_memory_00080e9c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "additional_data": {
                "FUN_00080f9c": {
                    "calculate_index": 2,
                    "calculate_offset": 2,
                    "calculate_progress": 1,
                    "calculate_score": 1,
                    "calculate_threshold": 14,
                    "calculate_threshold_value": 1,
                    "find_threshold": 3,
                    "identify_threshold": 1,
                    "initialize_parameters": 1,
                    "initialize_values": 1,
                    "update_param_values": 1,
                    "update_parameter": 1,
                    "update_parameters": 1
                },
                "local_58": {
                    "lookup_table": 1,
                    "offsets": 1,
                    "threshold_array": 2,
                    "threshold_values": 9,
                    "thresholds": 17,
                    "thresholds_list": 1
                },
                "param_1": {
                    "output": 6,
                    "output_array": 7,
                    "output_buffer": 1,
                    "output_values": 3,
                    "progress": 1,
                    "result": 6,
                    "result_array": 1,
                    "score": 1,
                    "threshold": 5
                },
                "param_2": {
                    "data_length": 2,
                    "data_size": 4,
                    "input_data": 1,
                    "input_size": 9,
                    "input_value": 6,
                    "size": 1,
                    "total_bytes": 2,
                    "total_data_size": 1,
                    "total_duration": 1,
                    "total_length": 1,
                    "total_memory": 1,
                    "total_size": 1,
                    "total_time": 1
                },
                "param_3": {
                    "a": 1,
                    "block_size": 4,
                    "calc_factor": 1,
                    "chunk_size": 4,
                    "data_rate": 1,
                    "divisor": 5,
                    "divisor1": 1,
                    "element_size": 1,
                    "factor": 1,
                    "factor1": 2,
                    "factor_a": 1,
                    "interval": 2,
                    "multiplier": 4,
                    "num_iterations": 1,
                    "param_multiplier": 1,
                    "segment_length": 1
                },
                "param_4": {
                    "b": 1,
                    "conversion_factor": 1,
                    "divisor": 2,
                    "divisor2": 1,
                    "factor2": 2,
                    "factor_b": 1,
                    "multiplier": 11,
                    "threshold": 4,
                    "threshold_factor": 3,
                    "threshold_percentage": 1,
                    "threshold_value": 1,
                    "time_factor": 1,
                    "time_interval": 1,
                    "time_limit": 1
                },
                "return": {
                    "return_value": 1
                },
                "uVar1": {
                    "adjusted_calc_factor": 1,
                    "adjusted_rate": 1,
                    "blocks": 1,
                    "dividend": 1,
                    "division_result": 2,
                    "divisor": 2,
                    "num_blocks": 2,
                    "num_chunks": 4,
                    "num_intervals": 2,
                    "quotient": 9,
                    "segments": 1,
                    "x": 1
                },
                "uVar2": {
                    "current_index": 1,
                    "i": 4,
                    "idx": 1,
                    "index": 20,
                    "y": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nundefined4 calculate_threshold_value_00080f9c(undefined4 *output_array,uint input_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *output_array = 1;\n  output_array[1] = 0;\n  output_array[0x48] = 0x202;\n  output_array[0x41] = 0;\n  output_array[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      output_array[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | output_array[1];\n      return_value 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return_value 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_value_00080f9c",
            "entrypoint": "0x00080f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_value_00080f9c",
                "local_58": "thresholds",
                "param_1": "output_array",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "return": "return_value",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081034": {
            "additional_data": {
                "DAT_": {
                    "": 1,
                    "skip": 1
                },
                "FUN_00081034": {
                    "set_bit_in_register": 1,
                    "set_bitwise_flags": 1,
                    "set_flag": 1,
                    "set_flag_in_register": 1,
                    "update_data": 1,
                    "update_flag": 1,
                    "update_flags": 5,
                    "update_param": 2,
                    "update_param_bits": 1,
                    "update_param_flags": 2,
                    "update_param_value": 1,
                    "update_param_with_flag": 1,
                    "update_param_with_flags": 1,
                    "update_parameter": 4,
                    "update_parameter_value": 2,
                    "update_parameter_with_flag": 1,
                    "update_parameters": 2,
                    "update_params": 1,
                    "update_register": 1,
                    "update_value": 1
                },
                "PTR_": {
                    "": 1,
                    "skip": 1
                },
                "newParam": {
                    "param_to_set": 1
                },
                "new_variable_name_1": {
                    "register_value": 1
                },
                "new_variable_name_2": {
                    "mask": 1
                },
                "param_1": {
                    "address": 1,
                    "base_addr": 1,
                    "base_address": 19,
                    "data_address": 1,
                    "data_pointer": 1,
                    "input": 1,
                    "input_addr": 1,
                    "param_address": 2,
                    "parameter": 1,
                    "register_address": 3
                },
                "param_2": {
                    "data_value": 1,
                    "flag_bit_mask": 1,
                    "flag_value": 3,
                    "new_bit_value": 1,
                    "new_data": 1,
                    "new_flags": 2,
                    "new_param": 1,
                    "new_param_value": 1,
                    "new_value": 6,
                    "param_value": 1,
                    "value": 8,
                    "value1": 2,
                    "value_to_set": 3
                },
                "param_3": {
                    "bit": 1,
                    "bit_flag": 1,
                    "bit_index": 1,
                    "bit_mask": 5,
                    "bit_position": 1,
                    "bit_value": 3,
                    "flag": 8,
                    "flag_bit": 2,
                    "flag_mask": 1,
                    "flag_value": 5,
                    "flags": 1,
                    "value2": 2
                },
                "param_4": {
                    "bit_mask": 1,
                    "bit_value": 1,
                    "shifted_value": 1
                },
                "param_5": {
                    "shift_amount": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_param_with_flags_00081034(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_param_with_flags_00081034",
            "entrypoint": "0x00081034",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081034": "update_param_with_flags_00081034",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081042": {
            "additional_data": {
                "0x18": {
                    "bitmask_shift": 1
                },
                "0x1c": {
                    "shifted_value_shift": 1
                },
                "0xf": {
                    "bitmask_mask": 1
                },
                "FUN_00081042": {
                    "combine_parameters": 2,
                    "combine_values": 2,
                    "set_bit_fields": 1,
                    "set_bitmask": 1,
                    "set_flag_bits": 1,
                    "set_flags": 3,
                    "update_config": 1,
                    "update_data": 3,
                    "update_data_record": 1,
                    "update_fields": 1,
                    "update_flags": 2,
                    "update_param_values": 1,
                    "update_parameter_values": 1,
                    "update_parameters": 2,
                    "update_register": 3,
                    "update_register_bits": 1,
                    "update_register_value": 2,
                    "update_register_values": 2,
                    "update_value": 1
                },
                "param_1": {
                    "address": 1,
                    "base_address": 8,
                    "buffer_address": 1,
                    "buffer_ptr": 1,
                    "config_ptr": 1,
                    "data": 1,
                    "data_address": 2,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_record_address": 1,
                    "flag_address": 1,
                    "output_offset": 1,
                    "ptr": 1,
                    "register": 1,
                    "register_address": 6,
                    "register_ptr": 1,
                    "struct_pointer": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bitmask": 3,
                    "data": 1,
                    "data1": 1,
                    "field1": 1,
                    "field_value1": 1,
                    "flag_mask": 1,
                    "input1": 2,
                    "input_value1": 1,
                    "mask": 1,
                    "new_data": 1,
                    "new_flags": 1,
                    "param2": 1,
                    "value": 1,
                    "value1": 13,
                    "value_a": 1
                },
                "param_3": {
                    "bit_values": 1,
                    "bitwise_or_mask": 1,
                    "current_data": 1,
                    "data2": 1,
                    "existing_flags": 1,
                    "field2": 1,
                    "field_value2": 1,
                    "initial_value": 1,
                    "input2": 2,
                    "input_value2": 1,
                    "mask1": 2,
                    "param3": 1,
                    "register_value": 1,
                    "value": 1,
                    "value1": 1,
                    "value2": 13,
                    "value_b": 1
                },
                "param_4": {
                    "additional_flags": 1,
                    "bit_positions": 1,
                    "data3": 1,
                    "field3": 1,
                    "field_value3": 1,
                    "flags": 1,
                    "input3": 2,
                    "input_value3": 1,
                    "mask2": 2,
                    "modifier": 2,
                    "offset": 1,
                    "param4": 1,
                    "shifted_value": 1,
                    "value2": 1,
                    "value3": 13,
                    "value_c": 1
                },
                "param_5": {
                    "updated_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_register_values_00081042(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_register_values_00081042",
            "entrypoint": "0x00081042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081042": "update_register_values_00081042",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008105c": {
            "additional_data": {
                "0x14": {
                    "offset": 1
                },
                "FUN_0008105c": {
                    "set_bit": 14,
                    "set_bit_at_index": 4,
                    "set_bit_at_offset": 1,
                    "set_bit_at_position": 2,
                    "set_bit_flag": 1,
                    "set_bit_in_int": 1,
                    "set_bit_in_integer": 5,
                    "set_bit_in_memory": 1,
                    "set_bit_value": 2
                },
                "param_1": {
                    "address": 6,
                    "array": 1,
                    "base_address": 20,
                    "data": 1,
                    "integer_address": 1,
                    "integer_pointer": 1,
                    "memory_address": 1
                },
                "param_2": {
                    "bit_index": 9,
                    "bit_number": 1,
                    "bit_offset": 1,
                    "bit_position": 19,
                    "index": 1
                },
                "var_1": {
                    "shifted_bit": 1
                },
                "var_2": {
                    "bit_mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081210"
            ],
            "code": "\nvoid set_bit_in_integer_0008105c(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_in_integer_0008105c",
            "entrypoint": "0x0008105c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008105c": "set_bit_in_integer_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081066": {
            "additional_data": {
                "0x14": {
                    "offset": 1,
                    "value": 1
                },
                "0xffff": {
                    "constant": 1,
                    "initial_value": 1,
                    "max_value": 1,
                    "maximum_value": 1,
                    "param_value_assigned": 1
                },
                "FUN_00081066": {
                    "initialize_memory": 2,
                    "initialize_value": 9,
                    "reset_variable_to_maximum": 1,
                    "set_default_value": 5,
                    "set_default_value_to_param": 1,
                    "set_memory_location_to_max_value": 1,
                    "set_memory_to_ffff": 1,
                    "set_memory_value": 1,
                    "set_param_to_ffff": 3,
                    "set_param_to_max": 1,
                    "set_param_to_maximum": 1,
                    "set_param_to_one": 1,
                    "set_param_value": 1,
                    "set_param_value_to_max": 1,
                    "set_ptr_value_to_max": 1,
                    "set_variable_to_max_value": 1
                },
                "param_1": {
                    "address": 3,
                    "base_address": 7,
                    "input": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_val": 1,
                    "input_value": 1,
                    "memory_address": 5,
                    "memory_location": 1,
                    "obj_ptr": 1,
                    "param": 4,
                    "param_value": 1,
                    "ptr": 2,
                    "value_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid initialize_value_00081066(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "initialize_value_00081066",
            "entrypoint": "0x00081066",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081066": "initialize_value_00081066",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008106e": {
            "additional_data": {
                "FUN_0008106e": {
                    "set_configuration_value": 1,
                    "set_integer_value": 1,
                    "set_memory_value": 1,
                    "set_param": 3,
                    "set_param_at_index": 1,
                    "set_param_at_offset": 2,
                    "set_param_value": 13,
                    "set_parameter_value": 7,
                    "set_pointer_at_offset": 1,
                    "update_parameter": 1
                },
                "newVariableName1": {
                    "new_variable_name1": 1
                },
                "newVariableName2": {
                    "new_variable_name2": 1
                },
                "newVariableNameN": {
                    "new_variable_name_n": 1
                },
                "param_1": {
                    "array": 1,
                    "base_address": 5,
                    "configuration": 1,
                    "data_structure_ptr": 1,
                    "memory_address": 1,
                    "obj_address": 2,
                    "object_address": 15,
                    "object_pointer": 1,
                    "object_ptr": 1,
                    "param_address": 1,
                    "parameter_address": 1,
                    "target_address": 1
                },
                "param_2": {
                    "integer_value": 1,
                    "new_param_value": 2,
                    "new_value": 7,
                    "param_value": 6,
                    "parameter": 1,
                    "parameter_value": 5,
                    "value": 9
                },
                "param_3": {
                    "new_parameter_name3": 1
                },
                "param_4": {
                    "new_parameter_name4": 1
                },
                "param_5": {
                    "new_parameter_name5": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid set_param_value_0008106e(int object_address,undefined4 value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_0008106e",
            "entrypoint": "0x0008106e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "object_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081184": {
            "additional_data": {
                "DAT_": {
                    "no_change": 1
                },
                "FUN_00081184": {
                    "clear_data": 1,
                    "get_default_value": 2,
                    "get_return_value": 1,
                    "get_zero": 2,
                    "initialize": 18,
                    "initialize_application": 1,
                    "initialize_program": 4,
                    "initialize_value": 1,
                    "initialize_variable": 1
                },
                "PTR_": {
                    "no_change": 1
                },
                "return": {
                    "result": 1,
                    "return_value": 1
                },
                "undefined4": {
                    "int": 3,
                    "status": 2,
                    "void": 12
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_program_00081184(void)\n\n{\n  return_value 0;\n}\n\n",
            "current_name": "initialize_program_00081184",
            "entrypoint": "0x00081184",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081184": "initialize_program_00081184",
                "return": "return_value",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008118c": {
            "additional_data": {
                "DAT_20071180": {
                    "base_address": 1,
                    "base_value": 1,
                    "current_sum": 1,
                    "current_value": 1,
                    "global_variable": 1,
                    "pointer": 1
                },
                "FUN_0008118c": {
                    "add_and_update_pointer": 1,
                    "add_offset": 1,
                    "add_param_to_data": 1,
                    "add_param_to_global": 1,
                    "add_params_and_return_previous_value": 1,
                    "add_value_to_global": 1,
                    "add_with_offset": 1,
                    "addition_function": 1,
                    "calculate_increment": 1,
                    "calculate_new_address": 1,
                    "calculate_new_value": 7,
                    "calculate_new_value_and_return_old_value": 1,
                    "calculate_offset": 2,
                    "calculate_result": 1,
                    "calculate_sum": 10
                },
                "iVar1": {
                    "initial_offset": 1,
                    "initial_value": 3,
                    "old_value": 4,
                    "original_address": 1,
                    "previous_data_value": 1,
                    "previous_offset": 1,
                    "previous_sum": 6,
                    "previous_value": 13,
                    "result": 1
                },
                "param_1": {
                    "input": 2,
                    "input_number": 1,
                    "input_value": 18,
                    "num": 1,
                    "offset": 2,
                    "param": 2,
                    "value": 3,
                    "value_to_add": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00082970"
            ],
            "code": "\nint calculate_sum_0008118c(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previous_value = DAT_20071180;\n  DAT_20071180 = input_value + DAT_20071180;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_sum_0008118c",
            "entrypoint": "0x0008118c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008118c": "calculate_sum_0008118c",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ae": {
            "additional_data": {
                "DAT_00000001": {
                    "negative_one": 1
                },
                "FUN_000811ae": {
                    "get_default_return_value": 1,
                    "get_default_value": 7,
                    "get_error_code": 16,
                    "get_negative_one": 2,
                    "get_return_value": 2,
                    "get_status": 2
                },
                "PTR_12345678": {
                    "result": 1
                },
                "PTR_ERROR_CODE": {
                    "error_code": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "error_code": 2,
                    "int": 2,
                    "status": 2,
                    "uint32_t": 6
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_000811ae(void)\n\n{\n  result 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_000811ae",
            "entrypoint": "0x000811ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "return": "result",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b4": {
            "additional_data": {
                "0x2000": {
                    "initial_value": 1
                },
                "DAT_": {
                    "unchanged": 1
                },
                "FUN_000811b4": {
                    "initialize_memory": 14,
                    "set_memory_address": 1,
                    "set_memory_address_data_to2000": 1,
                    "set_memory_page_size": 2,
                    "set_memory_permission": 1,
                    "set_memory_size": 2,
                    "set_memory_to2000": 1,
                    "set_memory_value": 6,
                    "set_page_flag": 1,
                    "set_page_size": 2
                },
                "PTR_": {
                    "unchanged": 1
                },
                "param_1": {
                    "destination_pointer": 1,
                    "mem_start": 1,
                    "memory_address": 2,
                    "memory_pointer": 1,
                    "param": 6,
                    "param1": 8,
                    "param_1": 3,
                    "result": 4,
                    "return_value": 1,
                    "unused": 1,
                    "value": 3
                },
                "param_2": {
                    "address": 5,
                    "base_address": 1,
                    "buffer_address": 2,
                    "data_buffer": 1,
                    "data_offset": 1,
                    "mem_size": 1,
                    "memory_address": 13,
                    "memory_location": 1,
                    "memory_offset": 3,
                    "memory_start": 1,
                    "param2": 1,
                    "source_pointer": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000846b4"
            ],
            "code": "\nundefined4 initialize_memory_000811b4(undefined4 param1,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_000811b4",
            "entrypoint": "0x000811b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "param1",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811be": {
            "additional_data": {
                "DAT_": {
                    "": 1
                },
                "DAT_000811c2": {
                    "result": 1
                },
                "FUN_000811be": {
                    "check_success": 1,
                    "get_constant": 1,
                    "get_default_value": 1,
                    "get_one": 6,
                    "get_result": 1,
                    "get_return_value": 11,
                    "get_status": 1,
                    "initialize": 4,
                    "initialize_application": 1,
                    "initialize_flag": 1,
                    "initialize_program": 2,
                    "initialize_settings": 1
                },
                "PTR_": {
                    "": 1
                },
                "PTR_FUN_000811be": {
                    "ptr_return_value": 1
                },
                "int1": {
                    "return_value": 1
                },
                "return": {
                    "initialized_flag": 1,
                    "result": 6
                },
                "undefined4": {
                    "int": 5,
                    "status": 3,
                    "uint32_t": 2,
                    "unsigned_int": 1,
                    "void": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000846dc"
            ],
            "code": "\nint get_return_value_000811be(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_000811be",
            "entrypoint": "0x000811be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811be": "get_return_value_000811be",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c2": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0": {
                    "": 1
                },
                "DAT_67890": {
                    "dat_value": 1
                },
                "FUN_000811c2": {
                    "calculate_result": 1,
                    "check_validity": 1,
                    "get_default_value": 4,
                    "get_error_code": 1,
                    "get_result": 1,
                    "get_return_value": 10,
                    "get_value": 1,
                    "get_zero": 2,
                    "initialize": 5,
                    "initialize_function": 1,
                    "initialize_program": 1,
                    "process_data": 1,
                    "return_zero": 1
                },
                "PTR_12345": {
                    "ptr_struct": 1
                },
                "return": {
                    "": 1
                },
                "return_value": {
                    "status": 1
                },
                "undefined4": {
                    "int": 3,
                    "uint32_t": 6,
                    "void": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00084700"
            ],
            "code": "\nuint32_t get_return_value_000811c2(void)\n\n{\n  return 0;\n}\n\n",
            "current_name": "get_return_value_000811c2",
            "entrypoint": "0x000811c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c2": "get_return_value_000811c2",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c6": {
            "additional_data": {
                "": {
                    "": 2
                },
                "FUN_000811c6": {
                    "calculate_result": 1,
                    "clear_flag": 1,
                    "get_default_value": 4,
                    "get_null_value": 1,
                    "get_return_value": 7,
                    "get_zero": 7,
                    "initialize": 5,
                    "initialize_application": 1,
                    "initialize_data": 1,
                    "initialize_device": 1,
                    "initialize_program": 1,
                    "initialize_system": 1
                },
                "return": {
                    "result": 2,
                    "status": 1
                },
                "undefined4": {
                    "int": 1,
                    "uint32_t": 2,
                    "void": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_00084728"
            ],
            "code": "\nvoid get_null_value_000811c6(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "get_null_value_000811c6",
            "entrypoint": "0x000811c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c6": "get_null_value_000811c6",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811cc": {
            "additional_data": {
                "FUN_000811cc": {
                    "convert_byte_array_to_unsigned_int": 2,
                    "convert_bytes_to_int": 1,
                    "convert_bytes_to_u_int": 1,
                    "convert_bytes_to_uint": 3,
                    "copy_bytes": 13,
                    "copy_bytes_to_memory": 2,
                    "copy_bytes_to_register": 1,
                    "process_data": 6,
                    "read_bytes": 1,
                    "update_buffer": 1
                },
                "_DAT_400e0814": {
                    "loop_counter": 1,
                    "some_flag": 1
                },
                "_DAT_400e081c": {
                    "current_byte": 1,
                    "dest_address": 1
                },
                "iVar1": {
                    "i": 16,
                    "index": 14
                },
                "param_1": {
                    "address": 1,
                    "arg1": 1,
                    "arg_1": 1,
                    "buffer": 1,
                    "dest": 7,
                    "destination": 2,
                    "input": 1,
                    "input_pointer": 1,
                    "param": 3,
                    "param1": 8,
                    "param_a": 1,
                    "register_address": 1,
                    "start_address": 1,
                    "unused": 1,
                    "value": 1
                },
                "param_2": {
                    "arg2": 1,
                    "buffer_address": 1,
                    "byte_array": 3,
                    "byte_array_pointer": 1,
                    "data_address": 1,
                    "data_ptr": 1,
                    "input_ptr": 1,
                    "param2": 3,
                    "source": 6,
                    "source_address": 1,
                    "source_array": 3,
                    "src": 7,
                    "src_addr": 1,
                    "src_address": 1
                },
                "param_3": {
                    "arg3": 1,
                    "array_length": 2,
                    "buffer_size": 1,
                    "byte_array_length": 2,
                    "byte_count": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "length": 3,
                    "num_bytes": 12,
                    "param3": 3,
                    "size": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00084464"
            ],
            "code": "\n\n\nuint copy_bytes_to_memory_000811cc(undefined4 param1,int src,uint num_bytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)num_bytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(src + i);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_to_memory_000811cc",
            "entrypoint": "0x000811cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_memory_000811cc",
                "iVar1": "i",
                "param_1": "param1",
                "param_2": "src",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008120c": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008120c",
            "entrypoint": "0x0008120c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081210": {
            "additional_data": {
                "0x18": {
                    "constant_value_2": 1
                },
                "0x1c": {
                    "data_size": 1
                },
                "0x20": {
                    "comparison_value_2": 1
                },
                "0x2c": {
                    "comparison_value_1": 1
                },
                "0x400c0000": {
                    "constant_value_1": 1
                },
                "0xf": {
                    "mask": 1
                },
                "0xf0": {
                    "mask_2": 1
                },
                "FUND_00081210": {
                    "process_data": 1
                },
                "FUN_00080da0": {
                    "operation2": 1,
                    "perform_action": 2,
                    "perform_operation": 1,
                    "sub_function1": 1
                },
                "FUN_00080e18": {
                    "cleanup_function": 1,
                    "initialize": 1,
                    "initialize_device": 1,
                    "operation1": 1,
                    "print_output": 1,
                    "reset_flag": 1,
                    "sub_function3": 1,
                    "tertiary_function": 1
                },
                "FUN_0008105c": {
                    "execute_action": 1,
                    "execute_operation": 1,
                    "modify_value": 1,
                    "reverse_bits": 2,
                    "secondary_function": 1,
                    "sub_function2": 1
                },
                "FUN_00081210": {
                    "calculate_new_value": 1,
                    "check_and_execute_action": 1,
                    "check_and_modify": 1,
                    "check_and_modify_value": 1,
                    "perform_operation": 1,
                    "process_data": 4,
                    "process_input": 1,
                    "process_param": 2,
                    "process_parameter": 1,
                    "process_parameters": 1,
                    "process_params": 1
                },
                "_DAT_400e0614": {
                    "global_variable_2": 1,
                    "value1_new": 1,
                    "variable1": 1
                },
                "_DAT_400e0618": {
                    "constant1": 1,
                    "global_variable_1": 1,
                    "value1": 1
                },
                "_DAT_400e0704": {
                    "global_variable_4": 1,
                    "value2_new": 1,
                    "variable2": 1
                },
                "_DAT_400e0708": {
                    "constant2": 1,
                    "global_variable_3": 1,
                    "value2": 1
                },
                "bVar5": {
                    "bit1": 3,
                    "byte_value1": 1,
                    "byte_var1": 1,
                    "config_value_mask": 1,
                    "flag1": 1,
                    "low_bits": 1,
                    "lower_bits": 1,
                    "lower_nibble": 14,
                    "mask1": 1,
                    "masked_value": 1,
                    "operation_type": 1,
                    "sub_mode": 1,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "type1": 1,
                    "value1": 1
                },
                "bVar6": {
                    "all_bits": 2,
                    "all_nibbles": 1,
                    "bit2": 3,
                    "bitwise_value": 1,
                    "both_nibbles": 1,
                    "byte_value2": 1,
                    "byte_var": 2,
                    "byte_var2": 1,
                    "combined_flags": 1,
                    "combined_mode": 1,
                    "combined_nibble": 1,
                    "combined_nibbles": 1,
                    "config_value": 1,
                    "flag": 1,
                    "flag2": 1,
                    "full_byte": 5,
                    "mask2": 1,
                    "masked_byte": 1,
                    "temp_var4": 1,
                    "temp_var7": 1,
                    "type2": 1,
                    "upper_nibble": 1,
                    "value2": 1
                },
                "iVar1": {
                    "output_param": 2,
                    "output_value": 1,
                    "output_var": 1,
                    "result": 23,
                    "return_value": 4
                },
                "iVar7": {
                    "index": 5,
                    "index1": 2,
                    "offset": 2,
                    "temp1": 3,
                    "temp_index": 1,
                    "temp_value1": 1,
                    "temp_var1": 12,
                    "temp_var4": 2,
                    "temp_var_4": 1,
                    "tmp_var1": 1,
                    "var1": 1
                },
                "iVar8": {
                    "data": 1,
                    "index2": 2,
                    "pointer": 1,
                    "ptr": 1,
                    "ptr_val": 1,
                    "struct_ptr": 1,
                    "temp2": 3,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var2": 12,
                    "temp_var5": 2,
                    "temp_var_5": 1,
                    "tmp_var2": 1,
                    "value": 2,
                    "var2": 1
                },
                "iVar9": {
                    "temp3": 1
                },
                "param_1": {
                    "device_index": 1,
                    "index": 1,
                    "input": 7,
                    "input1": 4,
                    "input_index": 3,
                    "input_param": 5,
                    "input_param1": 3,
                    "input_parameter": 1,
                    "input_value": 5,
                    "input_var1": 1
                },
                "param_2": {
                    "action": 1,
                    "flag": 3,
                    "flag_param": 1,
                    "input2": 4,
                    "input_param2": 3,
                    "input_var2": 1,
                    "mode": 5,
                    "mode_param": 1,
                    "operation": 4,
                    "option": 6,
                    "option_param": 1,
                    "param_value": 1
                },
                "uVar2": {
                    "bit_position": 1,
                    "condition": 1,
                    "condition_1": 1,
                    "flag": 1,
                    "length": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp4": 1,
                    "temp_var1": 3,
                    "temp_var2": 1,
                    "temp_var3": 5,
                    "temp_var5": 1,
                    "temp_var_1": 1,
                    "value": 3,
                    "value1": 4,
                    "var1": 2
                },
                "uVar3": {
                    "code": 2,
                    "constant1": 1,
                    "flag": 2,
                    "mode": 1,
                    "operation": 1,
                    "status": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_var4": 5,
                    "temp_var6": 1,
                    "temp_var_2": 1,
                    "type": 2,
                    "value2": 4,
                    "var2": 2
                },
                "uVar4": {
                    "bit_mask": 1,
                    "condition_2": 1,
                    "flag": 1,
                    "mask": 5,
                    "result": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_flag": 1,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_var5": 5,
                    "temp_var7": 1,
                    "temp_var_3": 1,
                    "value3": 4,
                    "var3": 2
                }
            },
            "called": [
                "FUN_00080da0",
                "FUN_0008105c",
                "FUN_00080e18"
            ],
            "calling": [
                "FUN_00080164",
                "FUN_00081318",
                "FUN_000804a8"
            ],
            "code": "\n\n\nint process_data_00081210(int input,int option)\n\n{\n  int result;\n  uint temp_var3;\n  undefined4 temp_var4;\n  uint temp_var5;\n  byte lower_nibble;\n  byte full_byte;\n  int temp_var1;\n  int temp_var2;\n  \n  result = input;\n  if ((&DAT_00084d24)[input * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[input] & 0xf) == 4) {\n      result = FUN_0008105c(0x400c0000,(&DAT_00084d31)[input * 0x1c]);\n    }\n    full_byte = (&DAT_20070d94)[input];\n    lower_nibble = full_byte & 0xf;\n    if ((lower_nibble < 3) && (full_byte != 0)) {\n      if (lower_nibble == 2) {\n        if (option == 0) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 1) {\n        if (option == 2) {\n          return result;\n        }\n      }\n      else if (lower_nibble == 3) {\n        if (option == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (option != 1) {\nLAB_0008126c:\n      if (option == 0) {\n        result = input * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),0);\n        full_byte = (&DAT_20070d94)[input] & 0xf0 | 2;\n      }\n      else {\n        if (option != 2) {\n          return result;\n        }\n        result = input * 0x1c;\n        FUN_00080e18(*(undefined4 *)(&DAT_00084d20 + result));\n        result = FUN_00080da0(*(undefined4 *)(&DAT_00084d18 + result),3,\n                             *(undefined4 *)(&DAT_00084d1c + result),1);\n        full_byte = (&DAT_20070d94)[input] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[input] = full_byte;\n      return result;\n    }\n    temp_var1 = input * 0x1c;\n    temp_var2 = *(int *)(&DAT_00084d18 + temp_var1);\n    if (full_byte >> 4 == 0) {\n      temp_var4 = 4;\n    }\n    else {\n      temp_var4 = 5;\n    }\n    result = FUN_00080da0(temp_var2,temp_var4,*(undefined4 *)(&DAT_00084d1c + temp_var1),\n                         *(undefined4 *)(&DAT_00084d28 + temp_var1));\n    (&DAT_20070d94)[input] = (&DAT_20070d94)[input] & 0xf0 | 3;\n    if (*(int *)(temp_var2 + 0x18) == -1) {\n      temp_var3 = *(uint *)(&DAT_00084d20 + temp_var1);\n      if (0x2c < temp_var3) {\n        return 1;\n      }\n      if (temp_var3 < 0x20) {\n        temp_var3 = 1 << (temp_var3 & 0xff);\n        temp_var5 = _DAT_400e0618 & temp_var3;\n        if (temp_var5 == temp_var3) {\n          _DAT_400e0614 = temp_var5;\n        }\n      }\n      else {\n        temp_var3 = 1 << (temp_var3 - 0x20 & 0xff);\n        temp_var5 = _DAT_400e0708 & temp_var3;\n        if (temp_var5 == temp_var3) {\n          _DAT_400e0704 = temp_var5;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_00081210",
            "entrypoint": "0x00081210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081210": "process_data_00081210",
                "bVar5": "lower_nibble",
                "bVar6": "full_byte",
                "iVar1": "result",
                "iVar7": "temp_var1",
                "iVar8": "temp_var2",
                "param_1": "input",
                "param_2": "option",
                "uVar2": "temp_var3",
                "uVar3": "temp_var4",
                "uVar4": "temp_var5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081318": {
            "additional_data": {
                "FUN_00080d7a": {
                    "handle_error": 14,
                    "handle_invalid_config": 1,
                    "perform_action": 1,
                    "process_data": 3,
                    "process_value": 1
                },
                "FUN_00080e04": {
                    "check_condition": 3,
                    "check_configuration": 1,
                    "check_data": 5,
                    "check_param": 1,
                    "check_parameter": 1,
                    "check_status": 1,
                    "check_validity": 2,
                    "check_value": 6
                },
                "FUN_00081210": {
                    "handle_case_five": 1,
                    "handle_status": 1,
                    "modify_value": 2,
                    "perform_action": 3,
                    "process_data": 4,
                    "process_param": 1,
                    "process_parameter": 1,
                    "set_configuration": 1,
                    "update_data": 1,
                    "update_value": 5
                },
                "FUN_00081318": {
                    "process_data": 1,
                    "update_configuration": 2,
                    "update_data": 8,
                    "update_data_connections": 1,
                    "update_data_entry": 2,
                    "update_param": 7,
                    "update_param_value": 1,
                    "update_parameter": 2,
                    "update_parameter_value": 4,
                    "update_params": 1,
                    "update_settings": 1,
                    "update_status": 1
                },
                "iVar1": {
                    "result": 27,
                    "return_value": 1,
                    "status": 3
                },
                "iVar3": {
                    "address": 5,
                    "array_value": 1,
                    "config_data": 1,
                    "data": 5,
                    "data_address": 3,
                    "data_entry": 1,
                    "data_ptr": 3,
                    "entry": 1,
                    "entry_address": 1,
                    "param_address": 1,
                    "pointer": 1,
                    "ptr": 6,
                    "setting_address": 1,
                    "var1": 1
                },
                "param_1": {
                    "data_index": 1,
                    "entry_index": 2,
                    "index": 27,
                    "index1": 1
                },
                "param_2": {
                    "flag": 1,
                    "index2": 1,
                    "new_value": 3,
                    "param_value": 1,
                    "value": 25
                },
                "param_3": {
                    "config": 3,
                    "data": 5,
                    "extra_data": 1,
                    "extra_param": 1,
                    "param": 21
                },
                "uVar2": {
                    "config_value": 1,
                    "data": 6,
                    "new_value": 6,
                    "param": 2,
                    "param_value": 6,
                    "setting": 1,
                    "temp": 1,
                    "temp_var": 1,
                    "updated_value": 2,
                    "value": 5
                }
            },
            "called": [
                "FUN_00080e04",
                "FUN_00081210",
                "FUN_00080d7a"
            ],
            "calling": [
                "FUN_00080164",
                "FUN_00080ae4",
                "FUN_00080258",
                "FUN_000801b0",
                "FUN_000804a8"
            ],
            "code": "\nvoid update_data_entry_00081318(int index,int value,undefined4 param)\n\n{\n  int result;\n  undefined4 data;\n  int ptr;\n  \n  if ((&DAT_00084d24)[index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[index] & 0xf) == 5) {\n      FUN_00081210(index,1,param,5,index,value,param);\n    }\n    (&DAT_20070d94)[index] = (&DAT_20070d94)[index] & 0xf | (byte)(value << 4);\n    ptr = *(int *)(&DAT_00084d18 + index * 0x1c);\n    data = *(undefined4 *)(&DAT_00084d1c + index * 0x1c);\n    result = FUN_00080e04(ptr,data);\n    if (result == 0) {\n      if (value != 0) {\n        *(undefined4 *)(ptr + 100) = data;\n        return;\n      }\n      *(undefined4 *)(ptr + 0x60) = data;\n      return;\n    }\n    FUN_00080d7a(ptr,data,value,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_entry_00081318",
            "entrypoint": "0x00081318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081318": "update_data_entry_00081318",
                "iVar1": "result",
                "iVar3": "ptr",
                "param_1": "index",
                "param_2": "value",
                "param_3": "param",
                "uVar2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081388": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_of_elf32_rel_structs": 1,
                    "elf32_rel_array": 1,
                    "rel_array": 6,
                    "rel_entries": 1,
                    "relocation_array": 6,
                    "relocation_entries": 6,
                    "relocation_info_array": 2,
                    "relocation_table": 4
                },
                "FUN_00081388": {
                    "call_function_if_info_decreased": 1,
                    "call_function_if_r_info_is_zero": 1,
                    "check_and_call_function": 1,
                    "decrement_and_execute_if_zero": 1,
                    "execute_function_if_condition_is_met": 1,
                    "execute_function_if_condition_met": 1,
                    "execute_function_if_index_zero": 1,
                    "execute_function_if_last_rel_info_is_zero": 1,
                    "execute_function_if_r_info_equals_zero": 1,
                    "execute_function_if_threshold_met": 1,
                    "execute_function_if_value_equals_zero": 1,
                    "execute_function_if_zero": 1,
                    "execute_if_condition_met": 1,
                    "execute_if_last_r_info_is_zero": 1,
                    "execute_if_last_rel_is_zero": 1,
                    "execute_if_r_info_equal_zero": 1,
                    "execute_if_r_info_is_decremented_to_zero": 1,
                    "execute_if_r_info_is_zero": 6,
                    "execute_if_r_info_not_minus_1_and_become_zero": 1,
                    "execute_if_r_info_not_minus_one": 1,
                    "execute_if_rel_info_equal_zero": 1,
                    "execute_if_relocation_info_valid": 1,
                    "execute_if_valid_rel_entry_6": 1,
                    "execute_post_decrement": 1,
                    "execute_relocated_function": 1,
                    "run_relocated_function": 1
                },
                "code": {
                    "function_pointer": 1
                },
                "r_info": {
                    "element": 1,
                    "entry_info": 3,
                    "info": 7,
                    "relocation_info": 13
                },
                "r_offset": {
                    "entry_offset": 2,
                    "offset": 9,
                    "relocation_offset": 13
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_if_last_r_info_is_zero_00081388(void)\n\n{\n  if ((rel_array[6].relocation_info != 0xffffffff) &&\n     (rel_array[6].relocation_info = rel_array[6].relocation_info - 1,\n     rel_array[6].relocation_info == 0)) {\n    (*(function_pointer *)((int)&rel_array[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_if_last_r_info_is_zero_00081388",
            "entrypoint": "0x00081388",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081388": "execute_if_last_r_info_is_zero_00081388",
                "code": "function_pointer",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813a8": {
            "additional_data": {
                "DAT_": {
                    "dat_": 1
                },
                "FUN_000813a8": {
                    "clear_memory": 1,
                    "init_param": 1,
                    "initialize_buffer": 4,
                    "initialize_data": 5,
                    "initialize_data_structure": 1,
                    "initialize_function": 2,
                    "initialize_memory": 10,
                    "initialize_memory_block": 1,
                    "initialize_param": 2,
                    "initialize_parameters": 3,
                    "initialize_params": 1
                },
                "FUN_00082504": {
                    "clear_memory": 1,
                    "clear_memory_block": 1,
                    "fill_buffer": 1,
                    "initialize_memory": 1,
                    "initialize_param_values": 1,
                    "set_buffer_values": 2,
                    "set_data_value": 1,
                    "set_default_value": 6,
                    "set_function_values": 1,
                    "set_initial_values": 2,
                    "set_memory": 3,
                    "set_memory_to_zero": 1,
                    "set_memory_value": 1,
                    "set_memory_values": 3,
                    "set_param": 2,
                    "set_param_values": 1,
                    "write_memory": 1
                },
                "PTR_": {
                    "ptr_": 1
                },
                "param_1": {
                    "buffer": 4,
                    "data": 1,
                    "data_array": 1,
                    "data_pointer": 4,
                    "data_structure": 1,
                    "function_parameter": 1,
                    "function_pointer": 1,
                    "input": 1,
                    "input_buffer": 1,
                    "mem_block_address": 1,
                    "memory_address": 5,
                    "memory_block": 4,
                    "memory_pointer": 2,
                    "param": 3,
                    "ptr": 1
                },
                "param_2": {
                    "default_value": 2,
                    "initial_value": 1,
                    "param": 1,
                    "param2": 5,
                    "param_2": 2,
                    "param_type": 1,
                    "second_parameter": 1,
                    "start_value": 2,
                    "undefined_param": 1,
                    "undefined_value": 1,
                    "unused": 6,
                    "unused_param": 1,
                    "unused_param1": 1,
                    "unused_parameter": 1,
                    "value": 5
                },
                "param_3": {
                    "array_size": 1,
                    "block_size": 1,
                    "mem_size": 1,
                    "memory_block_size": 1,
                    "memory_size": 2,
                    "num_bytes": 1,
                    "num_values": 1,
                    "param3": 5,
                    "param_3": 1,
                    "param_value": 1,
                    "size": 13,
                    "third_parameter": 1,
                    "value": 1,
                    "value_param": 1
                },
                "param_4": {
                    "new_variable": 1
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nint initialize_memory_block_000813a8(int memory_address)\n\n{\n  FUN_00082504(memory_address,0,0x80);\n  *(undefined4 *)(memory_address + 0x80) = 0;\n  *(undefined4 *)(memory_address + 0x84) = 0;\n  return memory_address;\n}\n\n",
            "current_name": "initialize_memory_block_000813a8",
            "entrypoint": "0x000813a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813a8": "initialize_memory_block_000813a8",
                "param_1": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813c2": {
            "additional_data": {
                "FUN_000813c2": {
                    "increment_and_store": 1,
                    "update_and_store_byte": 1,
                    "update_and_store_data": 2,
                    "update_and_store_value": 1,
                    "update_and_store_value_in_array": 1,
                    "update_array": 1,
                    "update_buffer": 18,
                    "update_buffer_with_param": 1,
                    "update_data": 1,
                    "update_data_and_index": 1,
                    "update_param": 1,
                    "update_pointer_and_value": 1,
                    "update_value": 1
                },
                "param_1": {
                    "array_base_address": 1,
                    "array_pointer": 1,
                    "base_address": 5,
                    "buffer": 11,
                    "buffer_address": 7,
                    "buffer_ptr": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_pointer": 2,
                    "memory_address": 1
                },
                "param_2": {
                    "byte_to_store": 1,
                    "data": 4,
                    "new_data": 3,
                    "new_value": 17,
                    "value": 6
                },
                "uVar1": {
                    "buffer_index": 2,
                    "current_index": 3,
                    "current_offset": 1,
                    "new_index": 8,
                    "new_value": 1,
                    "next_index": 2,
                    "updated_index": 14
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_buffer_with_param_000813c2(int buffer,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_buffer_with_param_000813c2",
            "entrypoint": "0x000813c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813c2": "update_buffer_with_param_000813c2",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813e4": {
            "additional_data": {
                "0x10": {
                    "offset": 1
                },
                "0x7f": {
                    "bitwise_mask": 1,
                    "mask": 1
                },
                "0x80": {
                    "first_offset": 1,
                    "first_value_offset": 1,
                    "offset1": 1,
                    "offset_1": 1,
                    "offset_a": 1,
                    "offset_value_1": 1
                },
                "0x84": {
                    "offset2": 1,
                    "offset_2": 1,
                    "offset_b": 1,
                    "offset_value_2": 1,
                    "second_offset": 1,
                    "second_value_offset": 1
                },
                "DAT_1": {
                    "data_1": 1
                },
                "DAT_2": {
                    "data_2": 1
                },
                "DAT_5678": {
                    "dat_value": 1
                },
                "FUN_000813e4": {
                    "calculate_bit_difference": 1,
                    "calculate_difference": 27,
                    "calculate_difference_and_mask": 1,
                    "subtract_and_mask": 2
                },
                "PTR_1": {
                    "pointer_1": 1
                },
                "PTR_1234": {
                    "ptr_value": 1
                },
                "PTR_2": {
                    "pointer_2": 1
                },
                "PTR_3": {
                    "pointer_3": 1
                },
                "param_1": {
                    "input": 6,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 21
                },
                "path_param_1": {
                    "pointer1": 1
                },
                "path_param_2": {
                    "pointer2": 1
                },
                "var1": {
                    "value1": 1
                },
                "var2": {
                    "value2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nuint calculate_bit_difference_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_bit_difference_000813e4",
            "entrypoint": "0x000813e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813e4": "calculate_bit_difference_000813e4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081454": {
            "additional_data": {
                "FUN_00081454": {
                    "process_data": 1,
                    "update_array_value": 1,
                    "update_data": 14,
                    "update_data_value": 2,
                    "update_parameter": 2,
                    "update_parameter_value": 1,
                    "update_value": 6,
                    "update_value_if_condition_met": 1,
                    "update_value_in_array": 1,
                    "update_value_in_buffer": 1,
                    "update_value_in_structure": 1
                },
                "iVar1": {
                    "array_pointer": 1,
                    "buffer": 1,
                    "data_block": 1,
                    "data_offset": 4,
                    "data_ptr": 1,
                    "data_struct": 5,
                    "element_ptr": 1,
                    "inner_obj_ptr": 1,
                    "local_variable1": 2,
                    "parameter_pointer": 1,
                    "ptr1": 3,
                    "ptr_data": 1,
                    "ptr_to_data_struct": 1,
                    "secondary_data_ptr": 1,
                    "struct_member1": 1,
                    "struct_var": 2,
                    "structure": 1,
                    "value1": 2,
                    "value_ptr": 1
                },
                "param_1": {
                    "array_index": 1,
                    "array_ptr": 1,
                    "base_address": 1,
                    "buffer_address": 1,
                    "data": 3,
                    "data_pointer": 10,
                    "data_ptr": 2,
                    "data_struct": 3,
                    "data_struct_ptr": 2,
                    "data_structure": 2,
                    "input": 1,
                    "input_data": 1,
                    "input_pointer": 1,
                    "obj_ptr": 1,
                    "structure_address": 1
                },
                "param_2": {
                    "new_data": 1,
                    "new_parameter": 1,
                    "new_value": 25,
                    "value": 4
                },
                "uVar2": {
                    "incremented_value": 2,
                    "local_variable2": 2,
                    "new_index": 9,
                    "new_value": 1,
                    "next_index": 1,
                    "updated_index": 4,
                    "updated_offset": 1,
                    "updated_value": 9,
                    "updated_var": 1,
                    "value2": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_value_00081454(int data_pointer,undefined4 new_value)\n\n{\n  int data_struct;\n  uint new_index;\n  \n  data_struct = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_struct + 0x84) == *(int *)(data_struct + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    new_index = *(int *)(data_struct + 0x80) + 1U & 0x8000007f;\n    if ((int)new_index < 0) {\n      new_index = (new_index - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_struct + 0x84) == new_index);\n    *(char *)(data_struct + *(int *)(data_struct + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = new_index;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_value_00081454",
            "entrypoint": "0x00081454",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081454": "update_data_value_00081454",
                "iVar1": "data_struct",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "uVar2": "new_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814e4": {
            "additional_data": {
                "FUN_000814e4": {
                    "initialize_function": 1,
                    "initialize_function_parameters": 1,
                    "initialize_parameters": 24,
                    "initialize_params": 5
                },
                "param_1": {
                    "array": 1,
                    "output_array": 7,
                    "output_params": 1,
                    "param_array": 2,
                    "parameter_array": 2,
                    "parameters": 13,
                    "params": 4,
                    "params_array": 1
                },
                "param_2": {
                    "input_value": 2,
                    "param2_value": 2,
                    "value": 6,
                    "value1": 12,
                    "value2": 7,
                    "value_2": 2
                },
                "param_3": {
                    "extra_value": 1,
                    "flag": 11,
                    "param3_value": 2,
                    "value2": 8,
                    "value3": 7,
                    "value_3": 2
                },
                "param_4": {
                    "data1": 1,
                    "extra_data1": 1,
                    "option1": 1,
                    "param4": 1,
                    "param4_value": 2,
                    "param_4_value": 1,
                    "param_a": 1,
                    "value1": 1,
                    "value2": 5,
                    "value3": 8,
                    "value4": 7,
                    "value_4": 2
                },
                "param_5": {
                    "data2": 1,
                    "extra_data2": 1,
                    "option2": 1,
                    "param5": 1,
                    "param5_value": 2,
                    "param_5_value": 1,
                    "param_b": 1,
                    "value2": 1,
                    "value3": 5,
                    "value4": 8,
                    "value5": 7,
                    "value_5": 2
                },
                "param_6": {
                    "data3": 1,
                    "extra_data3": 1,
                    "option3": 1,
                    "param6": 1,
                    "param6_value": 2,
                    "param_6_value": 1,
                    "param_c": 1,
                    "value3": 1,
                    "value4": 5,
                    "value5": 8,
                    "value6": 7,
                    "value_6": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "code": "\nvoid initialize_function_parameters_000814e4(undefined4 *parameters,undefined4 value1,undefined flag,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = flag;\n  parameters[4] = value4;\n  parameters[8] = value3;\n  parameters[5] = value5;\n  return;\n}\n\n",
            "current_name": "initialize_function_parameters_000814e4",
            "entrypoint": "0x000814e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814e4": "initialize_function_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "flag",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081508": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array_of_structures": 1,
                    "elf_rel_array": 1,
                    "relocation_array": 1
                },
                "FUN_00081508": {
                    "initialize_data": 6,
                    "initialize_function": 20,
                    "initialize_memory": 2,
                    "initialize_module": 1,
                    "initialize_program": 1,
                    "initialize_some_data": 1
                },
                "iVar1": {
                    "data_offset": 1,
                    "i_var1": 1,
                    "index": 1,
                    "int_var1": 1,
                    "local_var1": 1,
                    "local_variable1": 1,
                    "module1": 1,
                    "new_variable1": 1,
                    "program_handle": 1,
                    "ptr1": 1,
                    "temp1": 1,
                    "temp_int_variable": 1,
                    "temp_var": 4,
                    "temp_var1": 7,
                    "temp_variable1": 1,
                    "var1": 1,
                    "var_1": 1,
                    "variable1": 5
                },
                "param_1": {
                    "address": 1,
                    "arg1": 5,
                    "data": 2,
                    "data_address": 2,
                    "data_offset": 1,
                    "data_struct": 1,
                    "function_data": 2,
                    "function_data_ptr": 1,
                    "function_param1": 1,
                    "function_parameter": 1,
                    "input_param": 1,
                    "input_param1": 2,
                    "input_parameter": 2,
                    "memory_address": 1,
                    "param1": 7,
                    "param_1": 1
                },
                "param_2": {
                    "arg2": 5,
                    "division_factor": 1,
                    "divisor": 2,
                    "function_param2": 1,
                    "input_param2": 2,
                    "page_size": 2,
                    "param2": 9,
                    "param_2": 1,
                    "param_size": 1,
                    "param_value": 3,
                    "size": 3,
                    "size_parameter": 1
                },
                "param_3": {
                    "arg3": 5,
                    "constant_value": 1,
                    "function_param3": 1,
                    "initial_value": 1,
                    "input_param3": 2,
                    "param3": 10,
                    "param_3": 2,
                    "param_data": 1,
                    "param_value": 1,
                    "value": 6,
                    "value_parameter": 1
                },
                "puVar2": {
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "function_data": 1,
                    "function_ptr": 1,
                    "local_pointer2": 1,
                    "memory_pointer": 1,
                    "module2": 1,
                    "new_variable2": 1,
                    "pointer_to_data": 1,
                    "pointer_var": 5,
                    "pointer_var1": 2,
                    "pointer_var2": 1,
                    "program_data": 1,
                    "ptr2": 1,
                    "ptr_to_var2": 1,
                    "ptr_var": 1,
                    "ptr_var2": 4,
                    "pu_var2": 1,
                    "temp2": 1,
                    "temp_variable2": 1,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_00080e18"
            ],
            "calling": [],
            "code": "\nvoid initialize_function_00081508(int param1,uint param2,undefined4 param3)\n\n{\n  int temp_var1;\n  undefined4 *pointer_var;\n  \n  FUN_00080e18(*(undefined4 *)(param1 + 0x20));\n  pointer_var = *(undefined4 **)(param1 + 0x18);\n  pointer_var[0x48] = 0x202;\n  *pointer_var = 0xac;\n  pointer_var[1] = param3;\n  pointer_var[8] = relocation_array[6].r_offset / param2 >> 4;\n  pointer_var[3] = 0xffffffff;\n  pointer_var[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(param1 + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(param1 + 0x1c) & 0x1f);\n  temp_var1 = *(int *)(param1 + 0x10);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  temp_var1 = *(int *)(param1 + 0x14);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  *pointer_var = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_function_00081508",
            "entrypoint": "0x00081508",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081508": "initialize_function_00081508",
                "iVar1": "temp_var1",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3",
                "puVar2": "pointer_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815d4": {
            "additional_data": {
                "FUN_000814e4": {
                    "helper_function": 1,
                    "initialize_data_entry": 1,
                    "initialize_memory": 1,
                    "initialize_sub_function": 1,
                    "perform_additional_actions": 1,
                    "perform_additional_operation": 1,
                    "perform_additional_operations": 1,
                    "perform_initialization": 8,
                    "perform_preprocessing": 1,
                    "sub_function": 1
                },
                "FUN_000815d4": {
                    "initialize_data": 1,
                    "initialize_function": 19,
                    "initialize_function_data": 1,
                    "initialize_function_pointer": 1,
                    "initialize_pointer": 4,
                    "set_function_pointer_and_parameter": 1,
                    "set_function_pointer_and_value": 2,
                    "update_data_entry": 1,
                    "update_function_pointer": 1
                },
                "PTR_FUN_00081454_1_000857d8": {
                    "memory_address": 1
                },
                "param_1": {
                    "data_entry": 1,
                    "function_pointer": 4,
                    "output_array": 16,
                    "output_data": 1,
                    "output_pointer": 4,
                    "pointer": 2,
                    "result": 2,
                    "return_value": 1
                },
                "param_2": {
                    "input_data": 4,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 19,
                    "new_value": 1,
                    "value": 5
                },
                "param_3": {
                    "param3_value": 1,
                    "parameter3": 1,
                    "unknown_flag": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_param1": 1
                },
                "param_4": {
                    "additional_data": 2,
                    "another_param": 1,
                    "param4_value": 1,
                    "parameter4": 1,
                    "unused_param2": 1
                }
            },
            "called": [
                "FUN_000814e4"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nundefined4 * initialize_function_pointer_000815d4(undefined4 *output_array,undefined4 input_value)\n\n{\n  FUN_000814e4();\n  *output_array = &PTR_FUN_00081454_1_000857d8;\n  output_array[9] = input_value;\n  return output_array;\n}\n\n",
            "current_name": "initialize_function_pointer_000815d4",
            "entrypoint": "0x000815d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815d4": "initialize_function_pointer_000815d4",
                "param_1": "output_array",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815f8": {
            "additional_data": {
                "FUN_000815f8": {
                    "combine_and_shift": 2,
                    "combine_bits": 1,
                    "combine_bytes": 2,
                    "combine_inputs": 1,
                    "combine_param_and_shift": 3,
                    "combine_param_with_shift": 1,
                    "combine_params": 1,
                    "combine_shift_and_or": 1,
                    "combine_shifted_value": 1,
                    "combine_shifted_values": 2,
                    "combine_values": 13,
                    "combine_with_shift": 1,
                    "merge_and_shift_to_left": 1
                },
                "param_1": {
                    "byte_value": 1,
                    "first_value": 1,
                    "input": 1,
                    "input1": 3,
                    "input_number": 1,
                    "input_value": 5,
                    "input_value1": 1,
                    "lower_byte": 1,
                    "original_value": 1,
                    "shift_value": 1,
                    "shifted_value": 4,
                    "value1": 9,
                    "value_1": 1,
                    "value_shifted": 1
                },
                "param_2": {
                    "base_value": 1,
                    "bit_mask": 1,
                    "bitmask": 1,
                    "bitwise_value": 1,
                    "combined_value": 1,
                    "input2": 3,
                    "input_value": 1,
                    "input_value2": 1,
                    "mask": 1,
                    "or_value": 1,
                    "original_value": 4,
                    "output_value": 1,
                    "result": 1,
                    "second_value": 1,
                    "shifted_value": 1,
                    "upper_byte": 1,
                    "value2": 8,
                    "value_2": 1,
                    "value_to_combine": 1
                },
                "param_3": {
                    "combined_value": 1,
                    "result": 1,
                    "shifted_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00080410"
            ],
            "code": "\nuint combine_shifted_values_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "current_name": "combine_shifted_values_000815f8",
            "entrypoint": "0x000815f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815f8": "combine_shifted_values_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815fe": {
            "additional_data": {
                "FUN_000815fe": {
                    "execute_function": 3,
                    "execute_function_and_return_param": 1,
                    "handle_parameter": 1,
                    "process": 2,
                    "process_data": 18,
                    "process_param": 2,
                    "process_parameter": 2,
                    "run_pre_process": 1
                },
                "FUN_00081e04": {
                    "do_something": 1,
                    "execute": 1,
                    "execute_operation": 1,
                    "handle_data": 1,
                    "perform_operation": 2,
                    "process_data": 4,
                    "process_data_item": 1,
                    "process_item": 1,
                    "process_sub_function": 2,
                    "reverse_data": 9
                },
                "param_1": {
                    "array_pointer": 1,
                    "data": 15,
                    "data_array": 2,
                    "data_pointer": 1,
                    "data_ptr": 2,
                    "input": 2,
                    "input_array": 1,
                    "input_data": 2,
                    "input_param": 1,
                    "param": 1,
                    "parameter": 2
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [],
            "code": "\nundefined4 * process_data_000815fe(undefined4 *data)\n\n{\n  FUN_00081e04(*data);\n  return data;\n}\n\n",
            "current_name": "process_data_000815fe",
            "entrypoint": "0x000815fe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815fe": "process_data_000815fe",
                "param_1": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008160c": {
            "additional_data": {
                "FUN_0008160c": {
                    "clear_data": 1,
                    "clear_memory": 4,
                    "reset_param": 2,
                    "reset_parameters": 17,
                    "reset_params": 1,
                    "reset_pointers": 1,
                    "reset_to_zero": 1,
                    "reset_values": 2,
                    "reset_variables": 2
                },
                "FUN_00081e04": {
                    "clear_memory": 1,
                    "perform_action": 1,
                    "perform_cleanup": 1,
                    "perform_reset": 1,
                    "reset_array_values": 1,
                    "reset_data": 1,
                    "reset_function": 10,
                    "reset_something": 1,
                    "reset_values": 1,
                    "some_other_function": 1
                },
                "param_1": {
                    "array": 2,
                    "data": 1,
                    "memory_pointer": 2,
                    "memory_ptr": 2,
                    "param": 2,
                    "param_array": 1,
                    "parameters": 15,
                    "params": 1,
                    "pointer": 1,
                    "values": 1,
                    "var": 1
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid reset_parameters_0008160c(int *parameters)\n\n{\n  if (*parameters != 0) {\n    FUN_00081e04();\n  }\n  *parameters = 0;\n  parameters[2] = 0;\n  parameters[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_parameters_0008160c",
            "entrypoint": "0x0008160c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008160c": "reset_parameters_0008160c",
                "param_1": "parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081622": {
            "additional_data": {
                "FUN_00081622": {
                    "process_data": 1,
                    "replace_value_and_set_index": 1,
                    "update_and_check_value": 4,
                    "update_and_store_value": 1,
                    "update_array": 2,
                    "update_array_and_check": 2,
                    "update_array_element": 5,
                    "update_param_and_check": 2,
                    "update_param_and_return": 4,
                    "update_param_and_return_value": 1,
                    "update_param_with_result": 1,
                    "update_parameter": 1,
                    "update_value": 1,
                    "update_value_and_index": 2,
                    "update_value_if_valid": 1,
                    "validate_and_update": 1,
                    "validate_and_update_param": 1
                },
                "FUN_000825a0": {
                    "calculate_new_value": 1
                },
                "iVar1": {
                    "result": 21,
                    "return_value": 9
                },
                "param_1": {
                    "array": 15,
                    "data_pointer": 1,
                    "input_array": 1,
                    "integer_pointer": 1,
                    "param": 1,
                    "param_array": 4,
                    "parameter": 1,
                    "parameter_array": 1,
                    "value_array": 1,
                    "value_list": 1,
                    "value_pointer": 3,
                    "value_ptr": 1
                },
                "param_2": {
                    "array_length": 1,
                    "increment": 1,
                    "index": 10,
                    "length": 1,
                    "new_value": 4,
                    "num_elements": 1,
                    "number": 1,
                    "param_value": 2,
                    "size": 3,
                    "value": 6,
                    "value_to_add": 1
                },
                "param_3": {
                    "arg1": 3,
                    "extra_param1": 1,
                    "param": 3,
                    "param1": 4,
                    "param3": 6,
                    "param_3": 4,
                    "param_a": 1,
                    "undefined4_param_3": 1,
                    "unknown1": 1,
                    "val1": 1,
                    "value1": 6
                },
                "param_4": {
                    "arg2": 3,
                    "extra_param2": 1,
                    "flag": 1,
                    "param2": 5,
                    "param4": 6,
                    "param_4": 4,
                    "param_b": 1,
                    "status": 1,
                    "undefined4_param_4": 1,
                    "unknown2": 1,
                    "val2": 1,
                    "value2": 6
                }
            },
            "called": [
                "FUN_000825a0"
            ],
            "calling": [
                "FUN_0008163a"
            ],
            "code": "\nint update_array_element_00081622(int *array,int index,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_000825a0(*array,index + 1,value1,value2,value2);\n  if (result != 0) {\n    *array = result;\n    array[1] = index;\n    result = 1;\n  }\n  return result;\n}\n\n",
            "current_name": "update_array_element_00081622",
            "entrypoint": "0x00081622",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081622": "update_array_element_00081622",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "index",
                "param_3": "value1",
                "param_4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008163a": {
            "additional_data": {
                "FUN_00081622": {
                    "calculate_something": 1,
                    "process_param": 1,
                    "process_parameter": 1
                },
                "FUN_0008163a": {
                    "check_and_initialize": 1,
                    "check_and_initialize_pointer": 1,
                    "check_and_reset_value": 1,
                    "check_and_set_pointer": 1,
                    "check_and_update": 1,
                    "check_and_update_data": 2,
                    "check_and_update_param": 3,
                    "check_and_update_parameter": 1,
                    "check_and_update_parameters": 1,
                    "check_and_update_params": 1,
                    "check_and_update_value": 8,
                    "check_and_update_values": 1,
                    "check_condition_and_modify": 1,
                    "check_condition_and_update": 1,
                    "check_parameter_validity": 1,
                    "check_params": 1,
                    "check_validity": 4,
                    "is_valid_data": 1
                },
                "iVar1": {
                    "result": 30,
                    "return_value": 1
                },
                "param_1": {
                    "array": 7,
                    "data": 3,
                    "input_array": 2,
                    "input_ptr": 1,
                    "param": 1,
                    "param_array": 1,
                    "parameter": 1,
                    "parameter_array": 1,
                    "parameters": 1,
                    "params": 1,
                    "pointer": 1,
                    "status_array": 1,
                    "value_array": 7,
                    "value_ptr": 1,
                    "values": 1
                },
                "param_2": {
                    "check_value": 1,
                    "desired_value": 1,
                    "given_value": 1,
                    "input_value": 1,
                    "limit": 1,
                    "max_value": 1,
                    "size": 1,
                    "target_value": 1,
                    "threshold": 20,
                    "value": 3
                },
                "param_3": {
                    "unused_param": 1,
                    "unused_param1": 1
                },
                "param_4": {
                    "unused_param2": 2
                }
            },
            "called": [
                "FUN_00081622"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nundefined4 check_and_update_value_0008163a(int *array,uint threshold)\n\n{\n  int result;\n  \n  if ((*array == 0) || ((uint)array[1] < threshold)) {\n    result = FUN_00081622(array);\n    if (result == 0) {\n      return 0;\n    }\n    if (array[2] == 0) {\n      *(undefined *)*array = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_update_value_0008163a",
            "entrypoint": "0x0008163a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008163a": "check_and_update_value_0008163a",
                "iVar1": "result",
                "param_1": "array",
                "param_2": "threshold"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008165c": {
            "additional_data": {
                "FUN_0008160c": {
                    "clean_up": 1,
                    "cleanup": 1,
                    "cleanup_data": 1,
                    "cleanup_data_buffer": 1,
                    "cleanup_input": 1,
                    "cleanup_result": 1,
                    "clear_param": 1,
                    "clear_parameter": 1,
                    "free_memory": 1,
                    "handle_failure": 1,
                    "reset_array": 1,
                    "reset_array_value": 1,
                    "reset_param": 2,
                    "reset_parameter": 4
                },
                "FUN_0008163a": {
                    "check_and_update": 1,
                    "check_array_value": 1,
                    "check_condition": 2,
                    "check_data_validity": 1,
                    "check_function": 1,
                    "check_param": 1,
                    "check_result": 3,
                    "check_validity": 1,
                    "check_value": 4,
                    "validate_data": 2,
                    "validate_input": 1
                },
                "FUN_0008165c": {
                    "check_and_handle_result": 1,
                    "check_and_process_data": 2,
                    "check_and_update_data": 1,
                    "check_and_update_parameter": 1,
                    "execute_function": 1,
                    "handle_result": 2,
                    "process_data": 3,
                    "update_data": 2,
                    "update_information": 1,
                    "update_param": 4,
                    "update_parameter": 6,
                    "update_parameters": 1,
                    "update_value_if_needed": 1,
                    "validate_and_execute": 1,
                    "validate_and_process_data": 3,
                    "verify_and_process": 1
                },
                "FUN_00082994": {
                    "apply_update": 1,
                    "copy_values": 1,
                    "execute_operation": 1,
                    "handle_result": 1,
                    "handle_success": 1,
                    "process_data": 3,
                    "process_result": 1,
                    "update_array": 1,
                    "update_data": 1,
                    "update_value": 1,
                    "update_values": 3
                },
                "iVar1": {
                    "check_result": 1,
                    "is_valid": 1,
                    "result": 23,
                    "result_check": 1,
                    "result_code": 1,
                    "validation_result": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 6,
                    "data_array": 2,
                    "data_buffer": 1,
                    "function_args": 1,
                    "information": 1,
                    "input_array": 2,
                    "output_array": 1,
                    "output_data": 1,
                    "param_array": 5,
                    "parameter": 1,
                    "parameter_array": 3,
                    "parameter_list": 1,
                    "parameters": 2,
                    "result": 1,
                    "result_array": 2
                },
                "param_2": {
                    "config_param": 1,
                    "data": 1,
                    "input1": 1,
                    "input_data_1": 1,
                    "input_value1": 1,
                    "new_value": 4,
                    "param": 2,
                    "param1": 1,
                    "param_a": 1,
                    "param_arg": 1,
                    "param_value": 1,
                    "source_param": 1,
                    "value": 3,
                    "value1": 10,
                    "value_1": 1,
                    "variable1": 1
                },
                "param_3": {
                    "existing_value": 1,
                    "extra_information": 1,
                    "extra_param": 1,
                    "input": 1,
                    "input2": 1,
                    "input_data_2": 1,
                    "input_value2": 1,
                    "new_param": 1,
                    "new_parameter": 1,
                    "param2": 1,
                    "param_b": 1,
                    "param_index": 1,
                    "replacement_value": 1,
                    "target_param": 1,
                    "updated_value": 1,
                    "value": 2,
                    "value2": 10,
                    "value_2": 1,
                    "value_arg": 1,
                    "value_to_check": 1,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_00082994",
                "FUN_0008160c",
                "FUN_0008163a"
            ],
            "calling": [
                "FUN_00081682"
            ],
            "code": "\nundefined4 * check_and_update_parameter_0008165c(undefined4 *data,undefined4 value1,undefined4 value2)\n\n{\n  int result;\n  \n  result = FUN_0008163a(data,value2);\n  if (result == 0) {\n    FUN_0008160c(data);\n  }\n  else {\n    data[2] = value2;\n    FUN_00082994(*data,value1);\n  }\n  return data;\n}\n\n",
            "current_name": "check_and_update_parameter_0008165c",
            "entrypoint": "0x0008165c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008165c": "check_and_update_parameter_0008165c",
                "iVar1": "result",
                "param_1": "data",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081682": {
            "additional_data": {
                "FUN_0008165c": {
                    "assign_values": 1,
                    "assign_values_to_parameters": 1,
                    "copy_values": 1,
                    "initialize_param_with_initial_value": 1,
                    "populate_buffer": 1,
                    "populate_param_array": 1,
                    "process_data": 2,
                    "set_array_values": 1,
                    "set_param_values": 1,
                    "update_array": 2,
                    "update_data": 7,
                    "update_param": 1,
                    "update_param_array": 3,
                    "update_parameters": 2,
                    "update_params": 1
                },
                "FUN_00081682": {
                    "initialize_array": 3,
                    "initialize_buffer": 1,
                    "initialize_data": 8,
                    "initialize_data_structure": 1,
                    "initialize_param": 5,
                    "initialize_param1": 1,
                    "initialize_param_array": 6,
                    "initialize_parameter_array": 1,
                    "initialize_parameters": 4,
                    "initialize_params": 1
                },
                "FUN_00082a50": {
                    "calculate": 1,
                    "calculate_return_value": 1,
                    "calculate_value": 14,
                    "compute_value": 1,
                    "get_init_value": 1,
                    "get_initial_value": 1,
                    "get_input_value": 2,
                    "get_processed_value": 1,
                    "get_value": 3,
                    "process_input": 1
                },
                "param_1": {
                    "array": 3,
                    "buffer": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_pointer": 5,
                    "data_structure": 1,
                    "output": 1,
                    "output_array": 4,
                    "output_data": 1,
                    "output_params": 1,
                    "param_array": 10,
                    "params": 1,
                    "result_array": 1
                },
                "param_2": {
                    "input": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_size": 1,
                    "input_value": 16,
                    "length": 1,
                    "param_size": 1,
                    "size": 6,
                    "value": 2
                },
                "uVar1": {
                    "result": 12,
                    "return_value": 4
                }
            },
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 * initialize_param_array_00081682(undefined4 *param_array,int input_value)\n\n{\n  undefined4 result;\n  \n  *param_array = 0;\n  param_array[1] = 0;\n  param_array[2] = 0;\n  if (input_value != 0) {\n    result = FUN_00082a50(input_value);\n    FUN_0008165c(param_array,input_value,result);\n  }\n  return param_array;\n}\n\n",
            "current_name": "initialize_param_array_00081682",
            "entrypoint": "0x00081682",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081682": "initialize_param_array_00081682",
                "param_1": "param_array",
                "param_2": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816a6": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000816a6",
            "entrypoint": "0x000816a6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000816a8": {
            "additional_data": {
                "FUNC_0008120c": {
                    "configure": 2,
                    "enable_feature": 1,
                    "initialize4": 1,
                    "set_configuration": 1,
                    "set_flag": 6,
                    "set_mode": 19,
                    "set_timer": 1
                },
                "FUNC_000816a6": {
                    "additional_setup": 1,
                    "cleanup": 1,
                    "configure": 2,
                    "configure_component": 1,
                    "configure_settings": 8,
                    "configure_system": 3,
                    "execute_preparation": 1,
                    "execute_task": 1,
                    "initialize3": 1,
                    "initialize_resources": 1,
                    "initialize_subsystem": 1,
                    "perform_initialization": 2,
                    "perform_setup": 3,
                    "pre_process": 1,
                    "setup_configuration": 1,
                    "setup_connections": 1,
                    "setup_hardware": 1,
                    "setup_networking": 1
                },
                "FUN_000804a8": {
                    "check_status": 1,
                    "do_something": 1,
                    "execute_task": 1,
                    "fetch_data": 1,
                    "get_configuration": 2,
                    "get_information": 2,
                    "get_initial_value": 1,
                    "get_resource": 1,
                    "get_result": 4,
                    "get_results": 1,
                    "get_return_value": 1,
                    "get_settings": 1,
                    "get_system_status": 2,
                    "get_system_time": 1,
                    "initialize_memory": 1,
                    "open_connection": 1,
                    "perform_initial_setup": 1,
                    "perform_initialization": 2,
                    "perform_operation": 1,
                    "perform_task": 1,
                    "retrieve_data": 3,
                    "reverse_data": 1
                },
                "FUN_000805d0": {
                    "do_something": 1,
                    "execute_operation": 1,
                    "execute_step": 1,
                    "execute_task": 1,
                    "fetch_data": 1,
                    "perform_action1": 4,
                    "perform_action_a": 1,
                    "perform_operation1": 1,
                    "perform_task": 2,
                    "perform_task1": 8,
                    "perform_task_a": 2,
                    "process_a": 1,
                    "process_data": 3,
                    "send_data": 1,
                    "update_data": 2,
                    "wait_for_event": 1
                },
                "FUN_00080ae4": {
                    "configure": 2,
                    "configure_device": 1,
                    "configure_settings": 4,
                    "do_initial_setup": 1,
                    "initialize": 1,
                    "initialize2": 1,
                    "initialize_components": 7,
                    "initialize_devices": 1,
                    "initialize_hardware": 1,
                    "initialize_modules": 2,
                    "initialize_system": 2,
                    "load_configuration": 1,
                    "load_data": 1,
                    "perform_action": 1,
                    "perform_initialization": 2,
                    "perform_pre_checks": 1,
                    "setup": 1,
                    "setup_environment": 1
                },
                "FUN_00080ce0": {
                    "execute_action": 1,
                    "handle_interrupt": 1,
                    "perform_action": 2,
                    "perform_action2": 4,
                    "perform_action_b": 1,
                    "perform_operation": 1,
                    "perform_operation2": 1,
                    "perform_task": 1,
                    "perform_task2": 8,
                    "perform_task_b": 2,
                    "process_b": 1,
                    "process_data": 6,
                    "process_event": 1,
                    "update_state": 1
                },
                "FUN_000816a8": {
                    "do_infinite_loop": 1,
                    "execute_endless_loop": 1,
                    "execute_function_loop": 1,
                    "execute_infinite_loop": 2,
                    "execute_loop": 1,
                    "execute_main_loop": 1,
                    "execute_reversal": 1,
                    "initialize_system": 2,
                    "main_function": 2,
                    "main_loop": 4,
                    "process_data": 1,
                    "run_application": 1,
                    "run_continuous_loop": 1,
                    "run_forever": 1,
                    "run_infinite_loop": 3,
                    "run_loop": 3,
                    "run_main_loop": 5
                },
                "FUN_000816d4": {
                    "configure_hardware": 1,
                    "init_resources": 1,
                    "initialize": 8,
                    "initialize1": 1,
                    "initialize_component": 2,
                    "initialize_data": 2,
                    "initialize_network": 1,
                    "initialize_subsystem": 2,
                    "initialize_system": 11,
                    "setup_environment": 1
                }
            },
            "called": [
                "FUN_000805d0",
                "FUN_00080ce0",
                "FUN_000816d4",
                "FUN_0008120c",
                "FUN_00080ae4",
                "FUN_000816a6",
                "FUN_000804a8"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nvoid run_main_loop_000816a8(void)\n\n{\n  FUN_000816d4();\n  FUN_00080ae4();\n  FUNC_000816a6();\n  FUNC_0008120c(1);\n  FUN_000804a8();\n  do {\n    FUN_000805d0();\n    FUN_00080ce0();\n  } while( true );\n}\n\n",
            "current_name": "run_main_loop_000816a8",
            "entrypoint": "0x000816a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816a8": "run_main_loop_000816a8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d4": {
            "additional_data": {
                "": {
                    "": 2
                },
                "DAT_400e1a54": {
                    "data_value": 2
                },
                "FUN_000816d4": {
                    "initialize_data": 15,
                    "initialize_data_segment": 1,
                    "initialize_flag": 1,
                    "initialize_memory": 9,
                    "initialize_memory_address": 1,
                    "initialize_memory_offset": 1,
                    "initialize_value": 1,
                    "set_default_value": 1,
                    "set_initial_value": 1
                },
                "_DAT_400e1a54": {
                    "address_to_initialize": 1,
                    "base_address": 1,
                    "data_address": 1,
                    "data_flag": 1,
                    "data_pointer": 2,
                    "data_register": 1,
                    "data_start": 1,
                    "data_value": 3,
                    "data_variable": 1,
                    "default_data": 1,
                    "default_flag": 1,
                    "flag_value": 1,
                    "initial_value": 2,
                    "memory_address": 7,
                    "memory_offset": 1,
                    "memory_size": 1,
                    "memory_value": 1,
                    "output_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_data_segment_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_data_segment_000816d4",
            "entrypoint": "0x000816d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d4": "initialize_data_segment_000816d4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081714": {
            "additional_data": {
                "DAT_20071184": {
                    "data": 6,
                    "data_address": 1,
                    "data_value": 2,
                    "global_data": 2,
                    "global_value": 2,
                    "global_variable": 3,
                    "global_variable_value": 2
                },
                "DLL_20071184": {
                    "global_variable": 1
                },
                "FUN_00081714": {
                    "get_dat_value": 1,
                    "get_data": 7,
                    "get_data_address": 1,
                    "get_data_value": 9,
                    "get_global_data": 2,
                    "get_global_data_value": 1,
                    "get_global_value": 2,
                    "get_global_variable": 5,
                    "get_global_variable_value": 3
                }
            },
            "called": [],
            "calling": [
                "thunk_FUN_00081714"
            ],
            "code": "\nundefined4 get_global_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "get_global_data_value_00081714",
            "entrypoint": "0x00081714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081714": "get_global_data_value_00081714"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081730": {
            "additional_data": {
                "FUN_00081730": {
                    "apply_bitwise_operations": 1,
                    "bitwise_arithmetic": 1,
                    "calculate": 1,
                    "calculate_float": 9,
                    "calculate_floating_point": 4,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_result": 1,
                    "calculate_floating_point_value": 1,
                    "calculate_next_value": 1,
                    "compute_floating_point": 1,
                    "perform_arithmetic_operation": 2,
                    "perform_calculation": 2,
                    "reverse_binary": 1,
                    "reverse_bits": 2,
                    "reverse_bitwise_operation": 1
                },
                "bVar8": {
                    "flag": 1,
                    "is_case1": 1,
                    "is_comparison_true": 1,
                    "is_condition_met": 4,
                    "is_condition_true": 2,
                    "is_equal": 13,
                    "is_flag_set": 1,
                    "is_true": 3,
                    "is_zero": 4,
                    "is_zero_shifted_mantissa_bits_a": 1
                },
                "iVar1": {
                    "bit_shifted_input1": 1,
                    "bit_shifted_value": 1,
                    "exponent_shift": 1,
                    "high_bit1": 1,
                    "integer_part": 1,
                    "msb_input": 1,
                    "msb_value": 1,
                    "shift_amount": 3,
                    "shift_amount1": 1,
                    "shifted_a": 1,
                    "shifted_input1": 8,
                    "shifted_input1_msb": 1,
                    "shifted_input1_sign": 1,
                    "shifted_input1_signed": 1,
                    "shifted_input_value": 1,
                    "shifted_mantissa_bits_a": 1,
                    "shifted_operand1": 2,
                    "shifted_result": 1,
                    "signed_shifted_input1": 1
                },
                "iVar2": {
                    "bit_shifted_input2": 1,
                    "bit_shifted_value2": 1,
                    "exponent_part": 1,
                    "high_bit2": 1,
                    "msb_flag": 1,
                    "second_msb_value": 1,
                    "shift_amount2": 2,
                    "shift_amount_2": 1,
                    "shifted_b": 1,
                    "shifted_input2": 9,
                    "shifted_input2_sign": 1,
                    "shifted_input2_signed": 1,
                    "shifted_mantissa": 1,
                    "shifted_mantissa_bits_b": 1,
                    "shifted_mask_value": 1,
                    "shifted_operand2": 2,
                    "shifted_param2": 1,
                    "shifted_result_msb": 1,
                    "signed_double_shifted_input2": 1
                },
                "param_1": {
                    "exponent_bits": 1,
                    "exponent_bits_a": 1,
                    "input": 1,
                    "input1": 18,
                    "input_a": 1,
                    "input_value": 4,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "integer_value": 1,
                    "operand1": 2
                },
                "param_2": {
                    "bit_pattern": 1,
                    "control_bit": 1,
                    "flag": 1,
                    "input2": 18,
                    "input_b": 1,
                    "input_bits": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "magic_number": 1,
                    "mantissa_bits": 1,
                    "mantissa_bits_a": 1,
                    "mask_value": 1,
                    "operand2": 2
                },
                "param_3": {
                    "argument3": 1,
                    "constant_value1": 1,
                    "flag": 1,
                    "input3": 15,
                    "input_c": 1,
                    "input_value3": 1,
                    "input_value_3": 1,
                    "mask": 1,
                    "operand3": 1,
                    "param3": 1,
                    "parameter": 1,
                    "parameter3": 1,
                    "scale_factor": 1,
                    "sign_bit": 1,
                    "sign_bit_a": 1,
                    "unused": 1,
                    "value": 1
                },
                "param_4": {
                    "argument4": 1,
                    "constant_value2": 1,
                    "exponent": 1,
                    "exponent_bits_b": 1,
                    "input4": 15,
                    "input_d": 1,
                    "input_value4": 1,
                    "input_value_4": 1,
                    "mask": 1,
                    "operand4": 1,
                    "output_value": 1,
                    "param4": 1,
                    "parameter4": 1,
                    "result": 2,
                    "rounding_mode": 1,
                    "shifted_value": 1
                },
                "uVar3": {
                    "complement_input2": 1,
                    "flipped_bit_value": 1,
                    "flipped_control_bit": 1,
                    "flipped_input": 1,
                    "flipped_input2": 3,
                    "flipped_sign_bit_a": 1,
                    "input1_xor": 1,
                    "input2_negated": 1,
                    "mantissa_part": 1,
                    "modified_input2": 1,
                    "negated_mantissa_bits": 1,
                    "output1": 1,
                    "result": 1,
                    "result1": 3,
                    "result_a": 1,
                    "temp1": 3,
                    "temp_var": 1,
                    "temp_var1": 3,
                    "xor_result": 1,
                    "xor_result1": 1,
                    "xored_input2": 3
                },
                "uVar4": {
                    "complement_input1": 1,
                    "flipped_input1": 2,
                    "flipped_sign_bit_b": 1,
                    "flipped_value": 1,
                    "normalized_mantissa_bits": 1,
                    "normalized_mantissa_part": 1,
                    "output2": 1,
                    "result1": 1,
                    "result2": 3,
                    "result_b": 1,
                    "shifted_input2": 2,
                    "shifted_xor": 1,
                    "temp2": 3,
                    "temp_input1": 1,
                    "temp_value": 2,
                    "temp_value1": 1,
                    "temp_var1": 2,
                    "temp_var2": 2,
                    "temp_var5": 1,
                    "temp_var_2": 1,
                    "xor_result2": 1,
                    "xored_input1": 1
                },
                "uVar5": {
                    "bit_pattern": 1,
                    "exponent_bits_c": 1,
                    "modified_operand1": 1,
                    "output": 1,
                    "result": 3,
                    "result1": 2,
                    "result_var1": 1,
                    "shifted_exponent_bits": 1,
                    "shifted_input": 1,
                    "shifted_input1": 7,
                    "shifted_input_value": 1,
                    "shifted_input_value_remapped": 1,
                    "shifted_result1": 1,
                    "temp1": 3,
                    "temp_input1_shifted": 1,
                    "temp_value2": 1,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "tmp_a": 1
                },
                "uVar6": {
                    "adjusted_input1": 1,
                    "adjusted_shifted_input1": 1,
                    "exponent_difference": 1,
                    "extra_bits": 1,
                    "loop_counter": 1,
                    "modified_operand2": 1,
                    "modified_shift_amount": 1,
                    "result": 1,
                    "result2": 2,
                    "result_var2": 1,
                    "shift": 1,
                    "shifted_exponent_bits_minus_one": 1,
                    "shifted_input1_plus_diff": 1,
                    "shifted_input1_saved": 1,
                    "shifted_mask_value_remapped": 1,
                    "shifted_msb": 1,
                    "shifted_result": 1,
                    "shifting_counter": 1,
                    "sum_shifted_result1": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "tmp_b": 1
                },
                "uVar7": {
                    "diff": 2,
                    "diff_value": 1,
                    "difference": 17,
                    "difference_shifted_results": 1,
                    "exponent_difference": 1,
                    "exponent_difference_abs": 1,
                    "shifted_difference": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_value4": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "tmp_c": 1
                },
                "uVar8": {
                    "result": 1
                },
                "uVar9": {
                    "temp": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint temp1;\n  uint temp2;\n  uint shifted_input1;\n  uint temp2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  shifted_input1 = input1 << 1;\n  is_equal = shifted_input1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = shifted_input1 == input4;\n  }\n  shifted_input1 = (int)shifted_input1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      shifted_input1 = temp1;\n      if (shifted_input1 == -1) {\n        shifted_input1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        temp1 = shifted_input1;\n      }\n      is_equal = (shifted_input1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = shifted_input1 == temp1;\n      }\n      if (!is_equal) {\n        shifted_input1 = shifted_input1 | 0x400000;\n      }\n      return shifted_input1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (shifted_input1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((shifted_input1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (shifted_input1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  shifted_input1 = shifted_input1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - shifted_input1;\n  is_equal = difference != 0;\n  temp2 = shifted_input1;\n  if (is_equal && shifted_input1 <= input4) {\n    temp2 = shifted_input1 + difference;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && shifted_input1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < shifted_input1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  shifted_input1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    shifted_input1 = -shifted_input1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (temp2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (temp2 == 0) {\n      shifted_input1 = shifted_input1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  shifted_input1 = shifted_input1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = shifted_input1 & 0x80000000;\n  if ((int)shifted_input1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    shifted_input1 = -shifted_input1 - (uint)is_equal;\n  }\n  if (shifted_input1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    shifted_input1 = shifted_input1 * 2 + (uint)(temp1 != 0);\n    temp1 = temp2 - 2;\n    if ((shifted_input1 & 0x800000) == 0) {\n      difference = LZCOUNT(shifted_input1) - 8;\n      shifted_input1 = shifted_input1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        shifted_input1 = shifted_input1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        shifted_input1 = shifted_input1 + (temp1 - difference) * 0x800000;\n      }\n      return shifted_input1 | input1;\n    }\n  }\n  else {\n    temp1 = temp2 - 1;\n    if (0xffffff < shifted_input1) {\n      temp1 = shifted_input1 & 1;\n      shifted_input1 = shifted_input1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  shifted_input1 = shifted_input1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    shifted_input1 = shifted_input1 & 0xfffffffe;\n  }\n  return shifted_input1 | input1;\n}\n\n",
            "current_name": "calculate_float_00081730",
            "entrypoint": "0x00081730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081730": "calculate_float_00081730",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "shifted_input1",
                "uVar6": "temp2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081734": {
            "additional_data": {
                "FUN_00081734": {
                    "binary_multiplication": 1,
                    "calculate_float": 9,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_value": 1,
                    "compute_float": 1,
                    "fix_floating_point_number": 1,
                    "float_to_binary": 1,
                    "normalize_float": 1,
                    "process_numbers": 2,
                    "reverse_and_shift": 1,
                    "reverse_bits_and_operate": 1,
                    "reverse_float": 2,
                    "reverse_float_bits": 1,
                    "reverse_integer": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 4,
                    "leading_zeros_count": 1
                },
                "bVar7": {
                    "flag": 1,
                    "is_condition_met": 1,
                    "is_equal": 10,
                    "is_equal_zero": 1,
                    "is_same_shifted_input": 1,
                    "is_zero": 16,
                    "is_zero_shift": 1
                },
                "iVar1": {
                    "left_shifted_input1": 1,
                    "shift1": 4,
                    "shift_a": 1,
                    "shift_amount": 1,
                    "shift_amount1": 3,
                    "shift_bits": 1,
                    "shift_right_amount": 1,
                    "shifted_a": 1,
                    "shifted_float1": 1,
                    "shifted_input1": 7,
                    "shifted_input1_msb": 1,
                    "shifted_input_1": 1,
                    "shifted_sign_1": 1,
                    "shifted_value": 2,
                    "shifted_value1": 2,
                    "sign_u_var4": 1
                },
                "iVar2": {
                    "left_shifted_input2": 1,
                    "second_shift_amount": 1,
                    "second_shift_bits": 1,
                    "shift2": 4,
                    "shift_amount2": 3,
                    "shift_right_amount2": 1,
                    "shift_t": 1,
                    "shifted_b": 1,
                    "shifted_float2": 1,
                    "shifted_input2": 8,
                    "shifted_input2_msb": 1,
                    "shifted_input_2": 1,
                    "shifted_sign_2": 1,
                    "shifted_value2": 3,
                    "sign_u_var6": 1
                },
                "param_1": {
                    "float1": 3,
                    "input1": 17,
                    "input_1": 1,
                    "input_a": 2,
                    "input_float1": 1,
                    "input_value1": 1,
                    "num1": 1,
                    "operand1": 1,
                    "original_value": 1,
                    "output": 1,
                    "value1": 2
                },
                "param_1_floatSum": {
                    "float_sum": 1
                },
                "param_2": {
                    "float2": 3,
                    "input2": 17,
                    "input_2": 1,
                    "input_b": 2,
                    "input_float2": 1,
                    "input_value2": 1,
                    "new_input2": 1,
                    "new_value": 1,
                    "num2": 1,
                    "operand2": 1,
                    "value2": 2
                },
                "param_3": {
                    "constant1": 1,
                    "float3": 1,
                    "input3": 9,
                    "input_c": 1,
                    "input_flag": 2,
                    "input_int1": 1,
                    "length": 1,
                    "mode": 1,
                    "modifier": 1,
                    "param3": 6,
                    "parameter3": 3,
                    "shift_amount": 1,
                    "unknown": 1,
                    "unused_param": 1,
                    "unused_parameter": 1
                },
                "param_4": {
                    "comparison": 1,
                    "comparison_value": 1,
                    "constant2": 1,
                    "float3": 1,
                    "float4": 1,
                    "input3": 1,
                    "input4": 9,
                    "input_ctrl": 1,
                    "input_d": 1,
                    "input_int2": 1,
                    "input_result": 1,
                    "mask": 1,
                    "param4": 6,
                    "parameter4": 2,
                    "result": 2,
                    "unused_parameter2": 1
                },
                "uVar1": {
                    "input1_shifted": 1
                },
                "uVar2": {
                    "input2_shifted": 1
                },
                "uVar3": {
                    "bitwise_or_result": 1,
                    "float1_part": 1,
                    "fraction_part1": 1,
                    "input1_bits": 1,
                    "input1_normalized": 1,
                    "mant_a": 1,
                    "mantissa1": 2,
                    "mask": 1,
                    "mask1": 1,
                    "modified_value1": 1,
                    "new_shifted_input2_with_exponent": 1,
                    "normalized1": 1,
                    "normalized_float1": 1,
                    "output": 1,
                    "positive_mask": 1,
                    "result": 4,
                    "result1": 6,
                    "result_a": 1,
                    "shifted_output_1": 1,
                    "temp1": 1,
                    "whole_part1": 1
                },
                "uVar3_final": {
                    "final_float_part": 1
                },
                "uVar3_float2": {
                    "float2_part": 1
                },
                "uVar3_floatSum": {
                    "float_sum_part": 1
                },
                "uVar4": {
                    "comparison1": 1,
                    "float1": 1,
                    "float1_shifted": 2,
                    "input1_shifted": 3,
                    "input1_shifted_twice": 1,
                    "input2_normalized": 1,
                    "mant_b": 1,
                    "mantissa2": 1,
                    "modified_input1": 1,
                    "modified_value2": 1,
                    "new_shifted_input1_with_exponent": 1,
                    "normalized2": 1,
                    "normalized_float2": 1,
                    "result": 1,
                    "result1": 1,
                    "result2": 2,
                    "result_b": 1,
                    "shifted_input1": 2,
                    "shifted_output_2": 1,
                    "shifted_result": 1,
                    "shifted_result1": 2,
                    "shifted_value1": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "whole_part2": 1
                },
                "uVar4_final": {
                    "final_float": 1
                },
                "uVar4_float2": {
                    "float2_shifted": 1
                },
                "uVar4_floatSum": {
                    "float_sum_shifted": 1
                },
                "uVar4_shift": {
                    "temp": 1
                },
                "uVar5": {
                    "abs_shift_amount": 1,
                    "comparison2": 1,
                    "count": 2,
                    "count_a": 1,
                    "diff": 2,
                    "difference": 1,
                    "exponent1": 1,
                    "float1_shifted_part": 1,
                    "input1_bits_adjusted": 1,
                    "modified_input2": 1,
                    "modified_value3": 1,
                    "new_shifted_input1_plus_shift": 1,
                    "normalized_result1": 1,
                    "result2": 1,
                    "result3": 1,
                    "shift_amt": 1,
                    "shift_cnt": 1,
                    "shift_count": 2,
                    "shifted": 1,
                    "shifted_amount": 1,
                    "shifted_input2": 1,
                    "shifted_result2": 1,
                    "shifted_value": 1,
                    "shifted_value2": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 1
                },
                "uVar5_float2": {
                    "float2_shifted_part": 1
                },
                "uVar5_shift": {
                    "shifted_part": 1
                },
                "uVar6": {
                    "abs_difference": 1,
                    "comparison3": 1,
                    "count_b": 1,
                    "diff": 2,
                    "diff_shift": 1,
                    "difference": 12,
                    "exponent2": 1,
                    "float2": 1,
                    "float_diff": 1,
                    "modified_value4": 1,
                    "shift_count": 1,
                    "shift_difference": 2,
                    "shifted": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 1
                },
                "uVar6_shift": {
                    "second_shifted_part": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_00081734(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint input1_shifted;\n  uint shift_count;\n  uint difference;\n  bool is_zero;\n  \n  input1_shifted = input1 << 1;\n  is_zero = input1_shifted == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = input1_shifted == input4;\n  }\n  shifted_input1 = (int)input1_shifted >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      input1_shifted = input2;\n      if (shifted_input1 == -1) {\n        input1_shifted = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = input1_shifted;\n      }\n      is_zero = (input1_shifted & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = input1_shifted == input2;\n      }\n      if (!is_zero) {\n        input1_shifted = input1_shifted | 0x400000;\n      }\n      return input1_shifted;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (input1_shifted == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((input1_shifted & 0xff000000) == 0) {\n      input1_shifted = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        input1_shifted = input1_shifted | 0x80000000;\n      }\n      return input1_shifted;\n    }\n    if (input1_shifted < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  input1_shifted = input1_shifted >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - input1_shifted;\n  is_zero = difference != 0;\n  shift_count = input1_shifted;\n  if (is_zero && input1_shifted <= input4) {\n    shift_count = input1_shifted + difference;\n  }\n  if (is_zero && input1_shifted <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && input1_shifted <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && input1_shifted <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < input1_shifted) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  input1_shifted = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    input1_shifted = -input1_shifted;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shift_count == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shift_count == 0) {\n      input1_shifted = input1_shifted ^ 0x800000;\n      shift_count = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  input1_shifted = input1_shifted + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = input1_shifted & 0x80000000;\n  if ((int)input1_shifted < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    input1_shifted = -input1_shifted - (uint)is_zero;\n  }\n  if (input1_shifted < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    input1_shifted = input1_shifted * 2 + (uint)(difference != 0);\n    difference = shift_count - 2;\n    if ((input1_shifted & 0x800000) == 0) {\n      shift_count = leading_zero_count(input1_shifted) - 8;\n      input1_shifted = input1_shifted << (shift_count & 0xff);\n      if ((int)difference < (int)shift_count) {\n        input1_shifted = input1_shifted >> (-(difference - shift_count) & 0xff);\n      }\n      else {\n        input1_shifted = input1_shifted + (difference - shift_count) * 0x800000;\n      }\n      return input1_shifted | input1;\n    }\n  }\n  else {\n    difference = shift_count - 1;\n    if (0xffffff < input1_shifted) {\n      difference = input1_shifted & 1;\n      input1_shifted = input1_shifted >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shift_count;\n      if (0xfd < shift_count) goto LAB_0008186a;\n    }\n  }\n  input1_shifted = input1_shifted + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    input1_shifted = input1_shifted & 0xfffffffe;\n  }\n  return input1_shifted | input1;\n}\n\n",
            "current_name": "calculate_float_00081734",
            "entrypoint": "0x00081734",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081734": "calculate_float_00081734",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "input1_shifted",
                "uVar5": "shift_count",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081894": {
            "additional_data": {
                "FUN_00081894": {
                    "calculate": 1,
                    "calculate_checksum": 1,
                    "calculate_hash": 2,
                    "calculate_new_value": 2,
                    "calculate_result": 2,
                    "calculate_value": 2,
                    "calculate_x": 1,
                    "compute_value": 1,
                    "convert_to_unsigned": 1,
                    "count_bits": 1,
                    "count_bits_and_calculate_result": 1,
                    "count_leading_zeros": 6,
                    "decode_integer": 2,
                    "reverse_bits": 6
                },
                "iVar3": {
                    "addition_value": 1,
                    "base_value": 3,
                    "calculation_result": 1,
                    "constant": 9,
                    "constant1": 2,
                    "constant_1": 1,
                    "constant_term": 2,
                    "constant_value": 2,
                    "intermediate_result": 2,
                    "magic_value": 1,
                    "offset": 5,
                    "shifted_result": 1
                },
                "iVar3_new": {
                    "computed_value": 1,
                    "intermediate_result_minus_offset": 1
                },
                "param_1": {
                    "input": 14,
                    "input_number": 3,
                    "input_value": 13
                },
                "uVar1": {
                    "bits_count": 1,
                    "final_result": 2,
                    "leading_zeroes": 5,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 14,
                    "num_bits": 1,
                    "num_leading_zeros": 1,
                    "output": 1,
                    "result": 4
                },
                "uVar1_2ff": {
                    "shift_amount_inverse_mod": 1
                },
                "uVar1_7f": {
                    "overflow_check": 1
                },
                "uVar1_end": {
                    "final_result": 1
                },
                "uVar1_even": {
                    "check_for_even": 1
                },
                "uVar1_final": {
                    "leading_zeroes_count_final": 1
                },
                "uVar1_masked": {
                    "leading_zeroes_count_masked": 1
                },
                "uVar1_modified": {
                    "leading_zeroes_count_modified": 1
                },
                "uVar1_new": {
                    "leading_zeroes_count_minus8": 1,
                    "leading_zeros_minus_eight": 1
                },
                "uVar1_new2": {
                    "leading_zeros_minus_eight_shifted": 1
                },
                "uVar1_shifted": {
                    "input_shifted": 1,
                    "leading_zeroes_count_shifted": 1
                },
                "uVar1_shifted_extended": {
                    "input_shifted_extended": 1
                },
                "uVar1_sign_extended": {
                    "input_sign_extended": 1
                },
                "uVar2": {
                    "masked_shifted_input": 1,
                    "shift": 3,
                    "shift_amount": 18,
                    "shift_val": 1,
                    "shift_value": 1,
                    "shifted_bits_count": 1,
                    "shifted_input": 2,
                    "shifted_value": 1,
                    "shifted_zeros": 1,
                    "temp": 1
                },
                "uVar2_2ff": {
                    "shift_amount_mod": 1
                },
                "uVar2_end": {
                    "shifted_value": 1
                },
                "uVar2_final": {
                    "shift_amount_final": 1
                },
                "uVar2_masked": {
                    "shift_amount_masked": 1
                },
                "uVar2_new": {
                    "shift_amount_and_mask": 1,
                    "shift_amount_minus1": 1
                },
                "uVar2_new2": {
                    "shifted_param": 1
                },
                "uVar2_shifted": {
                    "shift_amount_shifted": 1
                },
                "uVar2_temp": {
                    "shift_temp": 1
                },
                "uVar4": {
                    "bit_check": 1,
                    "bit_mask": 2,
                    "carry": 1,
                    "carry_term": 1,
                    "check_value": 4,
                    "comparison_result": 1,
                    "mask": 10,
                    "mask_value": 2,
                    "result": 1,
                    "shifted_zero_flag": 1,
                    "temp_val": 1,
                    "temp_value": 2,
                    "temp_var": 2,
                    "temp_var1": 1
                },
                "uVar4_new": {
                    "check_value_truncated": 1,
                    "mask_check": 1
                },
                "uVar5": {
                    "final_result": 2,
                    "mask": 1,
                    "result": 4,
                    "shifted_output": 1,
                    "temp_var2": 1
                },
                "uVar6": {
                    "result": 1,
                    "shifted_output_crc": 1,
                    "temp_var3": 1
                },
                "uVar7": {
                    "shifted_output_crc_modified": 1,
                    "sign_extend": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint count_bits_and_calculate_result_00081894(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  leading_zeros = constant + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_bits_and_calculate_result_00081894",
            "entrypoint": "0x00081894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081894": "count_bits_and_calculate_result_00081894",
                "iVar3": "constant",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008189c": {
            "additional_data": {
                "0x18": {
                    "shift_constant": 1
                },
                "0x1f": {
                    "bit31_mask": 1
                },
                "0x20": {
                    "bit_width": 1
                },
                "0x4b000000": {
                    "constant1": 1
                },
                "0x7fffffff": {
                    "max_u_int_value": 1
                },
                "0x800000": {
                    "constant2": 1
                },
                "0x80000000": {
                    "sign_bit_mask": 1
                },
                "0xff": {
                    "bit_mask": 1
                },
                "0xfffffffe": {
                    "clear_sign_bit_mask": 1
                },
                "FUN_0008189c": {
                    "bitwise_reverse": 1,
                    "calculate_absolute_value_and_rescale": 1,
                    "calculate_absolute_value_with_offset": 1,
                    "calculate_bitwise_value": 1,
                    "calculate_inverse": 1,
                    "calculate_magnitude": 1,
                    "calculate_modified_number": 1,
                    "calculate_reverse_bits": 1,
                    "calculate_unsigned_checksum": 1,
                    "calculate_updated_value": 1,
                    "compute_unsigned": 1,
                    "convert_to_positive": 1,
                    "count_bits": 3,
                    "count_bits_and_calculate_result": 1,
                    "count_bits_set": 1,
                    "count_bitwise": 1,
                    "count_leading_zeros": 5,
                    "count_set_bits": 3,
                    "count_trailing_zeros": 1,
                    "find_bit_count": 1,
                    "reverse_and_update_value": 1,
                    "reverse_bitwise_calculation": 1
                },
                "LZCOUNT": {
                    "count_leading_zeroes": 1,
                    "count_leading_zeros": 2,
                    "leading_zeroes_count": 1
                },
                "iVar4": {
                    "base_value": 1,
                    "modified_number": 1,
                    "offset": 1,
                    "result": 24,
                    "result_offset": 1,
                    "scaled_value": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "input": 12,
                    "input_num": 1,
                    "input_number": 3,
                    "input_value": 7,
                    "number": 5,
                    "value": 2
                },
                "uVar1": {
                    "bit_count": 3,
                    "count": 1,
                    "leading_bits": 1,
                    "leading_zero_bits": 1,
                    "leading_zeroes": 1,
                    "leading_zeros": 16,
                    "leading_zeros_count": 1,
                    "num_of_bits": 1,
                    "num_set_bits": 1,
                    "set_bits": 1,
                    "set_bits_count": 1,
                    "shifted_bits": 1,
                    "trailing_zeros": 1
                },
                "uVar1_initial": {
                    "initial_num_set_bits": 1
                },
                "uVar1_shifted": {
                    "shifted_num_set_bits": 1
                },
                "uVar2": {
                    "leading_bits": 1,
                    "shift": 3,
                    "shift_amount": 13,
                    "shift_count": 4,
                    "shift_val": 1,
                    "shift_value": 7,
                    "shifted_input": 1
                },
                "uVar2_clearedMostSignificant": {
                    "cleared_most_significant_bit": 1
                },
                "uVar2_filtered": {
                    "filtered_output2": 1
                },
                "uVar2_masked": {
                    "masked_shift_val": 1
                },
                "uVar2_original": {
                    "original_shift_val": 1
                },
                "uVar2_shiftedBit": {
                    "shifted_bit": 1
                },
                "uVar3": {
                    "is_boundary": 1,
                    "is_negative": 11,
                    "result": 1,
                    "sign_bit": 15,
                    "sign_mask": 1,
                    "temp": 1
                },
                "uVar3_clearedHighBits": {
                    "cleared_high_bits_output": 1
                },
                "uVar3_clearedMostSignificant": {
                    "cleared_most_significant_bit_output": 1
                },
                "uVar3_clearedSetBit": {
                    "cleared_set_bit_sign_bit": 1
                },
                "uVar3_extended": {
                    "extended_sign_bit": 1
                },
                "uVar3_filtered": {
                    "filtered_output": 1
                },
                "uVar3_final": {
                    "final_output": 1
                },
                "uVar3_masked": {
                    "masked_sign_bit": 1
                },
                "uVar3_original": {
                    "original_sign_bit": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint count_bits_set_0008189c(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_bits_set_0008189c",
            "entrypoint": "0x0008189c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008189c": "count_bits_set_0008189c",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081944": {
            "additional_data": {
                "FUN_00081944": {
                    "calculate_float": 5,
                    "calculate_float32": 1,
                    "calculate_float_from_int": 1,
                    "calculate_float_value": 4,
                    "calculate_floating_point": 12,
                    "calculate_floating_point_number": 1,
                    "calculate_floating_point_value": 4,
                    "compute_floating_point": 1,
                    "perform_floating_point_operation": 1
                },
                "bVar10": {
                    "borrow": 1,
                    "check2": 2,
                    "check_2": 1,
                    "check_condition2": 1,
                    "condition": 1,
                    "condition2": 2,
                    "flag2": 2,
                    "is_carry_condition": 1,
                    "is_fault": 1,
                    "is_negative": 11,
                    "is_negative1": 1,
                    "is_negative_diff": 1,
                    "is_negative_exponent1": 2,
                    "is_overflow": 1,
                    "is_zero2": 1,
                    "is_zero_or_ff2": 1,
                    "overflow_flag": 1
                },
                "bVar9": {
                    "check1": 2,
                    "check_1": 1,
                    "check_condition1": 1,
                    "check_zero": 1,
                    "condition1": 2,
                    "flag1": 2,
                    "is_zero": 12,
                    "is_zero1": 3,
                    "is_zero_a": 2,
                    "is_zero_condition": 1,
                    "is_zero_exponent1": 2,
                    "is_zero_or_ff1": 1,
                    "overflow": 1
                },
                "iVar4": {
                    "combined_signs": 1,
                    "exponent_sum": 4,
                    "first_value": 1,
                    "normalized_exponent_sum": 1,
                    "shift_amount": 1,
                    "shift_sum": 1,
                    "shifted_sum": 1,
                    "shifted_values_sum": 1,
                    "sum": 9,
                    "sum1": 1,
                    "sum_exponents": 4,
                    "sum_flag": 1,
                    "sum_high_bytes": 1,
                    "sum_of_inputs_shifted": 1,
                    "sum_of_shifted_values": 1,
                    "temp2": 1,
                    "temp3": 1
                },
                "iVar5": {
                    "adjusted_exponent": 2,
                    "diff": 2,
                    "difference": 6,
                    "exponent_diff": 3,
                    "normalized_exponent_diff": 1,
                    "offset": 1,
                    "overflow_check": 1,
                    "second_value": 1,
                    "shift_amount": 1,
                    "shift_difference": 1,
                    "shift_res": 1,
                    "shifted_exponent_sum": 1,
                    "shifted_sum": 1,
                    "shifted_sum_minus_bias": 1,
                    "shifted_values_diff": 1,
                    "sum2": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var1": 1,
                    "temp_var5": 1
                },
                "iVar7": {
                    "adjusted_exponent_2": 1,
                    "counter": 1,
                    "diff": 2,
                    "diff2": 2,
                    "exponent_diff_abs": 1,
                    "exponent_neg": 1,
                    "loop_counter": 1,
                    "normalized_exponent_diff_temp": 1,
                    "offset2": 1,
                    "overflow_adjustment": 1,
                    "product_difference": 1,
                    "shift": 2,
                    "shift_amount": 1,
                    "shift_amount2": 1,
                    "shift_res2": 1,
                    "shifted_negative_exponent_sum": 1,
                    "shifted_values_difference": 1,
                    "sum3": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_count": 1,
                    "temp_difference": 1,
                    "temp_var2": 1,
                    "temp_var7": 1,
                    "temp_variable": 1
                },
                "lVar1": {
                    "long_value": 2,
                    "multiplication_result_long": 1,
                    "multiply_result": 1,
                    "product": 2,
                    "product64": 1,
                    "temp4": 1,
                    "temp_long_var1": 1
                },
                "param_1": {
                    "bit_pattern_a": 1,
                    "input1": 14,
                    "input_1": 1,
                    "input_a": 2,
                    "input_float1": 1,
                    "input_value1": 1,
                    "number1": 2,
                    "operand1": 2,
                    "value1": 5,
                    "x": 1
                },
                "param_2": {
                    "bit_pattern_b": 1,
                    "input2": 14,
                    "input_2": 1,
                    "input_b": 2,
                    "input_float2": 1,
                    "input_value2": 1,
                    "number2": 2,
                    "operand2": 2,
                    "value2": 5,
                    "y": 1
                },
                "param_3": {
                    "constant1": 1,
                    "flag": 1,
                    "flags": 2,
                    "input_3": 1,
                    "input_c": 1,
                    "input_value3": 1,
                    "optional": 1,
                    "param3": 9,
                    "parameter3": 1,
                    "shift_value": 1,
                    "start_bit": 1,
                    "temp1": 1,
                    "unknown_param": 1,
                    "unused": 4,
                    "unused_param": 1,
                    "value3": 2,
                    "z": 1
                },
                "param_4": {
                    "additional_flags": 1,
                    "constant2": 1,
                    "end_bit": 1,
                    "flag2": 1,
                    "fraction_bit2": 1,
                    "high_byte_input_b": 1,
                    "input3": 1,
                    "input_4": 1,
                    "input_d": 1,
                    "input_value": 1,
                    "input_value4": 1,
                    "lower_bits": 1,
                    "mask_value": 1,
                    "operand2_shift": 1,
                    "optional2": 1,
                    "param4": 7,
                    "parameter4": 1,
                    "shift_amount": 1,
                    "temp2": 1,
                    "unused": 2,
                    "value4": 2,
                    "w": 1
                },
                "uVar2": {
                    "extracted_u_var2": 1,
                    "fraction_bits": 1,
                    "result": 25,
                    "result1": 1,
                    "result_float": 1,
                    "sign_bit": 1,
                    "temp2": 1
                },
                "uVar2Temp": {
                    "temp_result": 1
                },
                "uVar3": {
                    "exponent1": 6,
                    "exponent_a": 2,
                    "exponent_x": 1,
                    "extracted_u_var1": 1,
                    "flag1": 1,
                    "float1_sign": 1,
                    "fraction_bit1": 1,
                    "input1_shifted": 2,
                    "mask1": 1,
                    "mask_1": 1,
                    "num1_shifted": 1,
                    "operand1_shift": 1,
                    "shift": 1,
                    "shift1": 3,
                    "shifted_bits1": 1,
                    "shifted_input1": 1,
                    "shifted_value1": 2,
                    "temp1": 3,
                    "temp_var4": 1
                },
                "uVar3Mask": {
                    "input1_shifted_mask": 1
                },
                "uVar3Shifted": {
                    "input1_shifted_shifted": 1
                },
                "uVar3Temp": {
                    "temp_input1_shifted": 1
                },
                "uVar3Temp2": {
                    "temp_input1_shifted": 1
                },
                "uVar6": {
                    "input1_mult_input2": 1,
                    "lower": 1,
                    "mantissa_product": 1,
                    "mult_result": 1,
                    "multiplication_result": 2,
                    "multiplied_value": 1,
                    "numerator": 1,
                    "product": 6,
                    "product_low": 2,
                    "product_lower": 2,
                    "result": 1,
                    "result2": 1,
                    "result_multiplier": 1,
                    "shifted_bits2": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_result": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var6": 1
                },
                "uVar6Mask": {
                    "input1_mult_input2_mask": 1
                },
                "uVar6Masked": {
                    "input1_mult_input2_masked": 1
                },
                "uVar6Temp": {
                    "temp_input1_mult_input2": 1
                },
                "uVar8": {
                    "altered_input1": 1,
                    "bitwise_or": 1,
                    "combined": 1,
                    "combined_value": 1,
                    "exponent2": 2,
                    "exponent_result": 1,
                    "float_xor": 1,
                    "mantissa": 1,
                    "mantissa_sum": 1,
                    "mask2": 1,
                    "modified_input1": 1,
                    "product_upper": 1,
                    "result": 3,
                    "result3": 1,
                    "result_shift": 1,
                    "result_with_sign_bit": 1,
                    "shifted_result": 1,
                    "sign_and_mantissa_a": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_result": 4,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "temp_var8": 1
                },
                "uVar8Mask": {
                    "modified_input1_mask": 1
                },
                "uVar8Shifted": {
                    "modified_input1_shifted": 1
                },
                "uVar8Temp": {
                    "temp_modified_input1": 1
                },
                "uVar8Temp2": {
                    "temp_modified_input1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_floating_point_value_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong long_value;\n  uint result;\n  uint exponent1;\n  int sum;\n  int difference;\n  uint product;\n  int shift;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  temp_result = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    shift = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,difference);\n      shift = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && shift < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && shift < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(difference,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    exponent1 = temp_result;\n  }\n  else {\n    long_value = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)long_value;\n    result = (uint)((ulonglong)long_value >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    exponent1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == SCARRY4(temp_result,0x19)) {\n      exponent1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        exponent1 = exponent1 & ~(temp_result >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_value_00081944",
            "entrypoint": "0x00081944",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081944": "calculate_floating_point_value_00081944",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "shift",
                "lVar1": "long_value",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "additional_data": {
                "FUN_00081bf4": {
                    "calculate_abs_difference": 1,
                    "calculate_bitwise_result": 1,
                    "calculate_param": 1,
                    "calculate_parameters": 1,
                    "calculate_result": 10,
                    "calculate_xor_bitwise": 1,
                    "check_and_modify_parameters": 1,
                    "check_integer_overflow": 1,
                    "check_overflow": 5,
                    "check_overflow_and_combine": 1,
                    "check_overflow_and_negate": 1,
                    "check_overflow_and_sign": 2,
                    "check_overflow_condition": 1,
                    "multiply_and_check_overflow": 1,
                    "perform_calculation": 1,
                    "validate_parameters": 1
                },
                "bVar1": {
                    "is_combined_negative": 1,
                    "is_less_than_0": 1,
                    "is_negative": 21,
                    "is_negative_difference": 1,
                    "is_negative_merged_input": 1,
                    "is_non_negative": 2,
                    "is_overflow": 1,
                    "is_result_negative": 2,
                    "is_xor_negative": 1
                },
                "bVar5": {
                    "is_combined_input_zero": 1,
                    "is_combined_result_zero": 1,
                    "is_combined_zero": 1,
                    "is_result_zero": 2,
                    "is_zero": 24,
                    "is_zero_difference": 1,
                    "is_zero_merged_input": 1
                },
                "param_1": {
                    "input1": 10,
                    "input_1": 9,
                    "input_number_1": 1,
                    "input_param1": 1,
                    "input_value1": 1,
                    "input_value_1": 3,
                    "num1": 3,
                    "operand1": 1,
                    "result": 2
                },
                "param_1OR1": {
                    "result2": 1
                },
                "param_1ShiftRight31": {
                    "shifted_input1": 1
                },
                "param_1TimesMinus2": {
                    "negative_input1": 1
                },
                "param_1XORparam_2": {
                    "input_xor": 1
                },
                "param_2": {
                    "input2": 10,
                    "input_2": 10,
                    "input_number_2": 1,
                    "input_param2": 1,
                    "input_value2": 1,
                    "input_value_2": 3,
                    "num2": 3,
                    "operand2": 1,
                    "sign_bit": 1
                },
                "param_2ShiftRight31": {
                    "shifted_input2": 1
                },
                "return": {
                    "result": 1
                },
                "returnValue": {
                    "result": 1
                },
                "uVar2": {
                    "double_input1": 3,
                    "double_input_1": 4,
                    "double_num1": 2,
                    "double_value_1": 1,
                    "doubled_input1": 2,
                    "doubled_input_1": 3,
                    "doubled_value1": 1,
                    "input1_doubled": 1,
                    "input1_shifted": 1,
                    "input1_times2": 1,
                    "input1_times_2": 1,
                    "input1_times_two": 1,
                    "input_1_doubled": 2,
                    "input_1_times_two": 1,
                    "input_value_1_times_two": 1,
                    "multiplied_param1": 1,
                    "multiplied_value_1": 1,
                    "num1_doubled": 1,
                    "operand1_doubled": 1,
                    "result_1": 1,
                    "shifted_input_1": 1
                },
                "uVar3": {
                    "double_input2": 3,
                    "double_input_2": 4,
                    "double_num2": 2,
                    "double_value_2": 1,
                    "doubled_input2": 2,
                    "doubled_input_2": 3,
                    "doubled_value2": 1,
                    "input2_doubled": 1,
                    "input2_shifted": 1,
                    "input2_times2": 1,
                    "input2_times_2": 1,
                    "input2_times_two": 1,
                    "input_2_doubled": 2,
                    "input_2_times_two": 1,
                    "input_value_2_times_two": 1,
                    "multiplied_param2": 1,
                    "multiplied_value_2": 1,
                    "num2_doubled": 1,
                    "operand2_doubled": 1,
                    "result_2": 1,
                    "shifted_input_2": 1
                },
                "uVar4": {
                    "bitwise_result": 1,
                    "combined": 2,
                    "combined_input": 4,
                    "combined_input_masked": 1,
                    "combined_inputs": 6,
                    "combined_num": 1,
                    "combined_nums": 2,
                    "combined_result": 2,
                    "combined_value": 2,
                    "combined_values": 1,
                    "merged_input": 1,
                    "modified_input": 1,
                    "modified_result": 1,
                    "modified_value": 1,
                    "result": 1,
                    "result1": 1,
                    "result_1": 1,
                    "result_3": 1,
                    "xor_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081c5c"
            ],
            "code": "\nuint calculate_bitwise_result_00081bf4(uint input1,uint input2)\n\n{\n  bool is_negative;\n  uint double_input_1;\n  uint double_input_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  double_input_1 = input1 * 2;\n  double_input_2 = input2 * 2;\n  if (((int)double_input_1 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)double_input_1 >> 0x18 == -1 && ((input1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = double_input_1 | input2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input1 ^ input2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input1 = double_input_1 + input2 * -2;\n    is_zero = input1 == 0;\n  }\n  if ((is_negative && double_input_2 <= double_input_1) && !is_zero) {\n    input1 = (int)input2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > double_input_1) {\n    input1 = ~((int)input2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input1 = input1 | 1;\n  }\n  result input1;\n}\n\n",
            "current_name": "calculate_bitwise_result_00081bf4",
            "entrypoint": "0x00081bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081bf4": "calculate_bitwise_result_00081bf4",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input1",
                "param_2": "input2",
                "return": "result",
                "uVar2": "double_input_1",
                "uVar3": "double_input_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c54": {
            "additional_data": {
                "FUN_00081c54": {
                    "call_and_return": 1,
                    "call_another_function": 2,
                    "call_other_function": 3,
                    "call_param_functions": 1,
                    "call_sub_function": 4,
                    "call_sub_function_with_params": 1,
                    "call_subroutine": 1,
                    "copy_and_swap_params": 1,
                    "copy_parameters": 3,
                    "copy_params_and_call_other_function": 1,
                    "execute": 1,
                    "execute_function": 5,
                    "execute_main_task": 1,
                    "execute_reverse": 1,
                    "forward_data": 1,
                    "initialize_parameters": 1,
                    "process_parameters": 1,
                    "swap_params": 1
                },
                "FUN_00081c5c": {
                    "call_function": 1,
                    "call_sub_function": 1,
                    "copy_and_return": 1,
                    "execute_sub_function": 2,
                    "execute_sub_task": 1,
                    "forward_data2": 1,
                    "helper_function": 1,
                    "perform_operation": 1,
                    "process_data": 1,
                    "reverse_data": 1
                },
                "param_1": {
                    "arg1": 7,
                    "argument1": 2,
                    "data1": 1,
                    "dest": 1,
                    "destination": 1,
                    "first_param": 1,
                    "function_param1": 1,
                    "input1": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "param1": 4,
                    "param_1": 2,
                    "param_a": 2,
                    "source": 2,
                    "sub_function_param1": 1,
                    "target": 1,
                    "task_param1": 1
                },
                "param_2": {
                    "arg2": 7,
                    "argument2": 2,
                    "data2": 1,
                    "destination": 2,
                    "function_param2": 1,
                    "input2": 2,
                    "output_param": 1,
                    "output_parameter": 1,
                    "param2": 4,
                    "param_2": 2,
                    "param_b": 2,
                    "second_param": 1,
                    "source": 2,
                    "src": 1,
                    "sub_function_param2": 1,
                    "task_param2": 1
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_00081ca8"
            ],
            "code": "\nvoid execute_function_00081c54(undefined4 arg1,undefined4 arg2)\n\n{\n  FUN_00081c5c(arg2,arg1);\n  return;\n}\n\n",
            "current_name": "execute_function_00081c54",
            "entrypoint": "0x00081c54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c54": "execute_function_00081c54",
                "param_1": "arg1",
                "param_2": "arg2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "additional_data": {
                "FUN_00081bf4": {
                    "combine_parameters": 1,
                    "combine_params": 3,
                    "combine_values": 3,
                    "concat_numbers": 1,
                    "concatenate": 1,
                    "concatenate_uint": 1,
                    "concatenate_uints_sub": 1,
                    "concatenate_values": 2,
                    "multiply_integers": 1,
                    "perform_concatenation": 5,
                    "perform_operation": 3,
                    "process_params": 1
                },
                "FUN_00081c5c": {
                    "combine_parameters": 1,
                    "combine_params": 1,
                    "concat_data": 1,
                    "concat_parameters": 1,
                    "concat_params": 2,
                    "concatenate_integers": 1,
                    "concatenate_parameters": 4,
                    "concatenate_params": 17,
                    "concatenate_uints": 1,
                    "concatenate_values": 1,
                    "concatenate_with_parameters": 1
                },
                "param_1": {
                    "first_data": 1,
                    "first_param": 11,
                    "first_parameter": 6,
                    "first_uint": 2,
                    "input_param1": 1,
                    "input_value1": 1,
                    "integer1": 1,
                    "param1": 5,
                    "parameter1": 1,
                    "value1": 2
                },
                "param_2": {
                    "input_param2": 1,
                    "input_value2": 1,
                    "integer2": 1,
                    "param2": 5,
                    "parameter2": 1,
                    "second_data": 1,
                    "second_param": 11,
                    "second_parameter": 6,
                    "second_uint": 2,
                    "value2": 2
                }
            },
            "called": [
                "FUN_00081bf4"
            ],
            "calling": [
                "FUN_00081c94",
                "FUN_00081c54"
            ],
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 first_param,undefined4 second_param)\n\n{\n  FUN_00081bf4();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_00081c5c",
            "entrypoint": "0x00081c5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c94": {
            "additional_data": {
                "FUN_00081c5c": {
                    "do_some_processing": 1,
                    "execute_subfunction": 1,
                    "perform_additional_checks": 1,
                    "perform_operation": 1,
                    "process_data": 1,
                    "process_flags": 1,
                    "process_parameters": 1
                },
                "FUN_00081c94": {
                    "check_carry_and_zero": 1,
                    "check_carry_and_zero_flags": 1,
                    "check_carry_zero": 1,
                    "check_condition": 1,
                    "check_conditions": 4,
                    "check_cy_and_zr": 9,
                    "check_cy_zr": 8,
                    "check_cy_zr_condition": 1,
                    "check_flags": 1,
                    "check_result": 1,
                    "check_zero_or_carry_flag": 1,
                    "is_any_flag_set": 1,
                    "should_execute_operation": 1
                },
                "in_CY": {
                    "carry_bit": 1,
                    "carry_condition": 1,
                    "carry_flag": 15,
                    "carry_flag_set": 1,
                    "carry_set": 1,
                    "has_carry": 1,
                    "is_carry": 2,
                    "is_carry_set": 1,
                    "is_cy": 2,
                    "is_cy_set": 1
                },
                "in_ZR": {
                    "is_zero": 2,
                    "is_zero_flag": 1,
                    "is_zero_result": 2,
                    "is_zr": 2,
                    "is_zr_set": 1,
                    "zero_bit": 1,
                    "zero_condition": 1,
                    "zero_flag": 13,
                    "zero_flag_set": 1,
                    "zero_result": 1,
                    "zero_set": 1
                },
                "param_1": {
                    "data_param_1": 1,
                    "input_param_1": 1,
                    "param_1": 1
                },
                "param_2": {
                    "data_param_2": 1,
                    "input_param_2": 1,
                    "param_2": 1
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_cy_and_zr_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c5c();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_cy_and_zr_00081c94",
            "entrypoint": "0x00081c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c94": "check_cy_and_zr_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "additional_data": {
                "FUN_00081c54": {
                    "call_check_function": 1,
                    "call_sub_function": 2,
                    "do_something": 1,
                    "execute_internal_logic": 1,
                    "execute_subfunction": 1,
                    "execute_subfunctions": 1,
                    "initialize": 1,
                    "initialize_cy_and_zr": 1,
                    "initialize_flags": 1,
                    "initialize_params": 1,
                    "invoke_subfunction": 1,
                    "perform_action": 1,
                    "perform_check": 1,
                    "perform_initialization": 2,
                    "perform_operations": 1,
                    "perform_something": 1,
                    "perform_sub_functions": 1,
                    "process_data": 1,
                    "set_cy_and_zr": 1
                },
                "FUN_00081ca8": {
                    "check_condition": 1,
                    "check_conditions": 3,
                    "check_cy_and_zr": 14,
                    "check_cy_zr": 6,
                    "check_cy_zr_condition": 1,
                    "check_cy_zr_conditions": 1,
                    "check_cy_zr_flags": 1,
                    "check_cy_zr_values": 1,
                    "check_error_flags": 1,
                    "check_flag_conditions": 1,
                    "check_zr_cy": 1
                },
                "in_CY": {
                    "carry_flag": 8,
                    "carry_result": 1,
                    "condition_1": 1,
                    "cy_flag": 3,
                    "cy_value": 1,
                    "is_carry": 3,
                    "is_carry_flag_set": 1,
                    "is_carry_set": 1,
                    "is_cy": 1,
                    "is_cy_set": 1,
                    "is_cy_true": 1
                },
                "in_ZR": {
                    "condition_2": 1,
                    "is_zero": 1,
                    "is_zero_result": 3,
                    "is_zero_returned": 1,
                    "is_zr": 1,
                    "is_zr_set": 1,
                    "is_zr_true": 1,
                    "zero_flag": 8,
                    "zero_result": 1,
                    "zr_flag": 3,
                    "zr_value": 1
                },
                "param_1": {
                    "input_param_1": 1,
                    "param_1": 1
                },
                "param_2": {
                    "input_param_2": 1,
                    "param_2": 1
                }
            },
            "called": [
                "FUN_00081c54"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_cy_and_zr_00081ca8(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  FUN_00081c54();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_cy_and_zr_00081ca8",
            "entrypoint": "0x00081ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081ca8": "check_cy_and_zr_00081ca8",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "additional_data": {
                "FUN_00081cd0": {
                    "convert_int_to_signed": 1,
                    "convert_integer_to_new_format": 1,
                    "convert_to_integer": 1,
                    "convert_to_positive_int": 1,
                    "convert_to_positive_or_zero": 1,
                    "convert_to_signed_int": 5,
                    "convert_to_signed_integer": 4,
                    "convert_to_twos_complement": 1,
                    "convert_to_unsigned_int": 1,
                    "convert_unsigned_int_to_neg_pos": 1,
                    "convert_unsigned_to_signed": 1,
                    "decode_integer": 1,
                    "decode_value": 1,
                    "extract_integer": 1,
                    "extract_integer_from_binary": 2,
                    "extract_signed_integer": 1,
                    "reverse_and_extract_bit": 1,
                    "reverse_bits": 3,
                    "reverse_bits_to_signed_int": 1,
                    "reverse_integer": 1,
                    "reverse_sign": 1
                },
                "param_1": {
                    "binary_number": 1,
                    "input": 6,
                    "input_value": 10,
                    "mask": 1,
                    "masked_input": 1,
                    "max_value": 1,
                    "num": 1,
                    "original_value": 1,
                    "output": 1,
                    "sign_bit": 1,
                    "signed_result": 1,
                    "unsigned_int": 1,
                    "unsigned_number": 1,
                    "unsigned_value": 1,
                    "value": 3
                },
                "param_1InNewFormat": {
                    "converted_input_value": 1
                },
                "param_1_signed": {
                    "signed_value": 1
                },
                "param_1_unsigned": {
                    "unsigned_result": 1
                },
                "uVar1": {
                    "converted_value": 1,
                    "extracted_bit": 1,
                    "result": 3,
                    "shifted_bits": 1,
                    "shifted_byte": 1,
                    "shifted_input": 3,
                    "shifted_int": 1,
                    "shifted_number": 2,
                    "shifted_result": 1,
                    "shifted_value": 16,
                    "unsigned_result": 1
                },
                "uVar1InNewFormat": {
                    "converted_value": 1
                },
                "uVar1_shifted": {
                    "shifted_value_signed": 1
                },
                "uVar2": {
                    "bit_difference": 2,
                    "difference": 17,
                    "distance_from_max": 1,
                    "inverse_shifted_value": 1,
                    "remaining_bits": 1,
                    "result": 1,
                    "shift_amount": 5,
                    "shift_difference": 2,
                    "temp": 1
                },
                "uVar3": {
                    "masked_value": 1,
                    "result": 3,
                    "shift_amount": 2,
                    "shifted_input": 2,
                    "shifted_result": 1,
                    "shifted_value": 2
                },
                "uVar4": {
                    "adjusted_value": 1,
                    "is_negative": 1,
                    "mask": 1,
                    "result": 3,
                    "shift_amount": 1,
                    "shifted_output": 1,
                    "shifted_result": 1
                },
                "uVar5": {
                    "result": 1,
                    "sign_bit": 2,
                    "u_var5": 1
                },
                "uVar6": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint convert_int_to_signed_00081cd0(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_int_to_signed_00081cd0",
            "entrypoint": "0x00081cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081cd0": "convert_int_to_signed_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "additional_data": {
                "FUN_00081d1c": {
                    "calculate_shifted_value": 1,
                    "convert_number_to_mask": 1,
                    "decode_and_check_value": 1,
                    "decode_and_filter_value": 1,
                    "decode_data": 1,
                    "decode_number": 1,
                    "decode_param": 1,
                    "decode_uint": 1,
                    "decode_unsigned_integer": 2,
                    "decode_value": 2,
                    "extract_bits": 1,
                    "perform_transformation": 1,
                    "reverse_bits": 11,
                    "reverse_bits_and_shift": 1,
                    "reverse_bitwise_calculation": 1,
                    "reverse_bitwise_operation": 2,
                    "reverse_number": 1,
                    "validate_param": 1
                },
                "param_1": {
                    "encoded_value": 1,
                    "input": 12,
                    "input_num": 2,
                    "input_number": 3,
                    "input_uint": 1,
                    "input_value": 9,
                    "number": 1,
                    "value": 2
                },
                "uVar1": {
                    "decoded_value": 1,
                    "shift_amount": 16,
                    "shift_value": 2,
                    "shifted_count": 1,
                    "shifted_number": 1,
                    "shifted_val": 1,
                    "shifted_value": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint reverse_bits_and_shift_00081d1c(uint input)\n\n{\n  uint shift_amount;\n  \n  if (((input & 0x80000000) != 0) || (input << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_shift_00081d1c",
            "entrypoint": "0x00081d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d1c": "reverse_bits_and_shift_00081d1c",
                "param_1": "input",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "additional_data": {
                "0x1f": {
                    "max_index": 1
                },
                "0x20070184": {
                    "default_offset": 1
                },
                "400": {
                    "memory_size": 1
                },
                "48": {
                    "entry_index": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "data_entries": 1,
                    "elf_relocation_array": 1,
                    "rel_array": 2,
                    "relocation_array": 1,
                    "relocation_entries": 9,
                    "relocation_entries_array": 1,
                    "relocation_table": 4
                },
                "FUN_00081d5c": {
                    "set_relocation_entry": 1,
                    "update_data_entry": 1,
                    "update_dynamic_relocation": 1,
                    "update_elf_relocation_entry": 1,
                    "update_rel_array": 1,
                    "update_rel_array_entry": 1,
                    "update_relocation_entry": 20,
                    "update_relocation_table": 3,
                    "update_values": 1
                },
                "FUN_00081df4": {
                    "allocate_memory": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 1,
                    "event_data": 1,
                    "input_parameter_1": 1,
                    "new_address": 2,
                    "new_offset": 1,
                    "new_value": 4,
                    "new_value1": 10,
                    "offset": 1,
                    "old_address": 1,
                    "symbol_address": 2,
                    "target_address": 2,
                    "value1": 2,
                    "value_to_relocate": 1
                },
                "param_2": {
                    "data": 2,
                    "data_offset": 1,
                    "input_parameter_2": 1,
                    "new_address": 1,
                    "new_value": 6,
                    "new_value2": 10,
                    "offset": 1,
                    "source_address": 1,
                    "symbol_index": 2,
                    "value": 2,
                    "value2": 2,
                    "value_to_be_updated": 1,
                    "value_to_update": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "bitmask": 1,
                    "flag": 4,
                    "input_parameter_3": 1,
                    "mask": 1,
                    "new_flag": 2,
                    "new_value3": 10,
                    "new_value_flag": 1,
                    "offset": 2,
                    "param_value": 1,
                    "related_value": 1,
                    "relocation_type": 1,
                    "symbol_info": 1,
                    "value": 2,
                    "value3": 2
                },
                "pdVar1": {
                    "array_entry": 1,
                    "current_entry": 7,
                    "current_entry_ptr": 1,
                    "current_relocation_entry": 1,
                    "entry": 1,
                    "entry_pointer": 1,
                    "new_pointer": 1,
                    "new_relocation_entry": 1,
                    "rel_entry": 2,
                    "reloc_entry": 2,
                    "relocated_address": 1,
                    "relocated_entry": 1,
                    "relocation_array_ptr": 1,
                    "relocation_entry": 8,
                    "relocation_entry_ptr": 1
                },
                "r_offset": {
                    "offset": 5,
                    "relocation_offset": 1
                },
                "uVar2": {
                    "current_index": 3,
                    "entry_index": 7,
                    "index": 17,
                    "new_index": 1,
                    "offset_value": 1,
                    "rel_index": 1
                },
                "uVar3": {
                    "bit": 1,
                    "bit_mask": 17,
                    "bit_shift_result": 1,
                    "bitmask": 4,
                    "bitwise_flag": 1,
                    "flag": 3,
                    "flag_mask": 2,
                    "mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 update_elf_relocation_entry_00081d5c(dword new_value1,dword new_value2,dword new_value3)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  \n  if (relocation_entries[48].offset == 0) {\n    relocation_entries[48].offset = 0x20070184;\n  }\n  index = *(uint *)(relocation_entries[48].offset + 4);\n  relocation_entry = (dword *)relocation_entries[48].offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)FUN_00081df4(400);\n    if (relocation_entry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocation_entry = relocation_entries[48].offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    relocation_entries[48].offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = new_value1;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = new_value3;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = new_value2;\n  return 0;\n}\n\n",
            "current_name": "update_elf_relocation_entry_00081d5c",
            "entrypoint": "0x00081d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_entries",
                "FUN_00081d5c": "update_elf_relocation_entry_00081d5c",
                "param_1": "new_value1",
                "param_2": "new_value2",
                "param_3": "new_value3",
                "pdVar1": "relocation_entry",
                "r_offset": "offset",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "additional_data": {
                "FUNC_00080118": {
                    "function1": 1,
                    "initialize": 1,
                    "sub_function1": 4,
                    "sub_function_1": 1,
                    "sub_function_one": 1,
                    "unused_function": 1
                },
                "FUNC_00085858": {
                    "initialize": 7,
                    "initialize_function_set": 1,
                    "initialize_sub_functions": 1,
                    "initialize_subfunctions": 1,
                    "sub_function2": 1
                },
                "FUN_00080118": {
                    "initialize_data": 1,
                    "sub_function1": 2,
                    "subfunction1": 1
                },
                "FUN_00081d7c": {
                    "execute_four_functions": 2,
                    "execute_function_sequence": 1,
                    "execute_function_set": 2,
                    "execute_functions": 3,
                    "execute_sub_functions": 16,
                    "execute_subfunctions": 5,
                    "process_sub_functions": 1
                },
                "FUN_00083974": {
                    "execute_subfunction": 1,
                    "function2": 1,
                    "process_data": 1,
                    "sub_function2": 5,
                    "sub_function3": 1,
                    "sub_function_2": 1,
                    "sub_function_two": 1,
                    "subfunction2": 1,
                    "unused_function_with_parameter": 1
                },
                "FUN_00085858": {
                    "execute_preprocess": 1,
                    "initialize": 1
                },
                "iVar1": {
                    "count": 2,
                    "counter": 7,
                    "iteration": 2,
                    "iteration_count": 15,
                    "iteration_counter": 1
                },
                "ppcVar2": {
                    "function_array": 4,
                    "function_array_pointer": 1,
                    "function_list": 1,
                    "function_pointer": 7,
                    "function_pointer_array": 4,
                    "function_pointers": 6,
                    "function_ptr": 1,
                    "function_ptr_array": 1,
                    "pointer_to_sub_functions": 1,
                    "sub_function_pointers": 1
                }
            },
            "called": [
                "FUN_00080118",
                "FUN_00085858",
                "FUN_00083974"
            ],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_sub_functions_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_pointer;\n  \n  FUNC_00085858();\n  function_pointer = (code **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointer = function_pointer + 1;\n    (**function_pointer)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_sub_functions_00081d7c",
            "entrypoint": "0x00081d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d7c": "execute_sub_functions_00081d7c",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081df4": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_rel_array": 1,
                    "relocation_array": 2,
                    "relocation_array_pointer": 1,
                    "relocation_table": 4
                },
                "FUN_00081df4": {
                    "execute_relocated_function": 1,
                    "execute_relocation": 2,
                    "initialize_relocation": 1,
                    "process_elf32_rel": 1,
                    "process_elf32_rel_array": 1,
                    "process_elf32_rel_entry": 2,
                    "process_elf_rel": 1,
                    "process_elf_relocation": 2,
                    "process_fun": 1,
                    "process_rel_array": 1,
                    "process_relocation": 10,
                    "process_relocation_entry": 6,
                    "reverse_elf_relocation": 1
                },
                "FUN_00081e14": {
                    "apply_relocation": 17,
                    "calculate_offset": 1,
                    "perform_relocation": 5,
                    "process_data": 1,
                    "process_elf32_rel_offset": 1,
                    "process_rel_entry": 1,
                    "process_relocation": 1,
                    "process_relocation_entry": 1
                },
                "param_1": {
                    "arg": 1,
                    "array_base": 1,
                    "data": 2,
                    "elf_rel_entry": 1,
                    "entry": 1,
                    "entry_address": 1,
                    "input_param": 2,
                    "offset": 3,
                    "param": 1,
                    "rel_entry": 1,
                    "relocation_array": 6,
                    "relocation_entry": 6,
                    "relocation_offset": 1,
                    "relocation_table": 2
                },
                "param_2": {
                    "count": 1,
                    "entry_index": 3,
                    "index": 2,
                    "length": 1,
                    "num_relocations": 1,
                    "offset_param": 2,
                    "param": 1,
                    "param2": 2,
                    "param_2": 1,
                    "relocation_offset": 1,
                    "size": 2,
                    "size_of_relocation_array": 1,
                    "value": 2
                },
                "r_offset": {
                    "offset": 3,
                    "rel_offset": 1,
                    "relocation_offset": 2
                }
            },
            "called": [
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083974"
            ],
            "code": "\nvoid process_relocation_entry_00081df4(undefined4 relocation_entry)\n\n{\n  FUN_00081e14(relocation_table[140].offset,relocation_entry);\n  return;\n}\n\n",
            "current_name": "process_relocation_entry_00081df4",
            "entrypoint": "0x00081df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_00081df4": "process_relocation_entry_00081df4",
                "param_1": "relocation_entry",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e04": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_relocations": 1,
                    "relocation_table": 3
                },
                "FUN_00081e04": {
                    "call_relocation_function": 1,
                    "execute_elf32_rel": 1,
                    "execute_first_function": 1,
                    "execute_function": 2,
                    "execute_relocation": 11,
                    "execute_relocation_function": 1,
                    "process_elf32_rel": 1,
                    "process_elf32_rel_array": 2,
                    "process_elf32_rel_array_entry": 1,
                    "process_elf_relocation": 2,
                    "process_elf_relocations": 1,
                    "process_main": 1,
                    "process_relocation": 5,
                    "process_relocation_entry": 1
                },
                "FUN_00083d9c": {
                    "apply_relocation": 10,
                    "call_sub_function": 1,
                    "execute_second_function": 1,
                    "perform_relocation": 9,
                    "process_elf32_rel": 3,
                    "process_rel_entry": 1,
                    "process_relocation": 3,
                    "process_sub": 1,
                    "relocate_memory": 1
                },
                "param_1": {
                    "address": 1,
                    "arg": 2,
                    "arg1": 1,
                    "entry": 1,
                    "entry_index": 1,
                    "input": 2,
                    "offset": 15,
                    "r_offset": 1,
                    "rel_array": 1,
                    "rel_offset": 1,
                    "relocation_address": 2,
                    "relocation_array": 2,
                    "relocation_offset": 1
                },
                "param_2": {
                    "additional_param": 1,
                    "arg2": 1,
                    "index": 2,
                    "offset": 1,
                    "param": 12,
                    "param2": 1,
                    "parameter": 1,
                    "value": 4
                },
                "r_offset": {
                    "offset": 2
                }
            },
            "called": [
                "FUN_00083d9c"
            ],
            "calling": [
                "FUN_000815fe",
                "FUN_0008160c"
            ],
            "code": "\nvoid execute_relocation_function_00081e04(undefined4 offset)\n\n{\n  FUN_00083d9c(relocation_table[140].offset,offset);\n  return;\n}\n\n",
            "current_name": "execute_relocation_function_00081e04",
            "entrypoint": "0x00081e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_00081e04": "execute_relocation_function_00081e04",
                "param_1": "offset",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e14": {
            "additional_data": {
                "FUNC_00082598": {
                    "initialization_function": 1,
                    "initialize": 1,
                    "initialize_function": 1
                },
                "FUNC_0008259c": {
                    "cleanup_function": 4,
                    "finalize": 1
                },
                "FUNC_00082970": {
                    "allocate_memory": 2,
                    "function_a": 1,
                    "sub_function1": 1
                },
                "FUN_00081e14": {
                    "allocate_and_link_memory": 1,
                    "allocate_memory": 4,
                    "allocate_memory_block": 1,
                    "create_improved_code": 1,
                    "decompiled_function": 1,
                    "extracted_binary_function": 1,
                    "improved_func": 1,
                    "process_data": 1,
                    "rearrange_memory": 1,
                    "reverse_elf_relocation": 1
                },
                "FUN_00082598": {
                    "initialize_function": 2
                },
                "FUN_00082970": {
                    "allocate_memory": 1
                },
                "FUN_00083d9c": {
                    "free_memory": 3,
                    "function_b": 1,
                    "sub_function2": 1
                },
                "dVar1": {
                    "dummy_var": 1,
                    "dword1": 1,
                    "dword_var1": 1,
                    "entry": 2,
                    "index": 3,
                    "info": 1,
                    "last_block": 1,
                    "offset": 1,
                    "rel_info": 2,
                    "result": 5,
                    "temp": 1,
                    "temp1": 8,
                    "temp_1": 1,
                    "temp_d_var1": 1,
                    "temp_dword1": 1,
                    "temp_var1": 1
                },
                "dVar11": {
                    "block": 1,
                    "current_address": 1,
                    "current_offset": 1,
                    "dummy_var3": 1,
                    "dword3": 1,
                    "dword_var11": 1,
                    "entry2": 1,
                    "first_block": 1,
                    "iter2": 1,
                    "next_relocation": 1,
                    "rel_info_2": 1,
                    "target_addr": 1,
                    "temp10": 4,
                    "temp11": 3,
                    "temp7": 1,
                    "temp_9": 1,
                    "temp_address": 1,
                    "temp_d_var11": 1,
                    "temp_dword3": 1,
                    "temp_offset": 1,
                    "temp_offset1": 1,
                    "temp_ptr2": 2,
                    "temp_var11": 1,
                    "temp_var8": 1,
                    "temp_var9": 1
                },
                "dVar12": {
                    "dummy_var4": 1,
                    "dword4": 1,
                    "dword_var12": 1,
                    "iter3": 1,
                    "next_addr": 1,
                    "next_entry": 1,
                    "prev_block": 1,
                    "previous_address": 1,
                    "previous_offset": 1,
                    "previous_relocation": 1,
                    "rel_info_3": 1,
                    "temp11": 4,
                    "temp12": 3,
                    "temp5": 1,
                    "temp8": 1,
                    "temp_10": 1,
                    "temp_d_var12": 1,
                    "temp_dword4": 1,
                    "temp_offset2": 2,
                    "temp_ptr3": 2,
                    "temp_var10": 1,
                    "temp_var12": 1,
                    "temp_var9": 1
                },
                "dVar7": {
                    "address": 1,
                    "current": 1,
                    "current_addr": 1,
                    "current_entry": 1,
                    "current_offset": 1,
                    "current_relocation": 1,
                    "dummy_var2": 1,
                    "dword2": 1,
                    "dword_var7": 1,
                    "iter": 1,
                    "offset": 5,
                    "previous_block": 1,
                    "rel_offset": 1,
                    "temp": 1,
                    "temp7": 9,
                    "temp_d_var7": 1,
                    "temp_d_word2": 1,
                    "temp_var6": 1,
                    "temp_var7": 1
                },
                "iVar13": {
                    "adjusted_iterator": 1,
                    "block_index": 1,
                    "count": 2,
                    "counter": 1,
                    "current_block": 1,
                    "i_var_13": 1,
                    "index": 1,
                    "index6": 1,
                    "int_var13": 1,
                    "iterator_1": 1,
                    "loop_var": 1,
                    "temp12": 4,
                    "temp13": 2,
                    "temp19": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_int4": 1,
                    "temp_var1": 2,
                    "temp_var10": 1,
                    "temp_var11": 1,
                    "temp_var13": 1,
                    "temp_var2": 1,
                    "temp_var8": 1,
                    "temp_var_7": 1,
                    "tempi_var13": 1
                },
                "iVar19": {
                    "temp_int5": 1
                },
                "iVar2": {
                    "index": 3,
                    "index1": 1,
                    "int_var2": 1,
                    "iterator_2": 1,
                    "offset_1": 1,
                    "prev": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp2": 9,
                    "temp_int1": 1,
                    "temp_var": 4,
                    "temp_var1": 3,
                    "temp_var2": 1,
                    "tempi_var2": 1,
                    "x": 1
                },
                "iVar5": {
                    "i_var_5": 1,
                    "index4": 1,
                    "int_var5": 1,
                    "next": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 9,
                    "temp_6": 1,
                    "temp_int2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 4,
                    "temp_var5": 1,
                    "temp_var_3": 1,
                    "tempi_var5": 1,
                    "value_index": 1,
                    "var3": 1,
                    "y": 1
                },
                "iVar9": {
                    "i_var_9": 1,
                    "index5": 1,
                    "int_var9": 1,
                    "new_index": 1,
                    "next_block": 1,
                    "next_offset": 1,
                    "replace_addr": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp9": 9,
                    "temp_7": 1,
                    "temp_int3": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var7": 3,
                    "temp_var8": 1,
                    "temp_var9": 1,
                    "temp_var_6": 1,
                    "tempi_var9": 1,
                    "var6": 1
                },
                "param_1": {
                    "input_array": 6,
                    "input_data": 1,
                    "input_pointer": 1,
                    "memory": 1,
                    "new_param1": 1,
                    "output_pointer": 3,
                    "output_ptr": 1,
                    "param": 2,
                    "param1": 1,
                    "param_1": 1,
                    "param_array": 6,
                    "param_buffer": 1,
                    "param_list": 1,
                    "parameter1": 1,
                    "parameter_array": 1,
                    "pointer": 1,
                    "result_ptr": 2
                },
                "param_2": {
                    "array_length": 3,
                    "array_size": 4,
                    "data_size": 1,
                    "input_size": 2,
                    "length": 3,
                    "new_param2": 1,
                    "param2": 1,
                    "param_2": 1,
                    "param_length": 2,
                    "param_size": 4,
                    "parameter2": 1,
                    "parameter_size": 1,
                    "size": 7
                },
                "pdVar14": {
                    "adjusted_pointer1": 1,
                    "current_ptr": 1,
                    "current_rel": 1,
                    "list_head": 1,
                    "p_curr_rel": 1,
                    "pd_pointer": 1,
                    "pd_var": 2,
                    "pd_var1": 1,
                    "pd_var_14": 1,
                    "pointer2": 3,
                    "pointer_array": 1,
                    "pointer_var2": 1,
                    "ptr_arr1": 1,
                    "ptr_var14": 1,
                    "rel_info": 1,
                    "rel_info_array": 1,
                    "temp_11": 1,
                    "temp_array_pointer2": 1,
                    "temp_dword_ptr1": 1,
                    "temp_pointer2": 2,
                    "temp_ptr14": 1,
                    "temp_ptr2": 3,
                    "temp_ptr4": 1,
                    "temp_var2": 1,
                    "tempd_var14": 1
                },
                "pdVar17": {
                    "entry_iterator": 1,
                    "next_pd_var": 1,
                    "p_prev_rel": 1,
                    "pd_pointer": 1,
                    "pd_var2": 2,
                    "pd_var_17": 1,
                    "pointer3": 1,
                    "pointer4": 2,
                    "pointer_array_var1": 1,
                    "pointer_var4": 1,
                    "previous_ptr": 1,
                    "ptr_arr2": 1,
                    "ptr_var17": 1,
                    "target_rel": 1,
                    "temp_14": 1,
                    "temp_array_pointer4": 1,
                    "temp_dword_ptr2": 1,
                    "temp_pointer4": 2,
                    "temp_ptr17": 1,
                    "temp_ptr4": 3,
                    "temp_ptr5": 1,
                    "temp_ptr6": 1,
                    "temp_rel_info_array": 1,
                    "tempd_var17": 1
                },
                "puVar10": {
                    "current_block": 1,
                    "list_entry": 1,
                    "p_temp": 1,
                    "pointer": 3,
                    "pointer1": 1,
                    "pointer3": 1,
                    "pointer_var": 1,
                    "ptr": 4,
                    "ptr_var": 1,
                    "ptr_var10": 1,
                    "pu_var1": 1,
                    "pu_var_10": 1,
                    "temp_8": 1,
                    "temp_array_pointer": 1,
                    "temp_pointer1": 3,
                    "temp_ptr": 1,
                    "temp_ptr1": 6,
                    "temp_ptr10": 1,
                    "tempu_var10": 1
                },
                "puVar16": {
                    "aligned_block": 1,
                    "aligned_ptr": 1,
                    "entry_ptr": 1,
                    "new_addr": 1,
                    "new_pointer": 1,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer3": 2,
                    "pointer_var1": 1,
                    "pointer_var3": 1,
                    "ptr2": 1,
                    "ptr_var16": 1,
                    "pu_var2": 1,
                    "pu_var_16": 1,
                    "rel_address": 1,
                    "rel_block": 1,
                    "temp_13": 1,
                    "temp_array_pointer3": 1,
                    "temp_pointer2": 1,
                    "temp_pointer3": 2,
                    "temp_ptr": 1,
                    "temp_ptr16": 1,
                    "temp_ptr2": 1,
                    "temp_ptr3": 3,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "tempu_var16": 1
                },
                "uVar15": {
                    "adjusted_length": 1,
                    "adjusted_size": 2,
                    "aligned_size": 3,
                    "alloc_size": 1,
                    "block_size": 1,
                    "count": 1,
                    "old_size": 1,
                    "rounded_size": 1,
                    "size": 2,
                    "temp13": 3,
                    "temp15": 3,
                    "temp_12": 1,
                    "temp_size": 1,
                    "temp_uint5": 1,
                    "temp_var11": 1,
                    "temp_var15": 1,
                    "temp_var2": 1,
                    "temp_var9": 1,
                    "tempu_var15": 1,
                    "u_var_15": 1,
                    "uint_var15": 1,
                    "updated_size": 1,
                    "value3": 1
                },
                "uVar18": {
                    "adjusted_shift": 1,
                    "alignment": 1,
                    "bin_index": 1,
                    "block_size2": 1,
                    "counter": 1,
                    "index": 1,
                    "index2": 1,
                    "iterator_3": 1,
                    "loop_counter": 2,
                    "num_loops": 1,
                    "rounded_size_1": 1,
                    "temp14": 3,
                    "temp18": 3,
                    "temp_uint6": 1,
                    "temp_value": 1,
                    "temp_var10": 1,
                    "temp_var12": 2,
                    "temp_var18": 1,
                    "temp_var3": 2,
                    "tempu_var18": 1,
                    "u_var_18": 1,
                    "uint_var18": 1,
                    "value4": 1
                },
                "uVar20": {
                    "temp_uint7": 1
                },
                "uVar3": {
                    "adjusted_mask": 1,
                    "bit_mask": 1,
                    "flag": 1,
                    "flag1": 1,
                    "index2": 1,
                    "mask": 3,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 9,
                    "temp_2": 1,
                    "temp_uint1": 1,
                    "temp_var2": 4,
                    "temp_var3": 1,
                    "temp_var_1": 1,
                    "tempu_var3": 1,
                    "u_var_3": 1,
                    "uint_var3": 1,
                    "var1": 1
                },
                "uVar4": {
                    "aligned_size": 1,
                    "aligned_var": 1,
                    "block_diff": 1,
                    "flag2": 1,
                    "index3": 1,
                    "mask": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 9,
                    "temp_3": 1,
                    "temp_uint2": 1,
                    "temp_var3": 4,
                    "temp_var4": 1,
                    "temp_var_2": 1,
                    "tempu_var4": 1,
                    "u_var_4": 1,
                    "uint_var4": 1,
                    "value": 1,
                    "var2": 1
                },
                "uVar6": {
                    "adjusted_difference": 1,
                    "adjusted_var": 1,
                    "diff": 2,
                    "difference": 1,
                    "end_address": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 9,
                    "temp_4": 1,
                    "temp_uint3": 1,
                    "temp_var5": 4,
                    "temp_var6": 1,
                    "temp_var_4": 1,
                    "tempu_var6": 1,
                    "u_var_6": 1,
                    "uint_var6": 1,
                    "value1": 1,
                    "var4": 1
                },
                "uVar8": {
                    "difference": 1,
                    "flag": 1,
                    "new_size": 2,
                    "offset": 1,
                    "offset_diff": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp8": 9,
                    "temp_5": 1,
                    "temp_uint4": 1,
                    "temp_var6": 3,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "temp_var_5": 1,
                    "tempu_var8": 1,
                    "u_var_8": 1,
                    "uint_var8": 1,
                    "value2": 1,
                    "var5": 1
                }
            },
            "called": [
                "FUN_00082970",
                "FUN_00083d9c",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_000842a4",
                "FUN_00081df4",
                "FUN_000825b0"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_and_link_memory_00081e14(undefined4 *input_array,uint size)\n\n{\n  dword temp1;\n  int temp2;\n  uint temp3;\n  uint temp4;\n  int temp5;\n  uint temp6;\n  dword temp7;\n  uint temp8;\n  int temp9;\n  undefined *temp_ptr1;\n  dword temp10;\n  dword temp11;\n  int temp12;\n  dword *temp_ptr2;\n  uint temp13;\n  undefined *temp_ptr3;\n  dword *temp_ptr4;\n  uint temp18;\n  \n  if (size + 0xb < 0x17) {\n    temp13 = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    temp13 = size + 0xb & 0xfffffff8;\n    if (((int)temp13 < 0) || (temp13 < size)) {\nLAB_00081e7a:\n      *input_array = 0xc;\n      return (int *)0x0;\n    }\n  }\n  FUNC_00082598(input_array);\n  temp1 = Elf32_Rel_ARRAY_20070000[142].r_info;\n  if (temp13 < 0x1f8) {\n    temp12 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8e].r_offset + temp13);\n    if ((temp12 != temp13 + 0x20070464) ||\n       (temp2 = temp12 + 8, temp12 = *(int *)(temp12 + 0x14), temp2 != temp12)) {\n      temp5 = *(int *)(temp12 + 0xc);\n      temp9 = (*(uint *)(temp12 + 4) & 0xfffffffc) + temp12;\n      temp13 = *(uint *)(temp9 + 4);\n      temp2 = *(int *)(temp12 + 8);\n      *(int *)(temp2 + 0xc) = temp5;\n      *(int *)(temp5 + 8) = temp2;\n      *(uint *)(temp9 + 4) = temp13 | 1;\n      FUNC_0008259c(input_array);\n      return (int *)(temp12 + 8);\n    }\n    temp18 = (temp13 >> 3) + 2;\n  }\n  else {\n    temp18 = temp13 >> 9;\n    if (temp18 == 0) {\n      temp2 = 0x7e;\n      temp12 = 0x3f;\n    }\n    else if (temp18 < 5) {\n      temp12 = (temp13 >> 6) + 0x38;\n      temp2 = temp12 * 2;\n    }\n    else if (temp18 < 0x15) {\n      temp12 = temp18 + 0x5b;\n      temp2 = temp12 * 2;\n    }\n    else if (temp18 < 0x55) {\n      temp12 = (temp13 >> 0xc) + 0x6e;\n      temp2 = temp12 * 2;\n    }\n    else if (temp18 < 0x155) {\n      temp12 = (temp13 >> 0xf) + 0x77;\n      temp2 = temp12 * 2;\n    }\n    else if (temp18 < 0x555) {\n      temp12 = (temp13 >> 0x12) + 0x7c;\n      temp2 = temp12 * 2;\n    }\n    else {\n      temp2 = 0xfc;\n      temp12 = 0x7e;\n    }\n    for (temp7 = (&Elf32_Rel_ARRAY_20070000[0x8e].r_offset)[temp2]; temp2 * 4 + 0x20070464U != temp7\n        ; temp7 = *(dword *)(temp7 + 0xc)) {\n      temp18 = *(uint *)(temp7 + 4) & 0xfffffffc;\n      temp5 = temp18 - temp13;\n      if (0xf < temp5) {\n        temp12 = temp12 + -1;\n        break;\n      }\n      if (-1 < temp5) {\n        temp2 = temp18 + temp7;\n        temp13 = *(uint *)(temp2 + 4);\n        temp5 = *(int *)(temp7 + 0xc);\n        temp12 = *(int *)(temp7 + 8);\n        *(int *)(temp12 + 0xc) = temp5;\n        *(int *)(temp5 + 8) = temp12;\n        *(uint *)(temp2 + 4) = temp13 | 1;\n        FUNC_0008259c(input_array);\n        return (int *)(temp7 + 8);\n      }\n    }\n    temp18 = temp12 + 1;\n  }\n  temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n  if (Elf32_Rel_ARRAY_20070000[142].r_info != 0x2007046c) {\n    temp3 = *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4);\n    temp4 = temp3 & 0xfffffffc;\n    temp6 = temp4 - temp13;\n    if (0xf < (int)temp6) {\n      temp7 = temp13 + Elf32_Rel_ARRAY_20070000[142].r_info;\n      *(uint *)(Elf32_Rel_ARRAY_20070000[142].r_info + 4) = temp13 | 1;\n      Elf32_Rel_ARRAY_20070000[142].r_info = temp7;\n      Elf32_Rel_ARRAY_20070000[143].r_offset = temp7;\n      *(undefined4 *)(temp7 + 0xc) = 0x2007046c;\n      *(undefined4 *)(temp7 + 8) = 0x2007046c;\n      *(uint *)(temp7 + 4) = temp6 | 1;\n      *(uint *)(temp7 + temp6) = temp6;\n      FUNC_0008259c(input_array);\n      return (int *)(temp1 + 8);\n    }\n    Elf32_Rel_ARRAY_20070000[143].r_offset = 0x2007046c;\n    Elf32_Rel_ARRAY_20070000[142].r_info = 0x2007046c;\n    if (-1 < (int)temp6) {\n      *(uint *)(temp4 + temp1 + 4) = *(uint *)(temp4 + temp1 + 4) | 1;\n      FUNC_0008259c(input_array);\n      return (int *)(temp1 + 8);\n    }\n    if (temp4 < 0x200) {\n      temp4 = temp3 & 0xfffffff8;\n      temp12 = *(int *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4);\n      temp7 = 1 << ((int)(temp3 >> 3) >> 2 & 0xffU) | Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(int *)(temp1 + 8) = temp12;\n      *(uint *)(temp1 + 0xc) = temp4 + 0x20070464;\n      Elf32_Rel_ARRAY_20070000[141].r_offset = temp7;\n      *(dword *)((int)&Elf32_Rel_ARRAY_20070000[0x8d].r_info + temp4) = temp1;\n      *(dword *)(temp12 + 0xc) = temp1;\n    }\n    else {\n      temp6 = temp3 >> 9;\n      if (temp6 < 5) {\n        temp2 = (temp3 >> 6) + 0x38;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x15) {\n        temp2 = temp6 + 0x5b;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x55) {\n        temp2 = (temp3 >> 0xc) + 0x6e;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x155) {\n        temp2 = (temp3 >> 0xf) + 0x77;\n        temp12 = temp2 * 2;\n      }\n      else if (temp6 < 0x555) {\n        temp2 = (temp3 >> 0x12) + 0x7c;\n        temp12 = temp2 * 2;\n      }\n      else {\n        temp12 = 0xfc;\n        temp2 = 0x7e;\n      }\n      temp7 = temp12 * 4 + 0x20070464;\n      temp10 = (&Elf32_Rel_ARRAY_20070000[0x8d].r_info)[temp12];\n      if (temp10 == temp7) {\n        Elf32_Rel_ARRAY_20070000[141].r_offset =\n             Elf32_Rel_ARRAY_20070000[141].r_offset | 1 << (temp2 >> 2 & 0xffU);\n        temp11 = temp10;\n      }\n      else {\n        do {\n          temp11 = temp10;\n          if ((*(uint *)(temp10 + 4) & 0xfffffffc) <= temp4) break;\n          temp10 = *(dword *)(temp10 + 8);\n          temp11 = temp10;\n        } while (temp7 != temp10);\n        temp10 = *(dword *)(temp11 + 0xc);\n      }\n      temp7 = Elf32_Rel_ARRAY_20070000[141].r_offset;\n      *(dword *)(temp1 + 0xc) = temp10;\n      *(dword *)(temp1 + 8) = temp11;\n      *(dword *)(temp10 + 8) = temp1;\n      *(dword *)(temp11 + 0xc) = temp1;\n    }\n  }\n  temp1 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  temp3 = 1 << ((int)temp18 >> 2 & 0xffU);\n  if (temp3 <= temp7) {\n    if ((temp7 & temp3) == 0) {\n      temp18 = temp18 & 0xfffffffc;\n      do {\n        temp3 = temp3 << 1;\n        temp18 = temp18 + 4;\n      } while ((temp7 & temp3) == 0);\n    }\n    do {\n      temp_ptr4 = &Elf32_Rel_ARRAY_20070000[temp18 + 0x8c].r_info;\n      temp_ptr2 = temp_ptr4;\n      temp4 = temp18;\n      do {\n        for (temp_ptr1 = (undefined *)temp_ptr2[3]; temp_ptr2 != (dword *)temp_ptr1;\n            temp_ptr1 = *(undefined **)(temp_ptr1 + 0xc)) {\n          temp6 = *(uint *)(temp_ptr1 + 4) & 0xfffffffc;\n          temp8 = temp6 - temp13;\n          if (0xf < (int)temp8) {\n            temp2 = *(int *)(temp_ptr1 + 8);\n            temp12 = *(int *)(temp_ptr1 + 0xc);\n            temp_ptr3 = temp_ptr1 + temp13;\n            *(uint *)(temp_ptr1 + 4) = temp13 | 1;\n            *(int *)(temp2 + 0xc) = temp12;\n            *(int *)(temp12 + 8) = temp2;\n            Elf32_Rel_ARRAY_20070000[142].r_info = (dword)temp_ptr3;\n            Elf32_Rel_ARRAY_20070000[143].r_offset = (dword)temp_ptr3;\n            *(undefined4 *)(temp_ptr3 + 0xc) = 0x2007046c;\n            *(undefined4 *)(temp_ptr3 + 8) = 0x2007046c;\n            *(uint *)(temp_ptr3 + 4) = temp8 | 1;\n            *(uint *)(temp_ptr3 + temp8) = temp8;\n            FUNC_0008259c(input_array);\n            return (int *)(temp_ptr1 + 8);\n          }\n          if (-1 < (int)temp8) {\n            temp12 = *(int *)(temp_ptr1 + 8);\n            temp2 = *(int *)(temp_ptr1 + 0xc);\n            *(uint *)(temp_ptr1 + temp6 + 4) = *(uint *)(temp_ptr1 + temp6 + 4) | 1;\n            *(int *)(temp12 + 0xc) = temp2;\n            *(int *)(temp2 + 8) = temp12;\n            FUNC_0008259c(input_array);\n            return (int *)(temp_ptr1 + 8);\n          }\n        }\n        temp4 = temp4 + 1;\n        temp_ptr2 = temp_ptr2 + 2;\n      } while ((temp4 & 3) != 0);\n      do {\n        temp6 = temp18 & 3;\n        temp_ptr1 = (undefined *)(temp_ptr4 + -2);\n        temp18 = temp18 - 1;\n        if (temp6 == 0) {\n          Elf32_Rel_ARRAY_20070000[141].r_offset = Elf32_Rel_ARRAY_20070000[141].r_offset & ~temp3;\n          break;\n        }\n        temp_ptr4 = (dword *)*temp_ptr4;\n      } while (temp_ptr4 == (dword *)temp_ptr1);\n      temp3 = temp3 * 2;\n      if ((Elf32_Rel_ARRAY_20070000[141].r_offset <= temp3 &&\n           temp3 - Elf32_Rel_ARRAY_20070000[141].r_offset != 0) || (temp18 = temp4, temp3 == 0))\n      break;\n      for (; (Elf32_Rel_ARRAY_20070000[141].r_offset & temp3) == 0; temp3 = temp3 << 1) {\n        temp18 = temp18 + 4;\n      }\n    } while( true );\n  }\n  temp18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n  if ((temp13 <= temp18) &&\n     (temp3 = temp18 - temp13, temp7 = Elf32_Rel_ARRAY_20070000[141].r_info, 0xf < (int)temp3))\n  goto LAB_0008211e;\n  temp3 = Elf32_Rel_ARRAY_20070000[141].r_info + temp18;\n  if (Elf32_Rel_ARRAY_20070000[270].r_offset == 0xffffffff) {\n    temp4 = temp13 + DAT_20071190 + 0x10;\n  }\n  else {\n    temp4 = temp13 + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  temp7 = FUN_00082970(input_array,temp4);\n  if ((temp7 == 0xffffffff) || ((temp7 < temp3 && (temp1 != 0x20070464)))) {\n    temp18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\n  else {\n    temp6 = DAT_20071194 + temp4;\n    DAT_20071194 = temp6;\n    if ((temp3 == temp7) && ((temp3 & 0xfff) == 0)) {\n      *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp4 + temp18 | 1;\n    }\n    else {\n      temp10 = temp7;\n      if (Elf32_Rel_ARRAY_20070000[270].r_offset != 0xffffffff) {\n        temp10 = Elf32_Rel_ARRAY_20070000[270].r_offset;\n        DAT_20071194 = temp6 + (temp7 - temp3);\n      }\n      Elf32_Rel_ARRAY_20070000[270].r_offset = temp10;\n      temp3 = temp7 & 7;\n      if (temp3 == 0) {\n        temp12 = 0x1000;\n      }\n      else {\n        temp7 = temp7 + (8 - temp3);\n        temp12 = 0x1008 - temp3;\n      }\n      temp12 = temp12 - (temp4 + temp7 & 0xfff);\n      temp2 = FUN_00082970(input_array,temp12);\n      if (temp2 == -1) {\n        temp3 = 1;\n        temp12 = 0;\n      }\n      else {\n        temp3 = (temp2 - temp7) + temp12 | 1;\n      }\n      temp6 = DAT_20071194 + temp12;\n      Elf32_Rel_ARRAY_20070000[141].r_info = temp7;\n      DAT_20071194 = temp6;\n      *(uint *)(temp7 + 4) = temp3;\n      if (temp1 != 0x20070464) {\n        if (temp18 < 0x10) {\n          *(undefined4 *)(temp7 + 4) = 1;\n          temp18 = 0;\n          goto LAB_00082108;\n        }\n        temp18 = temp18 - 0xc & 0xfffffff8;\n        *(uint *)(temp1 + 4) = temp18 | *(uint *)(temp1 + 4) & 1;\n        *(undefined4 *)(temp1 + temp18 + 4) = 5;\n        *(undefined4 *)(temp1 + temp18 + 8) = 5;\n        if (0xf < temp18) {\n          FUN_00083d9c(input_array,temp1 + 8);\n          temp6 = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < temp6) {\n      DAT_2007118c = temp6;\n    }\n    if (DAT_20071188 < temp6) {\n      DAT_20071188 = temp6;\n    }\n    temp18 = *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) & 0xfffffffc;\n    temp7 = Elf32_Rel_ARRAY_20070000[141].r_info;\n  }\nLAB_00082108:\n  temp3 = temp18 - temp13;\n  if ((temp18 < temp13) || ((int)temp3 < 0x10)) {\n    FUNC_0008259c(input_array);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  Elf32_Rel_ARRAY_20070000[141].r_info = temp13 + temp7;\n  *(uint *)(temp7 + 4) = temp13 | 1;\n  *(uint *)(Elf32_Rel_ARRAY_20070000[141].r_info + 4) = temp3 | 1;\n  FUNC_0008259c(input_array);\n  return (int *)(temp7 + 8);\n}\n\n",
            "current_name": "allocate_and_link_memory_00081e14",
            "entrypoint": "0x00081e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081e14": "allocate_and_link_memory_00081e14",
                "dVar1": "temp1",
                "dVar11": "temp10",
                "dVar12": "temp11",
                "dVar7": "temp7",
                "iVar13": "temp12",
                "iVar2": "temp2",
                "iVar5": "temp5",
                "iVar9": "temp9",
                "param_1": "input_array",
                "param_2": "size",
                "pdVar14": "temp_ptr2",
                "pdVar17": "temp_ptr4",
                "puVar10": "temp_ptr1",
                "puVar16": "temp_ptr3",
                "uVar15": "temp13",
                "uVar18": "temp18",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar6": "temp6",
                "uVar8": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008234c": {
            "additional_data": {
                "FUN_0008234c": {
                    "copy_and_adjust_data": 1,
                    "copy_and_expand_data": 1,
                    "copy_and_pad_data": 1,
                    "copy_data": 5,
                    "copy_memory": 20,
                    "copy_memory_block": 2,
                    "copy_uint_array": 1
                },
                "LAB_000823d0": {
                    "copy_remaining": 1,
                    "skip_aligned_copy": 1
                },
                "bVar6": {
                    "has_remaining": 2,
                    "has_remaining_bytes": 1,
                    "is_copy_complete": 1,
                    "is_copy_needed": 1,
                    "is_copy_remaining": 1,
                    "is_copy_valid": 1,
                    "is_count_valid": 1,
                    "is_looping": 3,
                    "is_remaining": 3,
                    "is_remaining_size_non_zero": 1,
                    "is_remaining_size_positive": 1,
                    "is_size_leftover": 1,
                    "loop_condition": 8,
                    "remaining_bytes": 1,
                    "should_continue_copying": 2,
                    "size_bigger_than_unrolled": 1,
                    "temp2": 1
                },
                "param_1": {
                    "dest": 10,
                    "destination": 21
                },
                "param_2": {
                    "source": 21,
                    "src": 10
                },
                "param_3": {
                    "count": 1,
                    "length": 4,
                    "num_bytes": 1,
                    "size": 25
                },
                "puVar1": {
                    "dest_pointer": 1,
                    "dest_ptr": 25,
                    "dst_ptr": 4,
                    "src_ptr": 1
                },
                "puVar2": {
                    "cur_dest_ptr": 1,
                    "curr_dest_ptr": 1,
                    "dest": 2,
                    "dest_current": 1,
                    "dest_current_ptr": 1,
                    "dest_end_ptr": 2,
                    "dest_iter": 4,
                    "dest_ptr": 1,
                    "dest_ptr_aligned": 2,
                    "dest_ptr_end": 1,
                    "dest_ptr_iter": 1,
                    "dest_ptr_temp": 1,
                    "dest_start": 1,
                    "dst": 1,
                    "dst_end_ptr": 1,
                    "dst_iter": 1,
                    "dst_ptr_adjusted": 1,
                    "dst_ptr_start": 1,
                    "output_ptr": 1,
                    "source_ptr": 1,
                    "src_ptr": 5
                },
                "puVar3": {
                    "cur_src_ptr": 1,
                    "curr_source_ptr": 1,
                    "dest_iter": 1,
                    "last_dest_ptr": 1,
                    "source_ptr": 2,
                    "src": 3,
                    "src_current": 1,
                    "src_current_ptr": 1,
                    "src_iter": 5,
                    "src_ptr": 10,
                    "temp_dest_ptr": 1,
                    "temp_ptr": 4
                },
                "uVar4": {
                    "num_bytes_remain": 1,
                    "remainder": 2,
                    "remaining": 3,
                    "remaining_length": 2,
                    "remaining_size": 21,
                    "temp_length": 1,
                    "temp_size": 1
                },
                "uVar5": {
                    "aligned_size": 1,
                    "copy_length": 1,
                    "copy_size": 8,
                    "count": 1,
                    "leftover_size": 1,
                    "length": 1,
                    "loop_count": 3,
                    "loop_counter": 1,
                    "loop_size": 1,
                    "num_bytes_remain_aligned": 1,
                    "remaining_length": 1,
                    "remaining_size_aligned": 1,
                    "remaining_size_copy": 1,
                    "remaining_size_minus_four": 1,
                    "remaining_size_temp": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_size": 1,
                    "unaligned_bytes": 1,
                    "unrolled_size": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34"
            ],
            "code": "\nundefined4 * copy_memory_block_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint copy_size;\n  bool loop_condition;\n  \n  src_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copy_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = src_ptr;\n          loop_condition = copy_size != 0;\n          copy_size = copy_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          src_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (loop_condition);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto skip_aligned_copy;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copy_size = 4 - ((uint)destination & 3);\n      size = size - copy_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      src_ptr = dest_ptr;\n      source = src_ptr;\n      if ((copy_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        src_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *src_ptr = *source;\n    src_ptr[1] = source[1];\n    src_ptr[2] = source[2];\n    src_ptr[3] = source[3];\n    src_ptr[4] = source[4];\n    src_ptr[5] = source[5];\n    src_ptr[6] = source[6];\n    src_ptr[7] = source[7];\n    src_ptr[8] = source[8];\n    src_ptr[9] = source[9];\n    src_ptr[10] = source[10];\n    src_ptr[0xb] = source[0xb];\n    src_ptr[0xc] = source[0xc];\n    src_ptr[0xd] = source[0xd];\n    src_ptr[0xe] = source[0xe];\n    src_ptr[0xf] = source[0xf];\n    src_ptr = src_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *src_ptr = *source;\n      src_ptr[1] = source[1];\n      src_ptr[2] = source[2];\n      src_ptr[3] = source[3];\n      src_ptr = src_ptr + 4;\n      source = source + 4;\n      loop_condition = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (loop_condition);\n  }\n  copy_size = remaining_size + 0xc;\n  src_ptr = src_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      loop_condition = 3 < copy_size;\n      copy_size = copy_size - 4;\n      src_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (loop_condition);\n  }\nskip_aligned_copy:\n  if (copy_size + 4 != 0) {\n    dest_ptr = src_ptr;\n    src_ptr = source;\n    if ((copy_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)src_ptr + 1);\n      *(undefined *)src_ptr = *(undefined *)source;\n    }\n    if ((copy_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_block_0008234c",
            "entrypoint": "0x0008234c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008234c": "copy_memory_block_0008234c",
                "LAB_000823d0": "skip_aligned_copy",
                "bVar6": "loop_condition",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "src_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082438": {
            "additional_data": {
                "FUN_00082438": {
                    "copy_and_reverse": 2,
                    "copy_and_shift_data": 1,
                    "copy_memory": 17,
                    "copy_reverse": 1,
                    "copy_reverse_and_shift_data": 1,
                    "copy_reverse_data": 2,
                    "reverse_copy": 4,
                    "reverse_copy_memory": 1,
                    "reverse_memory": 1
                },
                "iVar1": {
                    "count": 6,
                    "counter": 1,
                    "current_index": 1,
                    "index": 16,
                    "iteration_count": 1,
                    "loop_counter": 2,
                    "remaining": 1,
                    "remaining_bytes": 1,
                    "remaining_size": 1
                },
                "param_1": {
                    "dest": 14,
                    "dest_ptr": 1,
                    "destination": 13,
                    "source": 2,
                    "src": 1
                },
                "param_2": {
                    "destination": 2,
                    "dst": 1,
                    "source": 13,
                    "src": 14,
                    "src_ptr": 1
                },
                "param_3": {
                    "length": 14,
                    "size": 17
                },
                "puVar2": {
                    "dest_next": 1,
                    "dest_ptr": 24,
                    "dest_ptr_temp": 1,
                    "dst_ptr": 1,
                    "source_ptr": 1,
                    "src_ptr": 2
                },
                "puVar3": {
                    "dest_ptr": 1,
                    "dst_ptr": 2,
                    "src_next": 1,
                    "src_ptr": 25,
                    "src_ptr_temp": 1
                },
                "puVar4": {
                    "copy_end": 1,
                    "copy_ptr": 5,
                    "curr_dest": 1,
                    "dest_end": 4,
                    "dest_end_ptr": 4,
                    "end_dest_ptr": 1,
                    "end_ptr": 1,
                    "shifted_ptr": 1,
                    "temp_ptr": 11,
                    "tmp_dest_ptr": 1
                },
                "puVar6": {
                    "copy_end": 3,
                    "dest_byte_ptr": 1,
                    "dest_bytes": 1,
                    "dest_end": 5,
                    "dest_end_byte": 2,
                    "dest_end_byte_ptr": 1,
                    "end_src_ptr": 1,
                    "src_end": 1,
                    "src_end_ptr": 1,
                    "temp": 2,
                    "temp_byte": 3,
                    "temp_char": 4,
                    "temp_mem": 1,
                    "temp_ptr": 2,
                    "temp_ptr_byte": 1,
                    "tmp_src_ptr": 1
                },
                "uVar10": {
                    "remaining_bytes_final": 1
                },
                "uVar5": {
                    "calculated_size": 1,
                    "copy_count": 2,
                    "copy_len": 1,
                    "copy_size": 1,
                    "remainder": 2,
                    "remaining": 5,
                    "remaining_bytes": 1,
                    "remaining_length": 2,
                    "remaining_size": 6,
                    "shift_size": 1,
                    "temp": 2,
                    "temp_count": 2,
                    "temp_size": 3,
                    "tmp_size": 1
                },
                "uVar7": {
                    "copy_bytes": 1,
                    "extra": 1,
                    "extra_size": 1,
                    "mod_size": 1,
                    "offset": 1,
                    "rem_length": 1,
                    "remainder": 9,
                    "remainder_copy": 1,
                    "remainder_size": 2,
                    "remaining": 1,
                    "remaining_bytes": 2,
                    "remaining_length": 1,
                    "remaining_size": 2,
                    "remaining_size_temp": 1,
                    "source_alignment_byte": 1,
                    "src_bytes_copy": 1,
                    "temp_remainder": 1,
                    "tmp_count": 1
                },
                "uVar8": {
                    "remaining_bytes_aligned": 1
                },
                "uVar9": {
                    "remaining_bytes_unaligned": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "code": "\nvoid reverse_copy_memory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  undefined *dest_end;\n  uint remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    dest_end = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        dest_end = dest_end + -1;\n        *dest_end = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    remaining_size = remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        remaining_size = remaining_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < remaining_size);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "current_name": "reverse_copy_memory_00082438",
            "entrypoint": "0x00082438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082438": "reverse_copy_memory_00082438",
                "iVar1": "index",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "dest_end",
                "uVar5": "remaining_size",
                "uVar7": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082504": {
            "additional_data": {
                "FUN_00082504": {
                    "copy_and_fill_memory": 1,
                    "copy_bytes": 1,
                    "copy_data": 1,
                    "fill_buffer": 2,
                    "fill_buffer_with_byte": 1,
                    "fill_memory": 2,
                    "fill_memory_with_byte": 5,
                    "fill_memory_with_pattern": 1,
                    "initialize_memory": 2,
                    "memcpy_with_padding": 1,
                    "memset": 6,
                    "memset_memory": 1,
                    "memset_pattern": 1,
                    "memset_with_length": 1,
                    "memset_with_offset": 1,
                    "memset_with_padding": 1,
                    "memset_with_value": 1,
                    "write_pattern": 1,
                    "write_repeated_value": 1
                },
                "LAB_00082580": {
                    "handle_remainder": 1,
                    "skip_loop": 1
                },
                "bVar5": {
                    "count_zero": 1,
                    "end_reached": 1,
                    "is_length_zero": 1,
                    "is_size_zero": 4,
                    "is_zero": 14,
                    "is_zero_length": 1,
                    "is_zero_size": 8,
                    "size_is_zero": 1
                },
                "param_1": {
                    "buffer": 4,
                    "dest": 9,
                    "destination": 12,
                    "dst": 1,
                    "memory": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "output": 1,
                    "ptr": 1
                },
                "param_2": {
                    "byte": 2,
                    "byte_to_copy": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "fill_value": 1,
                    "pattern": 3,
                    "src": 1,
                    "value": 20
                },
                "param_3": {
                    "byte_count": 1,
                    "count": 3,
                    "length": 4,
                    "num": 1,
                    "num_bytes": 3,
                    "num_elements": 1,
                    "size": 18
                },
                "puVar1": {
                    "curr_dest": 1,
                    "current_ptr": 3,
                    "dest_ptr": 20,
                    "dst_ptr": 1,
                    "output_ptr": 1,
                    "p_buffer": 1,
                    "pointer1": 1,
                    "ptr": 2,
                    "ptr1": 1
                },
                "puVar2": {
                    "dest_ptr": 1,
                    "dest_ptr2": 1,
                    "next_dest": 2,
                    "next_dest_ptr": 7,
                    "next_dst_ptr": 1,
                    "next_output_ptr": 1,
                    "next_ptr": 13,
                    "p_next_buffer": 1,
                    "pointer2": 1,
                    "ptr2": 1,
                    "temp_ptr": 2
                },
                "uVar3": {
                    "block": 1,
                    "byte_pattern": 1,
                    "byte_value": 1,
                    "fill_value": 5,
                    "fill_value32": 1,
                    "filled_value": 1,
                    "memcpy_value": 1,
                    "merged_value": 1,
                    "pattern": 5,
                    "pattern32": 1,
                    "pattern_repeated": 1,
                    "pattern_u_var": 1,
                    "u_value": 1,
                    "value32": 4,
                    "value_32": 3,
                    "value_concat": 1,
                    "value_rep": 1,
                    "word_value": 1
                },
                "uVar4": {
                    "count": 1,
                    "loop_counter": 1,
                    "remainder": 1,
                    "remaining": 2,
                    "remaining_bytes": 3,
                    "remaining_count": 2,
                    "remaining_elements": 1,
                    "remaining_length": 3,
                    "remaining_size": 12,
                    "size_32": 1,
                    "size_u_var": 1,
                    "temp_size": 2,
                    "u_count": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083b14",
                "FUN_000813a8"
            ],
            "code": "\nvoid fill_buffer_with_byte_00082504(undefined4 *destination,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_ptr;\n  undefined4 pattern;\n  uint remaining_size;\n  bool is_zero;\n  \n  if (((uint)destination & 3) != 0) {\n    is_zero = size == 0;\n    dest_ptr = destination;\n    size = size - 1;\n    if (is_zero) {\n      return;\n    }\n    while( true ) {\n      destination = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)destination & 3) == 0) break;\n      is_zero = size == 0;\n      dest_ptr = destination;\n      size = size - 1;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    pattern = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = destination;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = pattern;\n        dest_ptr[1] = pattern;\n        dest_ptr[2] = pattern;\n        dest_ptr[3] = pattern;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)destination + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      destination = destination + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = destination;\n      if (size < 4) goto skip_loop;\n    }\n    do {\n      size = size - 4;\n      *destination = pattern;\n      destination = destination + 1;\n    } while (3 < size);\n    destination = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nskip_loop:\n  if (size != 0) {\n    dest_ptr = destination;\n    do {\n      next_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_ptr;\n    } while (next_ptr != (undefined4 *)(size + (int)destination));\n  }\n  return;\n}\n\n",
            "current_name": "fill_buffer_with_byte_00082504",
            "entrypoint": "0x00082504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082504": "fill_buffer_with_byte_00082504",
                "LAB_00082580": "skip_loop",
                "bVar5": "is_zero",
                "param_1": "destination",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_ptr",
                "uVar3": "pattern",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082598": {
            "called": [],
            "calling": [
                "FUN_00081e14",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_000825b0"
            ],
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00082598",
            "entrypoint": "0x00082598",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008259c": {
            "called": [],
            "calling": [
                "FUN_00081e14",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_000825b0"
            ],
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008259c",
            "entrypoint": "0x0008259c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000825a0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "relocation_table": 1
                },
                "FUN_000825a0": {
                    "execute_relocation": 2,
                    "initialize_rel_offset": 1,
                    "parse_elf32_rel_entry": 1,
                    "perform_relocation": 1,
                    "process_elf32_rel": 2,
                    "process_elf32_rel_array": 2,
                    "process_elf32_rel_array_entry": 2,
                    "process_elf32_rel_entry": 1,
                    "process_elf32_relocation": 1,
                    "process_elf_rel": 1,
                    "process_elf_relocation": 1,
                    "process_rel": 1,
                    "process_relocation": 10,
                    "process_relocation_entry": 4,
                    "process_relocations": 1
                },
                "FUN_000825b0": {
                    "apply_relocation": 10,
                    "perform_relocation": 4,
                    "perform_specific_relocation": 1,
                    "process_elf32_rel": 1,
                    "process_elf32_rel_array_entry": 1,
                    "process_elf32_rel_entry": 2,
                    "process_rel_array": 1,
                    "process_rel_entry": 1,
                    "process_rel_offset": 1,
                    "process_relocation": 3,
                    "process_relocation_entry": 1,
                    "process_relocation_internal": 1
                },
                "param_1": {
                    "entries": 1,
                    "entry_offset": 1,
                    "entry_ptr": 1,
                    "offset": 4,
                    "offset_array": 1,
                    "offset_ptr": 2,
                    "p1": 1,
                    "param1": 1,
                    "param_1": 1,
                    "r_offset": 3,
                    "rel_array": 2,
                    "rel_offset": 2,
                    "rel_offset_ptr": 1,
                    "relocation_array": 4,
                    "relocation_entry": 1,
                    "relocation_offset": 3,
                    "relocation_table": 2
                },
                "param_2": {
                    "arg1": 1,
                    "p2": 1,
                    "param1": 5,
                    "param2": 10,
                    "param_1": 4,
                    "param_2": 8,
                    "param_ptr": 1,
                    "source_address": 1
                },
                "param_3": {
                    "p3": 1,
                    "param2": 2,
                    "param3": 11,
                    "param_2": 2,
                    "param_3": 8,
                    "size": 1
                },
                "r_offset": {
                    "relocation_offset": 1
                }
            },
            "called": [
                "FUN_000825b0"
            ],
            "calling": [
                "FUN_00081622"
            ],
            "code": "\nvoid process_relocation_entry_000825a0(undefined4 offset,undefined4 param2)\n\n{\n  FUN_000825b0(relocation_table[140].relocation_offset,offset,param2);\n  return;\n}\n\n",
            "current_name": "process_relocation_entry_000825a0",
            "entrypoint": "0x000825a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_000825a0": "process_relocation_entry_000825a0",
                "param_1": "offset",
                "param_2": "param2",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825b0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array_pointer": 1,
                    "header_data": 1,
                    "relocation_array": 2
                },
                "FUNC_00082598": {
                    "initialize": 1,
                    "initialize_function_1": 1
                },
                "FUNC_0008259c": {
                    "cleanup": 1,
                    "initialize_function_2": 1
                },
                "FUN_00081e14": {
                    "allocate_new_memory": 1,
                    "allocate_new_memory_block": 2
                },
                "FUN_00082438": {
                    "copy_memory_block": 1
                },
                "FUN_00082598": {
                    "initialize_memory_block": 1
                },
                "FUN_0008259c": {
                    "cleanup_memory_block": 1
                },
                "FUN_000825b0": {
                    "allocate_memory": 4,
                    "allocate_memory_block": 1,
                    "decompress_and_update_ptr": 1,
                    "reallocate_memory": 3,
                    "rearrange_memory_block": 1,
                    "resize_memory": 1
                },
                "FUN_00083d9c": {
                    "free_memory_block": 1
                },
                "dVar1": {
                    "dest_var": 1,
                    "dynamic_var1": 1,
                    "index": 1,
                    "offset": 3,
                    "relocation_info": 1,
                    "temp": 1,
                    "temp1": 4,
                    "temp3": 1,
                    "temp_d_var": 1,
                    "temp_d_word": 1,
                    "temp_dword": 1,
                    "temp_value": 1,
                    "temp_var1": 4,
                    "temp_var3": 2,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temporary_variable_1": 1,
                    "tmp_var1": 1,
                    "var_d_index": 1
                },
                "iVar4": {
                    "current_offset": 1,
                    "first_relocation": 1,
                    "first_value": 1,
                    "i_var1": 1,
                    "index": 1,
                    "int_var1": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp_i_var": 2,
                    "temp_int1": 1,
                    "temp_value2": 1,
                    "temp_var1": 3,
                    "temp_var2": 3,
                    "temp_var3": 3,
                    "temp_var4": 2,
                    "temporary_variable_3": 1,
                    "tmp_var3": 1,
                    "var4": 1,
                    "var_i_index1": 1
                },
                "iVar6": {
                    "i_var2": 1,
                    "int_var2": 1,
                    "next_relocation": 1,
                    "second_value": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp6": 1,
                    "temp_i_var2": 2,
                    "temp_index": 1,
                    "temp_int2": 1,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_var5": 3,
                    "temp_var6": 2,
                    "temporary_variable_4": 1,
                    "tmp_var4": 1,
                    "var6": 1,
                    "var_i_index2": 1
                },
                "pVar2": {
                    "var_p_new_pointer2": 1
                },
                "pVar7": {
                    "var_p_new_pointer": 1
                },
                "param_1": {
                    "arg1": 2,
                    "array_pointer": 1,
                    "buffer": 1,
                    "config_data": 1,
                    "function_pointer": 1,
                    "input_array": 6,
                    "input_buffer": 1,
                    "input_data": 2,
                    "input_list": 1,
                    "input_pointer": 2,
                    "memory_block": 1,
                    "output_buffer": 1,
                    "output_ptr": 1,
                    "param": 1,
                    "param_array": 5,
                    "param_list": 1,
                    "param_ptr": 1,
                    "parameter1": 1,
                    "ptr_param": 1
                },
                "param_2": {
                    "allocated_memory": 2,
                    "arg2": 2,
                    "array_pointer": 1,
                    "buffer": 2,
                    "data_array": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "existing_block": 1,
                    "existing_memory": 1,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_ptr": 1,
                    "mem_block": 2,
                    "memory_block": 3,
                    "memory_pointer": 1,
                    "old_memory": 1,
                    "output_array": 3,
                    "output_buffer": 2,
                    "parameter2": 1,
                    "ptr": 1,
                    "ptr_array": 1
                },
                "param_3": {
                    "arg3": 2,
                    "array_length": 1,
                    "array_size": 2,
                    "block_size": 1,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "count": 1,
                    "data_size": 4,
                    "input_length": 1,
                    "input_size": 1,
                    "mem_size": 1,
                    "memory_size": 2,
                    "new_block_size": 1,
                    "new_size": 1,
                    "parameter3": 1,
                    "size": 10
                },
                "piVar10": {
                    "adjusted_buffer_pointer": 1,
                    "new_block_start": 1,
                    "new_memory_block": 1,
                    "new_pointer3": 1,
                    "new_ptr": 1,
                    "pointer_2": 1,
                    "ptr_var3": 1,
                    "result": 1,
                    "result_memory": 1,
                    "return_value": 1,
                    "temp10": 1,
                    "temp2": 1,
                    "temp9": 1,
                    "temp_array": 1,
                    "temp_array2": 2,
                    "temp_array_ptr2": 1,
                    "temp_buffer2": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 3,
                    "temp_ptr1": 1,
                    "temp_ptr2": 4,
                    "temp_var10": 2,
                    "temp_var8": 1,
                    "tmp_ptr2": 1
                },
                "piVar2": {
                    "allocated_ptr": 1,
                    "block_pointer": 1,
                    "new_block_end": 1,
                    "new_memory": 2,
                    "new_memory_block": 1,
                    "new_output_buffer": 1,
                    "new_pointer1": 1,
                    "new_ptr": 1,
                    "output_ptr": 1,
                    "ptr_var1": 1,
                    "result": 7,
                    "result_array": 4,
                    "result_buffer": 1,
                    "result_pointer": 3,
                    "result_ptr": 2,
                    "return_array_pointer": 1,
                    "temp2": 1,
                    "temp_var2": 1
                },
                "piVar7": {
                    "block_end": 1,
                    "new_pointer": 1,
                    "new_pointer2": 1,
                    "new_variable": 1,
                    "pointer_1": 1,
                    "ptr_var2": 1,
                    "temp1": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_array": 1,
                    "temp_array1": 1,
                    "temp_array_ptr": 1,
                    "temp_buffer1": 1,
                    "temp_memory": 1,
                    "temp_memory_block": 1,
                    "temp_pointer": 3,
                    "temp_pointer1": 1,
                    "temp_ptr": 4,
                    "temp_ptr1": 3,
                    "temp_result_array": 1,
                    "temp_var5": 1,
                    "temp_var7": 2,
                    "tmp_ptr1": 1
                },
                "uVar3": {
                    "aligned_size": 1,
                    "allocated_size": 1,
                    "block_size": 1,
                    "flag": 1,
                    "rel_offset": 1,
                    "relocation_size": 1,
                    "section_size": 1,
                    "size1": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp3": 1,
                    "temp_size": 1,
                    "temp_u_var": 2,
                    "temp_uint": 1,
                    "temp_var1": 4,
                    "temp_var2": 3,
                    "temp_var3": 2,
                    "temporary_variable_2": 1,
                    "tmp_var2": 1,
                    "updated_size": 1,
                    "var_u_diff": 1
                },
                "uVar5": {
                    "alloc_size": 1,
                    "allocated_size": 1,
                    "block_size": 1,
                    "buffer_size": 2,
                    "byte_value": 1,
                    "data_value": 1,
                    "flag": 1,
                    "flags": 1,
                    "header_value": 1,
                    "input_buffer_length": 1,
                    "input_size": 1,
                    "old_size": 1,
                    "old_value": 1,
                    "original_size": 1,
                    "param_2_size": 1,
                    "size_minus_header": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_u_var2": 1,
                    "temp_uint2": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var4": 3,
                    "temp_var5": 2,
                    "var_u_size": 1
                },
                "uVar8": {
                    "adjusted_block_size": 1,
                    "adjusted_buffer_size": 1,
                    "adjusted_size": 1,
                    "aligned_input_size": 1,
                    "aligned_size": 2,
                    "block_size": 1,
                    "current_size": 1,
                    "diff_size": 1,
                    "new_buffer_size": 1,
                    "new_size": 2,
                    "remaining_size": 2,
                    "remaining_space": 1,
                    "size_var1": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_u_var2": 1,
                    "temp_u_var3": 1,
                    "temp_uint3": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var6": 4,
                    "temp_var8": 2,
                    "var_u_size_aligned": 1
                },
                "uVar9": {
                    "adjusted_section_size": 1,
                    "aligned_final_size": 1,
                    "aligned_size": 8,
                    "aligned_size_limit": 1,
                    "allocated_size": 1,
                    "new_aligned_size": 1,
                    "rounded_new_size": 1,
                    "rounded_size": 1,
                    "size2": 1,
                    "size_var2": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_u_var4": 1,
                    "temp_uint4": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 4,
                    "temp_var9": 2,
                    "var_u_aligned_size": 1
                }
            },
            "called": [
                "FUN_00081e14",
                "FUN_00083d9c",
                "FUN_00082438",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "code": "\nint * allocate_memory_block_000825b0(undefined4 *input_array,int *memory_block,uint size)\n\n{\n  dword temp1;\n  int *result;\n  uint temp_var1;\n  int temp_var3;\n  uint temp_var4;\n  int temp_var5;\n  int *temp_ptr;\n  uint temp_var6;\n  uint aligned_size;\n  int *temp_ptr2;\n  \n  if (memory_block == (int *)0x0) {\n    result = (int *)FUN_00081e14(input_array,size);\n    return result;\n  }\n  FUNC_00082598();\n  temp_var4 = memory_block[-1];\n  temp_var6 = temp_var4 & 0xfffffffc;\n  result = memory_block + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto LAB_0008267c;\n  }\n  if (aligned_size < size) {\nLAB_0008267c:\n    *input_array = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)temp_var6 < (int)aligned_size) {\n    temp1 = (int)result + temp_var6;\n    if (relocation_array[141].r_info == temp1) {\n      temp_var1 = *(uint *)(relocation_array[141].r_info + 4) & 0xfffffffc;\n      temp1 = relocation_array[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp_var1 + temp_var6)) {\n        relocation_array[141].r_info = (int)result + aligned_size;\n        *(uint *)(relocation_array[141].r_info + 4) = (temp_var1 + temp_var6) - aligned_size | 1;\n        memory_block[-1] = aligned_size | memory_block[-1] & 1U;\n        FUNC_0008259c(input_array);\n        return memory_block;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp_var1 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp_var1 + temp_var6)) {\n        temp_var5 = *(int *)(temp1 + 0xc);\n        temp_var3 = *(int *)(temp1 + 8);\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var1 + temp_var6;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp_var1 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp_var4 << 0x1f)) {\n      temp_ptr2 = (int *)((int)result - memory_block[-2]);\n      temp_var4 = (temp_ptr2[1] & 0xfffffffcU) + temp_var6;\n      if (temp1 != 0) {\n        if (temp1 == relocation_array[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp_var1 + temp_var4)) {\n            result = temp_ptr2 + 2;\n            temp_var3 = *result;\n            temp_var5 = temp_ptr2[3];\n            temp_var6 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            if (temp_var6 < 0x25) {\n              temp_ptr = result;\n              if (0x13 < temp_var6) {\n                temp_ptr2[2] = *memory_block;\n                temp_ptr2[3] = memory_block[1];\n                if (temp_var6 < 0x1c) {\n                  memory_block = memory_block + 2;\n                  temp_ptr = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_block[2];\n                  temp_ptr2[5] = memory_block[3];\n                  if (temp_var6 == 0x24) {\n                    temp_ptr2[6] = memory_block[4];\n                    temp_ptr = memory_block + 5;\n                    memory_block = memory_block + 6;\n                    temp_ptr2[7] = *temp_ptr;\n                    temp_ptr = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_block = memory_block + 4;\n                    temp_ptr = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *temp_ptr = *memory_block;\n              temp_ptr[1] = memory_block[1];\n              temp_ptr[2] = memory_block[2];\n            }\n            else {\n              FUN_00082438(result,memory_block);\n            }\n            relocation_array[141].r_info = (int)temp_ptr2 + aligned_size;\n            *(uint *)(relocation_array[141].r_info + 4) = (temp_var1 + temp_var4) - aligned_size | 1;\n            temp_ptr2[1] = aligned_size | temp_ptr2[1] & 1U;\n            FUNC_0008259c(input_array);\n            return result;\n          }\n        }\n        else {\n          temp_var1 = temp_var1 + temp_var4;\n          if ((int)aligned_size <= (int)temp_var1) {\n            temp_var5 = *(int *)(temp1 + 0xc);\n            temp_var3 = *(int *)(temp1 + 8);\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_ptr = temp_ptr2 + 2;\n            temp_var3 = *temp_ptr;\n            temp_var5 = temp_ptr2[3];\n            temp_var4 = temp_var6 - 4;\n            *(int *)(temp_var3 + 0xc) = temp_var5;\n            *(int *)(temp_var5 + 8) = temp_var3;\n            temp_var6 = temp_var1;\n            if (temp_var4 < 0x25) {\n              result = temp_ptr;\n              if (0x13 < temp_var4) {\n                temp_ptr2[2] = *memory_block;\n                temp_ptr2[3] = memory_block[1];\n                if (temp_var4 < 0x1c) {\n                  memory_block = memory_block + 2;\n                  result = temp_ptr2 + 4;\n                }\n                else {\n                  temp_ptr2[4] = memory_block[2];\n                  temp_ptr2[5] = memory_block[3];\n                  if (temp_var4 == 0x24) {\n                    temp_ptr2[6] = memory_block[4];\n                    result = memory_block + 5;\n                    memory_block = memory_block + 6;\n                    temp_ptr2[7] = *result;\n                    result = temp_ptr2 + 8;\n                  }\n                  else {\n                    memory_block = memory_block + 4;\n                    result = temp_ptr2 + 6;\n                  }\n                }\n              }\n              *result = *memory_block;\n              result[1] = memory_block[1];\n              result[2] = memory_block[2];\n              temp_var4 = temp_ptr2[1];\n              result = temp_ptr2;\n              memory_block = temp_ptr;\n            }\n            else {\n              FUN_00082438(temp_ptr,memory_block);\n              temp_var4 = temp_ptr2[1];\n              result = temp_ptr2;\n              memory_block = temp_ptr;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)temp_var4) {\n        temp_ptr = temp_ptr2 + 2;\n        temp_var3 = *temp_ptr;\n        temp_var5 = temp_ptr2[3];\n        temp_var1 = temp_var6 - 4;\n        *(int *)(temp_var3 + 0xc) = temp_var5;\n        *(int *)(temp_var5 + 8) = temp_var3;\n        temp_var6 = temp_var4;\n        if (temp_var1 < 0x25) {\n          result = temp_ptr;\n          if (0x13 < temp_var1) {\n            temp_ptr2[2] = *memory_block;\n            temp_ptr2[3] = memory_block[1];\n            if (temp_var1 < 0x1c) {\n              memory_block = memory_block + 2;\n              result = temp_ptr2 + 4;\n            }\n            else {\n              temp_ptr2[4] = memory_block[2];\n              temp_ptr2[5] = memory_block[3];\n              if (temp_var1 == 0x24) {\n                temp_ptr2[6] = memory_block[4];\n                result = memory_block + 5;\n                memory_block = memory_block + 6;\n                temp_ptr2[7] = *result;\n                result = temp_ptr2 + 8;\n              }\n              else {\n                memory_block = memory_block + 4;\n                result = temp_ptr2 + 6;\n              }\n            }\n          }\n          *result = *memory_block;\n          result[1] = memory_block[1];\n          result[2] = memory_block[2];\n          temp_var4 = temp_ptr2[1];\n          result = temp_ptr2;\n          memory_block = temp_ptr;\n        }\n        else {\n          FUN_00082438(temp_ptr,memory_block);\n          temp_var4 = temp_ptr2[1];\n          result = temp_ptr2;\n          memory_block = temp_ptr;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp_ptr2 = (int *)FUN_00081e14(input_array,size);\n    if (temp_ptr2 == (int *)0x0) goto LAB_000826a4;\n    temp_var4 = memory_block[-1];\n    if (temp_ptr2 + -2 != (int *)((temp_var4 & 0xfffffffe) + (int)result)) {\n      temp_var6 = temp_var6 - 4;\n      if (temp_var6 < 0x25) {\n        result = memory_block;\n        temp_ptr = temp_ptr2;\n        if (0x13 < temp_var6) {\n          *temp_ptr2 = *memory_block;\n          temp_ptr2[1] = memory_block[1];\n          if (temp_var6 < 0x1c) {\n            result = memory_block + 2;\n            temp_ptr = temp_ptr2 + 2;\n          }\n          else {\n            temp_ptr2[2] = memory_block[2];\n            temp_ptr2[3] = memory_block[3];\n            if (temp_var6 == 0x24) {\n              temp_ptr2[4] = memory_block[4];\n              temp_ptr2[5] = memory_block[5];\n              result = memory_block + 6;\n              temp_ptr = temp_ptr2 + 6;\n            }\n            else {\n              result = memory_block + 4;\n              temp_ptr = temp_ptr2 + 4;\n            }\n          }\n        }\n        *temp_ptr = *result;\n        temp_ptr[1] = result[1];\n        temp_ptr[2] = result[2];\n      }\n      else {\n        FUN_00082438(temp_ptr2,memory_block);\n      }\n      FUN_00083d9c(input_array,memory_block);\n      goto LAB_000826a4;\n    }\n    temp_var6 = temp_var6 + (temp_ptr2[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp_var1 = temp_var6 - aligned_size;\n  temp_ptr2 = memory_block;\n  if (temp_var1 < 0x10) {\n    result[1] = temp_var4 & 1 | temp_var6;\n    *(uint *)((int)result + temp_var6 + 4) = *(uint *)((int)result + temp_var6 + 4) | 1;\n  }\n  else {\n    result[1] = temp_var4 & 1 | aligned_size;\n    *(uint *)((int)result + aligned_size + 4) = temp_var1 | 1;\n    *(uint *)((int)result + temp_var1 + aligned_size + 4) = *(uint *)((int)result + temp_var1 + aligned_size + 4) | 1;\n    FUN_00083d9c(input_array,(int)result + aligned_size + 8);\n  }\nLAB_000826a4:\n  FUNC_0008259c(input_array);\n  return temp_ptr2;\n}\n\n",
            "current_name": "allocate_memory_block_000825b0",
            "entrypoint": "0x000825b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000825b0": "allocate_memory_block_000825b0",
                "dVar1": "temp1",
                "iVar4": "temp_var3",
                "iVar6": "temp_var5",
                "param_1": "input_array",
                "param_2": "memory_block",
                "param_3": "size",
                "piVar10": "temp_ptr2",
                "piVar2": "result",
                "piVar7": "temp_ptr",
                "uVar3": "temp_var1",
                "uVar5": "temp_var4",
                "uVar8": "temp_var6",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082970": {
            "additional_data": {
                "DAT_200711bc": {
                    "saved_value": 1,
                    "stored_value": 1
                },
                "FUN_00082970": {
                    "check_and_assign_value": 2,
                    "check_and_update_value": 2,
                    "extract_information": 1,
                    "extract_integer_from_binary": 1,
                    "extract_return_value": 2,
                    "find_and_set_error": 1,
                    "find_data_in_binary": 1,
                    "find_error_code": 2,
                    "initialize": 1,
                    "process_data": 5,
                    "process_result": 1,
                    "resolve_error": 1,
                    "reverse_and_assign_value": 1,
                    "reverse_and_save_value": 1,
                    "reverse_and_set_value": 1,
                    "update_param_if_error": 1,
                    "update_parameter": 1,
                    "update_variable_if_negative": 1
                },
                "iVar1": {
                    "error_code": 3,
                    "evaluation_result": 1,
                    "function_result": 1,
                    "result": 9,
                    "return_value": 5,
                    "search_result": 1,
                    "status": 1,
                    "status_check": 1
                },
                "param_1": {
                    "error_code": 1,
                    "new_value": 1,
                    "output": 5,
                    "output_ptr": 1,
                    "output_value": 4,
                    "result": 11,
                    "result_pointer": 3,
                    "result_ptr": 2,
                    "return_value": 2,
                    "updated_variable": 1
                },
                "param_2": {
                    "data_to_find": 1,
                    "error_code": 1,
                    "input": 8,
                    "input_parameter": 1,
                    "input_value": 19,
                    "value": 1
                }
            },
            "called": [
                "FUN_0008118c"
            ],
            "calling": [
                "FUN_00081e14",
                "FUN_00083d00"
            ],
            "code": "\nvoid process_data_00082970(int *result,undefined4 input_value)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_0008118c(input_value);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00082970",
            "entrypoint": "0x00082970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082970": "process_data_00082970",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082994": {
            "additional_data": {
                "FUN_00082994": {
                    "copy_and_terminate_string": 1,
                    "copy_string": 24,
                    "copy_string_with_alignment": 2,
                    "copy_string_with_alignment_check": 2,
                    "copy_string_with_bounds_check": 1,
                    "copy_string_with_offset": 1
                },
                "LAB_000829f8": {
                    "alignment_check": 1,
                    "check_alignment": 1,
                    "check_conditions": 1,
                    "end_of_loop": 1
                },
                "bVar8": {
                    "is_end_of_string": 1,
                    "is_nonzero": 1,
                    "is_null": 1,
                    "is_short_equal_to_zero": 1,
                    "is_short_null": 1,
                    "is_short_zero": 2,
                    "is_zero": 8,
                    "is_zero_byte": 11,
                    "is_zero_terminated": 1,
                    "short_is_zero": 1,
                    "zero_byte_found": 1
                },
                "cVar1": {
                    "ch": 1,
                    "char_value": 1,
                    "character": 1,
                    "current_char": 23,
                    "current_character": 1
                },
                "param_1": {
                    "dest": 13,
                    "destination": 18
                },
                "param_2": {
                    "source": 18,
                    "src": 13
                },
                "puVar3": {
                    "current_source": 1,
                    "current_uint_ptr": 1,
                    "next_int_ptr": 1,
                    "next_pointer": 2,
                    "next_ptr": 1,
                    "next_source": 4,
                    "next_source_32bit_ptr": 1,
                    "next_src": 4,
                    "next_src1": 1,
                    "next_uint_pointer": 1,
                    "next_uint_ptr": 1,
                    "next_word": 1,
                    "ptr_incremented": 1,
                    "source_ptr": 2,
                    "src_ptr": 2,
                    "temp_pointer": 3,
                    "temp_pointer1": 2,
                    "temp_ptr": 1,
                    "temp_source": 1
                },
                "puVar4": {
                    "aligned_source": 1,
                    "current_pointer": 1,
                    "current_source_aligned": 1,
                    "current_uint_ptr2": 1,
                    "next_byte": 1,
                    "next_dest": 4,
                    "next_ptr": 1,
                    "next_short_ptr": 1,
                    "next_source_16bit_ptr": 1,
                    "next_source_aligned": 3,
                    "next_src2": 1,
                    "next_src_word_aligned": 1,
                    "next_uint_pointer": 1,
                    "next_uint_ptr2": 1,
                    "ptr_modified": 1,
                    "source_ptr2": 1,
                    "source_ptr_aligned": 1,
                    "src_ptr": 1,
                    "src_ptr_aligned": 1,
                    "temp_dest": 1,
                    "temp_pointer2": 4,
                    "temp_pointer_2": 1,
                    "temp_ptr2": 1
                },
                "puVar7": {
                    "current_dest": 4,
                    "current_destination": 1,
                    "current_pointer": 1,
                    "dest_modified": 1,
                    "dest_ptr": 6,
                    "dest_temp_pointer": 1,
                    "destination_pointer": 3,
                    "destination_ptr": 4,
                    "destination_word": 1,
                    "modified_destination": 1,
                    "next_dest": 2,
                    "next_dest_32bit_ptr": 1,
                    "next_destination": 2,
                    "next_destination_aligned": 1,
                    "next_uint_ptr3": 1,
                    "temp_pointer3": 1
                },
                "uVar2": {
                    "current_char": 1,
                    "current_char_16bit": 1,
                    "current_char_short": 1,
                    "current_char_u_short": 1,
                    "current_short": 17,
                    "current_ushort": 4,
                    "short_value": 1,
                    "temp": 1,
                    "ushort_value": 1,
                    "ushort_var": 1
                },
                "uVar5": {
                    "current_char": 1,
                    "current_int": 3,
                    "current_u_int": 1,
                    "current_uint": 8,
                    "current_value": 2,
                    "current_value1": 1,
                    "current_word": 11,
                    "first_word": 1,
                    "src_value": 1,
                    "temp_data": 1,
                    "value": 1
                },
                "uVar6": {
                    "current_byte": 3,
                    "current_char_u_short_modified": 1,
                    "current_int_rotated": 1,
                    "current_uint": 1,
                    "current_uint2": 1,
                    "current_uint_shifted": 1,
                    "current_value": 1,
                    "current_value2": 1,
                    "current_word": 2,
                    "current_word_reversed": 1,
                    "shifted_uint": 2,
                    "shifted_value": 1,
                    "shifted_word": 1,
                    "temp": 3,
                    "temp_char": 1,
                    "temp_data2": 1,
                    "temp_int": 2,
                    "temp_u_int": 1,
                    "temp_uint": 3,
                    "temp_value": 1,
                    "temp_word": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid copy_string_with_alignment_check_00082994(uint *destination,uint *source)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_source;\n  uint *next_dest;\n  uint current_word;\n  uint temp_uint;\n  uint *dest_ptr;\n  bool is_zero_byte;\n  \n  if ((((uint)destination ^ (uint)source) & 3) != 0) {\n    do {\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      source = (uint *)((int)source + 1);\n      destination = (uint *)((int)destination + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)source & 3) != 0) {\n    next_dest = source;\n    if (((uint)source & 1) != 0) {\n      next_dest = (uint *)((int)source + 1);\n      current_char = *(char *)source;\n      *(char *)destination = current_char;\n      destination = (uint *)((int)destination + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    source = next_dest;\n    if (((uint)next_dest & 2) != 0) {\n      source = (uint *)((int)next_dest + 2);\n      current_short = *(ushort *)next_dest;\n      is_zero_byte = (current_short & 0xff) == 0;\n      if (is_zero_byte) {\n        *(char *)destination = (char)current_short;\n      }\n      else {\n        *(ushort *)destination = current_short;\n        is_zero_byte = (current_short & 0xff00) == 0;\n        destination = (uint *)((int)destination + 2);\n      }\n      if (is_zero_byte) {\n        return;\n      }\n    }\n  }\n  current_word = *source;\n  next_dest = source + 1;\n  dest_ptr = destination;\n  if (((uint)source & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto check_conditions;\n    dest_ptr = destination + 1;\n    *destination = current_word;\n    next_dest = source + 2;\n    current_word = source[1];\n  }\n  while( true ) {\n    next_source = next_dest + 1;\n    temp_uint = *next_dest;\n    destination = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    destination = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp_uint;\n    if ((temp_uint + 0xfefefeff & ~temp_uint & 0x80808080) != 0) break;\n    next_dest = next_dest + 2;\n    current_word = *next_source;\n    dest_ptr = dest_ptr + 2;\n    *destination = temp_uint;\n  }\ncheck_conditions:\n  do {\n    *(char *)destination = (char)current_word;\n    temp_uint = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    destination = (uint *)((int)destination + 1);\n  } while (temp_uint != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_with_alignment_check_00082994",
            "entrypoint": "0x00082994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "LAB_000829f8": "check_conditions",
                "bVar8": "is_zero_byte",
                "cVar1": "current_char",
                "param_1": "destination",
                "param_2": "source",
                "puVar3": "next_source",
                "puVar4": "next_dest",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "temp_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082a50": {
            "additional_data": {
                "FUN_00082a50": {
                    "calculate_string_len": 1,
                    "count_leading_zeroes": 2,
                    "count_leading_zeros": 15,
                    "count_non_zero_bytes": 1,
                    "count_num_leading_zeroes": 1,
                    "count_trailing_zeroes": 3,
                    "count_trailing_zeros": 5,
                    "find_last_non_zero_byte_index": 1,
                    "get_non_zero_byte_count": 1,
                    "get_number_of_leading_zeros": 1
                },
                "bVar4": {
                    "check_zero": 1,
                    "found_zero": 1,
                    "is_byte_zero": 1,
                    "is_zero": 24,
                    "is_zero_byte": 2
                },
                "iVar1": {
                    "count": 5,
                    "last_non_zero_byte_index": 1,
                    "leading_zeroes": 2,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 15,
                    "leading_zeros_count": 1,
                    "length": 1,
                    "num_zeroes": 1,
                    "trailing_zero_count": 1,
                    "trailing_zeroes_count": 1,
                    "trailing_zeros": 1,
                    "trailing_zeros_count": 1
                },
                "param_1": {
                    "input": 19,
                    "input_value": 4,
                    "num": 2,
                    "number": 1,
                    "str": 1,
                    "value": 4
                },
                "puVar2": {
                    "input_ptr": 1,
                    "p_input": 1,
                    "p_value": 1,
                    "ptr": 22,
                    "ptr_input": 1,
                    "ptr_int": 1,
                    "ptr_number": 1,
                    "ptr_to_input": 1,
                    "ptr_value": 1,
                    "word_ptr": 1
                },
                "uVar3": {
                    "current_byte": 1,
                    "current_number": 1,
                    "current_value": 4,
                    "current_word": 1,
                    "mask": 1,
                    "masked_value": 1,
                    "temp": 1,
                    "value": 18,
                    "word": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "code": "\nint count_leading_zeros_00082a50(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | 0xffffffffU >> ((leading_zeros + 4U & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_00082a50",
            "entrypoint": "0x00082a50",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "additional_data": {
                "FUN_00082ac0": {
                    "find_and_process_data": 1,
                    "process_data": 14,
                    "process_function": 1
                },
                "FUN_00083c40": {
                    "process_sub_function1": 1
                },
                "FUN_00083f34": {
                    "process_sub_function2": 1
                },
                "LAB_00082b00": {
                    "error_label": 1
                },
                "iVar2": {
                    "index_var": 2,
                    "iteration_var": 1,
                    "result": 23,
                    "return_value": 5
                },
                "param_1": {
                    "arg1": 8,
                    "data": 2,
                    "function_param": 1,
                    "input": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 1,
                    "param": 3,
                    "param1": 8,
                    "param_1": 1,
                    "some_parameter": 1,
                    "unknown_param": 1,
                    "unknown_parameter": 1
                },
                "param_2": {
                    "arg2": 8,
                    "count": 1,
                    "index": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "int_parameter": 1,
                    "num": 1,
                    "param": 1,
                    "param2": 8,
                    "param_2": 1,
                    "param_offset": 1,
                    "size": 4,
                    "size_of_param": 1
                },
                "param_3": {
                    "arg3": 7,
                    "array": 1,
                    "buffer": 1,
                    "data": 4,
                    "data_array": 1,
                    "data_ptr": 2,
                    "input_ptr": 1,
                    "int_double_pointer_parameter": 1,
                    "output_param": 1,
                    "param3": 7,
                    "param_3": 1,
                    "param_array": 3,
                    "parameter_array": 1
                },
                "piVar1": {
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "current_array": 1,
                    "current_data": 2,
                    "current_data_ptr": 1,
                    "current_output": 1,
                    "current_pointer": 1,
                    "current_ptr": 5,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "first_int_pointer": 1,
                    "pointer1": 1,
                    "pointer_var1": 3,
                    "ptr1": 9,
                    "ptr_index1": 1
                },
                "piVar3": {
                    "base_ptr": 1,
                    "current_input": 1,
                    "current_offset": 1,
                    "current_pointer": 2,
                    "loop_ptr": 1,
                    "param_value_ptr": 1,
                    "pointer": 1,
                    "pointer2": 1,
                    "pointer_var3": 3,
                    "previous_pointer": 1,
                    "ptr": 1,
                    "ptr2": 8,
                    "ptr3": 1,
                    "ptr_index2": 1,
                    "remaining_data": 2,
                    "remaining_data_ptr": 1,
                    "remaining_ptr": 2,
                    "second_int_pointer": 1,
                    "temp_ptr": 1
                },
                "puVar5": {
                    "current_address": 1,
                    "current_element": 1,
                    "current_item_ptr": 1,
                    "current_ptr": 1,
                    "current_val_ptr": 1,
                    "current_value": 2,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "nested_ptr": 1,
                    "pointer_var5": 3,
                    "ptr": 4,
                    "ptr3": 7,
                    "ptr5": 2,
                    "ptr_array": 1,
                    "ptr_to_data": 1,
                    "temp_ptr": 2,
                    "unknown_pointer": 1
                },
                "uVar4": {
                    "count": 4,
                    "count1": 1,
                    "counter": 9,
                    "counter_var": 1,
                    "first_uint_variable": 1,
                    "index": 7,
                    "iteration_count": 3,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "unsigned_var4": 2,
                    "var4": 1
                },
                "uVar6": {
                    "current_val": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "element_size": 1,
                    "first_uint_variable": 1,
                    "item": 1,
                    "param_value": 1,
                    "temp1": 2,
                    "temp_value": 2,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "unsigned_var6": 2,
                    "value": 7,
                    "value1": 6,
                    "value_var1": 1,
                    "var6": 1
                },
                "uVar7": {
                    "item_count": 1,
                    "loop_count": 2,
                    "num_elements": 1,
                    "second_uint_variable": 1,
                    "shifted_data_size": 1,
                    "shifted_val": 1,
                    "shifted_value": 9,
                    "shifted_value_var": 1,
                    "temp2": 2,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "unsigned_var7": 2,
                    "value2": 6,
                    "var7": 1
                }
            },
            "called": [
                "FUN_00083c40",
                "FUN_00083f34"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint find_and_process_data_00082ac0(undefined4 param1,int param2,int **arg3)\n\n{\n  int *ptr1;\n  int result;\n  int *ptr2;\n  uint counter;\n  undefined4 *ptr3;\n  uint value;\n  uint shifted_value;\n  \n  if (-1 < *(int *)(param2 + 100) << 0x12) {\n    result = FUN_00083f34();\n    arg3[2] = (int *)0x0;\n    arg3[1] = (int *)0x0;\n    return result;\n  }\n  ptr2 = arg3[2];\n  ptr1 = *arg3;\n  while (ptr2 != (int *)0x0) {\n    value = ptr1[1];\n    shifted_value = value >> 2;\n    if (shifted_value != 0) {\n      ptr3 = (undefined4 *)(*ptr1 + -4);\n      counter = 0;\n      do {\n        ptr3 = ptr3 + 1;\n        result = FUN_00083c40(param1,*ptr3,param2);\n        counter = counter + 1;\n        if (result == -1) goto error_label;\n      } while (shifted_value != counter);\n      ptr2 = arg3[2];\n    }\n    ptr2 = (int *)((int)ptr2 - (value & 0xfffffffc));\n    arg3[2] = ptr2;\n    ptr1 = ptr1 + 2;\n  }\n  result = 0;\nerror_label:\n  arg3[2] = (int *)0x0;\n  arg3[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "find_and_process_data_00082ac0",
            "entrypoint": "0x00082ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082ac0": "find_and_process_data_00082ac0",
                "LAB_00082b00": "error_label",
                "iVar2": "result",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "arg3",
                "piVar1": "ptr1",
                "piVar3": "ptr2",
                "puVar5": "ptr3",
                "uVar4": "counter",
                "uVar6": "value",
                "uVar7": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082b38": {
            "additional_data": {
                "FUN_00082a50": {
                    "do_something_function": 1
                },
                "FUN_00082ac0": {
                    "calculate_value_function": 1
                },
                "FUN_00082b38": {
                    "extract_formatting_data": 1,
                    "parse_data": 1,
                    "parse_format_string": 13,
                    "process_format_string": 1,
                    "process_params": 1,
                    "reverse_string_formatting": 1
                },
                "FUN_0008378c": {
                    "some_function": 1
                },
                "FUN_00083808": {
                    "check_value_function": 1
                },
                "FUN_00083b14": {
                    "warning_function": 1
                },
                "FUN_00084384": {
                    "process_value_function": 1
                },
                "FUN_00084750": {
                    "process_value_function2": 1
                },
                "bVar1": {
                    "boolean1": 1,
                    "boolean_var1": 1,
                    "flag1": 2,
                    "flag_space": 1,
                    "has_alternate_form": 1,
                    "has_flags": 1,
                    "has_left_justification": 1,
                    "has_width": 1,
                    "is_flag_minus": 1,
                    "is_flag_space": 1,
                    "is_hex": 1,
                    "is_long_long": 1,
                    "is_negative": 2,
                    "is_prefix_space": 1,
                    "is_propagation_algorithm_settling": 1,
                    "is_settled": 2,
                    "is_settling": 2,
                    "is_signed": 3,
                    "is_type_propagation_settled": 1
                },
                "bVar2": {
                    "boolean2": 1,
                    "boolean_var2": 1,
                    "flag2": 2,
                    "flag_plus": 1,
                    "has_precision": 1,
                    "has_sign": 1,
                    "has_sign_flag": 1,
                    "has_width": 2,
                    "is_flag_plus": 2,
                    "is_long": 1,
                    "is_negative": 1,
                    "is_numeric": 1,
                    "is_octal": 1,
                    "is_positive": 1,
                    "is_prefix_plus": 1,
                    "is_propagated": 1,
                    "is_signed": 1,
                    "is_string_value": 1,
                    "is_true": 1,
                    "is_type_propagation_settled2": 1,
                    "is_variable1_true": 1,
                    "var2": 1
                },
                "bVar26": {
                    "arg_neg_flag": 1,
                    "boolean5": 1,
                    "boolean_var5": 1,
                    "flag5": 1,
                    "flag6": 1,
                    "flag_negative": 1,
                    "has_long_flag": 1,
                    "is_decimal": 1,
                    "is_flag_hash": 1,
                    "is_flag_negative": 1,
                    "is_negative": 4,
                    "is_non_zero": 2,
                    "is_signed": 1,
                    "is_signed_temp": 1,
                    "is_true2": 1,
                    "is_type_propagation_settled5": 1,
                    "is_var26_set": 1,
                    "is_variable4_true": 1,
                    "param_used": 1,
                    "var26": 1
                },
                "bVar3": {
                    "boolean3": 1,
                    "boolean_var3": 1,
                    "flag3": 2,
                    "flag_sharp": 1,
                    "has_alternate_form": 1,
                    "has_hash_prefix": 1,
                    "has_padding": 1,
                    "has_precision": 1,
                    "is_algorithm_settled": 1,
                    "is_alternate_form": 1,
                    "is_display": 1,
                    "is_flag": 1,
                    "is_flag_sharp": 1,
                    "is_flag_space": 1,
                    "is_hash": 2,
                    "is_hex": 1,
                    "is_hex_value": 1,
                    "is_negative": 1,
                    "is_set": 1,
                    "is_type_propagation_settled3": 1,
                    "is_unsigned": 1,
                    "is_variable2_true": 1,
                    "var3": 1
                },
                "bVar5": {
                    "add_leading_zeros": 1,
                    "boolean4": 1,
                    "boolean_var4": 1,
                    "flag": 1,
                    "flag4": 1,
                    "flag5": 1,
                    "flag_zero": 1,
                    "has_length_modifier": 1,
                    "has_width": 1,
                    "has_zero_padding": 1,
                    "is_flag": 1,
                    "is_flag_set": 1,
                    "is_flag_zero": 2,
                    "is_length": 1,
                    "is_negative": 1,
                    "is_printable": 1,
                    "is_type_propagation_settled4": 1,
                    "is_var5_set": 1,
                    "is_variable3_true": 1,
                    "is_zero_pad": 1,
                    "is_zero_padded": 2,
                    "use_sign_padding": 1,
                    "var5": 1
                },
                "cStack_6a": {
                    "c_local_variable": 1,
                    "char_stack_6a": 1,
                    "char_var4": 1,
                    "display_param": 1,
                    "filler_char": 1,
                    "local_char2": 1,
                    "local_char5": 2,
                    "local_char_value5": 1,
                    "local_char_var2": 1,
                    "placeholder2": 1,
                    "temp_char": 2,
                    "temp_char2": 2,
                    "temp_char5": 1,
                    "temp_char_2": 1,
                    "temp_char_stack_item": 1,
                    "temp_local_char2": 1
                },
                "cVar17": {
                    "c": 1
                },
                "cVar26": {
                    "is_negative": 1
                },
                "cVar4": {
                    "char_val": 1,
                    "char_var": 3,
                    "char_var1": 1,
                    "char_variable": 1,
                    "character1": 1,
                    "character_var": 1,
                    "display_char": 1,
                    "fill_char": 1,
                    "flag_char": 2,
                    "format_char": 1,
                    "hash_prefix": 1,
                    "hash_value": 1,
                    "negative_sign": 1,
                    "padding_char": 1,
                    "padding_character": 1,
                    "sign_char": 3,
                    "sign_character": 1,
                    "temp_char": 2
                },
                "cVar9": {
                    "char1": 1,
                    "char_temp": 1,
                    "char_val2": 1,
                    "char_var2": 4,
                    "char_var9": 1,
                    "char_variable2": 1,
                    "character2": 1,
                    "current_char": 3,
                    "fmt_char": 1,
                    "format_char": 1,
                    "length_modifier": 1,
                    "next_char": 1,
                    "temp_char": 3,
                    "temp_char2": 1,
                    "temp_sign_character": 1,
                    "var9": 1,
                    "width_char": 1
                },
                "iVar15": {
                    "arg_index": 2,
                    "count": 1,
                    "counter2": 2,
                    "digit": 1,
                    "i": 2,
                    "i_var15": 1,
                    "index2": 1,
                    "int_value2": 1,
                    "int_var2": 1,
                    "integer_variable2": 1,
                    "loop_counter": 1,
                    "n": 1,
                    "nested_loop_variable": 1,
                    "new_var": 1,
                    "temp4": 1,
                    "temp_i": 1,
                    "temp_int": 1,
                    "temp_int2": 2,
                    "temp_var": 1,
                    "var15": 2,
                    "var5": 1,
                    "var_15": 1
                },
                "iVar17": {
                    "arg_count": 2,
                    "counter3": 1,
                    "format_stack_index": 1,
                    "i_var17": 1,
                    "index": 1,
                    "index3": 1,
                    "int_value3": 1,
                    "int_var3": 1,
                    "integer_variable3": 1,
                    "k": 1,
                    "loop_variable": 1,
                    "new_var2": 1,
                    "saved_result": 1,
                    "temp5": 1,
                    "temp_int2": 1,
                    "temp_int3": 1,
                    "temp_loop_counter": 1,
                    "temp_var2": 1,
                    "var17": 2,
                    "var6": 1,
                    "var_17": 1
                },
                "iVar19": {
                    "index": 1
                },
                "iVar8": {
                    "count": 1,
                    "counter": 2,
                    "format_index": 1,
                    "i": 1,
                    "index": 2,
                    "int_value1": 1,
                    "int_var": 1,
                    "integer_variable1": 1,
                    "num_args": 2,
                    "result": 9,
                    "return_value": 1,
                    "temp_int": 1,
                    "temp_int1": 1,
                    "var1": 1,
                    "var8": 1,
                    "var_8": 1
                },
                "lVar27": {
                    "arg_value": 2,
                    "combined_arg_index": 1,
                    "combined_integer_value": 1,
                    "combined_param": 1,
                    "combined_value": 1,
                    "combined_var": 1,
                    "concat_value": 1,
                    "concatenated_variable": 1,
                    "long_long": 1,
                    "long_long_val": 1,
                    "long_var": 3,
                    "long_var27": 2,
                    "long_variable": 1,
                    "longlong_value1": 1,
                    "temp_long": 2,
                    "temp_long_long": 2,
                    "value": 3
                },
                "local_64": {
                    "arg_ptr_array": 1,
                    "args_stack": 1,
                    "array_of_buffers": 1,
                    "dummy": 1,
                    "large_buffer": 1,
                    "local_arg_ptr_array": 1,
                    "local_array2": 1,
                    "local_pointer_array": 1,
                    "local_pointer_array1": 1,
                    "local_var_64": 1,
                    "output_param_heap": 1,
                    "ptr_array": 1,
                    "ptr_wrapper_array": 1,
                    "temp_array": 2,
                    "temp_buffers": 1,
                    "temp_local_array5": 1,
                    "temp_var_array2": 1
                },
                "local_68": {
                    "char_buffer": 1,
                    "character_array": 1,
                    "format_data_stack": 1,
                    "local_char_array_ptr2": 1,
                    "local_char_ptr_var2": 1,
                    "local_stack": 1,
                    "local_var_68": 1,
                    "param_ptrs": 1,
                    "parameters_array": 1,
                    "ptr_var68": 1,
                    "temp_address": 1,
                    "temp_arg_ptr_array": 1,
                    "temp_buffer": 1,
                    "temp_local_array4": 1,
                    "temp_var_array": 1
                },
                "local_69": {
                    "char_buffer": 1,
                    "char_stack_padding": 1,
                    "fill_char_stack_item": 1,
                    "format_char": 1,
                    "is_signed": 1,
                    "local_byte_variable4": 1,
                    "local_char6": 1,
                    "local_char_value6": 1,
                    "local_undef_var4": 1,
                    "local_var_69": 1,
                    "padding_char": 1,
                    "placeholder3": 1,
                    "temp_byte3": 1,
                    "temp_char": 1,
                    "temp_char_3": 1,
                    "temp_local_undefined5": 1,
                    "temp_var2": 1,
                    "undefined_var4": 1,
                    "use_padding": 1,
                    "zero_char": 1
                },
                "local_90": {
                    "arg_char": 1,
                    "arg_format_spec": 1,
                    "backup_storage": 1,
                    "current_data_size": 1,
                    "group_filler": 1,
                    "hex_prefix": 1,
                    "local_byte_variable3": 1,
                    "local_char3": 1,
                    "local_char4": 2,
                    "local_char_value4": 1,
                    "local_undef_var3": 1,
                    "local_undefined": 1,
                    "local_var_90": 1,
                    "num_result": 1,
                    "prefix_char": 1,
                    "saved_padding_char": 1,
                    "temp_char": 2,
                    "temp_local_undefined4": 1,
                    "temp_value3": 1,
                    "undefined_var3": 1,
                    "width": 1,
                    "width_char": 1,
                    "zero_padding": 1
                },
                "local_94": {
                    "arg_ptr": 1,
                    "arg_ptr_array_ptr": 1,
                    "arg_sizes": 1,
                    "grouped_formats": 1,
                    "local_pointer5": 3,
                    "local_pointer_var6": 1,
                    "local_ptr5": 1,
                    "local_temp2": 1,
                    "local_var_94": 1,
                    "local_variable7": 1,
                    "num_dynamic_args": 1,
                    "output_address_array": 1,
                    "output_buffer_pointer": 1,
                    "param_buffer": 1,
                    "param_ptr": 1,
                    "remaining_formats": 1,
                    "scan_format_args": 1,
                    "temp_format_data_ptr": 1,
                    "temp_local_int2": 1,
                    "total_buffer": 1,
                    "total_data_size": 1,
                    "total_param_bytes": 1,
                    "value_list": 1,
                    "var_pointer_array_sum": 1
                },
                "local_98": {
                    "arg_count": 4,
                    "format_data_i": 1,
                    "format_stack_index": 1,
                    "group_counter": 1,
                    "index": 1,
                    "local_count2": 1,
                    "local_counter3": 1,
                    "local_index1": 1,
                    "local_int_value2": 1,
                    "local_int_var2": 1,
                    "local_var2": 1,
                    "local_var_98": 1,
                    "local_variable6": 1,
                    "nested_loop_counter": 1,
                    "num_args": 1,
                    "num_params": 1,
                    "num_pointers": 1,
                    "num_position_args": 1,
                    "num_values": 1,
                    "output_format_counter": 1,
                    "param_index": 1,
                    "temp_local_int1": 1,
                    "var_pointer_count": 1
                },
                "local_99": {
                    "group_formatter": 1,
                    "placeholder1": 1
                },
                "local_9c": {
                    "arg_pos": 1,
                    "cur_arg_ptr_array": 1,
                    "current_parsed_format": 1,
                    "display_params": 1,
                    "expanded_formats": 1,
                    "fmt_stack": 1,
                    "format_params2": 1,
                    "format_stack_ptr": 1,
                    "local_pointer4": 3,
                    "local_pointer_array": 1,
                    "local_pointer_var5": 1,
                    "local_ptr4": 1,
                    "local_var_9c": 1,
                    "local_variable5": 1,
                    "output_buffer_counter_pointer": 1,
                    "param_pointer2": 1,
                    "ppp_output_ptr": 1,
                    "ptr_args_info4": 1,
                    "ptr_ptr_ptr_data": 1,
                    "saved_format_data2": 1,
                    "specifier_info_2": 1,
                    "var_pointer": 1
                },
                "local_9f": {
                    "alt_form": 1,
                    "alternate_form_flag": 1,
                    "arg_width": 1,
                    "capital_hex": 1,
                    "extra_padding_char2": 1,
                    "hex_lower_case": 1,
                    "ignore_char": 1,
                    "local_byte_variable2": 1,
                    "local_char3": 2,
                    "local_char_value3": 1,
                    "local_undef_var2": 1,
                    "local_undefined": 1,
                    "local_var_9f": 1,
                    "local_variable4": 1,
                    "padding_char": 1,
                    "sign": 1,
                    "temp_char4": 1,
                    "undefined_var2": 1,
                    "zero_padding": 1,
                    "zero_padding_flag": 1
                },
                "local_a0": {
                    "base_prefix_char": 1,
                    "extra_padding_char": 1,
                    "fill_char": 3,
                    "local_byte_variable1": 1,
                    "local_char2": 3,
                    "local_char_value2": 1,
                    "local_undef_var1": 1,
                    "local_undefined": 1,
                    "local_var_a0": 1,
                    "pad_char": 2,
                    "padding_char": 3,
                    "padding_character_flag": 1,
                    "prefix": 1,
                    "temp_char3": 1,
                    "undefined_var1": 1,
                    "zero": 1
                },
                "local_a1": {
                    "char_var3": 1,
                    "conversion_char": 1,
                    "current_flag": 1,
                    "display_char": 1,
                    "flag_char": 2,
                    "format_char": 1,
                    "format_char1": 1,
                    "group_sign_specifier": 1,
                    "leading_sign_character": 1,
                    "local_char": 1,
                    "local_char1": 4,
                    "local_char_value1": 1,
                    "local_char_var1": 1,
                    "local_var_a1": 1,
                    "padding_char2": 1,
                    "sign": 2,
                    "sign_char": 2,
                    "sign_character": 1,
                    "specifier": 1,
                    "temp_char2": 1,
                    "temp_local_char": 1
                },
                "local_c0": {
                    "alignment_character": 1,
                    "char_array": 1,
                    "char_buffer": 1,
                    "character_set": 1,
                    "charset": 1,
                    "digits": 1,
                    "flags_string": 1,
                    "group_string": 1,
                    "hex_char_array": 1,
                    "hex_chars": 2,
                    "hex_digits": 2,
                    "hex_upper_case": 1,
                    "local_char_array": 1,
                    "local_char_array_ptr1": 1,
                    "local_char_pointer": 1,
                    "local_char_ptr": 1,
                    "local_char_ptr_var": 1,
                    "local_pointer3": 1,
                    "local_string": 1,
                    "local_var_c0": 1,
                    "num_chars": 1,
                    "partial_result": 1,
                    "string_address": 1,
                    "temp_local_string": 1,
                    "temp_string": 1
                },
                "local_c4": {
                    "arg_count": 1,
                    "chars_printed": 1,
                    "local_count3": 1,
                    "local_counter2": 1,
                    "local_int1": 1,
                    "local_int_value1": 1,
                    "local_int_var1": 1,
                    "local_var1": 1,
                    "local_var_c4": 1,
                    "local_variable3": 1,
                    "output1": 1,
                    "output_buffer_counter": 1,
                    "output_params_counter": 1,
                    "result": 5,
                    "result_len": 1,
                    "result_length": 2,
                    "result_size": 1,
                    "result_sum": 1,
                    "size": 1,
                    "total_args": 1,
                    "total_char_count": 1,
                    "total_length": 1
                },
                "local_c8": {
                    "arg_array": 1,
                    "arg_list_pointer": 1,
                    "arg_list_ptr": 1,
                    "arg_ptr": 1,
                    "arg_ptrs": 1,
                    "args": 1,
                    "cur_arg_ptr": 1,
                    "current_arg": 2,
                    "current_arg_index": 1,
                    "current_args": 1,
                    "data_pointers_array": 1,
                    "format_ptr": 1,
                    "input_arguments_pointer": 1,
                    "local_array1": 1,
                    "local_pointer": 2,
                    "local_pointer3": 2,
                    "local_pointer_var4": 1,
                    "local_ptr3": 1,
                    "local_var_c8": 1,
                    "pointer_list": 1,
                    "ppi_output_params_array": 1,
                    "ptr_position_args": 1,
                    "ptr_ptr_data": 1,
                    "temp_local_array3": 1,
                    "va_list_address_array": 1
                },
                "local_d4": {
                    "accumulated_args": 1,
                    "buffer_size": 1,
                    "current_output_param": 1,
                    "format_specifier_pointer": 1,
                    "local_pointer2": 3,
                    "local_pointer_var3": 1,
                    "local_ptr2": 1,
                    "local_temp": 1,
                    "local_var_d4": 1,
                    "local_variable2": 1,
                    "max_formats": 1,
                    "original_max_width": 1,
                    "param_count": 1,
                    "param_sum": 1,
                    "precision": 3,
                    "remaining_length": 1,
                    "remaining_width": 2,
                    "temp_info_2": 1,
                    "temp_local_array2": 1,
                    "total_pad_width": 1,
                    "total_width": 2
                },
                "local_dc": {
                    "final_length": 1,
                    "format_specifier_counter": 1,
                    "largest_width": 1,
                    "local_counter": 1,
                    "local_pointer1": 3,
                    "local_pointer_var2": 1,
                    "local_ptr1": 1,
                    "local_var_dc": 1,
                    "local_variable1": 1,
                    "max_data_size": 1,
                    "max_field_width": 1,
                    "max_output_params": 1,
                    "max_parsed_formats": 1,
                    "max_width": 3,
                    "max_width_info": 1,
                    "param_count": 1,
                    "required_args": 1,
                    "temp_local_array1": 1,
                    "total_params": 1,
                    "total_width": 2,
                    "unset_elements": 1,
                    "width": 2
                },
                "param_1": {
                    "arg1": 5,
                    "binary_address": 1,
                    "data": 1,
                    "data1": 1,
                    "data_buffer": 1,
                    "format": 1,
                    "format_str": 1,
                    "format_string": 6,
                    "input": 2,
                    "input1": 4,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_parameter1": 1,
                    "input_pointer": 1,
                    "param1": 1,
                    "ptr1": 1,
                    "string": 1,
                    "string_address": 1
                },
                "param_2": {
                    "arg2": 5,
                    "arg_list": 3,
                    "arg_list_start": 1,
                    "args": 2,
                    "config": 1,
                    "data": 2,
                    "data2": 1,
                    "format": 1,
                    "format_address": 1,
                    "format_args": 1,
                    "format_specifier": 1,
                    "format_specifier_address": 1,
                    "format_string": 1,
                    "input2": 4,
                    "input_array": 1,
                    "input_param2": 1,
                    "input_parameter2": 1,
                    "param2": 1,
                    "param_pointer": 1,
                    "ptr2": 1
                },
                "param_3": {
                    "arg3": 3,
                    "args": 2,
                    "argument_pointer": 1,
                    "buffer": 1,
                    "data3": 1,
                    "dynamic_args": 1,
                    "format": 2,
                    "format_args": 1,
                    "format_specifiers": 2,
                    "format_string": 3,
                    "format_string_address": 1,
                    "input3": 2,
                    "input_array": 1,
                    "input_array1": 1,
                    "input_param3": 1,
                    "input_parameter3": 1,
                    "param3": 1,
                    "param_3": 1,
                    "params_start": 1,
                    "parsed_formats": 1,
                    "pp_arg": 1,
                    "ptr": 1,
                    "string_pointer": 1
                },
                "param_4": {
                    "arg4": 3,
                    "arg_indexes": 1,
                    "arg_ptr": 2,
                    "arg_ptrs": 1,
                    "argptr": 1,
                    "args": 4,
                    "args_ptr": 1,
                    "array_pointer": 1,
                    "data4": 1,
                    "input4": 2,
                    "input_arguments": 1,
                    "input_array2": 1,
                    "input_param4": 1,
                    "input_parameter4": 1,
                    "input_ptrptr": 1,
                    "output_parameters": 1,
                    "param4": 1,
                    "param_4": 1,
                    "params": 1,
                    "pointer": 1,
                    "position_args": 1,
                    "ppad": 1,
                    "va_list": 1,
                    "values": 1
                },
                "param_5": {
                    "param5": 1
                },
                "piVar19": {
                    "arg_i": 1,
                    "arg_pointer": 1,
                    "arg_value": 1,
                    "current_arg": 1,
                    "fmt_int": 1,
                    "int_arg1": 1,
                    "int_ptr2": 1,
                    "param": 1,
                    "pointer2": 1,
                    "pointer6": 1,
                    "pointer7": 2,
                    "pointer_var7": 1,
                    "pointer_variable7": 1,
                    "ptr_int2": 1,
                    "ptr_to_var19": 1,
                    "ptr_var19": 1,
                    "temp_arg_pointer": 1,
                    "temp_integer_value": 1,
                    "temp_pointer3": 2,
                    "temp_var3": 1,
                    "value_ptr": 1,
                    "var19": 1
                },
                "piVar22": {
                    "arg": 1,
                    "arg_neg": 1,
                    "arg_value2": 1,
                    "current_arg2": 1,
                    "int_arg2": 1,
                    "int_ptr3": 1,
                    "param2": 1,
                    "pointer8": 1,
                    "pointer9": 2,
                    "pointer_var9": 1,
                    "pointer_variable9": 1,
                    "ptr_int3": 1,
                    "ptr_to_var22": 1,
                    "ptr_var22": 1,
                    "sign_value": 1,
                    "temp_arg_pointer2": 1,
                    "temp_pointer5": 2,
                    "temp_var6": 1,
                    "value_ptr": 1,
                    "var22": 1
                },
                "piVar7": {
                    "arg_index": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 1,
                    "current_arg": 2,
                    "format_specifier_index": 1,
                    "int_arg": 1,
                    "int_ptr": 1,
                    "integer_value": 1,
                    "pad_width": 1,
                    "pi_var": 1,
                    "pointer": 1,
                    "pointer2": 4,
                    "pointer_var2": 1,
                    "pointer_variable2": 1,
                    "ptr_int1": 1,
                    "ptr_to_var7": 1,
                    "ptr_var7": 1,
                    "temp_var": 1,
                    "value_ptr": 1,
                    "var7": 1,
                    "width": 2
                },
                "ppiVar12": {
                    "arg_pointer": 1,
                    "arg_ptr": 1,
                    "arg_ptr_list": 1,
                    "current_va_list": 1,
                    "pointer4": 2,
                    "pointer_array": 1,
                    "pointer_array1": 1,
                    "pointer_var4": 1,
                    "pointer_variable4": 1,
                    "pp_arg_index": 1,
                    "ppi_arg_ptr_array": 1,
                    "ppi_output": 1,
                    "ptr_ptr": 2,
                    "ptr_ptr12": 1,
                    "ptr_temp_args": 1,
                    "ptr_to_var12": 1,
                    "ptr_var3": 1,
                    "temp_args_ptr": 1,
                    "temp_double_pointer_array": 1,
                    "temp_pointer": 2,
                    "temp_pointer_array": 1,
                    "temp_ptr": 1,
                    "va_list": 1,
                    "width_specifier": 1
                },
                "pppppplllVar20": {
                    "temp_pointer4": 1
                },
                "pppppppiVar10": {
                    "current_address": 1,
                    "current_char_ptr": 1,
                    "current_format_char": 1,
                    "current_format_specifier": 1,
                    "current_format_string": 1,
                    "current_param": 1,
                    "format_next_arg": 1,
                    "format_pointer": 1,
                    "iterator": 1,
                    "pointer3": 3,
                    "pointer_var3": 1,
                    "pointer_variable3": 1,
                    "ptr_format_token": 1,
                    "ptr_to_var10": 1,
                    "ptr_var10": 1,
                    "ptr_var2": 1,
                    "scan_format_args": 1,
                    "temp_pointer_array": 1,
                    "var10": 1
                },
                "pppppppiVar16": {
                    "fmt_stack": 1,
                    "new_param": 1,
                    "pointer_variable5": 1,
                    "temp_address_array": 1,
                    "temp_var_ptr_array2": 1
                },
                "pppppppiVar18": {
                    "info": 1,
                    "pointer5": 1,
                    "pointer6": 2,
                    "pointer_var6": 1,
                    "pointer_variable6": 1,
                    "ptr_temp_args2": 1,
                    "ptr_to_var18": 1,
                    "ptr_var18": 1,
                    "ptr_var5": 1,
                    "remain": 1,
                    "remaining_format": 1,
                    "remaining_format_args": 1,
                    "remaining_formats": 1,
                    "remaining_params": 1,
                    "temp_format_string": 1,
                    "temp_param_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_value_diff": 1,
                    "var18": 1
                },
                "pppppppiVar20": {
                    "arg": 1,
                    "arg_int": 1,
                    "num_bytes_consumed": 1,
                    "pointer7": 1,
                    "pointer8": 2,
                    "pointer_var8": 1,
                    "pointer_variable8": 1,
                    "prev_info": 1,
                    "ptr_to_var20": 1,
                    "ptr_var20": 1,
                    "ptr_var6": 1,
                    "star_pointer": 1,
                    "temp_address_ptr": 1,
                    "temp_param_pointer2": 1,
                    "temp_pointer4": 1,
                    "temp_pointer_array2": 1,
                    "temp_var4": 1,
                    "var20": 1,
                    "width": 1,
                    "width_arg": 1
                },
                "pppppppiVar23": {
                    "arg_size_stack_item": 1,
                    "len": 1,
                    "pointer10": 2,
                    "pointer9": 1,
                    "pointer_var10": 1,
                    "pointer_variable10": 1,
                    "ptr_format_token2": 1,
                    "ptr_to_var23": 1,
                    "ptr_var23": 1,
                    "ptr_var7": 1,
                    "remaining_formats": 1,
                    "remaining_formats2": 1,
                    "remaining_params2": 1,
                    "temp_info": 1,
                    "temp_output_address": 1,
                    "temp_param_pointer3": 1,
                    "temp_pointer6": 1,
                    "temp_pointer_array3": 1,
                    "temp_var7": 1,
                    "var23": 1
                },
                "pppppppiVar25": {
                    "exception_throwed_exception_stack_item": 1,
                    "temp_info": 1,
                    "temp_pointer7": 1
                },
                "pppppppiVar6": {
                    "temp_var_ptr_array": 1
                },
                "pppppppipiVar18": {
                    "temp_pointer2": 1
                },
                "ppppppppiVar10": {
                    "current_char": 1
                },
                "ppppppppiVar16": {
                    "current_parsed_format": 1,
                    "display_params": 1,
                    "expanded_formats": 1,
                    "format_stack_base": 1,
                    "pointer4": 1,
                    "pointer5": 2,
                    "pointer_var5": 1,
                    "ptr_args_info2": 1,
                    "ptr_to_var16": 1,
                    "ptr_var16": 1,
                    "ptr_var4": 1,
                    "temp_array": 1,
                    "temp_data_buffer": 1,
                    "temp_pointer1": 1,
                    "var_pointer_array2": 1
                },
                "ppppppppiVar18": {
                    "arg_size": 1,
                    "remaining_data_size": 1
                },
                "ppppppppiVar20": {
                    "individual_pointer": 1
                },
                "ppppppppiVar23": {
                    "arg_size2": 1
                },
                "ppppppppiVar25": {
                    "exception_throwed_exception": 1,
                    "expanded_formats2": 1,
                    "format_pointer": 1,
                    "format_stack_ptr": 1,
                    "local_buffer": 1,
                    "pointer10": 1,
                    "pointer11": 2,
                    "pointer_var11": 1,
                    "pointer_variable11": 1,
                    "ptr_args_info3": 1,
                    "ptr_to_var25": 1,
                    "ptr_var25": 1,
                    "ptr_var8": 1,
                    "str_value": 1,
                    "temp_pointer": 1,
                    "temp_pointer7": 1,
                    "tmp_var": 1,
                    "var25": 1
                },
                "ppppppppiVar6": {
                    "address_array": 1,
                    "arg_ptr_array": 1,
                    "arg_stack": 1,
                    "args_array": 1,
                    "format_arg": 1,
                    "format_args": 1,
                    "format_data": 1,
                    "format_params": 1,
                    "format_stack": 1,
                    "output_buffer_data": 1,
                    "param_pointer": 1,
                    "param_ptrs": 1,
                    "parsed_format": 1,
                    "pointer1": 4,
                    "pointer_array": 1,
                    "pointer_var": 1,
                    "pointer_variable1": 1,
                    "pointers_array": 1,
                    "ptr_args_info": 1,
                    "ptr_to_var6": 1,
                    "ptr_var": 1,
                    "ptr_var6": 1,
                    "specifier_info": 1,
                    "var_pointer_array": 1
                },
                "pppppppplllVar23": {
                    "temp_pointer6": 1
                },
                "ppppppqiVar16": {
                    "num_bytes_remianing": 1
                },
                "ppppppqiVar25": {
                    "num_chars_written": 1
                },
                "pppp\ufffdpppiVar10": {
                    "current_format_char": 1
                },
                "pppp\ufffdpppiVar16": {
                    "saved_format_data": 1
                },
                "pppp\ufffdpppiVar18": {
                    "remaining_data": 1
                },
                "pppp\ufffdpppiVar20": {
                    "arg": 1
                },
                "pppp\ufffdpppiVar23": {
                    "temp_format_ptr": 1
                },
                "uVar11": {
                    "digit": 7,
                    "digit_character": 1,
                    "digit_val": 1,
                    "digit_value": 2,
                    "digits": 1,
                    "temp1": 1,
                    "temp_number": 1,
                    "temp_u_int4": 1,
                    "temp_uint1": 1,
                    "temp_val": 1,
                    "temp_var1": 1,
                    "temp_var9": 1,
                    "temp_variable1": 1,
                    "u_var11": 1,
                    "uint_value1": 1,
                    "uint_var1": 1,
                    "uint_var11": 1,
                    "unsigned_variable1": 1,
                    "ushort_val": 1,
                    "var2": 1
                },
                "uVar13": {
                    "current_flag": 1,
                    "flag_bits": 1,
                    "flags": 7,
                    "fmt_flags": 1,
                    "format_flags": 2,
                    "temp2": 1,
                    "temp_uint2": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temp_variable2": 1,
                    "u_var13": 1,
                    "uint_value2": 1,
                    "uint_var13": 1,
                    "uint_var2": 1,
                    "unsigned_variable2": 1,
                    "ushort_var": 1,
                    "var3": 1,
                    "var_13": 1
                },
                "uVar14": {
                    "byte_var": 1,
                    "ch": 7,
                    "current_char_index": 1,
                    "current_character": 1,
                    "format_char": 1,
                    "format_specifier": 1,
                    "next_char": 2,
                    "temp3": 1,
                    "temp_byte": 1,
                    "temp_u_int": 1,
                    "temp_uint3": 1,
                    "temp_var2": 1,
                    "temp_variable3": 1,
                    "u_var14": 1,
                    "uint_value3": 1,
                    "uint_var14": 1,
                    "uint_var3": 1,
                    "unsigned_variable3": 1,
                    "var4": 1
                },
                "uVar21": {
                    "ch2": 1,
                    "chars_printed": 1,
                    "multiplier": 1,
                    "num": 1,
                    "num_width": 1,
                    "temp6": 1,
                    "temp_byte2": 1,
                    "temp_integer_value2": 1,
                    "temp_u_int2": 1,
                    "temp_uint4": 1,
                    "temp_val2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_variable4": 1,
                    "u_var21": 1,
                    "uint_value4": 1,
                    "uint_var": 1,
                    "uint_var21": 1,
                    "uint_var4": 1,
                    "unsigned_variable4": 1,
                    "val": 1,
                    "var21": 1,
                    "var7": 1,
                    "var_21": 1
                },
                "uVar24": {
                    "high32bits": 1,
                    "high_digit": 1,
                    "high_val": 1,
                    "short_num": 1,
                    "temp7": 1,
                    "temp_u_int3": 1,
                    "temp_uint5": 1,
                    "temp_unsigned_value": 1,
                    "temp_val3": 1,
                    "temp_value2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var8": 1,
                    "temp_variable5": 1,
                    "u_var24": 1,
                    "uint_value5": 1,
                    "uint_var24": 1,
                    "uint_var5": 1,
                    "undefined4_var": 1,
                    "unsigned_variable5": 1,
                    "var24": 1,
                    "var8": 1,
                    "var_24": 1
                },
                "uVar25": {
                    "arg_length": 1
                }
            },
            "called": [
                "FUN_00084384",
                "FUN_00083808",
                "FUN_0008378c",
                "FUN_00083b14",
                "FUN_00082a50",
                "FUN_00082ac0",
                "FUN_00084750"
            ],
            "calling": [
                "FUN_0008378c"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parse_format_string_00082b38(int format_string,int arg2,int *******arg3,int **args)\n\n{\n  bool is_signed;\n  bool flag2;\n  bool flag3;\n  char char_var;\n  bool is_zero_padded;\n  int ********pointer1;\n  int *pointer2;\n  int result;\n  char char_var2;\n  int *******pointer3;\n  uint digit;\n  int **pointer4;\n  uint flags;\n  uint ch;\n  int temp_int2;\n  int ********pointer5;\n  int var17;\n  int *******pointer6;\n  int *temp_pointer3;\n  int *******pointer8;\n  uint u_var21;\n  int *pointer9;\n  int *******pointer10;\n  undefined4 temp_variable5;\n  int ********pointer11;\n  bool is_negative;\n  longlong long_var;\n  int *******max_width;\n  int *******precision;\n  int **local_pointer3;\n  int result;\n  char *hex_chars;\n  char local_char1;\n  undefined local_char2;\n  undefined local_char3;\n  int ********local_pointer4;\n  int arg_count;\n  int *******local_pointer5;\n  undefined local_char4;\n  char temp_char2;\n  undefined temp_char_3;\n  undefined temp_buffer [4];\n  int *******temp_array [16];\n  \n  if ((format_string != 0) && (*(int *)(format_string + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  flags = (uint)*(ushort *)(arg2 + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(arg2 + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(arg2 + 0xc) = (short)flags;\n    *(uint *)(arg2 + 100) = *(uint *)(arg2 + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(arg2 + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = FUN_00083808(format_string,arg2);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(arg2 + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(arg2 + 0xe)) {\n    result = FUN_0008378c(format_string,arg2,arg3,args);\n    return result;\n  }\nLAB_00082b8a:\n  hex_chars = (char *)0x0;\n  local_pointer5 = (int *******)0x0;\n  arg_count = 0;\n  result = 0;\n  pointer1 = (int ********)temp_buffer;\n  local_pointer3 = args;\n  local_pointer4 = (int ********)temp_buffer;\nLAB_00082b9e:\n  pointer3 = arg3;\n  if ((*(char *)arg3 != '\\0') && (*(char *)arg3 != '%')) {\n    do {\n      pointer3 = (int *******)((int)pointer3 + 1);\n      if (*(char *)pointer3 == '\\0') break;\n    } while (*(char *)pointer3 != '%');\n    pointer8 = (int *******)((int)pointer3 - (int)arg3);\n    if (pointer8 != (int *******)0x0) {\n      arg_count = arg_count + 1;\n      local_pointer5 = (int *******)((int)local_pointer5 + (int)pointer8);\n      *pointer1 = arg3;\n      pointer1[1] = pointer8;\n      if (arg_count < 8) {\n        pointer1 = pointer1 + 2;\n      }\n      else {\n        if (local_pointer5 == (int *******)0x0) {\n          result = result + (int)pointer8;\n          arg_count = 0;\n          pointer1 = (int ********)temp_buffer;\n          goto LAB_00082bee;\n        }\n        result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n        pointer1 = (int ********)temp_buffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      result = result + (int)pointer8;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)pointer3 != '\\0') {\n    local_char1 = '\\0';\n    ch = (uint)*(byte *)((int)pointer3 + 1);\n    flags = 0;\n    is_zero_padded = false;\n    flag2 = false;\n    is_signed = false;\n    flag3 = false;\n    is_negative = false;\n    pointer8 = (int *******)0x0;\n    precision = (int *******)0xffffffff;\n    arg3 = (int *******)((int)pointer3 + 1);\nLAB_00082c12:\n    arg3 = (int *******)((int)arg3 + 1);\nLAB_00082c16:\n    switch(ch) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (ch != 0) {\n        max_width = (int *******)0x1;\n        precision = (int *******)0x1;\n        pointer11 = (int ********)&local_char4;\n        local_char4 = (char)ch;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      flag3 = true;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082c12;\n    case 0x2a:\n      pointer8 = (int *******)*local_pointer3;\n      local_pointer3 = local_pointer3 + 1;\n      if ((int)pointer8 < 0) {\n        pointer8 = (int *******)-(int)pointer8;\n        goto switchD_00082c20_caseD_2d;\n      }\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082c12;\n    case 0x2b:\n      ch = (uint)*(byte *)arg3;\n      local_char1 = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082c12;\n    case 0x2e:\n      ch = (uint)*(byte *)arg3;\n      pointer3 = (int *******)((int)arg3 + 1);\n      if (ch == 0x2a) {\n        ch = (uint)*(byte *)((int)arg3 + 1);\n        precision = (int *******)*local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        arg3 = pointer3;\n        if ((int)precision < 0) {\n          precision = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = ch - 0x30;\n      if (digit < 10) {\n        u_var21 = 0;\n        do {\n          arg3 = (int *******)((int)pointer3 + 1);\n          ch = (uint)*(byte *)pointer3;\n          u_var21 = digit + u_var21 * 10;\n          digit = ch - 0x30;\n          pointer3 = arg3;\n        } while (digit < 10);\n        precision = (int *******)(u_var21 | (int)u_var21 >> 0x1f);\n      }\n      else {\n        precision = (int *******)0x0;\n        arg3 = pointer3;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      flag2 = true;\n      if (is_signed == false) goto LAB_00083028;\nLAB_00082e98:\n      local_pointer3 = (int **)((int)local_pointer3 + 7U & 0xfffffff8);\n      temp_pointer3 = *local_pointer3;\n      pointer9 = local_pointer3[1];\n      local_pointer3 = local_pointer3 + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      flag2 = true;\n      if (is_signed != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)flag2 << 4;\n      temp_int2 = (uint)is_signed << 5;\n      if ((flag2 == 0) && (temp_int2 = (uint)is_negative << 6, is_negative != 0)) {\n        temp_pointer3 = (int *)(uint)*(ushort *)local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        pointer9 = (int *)0x0;\n      }\n      else {\n        result = temp_int2;\n        temp_pointer3 = *local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        pointer9 = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      flag2 = true;\n      if (is_signed != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((flag2) || (is_negative == false)) {\n        result = 1;\n        temp_pointer3 = *local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        pointer9 = (int *)0x0;\n      }\n      else {\n        pointer9 = (int *)0x0;\n        temp_pointer3 = (int *)(uint)*(ushort *)local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      hex_chars = \"0123456789ABCDEF\";\n      if (is_signed == false) goto LAB_00083196;\nLAB_00082fb6:\n      pointer4 = (int **)((int)local_pointer3 + 7U & 0xfffffff8);\n      local_pointer3 = pointer4 + 2;\n      temp_pointer3 = *pointer4;\n      pointer9 = pointer4[1];\n      goto LAB_00082fca;\n    case 99:\n      temp_pointer3 = *local_pointer3;\n      local_pointer3 = local_pointer3 + 1;\n      max_width = (int *******)0x1;\n      local_char4 = SUB41(temp_pointer3,0);\n      precision = (int *******)0x1;\n      pointer11 = (int ********)&local_char4;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (is_signed != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((flag2 == false) && (is_negative != false)) {\n        temp_pointer3 = (int *)(int)*(short *)local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        pointer9 = (int *)((int)temp_pointer3 >> 0x1f);\n      }\n      else {\n        temp_pointer3 = *local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        pointer9 = (int *)((int)temp_pointer3 >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)pointer9 < 0) {\n        is_negative = temp_pointer3 != (int *)0x0;\n        temp_pointer3 = (int *)-(int)temp_pointer3;\n        pointer9 = (int *)(-(int)pointer9 - (uint)is_negative);\n        local_char1 = '-';\n        char_var = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)precision) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero_padded = false;\n      ch = (uint)temp_pointer3 | (uint)pointer9;\n      result = 1;\n      char_var = local_char1;\n      goto joined_r0x00082d78;\n    case 0x68:\n      is_negative = true;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082c12;\n    case 0x6c:\n      ch = (uint)*(byte *)arg3;\n      if (ch == 0x6c) {\n        is_signed = true;\n        ch = (uint)*(byte *)((int)arg3 + 1);\n        arg3 = (int *******)((int)arg3 + 1);\n      }\n      else {\n        flag2 = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (is_signed == false) {\n        if (flag2 == false) {\n          if (is_negative) {\n            temp_pointer3 = *local_pointer3;\n            local_pointer3 = local_pointer3 + 1;\n            *(short *)temp_pointer3 = (short)result;\n          }\n          else {\n            temp_pointer3 = *local_pointer3;\n            local_pointer3 = local_pointer3 + 1;\n            *temp_pointer3 = result;\n          }\n        }\n        else {\n          temp_pointer3 = *local_pointer3;\n          local_pointer3 = local_pointer3 + 1;\n          *temp_pointer3 = result;\n        }\n      }\n      else {\n        temp_pointer3 = *local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        *temp_pointer3 = result;\n        temp_pointer3[1] = result >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (is_signed == false) goto LAB_00082f2a;\nLAB_00082d42:\n      pointer4 = (int **)((int)local_pointer3 + 7U & 0xfffffff8);\n      local_pointer3 = pointer4 + 2;\n      temp_pointer3 = *pointer4;\n      pointer9 = pointer4[1];\n      result = 0;\n      break;\n    case 0x70:\n      temp_pointer3 = *local_pointer3;\n      local_pointer3 = local_pointer3 + 1;\n      local_char3 = 0x78;\n      is_zero_padded = true;\n      pointer9 = (int *)0x0;\n      local_char2 = 0x30;\n      hex_chars = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_signed = true;\n      ch = (uint)*(byte *)arg3;\n      goto LAB_00082c12;\n    case 0x73:\n      pointer11 = (int ********)*local_pointer3;\n      local_char1 = '\\0';\n      local_pointer3 = local_pointer3 + 1;\n      if (pointer11 != (int ********)0x0) {\n        if ((int)precision < 0) {\n          precision = (int *******)FUN_00082a50(pointer11);\n          pointer3 = (int *******)0x0;\n          char_var = local_char1;\n        }\n        else {\n          result = FUN_00084384(pointer11,0,precision);\n          char_var = local_char1;\n          if (result == 0) {\n            pointer3 = (int *******)0x0;\n          }\n          else {\n            pointer6 = (int *******)(result - (int)pointer11);\n            if ((int)precision <= (int)(int *******)(result - (int)pointer11)) {\n              pointer6 = precision;\n            }\n            pointer3 = (int *******)0x0;\n            precision = pointer6;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < precision) {\n        precision = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)precision & ~((int)precision >> 0x1f));\n      pointer11 = (int ********)&UNK_00085840;\nLAB_00083012:\n      local_char1 = '\\0';\n      pointer3 = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!is_signed) goto LAB_00082f7c;\nLAB_00082e62:\n      pointer4 = (int **)((int)local_pointer3 + 7U & 0xfffffff8);\n      local_pointer3 = pointer4 + 2;\n      temp_pointer3 = *pointer4;\n      pointer9 = pointer4[1];\n      result = 1;\n      break;\n    case 0x78:\n      hex_chars = \"0123456789abcdef\";\n      if (is_signed != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((flag2 == false) && (is_negative != false)) {\n        pointer9 = (int *)0x0;\n        temp_pointer3 = (int *)(uint)*(ushort *)local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n      }\n      else {\n        temp_pointer3 = *local_pointer3;\n        local_pointer3 = local_pointer3 + 1;\n        pointer9 = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((flag3) && (((uint)temp_pointer3 | (uint)pointer9) != 0)) {\n        is_zero_padded = true;\n        local_char2 = 0x30;\n        result = 2;\n        local_char3 = (char)ch;\n      }\n      else {\n        result = 2;\n      }\n    }\n    local_char1 = '\\0';\n    char_var = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)precision) {\n      flags = flags & 0xffffff7f;\n    }\n    ch = (uint)temp_pointer3 | (uint)pointer9;\njoined_r0x00082d78:\n    long_var = CONCAT44(pointer9,temp_pointer3);\n    pointer3 = precision;\n    if ((ch == 0) && (precision == (int *******)0x0)) {\n      pointer11 = (int ********)temp_buffer;\n      if ((result != 0) || (!flag3)) goto LAB_00082da0;\n      pointer11 = (int ********)(&temp_char2 + 1);\n      temp_char_3 = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (pointer9 != (int *)0x0 || (int *)0x9 < temp_pointer3) {\n        pointer5 = (int ********)(&temp_char2 + 1);\n        do {\n          pointer11 = pointer5;\n          temp_variable5 = (undefined4)((ulonglong)long_var >> 0x20);\n          char_var2 = '\\n';\n          FUN_00084750((int)long_var,temp_variable5,10,0);\n          *(char *)pointer11 = char_var2 + '0';\n          long_var = FUN_00084750((int)long_var,temp_variable5,10,0);\n          pointer5 = (int ********)((int)pointer11 + -1);\n        } while (long_var != 0);\n        precision = (int *******)((int)temp_buffer - (int)pointer11);\n        goto LAB_00082da0;\n      }\n      temp_char_3 = (char)temp_pointer3 + '0';\n      pointer11 = (int ********)(&temp_char2 + 1);\n      goto LAB_0008351e;\n    }\n    pointer5 = (int ********)(&temp_char2 + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      pointer11 = pointer5;\n      ch = (uint)temp_pointer3 & 0xf;\n      temp_pointer3 = (int *)((uint)temp_pointer3 >> 4 | (int)pointer9 << 0x1c);\n      pointer9 = (int *)((uint)pointer9 >> 4);\n      *(char *)pointer11 = hex_chars[ch];\n      pointer5 = (int ********)((int)pointer11 + -1);\n    } while (((uint)temp_pointer3 | (uint)pointer9) != 0);\n    precision = (int *******)((int)temp_buffer - (int)pointer11);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (local_pointer5 != (int *******)0x0) {\n    FUN_00082ac0(format_string,arg2,&local_pointer4);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(arg2 + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result;\nLAB_0008337e:\n  do {\n    pointer11 = pointer5;\n    pointer2 = (int *)((uint)temp_pointer3 >> 3 | (int)pointer9 << 0x1d);\n    pointer9 = (int *)((uint)pointer9 >> 3);\n    result = ((uint)temp_pointer3 & 7) + 0x30;\n    *(char *)pointer11 = (char)result;\n    pointer5 = (int ********)((int)pointer11 + -1);\n    temp_pointer3 = pointer2;\n  } while (((uint)pointer2 | (uint)pointer9) != 0);\n  if (flag3) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      precision = (int *******)((int)temp_buffer - (int)pointer11);\n    }\n    else {\n      *(undefined *)((int)pointer11 + -1) = 0x30;\n      pointer11 = pointer5;\n      precision = (int *******)((int)temp_buffer - (int)pointer5);\n    }\n  }\n  else {\nLAB_0008351e:\n    precision = (int *******)((int)temp_buffer - (int)pointer11);\n  }\nLAB_00082da0:\n  max_width = precision;\n  if ((int)precision < (int)pointer3) {\n    max_width = pointer3;\n  }\n  if (char_var != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082dba:\n  if (is_zero_padded) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (pointer6 = (int *******)((int)pointer8 - (int)max_width), 0 < (int)pointer6)) {\n    if ((int)pointer6 < 0x11) {\n      arg_count = arg_count + 1;\n    }\n    else {\n      do {\n        pointer10 = pointer6;\n        result = arg_count + 1;\n        local_pointer5 = local_pointer5 + 4;\n        *pointer1 = (int *******)0x85808;\n        pointer1[1] = (int *******)0x10;\n        if (result < 8) {\n          temp_int2 = arg_count + 2;\n          pointer1 = pointer1 + 2;\n          arg_count = result;\n        }\n        else if (local_pointer5 == (int *******)0x0) {\n          temp_int2 = 1;\n          pointer1 = (int ********)temp_buffer;\n          arg_count = 0;\n        }\n        else {\n          arg_count = result;\n          result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n          if (result != 0) goto LAB_000833de;\n          temp_int2 = arg_count + 1;\n          pointer1 = (int ********)temp_buffer;\n        }\n        pointer6 = pointer10 + -4;\n      } while (0x10 < (int)pointer6);\n      pointer6 = pointer10 + -4;\n      arg_count = temp_int2;\n    }\n    local_pointer5 = (int *******)((int)local_pointer5 + (int)pointer6);\n    *pointer1 = (int *******)0x85808;\n    pointer1[1] = pointer6;\n    if (arg_count < 8) {\n      result = arg_count + 1;\n      pointer1 = pointer1 + 2;\n    }\n    else if (local_pointer5 == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      pointer1 = (int ********)temp_buffer;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      pointer1 = (int ********)temp_buffer;\n    }\n  }\n  else {\n    result = arg_count + 1;\n  }\n  temp_int2 = result;\n  if (local_char1 != '\\0') {\n    local_pointer5 = (int *******)((int)local_pointer5 + 1);\n    temp_int2 = 1;\n    *pointer1 = (int *******)&local_char1;\n    pointer1[1] = (int *******)0x1;\n    arg_count = result;\n    if (result < 8) {\n      temp_int2 = result + 1;\n      pointer1 = pointer1 + 2;\n    }\n    else if (local_pointer5 == (int *******)0x0) {\n      arg_count = 0;\n      pointer1 = (int ********)temp_buffer;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n      if (result != 0) goto LAB_000833de;\n      temp_int2 = arg_count + 1;\n      pointer1 = (int ********)temp_buffer;\n    }\n  }\n  result = temp_int2;\n  var17 = arg_count;\n  if (is_zero_padded) {\n    local_pointer5 = (int *******)((int)local_pointer5 + 2);\n    *pointer1 = (int *******)&local_char2;\n    pointer1[1] = (int *******)0x2;\n    if (temp_int2 < 8) {\n      result = temp_int2 + 1;\n      var17 = temp_int2;\n      pointer1 = pointer1 + 2;\n    }\n    else if (local_pointer5 == (int *******)0x0) {\n      result = 1;\n      var17 = 0;\n      pointer1 = (int ********)temp_buffer;\n    }\n    else {\n      arg_count = temp_int2;\n      result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      var17 = arg_count;\n      pointer1 = (int ********)temp_buffer;\n    }\n  }\n  arg_count = var17;\n  if ((flags == 0x80) &&\n     (pointer6 = (int *******)((int)pointer8 - (int)max_width), 0 < (int)pointer6)) {\n    if (0x10 < (int)pointer6) {\n      do {\n        while( true ) {\n          pointer10 = pointer6;\n          arg_count = var17 + 1;\n          local_pointer5 = local_pointer5 + 4;\n          *pointer1 = (int *******)&DAT_00085848;\n          pointer1[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = var17 + 2;\n          pointer1 = pointer1 + 2;\nLAB_0008348e:\n          var17 = arg_count;\n          pointer6 = pointer10 + -4;\n          if ((int)(pointer10 + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (local_pointer5 != (int *******)0x0) {\n          result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n          if (result == 0) {\n            result = arg_count + 1;\n            pointer1 = (int ********)temp_buffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        var17 = 0;\n        pointer6 = pointer10 + -4;\n        pointer1 = (int ********)temp_buffer;\n      } while (0x10 < (int)(pointer10 + -4));\nLAB_000834b4:\n      pointer6 = pointer10 + -4;\n    }\n    local_pointer5 = (int *******)((int)local_pointer5 + (int)pointer6);\n    *pointer1 = (int *******)&DAT_00085848;\n    pointer1[1] = pointer6;\n    arg_count = result;\n    if (result < 8) {\n      result = result + 1;\n      pointer1 = pointer1 + 2;\n    }\n    else if (local_pointer5 == (int *******)0x0) {\n      result = 1;\n      arg_count = 0;\n      pointer1 = (int ********)temp_buffer;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      pointer1 = (int ********)temp_buffer;\n    }\n  }\n  pointer3 = (int *******)((int)pointer3 - (int)precision);\n  pointer5 = (int ********)temp_buffer;\n  if ((int)pointer3 < 1) {\nLAB_000832c6:\n    local_pointer5 = (int *******)((int)local_pointer5 + (int)precision);\n    *pointer1 = (int *******)pointer11;\n    pointer1[1] = precision;\n    precision = local_pointer5;\n    arg_count = result;\n    if (result < 8) goto LAB_0008345a;\n    if (local_pointer5 == (int *******)0x0) {\n      arg_count = 0;\n    }\n    else {\n      result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    temp_int2 = arg_count;\n    if (0x10 < (int)pointer3) {\n      do {\n        while( true ) {\n          pointer6 = pointer3;\n          arg_count = temp_int2 + 1;\n          local_pointer5 = local_pointer5 + 4;\n          *pointer1 = (int *******)&DAT_00085848;\n          pointer1[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          result = temp_int2 + 2;\n          pointer1 = pointer1 + 2;\nLAB_00083282:\n          temp_int2 = arg_count;\n          pointer3 = pointer6 + -4;\n          if ((int)(pointer6 + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (local_pointer5 != (int *******)0x0) {\n          result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n          if (result == 0) {\n            result = arg_count + 1;\n            pointer1 = (int ********)temp_buffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        pointer1 = (int ********)temp_buffer;\n        temp_int2 = 0;\n        pointer3 = pointer6 + -4;\n      } while (0x10 < (int)(pointer6 + -4));\nLAB_000832aa:\n      pointer3 = pointer6 + -4;\n    }\n    local_pointer5 = (int *******)((int)local_pointer5 + (int)pointer3);\n    *pointer1 = (int *******)&DAT_00085848;\n    pointer1[1] = pointer3;\n    if (result < 8) {\n      result = result + 1;\n      pointer1 = pointer1 + 2;\n      goto LAB_000832c6;\n    }\n    if (local_pointer5 != (int *******)0x0) {\n      arg_count = result;\n      result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n      if (result != 0) goto LAB_000833de;\n      result = arg_count + 1;\n      pointer1 = (int ********)temp_buffer;\n      goto LAB_000832c6;\n    }\n    temp_array[0] = precision;\n    arg_count = 1;\n    pointer1 = (int ********)temp_buffer;\n    temp_buffer = (undefined  [4])pointer11;\nLAB_0008345a:\n    pointer5 = pointer1 + 2;\n    local_pointer5 = precision;\n  }\n  if (((flags & 4) != 0) &&\n     (pointer3 = (int *******)((int)pointer8 - (int)max_width), 0 < (int)pointer3)) {\n    result = arg_count;\n    if ((int)pointer3 < 0x11) {\n      temp_int2 = arg_count + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          arg_count = result + 1;\n          local_pointer5 = local_pointer5 + 4;\n          *pointer5 = (int *******)0x85808;\n          pointer5[1] = (int *******)0x10;\n          if (7 < arg_count) break;\n          temp_int2 = result + 2;\n          pointer5 = pointer5 + 2;\nLAB_00083316:\n          pointer3 = pointer3 + -4;\n          result = arg_count;\n          if ((int)pointer3 < 0x11) goto LAB_0008333e;\n        }\n        if (local_pointer5 != (int *******)0x0) {\n          result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n          if (result == 0) {\n            temp_int2 = arg_count + 1;\n            pointer5 = (int ********)temp_buffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        pointer3 = pointer3 + -4;\n        temp_int2 = 1;\n        result = 0;\n        pointer5 = (int ********)temp_buffer;\n      } while (0x10 < (int)pointer3);\n    }\nLAB_0008333e:\n    local_pointer5 = (int *******)((int)local_pointer5 + (int)pointer3);\n    *pointer5 = (int *******)0x85808;\n    pointer5[1] = pointer3;\n    arg_count = temp_int2;\n    if (7 < temp_int2) {\n      if (local_pointer5 == (int *******)0x0) {\n        if ((int)max_width < (int)pointer8) {\n          max_width = pointer8;\n        }\n        result = result + (int)max_width;\n        goto LAB_00083422;\n      }\n      result = FUN_00082ac0(format_string,arg2,&local_pointer4);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)max_width < (int)pointer8) {\n    max_width = pointer8;\n  }\n  result = result + (int)max_width;\n  if ((local_pointer5 != (int *******)0x0) &&\n     (result = FUN_00082ac0(format_string,arg2,&local_pointer4), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  arg_count = 0;\n  pointer1 = (int ********)temp_buffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = ch - 0x30;\n  pointer8 = (int *******)0x0;\n  pointer3 = arg3;\n  do {\n    arg3 = (int *******)((int)pointer3 + 1);\n    ch = (uint)*(byte *)pointer3;\n    pointer8 = (int *******)(digit + (int)pointer8 * 10);\n    digit = ch - 0x30;\n    pointer3 = arg3;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  ch = (uint)*(byte *)arg3;\n  if (local_char1 == '\\0') {\n    local_char1 = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "current_name": "parse_format_string_00082b38",
            "entrypoint": "0x00082b38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "bVar1": "is_signed",
                "bVar2": "flag2",
                "bVar26": "is_negative",
                "bVar3": "flag3",
                "bVar5": "is_zero_padded",
                "cStack_6a": "temp_char2",
                "cVar4": "char_var",
                "cVar9": "char_var2",
                "iVar15": "temp_int2",
                "iVar17": "var17",
                "iVar19": "index",
                "iVar8": "result",
                "lVar27": "long_var",
                "local_64": "temp_array",
                "local_68": "temp_buffer",
                "local_69": "temp_char_3",
                "local_90": "local_char4",
                "local_94": "local_pointer5",
                "local_98": "arg_count",
                "local_9c": "local_pointer4",
                "local_9f": "local_char3",
                "local_a0": "local_char2",
                "local_a1": "local_char1",
                "local_c0": "hex_chars",
                "local_c4": "result",
                "local_c8": "local_pointer3",
                "local_d4": "precision",
                "local_dc": "max_width",
                "param_1": "format_string",
                "param_2": "arg2",
                "param_3": "arg3",
                "param_4": "args",
                "piVar19": "temp_pointer3",
                "piVar22": "pointer9",
                "piVar7": "pointer2",
                "ppiVar12": "pointer4",
                "pppppppiVar10": "pointer3",
                "pppppppiVar16": "temp_var_ptr_array2",
                "pppppppiVar18": "pointer6",
                "pppppppiVar20": "pointer8",
                "pppppppiVar23": "pointer10",
                "pppppppiVar25": "temp_pointer7",
                "pppppppiVar6": "temp_var_ptr_array",
                "ppppppppiVar16": "pointer5",
                "ppppppppiVar25": "pointer11",
                "ppppppppiVar6": "pointer1",
                "uVar11": "digit",
                "uVar13": "flags",
                "uVar14": "ch",
                "uVar21": "u_var21",
                "uVar24": "temp_variable5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008378c": {
            "additional_data": {
                "FUN_00082b38": {
                    "helper_function1": 1
                },
                "FUN_0008378c": {
                    "decode_and_update_flag": 1,
                    "decode_and_update_flags": 1,
                    "decode_and_validate_data": 1,
                    "decrypt_data": 1,
                    "extract_data": 1,
                    "extract_info_from_binary": 1,
                    "process_data": 4,
                    "process_function": 1
                },
                "FUN_00083adc": {
                    "helper_function2": 1
                },
                "auStack_420": {
                    "additional_stack": 1,
                    "buffer": 1,
                    "buffer_array": 1,
                    "compressed_data": 1,
                    "stack_array": 6,
                    "stack_buffer": 9,
                    "stack_data": 2,
                    "stack_var1": 1,
                    "temp_buffer": 2
                },
                "iVar1": {
                    "result": 17,
                    "result1": 3,
                    "return_value": 7
                },
                "iVar2": {
                    "check": 1,
                    "check_result": 3,
                    "result": 1,
                    "result2": 4,
                    "return_flag": 1,
                    "second_return_value": 2,
                    "status": 1,
                    "sub_func_result": 1,
                    "sub_function_result": 1,
                    "sub_result": 9,
                    "sub_return_value": 1,
                    "temp_result": 1
                },
                "local_424": {
                    "buffer_size8": 1,
                    "constant5": 3,
                    "constant6": 1,
                    "data": 1,
                    "local_var1": 1,
                    "local_var7": 1,
                    "local_var9": 2,
                    "local_variable": 2,
                    "local_variable8": 1,
                    "local_variable9": 1,
                    "offset3": 1,
                    "ptr4": 1,
                    "some_value": 1,
                    "stack_array": 1,
                    "temp_buffer": 1,
                    "temp_var": 1,
                    "unchanged_value": 1,
                    "unused_variable": 1,
                    "value3": 2,
                    "value_2": 1,
                    "value_3": 1,
                    "value_4": 1
                },
                "local_464": {
                    "buffer_size7": 1,
                    "constant4": 4,
                    "constant5": 1,
                    "local_value5": 1,
                    "local_var10": 1,
                    "local_var4": 1,
                    "local_var8": 2,
                    "local_variable7": 1,
                    "local_variable8": 1,
                    "local_variable_7": 1,
                    "offset2": 1,
                    "other_value": 1,
                    "param4": 2,
                    "param_2_offset_2": 1,
                    "ptr3": 1,
                    "size3": 1,
                    "value2": 2,
                    "value_1": 1,
                    "value_2": 1,
                    "value_3": 1,
                    "value_three": 1
                },
                "local_46c": {
                    "buffer_size6": 1,
                    "constant3": 4,
                    "constant4": 1,
                    "local_value4": 1,
                    "local_var2": 1,
                    "local_var7": 2,
                    "local_var8": 1,
                    "local_variable7": 1,
                    "local_variable_6": 1,
                    "offset": 1,
                    "offset1": 1,
                    "param3": 2,
                    "param_2_offset": 1,
                    "ptr2": 1,
                    "value": 1,
                    "value1": 2,
                    "value_2": 1,
                    "value_two": 1
                },
                "local_470": {
                    "buffer_size5": 1,
                    "constant2": 4,
                    "constant3": 1,
                    "constant_value3": 1,
                    "count": 1,
                    "counter": 1,
                    "dummy_value": 1,
                    "flag": 1,
                    "local_value3": 1,
                    "local_var14": 1,
                    "local_var6": 2,
                    "local_variable6": 2,
                    "local_variable_5": 1,
                    "size2": 1,
                    "size_2": 1,
                    "value": 2,
                    "value3": 1,
                    "variable2": 1,
                    "zero": 2,
                    "zero_value": 2
                },
                "local_474": {
                    "array_size2": 1,
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "buffer_size2": 5,
                    "buffer_size4": 1,
                    "buffer_size_2": 2,
                    "constant1": 4,
                    "constant2": 1,
                    "constant_value2": 1,
                    "local_size2": 1,
                    "local_var13": 1,
                    "local_var5": 2,
                    "local_variable5": 2,
                    "local_variable_4": 1,
                    "size": 1,
                    "size1": 1,
                    "size2": 1,
                    "size_1": 1
                },
                "local_478": {
                    "array_ptr": 1,
                    "buffer": 10,
                    "buffer_pointer": 1,
                    "buffer_ptr": 5,
                    "local_buffer": 2,
                    "local_data": 1,
                    "local_pointer": 1,
                    "local_var15": 1,
                    "local_var4": 2,
                    "local_var5": 1,
                    "local_variable4": 2,
                    "output_buffer": 1,
                    "pointer": 2,
                    "ptr1": 1
                },
                "local_47a": {
                    "buffer_size3": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "local_value2": 1,
                    "local_var3": 3,
                    "local_var9": 1,
                    "local_variable3": 2,
                    "local_variable_3": 1,
                    "modified_flag": 1,
                    "modified_value2": 1,
                    "parameter_value": 1,
                    "short_value": 4,
                    "short_value2": 1,
                    "unmasked_value": 1,
                    "value": 9,
                    "value2": 1,
                    "variable1": 1
                },
                "local_47c": {
                    "buffer_size2": 1,
                    "flag": 1,
                    "flag1": 1,
                    "flag_1": 1,
                    "flags": 3,
                    "local_value1": 1,
                    "local_var11": 1,
                    "local_var2": 2,
                    "local_variable2": 2,
                    "local_variable_2": 1,
                    "masked_short": 1,
                    "masked_value": 8,
                    "modified_value": 6,
                    "short_value": 1,
                    "value1": 1
                },
                "local_480": {
                    "array_size1": 1,
                    "buffer_size": 12,
                    "buffer_size1": 5,
                    "buffer_size_1": 1,
                    "constant1": 1,
                    "constant_value1": 1,
                    "local_size1": 1,
                    "local_var1": 2,
                    "local_var12": 1,
                    "local_variable1": 2,
                    "local_variable_1": 1,
                    "size": 1,
                    "size1": 1
                },
                "local_488": {
                    "array": 1,
                    "buffer": 3,
                    "buffer_array": 9,
                    "buffer_ptrs": 1,
                    "local_array": 5,
                    "local_arrays": 1,
                    "local_buffers": 2,
                    "local_pointers": 1,
                    "local_variables": 1,
                    "stack_array": 1,
                    "stack_buffer": 2
                },
                "param_1": {
                    "arg1": 6,
                    "context": 1,
                    "helper_function2_arg1": 1,
                    "input1": 1,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 1,
                    "param": 1,
                    "param1": 10,
                    "param_1": 4,
                    "parameter1": 1,
                    "undefined_param_1": 1
                },
                "param_2": {
                    "arg2": 6,
                    "binary_address": 1,
                    "binary_base_address": 1,
                    "binary_data": 1,
                    "binary_param": 2,
                    "data": 2,
                    "data_ptr": 1,
                    "helper_function2_arg2": 1,
                    "input2": 1,
                    "input_data": 1,
                    "input_parameter": 2,
                    "param2": 9,
                    "param_2": 2,
                    "parameter2": 1
                },
                "param_3": {
                    "helper_function1_arg3": 1
                },
                "param_4": {
                    "helper_function1_arg4": 1
                }
            },
            "called": [
                "FUN_00082b38",
                "FUN_00083adc"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint process_data_0008378c(undefined4 param1,int param2)\n\n{\n  int result;\n  int sub_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort masked_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size2;\n  undefined4 constant2;\n  undefined4 constant3;\n  undefined4 constant4;\n  undefined4 constant5;\n  undefined stack_buffer [1024];\n  \n  constant5 = *(undefined4 *)(param2 + 100);\n  constant3 = *(undefined4 *)(param2 + 0x1c);\n  value = *(undefined2 *)(param2 + 0xe);\n  constant4 = *(undefined4 *)(param2 + 0x24);\n  buffer_array[0] = stack_buffer;\n  masked_value = *(ushort *)(param2 + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size2 = 0x400;\n  constant2 = 0;\n  buffer = buffer_array[0];\n  result = FUN_00082b38(param1,buffer_array);\n  if ((-1 < result) && (sub_result = FUN_00083adc(param1,buffer_array), sub_result != 0)) {\n    result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(param2 + 0xc) = *(ushort *)(param2 + 0xc) | 0x40;\n  }\n  return result;\n}\n\n",
            "current_name": "process_data_0008378c",
            "entrypoint": "0x0008378c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008378c": "process_data_0008378c",
                "auStack_420": "stack_buffer",
                "iVar1": "result",
                "iVar2": "sub_result",
                "local_424": "constant5",
                "local_464": "constant4",
                "local_46c": "constant3",
                "local_470": "constant2",
                "local_474": "buffer_size2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "masked_value",
                "local_480": "buffer_size",
                "local_488": "buffer_array",
                "param_1": "param1",
                "param_2": "param2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083808": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_relocation_array": 1,
                    "rel_array": 1,
                    "relocation_array": 1
                },
                "FUN_00083808": {
                    "check_and_modify_value": 1,
                    "check_and_update_flags": 1,
                    "check_and_update_param": 1,
                    "check_and_update_parameters": 1,
                    "decode_and_check_parameters": 1,
                    "extract_data_from_binary": 1,
                    "process_data": 8,
                    "process_function": 4,
                    "process_parameters": 1,
                    "process_relocation_entry": 1,
                    "process_relocations": 1,
                    "update_status": 1,
                    "validate_and_process_relocation": 1,
                    "validate_and_update_data": 2,
                    "validate_and_update_param": 1,
                    "validate_input": 1,
                    "validate_input_data": 1,
                    "verify_and_process_data": 1
                },
                "FUN_00083b14": {
                    "check_and_perform_action": 1,
                    "check_offset": 1,
                    "perform_action_a": 1
                },
                "FUN_00083d9c": {
                    "perform_action_b": 1,
                    "perform_cleanup": 1,
                    "reset_param": 1
                },
                "FUN_000842a4": {
                    "handle_param": 1,
                    "perform_action_c": 1,
                    "process_data": 1
                },
                "iVar1": {
                    "i_var1": 1,
                    "param_2_at_offset_5": 1,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_var1": 8,
                    "temp_var_1": 2,
                    "temp_var_2": 1,
                    "temp_variable": 1,
                    "temp_variable_2": 1,
                    "value": 2,
                    "value1": 8,
                    "var1": 4
                },
                "iVar2": {
                    "flag": 1,
                    "i_var2": 1,
                    "param_2_at_offset_4": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_var": 1,
                    "temp_var2": 8,
                    "temp_var_2": 2,
                    "temp_variable_1": 1,
                    "temp_variable_2": 1,
                    "value2": 9,
                    "var2": 4
                },
                "param_1": {
                    "error_code": 1,
                    "out_param": 1,
                    "output": 4,
                    "output_param": 1,
                    "output_parameter": 1,
                    "output_pointer": 1,
                    "output_ptr": 2,
                    "output_status": 2,
                    "output_value": 1,
                    "result": 11,
                    "result_code": 3,
                    "results": 1,
                    "status": 2
                },
                "param_2": {
                    "data": 11,
                    "entry": 1,
                    "input": 3,
                    "input_array": 4,
                    "input_data": 3,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_parameters": 1,
                    "input_ptr": 1,
                    "param_array": 2,
                    "parameters": 1,
                    "relocation_data": 1
                },
                "uVar3": {
                    "bitwise_value": 1,
                    "data_value": 1,
                    "flag": 1,
                    "input_parameter_value_as_uint": 1,
                    "new_flag": 1,
                    "num": 1,
                    "param_2_short_at_offset_3_uint": 1,
                    "parameter_value": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_value": 1,
                    "temp_var3": 6,
                    "temp_var_3": 2,
                    "u_value": 1,
                    "u_var3": 1,
                    "uint_val": 1,
                    "ushort_value": 1,
                    "value3": 2,
                    "value_1": 1,
                    "var3": 4
                },
                "uVar4": {
                    "flag": 1,
                    "input_parameter_value_as_ushort": 1,
                    "mask": 1,
                    "old_flag": 1,
                    "original_value": 1,
                    "param_2_short_at_offset_3": 1,
                    "parameter_flag": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var4": 6,
                    "temp_var_4": 2,
                    "u_var4": 1,
                    "ushort_val": 1,
                    "ushort_value": 3,
                    "value3": 1,
                    "value4": 2,
                    "value_2": 1,
                    "var4": 4
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_000842a4"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38",
                "FUN_000844c4"
            ],
            "code": "\nundefined4 verify_and_process_data_00083808(undefined4 *result,int *data)\n\n{\n  int value1;\n  int value2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((relocation_array[140].r_offset != 0) &&\n     (*(int *)(relocation_array[140].r_offset + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  temp_var4 = *(ushort *)(data + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    value2 = data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *result = 9;\n      *(ushort *)(data + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)data[0xc] != (int *)0x0) {\n        if ((int *)data[0xc] != data + 0x10) {\n          FUN_00083d9c(result);\n          temp_var4 = *(ushort *)(data + 3);\n        }\n        data[0xc] = 0;\n      }\n      value2 = data[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *data = value2;\n      data[1] = 0;\n    }\n    else {\n      value2 = data[4];\n    }\n    *(ushort *)(data + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((value2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    FUN_000842a4(result,data);\n    temp_var3 = (uint)*(ushort *)(data + 3);\n    value2 = data[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    value1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      value1 = data[5];\n    }\n    data[2] = value1;\n  }\n  else {\n    data[6] = -data[5];\n    data[2] = 0;\n  }\n  if ((value2 == 0) && ((int)((uint)*(ushort *)(data + 3) << 0x18) < 0)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "verify_and_process_data_00083808",
            "entrypoint": "0x00083808",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00083808": "verify_and_process_data_00083808",
                "iVar1": "value1",
                "iVar2": "value2",
                "param_1": "result",
                "param_2": "data",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083974": {
            "additional_data": {
                "FUN_00081df4": {
                    "do_something": 1,
                    "perform_action": 2,
                    "print_value": 1,
                    "process_data": 1,
                    "process_function": 1,
                    "some_subfunction": 1,
                    "sub_function": 1
                },
                "FUN_00083974": {
                    "copy_data": 1,
                    "copy_parameter": 1,
                    "copy_return_value": 1,
                    "copy_value": 3,
                    "echo_value": 1,
                    "identity": 4,
                    "identity_function": 16,
                    "param_to_return": 1,
                    "pass_through_function": 1,
                    "return_parameter_value": 1,
                    "simplify": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 13,
                    "input_value": 6,
                    "parameter1": 1,
                    "value": 5,
                    "value_to_copy": 1
                }
            },
            "called": [
                "FUN_00081df4"
            ],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "current_name": "identity_function_00083974",
            "entrypoint": "0x00083974",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083adc": {
            "additional_data": {
                "FUN_00083adc": {
                    "data_transfer": 1,
                    "decode_and_process_data": 4,
                    "decompress_data": 2,
                    "process_data": 11,
                    "reverse_data_transfer": 1,
                    "reverse_string": 1
                },
                "FUN_00083b14": {
                    "call_another_func": 1,
                    "error_handling_function": 1,
                    "helper_function1": 1
                },
                "FUN_00083d9c": {
                    "cleanup": 1,
                    "cleanup_function": 1,
                    "helper_function2": 1
                },
                "iVar2": {
                    "count": 1,
                    "counter": 2,
                    "index_var": 2,
                    "input_length": 1,
                    "integer_var1": 1,
                    "length": 1,
                    "offset": 2,
                    "packet_size": 1,
                    "size": 1,
                    "temp_int_var2": 1,
                    "temp_var": 2,
                    "temp_var1": 4,
                    "temp_var2": 1,
                    "temp_variable": 2,
                    "total_len": 1,
                    "value1": 2,
                    "var1": 1,
                    "var2": 2,
                    "var_i": 1,
                    "variable1": 1
                },
                "iVar5": {
                    "count_var": 1,
                    "integer_var2": 1,
                    "temp2": 3,
                    "temp_counter": 1,
                    "temp_int_var3": 1,
                    "temp_val": 1,
                    "temp_value": 1,
                    "temp_var": 4,
                    "temp_var2": 4,
                    "temp_var4": 3,
                    "temp_var5": 1,
                    "tmp_var": 1,
                    "val": 1,
                    "value2": 1,
                    "value4": 1,
                    "var4": 1,
                    "var5": 2,
                    "var_j": 1,
                    "variable4": 1
                },
                "iVar7": {
                    "integer_var3": 1,
                    "temp3": 3,
                    "temp_int_var": 1,
                    "temp_var": 2,
                    "temp_var2": 4,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_var5": 3,
                    "temp_var7": 1,
                    "temp_var_2": 1,
                    "temp_variable2": 2,
                    "value3": 1,
                    "value5": 1,
                    "var": 1,
                    "var5": 1,
                    "var7": 2,
                    "var_k": 1,
                    "variable5": 1
                },
                "param_1": {
                    "array1": 2,
                    "data": 1,
                    "data_array": 2,
                    "data_buffer": 5,
                    "data_ptr": 4,
                    "input_array": 10,
                    "input_buffer": 1,
                    "input_data": 4,
                    "source_data": 2
                },
                "param_2": {
                    "array2": 2,
                    "compressed_data": 1,
                    "config": 1,
                    "control_block": 1,
                    "data": 1,
                    "dest_data": 1,
                    "destination_data": 1,
                    "header_data": 1,
                    "info_array": 2,
                    "info_buffer": 2,
                    "info_ptr": 3,
                    "metadata_ptr": 1,
                    "output_array": 9,
                    "output_buffer": 1,
                    "output_data": 2,
                    "param_buffer": 1,
                    "process_info": 1
                },
                "pcVar6": {
                    "callback": 2,
                    "callback_func": 4,
                    "callback_function": 3,
                    "decoder": 1,
                    "decompress_function": 1,
                    "func_ptr": 1,
                    "function_pointer": 6,
                    "function_ptr": 10,
                    "info_callback": 1,
                    "transfer_function": 1
                },
                "piVar1": {
                    "additional_ptr": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "pointer_var": 1,
                    "pointer_var1": 1,
                    "ptr": 2,
                    "ptr_var1": 4,
                    "temp_int_ptr": 1,
                    "temp_pointer": 3,
                    "temp_ptr": 10,
                    "temp_ptr1": 2,
                    "temp_var1": 1,
                    "var1_ptr": 1
                },
                "uVar3": {
                    "control_flags": 1,
                    "flag": 3,
                    "flag_var": 1,
                    "flags": 9,
                    "header_flags": 1,
                    "info_flags": 1,
                    "output_length": 1,
                    "status": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "transfer_size": 1,
                    "ushort_var": 2,
                    "value2": 1,
                    "var2": 1,
                    "var3": 1,
                    "var_u": 1,
                    "variable2": 1
                },
                "uVar4": {
                    "flag": 1,
                    "flag_temp": 1,
                    "flags": 1,
                    "flags_temp": 1,
                    "info_mask": 1,
                    "temp": 4,
                    "temp_flag": 3,
                    "temp_flags": 2,
                    "temp_uint": 1,
                    "temp_var": 3,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "transfer_flags": 1,
                    "u_flag": 1,
                    "uint_var": 2,
                    "value3": 1,
                    "var3": 1,
                    "var4": 1,
                    "var_u2": 1,
                    "variable3": 1
                },
                "unaff_r4": {
                    "constant_value": 1,
                    "result": 7,
                    "result_register": 1,
                    "result_var": 1,
                    "return_code": 2,
                    "return_val": 1,
                    "return_value": 7,
                    "status": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_variable_unaff": 1,
                    "unaff_r4": 1,
                    "unaff_var": 1,
                    "unaffected_var": 1,
                    "unassigned_var1": 1,
                    "unused_reg": 1,
                    "unused_var": 1
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_0008378c",
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_000846a4"
            ],
            "code": "\nundefined4 decode_and_process_data_00083adc(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int temp_var1;\n  ushort flags;\n  uint temp;\n  int temp_var2;\n  code *function_ptr;\n  undefined4 return_value;\n  int temp_var2;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    FUN_00083b14();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var2 = output_array[4];\n    if (temp_var2 == 0) {\n      return 0;\n    }\n    temp_var1 = *output_array;\n    if ((flags & 3) == 0) {\n      temp_var2 = output_array[5];\n    }\n    else {\n      temp_var2 = 0;\n    }\n    *output_array = temp_var2;\n    temp_var1 = temp_var1 - temp_var2;\n    output_array[2] = temp_var2;\n    do {\n      if (temp_var1 < 1) {\n        return 0;\n      }\n      temp_var2 = (*(code *)output_array[9])(input_array,output_array[7],temp_var2,temp_var1,return_value);\n      temp_var1 = temp_var1 - temp_var2;\n      temp_var2 = temp_var2 + temp_var2;\n    } while (0 < temp_var2);\nLAB_00083a54:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flags | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp = (uint)(flags | 0x800);\n  temp_var2 = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var1 = (*function_ptr)(input_array,output_array[7],temp & 0x1000,1);\n    if ((temp_var1 == -1) && (temp_var2 = *input_array, temp_var2 != 0)) {\n      if ((temp_var2 == 0x1d) || (temp_var2 == 0x16)) {\n        *input_array = temp_var2;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp = (uint)*(ushort *)(output_array + 3);\n    function_ptr = (code *)output_array[10];\n  }\n  else {\n    temp_var1 = output_array[0x14];\n  }\n  if (((int)(temp << 0x1d) < 0) && (temp_var1 = temp_var1 - output_array[1], output_array[0xc] != 0)) {\n    temp_var1 = temp_var1 - output_array[0xf];\n  }\n  temp_var1 = (*function_ptr)(input_array,output_array[7],temp_var1,0);\n  if (temp_var1 == -1) {\n    temp_var2 = *input_array;\n    if (temp_var2 != 0) {\n      if ((temp_var2 != 0x1d) && (temp_var2 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flags;\n    *output_array = output_array[4];\n  }\n  else {\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flags;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_array[0x14] = temp_var1;\n  }\nLAB_00083a00:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = temp_var2;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    FUN_00083d9c(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "decode_and_process_data_00083adc",
            "entrypoint": "0x00083adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083adc": "decode_and_process_data_00083adc",
                "iVar2": "temp_var1",
                "iVar5": "temp_var2",
                "iVar7": "temp_var2",
                "param_1": "input_array",
                "param_2": "output_array",
                "pcVar6": "function_ptr",
                "piVar1": "temp_ptr",
                "uVar3": "flags",
                "uVar4": "temp",
                "unaff_r4": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b14": {
            "additional_data": {
                "FUN_00082504": {
                    "fill_array_with_zeros": 1,
                    "initialize_array": 2,
                    "initialize_fields": 1,
                    "initialize_memory": 3
                },
                "FUN_00083b14": {
                    "initialize_components": 1,
                    "initialize_configuration": 1,
                    "initialize_data_structures": 24,
                    "initialize_device": 1,
                    "initialize_parameters": 1,
                    "initialize_params": 1,
                    "initialize_struct": 1,
                    "initialize_structs": 1
                },
                "LAB_00083b08_1": {
                    "first_label": 1
                },
                "LAB_00084440_1": {
                    "second_label": 1
                },
                "LAB_000844bc_1": {
                    "third_label": 1
                },
                "param_1": {
                    "base_address": 6,
                    "config_ptr": 1,
                    "data": 1,
                    "data_struct": 3,
                    "data_struct_addr": 1,
                    "data_struct_ptr": 4,
                    "data_structure_address": 1,
                    "data_structure_param": 1,
                    "data_structure_pointer": 1,
                    "data_structure_ptr": 1,
                    "data_structures": 6,
                    "device_ptr": 1,
                    "param": 2,
                    "struct_address": 1,
                    "struct_pointer": 1
                },
                "param_2": {
                    "array_data": 1,
                    "default_value": 2,
                    "memory_param": 1
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 1,
                    "memory_size": 1,
                    "size": 1
                },
                "puVar1": {
                    "component1": 1,
                    "data_struct1": 1,
                    "data_struct_ptr1": 1,
                    "data_structure1": 1,
                    "data_structure_ptr1": 1,
                    "device_1_params": 1,
                    "device_data_ptr": 1,
                    "first_array": 1,
                    "first_data_structure": 1,
                    "first_struct_value2": 1,
                    "pointer1": 3,
                    "ptr1": 8,
                    "ptr_data1": 1,
                    "ptr_data_struct1": 1,
                    "struct1": 2,
                    "struct1_addr": 1,
                    "struct1_ptr": 1,
                    "struct_ptr": 1,
                    "struct_ptr1": 2,
                    "temp_ptr1": 1
                },
                "puVar2": {
                    "component2": 1,
                    "data_struct2": 1,
                    "data_struct_ptr2": 1,
                    "data_structure2": 1,
                    "data_structure_ptr2": 1,
                    "device_2_params": 1,
                    "device_config_ptr": 1,
                    "pointer2": 3,
                    "ptr2": 8,
                    "ptr_data2": 1,
                    "ptr_data_struct2": 1,
                    "second_array": 1,
                    "second_data_structure": 1,
                    "second_struct_value": 1,
                    "struct2": 2,
                    "struct2_addr": 1,
                    "struct2_ptr": 1,
                    "struct_ptr2": 3,
                    "temp_ptr2": 1
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_00083808",
                "FUN_00082b38",
                "FUN_00083adc",
                "FUN_000844c4",
                "FUN_000846a4"
            ],
            "code": "\nvoid initialize_data_structures_00083b14(int base_address)\n\n{\n  undefined4 *ptr1;\n  undefined4 *ptr2;\n  \n  if (*(int *)(base_address + 0x38) == 0) {\n    ptr1 = *(undefined4 **)(base_address + 4);\n    *(undefined **)(base_address + 0x3c) = &first_label;\n    *(undefined4 *)(base_address + 0x2e4) = 3;\n    *(int *)(base_address + 0x2e8) = base_address + 0x2ec;\n    *(undefined4 *)(base_address + 0x2e0) = 0;\n    *(undefined2 *)(ptr1 + 3) = 4;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    *(undefined2 *)((int)ptr1 + 0xe) = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr2 = *(undefined4 **)(base_address + 8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &second_label;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &third_label;\n    *(undefined2 *)((int)ptr2 + 0xe) = 1;\n    *(undefined2 *)(ptr2 + 3) = 9;\n    *ptr2 = 0;\n    ptr2[1] = 0;\n    ptr2[2] = 0;\n    ptr2[0x19] = 0;\n    ptr2[4] = 0;\n    ptr2[5] = 0;\n    ptr2[6] = 0;\n    FUN_00082504(ptr2 + 0x17,0,8);\n    ptr1 = *(undefined4 **)(base_address + 0xc);\n    ptr2[7] = ptr2;\n    ptr2[8] = &second_label;\n    ptr2[9] = 0x84465;\n    ptr2[10] = 0x8449d;\n    ptr2[0xb] = &third_label;\n    *(undefined2 *)(ptr1 + 3) = 0x12;\n    *(undefined2 *)((int)ptr1 + 0xe) = 2;\n    *ptr1 = 0;\n    ptr1[1] = 0;\n    ptr1[2] = 0;\n    ptr1[0x19] = 0;\n    ptr1[4] = 0;\n    ptr1[5] = 0;\n    ptr1[6] = 0;\n    FUN_00082504(ptr1 + 0x17,0,8);\n    ptr1[7] = ptr1;\n    ptr1[8] = &second_label;\n    ptr1[9] = 0x84465;\n    ptr1[10] = 0x8449d;\n    ptr1[0xb] = &third_label;\n    *(undefined4 *)(base_address + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083b14",
            "entrypoint": "0x00083b14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "LAB_00083b08_1": "first_label",
                "LAB_00084440_1": "second_label",
                "LAB_000844bc_1": "third_label",
                "param_1": "base_address",
                "puVar1": "ptr1",
                "puVar2": "ptr2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083c08": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c08",
            "entrypoint": "0x00083c08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c0c": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c0c",
            "entrypoint": "0x00083c0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c40": {
            "additional_data": {
                "FUN_00083c40": {
                    "extract_and_write_bytes": 1,
                    "process_data": 27,
                    "process_input": 2
                },
                "abStack_1b": {
                    "array_data": 1,
                    "buffer": 1,
                    "byte_array": 13,
                    "byte_stack": 6,
                    "char_buffer": 1,
                    "data_array": 1,
                    "stack_array": 2,
                    "stack_buffer": 1,
                    "stack_bytes": 2,
                    "temp_array": 2
                },
                "iVar1": {
                    "result": 27,
                    "status": 4
                },
                "local_1c": {
                    "byte_val": 1,
                    "byte_value": 9,
                    "byte_var": 2,
                    "current_byte": 5,
                    "current_byte_local": 1,
                    "current_char": 1,
                    "data": 1,
                    "default_value": 1,
                    "local_byte": 1,
                    "temp_byte": 7,
                    "temp_value": 1
                },
                "param_1": {
                    "arg1": 3,
                    "flag": 1,
                    "input": 1,
                    "input1": 1,
                    "input_flag": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "output_buffer": 1,
                    "param": 2,
                    "param1": 14,
                    "status": 3
                },
                "param_2": {
                    "arg2": 2,
                    "count": 1,
                    "data_size": 5,
                    "input2": 1,
                    "input_length": 1,
                    "input_size": 2,
                    "length": 6,
                    "param2": 8,
                    "size": 4
                },
                "param_3": {
                    "arg3": 2,
                    "buffer": 1,
                    "data": 14,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "input3": 1,
                    "input_buffer": 1,
                    "input_data": 1,
                    "param3": 8
                },
                "pbVar4": {
                    "byte_pointer": 1,
                    "byte_ptr": 2,
                    "current_byte": 5,
                    "current_pointer": 2,
                    "current_ptr": 5,
                    "p_byte": 1,
                    "pb_var4": 1,
                    "pointer": 1,
                    "ptr": 10,
                    "ptr_data": 1,
                    "ptr_var": 1,
                    "temp_ptr": 1
                },
                "uVar2": {
                    "byte_count": 1,
                    "bytes_written": 1,
                    "count": 2,
                    "data_valid": 1,
                    "flag": 5,
                    "index": 2,
                    "is_success": 2,
                    "length": 1,
                    "num": 1,
                    "result": 1,
                    "return_value": 1,
                    "status": 10,
                    "total_count": 1,
                    "u_var2": 1,
                    "value": 1
                },
                "uVar3": {
                    "byte_value": 10,
                    "current_byte": 8,
                    "data": 1,
                    "data_byte": 1,
                    "data_value": 1,
                    "single_byte": 1,
                    "temp_var": 1,
                    "u_var3": 1,
                    "value": 7
                },
                "uVar5": {
                    "count": 3,
                    "counter": 13,
                    "current_index": 1,
                    "i": 1,
                    "index": 10,
                    "iteration": 1,
                    "iterator": 1,
                    "u_var5": 1
                }
            },
            "called": [
                "FUN_00084298",
                "FUN_0008456c",
                "FUN_000844c4"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nuint process_data_00083c40(undefined4 param1,uint param2,byte **data)\n\n{\n  int result;\n  uint status;\n  uint byte_value;\n  byte *ptr;\n  uint counter;\n  byte byte_value;\n  byte byte_array [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(data + 3) << 0x12)) {\n    *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x2000;\n    data[0x19] = (byte *)((uint)data[0x19] | 0x2000);\n  }\n  result = FUN_00084298();\n  if ((result == 1) && (param2 - 1 < 0xff)) {\n    byte_value = param2 & 0xff;\n    byte_value = (byte)byte_value;\n    status = 1;\n  }\n  else {\n    status = FUN_0008456c(param1,&byte_value,param2,data + 0x17);\n    if (status == 0xffffffff) {\n      *(ushort *)(data + 3) = *(ushort *)(data + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (status == 0) {\n      return param2;\n    }\n    byte_value = (uint)byte_value;\n  }\n  counter = 0;\n  do {\n    ptr = data[2] + -1;\n    data[2] = ptr;\n    if ((int)ptr < 0) {\n      if ((int)data[6] <= (int)ptr) {\n        **data = (byte)byte_value;\n        ptr = *data;\n        byte_value = (uint)*ptr;\n        if (byte_value != 10) goto LAB_00083c90;\n      }\n      result = FUN_000844c4(param1,byte_value,data);\n      if (result == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **data = (byte)byte_value;\n      ptr = *data;\nLAB_00083c90:\n      *data = ptr + 1;\n    }\n    if (status <= counter + 1) {\n      return param2;\n    }\n    byte_value = (uint)byte_array[counter];\n    counter = counter + 1;\n  } while( true );\n}\n\n",
            "current_name": "process_data_00083c40",
            "entrypoint": "0x00083c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083c40": "process_data_00083c40",
                "abStack_1b": "byte_array",
                "iVar1": "result",
                "local_1c": "byte_value",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "data",
                "pbVar4": "ptr",
                "uVar2": "status",
                "uVar3": "byte_value",
                "uVar5": "counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d00": {
            "additional_data": {
                "141": {
                    "index": 1
                },
                "DAT_20071194": {
                    "constant_value": 1,
                    "data_offset": 3,
                    "global_offset": 1,
                    "global_variable": 1,
                    "offset_delta": 1,
                    "var_a": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array_a": 1
                },
                "FUNC_00082598": {
                    "initialize": 6,
                    "initialize_func": 1,
                    "initialize_function": 3
                },
                "FUNC_0008259c": {
                    "cleanup": 2,
                    "cleanup_function": 2,
                    "finalize": 2,
                    "finalize_func": 1,
                    "finalize_function": 2,
                    "function_c": 1
                },
                "FUNC_00082970": {
                    "function_b": 1
                },
                "FUN_00082598": {
                    "function_a": 1,
                    "initialize_function": 2
                },
                "FUN_00082970": {
                    "adjust_address": 1,
                    "modify_info_offset": 1,
                    "modify_value_function": 1,
                    "modify_variable": 1
                },
                "FUN_00083d00": {
                    "adjust_relocation_entry": 1,
                    "decompilation_fix_function": 1,
                    "decompile_binary_function": 1,
                    "relocate_and_update": 1,
                    "relocate_function": 2,
                    "relocate_memory": 1,
                    "relocate_section": 1,
                    "reverse_adjust_memory": 1,
                    "reverse_and_update": 1,
                    "update_relocation": 1
                },
                "iVar1": {
                    "fun_return_value": 1,
                    "result": 20,
                    "result1": 7,
                    "return_value": 2,
                    "temp1": 1
                },
                "iVar3": {
                    "adjusted_address": 1,
                    "adjusted_length": 1,
                    "adjusted_offset": 10,
                    "adjusted_value": 6,
                    "aligned_addr": 1,
                    "aligned_address": 1,
                    "calculated_value": 2,
                    "delta": 1,
                    "new_address": 1,
                    "new_offset": 3,
                    "new_value": 1,
                    "rel_offset": 1,
                    "reversed_value": 1,
                    "value2": 1
                },
                "param_1": {
                    "arg1": 4,
                    "argument_1": 1,
                    "function_pointer": 1,
                    "input": 1,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 8,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_ptr": 2,
                    "memory_pointer": 1,
                    "old_param": 1,
                    "param": 2,
                    "param1": 3,
                    "param_1": 2,
                    "pointer": 1
                },
                "param_2": {
                    "arg2": 3,
                    "argument_2": 1,
                    "input2": 1,
                    "input_value": 2,
                    "length": 1,
                    "offset": 14,
                    "original_offset": 1,
                    "param2": 3,
                    "param_2": 1,
                    "size": 1,
                    "size_to_adjust": 1,
                    "value_to_compare": 1,
                    "value_to_reverse": 1
                },
                "uVar2": {
                    "adjusted_offset": 2,
                    "config_value": 1,
                    "entry": 1,
                    "info": 1,
                    "info_offset": 1,
                    "info_value": 1,
                    "mask": 3,
                    "masked_value": 6,
                    "modified_value": 1,
                    "offset": 1,
                    "offset_masked": 1,
                    "r_info": 1,
                    "rel_addr": 1,
                    "rel_address": 1,
                    "rel_array_offset": 1,
                    "rel_entry_address": 1,
                    "rel_info": 4,
                    "relocation_value": 1,
                    "shifted_value": 1,
                    "value1": 1
                }
            },
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "calling": [
                "FUN_00083d9c"
            ],
            "code": "\nundefined4 relocate_function_00083d00(undefined4 input_param,int offset)\n\n{\n  int result;\n  uint masked_value;\n  int adjusted_offset;\n  \n  FUNC_00082598();\n  masked_value = *(uint *)(array[141].r_info + 4) & 0xfffffffc;\n  adjusted_offset = ((masked_value - offset) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_offset) {\n    result = FUN_00082970(input_param,0);\n    if (result == array[141].r_info + masked_value) {\n      result = FUN_00082970(input_param,-adjusted_offset);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_offset;\n        *(uint *)(array[141].r_info + 4) = masked_value - adjusted_offset | 1;\n        FUNC_0008259c(input_param);\n        return 1;\n      }\n      adjusted_offset = FUN_00082970(input_param,0);\n      if (0xf < (int)(adjusted_offset - array[141].r_info)) {\n        DAT_20071194 = adjusted_offset - array[270].r_offset;\n        *(dword *)(array[141].r_info + 4) =\n             adjusted_offset - array[141].r_info | 1;\n      }\n    }\n  }\n  FUNC_0008259c(input_param);\n  return 0;\n}\n\n",
            "current_name": "relocate_function_00083d00",
            "entrypoint": "0x00083d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "FUN_00083d00": "relocate_function_00083d00",
                "iVar1": "result",
                "iVar3": "adjusted_offset",
                "param_1": "input_param",
                "param_2": "offset",
                "uVar2": "masked_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "additional_data": {
                "DAT_20071190": {
                    "dependency_threshold": 1,
                    "threshold": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUNC_00082598": {
                    "initialize": 1,
                    "pre_process": 1
                },
                "FUNC_0008259c": {
                    "post_process": 1
                },
                "FUN_00083d00": {
                    "handle_dependency": 1
                },
                "FUN_00083d9c": {
                    "process_binary_function": 1,
                    "process_function": 4,
                    "process_rel_array": 1,
                    "process_relocation": 3,
                    "process_relocation_entries": 2,
                    "process_relocations": 3,
                    "update_function": 1,
                    "update_reloc_table": 1,
                    "update_relocation_entry": 1,
                    "update_relocation_table": 2
                },
                "LAB_00083e30": {
                    "continue_processing": 1,
                    "end_of_function": 1
                },
                "bVar2": {
                    "bool_var": 2,
                    "condition": 2,
                    "flag": 6,
                    "has_dependency": 1,
                    "is_addr2007046c": 1,
                    "is_address_match": 1,
                    "is_condition_meet": 1,
                    "is_condition_met": 2,
                    "is_condition_true": 1,
                    "is_first_entry": 1,
                    "is_match": 1,
                    "is_prev_rel_in_array": 1,
                    "is_same_value": 1,
                    "is_special": 1,
                    "is_special_case": 4,
                    "is_target_symbol_special": 1,
                    "is_var2": 2,
                    "temp9": 1
                },
                "dVar4": {
                    "address1": 2,
                    "current_entry": 4,
                    "current_rel": 1,
                    "d_temp1": 1,
                    "data1": 2,
                    "entry1": 1,
                    "info1": 1,
                    "offset": 2,
                    "rel_address": 1,
                    "rel_info": 1,
                    "rel_offset_prev": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "var2": 3,
                    "var4": 4
                },
                "dVar7": {
                    "address": 1,
                    "address2": 2,
                    "d_temp2": 1,
                    "data2": 2,
                    "entry2": 1,
                    "info2": 1,
                    "new_entry": 1,
                    "new_offset": 1,
                    "next_entry": 1,
                    "previous_entry": 2,
                    "rel_data": 1,
                    "rel_offset_aligned_prev": 1,
                    "rel_table": 1,
                    "rel_value": 1,
                    "temp2": 2,
                    "temp6": 1,
                    "temp_var4": 1,
                    "temp_var6": 2,
                    "var4": 3,
                    "var7": 4
                },
                "dVar9": {
                    "address3": 2,
                    "d_var4": 1,
                    "data3": 2,
                    "dependency_rel": 1,
                    "entry3": 1,
                    "info3": 1,
                    "new_address": 1,
                    "new_entry": 1,
                    "new_info": 1,
                    "new_offset2": 1,
                    "new_previous_entry": 1,
                    "prev_rel_address": 1,
                    "previous_entry": 1,
                    "rel_offset_next": 1,
                    "target_entry": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp_var5": 1,
                    "temp_var8": 2,
                    "var6": 3,
                    "var9": 4
                },
                "iVar1": {
                    "current_entry": 1,
                    "entry_offset": 1,
                    "index": 5,
                    "index1": 6,
                    "offset1": 1,
                    "prev_rel": 1,
                    "target_symbol": 1,
                    "temp1": 4,
                    "temp8": 1,
                    "temp_var1": 3,
                    "tmp1": 1,
                    "var1": 4,
                    "variable1": 1
                },
                "iVar5": {
                    "dependency_index": 1,
                    "index2": 7,
                    "next_entry": 1,
                    "next_rel": 1,
                    "offset2": 1,
                    "prev_entry": 1,
                    "previous_index": 1,
                    "temp": 2,
                    "temp2": 3,
                    "temp4": 1,
                    "temp7": 1,
                    "temp_index": 1,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "tmp2": 1,
                    "var5": 4,
                    "variable2": 1
                },
                "param_1": {
                    "arg1": 10,
                    "argument1": 1,
                    "data": 1,
                    "input": 2,
                    "input_parameter": 1,
                    "new_param": 1,
                    "param": 2,
                    "param1": 8,
                    "param_1": 1,
                    "param_addr": 1,
                    "parameter_1": 1,
                    "ptr_to_param1": 1,
                    "unknown_param": 1
                },
                "param_2": {
                    "arg2": 9,
                    "argument2": 1,
                    "count": 1,
                    "data": 1,
                    "input": 1,
                    "input_param": 1,
                    "param2": 9,
                    "param_value": 1,
                    "parameter_2": 1,
                    "rel_table_address": 1,
                    "relocation_offset": 1,
                    "relocation_table": 2,
                    "size": 2
                },
                "uVar3": {
                    "entry_flags": 1,
                    "entry_value": 1,
                    "flag1": 1,
                    "flags": 5,
                    "mask": 1,
                    "rel_info": 1,
                    "rel_offset": 1,
                    "relocation_entry": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_var2": 2,
                    "u_temp": 1,
                    "value": 1,
                    "value1": 5,
                    "var1": 3,
                    "var3": 4
                },
                "uVar6": {
                    "entry_size": 1,
                    "flag2": 1,
                    "offset": 6,
                    "rel_offset": 2,
                    "rel_offset_aligned": 1,
                    "size": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_var5": 2,
                    "u_temp2": 1,
                    "updated_mask": 1,
                    "value2": 5,
                    "var3": 3,
                    "var6": 4
                },
                "uVar8": {
                    "adjusted_entry_size": 1,
                    "flag3": 1,
                    "new_offset": 3,
                    "new_size": 1,
                    "new_value": 1,
                    "next_offset": 1,
                    "next_rel_offset": 1,
                    "rel_offset_aligned_next": 1,
                    "rel_size": 1,
                    "result": 1,
                    "sum": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp_var7": 2,
                    "u_var3": 1,
                    "updated_offset": 1,
                    "value3": 4,
                    "var5": 3,
                    "var8": 4
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_00083d00",
                "FUN_0008259c"
            ],
            "calling": [
                "FUN_00083808",
                "FUN_00081e14",
                "FUN_00081e04",
                "FUN_00083f34",
                "FUN_00083adc",
                "FUN_000825b0",
                "FUN_000846a4"
            ],
            "code": "\nvoid process_binary_function_00083d9c(undefined4 arg1,int param2)\n\n{\n  int index1;\n  bool flag;\n  uint value1;\n  dword var4;\n  int index2;\n  uint offset;\n  dword var7;\n  uint var8;\n  dword var9;\n  \n  if (param2 == 0) {\n    return;\n  }\n  FUNC_00082598();\n  value1 = *(uint *)(param2 + -4);\n  var7 = param2 - 8;\n  offset = value1 & 0xfffffffe;\n  var4 = var7 + offset;\n  var8 = *(uint *)(var4 + 4) & 0xfffffffc;\n  if (relocation_array[141].r_info == var4) {\n    var8 = var8 + offset;\n    if (-1 < (int)(value1 << 0x1f)) {\n      var7 = var7 - *(int *)(param2 + -8);\n      index2 = *(int *)(var7 + 0xc);\n      index1 = *(int *)(var7 + 8);\n      var8 = var8 + *(int *)(param2 + -8);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    var4 = relocation_array[269].r_info;\n    *(uint *)(var7 + 4) = var8 | 1;\n    relocation_array[141].r_info = var7;\n    if (var4 <= var8) {\n      FUN_00083d00(arg1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(var4 + 4) = var8;\n    if ((value1 & 1) == 0) {\n      var7 = var7 - *(int *)(param2 + -8);\n      index1 = *(int *)(var7 + 8);\n      offset = offset + *(int *)(param2 + -8);\n      if (index1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        index2 = *(int *)(var7 + 0xc);\n        *(int *)(index1 + 0xc) = index2;\n        *(int *)(index2 + 8) = index1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(var4 + var8 + 4) << 0x1f) {\n      offset = offset + var8;\n      index1 = *(int *)(var4 + 8);\n      if ((!flag) && (index1 == 0x2007046c)) {\n        relocation_array[142].r_info = var7;\n        relocation_array[143].r_offset = var7;\n        *(undefined4 *)(var7 + 0xc) = 0x2007046c;\n        *(undefined4 *)(var7 + 8) = 0x2007046c;\n        *(uint *)(var7 + 4) = offset | 1;\n        *(uint *)(var7 + offset) = offset;\n        goto continue_processing;\n      }\n      index2 = *(int *)(var4 + 0xc);\n      *(int *)(index1 + 0xc) = index2;\n      *(int *)(index2 + 8) = index1;\n    }\n    *(uint *)(var7 + 4) = offset | 1;\n    *(uint *)(var7 + offset) = offset;\n    if (!flag) {\n      if (offset < 0x200) {\n        value1 = offset & 0xfffffff8;\n        index1 = *(int *)((int)&relocation_array[0x8d].r_info + value1);\n        relocation_array[141].r_offset =\n             relocation_array[141].r_offset | 1 << ((int)(offset >> 3) >> 2 & 0xffU);\n        *(int *)(var7 + 8) = index1;\n        *(uint *)(var7 + 0xc) = value1 + 0x20070464;\n        *(dword *)((int)&relocation_array[0x8d].r_info + value1) = var7;\n        *(dword *)(index1 + 0xc) = var7;\n        FUNC_0008259c(arg1);\n        return;\n      }\n      value1 = offset >> 9;\n      if (value1 < 5) {\n        index1 = (offset >> 6) + 0x38;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x15) {\n        index1 = value1 + 0x5b;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x55) {\n        index1 = (offset >> 0xc) + 0x6e;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x155) {\n        index1 = (offset >> 0xf) + 0x77;\n        index2 = index1 * 2;\n      }\n      else if (value1 < 0x555) {\n        index1 = (offset >> 0x12) + 0x7c;\n        index2 = index1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        index1 = 0x7e;\n      }\n      var9 = index2 * 4 + 0x20070464;\n      var4 = (&relocation_array[0x8d].r_info)[index2];\n      if (var4 == var9) {\n        relocation_array[141].r_offset =\n             relocation_array[141].r_offset | 1 << (index1 >> 2 & 0xffU);\n        var9 = var4;\n      }\n      else {\n        do {\n          if ((*(uint *)(var4 + 4) & 0xfffffffc) <= offset) break;\n          var4 = *(dword *)(var4 + 8);\n        } while (var9 != var4);\n        var9 = *(dword *)(var4 + 0xc);\n      }\n      *(dword *)(var7 + 0xc) = var9;\n      *(dword *)(var7 + 8) = var4;\n      *(dword *)(var9 + 8) = var7;\n      *(dword *)(var4 + 0xc) = var7;\n    }\n  }\ncontinue_processing:\n  FUNC_0008259c(arg1);\n  return;\n}\n\n",
            "current_name": "process_binary_function_00083d9c",
            "entrypoint": "0x00083d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00083d9c": "process_binary_function_00083d9c",
                "LAB_00083e30": "continue_processing",
                "bVar2": "flag",
                "dVar4": "var4",
                "dVar7": "var7",
                "dVar9": "var9",
                "iVar1": "index1",
                "iVar5": "index2",
                "param_1": "arg1",
                "param_2": "param2",
                "uVar3": "value1",
                "uVar6": "offset",
                "uVar8": "var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083f34": {
            "additional_data": {
                "FUN_00081e14": {
                    "allocate_memory": 8
                },
                "FUN_0008234c": {
                    "copy_data": 6,
                    "copy_memory": 2
                },
                "FUN_00082438": {
                    "modify_data": 1,
                    "modify_memory": 2,
                    "update_data": 5
                },
                "FUN_000825b0": {
                    "allocate_another_memory": 1,
                    "allocate_dynamic_memory": 1,
                    "allocate_memory2": 1,
                    "allocate_more_memory": 3,
                    "allocate_resource": 1,
                    "allocate_temp_memory": 1
                },
                "FUN_00083808": {
                    "check_condition": 1,
                    "check_function": 1,
                    "check_input_data": 1,
                    "check_params": 1,
                    "perform_checking": 1,
                    "perform_operation": 1,
                    "validate_function": 1,
                    "validate_input_array": 1
                },
                "FUN_00083adc": {
                    "check_and_update_data": 1,
                    "check_data": 2,
                    "check_memory": 2,
                    "check_result": 2,
                    "validate_data": 1
                },
                "FUN_00083d9c": {
                    "cleanup_memory": 1,
                    "free_memory": 3,
                    "release_memory": 1
                },
                "FUN_00083f34": {
                    "process_data": 13,
                    "reverse_binary_operation": 1,
                    "reverse_bytes_and_store": 1
                },
                "FUN_00084384": {
                    "append_to_buffer": 1,
                    "check_condition": 1,
                    "operation_function": 1,
                    "perform_operation": 2
                },
                "LAB_0008402e": {
                    "label2": 1
                },
                "LAB_00084030": {
                    "label1": 1
                },
                "iVar1": {
                    "error_code": 2,
                    "result": 17,
                    "result_flag": 1,
                    "return_value": 7,
                    "status": 1,
                    "temp_var": 1,
                    "tmp26": 1
                },
                "local_2c": {
                    "local_count": 1,
                    "local_flag": 1,
                    "local_value": 2,
                    "local_var": 8,
                    "local_var1": 5,
                    "local_var2c": 2,
                    "local_variable": 1,
                    "temp9": 1,
                    "temp_value3": 1,
                    "temp_var9": 1,
                    "tmp14": 1,
                    "value9": 1,
                    "var5": 1,
                    "var7": 1,
                    "var9": 2,
                    "var_local_2c": 1
                },
                "param_1": {
                    "data_buffer": 1,
                    "input_array": 2,
                    "output": 13,
                    "output_array": 1,
                    "output_data": 1,
                    "output_pointer": 3,
                    "output_ptr": 1,
                    "output_status": 1,
                    "param_array": 1,
                    "result": 6
                },
                "param_2": {
                    "data": 3,
                    "input": 10,
                    "input1": 1,
                    "input_array": 4,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_param1": 1,
                    "input_pointer": 2,
                    "int_array": 1,
                    "param_size": 1,
                    "ptr_to_uint_array": 1,
                    "size_array": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "additional_params": 1,
                    "array_pointers": 2,
                    "buffer": 4,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "data": 1,
                    "data_ptr_ptr": 1,
                    "extra_data": 1,
                    "info": 1,
                    "input2": 1,
                    "input_param2": 1,
                    "output": 3,
                    "output_data": 1,
                    "param_array": 1,
                    "param_list": 1,
                    "params": 1,
                    "pointer_array": 2,
                    "ptr_array": 1,
                    "ptr_list": 1,
                    "ptr_to_ptr_to_uint": 1,
                    "size": 1,
                    "uint_ptr_array": 1
                },
                "puVar6": {
                    "pointer1": 7,
                    "pointer3": 1,
                    "pointer_var6": 1,
                    "ptr": 1,
                    "ptr1": 7,
                    "ptr_1": 1,
                    "ptr_to_var6": 1,
                    "ptr_var1": 3,
                    "temp_pointer": 1,
                    "temp_pointer1": 2,
                    "temp_ptr": 1,
                    "temp_ptr1": 2,
                    "uint_ptr1": 1,
                    "var_ptr1": 1
                },
                "puVar7": {
                    "data_ptr": 1,
                    "pointer2": 7,
                    "pointer4": 1,
                    "pointer_var7": 1,
                    "ptr2": 7,
                    "ptr_2": 1,
                    "ptr_list_element": 1,
                    "ptr_to_var7": 1,
                    "ptr_var2": 3,
                    "temp_array": 1,
                    "temp_pointer2": 2,
                    "temp_ptr2": 2,
                    "uint_ptr2": 1,
                    "var_ptr2": 1
                },
                "uVar10": {
                    "count": 1,
                    "count3": 1,
                    "counter": 1,
                    "offset": 1,
                    "size": 1,
                    "temp5": 1,
                    "temp7": 2,
                    "temp_value4": 1,
                    "temp_var10": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var7": 4,
                    "temp_var8": 1,
                    "tmp21": 1,
                    "u_var10": 1,
                    "value": 1,
                    "value3": 1,
                    "value7": 1,
                    "var10": 1,
                    "var2": 1,
                    "var3": 1,
                    "var5": 2,
                    "var7": 2,
                    "var_10": 1
                },
                "uVar11": {
                    "calc_value": 1,
                    "count4": 1,
                    "division": 1,
                    "num_bytes": 1,
                    "temp6": 1,
                    "temp8": 2,
                    "temp_count": 1,
                    "temp_value": 1,
                    "temp_value5": 1,
                    "temp_var11": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var8": 4,
                    "temp_var9": 1,
                    "tmp27": 1,
                    "u_var11": 1,
                    "value4": 1,
                    "value8": 1,
                    "var11": 1,
                    "var4": 1,
                    "var5": 1,
                    "var6": 2,
                    "var8": 2,
                    "var_11": 1
                },
                "uVar2": {
                    "byte_value1": 1,
                    "count1": 1,
                    "flag1": 2,
                    "temp1": 6,
                    "temp_1": 1,
                    "temp_value2": 1,
                    "temp_var1": 5,
                    "temp_var2": 2,
                    "tmp22": 1,
                    "value1": 4,
                    "value_1": 1,
                    "var1": 3,
                    "var2": 1,
                    "var7": 1
                },
                "uVar3": {
                    "byte_value2": 1,
                    "count2": 1,
                    "flag2": 2,
                    "temp2": 6,
                    "temp_2": 1,
                    "temp_var2": 5,
                    "temp_var3": 2,
                    "tmp28": 1,
                    "value2": 5,
                    "value_2": 1,
                    "var2": 3,
                    "var3": 1,
                    "var6": 1
                },
                "uVar4": {
                    "flag": 8,
                    "flag1": 2,
                    "flags": 2,
                    "temp3": 3,
                    "temp_flag": 1,
                    "temp_var3": 4,
                    "temp_var4": 2,
                    "tmp25": 1,
                    "ushort_value": 1,
                    "ushort_var": 1,
                    "value3": 1,
                    "var1": 1,
                    "var3": 2,
                    "var4": 1
                },
                "uVar5": {
                    "data_flag": 1,
                    "flag2": 2,
                    "flag_value": 1,
                    "mask": 1,
                    "size": 1,
                    "temp": 1,
                    "temp4": 2,
                    "temp_value": 3,
                    "temp_value1": 1,
                    "temp_var4": 4,
                    "temp_var5": 2,
                    "tmp23": 1,
                    "u_var5": 1,
                    "uint_value": 1,
                    "uint_var": 1,
                    "value": 1,
                    "value4": 1,
                    "var2": 1,
                    "var3": 1,
                    "var4": 2,
                    "var5": 1
                },
                "uVar8": {
                    "count": 1,
                    "count1": 1,
                    "length": 3,
                    "temp3": 1,
                    "temp5": 2,
                    "temp_value1": 1,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var5": 4,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "tmp17": 1,
                    "u_var8": 1,
                    "value": 1,
                    "value1": 1,
                    "value5": 1,
                    "var1": 1,
                    "var3": 2,
                    "var4": 1,
                    "var5": 2,
                    "var8": 1
                },
                "uVar9": {
                    "count2": 1,
                    "size": 2,
                    "temp4": 1,
                    "temp6": 2,
                    "temp_length": 1,
                    "temp_value2": 2,
                    "temp_value4": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "temp_var6": 4,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "tmp6": 1,
                    "u_var9": 1,
                    "value2": 1,
                    "value6": 1,
                    "var1": 1,
                    "var2": 1,
                    "var4": 2,
                    "var6": 2,
                    "var9": 1,
                    "var_9": 1
                }
            },
            "called": [
                "FUN_00084384",
                "FUN_00083808",
                "FUN_00081e14",
                "FUN_00083d9c",
                "FUN_0008234c",
                "FUN_00082438",
                "FUN_00083adc",
                "FUN_000825b0"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nundefined4 process_data_00083f34(undefined4 *output,uint *input,uint **buffer)\n\n{\n  int result;\n  uint temp1;\n  uint temp2;\n  ushort flag;\n  uint temp_var4;\n  uint *ptr1;\n  uint *pointer2;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint local_var;\n  \n  if (buffer[2] != (uint *)0x0) {\n    flag = *(ushort *)(input + 3);\n    temp_var4 = (uint)flag;\n    if (((int)(temp_var4 << 0x1c) < 0) && (input[4] != 0)) {\n      pointer2 = *buffer;\n    }\n    else {\n      result = FUN_00083808(output,input);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(input + 3);\n      temp_var4 = (uint)flag;\n      pointer2 = *buffer;\n    }\n    if ((flag & 2) == 0) {\n      temp1 = temp_var4 & 2;\n      temp_var7 = temp1;\n      temp_var5 = temp1;\n      local_var = temp1;\n      if ((temp_var4 & 1) == 0) {\n        temp1 = 0;\n        temp_var7 = 0;\n        while( true ) {\n          while (temp1 == 0) {\n            temp_var7 = *pointer2;\n            ptr1 = pointer2 + 1;\n            pointer2 = pointer2 + 2;\n            temp1 = *ptr1;\n          }\n          temp_var5 = input[2];\n          if ((int)(temp_var4 << 0x16) < 0) {\n            if (temp1 < temp_var5) {\n              temp_var4 = *input;\n              temp_var5 = temp1;\n            }\n            else if ((temp_var4 & 0x480) == 0) {\n              temp_var4 = *input;\n            }\n            else {\n              result = *input - input[4];\n              temp_var5 = result + 1 + temp1;\n              temp_var6 = (int)(input[5] * 3) / 2;\n              if (temp_var5 <= temp_var6) {\n                temp_var5 = temp_var6;\n              }\n              if ((int)(temp_var4 << 0x15) < 0) {\n                temp_var6 = FUN_00081e14(output,temp_var5);\n                if (temp_var6 == 0) {\n                  *output = 0xc;\n                  flag = *(ushort *)(input + 3);\n                  goto label1;\n                }\n                FUN_0008234c(temp_var6,input[4],result);\n                *(ushort *)(input + 3) = *(ushort *)(input + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_var6 = FUN_000825b0(output);\n                if (temp_var6 == 0) {\n                  FUN_00083d9c(output,input[4]);\n                  flag = *(ushort *)(input + 3) & 0xff7f;\n                  *output = 0xc;\n                  goto label1;\n                }\n              }\n              temp_var4 = temp_var6 + result;\n              input[4] = temp_var6;\n              input[5] = temp_var5;\n              *input = temp_var4;\n              input[2] = temp_var5 - result;\n              temp_var5 = temp1;\n            }\n            FUN_00082438(temp_var4,temp_var7,temp_var5);\n            input[2] = input[2] - temp_var5;\n            *input = *input + temp_var5;\n            temp_var5 = temp1;\n          }\n          else if ((input[4] < *input) || (temp_var4 = input[5], temp1 < temp_var4)) {\n            if (temp1 < temp_var5) {\n              temp_var5 = temp1;\n            }\n            FUN_00082438(*input,temp_var7,temp_var5);\n            temp_var4 = input[2];\n            input[2] = temp_var4 - temp_var5;\n            *input = *input + temp_var5;\n            if ((temp_var4 - temp_var5 == 0) && (result = FUN_00083adc(output,input), result != 0))\n            goto label2;\n          }\n          else {\n            temp_var5 = 0x7fffffff;\n            if (temp1 < 0x7fffffff) {\n              temp_var5 = temp1;\n            }\n            temp_var5 = (*(code *)input[9])(output,input[7],temp_var7,(temp_var5 / temp_var4) * temp_var4);\n            if ((int)temp_var5 < 1) goto label2;\n          }\n          ptr1 = buffer[2];\n          temp_var7 = temp_var7 + temp_var5;\n          temp1 = temp1 - temp_var5;\n          buffer[2] = (uint *)((int)ptr1 - temp_var5);\n          if ((uint *)((int)ptr1 - temp_var5) == (uint *)0x0) break;\n          temp_var4 = (uint)*(ushort *)(input + 3);\n        }\n      }\n      else {\n        do {\n          while (temp1 == 0) {\n            temp_var5 = *pointer2;\n            temp1 = pointer2[1];\n            local_var = 0;\n            pointer2 = pointer2 + 2;\n          }\n          if (local_var == 0) {\n            result = FUN_00084384(temp_var5,10,temp1);\n            if (result == 0) {\n              temp_var7 = temp1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp_var7 = (result + 1) - temp_var5;\n              local_var = 1;\n            }\n          }\n          temp_var6 = *input;\n          temp_var4 = temp_var7;\n          if (temp1 <= temp_var7) {\n            temp_var4 = temp1;\n          }\n          temp2 = input[5];\n          if ((input[4] < temp_var6) && (temp_var8 = input[2] + temp2, (int)temp_var8 < (int)temp_var4)) {\n            FUN_00082438(temp_var6,temp_var5,temp_var8);\n            *input = *input + temp_var8;\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto label2;\n          }\n          else if ((int)temp_var4 < (int)temp2) {\n            FUN_00082438(temp_var6,temp_var5,temp_var4);\n            input[2] = input[2] - temp_var4;\n            *input = temp_var4 + *input;\n            temp_var8 = temp_var4;\n          }\n          else {\n            temp_var8 = (*(code *)input[9])(output,input[7],temp_var5,temp2);\n            if ((int)temp_var8 < 1) goto label2;\n          }\n          temp_var7 = temp_var7 - temp_var8;\n          if (temp_var7 == 0) {\n            result = FUN_00083adc(output,input);\n            if (result != 0) goto label2;\n            local_var = 0;\n          }\n          ptr1 = buffer[2];\n          temp_var5 = temp_var5 + temp_var8;\n          temp1 = temp1 - temp_var8;\n          buffer[2] = (uint *)((int)ptr1 - temp_var8);\n        } while ((uint *)((int)ptr1 - temp_var8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp1 = 0;\n      temp_var4 = 0;\n      do {\n        while( true ) {\n          temp_var7 = temp_var4;\n          if (0x7ffffbff < temp_var4) {\n            temp_var7 = 0x7ffffc00;\n          }\n          if (temp_var4 != 0) break;\n          temp1 = *pointer2;\n          temp_var4 = pointer2[1];\n          pointer2 = pointer2 + 2;\n        }\n        result = (*(code *)input[9])(output,input[7],temp1,temp_var7);\n        if (result < 1) {\nlabel2:\n          flag = *(ushort *)(input + 3);\nlabel1:\n          *(ushort *)(input + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = buffer[2];\n        temp1 = temp1 + result;\n        temp_var4 = temp_var4 - result;\n        buffer[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00083f34",
            "entrypoint": "0x00083f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "LAB_0008402e": "label2",
                "LAB_00084030": "label1",
                "iVar1": "result",
                "local_2c": "local_var",
                "param_1": "output",
                "param_2": "input",
                "param_3": "buffer",
                "puVar6": "ptr1",
                "puVar7": "pointer2",
                "uVar10": "temp_var7",
                "uVar11": "temp_var8",
                "uVar2": "temp1",
                "uVar3": "temp2",
                "uVar4": "flag",
                "uVar5": "temp_var4",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084290": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0x20070874": {
                    "base_address": 1,
                    "memory_address": 3,
                    "memory_location": 1
                },
                "FUN_00084290": {
                    "get_base_address": 2,
                    "get_magic_number": 5,
                    "get_magic_value": 1,
                    "get_memory_address": 21,
                    "get_memory_location": 1,
                    "get_start_address": 1
                },
                "PTR_00000008": {
                    "memory_address": 1
                },
                "PTR_20070874": {
                    "ptr_memory_address": 1
                },
                "result": {
                    "memory_address": 1
                },
                "return_value": {
                    "memory_address": 2
                },
                "undefined4": {
                    "address": 1,
                    "uint32": 2,
                    "uint32_t": 9,
                    "unsigned": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nuint32_t get_memory_address_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "current_name": "get_memory_address_00084290",
            "entrypoint": "0x00084290",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084298": {
            "additional_data": {
                "274": {
                    "index": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 2,
                    "elf_rel_array": 8,
                    "elf_relocation_table": 1,
                    "rel_array": 6,
                    "rel_entries": 1,
                    "rel_entry_array": 1,
                    "relocation_array": 8,
                    "relocation_table": 4
                },
                "FUN_00084298": {
                    "get_elf32_rel_info": 2,
                    "get_elf32_rel_r_info": 3,
                    "get_elf_rel_info": 5,
                    "get_elf_relocation_info": 1,
                    "get_r_info": 1,
                    "get_rel_entry_r_info": 1,
                    "get_rel_info": 1,
                    "get_rel_r_info": 5,
                    "get_relocation_info": 10,
                    "get_relocation_type": 2
                },
                "r_info": {
                    "r_info": 1,
                    "rel_info": 2,
                    "relocation_info": 4,
                    "return_val": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\ndword get_elf32_rel_r_info_00084298(void)\n\n{\n  return elf_rel_array[274].relocation_info;\n}\n\n",
            "current_name": "get_elf32_rel_r_info_00084298",
            "entrypoint": "0x00084298",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "FUN_00084298": "get_elf32_rel_r_info_00084298",
                "r_info": "relocation_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "FUN_00081e14": {
                    "handle_error": 1,
                    "helper_function_2": 1,
                    "perform_operation": 1,
                    "process_binary": 1,
                    "process_value": 1
                },
                "FUN_000842a4": {
                    "analyze_binary": 1,
                    "check_and_modify_params": 1,
                    "check_and_modify_values": 1,
                    "check_status": 1,
                    "improve_extracted_code": 1,
                    "parse_data": 1,
                    "process_data": 11,
                    "process_function": 1,
                    "update_data": 1,
                    "validate_and_set_flag": 1
                },
                "FUN_000846b4": {
                    "calculate_val": 1,
                    "check_validity": 1,
                    "check_value": 1,
                    "handle_success": 1,
                    "helper_function_1": 1
                },
                "FUN_000846dc": {
                    "apply_operation": 1,
                    "calculate_value": 1,
                    "extract_value": 1,
                    "handle_error2": 1,
                    "helper_function_3": 1
                },
                "auStack_54": {
                    "auxiliary_array": 1,
                    "auxiliary_stack": 1,
                    "buffer": 4,
                    "data": 1,
                    "local_variable": 1,
                    "stack": 1,
                    "stack_array": 6,
                    "stack_buffer": 1,
                    "stack_data": 1,
                    "stack_var": 1,
                    "temp_array": 5,
                    "temp_buffer": 4,
                    "temp_stack": 4
                },
                "bVar5": {
                    "bool_value": 1,
                    "bool_var": 1,
                    "check_value": 1,
                    "flag": 11,
                    "flag_check": 1,
                    "is_condition_met": 6,
                    "is_condition_true": 2,
                    "is_flag_set": 5,
                    "is_special_check": 1,
                    "is_type2": 1,
                    "is_valid": 1
                },
                "iVar2": {
                    "error_code": 1,
                    "integer_value": 1,
                    "result": 22,
                    "result1": 1,
                    "result_var": 1,
                    "return_value": 3,
                    "status": 2
                },
                "iVar3": {
                    "another_integer_value": 1,
                    "check_result": 1,
                    "error_code": 4,
                    "func_result": 2,
                    "new_result_var": 1,
                    "processed_value": 1,
                    "result": 1,
                    "result2": 2,
                    "result_value": 2,
                    "ret_value": 1,
                    "return_value": 1,
                    "status": 11,
                    "status_code": 1,
                    "status_value": 1,
                    "success": 1
                },
                "local_50": {
                    "flag": 2,
                    "local_flag": 3,
                    "local_temp": 2,
                    "local_val": 1,
                    "local_value": 14,
                    "local_var": 6,
                    "local_variable": 1,
                    "mask": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "arg1": 2,
                    "binary": 1,
                    "data": 7,
                    "device_data": 1,
                    "first_param": 1,
                    "input": 6,
                    "input_data": 1,
                    "input_int": 1,
                    "input_param": 5,
                    "input_parameter": 2,
                    "original_param": 1,
                    "param": 1,
                    "param1": 1,
                    "param_ptr": 1
                },
                "param_2": {
                    "analysis_result": 1,
                    "arg2": 2,
                    "array": 1,
                    "data_pointer": 1,
                    "input_array": 1,
                    "original_array": 1,
                    "output": 11,
                    "output_array": 2,
                    "output_data": 1,
                    "output_param": 4,
                    "output_parameter": 1,
                    "param2": 1,
                    "param_arr": 1,
                    "params": 1,
                    "result": 1,
                    "second_param": 1
                },
                "uVar1": {
                    "array_value": 1,
                    "flag": 3,
                    "flags": 1,
                    "header_value": 1,
                    "lower_bits": 1,
                    "param_value": 1,
                    "status": 1,
                    "temp": 1,
                    "upper_limit": 1,
                    "ushort_val": 3,
                    "ushort_value": 6,
                    "ushort_var": 1,
                    "value": 9,
                    "value1": 1
                },
                "uVar4": {
                    "converted_value": 1,
                    "flag": 1,
                    "flag_value": 2,
                    "shifted_value": 1,
                    "temp": 7,
                    "temp_value": 5,
                    "temp_var": 1,
                    "u_var4": 1,
                    "uint_val": 2,
                    "uint_value": 7,
                    "uint_var": 1,
                    "value2": 1,
                    "value_check": 1
                }
            },
            "called": [
                "FUN_00081e14",
                "FUN_000846b4",
                "FUN_000846dc"
            ],
            "calling": [
                "FUN_00083808"
            ],
            "code": "\nvoid process_data_000842a4(int data,int *output)\n\n{\n  ushort value;\n  int result;\n  int status;\n  uint temp;\n  bool flag;\n  undefined stack_array [4];\n  uint local_value;\n  \n  value = *(ushort *)(output + 3);\n  temp = (uint)value;\n  if ((int)(temp << 0x1e) < 0) {\n    *output = (int)output + 0x43;\n    output[4] = (int)output + 0x43;\n    output[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)output + 0xe)) {\n    result = FUN_000846b4(data,(int)*(short *)((int)output + 0xe),stack_array);\n    if (-1 < result) {\n      flag = (local_value & 0xf000) == 0x2000;\n      if (((local_value & 0xf000) == 0x8000) && (output[10] == 0x8449d)) {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x400;\n        output[0x13] = 0x400;\n      }\n      else {\n        result = 0x400;\n        *(ushort *)(output + 3) = *(ushort *)(output + 3) | 0x800;\n      }\n      goto LAB_00084300;\n    }\n    value = *(ushort *)(output + 3);\n    temp = (uint)value;\n  }\n  *(ushort *)(output + 3) = value | 0x800;\n  if ((temp & 0x80) == 0) {\n    result = 0x400;\n  }\n  else {\n    result = 0x40;\n  }\n  flag = false;\nLAB_00084300:\n  status = FUN_00081e14(data,result);\n  value = *(ushort *)(output + 3);\n  if (status == 0) {\n    if (-1 < (int)((uint)value << 0x16)) {\n      *(ushort *)(output + 3) = value | 2;\n      *output = (int)output + 0x43;\n      output[4] = (int)output + 0x43;\n      output[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(data + 0x3c) = &LAB_00083b08_1;\n    *(ushort *)(output + 3) = value | 0x80;\n    *output = status;\n    output[4] = status;\n    output[5] = result;\n    if ((flag) && (result = FUN_000846dc(data,(int)*(short *)((int)output + 0xe)), result != 0))\n    {\n      *(ushort *)(output + 3) = *(ushort *)(output + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "process_data_000842a4",
                "auStack_54": "stack_array",
                "bVar5": "flag",
                "iVar2": "result",
                "iVar3": "status",
                "local_50": "local_value",
                "param_1": "data",
                "param_2": "output",
                "uVar1": "value",
                "uVar4": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084384": {
            "additional_data": {
                "FUN_00084384": {
                    "find_char": 2,
                    "find_char_in_array": 2,
                    "find_char_in_buffer": 1,
                    "find_char_in_uint_array": 1,
                    "find_char_index": 2,
                    "find_char_sequence": 1,
                    "find_character": 3,
                    "find_character_sequence": 4,
                    "find_first_char": 1,
                    "find_first_instance": 1,
                    "find_first_occurrence": 9,
                    "find_next_occurrence": 1,
                    "find_param_occurrence": 1,
                    "find_uint_sequence": 1,
                    "search_char_in_array": 1
                },
                "bVar4": {
                    "flag": 2,
                    "found": 7,
                    "is_last": 2,
                    "is_last_char": 1,
                    "is_last_element": 3,
                    "is_last_index": 7,
                    "is_last_iteration": 5,
                    "is_matching": 1,
                    "last_iteration": 1,
                    "match_found": 1,
                    "reached_end": 1
                },
                "iVar2": {
                    "array_index": 1,
                    "i": 1,
                    "index": 27,
                    "iteration": 1,
                    "iteration_count": 1
                },
                "param_1": {
                    "array": 18,
                    "array_ptr": 1,
                    "buffer": 3,
                    "data_ptr": 1,
                    "input_array": 5,
                    "input_buffer": 1,
                    "input_data": 1,
                    "sequence": 1
                },
                "param_2": {
                    "char_to_find": 1,
                    "character": 10,
                    "search_char": 1,
                    "target": 8,
                    "target_byte": 1,
                    "target_char": 7,
                    "target_character": 2,
                    "value": 1
                },
                "param_3": {
                    "array_length": 12,
                    "array_size": 2,
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "data_length": 1,
                    "length": 10,
                    "size": 3
                },
                "puVar3": {
                    "array_pointer": 1,
                    "buffer_ptr": 1,
                    "current": 4,
                    "current_element": 3,
                    "current_pos": 1,
                    "current_ptr": 14,
                    "data_ptr2": 1,
                    "next_element": 1,
                    "ptr": 5
                },
                "uVar1": {
                    "check_val": 1,
                    "current_element": 1,
                    "current_value": 3,
                    "masked_value": 2,
                    "result": 3,
                    "temp": 6,
                    "temp1": 1,
                    "temp_result": 1,
                    "temp_var": 1,
                    "value": 3,
                    "xor_result": 6,
                    "xored_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char character,uint array_length)\n\n{\n  uint temp;\n  int index;\n  uint *current_ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\nLAB_000843b4:\n    if (3 < array_length) {\n      current_ptr = array;\n      do {\n        temp = *current_ptr ^ CONCAT22(CONCAT11(character,character),CONCAT11(character,character));\n        array = current_ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        array_length = array_length - 4;\n        array = current_ptr + 1;\n        current_ptr = current_ptr + 1;\n      } while (3 < array_length);\n    }\n    if (array_length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != character) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == array_length - 1;\n        index = index + 1;\n        if (is_last_index) goto LAB_000843dc;\n      } while (*(char *)array != character);\n    }\n  }\n  else if (array_length == 0) {\nLAB_000843dc:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != character) {\n    current_ptr = (uint *)((int)array + 1);\n    array_length = array_length - 1;\n    do {\n      array = current_ptr;\n      if (((uint)array & 3) == 0) goto LAB_000843b4;\n      if (array_length == 0) goto LAB_000843dc;\n      current_ptr = (uint *)((int)array + 1);\n      array_length = array_length - 1;\n    } while (*(char *)array != character);\n  }\n  return array;\n}\n\n",
            "current_name": "find_first_occurrence_00084384",
            "entrypoint": "0x00084384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "bVar4": "is_last_index",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "character",
                "param_3": "array_length",
                "puVar3": "current_ptr",
                "uVar1": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084464": {
            "additional_data": {
                "DAT_200711bc": {
                    "error": 2,
                    "error_code": 4,
                    "error_flag": 2
                },
                "FUN_000811cc": {
                    "check_data": 1,
                    "validate_data": 2
                },
                "FUN_00084464": {
                    "extract_and_process_data": 1,
                    "initialize_data": 1,
                    "parse_data": 1,
                    "process_data": 24,
                    "reverse_and_process_data": 1,
                    "update_data": 2
                },
                "FUN_00084700": {
                    "execute_action": 1,
                    "process_data": 2
                },
                "F_UNK_00084464": {
                    "extract_data": 1
                },
                "iVar1": {
                    "result": 20,
                    "result_value": 1,
                    "return_value": 6,
                    "status": 2
                },
                "in_lr": {
                    "link_reg": 1,
                    "link_register": 5,
                    "temp_value": 1,
                    "temp_var4": 1,
                    "unused4": 7,
                    "unused_4": 1,
                    "unused_param4": 2,
                    "unused_var4": 4,
                    "var4": 2,
                    "var_lr": 1
                },
                "param_1": {
                    "data_ptr": 1,
                    "output": 11,
                    "output_array": 7,
                    "output_data": 2,
                    "result": 10
                },
                "param_2": {
                    "data": 8,
                    "data_addr": 1,
                    "data_ptr": 1,
                    "input": 11,
                    "input_array": 5,
                    "input_data": 5
                },
                "param_3": {
                    "arg1": 1,
                    "param1": 9,
                    "param3": 6,
                    "param_a": 12,
                    "value1": 3
                },
                "param_4": {
                    "arg2": 1,
                    "param2": 9,
                    "param4": 6,
                    "param_b": 12,
                    "value2": 3
                },
                "uVar2": {
                    "data": 1,
                    "data_value": 1,
                    "extracted_value": 1,
                    "flag": 1,
                    "input_value": 3,
                    "short_value": 3,
                    "ushort_val": 1,
                    "value": 20
                },
                "unaff_r4": {
                    "arg1": 1,
                    "constant1": 1,
                    "reg4": 1,
                    "temp1": 1,
                    "temp_a": 1,
                    "temp_var1": 2,
                    "unaffected_register4": 1,
                    "unused1": 8,
                    "unused_1": 1,
                    "unused_param1": 2,
                    "unused_var": 1,
                    "unused_var1": 3,
                    "var1": 2,
                    "var4": 1
                },
                "unaff_r5": {
                    "arg2": 1,
                    "constant2": 1,
                    "reg5": 1,
                    "temp2": 1,
                    "temp_b": 1,
                    "temp_var2": 2,
                    "unaffected_register5": 1,
                    "unused2": 8,
                    "unused_2": 1,
                    "unused_param2": 2,
                    "unused_var2": 4,
                    "var2": 2,
                    "var5": 1
                },
                "unaff_r6": {
                    "arg3": 1,
                    "constant3": 1,
                    "reg6": 1,
                    "temp3": 1,
                    "temp_c": 1,
                    "temp_var3": 2,
                    "unaffected_register6": 1,
                    "unused3": 8,
                    "unused_3": 1,
                    "unused_param3": 2,
                    "unused_var3": 4,
                    "var3": 2,
                    "var6": 1
                }
            },
            "called": [
                "FUN_00084700",
                "FUN_000811cc"
            ],
            "calling": [],
            "code": "\nvoid extract_and_process_data_00084464(int *output,int input,undefined4 param_a,undefined4 param_b)\n\n{\n  int result;\n  ushort value;\n  undefined4 unused1;\n  undefined4 unused2;\n  undefined4 unused3;\n  undefined4 unused4;\n  \n  value = *(ushort *)(input + 0xc);\n  if ((int)((uint)value << 0x17) < 0) {\n    FUN_00084700(output,(int)*(short *)(input + 0xe),0,2);\n    value = *(ushort *)(input + 0xc);\n  }\n  *(ushort *)(input + 0xc) = value & 0xefff;\n  DAT_200711bc = 0;\n  result = FUN_000811cc((int)*(short *)(input + 0xe),param_a,param_b,param_b,unused1,unused2,\n                       unused3,unused4);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "extract_and_process_data_00084464",
            "entrypoint": "0x00084464",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084464": "extract_and_process_data_00084464",
                "iVar1": "result",
                "in_lr": "unused4",
                "param_1": "output",
                "param_2": "input",
                "param_3": "param_a",
                "param_4": "param_b",
                "uVar2": "value",
                "unaff_r4": "unused1",
                "unaff_r5": "unused2",
                "unaff_r6": "unused3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008449c": {
            "additional_data": {
                "FUN_0008449c": {
                    "process_data": 1,
                    "reverse_and_modify_value": 1,
                    "set_flag_based_on_value": 1,
                    "update_data": 2,
                    "update_flag": 3,
                    "update_flag_and_save_value": 1,
                    "update_flag_based_on_return_code": 1,
                    "update_flags": 1,
                    "update_flags_and_value": 1,
                    "update_parameter": 2,
                    "update_parameter_and_update_var": 1,
                    "update_parameter_flags": 1,
                    "update_parameter_value": 3,
                    "update_status": 7,
                    "update_value": 4,
                    "update_value_based_on_result": 1
                },
                "iVar1": {
                    "modified_value": 1,
                    "result": 29,
                    "return_code": 1
                },
                "param_1": {
                    "arg1": 1,
                    "config": 1,
                    "configuration": 1,
                    "data": 2,
                    "device": 1,
                    "device_status": 1,
                    "flag_array": 1,
                    "input_array": 4,
                    "param": 4,
                    "param1": 5,
                    "param_1": 3,
                    "param_pointer": 2,
                    "param_ptr": 1,
                    "ptr": 1,
                    "status": 1,
                    "status_data": 1,
                    "status_ptr": 1
                },
                "param_2": {
                    "address": 2,
                    "arg2": 1,
                    "data": 9,
                    "data_address": 1,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "index": 1,
                    "offset": 1,
                    "param": 1,
                    "param2": 5,
                    "param_2": 1,
                    "param_index": 1,
                    "param_offset": 2,
                    "status_data": 1,
                    "struct_offset": 1
                },
                "uVar2": {
                    "flag": 3,
                    "flag_value": 1,
                    "flags": 3,
                    "modified_value": 4,
                    "new_flag": 3,
                    "new_flag_value": 1,
                    "new_flags": 2,
                    "new_status": 1,
                    "updated_flag": 5,
                    "updated_value": 8
                }
            },
            "called": [
                "FUN_00084700"
            ],
            "calling": [],
            "code": "\nvoid update_parameter_value_0008449c(undefined4 param1,int data)\n\n{\n  int result;\n  ushort updated_value;\n  \n  result = FUN_00084700(param1,(int)*(short *)(data + 0xe));\n  if (result == -1) {\n    updated_value = *(ushort *)(data + 0xc) & 0xefff;\n  }\n  else {\n    updated_value = *(ushort *)(data + 0xc) | 0x1000;\n  }\n  if (result != -1) {\n    *(int *)(data + 0x50) = result;\n  }\n  *(ushort *)(data + 0xc) = updated_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_0008449c",
            "entrypoint": "0x0008449c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008449c": "update_parameter_value_0008449c",
                "iVar1": "result",
                "param_1": "param1",
                "param_2": "data",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844c4": {
            "additional_data": {
                "FUN_00083808": {
                    "function_a": 1,
                    "perform_operation": 1,
                    "process_data": 1,
                    "process_packet_data": 1,
                    "sub_function1": 2,
                    "sub_function_a": 1
                },
                "FUN_00083adc": {
                    "check_buffer_status": 1,
                    "finalize_packet_processing": 1,
                    "function_c": 1,
                    "perform_operation": 1,
                    "sub_function3": 2,
                    "sub_function_c": 1
                },
                "FUN_00083b14": {
                    "check_and_execute_function": 1,
                    "function_b": 1,
                    "initialize_buffer": 1,
                    "perform_initialization": 1,
                    "sub_function2": 2,
                    "sub_function_b": 1
                },
                "FUN_000844c4": {
                    "decode_and_modify": 1,
                    "decode_and_process_data": 2,
                    "decode_and_process_input": 1,
                    "decode_and_update_buffer": 1,
                    "extracted_data": 1,
                    "parse_and_process_input": 1,
                    "parse_and_process_packet": 1,
                    "process_data": 17,
                    "process_function": 1,
                    "process_input": 2
                },
                "iVar4": {
                    "buffer_storage_address": 1,
                    "comparison_result": 1,
                    "count": 2,
                    "counter": 2,
                    "i_var": 1,
                    "index": 14,
                    "index_variable": 1,
                    "int_value": 1,
                    "integer_value": 1,
                    "offset": 3,
                    "temp_var": 3,
                    "temp_variable": 1
                },
                "iVar4_2": {
                    "return_value": 1
                },
                "param_1": {
                    "buffer_address": 1,
                    "data": 1,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "data_ptr": 4,
                    "data_struct": 1,
                    "input": 9,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_param": 3,
                    "input_ptr": 2,
                    "input_value": 1,
                    "packet_ptr": 1
                },
                "param_2": {
                    "byte_to_insert": 1,
                    "char_to_insert": 1,
                    "character": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "flag": 5,
                    "flags": 2,
                    "input_data": 1,
                    "input_length": 2,
                    "input_size": 1,
                    "input_value": 4,
                    "length": 2,
                    "output_data": 1,
                    "packet_length": 1,
                    "param": 1,
                    "status": 1,
                    "value": 5
                },
                "param_3": {
                    "array": 1,
                    "buffer": 6,
                    "buffer_data": 1,
                    "data": 6,
                    "data_array": 4,
                    "data_ptr": 2,
                    "data_state": 1,
                    "decoded_data": 1,
                    "input_data": 1,
                    "output_buffer": 1,
                    "output_data": 3,
                    "output_ptr": 1,
                    "output_struct": 1,
                    "packet_data": 1,
                    "param_array": 1
                },
                "param_4": {
                    "additional_param": 2,
                    "buffer_length": 1,
                    "config": 1,
                    "config_value": 1,
                    "constant": 2,
                    "constant_value": 1,
                    "data_info": 1,
                    "extra_param": 2,
                    "flag": 1,
                    "length": 1,
                    "output_length": 1,
                    "param": 1,
                    "param4": 1,
                    "param_4": 1,
                    "param_four": 1,
                    "param_value": 1,
                    "size": 2,
                    "value": 10
                },
                "puVar3": {
                    "buffer": 1,
                    "byte_pointer": 1,
                    "byte_ptr": 3,
                    "byte_to_insert_address": 1,
                    "current_byte_ptr": 1,
                    "next_byte": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "pointer": 8,
                    "pointer_to_output": 1,
                    "pointer_value": 1,
                    "pointer_variable": 1,
                    "ptr": 7,
                    "ptr_to_data": 1,
                    "ptr_value": 1,
                    "ptr_variable": 1
                },
                "uVar1": {
                    "buffer_data_3rd_word": 1,
                    "data_length": 2,
                    "decoded_value": 1,
                    "element": 1,
                    "flag": 1,
                    "header_flag": 1,
                    "packet_header": 1,
                    "short_value": 1,
                    "temp": 1,
                    "temp_short": 1,
                    "temp_variable1": 1,
                    "ushort_value": 17,
                    "value": 2
                },
                "uVar2": {
                    "buffer_data_3rd_word_uint": 1,
                    "converted_length": 1,
                    "converted_value": 5,
                    "data_length_uint": 1,
                    "element_uint": 1,
                    "flag_value": 1,
                    "header_value": 2,
                    "int_value": 2,
                    "size": 1,
                    "temp_int": 1,
                    "temp_value": 1,
                    "temp_variable2": 1,
                    "uint_value": 12,
                    "value_uint": 1
                }
            },
            "called": [
                "FUN_00083808",
                "FUN_00083b14",
                "FUN_00083adc"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nuint decode_and_process_data_000844c4(int input,uint flag,undefined4 *data,undefined4 value)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *pointer;\n  int index;\n  \n  if ((input != 0) && (*(int *)(input + 0x38) == 0)) {\n    FUN_00083b14();\n  }\n  ushort_value = *(ushort *)(data + 3);\n  uint_value = (uint)ushort_value;\n  data[2] = data[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = data[4], index == 0)) {\n    index = FUN_00083808(input,data,ushort_value,uint_value,value);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(data + 3);\n    index = data[4];\n    uint_value = (uint)ushort_value;\n  }\n  flag = flag & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    pointer = (undefined *)*data;\n    index = (int)pointer - index;\n    if (index < (int)data[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    data[0x19] = data[0x19] & 0xffffdfff;\n    pointer = (undefined *)*data;\n    *(ushort *)(data + 3) = ushort_value | 0x2000;\n    index = (int)pointer - index;\n    if (index < (int)data[5]) goto LAB_000844f6;\n  }\n  index = FUN_00083adc(input,data);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  pointer = (undefined *)*data;\n  index = 1;\nLAB_000844f8:\n  data[2] = data[2] + -1;\n  *data = pointer + 1;\n  *pointer = (char)flag;\n  if (((data[5] == index) ||\n      (((int)((uint)*(ushort *)(data + 3) << 0x1f) < 0 && (flag == 10)))) &&\n     (index = FUN_00083adc(input,data), index != 0)) {\n    return 0xffffffff;\n  }\n  return flag;\n}\n\n",
            "current_name": "decode_and_process_data_000844c4",
            "entrypoint": "0x000844c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844c4": "decode_and_process_data_000844c4",
                "iVar4": "index",
                "param_1": "input",
                "param_2": "flag",
                "param_3": "data",
                "param_4": "value",
                "puVar3": "pointer",
                "uVar1": "ushort_value",
                "uVar2": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008456c": {
            "additional_data": {
                "FUN_0008456c": {
                    "execute_function": 8,
                    "execute_operation": 6,
                    "process_data": 10,
                    "process_function": 2,
                    "reverse_and_set_error": 1
                },
                "auStack_24": {
                    "auxiliary_buffer": 1,
                    "auxiliary_data": 1,
                    "buffer": 3,
                    "input_buffer": 1,
                    "local_buffer": 1,
                    "local_stack": 1,
                    "stack_buffer": 1,
                    "stack_data": 2,
                    "temp_array": 1,
                    "temp_buffer": 9,
                    "temp_stack": 1,
                    "temporary_buffer": 5,
                    "temporary_data": 1,
                    "temporary_stack": 1
                },
                "iVar3": {
                    "execution_result": 3,
                    "function_result": 2,
                    "function_return_value": 1,
                    "result": 5,
                    "result_code": 1,
                    "result_status": 1,
                    "result_value": 1,
                    "return_value": 15,
                    "status": 2
                },
                "param_1": {
                    "input_array": 2,
                    "input_param": 1,
                    "output": 7,
                    "output_buffer": 9,
                    "output_data": 4,
                    "output_param": 3,
                    "output_ptr": 1,
                    "result": 3,
                    "result_ptr": 1
                },
                "param_2": {
                    "array_size": 1,
                    "condition": 2,
                    "count": 1,
                    "flag": 4,
                    "input_length": 6,
                    "input_size": 9,
                    "input_type": 1,
                    "length": 1,
                    "operation_type": 1,
                    "option": 3,
                    "size": 2
                },
                "param_3": {
                    "additional_input": 1,
                    "constant": 1,
                    "constant_param": 1,
                    "default_value": 1,
                    "input": 5,
                    "input_argument": 1,
                    "input_data": 4,
                    "input_param": 2,
                    "input_value": 6,
                    "operation_param": 1,
                    "param": 2,
                    "param_3": 1,
                    "value": 5
                },
                "param_4": {
                    "error_code": 2,
                    "error_flag": 1,
                    "output": 1,
                    "output_array": 2,
                    "output_param": 1,
                    "output_ptr": 1,
                    "result": 10,
                    "result_code": 1,
                    "result_param": 1,
                    "status": 5,
                    "status_buffer": 2,
                    "status_param": 2,
                    "status_ptr": 1,
                    "status_result": 1
                },
                "pcVar1": {
                    "data_processing_func": 1,
                    "function_pointer": 24,
                    "function_ptr": 5,
                    "sub_function_ptr": 1
                },
                "uVar2": {
                    "auxiliary_value": 1,
                    "result": 12,
                    "result2": 1,
                    "return_value": 14,
                    "value": 3
                }
            },
            "called": [
                "FUN_00084290",
                "FUN_000845bc"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nvoid process_data_0008456c(undefined4 *output_buffer,int input_size,undefined4 input_value,undefined4 *result)\n\n{\n  code *function_pointer;\n  undefined4 return_value;\n  int return_value;\n  undefined temp_buffer [12];\n  \n  function_pointer = DAT_20070898;\n  if (input_size == 0) {\n    return_value = FUN_00084290();\n    return_value = (*function_pointer)(output_buffer,temp_buffer,0,return_value,result);\n  }\n  else {\n    return_value = FUN_00084290();\n    return_value = (*function_pointer)(output_buffer,input_size,input_value,return_value,result);\n  }\n  if (return_value == -1) {\n    *result = 0;\n    *output_buffer = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_0008456c",
            "entrypoint": "0x0008456c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008456c": "process_data_0008456c",
                "auStack_24": "temp_buffer",
                "iVar3": "return_value",
                "param_1": "output_buffer",
                "param_2": "input_size",
                "param_3": "input_value",
                "param_4": "result",
                "pcVar1": "function_pointer",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845bc": {
            "additional_data": {
                "0": {
                    "success": 1
                },
                "0x0": {
                    "null": 3
                },
                "0x100": {
                    "256": 1,
                    "byte_threshold": 1,
                    "max_char_value": 1,
                    "max_value": 1,
                    "threshold": 1
                },
                "0x8a": {
                    "error_code": 2,
                    "error_value": 1,
                    "invalid_value": 1
                },
                "0xffffffff": {
                    "error_code": 1,
                    "error_flag": 1,
                    "failure": 1
                },
                "DAT_": {
                    "source_": 1
                },
                "FUN_000845bc": {
                    "convert_and_store": 1,
                    "convert_int_to_char": 2,
                    "convert_integer_to_char": 1,
                    "convert_number_to_char": 3,
                    "convert_param_to_char": 1,
                    "convert_to_char": 2,
                    "convert_uint_to_char": 1,
                    "convert_value_to_byte": 2,
                    "convert_value_to_char": 4,
                    "copy_byte_to_memory": 1,
                    "copy_byte_to_pointer": 1,
                    "decode_and_store": 1,
                    "decode_byte": 2,
                    "decode_param_and_store": 1,
                    "parse_data": 1,
                    "set_value_in_buffer": 1,
                    "store_byte": 1,
                    "write_byte_to_memory": 5
                },
                "PTR_": {
                    "destination_": 1
                },
                "char": {
                    "byte": 1,
                    "character": 1
                },
                "param_1": {
                    "dest": 1,
                    "destination": 2,
                    "destination_pointer": 1,
                    "error_code": 1,
                    "memory_address": 1,
                    "number_pointer": 1,
                    "output": 5,
                    "output_address": 1,
                    "output_buffer": 1,
                    "output_pointer": 5,
                    "output_ptr": 4,
                    "output_value": 2,
                    "result": 3,
                    "result_ptr": 1,
                    "target_value": 1
                },
                "param_2": {
                    "buffer": 3,
                    "byte_ptr": 1,
                    "char_buffer": 1,
                    "char_pointer": 2,
                    "char_ptr": 1,
                    "character": 1,
                    "data": 1,
                    "dest": 1,
                    "destination": 1,
                    "input_buffer": 1,
                    "input_pointer": 3,
                    "input_ptr": 3,
                    "memory_pointer": 1,
                    "output_buffer": 5,
                    "output_data": 1,
                    "output_string": 1,
                    "ptr": 1,
                    "source": 2,
                    "source_pointer": 1
                },
                "param_3": {
                    "data": 2,
                    "data_value": 1,
                    "input": 1,
                    "input_int": 1,
                    "input_length": 1,
                    "input_number": 1,
                    "input_uint": 1,
                    "input_value": 9,
                    "number": 2,
                    "value": 12
                },
                "return": {
                    "success": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nundefined4 convert_value_to_char_000845bc(undefined4 *output_pointer,undefined *output_buffer,uint value)\n\n{\n  if (output_buffer == (undefined *)0x0) {\n    success 0;\n  }\n  if (value < 0x100) {\n    *output_buffer = (byte)value;\n    success 1;\n  }\n  *output_pointer = 0x8a;\n  success 0xffffffff;\n}\n\n",
            "current_name": "convert_value_to_char_000845bc",
            "entrypoint": "0x000845bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000845bc": "convert_value_to_char_000845bc",
                "char": "byte",
                "param_1": "output_pointer",
                "param_2": "output_buffer",
                "param_3": "value",
                "return": "success"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846a4": {
            "additional_data": {
                "FIND_AND_EXECUTE": {
                    "execute_relocation": 1
                },
                "FUNC_00083c08": {
                    "cleanup1": 1,
                    "cleanup4": 2,
                    "cleanup_before_return": 1,
                    "cleanup_function4": 2,
                    "execute_cleanup": 1,
                    "execute_function_b": 1,
                    "finalize": 1,
                    "finalize_action_b": 1,
                    "func1": 1,
                    "function1": 1,
                    "initialize_function": 1,
                    "initialize_operation": 1,
                    "perform_action": 1,
                    "perform_cleanup": 1,
                    "perform_operation": 1,
                    "perform_operation_1": 1,
                    "perform_task": 1,
                    "update_function_b": 1
                },
                "FUNC_00083c0c": {
                    "clean_up_variables": 1,
                    "cleanup": 2,
                    "cleanup2": 1,
                    "cleanup3": 2,
                    "cleanup_action": 1,
                    "cleanup_after_process": 1,
                    "cleanup_function": 1,
                    "cleanup_function3": 2,
                    "cleanup_variables": 1,
                    "final_cleanup": 1,
                    "finalize_action_a": 1,
                    "finalize_operation": 1,
                    "finalize_process": 1,
                    "func2": 1,
                    "function2": 1,
                    "perform_operation_2": 1,
                    "update_function_c": 1
                },
                "FUN_00083adc": {
                    "calculate_result": 1,
                    "execute_code": 1,
                    "execute_function_2": 1,
                    "execute_operation": 1,
                    "helper_function": 1,
                    "perform_another_function": 1,
                    "perform_operation": 1,
                    "process_arguments": 1,
                    "process_data": 8,
                    "process_func2": 1,
                    "process_param": 2,
                    "process_relocation": 1,
                    "sub_function": 2
                },
                "FUN_00083b14": {
                    "check_offset": 3,
                    "check_offset_and_call_func": 1,
                    "check_relocation_offset": 1,
                    "clean_up2": 1,
                    "cleanup2": 1,
                    "cleanup_function2": 2,
                    "execute_function": 1,
                    "execute_function_1": 1,
                    "execute_function_a": 1,
                    "execute_related_function": 1,
                    "handle_null_offset": 2,
                    "initialize": 1,
                    "perform_action": 2,
                    "perform_action_a": 1,
                    "perform_additional_action": 1,
                    "process_func1": 1
                },
                "FUN_00083d9c": {
                    "clean_up1": 1,
                    "clean_up_function": 1,
                    "clean_up_memory": 1,
                    "cleanup1": 1,
                    "cleanup_function1": 2,
                    "cleanup_memory": 2,
                    "clear_memory": 3,
                    "clear_values": 1,
                    "perform_additional_task": 1,
                    "reset_d_var1": 1,
                    "reset_data": 2,
                    "reset_function": 1,
                    "reset_values": 1,
                    "reset_var_a": 1
                },
                "FUN_000846a4": {
                    "check_and_execute_function": 2,
                    "check_and_process_param": 2,
                    "execute_function": 1,
                    "extracted_function": 1,
                    "process_data": 1,
                    "process_function": 3,
                    "process_param": 10,
                    "process_parameter": 6,
                    "process_relocation": 1,
                    "validate_and_execute": 1,
                    "validate_param": 1
                },
                "dVar1": {
                    "dword_value": 1,
                    "offset": 12,
                    "r_offset": 8,
                    "r_offset_value": 1,
                    "rel_base_offset": 1,
                    "rel_offset": 4,
                    "relocation_offset": 4
                },
                "iVar3": {
                    "callback_result": 1,
                    "code_result": 1,
                    "code_return_value": 1,
                    "error_code": 1,
                    "int_variable": 1,
                    "result": 11,
                    "result_code": 1,
                    "return_code": 1,
                    "return_value": 9,
                    "return_value2": 1,
                    "status": 3
                },
                "param_1": {
                    "address": 2,
                    "data": 1,
                    "input": 4,
                    "input_param": 11,
                    "input_parameter": 2,
                    "input_value": 5,
                    "param": 3,
                    "parameter": 2,
                    "value": 1
                },
                "param_2": {
                    "data_param": 1,
                    "data_ptr": 1
                },
                "uVar2": {
                    "output": 1,
                    "result": 13,
                    "return_value": 17
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14",
                "FUN_00083c0c",
                "FUN_00083c08",
                "FUN_00083adc"
            ],
            "calling": [],
            "code": "\nundefined4 check_and_process_param_000846a4(int input_param)\n\n{\n  dword offset;\n  undefined4 return_value;\n  int result;\n  \n  offset = Elf32_Rel_ARRAY_20070000[140].r_offset;\n  if (input_param != 0) {\n    if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n       (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n      FUN_00083b14();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      return_value = FUN_00083adc(offset,input_param);\n      if ((*(code **)(input_param + 0x2c) != (code *)0x0) &&\n         (result = (**(code **)(input_param + 0x2c))(offset,*(undefined4 *)(input_param + 0x1c)), result < 0))\n      {\n        return_value = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        FUN_00083d9c(offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          FUN_00083d9c(offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        FUN_00083d9c(offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      FUNC_00083c08();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      FUNC_00083c0c();\n      return return_value;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_and_process_param_000846a4",
            "entrypoint": "0x000846a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846a4": "check_and_process_param_000846a4",
                "dVar1": "offset",
                "iVar3": "result",
                "param_1": "input_param",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846b4": {
            "additional_data": {
                "DAT_200711bc": {
                    "error_code": 1
                },
                "FUN_000846b4": {
                    "check_and_set_result": 1,
                    "extract_data": 1,
                    "extract_data_from_binary": 1,
                    "extract_error_code": 3,
                    "extract_return_value": 1,
                    "find_matching_value": 1,
                    "find_result": 1,
                    "find_value_and_update": 1,
                    "process_binary_data": 1,
                    "process_data": 9,
                    "process_function": 1,
                    "process_input": 1,
                    "reverse_and_check": 1,
                    "reverse_and_check_value": 1,
                    "reverse_and_set_value": 1,
                    "update_param_if_error": 1,
                    "update_parameter_value": 1,
                    "update_value_if_error": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 21,
                    "return_value": 5
                },
                "param_1": {
                    "error": 1,
                    "error_code": 1,
                    "error_code_ptr": 1,
                    "output": 15,
                    "output_data": 2,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_value": 1,
                    "result": 6,
                    "result_pointer": 2
                },
                "param_2": {
                    "arg1": 1,
                    "input1": 20,
                    "input_1": 3,
                    "input_data1": 1,
                    "input_param1": 2,
                    "input_value_1": 1,
                    "input_var1": 1,
                    "param1": 1,
                    "value1": 1
                },
                "param_3": {
                    "arg2": 1,
                    "input2": 20,
                    "input_2": 3,
                    "input_data2": 1,
                    "input_param2": 2,
                    "input_value_2": 1,
                    "input_var2": 1,
                    "param2": 1,
                    "value2": 1
                },
                "param_4": {
                    "arg3": 1,
                    "input3": 20,
                    "input_3": 3,
                    "input_data3": 1,
                    "input_param3": 2,
                    "input_value_3": 1,
                    "input_var3": 1,
                    "param3": 1,
                    "value3": 1
                }
            },
            "called": [
                "FUN_000811b4"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid process_binary_data_000846b4(int *output,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811b4(input1,input2,input2,0,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *output = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_binary_data_000846b4",
            "entrypoint": "0x000846b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846b4": "process_binary_data_000846b4",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846dc": {
            "additional_data": {
                "FUN_000811be": {
                    "check_input_for_errors": 1
                },
                "FUN_000846dc": {
                    "check_and_assign": 1,
                    "convert_data": 1,
                    "convert_param_to_ptr": 1,
                    "decode_and_store_data": 1,
                    "extract_and_check_value": 1,
                    "extract_data": 5,
                    "extract_error_code": 1,
                    "extract_function_result": 1,
                    "extract_integer_value": 1,
                    "extract_value_from_binary": 2,
                    "find_error_and_assign": 1,
                    "find_error_code": 1,
                    "find_error_value": 1,
                    "find_return_value": 1,
                    "initialize_and_check_value": 1,
                    "process_function": 1,
                    "process_result": 1,
                    "reverse_and_update": 1,
                    "update_array_if_invalid": 1,
                    "update_param": 1,
                    "update_param_if_error": 1,
                    "update_parameter": 1,
                    "update_value_if_error": 2,
                    "update_value_if_not_found": 1
                },
                "iVar1": {
                    "function_result": 2,
                    "result": 14,
                    "result_from_function": 1,
                    "return_value": 7,
                    "status": 2
                },
                "param_1": {
                    "array_to_update": 1,
                    "error_code": 1,
                    "error_pointer": 1,
                    "error_ptr": 1,
                    "output": 9,
                    "output_data": 1,
                    "output_ptr": 2,
                    "output_value": 4,
                    "result": 11
                },
                "param_2": {
                    "input": 12,
                    "input_data": 3,
                    "input_param": 1,
                    "input_value": 12,
                    "value": 3
                }
            },
            "called": [
                "FUN_000811be"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid extract_data_000846dc(int *result,undefined4 input)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811be(input);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "extract_data_000846dc",
            "entrypoint": "0x000846dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846dc": "extract_data_000846dc",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084700": {
            "additional_data": {
                "DAT_200711bc": {
                    "result": 1
                },
                "FUN_00084700": {
                    "calculate_result": 1,
                    "check_and_assign_result": 1,
                    "check_error_and_return": 1,
                    "check_function_result": 1,
                    "check_return_value_and_update_param": 1,
                    "copy_if_valid": 1,
                    "extract_and_check_value": 1,
                    "extract_data": 2,
                    "extract_return_value": 1,
                    "find_and_set_error_code": 1,
                    "find_error_and_assign": 1,
                    "find_error_code": 1,
                    "find_return_value": 1,
                    "find_special_value": 1,
                    "find_target_value": 1,
                    "initialize_data": 1,
                    "process_data": 5,
                    "process_function_results": 1,
                    "reverse_and_extract_data": 1,
                    "reverse_and_store": 1,
                    "update_param_if_error": 1,
                    "update_parameter": 1
                },
                "iVar1": {
                    "function_result": 1,
                    "result": 14,
                    "return_code": 1,
                    "return_value": 6,
                    "status": 2,
                    "status_code": 1
                },
                "param_1": {
                    "error_code": 1,
                    "output": 9,
                    "output_data": 1,
                    "output_ptr": 2,
                    "output_value": 2,
                    "result": 15,
                    "target_value": 1
                },
                "param_2": {
                    "arg1": 5,
                    "argument1": 1,
                    "input1": 15,
                    "input_1": 6,
                    "input_value1": 1,
                    "param2": 2,
                    "value_1": 1
                },
                "param_3": {
                    "arg2": 5,
                    "argument2": 1,
                    "input2": 15,
                    "input_2": 6,
                    "input_value2": 1,
                    "param3": 2,
                    "value_2": 1
                },
                "param_4": {
                    "arg3": 5,
                    "argument3": 1,
                    "input3": 15,
                    "input_3": 6,
                    "input_value3": 1,
                    "param4": 2,
                    "value_3": 1
                }
            },
            "called": [
                "FUN_000811c2"
            ],
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "code": "\nvoid process_data_00084700(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c2(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084700",
            "entrypoint": "0x00084700",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084700": "process_data_00084700",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084728": {
            "additional_data": {
                "DAT_200711bc": {
                    "error_code": 2
                },
                "FUN_000811c6": {
                    "sub_function": 1
                },
                "FUN_00084728": {
                    "check_and_assign_value": 1,
                    "check_and_update_result": 1,
                    "check_error_and_assign": 2,
                    "check_error_code": 1,
                    "check_return_value": 2,
                    "check_status": 1,
                    "extract_data": 1,
                    "extract_error_code": 1,
                    "extract_error_value": 1,
                    "extract_function_result": 1,
                    "extract_return_value_if_needed": 1,
                    "extract_value": 1,
                    "find_and_assign_error_code": 1,
                    "find_error_and_assign": 1,
                    "find_error_and_set_result": 1,
                    "handle_error": 1,
                    "initialize_data": 1,
                    "process_data": 4,
                    "process_result": 1,
                    "process_results": 1
                },
                "iVar1": {
                    "error": 1,
                    "function_result": 1,
                    "result": 12,
                    "return_value": 7,
                    "status": 1,
                    "sub_function_result": 2
                },
                "param_1": {
                    "error_pointer": 1,
                    "output": 9,
                    "output_data": 1,
                    "output_param": 2,
                    "output_ptr": 1,
                    "output_value": 4,
                    "result": 11,
                    "result_pointer": 2
                },
                "param_2": {
                    "arg1": 4,
                    "input1": 14,
                    "input_1": 2,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "param2": 1,
                    "param_2": 1,
                    "param_a": 2,
                    "param_value1": 1,
                    "parameter2": 1,
                    "value1": 1
                },
                "param_3": {
                    "arg2": 4,
                    "input2": 14,
                    "input_2": 2,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "param3": 1,
                    "param_3": 1,
                    "param_b": 2,
                    "param_value2": 1,
                    "parameter3": 1,
                    "value2": 1
                },
                "param_4": {
                    "arg3": 4,
                    "input3": 14,
                    "input_3": 2,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_value3": 1,
                    "input_value_3": 1,
                    "param4": 1,
                    "param_4": 1,
                    "param_c": 2,
                    "param_value3": 1,
                    "parameter4": 1,
                    "value3": 1
                }
            },
            "called": [
                "FUN_000811c6"
            ],
            "calling": [],
            "code": "\nvoid process_data_00084728(int *result,undefined4 input1,undefined4 input2,undefined4 input3)\n\n{\n  int result;\n  \n  DAT_200711bc = 0;\n  result = FUN_000811c6(input1,input2,input3);\n  if ((result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_00084728",
            "entrypoint": "0x00084728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084728": "process_data_00084728",
                "iVar1": "result",
                "param_1": "result",
                "param_2": "input1",
                "param_3": "input2",
                "param_4": "input3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084750": {
            "additional_data": {
                "FUN_00084750": {
                    "calculate_return_value": 1,
                    "check_and_return": 1,
                    "check_conditions_and_call_subfunction": 1,
                    "check_for_zero_params": 1,
                    "check_if_parameters_non_zero": 1,
                    "check_parameters": 3,
                    "check_params": 9,
                    "check_params_and_call_function": 2,
                    "check_params_and_call_sub_function": 1,
                    "check_params_and_return_value": 1,
                    "evaluate_result": 1,
                    "execute_operation": 1,
                    "handle_params": 1,
                    "process_parameters": 2,
                    "process_params": 5
                },
                "FUN_000847ac": {
                    "call_subfunction": 1
                },
                "iVar1": {
                    "result": 25,
                    "return_value": 1
                },
                "param_1": {
                    "arg1": 1,
                    "input1": 17,
                    "input_1": 7,
                    "input_param1": 2,
                    "input_parameter1": 1,
                    "param_1": 1,
                    "val1": 1,
                    "var1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "input2": 17,
                    "input_2": 7,
                    "input_param2": 2,
                    "input_parameter2": 1,
                    "param_2": 1,
                    "val2": 1,
                    "var2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "condition1": 1,
                    "flag1": 4,
                    "flag_1": 2,
                    "input3": 12,
                    "input_3": 5,
                    "input_param3": 2,
                    "input_parameter3": 1,
                    "param_3": 1,
                    "val3": 1,
                    "var3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "condition2": 1,
                    "flag2": 4,
                    "flag_2": 2,
                    "input4": 12,
                    "input_4": 5,
                    "input_param4": 2,
                    "input_parameter4": 1,
                    "param_4": 1,
                    "val4": 1,
                    "var4": 1
                },
                "param_5": {
                    "output_param": 1,
                    "output_parameter": 1
                }
            },
            "called": [
                "FUN_000847ac"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint check_params_and_call_sub_function_00084750(int input1,int input2,int input3,int input4)\n\n{\n  int result;\n  \n  if ((input4 == 0) && (input3 == 0)) {\n    if (input2 != 0 || input1 != 0) {\n      input1 = -1;\n    }\n    return input1;\n  }\n  result = FUN_000847ac();\n  return result;\n}\n\n",
            "current_name": "check_params_and_call_sub_function_00084750",
            "entrypoint": "0x00084750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084750": "check_params_and_call_sub_function_00084750",
                "iVar1": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008477c": {
            "additional_data": {
                "0x20": {
                    "bit_shift": 1
                },
                "CONCAT44": {
                    "concatenate": 1
                },
                "FUN_0008477c": {
                    "calculate_difference": 5,
                    "subtract_and_adjust": 1,
                    "subtract_and_assign": 2,
                    "subtract_and_store": 4,
                    "subtract_and_store_result": 1,
                    "subtract_and_update": 3,
                    "subtract_and_update_params": 1,
                    "subtract_and_update_values": 1,
                    "subtract_multiply": 1,
                    "subtract_param_and_shift": 1,
                    "subtract_param_from_values": 1,
                    "subtract_params": 1,
                    "subtract_params_and_store": 1,
                    "subtract_uintegers": 1,
                    "subtract_values": 4,
                    "subtract_values_and_store": 1,
                    "subtract_values_and_store_result": 1,
                    "update_parameters": 1
                },
                "FUN_000847e0": {
                    "calculate_product": 1,
                    "multiply": 2,
                    "multiply_four_params": 1
                },
                "lVar2": {
                    "mul_result": 1,
                    "multiplication_result": 1,
                    "multiplied_value": 4,
                    "product": 12,
                    "product_of_values": 1,
                    "result": 5,
                    "result2": 1,
                    "result_2": 1,
                    "result_combined": 1,
                    "signed_result": 1,
                    "temp_result": 1,
                    "temp_val": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "input_param": 4,
                    "input_param_1": 1,
                    "input_val": 2,
                    "input_value": 16,
                    "input_value1": 2,
                    "minuend": 1,
                    "value1": 2,
                    "value_1": 3
                },
                "param_2": {
                    "another_param": 1,
                    "count": 1,
                    "count_param": 1,
                    "count_value": 1,
                    "input_param": 1,
                    "input_param_2": 1,
                    "input_size": 1,
                    "input_value2": 2,
                    "int_val": 1,
                    "int_value": 2,
                    "integer_param": 1,
                    "limit": 1,
                    "limit_value": 1,
                    "offset": 2,
                    "param": 1,
                    "param2": 1,
                    "param_2": 2,
                    "param_value": 1,
                    "subtract_value": 2,
                    "subtraction_value": 1,
                    "subtrahend": 1,
                    "value2": 2,
                    "value_2": 3
                },
                "param_3": {
                    "concat_param_low": 1,
                    "low_uint_1": 1,
                    "lower_half": 1,
                    "param3": 2,
                    "param_1_low": 1,
                    "param_a": 1,
                    "value1": 1,
                    "value_3": 1
                },
                "param_4": {
                    "concat_param_high": 1,
                    "high_uint_1": 1,
                    "param4": 2,
                    "param_1_high": 1,
                    "param_b": 1,
                    "upper_half": 1,
                    "value2": 1,
                    "value_4": 1
                },
                "param_5": {
                    "output_array": 8,
                    "output_param": 2,
                    "output_ptr": 1,
                    "output_values": 2,
                    "result": 1,
                    "result_array": 16
                },
                "uVar1": {
                    "calculated_value": 1,
                    "calculation_result": 1,
                    "computed_value": 1,
                    "converted_product": 2,
                    "converted_result": 3,
                    "converted_value": 2,
                    "final_value": 1,
                    "lower32_bits": 1,
                    "lower_half_result": 1,
                    "lower_result": 1,
                    "modified_result": 1,
                    "product_as_uint": 2,
                    "result": 6,
                    "result1": 1,
                    "result_1": 1,
                    "result_low": 1,
                    "result_uvar1": 1,
                    "result_val": 1,
                    "result_value": 1,
                    "uint_result": 1,
                    "unsigned_result": 1
                }
            },
            "called": [
                "FUN_000847e0"
            ],
            "calling": [],
            "code": "\nvoid subtract_values_and_store_result_0008477c(uint input_value,int value_2,undefined4 param3,undefined4 param4,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = FUN_000847e0();\n  product = product * concatenate(param4,param3);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (value_2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_values_and_store_result_0008477c",
            "entrypoint": "0x0008477c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_0008477c": "subtract_values_and_store_result_0008477c",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "value_2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847ac": {
            "additional_data": {
                "FUN_000847ac": {
                    "calculate_difference": 7,
                    "subtract": 1,
                    "subtract_and_adjust": 4,
                    "subtract_and_adjust_values": 2,
                    "subtract_and_assign": 1,
                    "subtract_and_store": 3,
                    "subtract_and_update_params": 1,
                    "subtract_params": 1,
                    "subtract_params_and_store_result": 1,
                    "subtract_params_and_update_pointer": 1,
                    "subtract_values": 7,
                    "subtract_values_and_store": 1,
                    "subtract_values_from_parameters": 1
                },
                "FUN_00084a80": {
                    "multiply_values": 1
                },
                "lVar2": {
                    "computed_value": 1,
                    "function_result": 1,
                    "multiplication_result": 1,
                    "multiplied_value": 3,
                    "product": 10,
                    "product_value": 2,
                    "result": 6,
                    "result2": 1,
                    "result_longlong": 1,
                    "result_upper_half": 1
                },
                "param_1": {
                    "input1": 3,
                    "input_param": 1,
                    "input_value": 18,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "original_value": 2,
                    "value": 1,
                    "value1": 3
                },
                "param_2": {
                    "another_value": 2,
                    "count": 1,
                    "input2": 3,
                    "input_param": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "int_value": 1,
                    "new_value": 1,
                    "param": 1,
                    "param2": 5,
                    "param_2": 3,
                    "param_value": 1,
                    "second_param": 2,
                    "second_value": 1,
                    "stored_value": 1,
                    "value2": 3,
                    "value_subtracted": 1,
                    "value_to_subtract": 2
                },
                "param_3": {
                    "concatenated_value_1": 1,
                    "low_word_of_conversion": 1,
                    "lower_half_param": 1,
                    "param3": 2,
                    "param_3": 1,
                    "upper_param": 1
                },
                "param_4": {
                    "concatenated_value_2": 1,
                    "high_word_of_conversion": 1,
                    "higher_half_param": 1,
                    "lower_param": 1,
                    "param4": 2,
                    "param_4": 1
                },
                "param_5": {
                    "output": 1,
                    "output_array": 9,
                    "output_values": 1,
                    "result": 2,
                    "result_array": 17,
                    "result_pointer": 1
                },
                "uVar1": {
                    "calculation_result": 1,
                    "casted_result": 1,
                    "computed_value": 1,
                    "computed_value_uint": 1,
                    "converted_product": 3,
                    "converted_result": 6,
                    "converted_value": 1,
                    "lower_product": 1,
                    "product_as_uint": 1,
                    "result": 5,
                    "result1": 1,
                    "result_as_u_int": 1,
                    "result_lower_half": 1,
                    "result_uint": 1,
                    "result_unsigned": 1,
                    "result_value": 1
                }
            },
            "called": [
                "FUN_00084a80"
            ],
            "calling": [
                "FUN_00084750"
            ],
            "code": "\nvoid subtract_and_adjust_values_000847ac(uint input_value,int param2,undefined4 param3,undefined4 param4,int *result_array)\n\n{\n  uint converted_result;\n  longlong product;\n  \n  product = FUN_00084a80();\n  product = product * CONCAT44(param4,param3);\n  converted_result = (uint)product;\n  *result_array = input_value - converted_result;\n  result_array[1] = (param2 - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < converted_result);\n  return;\n}\n\n",
            "current_name": "subtract_and_adjust_values_000847ac",
            "entrypoint": "0x000847ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000847ac": "subtract_and_adjust_values_000847ac",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result_array",
                "uVar1": "converted_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847e0": {
            "additional_data": {
                "FUN_000847e0": {
                    "calculate_division": 1,
                    "div_with_carry": 1,
                    "divide_and_conquer": 1,
                    "divide_and_round": 1,
                    "divide_integers": 1,
                    "divide_positive_numbers": 1,
                    "divide_unsigned_integers": 4,
                    "divide_with_carry": 1,
                    "divide_with_overflow_check": 2,
                    "divide_with_remainder": 8,
                    "divide_with_shift": 1,
                    "division_with_condition": 1,
                    "division_with_remainder": 4,
                    "improved_division_algorithm": 1,
                    "integer_division_with_remainder": 1,
                    "perform_division": 2
                },
                "bVar13": {
                    "carry": 1,
                    "carry_flag": 14,
                    "has_carry": 2,
                    "is_carry": 1,
                    "is_carry_detected": 1,
                    "is_carry_occurred": 1,
                    "is_dividend_negative": 1,
                    "is_negative_case": 1,
                    "is_negative_divisor": 1,
                    "is_not_carry": 1,
                    "should_decrement_quotient_upper": 1,
                    "temp_flag": 1
                },
                "bVar15": {
                    "is_carry": 1
                },
                "iVar14": {
                    "shift_amount": 1
                },
                "iVar6": {
                    "bit_count": 2,
                    "bit_shift": 2,
                    "count": 2,
                    "leading_zeros": 1,
                    "left_shift_count": 1,
                    "shift": 1,
                    "shift_amount": 10,
                    "shift_count": 6
                },
                "lVar1": {
                    "l_var1": 1,
                    "product": 1,
                    "quotient": 3,
                    "quotient_temp5": 1,
                    "result": 2,
                    "temp": 2,
                    "temp_long": 1,
                    "temp_long_var": 1,
                    "temp_result": 1,
                    "tmp": 1
                },
                "param_1": {
                    "dividend": 31
                },
                "param_2": {
                    "dividend_bits": 2,
                    "dividend_high": 13,
                    "dividend_low": 1,
                    "dividend_lower": 3,
                    "dividend_remainder": 2,
                    "dividend_remainder_high": 1,
                    "dividend_sign": 1,
                    "dividend_upper": 2,
                    "dividend_upper_bits": 1,
                    "divisor": 4,
                    "quotient": 1
                },
                "param_3": {
                    "dividend2": 1,
                    "divisor": 27,
                    "quotient": 3
                },
                "param_4": {
                    "divisor2": 1,
                    "divisor_bits": 2,
                    "divisor_high": 13,
                    "divisor_low": 1,
                    "divisor_lower": 3,
                    "divisor_remainder": 2,
                    "divisor_remainder_high": 1,
                    "divisor_sign": 1,
                    "divisor_upper": 2,
                    "divisor_upper_bits": 1,
                    "remainder": 4
                },
                "uVar10": {
                    "divisor_sign": 1,
                    "extra_dividend_bits": 1,
                    "is_divisor_negative": 3,
                    "is_neg_divisor": 1,
                    "is_negative2": 1,
                    "is_negative_divisor": 3,
                    "partial_quotient": 1,
                    "quotient1": 3,
                    "quotient4": 1,
                    "quotient_a": 1,
                    "quotient_low_temp": 1,
                    "quotient_temp2": 1,
                    "quotient_temp3": 1,
                    "sign2": 2,
                    "temp": 1,
                    "temp19": 1,
                    "temp3": 2,
                    "temp_quotient": 2,
                    "u_var10": 3
                },
                "uVar11": {
                    "carry_flag": 1,
                    "final_quotient_low": 1,
                    "is_negative3": 1,
                    "is_negative_dividend2": 1,
                    "multiplication_low": 1,
                    "partial_quotient_b": 1,
                    "product1": 1,
                    "product_high": 1,
                    "quotient1_low": 1,
                    "quotient2": 1,
                    "quotient_temp4": 1,
                    "quotient_upper_remainder": 1,
                    "remainder2": 1,
                    "sign3": 1,
                    "temp1": 1,
                    "temp17": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_quotient": 2,
                    "temp_quotient_bits": 1,
                    "temp_remainder": 1,
                    "u_var11": 3
                },
                "uVar12": {
                    "combined_divisor": 1,
                    "divisor2": 1,
                    "divisor_extended": 1,
                    "divisor_high_shifted": 1,
                    "divisor_low_word": 1,
                    "divisor_shifted": 2,
                    "final_quotient_high": 1,
                    "is_negative4": 1,
                    "is_negative_divisor2": 1,
                    "new_divisor": 2,
                    "partial_divisor": 1,
                    "quotient2_low": 1,
                    "quotient_temp8": 1,
                    "sign4": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 3,
                    "temp5": 2,
                    "temp_divisor": 1,
                    "temp_high": 1,
                    "temp_result": 1,
                    "u_var12": 3
                },
                "uVar13": {
                    "carry": 1,
                    "is_negative_divisor": 1,
                    "temp2": 1
                },
                "uVar14": {
                    "dividend_low": 1,
                    "remainder_low": 1,
                    "temp3": 1
                },
                "uVar15": {
                    "divisor_low": 1,
                    "remainder_high": 1,
                    "temp4": 1
                },
                "uVar16": {
                    "extra_quotient": 1,
                    "remainder1": 1
                },
                "uVar17": {
                    "extra_remainder": 1,
                    "remainder2": 1
                },
                "uVar2": {
                    "div_quotient": 1,
                    "quotient": 5,
                    "quotient1": 7,
                    "quotient2_high": 1,
                    "quotient_high": 3,
                    "quotient_low": 8,
                    "quotient_lower": 2,
                    "quotient_part1": 1,
                    "quotient_remainder_high": 1,
                    "quotient_upper": 2
                },
                "uVar3": {
                    "extra_quotient_bits": 1,
                    "prev_div_quotient": 1,
                    "quotient2": 7,
                    "quotient_high": 10,
                    "quotient_low": 4,
                    "quotient_lower": 2,
                    "quotient_part2": 1,
                    "quotient_remainder_low": 1,
                    "quotient_upper": 3,
                    "remainder": 1
                },
                "uVar4": {
                    "bit_count": 1,
                    "divisor_high_shift": 1,
                    "divisor_high_word": 1,
                    "divisor_low": 2,
                    "divisor_part1": 1,
                    "quotient3": 4,
                    "quotient_low": 1,
                    "quotient_partial": 1,
                    "quotient_remainder": 1,
                    "quotient_temp1": 1,
                    "rem1": 1,
                    "remainder_high": 2,
                    "temp1": 6,
                    "temp24": 1,
                    "temp_quotient": 1,
                    "temp_quotient_low": 1,
                    "temp_upper": 1,
                    "tmp1": 1,
                    "u_var4": 2
                },
                "uVar5": {
                    "divisor_high": 1,
                    "divisor_part2": 1,
                    "partial_product": 1,
                    "product": 1,
                    "quotient4": 3,
                    "quotient_remainder_upper": 1,
                    "quotient_temp": 1,
                    "quotient_temp2": 1,
                    "rem2": 1,
                    "remainder": 1,
                    "remainder_low": 1,
                    "shift_amount": 1,
                    "temp2": 6,
                    "temp22": 1,
                    "temp_lower": 1,
                    "temp_quotient": 1,
                    "temp_quotient_high": 1,
                    "temp_remainder": 1,
                    "temp_result_low": 1,
                    "tmp2": 1,
                    "u_var5": 2
                },
                "uVar6": {
                    "current_dividend_bits": 1,
                    "temp1": 1,
                    "temp20": 1,
                    "temp3": 1
                },
                "uVar7": {
                    "carry": 1,
                    "dividend_part1": 1,
                    "partial_dividend_low": 1,
                    "product_low": 1,
                    "remainder": 2,
                    "remainder_low": 2,
                    "temp": 4,
                    "temp1": 6,
                    "temp2": 1,
                    "temp23": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_high": 1,
                    "temp_product_low": 1,
                    "temp_result": 2,
                    "temp_result_high": 1,
                    "tmp3": 1,
                    "u_var7": 1
                },
                "uVar8": {
                    "current_quotient_bits": 1,
                    "dividend_part2": 1,
                    "divisor1": 1,
                    "divisor_shifted": 1,
                    "partial_dividend_high": 1,
                    "partial_quotient_a": 1,
                    "rem_quotient": 1,
                    "remainder1": 2,
                    "remainder_high": 4,
                    "temp2": 6,
                    "temp21": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_low": 2,
                    "temp_product_high": 1,
                    "temp_result_upper": 1,
                    "temp_upper": 1,
                    "tmp4": 1,
                    "u_var8": 2
                },
                "uVar9": {
                    "dividend_sign": 3,
                    "is_dividend_negative": 8,
                    "is_neg_dividend": 2,
                    "is_negative": 2,
                    "is_negative1": 1,
                    "is_negative_dividend": 5,
                    "negate_result": 1,
                    "negative_dividend": 1,
                    "remainder2": 1,
                    "sign1": 2,
                    "sign_flag": 1,
                    "temp18": 1,
                    "u_var9": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008477c"
            ],
            "code": "\nundefined8 divide_with_remainder_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong quotient;\n  uint quotient_low;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint u_var10;\n  uint u_var11;\n  uint u_var12;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      temp1 = dividend_high / quotient_low;\n      temp1 = (divisor & 0xffff) * temp1;\n      u_var10 = dividend >> 0x10 | (dividend_high - quotient_low * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (u_var10 <= temp1 && temp1 - u_var10 != 0) {\n        carry_flag = CARRY4(u_var10,divisor);\n        u_var10 = u_var10 + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (u_var10 <= temp1 && temp1 - u_var10 != 0)) {\n          quotient_high = temp1 - 2;\n          u_var10 = u_var10 + divisor;\n        }\n      }\n      temp2 = (u_var10 - temp1) / quotient_low;\n      temp1 = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((u_var10 - temp1) - quotient_low * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp1 && temp1 - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        u_var12 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        u_var10 = quotient_high / temp1;\n        u_var12 = divisor & 0xffff;\n        temp1 = u_var12 * u_var10;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp2 >> 0x10 | (quotient_high - temp1 * u_var10) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_low = u_var10;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = u_var10 - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient_low = u_var10 - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp1) / temp1;\n        u_var10 = u_var12 * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= u_var10 && u_var10 - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= u_var10 && u_var10 - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - u_var10;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / temp1;\n      u_var10 = u_var12 * quotient_low;\n      temp2 = dividend >> 0x10 | (dividend_high - temp1 * quotient_low) * 0x10000;\n      temp1 = quotient_low;\n      if (temp2 <= u_var10 && u_var10 - temp2 != 0) {\n        carry_flag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient_low - 1;\n        if ((carry_flag == false) && (temp2 <= u_var10 && u_var10 - temp2 != 0)) {\n          temp1 = quotient_low - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - u_var10) / temp1;\n      u_var12 = u_var12 * temp2;\n      temp1 = dividend & 0xffff | ((temp2 - u_var10) - temp1 * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= u_var12 && u_var12 - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= u_var12 && u_var12 - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      u_var12 = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      u_var10 = u_var12 >> 0x10;\n      quotient_low = temp1 / u_var10;\n      temp2 = (u_var12 & 0xffff) * quotient_low;\n      temp1 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp1 >> 0x10 | (temp1 - u_var10 * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,u_var12);\n        temp1 = temp1 + u_var12;\n        quotient_high = quotient_low - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          quotient_high = quotient_low - 2;\n          temp1 = temp1 + u_var12;\n        }\n      }\n      temp2 = (temp1 - temp2) / u_var10;\n      u_var11 = (u_var12 & 0xffff) * temp2;\n      temp1 = temp1 & 0xffff | ((temp1 - temp2) - u_var10 * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= u_var11 && u_var11 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,u_var12);\n        temp1 = temp1 + u_var12;\n        quotient_low = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= u_var11 && u_var11 - temp1 != 0)) {\n          quotient_low = temp2 - 2;\n          temp1 = temp1 + u_var12;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient = (ulonglong)quotient_low * (ulonglong)(divisor << shift_amount);\n      temp1 = (uint)((ulonglong)quotient >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - u_var11 < temp1) ||\n         ((temp1 - u_var11 == temp1 && (dividend << shift_amount < (uint)quotient)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "current_name": "divide_with_remainder_000847e0",
            "entrypoint": "0x000847e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000847e0": "divide_with_remainder_000847e0",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "quotient",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar10": "u_var10",
                "uVar11": "u_var11",
                "uVar12": "u_var12",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_dividend_negative"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084a80": {
            "additional_data": {
                "FUN_00084a80": {
                    "calculate_divide_remainder": 1,
                    "calculate_division": 2,
                    "calculate_division_remainder": 1,
                    "calculate_divisor": 1,
                    "calculate_quotient": 9,
                    "calculate_quotient_and_remainder": 2,
                    "calculate_unsigned_division": 1,
                    "div_and_mod": 1,
                    "div_mod": 1,
                    "divide_and_calculate_remainder": 1,
                    "divide_and_conquer": 1,
                    "divide_and_remainder": 3,
                    "divide_and_round": 1,
                    "divided_multiplication": 1,
                    "divided_remainder": 1,
                    "divided_unsigned_multiplication": 1,
                    "perform_division": 1,
                    "reverse_and_divide": 1,
                    "revised_division_algorithm": 1
                },
                "bVar11": {
                    "carry": 7,
                    "carry_flag": 15,
                    "is_carry": 3,
                    "overflow_flag": 1
                },
                "iParam10": {
                    "shift": 1
                },
                "iVar10": {
                    "bit_count": 3,
                    "divisor_length": 1,
                    "leading_zeros": 1,
                    "lzcount": 1,
                    "lzcount_result": 1,
                    "shift_amount": 9,
                    "shift_count": 10,
                    "shift_value": 1
                },
                "lVar1": {
                    "multiplication_result": 1,
                    "product": 5,
                    "quotient_multiplication_result": 1,
                    "result": 2,
                    "temp": 3,
                    "temp_result": 1
                },
                "param_1": {
                    "dividend": 31
                },
                "param_2": {
                    "dividend_high": 4,
                    "dividend_lower": 1,
                    "dividend_remainder": 1,
                    "dividend_upper": 2,
                    "divisor": 22,
                    "quotient": 1
                },
                "param_3": {
                    "divident_high": 1,
                    "divisor": 9,
                    "numerator": 2,
                    "quotient": 12,
                    "quotient1": 1,
                    "quotient_high": 1,
                    "remainder": 1,
                    "temp1": 1,
                    "temp_divisor": 1,
                    "temp_value": 1,
                    "temporary": 1
                },
                "param_4": {
                    "base": 1,
                    "denominator": 2,
                    "divisor_high": 4,
                    "divisor_length": 1,
                    "divisor_lower": 1,
                    "divisor_upper": 2,
                    "quotient2": 1,
                    "quotient_low": 1,
                    "remainder": 14,
                    "second_divisor": 1,
                    "temp2": 1,
                    "temp_dividend": 1,
                    "temp_value2": 1
                },
                "uVar10": {
                    "shift_amount": 1,
                    "shifted_dividend2": 1
                },
                "uVar11": {
                    "carry_check": 1,
                    "remainder2": 1
                },
                "uVar12": {
                    "calculation_temp": 1,
                    "carry_check2": 1,
                    "constant1": 1
                },
                "uVar13": {
                    "constant2": 1,
                    "mul_result": 1
                },
                "uVar14": {
                    "carry_check3": 1
                },
                "uVar15": {
                    "mul_result2": 1
                },
                "uVar2": {
                    "bit_shift": 1,
                    "dividend": 1,
                    "dividend_remainder": 1,
                    "final_quotient": 1,
                    "high32_bits_quotient": 1,
                    "numerator_bits": 1,
                    "quotient": 9,
                    "quotient1": 4,
                    "quotient_high": 1,
                    "quotient_low": 2,
                    "quotient_lower": 1,
                    "quotient_temp1": 1,
                    "remainder1": 1,
                    "result": 1,
                    "result1": 2,
                    "result_low": 1,
                    "shifted_dividend": 1,
                    "temp1": 1
                },
                "uVar3": {
                    "denominator_bits": 1,
                    "dividend_high": 1,
                    "dividend_low": 1,
                    "division_result1": 1,
                    "divisor": 1,
                    "divisor1": 1,
                    "divisor_low": 1,
                    "divisor_lower": 1,
                    "q1": 1,
                    "quotient1": 2,
                    "quotient1_temp": 1,
                    "quotient_divisor": 1,
                    "quotient_high": 2,
                    "quotient_high_bits": 1,
                    "quotient_low": 2,
                    "quotient_partial": 2,
                    "quotient_temp": 1,
                    "quotient_temp2": 1,
                    "quotient_upper": 1,
                    "remainder": 1,
                    "shifted_divisor1": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_divisor": 2,
                    "temp_divisor_quotient": 1
                },
                "uVar4": {
                    "dividend_low": 1,
                    "division1": 1,
                    "partial_quotient": 1,
                    "q2": 1,
                    "quotient1": 1,
                    "quotient2": 2,
                    "quotient_bits": 1,
                    "quotient_high": 1,
                    "quotient_low": 1,
                    "quotient_low_bits": 1,
                    "quotient_partial": 1,
                    "quotient_partial_remainder": 1,
                    "quotient_temp": 1,
                    "remainder": 1,
                    "remainder1": 3,
                    "remainder_high": 1,
                    "remainder_low": 2,
                    "remainder_lower": 1,
                    "remainder_partial": 1,
                    "remainder_quotient_multiplication_result": 1,
                    "remainder_temp1": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_quotient": 1
                },
                "uVar5": {
                    "dividend_low": 1,
                    "division_result2": 1,
                    "numerator1": 1,
                    "partial_multiplication": 1,
                    "partial_product": 3,
                    "pq1": 1,
                    "product1": 1,
                    "product_high": 1,
                    "product_low": 1,
                    "quotient_low": 2,
                    "remainder": 2,
                    "remainder2": 1,
                    "remainder_low": 1,
                    "remainder_temp2": 1,
                    "temp1": 5,
                    "temp2": 2,
                    "temp3": 2,
                    "temp5": 1,
                    "temp_remainder": 1,
                    "temp_sub": 1
                },
                "uVar6": {
                    "dividend1": 1,
                    "dividend_high_bits": 1,
                    "dividend_remainder": 1,
                    "dividend_shifted": 1,
                    "dividend_temp": 4,
                    "pq2": 1,
                    "product_low": 1,
                    "quotient2": 1,
                    "quotient2_temp": 1,
                    "quotient3": 1,
                    "quotient_partial_product": 1,
                    "result2": 2,
                    "result_high": 1,
                    "shifted_dividend1": 1,
                    "shifted_divisor": 1,
                    "temp1": 3,
                    "temp2": 3,
                    "temp3": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_dividend": 1,
                    "temp_result": 1
                },
                "uVar7": {
                    "division_result3": 1,
                    "divisor_quotient": 1,
                    "low32_bits_quotient": 1,
                    "partial_product_temp": 1,
                    "partial_remainder": 1,
                    "pq3": 1,
                    "quotient2": 3,
                    "quotient3": 1,
                    "quotient_bit": 1,
                    "quotient_high": 1,
                    "quotient_mid": 2,
                    "quotient_part1": 1,
                    "quotient_temp2": 1,
                    "remainder1": 2,
                    "remainder_bits": 1,
                    "temp2": 3,
                    "temp3": 2,
                    "temp4": 2,
                    "temp7": 1,
                    "temp_quotient": 1
                },
                "uVar8": {
                    "dividend_partial": 1,
                    "division2": 1,
                    "divisor2": 1,
                    "divisor_remainder": 1,
                    "divisor_shifted": 1,
                    "divisor_temp": 1,
                    "high32_bits_partial": 1,
                    "quo_temp": 1,
                    "quotient": 2,
                    "quotient1_final": 1,
                    "quotient_bits_reminder": 1,
                    "quotient_divisor": 1,
                    "quotient_high": 2,
                    "quotient_remainder": 2,
                    "remainder2": 3,
                    "remainder_high": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 2,
                    "temp5": 1,
                    "temp8": 1,
                    "temp_dividend": 1
                },
                "uVar9": {
                    "divisor_multiplication_result": 1,
                    "partial_quotient_temp": 1,
                    "partial_remainder": 1,
                    "product2": 1,
                    "product_high": 1,
                    "quotient2_final": 1,
                    "quotient_divisor": 1,
                    "quotient_final": 1,
                    "quotient_part2": 1,
                    "quotient_partial_remainder": 1,
                    "quotient_remainder": 1,
                    "quotient_temp3": 1,
                    "remainder": 1,
                    "remainder2": 1,
                    "remainder3": 1,
                    "remainder_high": 1,
                    "remainder_mid": 1,
                    "remainder_upper": 1,
                    "temp2": 4,
                    "temp4": 2,
                    "temp6": 1,
                    "temp9": 1,
                    "temp_mul": 1,
                    "temp_product": 1,
                    "temp_quotient": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000847ac"
            ],
            "code": "\nulonglong calculate_quotient_and_remainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong product;\n  uint quotient;\n  uint quotient_partial;\n  uint remainder1;\n  uint temp1;\n  uint dividend_temp;\n  uint quotient2;\n  uint remainder2;\n  uint temp2;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient_partial = quotient >> 0x10;\n        temp1 = quotient & 0xffff;\n        quotient = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        remainder2 = divisor >> (0x20U - shift_count & 0xff);\n        quotient_partial = quotient >> 0x10;\n        temp2 = remainder2 / quotient_partial;\n        temp1 = quotient & 0xffff;\n        quotient = temp1 * temp2;\n        dividend_temp = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        remainder1 = dividend_temp >> 0x10 | (remainder2 - quotient_partial * temp2) * 0x10000;\n        dividend = dividend << shift_count;\n        remainder2 = temp2;\n        if (remainder1 <= quotient && quotient - remainder1 != 0) {\n          carry_flag = CARRY4(remainder1,quotient);\n          remainder1 = remainder1 + quotient;\n          remainder2 = temp2 - 1;\n          if ((carry_flag == false) && (remainder1 <= quotient && quotient - remainder1 != 0)) {\n            remainder2 = temp2 - 2;\n            remainder1 = remainder1 + quotient;\n          }\n        }\n        quotient2 = (remainder1 - quotient) / quotient_partial;\n        temp2 = temp1 * quotient2;\n        divisor = dividend_temp & 0xffff | ((remainder1 - quotient) - quotient_partial * quotient2) * 0x10000;\n        quotient = quotient2;\n        if (divisor <= temp2 && temp2 - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          quotient = quotient2 - 1;\n          if ((carry_flag == false) && (divisor <= temp2 && temp2 - divisor != 0)) {\n            quotient = quotient2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - temp2;\n        quotient = quotient | remainder2 << 0x10;\n      }\n      temp2 = divisor / quotient_partial;\n      remainder1 = temp1 * temp2;\n      dividend_temp = dividend >> 0x10 | (divisor - quotient_partial * temp2) * 0x10000;\n      remainder2 = temp2;\n      if (dividend_temp <= remainder1 && remainder1 - dividend_temp != 0) {\n        carry_flag = CARRY4(dividend_temp,quotient);\n        dividend_temp = dividend_temp + quotient;\n        remainder2 = temp2 - 1;\n        if ((carry_flag == false) && (dividend_temp <= remainder1 && remainder1 - dividend_temp != 0)) {\n          remainder2 = temp2 - 2;\n          dividend_temp = dividend_temp + quotient;\n        }\n      }\n      temp2 = (dividend_temp - remainder1) / quotient_partial;\n      temp1 = temp1 * temp2;\n      dividend_temp = dividend & 0xffff | ((dividend_temp - remainder1) - quotient_partial * temp2) * 0x10000;\n      quotient_partial = temp2;\n      if (dividend_temp <= temp1 && temp1 - dividend_temp != 0) {\n        quotient_partial = temp2 - 1;\n        if ((CARRY4(dividend_temp,quotient) == false) &&\n           (dividend_temp + quotient <= temp1 && temp1 - (dividend_temp + quotient) != 0)) {\n          quotient_partial = temp2 - 2;\n        }\n      }\n      return CONCAT44(quotient,quotient_partial | remainder2 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      remainder2 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = remainder2 | divisor << shift_count;\n    }\n    quotient = quotient >> 0x10;\n    quotient_partial = divisor / quotient;\n    temp1 = (quotient & 0xffff) * quotient_partial;\n    temp2 = dividend >> 0x10 | (divisor - quotient * quotient_partial) * 0x10000;\n    remainder2 = quotient_partial;\n    if (temp2 <= temp1 && temp1 - temp2 != 0) {\n      carry_flag = CARRY4(temp2,quotient);\n      temp2 = temp2 + quotient;\n      remainder2 = quotient_partial - 1;\n      if ((carry_flag == false) && (temp2 <= temp1 && temp1 - temp2 != 0)) {\n        remainder2 = quotient_partial - 2;\n        temp2 = temp2 + quotient;\n      }\n    }\n    dividend_temp = (temp2 - temp1) / quotient;\n    quotient_partial = (quotient & 0xffff) * dividend_temp;\n    temp1 = dividend & 0xffff | ((temp2 - temp1) - quotient * dividend_temp) * 0x10000;\n    quotient = dividend_temp;\n    if (temp1 <= quotient_partial && quotient_partial - temp1 != 0) {\n      quotient = dividend_temp - 1;\n      if ((CARRY4(temp1,quotient) == false) &&\n         (temp1 + quotient <= quotient_partial && quotient_partial - (temp1 + quotient) != 0)) {\n        quotient = dividend_temp - 2;\n      }\n    }\n    quotient = quotient | remainder2 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      quotient = 0;\n    }\n    else {\n      quotient = 0x20 - shift_count;\n      remainder2 = divisor >> (quotient & 0xff);\n      quotient_partial = remainder << shift_count | quotient >> (quotient & 0xff);\n      temp1 = quotient_partial >> 0x10;\n      remainder1 = remainder2 / temp1;\n      temp2 = (quotient_partial & 0xffff) * remainder1;\n      dividend_temp = dividend >> (quotient & 0xff) | divisor << shift_count;\n      quotient = dividend_temp >> 0x10 | (remainder2 - temp1 * remainder1) * 0x10000;\n      remainder2 = remainder1;\n      if (quotient <= temp2 && temp2 - quotient != 0) {\n        carry_flag = CARRY4(quotient,quotient_partial);\n        quotient = quotient + quotient_partial;\n        remainder2 = remainder1 - 1;\n        if ((carry_flag == false) && (quotient <= temp2 && temp2 - quotient != 0)) {\n          remainder2 = remainder1 - 2;\n          quotient = quotient + quotient_partial;\n        }\n      }\n      remainder1 = (quotient - temp2) / temp1;\n      quotient2 = (quotient_partial & 0xffff) * remainder1;\n      temp1 = dividend_temp & 0xffff | ((quotient - temp2) - temp1 * remainder1) * 0x10000;\n      quotient = remainder1;\n      if (temp1 <= quotient2 && quotient2 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,quotient_partial);\n        temp1 = temp1 + quotient_partial;\n        quotient = remainder1 - 1;\n        if ((carry_flag == false) && (temp1 <= quotient2 && quotient2 - temp1 != 0)) {\n          quotient = remainder1 - 2;\n          temp1 = temp1 + quotient_partial;\n        }\n      }\n      quotient = quotient | remainder2 << 0x10;\n      product = (ulonglong)quotient * (ulonglong)(quotient << shift_count);\n      remainder2 = (uint)((ulonglong)product >> 0x20);\n      if ((temp1 - quotient2 < remainder2) || ((temp1 - quotient2 == remainder2 && (dividend << shift_count < (uint)product)))\n         ) {\n        quotient = quotient - 1;\n      }\n    }\n  }\n  return (ulonglong)quotient;\n}\n\n",
            "current_name": "calculate_quotient_and_remainder_00084a80",
            "entrypoint": "0x00084a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084a80": "calculate_quotient_and_remainder_00084a80",
                "bVar11": "carry_flag",
                "iVar10": "shift_count",
                "lVar1": "product",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "quotient",
                "uVar3": "quotient_partial",
                "uVar4": "remainder1",
                "uVar5": "temp1",
                "uVar6": "dividend_temp",
                "uVar7": "quotient2",
                "uVar8": "remainder2",
                "uVar9": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085858": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085858",
            "entrypoint": "0x00085858",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_000816a8"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  \n  for (iVar1 = 0; (undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) < &DAT_2007089c\n      ; iVar1 = iVar1 + 4) {\n    *(undefined4 *)((int)&Elf32_Rel_ARRAY_20070000[0].r_offset + iVar1) =\n         *(undefined4 *)(&DAT_0008588c + iVar1);\n  }\n  for (puVar2 = &DAT_2007089c; puVar2 < (undefined4 *)0x200711c0; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  FUN_000816a8();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x00080f24",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_00081714": {
            "additional_data": {
                "DAT_20071184": {
                    "data_value": 1,
                    "global_value": 1
                },
                "FUN_00081714": {
                    "access_global_data": 2,
                    "fetch_global_variable": 1,
                    "get_global_value": 2,
                    "get_local_data": 2,
                    "get_local_variable": 1,
                    "retrieve_data": 5,
                    "retrieve_data_from_global_variable": 1,
                    "retrieve_data_value": 3,
                    "retrieve_global_data": 6,
                    "retrieve_global_data_value": 1,
                    "retrieve_global_value": 2,
                    "retrieve_global_variable": 2,
                    "retrieve_global_variable_value": 1
                },
                "thunk_FUN_00081714": {
                    "get_data": 2,
                    "get_data_20071184": 1,
                    "get_data_from_global_variable": 1,
                    "get_data_value": 5,
                    "get_global_data": 13,
                    "get_global_data_value": 1,
                    "get_global_value": 2,
                    "get_global_variable": 5,
                    "get_global_variable_value": 1
                }
            },
            "called": [
                "FUN_00081714"
            ],
            "calling": [
                "FUN_000805d0",
                "FUN_0008043e",
                "FUN_00080258",
                "FUN_000804a8"
            ],
            "code": "\nundefined4 get_data_from_global_variable_thunk_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "get_data_from_global_variable_thunk_00081714",
            "entrypoint": "0x00081208",
            "imported": false,
            "improved": true,
            "renaming": {
                "thunk_FUN_00081714": "get_data_from_global_variable_thunk_00081714"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000804a8",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "thunk_FUN_00081714",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816a8",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 461139
}