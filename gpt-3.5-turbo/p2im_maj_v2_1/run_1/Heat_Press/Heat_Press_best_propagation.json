{
    "functions": {
        "FUN_000800f4": {
            "additional_data": {
                "DAT_2007089c": {
                    "flag": 13,
                    "flag_value": 1,
                    "flag_variable": 1
                },
                "FUN_000800f4": {
                    "initialize_flag": 19,
                    "initialize_flag_if_false": 1,
                    "initialize_flag_if_unset": 1,
                    "set_flag_if_needed": 1,
                    "set_flag_if_not_set": 4,
                    "set_flag_if_unset": 2,
                    "update_flag": 2,
                    "update_flag_if_not_set": 1
                },
                "char": {
                    "flag": 1
                },
                "param_1": {
                    "input": 13,
                    "input_value": 16,
                    "value": 2
                }
            },
            "called": [],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080100) */\n\nundefined4 initialize_flag_if_unset_000800f4(undefined4 input_value)\n\n{\n  if ((flag)DAT_2007089c == '\\0') {\n    DAT_2007089c._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_if_unset_000800f4",
            "entrypoint": "0x000800f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000800f4": "initialize_flag_if_unset_000800f4",
                "char": "flag",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080118": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0008011e) */\n/* WARNING: Removing unreachable block (ram,0x00080130) */\n\n\nvoid FUNC_00080118(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080118",
            "entrypoint": "0x00080118",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080118": "FUNC_00080118"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080164": {
            "additional_data": {
                "DAT_20070b60": {
                    "device_data": 1
                },
                "D_20070b60": {
                    "device_data": 1
                },
                "FUN_00080164": {
                    "initialize_device": 15,
                    "initialize_hardware": 10,
                    "initialize_peripheral": 4,
                    "initialize_sensor": 1,
                    "setup_peripheral": 1
                },
                "FUN_00081210": {
                    "check_condition": 1,
                    "check_device_status": 1,
                    "check_hardware_status": 1,
                    "check_peripheral": 1,
                    "check_pin_status": 1,
                    "check_sensor_reading": 1,
                    "configure_pin": 1,
                    "perform_action": 1,
                    "perform_operation": 2,
                    "process_data": 2,
                    "read_button_value": 1
                },
                "FUN_00081318": {
                    "configure_device": 1,
                    "configure_hardware": 1,
                    "execute_command": 1,
                    "handle_result": 1,
                    "perform_action": 1,
                    "process_sensor_data": 1,
                    "send_hardware_command": 1,
                    "set_device_configuration": 1,
                    "set_peripheral_mode": 1,
                    "set_pin_mode": 1,
                    "set_pin_value": 1,
                    "update_status": 1,
                    "write_data": 1
                },
                "byte": {
                    "byte_value": 1
                },
                "digitalWrite": {
                    "write_digital": 2,
                    "write_to_pin": 1
                },
                "iVar1": {
                    "result": 17,
                    "return_value": 10,
                    "status": 3
                },
                "param_1": {
                    "address": 1,
                    "device": 3,
                    "device_data": 5,
                    "device_pointer": 2,
                    "device_ptr": 4,
                    "hardware": 1,
                    "hardware_config": 1,
                    "hardware_data": 2,
                    "hardware_parameters": 1,
                    "hardware_ptr": 2,
                    "hardware_settings": 1,
                    "input_data": 1,
                    "output_pin": 1,
                    "peripheral": 1,
                    "peripheral_data": 2,
                    "peripheral_ptr": 2,
                    "sensor_data": 1
                },
                "param_2": {
                    "config_param": 1,
                    "input_size": 1,
                    "param": 1,
                    "param2": 1,
                    "pin": 1,
                    "sensor_data": 1,
                    "value": 1
                },
                "param_3": {
                    "additional_info": 1,
                    "command_arg": 1,
                    "config_value": 1,
                    "data_format": 1,
                    "extra_param": 1,
                    "mode": 1,
                    "param3": 1
                },
                "pinMode": {
                    "set_pin_mode": 3
                }
            },
            "called": [
                "FUN_00081210",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000804a8"
            ],
            "code": "\nvoid initialize_device_00080164(int **device_data)\n\n{\n  int result;\n  \n  *device_data = &DAT_20070b60;\n  (**(code **)(DAT_20070b60 + 0x18))(&DAT_20070b60);\n  if (1 < *(byte_value *)((int)device_data + 6)) {\n    set_pin_mode(*(byte_value *)((int)device_data + 6),1);\n    write_digital(*(undefined *)((int)device_data + 6),0);\n  }\n  do {\n    result = (**(code **)(**device_data + 0xc))();\n  } while (-1 < result);\n  *(undefined *)((int)device_data + 0x49) = 0;\n  *(undefined *)((int)device_data + 0x4a) = 0;\n  *(undefined2 *)(device_data + 0x15) = 0;\n  *(undefined2 *)((int)device_data + 0x52) = 0;\n  *(undefined2 *)(device_data + 0x14) = 0;\n  return;\n}\n\n",
            "current_name": "initialize_device_00080164",
            "entrypoint": "0x00080164",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080164": "initialize_device_00080164",
                "byte": "byte_value",
                "digitalWrite": "write_digital",
                "iVar1": "result",
                "param_1": "device_data",
                "pinMode": "set_pin_mode"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000801b0": {
            "additional_data": {
                "FUN_000801b0": {
                    "process_data": 31
                },
                "FUN_00081318": {
                    "process_data_helper": 1,
                    "sub_function": 2,
                    "write_data": 1,
                    "write_digital": 1,
                    "write_to_buffer": 1
                },
                "bVar1": {
                    "exceed_flag": 1,
                    "exceed_limit": 1,
                    "exceeded_limit": 2,
                    "exceeded_threshold": 3,
                    "flag": 1,
                    "has_overflow": 1,
                    "has_overflowed": 1,
                    "is_exceeded_threshold": 1,
                    "is_full": 3,
                    "is_max_reached": 1,
                    "is_overflow": 15,
                    "overflow": 1
                },
                "bVar5": {
                    "byte_counter": 1,
                    "byte_value": 3,
                    "byte_var": 1,
                    "char_count": 1,
                    "counter": 5,
                    "current_byte": 1,
                    "current_counter_value": 1,
                    "current_index": 1,
                    "index": 2,
                    "old_counter": 2,
                    "old_counter_value": 1,
                    "previous_counter": 2,
                    "temp": 3,
                    "temp_byte": 4,
                    "temp_counter": 1,
                    "temp_var": 1,
                    "temp_variable": 1
                },
                "cVar3": {
                    "byte_counter": 1,
                    "char_val": 1,
                    "char_value": 3,
                    "char_var": 1,
                    "count": 2,
                    "count_byte": 1,
                    "counter": 16,
                    "current_index": 1,
                    "data_count": 1,
                    "num_iterations": 1,
                    "processed_char": 1,
                    "result": 1,
                    "return_value": 1
                },
                "code": {
                    "func_ptr": 1,
                    "function_ptr": 1
                },
                "digitalWrite": {
                    "change_digital_output_state": 1,
                    "write_to_pin": 1
                },
                "iVar4": {
                    "result": 11,
                    "return_value": 18,
                    "status": 2
                },
                "param_1": {
                    "data": 26,
                    "data_buffer": 2,
                    "data_ptr": 3
                },
                "param_2": {
                    "pin_number": 1
                },
                "param_3": {
                    "pin_mode": 1
                },
                "uVar2": {
                    "byte_val": 1,
                    "data_byte": 1,
                    "data_value": 2,
                    "new_value": 5,
                    "result": 15,
                    "return_value": 1,
                    "temp": 1,
                    "temp_value": 2,
                    "value": 3
                }
            },
            "called": [
                "FUN_00081318"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nint process_data_000801b0(int **data)\n\n{\n  bool is_overflow;\n  undefined result;\n  char counter;\n  int return_value;\n  byte counter;\n  \n  if (1 < *(byte *)((int)data + 6)) {\n    write_to_pin(*(byte *)((int)data + 6),0);\n  }\n  is_overflow = false;\n  *(undefined *)((int)data + 0x49) = 0;\n  if (*(byte *)((int)data + 5) < 4) {\n    while (return_value = (**(func_ptr **)(**data + 8))(), return_value != 0) {\n      counter = *(byte *)((int)data + 0x49);\n      result = (**(func_ptr **)(**data + 0xc))();\n      counter = *(char *)((int)data + 0x49);\n      *(undefined *)((int)data + counter + 9) = result;\n      counter = counter + 1;\n      *(byte *)((int)data + 0x49) = counter;\n      if (0x3f < counter) {\n        is_overflow = true;\n      }\n    }\n  }\n  *(short *)(data + 0x14) = *(short *)(data + 0x14) + 1;\n  if (is_overflow) {\n    counter = -3;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else {\n    counter = *(char *)((int)data + 0x49);\n  }\n  return (int)counter;\n}\n\n",
            "current_name": "process_data_000801b0",
            "entrypoint": "0x000801b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000801b0": "process_data_000801b0",
                "bVar1": "is_overflow",
                "bVar5": "counter",
                "cVar3": "counter",
                "code": "func_ptr",
                "digitalWrite": "write_to_pin",
                "iVar4": "return_value",
                "param_1": "data",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008021c": {
            "additional_data": {
                "0xffU": {
                    "mask": 1
                },
                "FUN_0008021c": {
                    "calculate_checksum": 27,
                    "calculate_crc": 1,
                    "checksum": 1,
                    "compute_checksum": 1,
                    "reverse_bits": 1
                },
                "cVar3": {
                    "bit_count": 7,
                    "bit_counter": 15,
                    "bit_shift": 2,
                    "counter": 2,
                    "loop_count": 1,
                    "shift_count": 1,
                    "shift_counter": 1
                },
                "iVar1": {
                    "current_address": 10,
                    "current_byte": 1,
                    "current_index": 13,
                    "index": 4,
                    "iterator": 1
                },
                "param_1": {
                    "data": 1,
                    "data_address": 5,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "data_start": 9,
                    "data_start_index": 1,
                    "input_address": 2,
                    "input_data": 1,
                    "input_data_start": 1,
                    "start_address": 6,
                    "start_index": 3
                },
                "param_2": {
                    "data_length": 18,
                    "data_size": 1,
                    "input_length": 2,
                    "length": 9,
                    "size": 1
                },
                "uVar2": {
                    "accumulator": 1,
                    "checksum": 22,
                    "checksum_temp": 1,
                    "checksum_value": 1,
                    "final_checksum": 1,
                    "result": 2,
                    "updated_checksum": 1
                },
                "uVar2_ref": {
                    "checksum_ref": 1
                },
                "uVar2_temp": {
                    "result_temp": 1
                },
                "uVar3": {
                    "temp": 1,
                    "temp_checksum": 1
                },
                "uVar4": {
                    "bit": 17,
                    "bit_mask": 2,
                    "bit_masked_checksum": 1,
                    "bit_shifted": 1,
                    "bit_value": 7,
                    "lsb": 1
                },
                "uVar5": {
                    "temp": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080258"
            ],
            "code": "\nuint calculate_checksum_0008021c(int data_start,uint data_length)\n\n{\n  int current_index;\n  uint checksum;\n  char bit_counter;\n  uint bit;\n  \n  checksum = 0xffff;\n  for (current_index = data_start; (current_index - data_start & mask) < data_length; current_index = current_index + 1) {\n    checksum = checksum ^ *(byte *)(current_index + 9);\n    bit_counter = '\\b';\n    do {\n      bit = checksum & 1;\n      checksum = checksum >> 1;\n      if (bit != 0) {\n        checksum = checksum ^ 0xa001;\n      }\n      bit_counter = bit_counter + -1;\n    } while (bit_counter != '\\0');\n  }\n  return (checksum & 0xff) << 8 | checksum >> 8;\n}\n\n",
            "current_name": "calculate_checksum_0008021c",
            "entrypoint": "0x0008021c",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xffU": "mask",
                "FUN_0008021c": "calculate_checksum_0008021c",
                "cVar3": "bit_counter",
                "iVar1": "current_index",
                "param_1": "data_start",
                "param_2": "data_length",
                "uVar2": "checksum",
                "uVar4": "bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080258": {
            "additional_data": {
                "FUN_00080258": {
                    "calculate_and_set_crc": 3,
                    "calculate_and_store_checksum": 1,
                    "calculate_and_store_crc": 3,
                    "calculate_checksum": 3,
                    "calculate_crc_and_modify_data": 2,
                    "calculate_crc_and_write": 1,
                    "update_and_calculate_crc": 2,
                    "update_and_send_data": 1,
                    "update_checksum": 2,
                    "update_checksum_and_increment": 1,
                    "update_checksum_and_state": 1,
                    "update_checksum_and_status": 2,
                    "update_checksum_and_timers": 1,
                    "update_crc": 1,
                    "update_crc_and_counter": 2,
                    "update_crc_and_delay": 1,
                    "update_crc_and_send_data": 1,
                    "update_crc_and_timing": 1,
                    "update_crc_and_write_data": 1,
                    "update_data_and_calculate_crc": 1
                },
                "bVar1": {
                    "byte_val": 5,
                    "byte_value": 14,
                    "byte_var": 1,
                    "checksum": 5,
                    "checksum_byte": 2,
                    "counter": 1,
                    "crc_byte": 2,
                    "crc_value": 1
                },
                "calcCRC": {
                    "calculate_crc": 8
                },
                "digitalWrite": {
                    "set_digital_output": 5,
                    "set_digital_pin": 2,
                    "set_digital_pin_state": 1,
                    "set_output": 1,
                    "write_to_digital_pin": 1
                },
                "iVar3": {
                    "iter_var": 1,
                    "iteration": 2,
                    "iteration_count": 1,
                    "loop_counter": 2,
                    "loop_var": 3,
                    "loop_variable": 6,
                    "result": 12,
                    "result_code": 1,
                    "return_value": 2,
                    "temp_var": 1
                },
                "millis": {
                    "get_current_millis": 2,
                    "get_current_time": 5,
                    "get_millis": 2,
                    "get_milliseconds": 2
                },
                "param_1": {
                    "buffer": 1,
                    "data": 22,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "input_array": 2,
                    "input_data": 2,
                    "parameter1": 1
                },
                "param_2": {
                    "param2": 21,
                    "param_2": 2,
                    "param_a": 1,
                    "parameter2": 1,
                    "size": 3,
                    "value1": 2,
                    "value_1": 1
                },
                "param_3": {
                    "param": 1,
                    "param1": 1,
                    "param3": 21,
                    "param_3": 3,
                    "param_b": 1,
                    "parameter3": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "param_4": {
                    "param2": 2,
                    "param4": 21,
                    "param_4": 3,
                    "param_c": 1,
                    "parameter4": 1,
                    "value3": 2,
                    "value_3": 1
                },
                "uVar2": {
                    "calculated_checksum": 1,
                    "calculated_crc": 7,
                    "crc": 9,
                    "crc_result": 2,
                    "crc_val": 1,
                    "crc_value": 10,
                    "updated_crc": 1
                },
                "uVar4": {
                    "byte_casted_value": 1,
                    "byte_converted": 1,
                    "byte_to_uint": 1,
                    "byte_val_as_u_int": 1,
                    "byte_val_as_uint": 1,
                    "byte_val_uint": 1,
                    "byte_value": 1,
                    "byte_value_as_uint": 1,
                    "byte_value_converted": 2,
                    "checksum": 2,
                    "checksum_as_u_int": 1,
                    "checksum_unsigned": 1,
                    "converted_byte_val": 2,
                    "converted_byte_value": 5,
                    "converted_value": 1,
                    "counter_as_u_int": 1,
                    "crc_size_var": 1,
                    "crc_value": 3,
                    "int_value": 1,
                    "length": 2,
                    "size_as_uint": 1
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_0008021c",
                "FUN_00081318"
            ],
            "calling": [
                "FUN_000802da"
            ],
            "code": "\nvoid calculate_crc_and_write_00080258(int **data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  byte byte_value;\n  undefined2 crc_value;\n  int result;\n  uint converted_byte_value;\n  \n  byte_value = *(byte *)((int)data + 0x49);\n  converted_byte_value = (uint)byte_value;\n  crc_value = calculate_crc(data,converted_byte_value,param3,param4,param4);\n  *(char *)((int)data + converted_byte_value + 9) = (char)((ushort)crc_value >> 8);\n  *(char *)((int)data + (converted_byte_value + 1 & 0xff) + 9) = (char)crc_value;\n  *(byte *)((int)data + 0x49) = byte_value + 2;\n  if (1 < *(byte *)((int)data + 6)) {\n    set_digital_output(*(byte *)((int)data + 6),1);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    (**(code **)(**data + 4))(*data,(int)data + 9,*(undefined *)((int)data + 0x49));\n  }\n  if (1 < *(byte *)((int)data + 6)) {\n    set_digital_output(*(byte *)((int)data + 6),0);\n  }\n  if (*(byte *)((int)data + 5) < 4) {\n    do {\n      result = (**(code **)(**data + 0xc))();\n    } while (-1 < result);\n  }\n  *(undefined *)((int)data + 0x49) = 0;\n  result = get_current_time();\n  data[0x17] = (int *)(result + (uint)*(ushort *)((int)data + 0x56));\n  *(short *)((int)data + 0x52) = *(short *)((int)data + 0x52) + 1;\n  return;\n}\n\n",
            "current_name": "calculate_crc_and_write_00080258",
            "entrypoint": "0x00080258",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080258": "calculate_crc_and_write_00080258",
                "bVar1": "byte_value",
                "calcCRC": "calculate_crc",
                "digitalWrite": "set_digital_output",
                "iVar3": "result",
                "millis": "get_current_time",
                "param_1": "data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "crc_value",
                "uVar4": "converted_byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000802da": {
            "additional_data": {
                "FUN_000802da": {
                    "decode_and_send_data": 1,
                    "parse_and_send_data": 1,
                    "parse_data": 3,
                    "process_data": 17,
                    "process_function": 1,
                    "validate_and_send_data": 1,
                    "validate_and_set_parameters": 1,
                    "validate_and_set_params": 2
                },
                "bVar2": {
                    "byte_val": 1,
                    "byte_value": 10,
                    "byte_var": 9,
                    "temp_byte": 10,
                    "temp_var": 1
                },
                "cVar1": {
                    "error_code": 12,
                    "result": 16,
                    "result_code": 1,
                    "return_value": 2
                },
                "local_18": {
                    "data_length": 1,
                    "local_val3": 1,
                    "local_var3": 1,
                    "local_variable3": 1,
                    "param3_0": 1,
                    "param3_low_short": 1,
                    "param3_lower16_bits": 1,
                    "param3_part": 1,
                    "payload_size_u_int": 1,
                    "short1": 1,
                    "temp3": 1,
                    "temp_short2": 2,
                    "temp_u_short1": 1,
                    "temp_value": 1,
                    "temp_var3": 2,
                    "ushort1": 1,
                    "ushort_val": 1,
                    "ushort_value": 3,
                    "ushort_value2": 1,
                    "value2_low": 1,
                    "value2_lower_word": 1,
                    "value_2_low_ushort": 1,
                    "value_high": 1
                },
                "local_1b": {
                    "byte2": 4,
                    "byte_value4": 1,
                    "flags_high": 1,
                    "flags_high_byte": 1,
                    "high_byte_param_value": 1,
                    "high_byte_value": 1,
                    "local_val2": 1,
                    "local_var2": 1,
                    "local_variable2": 1,
                    "param2_1": 1,
                    "param2_high_byte": 2,
                    "param2_part2": 1,
                    "second_byte": 1,
                    "second_least_significant_byte": 1,
                    "temp2": 1,
                    "temp_byte2": 1,
                    "temp_undefined2": 1,
                    "temp_var2": 3,
                    "value1_high": 1,
                    "value1_upper_byte": 1,
                    "value_1_high_byte": 1
                },
                "local_1c": {
                    "byte1": 4,
                    "byte_value": 1,
                    "byte_value3": 1,
                    "first_byte": 1,
                    "flags_low": 1,
                    "flags_low_byte": 1,
                    "least_significant_byte": 1,
                    "local_val1": 1,
                    "local_var1": 1,
                    "local_variable1": 1,
                    "low_byte_param_value": 1,
                    "param2_0": 1,
                    "param2_low_byte": 2,
                    "param2_part1": 1,
                    "temp1": 1,
                    "temp_byte1": 1,
                    "temp_undefined1": 1,
                    "temp_var1": 3,
                    "value1_low": 1,
                    "value1_lower_byte": 1,
                    "value_1_low_byte": 1
                },
                "param_1": {
                    "arg1": 1,
                    "buffer": 9,
                    "data_buffer": 6,
                    "data_ptr": 5,
                    "function_pointer": 1,
                    "input_buffer": 5,
                    "input_data": 1,
                    "input_param": 1,
                    "input_ptr": 2
                },
                "param_2": {
                    "arg2": 1,
                    "byte_length": 1,
                    "command1": 1,
                    "config": 2,
                    "config_value": 1,
                    "data": 1,
                    "data_size": 2,
                    "flag": 1,
                    "flag1": 1,
                    "flags": 5,
                    "input_value": 1,
                    "input_value1": 1,
                    "length": 2,
                    "option": 1,
                    "param1_value": 1,
                    "param_value": 1,
                    "protocol": 1,
                    "value1": 5,
                    "value_1": 2
                },
                "param_3": {
                    "arg3": 1,
                    "command2": 1,
                    "data": 1,
                    "flag2": 1,
                    "flags": 1,
                    "input_value": 1,
                    "input_value2": 1,
                    "length": 4,
                    "output_value": 1,
                    "packed_data": 1,
                    "param2_value": 1,
                    "param_value": 1,
                    "payload_size": 1,
                    "sub_param_value": 1,
                    "value": 7,
                    "value2": 5,
                    "value_2": 2
                },
                "param_4": {
                    "arg4": 1,
                    "array": 1,
                    "buffer": 7,
                    "buffer_ptr": 1,
                    "byte_array": 1,
                    "data": 7,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 2,
                    "input_array": 2,
                    "input_data": 1,
                    "output_buffer": 1,
                    "param3_value": 1,
                    "param_array": 1,
                    "payload": 2,
                    "value_array": 1
                },
                "puVar6": {
                    "buffer_ptr": 1,
                    "data_ptr": 2,
                    "param4_ptr": 1,
                    "payload_ptr": 1,
                    "ptr": 3,
                    "ptr_buffer": 1,
                    "ptr_to_input_array": 1,
                    "temp_buffer": 2,
                    "temp_pointer": 4,
                    "temp_ptr": 7,
                    "temp_u_short_ptr": 2,
                    "temp_ushort_ptr": 1,
                    "tmp_array_ptr": 1,
                    "ushort_ptr": 4
                },
                "sendTxBuffer": {
                    "send_buffer": 1
                },
                "uVar3": {
                    "byte_val_temp": 1,
                    "byte_value": 1,
                    "byte_value2": 1,
                    "byte_var2": 1,
                    "temp": 5,
                    "temp1": 1,
                    "temp_byte2": 4,
                    "temp_byte_2": 1,
                    "temp_undefined": 1,
                    "temp_value": 3,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "tmp_byte": 1,
                    "tmp_var": 1,
                    "undefined_value": 3,
                    "undefined_var": 4
                },
                "uVar4": {
                    "buffer_val": 1,
                    "temp2": 3,
                    "temp_short": 4,
                    "temp_u_short": 3,
                    "temp_ushort": 1,
                    "temp_value": 2,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "tmp_ushort": 1,
                    "tmp_var2": 1,
                    "ushort_value": 4,
                    "ushort_var": 6,
                    "value": 1
                },
                "uVar5": {
                    "buffer_size": 1,
                    "loop_index": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 3,
                    "temp_int": 1,
                    "temp_u_int": 4,
                    "temp_uint": 3,
                    "temp_value": 4,
                    "temp_value3": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "tmp_uint": 1,
                    "tmp_var3": 1,
                    "uint_value": 1,
                    "uint_var": 4
                }
            },
            "called": [
                "FUN_00080258"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint process_data_000802da(int buffer,uint flags,uint value,ushort *data)\n\n{\n  char result;\n  byte byte_value;\n  undefined temp;\n  ushort ushort_var;\n  uint uint_var;\n  ushort *temp_ptr;\n  undefined byte1;\n  undefined byte2;\n  ushort ushort_value;\n  \n  byte1 = (undefined)flags;\n  byte2 = (undefined)(flags >> 8);\n  ushort_value = (ushort)value;\n  uint_var = value & 0xffff;\n  if (*(char *)(buffer + 4) != '\\0') {\n    result = -2;\n    goto LAB_000803cc;\n  }\n  if (*(char *)(buffer + 7) != '\\0') {\n    result = -1;\n    goto LAB_000803cc;\n  }\n  if (0xf6 < ((flags & 0xff) - 1 & 0xff)) {\n    result = -3;\n    goto LAB_000803cc;\n  }\n  *(undefined *)(buffer + 9) = byte1;\n  *(undefined *)(buffer + 10) = byte2;\n  *(ushort **)(buffer + 0x4c) = data;\n  *(char *)(buffer + 0xb) = (char)(flags >> 0x18);\n  *(char *)(buffer + 0xc) = (char)(flags >> 0x10);\n  temp = (undefined)(value >> 8);\n  switch(byte2) {\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    *(undefined *)(buffer + 0xd) = temp;\n    break;\n  case 5:\n    ushort_var = *data;\n    if (ushort_var != 0) {\n      ushort_var = 1;\n    }\n    *(char *)(buffer + 0xd) = -(char)ushort_var;\n    uint_var = 0;\n    break;\n  case 6:\n    *(char *)(buffer + 0xd) = (char)(*data >> 8);\n    uint_var = (uint)*data;\n    break;\n  default:\n    goto switchD_0008031e_caseD_7;\n  case 0xf:\n    byte_value = (byte)(ushort_value >> 3) & 0xfe;\n    if ((value & 0xf) != 0) {\n      byte_value = byte_value + 1;\n    }\n    *(char *)(buffer + 0xe) = (char)value;\n    *(undefined *)(buffer + 0xd) = temp;\n    *(byte *)(buffer + 0xf) = byte_value;\n    temp = 7;\n    goto LAB_0008034a;\n  case 0x10:\n    *(undefined *)(buffer + 0xd) = temp;\n    *(char *)(buffer + 0xe) = (char)value;\n    data = data + -1;\n    *(char *)(buffer + 0xf) = (char)uint_var * '\\x02';\n    *(undefined *)(buffer + 0x49) = 7;\n    temp_ptr = data + uint_var;\n    while (data != temp_ptr) {\n      byte_value = *(byte *)(buffer + 0x49);\n      *(char *)(buffer + (uint)byte_value + 9) = (char)(data[1] >> 8);\n      uint_var = byte_value + 1 & 0xff;\n      *(char *)(buffer + 0x49) = (char)uint_var;\n      data = data + 1;\n      *(char *)(uint_var + buffer + 9) = (char)*data;\n      *(byte *)(buffer + 0x49) = byte_value + 2;\n    }\n    goto switchD_0008031e_caseD_7;\n  }\n  *(char *)(buffer + 0xe) = (char)uint_var;\n  temp = 6;\nLAB_0008034a:\n  *(undefined *)(buffer + 0x49) = temp;\nswitchD_0008031e_caseD_7:\n  send_buffer(buffer);\n  *(undefined *)(buffer + 7) = 1;\n  result = '\\0';\nLAB_000803cc:\n  return (int)result;\n}\n\n",
            "current_name": "process_data_000802da",
            "entrypoint": "0x000802da",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000802da": "process_data_000802da",
                "bVar2": "byte_value",
                "cVar1": "result",
                "local_18": "ushort_value",
                "local_1b": "byte2",
                "local_1c": "byte1",
                "param_1": "buffer",
                "param_2": "flags",
                "param_3": "value",
                "param_4": "data",
                "puVar6": "temp_ptr",
                "sendTxBuffer": "send_buffer",
                "uVar3": "temp",
                "uVar4": "ushort_var",
                "uVar5": "uint_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000803d4": {
            "additional_data": {
                "0": {
                    "condition_not_met": 1,
                    "success_code": 2
                },
                "0x18": {
                    "shift_amount": 1
                },
                "0x54": {
                    "counter": 1,
                    "counter_address": 1
                },
                "0xfb": {
                    "condition_met": 1,
                    "failure": 1,
                    "failure_code": 3
                },
                "1": {
                    "success": 1
                },
                "10": {
                    "position": 1
                },
                "8": {
                    "array_length": 1,
                    "array_size": 2,
                    "valid_values_length": 1
                },
                "DAT_00084d10": {
                    "data_array": 1
                },
                "FUN_000803d4": {
                    "check_and_increment": 2,
                    "check_and_increment_count": 1,
                    "check_and_increment_counter": 5,
                    "check_and_increment_value": 1,
                    "check_and_update_value": 2,
                    "check_byte": 1,
                    "check_byte_and_increment": 2,
                    "check_byte_and_increment_counter": 1,
                    "check_byte_and_update_counter": 1,
                    "check_byte_value": 1,
                    "check_character": 2,
                    "check_condition": 1,
                    "check_data": 1,
                    "check_if_byte_exists": 1,
                    "check_value": 3,
                    "check_value_and_increment": 3,
                    "check_value_and_increment_counter": 2,
                    "check_value_and_update_counter": 1
                },
                "byte": {
                    "byte_value": 1
                },
                "iVar1": {
                    "counter": 2,
                    "index": 29
                },
                "param_1": {
                    "character": 2,
                    "data": 1,
                    "input": 8,
                    "input_data": 1,
                    "input_param": 1,
                    "input_parameter": 3,
                    "input_value": 13,
                    "value": 2
                },
                "short": {
                    "short_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nundefined4 check_value_and_increment_counter_000803d4(int input_value)\n\n{\n  int index;\n  \n  if ((int)((uint)*(byte_value *)(input_value + 10) << 0x18) < 0) {\n    *(short_value *)(input_value + 0x54) = *(short_value *)(input_value + 0x54) + 1;\n    return 0xfb;\n  }\n  index = 0;\n  do {\n    if ((&DAT_00084d10)[index] == *(byte_value *)(input_value + 10)) {\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 8);\n  *(short_value *)(input_value + 0x54) = *(short_value *)(input_value + 0x54) + 1;\n  return 1;\n}\n\n",
            "current_name": "check_value_and_increment_counter_000803d4",
            "entrypoint": "0x000803d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000803d4": "check_value_and_increment_counter_000803d4",
                "byte": "byte_value",
                "iVar1": "index",
                "param_1": "input_value",
                "short": "short_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080410": {
            "additional_data": {
                "FUN_00080410": {
                    "decode_and_store_data": 6,
                    "decode_data": 2,
                    "extract_and_store_bytes": 1,
                    "extract_data": 2,
                    "extract_data_and_store": 2,
                    "extract_words_from_binary": 1,
                    "process_data": 8,
                    "process_function": 1,
                    "replace_values": 1,
                    "reverse_and_store_values": 1,
                    "reverse_byte_order": 1,
                    "reverse_word_bytes": 1
                },
                "FUN_000815f8": {
                    "calculate_value": 1,
                    "convert_data": 1,
                    "reverse_bits": 1
                },
                "bVar3": {
                    "byte_count": 2,
                    "count": 1,
                    "counter": 24,
                    "index": 3,
                    "loop_counter": 1
                },
                "iVar2": {
                    "address": 2,
                    "adjusted_address": 1,
                    "adjusted_offset": 1,
                    "array_index": 1,
                    "calculated_index": 1,
                    "current_data_address": 1,
                    "current_index": 1,
                    "decoded_data_addr": 1,
                    "dynamic_offset": 1,
                    "index": 6,
                    "modified_address": 1,
                    "new_address": 1,
                    "offset": 7,
                    "processed_address": 1,
                    "result_address": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "updated_address": 1
                },
                "iVar5": {
                    "address": 1,
                    "array_address": 4,
                    "array_index": 1,
                    "array_pointer": 2,
                    "array_ptr": 1,
                    "array_start": 1,
                    "data_address": 2,
                    "data_array_address": 1,
                    "data_offset": 2,
                    "destination_address": 1,
                    "int_var": 1,
                    "output_address": 1,
                    "output_buffer": 1,
                    "pointer": 1,
                    "ptr_index": 1,
                    "ptr_value": 2,
                    "result_offset": 1,
                    "storage_ptr": 1,
                    "store_address": 1,
                    "store_data_address": 1,
                    "store_offset": 1,
                    "stored_data_addr": 1,
                    "temp_var2": 2
                },
                "makeWord": {
                    "create_word": 1
                },
                "param_1": {
                    "array_address": 1,
                    "base_address": 2,
                    "data_address": 8,
                    "data_offset": 1,
                    "data_pointer": 2,
                    "data_ptr": 6,
                    "input": 1,
                    "input_address": 4,
                    "input_array": 2,
                    "input_buffer": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "param1": 1
                },
                "param_2": {
                    "another_param": 1,
                    "param2": 26,
                    "param_2": 1,
                    "parameter2": 1,
                    "size1": 1
                },
                "param_3": {
                    "param3": 26,
                    "param_3": 1,
                    "param_address2": 1,
                    "parameter3": 1,
                    "size2": 1
                },
                "param_4": {
                    "output": 1,
                    "param4": 27,
                    "param_4": 1,
                    "param_address3": 1,
                    "parameter4": 1
                },
                "uVar1": {
                    "converted_value": 1,
                    "encoded_value": 1,
                    "new_word": 1,
                    "result": 6,
                    "word": 11,
                    "word_value": 11
                },
                "uVar4": {
                    "adjusted_counter": 1,
                    "bit": 1,
                    "byte_index": 4,
                    "byte_value": 3,
                    "converted_count": 1,
                    "converted_counter": 7,
                    "converted_index": 1,
                    "converted_value": 1,
                    "counter_u_int": 1,
                    "counter_uint": 1,
                    "current_index": 2,
                    "increment": 1,
                    "index": 6,
                    "loop_index": 1
                }
            },
            "called": [
                "FUN_000815f8"
            ],
            "calling": [
                "FUN_0008043e"
            ],
            "code": "\nvoid extract_and_store_bytes_00080410(int data_address,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined2 word;\n  int offset;\n  byte counter;\n  uint converted_counter;\n  int array_address;\n  \n  counter = 0;\n  while( true ) {\n    converted_counter = (uint)counter;\n    counter = counter + 1;\n    if (*(byte *)(data_address + 0xb) >> 1 <= converted_counter) break;\n    offset = (converted_counter * 2 + 3 & 0xff) + data_address;\n    array_address = *(int *)(data_address + 0x4c);\n    word = create_word(*(undefined *)(offset + 9),*(undefined *)(offset + 10),offset,\n                     *(byte *)(data_address + 0xb),param4);\n    *(undefined2 *)(array_address + converted_counter * 2) = word;\n  }\n  return;\n}\n\n",
            "current_name": "extract_and_store_bytes_00080410",
            "entrypoint": "0x00080410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080410": "extract_and_store_bytes_00080410",
                "bVar3": "counter",
                "iVar2": "offset",
                "iVar5": "array_address",
                "makeWord": "create_word",
                "param_1": "data_address",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "word",
                "uVar4": "converted_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008043e": {
            "additional_data": {
                "FUN_0008043e": {
                    "check_and_process_answer": 1,
                    "check_and_process_data": 6,
                    "check_and_process_reply": 1,
                    "check_and_update_response": 1,
                    "check_and_update_status": 2,
                    "check_and_update_values": 1,
                    "check_answer": 3,
                    "check_answer_validity": 2,
                    "check_data": 1,
                    "check_input_and_get_result": 1,
                    "check_response": 2,
                    "check_response_and_update": 1,
                    "check_response_and_validation": 1,
                    "check_response_validity": 1,
                    "check_status_and_process_response": 1,
                    "process_data": 5,
                    "validate_response": 1
                },
                "cVar1": {
                    "answer_validity": 2,
                    "char_result": 1,
                    "response": 2,
                    "response_code": 1,
                    "response_status": 2,
                    "result": 17,
                    "return_value": 1,
                    "status": 4
                },
                "getRxBuffer": {
                    "fetch_received_data": 1,
                    "receive_data": 2,
                    "retrieve_data": 1,
                    "retrieve_response_buffer": 1
                },
                "get_FC3": {
                    "fetch_fc3": 1,
                    "get_data_fc3": 2,
                    "process_fc3": 2
                },
                "iVar4": {
                    "answer_validation_result": 1,
                    "validation_result": 30
                },
                "millis": {
                    "get_current_time": 1
                },
                "param_1": {
                    "data": 10,
                    "data_array": 1,
                    "data_pointer": 1,
                    "function_data": 1,
                    "function_parameters": 1,
                    "input": 3,
                    "input_array": 1,
                    "input_data": 5,
                    "input_parameters": 1,
                    "input_params": 1,
                    "object_ptr": 1,
                    "param": 1,
                    "response": 1,
                    "response_pointer": 1,
                    "status_ptr": 1
                },
                "piVar3": {
                    "current_millis": 6,
                    "current_time": 23,
                    "current_time_ptr": 1,
                    "time_value": 1
                },
                "uVar2": {
                    "buffer_length": 1,
                    "callback_result": 1,
                    "function_result": 10,
                    "function_ret_val": 1,
                    "function_return_value": 1,
                    "function_value": 1,
                    "response_value": 1,
                    "result": 6,
                    "result_code": 2,
                    "return_value": 4,
                    "value": 2
                },
                "unaff_r6": {
                    "answer_count": 1,
                    "answer_length": 4,
                    "buffer_length": 4,
                    "buffer_size": 4,
                    "condition": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "random_number": 1,
                    "random_value": 1,
                    "received_value": 1,
                    "response_byte": 1,
                    "response_length": 5,
                    "return_value": 1,
                    "rx_buffer_length": 2,
                    "rx_buffer_value": 1,
                    "status": 1
                },
                "validateAnswer": {
                    "validate_data": 2,
                    "validate_response": 2,
                    "verify_answer": 1
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_000801b0",
                "FUN_00080410",
                "FUN_000803d4"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nint check_and_process_data_0008043e(int **data)\n\n{\n  char result;\n  uint function_result;\n  int *current_time;\n  int validation_result;\n  uint response_length;\n  \n  if (*(byte *)((int)data + 5) < 4) {\n    function_result = (**(code **)(**data + 8))();\n    response_length = function_result & 0xff;\n  }\n  current_time = (int *)get_current_time();\n  if (data[0x17] < current_time) {\n    *(undefined *)(data + 2) = 0xff;\n    *(undefined *)((int)data + 7) = 0;\n    *(short *)(data + 0x15) = *(short *)(data + 0x15) + 1;\n  }\n  else if (7 < response_length) {\n    receive_data(data);\n    validation_result = validate_data(data);\n    if (validation_result == 0) {\n      if (*(byte *)((int)data + 10) - 3 < 2) {\n        get_data_fc3(data);\n      }\n      *(undefined *)((int)data + 7) = 0;\n      result = *(char *)((int)data + 0x49);\n    }\n    else {\n      *(undefined *)((int)data + 7) = 0;\n      result = (char)validation_result;\n    }\n    goto LAB_000804a2;\n  }\n  result = '\\0';\nLAB_000804a2:\n  return (int)result;\n}\n\n",
            "current_name": "check_and_process_data_0008043e",
            "entrypoint": "0x0008043e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008043e": "check_and_process_data_0008043e",
                "cVar1": "result",
                "getRxBuffer": "receive_data",
                "get_FC3": "get_data_fc3",
                "iVar4": "validation_result",
                "millis": "get_current_time",
                "param_1": "data",
                "piVar3": "current_time",
                "uVar2": "function_result",
                "unaff_r6": "response_length",
                "validateAnswer": "validate_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000804a8": {
            "additional_data": {
                "DAT_200708c0": {
                    "time4": 1
                },
                "DAT_200708c8": {
                    "current_time": 1
                },
                "DAT_20070934": {
                    "time3": 1
                },
                "DAT_20070948": {
                    "counter": 1
                },
                "DAT_2007097c": {
                    "data20": 1
                },
                "DAT_2007097d": {
                    "data4": 1
                },
                "DAT_2007097e": {
                    "data26": 1
                },
                "DAT_20070980": {
                    "data8": 1
                },
                "DAT_20070984": {
                    "data9": 1
                },
                "DAT_20070988": {
                    "data21": 1
                },
                "DAT_20070989": {
                    "data10": 1
                },
                "DAT_2007098a": {
                    "data1": 1
                },
                "DAT_2007098c": {
                    "data2": 1
                },
                "DAT_20070990": {
                    "data3": 1
                },
                "DAT_20070994": {
                    "data22": 1
                },
                "DAT_20070995": {
                    "data5": 1
                },
                "DAT_20070996": {
                    "data6": 1
                },
                "DAT_20070998": {
                    "data11": 1
                },
                "DAT_2007099c": {
                    "data27": 1
                },
                "DAT_200709a0": {
                    "data23": 1
                },
                "DAT_200709a1": {
                    "data12": 1
                },
                "DAT_200709a2": {
                    "data14": 1
                },
                "DAT_200709a4": {
                    "data7": 1
                },
                "DAT_200709a8": {
                    "data15": 1
                },
                "DAT_200709ac": {
                    "data16": 1
                },
                "DAT_200709ad": {
                    "data17": 1
                },
                "DAT_200709ae": {
                    "data28": 1
                },
                "DAT_200709b0": {
                    "data13": 1
                },
                "DAT_200709b4": {
                    "data18": 1
                },
                "DAT_200709b8": {
                    "data19": 1
                },
                "DAT_200709b9": {
                    "data29": 1
                },
                "DAT_200709ba": {
                    "data24": 1
                },
                "DAT_200709bc": {
                    "data25": 1
                },
                "DAT_200709c0": {
                    "data30": 1
                },
                "DAT_200709e0": {
                    "time1": 1
                },
                "DAT_200709e4": {
                    "device_data": 1
                },
                "DAT_20070a3a": {
                    "delay_value": 1
                },
                "DAT_20070a48": {
                    "time2": 1
                },
                "FUN_000804a8": {
                    "initialize": 6,
                    "initialize_and_configure": 1,
                    "initialize_and_configure_device": 1,
                    "initialize_and_configure_pins": 3,
                    "initialize_board": 1,
                    "initialize_device": 15,
                    "initialize_gpio": 1,
                    "initialize_io": 1,
                    "initialize_peripheral": 1,
                    "initialize_system": 1
                },
                "channel_index": {
                    "channel": 2,
                    "channel_index": 2,
                    "pin": 1
                },
                "configure_pin_00081210": {
                    "configure_pin": 28
                },
                "configure_pin_mode_00081318": {
                    "configure_pin_mode": 14,
                    "configure_pin_mode_internal": 1,
                    "configure_pin_mode_param": 1,
                    "set_pin_mode": 12
                },
                "device_data": {
                    "data": 2,
                    "device": 1,
                    "device_data": 2
                },
                "digitalWrite": {
                    "set_digital_output": 2,
                    "set_digital_state": 1,
                    "set_pin_state": 2,
                    "set_pin_value": 1,
                    "write_pin": 1
                },
                "iVar1": {
                    "current_time": 3
                },
                "initialize_device_00080164": {
                    "initialize_device": 21,
                    "initialize_device_data": 7
                },
                "millis": {
                    "current_millis": 1,
                    "get_current_time": 2,
                    "get_milliseconds": 1
                },
                "mode": {
                    "pin_mode": 5
                },
                "param": {
                    "parameter": 1
                },
                "pinMode": {
                    "configure_pin_mode": 6,
                    "set_pin_mode": 1
                },
                "pin_index": {
                    "pin": 2,
                    "pin_index": 2
                },
                "software_interrupt": {
                    "perform_software_interrupt": 1,
                    "trigger_interrupt": 1,
                    "trigger_software_interrupt": 2
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_00081210",
                "FUN_00081318",
                "FUN_00080164"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nundefined8 initialize_and_configure_device_000804a8(void)\n\n{\n  int current_time;\n  \n  configure_pin_mode(1,0);\n  configure_pin_mode(6,1);\n  configure_pin_mode(0,1);\n  configure_pin_mode(1,1);\n  set_pin_state(0,0);\n  set_pin_state(1,0);\n  DAT_2007098a = 0x13;\n  DAT_2007098c._0_2_ = 10;\n  DAT_20070990 = &DAT_200708f2;\n  DAT_2007097d = 3;\n  DAT_20070995 = 3;\n  DAT_20070996 = 0x14;\n  DAT_200709a4._0_2_ = 3;\n  DAT_20070980._0_2_ = 0x10;\n  DAT_20070984 = &DAT_200708cc;\n  DAT_20070989 = 0x10;\n  DAT_20070998._0_2_ = 0xc;\n  DAT_200709a1 = 0x10;\n  DAT_200709b0._0_2_ = 8;\n  DAT_200709a2 = 0x1c;\n  DAT_200709a8 = &DAT_20070904;\n  DAT_200709ac = 2;\n  DAT_200709ad = 2;\n  DAT_200709b4 = &DAT_200709cc;\n  DAT_200709b8 = 2;\n  DAT_2007097c = 1;\n  DAT_20070988 = 1;\n  DAT_20070994 = 1;\n  DAT_200709a0 = 1;\n  DAT_200709ba = 1;\n  DAT_200709bc = 1;\n  DAT_2007097e = 0;\n  DAT_2007099c = &DAT_200708f4;\n  DAT_200709ae = 0;\n  DAT_200709b9 = 5;\n  DAT_200709c0 = &DAT_200709ce;\n  initialize_device(&DAT_200709e4,0x4b00);\n  DAT_20070a3a = 2000;\n  DAT_200708c8 = get_current_time();\n  current_time = get_current_time();\n  DAT_200709e0 = current_time + 1000;\n  current_time = get_current_time();\n  DAT_20070a48 = current_time + 1000;\n  current_time = get_current_time();\n  DAT_20070934 = current_time + 1000;\n  current_time = get_current_time();\n  DAT_200708c0 = current_time + 1000;\n  DAT_20070948 = 0;\n  if (DAT_200708b8 == 0) {\n    trigger_software_interrupt(0x3f);\n    return 1;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_and_configure_device_000804a8",
            "entrypoint": "0x000804a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000804a8": "initialize_and_configure_device_000804a8",
                "digitalWrite": "set_pin_state",
                "iVar1": "current_time",
                "initialize_device_00080164": "initialize_device",
                "millis": "get_current_time",
                "pinMode": "configure_pin_mode",
                "software_interrupt": "trigger_software_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000805d0": {
            "additional_data": {
                "DAT_200708bc": {
                    "result2": 1
                },
                "DAT_200708c0": {
                    "timer": 1
                },
                "DAT_200708c4": {
                    "temp_float5": 1,
                    "temp_float6": 1
                },
                "DAT_200708c8": {
                    "prev_millis": 1,
                    "previous_millis": 1
                },
                "DAT_200708ce": {
                    "value4": 1
                },
                "DAT_200708d0": {
                    "value5": 1
                },
                "DAT_200708d8": {
                    "value6": 1
                },
                "DAT_200708da": {
                    "value7": 1
                },
                "DAT_200708dc": {
                    "value8": 1
                },
                "DAT_200708de": {
                    "value9": 1
                },
                "DAT_200708e4": {
                    "value10": 1
                },
                "DAT_200708e8": {
                    "value11": 1
                },
                "DAT_200708ea": {
                    "value12": 1
                },
                "DAT_200708f6": {
                    "sensor_data15": 1
                },
                "DAT_20070902": {
                    "result3": 1
                },
                "DAT_20070904": {
                    "result4": 1
                },
                "DAT_20070906": {
                    "value20": 1
                },
                "DAT_2007090c": {
                    "value16": 1
                },
                "DAT_20070910": {
                    "int_value1": 1,
                    "sensor_data12": 1
                },
                "DAT_20070914": {
                    "temp_float8": 1
                },
                "DAT_20070918": {
                    "flag": 1
                },
                "DAT_2007091c": {
                    "float_value1": 1,
                    "sensor_data13": 1
                },
                "DAT_20070920": {
                    "sensor_data11": 1,
                    "value18": 1
                },
                "DAT_20070924": {
                    "sensor_data8": 1,
                    "value13": 1
                },
                "DAT_20070928": {
                    "sensor_data9": 1,
                    "value14": 1
                },
                "DAT_2007092c": {
                    "counter": 1,
                    "sensor_data14": 1
                },
                "DAT_20070930": {
                    "temp_float7": 1
                },
                "DAT_20070938": {
                    "sensor_data10": 1,
                    "value19": 1
                },
                "DAT_2007093c": {
                    "bool1": 1
                },
                "DAT_20070940": {
                    "sensor_data1": 1
                },
                "DAT_20070944": {
                    "sensor_data2": 1
                },
                "DAT_20070948": {
                    "data_state": 1,
                    "state": 1
                },
                "DAT_2007094c": {
                    "sensor_data4": 1,
                    "temp_float6": 1
                },
                "DAT_20070950": {
                    "value15": 1
                },
                "DAT_20070960": {
                    "value17": 1
                },
                "DAT_20070964": {
                    "prev_value17": 1
                },
                "DAT_20070968": {
                    "new_value17": 1
                },
                "DAT_2007096c": {
                    "temp_float9": 2
                },
                "DAT_20070970": {
                    "sensor_data7": 1,
                    "update_interval": 1
                },
                "DAT_20070974": {
                    "sensor_data6": 1
                },
                "DAT_20070978": {
                    "result1": 1
                },
                "DAT_20070980": {
                    "param2_query1": 1
                },
                "DAT_20070984": {
                    "param3_query1": 1
                },
                "DAT_20070988": {
                    "query1": 1
                },
                "DAT_20070994": {
                    "query2": 1
                },
                "DAT_20070998": {
                    "param2_query2": 1,
                    "query3": 1
                },
                "DAT_2007099c": {
                    "param3_query2": 1,
                    "query4": 1
                },
                "DAT_200709a0": {
                    "query5": 1
                },
                "DAT_200709ac": {
                    "query8": 1
                },
                "DAT_200709b0": {
                    "query6": 1
                },
                "DAT_200709b4": {
                    "query7": 1
                },
                "DAT_200709c4": {
                    "sensor_data5": 1,
                    "temp_float7": 1
                },
                "DAT_200709c8": {
                    "query9": 1,
                    "temp_float5": 1
                },
                "DAT_200709cc": {
                    "control_flag": 1
                },
                "DAT_200709e0": {
                    "update_interval": 1,
                    "update_threshold": 1
                },
                "DAT_200709e4": {
                    "sensor_data": 2
                },
                "DAT_200709eb": {
                    "is_new_data": 1,
                    "sensor_data_is_valid": 1
                },
                "DAT_20070a4c": {
                    "sensor_data3": 1,
                    "temp_float8": 1
                },
                "FUN_000802da": {
                    "calculate_difference": 4,
                    "get_data": 1,
                    "process_command": 1,
                    "process_input": 1,
                    "process_query": 1
                },
                "FUN_0008043e": {
                    "calculate_value": 1,
                    "convert_to_int": 1,
                    "get_value": 1,
                    "interpret_data": 1,
                    "process_data2": 1,
                    "process_data3": 1,
                    "process_internal": 1,
                    "retrieve_data": 1
                },
                "FUN_000805d0": {
                    "calculate_sensor_data": 1,
                    "check_state": 1,
                    "execute_control_loop": 1,
                    "process_data": 9,
                    "update_data": 3,
                    "update_data_and_query": 1,
                    "update_sensor_data": 8,
                    "update_sensor_readings": 1,
                    "update_state": 1,
                    "update_system_status": 1
                },
                "FUN_00081730": {
                    "query": 1,
                    "query_data2": 3,
                    "query_device2": 1,
                    "query_sensor_v2": 1,
                    "scale_value2": 1,
                    "send_command": 1
                },
                "FUN_00081734": {
                    "query": 1,
                    "query_data": 1,
                    "query_data1": 2,
                    "query_device": 1,
                    "query_device1": 1,
                    "query_sensor": 1,
                    "scale_value": 1
                },
                "FUN_00081894": {
                    "calculate_difference2": 1,
                    "calculate_value": 1,
                    "calculate_value2": 2,
                    "filter_value": 1,
                    "poll": 1,
                    "poll_sensor": 1,
                    "process_data2": 1
                },
                "FUN_0008189c": {
                    "calculate_average": 1,
                    "calculate_difference3": 1,
                    "calculate_value3": 2,
                    "filter_value3": 1,
                    "get_millis": 1,
                    "process_data4": 1,
                    "reset_sensor_values": 1
                },
                "FUN_00081944": {
                    "filter_value2": 1,
                    "query": 1,
                    "query_data3": 3,
                    "query_device3": 1,
                    "query_sensor_v3": 1,
                    "send_data": 1
                },
                "FUN_00081c94": {
                    "check_condition": 1,
                    "check_condition1": 2,
                    "check_state": 1,
                    "is_condition_met": 1,
                    "is_query_device_ready": 1,
                    "is_sensor_ready": 1,
                    "is_value_within_range": 1
                },
                "FUN_00081ca8": {
                    "check_condition2": 3,
                    "check_state2": 1,
                    "is_condition_met": 1,
                    "is_query_completed": 1,
                    "is_sensor_value_zero": 1,
                    "is_value_within_range2": 1
                },
                "FUN_00081cd0": {
                    "calculate_checksum": 1,
                    "calculate_difference": 1,
                    "calculate_value1": 2,
                    "get_millis": 2,
                    "normalize_value": 1,
                    "process_data1": 1
                },
                "FUN_00081d1c": {
                    "calculate_difference": 1,
                    "calculate_difference4": 1,
                    "calculate_value4": 2,
                    "get_millis": 1,
                    "normalize_value2": 1,
                    "process_data5": 1,
                    "update_sensor_values": 1
                },
                "_DAT_2007097c": {
                    "query1": 1
                },
                "_DAT_20070994": {
                    "query2": 1
                },
                "iVar6": {
                    "current_millis": 2,
                    "elapsed_time": 1,
                    "temp": 1,
                    "temp5": 1,
                    "temp_int": 3,
                    "temp_int1": 1,
                    "temp_var": 4,
                    "temp_var1": 1,
                    "temp_var5": 5,
                    "temp_variable": 1,
                    "time_diff": 1,
                    "var6": 1
                },
                "param_1": {
                    "current_state": 1,
                    "data1": 1,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_state": 1,
                    "millis": 4,
                    "millis_count": 2,
                    "millis_elapsed": 1,
                    "millis_val": 1,
                    "millis_value": 2,
                    "sensor_data": 3
                },
                "param_2": {
                    "current_data": 1,
                    "data1": 1,
                    "data2": 1,
                    "input2": 1,
                    "input_param2": 1,
                    "param2": 4,
                    "poll_count": 1,
                    "previous_millis": 1,
                    "previous_time": 1,
                    "query_param_2": 1,
                    "state_var1": 1,
                    "timeout": 1,
                    "val1": 1,
                    "value1": 4
                },
                "param_3": {
                    "current_time": 1,
                    "data2": 1,
                    "data3": 1,
                    "input3": 1,
                    "input_param3": 1,
                    "param3": 4,
                    "parameter": 1,
                    "pin": 1,
                    "previous_data": 1,
                    "query_count": 1,
                    "query_param_3": 1,
                    "state_var2": 1,
                    "val2": 1,
                    "value2": 4
                },
                "param_4": {
                    "additional_data": 1,
                    "buffer": 1,
                    "data": 1,
                    "data3": 1,
                    "data4": 1,
                    "input4": 1,
                    "input_param4": 1,
                    "interval": 1,
                    "output_data": 1,
                    "param4": 4,
                    "query_param_4": 1,
                    "query_result": 1,
                    "result": 1,
                    "val3": 1,
                    "value3": 3
                },
                "puVar7": {
                    "p_output": 1,
                    "pointer1": 4,
                    "pointer_data": 1,
                    "pointer_var": 2,
                    "pointer_variable": 1,
                    "poll_data": 1,
                    "ptr": 1,
                    "ptr1": 1,
                    "ptr_temp": 1,
                    "ptr_value1": 1,
                    "ptr_var1": 3,
                    "ptr_var7": 1,
                    "ptr_var_1": 1,
                    "temp_ptr": 1,
                    "temp_ptr1": 1,
                    "uint_ptr": 1
                },
                "puVar8": {
                    "float_ptr": 1,
                    "p_query": 1,
                    "pointer2": 4,
                    "pointer_data2": 1,
                    "pointer_var2": 2,
                    "pointer_variable2": 1,
                    "ptr2": 2,
                    "ptr_query": 1,
                    "ptr_value2": 1,
                    "ptr_var2": 3,
                    "ptr_var8": 1,
                    "ptr_var_2": 1,
                    "query_data": 1,
                    "temp_ptr2": 2
                },
                "uVar1": {
                    "current_millis": 8,
                    "current_milliseconds": 1,
                    "current_time": 13,
                    "millis_val": 1
                },
                "uVar2": {
                    "float1": 1,
                    "float_val1": 2,
                    "float_value1": 2,
                    "previous_update": 1,
                    "result1": 1,
                    "s_float1": 1,
                    "sensor_data1": 1,
                    "temp1": 1,
                    "temp_calculation1": 1,
                    "temp_float": 1,
                    "temp_float1": 2,
                    "temp_var1": 5,
                    "var1": 1,
                    "var2": 2
                },
                "uVar3": {
                    "f_temp1": 1,
                    "float2": 1,
                    "float_diff1": 1,
                    "float_val2": 1,
                    "float_value2": 1,
                    "read_interval": 1,
                    "result2": 1,
                    "sensor_data2": 1,
                    "temp2": 1,
                    "temp_calculation2": 1,
                    "temp_float1": 1,
                    "temp_float2": 3,
                    "temp_var2": 5,
                    "var2": 1,
                    "var3": 2
                },
                "uVar4": {
                    "duty_cycle": 1,
                    "f_temp2": 1,
                    "float3": 1,
                    "float_val2": 1,
                    "float_val3": 1,
                    "float_value3": 1,
                    "result3": 1,
                    "result_float1": 1,
                    "sensor_data3": 1,
                    "temp3": 1,
                    "temp_calculation3": 1,
                    "temp_float3": 3,
                    "temp_var3": 5,
                    "var3": 1,
                    "var4": 2
                },
                "uVar5": {
                    "f_temp3": 1,
                    "float4": 1,
                    "float_result": 1,
                    "float_val4": 1,
                    "float_value4": 1,
                    "output": 1,
                    "result4": 1,
                    "result_float2": 1,
                    "sensor_data4": 1,
                    "temp4": 1,
                    "temp_calculation4": 1,
                    "temp_float4": 3,
                    "temp_var4": 5,
                    "var4": 1,
                    "var5": 2
                }
            },
            "called": [
                "FUN_00081208",
                "FUN_000802da",
                "FUN_00081cd0",
                "FUN_00081894",
                "FUN_00081734",
                "FUN_00081c94",
                "FUN_00081730",
                "FUN_00081944",
                "FUN_0008043e",
                "FUN_0008189c",
                "FUN_00081d1c",
                "FUN_00081ca8"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid update_sensor_data_000805d0(void)\n\n{\n  uint current_time;\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  int temp_var5;\n  uint *pointer1;\n  undefined4 *pointer2;\n  \n  switch(DAT_20070948) {\n  case '\\0':\n    current_time = millis();\n    if (DAT_200708c8 < current_time) goto LAB_000806ca;\n    break;\n  case '\\x01':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_2007097c,DAT_20070980,DAT_20070984);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070940 = (uint)DAT_200708ce;\n      DAT_20070944 = (uint)DAT_200708d0;\n      DAT_20070a4c = __floatunsisf(DAT_200708d8);\n      DAT_2007094c = __floatsisf(DAT_200708da / 10);\n      DAT_200709c4 = __floatunsisf(DAT_200708dc);\n      DAT_20070974 = (uint)DAT_200708e4;\n      DAT_20070970 = (uint)DAT_200708de;\n      DAT_20070924 = (uint)DAT_200708e8;\n      DAT_20070928 = (uint)DAT_200708ea;\n    }\n    break;\n  case '\\x02':\n  case '\\x04':\n  case '\\x06':\n  case '\\b':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n    }\n    break;\n  case '\\x03':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_20070994,DAT_20070998,DAT_2007099c);\n      DAT_20070948 = DAT_20070948 + '\\x01';\n      DAT_200708c8 = millis();\n      DAT_20070938 = (uint)DAT_20070908;\n      DAT_20070920 = (uint)DAT_20070906;\n    }\n    break;\n  case '\\x05':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      pointer2 = (undefined4 *)&DAT_20070988;\nLAB_000806c4:\n      query(&DAT_200709e4,*pointer2,pointer2[1],pointer2[2]);\n      goto LAB_000806ca;\n    }\n    break;\n  case '\\a':\n    poll(&DAT_200709e4);\n    if ((DAT_20070918 == 1) && (DAT_200709eb == '\\0')) {\n      DAT_20070906 = 0;\n      pointer2 = (undefined4 *)&DAT_200709a0;\n      DAT_20070918 = 0;\n      goto LAB_000806c4;\n    }\nLAB_000806ca:\n    DAT_20070948 = DAT_20070948 + '\\x01';\n    break;\n  case '\\t':\n    poll(&DAT_200709e4);\n    if (DAT_200709eb == '\\0') {\n      query(&DAT_200709e4,_DAT_200709ac,DAT_200709b0,DAT_200709b4);\n      DAT_200708c8 = millis();\n    }\n    DAT_20070948 = '\\0';\n  }\n  DAT_20070978 = DAT_20070924 - DAT_20070950;\n  if (DAT_20070978 < 0) {\n    DAT_20070978 = DAT_20070978 + 0x3c;\n  }\n  DAT_200708bc = DAT_20070928 - DAT_2007090c;\n  if ((int)DAT_200708bc < 0) {\n    DAT_20070978 = DAT_20070978 + -1;\n    DAT_200708bc = DAT_200708bc + 0x3c;\n  }\n  DAT_20070902 = (undefined2)DAT_20070978;\n  DAT_20070904 = (undefined2)DAT_200708bc;\n  if ((DAT_20070978 == 0) && (DAT_200708bc == 0)) {\n    DAT_20070918 = 1;\n    DAT_20070950 = DAT_200708bc;\n    DAT_2007090c = DAT_200708bc;\n  }\n  if (DAT_20070964 == DAT_20070924) {\n    DAT_20070968 = 1 - DAT_20070928;\n    if (1 < DAT_20070928) {\n      DAT_20070968 = 0;\n    }\n    if (DAT_20070968 != 0) goto LAB_00080a08;\n  }\n  else {\nLAB_00080a08:\n    DAT_20070968 = DAT_20070928;\n    DAT_20070950 = 0;\n    DAT_2007090c = 0;\n    DAT_20070960 = 0;\n    DAT_20070964 = DAT_20070924;\n  }\n  if (DAT_20070920 == 0) {\n    DAT_20070950 = DAT_20070920;\n    DAT_2007090c = DAT_20070920;\n    pointer1 = (uint *)&DAT_20070960;\nLAB_000808f2:\n    *pointer1 = DAT_2007090c;\n  }\n  else {\n    if (DAT_20070920 != 1) goto LAB_000808f4;\n    if ((DAT_20070960 < (int)DAT_20070938) && (current_time = millis(), DAT_200708c0 < current_time)) {\n      DAT_20070960 = DAT_20070960 + 1;\n      temp_var5 = millis();\n      DAT_200708c0 = temp_var5 + 1000;\n    }\n    if (DAT_20070960 < (int)DAT_20070938) goto LAB_000808f4;\n    DAT_20070960 = DAT_20070938 + 1;\n    if ((int)DAT_20070950 < (int)DAT_20070924) {\n      current_time = millis();\n      if (DAT_200708c0 < current_time) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var5 = millis();\n        DAT_200708c0 = temp_var5 + 1000;\n      }\n    }\n    else {\n      if (DAT_20070950 != DAT_20070924) goto LAB_000808f4;\n      if ((int)DAT_20070928 < (int)DAT_2007090c) {\n        pointer1 = &DAT_20070950;\n        DAT_2007090c = 0;\n        goto LAB_000808f2;\n      }\n      current_time = millis();\n      if (DAT_200708c0 < current_time) {\n        DAT_2007090c = DAT_2007090c + 1;\n        temp_var5 = millis();\n        DAT_200708c0 = temp_var5 + 1000;\n      }\n    }\n    if (0x3b < (int)DAT_2007090c) {\n      DAT_2007090c = 0;\n      DAT_20070950 = DAT_20070950 + 1;\n    }\n  }\nLAB_000808f4:\n  current_time = millis();\n  if (DAT_200709e0 < current_time) {\n    temp_var1 = __floatsisf(DAT_20070940);\n    temp_var2 = __aeabi_fsub(temp_var1,DAT_200709c8);\n    temp_var1 = DAT_200708c4;\n    DAT_20070930 = temp_var2;\n    temp_var3 = __addsf3(temp_var2,DAT_200708c4);\n    temp_var3 = __aeabi_fmul(temp_var3,DAT_2007094c);\n    temp_var3 = __addsf3(temp_var3,DAT_20070914);\n    DAT_2007094c = temp_var3;\n    temp_var1 = __aeabi_fsub(temp_var2,temp_var1);\n    temp_var1 = __aeabi_fmul(temp_var1,DAT_200709c4);\n    temp_var1 = __aeabi_fsub(temp_var1,DAT_2007096c);\n    DAT_200709c4 = temp_var1;\n    temp_var4 = __aeabi_fmul(temp_var2,DAT_20070a4c);\n    temp_var4 = __addsf3(temp_var4,temp_var3);\n    __addsf3(temp_var4,temp_var1);\n    DAT_20070910 = __aeabi_f2iz();\n    DAT_2007091c = __floatsisf();\n    DAT_2007092c = 0;\n    DAT_200708c4 = temp_var2;\n    DAT_20070914 = temp_var3;\n    DAT_2007096c = temp_var1;\n    temp_var5 = millis();\n    DAT_200709e0 = temp_var5 + DAT_20070970;\n  }\n  temp_var1 = __floatsisf(DAT_20070970);\n  temp_var5 = __aeabi_fcmpge(DAT_2007091c,temp_var1);\n  if (temp_var5 != 0) {\n    DAT_2007091c = temp_var1;\n  }\n  temp_var5 = __aeabi_fcmple(DAT_2007091c,0);\n  if (temp_var5 != 0) {\n    DAT_2007091c = 0;\n  }\n  DAT_200708f6 = __fixunssfsi(DAT_2007091c);\n  DAT_2007092c = DAT_2007092c + 1;\n  DAT_2007093c = DAT_200709cc & 1 ^ 1;\n  return;\n}\n\n",
            "current_name": "update_sensor_data_000805d0",
            "entrypoint": "0x000805d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000805d0": "update_sensor_data_000805d0",
                "iVar6": "temp_var5",
                "puVar7": "pointer1",
                "puVar8": "pointer2",
                "uVar1": "current_time",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "temp_var3",
                "uVar5": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080a68": {
            "additional_data": {
                "DAT_20070954": {
                    "empty_string": 7,
                    "str_buffer": 1,
                    "string_data": 1
                },
                "DAT_200709e8": {
                    "count1": 1,
                    "counter": 1,
                    "counter1": 1,
                    "flag1": 1,
                    "var1": 1,
                    "variable1": 5
                },
                "DAT_200709e9": {
                    "count2": 1,
                    "counter2": 1,
                    "flag2": 1,
                    "index": 1,
                    "var2": 1,
                    "variable2": 5
                },
                "DAT_200709ea": {
                    "constant": 1,
                    "constant_value": 1,
                    "default_filter": 1,
                    "max_value": 1,
                    "var3": 1,
                    "variable3": 5
                },
                "DAT_20070a3a": {
                    "delay": 1,
                    "max_value": 1,
                    "timeout": 1,
                    "timeout_value": 1,
                    "var4": 1,
                    "variable4": 5
                },
                "FUN_00080a68": {
                    "initialize": 3,
                    "initialize_data": 19,
                    "initialize_function": 8,
                    "initialize_function_data": 1
                },
                "FUN_00081682": {
                    "allocate_memory": 9,
                    "copy_array": 1,
                    "copy_data": 1,
                    "filter_data": 1,
                    "initialize_array": 1,
                    "modify_data": 5,
                    "perform_action": 1,
                    "process_data": 3,
                    "register_cleanup": 1,
                    "sub_function2": 1,
                    "update_data": 1,
                    "update_parameters": 1
                },
                "FUN_00081d5c": {
                    "perform_action": 1,
                    "perform_operation": 3,
                    "process_data": 19,
                    "set_data": 1,
                    "set_memory": 1,
                    "sub_function1": 1
                },
                "param_1": {
                    "arg1": 1,
                    "array": 1,
                    "array_pointer": 1,
                    "data": 2,
                    "data1": 2,
                    "data_buffer": 1,
                    "data_pointer": 4,
                    "data_ptr": 1,
                    "first_parameter": 1,
                    "handler": 1,
                    "input_data": 1,
                    "input_param1": 1,
                    "memory_pointer": 2,
                    "output": 1,
                    "output_ptr": 1,
                    "param1": 2,
                    "parameter_array": 1,
                    "source_array": 1
                },
                "param_2": {
                    "arg2": 1,
                    "array_size": 1,
                    "buffer_size": 1,
                    "count": 1,
                    "data2": 2,
                    "destination_array_size": 1,
                    "flag": 1,
                    "input_param2": 1,
                    "length": 1,
                    "memory_size": 1,
                    "num_elements": 1,
                    "output_size": 1,
                    "param1": 1,
                    "param2": 2,
                    "priority": 1,
                    "second_parameter": 1,
                    "size": 7
                },
                "param_3": {
                    "arg3": 1,
                    "count": 1,
                    "data3": 3,
                    "filter_value": 1,
                    "flag": 1,
                    "format": 1,
                    "input3": 1,
                    "input_arg3": 1,
                    "input_param3": 1,
                    "param2": 1,
                    "param3": 1,
                    "start_index": 1,
                    "third_parameter": 3,
                    "timeout": 1,
                    "value": 6,
                    "variable3": 1
                },
                "undefined4": {
                    "result": 1
                }
            },
            "called": [
                "FUN_00081d5c",
                "FUN_00081682"
            ],
            "calling": [],
            "code": "\nvoid initialize_function_data_00080a68(void)\n\n{\n  String(&DAT_20070954,\"\");\n  __aeabi_atexit(&DAT_20070954,0x815ff,0x2007002c);\n  DAT_200709e8 = 0;\n  DAT_200709e9 = 0;\n  DAT_200709ea = 6;\n  DAT_20070a3a = 1000;\n  return;\n}\n\n",
            "current_name": "initialize_function_data_00080a68",
            "entrypoint": "0x00080a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080a68": "initialize_function_data_00080a68"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080aa8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aa8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aa8",
            "entrypoint": "0x00080aa8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aa8": "FUNC_00080aa8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ab8": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080ab8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080ab8",
            "entrypoint": "0x00080ab8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080ab8": "FUNC_00080ab8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080aba": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080aba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080aba",
            "entrypoint": "0x00080aba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080aba": "FUNC_00080aba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080abc": {
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nvoid FUNC_00080abc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00080abc",
            "entrypoint": "0x00080abc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00080abc": "FUNC_00080abc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00080ae4": {
            "additional_data": {
                "DAT_e000ed23": {
                    "constant_value": 5,
                    "data_value": 1,
                    "default_dat": 1,
                    "register_val2": 1,
                    "some_data": 1,
                    "some_value": 1
                },
                "DIGITAL_PIN_1": {
                    "pin1": 1
                },
                "DIGITAL_PIN_2": {
                    "pin2": 1
                },
                "DIGITAL_PIN_3": {
                    "pin3": 1
                },
                "DIGITAL_PIN_4": {
                    "pin4": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "elf_rel_array": 4,
                    "elf_relocation_array": 2,
                    "elf_relocations": 1,
                    "elf_relocations_array": 1,
                    "symbol_table": 1
                },
                "FUN_00080ae4": {
                    "configure_system": 1,
                    "initialize_hardware": 1,
                    "initialize_system": 28,
                    "initialize_system_components": 1
                },
                "FUN_00080da0": {
                    "adc_init": 2,
                    "configure_action": 1,
                    "configure_adc": 3,
                    "initialize_adc": 3,
                    "initialize_digital_input": 1,
                    "pio_configure": 1,
                    "sub_function_three": 1
                },
                "FUN_00080e18": {
                    "calculate_offset": 2,
                    "configure_digital": 1,
                    "configure_digital_write": 2,
                    "configure_pio": 2,
                    "digital_write": 1,
                    "get_relocation_offset": 1,
                    "perform_action": 1,
                    "set_digital_output": 1,
                    "sub_function_two": 1
                },
                "FUN_00080e9c": {
                    "custom2": 1,
                    "disable_all_adc_channels": 2,
                    "disable_interrupt": 1,
                    "function_b": 1,
                    "initialize": 1,
                    "initialize_adc": 2,
                    "initialize_digital_pin": 1,
                    "initialize_peripheral": 1,
                    "return": 1,
                    "sub_function_ten": 1
                },
                "FUN_00080f9c": {
                    "configure_adc": 2,
                    "configure_digital_write": 3,
                    "configure_function": 1,
                    "configure_gpio": 1,
                    "do_something": 1,
                    "initialize_adc": 1,
                    "initialize_periph": 1,
                    "initialize_peripherals": 1,
                    "sub_function_one": 1
                },
                "FUN_00081034": {
                    "adc_disable_all_channel": 1,
                    "configure_adc_timing": 1,
                    "configure_pio": 1,
                    "configure_timing": 1,
                    "disable_adc_channel": 1,
                    "disable_interrupt": 1,
                    "disable_output": 1,
                    "enable_adc": 1,
                    "enable_digital_write": 1,
                    "pmc_enable_periph_clk": 1,
                    "process_data": 1,
                    "sub_function_eight": 1
                },
                "FUN_00081042": {
                    "adc_configure_timing": 1,
                    "configure_adc_channel": 2,
                    "configure_adc_timing": 3,
                    "configure_adc_trigger": 1,
                    "configure_timing": 1,
                    "configure_trigger": 2,
                    "process_data": 1,
                    "sub_function_five": 1
                },
                "FUN_00081066": {
                    "adc_init": 1,
                    "configure_adc": 1,
                    "configure_adc_timing": 1,
                    "disable_adc_interrupt": 3,
                    "disable_all_channel": 1,
                    "disable_interrupt": 2,
                    "disable_interrupts": 1,
                    "process_data": 1,
                    "sub_function_four": 1
                },
                "FUN_0008106e": {
                    "adc_disable_channel": 1,
                    "adc_disable_interrupt": 1,
                    "configure_adc_channel": 1,
                    "configure_adc_trigger": 1,
                    "configure_pio": 1,
                    "disable_all_adc_channels": 2,
                    "disable_all_channel": 1,
                    "disable_interrupt": 1,
                    "do_something_else": 1,
                    "process_action": 1,
                    "sub_function_seven": 1
                },
                "FUN_00081318": {
                    "adc_configure_trigger": 1,
                    "adc_disable_interrupt": 1,
                    "configure_adc_channel": 1,
                    "configure_adc_interrupt": 1,
                    "configure_adc_timing": 1,
                    "configure_adc_trigger": 2,
                    "configure_data": 1,
                    "configure_pio": 1,
                    "configure_trigger": 1,
                    "disable_channels": 1,
                    "sub_function_six": 1
                },
                "FUN_00081d7c": {
                    "custom1": 1,
                    "disable_all_channel": 1,
                    "disable_interrupt": 1,
                    "enable_adc_periph_clk": 1,
                    "enable_clock": 1,
                    "enable_peri_clk": 1,
                    "enable_periph_clock": 2,
                    "enable_peripheral_clock": 2,
                    "function_a": 1,
                    "sub_function_nine": 1
                },
                "Iterator1": {
                    "i": 1
                },
                "Iterator2": {
                    "j": 1
                },
                "PIO_Configure": {
                    "configure_pio": 11
                },
                "SystemInit": {
                    "initialize_hardware": 1,
                    "initialize_microcontroller": 1,
                    "initialize_system": 5,
                    "initialize_system_hardware": 1,
                    "initialize_system_modules": 2,
                    "system_initialization": 1
                },
                "_DAT_400e0e00": {
                    "configure_pio_param1": 1,
                    "pio_device1": 1
                },
                "_DAT_400e0ea0": {
                    "adc_register": 1,
                    "constant_value1": 1,
                    "data1": 1,
                    "data3": 1,
                    "data_register1": 1,
                    "device_flag1": 1,
                    "digital_output1": 1,
                    "gpio_state": 1,
                    "register1": 2,
                    "register_val5": 1
                },
                "_DAT_400e1000": {
                    "configure_pio_param3": 1,
                    "pio_device3": 1
                },
                "_DAT_400e10a0": {
                    "adc_register": 1,
                    "constant_value2": 1,
                    "data2": 1,
                    "data4": 1,
                    "data_register2": 1,
                    "device_flag2": 1,
                    "digital_output2": 1,
                    "gpio_state": 1,
                    "register2": 2,
                    "register_val6": 1
                },
                "_DAT_400e12a0": {
                    "adc_register": 1,
                    "constant_value3": 1,
                    "data3": 1,
                    "data5": 1,
                    "data_register3": 1,
                    "device_flag3": 1,
                    "digital_output3": 1,
                    "gpio_state": 1,
                    "register3": 2,
                    "register_val7": 1
                },
                "_DAT_400e1400": {
                    "configure_pio_param2": 1,
                    "pio_device2": 1
                },
                "_DAT_400e14a0": {
                    "adc_register": 1,
                    "constant_value4": 1,
                    "data4": 1,
                    "data6": 1,
                    "data_register4": 1,
                    "device_flag4": 1,
                    "digital_output4": 1,
                    "gpio_state": 1,
                    "register4": 2,
                    "register_val8": 1
                },
                "_DAT_e000e010": {
                    "data2": 1,
                    "initialize_value": 1,
                    "limit": 1,
                    "max_value": 1,
                    "register_val4": 1,
                    "seven": 1,
                    "some_register2": 1,
                    "system_flag": 1,
                    "value2": 1,
                    "variable2": 2
                },
                "_DAT_e000e014": {
                    "address_offset": 1,
                    "counter_value": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "register_val1": 1,
                    "system_offset": 3,
                    "timer_offset": 2
                },
                "_DAT_e000e018": {
                    "counter": 1,
                    "data1": 1,
                    "initialize_value": 2,
                    "register_val3": 1,
                    "some_register1": 1,
                    "system_value": 1,
                    "value1": 1,
                    "variable1": 2,
                    "zero": 1
                },
                "__libc_init_array": {
                    "init_libc_array": 1,
                    "initialize_libc": 2,
                    "initialize_libc_array": 4,
                    "initialize_libraries": 2,
                    "initialize_library_array": 2
                },
                "adc_configure_timing": {
                    "configure_adc_timing": 11
                },
                "adc_configure_trigger": {
                    "configure_adc": 1,
                    "configure_adc_trigger": 10
                },
                "adc_disable_all_channel": {
                    "disable_all_adc_channel": 1,
                    "disable_all_adc_channels": 10
                },
                "adc_disable_interrupt": {
                    "disable_adc_interrupt": 11
                },
                "adc_init": {
                    "initialize_adc": 11
                },
                "digitalWrite": {
                    "set_digital_output": 4,
                    "set_digital_pin_state": 1,
                    "set_pin_level": 1,
                    "set_pin_state": 5
                },
                "iVar1": {
                    "count": 3,
                    "counter": 3,
                    "i": 1,
                    "index": 6,
                    "loop_index": 1
                },
                "iVar2": {
                    "j": 1,
                    "next_count": 2,
                    "next_counter": 3,
                    "next_index": 8
                },
                "param_1": {
                    "array_pointer": 1,
                    "param1": 1,
                    "param_array": 1,
                    "parameter1": 1,
                    "ptr_array": 1,
                    "timer_index": 1
                },
                "param_2": {
                    "array_size": 1,
                    "param2": 2,
                    "param_offset": 1,
                    "parameter2": 1,
                    "timer_duration": 1
                },
                "param_3": {
                    "constant_value": 1,
                    "offset": 1,
                    "param3": 2,
                    "param_value1": 1,
                    "parameter3": 1
                },
                "param_4": {
                    "adc_offset": 1,
                    "constant": 1,
                    "param4": 2,
                    "param_value2": 1,
                    "parameter4": 1
                },
                "pmc_enable_periph_clk": {
                    "enable_clock": 1,
                    "enable_periph_clk": 1,
                    "enable_periph_clock": 1,
                    "enable_peripheral_clock": 7,
                    "pmc_enable_peripheral_clock": 1
                },
                "r_offset": {
                    "relocation_offset": 1
                }
            },
            "called": [
                "FUN_00080f9c",
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_00081066",
                "FUN_00081042",
                "FUN_00081318",
                "FUN_0008106e",
                "FUN_00081034",
                "FUN_00081d7c",
                "FUN_00080e9c"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_system_components_00080ae4(void)\n\n{\n  int index;\n  int next_index;\n  \n  initialize_system();\n  _DAT_e000e014 = elf_rel_array[6].relocation_offset / 1000 - 1;\n  DAT_e000ed23 = 0xf0;\n  _DAT_e000e018 = 0;\n  _DAT_e000e010 = 7;\n  initialize_libc_array();\n  index = 0;\n  do {\n    next_index = index + 1;\n    set_pin_state(index,0);\n    index = next_index;\n  } while (next_index != 0x4f);\n  _DAT_400e0ea0 = 0xffffffff;\n  _DAT_400e10a0 = 0xffffffff;\n  _DAT_400e12a0 = 0xffffffff;\n  _DAT_400e14a0 = 0xffffffff;\n  configure_pio(0x400e0e00,1,0x300,0);\n  set_pin_state(0,1);\n  configure_pio(0x400e0e00,1,0xc00,0);\n  configure_pio(0x400e0e00,1,0x3000,0);\n  configure_pio(0x400e1400,2,0x30,0);\n  configure_pio(0x400e1000,1,0xc00,0);\n  configure_pio(0x400e0e00,1,3,0);\n  configure_pio(0x400e1000,1,0xc000,0);\n  enable_peripheral_clock(0x25);\n  initialize_adc(0x400c0000,elf_rel_array[6].relocation_offset,20000000,0xc);\n  configure_adc_timing(0x400c0000,0,0x300000,1);\n  configure_adc_trigger(0x400c0000,0,0);\n  disable_adc_interrupt(0x400c0000,0xffffffff);\n  disable_all_adc_channels(0x400c0000);\n  return;\n}\n\n",
            "current_name": "initialize_system_components_00080ae4",
            "entrypoint": "0x00080ae4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_rel_array",
                "FUN_00080ae4": "initialize_system_components_00080ae4",
                "PIO_Configure": "configure_pio",
                "SystemInit": "initialize_system",
                "__libc_init_array": "initialize_libc_array",
                "adc_configure_timing": "configure_adc_timing",
                "adc_configure_trigger": "configure_adc_trigger",
                "adc_disable_all_channel": "disable_all_adc_channels",
                "adc_disable_interrupt": "disable_adc_interrupt",
                "adc_init": "initialize_adc",
                "digitalWrite": "set_pin_state",
                "iVar1": "index",
                "iVar2": "next_index",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080c0c": {
            "additional_data": {
                "0x11": {
                    "usart_config1": 1,
                    "usart_config_param3": 1,
                    "usart_param1": 1
                },
                "0x12": {
                    "usart_config2": 1,
                    "usart_config_param3": 1,
                    "usart_param2": 1
                },
                "0x14": {
                    "usart_config3": 1,
                    "usart_config_param3": 1,
                    "usart_param3": 1
                },
                "0x40098000": {
                    "usart_base_address1": 1,
                    "usart_config_param1": 1,
                    "usart_port1": 1
                },
                "0x4009c000": {
                    "usart_base_address2": 1,
                    "usart_config_param1": 1,
                    "usart_port2": 1
                },
                "0x400a4000": {
                    "usart_base_address3": 1,
                    "usart_config_param1": 1,
                    "usart_port3": 1
                },
                "0x400e0800": {
                    "uart_base_address1": 1,
                    "uart_config_param1": 1,
                    "uart_port": 1
                },
                "8": {
                    "uart_config_param3": 1
                },
                "DAT_20070a50": {
                    "ring_buffer6": 2
                },
                "DAT_20070ad8": {
                    "ring_buffer2": 2
                },
                "DAT_20070b60": {
                    "uart_data1": 1,
                    "uart_object": 1
                },
                "DAT_20070b84": {
                    "ring_buffer1": 2
                },
                "DAT_20070c0c": {
                    "usart_data1": 1,
                    "usart_object1": 1
                },
                "DAT_20070c34": {
                    "usart_data2": 1,
                    "usart_object2": 1
                },
                "DAT_20070c5c": {
                    "usart_data3": 1,
                    "usart_object3": 1
                },
                "DAT_20070c84": {
                    "ring_buffer7": 2
                },
                "DAT_20070d0c": {
                    "ring_buffer8": 2
                },
                "DAT_20070de4": {
                    "ring_buffer3": 2
                },
                "DAT_20070e6c": {
                    "ring_buffer4": 2
                },
                "DAT_20070ef4": {
                    "ring_buffer5": 2
                },
                "FUN_00080c0c": {
                    "initialize_buffers": 1,
                    "initialize_communication": 20,
                    "initialize_hardware": 3,
                    "initialize_peripherals": 2,
                    "initialize_periphipherals": 1,
                    "initialize_serial_communication": 1,
                    "initialize_uar_tand_usart": 3
                },
                "FUN_000813a8": {
                    "calculate_checksum": 1,
                    "calculate_something": 3,
                    "calculate_value": 1,
                    "check_buffer": 1,
                    "check_condition": 1,
                    "check_status": 2,
                    "initialize_ring_buffer": 1,
                    "perform_operation": 1,
                    "process_data": 1,
                    "process_param": 2,
                    "process_param1": 1,
                    "process_parameter1": 1,
                    "process_something": 1,
                    "reverse_buffer": 1,
                    "reverse_bytes": 1,
                    "reverse_operation": 1,
                    "reverse_something": 2,
                    "reverse_unused": 1
                },
                "FUN_000814e4": {
                    "configure_uart": 5,
                    "configure_usart": 1,
                    "decode_uart_data": 1,
                    "do_something": 1,
                    "initialize_something": 1,
                    "initialize_uart": 2,
                    "perform_operation": 1,
                    "perform_something": 1,
                    "populate_buffer": 1,
                    "process_data": 9,
                    "process_parameter2": 1,
                    "reverse_undefined": 1
                },
                "FUN_000815d4": {
                    "configure_usart": 1,
                    "handle_data": 1,
                    "handle_response": 1,
                    "helper_function": 1,
                    "initialize_ring_buffer": 2,
                    "initialize_usart": 2,
                    "modify_data": 1,
                    "parse_data": 1,
                    "perform_operation": 1,
                    "process_data": 2,
                    "process_params": 2,
                    "process_something": 1,
                    "reverse_data": 2,
                    "reverse_something_else": 1,
                    "some_operation": 1,
                    "transform_data": 1,
                    "update_buffer": 1
                },
                "RingBuffer": {
                    "configure_ring_buffer": 1,
                    "create_ring_buffer": 4,
                    "init_ring_buffer": 1,
                    "initialize_ring_buffer": 14
                },
                "UARTClass": {
                    "create_uart_class": 1,
                    "init_uart": 1,
                    "initialize_uart": 12,
                    "initialize_uart_class": 6
                },
                "USARTClass": {
                    "create_usart_class": 1,
                    "initialize_usart": 12,
                    "initialize_usart_class": 6
                },
                "param_1": {
                    "arg1": 2,
                    "buffer_param1": 1,
                    "config_params": 1,
                    "data_param1": 1,
                    "data_ptr": 1,
                    "param1": 16,
                    "ring_buffer_config_param1": 1,
                    "ring_buffer_params": 1,
                    "undefined_1": 1,
                    "undefined_param1": 2,
                    "unused_param_1": 1,
                    "usart_config": 1,
                    "usart_param1": 2
                },
                "param_2": {
                    "arg2": 2,
                    "buffer_param2": 1,
                    "data_length": 1,
                    "data_param2": 1,
                    "param2": 17,
                    "param_2": 1,
                    "ring_buffer_config_param2": 1,
                    "ring_buffer_param2": 1,
                    "undefined_2": 1,
                    "undefined_param2": 2,
                    "unused_param_2": 1,
                    "usart_param2": 2
                },
                "param_3": {
                    "arg3": 2,
                    "buffer_param3": 1,
                    "param3": 18,
                    "param_3": 1,
                    "uart_config_param3": 1,
                    "uart_param3": 4,
                    "undefined_3": 1,
                    "undefined_param3": 2,
                    "unused_param_3": 1
                },
                "param_4": {
                    "arg4": 2,
                    "buffer_param4": 1,
                    "param4": 14,
                    "param_4": 1,
                    "uart_config_param4": 1,
                    "uart_param4": 4,
                    "undefined_param4": 1,
                    "unused_param_4": 1
                }
            },
            "called": [
                "FUN_000813a8",
                "FUN_000814e4",
                "FUN_000815d4"
            ],
            "calling": [],
            "code": "\nvoid initialize_serial_communication_00080c0c(undefined4 param1,undefined4 param2,undefined4 param3)\n\n{\n  initialize_ring_buffer(&DAT_20070b84);\n  initialize_ring_buffer(&DAT_20070ad8);\n  initialize_uart(&DAT_20070b60,0x400e0800,8,8,&DAT_20070b84,&DAT_20070ad8,param3);\n  initialize_ring_buffer(&DAT_20070de4);\n  initialize_ring_buffer(&DAT_20070e6c);\n  initialize_ring_buffer(&DAT_20070ef4);\n  initialize_ring_buffer(&DAT_20070a50);\n  initialize_ring_buffer(&DAT_20070c84);\n  initialize_ring_buffer(&DAT_20070d0c);\n  initialize_usart(&DAT_20070c0c,0x40098000,0x11,0x11,&DAT_20070de4,&DAT_20070a50);\n  initialize_usart(&DAT_20070c34,0x4009c000,0x12,0x12,&DAT_20070e6c,&DAT_20070c84);\n  initialize_usart(&DAT_20070c5c,0x400a4000,0x14,0x14,&DAT_20070ef4,&DAT_20070d0c);\n  return;\n}\n\n",
            "current_name": "initialize_serial_communication_00080c0c",
            "entrypoint": "0x00080c0c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080c0c": "initialize_serial_communication_00080c0c",
                "RingBuffer": "initialize_ring_buffer",
                "UARTClass": "initialize_uart",
                "USARTClass": "initialize_usart",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080ce0": {
            "additional_data": {
                "DAT_20070b60": {
                    "data_buffer1": 1
                },
                "DAT_20070c0c": {
                    "data_buffer2": 1
                },
                "DAT_20070c34": {
                    "data_buffer3": 1
                },
                "DAT_20070c5c": {
                    "data_buffer4": 1
                },
                "FUNC_00080aa8": {
                    "available": 2,
                    "function_e": 1,
                    "serial_event3": 10
                },
                "FUNC_00080ab8": {
                    "function_b": 1,
                    "serial_event1": 12
                },
                "FUNC_00080aba": {
                    "function_a": 1,
                    "serial_event": 11
                },
                "FUNC_00080abc": {
                    "function_d": 1,
                    "serial_event2": 10,
                    "serial_event3": 2
                },
                "FUNC_00080bbc": {
                    "serial_event2": 1
                },
                "FUN_00080aba": {
                    "serial_event": 1
                },
                "FUN_00080ce0": {
                    "check_and_handle_serial_events": 1,
                    "check_available_serial_events": 1,
                    "check_serial_events": 15,
                    "handle_serial_events": 2,
                    "process_serial_events": 12
                },
                "FUN_000813e4": {
                    "available_serial_event": 1,
                    "available_serial_events": 1,
                    "check_availability": 4,
                    "check_available": 2,
                    "function_c": 1,
                    "handle_serial_event": 1,
                    "process_data": 1,
                    "process_serial_event": 1,
                    "serial_event2": 1
                },
                "available": {
                    "check_availability": 7,
                    "is_available": 2,
                    "is_data_available": 2
                },
                "iVar1": {
                    "availability_check": 1,
                    "available_data": 1,
                    "is_available": 4,
                    "result": 4
                },
                "serialEvent": {
                    "handle_serial_event": 10,
                    "handle_serial_event1": 1,
                    "process_serial_event": 6,
                    "serial_event": 1
                },
                "serialEvent1": {
                    "handle_serial_event1": 10,
                    "handle_serial_event2": 1,
                    "process_serial_event1": 6,
                    "serial_event1": 1
                },
                "serialEvent2": {
                    "handle_serial_event2": 10,
                    "handle_serial_event3": 1,
                    "process_serial_event2": 6,
                    "serial_event2": 1
                },
                "serialEvent3": {
                    "handle_serial_event3": 10,
                    "handle_serial_event4": 1,
                    "process_serial_event3": 6,
                    "serial_event3": 1
                }
            },
            "called": [
                "FUN_00080aba",
                "FUN_00080ab8",
                "FUN_000813e4",
                "FUN_00080abc",
                "FUN_00080aa8"
            ],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid check_and_handle_serial_events_00080ce0(void)\n\n{\n  int is_available;\n  \n  is_available = check_availability(&DAT_20070b60);\n  if (is_available != 0) {\n    handle_serial_event();\n  }\n  is_available = check_availability(&DAT_20070c0c);\n  if (is_available != 0) {\n    handle_serial_event1();\n  }\n  is_available = check_availability(&DAT_20070c34);\n  if (is_available != 0) {\n    handle_serial_event2();\n  }\n  is_available = check_availability(&DAT_20070c5c);\n  if (is_available != 0) {\n    handle_serial_event3();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_handle_serial_events_00080ce0",
            "entrypoint": "0x00080ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080ce0": "check_and_handle_serial_events_00080ce0",
                "available": "check_availability",
                "iVar1": "is_available",
                "serialEvent": "handle_serial_event",
                "serialEvent1": "handle_serial_event1",
                "serialEvent2": "handle_serial_event2",
                "serialEvent3": "handle_serial_event3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d2e": {
            "additional_data": {
                "FUN_00080d2e": {
                    "modify_permissions": 1,
                    "set_parameter_value": 1,
                    "update_config_value": 1,
                    "update_configuration": 1,
                    "update_data": 4,
                    "update_memory": 1,
                    "update_memory_registers": 1,
                    "update_memory_value": 1,
                    "update_param_value": 1,
                    "update_parameter": 9,
                    "update_parameter_value": 5,
                    "update_value": 5
                },
                "param_1": {
                    "base_address": 15,
                    "config": 1,
                    "configuration": 1,
                    "data_address": 2,
                    "data_pointer": 3,
                    "device": 1,
                    "memory_address": 2,
                    "object_address": 4,
                    "object_pointer": 1,
                    "param_address": 1
                },
                "param_2": {
                    "action_type": 1,
                    "case_type": 1,
                    "case_value": 1,
                    "command": 1,
                    "command_type": 1,
                    "config_flag": 1,
                    "config_type": 1,
                    "flag": 1,
                    "mode": 2,
                    "operation": 7,
                    "operation_type": 7,
                    "option": 4,
                    "option_code": 1,
                    "param_type": 1,
                    "parameter_type": 1
                },
                "param_3": {
                    "new_param_value": 1,
                    "new_value": 20,
                    "permission_flag": 1,
                    "value": 9
                },
                "switchD_00080d34_caseD_6": {
                    "case_default": 1
                },
                "uVar1": {
                    "new_parameter": 1,
                    "result": 2,
                    "result_value": 1,
                    "resulting_value": 1,
                    "temp_value": 1,
                    "updated_permissions": 1,
                    "updated_register_value": 1,
                    "updated_value": 23
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid update_parameter_value_00080d2e(int base_address,undefined4 operation,uint new_value)\n\n{\n  uint updated_value;\n  \n  *(uint *)(base_address + 0x44) = new_value;\n  switch(operation) {\n  case 0:\n  case 3:\n  case 4:\n  case 5:\n    return;\n  case 1:\n    updated_value = *(uint *)(base_address + 0x70) & *(uint *)(base_address + 0x70) & ~new_value;\n    break;\n  case 2:\n    updated_value = *(uint *)(base_address + 0x70) | new_value;\n    break;\n  default:\n    goto case_default;\n  }\n  *(uint *)(base_address + 0x70) = updated_value;\ncase_default:\n  *(uint *)(base_address + 4) = new_value;\n  return;\n}\n\n",
            "current_name": "update_parameter_value_00080d2e",
            "entrypoint": "0x00080d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d2e": "update_parameter_value_00080d2e",
                "param_1": "base_address",
                "param_2": "operation",
                "param_3": "new_value",
                "switchD_00080d34_caseD_6": "case_default",
                "uVar1": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d54": {
            "additional_data": {
                "0x11": {
                    "array_index1": 1,
                    "index1": 5,
                    "param_index1": 1,
                    "parameter_index1": 1
                },
                "0x18": {
                    "array_index3": 1,
                    "index2": 2,
                    "index3": 3,
                    "param_index3": 1,
                    "parameter_index3": 1
                },
                "0x19": {
                    "array_index2": 1,
                    "index2": 3,
                    "index3": 2,
                    "param_index2": 1,
                    "parameter_index2": 1
                },
                "0x20": {
                    "array_index6": 1,
                    "index6": 5,
                    "param_index6": 1,
                    "parameter_index6": 1
                },
                "5": {
                    "array_index7": 1,
                    "index7": 4,
                    "param_index7": 1
                },
                "8": {
                    "array_index4": 1,
                    "index4": 5,
                    "param_index4": 1,
                    "parameter_index4": 1
                },
                "9": {
                    "array_index5": 1,
                    "index5": 5,
                    "param_index5": 1,
                    "parameter_index5": 1
                },
                "FUN_00080d54": {
                    "assign_values_to_indices": 1,
                    "set_function_parameters": 1,
                    "set_param_values": 2,
                    "set_parameters": 6,
                    "set_params": 2,
                    "set_values": 4,
                    "set_values_based_on_conditions": 1,
                    "set_values_based_on_flags": 2,
                    "set_values_for_flags": 1,
                    "set_values_in_array": 1,
                    "update_param_values": 3,
                    "update_parameter": 1,
                    "update_parameters": 3,
                    "update_values": 3
                },
                "bVar1": {
                    "is_flag_set": 3,
                    "is_negative": 23,
                    "is_negative_flag": 2,
                    "is_negative_flag_set": 1,
                    "is_negative_mask": 1,
                    "is_negative_shift": 1
                },
                "param_1": {
                    "array": 6,
                    "data_array": 1,
                    "output": 2,
                    "output_array": 7,
                    "param_array": 1,
                    "parameter_array": 1,
                    "parameters": 5,
                    "params": 4,
                    "params_array": 1,
                    "result": 2,
                    "result_array": 1
                },
                "param_2": {
                    "input_value": 2,
                    "new_parameter_value": 1,
                    "new_value": 4,
                    "param_value": 3,
                    "parameter_value": 1,
                    "value": 20
                },
                "param_3": {
                    "bit_pattern": 1,
                    "bitfield_value": 1,
                    "bitmask": 4,
                    "bits": 1,
                    "condition": 1,
                    "flag": 1,
                    "flags": 21,
                    "input_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0"
            ],
            "code": "\nvoid set_function_parameters_00080d54(undefined4 *output_array,undefined4 value,uint flags)\n\n{\n  bool is_negative;\n  \n  is_negative = (int)(flags << 0x1f) < 0;\n  output_array[0x11] = value;\n  if (is_negative) {\n    output_array[0x19] = value;\n  }\n  if (!is_negative) {\n    output_array[0x18] = value;\n  }\n  is_negative = (flags & 10) != 0;\n  if (is_negative) {\n    output_array[8] = value;\n  }\n  if (!is_negative) {\n    output_array[9] = value;\n  }\n  if (((int)(flags << 0x1e) < 0) || ((int)(flags << 0x1c) < 0)) {\n    output_array[0x20] = value;\n  }\n  output_array[5] = value;\n  *output_array = value;\n  return;\n}\n\n",
            "current_name": "set_function_parameters_00080d54",
            "entrypoint": "0x00080d54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d54": "set_function_parameters_00080d54",
                "bVar1": "is_negative",
                "param_1": "output_array",
                "param_2": "value",
                "param_3": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080d7a": {
            "additional_data": {
                "0x11": {
                    "index1": 2
                },
                "0x14": {
                    "index5": 2
                },
                "0x15": {
                    "index4": 2
                },
                "0x18": {
                    "index2": 2
                },
                "0x19": {
                    "index3": 2
                },
                "0xc": {
                    "index7": 2
                },
                "0xd": {
                    "index6": 2
                },
                "4": {
                    "index8": 1
                },
                "FUN_00080d7a": {
                    "assign_values_to_parameters": 1,
                    "map_param_to_indices": 1,
                    "set_param_values": 6,
                    "set_parameters": 8,
                    "set_params": 1,
                    "set_values": 2,
                    "set_values_to_param_array": 1,
                    "update_memory": 1,
                    "update_param1_values": 1,
                    "update_param_values": 5,
                    "update_parameters": 2,
                    "update_params": 2
                },
                "param_1": {
                    "array": 4,
                    "memory": 1,
                    "output": 2,
                    "output_array": 5,
                    "param_array": 7,
                    "parameter_array": 1,
                    "parameters": 5,
                    "params": 3,
                    "result_array": 1,
                    "values": 1
                },
                "param_2": {
                    "input_value": 1,
                    "new_value": 6,
                    "param": 1,
                    "param_value": 3,
                    "value": 20
                },
                "param_3": {
                    "check1": 2,
                    "condition1": 10,
                    "condition_1": 3,
                    "condition_a": 3,
                    "flag1": 5,
                    "is_param3_zero": 8
                },
                "param_4": {
                    "check2": 2,
                    "condition2": 10,
                    "condition_2": 3,
                    "condition_b": 3,
                    "flag2": 5,
                    "is_param4_zero": 8
                },
                "param_5": {
                    "check3": 2,
                    "condition3": 10,
                    "condition_3": 3,
                    "condition_c": 3,
                    "flag3": 5,
                    "is_param5_zero": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_00080da0",
                "FUN_00081318"
            ],
            "code": "\nvoid set_values_to_param_array_00080d7a(undefined4 *param_array,undefined4 value,int condition1,int condition2,int condition3)\n\n{\n  param_array[0x11] = value;\n  if (condition3 == 0) {\n    param_array[0x18] = value;\n  }\n  else {\n    param_array[0x19] = value;\n  }\n  if (condition2 == 0) {\n    param_array[0x15] = value;\n  }\n  else {\n    param_array[0x14] = value;\n  }\n  if (condition1 == 0) {\n    param_array[0xd] = value;\n  }\n  else {\n    param_array[0xc] = value;\n  }\n  param_array[4] = value;\n  *param_array = value;\n  return;\n}\n\n",
            "current_name": "set_values_to_param_array_00080d7a",
            "entrypoint": "0x00080d7a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080d7a": "set_values_to_param_array_00080d7a",
                "param_1": "param_array",
                "param_2": "value",
                "param_3": "condition1",
                "param_4": "condition2",
                "param_5": "condition3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080da0": {
            "additional_data": {
                "0x60": {
                    "other_offset": 1
                },
                "100": {
                    "constant_offset": 1
                },
                "FUN_00080d2e": {
                    "handle_set_peripheral": 1,
                    "set_input": 2,
                    "set_peripheral": 2,
                    "set_peripheral_parameters_helper": 1,
                    "set_peripheral_settings": 1,
                    "set_peripheral_type": 1
                },
                "FUN_00080d54": {
                    "handle_set_output": 1,
                    "perform_operation2": 1,
                    "set_input": 1,
                    "set_input_config": 1,
                    "set_output": 1,
                    "set_output_with_flag": 1,
                    "set_peripheral": 1,
                    "set_register_3": 1
                },
                "FUN_00080d7a": {
                    "handle_set_input": 1,
                    "perform_operation1": 1,
                    "set_input": 1,
                    "set_output": 3,
                    "set_peripheral_flag": 1,
                    "set_pin_config": 1,
                    "set_register_1": 1
                },
                "FUN_00080da0": {
                    "configure_gpio": 1,
                    "configure_peripheral": 6,
                    "configure_peripherals": 1,
                    "configure_pin": 1,
                    "configure_pio": 2,
                    "set_peripheral": 11,
                    "set_peripheral_and_config": 1,
                    "set_peripheral_config": 1,
                    "set_peripheral_parameters": 1,
                    "set_peripheral_properties": 2,
                    "set_peripheral_state": 1,
                    "set_pin_peripheral": 1,
                    "set_pio_configuration": 1,
                    "set_pio_parameters": 1
                },
                "FUn_00080d54": {
                    "set_input_io": 1
                },
                "PIO_SetInput": {
                    "set_input": 10,
                    "set_input_function": 1,
                    "set_pio_input": 1
                },
                "PIO_SetOutput": {
                    "set_output": 10,
                    "set_output_function": 1,
                    "set_pio_output": 1
                },
                "PIO_SetPeripheral": {
                    "set_peripheral": 9,
                    "set_peripheral_function": 1,
                    "set_peripheral_mode": 1,
                    "set_peripheral_type": 1
                },
                "PTR_FUN_00080d2e": {
                    "set_peripheral_io": 1
                },
                "bVar1": {
                    "is_flag_negative": 1,
                    "is_flag_set": 1,
                    "is_negative": 21,
                    "is_negative_flag": 6,
                    "is_negative_option": 1,
                    "is_negative_shift": 1
                },
                "param_1": {
                    "base_address": 1,
                    "device": 10,
                    "device_address": 6,
                    "device_id": 3,
                    "device_setting": 1,
                    "gpio": 2,
                    "gpio_base_address": 1,
                    "peripheral_id": 1,
                    "pin": 1,
                    "pin_index": 1,
                    "pio_address": 1,
                    "pio_index": 1,
                    "port": 1,
                    "port_number": 1
                },
                "param_2": {
                    "mode": 9,
                    "peripheral": 1,
                    "peripheral_id": 2,
                    "peripheral_number": 1,
                    "peripheral_type": 13,
                    "pin_mode": 1,
                    "pin_number": 1,
                    "pio_type": 1,
                    "setting": 1,
                    "type": 1
                },
                "param_3": {
                    "config": 6,
                    "config_value": 2,
                    "configuration": 1,
                    "configuration_value": 1,
                    "flag": 1,
                    "function": 2,
                    "peripheral": 2,
                    "peripheral_config": 5,
                    "peripheral_function": 1,
                    "peripheral_settings": 1,
                    "peripheral_state": 1,
                    "peripheral_type": 2,
                    "peripheral_value": 1,
                    "property": 1,
                    "setting": 2,
                    "value": 2
                },
                "param_4": {
                    "additional_data": 1,
                    "bitmask": 1,
                    "config": 1,
                    "flag": 5,
                    "flag_2": 1,
                    "flags": 11,
                    "gpio_mode": 1,
                    "mask": 1,
                    "options": 1,
                    "parameter": 1,
                    "peripheral_data": 2,
                    "peripheral_flags": 1,
                    "peripheral_mask": 1,
                    "peripheral_setting": 1,
                    "pin_mask": 1,
                    "value": 1
                },
                "param_5": {
                    "peripheral_type": 1
                },
                "ptr_setPeripheralFlag": {
                    "ptr_set_peripheral_flag": 1
                }
            },
            "called": [
                "FUN_00080d2e",
                "FUN_00080d7a",
                "FUN_00080d54"
            ],
            "calling": [
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "code": "\nundefined4 set_peripheral_properties_00080da0(int device,int peripheral_type,undefined4 config,uint flags)\n\n{\n  bool is_negative;\n  \n  switch(peripheral_type) {\n  case 1:\n  case 2:\n    set_peripheral(device,peripheral_type,config);\n    is_negative = (int)(flags << 0x1f) < 0;\n    *(undefined4 *)(device + 0x44) = config;\n    if (is_negative) {\n      *(undefined4 *)(device + 100) = config;\n    }\n    if (!is_negative) {\n      *(undefined4 *)(device + 0x60) = config;\n    }\n    break;\n  case 3:\n    set_input(device,config,flags,0x80d55,device);\n    break;\n  case 4:\n  case 5:\n    set_output(device,config,peripheral_type == 5,(flags << 0x1d) >> 0x1f,flags & 1,peripheral_type,config\n                 );\n    break;\n  default:\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "set_peripheral_properties_00080da0",
            "entrypoint": "0x00080da0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080da0": "set_peripheral_properties_00080da0",
                "PIO_SetInput": "set_input",
                "PIO_SetOutput": "set_output",
                "PIO_SetPeripheral": "set_peripheral",
                "bVar1": "is_negative",
                "param_1": "device",
                "param_2": "peripheral_type",
                "param_3": "config",
                "param_4": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e04": {
            "additional_data": {
                "FUN_00080e04": {
                    "apply_mask": 1,
                    "bitwise_and_check": 2,
                    "check_and_extract_bit": 1,
                    "check_and_return_flag": 1,
                    "check_bit": 1,
                    "check_bitmask": 1,
                    "check_bitmask_and_flag": 1,
                    "check_bits": 1,
                    "check_bitwise_and": 3,
                    "check_bitwise_conditions": 3,
                    "check_bitwise_intersection": 2,
                    "check_compatibility": 1,
                    "check_conditions": 1,
                    "check_intersection": 6,
                    "check_permissions": 2,
                    "filter_bits": 1,
                    "perform_and_check": 1,
                    "validate_and_check": 1,
                    "validate_parameters": 1
                },
                "param_1": {
                    "address": 2,
                    "array": 2,
                    "array_pointer": 1,
                    "base_address": 2,
                    "data_address": 5,
                    "data_block": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_pointer": 1,
                    "input_value": 5,
                    "memory_address": 1,
                    "obj_address": 1,
                    "object_address": 1,
                    "object_pointer": 1,
                    "offset": 1,
                    "pointer": 3,
                    "structure_address": 1
                },
                "param_2": {
                    "bit_mask": 3,
                    "bitmask": 2,
                    "filter_mask": 1,
                    "flag": 2,
                    "input_value": 2,
                    "mask": 18,
                    "permission_mask": 1,
                    "permissions": 1,
                    "value": 1
                },
                "uVar1": {
                    "result": 29
                }
            },
            "called": [],
            "calling": [
                "FUN_00081318"
            ],
            "code": "\nuint check_bitwise_intersection_00080e04(int data_address,uint mask)\n\n{\n  uint result;\n  \n  result = *(uint *)(data_address + 8) & mask;\n  if (result != 0) {\n    if ((mask & *(uint *)(data_address + 0x18)) == 0) {\n      result = 0;\n    }\n    else {\n      result = 1;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "check_bitwise_intersection_00080e04",
            "entrypoint": "0x00080e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e04": "check_bitwise_intersection_00080e04",
                "param_1": "data_address",
                "param_2": "mask",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e18": {
            "additional_data": {
                "FUN_00080e18": {
                    "check_and_set_bit": 9,
                    "check_and_set_flag": 1,
                    "check_and_update_bit": 7,
                    "check_and_update_bitmask": 2,
                    "check_and_update_flag": 2,
                    "check_and_update_flags": 1,
                    "check_bit_and_update": 1,
                    "check_bit_pattern": 1,
                    "check_bitwise_equality": 1,
                    "clear_bit_mask": 1,
                    "set_bit": 2,
                    "set_bitmask": 1,
                    "set_or_update_bit": 1,
                    "verify_bit": 1
                },
                "_DAT_400e0610": {
                    "output_a": 1
                },
                "_DAT_400e0618": {
                    "bit_mask_a": 1
                },
                "_DAT_400e0700": {
                    "output_b": 1
                },
                "_DAT_400e0708": {
                    "bit_mask_b": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "bit_position": 9,
                    "input": 2,
                    "input_index": 1,
                    "input_number": 1,
                    "input_value": 5,
                    "number": 1,
                    "position": 1,
                    "value": 10
                },
                "uVar1": {
                    "bit": 1,
                    "bit_mask": 21,
                    "bit_pattern": 1,
                    "bit_value": 1,
                    "bitmask": 4,
                    "mask": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00081508",
                "FUN_00081210",
                "FUN_00080ae4"
            ],
            "code": "\n\n\nundefined4 check_and_set_bit_00080e18(uint value)\n\n{\n  uint bit_mask;\n  \n  if (value < 0x2d) {\n    if (value < 0x20) {\n      bit_mask = 1 << (value & 0xff);\n      if ((bit_mask & _DAT_400e0618) != bit_mask) {\n        _DAT_400e0610 = bit_mask;\n      }\n    }\n    else {\n      bit_mask = 1 << (value - 0x20 & 0xff);\n      if ((bit_mask & _DAT_400e0708) != bit_mask) {\n        _DAT_400e0700 = bit_mask;\n      }\n    }\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_set_bit_00080e18",
            "entrypoint": "0x00080e18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080e18": "check_and_set_bit_00080e18",
                "param_1": "value",
                "uVar1": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080e9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array_of_elf_references": 1,
                    "array_of_offsets": 1,
                    "array_of_values": 1,
                    "elf_array": 1,
                    "elf_rel_array": 4,
                    "elf_rel_table": 1,
                    "elf_relocation_array": 3,
                    "rel_array": 1,
                    "relocation_array": 8,
                    "relocation_entries": 1,
                    "relocation_table": 4
                },
                "FUN_00080e9c": {
                    "initialize_data": 3,
                    "initialize_memory": 18,
                    "initialize_memory_configuration": 1,
                    "initialize_peripheral": 1,
                    "initialize_registers": 1,
                    "initialize_settings": 1,
                    "initialize_values": 2,
                    "initialize_variables": 1,
                    "set_initial_values": 2,
                    "set_memory_values": 1
                },
                "_DAT_400e0620": {
                    "bit_shifted_value": 1,
                    "counter1": 1,
                    "data_shifted": 1,
                    "data_value": 1,
                    "flag1": 1,
                    "loop_counter": 3,
                    "memory_address": 2,
                    "memory_offset": 1,
                    "memory_value": 2,
                    "memory_value_1": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "shift_value": 1,
                    "shifted_offset": 1,
                    "shifted_value": 9,
                    "temp_value": 1,
                    "temp_var1": 1,
                    "value1": 1
                },
                "_DAT_400e0628": {
                    "address_value": 1,
                    "code_start": 1,
                    "config_value": 1,
                    "constant_value": 1,
                    "constant_value1": 3,
                    "constant_value_1": 1,
                    "data1": 1,
                    "data_pointer": 1,
                    "data_reg": 1,
                    "data_register": 1,
                    "data_value": 1,
                    "data_value1": 1,
                    "memory_address3": 1,
                    "memory_value": 1,
                    "new_data_value": 1,
                    "other_value": 1,
                    "register3": 1,
                    "register_config1": 1,
                    "special_code": 1,
                    "special_value": 1,
                    "specific_value1": 1,
                    "value1": 1,
                    "value3": 1,
                    "value_set1": 1
                },
                "_DAT_400e0630": {
                    "additional_value": 1,
                    "address_offset": 1,
                    "code_end": 1,
                    "constant_value": 5,
                    "constant_value2": 3,
                    "constant_value_2": 1,
                    "control_register": 1,
                    "count": 1,
                    "data2": 1,
                    "data_len": 1,
                    "data_value2": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "memory_address4": 1,
                    "register4": 1,
                    "register_config2": 1,
                    "specific_value2": 1,
                    "value2": 1,
                    "value4": 1,
                    "value_set2": 1
                },
                "_DAT_400e0668": {
                    "another_value": 1,
                    "bit_shift_value": 1,
                    "comparison_value": 1,
                    "control_value": 1,
                    "counter": 1,
                    "counter2": 1,
                    "flag2": 1,
                    "loop_condition": 1,
                    "loop_counter": 3,
                    "loop_counter2": 1,
                    "mask": 2,
                    "memory_mask": 1,
                    "memory_value": 1,
                    "memory_value_2": 1,
                    "shift_amount": 1,
                    "shifted_offset": 1,
                    "temp": 2,
                    "temp_value": 4,
                    "temp_value1": 1,
                    "temp_var2": 1,
                    "temp_variable": 1,
                    "temporary_value": 1,
                    "value": 1,
                    "value2": 1
                },
                "_DAT_400e0a00": {
                    "base_address": 1,
                    "base_address_register": 1,
                    "buffer_size": 1,
                    "data1": 1,
                    "data_block1": 1,
                    "data_start": 1,
                    "memory_address1": 2,
                    "memory_address_1": 1,
                    "memory_address_a": 2,
                    "memory_location1": 1,
                    "memory_segment1": 2,
                    "memory_size1": 6,
                    "peripheral_config1": 1,
                    "register1": 1,
                    "start_address1": 1,
                    "uart_baud_rate": 1,
                    "value_a": 1
                },
                "_DAT_400e0c00": {
                    "config_register": 1,
                    "data2": 1,
                    "data_block2": 1,
                    "data_end": 1,
                    "end_address": 1,
                    "memory_address2": 2,
                    "memory_address_2": 1,
                    "memory_address_b": 2,
                    "memory_location2": 1,
                    "memory_segment2": 2,
                    "memory_size2": 6,
                    "peripheral_config2": 1,
                    "register2": 1,
                    "result": 1,
                    "start_address2": 1,
                    "timer_frequency": 1,
                    "value_b": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n\n\nvoid initialize_memory_configuration_00080e9c(void)\n\n{\n  _DAT_400e0a00 = 0x400;\n  _DAT_400e0c00 = 0x400;\n  _DAT_400e0620 = _DAT_400e0620 << 7;\n  while (-1 < _DAT_400e0620) {\n    _DAT_400e0620 = _DAT_400e0668 << 0x1f;\n  }\n  _DAT_400e0620 = 0x1370809;\n  do {\n  } while (-1 < _DAT_400e0668 << 0xf);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0628 = 0x200d3f01;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1e);\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  _DAT_400e0630 = 0x12;\n  do {\n  } while (-1 < _DAT_400e0668 << 0x1c);\n  relocation_array[6].r_offset = 84000000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_configuration_00080e9c",
            "entrypoint": "0x00080e9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00080e9c": "initialize_memory_configuration_00080e9c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f24": {
            "additional_data": {
                "DAT_0008588c": {
                    "source_address": 1,
                    "source_data": 3,
                    "start_address": 3,
                    "start_of_relocation_table": 1
                },
                "DAT_2007089c": {
                    "end_addr": 1,
                    "end_address": 5,
                    "end_of_relocation_table": 1,
                    "end_pointer": 1,
                    "end_ptr": 3
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2,
                    "relative_array": 1,
                    "relocation_array": 5,
                    "relocation_data": 1,
                    "relocation_table": 5,
                    "source_array": 1
                },
                "FUN_00080f24": {
                    "copy_and_clear_elf_data": 1,
                    "copy_and_clear_memory": 1,
                    "copy_and_initialize_data": 1,
                    "copy_and_zero_memory": 1,
                    "copy_relocation_data": 1,
                    "copy_relocation_table": 1,
                    "initialize_application": 1,
                    "initialize_binary_data": 1,
                    "initialize_data": 7,
                    "initialize_executable": 2,
                    "initialize_function": 1,
                    "initialize_memory": 10,
                    "initialize_program": 3
                },
                "FUN_000816a8": {
                    "do_something": 2,
                    "optimize_performance": 1,
                    "perform_cleanup": 1,
                    "perform_task": 2,
                    "process_data": 1,
                    "reset_function": 1,
                    "reverse_data": 1,
                    "reverse_something": 1
                },
                "_DAT_e000ed08": {
                    "constant": 2,
                    "constant_value": 9,
                    "counter": 1,
                    "data": 1,
                    "data_offset": 1,
                    "global_variable": 1,
                    "reset_value": 1,
                    "some_data": 1,
                    "some_value": 1,
                    "target_value": 1
                },
                "iVar1": {
                    "index": 11,
                    "offset": 17,
                    "offset_index": 2
                },
                "main": {
                    "run_main_loop": 1
                },
                "puVar2": {
                    "current_address": 1,
                    "current_data_ptr": 1,
                    "current_ptr": 2,
                    "data_pointer": 2,
                    "data_ptr": 2,
                    "dest_ptr": 1,
                    "destination": 1,
                    "pointer": 7,
                    "ptr": 13
                },
                "r_offset": {
                    "offset": 6,
                    "offset_value": 1,
                    "r_offset": 1
                }
            },
            "called": [
                "FUN_000816a8"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00080f6e) */\n\n\nvoid initialize_memory_00080f24(void)\n\n{\n  int offset;\n  undefined4 *ptr;\n  \n  for (offset = 0; (undefined4 *)((int)&relocation_array[0].offset + offset) < &DAT_2007089c\n      ; offset = offset + 4) {\n    *(undefined4 *)((int)&relocation_array[0].offset + offset) =\n         *(undefined4 *)(&DAT_0008588c + offset);\n  }\n  for (ptr = &DAT_2007089c; ptr < (undefined4 *)0x200711c0; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  _DAT_e000ed08 = 0x80000;\n  run_main_loop();\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "initialize_memory_00080f24",
            "entrypoint": "0x00080f24",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00080f24": "initialize_memory_00080f24",
                "iVar1": "offset",
                "main": "run_main_loop",
                "puVar2": "ptr",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00080f9c": {
            "additional_data": {
                "FUN_00080f9c": {
                    "calculate_config_value": 1,
                    "calculate_index": 4,
                    "calculate_offset": 1,
                    "calculate_parameters": 1,
                    "calculate_progress": 1,
                    "calculate_threshold": 15,
                    "check_threshold": 1,
                    "find_closest_threshold": 1,
                    "find_match": 1,
                    "find_matching_value": 1,
                    "find_threshold": 1,
                    "initialize_values": 2
                },
                "local_58": {
                    "block_thresholds": 1,
                    "offsets": 1,
                    "threshold_array": 1,
                    "threshold_table": 1,
                    "threshold_values": 8,
                    "thresholds": 19
                },
                "param_1": {
                    "config": 1,
                    "output": 6,
                    "output_array": 6,
                    "progress_array": 1,
                    "result": 10,
                    "threshold": 6,
                    "threshold_ptr": 1
                },
                "param_2": {
                    "array_length": 1,
                    "data_length": 2,
                    "data_size": 2,
                    "input": 1,
                    "input_length": 1,
                    "input_size": 10,
                    "input_value": 4,
                    "num_bytes": 1,
                    "num_of_elements": 1,
                    "size": 1,
                    "target": 1,
                    "total": 1,
                    "total_cycles": 1,
                    "total_length": 1,
                    "total_size": 3
                },
                "param_3": {
                    "block_size": 3,
                    "calculation_factor": 1,
                    "data_divisor": 1,
                    "dividend": 1,
                    "divisor": 5,
                    "divisor_1": 1,
                    "element_size": 1,
                    "factor": 2,
                    "loop_count": 1,
                    "match_length": 1,
                    "multiplier": 5,
                    "num_elements": 1,
                    "num_repetitions": 1,
                    "num_steps": 1,
                    "offset_multiplier": 1,
                    "threshold_a": 1,
                    "unit_size": 3,
                    "value": 1
                },
                "param_4": {
                    "conversion_factor": 1,
                    "divider": 1,
                    "divisor": 3,
                    "divisor_2": 1,
                    "factor": 3,
                    "multiplier": 7,
                    "scaling_factor": 1,
                    "threshold": 6,
                    "threshold_b": 1,
                    "threshold_factor": 3,
                    "threshold_multiplier": 1,
                    "threshold_percentage": 1,
                    "time_factor": 2
                },
                "uVar1": {
                    "divide_result": 1,
                    "divisor": 6,
                    "num_blocks": 3,
                    "num_cycles_per_repetition": 1,
                    "num_iterations": 1,
                    "num_matches": 1,
                    "num_units": 1,
                    "quotient": 13,
                    "units_count": 1
                },
                "uVar2": {
                    "current_index": 1,
                    "i": 3,
                    "index": 23,
                    "threshold_index": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nundefined4 calculate_threshold_00080f9c(undefined4 *result,uint input_size,int divisor,int multiplier)\n\n{\n  uint quotient;\n  uint index;\n  uint thresholds [16];\n  \n  thresholds[0] = 0;\n  thresholds[1] = 8;\n  thresholds[2] = 0x10;\n  thresholds[3] = 0x18;\n  thresholds[4] = 0x40;\n  thresholds[5] = 0x50;\n  thresholds[6] = 0x60;\n  thresholds[7] = 0x70;\n  thresholds[8] = 0x200;\n  thresholds[9] = 0x240;\n  thresholds[10] = 0x280;\n  thresholds[11] = 0x2c0;\n  thresholds[12] = 0x300;\n  thresholds[13] = 0x340;\n  thresholds[14] = 0x380;\n  thresholds[15] = 0x3c0;\n  *result = 1;\n  result[1] = 0;\n  result[0x48] = 0x202;\n  result[0x41] = 0;\n  result[0x45] = 0;\n  quotient = input_size / (uint)(divisor * 2);\n  if (input_size == divisor * 2 * quotient) {\n    quotient = quotient - 1;\n  }\n  index = 0;\n  do {\n    if ((uint)(multiplier * (int)(((ulonglong)input_size / (ulonglong)((quotient + 1) * 2)) / 1000000)) <=\n        thresholds[index]) {\n      result[1] = (index & 0xf) << 0x10 | (quotient & 0xff) << 8 | result[1];\n      return 0;\n    }\n    index = index + 1;\n  } while (index != 0x10);\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_threshold_00080f9c",
            "entrypoint": "0x00080f9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00080f9c": "calculate_threshold_00080f9c",
                "local_58": "thresholds",
                "param_1": "result",
                "param_2": "input_size",
                "param_3": "divisor",
                "param_4": "multiplier",
                "uVar1": "quotient",
                "uVar2": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081034": {
            "additional_data": {
                "DAT_Y": {
                    "current_flags": 1
                },
                "FUN_00081034": {
                    "set_bitwise_flags": 1,
                    "set_flag_in_memory": 1,
                    "set_flag_with_mask": 1,
                    "set_param_bit": 1,
                    "set_param_bits": 1,
                    "update_bit_in_memory": 1,
                    "update_bitwise_flags": 1,
                    "update_bitwise_operations": 2,
                    "update_config": 1,
                    "update_config_parameter": 1,
                    "update_data": 1,
                    "update_flag": 1,
                    "update_flags": 8,
                    "update_flags_and_value": 1,
                    "update_param": 2,
                    "update_parameter": 2,
                    "update_parameters": 1,
                    "update_register": 1,
                    "update_register_value": 1,
                    "update_value": 1,
                    "update_value_in_memory": 1
                },
                "PTR_X": {
                    "base_pointer": 1
                },
                "param_1": {
                    "address": 2,
                    "base_address": 17,
                    "config_address": 2,
                    "data": 1,
                    "data_ptr": 2,
                    "input_address": 1,
                    "instruction_address": 1,
                    "mem_address": 1,
                    "memory_address": 1,
                    "ptr": 1,
                    "register_address": 2
                },
                "param_2": {
                    "bit_value": 2,
                    "bitwise_value1": 1,
                    "config_value": 1,
                    "current_value": 1,
                    "data": 1,
                    "data_bit": 1,
                    "flag_value": 2,
                    "input_flag": 1,
                    "input_val1": 1,
                    "input_value": 1,
                    "mask": 1,
                    "new_value": 5,
                    "param_value": 1,
                    "value": 6,
                    "value1": 4,
                    "value_to_or": 1,
                    "value_to_set": 1
                },
                "param_3": {
                    "bit_mask": 4,
                    "bit_value": 3,
                    "bitwise_value2": 1,
                    "flag": 12,
                    "flag_value": 2,
                    "input_val2": 1,
                    "mask": 2,
                    "mask_value": 1,
                    "new_value": 1,
                    "value2": 4
                },
                "param_4": {
                    "bit_mask": 1,
                    "bit_position": 1,
                    "mask": 1,
                    "new_bit_value": 1
                },
                "param_5": {
                    "shift_amount": 1
                },
                "param_6": {
                    "shift_amount": 1
                },
                "var_1": {
                    "current_value": 1
                },
                "var_2": {
                    "shifted_flag": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_bitwise_flags_00081034(int base_address,uint value,uint flag)\n\n{\n  *(uint *)(base_address + 4) = value | *(uint *)(base_address + 4) | (flag & 1) << 7;\n  return;\n}\n\n",
            "current_name": "update_bitwise_flags_00081034",
            "entrypoint": "0x00081034",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081034": "update_bitwise_flags_00081034",
                "param_1": "base_address",
                "param_2": "value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081042": {
            "additional_data": {
                "FUN_00081042": {
                    "combine_flags": 1,
                    "combine_param_values": 1,
                    "modify_params": 1,
                    "set_bit_fields": 2,
                    "set_bits_in_memory": 1,
                    "set_bitwise_values": 1,
                    "set_register_bitmask": 1,
                    "update_config": 2,
                    "update_data": 3,
                    "update_flags": 3,
                    "update_memory": 2,
                    "update_memory_location": 1,
                    "update_param_bits": 1,
                    "update_param_val": 1,
                    "update_parameter": 2,
                    "update_parameter_values": 1,
                    "update_parameters": 1,
                    "update_register": 1,
                    "update_register_value": 2,
                    "update_register_values": 2
                },
                "param_1": {
                    "address": 2,
                    "base_address": 12,
                    "config": 1,
                    "config_ptr": 1,
                    "data_address": 2,
                    "data_pointer": 2,
                    "memory_address": 1,
                    "memory_location": 1,
                    "param_address": 1,
                    "param_base": 1,
                    "parameter1": 1,
                    "register_address": 5,
                    "register_base_address": 1
                },
                "param_2": {
                    "bit_field_a": 1,
                    "bit_field_value1": 1,
                    "bit_value": 1,
                    "bitmask": 1,
                    "bitmask1": 1,
                    "bitmask_value": 1,
                    "config_bitmask": 1,
                    "data": 1,
                    "field_value": 1,
                    "first_field_value": 1,
                    "first_param": 1,
                    "flag": 1,
                    "flag1": 1,
                    "input_value": 1,
                    "input_value1": 1,
                    "mask": 1,
                    "mask1": 1,
                    "new_value1": 1,
                    "param2_value": 2,
                    "parameter2": 1,
                    "value": 3,
                    "value1": 6,
                    "value_to_set": 1
                },
                "param_3": {
                    "bit_field_b": 1,
                    "bit_field_value2": 1,
                    "bit_mask1": 1,
                    "bitmask2": 1,
                    "config_value1": 1,
                    "current_flags": 1,
                    "current_value": 2,
                    "existing_value": 1,
                    "flag2": 1,
                    "flags1": 1,
                    "input_value2": 1,
                    "mask": 1,
                    "mask1": 1,
                    "mask_1": 1,
                    "original_value": 1,
                    "param3_value": 2,
                    "parameter3": 1,
                    "previous_value": 1,
                    "second_param": 1,
                    "value": 2,
                    "value1": 2,
                    "value2": 6
                },
                "param_4": {
                    "bit_field_c": 1,
                    "bit_field_value3": 1,
                    "bit_mask2": 1,
                    "bit_offset": 1,
                    "bitmask3": 1,
                    "config_value2": 1,
                    "extra_flags": 1,
                    "flag3": 1,
                    "flag_value": 1,
                    "flags": 2,
                    "flags2": 1,
                    "input_value3": 1,
                    "mask": 2,
                    "mask2": 1,
                    "mask_2": 1,
                    "new_value2": 1,
                    "param4_value": 2,
                    "parameter4": 1,
                    "second_field_value": 1,
                    "third_param": 1,
                    "value2": 2,
                    "value3": 6
                },
                "param_5": {
                    "bit_position": 1
                },
                "param_6": {
                    "shift_amount": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid update_memory_location_00081042(int base_address,uint value1,uint value2,uint value3)\n\n{\n  *(uint *)(base_address + 4) =\n       value2 | *(uint *)(base_address + 4) | (value1 & 0xf) << 0x18 | (value3 & 3) << 0x1c;\n  return;\n}\n\n",
            "current_name": "update_memory_location_00081042",
            "entrypoint": "0x00081042",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081042": "update_memory_location_00081042",
                "param_1": "base_address",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008105c": {
            "additional_data": {
                "FUN_0008105c": {
                    "set_bit": 17,
                    "set_bit_at_index": 2,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 1,
                    "set_bit_in_integer": 2,
                    "set_bit_in_memory": 3,
                    "set_bit_in_value": 2,
                    "set_bit_value": 2,
                    "set_bit_value_at_position": 1
                },
                "param_1": {
                    "address": 5,
                    "array_address": 1,
                    "array_pointer": 1,
                    "base_address": 21,
                    "memory_address": 2,
                    "value": 1
                },
                "param_2": {
                    "bit_index": 6,
                    "bit_number": 4,
                    "bit_position": 21
                }
            },
            "called": [],
            "calling": [
                "FUN_00081210"
            ],
            "code": "\nvoid set_bit_in_memory_0008105c(int base_address,uint bit_position)\n\n{\n  *(int *)(base_address + 0x14) = 1 << (bit_position & 0xff);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_0008105c",
            "entrypoint": "0x0008105c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008105c": "set_bit_in_memory_0008105c",
                "param_1": "base_address",
                "param_2": "bit_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081066": {
            "additional_data": {
                "0xffff": {
                    "ffff": 1,
                    "max_value": 1,
                    "new_value": 1
                },
                "FUN_00081066": {
                    "initialize_memory": 2,
                    "initialize_parameter": 1,
                    "initialize_value": 6,
                    "initialize_value_to_ffff": 1,
                    "set_default_value": 10,
                    "set_error_code_to_max": 1,
                    "set_param_to_ffff": 2,
                    "set_param_to_max": 1,
                    "set_param_to_minus_one": 1,
                    "set_parameter_to_max_value": 1,
                    "set_pointer_to_max_value": 1,
                    "set_to_ffff": 1,
                    "set_to_max_value": 3
                },
                "param_1": {
                    "address": 2,
                    "arg": 1,
                    "base_address": 5,
                    "data": 1,
                    "data_address": 2,
                    "data_pointer": 2,
                    "error_code": 1,
                    "input": 1,
                    "input_address": 1,
                    "input_param": 2,
                    "input_parameter": 2,
                    "input_pointer": 1,
                    "input_value": 1,
                    "memory_address": 2,
                    "object_address": 3,
                    "param": 3,
                    "pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid set_default_value_00081066(int base_address)\n\n{\n  *(undefined4 *)(base_address + 0x14) = 0xffff;\n  return;\n}\n\n",
            "current_name": "set_default_value_00081066",
            "entrypoint": "0x00081066",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081066": "set_default_value_00081066",
                "param_1": "base_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008106e": {
            "additional_data": {
                "FUN_0008106e": {
                    "set_buffer_pointer": 1,
                    "set_integer_parameter": 1,
                    "set_memory_location": 1,
                    "set_param": 1,
                    "set_param_value": 18,
                    "set_parameter": 2,
                    "set_parameter_value": 6,
                    "store_parameter_to_memory": 1
                },
                "param_1": {
                    "address": 1,
                    "base_addr": 1,
                    "base_address": 3,
                    "buffer_address": 1,
                    "instance": 1,
                    "memory_location": 1,
                    "object_address": 17,
                    "object_location": 1,
                    "object_pointer": 1,
                    "object_ptr": 2,
                    "param_base_address": 1,
                    "param_buffer": 1
                },
                "param_2": {
                    "data": 1,
                    "new_value": 9,
                    "param_value": 4,
                    "parameter_value": 7,
                    "value": 10
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\nvoid set_param_value_0008106e(int object_address,undefined4 value)\n\n{\n  *(undefined4 *)(object_address + 0x28) = value;\n  return;\n}\n\n",
            "current_name": "set_param_value_0008106e",
            "entrypoint": "0x0008106e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008106e": "set_param_value_0008106e",
                "param_1": "object_address",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081184": {
            "additional_data": {
                "FUN_00081184": {
                    "calculate_result": 2,
                    "calculate_some_value": 1,
                    "get_default_value": 3,
                    "get_return_value": 1,
                    "get_zero": 2,
                    "get_zero_value": 1,
                    "initialize": 15,
                    "initialize_data": 4,
                    "initialize_system": 1,
                    "return_zero": 1
                },
                "PTR_00000004": {
                    "data_pointer": 1
                },
                "PTR_FUN_00081184_1": {
                    "new_ptr": 1
                },
                "PTR_FUN_00081184_2": {
                    "temp_ptr": 1
                },
                "original_function_name": {
                    "new_function_name": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_variable_name_1": {
                    "new_variable_name_1": 1,
                    "result": 1
                },
                "original_variable_name_2": {
                    "data": 1
                },
                "original_variable_name_n": {
                    "counter": 1
                },
                "return": {
                    "status": 1
                },
                "undefined4": {
                    "int": 2,
                    "status": 1,
                    "uint32_t": 1,
                    "void": 6
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid initialize_data_00081184(void)\n\n{\n  status 0;\n}\n\n",
            "current_name": "initialize_data_00081184",
            "entrypoint": "0x00081184",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081184": "initialize_data_00081184",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008118c": {
            "additional_data": {
                "DAT_20071180": {
                    "base_value": 2,
                    "current_sum": 1,
                    "current_value": 2
                },
                "FUN_0008118c": {
                    "add_and_return_previous_value": 3,
                    "add_value_and_return_previous": 1,
                    "calculate_and_store_sum": 1,
                    "calculate_incremented_value": 1,
                    "calculate_new_pointer_value": 1,
                    "calculate_new_value": 10,
                    "calculate_offset": 2,
                    "calculate_sum": 10,
                    "calculate_updated_value": 1,
                    "compute_sum_and_increment": 1
                },
                "iVar1": {
                    "current_value": 1,
                    "initial_value": 2,
                    "old_value": 3,
                    "original_value": 1,
                    "previous_offset": 1,
                    "previous_result": 1,
                    "previous_sum": 4,
                    "previous_value": 15
                },
                "param_1": {
                    "input": 1,
                    "input_number": 2,
                    "input_value": 23,
                    "num_to_add": 1,
                    "offset": 1,
                    "value_to_add": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00082970"
            ],
            "code": "\nint calculate_new_pointer_value_0008118c(int input_value)\n\n{\n  int previous_value;\n  \n  if (DAT_20071180 == 0) {\n    DAT_20071180 = 0x200711c0;\n  }\n  previous_value = DAT_20071180;\n  DAT_20071180 = input_value + DAT_20071180;\n  return previous_value;\n}\n\n",
            "current_name": "calculate_new_pointer_value_0008118c",
            "entrypoint": "0x0008118c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008118c": "calculate_new_pointer_value_0008118c",
                "iVar1": "previous_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811ae": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0xffffffff": {
                    "negative_one": 1
                },
                "DAT_00000004": {
                    "default_value": 1
                },
                "FUN_000811ae": {
                    "clear_data": 1,
                    "get_default_value": 6,
                    "get_error_code": 12,
                    "get_last_error": 1,
                    "get_negative_one": 2,
                    "get_result": 1,
                    "get_return_code": 1,
                    "get_return_value": 3,
                    "initialize_error_code": 1,
                    "initialize_return_value": 1,
                    "set_return_value_to_max_unsigned": 1,
                    "set_return_value_to_minus_one": 1
                },
                "PTR_00000000": {
                    "new_parameter": 1
                },
                "PTR_00000004": {
                    "another_parameter": 1
                },
                "_": {
                    "result": 1
                },
                "return": {
                    "result": 1
                },
                "returnValue": {
                    "error_code": 1
                },
                "return_value": {
                    "default_value": 1
                },
                "undefined4": {
                    "error_code": 1,
                    "int": 2,
                    "uint32_t": 3,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [],
            "code": "\nuint32_t get_error_code_000811ae(void)\n\n{\n  result 0xffffffff;\n}\n\n",
            "current_name": "get_error_code_000811ae",
            "entrypoint": "0x000811ae",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811ae": "get_error_code_000811ae",
                "_": "result",
                "return": "result",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811b4": {
            "additional_data": {
                "0x2000": {
                    "memory_size": 1,
                    "value_to_write": 1
                },
                "FUN_000811b4": {
                    "initialize_data": 1,
                    "initialize_memory": 11,
                    "set_memory_flag": 4,
                    "set_memory_page": 1,
                    "set_memory_page_size": 1,
                    "set_memory_permission": 1,
                    "set_memory_permissions": 1,
                    "set_memory_size": 3,
                    "set_memory_to0x2000": 1,
                    "set_memory_value": 3,
                    "set_page_size": 2,
                    "set_permissions": 1
                },
                "local_variable_1": {
                    "permission_value": 1
                },
                "param_1": {
                    "arg1": 3,
                    "base_address": 5,
                    "data_pointer": 1,
                    "flag_address": 1,
                    "param": 4,
                    "param1": 3,
                    "param_1": 2,
                    "result": 5,
                    "status": 2,
                    "unused": 2,
                    "value": 2
                },
                "param_2": {
                    "address": 3,
                    "arg2": 2,
                    "buffer": 2,
                    "buffer_address": 2,
                    "dest": 1,
                    "destination_address": 1,
                    "mem_address": 1,
                    "mem_block": 1,
                    "memory": 1,
                    "memory_address": 10,
                    "memory_offset": 1,
                    "memory_size": 1,
                    "offset": 1,
                    "param2": 1,
                    "target_address": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000846b4"
            ],
            "code": "\nundefined4 initialize_memory_000811b4(undefined4 base_address,int memory_address)\n\n{\n  *(undefined4 *)(memory_address + 4) = 0x2000;\n  return 0;\n}\n\n",
            "current_name": "initialize_memory_000811b4",
            "entrypoint": "0x000811b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811b4": "initialize_memory_000811b4",
                "param_1": "base_address",
                "param_2": "memory_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811be": {
            "additional_data": {
                "": {
                    "": 2
                },
                "DAT_": {
                    "unmodified": 1
                },
                "FUN_000811be": {
                    "calculate_return_value": 1,
                    "get_one": 8,
                    "get_result_status": 1,
                    "get_return_code": 1,
                    "get_return_value": 11,
                    "get_value": 1,
                    "initialize": 4,
                    "initialize_application": 1,
                    "initialize_counter": 1,
                    "initialize_program": 1,
                    "initialize_value": 1
                },
                "PTR_": {
                    "unmodified": 1
                },
                "return": {
                    "one": 1,
                    "result": 4,
                    "return_code": 1,
                    "return_value": 1
                },
                "return_value": {
                    "status": 1
                },
                "undefined4": {
                    "counter": 1,
                    "initialize_result": 1,
                    "int": 6,
                    "status": 2,
                    "uint32_t": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_000846dc"
            ],
            "code": "\nint get_return_value_000811be(void)\n\n{\n  result 1;\n}\n\n",
            "current_name": "get_return_value_000811be",
            "entrypoint": "0x000811be",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811be": "get_return_value_000811be",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c2": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_": {
                    "": 1
                },
                "FUN_000811c2": {
                    "calculate_result": 1,
                    "clear_flags": 1,
                    "get_default_value": 5,
                    "get_result": 1,
                    "get_return_value": 2,
                    "get_zero": 4,
                    "initialize": 8,
                    "initialize_application": 1,
                    "initialize_data": 1,
                    "initialize_system": 3,
                    "initialize_value": 1,
                    "process_data": 1,
                    "return_zero": 2
                },
                "PTR_": {
                    "": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "int": 6,
                    "void": 7
                },
                "undefined4_returnCode": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00084700"
            ],
            "code": "\nvoid initialize_system_000811c2(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_system_000811c2",
            "entrypoint": "0x000811c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c2": "initialize_system_000811c2",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811c6": {
            "additional_data": {
                "0": {
                    "": 1
                },
                "FUN_000811c6": {
                    "clear_memory": 1,
                    "compute_result": 1,
                    "get_default_value": 3,
                    "get_description": 1,
                    "get_result": 3,
                    "get_return_value": 4,
                    "get_zero": 5,
                    "identify_error": 1,
                    "initialize": 7,
                    "initialize_application": 1,
                    "initialize_data": 1,
                    "initialize_value": 1,
                    "return_zero": 2
                },
                "PTR_FUN_000811c6": {
                    "ptr_zero": 1
                },
                "PTR_x": {
                    "x": 1
                },
                "PTR_y": {
                    "y": 1
                },
                "original_variable_name": {
                    "new_variable_name": 1
                },
                "result": {
                    "computed_result": 1
                },
                "return": {
                    "result": 3
                },
                "undefined4": {
                    "error_code": 1,
                    "int": 6,
                    "result": 1,
                    "uint32_t": 1,
                    "void": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_00084728"
            ],
            "code": "\nint initialize_application_000811c6(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_application_000811c6",
            "entrypoint": "0x000811c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811c6": "initialize_application_000811c6",
                "return": "result",
                "undefined4": "int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000811cc": {
            "additional_data": {
                "FUN_000811cc": {
                    "convert_bytes_to_u_int": 3,
                    "copy_byte_array": 1,
                    "copy_bytes": 15,
                    "copy_bytes_and_clear_msb": 1,
                    "copy_bytes_from_buffer": 1,
                    "copy_bytes_to_destination": 1,
                    "copy_bytes_to_memory": 2,
                    "copy_data_to_destination": 1,
                    "decode_and_store_data": 1,
                    "process_byte_data": 1,
                    "process_data": 4
                },
                "_DAT_400e0814": {
                    "byte_value": 1,
                    "data_bit": 1
                },
                "_DAT_400e081c": {
                    "current_byte": 1,
                    "destination": 1
                },
                "iVar1": {
                    "i": 17,
                    "index": 11
                },
                "param_1": {
                    "arg1": 1,
                    "argument1": 1,
                    "buffer": 1,
                    "data_ptr": 1,
                    "dest": 6,
                    "dest_buffer": 2,
                    "dest_offset": 1,
                    "destination": 1,
                    "destination_buffer": 2,
                    "destination_pointer": 1,
                    "dst_ptr": 1,
                    "input": 1,
                    "param": 1,
                    "param1": 4,
                    "param_1": 2,
                    "ptr": 1,
                    "src": 1,
                    "src_pointer": 2,
                    "unused_param": 1
                },
                "param_2": {
                    "byte_array": 3,
                    "data_array": 1,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "dest": 1,
                    "input_offset": 1,
                    "source": 5,
                    "source_address": 1,
                    "source_buffer": 2,
                    "source_pointer": 2,
                    "src": 6,
                    "src_buffer": 2,
                    "src_offset": 2,
                    "src_ptr": 1
                },
                "param_3": {
                    "byte_array_size": 1,
                    "data_length": 3,
                    "data_size": 1,
                    "input_size": 1,
                    "length": 7,
                    "length_of_data": 1,
                    "num_bytes": 14,
                    "num_bytes_to_copy": 1,
                    "size": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00084464"
            ],
            "code": "\n\n\nuint copy_bytes_to_memory_000811cc(undefined4 dest,int src,uint num_bytes)\n\n{\n  int i;\n  \n  for (i = 0; i < (int)num_bytes; i = i + 1) {\n    do {\n    } while (-1 < _DAT_400e0814 << 0x1e);\n    _DAT_400e081c = (uint)*(byte *)(src + i);\n  }\n  return num_bytes & ~((int)num_bytes >> 0x1f);\n}\n\n",
            "current_name": "copy_bytes_to_memory_000811cc",
            "entrypoint": "0x000811cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000811cc": "copy_bytes_to_memory_000811cc",
                "iVar1": "i",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "num_bytes"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081208": {
            "called": [
                "FUN_00081714"
            ],
            "calling": [
                "FUN_000805d0",
                "FUN_000804a8",
                "FUN_00080258",
                "FUN_0008043e"
            ],
            "code": "\nundefined4 GetTickCount(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "FUN_00081208",
            "entrypoint": "0x00081208",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_0008120c": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_0008120c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008120c",
            "entrypoint": "0x0008120c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008120c": "FUNC_0008120c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00081210": {
            "additional_data": {
                "FUNK_00081210": {
                    "configure_peripheral": 1
                },
                "FUN_00080da0": {
                    "adc_disable_channel": 1,
                    "configure_pin_advanced": 1,
                    "configure_pio": 2,
                    "configure_pio_with_mode": 1,
                    "pio_configure": 2
                },
                "FUN_00080e18": {
                    "adc_disable_channel": 2,
                    "disable_adc_channel": 1,
                    "enable_adc_channel": 1,
                    "get_peripheral_id": 1,
                    "get_pin_config_address": 1,
                    "get_pin_mode": 1
                },
                "FUN_0008105c": {
                    "configure_pin_mode": 1,
                    "enable_peripheral_clock": 1,
                    "pmc_enable_periph_clk": 2,
                    "set_output_value": 1,
                    "set_peripheral_output_value": 1,
                    "set_pin_value": 1
                },
                "FUN_00081210": {
                    "configure_adc": 1,
                    "configure_adc_channel": 1,
                    "configure_channel": 5,
                    "configure_gpio": 1,
                    "configure_gpio_port": 1,
                    "configure_io": 2,
                    "configure_periph_channel": 1,
                    "configure_peripheral": 5,
                    "configure_pin": 10,
                    "configure_pio": 1,
                    "initialize_channel": 1,
                    "initialize_peripheral": 1
                },
                "PIO_Configure": {
                    "configure_pin": 1,
                    "configure_pio": 12
                },
                "_DAT_20070d94": {
                    "pin_config_array": 1
                },
                "_DAT_400e0614": {
                    "pio_c_imr": 1,
                    "pio_disable": 1,
                    "pio_enable_status_clear_register_0": 1,
                    "pio_pdr": 1,
                    "pio_pdr_reset": 1,
                    "pio_sodr": 1,
                    "pioa_output_disable": 1,
                    "reg_a": 1,
                    "register2": 1,
                    "some_register2": 1,
                    "temp_var2": 1
                },
                "_DAT_400e0618": {
                    "pio_c_isr": 1,
                    "pio_codr": 1,
                    "pio_enable": 2,
                    "pio_enable_status_register_0": 1,
                    "pio_per": 1,
                    "pioa_output_enable": 1,
                    "reg_a": 1,
                    "register1": 1,
                    "some_register1": 1,
                    "temp_var1": 1
                },
                "_DAT_400e0704": {
                    "pio_d_imr": 1,
                    "pio_enable_status_clear_register_1": 1,
                    "pio_idr_reset": 1,
                    "pio_odr": 1,
                    "pio_sodr": 1,
                    "piob_output_disable": 1,
                    "piopmc_disable": 1,
                    "reg_b": 1,
                    "register4": 1,
                    "some_register4": 1,
                    "temp_var4": 1
                },
                "_DAT_400e0708": {
                    "pio_codr": 1,
                    "pio_d_isr": 1,
                    "pio_disable": 1,
                    "pio_enable_status_register_1": 1,
                    "pio_oer": 1,
                    "piob_output_enable": 1,
                    "piopmc_enable": 1,
                    "reg_b": 1,
                    "register3": 1,
                    "some_register3": 1,
                    "temp_var3": 1
                },
                "adc_disable_channel": {
                    "disable_adc_channel": 1
                },
                "bVar5": {
                    "b_mode": 1,
                    "channel": 2,
                    "channel_config": 2,
                    "channel_mode": 1,
                    "channel_type": 4,
                    "config_type": 2,
                    "config_value": 1,
                    "gpio_number": 1,
                    "lower_nibble": 2,
                    "mode_bits": 2,
                    "mode_flag": 1,
                    "mode_low": 1,
                    "mode_low_bits": 1,
                    "mode_mask": 1,
                    "mode_type": 1,
                    "pin_group": 1,
                    "pin_mode": 4,
                    "pin_mode_lower": 1,
                    "pin_type": 1,
                    "pio_mode_type": 1
                },
                "bVar6": {
                    "adc_mode": 1,
                    "b_var": 1,
                    "channel_config": 2,
                    "channel_mode": 4,
                    "config_byte": 1,
                    "config_flags": 1,
                    "config_params": 1,
                    "current_config": 1,
                    "current_mode": 2,
                    "gpio_state": 1,
                    "mode_high": 1,
                    "mode_mask": 1,
                    "mode_value": 1,
                    "old_config": 1,
                    "original_channel_mode": 1,
                    "original_gpio_value": 1,
                    "pin_config": 1,
                    "pin_config_value": 1,
                    "pin_flags": 1,
                    "pin_group": 1,
                    "pin_info": 2,
                    "pin_mode": 1,
                    "pin_mode_upper": 1,
                    "pins": 1,
                    "value": 1
                },
                "iVar1": {
                    "result": 29,
                    "status": 2
                },
                "iVar7": {
                    "channel_offset": 2,
                    "config": 1,
                    "config_index": 14,
                    "config_offset": 1,
                    "i_var_pin": 1,
                    "index": 2,
                    "offset": 4,
                    "pin_config_address": 1,
                    "pin_config_index": 2,
                    "temp_index": 1,
                    "temp_var1": 1,
                    "temp_var4": 1
                },
                "iVar8": {
                    "config": 2,
                    "config_addr": 1,
                    "config_address": 3,
                    "config_data": 1,
                    "config_ptr": 1,
                    "config_register": 1,
                    "config_value": 3,
                    "i_var_config": 1,
                    "io_config": 2,
                    "pin_address": 1,
                    "pin_config": 4,
                    "pin_config_address": 1,
                    "pin_configuration": 1,
                    "pio": 2,
                    "pio_config": 4,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "var1": 1
                },
                "param_1": {
                    "channel": 6,
                    "channel_index": 13,
                    "pin_index": 7,
                    "pin_number": 4,
                    "port_number": 1
                },
                "param_2": {
                    "config": 2,
                    "config_index": 1,
                    "config_type": 3,
                    "configuration": 1,
                    "mode": 21,
                    "param": 1,
                    "pin_mode": 2
                },
                "pmc_enable_periph_clk": {
                    "enable_clock": 6,
                    "enable_peripheral_clock": 7
                },
                "uVar2": {
                    "channel_number": 1,
                    "clock": 1,
                    "mask": 1,
                    "peripheral_id": 1,
                    "pin": 1,
                    "pin_bit": 1,
                    "pin_index": 9,
                    "pin_index_value": 1,
                    "pin_mask": 5,
                    "pin_number": 3,
                    "pin_offset": 1,
                    "pio_mask": 1,
                    "port": 1,
                    "reg_value": 1,
                    "temp_var1": 1,
                    "value": 1
                },
                "uVar3": {
                    "command": 1,
                    "config_function": 1,
                    "config_mode": 2,
                    "config_option": 2,
                    "config_value": 3,
                    "configure_type": 1,
                    "configure_value": 2,
                    "io_type": 1,
                    "mode": 2,
                    "mode_value": 1,
                    "pin_attr": 1,
                    "pin_config": 1,
                    "pin_configuration": 1,
                    "pin_function": 1,
                    "pin_mode": 5,
                    "pio_mode": 2,
                    "pio_type": 1,
                    "temp_var2": 1,
                    "u_var3": 1
                },
                "uVar4": {
                    "bit_mask": 2,
                    "bitmask": 1,
                    "check_value": 1,
                    "configured_mask": 1,
                    "current_config": 1,
                    "current_value": 1,
                    "existing_config": 1,
                    "existing_mask": 1,
                    "mask": 8,
                    "pin_mask": 4,
                    "saved_mask": 1,
                    "temp": 3,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var3": 1,
                    "u_var4": 1
                }
            },
            "called": [
                "FUN_00080e18",
                "FUN_00080da0",
                "FUN_0008105c"
            ],
            "calling": [
                "FUN_000804a8",
                "FUN_00081318",
                "FUN_00080164"
            ],
            "code": "\n\n\nint configure_pin_00081210(int channel_index,int mode)\n\n{\n  int result;\n  uint pin_index;\n  undefined4 pin_mode;\n  uint mask;\n  byte channel_type;\n  byte channel_mode;\n  int config_index;\n  int pin_config;\n  \n  result = channel_index;\n  if ((&DAT_00084d24)[channel_index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[channel_index] & 0xf) == 4) {\n      result = disable_adc_channel(0x400c0000,(&DAT_00084d31)[channel_index * 0x1c]);\n    }\n    channel_mode = (&DAT_20070d94)[channel_index];\n    channel_type = channel_mode & 0xf;\n    if ((channel_type < 3) && (channel_mode != 0)) {\n      if (channel_type == 2) {\n        if (mode == 0) {\n          return result;\n        }\n      }\n      else if (channel_type == 1) {\n        if (mode == 2) {\n          return result;\n        }\n      }\n      else if (channel_type == 3) {\n        if (mode == 1) {\n          return result;\n        }\n        goto LAB_0008126c;\n      }\n    }\n    if (mode != 1) {\nLAB_0008126c:\n      if (mode == 0) {\n        result = channel_index * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),0);\n        channel_mode = (&DAT_20070d94)[channel_index] & 0xf0 | 2;\n      }\n      else {\n        if (mode != 2) {\n          return result;\n        }\n        result = channel_index * 0x1c;\n        enable_peripheral_clock(*(undefined4 *)(&DAT_00084d20 + result));\n        result = configure_pio(*(undefined4 *)(&DAT_00084d18 + result),3,\n                              *(undefined4 *)(&DAT_00084d1c + result),1);\n        channel_mode = (&DAT_20070d94)[channel_index] & 0xf0 | 1;\n      }\n      (&DAT_20070d94)[channel_index] = channel_mode;\n      return result;\n    }\n    config_index = channel_index * 0x1c;\n    pin_config = *(int *)(&DAT_00084d18 + config_index);\n    if (channel_mode >> 4 == 0) {\n      pin_mode = 4;\n    }\n    else {\n      pin_mode = 5;\n    }\n    result = configure_pio(pin_config,pin_mode,*(undefined4 *)(&DAT_00084d1c + config_index),\n                          *(undefined4 *)(&DAT_00084d28 + config_index));\n    (&DAT_20070d94)[channel_index] = (&DAT_20070d94)[channel_index] & 0xf0 | 3;\n    if (*(int *)(pin_config + 0x18) == -1) {\n      pin_index = *(uint *)(&DAT_00084d20 + config_index);\n      if (0x2c < pin_index) {\n        return 1;\n      }\n      if (pin_index < 0x20) {\n        pin_index = 1 << (pin_index & 0xff);\n        mask = _DAT_400e0618 & pin_index;\n        if (mask == pin_index) {\n          _DAT_400e0614 = mask;\n        }\n      }\n      else {\n        pin_index = 1 << (pin_index - 0x20 & 0xff);\n        mask = _DAT_400e0708 & pin_index;\n        if (mask == pin_index) {\n          _DAT_400e0704 = mask;\n        }\n      }\n      return 0;\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "configure_pin_00081210",
            "entrypoint": "0x00081210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081210": "configure_pin_00081210",
                "PIO_Configure": "configure_pio",
                "adc_disable_channel": "disable_adc_channel",
                "bVar5": "channel_type",
                "bVar6": "channel_mode",
                "iVar1": "result",
                "iVar7": "config_index",
                "iVar8": "pin_config",
                "param_1": "channel_index",
                "param_2": "mode",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "uVar2": "pin_index",
                "uVar3": "pin_mode",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081318": {
            "additional_data": {
                "FUN_00080d7a": {
                    "pin_mode": 14,
                    "pio_set_output": 2,
                    "set_output": 1,
                    "set_output_pin": 1,
                    "set_output_value": 1,
                    "set_port_output": 1
                },
                "FUN_00080e04": {
                    "calculate_mask": 1,
                    "get_output_data_status": 1,
                    "pin_mode": 1,
                    "pio_get_output_data_status": 1,
                    "pio_set_output": 14,
                    "set_pin_mode": 1,
                    "verify_pin": 1
                },
                "FUN_00081210": {
                    "get_pin_index": 1,
                    "get_pin_mode": 1,
                    "get_port": 1,
                    "pin_mode": 1,
                    "pio_get_output_data_status": 15,
                    "read_output": 1
                },
                "FUN_00081318": {
                    "configure_input_output": 1,
                    "configure_pin": 14,
                    "configure_pin_mode": 1,
                    "initialize_gpio": 1,
                    "initialize_output_pin": 1,
                    "initialize_pin_mode": 1,
                    "pin_mode_control": 1,
                    "set_output_data": 1,
                    "set_pin_mode": 1,
                    "set_pin_mode_and_data": 1,
                    "set_pin_mode_and_output": 2,
                    "set_pin_mode_and_output_data_status": 1,
                    "update_pin_mode": 4,
                    "update_pin_output_status": 1
                },
                "Mode": {
                    "mode": 1
                },
                "PIN_MODE_INPUT": {
                    "input_mode": 1
                },
                "PIN_MODE_OUTPUT": {
                    "output_mode": 1
                },
                "PIO_GetOutputDataStatus": {
                    "get_output_data_status": 1,
                    "get_port_output_status": 1
                },
                "PIO_SetOutput": {
                    "set_output": 1,
                    "set_port_output": 1
                },
                "PinMode": {
                    "pin_number": 1
                },
                "data": {
                    "data": 1
                },
                "gpioPort": {
                    "gpio_port": 1
                },
                "iVar1": {
                    "output_data_status": 11,
                    "output_status": 15,
                    "status": 5
                },
                "iVar3": {
                    "data_pin": 1,
                    "gpio_port": 1,
                    "gpio_ptr": 1,
                    "io_config": 1,
                    "io_port": 2,
                    "output_data_port": 1,
                    "output_pin": 3,
                    "pin_conf": 1,
                    "pin_config": 3,
                    "pin_config_index": 1,
                    "pin_data": 2,
                    "pin_handle": 1,
                    "pin_index": 1,
                    "pin_mapping": 1,
                    "pin_mode_index": 1,
                    "pin_port": 2,
                    "pio": 1,
                    "pio_address": 1,
                    "pio_handle": 2,
                    "port": 2,
                    "port_index": 1,
                    "port_number": 1
                },
                "outputStatus": {
                    "output_status": 1
                },
                "param": {
                    "param": 1
                },
                "paramValue": {
                    "param_value": 1
                },
                "param_1": {
                    "pin": 4,
                    "pin_index": 19,
                    "pin_number": 8
                },
                "param_2": {
                    "data_index": 1,
                    "digital_value": 1,
                    "mode": 7,
                    "output_status": 1,
                    "param2_value": 2,
                    "param_value": 1,
                    "pin_config": 1,
                    "pin_mode": 7,
                    "pin_mode_mask": 1,
                    "pin_value": 2,
                    "state": 2,
                    "value": 5
                },
                "param_3": {
                    "additional_param": 1,
                    "mode": 1,
                    "param": 15,
                    "param3": 6,
                    "param3_value": 2,
                    "param_value": 4,
                    "pin_mode_value": 1,
                    "unknown": 1
                },
                "pinIndex": {
                    "pin_index": 2
                },
                "pinMode": {
                    "configure_pin_mode": 1,
                    "mode": 1,
                    "set_pin_mode": 1
                },
                "pinModeMask": {
                    "pin_mode_mask": 1
                },
                "pinPort": {
                    "pin_port": 1
                },
                "pinValue": {
                    "pin_value": 1
                },
                "uVar2": {
                    "data": 1,
                    "desired_output": 1,
                    "output_config": 1,
                    "output_data": 25,
                    "output_data_status": 1,
                    "output_value": 1,
                    "pin_value": 1
                }
            },
            "called": [
                "FUN_00081210",
                "FUN_00080e04",
                "FUN_00080d7a"
            ],
            "calling": [
                "FUN_000801b0",
                "FUN_000804a8",
                "FUN_00080ae4",
                "FUN_00080258",
                "FUN_00080164"
            ],
            "code": "\nvoid configure_pin_mode_00081318(int pin_index,int mode,undefined4 param)\n\n{\n  int output_status;\n  undefined4 output_data;\n  int output_pin;\n  \n  if ((&DAT_00084d24)[pin_index * 0x1c] != '\\0') {\n    if (((&DAT_20070d94)[pin_index] & 0xf) == 5) {\n      configure_pin_mode_00081318(pin_index,1,param,5,pin_index,mode,param);\n    }\n    (&DAT_20070d94)[pin_index] = (&DAT_20070d94)[pin_index] & 0xf | (byte)(mode << 4);\n    output_pin = *(int *)(&DAT_00084d18 + pin_index * 0x1c);\n    output_data = *(undefined4 *)(&DAT_00084d1c + pin_index * 0x1c);\n    output_status = get_port_output_status(output_pin,output_data);\n    if (output_status == 0) {\n      if (mode != 0) {\n        *(undefined4 *)(output_pin + 100) = output_data;\n        return;\n      }\n      *(undefined4 *)(output_pin + 0x60) = output_data;\n      return;\n    }\n    set_port_output(output_pin,output_data,mode,0,1);\n  }\n  return;\n}\n\n",
            "current_name": "configure_pin_mode_00081318",
            "entrypoint": "0x00081318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081318": "configure_pin_mode_00081318",
                "Mode": "mode",
                "PIO_GetOutputDataStatus": "get_port_output_status",
                "PIO_SetOutput": "set_port_output",
                "iVar1": "output_status",
                "iVar3": "output_pin",
                "param_1": "pin_index",
                "param_2": "mode",
                "param_3": "param",
                "pinMode": "configure_pin_mode",
                "uVar2": "output_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081388": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 1,
                    "elf_relocations": 1,
                    "rel_array": 8,
                    "rel_entries": 1,
                    "relocation_array": 5,
                    "relocation_data_array": 1,
                    "relocation_entries": 3,
                    "relocation_info_array": 1,
                    "relocation_list": 1,
                    "relocation_table": 6
                },
                "FUN_00081388": {
                    "decrement_and_call_function": 2,
                    "decrement_and_call_if_zero": 1,
                    "decrement_and_execute_if_zero": 1,
                    "decrement_if_equal_zero": 1,
                    "decrement_if_not_max": 1,
                    "decrement_rel_info_and_call_function": 1,
                    "execute_callback_if_last_relocation": 1,
                    "execute_callback_if_rel_info_decrements_to_zero": 1,
                    "execute_elf32_rel_function": 1,
                    "execute_first_valid_relocation": 1,
                    "execute_function_if_condition_met": 2,
                    "execute_function_if_r_info_zero": 1,
                    "execute_function_if_valid": 1,
                    "execute_if_condition_is_met": 2,
                    "execute_if_last_r_info_is_zero": 1,
                    "execute_if_last_rel_entry_is_zero": 1,
                    "execute_if_last_rel_info_not_minus_one": 1,
                    "execute_if_last_relocation_info_zero": 1,
                    "execute_if_non_zero": 1,
                    "execute_if_r_info_equals_zero": 1,
                    "execute_if_r_info_is_zero": 4,
                    "execute_if_rel_array_element_is_not_ff": 1,
                    "execute_if_rel_info_zero": 1,
                    "execute_if_valid_rel_offset": 1,
                    "perform_action_if_condition_met": 1
                },
                "code": {
                    "callback": 1,
                    "function_to_execute": 2
                },
                "r_info": {
                    "entry_info": 1,
                    "info": 7,
                    "rel_info": 3,
                    "relocation_info": 11
                },
                "r_offset": {
                    "entry_offset": 1,
                    "offset": 8,
                    "rel_offset": 2,
                    "relative_offset": 1,
                    "relocation_offset": 10
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid execute_if_last_r_info_is_zero_00081388(void)\n\n{\n  if ((rel_array[6].relocation_info != 0xffffffff) &&\n     (rel_array[6].relocation_info = rel_array[6].relocation_info - 1,\n     rel_array[6].relocation_info == 0)) {\n    (*(function_to_execute *)((int)&rel_array[0].relocation_offset + 1))();\n  }\n  return;\n}\n\n",
            "current_name": "execute_if_last_r_info_is_zero_00081388",
            "entrypoint": "0x00081388",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081388": "execute_if_last_r_info_is_zero_00081388",
                "code": "function_to_execute",
                "r_info": "relocation_info",
                "r_offset": "relocation_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813a8": {
            "additional_data": {
                "DAT_": {
                    "": 2,
                    "unchanged": 2
                },
                "DAT_000813a8": {
                    "buffer_size": 1
                },
                "DAT_00081988": {
                    "padding_value": 1
                },
                "DAT_0008198c": {
                    "padding_value": 1
                },
                "FREERAM": {
                    "clear_memory": 1
                },
                "FUN_000813a8": {
                    "clear_memory": 4,
                    "initialize_buffer": 7,
                    "initialize_memory": 19
                },
                "PTR_": {
                    "": 2,
                    "unchanged": 2
                },
                "PTR_000813a8": {
                    "buffer": 1
                },
                "PTR_PARAM_1": {
                    "buffer": 1
                },
                "memset": {
                    "clear_block": 1,
                    "clear_memory": 1,
                    "initialize": 1,
                    "set_buffer_to_value": 1
                },
                "param_1": {
                    "buffer": 16,
                    "memory": 4,
                    "memory_address": 1,
                    "memory_block": 3,
                    "memory_buffer": 6,
                    "memory_ptr": 1
                },
                "param_2": {
                    "byte": 1,
                    "byte_value": 2,
                    "condition": 1,
                    "data": 1,
                    "flag": 2,
                    "padding": 3,
                    "param2": 1,
                    "unused": 3,
                    "unused_flag": 1,
                    "unused_param": 1,
                    "value": 7
                },
                "param_3": {
                    "buffer_size": 4,
                    "length": 4,
                    "param3": 1,
                    "size": 13,
                    "value": 1
                },
                "undefined": {
                    "one_byte": 1
                },
                "undefined4": {
                    "data_type": 2,
                    "four_bytes": 1,
                    "ptr": 1,
                    "uint32": 4,
                    "uint32_t": 1
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nint initialize_memory_000813a8(int buffer)\n\n{\n  set_buffer_to_value(buffer,0,0x80);\n  *(uint32 *)(buffer + 0x80) = 0;\n  *(uint32 *)(buffer + 0x84) = 0;\n  return buffer;\n}\n\n",
            "current_name": "initialize_memory_000813a8",
            "entrypoint": "0x000813a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813a8": "initialize_memory_000813a8",
                "memset": "set_buffer_to_value",
                "param_1": "buffer",
                "undefined": "one_byte",
                "undefined4": "uint32"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813c2": {
            "additional_data": {
                "FUN_000813c2": {
                    "update_and_store_byte": 1,
                    "update_and_store_data": 2,
                    "update_and_store_value": 2,
                    "update_array": 1,
                    "update_buffer": 16,
                    "update_data": 3,
                    "update_data_buffer": 1,
                    "update_index_and_store_data": 1,
                    "update_index_and_store_value": 1,
                    "update_param_and_index": 1,
                    "update_parameter": 1,
                    "update_value_in_buffer": 1
                },
                "param_1": {
                    "array_pointer": 1,
                    "base_address": 3,
                    "buffer": 12,
                    "buffer_addr": 1,
                    "buffer_address": 3,
                    "buffer_ptr": 1,
                    "data": 1,
                    "data_address": 2,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "memory_base_address": 1
                },
                "param_2": {
                    "data": 3,
                    "new_byte_value": 1,
                    "new_data": 2,
                    "new_param_value": 1,
                    "new_value": 17,
                    "value": 7
                },
                "uVar1": {
                    "current_index": 4,
                    "index": 1,
                    "new_index": 7,
                    "next_index": 7,
                    "updated_index": 12
                }
            },
            "called": [],
            "calling": [],
            "code": "\nvoid update_value_in_buffer_000813c2(int buffer,undefined new_value)\n\n{\n  uint updated_index;\n  \n  updated_index = *(int *)(buffer + 0x80) + 1U & 0x7f;\n  if (updated_index != *(uint *)(buffer + 0x84)) {\n    *(undefined *)(buffer + *(int *)(buffer + 0x80)) = new_value;\n    *(uint *)(buffer + 0x80) = updated_index;\n  }\n  return;\n}\n\n",
            "current_name": "update_value_in_buffer_000813c2",
            "entrypoint": "0x000813c2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813c2": "update_value_in_buffer_000813c2",
                "param_1": "buffer",
                "param_2": "new_value",
                "uVar1": "updated_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000813e4": {
            "additional_data": {
                "0x10": {
                    "base_offset": 1,
                    "offset": 2
                },
                "0x7f": {
                    "mask": 1
                },
                "0x80": {
                    "first_offset": 4
                },
                "0x84": {
                    "second_offset": 4
                },
                "DAT_1": {
                    "constant_1": 1
                },
                "DAT_2": {
                    "constant_2": 1
                },
                "FUN_000813e4": {
                    "calculate_difference": 26,
                    "calculate_difference_and_mask": 2,
                    "calculate_offset": 1,
                    "get_difference_mod_128": 1,
                    "subtract_and_adjust": 1
                },
                "PTR_1": {
                    "dynamic_ptr": 1,
                    "pointer_1": 1
                },
                "PTR_2": {
                    "offset_ptr": 1,
                    "pointer_2": 1
                },
                "PTR_x": {
                    "pointer_x": 2
                },
                "PTR_y": {
                    "pointer_y": 2
                },
                "param_1": {
                    "base_address": 1,
                    "input": 4,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 24
                }
            },
            "called": [],
            "calling": [
                "FUN_00080ce0"
            ],
            "code": "\nuint calculate_difference_and_mask_000813e4(int input_value)\n\n{\n  return *(int *)(*(int *)(input_value + 0x10) + 0x80) - *(int *)(*(int *)(input_value + 0x10) + 0x84) &\n         0x7f;\n}\n\n",
            "current_name": "calculate_difference_and_mask_000813e4",
            "entrypoint": "0x000813e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000813e4": "calculate_difference_and_mask_000813e4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081454": {
            "additional_data": {
                "FUN_00081454": {
                    "handle_data_operation": 1,
                    "store_data": 1,
                    "update_data": 17,
                    "update_parameter_value": 3,
                    "update_status": 1,
                    "update_value": 5,
                    "update_value_at_address": 1,
                    "update_value_in_array": 1,
                    "write_value_to_memory": 1
                },
                "iVar1": {
                    "current_value": 1,
                    "data": 1,
                    "data_address": 1,
                    "data_block": 1,
                    "data_info": 1,
                    "data_offset": 4,
                    "data_pointer": 3,
                    "data_section_address": 1,
                    "data_struct": 1,
                    "element": 1,
                    "element_offset": 1,
                    "first_int_var": 1,
                    "first_value": 1,
                    "internal_value": 1,
                    "pointer1": 1,
                    "ptr1": 3,
                    "ptr_to_data": 1,
                    "ptr_to_value": 1,
                    "ptr_value": 1,
                    "struct_address": 1,
                    "struct_offset": 1,
                    "struct_pointer": 1,
                    "struct_ptr": 1,
                    "structure_offset": 1
                },
                "param_1": {
                    "array_pointer": 1,
                    "base_address": 1,
                    "container": 1,
                    "data": 2,
                    "data_address": 4,
                    "data_index": 1,
                    "data_pointer": 10,
                    "data_ptr": 4,
                    "data_struct": 3,
                    "input": 1,
                    "input_struct": 1,
                    "memory_address": 1,
                    "source_address": 1
                },
                "param_2": {
                    "data": 1,
                    "new_data": 4,
                    "new_status": 1,
                    "new_value": 22,
                    "value": 3
                },
                "uVar2": {
                    "masked_index": 1,
                    "modified_index": 2,
                    "new_index": 7,
                    "new_offset": 2,
                    "new_value": 2,
                    "next_index": 3,
                    "second_uint_var": 1,
                    "updated_index": 3,
                    "updated_value": 10
                }
            },
            "called": [],
            "calling": [],
            "code": "\nundefined4 update_data_00081454(int data_pointer,undefined4 new_value)\n\n{\n  int data_offset;\n  uint updated_value;\n  \n  data_offset = *(int *)(data_pointer + 0x14);\n  if ((*(int *)(*(int *)(data_pointer + 0x18) + 0x14) << 0x1e < 0) &&\n     (*(int *)(data_offset + 0x84) == *(int *)(data_offset + 0x80))) {\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 0x1c) = new_value;\n  }\n  else {\n    updated_value = *(int *)(data_offset + 0x80) + 1U & 0x8000007f;\n    if ((int)updated_value < 0) {\n      updated_value = (updated_value - 1 | 0xffffff80) + 1;\n    }\n    do {\n    } while (*(uint *)(data_offset + 0x84) == updated_value);\n    *(char *)(data_offset + *(int *)(data_offset + 0x80)) = (char)new_value;\n    *(uint *)(*(int *)(data_pointer + 0x14) + 0x80) = updated_value;\n    *(undefined4 *)(*(int *)(data_pointer + 0x18) + 8) = 2;\n  }\n  return 1;\n}\n\n",
            "current_name": "update_data_00081454",
            "entrypoint": "0x00081454",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081454": "update_data_00081454",
                "iVar1": "data_offset",
                "param_1": "data_pointer",
                "param_2": "new_value",
                "uVar2": "updated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000814e4": {
            "additional_data": {
                "FUN_000814e4": {
                    "initialize_data": 1,
                    "initialize_param": 2,
                    "initialize_param1": 1,
                    "initialize_param_values": 1,
                    "initialize_parameters": 16,
                    "initialize_params": 9,
                    "set_parameters": 1
                },
                "PTR_FUN_00081454_1_000857a8": {
                    "function_pointer": 1
                },
                "param_1": {
                    "data_pointer": 1,
                    "output": 1,
                    "output_array": 4,
                    "output_params": 1,
                    "param_array": 5,
                    "parameter_array": 2,
                    "parameters": 7,
                    "parameters_array": 1,
                    "params": 5,
                    "params_array": 3,
                    "result": 1
                },
                "param_2": {
                    "input_param1": 1,
                    "input_value": 2,
                    "input_value1": 1,
                    "param2": 1,
                    "param_2_value": 1,
                    "param_value1": 2,
                    "param_value2": 1,
                    "value": 1,
                    "value1": 14,
                    "value2": 7
                },
                "param_3": {
                    "flag": 6,
                    "input_param2": 1,
                    "input_value2": 1,
                    "param3": 1,
                    "param_3_value": 1,
                    "param_value2": 2,
                    "param_value3": 1,
                    "value2": 11,
                    "value3": 7
                },
                "param_4": {
                    "data_a": 1,
                    "input_param3": 1,
                    "input_value3": 1,
                    "param4": 1,
                    "param_4_value": 1,
                    "param_value3": 2,
                    "param_value4": 1,
                    "value1": 2,
                    "value2": 3,
                    "value3": 11,
                    "value4": 7
                },
                "param_5": {
                    "data_b": 1,
                    "input_param4": 1,
                    "input_value4": 1,
                    "param5": 1,
                    "param_5_value": 1,
                    "param_value4": 2,
                    "param_value5": 1,
                    "value2": 2,
                    "value3": 3,
                    "value4": 11,
                    "value5": 7
                },
                "param_6": {
                    "data_c": 1,
                    "input_param5": 1,
                    "input_value5": 1,
                    "param6": 1,
                    "param_6_value": 1,
                    "param_value5": 2,
                    "param_value6": 1,
                    "value3": 2,
                    "value4": 3,
                    "value5": 11,
                    "value6": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_000815d4",
                "FUN_00080c0c"
            ],
            "code": "\nvoid initialize_parameters_000814e4(undefined4 *parameters,undefined4 value1,undefined value2,undefined4 value3,\n                 undefined4 value4,undefined4 value5)\n\n{\n  parameters[1] = 0;\n  parameters[2] = 1000;\n  parameters[6] = value1;\n  *parameters = &PTR_FUN_00081454_1_000857a8;\n  *(undefined *)(parameters + 7) = value2;\n  parameters[4] = value4;\n  parameters[8] = value3;\n  parameters[5] = value5;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_000814e4",
            "entrypoint": "0x000814e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000814e4": "initialize_parameters_000814e4",
                "param_1": "parameters",
                "param_2": "value1",
                "param_3": "value2",
                "param_4": "value3",
                "param_5": "value4",
                "param_6": "value5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081508": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "array1": 1,
                    "array_variable": 1,
                    "elf_rel_array": 1,
                    "relocation_array": 4,
                    "relocation_table": 3
                },
                "FUN_00081508": {
                    "configure_periph": 1,
                    "configure_peripheral": 1,
                    "enable_peripheral_clock": 1,
                    "init_peripheral": 1,
                    "initialize_peripheral": 27
                },
                "iVar1": {
                    "handler": 1,
                    "index1": 1,
                    "offset": 5,
                    "pmc_address": 1,
                    "register_value": 1,
                    "temp_var1": 9,
                    "temp_variable": 3,
                    "temp_variable1": 3,
                    "tmp_var": 1,
                    "var1": 2,
                    "variable1": 3
                },
                "param_1": {
                    "address": 3,
                    "base_adddress": 1,
                    "base_address": 7,
                    "config": 1,
                    "config_address": 2,
                    "device_address": 1,
                    "device_id": 1,
                    "init_param1": 1,
                    "param": 2,
                    "param1": 5,
                    "param_1": 1,
                    "param_address": 1,
                    "peripheral_address": 5
                },
                "param_2": {
                    "divider": 1,
                    "division_factor": 2,
                    "factor": 4,
                    "init_param2": 1,
                    "param": 2,
                    "param2": 7,
                    "param_2": 1,
                    "param_divisor": 3,
                    "param_length": 1,
                    "param_size": 3,
                    "param_value": 4,
                    "parameter2": 1,
                    "scaling_factor": 1
                },
                "param_3": {
                    "config_value": 3,
                    "constant_value": 1,
                    "init_param3": 1,
                    "init_value": 1,
                    "initial_value": 2,
                    "param3": 8,
                    "param_3": 1,
                    "param_flag": 1,
                    "param_value": 4,
                    "parameter": 1,
                    "parameter3": 1,
                    "value": 7
                },
                "pmc_enable_periph_clk": {
                    "enable_peripheral_clock": 1
                },
                "puVar2": {
                    "config_pointer": 2,
                    "config_registers": 1,
                    "dev_config": 1,
                    "peripheral": 1,
                    "peripheral_data": 1,
                    "peripheral_register": 1,
                    "pointer": 1,
                    "pointer_var": 3,
                    "pointer_var1": 1,
                    "pointer_var2": 1,
                    "pointer_variable": 1,
                    "pointer_variable1": 4,
                    "ptr2": 1,
                    "ptr_var": 1,
                    "ptr_var2": 2,
                    "register_array": 1,
                    "register_pointer": 3,
                    "register_ptr": 1,
                    "registers": 3,
                    "var2": 1
                },
                "r_offset": {
                    "offset": 1
                }
            },
            "called": [
                "FUN_00080e18"
            ],
            "calling": [],
            "code": "\nvoid initialize_peripheral_00081508(int base_address,uint param2,undefined4 param3)\n\n{\n  int temp_var1;\n  undefined4 *pointer_variable1;\n  \n  enable_peripheral_clock(*(undefined4 *)(base_address + 0x20));\n  pointer_variable1 = *(undefined4 **)(base_address + 0x18);\n  pointer_variable1[0x48] = 0x202;\n  *pointer_variable1 = 0xac;\n  pointer_variable1[1] = param3;\n  pointer_variable1[8] = relocation_array[6].offset / param2 >> 4;\n  pointer_variable1[3] = 0xffffffff;\n  pointer_variable1[2] = 0x61;\n  *(int *)(((uint)(int)(char)*(byte *)(base_address + 0x1c) >> 5) * 4 + -0x1fff1f00) =\n       1 << (uint)(*(byte *)(base_address + 0x1c) & 0x1f);\n  temp_var1 = *(int *)(base_address + 0x10);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  temp_var1 = *(int *)(base_address + 0x14);\n  *(undefined4 *)(temp_var1 + 0x84) = 0;\n  *(undefined4 *)(temp_var1 + 0x80) = 0;\n  *pointer_variable1 = 0x50;\n  return;\n}\n\n",
            "current_name": "initialize_peripheral_00081508",
            "entrypoint": "0x00081508",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_00081508": "initialize_peripheral_00081508",
                "iVar1": "temp_var1",
                "param_1": "base_address",
                "param_2": "param2",
                "param_3": "param3",
                "pmc_enable_periph_clk": "enable_peripheral_clock",
                "puVar2": "pointer_variable1",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815d4": {
            "additional_data": {
                "FUN_000814e4": {
                    "configure_uart": 5,
                    "initialize": 1,
                    "process_data": 3,
                    "process_uart_data": 1,
                    "send_data_to_uart": 1,
                    "send_uart_data": 1
                },
                "FUN_000815d4": {
                    "initialize_uart": 28,
                    "initialize_uart_and_set_parameters": 1,
                    "initialize_uart_class": 2
                },
                "PTR_FUN_00081454_1_000857d8": {
                    "function_pointer": 2,
                    "uart_class": 1,
                    "uart_function": 1,
                    "uart_function_ptr": 1
                },
                "param_1": {
                    "buffer": 1,
                    "config_params": 1,
                    "function_data": 1,
                    "output_buffer": 2,
                    "output_pointer": 1,
                    "uart": 1,
                    "uart_buffer": 1,
                    "uart_class": 1,
                    "uart_class_instance": 1,
                    "uart_config": 1,
                    "uart_data": 1,
                    "uart_handler": 1,
                    "uart_instance": 13,
                    "uart_object": 3,
                    "uart_params": 1,
                    "uart_pointer": 1
                },
                "param_2": {
                    "config_data": 1,
                    "config_param": 1,
                    "config_value": 1,
                    "data": 3,
                    "data_value": 1,
                    "initial_value": 1,
                    "input_data": 1,
                    "input_parameter": 1,
                    "input_value": 4,
                    "param": 9,
                    "param2": 1,
                    "param_to_store": 1,
                    "param_value": 3,
                    "uart_param": 1,
                    "value": 2
                },
                "param_3": {
                    "byte_param": 1,
                    "config": 1,
                    "param3": 2,
                    "param_flag": 1,
                    "undefined3": 1,
                    "undefined_param": 1,
                    "undefined_param3": 1,
                    "unknown": 1,
                    "unknown_param": 2,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "void_param": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "another_param": 1,
                    "config_param": 1,
                    "initialize_param": 1,
                    "param": 1,
                    "param4": 2,
                    "param_data": 1,
                    "param_to_pass": 1,
                    "uart_setting": 1,
                    "undefined_param4": 1,
                    "unknown_param2": 1,
                    "unknown_parameter": 1,
                    "unknown_value": 1,
                    "unused_parameter2": 1
                }
            },
            "called": [
                "FUN_000814e4"
            ],
            "calling": [
                "FUN_00080c0c"
            ],
            "code": "\nundefined4 * initialize_uart_class_000815d4(undefined4 *uart_instance,undefined4 param)\n\n{\n  UARTClass();\n  *uart_instance = &PTR_FUN_00081454_1_000857d8;\n  uart_instance[9] = param;\n  return uart_instance;\n}\n\n",
            "current_name": "initialize_uart_class_000815d4",
            "entrypoint": "0x000815d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815d4": "initialize_uart_class_000815d4",
                "param_1": "uart_instance",
                "param_2": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815f8": {
            "additional_data": {
                "FUN_000815f8": {
                    "bitwise_or_shift": 1,
                    "bitwise_or_shift_left": 1,
                    "combine_and_shift": 3,
                    "combine_bits": 2,
                    "combine_bytes": 3,
                    "combine_ints_with_shift": 1,
                    "combine_numbers": 1,
                    "combine_param_and_shift": 1,
                    "combine_param_with_shifted_value": 1,
                    "combine_params": 4,
                    "combine_shift_and_or": 1,
                    "combine_values": 8,
                    "combine_values_with_shift": 1,
                    "combine_with_shift": 1,
                    "merge_with_shift": 1
                },
                "param_1": {
                    "first_value": 1,
                    "input": 1,
                    "input1": 3,
                    "input_byte": 1,
                    "input_int": 1,
                    "input_value": 8,
                    "offset": 1,
                    "shifted_value": 1,
                    "value": 1,
                    "value1": 12
                },
                "param_1_shifted": {
                    "shifted_input": 1
                },
                "param_2": {
                    "bit_mask": 2,
                    "bitmask": 2,
                    "data": 1,
                    "existing_int": 1,
                    "flag": 2,
                    "input2": 3,
                    "mask": 1,
                    "original_value": 2,
                    "result_byte": 1,
                    "second_value": 1,
                    "shifted_value": 1,
                    "value": 1,
                    "value2": 12
                }
            },
            "called": [],
            "calling": [
                "FUN_00080410"
            ],
            "code": "\nuint combine_values_with_shift_000815f8(int value1,uint value2)\n\n{\n  return value2 | value1 << 8;\n}\n\n",
            "current_name": "combine_values_with_shift_000815f8",
            "entrypoint": "0x000815f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815f8": "combine_values_with_shift_000815f8",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000815fe": {
            "additional_data": {
                "FUN_000815fe": {
                    "deallocate_memory": 1,
                    "free_and_return": 2,
                    "free_and_return_pointer": 2,
                    "free_memory": 22,
                    "free_memory_and_return": 1,
                    "free_memory_and_update_pointer": 1,
                    "free_memory_block": 1,
                    "free_pointer": 1
                },
                "FUN_00081e04": {
                    "call_sub_function": 1,
                    "cleanup": 1,
                    "do_something": 1,
                    "free_memory": 1,
                    "log_memory_free": 1,
                    "perform_operation": 1,
                    "print_status": 2,
                    "process_block": 1,
                    "release_resource": 3,
                    "releasing_memory": 1,
                    "reverse": 1,
                    "reverse_operation": 1,
                    "reverse_order": 1,
                    "reverse_some_data": 1,
                    "reverse_something": 1
                },
                "param_1": {
                    "allocated_memory": 1,
                    "data": 1,
                    "memory": 1,
                    "memory_address": 1,
                    "memory_block": 14,
                    "memory_pointer": 3,
                    "memory_ptr": 2,
                    "memory_to_free": 3,
                    "pointer": 3,
                    "ptr": 1,
                    "ptr_to_free": 1
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [],
            "code": "\nundefined4 * free_memory_and_update_pointer_000815fe(undefined4 *memory_block)\n\n{\n  free(*memory_block);\n  return memory_block;\n}\n\n",
            "current_name": "free_memory_and_update_pointer_000815fe",
            "entrypoint": "0x000815fe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000815fe": "free_memory_and_update_pointer_000815fe",
                "param_1": "memory_block"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008160c": {
            "additional_data": {
                "FUN_0008160c": {
                    "clear_memory": 3,
                    "reset_and_free_memory": 1,
                    "reset_data": 1,
                    "reset_function": 1,
                    "reset_memory": 5,
                    "reset_param": 3,
                    "reset_param1": 1,
                    "reset_parameter": 3,
                    "reset_parameters": 8,
                    "reset_params": 2,
                    "reset_values": 3
                },
                "FUN_00081e04": {
                    "cleanup": 1,
                    "clear_data": 1,
                    "deallocate_memory": 1,
                    "free_memory": 3,
                    "helper_function": 2,
                    "reset_helper": 1,
                    "reset_value": 1,
                    "sub_function": 3,
                    "uninitialized_memory": 1
                },
                "free": {
                    "release_memory": 1
                },
                "param_1": {
                    "array": 4,
                    "array_pointer": 1,
                    "memory": 5,
                    "memory_ptr": 1,
                    "p_data": 1,
                    "param": 6,
                    "parameter": 3,
                    "parameters": 5,
                    "params": 2,
                    "values": 1
                }
            },
            "called": [
                "FUN_00081e04"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid reset_parameters_0008160c(int *param)\n\n{\n  if (*param != 0) {\n    release_memory();\n  }\n  *param = 0;\n  param[2] = 0;\n  param[1] = 0;\n  return;\n}\n\n",
            "current_name": "reset_parameters_0008160c",
            "entrypoint": "0x0008160c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008160c": "reset_parameters_0008160c",
                "free": "release_memory",
                "param_1": "param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081622": {
            "additional_data": {
                "FNV_00012345": {
                    "new_array_pointer": 1
                },
                "FNV_00012346": {
                    "new_size": 1
                },
                "FUM_000825a0": {
                    "initialize_array": 1
                },
                "FUN_00081622": {
                    "expand_and_update_array": 1,
                    "realloc_and_assign": 1,
                    "realloc_and_update_array": 1,
                    "reallocate_memory_and_store_size": 1,
                    "resize_and_copy_array": 2,
                    "resize_and_store_array": 1,
                    "resize_array": 22,
                    "resize_int_array": 2
                },
                "FUN_000825a0": {
                    "do_something": 4,
                    "initialize_array": 2,
                    "some_other_function": 1,
                    "sub_function": 1
                },
                "iVar1": {
                    "new_array": 13,
                    "new_array_pointer": 8,
                    "new_array_ptr": 4,
                    "new_memory_address": 1,
                    "resized_array": 1,
                    "result": 2
                },
                "param_1": {
                    "array": 15,
                    "array_pointer": 9,
                    "array_ptr": 5,
                    "pointer": 1,
                    "pointer_to_memory": 1
                },
                "param_2": {
                    "new_size": 26,
                    "size": 5
                },
                "param_3": {
                    "alignment": 1,
                    "arg1": 1,
                    "arg3": 8,
                    "element_size": 7,
                    "extra_param1": 1,
                    "mem_param1": 1,
                    "old_size": 2,
                    "param3": 7,
                    "param_3": 1,
                    "size1": 1,
                    "size_of_type": 1
                },
                "param_4": {
                    "alignment": 6,
                    "arg2": 1,
                    "arg4": 8,
                    "clear_size": 1,
                    "element_size": 1,
                    "extra_param2": 1,
                    "extra_space": 1,
                    "mem_param2": 1,
                    "padding": 2,
                    "param4": 7,
                    "param_4": 1,
                    "size2": 1
                }
            },
            "called": [
                "FUN_000825a0"
            ],
            "calling": [
                "FUN_0008163a"
            ],
            "code": "\nint resize_and_copy_array_00081622(int *array,int new_size,undefined4 arg3,undefined4 arg4)\n\n{\n  int new_array;\n  \n  new_array = realloc(*array,new_size + 1,arg3,arg4,arg4);\n  if (new_array != 0) {\n    *array = new_array;\n    array[1] = new_size;\n    new_array = 1;\n  }\n  return new_array;\n}\n\n",
            "current_name": "resize_and_copy_array_00081622",
            "entrypoint": "0x00081622",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081622": "resize_and_copy_array_00081622",
                "iVar1": "new_array",
                "param_1": "array",
                "param_2": "new_size",
                "param_3": "arg3",
                "param_4": "arg4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008163a": {
            "additional_data": {
                "FUN_0008163a": {
                    "check_and_adjust_buffer": 1,
                    "check_and_change_buffer": 1,
                    "check_and_initialize_buffer": 1,
                    "check_and_modify_buffer": 2,
                    "check_and_update_buffer": 13,
                    "check_buffer": 4,
                    "check_buffer_and_change": 2,
                    "check_buffer_availability": 1,
                    "check_buffer_size": 1,
                    "check_buffer_validity": 2,
                    "is_valid_buffer": 1,
                    "validate_and_modify_buffer": 1,
                    "validate_parameters": 1
                },
                "iVar1": {
                    "change_result": 5,
                    "change_status": 1,
                    "result": 17,
                    "status": 1
                },
                "param_1": {
                    "buffer": 29,
                    "buffer_parameter": 1,
                    "buffer_pointer": 1
                },
                "param_2": {
                    "buffer_length": 1,
                    "buffer_size": 6,
                    "desired_size": 2,
                    "length": 1,
                    "required_size": 3,
                    "size": 16,
                    "size_limit": 1,
                    "threshold": 1
                }
            },
            "called": [
                "FUN_00081622"
            ],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nundefined4 check_and_update_buffer_0008163a(int *buffer,uint size)\n\n{\n  int result;\n  \n  if ((*buffer == 0) || ((uint)buffer[1] < size)) {\n    result = changeBuffer(buffer);\n    if (result == 0) {\n      return 0;\n    }\n    if (buffer[2] == 0) {\n      *(undefined *)*buffer = 0;\n    }\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_update_buffer_0008163a",
            "entrypoint": "0x0008163a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008163a": "check_and_update_buffer_0008163a",
                "iVar1": "result",
                "param_1": "buffer",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008165c": {
            "additional_data": {
                "FUN_0008160c": {
                    "invalidate": 1
                },
                "FUN_0008163a": {
                    "reserve": 1
                },
                "FUN_0008165c": {
                    "copy_and_validate": 1,
                    "copy_string_and_update_length": 1,
                    "copy_string_to_param": 1,
                    "initialize_data": 2,
                    "initialize_resource": 1,
                    "modify_and_copy_string": 1,
                    "process_data": 6,
                    "process_input_string": 1,
                    "reserve_or_invalidate": 1,
                    "update_config": 1,
                    "update_data": 6,
                    "update_database_record": 1,
                    "update_param": 1,
                    "update_parameter": 1,
                    "validate_and_copy": 1,
                    "validate_and_copy_string": 2
                },
                "FUN_00082994": {
                    "copy_data": 1
                },
                "iVar1": {
                    "allocation_status": 1,
                    "reservation_result": 6,
                    "reservation_status": 7,
                    "reserve_result": 2,
                    "reserved": 2,
                    "reserved_status": 1,
                    "result": 6
                },
                "invalidate": {
                    "clear_output_arr": 1,
                    "free_memory": 1
                },
                "param_1": {
                    "buffer": 2,
                    "config": 1,
                    "data": 10,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "output_arr": 1,
                    "output_array": 4,
                    "output_param": 1,
                    "param_array": 1,
                    "parameter_array": 1,
                    "record": 1,
                    "res_data": 1,
                    "resource_ptr": 1,
                    "result_pointer": 1,
                    "string_buffer": 1,
                    "string_ptr": 1
                },
                "param_2": {
                    "data": 1,
                    "input_str": 1,
                    "input_string": 6,
                    "new_name": 1,
                    "source": 10,
                    "source_str": 1,
                    "source_string": 9,
                    "source_text": 1,
                    "string": 1
                },
                "param_3": {
                    "buffer_size": 1,
                    "input_length": 1,
                    "input_size": 2,
                    "input_value": 3,
                    "length": 7,
                    "new_value": 2,
                    "size": 11,
                    "source_length": 1,
                    "source_string_length": 1,
                    "string_length": 2
                },
                "reserve": {
                    "allocate_memory": 1,
                    "check_available_space": 1
                }
            },
            "called": [
                "FUN_0008160c",
                "FUN_0008163a",
                "FUN_00082994"
            ],
            "calling": [
                "FUN_00081682"
            ],
            "code": "\nundefined4 * initialize_resource_0008165c(undefined4 *data,undefined4 source,undefined4 size)\n\n{\n  int reservation_status;\n  \n  reservation_status = allocate_memory(data,size);\n  if (reservation_status == 0) {\n    clear_output_arr(data);\n  }\n  else {\n    data[2] = size;\n    strcpy(*data,source);\n  }\n  return data;\n}\n\n",
            "current_name": "initialize_resource_0008165c",
            "entrypoint": "0x0008165c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008165c": "initialize_resource_0008165c",
                "iVar1": "reservation_status",
                "invalidate": "clear_output_arr",
                "param_1": "data",
                "param_2": "source",
                "param_3": "size",
                "reserve": "allocate_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081682": {
            "additional_data": {
                "FUN_0008165c": {
                    "copy_param_array": 1
                },
                "FUN_00081682": {
                    "initialize_and_copy": 3,
                    "initialize_and_copy_string": 1,
                    "initialize_array": 5,
                    "initialize_buffer": 4,
                    "initialize_data": 2,
                    "initialize_param": 5,
                    "initialize_param1": 1,
                    "initialize_param_array": 5,
                    "initialize_parameter_array": 1,
                    "initialize_parameters": 2,
                    "initialize_params": 1,
                    "initialize_values": 1
                },
                "FUN_00082a50": {
                    "get_string_length": 1
                },
                "copy": {
                    "copy_data": 1
                },
                "param_1": {
                    "array": 5,
                    "buffer": 4,
                    "data": 1,
                    "data_pointer": 1,
                    "input_param": 1,
                    "output": 1,
                    "output_array": 3,
                    "param1": 1,
                    "param_array": 10,
                    "parameters": 1,
                    "result": 1,
                    "result_array": 2
                },
                "param_2": {
                    "input": 1,
                    "input_string": 20,
                    "param2": 1,
                    "source": 2,
                    "source_string": 2,
                    "str": 1,
                    "string": 4
                },
                "strlen": {
                    "get_string_length": 1
                },
                "uVar1": {
                    "input_length": 1,
                    "length": 1,
                    "source_length": 3,
                    "str_length": 1,
                    "string_length": 25
                }
            },
            "called": [
                "FUN_00082a50",
                "FUN_0008165c"
            ],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 * initialize_param_array_00081682(undefined4 *param_array,int input_string)\n\n{\n  undefined4 string_length;\n  \n  *param_array = 0;\n  param_array[1] = 0;\n  param_array[2] = 0;\n  if (input_string != 0) {\n    string_length = get_string_length(input_string);\n    copy_data(param_array,input_string,string_length);\n  }\n  return param_array;\n}\n\n",
            "current_name": "initialize_param_array_00081682",
            "entrypoint": "0x00081682",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081682": "initialize_param_array_00081682",
                "copy": "copy_data",
                "param_1": "param_array",
                "param_2": "input_string",
                "strlen": "get_string_length",
                "uVar1": "string_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816a6": {
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\nvoid FUNC_000816a6(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_000816a6",
            "entrypoint": "0x000816a6",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_000816a6": "FUNC_000816a6"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000816a8": {
            "additional_data": {
                "FUNC_0008120c": {
                    "check_conditions": 1,
                    "do_something": 3,
                    "function8120c": 1,
                    "handle_events": 3,
                    "handle_func": 1,
                    "handle_function1": 1,
                    "handle_update": 1,
                    "perform_action": 4,
                    "perform_additional_tasks": 1,
                    "perform_function": 2,
                    "process_data": 2,
                    "reverse_something": 2,
                    "run_function1": 1
                },
                "FUNC_000816a6": {
                    "execute_function": 1,
                    "function816a6": 1,
                    "handle_func2": 1,
                    "handle_function2": 1,
                    "handle_something": 2,
                    "perform_action": 1,
                    "reverse_action": 1,
                    "reverse_check": 2,
                    "reverse_data": 1,
                    "reverse_operation": 1,
                    "reverse_something": 2,
                    "run_function3": 1
                },
                "FUN_000804a8": {
                    "custom_function": 1,
                    "function804a8": 1,
                    "get_config": 1,
                    "get_data": 1,
                    "get_function_result": 1,
                    "get_initial_value": 1,
                    "get_sensor_data": 3,
                    "get_some_value": 1,
                    "get_something": 2,
                    "get_variable1": 1,
                    "initialize_data": 4,
                    "initialize_variant": 2,
                    "run_function2": 1
                },
                "FUN_000816a6": {
                    "check_serial_events": 1
                },
                "FUN_000816a8": {
                    "execute_main_loop": 1,
                    "main_controller": 1,
                    "main_loop": 5,
                    "run_application": 1,
                    "run_main_loop": 4,
                    "run_system": 13,
                    "run_system_components": 1,
                    "run_system_loop": 1,
                    "start_application": 1,
                    "start_main_loop": 1,
                    "system_main_loop": 1
                },
                "_watchdogDefaultSetup": {
                    "setup_watchdog": 1
                },
                "check_and_handle_serial_events_00080ce0": {
                    "check_and_handle_serial_events": 21,
                    "handle_serial_events": 4
                },
                "delay": {
                    "custom_delay": 3,
                    "delay": 4,
                    "delay_milliseconds": 2,
                    "introductory_delay": 1,
                    "pause": 1,
                    "short_delay": 7,
                    "wait": 1,
                    "wait_for": 2,
                    "wait_for_delay": 2
                },
                "fun_000804a8": {
                    "initialize_data": 1
                },
                "initVariant": {
                    "initialize_variant": 26
                },
                "initialize_data_000816d4": {
                    "initialize_data": 24,
                    "initialize_program_data": 1
                },
                "initialize_system_components_00080ae4": {
                    "initialize_system_components": 31
                },
                "loop": {
                    "application_loop": 1,
                    "custom_loop": 1,
                    "execute_application": 1,
                    "execute_loop": 5,
                    "main_loop": 6,
                    "main_loop_body": 1,
                    "perform_loop": 1,
                    "perform_loop_iteration": 1,
                    "run_loop": 5,
                    "system_loop": 5
                },
                "serialEventRun": {
                    "handle_serial_events": 16,
                    "process_serial_events": 3,
                    "run_serial_event": 3,
                    "run_serial_events": 5
                },
                "setup": {
                    "configure": 1,
                    "configure_system": 2,
                    "custom_setup": 1,
                    "initialize": 1,
                    "set_up_system": 1,
                    "setup": 3,
                    "setup_application": 2,
                    "setup_components": 1,
                    "setup_configuration": 1,
                    "setup_environment": 2,
                    "setup_hardware": 1,
                    "setup_system": 6,
                    "system_setup": 4
                },
                "update_sensor_data_000805d0": {
                    "update_sensor_data": 25
                }
            },
            "called": [
                "FUN_000805d0",
                "FUN_0008120c",
                "FUN_00080ae4",
                "FUN_000804a8",
                "FUN_000816a6",
                "FUN_000816d4",
                "FUN_00080ce0"
            ],
            "calling": [
                "FUN_00080f24"
            ],
            "code": "\nvoid run_system_components_000816a8(void)\n\n{\n  setup_watchdog();\n  initialize_system_components();\n  initialize_variant();\n  short_delay(1);\n  setup_system();\n  do {\n    main_loop();\n    handle_serial_events();\n  } while( true );\n}\n\n",
            "current_name": "run_system_components_000816a8",
            "entrypoint": "0x000816a8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816a8": "run_system_components_000816a8",
                "_watchdogDefaultSetup": "setup_watchdog",
                "delay": "short_delay",
                "initVariant": "initialize_variant",
                "initialize_system_components_00080ae4": "initialize_system_components",
                "loop": "main_loop",
                "serialEventRun": "handle_serial_events",
                "setup": "setup_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000816d4": {
            "additional_data": {
                "": {
                    "": 4,
                    "data": 1
                },
                "FUN_000816d4": {
                    "initialize_data": 12,
                    "initialize_global_value": 1,
                    "initialize_global_variable": 3,
                    "initialize_memory": 8,
                    "initialize_memory_address": 1,
                    "initialize_memory_location": 1,
                    "initialize_variable": 1,
                    "set_initial_value": 3,
                    "set_memory_address": 1
                },
                "_": {
                    "": 1
                },
                "_DAT_400e1a54": {
                    "base_address": 3,
                    "base_memory_address": 1,
                    "constant_value": 1,
                    "data_address": 1,
                    "data_pointer": 2,
                    "data_register": 1,
                    "data_start_address": 1,
                    "data_value": 4,
                    "global_variable": 2,
                    "initial_value": 3,
                    "memory_address": 5,
                    "memory_size": 1,
                    "memory_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_000816a8"
            ],
            "code": "\n\n\nvoid initialize_data_000816d4(void)\n\n{\n  _DAT_400e1a54 = 0x8000;\n  return;\n}\n\n",
            "current_name": "initialize_data_000816d4",
            "entrypoint": "0x000816d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000816d4": "initialize_data_000816d4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081714": {
            "additional_data": {
                "DAT_20071184": {
                    "data": 5,
                    "data_value": 3,
                    "global_data": 5,
                    "global_value": 7,
                    "global_variable": 3
                },
                "FUN_00081714": {
                    "get_data": 6,
                    "get_data_value": 9,
                    "get_global_data": 6,
                    "get_global_value": 7,
                    "get_global_variable": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00081208"
            ],
            "code": "\nundefined4 get_data_value_00081714(void)\n\n{\n  return DAT_20071184;\n}\n\n",
            "current_name": "get_data_value_00081714",
            "entrypoint": "0x00081714",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081714": "get_data_value_00081714"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081730": {
            "additional_data": {
                "FUN_00081730": {
                    "apply_bitwise_operations": 1,
                    "binary_float_multiplier": 1,
                    "calculate": 1,
                    "calculate_float": 11,
                    "calculate_floating_point": 6,
                    "calculate_floating_point_value": 3,
                    "calculate_modified_float": 2,
                    "calculate_new_float": 1,
                    "calculate_normalized_float": 1,
                    "calculate_shifted_value": 1,
                    "calculate_updated_value": 1,
                    "reverse_bits": 2
                },
                "LZCOUNT": {
                    "leading_zero_count": 1,
                    "leading_zeros_count": 2
                },
                "bVar8": {
                    "check": 1,
                    "comparison_flag": 1,
                    "comparison_result": 1,
                    "condition": 3,
                    "flag": 1,
                    "is_condition_satisfied": 1,
                    "is_condition_true": 1,
                    "is_equal": 11,
                    "is_flagged": 1,
                    "is_modified": 1,
                    "is_normalized": 1,
                    "is_true": 4,
                    "is_zero": 3,
                    "result_flag": 1
                },
                "iVar1": {
                    "exponent_value": 1,
                    "high_bits_1": 1,
                    "left_shifted_value": 1,
                    "shift": 1,
                    "shift_amount": 3,
                    "shift_amount1": 1,
                    "shift_val1": 1,
                    "shifted_input": 2,
                    "shifted_input1": 3,
                    "shifted_input1_msb": 1,
                    "shifted_input_msb": 2,
                    "shifted_input_value": 1,
                    "shifted_operand_sign": 1,
                    "shifted_significand": 1,
                    "shifted_value1": 4,
                    "sign_bit_value": 1,
                    "value_shifted": 1
                },
                "iVar2": {
                    "exponent_temp": 1,
                    "high_bits_2": 1,
                    "right_shifted_value": 1,
                    "shift2": 1,
                    "shift_amount2": 4,
                    "shift_val2": 1,
                    "shifted_bit_pattern_sign": 1,
                    "shifted_denominator": 1,
                    "shifted_exponent": 2,
                    "shifted_flagged_input_msb": 1,
                    "shifted_input2": 3,
                    "shifted_input2_msb": 1,
                    "shifted_mask": 1,
                    "shifted_masked_input_msb": 1,
                    "shifted_param_two": 1,
                    "shifted_value2": 4,
                    "sign_bit_value_shifted": 1
                },
                "param_1": {
                    "input": 5,
                    "input1": 10,
                    "input_float": 1,
                    "input_fp_value": 1,
                    "input_value": 3,
                    "input_value1": 3,
                    "mantissa": 1,
                    "num1": 1,
                    "original_value": 1,
                    "significand": 1,
                    "value": 2,
                    "value1": 2
                },
                "param_2": {
                    "bit_pattern": 1,
                    "bitwise_value": 1,
                    "count": 1,
                    "denominator": 1,
                    "exponent": 3,
                    "input2": 10,
                    "input_flag": 1,
                    "input_fp_multiplier": 1,
                    "input_int": 1,
                    "input_value2": 3,
                    "mask": 3,
                    "num2": 1,
                    "original_mask": 1,
                    "param_one": 1,
                    "value2": 2
                },
                "param_3": {
                    "constant": 1,
                    "input3": 8,
                    "input_flag": 1,
                    "input_value3": 2,
                    "na_n_value": 1,
                    "param3": 2,
                    "param_3": 3,
                    "param_two": 1,
                    "sign": 1,
                    "some_value": 1,
                    "undefined": 2,
                    "undefined_parameter": 1,
                    "undefined_value": 1,
                    "undefined_var": 1,
                    "unknown": 1,
                    "unused_param": 1,
                    "value3": 1
                },
                "param_4": {
                    "comparison_value": 1,
                    "input4": 8,
                    "input_uint": 1,
                    "input_value4": 2,
                    "mask": 1,
                    "output": 1,
                    "output_value": 1,
                    "param4": 1,
                    "param_4": 3,
                    "param_three": 1,
                    "result": 3,
                    "rounding": 1,
                    "rounding_mode": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "sign": 1,
                    "temp": 1,
                    "unused_param2": 1
                },
                "uVar3": {
                    "abs_input": 1,
                    "bitwise_xor_value": 1,
                    "flagged_input": 1,
                    "input1_copy": 1,
                    "input_copy": 1,
                    "inverted_exponent": 1,
                    "masked_input": 1,
                    "modified_input2": 1,
                    "modified_int1": 1,
                    "modified_value": 1,
                    "multiplier_xor": 1,
                    "normalized_bit_pattern": 1,
                    "num2_complement": 1,
                    "result1": 5,
                    "shifted_input2": 1,
                    "sign_flipped": 1,
                    "sign_flipped_input2": 1,
                    "temp1": 5,
                    "temp_significand": 1,
                    "temp_value1": 1,
                    "value1": 1,
                    "xor_result": 2
                },
                "uVar4": {
                    "abs_denominator": 1,
                    "abs_num1": 1,
                    "absolute_input": 1,
                    "input2_copy": 1,
                    "mask_copy": 1,
                    "masked_constant": 1,
                    "modified_input1": 1,
                    "modified_int2": 1,
                    "modified_value_2": 1,
                    "multiplier_abs": 1,
                    "new_value1": 1,
                    "normalized_input": 1,
                    "normalized_value": 1,
                    "result1": 1,
                    "result2": 5,
                    "shifted_input1_neg": 1,
                    "shifted_inverted_exponent": 1,
                    "temp1": 1,
                    "temp2": 5,
                    "temp_exponent": 1,
                    "temp_result1": 1,
                    "temp_value2": 1,
                    "value2": 1
                },
                "uVar5": {
                    "abs_value_shifted": 1,
                    "float_value1": 1,
                    "modified_int3": 1,
                    "new_value2": 1,
                    "normalized_input": 1,
                    "normalized_value1": 1,
                    "positive_value": 1,
                    "result": 3,
                    "result1": 3,
                    "result2": 1,
                    "result_significand": 1,
                    "shifted_input": 4,
                    "shifted_input1": 1,
                    "shifted_input2_neg": 1,
                    "shifted_input_fp_value": 1,
                    "shifted_input_value2": 1,
                    "shifted_mantissa": 1,
                    "shifted_num1": 1,
                    "temp1": 4,
                    "temp3": 2
                },
                "uVar6": {
                    "float_value2": 1,
                    "loop_counter": 2,
                    "modified_int4": 1,
                    "new_value3": 1,
                    "normalized_value": 1,
                    "normalized_value2": 1,
                    "num_shifts": 1,
                    "remaining_shifts": 1,
                    "result2": 2,
                    "shift_amount": 2,
                    "shift_count": 1,
                    "shift_offset": 1,
                    "shifted_flagged_input": 1,
                    "shifted_masked_input": 1,
                    "shifted_multiplier_abs": 1,
                    "shifted_result": 1,
                    "temp": 1,
                    "temp1": 3,
                    "temp2": 4,
                    "temp4": 2,
                    "u_var6": 2
                },
                "uVar7": {
                    "abs_diff": 1,
                    "diff": 1,
                    "diff_result": 1,
                    "diff_shifted_inputs": 1,
                    "difference": 16,
                    "difference_value": 1,
                    "modified_int5": 1,
                    "shift_difference": 1,
                    "temp2": 2,
                    "temp3": 3,
                    "temp5": 2,
                    "u_var7": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_modified_float_00081730(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_value1;\n  int shift_amount2;\n  uint temp1;\n  uint temp2;\n  uint temp1;\n  uint temp2;\n  uint difference;\n  bool is_equal;\n  \n  temp1 = input2 ^ 0x80000000;\n  temp1 = input1 << 1;\n  is_equal = temp1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = temp1 == input4;\n  }\n  shifted_value1 = (int)temp1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_value1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shift_amount2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_value1 == -1 || shift_amount2 == -1) {\n      temp1 = temp1;\n      if (shifted_value1 == -1) {\n        temp1 = input1;\n      }\n      if (shifted_value1 != -1 || shift_amount2 != -1) {\n        temp1 = temp1;\n      }\n      is_equal = (temp1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (temp1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = temp1 == temp1;\n      }\n      if (!is_equal) {\n        temp1 = temp1 | 0x400000;\n      }\n      return temp1;\n    }\n    if (((input1 ^ temp1) & 0x7fffffff) != 0) {\n      if (temp1 == 0) {\n        input1 = temp1;\n      }\n      return input1;\n    }\n    if (input1 != temp1) {\n      return 0;\n    }\n    if ((temp1 & 0xff000000) == 0) {\n      temp1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        temp1 = temp1 | 0x80000000;\n      }\n      return temp1;\n    }\n    if (temp1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  temp1 = temp1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - temp1;\n  is_equal = difference != 0;\n  temp2 = temp1;\n  if (is_equal && temp1 <= input4) {\n    temp2 = temp1 + difference;\n  }\n  if (is_equal && temp1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (is_equal && temp1 <= input4) {\n    input1 = input1 ^ temp1;\n  }\n  if (is_equal && temp1 <= input4) {\n    temp1 = temp1 ^ input1;\n  }\n  if (input4 < temp1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  temp1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  temp2 = temp1 & 0xffffff | 0x800000;\n  if ((temp1 & 0x80000000) != 0) {\n    temp2 = -temp2;\n  }\n  if (temp2 == difference) {\n    temp2 = temp2 ^ 0x800000;\n    if (temp2 == 0) {\n      temp1 = temp1 ^ 0x800000;\n      temp2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp1 = temp1 + ((int)temp2 >> (difference & 0xff));\n  temp2 = temp2 << (0x20 - difference & 0xff);\n  input1 = temp1 & 0x80000000;\n  if ((int)temp1 < 0) {\n    is_equal = temp2 != 0;\n    temp2 = -temp2;\n    temp1 = -temp1 - (uint)is_equal;\n  }\n  if (temp1 < 0x800000) {\n    temp1 = temp2 & 0x80000000;\n    temp2 = temp2 << 1;\n    temp1 = temp1 * 2 + (uint)(temp1 != 0);\n    temp1 = temp2 - 2;\n    if ((temp1 & 0x800000) == 0) {\n      difference = leading_zeros_count(temp1) - 8;\n      temp1 = temp1 << (difference & 0xff);\n      if ((int)temp1 < (int)difference) {\n        temp1 = temp1 >> (-(temp1 - difference) & 0xff);\n      }\n      else {\n        temp1 = temp1 + (temp1 - difference) * 0x800000;\n      }\n      return temp1 | input1;\n    }\n  }\n  else {\n    temp1 = temp2 - 1;\n    if (0xffffff < temp1) {\n      temp1 = temp1 & 1;\n      temp1 = temp1 >> 1;\n      temp2 = (uint)(temp1 != 0) << 0x1f | temp2 >> 1;\n      temp1 = temp2;\n      if (0xfd < temp2) goto LAB_0008186a;\n    }\n  }\n  temp1 = temp1 + temp1 * 0x800000 + (uint)(0x7fffffff < temp2);\n  if (temp2 == 0x80000000) {\n    temp1 = temp1 & 0xfffffffe;\n  }\n  return temp1 | input1;\n}\n\n",
            "current_name": "calculate_modified_float_00081730",
            "entrypoint": "0x00081730",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081730": "calculate_modified_float_00081730",
                "LZCOUNT": "leading_zeros_count",
                "bVar8": "is_equal",
                "iVar1": "shifted_value1",
                "iVar2": "shift_amount2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp1",
                "uVar6": "temp2",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081734": {
            "additional_data": {
                "FUN_00081734": {
                    "binary_float_conversion": 1,
                    "calculate_float": 10,
                    "calculate_floating_point": 7,
                    "calculate_floating_point_value": 2,
                    "calculate_modified_float": 1,
                    "calculate_result": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_calculation": 1,
                    "perform_floating_point_operation": 1,
                    "reverse_binary": 1,
                    "reverse_bits": 5
                },
                "LZCOUNT": {
                    "leading_zero_count": 4
                },
                "bVar7": {
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_equal": 11,
                    "is_zero": 17,
                    "is_zero_or_equal": 1
                },
                "iVar1": {
                    "input1_sign": 1,
                    "integer_value1": 1,
                    "msb_input1": 1,
                    "multiplier_msb": 1,
                    "num1_shifted_lsb": 1,
                    "number1_shifted": 1,
                    "partial1_sign": 1,
                    "shift_right_count": 1,
                    "shift_value1": 1,
                    "shifted1": 1,
                    "shifted_bit1": 1,
                    "shifted_float1": 1,
                    "shifted_input1": 5,
                    "shifted_input_1": 1,
                    "shifted_num1": 3,
                    "shifted_number1": 1,
                    "shifted_value1": 4,
                    "shifted_value1_bits": 1,
                    "shifted_value1_sign": 1,
                    "sign1": 2
                },
                "iVar2": {
                    "divisor_msb": 1,
                    "input2_sign": 1,
                    "integer_value2": 1,
                    "msb_float_2": 1,
                    "msb_shifted_input": 1,
                    "num2_shifted_lsb": 1,
                    "number2_shifted": 1,
                    "partial2_sign": 1,
                    "shift_value2": 1,
                    "shifted2": 1,
                    "shifted_bit2": 1,
                    "shifted_float2": 1,
                    "shifted_input2": 5,
                    "shifted_input_2": 1,
                    "shifted_num2": 3,
                    "shifted_number2": 1,
                    "shifted_value2": 4,
                    "shifted_value2_bits": 1,
                    "shifted_value2_sign": 1,
                    "sign2": 2
                },
                "param_1": {
                    "float_value1": 1,
                    "input1": 10,
                    "input_1": 2,
                    "input_float1": 2,
                    "input_float_1": 1,
                    "input_number1": 2,
                    "input_value": 1,
                    "input_value1": 3,
                    "multiplier": 1,
                    "num1": 2,
                    "number1": 3,
                    "value1": 3
                },
                "param_2": {
                    "divisor": 1,
                    "float_value2": 1,
                    "input2": 10,
                    "input_2": 2,
                    "input_float2": 2,
                    "input_float_2": 1,
                    "input_number2": 2,
                    "input_value2": 4,
                    "num2": 2,
                    "number2": 3,
                    "value2": 3
                },
                "param_3": {
                    "arg3": 1,
                    "constant_value": 1,
                    "extra_param": 1,
                    "flag": 1,
                    "flags": 2,
                    "float1": 1,
                    "input3": 4,
                    "input_3": 2,
                    "input_data": 1,
                    "input_flag": 1,
                    "input_size": 1,
                    "input_value1": 1,
                    "param3": 7,
                    "rounding_mode": 1,
                    "special_value": 1,
                    "undefined_value": 1,
                    "unused_param": 1,
                    "unused_parameter": 1,
                    "value3": 1
                },
                "param_4": {
                    "arg4": 1,
                    "flag": 1,
                    "float2": 1,
                    "input3": 2,
                    "input4": 4,
                    "input_4": 2,
                    "input_bits": 1,
                    "input_value2": 1,
                    "input_value3": 1,
                    "modifier": 1,
                    "output_float": 1,
                    "param4": 7,
                    "precision": 2,
                    "result": 1,
                    "rounding_mode": 1,
                    "shift_amount": 2,
                    "unused_param2": 1,
                    "value4": 1
                },
                "uVar10": {
                    "shifted_input1_mant": 1
                },
                "uVar11": {
                    "shifted_input2_mant": 1
                },
                "uVar3": {
                    "abs1": 1,
                    "abs_num1": 1,
                    "abs_value1": 1,
                    "fraction1": 1,
                    "input1_masked": 1,
                    "masked_num1": 1,
                    "modified_num1": 1,
                    "multiplier_positive": 1,
                    "normalized1": 1,
                    "normalized_input_value1": 1,
                    "normalized_number1": 1,
                    "partial_input1": 1,
                    "result": 3,
                    "result1": 6,
                    "result2": 1,
                    "result_1": 1,
                    "result_value1": 1,
                    "shifted_result_1": 1,
                    "shifted_value2": 2,
                    "temp1": 1,
                    "temp_value1": 1,
                    "unsigned_var_1": 1,
                    "value3": 1
                },
                "uVar4": {
                    "abs2": 1,
                    "abs_num2": 1,
                    "abs_value2": 1,
                    "divisor_positive": 1,
                    "fraction2": 1,
                    "input1_shifted": 1,
                    "masked_num2": 1,
                    "modified_num2": 1,
                    "normalized2": 1,
                    "normalized_input_value2": 1,
                    "normalized_number2": 1,
                    "num1_shifted": 1,
                    "partial_input2": 1,
                    "product1": 1,
                    "result2": 4,
                    "result_2": 1,
                    "shifted_input1": 2,
                    "shifted_number1": 1,
                    "shifted_result1": 1,
                    "shifted_result_2": 1,
                    "shifted_value1": 3,
                    "temp2": 1,
                    "temp_value1": 1,
                    "temp_value2": 1,
                    "unsigned_var_2": 1
                },
                "uVar5": {
                    "abs_diff": 1,
                    "count": 1,
                    "count1": 1,
                    "counter": 1,
                    "diff": 2,
                    "diff_abs_values": 1,
                    "exponent_diff": 1,
                    "extra_bits": 1,
                    "num1_shifted_msb": 1,
                    "product2": 1,
                    "result1": 2,
                    "result3": 1,
                    "shift_amount": 4,
                    "shifted_diff": 1,
                    "shifted_value2": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_result_1": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "temp_var1": 1,
                    "tmp_result": 1,
                    "u_conditional_var": 1,
                    "u_var5": 2
                },
                "uVar6": {
                    "abs_diff": 2,
                    "abs_value_diff": 1,
                    "count2": 1,
                    "diff": 1,
                    "difference": 16,
                    "neg_exponent_diff": 1,
                    "num_shift_difference": 1,
                    "shift": 1,
                    "temp4": 1,
                    "temp_result_2": 1,
                    "temp_value3": 1,
                    "temp_value4": 1,
                    "temp_var2": 1,
                    "u_diff_var": 1,
                    "u_var6": 1
                },
                "uVar8": {
                    "shifted_input1_msb": 1
                },
                "uVar9": {
                    "shifted_input2_msb": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_modified_float_00081734(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint shift_amount;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    param4 = input2 << 1;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == param4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)param4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_0008186a:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  param4 = param4 >> 0x18;\n  difference = param4 - result2;\n  is_zero = difference != 0;\n  shift_amount = result2;\n  if (is_zero && result2 <= param4) {\n    shift_amount = result2 + difference;\n  }\n  if (is_zero && result2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= param4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= param4) {\n    input2 = input2 ^ input1;\n  }\n  if (param4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (shift_amount == difference) {\n    result1 = result1 ^ 0x800000;\n    if (shift_amount == 0) {\n      result2 = result2 ^ 0x800000;\n      shift_amount = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = shift_amount - 2;\n    if ((result2 & 0x800000) == 0) {\n      shift_amount = leading_zero_count(result2) - 8;\n      result2 = result2 << (shift_amount & 0xff);\n      if ((int)difference < (int)shift_amount) {\n        result2 = result2 >> (-(difference - shift_amount) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - shift_amount) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = shift_amount - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = shift_amount;\n      if (0xfd < shift_amount) goto LAB_0008186a;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "current_name": "calculate_modified_float_00081734",
            "entrypoint": "0x00081734",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081734": "calculate_modified_float_00081734",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "shift_amount",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081894": {
            "additional_data": {
                "FUN_00081894": {
                    "calculate_checksum": 1,
                    "calculate_hash": 2,
                    "calculate_modified_value": 1,
                    "calculate_new_value": 1,
                    "calculate_offset": 1,
                    "calculate_output": 1,
                    "calculate_result": 4,
                    "calculate_value": 4,
                    "compute_checksum": 1,
                    "convert_to_unsigned_int": 1,
                    "count_bits": 3,
                    "count_bits_and_calculate_result": 1,
                    "count_bits_and_shift": 2,
                    "count_bits_reverse": 1,
                    "count_bits_set_and_offset": 1,
                    "count_leading_zeros": 2,
                    "decode_and_adjust_value": 1,
                    "reverse_bits": 3
                },
                "iVar3": {
                    "additive": 1,
                    "base_value": 4,
                    "calculation_result": 1,
                    "constant": 10,
                    "constant1": 2,
                    "constant_value": 3,
                    "initial_value": 1,
                    "intermediate_result": 2,
                    "multiplier": 2,
                    "offset": 3,
                    "result": 1,
                    "variable_a": 1
                },
                "param_1": {
                    "input": 15,
                    "input_number": 3,
                    "input_param": 1,
                    "input_value": 12
                },
                "uVar1": {
                    "bit_count": 3,
                    "count": 1,
                    "final_result": 4,
                    "leading_zeroes": 4,
                    "leading_zeros": 11,
                    "leading_zeros_count": 1,
                    "number_of_set_bits": 1,
                    "result": 5,
                    "return_value": 1
                },
                "uVar1_final": {
                    "final_leading_zeros": 1,
                    "leading_zeroes_final": 1
                },
                "uVar1_final_temp": {
                    "leading_zeroes_final_temp": 1
                },
                "uVar1_prev": {
                    "leading_zeros_prev": 1
                },
                "uVar1_shifted": {
                    "shifted_input2": 1
                },
                "uVar1_shifted_signed": {
                    "shifted_input_signed": 1
                },
                "uVar1_shifted_signed_result": {
                    "shifted_input_signed_result": 1
                },
                "uVar1_shifted_temp": {
                    "shifted_input2_temp": 1
                },
                "uVar1_temp": {
                    "leading_zeroes_minus8": 1,
                    "temp_leading_zeros": 1
                },
                "uVar1_updated": {
                    "leading_zeros_updated": 1
                },
                "uVar2": {
                    "mask": 1,
                    "modified_shift_amount": 1,
                    "offset": 1,
                    "shift": 1,
                    "shift_amount": 16,
                    "shift_count": 1,
                    "shift_value": 2,
                    "shifted_bits": 1,
                    "shifted_input": 2,
                    "shifted_value": 1,
                    "temp2": 1,
                    "temp_var": 1,
                    "trailing_zeros": 1,
                    "value": 1
                },
                "uVar2_final": {
                    "final_shift_amount": 1
                },
                "uVar2_masked": {
                    "masked_input": 1
                },
                "uVar2_masked_result": {
                    "masked_input_result": 1
                },
                "uVar2_masked_temp": {
                    "masked_input_temp": 1
                },
                "uVar2_prev": {
                    "shift_amount_prev": 1
                },
                "uVar2_shifted": {
                    "shifted_input": 1
                },
                "uVar2_temp": {
                    "shift_amount_with_context": 1,
                    "temp_shift_amount": 1
                },
                "uVar2_updated": {
                    "shift_amount_updated": 1
                },
                "uVar4": {
                    "additional_value": 1,
                    "auxiliary": 1,
                    "bit_mask": 1,
                    "carry": 1,
                    "carry_bit": 2,
                    "carry_flag": 1,
                    "comparison_result": 1,
                    "conditional_additive": 1,
                    "extra_bit": 1,
                    "extra_bits": 1,
                    "lsb_mask": 1,
                    "mask": 8,
                    "masked_result": 1,
                    "overflow_check": 1,
                    "overflow_value": 1,
                    "shifted_input": 1,
                    "shifted_value": 2,
                    "sign_checking": 1,
                    "temp_value": 3,
                    "temp_var": 1
                },
                "uVar4_final": {
                    "final_extra_bits": 1
                },
                "uVar4_temp": {
                    "carry_flag_temp": 1
                },
                "uVar4_updated": {
                    "extra_bits_updated": 1
                },
                "uVar5": {
                    "final_result": 1,
                    "mask": 1,
                    "result": 3,
                    "temp": 1
                },
                "uVar6": {
                    "temp2": 1,
                    "temp_result": 1,
                    "toggled_result": 1
                },
                "uVar7": {
                    "temp3": 1
                },
                "uVar8": {
                    "temp4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint count_bits_and_calculate_result_00081894(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  leading_zeros = constant + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_bits_and_calculate_result_00081894",
            "entrypoint": "0x00081894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081894": "count_bits_and_calculate_result_00081894",
                "iVar3": "constant",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008189c": {
            "additional_data": {
                "FUN_0008189c": {
                    "bit_count": 1,
                    "calculate_bits": 1,
                    "calculate_hash": 1,
                    "calculate_modified_value": 2,
                    "calculate_twos_complement": 1,
                    "calculate_unsigned_result": 2,
                    "calculate_unsigned_value": 1,
                    "calculate_value": 1,
                    "convert_to_unsigned": 1,
                    "count_and_manipulate_bits": 1,
                    "count_and_shift_bits": 1,
                    "count_bits": 1,
                    "count_bits_and_modify_value": 1,
                    "count_bits_prefix": 1,
                    "count_bits_reverse": 1,
                    "count_bits_to_most_significant_one": 1,
                    "count_leading_zeros": 3,
                    "count_positive_bits": 1,
                    "count_set_bits": 1,
                    "count_trailing_zeros": 1,
                    "decode_and_multiply": 1,
                    "decode_integer": 1,
                    "decode_number": 1,
                    "decode_unsigned_int": 1,
                    "decode_unsigned_number": 1,
                    "reverse_bits": 1,
                    "unsigned_integer_operation": 1
                },
                "LZCOUNT": {
                    "count_set_bits": 1,
                    "leading_zeros_count": 1
                },
                "iVar4": {
                    "adjusted_result": 1,
                    "adjusted_value": 3,
                    "base_offset": 1,
                    "intermediate_result": 1,
                    "intermediate_value": 1,
                    "modified_sign_mask": 1,
                    "modified_value": 1,
                    "offset": 1,
                    "result": 20,
                    "scaled_value": 1
                },
                "iVar4_orig": {
                    "original_modified_sign_mask": 1
                },
                "param_1": {
                    "input": 17,
                    "input_number": 1,
                    "input_value": 9,
                    "num": 1,
                    "number": 2,
                    "value_to_modify": 1
                },
                "uVar1": {
                    "bit_count": 2,
                    "leading_zero_count": 2,
                    "leading_zeroes": 4,
                    "leading_zeros": 13,
                    "leading_zeros_count": 2,
                    "mask": 1,
                    "most_significant_bit_index": 1,
                    "num_leading_zeros": 1,
                    "number_of_bits": 1,
                    "temp": 1,
                    "temp1": 2,
                    "trailing_zeros_count": 1
                },
                "uVar10": {
                    "temp": 1
                },
                "uVar11": {
                    "shifted": 1
                },
                "uVar12": {
                    "mask": 1
                },
                "uVar1_orig": {
                    "original_leading_zeros": 1
                },
                "uVar2": {
                    "high_bit": 1,
                    "leading_one_shift": 1,
                    "shift": 2,
                    "shift_amount": 22,
                    "shift_count": 1,
                    "shift_distance": 1,
                    "shift_value": 1,
                    "temp2": 2
                },
                "uVar2_orig": {
                    "original_shift_amount": 1
                },
                "uVar3": {
                    "final_result": 1,
                    "is_negative": 4,
                    "output": 1,
                    "sign_bit": 20,
                    "sign_mask": 2,
                    "signed_flag": 1,
                    "temp3": 2
                },
                "uVar3_orig": {
                    "original_sign_mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint count_and_manipulate_bits_0008189c(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_set_bits(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_and_manipulate_bits_0008189c",
            "entrypoint": "0x0008189c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008189c": "count_and_manipulate_bits_0008189c",
                "LZCOUNT": "count_set_bits",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081944": {
            "additional_data": {
                "FUN_00081944": {
                    "calculate_float": 10,
                    "calculate_float_value": 3,
                    "calculate_floating_point": 10,
                    "calculate_floating_point_bitwise_or": 1,
                    "calculate_floating_point_number": 1,
                    "calculate_floating_point_value": 1,
                    "convert_to_floating_point": 1,
                    "float_to_uint": 1
                },
                "SBORROW4": {
                    "subtraction_overflow": 1
                },
                "SCARRY4": {
                    "addition_overflow": 1
                },
                "bVar10": {
                    "bool_b": 1,
                    "borrow": 1,
                    "carry": 1,
                    "condition2": 2,
                    "flag": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "is_borrow": 1,
                    "is_diff_neg": 1,
                    "is_less": 1,
                    "is_negative": 13,
                    "is_negative1": 1,
                    "is_negative_diff": 1,
                    "is_negative_shifted_input1": 1,
                    "is_zero2": 1,
                    "overflow": 1
                },
                "bVar9": {
                    "bool_a": 1,
                    "check_condition": 1,
                    "condition1": 2,
                    "flag1": 1,
                    "flag_1": 1,
                    "is_first_byte_one": 1,
                    "is_input1_zero": 1,
                    "is_number1_zero": 1,
                    "is_zero": 11,
                    "is_zero1": 5,
                    "is_zero_byte": 1,
                    "is_zero_or_inf": 1,
                    "is_zero_shifted_input1": 1,
                    "is_zero_value": 1
                },
                "iVar10": {
                    "check1": 1
                },
                "iVar11": {
                    "check2": 1
                },
                "iVar4": {
                    "byte_sum": 1,
                    "combined_shift_count": 1,
                    "combined_value": 1,
                    "exponent_sum": 4,
                    "shift_sum": 1,
                    "shifted_sum": 2,
                    "shifted_val1_minus_shift_amount": 1,
                    "sum": 12,
                    "sum_of_exponents": 1,
                    "sum_of_shifted_bits": 1,
                    "sum_of_shifted_inputs": 1,
                    "sum_of_upper_bytes": 1,
                    "sum_shifted": 1,
                    "temp": 1,
                    "temp_3": 1,
                    "temp_int1": 1
                },
                "iVar5": {
                    "adjusted_exponent": 1,
                    "adjusted_sum": 1,
                    "diff": 6,
                    "diff_from_0x7f": 1,
                    "difference": 4,
                    "difference_of_sum_and127": 1,
                    "exponent_diff": 3,
                    "i_var5": 1,
                    "normalized_sum": 1,
                    "positive_exponent": 1,
                    "shift_diff": 3,
                    "shift_value": 1,
                    "shifted_sum_difference": 1,
                    "shifted_val1_minus_0x7f": 1,
                    "sum_abs": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_4": 1,
                    "temp_int2": 1
                },
                "iVar7": {
                    "abs_diff": 1,
                    "adjusted_exponent": 1,
                    "adjusted_shift_diff": 1,
                    "adjusted_sum2": 1,
                    "diff2": 3,
                    "diff_alt": 1,
                    "diff_from_0xff": 1,
                    "difference": 1,
                    "difference_of_sum_and255": 1,
                    "difference_remaining": 1,
                    "exponent_diff": 1,
                    "exponent_diff_adjusted": 1,
                    "exponent_diff_neg": 1,
                    "i_var7": 1,
                    "iteration_count": 1,
                    "normalized_shift": 1,
                    "remaining_shift": 1,
                    "shift_amount": 1,
                    "shift_diff_comp": 1,
                    "shift_diff_temp": 1,
                    "shifted_val1_minus_0xff": 1,
                    "sum_shifted_abs": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_6": 1,
                    "temp_int3": 1,
                    "temp_var": 1
                },
                "lVar1": {
                    "mantissa_product": 1,
                    "product": 6,
                    "temp_1": 1,
                    "temp_long": 4,
                    "temp_long_var": 1,
                    "temp_multiply2": 1
                },
                "param_1": {
                    "bit_pattern1": 1,
                    "first_value": 1,
                    "float1": 1,
                    "input1": 11,
                    "input_1": 2,
                    "input_float1": 1,
                    "input_float_a": 1,
                    "number1": 3,
                    "value1": 8
                },
                "param_2": {
                    "bit_pattern2": 1,
                    "float2": 1,
                    "input2": 11,
                    "input_2": 2,
                    "input_float2": 1,
                    "input_float_b": 1,
                    "number2": 3,
                    "second_value": 1,
                    "value2": 8
                },
                "param_3": {
                    "constant": 2,
                    "dummy": 1,
                    "flag": 1,
                    "float3": 1,
                    "input3": 3,
                    "input_3": 1,
                    "input_one": 1,
                    "mask": 1,
                    "param3": 8,
                    "parameter3": 2,
                    "precision": 1,
                    "unknown": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_variable1": 1,
                    "value3": 1
                },
                "param_4": {
                    "constant2": 2,
                    "convergence": 1,
                    "first_byte2": 1,
                    "first_byte_input2": 1,
                    "float4": 1,
                    "input3": 1,
                    "input4": 3,
                    "input_4": 1,
                    "input_two": 1,
                    "param4": 8,
                    "parameter4": 1,
                    "second_value_shifted_bits": 1,
                    "shift_amount": 1,
                    "temp": 1,
                    "unknown2": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "unused_variable2": 1,
                    "value4": 1
                },
                "uVar1": {
                    "temp_shift_bits": 1
                },
                "uVar2": {
                    "exponent2": 1,
                    "floating_point_result": 1,
                    "result": 25,
                    "result_a": 1,
                    "result_final": 1,
                    "result_xor": 1,
                    "temp_var2": 1
                },
                "uVar3": {
                    "exponent1": 7,
                    "first_byte1": 1,
                    "first_byte_input1": 1,
                    "first_value_leading_byte": 1,
                    "first_value_shifted_bits": 1,
                    "input1_shifted": 2,
                    "input1_upper_bits": 1,
                    "shift1": 2,
                    "shift_count1": 1,
                    "shifted1": 1,
                    "shifted_input1": 2,
                    "shifted_num1": 1,
                    "shifted_val1": 1,
                    "shifted_value": 1,
                    "temp1": 1,
                    "temp_2": 1,
                    "temp_var3": 1,
                    "u_var3": 1,
                    "upper_byte_1": 1,
                    "value1_shifted": 3
                },
                "uVar5": {
                    "is_carry_multiply": 1
                },
                "uVar6": {
                    "mantissa1": 1,
                    "mul_result": 1,
                    "multiplication_result": 1,
                    "multiplied_result": 2,
                    "multiplied_value": 1,
                    "product": 6,
                    "product_low": 5,
                    "product_lower_bits": 2,
                    "result_b": 1,
                    "shifted_num2": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp6": 1,
                    "temp_5": 1,
                    "temp_float": 1,
                    "temp_multiply": 2,
                    "temp_result": 2,
                    "temp_value": 1
                },
                "uVar7": {
                    "is_carry": 1
                },
                "uVar8": {
                    "adjusted_result": 1,
                    "combined": 2,
                    "combined_signs": 1,
                    "exponent2": 1,
                    "exponent_result": 1,
                    "final_result": 1,
                    "integer_bits": 1,
                    "mantissa": 1,
                    "mantissa1": 1,
                    "modified_input": 1,
                    "output": 1,
                    "result": 1,
                    "result2": 1,
                    "result_c": 1,
                    "result_exponent": 1,
                    "result_shifted": 1,
                    "shift2": 1,
                    "shift_count2": 1,
                    "shifted2": 1,
                    "shifted_input2": 1,
                    "shifted_num3": 1,
                    "shifted_result": 1,
                    "shifted_val2": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_7": 1,
                    "temp_result": 3,
                    "temp_var8": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint calculate_float_value_00081944(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int diff;\n  uint product;\n  int diff2;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || param4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((param4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_00081a94;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = param4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      param4 = param4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + param4;\n  temp_result = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = subtraction_overflow(sum,0x7f);\n    diff = sum + -0x7f;\n    is_zero = diff == 0;\n    diff2 = diff;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = subtraction_overflow(0xff,diff);\n      diff2 = 0xff - diff;\n      is_zero = diff == 0xff;\n    }\n    if (!is_zero && diff2 < 0 == is_negative) {\n      result = result | diff * 0x800000;\n    }\n    if (!is_zero && diff2 < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = subtraction_overflow(diff,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    exponent1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = subtraction_overflow(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    exponent1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != addition_overflow(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == addition_overflow(temp_result,0x19)) {\n      exponent1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        exponent1 = exponent1 & ~(temp_result >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_00081a94:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_value_00081944",
            "entrypoint": "0x00081944",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081944": "calculate_float_value_00081944",
                "SBORROW4": "subtraction_overflow",
                "SCARRY4": "addition_overflow",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "diff",
                "iVar7": "diff2",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081bf4": {
            "additional_data": {
                "FUN_00081bf4": {
                    "calculate_ab": 1,
                    "calculate_and_return_result": 1,
                    "calculate_integer_operation": 1,
                    "calculate_parameter": 1,
                    "calculate_result": 6,
                    "calculate_unsigned_comparison": 1,
                    "check_arithmetic_conditions": 1,
                    "check_non_negative_number": 1,
                    "check_overflow": 9,
                    "check_overflow_and_sign": 2,
                    "check_overflow_and_sign_change": 1,
                    "detect_overflow": 1,
                    "determine_int_overflow": 1,
                    "multiply_and_compare": 2,
                    "multiply_and_comparison": 1,
                    "reverse_bits_and_operate": 1
                },
                "bVar1": {
                    "is_combined_input_negative": 1,
                    "is_combined_less_than_zero": 1,
                    "is_combined_negative": 2,
                    "is_less_than_zero": 1,
                    "is_negative": 21,
                    "is_negative_combined": 1,
                    "is_negative_input": 1,
                    "is_negative_result": 1,
                    "is_overflow": 1,
                    "is_sign_change": 1
                },
                "bVar2": {
                    "is_zero": 1
                },
                "bVar3": {
                    "is_equal": 1
                },
                "bVar4": {
                    "is_less_than": 1
                },
                "bVar5": {
                    "is_combined_input_zero": 2,
                    "is_combined_zero": 3,
                    "is_zero": 23,
                    "is_zero_combined": 1,
                    "is_zero_result": 1
                },
                "param_1": {
                    "a": 2,
                    "input1": 6,
                    "input_1": 11,
                    "input_number1": 2,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "number1": 2,
                    "output": 3,
                    "result": 3
                },
                "param_2": {
                    "b": 3,
                    "input2": 7,
                    "input_2": 12,
                    "input_number2": 2,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "number2": 2,
                    "output": 1,
                    "result": 2
                },
                "return_value": {
                    "result": 1
                },
                "uVar2": {
                    "a_doubled": 1,
                    "a_times_2": 1,
                    "a_times_two": 1,
                    "double_input_1": 4,
                    "double_input_value_1": 1,
                    "doubled_input1": 2,
                    "doubled_input_1": 1,
                    "doubled_value1": 1,
                    "input1_double": 1,
                    "input1_multiplied_by2": 1,
                    "input1_times2": 4,
                    "input1_times_2": 1,
                    "input_1_doubled": 2,
                    "input_1_multiplied_by_2": 1,
                    "input_1_shifted": 2,
                    "input_1_times_2": 3,
                    "input_1_times_two": 1,
                    "number1_doubled": 1,
                    "number1_multiplied_by_2": 1,
                    "number1_times_two": 1
                },
                "uVar3": {
                    "b_doubled": 1,
                    "b_times_2": 1,
                    "b_times_two": 1,
                    "double_input_2": 4,
                    "double_input_value_2": 1,
                    "doubled_input2": 2,
                    "doubled_input_2": 1,
                    "doubled_value2": 1,
                    "input2_double": 1,
                    "input2_multiplied_by2": 1,
                    "input2_times2": 4,
                    "input2_times_2": 1,
                    "input_2_doubled": 2,
                    "input_2_multiplied_by_2": 1,
                    "input_2_shifted": 2,
                    "input_2_times_2": 3,
                    "input_2_times_two": 1,
                    "number2_doubled": 1,
                    "number2_multiplied_by_2": 1,
                    "number2_times_two": 1
                },
                "uVar4": {
                    "bitwise_or": 1,
                    "combined": 4,
                    "combined_input": 8,
                    "combined_input_and_mask": 1,
                    "combined_inputs": 8,
                    "combined_number": 1,
                    "combined_result": 1,
                    "combined_value": 1,
                    "combined_values": 2,
                    "combined_variables": 1,
                    "result": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_00081c5c"
            ],
            "code": "\nuint check_overflow_and_sign_change_00081bf4(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input1_times2;\n  uint double_input_2;\n  uint combined_input;\n  bool is_zero;\n  \n  input1_times2 = input_1 * 2;\n  double_input_2 = input_2 * 2;\n  if (((int)input1_times2 >> 0x18 == -1 || (int)double_input_2 >> 0x18 == -1) &&\n     ((((int)input1_times2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)double_input_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    return 1;\n  }\n  combined_input = input1_times2 | input_2 & 0x7fffffff;\n  is_zero = combined_input == 0;\n  if (!is_zero) {\n    combined_input = input_1 ^ input_2;\n    is_zero = combined_input == 0;\n  }\n  is_negative = -1 < (int)combined_input;\n  if (is_negative) {\n    input_1 = input1_times2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && double_input_2 <= input1_times2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || double_input_2 > input1_times2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  return input_1;\n}\n\n",
            "current_name": "check_overflow_and_sign_change_00081bf4",
            "entrypoint": "0x00081bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081bf4": "check_overflow_and_sign_change_00081bf4",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar2": "input1_times2",
                "uVar3": "double_input_2",
                "uVar4": "combined_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c54": {
            "additional_data": {
                "FUN_00081c54": {
                    "compare_and_return": 2,
                    "compare_equals": 1,
                    "compare_float": 2,
                    "compare_float_values": 1,
                    "compare_floating_point_numbers": 1,
                    "compare_floats": 18,
                    "compare_param_values": 1,
                    "compare_parameters": 3,
                    "compare_values": 2
                },
                "param_1": {
                    "a": 1,
                    "first_float": 4,
                    "first_param": 2,
                    "first_value": 2,
                    "float1": 6,
                    "input1": 2,
                    "value1": 14
                },
                "param_2": {
                    "b": 1,
                    "float2": 6,
                    "input2": 2,
                    "second_float": 4,
                    "second_param": 2,
                    "second_value": 2,
                    "value2": 14
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_00081ca8"
            ],
            "code": "\nvoid compare_floats_00081c54(undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cfcmpeq(value2,value1);\n  return;\n}\n\n",
            "current_name": "compare_floats_00081c54",
            "entrypoint": "0x00081c54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c54": "compare_floats_00081c54",
                "param_1": "value1",
                "param_2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c5c": {
            "additional_data": {
                "CONCAT44": {
                    "concatenate": 1,
                    "concatenate_integers": 1,
                    "concatenate_values": 2
                },
                "FUN_00081bf4": {
                    "multiply_unsigned_integers": 1
                },
                "FUN_00081c5c": {
                    "combine_floats": 1,
                    "combine_parameters": 5,
                    "combine_params": 1,
                    "concat_params": 1,
                    "concatenate": 1,
                    "concatenate_and_compare": 2,
                    "concatenate_and_convert_floats": 1,
                    "concatenate_ints": 1,
                    "concatenate_param": 1,
                    "concatenate_parameters": 2,
                    "concatenate_params": 12,
                    "concatenate_signed_integers": 1,
                    "concatenate_values": 2
                },
                "__cmpsf2": {
                    "compare_floats": 5
                },
                "param_1": {
                    "data1": 1,
                    "first_float": 1,
                    "first_int": 1,
                    "first_param": 7,
                    "first_parameter": 2,
                    "input1": 6,
                    "input_1": 1,
                    "input_param1": 1,
                    "input_parameter1": 1,
                    "integer1": 1,
                    "number1": 1,
                    "param1": 1,
                    "param_a": 1,
                    "value1": 6
                },
                "param_2": {
                    "data2": 1,
                    "input2": 6,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_parameter2": 1,
                    "integer2": 1,
                    "number2": 1,
                    "param2": 1,
                    "param_b": 1,
                    "second_float": 1,
                    "second_int": 1,
                    "second_param": 7,
                    "second_parameter": 2,
                    "value2": 6
                }
            },
            "called": [
                "FUN_00081bf4"
            ],
            "calling": [
                "FUN_00081c54",
                "FUN_00081c94"
            ],
            "code": "\nundefined8 concatenate_params_00081c5c(undefined4 first_param,undefined4 second_param)\n\n{\n  compare_floats();\n  return concatenate_values(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_00081c5c",
            "entrypoint": "0x00081c5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_values",
                "FUN_00081c5c": "concatenate_params_00081c5c",
                "__cmpsf2": "compare_floats",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081c94": {
            "additional_data": {
                "FUN_00081c94": {
                    "check_abi_equality": 1,
                    "check_abnormal_condition": 1,
                    "check_carry_and_zero": 1,
                    "check_comparison_result": 3,
                    "check_condition_and_return": 1,
                    "check_conditional_flags": 1,
                    "check_conditions": 1,
                    "check_equality": 9,
                    "check_equality_and_return_result": 1,
                    "check_equality_and_zero": 1,
                    "check_equality_conditions": 1,
                    "check_for_zero_or_equal": 1,
                    "check_if_equal_or_zero": 1,
                    "check_result": 1,
                    "check_zero_and_comparison": 1,
                    "check_zero_comparison": 2,
                    "check_zero_condition": 2,
                    "check_zero_flags": 1,
                    "check_zero_registers": 1
                },
                "in_CY": {
                    "carry_flag": 15,
                    "carry_result": 1,
                    "has_carry": 1,
                    "is_carry": 3,
                    "is_carry_clear": 1,
                    "is_carry_register": 1,
                    "is_carry_result": 2,
                    "is_carry_set": 4,
                    "is_equal": 2
                },
                "in_ZR": {
                    "is_zero": 6,
                    "is_zero_register": 1,
                    "is_zero_result": 8,
                    "zero_flag": 13,
                    "zero_result": 1,
                    "zero_result_flag": 1
                },
                "param_1": {
                    "input_1": 2
                },
                "param_2": {
                    "input_2": 2
                }
            },
            "called": [
                "FUN_00081c5c"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_abi_equality_00081c94(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cfcmpeq();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_abi_equality_00081c94",
            "entrypoint": "0x00081c94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081c94": "check_abi_equality_00081c94",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081ca8": {
            "additional_data": {
                "FAN_00081ca8": {
                    "is_any_bit_set_zero_or_carry": 1
                },
                "FUN_00081c54": {
                    "calculate_sum": 1,
                    "perform_calculation": 2,
                    "perform_operation": 2,
                    "process_arguments": 1,
                    "process_data": 1,
                    "update_flags": 1
                },
                "FUN_00081ca8": {
                    "check_carry_zero": 1,
                    "check_comparison_result": 4,
                    "check_comparisons": 1,
                    "check_condition": 3,
                    "check_conditions": 5,
                    "check_conditions_and_return": 1,
                    "check_greater_or_equal_zero": 1,
                    "check_if_order_is_completed": 1,
                    "check_input_condition": 1,
                    "check_order": 1,
                    "check_order_conditions": 1,
                    "check_order_of_instruments": 1,
                    "check_zero_or_less": 1,
                    "check_zero_or_negative": 1,
                    "is_any_value_less_or_equal": 1,
                    "is_cfrcmple_less_than_or_equal": 1,
                    "is_comparison_le_or_equal": 1,
                    "is_comparison_result_true": 1,
                    "is_le_or_zero": 1,
                    "is_leq_or_zero": 1,
                    "is_sum_greater_than_zero": 1
                },
                "in_CY": {
                    "carry": 1,
                    "carry_flag": 4,
                    "carry_result": 1,
                    "carry_set": 1,
                    "condition_1_result": 1,
                    "is_carry": 9,
                    "is_carry_flag": 1,
                    "is_carry_flag_set": 1,
                    "is_carry_result": 1,
                    "is_carry_set": 5,
                    "is_condition_met_a": 1,
                    "is_leq": 1,
                    "is_negative_result": 1,
                    "is_true": 1
                },
                "in_ZR": {
                    "condition_2_result": 1,
                    "is_condition_met_b": 1,
                    "is_less_than_or_equal_to_zero": 1,
                    "is_zero": 10,
                    "is_zero_result": 9,
                    "is_zero_set": 1,
                    "zero_flag": 4,
                    "zero_result": 2
                },
                "param_1": {
                    "data1": 1,
                    "data_param_1": 1,
                    "input_param_1": 3
                },
                "param_2": {
                    "data2": 1,
                    "data_param_2": 1,
                    "input_param_2": 3
                }
            },
            "called": [
                "FUN_00081c54"
            ],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nbool check_order_conditions_00081ca8(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  __aeabi_cfrcmple();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "current_name": "check_order_conditions_00081ca8",
            "entrypoint": "0x00081ca8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081ca8": "check_order_conditions_00081ca8",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081cd0": {
            "additional_data": {
                "FUN_00081cd0": {
                    "convert_negative_to_positive": 1,
                    "convert_to_positive_int": 1,
                    "convert_to_signed_int": 5,
                    "convert_to_signed_integer": 3,
                    "convert_to_twos_complement": 1,
                    "convert_uint_to_signed_int": 1,
                    "convert_unsigned_to_signed": 1,
                    "convert_unsigned_to_signed_int": 1,
                    "decode_value": 1,
                    "extract_and_convert": 1,
                    "extract_and_scale_negative_value": 1,
                    "extract_int_from_param": 1,
                    "extract_integer": 1,
                    "extract_number": 1,
                    "extract_signed_integer": 2,
                    "extract_significant_bits": 1,
                    "extract_value": 1,
                    "extract_value_from_param": 1,
                    "parse_integer": 1,
                    "reverse_bits_and_sign": 1,
                    "reverse_number": 2,
                    "reverse_transform": 1
                },
                "param_1": {
                    "input": 6,
                    "input_number": 4,
                    "input_val": 1,
                    "input_value": 14,
                    "output": 1,
                    "shifted_input": 1,
                    "signed_input": 1,
                    "unsigned_int": 1,
                    "value": 2
                },
                "param_2": {
                    "output_value": 1
                },
                "shifted_value": {
                    "shifted_value": 1
                },
                "uVar1": {
                    "converted_val": 1,
                    "converted_value": 1,
                    "masked_value": 1,
                    "result": 4,
                    "shift_count": 1,
                    "shifted_and_signed": 1,
                    "shifted_input": 3,
                    "shifted_number": 1,
                    "shifted_result": 1,
                    "shifted_value": 15,
                    "temp_result": 1,
                    "updated_input": 1
                },
                "uVar2": {
                    "complement": 1,
                    "difference": 17,
                    "difference_val": 1,
                    "inverse_shift_amount": 1,
                    "mask": 1,
                    "offset": 2,
                    "offset_value": 1,
                    "shift_amount": 3,
                    "shift_distance": 1,
                    "shifted_difference": 1,
                    "temp": 2
                },
                "uVar3": {
                    "decoded_value": 1,
                    "masked_shifted_input": 1,
                    "result": 4,
                    "shifted_and_masked_value": 1,
                    "shifted_byte": 1,
                    "shifted_input": 3,
                    "shifted_param": 1,
                    "shifted_result": 1,
                    "shifted_value2": 1,
                    "shifted_value8": 1
                },
                "uVar4": {
                    "bitmask": 1,
                    "converted_value": 2,
                    "is_negative": 1,
                    "negative_number": 1,
                    "negative_result": 1,
                    "negative_value": 1,
                    "shift_amount": 2,
                    "shifted_and_signed_value": 1,
                    "shifted_negative_value": 1,
                    "sign_extended_value": 1
                },
                "uVar5": {
                    "extracted_value": 1,
                    "masked_value": 1,
                    "negated_result": 1,
                    "result": 3,
                    "shift_amount": 1
                },
                "uVar6": {
                    "is_negative": 1,
                    "negative_extracted_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint convert_unsigned_to_signed_int_00081cd0(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_unsigned_to_signed_int_00081cd0",
            "entrypoint": "0x00081cd0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081cd0": "convert_unsigned_to_signed_int_00081cd0",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d1c": {
            "additional_data": {
                "0x18": {
                    "shift_amount": 1
                },
                "0x7f000000": {
                    "bit_24": 1,
                    "boundary": 1,
                    "mask_overflow": 1
                },
                "0x7fffff": {
                    "bitfield_mask": 1,
                    "mask_exclude_sign_bit": 1
                },
                "0x80000000": {
                    "bit_31": 1,
                    "msb_mask": 1,
                    "shift_flag": 1
                },
                "0x9e": {
                    "shift_const": 1,
                    "shift_constant": 1,
                    "shift_value": 1
                },
                "0xff": {
                    "mask": 1,
                    "mask_low_byte": 1
                },
                "0xffffff9f": {
                    "boundary_value": 1,
                    "check_constant": 2
                },
                "FUN_00081d1c": {
                    "apply_bitwise_shift": 1,
                    "bitwise_shift": 1,
                    "calculate_shifted_value": 2,
                    "check_bitwise_operations": 1,
                    "check_value": 1,
                    "convert_to_fixed_point": 1,
                    "decode_and_verify": 1,
                    "decode_integer": 1,
                    "decode_unsigned_int": 2,
                    "decode_unsigned_integer": 2,
                    "decode_value": 1,
                    "extract_bit_field": 1,
                    "extract_bitfield": 1,
                    "extract_bits": 1,
                    "extract_bits_and_shift_right": 1,
                    "extract_bits_from_integer": 1,
                    "extract_bits_from_value": 1,
                    "extract_uint_from_param": 1,
                    "parse_number": 1,
                    "reverse_bit_shifting": 1,
                    "reverse_bits": 5,
                    "reverse_bits_and_shift": 1,
                    "reverse_bitwise_operation": 1,
                    "reverse_integer": 1
                },
                "param_1": {
                    "input": 11,
                    "input_integer": 1,
                    "input_number": 4,
                    "input_value": 12,
                    "value": 3
                },
                "uVar1": {
                    "bit_count": 1,
                    "result": 5,
                    "shift_amount": 16,
                    "shift_count": 2,
                    "shift_value": 3,
                    "shifted_amount": 1,
                    "shifted_value": 2,
                    "step": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000805d0"
            ],
            "code": "\nuint reverse_bits_and_shift_00081d1c(uint input_value)\n\n{\n  uint shift_amount;\n  \n  if (((input_value & 0x80000000) != 0) || (input_value << 1 < 0x7f000000)) {\n    return 0;\n  }\n  shift_amount = 0x9e - ((input_value << 1) >> 0x18);\n  if (-1 < (int)shift_amount) {\n    return (input_value << 8 | 0x80000000) >> (shift_amount & 0xff);\n  }\n  if ((shift_amount == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_shift_00081d1c",
            "entrypoint": "0x00081d1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d1c": "reverse_bits_and_shift_00081d1c",
                "param_1": "input_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d5c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 1,
                    "data_array": 1,
                    "rel_array": 4,
                    "relocation_array": 2,
                    "relocation_entries": 1,
                    "relocation_table": 2,
                    "symbol_array": 1
                },
                "FUN_00081d5c": {
                    "modify_function": 1,
                    "process_data": 1,
                    "set_relocation_entry": 1,
                    "update_array_element": 1,
                    "update_array_elements": 1,
                    "update_attributes": 1,
                    "update_data_array": 1,
                    "update_data_entry": 1,
                    "update_offset_table": 1,
                    "update_rel_entry": 1,
                    "update_relocation_entry": 15,
                    "update_relocation_info": 2,
                    "update_relocation_record": 1,
                    "update_relocation_table": 2,
                    "update_symbol_table": 1
                },
                "param_1": {
                    "address": 6,
                    "address_to_modify": 1,
                    "attribute1": 1,
                    "data_1": 1,
                    "entry_value1": 1,
                    "first_parameter": 1,
                    "input_value1": 1,
                    "new_address": 3,
                    "new_param1": 1,
                    "new_value": 4,
                    "new_value1": 3,
                    "offset": 1,
                    "old_value": 1,
                    "symbol_address": 2,
                    "symbol_index": 1,
                    "symbol_value": 1,
                    "value_1": 1,
                    "value_to_be_updated": 1
                },
                "param_2": {
                    "attribute2": 1,
                    "data_2": 1,
                    "entry_value2": 1,
                    "input_value2": 1,
                    "new_offset": 1,
                    "new_param2": 1,
                    "new_value": 6,
                    "new_value2": 3,
                    "offset": 1,
                    "other_value": 2,
                    "second_parameter": 1,
                    "symbol_offset": 1,
                    "symbol_value": 1,
                    "value": 8,
                    "value_2": 1,
                    "value_to_update": 1
                },
                "param_3": {
                    "addend": 1,
                    "attribute3": 1,
                    "bitmask": 1,
                    "data": 1,
                    "data_3": 1,
                    "entry_value3": 1,
                    "extra_data": 1,
                    "extra_value": 2,
                    "flag": 1,
                    "input_value3": 1,
                    "mask": 1,
                    "new_data": 1,
                    "new_offset": 1,
                    "new_param3": 1,
                    "new_ptr": 1,
                    "new_value3": 3,
                    "new_value_bit": 1,
                    "offset": 5,
                    "old_value": 1,
                    "relocation_type": 1,
                    "section_offset": 1,
                    "symbol_type": 1,
                    "third_parameter": 1,
                    "value_3": 1
                },
                "pdVar1": {
                    "array_data": 1,
                    "current_entry": 2,
                    "data_entry": 1,
                    "dynamic_array": 1,
                    "dynamic_data": 1,
                    "entry_pointer": 1,
                    "new_array_element": 1,
                    "offset_table": 1,
                    "pointer": 1,
                    "rel_entry": 1,
                    "rel_entry_ptr": 2,
                    "reloc_entry": 1,
                    "reloc_table": 1,
                    "relocation_entry": 10,
                    "relocation_entry_ptr": 1,
                    "relocation_info": 1,
                    "relocation_record": 1,
                    "symbol_table_ptr": 1,
                    "temp_ptr": 1
                },
                "r_offset": {
                    "offset": 1
                },
                "uVar2": {
                    "current_index": 1,
                    "entry_index": 6,
                    "index": 21,
                    "old_index": 1,
                    "rel_offset": 1,
                    "symbol_table_size": 1
                },
                "uVar3": {
                    "bit": 1,
                    "bit_flag": 4,
                    "bit_mask": 18,
                    "bit_shifted_value": 2,
                    "bitmask": 4,
                    "flag": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00080a68"
            ],
            "code": "\nundefined4 update_relocation_entry_00081d5c(dword address,dword value,dword offset)\n\n{\n  dword *relocation_entry;\n  uint index;\n  uint bit_mask;\n  \n  if (rel_array[48].offset == 0) {\n    rel_array[48].offset = 0x20070184;\n  }\n  index = *(uint *)(rel_array[48].offset + 4);\n  relocation_entry = (dword *)rel_array[48].offset;\n  if (0x1f < (int)index) {\n    relocation_entry = (dword *)malloc(400);\n    if (relocation_entry == (dword *)0x0) {\n      return 0xffffffff;\n    }\n    *relocation_entry = rel_array[48].offset;\n    relocation_entry[1] = 0;\n    index = 0;\n    rel_array[48].offset = (dword)relocation_entry;\n    relocation_entry[0x62] = 0;\n    relocation_entry[99] = 0;\n  }\n  bit_mask = 1 << (index & 0xff);\n  relocation_entry[index + 0x22] = address;\n  relocation_entry[0x62] = relocation_entry[0x62] | bit_mask;\n  relocation_entry[index + 0x42] = offset;\n  relocation_entry[99] = bit_mask | relocation_entry[99];\n  relocation_entry[1] = index + 1;\n  relocation_entry[index + 2] = value;\n  return 0;\n}\n\n",
            "current_name": "update_relocation_entry_00081d5c",
            "entrypoint": "0x00081d5c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081d5c": "update_relocation_entry_00081d5c",
                "param_1": "address",
                "param_2": "value",
                "param_3": "offset",
                "pdVar1": "relocation_entry",
                "r_offset": "offset",
                "uVar2": "index",
                "uVar3": "bit_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081d7c": {
            "additional_data": {
                "FUNC_00080118": {
                    "execute_sub_function2": 1,
                    "function_1": 2,
                    "initialize_sub_function": 1,
                    "sub_function1": 1,
                    "sub_function_2": 1,
                    "sub_function_b": 1,
                    "subfunction_1": 1,
                    "subfunction_one": 1
                },
                "FUNC_00085858": {
                    "additional_sub_function": 1,
                    "execute_sub_function3": 1,
                    "function_2": 2,
                    "sub_function2": 1,
                    "sub_function_3": 1,
                    "sub_function_c": 1,
                    "subfunction_2": 1,
                    "subfunction_two": 1
                },
                "FUN_00081d7c": {
                    "execute_functions": 1,
                    "execute_init_functions": 8,
                    "execute_initialization": 2,
                    "execute_sub_functions": 4,
                    "initialize_and_call_functions": 4,
                    "initialize_and_call_subfunctions": 3,
                    "initialize_and_execute": 2,
                    "initialize_and_execute_subfunctions": 3,
                    "initialize_and_invoke_functions": 1,
                    "initialize_function": 1,
                    "run_init_functions": 2
                },
                "FUN_00083974": {
                    "call_function_with_param": 1,
                    "execute_sub_function": 1,
                    "execute_sub_function1": 1,
                    "execute_subfunction": 2,
                    "invoke_sub_function": 1,
                    "sub_function_1": 1,
                    "sub_function_a": 1
                },
                "_init": {
                    "initialize": 1
                },
                "iVar1": {
                    "counter": 9,
                    "iteration": 1,
                    "iteration_count": 13,
                    "iteration_counter": 4,
                    "loop_counter": 3
                },
                "param_1": {
                    "input_param": 1
                },
                "ppcVar2": {
                    "function_array": 3,
                    "function_list": 1,
                    "function_pointer": 6,
                    "function_pointer_array": 6,
                    "function_pointers": 13,
                    "function_ptr_array": 1
                }
            },
            "called": [
                "FUN_00083974",
                "FUN_00080118",
                "FUN_00085858"
            ],
            "calling": [
                "FUN_00080ae4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00081d88) */\n/* WARNING: Removing unreachable block (ram,0x00081d8c) */\n/* WARNING: Removing unreachable block (ram,0x00081db8) */\n\nvoid execute_init_functions_00081d7c(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  initialize();\n  function_pointers = (code **)0x85860;\n  iteration_count = 0;\n  do {\n    iteration_count = iteration_count + 1;\n    function_pointers = function_pointers + 1;\n    (**function_pointers)();\n  } while (iteration_count != 4);\n  return;\n}\n\n",
            "current_name": "execute_init_functions_00081d7c",
            "entrypoint": "0x00081d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00081d7c": "execute_init_functions_00081d7c",
                "_init": "initialize",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081df4": {
            "additional_data": {
                "140": {
                    "index": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2,
                    "relocation_array": 1,
                    "relocation_table": 2
                },
                "FUN_00081df4": {
                    "allocate_and_copy_elf_data": 1,
                    "allocate_and_initialize_memory": 1,
                    "allocate_memory": 28,
                    "allocate_rel_array": 1
                },
                "FUN_00081e14": {
                    "apply_relocation": 1,
                    "initialize_memory": 1,
                    "perform_action": 1,
                    "process_data": 21,
                    "process_memory": 1,
                    "process_rel_array": 1,
                    "process_relocation": 3,
                    "process_relocations": 1
                },
                "param_1": {
                    "array": 1,
                    "data": 5,
                    "data_ptr": 3,
                    "input_array": 1,
                    "input_data": 1,
                    "mem_size": 1,
                    "memory_size": 1,
                    "ptr": 1,
                    "size": 16,
                    "size_in_bytes": 1
                },
                "param_2": {
                    "array_size": 2,
                    "count": 13,
                    "data_length": 3,
                    "data_size": 3,
                    "element_count": 1,
                    "length": 2,
                    "num_elements": 3,
                    "num_relocations": 1,
                    "relocation_count": 1,
                    "size": 1
                },
                "r_offset": {
                    "offset": 1
                }
            },
            "called": [
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083974"
            ],
            "code": "\nvoid allocate_and_initialize_memory_00081df4(undefined4 size)\n\n{\n  _malloc_r(relocation_table[140].offset,size);\n  return;\n}\n\n",
            "current_name": "allocate_and_initialize_memory_00081df4",
            "entrypoint": "0x00081df4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_table",
                "FUN_00081df4": "allocate_and_initialize_memory_00081df4",
                "param_1": "size",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e04": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_relocations": 1,
                    "rel_array": 1,
                    "rel_entry_array": 1,
                    "relocation_table": 1
                },
                "FUN_00081e04": {
                    "free_elf32_rel": 6,
                    "free_elf32_rel_array": 2,
                    "free_elf32_rel_array_at_offset": 1,
                    "free_elf32_rel_array_entry": 1,
                    "free_elf32_rel_array_offset": 1,
                    "free_elf32_rel_array_r_offset": 1,
                    "free_elf32_rel_array_value": 1,
                    "free_elf32_rel_entry": 5,
                    "free_elf32_rel_offset": 4,
                    "free_elf32_rel_r_offset": 1,
                    "free_elf32_relr_offset": 1,
                    "free_memory": 3,
                    "free_memory_block": 1,
                    "free_r_offset": 1,
                    "free_rel_entry": 1,
                    "free_unused_memory": 1
                },
                "FUN_00083d9c": {
                    "call_fun_00083d9c": 1,
                    "call_fun_with_params": 1,
                    "do_something": 6,
                    "execute_operation": 1,
                    "load_to_memory": 1,
                    "modify": 1,
                    "perform_action": 2,
                    "perform_cleanup": 1,
                    "perform_operation": 3,
                    "process_data": 4,
                    "process_elf32_rel_entry": 1,
                    "process_entry": 2,
                    "process_offset": 1,
                    "process_param": 2,
                    "process_params": 1,
                    "set_relocation": 1
                },
                "param_1": {
                    "arg": 1,
                    "data_offset": 1,
                    "entry": 2,
                    "entry_index": 1,
                    "entry_offset": 1,
                    "mem_address": 1,
                    "mem_block": 1,
                    "memory": 1,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_pointer": 1,
                    "offset": 5,
                    "param": 7,
                    "param_ptr": 1,
                    "ptr": 3,
                    "r_offset": 1,
                    "unknown_argument": 1,
                    "value": 1
                },
                "param_2": {
                    "action": 1,
                    "action_param": 1,
                    "cleanup_flag": 1,
                    "count": 3,
                    "entry_index": 1,
                    "length": 1,
                    "num": 1,
                    "number": 2,
                    "operation": 1,
                    "operation_code": 1,
                    "param": 2,
                    "param2": 2,
                    "param_int": 1,
                    "size": 5,
                    "some_param": 1,
                    "unused_param": 1,
                    "value": 3
                },
                "r_offset": {
                    "offset": 1
                }
            },
            "called": [
                "FUN_00083d9c"
            ],
            "calling": [
                "FUN_0008160c",
                "FUN_000815fe"
            ],
            "code": "\nvoid free_elf32_rel_array_entry_00081e04(undefined4 param)\n\n{\n  _free_r(elf_relocations[140].offset,param);\n  return;\n}\n\n",
            "current_name": "free_elf32_rel_array_entry_00081e04",
            "entrypoint": "0x00081e04",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "elf_relocations",
                "FUN_00081e04": "free_elf32_rel_array_entry_00081e04",
                "param_1": "param",
                "r_offset": "offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00081e14": {
            "additional_data": {
                "DAT_20070000": {
                    "elf32_rel_array": 1
                },
                "DAT_20070464": {
                    "base_offset": 1
                },
                "DAT_20071188": {
                    "initial_heap_end": 1,
                    "max_address": 1
                },
                "DAT_2007118c": {
                    "max_address": 1,
                    "max_heap_end": 1
                },
                "DAT_20071190": {
                    "base_address": 1,
                    "memory_offset": 1
                },
                "DAT_20071194": {
                    "end_address": 1,
                    "heap_end": 1
                },
                "DICT_00082160": {
                    "hash_size": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 1
                },
                "FUNCHANDLEMEMORY": {
                    "allocate_memory": 1
                },
                "FUNC_00082598": {
                    "lock_memory": 2,
                    "malloc_lock": 1
                },
                "FUNC_0008259c": {
                    "allocate_additional_memory": 1,
                    "expand_memory": 1,
                    "get_memory_chunk": 1,
                    "second_helper_function": 1
                },
                "FUN_00081e14": {
                    "allocate_and_initialize_memory": 1,
                    "allocate_memory": 27,
                    "allocate_memory_block": 1,
                    "malloc_and_lock": 1
                },
                "FUN_00082598": {
                    "first_helper_function": 1
                },
                "FUN_00082970": {
                    "malloc_unlock": 1,
                    "third_helper_function": 1,
                    "unlock_memory": 2
                },
                "FUN_00083d9c": {
                    "contract_memory": 1,
                    "extend_heap": 1,
                    "fourth_helper_function": 1,
                    "update_memory_chunk": 1
                },
                "__malloc_lock": {
                    "lock_memory": 1
                },
                "__malloc_unlock": {
                    "unlock_memory": 1
                },
                "_free_r": {
                    "free_memory": 1
                },
                "_sbrk_r": {
                    "change_memory_break": 1
                },
                "alignment_mask": {
                    "alignment_mask": 1
                },
                "allocate_memory": {
                    "new_function_name": 1
                },
                "dVar1": {
                    "align_offset": 1,
                    "elf_rel_info": 1,
                    "entry": 1,
                    "first_entry": 1,
                    "index": 1,
                    "info1": 1,
                    "info_1": 1,
                    "info_offset": 1,
                    "offset": 1,
                    "offset1": 1,
                    "prev_size": 1,
                    "r_info": 1,
                    "r_info_1": 2,
                    "r_info_temp": 1,
                    "rel_array_index": 1,
                    "rel_info": 6,
                    "rel_offset": 3,
                    "rel_table_entry": 1,
                    "relocation_offset": 1,
                    "temp1": 1,
                    "temp15": 1,
                    "temp_var41": 1
                },
                "dVar11": {
                    "align_offset": 1,
                    "current": 1,
                    "current_node_rel_offset": 1,
                    "d_var1": 1,
                    "info2": 1,
                    "loop_offset": 1,
                    "next_current_entry": 1,
                    "next_offset": 2,
                    "node_offset": 1,
                    "offset": 1,
                    "offset3": 1,
                    "offset_2": 1,
                    "prev_block": 1,
                    "prev_rel_info": 1,
                    "prev_rel_offset": 1,
                    "prev_relocation_offset": 1,
                    "previous": 1,
                    "r_offset_2": 1,
                    "rel_info": 1,
                    "search_rel_entry": 1,
                    "temp21": 1,
                    "temp_offset": 2,
                    "temp_prev_offset": 1,
                    "temp_ptr2": 1,
                    "temp_var5": 2,
                    "temp_var65": 1,
                    "var3": 1
                },
                "dVar12": {
                    "d_var12": 1,
                    "d_var2": 1,
                    "last_block": 1,
                    "new_prev": 1,
                    "offset": 1,
                    "offset4": 1,
                    "offset_3": 1,
                    "prev_node": 1,
                    "prev_node_offset": 1,
                    "prev_node_rel_info": 1,
                    "prev_offset": 3,
                    "prev_offset_temp": 1,
                    "prev_rel_entry": 2,
                    "prev_rel_info": 1,
                    "prev_relocation": 1,
                    "previous": 1,
                    "previous_current_entry": 1,
                    "temp22": 1,
                    "temp8": 1,
                    "temp_offset": 1,
                    "temp_prev_ptr": 1,
                    "temp_ptr3": 1,
                    "temp_var6": 1,
                    "temp_var61": 1,
                    "tmp8": 1,
                    "var4": 1,
                    "var_8": 1
                },
                "dVar17": {
                    "offset1": 1,
                    "rel_ptr_iter": 1
                },
                "dVar18": {
                    "offset2": 1
                },
                "dVar19": {
                    "offset3": 1,
                    "temp": 1
                },
                "dVar20": {
                    "offset4": 1
                },
                "dVar21": {
                    "offset5": 1
                },
                "dVar22": {
                    "offset6": 1
                },
                "dVar23": {
                    "offset7": 1
                },
                "dVar7": {
                    "align_offset": 1,
                    "current_block_ptr": 1,
                    "current_entry": 1,
                    "current_node_offset": 1,
                    "current_offset": 5,
                    "current_rel_entry": 1,
                    "current_relocation_offset": 1,
                    "d_var7": 1,
                    "index": 1,
                    "new_offset": 1,
                    "next_node_rel_offset": 1,
                    "next_rel_offset": 1,
                    "offset": 3,
                    "offset2": 1,
                    "offset_1": 1,
                    "r_offset": 1,
                    "r_offset_1": 1,
                    "r_offset_temp": 1,
                    "rel_offset": 3,
                    "temp19": 1,
                    "temp_new_offset": 1,
                    "temp_var67": 1
                },
                "entry_size_array": {
                    "entry_size_array": 1
                },
                "iVar13": {
                    "adjusted_index": 1,
                    "block_index": 1,
                    "bucket_index": 3,
                    "count": 1,
                    "current_node_rel_info": 1,
                    "i_var13": 1,
                    "index": 8,
                    "offset": 1,
                    "pos_2": 1,
                    "size2": 1,
                    "temp32": 1,
                    "temp9": 1,
                    "temp_loop_counter": 1,
                    "temp_var1": 1,
                    "temp_var16": 1,
                    "temp_var2": 1,
                    "temp_var6": 1,
                    "temp_var_7": 1,
                    "tmp8": 1,
                    "tmp9": 1,
                    "var_4": 1
                },
                "iVar2": {
                    "alignment_index": 1,
                    "block_addr": 1,
                    "curr_size": 1,
                    "current_entry": 1,
                    "current_index": 2,
                    "entry_1": 1,
                    "head": 1,
                    "i_var2": 1,
                    "info_2": 1,
                    "next_node_offset": 1,
                    "next_offset": 1,
                    "offset": 3,
                    "pos_1": 1,
                    "prev": 1,
                    "prev_offset": 1,
                    "prev_ptr": 1,
                    "prev_rel_offset": 2,
                    "rel_offset": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp33": 1,
                    "temp_var1": 1,
                    "temp_var31": 1,
                    "tmp1": 2
                },
                "iVar21": {
                    "alignment": 1
                },
                "iVar5": {
                    "adjusted_size": 1,
                    "cur_rel_offset": 1,
                    "entry": 1,
                    "i_var5": 3,
                    "new_offset": 1,
                    "next": 1,
                    "next_index": 1,
                    "next_offset": 3,
                    "next_ptr": 1,
                    "next_rel_offset": 1,
                    "next_size": 1,
                    "prev_node_offset": 1,
                    "prev_size": 1,
                    "previous_offset": 1,
                    "temp34": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_var3": 2,
                    "temp_var_3": 1,
                    "tmp4": 2,
                    "var1": 2,
                    "var_14": 1
                },
                "iVar9": {
                    "i_var9": 3,
                    "new_next": 1,
                    "new_offset": 1,
                    "next_entry": 1,
                    "next_offset": 2,
                    "next_size2": 1,
                    "prev_index": 1,
                    "prev_node_rel_offset": 1,
                    "prev_offset": 1,
                    "prev_rel_offset": 1,
                    "prev_size": 1,
                    "previous_offset": 1,
                    "size_node_offset": 1,
                    "temp35": 1,
                    "temp7": 2,
                    "temp9": 1,
                    "temp_offset": 1,
                    "temp_var24": 1,
                    "temp_var4": 2,
                    "temp_var_6": 1,
                    "tmp7": 2,
                    "var2": 1,
                    "var3": 1,
                    "var_10": 1
                },
                "new_offset": {
                    "new_rel_offset": 1
                },
                "pData": {
                    "rel_info": 1
                },
                "param_1": {
                    "lock": 11,
                    "lock_param": 3,
                    "lock_ptr": 3,
                    "mem_pointer": 1,
                    "param": 2,
                    "param_address": 1,
                    "param_lock": 3,
                    "param_ptr": 2,
                    "ptr_memory": 1,
                    "result": 2,
                    "result_ptr": 1,
                    "size_ptr": 1
                },
                "param_2": {
                    "length": 1,
                    "size": 27,
                    "size_in_bytes": 1,
                    "size_needed": 1,
                    "size_param": 1
                },
                "pdVar14": {
                    "arr1": 1,
                    "bucket": 2,
                    "current_rel": 1,
                    "entry_array_ptr": 1,
                    "entry_ptr": 1,
                    "first_node_rel_info": 1,
                    "node_array": 1,
                    "node_ptr": 1,
                    "pd_var": 1,
                    "pd_var14": 1,
                    "pd_var21": 1,
                    "pointer_info": 1,
                    "prev_ptr": 1,
                    "prev_rel_entry_array": 1,
                    "ptr2": 1,
                    "ptr_1": 1,
                    "ptr_2": 1,
                    "rel_array": 2,
                    "rel_array_ptr": 2,
                    "rel_entry_array": 1,
                    "rel_info_ptr": 1,
                    "rel_table": 1,
                    "target_block_ptr": 1,
                    "temp28": 1,
                    "temp_array1": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_2": 1
                },
                "pdVar17": {
                    "arr2": 1,
                    "bucket": 2,
                    "curr_rel_entry_array": 1,
                    "current_block_ptr": 1,
                    "current_bucket": 1,
                    "current_node_rel_info": 1,
                    "entry_ptr": 1,
                    "new_rel_info_ptr": 1,
                    "next_entry_array_ptr": 1,
                    "next_ptr": 1,
                    "node_info": 1,
                    "p_next": 1,
                    "pd_var2": 1,
                    "pd_var23": 1,
                    "ptr4": 1,
                    "ptr_3": 1,
                    "ptr_4": 1,
                    "rel_array": 1,
                    "rel_info_ptr": 1,
                    "rel_ptr": 1,
                    "temp27": 1,
                    "temp_array2": 1,
                    "temp_ptr6": 1,
                    "temp_ptr_4": 1
                },
                "pdVar19": {
                    "aligned_rel_array_ptr": 1
                },
                "puVar10": {
                    "block_ptr": 1,
                    "cur_rel_ptr": 1,
                    "current": 1,
                    "current_pointer": 1,
                    "current_relocation": 1,
                    "next_rel_entry": 2,
                    "node": 4,
                    "pointer": 1,
                    "pointer_node": 1,
                    "ptr": 6,
                    "ptr1": 1,
                    "pu_var10": 1,
                    "rel_ptr": 1,
                    "temp30": 1,
                    "temp_ptr": 4,
                    "temp_ptr1": 1,
                    "temp_ptr_1": 1,
                    "temp_var34": 1
                },
                "puVar16": {
                    "aligned_node": 1,
                    "aligned_ptr": 2,
                    "allocated_block": 1,
                    "block_ptr": 1,
                    "cur_rel_ptr": 1,
                    "new_allocation": 1,
                    "new_block_ptr": 1,
                    "new_entry": 1,
                    "new_fragment": 1,
                    "new_node": 1,
                    "new_pointer": 1,
                    "new_rel_ptr": 2,
                    "new_relocation": 1,
                    "node2": 1,
                    "pointer": 1,
                    "ptr2": 2,
                    "ptr3": 1,
                    "ptr_2": 1,
                    "ptr_3": 1,
                    "pu_var16": 1,
                    "temp29": 1,
                    "temp_ptr2": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_3": 1,
                    "temp_var59": 1,
                    "tmp9": 1
                },
                "uVar15": {
                    "adjusted_size": 4,
                    "aligned_length": 1,
                    "aligned_size": 11,
                    "alignment": 1,
                    "requested_size": 1,
                    "rounded_size": 2,
                    "size3": 1,
                    "size_aligned": 2,
                    "temp10": 1,
                    "temp31": 1,
                    "temp_aligned_size": 1,
                    "temp_var2": 1,
                    "temp_var68": 1,
                    "temp_var_8": 1,
                    "u_var15": 1
                },
                "uVar18": {
                    "block_index": 1,
                    "block_size": 1,
                    "bucket_index": 2,
                    "bucket_size": 1,
                    "count": 2,
                    "index": 5,
                    "index2": 1,
                    "index_temp": 1,
                    "rel_array_index": 1,
                    "rel_index": 1,
                    "relocation_offset": 1,
                    "temp11": 1,
                    "temp26": 1,
                    "temp_loop_counter": 1,
                    "temp_var3": 1,
                    "temp_var66": 1,
                    "temp_var_9": 1,
                    "tmp10": 1,
                    "u_var18": 1,
                    "var_20": 1
                },
                "uVar19": {
                    "found": 1
                },
                "uVar20": {
                    "i": 1
                },
                "uVar3": {
                    "alignment": 1,
                    "alignment_index": 1,
                    "block_size": 1,
                    "current_entry_offset": 1,
                    "current_size": 1,
                    "entry_1_size": 1,
                    "flags": 2,
                    "info_size": 1,
                    "mask": 2,
                    "next_node_info": 1,
                    "rel_info": 2,
                    "rel_size": 2,
                    "remaining_size": 1,
                    "size": 1,
                    "size_aligned": 1,
                    "temp": 1,
                    "temp16": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_var1": 1,
                    "temp_var42": 1,
                    "temp_var_1": 1,
                    "tmp2": 2,
                    "u_var3": 1
                },
                "uVar4": {
                    "adjusted_size": 3,
                    "aligned_size": 3,
                    "alignment": 3,
                    "current_entry_size": 1,
                    "diff": 2,
                    "masked_flags": 1,
                    "new_rel_offset": 1,
                    "new_size": 1,
                    "offset": 2,
                    "rel_size": 2,
                    "temp2": 1,
                    "temp23": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_var2": 1,
                    "temp_var62": 1,
                    "temp_var_2": 1,
                    "tmp3": 2,
                    "u_var4": 1
                },
                "uVar6": {
                    "adjustment": 1,
                    "bytes_diff": 1,
                    "diff": 2,
                    "diff_size": 3,
                    "difference": 2,
                    "entry_size": 1,
                    "new_rel_info": 2,
                    "next_size": 1,
                    "prev_node_info": 1,
                    "remaining_size2": 1,
                    "size": 1,
                    "size_diff": 1,
                    "temp24": 1,
                    "temp3": 1,
                    "temp5": 2,
                    "temp6": 1,
                    "temp_var3": 1,
                    "temp_var53": 1,
                    "temp_var_4": 1,
                    "tmp5": 2,
                    "u_var6": 2,
                    "var2": 1
                },
                "uVar8": {
                    "current_node_info": 1,
                    "current_rel_entry_size": 1,
                    "extra_bytes": 1,
                    "masked_flags2": 1,
                    "new_bytes": 1,
                    "new_size": 1,
                    "next_entry_size": 1,
                    "next_relocation_offset": 1,
                    "next_size": 1,
                    "padding_size": 1,
                    "prev_rel_size": 1,
                    "prev_size2": 1,
                    "remaining_size": 2,
                    "size": 1,
                    "temp": 2,
                    "temp25": 1,
                    "temp4": 1,
                    "temp6": 2,
                    "temp8": 1,
                    "temp_offset": 1,
                    "temp_var63": 1,
                    "temp_var_5": 1,
                    "tmp6": 2,
                    "u_var8": 1,
                    "updated_flags": 1
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_00082970",
                "FUN_0008259c",
                "FUN_00083d9c"
            ],
            "calling": [
                "FUN_000842a4",
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_00081df4"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: ram */\n\nint * allocate_memory_block_00081e14(undefined4 *lock,uint size)\n\n{\n  dword rel_info;\n  int offset;\n  uint rel_info;\n  uint adjusted_size;\n  int next_offset;\n  uint diff_size;\n  dword current_offset;\n  uint temp;\n  int i_var9;\n  undefined *ptr;\n  dword next_offset;\n  dword prev_offset;\n  int index;\n  dword *bucket;\n  uint aligned_size;\n  undefined *new_rel_ptr;\n  dword *bucket;\n  uint index;\n  \n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n    if (0x10 < size) goto LAB_00081e7a;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if (((int)aligned_size < 0) || (aligned_size < size)) {\nLAB_00081e7a:\n      *lock = 0xc;\n      return (int *)0x0;\n    }\n  }\n  lock_memory(lock);\n  rel_info = rel_array[142].r_info;\n  if (aligned_size < 0x1f8) {\n    index = *(int *)((int)&rel_array[0x8e].r_offset + aligned_size);\n    if ((index != aligned_size + 0x20070464) ||\n       (offset = index + 8, index = *(int *)(index + 0x14), offset != index)) {\n      next_offset = *(int *)(index + 0xc);\n      i_var9 = (*(uint *)(index + 4) & 0xfffffffc) + index;\n      aligned_size = *(uint *)(i_var9 + 4);\n      offset = *(int *)(index + 8);\n      *(int *)(offset + 0xc) = next_offset;\n      *(int *)(next_offset + 8) = offset;\n      *(uint *)(i_var9 + 4) = aligned_size | 1;\n      unlock_memory(lock);\n      return (int *)(index + 8);\n    }\n    index = (aligned_size >> 3) + 2;\n  }\n  else {\n    index = aligned_size >> 9;\n    if (index == 0) {\n      offset = 0x7e;\n      index = 0x3f;\n    }\n    else if (index < 5) {\n      index = (aligned_size >> 6) + 0x38;\n      offset = index * 2;\n    }\n    else if (index < 0x15) {\n      index = index + 0x5b;\n      offset = index * 2;\n    }\n    else if (index < 0x55) {\n      index = (aligned_size >> 0xc) + 0x6e;\n      offset = index * 2;\n    }\n    else if (index < 0x155) {\n      index = (aligned_size >> 0xf) + 0x77;\n      offset = index * 2;\n    }\n    else if (index < 0x555) {\n      index = (aligned_size >> 0x12) + 0x7c;\n      offset = index * 2;\n    }\n    else {\n      offset = 0xfc;\n      index = 0x7e;\n    }\n    for (current_offset = (&rel_array[0x8e].r_offset)[offset]; offset * 4 + 0x20070464U != current_offset\n        ; current_offset = *(dword *)(current_offset + 0xc)) {\n      index = *(uint *)(current_offset + 4) & 0xfffffffc;\n      next_offset = index - aligned_size;\n      if (0xf < next_offset) {\n        index = index + -1;\n        break;\n      }\n      if (-1 < next_offset) {\n        offset = index + current_offset;\n        aligned_size = *(uint *)(offset + 4);\n        next_offset = *(int *)(current_offset + 0xc);\n        index = *(int *)(current_offset + 8);\n        *(int *)(index + 0xc) = next_offset;\n        *(int *)(next_offset + 8) = index;\n        *(uint *)(offset + 4) = aligned_size | 1;\n        unlock_memory(lock);\n        return (int *)(current_offset + 8);\n      }\n    }\n    index = index + 1;\n  }\n  current_offset = rel_array[141].r_offset;\n  if (rel_array[142].r_info != 0x2007046c) {\n    rel_info = *(uint *)(rel_array[142].r_info + 4);\n    adjusted_size = rel_info & 0xfffffffc;\n    diff_size = adjusted_size - aligned_size;\n    if (0xf < (int)diff_size) {\n      current_offset = aligned_size + rel_array[142].r_info;\n      *(uint *)(rel_array[142].r_info + 4) = aligned_size | 1;\n      rel_array[142].r_info = current_offset;\n      rel_array[143].r_offset = current_offset;\n      *(undefined4 *)(current_offset + 0xc) = 0x2007046c;\n      *(undefined4 *)(current_offset + 8) = 0x2007046c;\n      *(uint *)(current_offset + 4) = diff_size | 1;\n      *(uint *)(current_offset + diff_size) = diff_size;\n      unlock_memory(lock);\n      return (int *)(rel_info + 8);\n    }\n    rel_array[143].r_offset = 0x2007046c;\n    rel_array[142].r_info = 0x2007046c;\n    if (-1 < (int)diff_size) {\n      *(uint *)(adjusted_size + rel_info + 4) = *(uint *)(adjusted_size + rel_info + 4) | 1;\n      unlock_memory(lock);\n      return (int *)(rel_info + 8);\n    }\n    if (adjusted_size < 0x200) {\n      adjusted_size = rel_info & 0xfffffff8;\n      index = *(int *)((int)&rel_array[0x8d].r_info + adjusted_size);\n      current_offset = 1 << ((int)(rel_info >> 3) >> 2 & 0xffU) | rel_array[141].r_offset;\n      *(int *)(rel_info + 8) = index;\n      *(uint *)(rel_info + 0xc) = adjusted_size + 0x20070464;\n      rel_array[141].r_offset = current_offset;\n      *(dword *)((int)&rel_array[0x8d].r_info + adjusted_size) = rel_info;\n      *(dword *)(index + 0xc) = rel_info;\n    }\n    else {\n      diff_size = rel_info >> 9;\n      if (diff_size < 5) {\n        offset = (rel_info >> 6) + 0x38;\n        index = offset * 2;\n      }\n      else if (diff_size < 0x15) {\n        offset = diff_size + 0x5b;\n        index = offset * 2;\n      }\n      else if (diff_size < 0x55) {\n        offset = (rel_info >> 0xc) + 0x6e;\n        index = offset * 2;\n      }\n      else if (diff_size < 0x155) {\n        offset = (rel_info >> 0xf) + 0x77;\n        index = offset * 2;\n      }\n      else if (diff_size < 0x555) {\n        offset = (rel_info >> 0x12) + 0x7c;\n        index = offset * 2;\n      }\n      else {\n        index = 0xfc;\n        offset = 0x7e;\n      }\n      current_offset = index * 4 + 0x20070464;\n      next_offset = (&rel_array[0x8d].r_info)[index];\n      if (next_offset == current_offset) {\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << (offset >> 2 & 0xffU);\n        prev_offset = next_offset;\n      }\n      else {\n        do {\n          prev_offset = next_offset;\n          if ((*(uint *)(next_offset + 4) & 0xfffffffc) <= adjusted_size) break;\n          next_offset = *(dword *)(next_offset + 8);\n          prev_offset = next_offset;\n        } while (current_offset != next_offset);\n        next_offset = *(dword *)(prev_offset + 0xc);\n      }\n      current_offset = rel_array[141].r_offset;\n      *(dword *)(rel_info + 0xc) = next_offset;\n      *(dword *)(rel_info + 8) = prev_offset;\n      *(dword *)(next_offset + 8) = rel_info;\n      *(dword *)(prev_offset + 0xc) = rel_info;\n    }\n  }\n  rel_info = rel_array[141].r_info;\n  rel_info = 1 << ((int)index >> 2 & 0xffU);\n  if (rel_info <= current_offset) {\n    if ((current_offset & rel_info) == 0) {\n      index = index & 0xfffffffc;\n      do {\n        rel_info = rel_info << 1;\n        index = index + 4;\n      } while ((current_offset & rel_info) == 0);\n    }\n    do {\n      bucket = &rel_array[index + 0x8c].r_info;\n      bucket = bucket;\n      adjusted_size = index;\n      do {\n        for (ptr = (undefined *)bucket[3]; bucket != (dword *)ptr;\n            ptr = *(undefined **)(ptr + 0xc)) {\n          diff_size = *(uint *)(ptr + 4) & 0xfffffffc;\n          temp = diff_size - aligned_size;\n          if (0xf < (int)temp) {\n            offset = *(int *)(ptr + 8);\n            index = *(int *)(ptr + 0xc);\n            new_rel_ptr = ptr + aligned_size;\n            *(uint *)(ptr + 4) = aligned_size | 1;\n            *(int *)(offset + 0xc) = index;\n            *(int *)(index + 8) = offset;\n            rel_array[142].r_info = (dword)new_rel_ptr;\n            rel_array[143].r_offset = (dword)new_rel_ptr;\n            *(undefined4 *)(new_rel_ptr + 0xc) = 0x2007046c;\n            *(undefined4 *)(new_rel_ptr + 8) = 0x2007046c;\n            *(uint *)(new_rel_ptr + 4) = temp | 1;\n            *(uint *)(new_rel_ptr + temp) = temp;\n            unlock_memory(lock);\n            return (int *)(ptr + 8);\n          }\n          if (-1 < (int)temp) {\n            index = *(int *)(ptr + 8);\n            offset = *(int *)(ptr + 0xc);\n            *(uint *)(ptr + diff_size + 4) = *(uint *)(ptr + diff_size + 4) | 1;\n            *(int *)(index + 0xc) = offset;\n            *(int *)(offset + 8) = index;\n            unlock_memory(lock);\n            return (int *)(ptr + 8);\n          }\n        }\n        adjusted_size = adjusted_size + 1;\n        bucket = bucket + 2;\n      } while ((adjusted_size & 3) != 0);\n      do {\n        diff_size = index & 3;\n        ptr = (undefined *)(bucket + -2);\n        index = index - 1;\n        if (diff_size == 0) {\n          rel_array[141].r_offset = rel_array[141].r_offset & ~rel_info;\n          break;\n        }\n        bucket = (dword *)*bucket;\n      } while (bucket == (dword *)ptr);\n      rel_info = rel_info * 2;\n      if ((rel_array[141].r_offset <= rel_info &&\n           rel_info - rel_array[141].r_offset != 0) || (index = adjusted_size, rel_info == 0))\n      break;\n      for (; (rel_array[141].r_offset & rel_info) == 0; rel_info = rel_info << 1) {\n        index = index + 4;\n      }\n    } while( true );\n  }\n  index = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  if ((aligned_size <= index) &&\n     (rel_info = index - aligned_size, current_offset = rel_array[141].r_info, 0xf < (int)rel_info))\n  goto LAB_0008211e;\n  rel_info = rel_array[141].r_info + index;\n  if (rel_array[270].r_offset == 0xffffffff) {\n    adjusted_size = aligned_size + DAT_20071190 + 0x10;\n  }\n  else {\n    adjusted_size = aligned_size + DAT_20071190 + 0x100f & 0xfffff000;\n  }\n  current_offset = change_memory_break(lock,adjusted_size);\n  if ((current_offset == 0xffffffff) || ((current_offset < rel_info && (rel_info != 0x20070464)))) {\n    index = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n    current_offset = rel_array[141].r_info;\n  }\n  else {\n    diff_size = DAT_20071194 + adjusted_size;\n    DAT_20071194 = diff_size;\n    if ((rel_info == current_offset) && ((rel_info & 0xfff) == 0)) {\n      *(uint *)(rel_array[141].r_info + 4) = adjusted_size + index | 1;\n    }\n    else {\n      next_offset = current_offset;\n      if (rel_array[270].r_offset != 0xffffffff) {\n        next_offset = rel_array[270].r_offset;\n        DAT_20071194 = diff_size + (current_offset - rel_info);\n      }\n      rel_array[270].r_offset = next_offset;\n      rel_info = current_offset & 7;\n      if (rel_info == 0) {\n        index = 0x1000;\n      }\n      else {\n        current_offset = current_offset + (8 - rel_info);\n        index = 0x1008 - rel_info;\n      }\n      index = index - (adjusted_size + current_offset & 0xfff);\n      offset = change_memory_break(lock,index);\n      if (offset == -1) {\n        rel_info = 1;\n        index = 0;\n      }\n      else {\n        rel_info = (offset - current_offset) + index | 1;\n      }\n      diff_size = DAT_20071194 + index;\n      rel_array[141].r_info = current_offset;\n      DAT_20071194 = diff_size;\n      *(uint *)(current_offset + 4) = rel_info;\n      if (rel_info != 0x20070464) {\n        if (index < 0x10) {\n          *(undefined4 *)(current_offset + 4) = 1;\n          index = 0;\n          goto LAB_00082108;\n        }\n        index = index - 0xc & 0xfffffff8;\n        *(uint *)(rel_info + 4) = index | *(uint *)(rel_info + 4) & 1;\n        *(undefined4 *)(rel_info + index + 4) = 5;\n        *(undefined4 *)(rel_info + index + 8) = 5;\n        if (0xf < index) {\n          free_memory(lock,rel_info + 8);\n          diff_size = DAT_20071194;\n        }\n      }\n    }\n    if (DAT_2007118c < diff_size) {\n      DAT_2007118c = diff_size;\n    }\n    if (DAT_20071188 < diff_size) {\n      DAT_20071188 = diff_size;\n    }\n    index = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n    current_offset = rel_array[141].r_info;\n  }\nLAB_00082108:\n  rel_info = index - aligned_size;\n  if ((index < aligned_size) || ((int)rel_info < 0x10)) {\n    unlock_memory(lock);\n    return (int *)0x0;\n  }\nLAB_0008211e:\n  rel_array[141].r_info = aligned_size + current_offset;\n  *(uint *)(current_offset + 4) = aligned_size | 1;\n  *(uint *)(rel_array[141].r_info + 4) = rel_info | 1;\n  unlock_memory(lock);\n  return (int *)(current_offset + 8);\n}\n\n",
            "current_name": "allocate_memory_block_00081e14",
            "entrypoint": "0x00081e14",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00081e14": "allocate_memory_block_00081e14",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_free_r": "free_memory",
                "_sbrk_r": "change_memory_break",
                "dVar1": "rel_info",
                "dVar11": "next_offset",
                "dVar12": "prev_offset",
                "dVar17": "rel_ptr_iter",
                "dVar7": "current_offset",
                "iVar13": "index",
                "iVar2": "offset",
                "iVar5": "next_offset",
                "iVar9": "i_var9",
                "param_1": "lock",
                "param_2": "size",
                "pdVar14": "bucket",
                "pdVar17": "bucket",
                "puVar10": "ptr",
                "puVar16": "new_rel_ptr",
                "uVar15": "aligned_size",
                "uVar18": "index",
                "uVar3": "rel_info",
                "uVar4": "adjusted_size",
                "uVar6": "diff_size",
                "uVar8": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008234c": {
            "additional_data": {
                "FUN_0008234c": {
                    "copy_data": 3,
                    "copy_memory": 27,
                    "reverse_copy": 1
                },
                "LAB_000823d0": {
                    "copy_remaining": 1,
                    "end": 1,
                    "handle_small_size": 1
                },
                "bVar6": {
                    "check_length": 1,
                    "condition": 4,
                    "copy_condition": 1,
                    "flag": 1,
                    "has_remaining_size": 1,
                    "inner_loop_condition": 1,
                    "is_copy_size_valid": 1,
                    "is_loop_remaining": 1,
                    "is_looping": 5,
                    "is_not_zero": 1,
                    "is_remaining": 7,
                    "is_remaining_size_greater_than_three": 1,
                    "loop_condition": 5,
                    "should_continue": 1
                },
                "param_1": {
                    "dest": 10,
                    "dest_pointer": 1,
                    "destination": 20
                },
                "param_2": {
                    "source": 20,
                    "src": 10,
                    "src_pointer": 1
                },
                "param_3": {
                    "len": 1,
                    "length": 9,
                    "num_bytes": 2,
                    "size": 19
                },
                "puVar1": {
                    "dest": 1,
                    "dest_pointer": 1,
                    "dest_ptr": 23,
                    "dst_ptr": 5,
                    "src_ptr": 1
                },
                "puVar2": {
                    "dest": 2,
                    "dest_aligned": 1,
                    "dest_aligned_ptr": 1,
                    "dest_end": 4,
                    "dest_end_pointer": 1,
                    "dest_end_ptr": 5,
                    "dest_iter": 1,
                    "dest_ptr": 1,
                    "dest_ptr_iter": 4,
                    "dst": 4,
                    "dst_end": 1,
                    "dst_end_ptr": 1,
                    "source_ptr": 1,
                    "src_ptr": 4
                },
                "puVar3": {
                    "dest_ptr2": 1,
                    "dest_ptr_local": 1,
                    "dest_start": 1,
                    "dst_ptr": 1,
                    "src": 5,
                    "src_aligned": 1,
                    "src_aligned_ptr": 1,
                    "src_iter": 1,
                    "src_pointer": 1,
                    "src_ptr": 15,
                    "temp_dst_ptr": 1,
                    "temp_ptr": 1,
                    "tmp_dst_ptr": 1
                },
                "uVar4": {
                    "copy_remainder": 1,
                    "copy_size_remainder": 1,
                    "count": 2,
                    "len_remainder": 1,
                    "m128_size": 1,
                    "remaining": 2,
                    "remaining_bytes": 2,
                    "remaining_len": 1,
                    "remaining_length": 7,
                    "remaining_size": 11,
                    "size_minus_16": 1,
                    "temp1": 1
                },
                "uVar5": {
                    "copy_iteration": 1,
                    "copy_len": 1,
                    "copy_length": 2,
                    "copy_size": 3,
                    "inner_length": 1,
                    "inner_loop_iterations": 1,
                    "iteration_count": 1,
                    "len_temp": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "loop_size": 2,
                    "remainder": 2,
                    "remaining": 1,
                    "remaining_bytes2": 1,
                    "remaining_length": 1,
                    "remaining_length2": 1,
                    "remaining_size": 2,
                    "remaining_size_iter": 1,
                    "temp2": 1,
                    "temp_size": 2,
                    "tmp": 1,
                    "unroll": 1,
                    "unrolled_length": 1,
                    "unrolled_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34"
            ],
            "code": "\nundefined4 * copy_memory_0008234c(undefined4 *destination,undefined4 *source,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *dest_end_ptr;\n  undefined4 *src_ptr;\n  uint remaining_size;\n  uint copy_size;\n  bool is_remaining;\n  \n  dest_end_ptr = destination;\n  if ((((uint)source | (uint)destination) & 3) != 0) {\n    if (size < 8) {\n      copy_size = size - 4;\n      if (3 < size) {\n        do {\n          dest_ptr = source;\n          src_ptr = dest_end_ptr;\n          is_remaining = copy_size != 0;\n          copy_size = copy_size - 1;\n          *(undefined *)src_ptr = *(undefined *)dest_ptr;\n          dest_end_ptr = (undefined4 *)((int)src_ptr + 1);\n          source = (undefined4 *)((int)dest_ptr + 1);\n        } while (is_remaining);\n        *(undefined *)(undefined4 *)((int)src_ptr + 1) =\n             *(undefined *)(undefined4 *)((int)dest_ptr + 1);\n        *(undefined *)((int)src_ptr + 2) = *(undefined *)((int)dest_ptr + 2);\n        *(undefined *)((int)src_ptr + 3) = *(undefined *)((int)dest_ptr + 3);\n        return destination;\n      }\n      goto handle_small_size;\n    }\n    if ((((uint)source & 3) != 0) && (((uint)destination & 3) != 0)) {\n      copy_size = 4 - ((uint)destination & 3);\n      size = size - copy_size;\n      dest_ptr = destination;\n      src_ptr = source;\n      if (((uint)destination & 1) != 0) {\n        src_ptr = (undefined4 *)((int)source + 1);\n        dest_ptr = (undefined4 *)((int)destination + 1);\n        *(undefined *)destination = *(undefined *)source;\n      }\n      dest_end_ptr = dest_ptr;\n      source = src_ptr;\n      if ((copy_size & 2) != 0) {\n        source = (undefined4 *)((int)src_ptr + 2);\n        dest_end_ptr = (undefined4 *)((int)dest_ptr + 2);\n        *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n      }\n    }\n  }\n  while (0x3f < size) {\n    *dest_end_ptr = *source;\n    dest_end_ptr[1] = source[1];\n    dest_end_ptr[2] = source[2];\n    dest_end_ptr[3] = source[3];\n    dest_end_ptr[4] = source[4];\n    dest_end_ptr[5] = source[5];\n    dest_end_ptr[6] = source[6];\n    dest_end_ptr[7] = source[7];\n    dest_end_ptr[8] = source[8];\n    dest_end_ptr[9] = source[9];\n    dest_end_ptr[10] = source[10];\n    dest_end_ptr[0xb] = source[0xb];\n    dest_end_ptr[0xc] = source[0xc];\n    dest_end_ptr[0xd] = source[0xd];\n    dest_end_ptr[0xe] = source[0xe];\n    dest_end_ptr[0xf] = source[0xf];\n    dest_end_ptr = dest_end_ptr + 0x10;\n    source = source + 0x10;\n    size = size - 0x40;\n  }\n  remaining_size = size - 0x10;\n  if (0xffffffcf < size - 0x40) {\n    do {\n      *dest_end_ptr = *source;\n      dest_end_ptr[1] = source[1];\n      dest_end_ptr[2] = source[2];\n      dest_end_ptr[3] = source[3];\n      dest_end_ptr = dest_end_ptr + 4;\n      source = source + 4;\n      is_remaining = 0xf < remaining_size;\n      remaining_size = remaining_size - 0x10;\n    } while (is_remaining);\n  }\n  copy_size = remaining_size + 0xc;\n  src_ptr = dest_end_ptr;\n  dest_ptr = source;\n  if (0xfffffff3 < remaining_size) {\n    do {\n      source = dest_ptr + 1;\n      *src_ptr = *dest_ptr;\n      is_remaining = 3 < copy_size;\n      copy_size = copy_size - 4;\n      dest_end_ptr = src_ptr + 1;\n      src_ptr = src_ptr + 1;\n      dest_ptr = source;\n    } while (is_remaining);\n  }\nhandle_small_size:\n  if (copy_size + 4 != 0) {\n    dest_ptr = dest_end_ptr;\n    src_ptr = source;\n    if ((copy_size & 1) != 0) {\n      src_ptr = (undefined4 *)((int)source + 1);\n      dest_ptr = (undefined4 *)((int)dest_end_ptr + 1);\n      *(undefined *)dest_end_ptr = *(undefined *)source;\n    }\n    if ((copy_size + 4 & 2) != 0) {\n      *(undefined2 *)dest_ptr = *(undefined2 *)src_ptr;\n    }\n  }\n  return destination;\n}\n\n",
            "current_name": "copy_memory_0008234c",
            "entrypoint": "0x0008234c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008234c": "copy_memory_0008234c",
                "LAB_000823d0": "handle_small_size",
                "bVar6": "is_remaining",
                "param_1": "destination",
                "param_2": "source",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "dest_end_ptr",
                "puVar3": "src_ptr",
                "uVar4": "remaining_size",
                "uVar5": "copy_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082438": {
            "additional_data": {
                "FUN_00082438": {
                    "copy_and_reverse": 1,
                    "copy_and_reverse_data": 1,
                    "copy_and_reverse_memory": 1,
                    "copy_and_shift": 1,
                    "copy_memory": 14,
                    "reverse_and_copy": 2,
                    "reverse_copy": 7,
                    "reverse_copy_bytes": 1,
                    "reverse_copy_memory": 1,
                    "reverse_memcpy": 1,
                    "reverse_memory_blocks": 1
                },
                "iVar1": {
                    "count": 6,
                    "counter": 2,
                    "i": 3,
                    "index": 14,
                    "iteration": 2,
                    "iteration_count": 1,
                    "remaining_bytes": 1
                },
                "param_1": {
                    "dest": 13,
                    "dest_pointer": 1,
                    "destination": 11,
                    "source": 6
                },
                "param_2": {
                    "destination": 6,
                    "source": 11,
                    "src": 13,
                    "src_pointer": 1
                },
                "param_3": {
                    "length": 10,
                    "n": 1,
                    "num_bytes": 1,
                    "size": 19
                },
                "puVar2": {
                    "dest_addr": 1,
                    "dest_iter": 1,
                    "dest_ptr": 23,
                    "next_source": 1,
                    "source_ptr": 1,
                    "src_ptr": 4
                },
                "puVar3": {
                    "dest_ptr": 3,
                    "destination_ptr": 1,
                    "dst_ptr": 1,
                    "next_destination": 1,
                    "source_addr": 1,
                    "source_ptr": 1,
                    "src_iter": 1,
                    "src_ptr": 22
                },
                "puVar4": {
                    "dest_end": 3,
                    "dest_end_ptr": 3,
                    "dest_ptr2": 1,
                    "end_dest_addr": 1,
                    "end_ptr": 2,
                    "pointer": 1,
                    "temp_ptr": 18,
                    "tmp_ptr": 1
                },
                "puVar6": {
                    "dest_byte": 1,
                    "dest_byte_ptr": 3,
                    "dest_end": 2,
                    "dest_end_byte": 1,
                    "dest_end_ptr": 2,
                    "dest_ptr3": 1,
                    "end_src_addr": 1,
                    "ptr": 1,
                    "source_end": 1,
                    "src_end": 1,
                    "temp": 2,
                    "temp_byte": 4,
                    "temp_char": 5,
                    "temp_char_ptr": 1,
                    "temp_dest_ptr": 1,
                    "temp_ptr2": 4
                },
                "puVar7": {
                    "dest_aligned_ptr": 1
                },
                "puVar8": {
                    "src_aligned_ptr": 1
                },
                "uVar5": {
                    "byte_count": 1,
                    "bytes_left": 1,
                    "count": 2,
                    "counter": 1,
                    "i": 1,
                    "remainder": 1,
                    "remaining": 3,
                    "remaining_bytes": 1,
                    "remaining_length": 1,
                    "remaining_size": 3,
                    "remaining_words": 1,
                    "temp": 1,
                    "temp_length": 5,
                    "temp_size": 9
                },
                "uVar7": {
                    "remainder": 11,
                    "remainder2": 1,
                    "remainder_size": 1,
                    "remaining_bytes": 3,
                    "remaining_bytes_aligned": 1,
                    "remaining_length": 2,
                    "remaining_size": 3,
                    "remaining_size2": 1,
                    "remaining_words": 1,
                    "source_bytes_left": 1,
                    "temp": 1,
                    "temp_offset": 2,
                    "temp_remainder": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_000825b0"
            ],
            "code": "\nvoid copy_and_reverse_memory_00082438(undefined4 *dest,undefined4 *src,uint size)\n\n{\n  int index;\n  undefined4 *dest_ptr;\n  undefined4 *src_ptr;\n  undefined4 *temp_ptr;\n  uint temp_size;\n  undefined *temp_char;\n  uint remainder;\n  \n  if ((src < dest) && (temp_ptr = (undefined4 *)((int)src + size), dest < temp_ptr)) {\n    temp_char = (undefined *)((int)dest + size);\n    index = size - 1;\n    if (size != 0) {\n      do {\n        temp_ptr = (undefined4 *)((int)temp_ptr + -1);\n        index = index + -1;\n        temp_char = temp_char + -1;\n        *temp_char = *(undefined *)temp_ptr;\n      } while (index != -1);\n    }\n    return;\n  }\n  if (size < 0x10) {\n    if (size == 0) {\n      return;\n    }\n  }\n  else if ((((uint)dest | (uint)src) & 3) == 0) {\n    temp_ptr = dest;\n    src_ptr = src;\n    do {\n      dest_ptr = temp_ptr + 4;\n      *temp_ptr = *src_ptr;\n      temp_ptr[1] = src_ptr[1];\n      temp_ptr[2] = src_ptr[2];\n      temp_ptr[3] = src_ptr[3];\n      temp_ptr = dest_ptr;\n      src_ptr = src_ptr + 4;\n    } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x10));\n    index = (size - 0x10 >> 4) + 1;\n    remainder = size & 0xf;\n    src = src + index * 4;\n    dest = dest + index * 4;\n    temp_size = remainder;\n    temp_ptr = dest;\n    src_ptr = src;\n    if (3 < remainder) {\n      do {\n        temp_size = temp_size - 4;\n        *temp_ptr = *src_ptr;\n        temp_ptr = temp_ptr + 1;\n        src_ptr = src_ptr + 1;\n      } while (3 < temp_size);\n      index = (remainder - 4 & 0xfffffffc) + 4;\n      dest = (undefined4 *)((int)dest + index);\n      src = (undefined4 *)((int)src + index);\n      remainder = size & 3;\n    }\n    size = remainder;\n    if (size == 0) {\n      return;\n    }\n  }\n  temp_ptr = dest;\n  do {\n    src_ptr = (undefined4 *)((int)temp_ptr + 1);\n    *(undefined *)temp_ptr = *(undefined *)src;\n    src = (undefined4 *)((int)src + 1);\n    temp_ptr = src_ptr;\n  } while (src_ptr != (undefined4 *)(size + (int)dest));\n  return;\n}\n\n",
            "current_name": "copy_and_reverse_memory_00082438",
            "entrypoint": "0x00082438",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082438": "copy_and_reverse_memory_00082438",
                "iVar1": "index",
                "param_1": "dest",
                "param_2": "src",
                "param_3": "size",
                "puVar2": "dest_ptr",
                "puVar3": "src_ptr",
                "puVar4": "temp_ptr",
                "puVar6": "temp_char",
                "uVar5": "temp_size",
                "uVar7": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082504": {
            "additional_data": {
                "FUN_00082504": {
                    "copy_and_fill": 1,
                    "copy_data": 3,
                    "copy_to_buffer": 1,
                    "expand_memory": 1,
                    "fill_buffer": 1,
                    "fill_buffer_with_byte": 2,
                    "fill_buffer_with_pattern": 1,
                    "fill_memory": 2,
                    "fill_memory_block": 1,
                    "fill_memory_with_byte": 5,
                    "initialize_buffer": 1,
                    "initialize_memory": 1,
                    "memset": 7,
                    "memset_array": 1,
                    "memset_with_check": 1,
                    "write_to_memory": 1
                },
                "LAB_00082580": {
                    "end_loop": 1
                },
                "_": {
                    "temp": 1
                },
                "bVar5": {
                    "continue_loop": 1,
                    "is_count_zero": 1,
                    "is_empty": 3,
                    "is_finished": 3,
                    "is_size_zero": 7,
                    "is_zero": 5,
                    "is_zero_count": 3,
                    "is_zero_size": 3,
                    "size_is_zero": 1,
                    "zero_check": 1
                },
                "param_1": {
                    "array": 1,
                    "buffer": 5,
                    "dest": 13,
                    "destination": 7,
                    "memory": 2,
                    "memory_block": 1,
                    "target": 1
                },
                "param_2": {
                    "byte": 5,
                    "byte_value": 1,
                    "fill_value": 2,
                    "pattern": 1,
                    "value": 21
                },
                "param_3": {
                    "block_size": 1,
                    "byte_count": 1,
                    "count": 7,
                    "length": 4,
                    "size": 17
                },
                "puVar1": {
                    "buffer_ptr": 1,
                    "current": 2,
                    "current_addr": 1,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 17,
                    "dst_ptr": 1,
                    "ptr": 2
                },
                "puVar2": {
                    "cur_ptr": 1,
                    "dest_ptr_2": 1,
                    "next": 2,
                    "next_addr": 1,
                    "next_dest_pointer": 2,
                    "next_dest_ptr": 8,
                    "next_dst_ptr": 1,
                    "next_pointer": 2,
                    "next_ptr": 7,
                    "temp_ptr": 3
                },
                "uVar3": {
                    "byte_pattern": 3,
                    "combined_byte": 1,
                    "combined_byte_value": 1,
                    "concatenated_value": 2,
                    "fill_value": 4,
                    "four_value": 1,
                    "mem_value": 1,
                    "new_value": 1,
                    "packed_value": 3,
                    "padded_value": 1,
                    "pattern": 3,
                    "pattern32": 1,
                    "value32": 2,
                    "value_32": 1,
                    "value_concat": 2,
                    "value_repeat": 1
                },
                "uVar4": {
                    "remaining_bytes": 2,
                    "remaining_count": 5,
                    "remaining_length": 3,
                    "remaining_size": 15,
                    "size_temp": 1,
                    "temp_count": 1,
                    "temp_size": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000813a8",
                "FUN_00083b14"
            ],
            "code": "\nvoid memset_array_00082504(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *next_dest_ptr;\n  undefined4 fill_value;\n  uint remaining_size;\n  bool is_size_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    is_size_zero = size == 0;\n    dest_ptr = dest;\n    size = size - 1;\n    if (is_size_zero) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      if (((uint)dest & 3) == 0) break;\n      is_size_zero = size == 0;\n      dest_ptr = dest;\n      size = size - 1;\n      if (is_size_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    remaining_size = size;\n    dest_ptr = dest;\n    if (0xf < size) {\n      remaining_size = size - 0x10;\n      do {\n        *dest_ptr = fill_value;\n        dest_ptr[1] = fill_value;\n        dest_ptr[2] = fill_value;\n        dest_ptr[3] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (remaining_size & 0xfffffff0) + 0x10));\n      size = size & 0xf;\n      dest = dest + ((remaining_size >> 4) + 1) * 4;\n      remaining_size = size;\n      dest_ptr = dest;\n      if (size < 4) goto end_loop;\n    }\n    do {\n      size = size - 4;\n      *dest = fill_value;\n      dest = dest + 1;\n    } while (3 < size);\n    dest = (undefined4 *)((int)dest_ptr + (remaining_size - 4 & 0xfffffffc) + 4);\n    size = remaining_size & 3;\n  }\nend_loop:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      next_dest_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = next_dest_ptr;\n    } while (next_dest_ptr != (undefined4 *)(size + (int)dest));\n  }\n  return;\n}\n\n",
            "current_name": "memset_array_00082504",
            "entrypoint": "0x00082504",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082504": "memset_array_00082504",
                "LAB_00082580": "end_loop",
                "_": "temp",
                "bVar5": "is_size_zero",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "next_dest_ptr",
                "uVar3": "fill_value",
                "uVar4": "remaining_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082598": {
            "called": [],
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "code": "\nvoid FUNC_00082598(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00082598",
            "entrypoint": "0x00082598",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00082598": "FUNC_00082598"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0008259c": {
            "called": [],
            "calling": [
                "FUN_000825b0",
                "FUN_00083d9c",
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "code": "\nvoid FUNC_0008259c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0008259c",
            "entrypoint": "0x0008259c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0008259c": "FUNC_0008259c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_000825a0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "dynamic_array": 1,
                    "rel_array": 1,
                    "relocation_array": 1,
                    "relocation_table": 1
                },
                "FUN_000825a0": {
                    "realloc_elf32_rel_array": 1,
                    "realloc_memory": 1,
                    "reallocate_buffer": 1,
                    "reallocate_elf32_rel": 1,
                    "reallocate_elf32_rel_array": 1,
                    "reallocate_memory": 21,
                    "reallocate_memory_block": 1,
                    "resize_array": 2,
                    "resize_memory": 1,
                    "resize_memory_block": 1
                },
                "FUN_000825b0": {
                    "apply_relocation": 1,
                    "copy_array": 1,
                    "process_data": 2,
                    "resize_array": 1,
                    "update_buffer": 1,
                    "update_data": 1,
                    "update_function": 1,
                    "update_integers": 1,
                    "update_memory": 1,
                    "update_memory_block": 1,
                    "update_pointer": 1,
                    "update_pointers": 1,
                    "update_relocation_array": 1,
                    "update_relocation_entries": 1,
                    "update_relocations": 2
                },
                "param_1": {
                    "address": 1,
                    "arr_ptr": 1,
                    "array": 1,
                    "array_offset": 1,
                    "buffer": 1,
                    "data_pointer": 1,
                    "destination": 1,
                    "destination_pointer": 1,
                    "entry_pointer": 1,
                    "input_array": 1,
                    "integers_array": 1,
                    "offset": 7,
                    "old_pointers": 1,
                    "original_array": 1,
                    "param_array": 1,
                    "pointer": 1,
                    "previous_block": 1,
                    "r_offset": 1,
                    "relocations": 1,
                    "source": 1,
                    "source_address": 1,
                    "source_array": 1,
                    "source_pointer": 1,
                    "src_pointer": 1
                },
                "param_2": {
                    "count_pointer": 1,
                    "counter": 1,
                    "destination": 1,
                    "destination_array": 1,
                    "integer_pointer": 1,
                    "new_pointer": 1,
                    "new_pointers": 1,
                    "new_size": 7,
                    "num_elements": 1,
                    "output_array": 1,
                    "output_pointer": 1,
                    "param_2": 1,
                    "param_pointer": 1,
                    "pointer": 1,
                    "size": 10
                },
                "param_3": {
                    "array_length": 1,
                    "array_size": 1,
                    "count": 2,
                    "length": 3,
                    "limit": 1,
                    "new_size": 1,
                    "num_pointers": 1,
                    "num_relocations": 1,
                    "param_value": 1,
                    "size": 2
                }
            },
            "called": [
                "FUN_000825b0"
            ],
            "calling": [
                "FUN_00081622"
            ],
            "code": "\nvoid reallocate_memory_block_000825a0(undefined4 offset,undefined4 size)\n\n{\n  _realloc_r(relocation_array[140].r_offset,offset,size);\n  return;\n}\n\n",
            "current_name": "reallocate_memory_block_000825a0",
            "entrypoint": "0x000825a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "relocation_array",
                "FUN_000825a0": "reallocate_memory_block_000825a0",
                "param_1": "offset",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000825b0": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "array": 3,
                    "array_data": 1,
                    "elf32_rel_array": 1,
                    "elf_array": 1,
                    "rel_array_ptr": 1,
                    "some_array": 2
                },
                "FUN_000825b0": {
                    "allocate_memory": 26,
                    "allocate_or_reallocate_memory": 1,
                    "allocate_or_resize_memory": 2,
                    "realloc_and_copy": 1,
                    "reallocate_memory": 1
                },
                "LAB_0008267c": {
                    "error_label": 1,
                    "label1": 1
                },
                "__malloc_lock": {
                    "custom_malloc_lock": 1,
                    "lock": 1,
                    "lock_allocation": 1,
                    "lock_malloc": 1,
                    "lock_memory": 1
                },
                "__malloc_unlock": {
                    "custom_malloc_unlock": 1,
                    "unlock_allocation": 1,
                    "unlock_malloc": 1,
                    "unlock_memory": 2
                },
                "_free_lock": {
                    "custom_free_lock": 1
                },
                "_free_r": {
                    "custom_free": 1,
                    "free_dynamic_memory": 1,
                    "free_memory": 1,
                    "free_memory_r": 2
                },
                "_malloc_lock": {
                    "custom_malloc_lock": 1,
                    "lock_memory": 1
                },
                "_malloc_r": {
                    "allocate_dynamic_memory": 1,
                    "allocate_memory": 1,
                    "allocate_memory_r": 2,
                    "custom_malloc": 1
                },
                "dVar1": {
                    "address": 1,
                    "current_address": 1,
                    "dword_variable": 1,
                    "dynamic_value": 1,
                    "offset": 6,
                    "pointer_diff": 1,
                    "temp": 3,
                    "temp1": 8,
                    "temp_1": 1,
                    "temp_ptr2": 1,
                    "temp_var1": 2,
                    "tmp1": 1,
                    "tmp_d_var1": 1
                },
                "iVar4": {
                    "counter": 1,
                    "i_var4": 1,
                    "iterator": 1,
                    "temp": 1,
                    "temp1": 3,
                    "temp2": 3,
                    "temp3": 8,
                    "temp_3": 1,
                    "temp_var": 4,
                    "temp_var1": 1,
                    "temp_var3": 2,
                    "temp_var_1": 1,
                    "temp_variable": 1,
                    "tmp1": 1,
                    "tmp3": 1,
                    "tmp_i_var4": 1
                },
                "iVar6": {
                    "i_var6": 1,
                    "temp2": 5,
                    "temp3": 1,
                    "temp4": 5,
                    "temp5": 5,
                    "temp_4": 1,
                    "temp_var2": 3,
                    "temp_var5": 2,
                    "temp_var_2": 1,
                    "temp_variable2": 1,
                    "temp_variable_1": 1,
                    "tmp2": 1,
                    "tmp5": 1,
                    "tmp_i_var6": 1,
                    "value2": 1,
                    "var2": 1
                },
                "memmove": {
                    "custom_memory_copy": 1,
                    "move_memory": 1
                },
                "param_1": {
                    "allocate_ptr": 1,
                    "allocator": 1,
                    "context": 2,
                    "lock": 7,
                    "lock_ptr": 2,
                    "mem_context": 1,
                    "memory_manager": 1,
                    "memory_manager_param": 1,
                    "memory_tracker": 1,
                    "mutex": 1,
                    "mutex_ptr": 2,
                    "param": 2,
                    "param_1": 2,
                    "param_allocator": 1,
                    "param_size": 3,
                    "params": 1,
                    "size_pointer": 1,
                    "standard_library": 1
                },
                "param_2": {
                    "allocated_memory": 1,
                    "buffer": 2,
                    "current_memory": 1,
                    "existing_memory": 7,
                    "mem_ptr": 1,
                    "memory_pointer": 1,
                    "memory_ptr": 1,
                    "old_memory": 1,
                    "original_pointer": 1,
                    "original_ptr": 2,
                    "param_2": 2,
                    "param_ptr": 1,
                    "pointer": 1,
                    "ptr": 9
                },
                "param_3": {
                    "existing_memory_size": 1,
                    "new_size": 2,
                    "original_size": 1,
                    "param_3": 2,
                    "param_length": 1,
                    "requested_size": 5,
                    "size": 19
                },
                "piVar10": {
                    "allocated_memory": 1,
                    "allocated_ptr": 1,
                    "new_allocated_mem": 1,
                    "new_allocated_ptr": 1,
                    "new_memory": 2,
                    "new_pointer3": 1,
                    "new_ptr": 2,
                    "new_ptr3": 1,
                    "ptr3": 1,
                    "result": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp9": 5,
                    "temp_6": 1,
                    "temp_memory": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 5,
                    "temp_var_4": 1,
                    "tmp9": 1,
                    "tmp_pi_var10": 1
                },
                "piVar2": {
                    "allocated_mem": 1,
                    "allocated_memory": 5,
                    "allocated_ptr": 1,
                    "new_memory": 5,
                    "new_memory_pointer": 1,
                    "new_memory_ptr": 1,
                    "new_pointer": 2,
                    "new_ptr": 9,
                    "ptr_new_memory": 1,
                    "result": 4,
                    "result_ptr": 1
                },
                "piVar7": {
                    "new_memory_pointer2": 1,
                    "new_pointer2": 1,
                    "new_ptr2": 1,
                    "ptr2": 1,
                    "temp3": 1,
                    "temp5": 3,
                    "temp6": 5,
                    "temp_5": 1,
                    "temp_memory": 2,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_ptr": 6,
                    "temp_ptr1": 3,
                    "temp_var_3": 1,
                    "tmp6": 1,
                    "tmp_pi_var7": 1,
                    "tmp_ptr": 1
                },
                "uVar3": {
                    "alignment": 1,
                    "allocated_size": 1,
                    "chunk_size": 1,
                    "info1": 1,
                    "new_size": 1,
                    "offset2": 1,
                    "remaining_memory": 1,
                    "remaining_size": 1,
                    "size1": 1,
                    "size_remainder": 1,
                    "size_variable_1": 1,
                    "temp": 3,
                    "temp1": 2,
                    "temp2": 8,
                    "temp_2": 1,
                    "temp_size": 2,
                    "temp_var2": 2,
                    "tmp2": 1,
                    "tmp_u_var3": 1
                },
                "uVar5": {
                    "alloc_size": 1,
                    "existing_memory_size_aligned": 1,
                    "existing_size": 2,
                    "flag": 1,
                    "info2": 1,
                    "mask": 1,
                    "mem_size": 1,
                    "old_memory_size": 1,
                    "old_size": 2,
                    "original_size": 2,
                    "prev_chunk_size": 1,
                    "size1": 1,
                    "size2": 1,
                    "size_aligned": 1,
                    "size_flag": 1,
                    "size_variable_2": 1,
                    "temp3": 2,
                    "temp4": 5,
                    "temp_var4": 2,
                    "tmp4": 1,
                    "value": 1,
                    "var1": 1
                },
                "uVar8": {
                    "aligned_size": 1,
                    "allocated_size": 1,
                    "merged_size": 1,
                    "needed": 1,
                    "new_free_size": 1,
                    "new_mem_size": 1,
                    "new_memory_size": 1,
                    "new_size": 6,
                    "num_bytes": 2,
                    "old_size": 1,
                    "original_size_aligned": 1,
                    "size2": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 5,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "tmp7": 1,
                    "total_size": 1,
                    "total_size_needed": 1,
                    "var3": 1
                },
                "uVar9": {
                    "aligned_size": 15,
                    "alloc_size": 1,
                    "new_size": 3,
                    "size_aligned": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 5,
                    "temp_var4": 1,
                    "temp_var7": 1,
                    "tmp8": 1,
                    "var4": 1
                }
            },
            "called": [
                "FUN_00082438",
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d9c",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_000825a0"
            ],
            "code": "\nint * allocate_or_resize_memory_000825b0(undefined4 *lock,int *ptr,uint size)\n\n{\n  dword temp1;\n  int *new_ptr;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp4;\n  int *temp_ptr;\n  uint new_size;\n  uint aligned_size;\n  int *temp9;\n  \n  if (ptr == (int *)0x0) {\n    new_ptr = (int *)allocate_memory_r(lock,size);\n    return new_ptr;\n  }\n  lock_malloc();\n  temp4 = ptr[-1];\n  new_size = temp4 & 0xfffffffc;\n  new_ptr = ptr + -2;\n  if (size + 0xb < 0x17) {\n    aligned_size = 0x10;\n  }\n  else {\n    aligned_size = size + 0xb & 0xfffffff8;\n    if ((int)aligned_size < 0) goto label1;\n  }\n  if (aligned_size < size) {\nlabel1:\n    *lock = 0xc;\n    return (int *)0x0;\n  }\n  if ((int)new_size < (int)aligned_size) {\n    temp1 = (int)new_ptr + new_size;\n    if (array[141].r_info == temp1) {\n      temp2 = *(uint *)(array[141].r_info + 4) & 0xfffffffc;\n      temp1 = array[141].r_info;\n      if ((int)(aligned_size + 0x10) <= (int)(temp2 + new_size)) {\n        array[141].r_info = (int)new_ptr + aligned_size;\n        *(uint *)(array[141].r_info + 4) = (temp2 + new_size) - aligned_size | 1;\n        ptr[-1] = aligned_size | ptr[-1] & 1U;\n        unlock_memory(lock);\n        return ptr;\n      }\n    }\n    else if ((*(uint *)((*(uint *)(temp1 + 4) & 0xfffffffe) + temp1 + 4) & 1) == 0) {\n      temp2 = *(uint *)(temp1 + 4) & 0xfffffffc;\n      if ((int)aligned_size <= (int)(temp2 + new_size)) {\n        temp4 = *(int *)(temp1 + 0xc);\n        temp3 = *(int *)(temp1 + 8);\n        *(int *)(temp3 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp3;\n        new_size = temp2 + new_size;\n        goto LAB_0008268c;\n      }\n    }\n    else {\n      temp2 = 0;\n      temp1 = 0;\n    }\n    if (-1 < (int)(temp4 << 0x1f)) {\n      temp9 = (int *)((int)new_ptr - ptr[-2]);\n      temp4 = (temp9[1] & 0xfffffffcU) + new_size;\n      if (temp1 != 0) {\n        if (temp1 == array[141].r_info) {\n          if ((int)(aligned_size + 0x10) <= (int)(temp2 + temp4)) {\n            new_ptr = temp9 + 2;\n            temp3 = *new_ptr;\n            temp4 = temp9[3];\n            new_size = new_size - 4;\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            if (new_size < 0x25) {\n              temp_ptr = new_ptr;\n              if (0x13 < new_size) {\n                temp9[2] = *ptr;\n                temp9[3] = ptr[1];\n                if (new_size < 0x1c) {\n                  ptr = ptr + 2;\n                  temp_ptr = temp9 + 4;\n                }\n                else {\n                  temp9[4] = ptr[2];\n                  temp9[5] = ptr[3];\n                  if (new_size == 0x24) {\n                    temp9[6] = ptr[4];\n                    temp_ptr = ptr + 5;\n                    ptr = ptr + 6;\n                    temp9[7] = *temp_ptr;\n                    temp_ptr = temp9 + 8;\n                  }\n                  else {\n                    ptr = ptr + 4;\n                    temp_ptr = temp9 + 6;\n                  }\n                }\n              }\n              *temp_ptr = *ptr;\n              temp_ptr[1] = ptr[1];\n              temp_ptr[2] = ptr[2];\n            }\n            else {\n              custom_memory_copy(new_ptr,ptr);\n            }\n            array[141].r_info = (int)temp9 + aligned_size;\n            *(uint *)(array[141].r_info + 4) = (temp2 + temp4) - aligned_size | 1;\n            temp9[1] = aligned_size | temp9[1] & 1U;\n            unlock_memory(lock);\n            return new_ptr;\n          }\n        }\n        else {\n          temp2 = temp2 + temp4;\n          if ((int)aligned_size <= (int)temp2) {\n            temp4 = *(int *)(temp1 + 0xc);\n            temp3 = *(int *)(temp1 + 8);\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            temp_ptr = temp9 + 2;\n            temp3 = *temp_ptr;\n            temp4 = temp9[3];\n            temp4 = new_size - 4;\n            *(int *)(temp3 + 0xc) = temp4;\n            *(int *)(temp4 + 8) = temp3;\n            new_size = temp2;\n            if (temp4 < 0x25) {\n              new_ptr = temp_ptr;\n              if (0x13 < temp4) {\n                temp9[2] = *ptr;\n                temp9[3] = ptr[1];\n                if (temp4 < 0x1c) {\n                  ptr = ptr + 2;\n                  new_ptr = temp9 + 4;\n                }\n                else {\n                  temp9[4] = ptr[2];\n                  temp9[5] = ptr[3];\n                  if (temp4 == 0x24) {\n                    temp9[6] = ptr[4];\n                    new_ptr = ptr + 5;\n                    ptr = ptr + 6;\n                    temp9[7] = *new_ptr;\n                    new_ptr = temp9 + 8;\n                  }\n                  else {\n                    ptr = ptr + 4;\n                    new_ptr = temp9 + 6;\n                  }\n                }\n              }\n              *new_ptr = *ptr;\n              new_ptr[1] = ptr[1];\n              new_ptr[2] = ptr[2];\n              temp4 = temp9[1];\n              new_ptr = temp9;\n              ptr = temp_ptr;\n            }\n            else {\n              custom_memory_copy(temp_ptr,ptr);\n              temp4 = temp9[1];\n              new_ptr = temp9;\n              ptr = temp_ptr;\n            }\n            goto LAB_0008268c;\n          }\n        }\n      }\n      if ((int)aligned_size <= (int)temp4) {\n        temp_ptr = temp9 + 2;\n        temp3 = *temp_ptr;\n        temp4 = temp9[3];\n        temp2 = new_size - 4;\n        *(int *)(temp3 + 0xc) = temp4;\n        *(int *)(temp4 + 8) = temp3;\n        new_size = temp4;\n        if (temp2 < 0x25) {\n          new_ptr = temp_ptr;\n          if (0x13 < temp2) {\n            temp9[2] = *ptr;\n            temp9[3] = ptr[1];\n            if (temp2 < 0x1c) {\n              ptr = ptr + 2;\n              new_ptr = temp9 + 4;\n            }\n            else {\n              temp9[4] = ptr[2];\n              temp9[5] = ptr[3];\n              if (temp2 == 0x24) {\n                temp9[6] = ptr[4];\n                new_ptr = ptr + 5;\n                ptr = ptr + 6;\n                temp9[7] = *new_ptr;\n                new_ptr = temp9 + 8;\n              }\n              else {\n                ptr = ptr + 4;\n                new_ptr = temp9 + 6;\n              }\n            }\n          }\n          *new_ptr = *ptr;\n          new_ptr[1] = ptr[1];\n          new_ptr[2] = ptr[2];\n          temp4 = temp9[1];\n          new_ptr = temp9;\n          ptr = temp_ptr;\n        }\n        else {\n          custom_memory_copy(temp_ptr,ptr);\n          temp4 = temp9[1];\n          new_ptr = temp9;\n          ptr = temp_ptr;\n        }\n        goto LAB_0008268c;\n      }\n    }\n    temp9 = (int *)allocate_memory_r(lock,size);\n    if (temp9 == (int *)0x0) goto LAB_000826a4;\n    temp4 = ptr[-1];\n    if (temp9 + -2 != (int *)((temp4 & 0xfffffffe) + (int)new_ptr)) {\n      new_size = new_size - 4;\n      if (new_size < 0x25) {\n        new_ptr = ptr;\n        temp_ptr = temp9;\n        if (0x13 < new_size) {\n          *temp9 = *ptr;\n          temp9[1] = ptr[1];\n          if (new_size < 0x1c) {\n            new_ptr = ptr + 2;\n            temp_ptr = temp9 + 2;\n          }\n          else {\n            temp9[2] = ptr[2];\n            temp9[3] = ptr[3];\n            if (new_size == 0x24) {\n              temp9[4] = ptr[4];\n              temp9[5] = ptr[5];\n              new_ptr = ptr + 6;\n              temp_ptr = temp9 + 6;\n            }\n            else {\n              new_ptr = ptr + 4;\n              temp_ptr = temp9 + 4;\n            }\n          }\n        }\n        *temp_ptr = *new_ptr;\n        temp_ptr[1] = new_ptr[1];\n        temp_ptr[2] = new_ptr[2];\n      }\n      else {\n        custom_memory_copy(temp9,ptr);\n      }\n      free_memory_r(lock,ptr);\n      goto LAB_000826a4;\n    }\n    new_size = new_size + (temp9[-1] & 0xfffffffcU);\n  }\nLAB_0008268c:\n  temp2 = new_size - aligned_size;\n  temp9 = ptr;\n  if (temp2 < 0x10) {\n    new_ptr[1] = temp4 & 1 | new_size;\n    *(uint *)((int)new_ptr + new_size + 4) = *(uint *)((int)new_ptr + new_size + 4) | 1;\n  }\n  else {\n    new_ptr[1] = temp4 & 1 | aligned_size;\n    *(uint *)((int)new_ptr + aligned_size + 4) = temp2 | 1;\n    *(uint *)((int)new_ptr + temp2 + aligned_size + 4) = *(uint *)((int)new_ptr + temp2 + aligned_size + 4) | 1;\n    free_memory_r(lock,(int)new_ptr + aligned_size + 8);\n  }\nLAB_000826a4:\n  unlock_memory(lock);\n  return temp9;\n}\n\n",
            "current_name": "allocate_or_resize_memory_000825b0",
            "entrypoint": "0x000825b0",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "array",
                "FUN_000825b0": "allocate_or_resize_memory_000825b0",
                "LAB_0008267c": "label1",
                "__malloc_lock": "lock_malloc",
                "__malloc_unlock": "unlock_memory",
                "_free_r": "free_memory_r",
                "_malloc_lock": "lock_memory",
                "_malloc_r": "allocate_memory_r",
                "dVar1": "temp1",
                "iVar4": "temp3",
                "iVar6": "temp4",
                "memmove": "custom_memory_copy",
                "param_1": "lock",
                "param_2": "ptr",
                "param_3": "size",
                "piVar10": "temp9",
                "piVar2": "new_ptr",
                "piVar7": "temp_ptr",
                "uVar3": "temp2",
                "uVar5": "temp4",
                "uVar8": "new_size",
                "uVar9": "aligned_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082970": {
            "additional_data": {
                "FUN_00082970": {
                    "allocate_memory": 30,
                    "initialize_memory": 1
                },
                "iVar1": {
                    "alloc_result": 1,
                    "allocated_address": 7,
                    "allocated_memory": 3,
                    "allocation_result": 12,
                    "memory_address": 3,
                    "memory_location": 1,
                    "memory_pointer": 1,
                    "result_check": 1
                },
                "param_1": {
                    "memory_pointer": 1,
                    "output": 2,
                    "output_address": 2,
                    "result": 21,
                    "result_address": 1,
                    "result_pointer": 2,
                    "result_ptr": 2
                },
                "param_2": {
                    "allocation_size": 2,
                    "block_size": 1,
                    "memory_size": 2,
                    "size": 25,
                    "size_of_allocation": 1
                }
            },
            "called": [
                "FUN_0008118c"
            ],
            "calling": [
                "FUN_00083d00",
                "FUN_00081e14"
            ],
            "code": "\nvoid allocate_memory_00082970(int *result,undefined4 size)\n\n{\n  int allocation_result;\n  \n  DAT_200711bc = 0;\n  allocation_result = _sbrk(size);\n  if ((allocation_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "allocate_memory_00082970",
            "entrypoint": "0x00082970",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082970": "allocate_memory_00082970",
                "iVar1": "allocation_result",
                "param_1": "result",
                "param_2": "size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082994": {
            "additional_data": {
                "FUN_00082994": {
                    "copy_cstring": 1,
                    "copy_string": 20,
                    "copy_string_with_alignment": 5,
                    "copy_string_with_alignment_check": 1,
                    "copy_strings": 4
                },
                "LAB_000829f8": {
                    "check_alignment": 1,
                    "check_for_non_ascii": 1,
                    "skip_loop": 1
                },
                "bVar8": {
                    "is_aligned": 1,
                    "is_end_of_string": 1,
                    "is_null": 1,
                    "is_null_byte": 1,
                    "is_short_aligned": 1,
                    "is_short_zero": 4,
                    "is_single_byte": 1,
                    "is_zero": 10,
                    "is_zero_byte": 10,
                    "is_zero_char": 1
                },
                "cVar1": {
                    "ch": 1,
                    "char_value": 1,
                    "current_char": 26,
                    "current_character": 1
                },
                "param_1": {
                    "dest": 18,
                    "dest_ptr": 1,
                    "destination": 11,
                    "dst": 1
                },
                "param_2": {
                    "source": 11,
                    "src": 19,
                    "src_ptr": 1
                },
                "puVar3": {
                    "current_ptr": 1,
                    "current_uint_ptr": 1,
                    "next": 1,
                    "next_pointer": 1,
                    "next_ptr": 3,
                    "next_source": 3,
                    "next_src": 7,
                    "next_src_addr": 1,
                    "next_uint": 2,
                    "next_uint_ptr": 2,
                    "next_word": 1,
                    "ptr": 1,
                    "source_ptr": 1,
                    "src_ptr": 1,
                    "temp_pointer1": 2,
                    "temp_ptr": 2,
                    "temp_ptr1": 1
                },
                "puVar4": {
                    "current_ptr": 1,
                    "current_ptr2": 1,
                    "current_uint_ptr2": 1,
                    "next_char_ptr": 1,
                    "next_dest": 5,
                    "next_dest_addr": 1,
                    "next_dst": 1,
                    "next_pointer": 1,
                    "next_pointer2": 1,
                    "next_ptr2": 1,
                    "next_short": 1,
                    "next_short_src": 1,
                    "next_source2": 1,
                    "next_source_aligned": 1,
                    "next_source_byte": 1,
                    "next_trait": 1,
                    "next_uint_ptr": 1,
                    "next_uint_ptr_temp": 1,
                    "ptr2": 1,
                    "source_ptr_aligned": 1,
                    "src_ptr": 1,
                    "src_ptr2": 1,
                    "temp_pointer2": 2,
                    "temp_ptr2": 3
                },
                "puVar7": {
                    "current_dest": 2,
                    "current_dest_ptr": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 9,
                    "dest_ptr2": 1,
                    "dest_start": 1,
                    "destination_ptr": 2,
                    "dst_ptr": 1,
                    "new_dest": 1,
                    "next_char": 1,
                    "next_dest": 1,
                    "next_dest_addr": 1,
                    "next_destination": 3,
                    "next_dst_word": 1,
                    "next_uint_ptr": 1,
                    "result": 1,
                    "temp_destination": 1,
                    "temp_ptr3": 1
                },
                "uVar2": {
                    "current_char16": 1,
                    "current_short": 24,
                    "current_ushort": 2,
                    "temp_short": 1,
                    "ushort_val": 1,
                    "ushort_value": 1
                },
                "uVar5": {
                    "current": 1,
                    "current_data": 1,
                    "current_int": 4,
                    "current_u_int": 1,
                    "current_uint": 8,
                    "current_value": 2,
                    "current_word": 12,
                    "temp_value1": 1,
                    "tmp_value": 1
                },
                "uVar6": {
                    "current_byte": 5,
                    "current_int2": 1,
                    "current_uint": 1,
                    "current_unsigned": 1,
                    "current_value_swapped": 1,
                    "current_word_shifted": 1,
                    "loop_var": 1,
                    "next_byte": 1,
                    "shifted_data": 1,
                    "shifted_uint": 1,
                    "temp": 6,
                    "temp_int": 1,
                    "temp_u_int": 1,
                    "temp_uint": 4,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_word": 1,
                    "tmp": 1,
                    "tmp_value2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008165c"
            ],
            "code": "\nvoid copy_string_with_alignment_check_00082994(uint *dest,uint *src)\n\n{\n  char current_char;\n  ushort current_short;\n  uint *next_src;\n  uint *next_dest;\n  uint current_word;\n  uint temp;\n  uint *dest_ptr;\n  bool is_zero;\n  \n  if ((((uint)dest ^ (uint)src) & 3) != 0) {\n    do {\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      src = (uint *)((int)src + 1);\n      dest = (uint *)((int)dest + 1);\n    } while (current_char != '\\0');\n    return;\n  }\n  if (((uint)src & 3) != 0) {\n    next_dest = src;\n    if (((uint)src & 1) != 0) {\n      next_dest = (uint *)((int)src + 1);\n      current_char = *(char *)src;\n      *(char *)dest = current_char;\n      dest = (uint *)((int)dest + 1);\n      if (current_char == '\\0') {\n        return;\n      }\n    }\n    src = next_dest;\n    if (((uint)next_dest & 2) != 0) {\n      src = (uint *)((int)next_dest + 2);\n      current_short = *(ushort *)next_dest;\n      is_zero = (current_short & 0xff) == 0;\n      if (is_zero) {\n        *(char *)dest = (char)current_short;\n      }\n      else {\n        *(ushort *)dest = current_short;\n        is_zero = (current_short & 0xff00) == 0;\n        dest = (uint *)((int)dest + 2);\n      }\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  current_word = *src;\n  next_dest = src + 1;\n  dest_ptr = dest;\n  if (((uint)src & 4) != 0) {\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) goto check_alignment;\n    dest_ptr = dest + 1;\n    *dest = current_word;\n    next_dest = src + 2;\n    current_word = src[1];\n  }\n  while( true ) {\n    next_src = next_dest + 1;\n    temp = *next_dest;\n    dest = dest_ptr;\n    if ((current_word + 0xfefefeff & ~current_word & 0x80808080) != 0) break;\n    dest = dest_ptr + 1;\n    *dest_ptr = current_word;\n    current_word = temp;\n    if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n    next_dest = next_dest + 2;\n    current_word = *next_src;\n    dest_ptr = dest_ptr + 2;\n    *dest = temp;\n  }\ncheck_alignment:\n  do {\n    *(char *)dest = (char)current_word;\n    temp = current_word & 0xff;\n    current_word = current_word >> 8 | current_word << 0x18;\n    dest = (uint *)((int)dest + 1);\n  } while (temp != 0);\n  return;\n}\n\n",
            "current_name": "copy_string_with_alignment_check_00082994",
            "entrypoint": "0x00082994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082994": "copy_string_with_alignment_check_00082994",
                "LAB_000829f8": "check_alignment",
                "bVar8": "is_zero",
                "cVar1": "current_char",
                "param_1": "dest",
                "param_2": "src",
                "puVar3": "next_src",
                "puVar4": "next_dest",
                "puVar7": "dest_ptr",
                "uVar2": "current_short",
                "uVar5": "current_word",
                "uVar6": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082a50": {
            "additional_data": {
                "0x1f": {
                    "max_shift": 1,
                    "shift": 1
                },
                "0x80808080": {
                    "byte_mask": 1,
                    "check_pattern": 1
                },
                "0xfefefeff": {
                    "bit_pattern": 1,
                    "magic_mask": 1
                },
                "0xff": {
                    "byte_mask_1": 1
                },
                "0xff00": {
                    "byte_mask_2": 1
                },
                "0xff0000": {
                    "byte_mask_3": 1
                },
                "0xfffffffc": {
                    "mask": 2
                },
                "0xffffffffU": {
                    "bit_mask": 2
                },
                "3": {
                    "mod_mask": 1
                },
                "4U": {
                    "shift": 1
                },
                "DAT_00083000": {
                    "constant_value": 1
                },
                "FUM_00082a50": {
                    "count_leading_zero_bits": 1
                },
                "FUN_00082a50": {
                    "calculate_trailing_zeros": 1,
                    "compute_trailing_zeros": 1,
                    "count_leading_zeroes": 9,
                    "count_leading_zeros": 12,
                    "count_non_zero_bytes": 2,
                    "count_set_bits": 1,
                    "count_trailing_zeros": 2,
                    "find_first_non_zero_byte_index": 1,
                    "find_leading_zeros": 1
                },
                "bVar4": {
                    "has_trailing_zeros": 1,
                    "is_zero": 26,
                    "is_zero_byte": 2,
                    "is_zero_value": 1,
                    "zero_byte": 1
                },
                "iVar1": {
                    "count": 4,
                    "index": 1,
                    "leading_zero_count": 2,
                    "leading_zeroes": 4,
                    "leading_zeros": 13,
                    "leading_zeros_count": 3,
                    "trailing_zeros": 2,
                    "trailing_zeros_count": 2
                },
                "param_1": {
                    "input": 19,
                    "input_number": 1,
                    "input_value": 4,
                    "num": 3,
                    "number": 1,
                    "value": 3
                },
                "puVar2": {
                    "aligned_pointer": 2,
                    "aligned_ptr": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "p": 1,
                    "p_num": 1,
                    "p_number": 1,
                    "ptr": 17,
                    "ptr_data": 1,
                    "ptr_value": 1,
                    "word_pointer": 1,
                    "word_ptr": 1
                },
                "uVar3": {
                    "current_value": 4,
                    "data": 1,
                    "num_val": 1,
                    "temp": 1,
                    "val": 1,
                    "value": 19,
                    "word": 3,
                    "word_value": 1
                },
                "uVar5": {
                    "shifted_mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_00081682",
                "FUN_00082b38"
            ],
            "code": "\nint count_leading_zeros_00082a50(uint input)\n\n{\n  int leading_zeros;\n  uint *ptr;\n  uint value;\n  bool is_zero;\n  \n  ptr = (uint *)(input & 0xfffffffc);\n  leading_zeros = -(input & 3);\n  value = *ptr;\n  if ((input & 3) != 0) {\n    value = value | bit_mask >> ((leading_zeros + shift & 0x1f) << 3);\n  }\n  while (ptr = ptr + 1, (value + 0xfefefeff & ~value & 0x80808080) == 0) {\n    leading_zeros = leading_zeros + 4;\n    value = *ptr;\n  }\n  is_zero = (value & 0xff) == 0;\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff00) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n    is_zero = (value & 0xff0000) == 0;\n  }\n  if (!is_zero) {\n    leading_zeros = leading_zeros + 1;\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "count_leading_zeros_00082a50",
            "entrypoint": "0x00082a50",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xffffffffU": "bit_mask",
                "4U": "shift",
                "FUN_00082a50": "count_leading_zeros_00082a50",
                "bVar4": "is_zero",
                "iVar1": "leading_zeros",
                "param_1": "input",
                "puVar2": "ptr",
                "uVar3": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082ac0": {
            "additional_data": {
                "FUN_00082ac0": {
                    "process_data": 1,
                    "write_buffer": 2,
                    "write_data_to_file": 3,
                    "write_file": 2,
                    "write_to_file": 18,
                    "write_to_output": 1,
                    "write_to_output_file": 1,
                    "write_to_stream": 2
                },
                "__sfvwrite_r": {
                    "write_all_data_to_file": 1
                },
                "_fputwc_r": {
                    "write_word_to_file": 1
                },
                "iVar2": {
                    "output_result": 1,
                    "result": 26,
                    "return_value": 1,
                    "write_result": 3
                },
                "param_1": {
                    "arg1": 1,
                    "buffer": 1,
                    "file": 6,
                    "file_descriptor": 7,
                    "file_handle": 2,
                    "file_pointer": 2,
                    "file_stream": 3,
                    "output_stream": 1,
                    "param": 1,
                    "stream": 7
                },
                "param_2": {
                    "arg2": 1,
                    "buffer": 2,
                    "buffer_size": 18,
                    "file_descriptor": 5,
                    "num_elements": 2,
                    "param": 1,
                    "stream_buffer": 1,
                    "stream_size": 1
                },
                "param_3": {
                    "arg3": 1,
                    "buffer": 6,
                    "buffer_array": 1,
                    "buffers": 1,
                    "chunks": 1,
                    "data": 10,
                    "data_array": 3,
                    "data_buffer": 4,
                    "file_content": 1,
                    "file_data": 1,
                    "output_buffer": 1,
                    "records": 1
                },
                "piVar1": {
                    "buffer_pointer": 2,
                    "buffer_ptr": 2,
                    "buffer_start": 1,
                    "curr_data_ptr": 1,
                    "current_buffer": 6,
                    "current_chunk": 2,
                    "current_data": 6,
                    "current_data_pointer": 1,
                    "current_data_ptr": 2,
                    "current_element": 1,
                    "current_output_buffer": 1,
                    "current_record": 1,
                    "data": 1,
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "p_var1": 1
                },
                "piVar3": {
                    "buffer_end": 1,
                    "curr_size_ptr": 1,
                    "current_buffer": 1,
                    "current_buffer_ptr": 1,
                    "current_buffer_size": 1,
                    "current_data_ptr": 1,
                    "current_data_size": 1,
                    "data_chunk_pointer": 1,
                    "data_pointer": 1,
                    "data_size": 1,
                    "p_var3": 1,
                    "remaining_buffer": 3,
                    "remaining_buffer_ptr": 1,
                    "remaining_buffers": 3,
                    "remaining_chunks": 2,
                    "remaining_data": 7,
                    "remaining_data_pointer": 1,
                    "remaining_data_ptr": 2,
                    "remaining_records": 1
                },
                "puVar5": {
                    "current_byte_ptr": 1,
                    "current_char": 3,
                    "current_char_ptr": 1,
                    "current_character": 2,
                    "current_data": 2,
                    "current_data_ptr": 1,
                    "current_element": 6,
                    "current_item": 2,
                    "current_item_ptr": 2,
                    "current_value": 1,
                    "current_word": 2,
                    "element": 1,
                    "element_pointer": 1,
                    "p_var5": 1,
                    "word_pointer": 2,
                    "word_ptr": 3
                },
                "uVar4": {
                    "buffer_index": 2,
                    "count": 5,
                    "counter": 8,
                    "index": 7,
                    "iteration": 1,
                    "iteration_count": 3,
                    "loop_counter": 2,
                    "value": 1,
                    "write_result": 2
                },
                "uVar6": {
                    "buffer_size": 3,
                    "buffer_size_in_words": 1,
                    "buffer_size_remaining": 1,
                    "bytes_to_write": 1,
                    "chunk_size": 2,
                    "curr_size": 1,
                    "current_data_length": 2,
                    "current_data_size": 3,
                    "current_element_size": 2,
                    "current_size": 2,
                    "element_size": 3,
                    "item_length": 1,
                    "item_size": 1,
                    "item_value": 1,
                    "record_size": 1,
                    "value1": 1,
                    "word": 1,
                    "word_count": 2,
                    "word_size": 2
                },
                "uVar7": {
                    "buffer_size_quotient": 1,
                    "bytes_written": 1,
                    "current_data_elements": 1,
                    "data_count": 1,
                    "data_size": 1,
                    "div_size": 1,
                    "element_count": 1,
                    "item_count": 1,
                    "length_in_bytes": 1,
                    "loop_count": 1,
                    "num_buffers": 1,
                    "num_chunks": 2,
                    "num_elements": 3,
                    "num_elements_to_write": 1,
                    "num_items": 1,
                    "num_iterations": 2,
                    "num_words": 1,
                    "record_count": 1,
                    "shifted_buffer_size": 1,
                    "shifted_chunk_size": 1,
                    "shifted_data_length": 1,
                    "shifted_size": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "word_count": 2,
                    "word_size": 1
                }
            },
            "called": [
                "FUN_00083f34",
                "FUN_00083c40"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint write_data_to_file_00082ac0(undefined4 file_descriptor,int buffer_size,int **data)\n\n{\n  int *current_buffer;\n  int result;\n  int *remaining_data;\n  uint counter;\n  undefined4 *current_element;\n  uint buffer_size;\n  uint num_elements;\n  \n  if (-1 < *(int *)(buffer_size + 100) << 0x12) {\n    result = write_all_data_to_file();\n    data[2] = (int *)0x0;\n    data[1] = (int *)0x0;\n    return result;\n  }\n  remaining_data = data[2];\n  current_buffer = *data;\n  while (remaining_data != (int *)0x0) {\n    buffer_size = current_buffer[1];\n    num_elements = buffer_size >> 2;\n    if (num_elements != 0) {\n      current_element = (undefined4 *)(*current_buffer + -4);\n      counter = 0;\n      do {\n        current_element = current_element + 1;\n        result = write_word_to_file(file_descriptor,*current_element,buffer_size);\n        counter = counter + 1;\n        if (result == -1) goto LAB_00082b00;\n      } while (num_elements != counter);\n      remaining_data = data[2];\n    }\n    remaining_data = (int *)((int)remaining_data - (buffer_size & 0xfffffffc));\n    data[2] = remaining_data;\n    current_buffer = current_buffer + 2;\n  }\n  result = 0;\nLAB_00082b00:\n  data[2] = (int *)0x0;\n  data[1] = (int *)0x0;\n  return result;\n}\n\n",
            "current_name": "write_data_to_file_00082ac0",
            "entrypoint": "0x00082ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082ac0": "write_data_to_file_00082ac0",
                "__sfvwrite_r": "write_all_data_to_file",
                "_fputwc_r": "write_word_to_file",
                "iVar2": "result",
                "param_1": "file_descriptor",
                "param_2": "buffer_size",
                "param_3": "data",
                "piVar1": "current_buffer",
                "piVar3": "remaining_data",
                "puVar5": "current_element",
                "uVar4": "counter",
                "uVar6": "buffer_size",
                "uVar7": "num_elements"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00082b38": {
            "additional_data": {
                "DAT_00085840": {
                    "hex_digits": 1
                },
                "FUN_00082b38": {
                    "format_string": 11,
                    "formatted_print": 2,
                    "parse_format_string": 1,
                    "print_formatted": 1,
                    "print_formatted_output": 2,
                    "print_formatted_string": 6,
                    "printf": 1,
                    "process_string": 1,
                    "sprint_r": 1
                },
                "F_00082b38": {
                    "format_string": 1
                },
                "bVar1": {
                    "flag1": 1,
                    "flag_plus": 1,
                    "has_digits": 1,
                    "has_flag": 1,
                    "has_length": 1,
                    "has_sign": 1,
                    "has_width": 2,
                    "is_alignment": 1,
                    "is_arg_length_specified": 1,
                    "is_floating_point": 1,
                    "is_left_align": 2,
                    "is_left_justified": 3,
                    "is_long": 2,
                    "is_long_long": 1,
                    "is_negative": 2,
                    "is_space_present": 1,
                    "is_unsigned": 1,
                    "sign_flag": 1
                },
                "bVar2": {
                    "add_sign": 1,
                    "flag2": 1,
                    "flag_minus": 1,
                    "has_length": 1,
                    "has_output": 1,
                    "has_plus": 2,
                    "has_precision": 1,
                    "is_argument_positive": 1,
                    "is_float": 1,
                    "is_plus_sign_present": 1,
                    "is_pointer": 1,
                    "is_short": 1,
                    "is_sign": 2,
                    "is_signed": 5,
                    "is_string": 1,
                    "is_unsigned": 1,
                    "uses_sign": 1,
                    "width_flag": 1
                },
                "bVar26": {
                    "arg_is_null": 1,
                    "flag5": 1,
                    "flag_long": 1,
                    "has_length_modifier": 1,
                    "is_argument_negative": 1,
                    "is_dot_present": 1,
                    "is_negative": 9,
                    "is_negative_value": 1,
                    "is_positive": 1,
                    "is_short_value": 1,
                    "is_unsigned": 1,
                    "neg_width": 1,
                    "negative": 2
                },
                "bVar3": {
                    "add_prefix": 1,
                    "flag3": 1,
                    "flag_hash": 1,
                    "has_alternative": 1,
                    "has_flag": 1,
                    "has_hash": 1,
                    "has_hash_tag": 1,
                    "is_alternate": 2,
                    "is_alternate_form": 3,
                    "is_alternative": 1,
                    "is_hex": 2,
                    "is_prefix": 1,
                    "is_sharp_sign_present": 1,
                    "is_space": 1,
                    "is_unsigned": 3,
                    "sharp_flag": 1,
                    "uses_alternate_form": 1,
                    "zero_flag": 1
                },
                "bVar30": {
                    "is_uppercase": 1
                },
                "bVar5": {
                    "flag4": 1,
                    "flag_zero": 1,
                    "has_padding": 1,
                    "has_sign": 1,
                    "has_width_spec": 1,
                    "has_zero": 1,
                    "has_zero_padding": 1,
                    "hash_flag": 1,
                    "is_escape_char": 1,
                    "is_signed": 1,
                    "is_zero_flag": 1,
                    "is_zero_pad": 4,
                    "is_zero_padded": 5,
                    "is_zero_reset": 1,
                    "padded_zero": 1,
                    "use_zero_padding": 1,
                    "uses_zero_padding": 1
                },
                "cStack_6a": {
                    "buffer": 1,
                    "buffer2": 1,
                    "c_stack_6a": 1,
                    "ch": 1,
                    "char3": 1,
                    "char_fmt": 1,
                    "char_stack_6_a": 1,
                    "char_value_two": 1,
                    "current_char": 1,
                    "extra_char": 1,
                    "flag_char": 1,
                    "hex_char": 2,
                    "num_buffer": 1,
                    "single_char_buffer": 1,
                    "stack_buffer2": 1,
                    "stack_overflow_protection": 1,
                    "temp_buffer": 1,
                    "temp_char": 1,
                    "temp_pad_char": 1,
                    "temp_string": 1,
                    "zero_char": 1
                },
                "cVar1": {
                    "has_precision": 1
                },
                "cVar2": {
                    "has_flag": 1
                },
                "cVar26": {
                    "is_negative": 1,
                    "prefix_char": 1
                },
                "cVar3": {
                    "has_length_modifier": 1
                },
                "cVar4": {
                    "char1": 1,
                    "char_4_2": 1,
                    "char_val": 1,
                    "character": 1,
                    "conversion_specifier": 2,
                    "conversion_type": 1,
                    "fill_char": 2,
                    "flag": 1,
                    "hex_char_fmt": 1,
                    "padding_char": 2,
                    "prefix_char": 1,
                    "sign": 1,
                    "sign_char": 3,
                    "sign_symbol": 1,
                    "temp_char": 1,
                    "type_char": 1
                },
                "cVar5": {
                    "has_width": 1
                },
                "cVar6": {
                    "expand_left": 1
                },
                "cVar7": {
                    "leading_zeros": 1
                },
                "cVar8": {
                    "upper_case": 1
                },
                "cVar9": {
                    "c": 2,
                    "c_val": 1,
                    "ch": 1,
                    "char2": 1,
                    "char_9_3": 1,
                    "char_type": 1,
                    "char_val": 2,
                    "char_var": 1,
                    "char_var9": 1,
                    "character": 1,
                    "conversion": 1,
                    "conversion_specifier": 1,
                    "current_char": 1,
                    "digit": 1,
                    "format_char": 2,
                    "format_specifier": 1,
                    "modifier_flag": 1,
                    "pad_char": 1,
                    "temp_char": 2,
                    "width_char": 1
                },
                "iVar15": {
                    "arg_index": 3,
                    "count": 3,
                    "count1": 1,
                    "current_index": 1,
                    "field_width": 1,
                    "i": 2,
                    "index": 1,
                    "iteration_variable_2_2": 1,
                    "iterator": 1,
                    "new_iteration_count": 1,
                    "num_args": 1,
                    "num_chars": 2,
                    "num_chars_written": 1,
                    "num_digits": 1,
                    "num_printed": 1,
                    "numeric_width": 1,
                    "temp_int": 1,
                    "temp_result": 3,
                    "temp_variable": 1,
                    "var1": 1
                },
                "iVar17": {
                    "arg_count": 1,
                    "arg_index": 1,
                    "count": 1,
                    "count2": 2,
                    "current_index_2": 1,
                    "fmt_pos_count": 1,
                    "format_index": 1,
                    "format_stack_index_copy": 1,
                    "i": 1,
                    "iteration_variable_3": 1,
                    "new_iteration_count2": 1,
                    "num_args": 3,
                    "num_lengths": 1,
                    "prev_arg_index": 1,
                    "previous_iterator": 1,
                    "temp": 1,
                    "temp_status": 1,
                    "total_count": 1,
                    "var2": 1
                },
                "iVar24": {
                    "digit": 1
                },
                "iVar8": {
                    "arg_count": 1,
                    "counter": 1,
                    "error": 1,
                    "format_stack_index": 1,
                    "index": 1,
                    "iteration_count": 1,
                    "iteration_variable_4": 1,
                    "result": 18,
                    "return_value": 2,
                    "status": 1
                },
                "lVar27": {
                    "arg_value": 1,
                    "arg_value64": 1,
                    "combined_arg": 1,
                    "combined_arg_ptr": 1,
                    "combined_val": 1,
                    "combined_value": 3,
                    "dividend": 1,
                    "long1": 1,
                    "long_val": 1,
                    "longlong_27": 1,
                    "num_val": 2,
                    "num_value": 1,
                    "remainder": 1,
                    "result": 1,
                    "signed_arg": 1,
                    "temp_long": 1,
                    "value": 3,
                    "wide_arg": 2,
                    "wide_int": 1
                },
                "local_64": {
                    "buffers4": 1,
                    "dummy_buffer": 1,
                    "flag_param": 1,
                    "fmt_buf_array": 1,
                    "fmt_pos_buffer": 1,
                    "format_info_array_buffer": 1,
                    "formatted_data": 1,
                    "local_args_arr": 1,
                    "ptr_array8": 1,
                    "reserved": 1,
                    "stack_buffer": 1,
                    "stack_buffer_unused2": 1,
                    "temp_array": 3,
                    "temp_buf_arr": 1
                },
                "local_68": {
                    "arg_ptr_array": 1,
                    "buffer": 1,
                    "buffer3": 1,
                    "conversion_buffer": 1,
                    "format_buf": 1,
                    "format_buffer": 3,
                    "format_info_array": 1,
                    "format_specifiers_array": 1,
                    "format_stack_buffer": 1,
                    "formatted_ptr": 1,
                    "local_array": 1,
                    "local_vars": 1,
                    "stack_buffer": 1,
                    "temp_buf": 1,
                    "temp_buffer": 1,
                    "temp_char_arr": 1,
                    "temp_data": 1
                },
                "local_69": {
                    "char_flag": 1,
                    "char_fmt": 1,
                    "flag_zero": 1,
                    "is_hex": 1,
                    "local_char_69": 1,
                    "padding_char": 5,
                    "padding_char2": 1,
                    "prefix_char": 1,
                    "reserved": 1,
                    "stack_buffer_unused1": 1,
                    "temp_pad_char2": 1,
                    "temp_ptr": 1,
                    "undefined4": 1,
                    "unk0_char": 1,
                    "wide_string": 1,
                    "zero_char": 1
                },
                "local_6a": {
                    "char_fmt": 1,
                    "local_char_6_a": 1
                },
                "local_90": {
                    "arg_char": 1,
                    "arg_size": 1,
                    "buffer1": 1,
                    "ch": 1,
                    "char_value_one": 1,
                    "conversion_spec": 1,
                    "current_pad_char": 1,
                    "fill_char": 2,
                    "format_char": 1,
                    "hex_char_fmt": 1,
                    "local_char_90": 1,
                    "num_base_char": 1,
                    "padding_char": 2,
                    "sum_flag_char": 1,
                    "temp_buffer": 1,
                    "temp_char": 2,
                    "undefined3": 1,
                    "unk_char": 1,
                    "zero_char": 1
                },
                "local_94": {
                    "ap_next": 1,
                    "arg_pointer": 1,
                    "arg_ptr_list": 1,
                    "arg_size": 1,
                    "args_holder": 1,
                    "char_count": 1,
                    "consumed_params": 1,
                    "current_arg": 1,
                    "current_arg_ptr": 1,
                    "current_format_buffer": 1,
                    "format_bytes": 1,
                    "format_end": 1,
                    "format_info_pointer": 1,
                    "format_pointers_start": 1,
                    "format_ptr": 1,
                    "format_ptrs": 1,
                    "formatted_ptr": 2,
                    "local_param_ptr_array_2": 1,
                    "next_arg": 1,
                    "num_formats": 1,
                    "print_ptr": 1,
                    "remaining_width": 1,
                    "temp_result": 1,
                    "total_arg_ptr": 1,
                    "total_length": 1,
                    "total_length2": 1,
                    "total_spec_length": 1
                },
                "local_98": {
                    "arg_count": 4,
                    "arg_counter": 1,
                    "arg_index": 2,
                    "chars_printed": 1,
                    "counter2": 1,
                    "current_pos_count": 1,
                    "flag_count": 1,
                    "format_count": 1,
                    "format_info_index": 1,
                    "local_iteration_variable": 1,
                    "num_args": 7,
                    "num_args_used": 2,
                    "num_formats": 1,
                    "num_formatted": 1,
                    "num_specifiers": 2,
                    "param_count": 1
                },
                "local_9c": {
                    "arg_list_ptr_copy": 1,
                    "arg_pointer": 1,
                    "arg_ptr_array": 1,
                    "arg_ptr_list": 1,
                    "arg_ptrs": 1,
                    "arg_ptrs_cur": 1,
                    "current_arg": 1,
                    "current_arg_ptr": 1,
                    "current_format": 1,
                    "current_format_position": 1,
                    "current_specifier_iterator": 1,
                    "format_args": 1,
                    "format_info": 1,
                    "format_length": 1,
                    "format_ptr": 1,
                    "format_specifiers": 1,
                    "int_array": 1,
                    "length_array_ptr": 1,
                    "local_pp_param_ptr_array": 1,
                    "next_format": 1,
                    "num_modifiers": 1,
                    "param_array_pointer": 1,
                    "pointers3": 1,
                    "remaining_format": 1,
                    "temp_args_holder": 1,
                    "temp_format": 1,
                    "temp_params": 1,
                    "temp_ptr": 1
                },
                "local_9f": {
                    "alt_form": 1,
                    "alternate_form": 1,
                    "alternate_form_char_value": 1,
                    "base": 1,
                    "base_char": 1,
                    "char_type_suffix": 1,
                    "current_width_flag": 1,
                    "digit_case": 1,
                    "flag_char": 1,
                    "flag_zero": 1,
                    "has_pad_char": 1,
                    "has_sign": 1,
                    "hex_prefix_char": 1,
                    "local_char_9_f": 1,
                    "middle_char": 1,
                    "num_add_chars": 1,
                    "num_leading_zeros": 1,
                    "numeric_case": 1,
                    "pad_char": 1,
                    "padding_char": 1,
                    "padding_char2": 1,
                    "undefined2": 1,
                    "wide_pad": 1,
                    "x_flag": 1,
                    "zero_pad_char": 1
                },
                "local_a0": {
                    "base": 1,
                    "filler": 1,
                    "flag_char": 1,
                    "inserted_char": 1,
                    "local_char_a_0": 1,
                    "numeric_base": 1,
                    "pad_char": 3,
                    "padding_char": 9,
                    "padding_char_value": 1,
                    "prefix_char": 2,
                    "string_base": 1,
                    "undefined1": 1,
                    "zero_flag": 1,
                    "zero_pad": 1,
                    "zero_pad_char": 1
                },
                "local_a1": {
                    "alignment": 1,
                    "conversion_type": 1,
                    "cur_align": 1,
                    "current_flag": 1,
                    "current_sign": 1,
                    "fill_char": 1,
                    "first_specifier_char": 1,
                    "flag": 1,
                    "flag_char": 3,
                    "flag_space": 1,
                    "flags_temp": 1,
                    "format_prefix": 1,
                    "local_char_a_1": 1,
                    "padding_char": 1,
                    "plus_flag": 1,
                    "prefix_flag": 1,
                    "previous_wrapper_char": 1,
                    "sign": 3,
                    "sign_char": 2,
                    "sign_symbol": 1,
                    "signed_flag": 1,
                    "special_char": 1,
                    "specifier": 1
                },
                "local_c0": {
                    "base_digits": 1,
                    "char_ptr": 2,
                    "character_ptr": 1,
                    "current_wrapper_char": 1,
                    "digit_set": 1,
                    "digit_string": 1,
                    "digits": 6,
                    "error_char_pointer": 1,
                    "escape_char_table": 1,
                    "format_ptr": 1,
                    "hex_chars": 2,
                    "hex_digits": 3,
                    "hex_table": 2,
                    "hex_upper_case": 1,
                    "local_char_c_0": 1,
                    "num_buffer": 2,
                    "print_ptr": 1
                },
                "local_c4": {
                    "bytes_written": 1,
                    "chars_written": 1,
                    "format_length": 1,
                    "formatted_length": 2,
                    "formatted_size": 1,
                    "length": 1,
                    "local_4": 1,
                    "num_bytes_written": 1,
                    "num_chars": 1,
                    "num_chars_written": 2,
                    "num_printed": 1,
                    "output_length": 1,
                    "result": 1,
                    "result_count": 1,
                    "result_length": 4,
                    "ret_value": 1,
                    "status": 1,
                    "total_arg_length": 1,
                    "total_bytes": 1,
                    "total_chars": 1,
                    "total_chars_printed": 1,
                    "total_length": 2,
                    "total_written": 1
                },
                "local_c8": {
                    "arg_list": 2,
                    "arg_list_ptr": 2,
                    "arg_pointer": 1,
                    "arg_ptr": 6,
                    "arg_ptr_array": 3,
                    "arg_ptr_list": 1,
                    "arg_ptrs": 1,
                    "argptr": 1,
                    "args_copy": 1,
                    "args_cur": 1,
                    "args_list": 1,
                    "args_pointer": 2,
                    "args_ptr": 3,
                    "current_arg_ptr": 1,
                    "format_string": 1,
                    "local_input_args": 1,
                    "pp_format": 1
                },
                "local_d4": {
                    "arg_ptr": 1,
                    "cur_width": 1,
                    "current_precision": 1,
                    "diff_format_length": 1,
                    "fmt_string": 1,
                    "local_min": 1,
                    "local_param_ptr_array": 1,
                    "max_arg_length": 1,
                    "parsed_format": 1,
                    "precision": 4,
                    "precision_value": 1,
                    "ptrs2": 1,
                    "remain_arg": 1,
                    "remaining_format": 2,
                    "remaining_length": 2,
                    "remaining_params": 1,
                    "remaining_space": 1,
                    "remaining_width": 1,
                    "str_len": 1,
                    "total_length": 2,
                    "total_size": 1,
                    "width": 1,
                    "width_arg_ptr": 1
                },
                "local_dc": {
                    "arg_count": 1,
                    "current_length": 1,
                    "current_width": 1,
                    "field_width": 1,
                    "format_length": 1,
                    "local_input_ptr_array": 1,
                    "local_max": 1,
                    "max_buffer_size": 1,
                    "max_field_width": 1,
                    "max_length": 3,
                    "max_precision": 2,
                    "max_width": 3,
                    "min_arg_length": 1,
                    "num_digits": 2,
                    "pad_size": 2,
                    "ptr_count": 1,
                    "specifier_length": 1,
                    "total_length": 1,
                    "width": 2,
                    "width_spec_ptr": 1,
                    "width_value": 1
                },
                "local_xxx": {
                    "descriptive_variable_name1": 1
                },
                "local_yyy": {
                    "descriptive_variable_name2": 1
                },
                "param_1": {
                    "arg1": 1,
                    "buffer": 16,
                    "destination": 1,
                    "file_descriptor": 1,
                    "flags": 1,
                    "format_string_ptr": 1,
                    "input_param": 1,
                    "output_buffer": 3,
                    "param_n": 1,
                    "param_one": 1,
                    "str_length": 1,
                    "stream": 3
                },
                "param_2": {
                    "arg2": 1,
                    "buffer_size": 5,
                    "format": 13,
                    "format_length": 1,
                    "format_string": 2,
                    "format_string_args_ptr": 1,
                    "format_string_index": 1,
                    "input_length": 1,
                    "length": 2,
                    "max_size": 1,
                    "param_m": 1,
                    "size": 1,
                    "stream": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_list": 2,
                    "arg_ptr": 1,
                    "args": 9,
                    "arguments": 2,
                    "fmt_pos": 1,
                    "format": 11,
                    "format_string": 1,
                    "input_format": 1,
                    "param_l": 1,
                    "va_list": 1
                },
                "param_4": {
                    "arg4": 1,
                    "arg_list": 1,
                    "arg_list_copy": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 1,
                    "argptr": 3,
                    "args": 11,
                    "args_int": 1,
                    "args_ptr": 2,
                    "arguments": 3,
                    "ctrl_args": 1,
                    "current_argument": 1,
                    "input_args": 1,
                    "num_params": 1,
                    "param_k": 1,
                    "size": 1
                },
                "param_5": {
                    "format_ptr": 1
                },
                "param_6": {
                    "arg_ptr": 1
                },
                "piVar19": {
                    "arg": 1,
                    "arg_int": 1,
                    "arg_ptr": 3,
                    "arg_value": 1,
                    "int_arg": 2,
                    "int_arg_ptr": 1,
                    "int_pointer": 1,
                    "int_pointer1": 1,
                    "int_ptr": 1,
                    "ptr2": 1,
                    "ptr_arg": 1,
                    "ptr_variable_19_2": 1,
                    "temp_ptr": 1
                },
                "piVar22": {
                    "arg_sign": 1,
                    "arg_value": 1,
                    "field_width": 1,
                    "int_arg_ptr": 1,
                    "int_pointer2": 1,
                    "int_ptr": 1,
                    "is_negative": 2,
                    "negative_val": 1,
                    "pi_var22": 1,
                    "prefix": 1,
                    "ptr3": 1,
                    "ptr_val": 1,
                    "ptr_variable_22": 1,
                    "sign_value": 1,
                    "star_arg_ptr": 1,
                    "width_arg": 1
                },
                "piVar7": {
                    "arg": 7,
                    "arg_ptr": 4,
                    "arg_value": 1,
                    "current_arg": 2,
                    "current_specifier": 1,
                    "int_arg_ptr": 1,
                    "int_pointer": 1,
                    "int_pointer_1": 1,
                    "int_ptr": 1,
                    "int_value": 1,
                    "integer_pointer": 1,
                    "pointer": 1,
                    "ptr1": 1,
                    "ptr_variable_7": 1,
                    "temp": 1,
                    "val_ptr": 1,
                    "value": 1,
                    "width_ptr": 1
                },
                "ppiVar12": {
                    "arg": 2,
                    "arg_list": 1,
                    "arg_pointer": 1,
                    "arg_ptr": 3,
                    "arg_ptr_array": 2,
                    "arg_ptrs": 1,
                    "int_pointer_2": 1,
                    "int_pointer_pointer": 1,
                    "int_ptr_ptr": 1,
                    "next_arg": 1,
                    "pointer_pointer_array": 1,
                    "pp_argptr": 1,
                    "pp_args": 1,
                    "pp_input_args": 1,
                    "ptr_array2": 1,
                    "ptrs": 1,
                    "star_arg_list": 1,
                    "temp_args": 3,
                    "width_spec": 1
                },
                "ppppppiVar10": {
                    "localized_param_ptr_array": 1
                },
                "ppppppiVar20": {
                    "localized_param_ptr_array_2": 1
                },
                "pppppppiVar10": {
                    "arg_ptr": 1,
                    "current_char": 2,
                    "current_format": 2,
                    "fmt": 1,
                    "format_char_index": 1,
                    "format_copy": 1,
                    "format_index": 1,
                    "format_info_2": 1,
                    "format_iter": 1,
                    "format_pointer": 1,
                    "format_pos": 1,
                    "format_position": 1,
                    "format_ptr": 1,
                    "format_specifier": 1,
                    "format_specifier_pointer": 1,
                    "format_start": 1,
                    "local_input_ptr_array_2": 1,
                    "ptr": 1,
                    "temp_variable": 1,
                    "temp_variable_name2": 1
                },
                "pppppppiVar16": {
                    "format_info_3": 1,
                    "next_format_position": 1,
                    "pointer_array": 1,
                    "pointer_array_iterator": 1,
                    "ptr_array3": 1,
                    "ptrs_ptr": 1,
                    "temp": 1,
                    "temp_format": 1,
                    "temp_params": 1
                },
                "pppppppiVar18": {
                    "arg_length": 1,
                    "format_info_4": 1,
                    "format_len": 1,
                    "format_length": 1,
                    "len": 1,
                    "lengths": 1,
                    "pointer_difference": 1,
                    "pp_param_ptr_array_2": 1,
                    "pppppppi_var_diff1": 1,
                    "ptr2": 1,
                    "ptr_array4": 1,
                    "remaining_args": 1,
                    "remaining_format": 5,
                    "remaining_format_specifier": 1,
                    "temp_variable": 1
                },
                "pppppppiVar19": {
                    "arg_count": 1,
                    "arg_ptr": 1,
                    "signed_flag_pointer": 1,
                    "width_value": 1
                },
                "pppppppiVar20": {
                    "arg_ptr": 2,
                    "format_info_5": 1,
                    "int_arg": 1,
                    "pointer_value": 1,
                    "pp_arg_value": 1,
                    "pptr": 1,
                    "previous_format_char": 1,
                    "ptr_array5": 1,
                    "star_arg": 2,
                    "star_ptr": 1,
                    "temp_argptr": 1,
                    "temp_ptr": 1,
                    "var_ptr": 1,
                    "width": 1
                },
                "pppppppiVar23": {
                    "arg_len": 1,
                    "arg_length": 1,
                    "arg_ptr": 1,
                    "arg_ptr2": 1,
                    "format": 1,
                    "format_diff": 1,
                    "format_info_6": 1,
                    "length_difference": 1,
                    "length_ptr": 1,
                    "localized_param_ptr_array_2": 1,
                    "pppppppi_var_diff2": 1,
                    "ptr3": 1,
                    "ptr_array6": 1,
                    "remaining_arg": 1,
                    "remaining_fmt": 1,
                    "remaining_format": 2,
                    "remaining_formats": 1,
                    "remaining_width": 1,
                    "scan_ptr": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 1,
                    "temp_remaining_args": 1
                },
                "pppppppiVar25": {
                    "additional_specifier": 1,
                    "arg_ptr": 1,
                    "format_info_7": 1,
                    "temp_params": 1
                },
                "pppppppiVar6": {
                    "ptr_params": 1,
                    "temp_ptr": 1
                },
                "pppppppiarArgSized": {
                    "arg_ptr": 1
                },
                "pppppppivar16": {
                    "pointers2": 1
                },
                "pppppppivar6": {
                    "pointers": 1
                },
                "ppppppppiVar10": {
                    "current_char": 1,
                    "format_ptr_increment": 1
                },
                "ppppppppiVar16": {
                    "array": 1,
                    "element": 1,
                    "format": 1,
                    "format_data": 1,
                    "format_stack_pointer": 1,
                    "local_vars_ptr": 1,
                    "num_ptr": 1,
                    "pp_param_ptr_array": 1,
                    "temp_args_holder": 1,
                    "temp_format_length": 1
                },
                "ppppppppiVar18": {
                    "current_char": 1,
                    "digits_processed": 1,
                    "remaining_args": 1,
                    "remaining_length": 1
                },
                "ppppppppiVar20": {
                    "star_flag_pointer": 1,
                    "width": 1
                },
                "ppppppppiVar23": {
                    "temp_variable_name1": 1
                },
                "ppppppppiVar25": {
                    "arg_ptr": 1,
                    "arg_ptrs": 1,
                    "flag_args": 1,
                    "format_arg": 1,
                    "literal_ptr": 1,
                    "local_vars_ptr": 1,
                    "p": 1,
                    "param_ptr_array_2": 1,
                    "ptr_array7": 1,
                    "temp_ptr": 2,
                    "width_arg_list": 1
                },
                "ppppppppiVar6": {
                    "arg_pointer": 1,
                    "arg_ptr": 1,
                    "args_holder": 1,
                    "args_pointer": 1,
                    "argument_pointer": 1,
                    "count_pointer": 1,
                    "format": 1,
                    "format_args": 2,
                    "format_array": 1,
                    "format_buffer": 1,
                    "format_info_1": 1,
                    "format_length": 1,
                    "format_pointer": 1,
                    "format_specifiers": 1,
                    "format_stack": 1,
                    "format_state": 1,
                    "length_array": 1,
                    "modifiers": 1,
                    "num_args": 1,
                    "num_arguments": 1,
                    "param_ptr_array": 1,
                    "param_ptrs": 1,
                    "pointer_array": 1,
                    "precision": 1,
                    "ptr_array1": 1,
                    "temp_ptr": 1
                },
                "puVar22": {
                    "int_ptr_arg": 1
                },
                "uVar11": {
                    "char_value": 1,
                    "digit": 20,
                    "digit_val": 1,
                    "digit_value": 3,
                    "temp": 1,
                    "temp1": 1,
                    "uint_11_2": 1
                },
                "uVar13": {
                    "bit_flags": 1,
                    "char_flags": 1,
                    "flag": 1,
                    "flag_mask": 1,
                    "flag_value": 2,
                    "flags": 11,
                    "flags_copy": 1,
                    "fmt_flags": 1,
                    "format_flags": 3,
                    "modifier_flag": 1,
                    "remaining_args": 1,
                    "temp2": 1,
                    "temp_flags": 1,
                    "temp_variable": 1,
                    "uint_13_2": 1
                },
                "uVar14": {
                    "ch": 6,
                    "ch2": 1,
                    "char_index": 1,
                    "character": 2,
                    "current_char": 3,
                    "flag": 1,
                    "fmt_char": 1,
                    "format_char": 1,
                    "next_char": 7,
                    "temp3": 1,
                    "temp_char": 1,
                    "temp_variable": 1,
                    "uint_14_3": 1,
                    "val3": 1
                },
                "uVar21": {
                    "digit": 1,
                    "digit_value": 1,
                    "field_width": 2,
                    "format_value": 1,
                    "length": 1,
                    "min_width": 1,
                    "multiplier": 1,
                    "num_digits": 1,
                    "precision": 1,
                    "precision_value": 1,
                    "shift_value": 1,
                    "shifted_flag": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp4": 1,
                    "temp_value": 2,
                    "temp_variable": 1,
                    "u_var21": 1,
                    "uint_21": 1,
                    "value": 1,
                    "zero_padding": 1
                },
                "uVar24": {
                    "digit_val": 1,
                    "div_mod_result": 1,
                    "divisor": 2,
                    "hi": 1,
                    "high_arg": 1,
                    "high_bits_value": 1,
                    "high_part": 2,
                    "high_word_value": 1,
                    "temp5": 1,
                    "temp_flag": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_variable": 1,
                    "temp_width": 1,
                    "u_var24": 1,
                    "uint_24": 1,
                    "unk_val": 1,
                    "unsigned_var": 1,
                    "val": 1,
                    "val4": 1,
                    "value_upper": 1
                },
                "uVar25": {
                    "is_negative_format_specifier": 1
                }
            },
            "called": [
                "FUN_00082ac0",
                "FUN_00082a50",
                "FUN_0008378c",
                "FUN_00084384",
                "FUN_00084750",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "calling": [
                "FUN_0008378c"
            ],
            "code": "\n/* WARNING: Type propagation algorithm not settling */\n\nint parse_format_string_00082b38(int buffer,int format,int *******format,int **args)\n\n{\n  bool is_left_justified;\n  bool is_signed;\n  bool is_unsigned;\n  char sign_char;\n  bool is_zero_padded;\n  int ********format_args;\n  int *arg;\n  int result;\n  char cVar9;\n  int *******current_char;\n  uint digit;\n  int **arg_ptr;\n  uint flags;\n  uint next_char;\n  int arg_index;\n  int ********format;\n  int num_args;\n  int *******remaining_format;\n  int *arg_ptr;\n  int *******arg_ptr;\n  uint temp_value;\n  int *is_negative;\n  int *******remaining_format;\n  undefined4 high_part;\n  int ********temp_ptr;\n  bool is_negative;\n  longlong combined_value;\n  int *******max_width;\n  int *******precision;\n  int **arg_ptr;\n  int result_length;\n  char *digits;\n  char flag_char;\n  undefined padding_char;\n  undefined current_width_flag;\n  int ********local_pp_param_ptr_array;\n  int num_args;\n  int *******formatted_ptr;\n  undefined padding_char;\n  char hex_char;\n  undefined padding_char;\n  undefined format_buffer [4];\n  int *******temp_array [16];\n  \n  if ((buffer != 0) && (*(int *)(buffer + 0x38) == 0)) {\n    __sinit();\n  }\n  flags = (uint)*(ushort *)(format + 0xc);\n  if (-1 < (int)((uint)*(ushort *)(format + 0xc) << 0x12)) {\n    flags = flags | 0x2000;\n    *(short *)(format + 0xc) = (short)flags;\n    *(uint *)(format + 100) = *(uint *)(format + 100) & 0xffffdfff;\n  }\n  if (((int)(flags << 0x1c) < 0) && (*(int *)(format + 0x10) != 0)) {\n    if ((flags & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  else {\n    result = __swsetup_r(buffer,format);\n    if (result != 0) {\n      return -1;\n    }\n    if ((*(ushort *)(format + 0xc) & 0x1a) != 10) goto LAB_00082b8a;\n  }\n  if (-1 < *(short *)(format + 0xe)) {\n    result = __sbprintf(buffer,format,format,args);\n    return result;\n  }\nLAB_00082b8a:\n  digits = (char *)0x0;\n  formatted_ptr = (int *******)0x0;\n  num_args = 0;\n  result_length = 0;\n  format_args = (int ********)format_buffer;\n  arg_ptr = args;\n  local_pp_param_ptr_array = (int ********)format_buffer;\nLAB_00082b9e:\n  current_char = format;\n  if ((*(char *)format != '\\0') && (*(char *)format != '%')) {\n    do {\n      current_char = (int *******)((int)current_char + 1);\n      if (*(char *)current_char == '\\0') break;\n    } while (*(char *)current_char != '%');\n    arg_ptr = (int *******)((int)current_char - (int)format);\n    if (arg_ptr != (int *******)0x0) {\n      num_args = num_args + 1;\n      formatted_ptr = (int *******)((int)formatted_ptr + (int)arg_ptr);\n      *format_args = format;\n      format_args[1] = arg_ptr;\n      if (num_args < 8) {\n        format_args = format_args + 2;\n      }\n      else {\n        if (formatted_ptr == (int *******)0x0) {\n          result_length = result_length + (int)arg_ptr;\n          num_args = 0;\n          format_args = (int ********)format_buffer;\n          goto LAB_00082bee;\n        }\n        result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n        format_args = (int ********)format_buffer;\n        if (result != 0) goto LAB_000833de;\n      }\n      result_length = result_length + (int)arg_ptr;\n    }\n  }\nLAB_00082bee:\n  if (*(char *)current_char != '\\0') {\n    flag_char = '\\0';\n    next_char = (uint)*(byte *)((int)current_char + 1);\n    flags = 0;\n    is_zero_padded = false;\n    is_signed = false;\n    is_left_justified = false;\n    is_unsigned = false;\n    is_negative = false;\n    arg_ptr = (int *******)0x0;\n    precision = (int *******)0xffffffff;\n    format = (int *******)((int)current_char + 1);\nLAB_00082c12:\n    format = (int *******)((int)format + 1);\nLAB_00082c16:\n    switch(next_char) {\n    case 0x20:\n      goto switchD_00082c20_caseD_20;\n    default:\n      if (next_char != 0) {\n        max_width = (int *******)0x1;\n        precision = (int *******)0x1;\n        temp_ptr = (int ********)&padding_char;\n        padding_char = (char)next_char;\n        goto LAB_00083012;\n      }\n      goto LAB_000833d0;\n    case 0x23:\n      is_unsigned = true;\n      next_char = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x2a:\n      arg_ptr = (int *******)*arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      if ((int)arg_ptr < 0) {\n        arg_ptr = (int *******)-(int)arg_ptr;\n        goto switchD_00082c20_caseD_2d;\n      }\n      next_char = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x2b:\n      next_char = (uint)*(byte *)format;\n      flag_char = '+';\n      goto LAB_00082c12;\n    case 0x2d:\nswitchD_00082c20_caseD_2d:\n      flags = flags | 4;\n      next_char = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x2e:\n      next_char = (uint)*(byte *)format;\n      current_char = (int *******)((int)format + 1);\n      if (next_char == 0x2a) {\n        next_char = (uint)*(byte *)((int)format + 1);\n        precision = (int *******)*arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        format = current_char;\n        if ((int)precision < 0) {\n          precision = (int *******)0xffffffff;\n        }\n        goto LAB_00082c12;\n      }\n      digit = next_char - 0x30;\n      if (digit < 10) {\n        temp_value = 0;\n        do {\n          format = (int *******)((int)current_char + 1);\n          next_char = (uint)*(byte *)current_char;\n          temp_value = digit + temp_value * 10;\n          digit = next_char - 0x30;\n          current_char = format;\n        } while (digit < 10);\n        precision = (int *******)(temp_value | (int)temp_value >> 0x1f);\n      }\n      else {\n        precision = (int *******)0x0;\n        format = current_char;\n      }\n      goto LAB_00082c16;\n    case 0x30:\n      flags = flags | 0x80;\n      next_char = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x31:\n    case 0x32:\n    case 0x33:\n    case 0x34:\n    case 0x35:\n    case 0x36:\n    case 0x37:\n    case 0x38:\n    case 0x39:\n      goto switchD_00082c20_caseD_31;\n    case 0x44:\n      is_signed = true;\n      if (is_left_justified == false) goto LAB_00083028;\nLAB_00082e98:\n      arg_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = *arg_ptr;\n      is_negative = arg_ptr[1];\n      arg_ptr = arg_ptr + 2;\n      goto LAB_00082eac;\n    case 0x4f:\n      is_signed = true;\n      if (is_left_justified != false) goto LAB_00082d42;\nLAB_00082f2a:\n      result = (uint)is_signed << 4;\n      arg_index = (uint)is_left_justified << 5;\n      if ((is_signed == 0) && (arg_index = (uint)is_negative << 6, is_negative != 0)) {\n        arg_ptr = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        is_negative = (int *)0x0;\n      }\n      else {\n        result = arg_index;\n        arg_ptr = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        is_negative = (int *)0x0;\n      }\n      break;\n    case 0x55:\n      is_signed = true;\n      if (is_left_justified != false) goto LAB_00082e62;\nLAB_00082f7c:\n      if ((is_signed) || (is_negative == false)) {\n        result = 1;\n        arg_ptr = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        is_negative = (int *)0x0;\n      }\n      else {\n        is_negative = (int *)0x0;\n        arg_ptr = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        result = 1;\n      }\n      break;\n    case 0x58:\n      digits = \"0123456789ABCDEF\";\n      if (is_left_justified == false) goto LAB_00083196;\nLAB_00082fb6:\n      arg_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = arg_ptr + 2;\n      arg_ptr = *arg_ptr;\n      is_negative = arg_ptr[1];\n      goto LAB_00082fca;\n    case 99:\n      arg_ptr = *arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      max_width = (int *******)0x1;\n      padding_char = SUB41(arg_ptr,0);\n      precision = (int *******)0x1;\n      temp_ptr = (int ********)&padding_char;\n      goto LAB_00083012;\n    case 100:\n    case 0x69:\n      if (is_left_justified != false) goto LAB_00082e98;\nLAB_00083028:\n      if ((is_signed == false) && (is_negative != false)) {\n        arg_ptr = (int *)(int)*(short *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        is_negative = (int *)((int)arg_ptr >> 0x1f);\n      }\n      else {\n        arg_ptr = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        is_negative = (int *)((int)arg_ptr >> 0x1f);\n      }\nLAB_00082eac:\n      if ((int)is_negative < 0) {\n        is_negative = arg_ptr != (int *)0x0;\n        arg_ptr = (int *)-(int)arg_ptr;\n        is_negative = (int *)(-(int)is_negative - (uint)is_negative);\n        flag_char = '-';\n        sign_char = '-';\n        result = 1;\n        goto LAB_00082d6a;\n      }\n      if (-1 < (int)precision) {\n        flags = flags & 0xffffff7f;\n      }\n      is_zero_padded = false;\n      next_char = (uint)arg_ptr | (uint)is_negative;\n      result = 1;\n      sign_char = flag_char;\n      goto joined_r0x00082d78;\n    case 0x68:\n      is_negative = true;\n      next_char = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x6c:\n      next_char = (uint)*(byte *)format;\n      if (next_char == 0x6c) {\n        is_left_justified = true;\n        next_char = (uint)*(byte *)((int)format + 1);\n        format = (int *******)((int)format + 1);\n      }\n      else {\n        is_signed = true;\n      }\n      goto LAB_00082c12;\n    case 0x6e:\n      if (is_left_justified == false) {\n        if (is_signed == false) {\n          if (is_negative) {\n            arg_ptr = *arg_ptr;\n            arg_ptr = arg_ptr + 1;\n            *(short *)arg_ptr = (short)result_length;\n          }\n          else {\n            arg_ptr = *arg_ptr;\n            arg_ptr = arg_ptr + 1;\n            *arg_ptr = result_length;\n          }\n        }\n        else {\n          arg_ptr = *arg_ptr;\n          arg_ptr = arg_ptr + 1;\n          *arg_ptr = result_length;\n        }\n      }\n      else {\n        arg_ptr = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        *arg_ptr = result_length;\n        arg_ptr[1] = result_length >> 0x1f;\n      }\n      goto LAB_00082b9e;\n    case 0x6f:\n      if (is_left_justified == false) goto LAB_00082f2a;\nLAB_00082d42:\n      arg_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = arg_ptr + 2;\n      arg_ptr = *arg_ptr;\n      is_negative = arg_ptr[1];\n      result = 0;\n      break;\n    case 0x70:\n      arg_ptr = *arg_ptr;\n      arg_ptr = arg_ptr + 1;\n      current_width_flag = 0x78;\n      is_zero_padded = true;\n      is_negative = (int *)0x0;\n      padding_char = 0x30;\n      digits = \"0123456789abcdef\";\n      result = 2;\n      break;\n    case 0x71:\n      is_left_justified = true;\n      next_char = (uint)*(byte *)format;\n      goto LAB_00082c12;\n    case 0x73:\n      temp_ptr = (int ********)*arg_ptr;\n      flag_char = '\\0';\n      arg_ptr = arg_ptr + 1;\n      if (temp_ptr != (int ********)0x0) {\n        if ((int)precision < 0) {\n          precision = (int *******)strlen(temp_ptr);\n          current_char = (int *******)0x0;\n          sign_char = flag_char;\n        }\n        else {\n          result = memchr(temp_ptr,0,precision);\n          sign_char = flag_char;\n          if (result == 0) {\n            current_char = (int *******)0x0;\n          }\n          else {\n            remaining_format = (int *******)(result - (int)temp_ptr);\n            if ((int)precision <= (int)(int *******)(result - (int)temp_ptr)) {\n              remaining_format = precision;\n            }\n            current_char = (int *******)0x0;\n            precision = remaining_format;\n          }\n        }\n        goto LAB_00082da0;\n      }\n      if ((int *******)0x5 < precision) {\n        precision = (int *******)0x6;\n      }\n      max_width = (int *******)((uint)precision & ~((int)precision >> 0x1f));\n      temp_ptr = (int ********)&UNK_00085840;\nLAB_00083012:\n      flag_char = '\\0';\n      current_char = (int *******)0x0;\n      goto LAB_00082dba;\n    case 0x75:\n      if (!is_left_justified) goto LAB_00082f7c;\nLAB_00082e62:\n      arg_ptr = (int **)((int)arg_ptr + 7U & 0xfffffff8);\n      arg_ptr = arg_ptr + 2;\n      arg_ptr = *arg_ptr;\n      is_negative = arg_ptr[1];\n      result = 1;\n      break;\n    case 0x78:\n      digits = \"0123456789abcdef\";\n      if (is_left_justified != false) goto LAB_00082fb6;\nLAB_00083196:\n      if ((is_signed == false) && (is_negative != false)) {\n        is_negative = (int *)0x0;\n        arg_ptr = (int *)(uint)*(ushort *)arg_ptr;\n        arg_ptr = arg_ptr + 1;\n      }\n      else {\n        arg_ptr = *arg_ptr;\n        arg_ptr = arg_ptr + 1;\n        is_negative = (int *)0x0;\n      }\nLAB_00082fca:\n      if ((is_unsigned) && (((uint)arg_ptr | (uint)is_negative) != 0)) {\n        is_zero_padded = true;\n        padding_char = 0x30;\n        result = 2;\n        current_width_flag = (char)next_char;\n      }\n      else {\n        result = 2;\n      }\n    }\n    flag_char = '\\0';\n    sign_char = '\\0';\nLAB_00082d6a:\n    if (-1 < (int)precision) {\n      flags = flags & 0xffffff7f;\n    }\n    next_char = (uint)arg_ptr | (uint)is_negative;\njoined_r0x00082d78:\n    combined_value = CONCAT44(is_negative,arg_ptr);\n    current_char = precision;\n    if ((next_char == 0) && (precision == (int *******)0x0)) {\n      temp_ptr = (int ********)format_buffer;\n      if ((result != 0) || (!is_unsigned)) goto LAB_00082da0;\n      temp_ptr = (int ********)(&hex_char + 1);\n      padding_char = '0';\n      goto LAB_00082d9a;\n    }\n    if (result == 1) {\n      if (is_negative != (int *)0x0 || (int *)0x9 < arg_ptr) {\n        format = (int ********)(&hex_char + 1);\n        do {\n          temp_ptr = format;\n          high_part = (undefined4)((ulonglong)combined_value >> 0x20);\n          cVar9 = '\\n';\n          __aeabi_uldivmod((int)combined_value,high_part,10,0);\n          *(char *)temp_ptr = cVar9 + '0';\n          combined_value = __aeabi_uldivmod((int)combined_value,high_part,10,0);\n          format = (int ********)((int)temp_ptr + -1);\n        } while (combined_value != 0);\n        precision = (int *******)((int)format_buffer - (int)temp_ptr);\n        goto LAB_00082da0;\n      }\n      padding_char = (char)arg_ptr + '0';\n      temp_ptr = (int ********)(&hex_char + 1);\n      goto LAB_0008351e;\n    }\n    format = (int ********)(&hex_char + 1);\n    if (result != 2) goto LAB_0008337e;\n    do {\n      temp_ptr = format;\n      next_char = (uint)arg_ptr & 0xf;\n      arg_ptr = (int *)((uint)arg_ptr >> 4 | (int)is_negative << 0x1c);\n      is_negative = (int *)((uint)is_negative >> 4);\n      *(char *)temp_ptr = digits[next_char];\n      format = (int ********)((int)temp_ptr + -1);\n    } while (((uint)arg_ptr | (uint)is_negative) != 0);\n    precision = (int *******)((int)format_buffer - (int)temp_ptr);\n    goto LAB_00082da0;\n  }\nLAB_000833d0:\n  if (formatted_ptr != (int *******)0x0) {\n    __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n  }\nLAB_000833de:\n  if ((int)((uint)*(ushort *)(format + 0xc) << 0x19) < 0) {\n    return -1;\n  }\n  return result_length;\nLAB_0008337e:\n  do {\n    temp_ptr = format;\n    arg = (int *)((uint)arg_ptr >> 3 | (int)is_negative << 0x1d);\n    is_negative = (int *)((uint)is_negative >> 3);\n    result = ((uint)arg_ptr & 7) + 0x30;\n    *(char *)temp_ptr = (char)result;\n    format = (int ********)((int)temp_ptr + -1);\n    arg_ptr = arg;\n  } while (((uint)arg | (uint)is_negative) != 0);\n  if (is_unsigned) {\n    if (result == 0x30) {\nLAB_00082d9a:\n      precision = (int *******)((int)format_buffer - (int)temp_ptr);\n    }\n    else {\n      *(undefined *)((int)temp_ptr + -1) = 0x30;\n      temp_ptr = format;\n      precision = (int *******)((int)format_buffer - (int)format);\n    }\n  }\n  else {\nLAB_0008351e:\n    precision = (int *******)((int)format_buffer - (int)temp_ptr);\n  }\nLAB_00082da0:\n  max_width = precision;\n  if ((int)precision < (int)current_char) {\n    max_width = current_char;\n  }\n  if (sign_char != '\\0') {\n    max_width = (int *******)((int)max_width + 1);\n  }\nLAB_00082dba:\n  if (is_zero_padded) {\n    max_width = (int *******)((int)max_width + 2);\n  }\n  if ((flags == 0) &&\n     (remaining_format = (int *******)((int)arg_ptr - (int)max_width), 0 < (int)remaining_format)) {\n    if ((int)remaining_format < 0x11) {\n      num_args = num_args + 1;\n    }\n    else {\n      do {\n        remaining_format = remaining_format;\n        result = num_args + 1;\n        formatted_ptr = formatted_ptr + 4;\n        *format_args = (int *******)0x85808;\n        format_args[1] = (int *******)0x10;\n        if (result < 8) {\n          arg_index = num_args + 2;\n          format_args = format_args + 2;\n          num_args = result;\n        }\n        else if (formatted_ptr == (int *******)0x0) {\n          arg_index = 1;\n          format_args = (int ********)format_buffer;\n          num_args = 0;\n        }\n        else {\n          num_args = result;\n          result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n          if (result != 0) goto LAB_000833de;\n          arg_index = num_args + 1;\n          format_args = (int ********)format_buffer;\n        }\n        remaining_format = remaining_format + -4;\n      } while (0x10 < (int)remaining_format);\n      remaining_format = remaining_format + -4;\n      num_args = arg_index;\n    }\n    formatted_ptr = (int *******)((int)formatted_ptr + (int)remaining_format);\n    *format_args = (int *******)0x85808;\n    format_args[1] = remaining_format;\n    if (num_args < 8) {\n      result = num_args + 1;\n      format_args = format_args + 2;\n    }\n    else if (formatted_ptr == (int *******)0x0) {\n      result = 1;\n      num_args = 0;\n      format_args = (int ********)format_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n      if (result != 0) goto LAB_000833de;\n      result = num_args + 1;\n      format_args = (int ********)format_buffer;\n    }\n  }\n  else {\n    result = num_args + 1;\n  }\n  arg_index = result;\n  if (flag_char != '\\0') {\n    formatted_ptr = (int *******)((int)formatted_ptr + 1);\n    arg_index = 1;\n    *format_args = (int *******)&flag_char;\n    format_args[1] = (int *******)0x1;\n    num_args = result;\n    if (result < 8) {\n      arg_index = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (formatted_ptr == (int *******)0x0) {\n      num_args = 0;\n      format_args = (int ********)format_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n      if (result != 0) goto LAB_000833de;\n      arg_index = num_args + 1;\n      format_args = (int ********)format_buffer;\n    }\n  }\n  result = arg_index;\n  num_args = num_args;\n  if (is_zero_padded) {\n    formatted_ptr = (int *******)((int)formatted_ptr + 2);\n    *format_args = (int *******)&padding_char;\n    format_args[1] = (int *******)0x2;\n    if (arg_index < 8) {\n      result = arg_index + 1;\n      num_args = arg_index;\n      format_args = format_args + 2;\n    }\n    else if (formatted_ptr == (int *******)0x0) {\n      result = 1;\n      num_args = 0;\n      format_args = (int ********)format_buffer;\n    }\n    else {\n      num_args = arg_index;\n      result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n      if (result != 0) goto LAB_000833de;\n      result = num_args + 1;\n      num_args = num_args;\n      format_args = (int ********)format_buffer;\n    }\n  }\n  num_args = num_args;\n  if ((flags == 0x80) &&\n     (remaining_format = (int *******)((int)arg_ptr - (int)max_width), 0 < (int)remaining_format)) {\n    if (0x10 < (int)remaining_format) {\n      do {\n        while( true ) {\n          remaining_format = remaining_format;\n          num_args = num_args + 1;\n          formatted_ptr = formatted_ptr + 4;\n          *format_args = (int *******)&DAT_00085848;\n          format_args[1] = (int *******)0x10;\n          if (7 < num_args) break;\n          result = num_args + 2;\n          format_args = format_args + 2;\nLAB_0008348e:\n          num_args = num_args;\n          remaining_format = remaining_format + -4;\n          if ((int)(remaining_format + -4) < 0x11) goto LAB_000834b4;\n        }\n        if (formatted_ptr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n          if (result == 0) {\n            result = num_args + 1;\n            format_args = (int ********)format_buffer;\n            goto LAB_0008348e;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        num_args = 0;\n        remaining_format = remaining_format + -4;\n        format_args = (int ********)format_buffer;\n      } while (0x10 < (int)(remaining_format + -4));\nLAB_000834b4:\n      remaining_format = remaining_format + -4;\n    }\n    formatted_ptr = (int *******)((int)formatted_ptr + (int)remaining_format);\n    *format_args = (int *******)&DAT_00085848;\n    format_args[1] = remaining_format;\n    num_args = result;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n    }\n    else if (formatted_ptr == (int *******)0x0) {\n      result = 1;\n      num_args = 0;\n      format_args = (int ********)format_buffer;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n      if (result != 0) goto LAB_000833de;\n      result = num_args + 1;\n      format_args = (int ********)format_buffer;\n    }\n  }\n  current_char = (int *******)((int)current_char - (int)precision);\n  format = (int ********)format_buffer;\n  if ((int)current_char < 1) {\nLAB_000832c6:\n    formatted_ptr = (int *******)((int)formatted_ptr + (int)precision);\n    *format_args = (int *******)temp_ptr;\n    format_args[1] = precision;\n    precision = formatted_ptr;\n    num_args = result;\n    if (result < 8) goto LAB_0008345a;\n    if (formatted_ptr == (int *******)0x0) {\n      num_args = 0;\n    }\n    else {\n      result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  else {\n    arg_index = num_args;\n    if (0x10 < (int)current_char) {\n      do {\n        while( true ) {\n          remaining_format = current_char;\n          num_args = arg_index + 1;\n          formatted_ptr = formatted_ptr + 4;\n          *format_args = (int *******)&DAT_00085848;\n          format_args[1] = (int *******)0x10;\n          if (7 < num_args) break;\n          result = arg_index + 2;\n          format_args = format_args + 2;\nLAB_00083282:\n          arg_index = num_args;\n          current_char = remaining_format + -4;\n          if ((int)(remaining_format + -4) < 0x11) goto LAB_000832aa;\n        }\n        if (formatted_ptr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n          if (result == 0) {\n            result = num_args + 1;\n            format_args = (int ********)format_buffer;\n            goto LAB_00083282;\n          }\n          goto LAB_000833de;\n        }\n        result = 1;\n        format_args = (int ********)format_buffer;\n        arg_index = 0;\n        current_char = remaining_format + -4;\n      } while (0x10 < (int)(remaining_format + -4));\nLAB_000832aa:\n      current_char = remaining_format + -4;\n    }\n    formatted_ptr = (int *******)((int)formatted_ptr + (int)current_char);\n    *format_args = (int *******)&DAT_00085848;\n    format_args[1] = current_char;\n    if (result < 8) {\n      result = result + 1;\n      format_args = format_args + 2;\n      goto LAB_000832c6;\n    }\n    if (formatted_ptr != (int *******)0x0) {\n      num_args = result;\n      result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n      if (result != 0) goto LAB_000833de;\n      result = num_args + 1;\n      format_args = (int ********)format_buffer;\n      goto LAB_000832c6;\n    }\n    temp_array[0] = precision;\n    num_args = 1;\n    format_args = (int ********)format_buffer;\n    format_buffer = (undefined  [4])temp_ptr;\nLAB_0008345a:\n    format = format_args + 2;\n    formatted_ptr = precision;\n  }\n  if (((flags & 4) != 0) &&\n     (current_char = (int *******)((int)arg_ptr - (int)max_width), 0 < (int)current_char)) {\n    result = num_args;\n    if ((int)current_char < 0x11) {\n      arg_index = num_args + 1;\n    }\n    else {\n      do {\n        while( true ) {\n          num_args = result + 1;\n          formatted_ptr = formatted_ptr + 4;\n          *format = (int *******)0x85808;\n          format[1] = (int *******)0x10;\n          if (7 < num_args) break;\n          arg_index = result + 2;\n          format = format + 2;\nLAB_00083316:\n          current_char = current_char + -4;\n          result = num_args;\n          if ((int)current_char < 0x11) goto LAB_0008333e;\n        }\n        if (formatted_ptr != (int *******)0x0) {\n          result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n          if (result == 0) {\n            arg_index = num_args + 1;\n            format = (int ********)format_buffer;\n            goto LAB_00083316;\n          }\n          goto LAB_000833de;\n        }\n        current_char = current_char + -4;\n        arg_index = 1;\n        result = 0;\n        format = (int ********)format_buffer;\n      } while (0x10 < (int)current_char);\n    }\nLAB_0008333e:\n    formatted_ptr = (int *******)((int)formatted_ptr + (int)current_char);\n    *format = (int *******)0x85808;\n    format[1] = current_char;\n    num_args = arg_index;\n    if (7 < arg_index) {\n      if (formatted_ptr == (int *******)0x0) {\n        if ((int)max_width < (int)arg_ptr) {\n          max_width = arg_ptr;\n        }\n        result_length = result_length + (int)max_width;\n        goto LAB_00083422;\n      }\n      result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array);\n      if (result != 0) goto LAB_000833de;\n    }\n  }\n  if ((int)max_width < (int)arg_ptr) {\n    max_width = arg_ptr;\n  }\n  result_length = result_length + (int)max_width;\n  if ((formatted_ptr != (int *******)0x0) &&\n     (result = __sprint_r_part_0(buffer,format,&local_pp_param_ptr_array), result != 0)) goto LAB_000833de;\nLAB_00083422:\n  num_args = 0;\n  format_args = (int ********)format_buffer;\n  goto LAB_00082b9e;\nswitchD_00082c20_caseD_31:\n  digit = next_char - 0x30;\n  arg_ptr = (int *******)0x0;\n  current_char = format;\n  do {\n    format = (int *******)((int)current_char + 1);\n    next_char = (uint)*(byte *)current_char;\n    arg_ptr = (int *******)(digit + (int)arg_ptr * 10);\n    digit = next_char - 0x30;\n    current_char = format;\n  } while (digit < 10);\n  goto LAB_00082c16;\nswitchD_00082c20_caseD_20:\n  next_char = (uint)*(byte *)format;\n  if (flag_char == '\\0') {\n    flag_char = ' ';\n  }\n  goto LAB_00082c12;\n}\n\n",
            "current_name": "parse_format_string_00082b38",
            "entrypoint": "0x00082b38",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00082b38": "parse_format_string_00082b38",
                "bVar1": "is_left_justified",
                "bVar2": "is_signed",
                "bVar26": "is_negative",
                "bVar3": "is_unsigned",
                "bVar5": "is_zero_padded",
                "cStack_6a": "hex_char",
                "cVar4": "sign_char",
                "iVar15": "arg_index",
                "iVar17": "num_args",
                "iVar8": "result",
                "lVar27": "combined_value",
                "local_64": "temp_array",
                "local_68": "format_buffer",
                "local_69": "padding_char",
                "local_90": "padding_char",
                "local_94": "formatted_ptr",
                "local_98": "num_args",
                "local_9c": "local_pp_param_ptr_array",
                "local_9f": "current_width_flag",
                "local_a0": "padding_char",
                "local_a1": "flag_char",
                "local_c0": "digits",
                "local_c4": "result_length",
                "local_c8": "arg_ptr",
                "local_d4": "precision",
                "local_dc": "max_width",
                "param_1": "buffer",
                "param_2": "format",
                "param_3": "format",
                "param_4": "args",
                "piVar19": "arg_ptr",
                "piVar22": "is_negative",
                "piVar7": "arg",
                "ppiVar12": "arg_ptr",
                "ppppppiVar10": "localized_param_ptr_array",
                "ppppppiVar20": "localized_param_ptr_array_2",
                "pppppppiVar10": "current_char",
                "pppppppiVar16": "temp",
                "pppppppiVar18": "remaining_format",
                "pppppppiVar20": "arg_ptr",
                "pppppppiVar23": "remaining_format",
                "pppppppiVar25": "arg_ptr",
                "pppppppiVar6": "temp_ptr",
                "ppppppppiVar16": "format",
                "ppppppppiVar25": "temp_ptr",
                "ppppppppiVar6": "format_args",
                "uVar11": "digit",
                "uVar13": "flags",
                "uVar14": "next_char",
                "uVar21": "temp_value",
                "uVar24": "high_part"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008378c": {
            "additional_data": {
                "FUN_0008378c": {
                    "output_function": 1,
                    "print_and_check": 1,
                    "print_and_check_flags": 2,
                    "print_and_flush": 11,
                    "print_and_flush_buffer": 1,
                    "print_and_flush_data": 2,
                    "print_and_flush_output": 1,
                    "print_and_modify_value": 1,
                    "print_and_set_flags": 1,
                    "print_and_update_flags": 2,
                    "print_data": 1,
                    "print_formatted_data": 3,
                    "print_formatted_output": 1,
                    "print_formatted_string": 2,
                    "print_string": 1
                },
                "auStack_420": {
                    "aux_buffer": 1,
                    "aux_stack_buffer": 1,
                    "auxiliary_stack": 2,
                    "buffer_data": 1,
                    "data_array": 1,
                    "large_buffer": 2,
                    "stack_array": 2,
                    "stack_buffer": 12,
                    "stack_data": 1,
                    "temp_buffer": 1,
                    "temporary_array": 1,
                    "temporary_buffer": 2
                },
                "iVar1": {
                    "num_chars_written": 1,
                    "print_result": 3,
                    "print_return_value": 1,
                    "printf_result": 10,
                    "printing_result": 1,
                    "result": 7,
                    "return_value": 4,
                    "sprintf_result": 1
                },
                "iVar2": {
                    "fflush_result": 6,
                    "flush_result": 20,
                    "flush_return_value": 1,
                    "flushing_result": 1
                },
                "local_424": {
                    "additional_buffer": 1,
                    "au_stack_420": 1,
                    "constant_offset": 1,
                    "data_offset": 1,
                    "data_undefined4_3": 1,
                    "local_variable": 2,
                    "output_buffer": 1,
                    "param1": 1,
                    "param_100": 1,
                    "param_2_val": 1,
                    "pointer_to_buffer": 1,
                    "some_data": 1,
                    "stack_buffer": 3,
                    "temp_value": 1,
                    "temporary_buffer": 2,
                    "temporary_variable": 1,
                    "unknown_data": 1,
                    "unknown_var_4": 1,
                    "unused": 2,
                    "unused_param_4": 1,
                    "value_1": 1,
                    "value_2": 1,
                    "variable_6": 1,
                    "yet_another_variable": 1
                },
                "local_464": {
                    "data": 1,
                    "data_size": 1,
                    "data_undefined4_2": 1,
                    "fflush_arg3": 1,
                    "flush_data": 1,
                    "input_int2": 1,
                    "length": 1,
                    "offset": 1,
                    "one_more_buffer": 1,
                    "param_24": 1,
                    "param_2_copy": 1,
                    "param_3": 2,
                    "param_3_val": 1,
                    "param_4": 1,
                    "printf_width3": 1,
                    "some_other_data": 1,
                    "unknown_value_2": 1,
                    "unknown_var_3": 1,
                    "unused": 1,
                    "unused_param_3": 1,
                    "value": 1,
                    "value_3": 3,
                    "variable_5": 1,
                    "yet_another_data_field": 1
                },
                "local_46c": {
                    "another_data_field": 1,
                    "data_size": 1,
                    "data_undefined4": 1,
                    "header": 1,
                    "input_int": 1,
                    "param_1_copy": 1,
                    "param_1c": 1,
                    "param_3": 1,
                    "pointer_copy": 1,
                    "pointer_value": 1,
                    "some_data": 1,
                    "unknown_value": 1,
                    "unknown_var_2": 1,
                    "unused": 1,
                    "unused_param_2": 1,
                    "value": 1,
                    "value_1": 1,
                    "value_2": 2,
                    "variable_4": 1,
                    "yet_another_buffer": 1
                },
                "local_470": {
                    "counter": 2,
                    "dummy_value": 1,
                    "fflush_arg2": 1,
                    "fflush_mode": 1,
                    "fflush_result": 1,
                    "fflush_state": 1,
                    "flush_offset": 1,
                    "flush_return_size": 1,
                    "param_zero": 1,
                    "placeholder": 1,
                    "printf_flag": 1,
                    "size_2": 1,
                    "some_value": 1,
                    "some_variable": 1,
                    "unknown_var_1": 1,
                    "unused": 3,
                    "unused_param": 1,
                    "unused_variable": 1,
                    "value2": 1,
                    "variable_3": 1,
                    "zero": 4,
                    "zero_value": 1,
                    "zeros": 1
                },
                "local_474": {
                    "another_buffer_size": 1,
                    "buffer_capacity": 1,
                    "buffer_fill_size": 1,
                    "buffer_length_copy": 1,
                    "buffer_size": 1,
                    "buffer_size2": 3,
                    "buffer_size_2": 5,
                    "buffer_size_copy": 3,
                    "fflush_arg1": 1,
                    "fflush_buffer_size": 2,
                    "flush_buffer_size": 1,
                    "flush_size": 2,
                    "fwrite_result": 1,
                    "length": 1,
                    "print_return_size": 1,
                    "printf_result": 1,
                    "printf_width2": 1,
                    "size_1": 1,
                    "variable_2": 1
                },
                "local_478": {
                    "buffer": 13,
                    "buffer_pointer": 3,
                    "buffer_ptr": 7,
                    "current_buffer": 1,
                    "formatted_string_ptr": 1,
                    "output_buffer": 3,
                    "output_string": 1,
                    "vfiprintf_arg2": 1
                },
                "local_47a": {
                    "another_modified_value": 1,
                    "data_flag": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "data_ushort2": 1,
                    "data_value": 1,
                    "data_value_2": 1,
                    "decoded_value": 1,
                    "flag": 1,
                    "input_data_var2": 1,
                    "input_short": 2,
                    "input_value": 1,
                    "input_value2": 1,
                    "param_e": 1,
                    "short_value": 3,
                    "some_value": 1,
                    "value": 6,
                    "value1": 1,
                    "value_1": 1,
                    "value_to_print": 1,
                    "variable_1": 1,
                    "variable_x": 1
                },
                "local_47c": {
                    "data": 1,
                    "data_flags": 1,
                    "data_length": 1,
                    "data_ushort": 1,
                    "data_value": 2,
                    "flag": 2,
                    "flag1": 1,
                    "flags": 4,
                    "input_data_var1": 1,
                    "input_flag": 1,
                    "input_value": 1,
                    "mask": 1,
                    "masked_short": 1,
                    "masked_value": 5,
                    "modified_short": 1,
                    "modified_value": 4,
                    "param_c": 1,
                    "short_value": 1
                },
                "local_480": {
                    "buffer_length": 1,
                    "buffer_size": 22,
                    "buffer_size1": 1,
                    "buffer_size_1": 3,
                    "printf_width": 1,
                    "vfiprintf_arg1": 1
                },
                "local_488": {
                    "buffer": 6,
                    "buffer_array": 11,
                    "buffer_ptr": 1,
                    "formatted_string": 1,
                    "local_buffers": 1,
                    "output_buffer": 1,
                    "string_buffer": 2,
                    "string_buffer_array": 1,
                    "string_buffers": 3
                },
                "param_1": {
                    "file": 2,
                    "file_descriptor": 1,
                    "file_pointer": 1,
                    "file_stream": 2,
                    "output_stream": 19,
                    "param": 1,
                    "stream": 5
                },
                "param_2": {
                    "binary_data": 1,
                    "binary_offset": 1,
                    "buffer_address": 1,
                    "data": 10,
                    "data_pointer": 3,
                    "data_ptr": 6,
                    "input_address": 1,
                    "input_data": 5,
                    "input_data_address": 1,
                    "input_data_ptr": 1,
                    "struct_address": 1
                }
            },
            "called": [
                "FUN_00083adc",
                "FUN_00082b38"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint print_and_flush_data_0008378c(undefined4 output_stream,int data)\n\n{\n  int printf_result;\n  int flush_result;\n  undefined *buffer_array [2];\n  undefined4 buffer_size;\n  ushort masked_value;\n  undefined2 value;\n  undefined *buffer;\n  undefined4 buffer_size_2;\n  undefined4 zero;\n  undefined4 value_2;\n  undefined4 value_3;\n  undefined4 stack_buffer;\n  undefined stack_buffer [1024];\n  \n  stack_buffer = *(undefined4 *)(data + 100);\n  value_2 = *(undefined4 *)(data + 0x1c);\n  value = *(undefined2 *)(data + 0xe);\n  value_3 = *(undefined4 *)(data + 0x24);\n  buffer_array[0] = stack_buffer;\n  masked_value = *(ushort *)(data + 0xc) & 0xfffd;\n  buffer_size = 0x400;\n  buffer_size_2 = 0x400;\n  zero = 0;\n  buffer = buffer_array[0];\n  printf_result = _vfiprintf_r(output_stream,buffer_array);\n  if ((-1 < printf_result) && (flush_result = _fflush_r(output_stream,buffer_array), flush_result != 0)) {\n    printf_result = -1;\n  }\n  if ((int)((uint)masked_value << 0x19) < 0) {\n    *(ushort *)(data + 0xc) = *(ushort *)(data + 0xc) | 0x40;\n  }\n  return printf_result;\n}\n\n",
            "current_name": "print_and_flush_data_0008378c",
            "entrypoint": "0x0008378c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008378c": "print_and_flush_data_0008378c",
                "auStack_420": "stack_buffer",
                "iVar1": "printf_result",
                "iVar2": "flush_result",
                "local_424": "stack_buffer",
                "local_464": "value_3",
                "local_46c": "value_2",
                "local_470": "zero",
                "local_474": "buffer_size_2",
                "local_478": "buffer",
                "local_47a": "value",
                "local_47c": "masked_value",
                "local_480": "buffer_size",
                "local_488": "buffer_array",
                "param_1": "output_stream",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083808": {
            "additional_data": {
                "FUN_00083808": {
                    "check_and_initialize": 2,
                    "configure_file_operation": 1,
                    "decode_and_validate": 1,
                    "decode_and_validate_data": 1,
                    "initialize": 1,
                    "initialize_and_validate": 1,
                    "initialize_buffer": 9,
                    "initialize_data": 1,
                    "parse_data": 2,
                    "parse_flags": 1,
                    "parse_input": 1,
                    "process_data": 2,
                    "process_function": 1,
                    "process_parameter": 1,
                    "process_relocation": 1,
                    "validate_and_update_data": 1
                },
                "FUN_00083b14": {
                    "function_c": 1,
                    "process_data": 1
                },
                "FUN_00083d9c": {
                    "function_b": 1,
                    "manipulate_data": 1
                },
                "FUN_000842a4": {
                    "function_a": 1,
                    "operate_on_input": 1
                },
                "__sinit": {
                    "initialize": 2
                },
                "__smakebuf_r": {
                    "make_buffer": 2
                },
                "_free_r": {
                    "free_memory": 2
                },
                "iVar1": {
                    "buffer_length": 1,
                    "buffer_size": 2,
                    "condition1": 1,
                    "index": 2,
                    "initialize_value": 1,
                    "int_variable_1": 1,
                    "local_var1": 1,
                    "result": 3,
                    "return_value": 1,
                    "status1": 1,
                    "temp1": 2,
                    "temp_var1": 13,
                    "temp_var3": 1,
                    "temp_variable1": 1
                },
                "iVar2": {
                    "buffer_address": 1,
                    "buffer_value": 1,
                    "condition2": 1,
                    "file_status": 1,
                    "i_var": 1,
                    "int_variable_2": 1,
                    "local_var2": 1,
                    "offset": 1,
                    "status2": 1,
                    "temp2": 2,
                    "temp_var": 1,
                    "temp_var2": 13,
                    "temp_var4": 1,
                    "temp_variable2": 1,
                    "value": 3,
                    "var2": 1
                },
                "param_1": {
                    "buffer": 1,
                    "buffer_array": 1,
                    "buffer_ptr": 1,
                    "error_code": 2,
                    "out_ptr": 1,
                    "output": 5,
                    "output_buffer": 2,
                    "output_code": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_status": 5,
                    "output_value": 1,
                    "param": 1,
                    "param_array": 1,
                    "result": 3,
                    "status": 3
                },
                "param_2": {
                    "buffer": 3,
                    "data": 3,
                    "data_array": 1,
                    "data_ptr": 2,
                    "file_data": 1,
                    "header_array": 1,
                    "input": 5,
                    "input_array": 2,
                    "input_buffer": 2,
                    "input_data": 6,
                    "input_params": 1,
                    "input_ptr": 1,
                    "param_pointer": 1,
                    "relocation": 1
                },
                "uVar3": {
                    "buffer_value_as_int": 1,
                    "file_flags": 1,
                    "flag": 1,
                    "flag_var": 1,
                    "flags": 1,
                    "relocation_value": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp_value": 2,
                    "temp_var1": 1,
                    "temp_var3": 10,
                    "temp_variable3": 1,
                    "u_var": 2,
                    "u_var3": 1,
                    "uint_variable": 1,
                    "ushort_value": 1,
                    "value": 2,
                    "value3": 1,
                    "var1": 1
                },
                "uVar4": {
                    "buffer_value_as_short": 1,
                    "flag": 3,
                    "flags": 1,
                    "original_file_flags": 1,
                    "original_flags": 1,
                    "temp4": 1,
                    "temp_flag": 2,
                    "temp_result": 1,
                    "temp_var2": 1,
                    "temp_var4": 11,
                    "temp_variable4": 1,
                    "tmp_ushort_value": 1,
                    "ushort_var": 3,
                    "ushort_variable": 1,
                    "value4": 1,
                    "var2": 1
                }
            },
            "called": [
                "FUN_000842a4",
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_000844c4",
                "FUN_00082b38"
            ],
            "code": "\nundefined4 initialize_buffer_00083808(undefined4 *output,int *input_data)\n\n{\n  int temp_var1;\n  int temp_var2;\n  uint temp_var3;\n  ushort temp_var4;\n  \n  if ((Elf32_Rel_ARRAY_20070000[140].r_offset != 0) &&\n     (*(int *)(Elf32_Rel_ARRAY_20070000[140].r_offset + 0x38) == 0)) {\n    initialize();\n  }\n  temp_var4 = *(ushort *)(input_data + 3);\n  temp_var3 = (uint)temp_var4;\n  if ((int)(temp_var3 << 0x1c) < 0) {\n    temp_var2 = input_data[4];\n  }\n  else {\n    if (-1 < (int)(temp_var3 << 0x1b)) {\n      *output = 9;\n      *(ushort *)(input_data + 3) = temp_var4 | 0x40;\n      return 0xffffffff;\n    }\n    if ((int)(temp_var3 << 0x1d) < 0) {\n      if ((int *)input_data[0xc] != (int *)0x0) {\n        if ((int *)input_data[0xc] != input_data + 0x10) {\n          free_memory(output);\n          temp_var4 = *(ushort *)(input_data + 3);\n        }\n        input_data[0xc] = 0;\n      }\n      temp_var2 = input_data[4];\n      temp_var4 = temp_var4 & 0xffdb;\n      *input_data = temp_var2;\n      input_data[1] = 0;\n    }\n    else {\n      temp_var2 = input_data[4];\n    }\n    *(ushort *)(input_data + 3) = temp_var4 | 8;\n    temp_var3 = (uint)(temp_var4 | 8);\n  }\n  if ((temp_var2 == 0) && ((temp_var3 & 0x280) != 0x200)) {\n    make_buffer(output,input_data);\n    temp_var3 = (uint)*(ushort *)(input_data + 3);\n    temp_var2 = input_data[4];\n  }\n  if ((temp_var3 & 1) == 0) {\n    temp_var1 = 0;\n    if (-1 < (int)(temp_var3 << 0x1e)) {\n      temp_var1 = input_data[5];\n    }\n    input_data[2] = temp_var1;\n  }\n  else {\n    input_data[6] = -input_data[5];\n    input_data[2] = 0;\n  }\n  if ((temp_var2 == 0) && ((int)((uint)*(ushort *)(input_data + 3) << 0x18) < 0)) {\n    *(ushort *)(input_data + 3) = *(ushort *)(input_data + 3) | 0x40;\n    return 0xffffffff;\n  }\n  return 0;\n}\n\n",
            "current_name": "initialize_buffer_00083808",
            "entrypoint": "0x00083808",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083808": "initialize_buffer_00083808",
                "__sinit": "initialize",
                "__smakebuf_r": "make_buffer",
                "_free_r": "free_memory",
                "iVar1": "temp_var1",
                "iVar2": "temp_var2",
                "param_1": "output",
                "param_2": "input_data",
                "uVar3": "temp_var3",
                "uVar4": "temp_var4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083974": {
            "additional_data": {
                "FUN_00081df4": {
                    "do_something": 3,
                    "helper_function": 1,
                    "perform_task": 1,
                    "process_data": 1,
                    "secondary_function": 1
                },
                "FUN_00083974": {
                    "copy_param": 1,
                    "copy_param1": 1,
                    "copy_param_value": 1,
                    "do_nothing": 1,
                    "identity": 1,
                    "identity_function": 21,
                    "pass_through_function": 1,
                    "return_input": 1,
                    "return_param": 1,
                    "return_parameter_value": 1,
                    "update_value": 1
                },
                "param_1": {
                    "input": 14,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 6,
                    "output": 1,
                    "value": 4
                }
            },
            "called": [
                "FUN_00081df4"
            ],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x00083934) */\n/* WARNING: Removing unreachable block (ram,0x000838cc) */\n/* WARNING: Removing unreachable block (ram,0x00083960) */\n/* WARNING: Removing unreachable block (ram,0x000838de) */\n/* WARNING: Removing unreachable block (ram,0x000838e4) */\n/* WARNING: Removing unreachable block (ram,0x000838f0) */\n/* WARNING: Removing unreachable block (ram,0x0008390a) */\n/* WARNING: Removing unreachable block (ram,0x000838e8) */\n/* WARNING: Removing unreachable block (ram,0x00083922) */\n/* WARNING: Removing unreachable block (ram,0x00083954) */\n/* WARNING: Removing unreachable block (ram,0x00083924) */\n\nundefined4 identity_function_00083974(undefined4 input)\n\n{\n  return input;\n}\n\n",
            "current_name": "identity_function_00083974",
            "entrypoint": "0x00083974",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083974": "identity_function_00083974",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083adc": {
            "additional_data": {
                "FUN_00083adc": {
                    "decode_and_process_data": 4,
                    "decode_data": 3,
                    "decompile_and_improve": 1,
                    "decompiled_function": 1,
                    "decompress": 1,
                    "decompress_data": 1,
                    "extract_data": 1,
                    "process_data": 8
                },
                "iVar2": {
                    "counter": 1,
                    "current_index": 1,
                    "int_var2": 1,
                    "integer_var2": 1,
                    "integer_var_2": 1,
                    "offset": 4,
                    "remaining_data": 1,
                    "result": 1,
                    "size_var": 1,
                    "temp_int1": 1,
                    "temp_var": 6,
                    "temp_var1": 2,
                    "temp_var2": 2,
                    "total_size": 1,
                    "var1": 3,
                    "var2": 3
                },
                "iVar5": {
                    "i_var": 1,
                    "int_var5": 1,
                    "integer_var5": 1,
                    "integer_var_5": 1,
                    "remaining_size": 1,
                    "size": 1,
                    "size_temp": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp_index": 1,
                    "temp_int2": 1,
                    "temp_offset": 1,
                    "temp_value2": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_var3": 2,
                    "temp_var4": 3,
                    "temp_var5": 1,
                    "temp_var_2": 1,
                    "var4": 3,
                    "var5": 3
                },
                "iVar7": {
                    "int_var7": 1,
                    "integer_var7": 1,
                    "integer_var_7": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_int3": 1,
                    "temp_value": 1,
                    "temp_var": 4,
                    "temp_var2": 4,
                    "temp_var3": 2,
                    "temp_var4": 2,
                    "temp_var5": 2,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var_3": 1,
                    "var5": 2,
                    "var6": 1,
                    "var7": 2
                },
                "param_1": {
                    "array_ptr": 1,
                    "buffer": 1,
                    "data_buffer": 9,
                    "data_ptr": 1,
                    "input_array": 14,
                    "input_buffer": 1,
                    "input_data": 3,
                    "output_buffer": 1
                },
                "param_2": {
                    "control_block": 1,
                    "control_data": 1,
                    "data": 1,
                    "data_array": 1,
                    "decoded_data": 1,
                    "header": 2,
                    "header_buffer": 1,
                    "header_info": 1,
                    "info_buffer": 1,
                    "info_ptr": 1,
                    "input_buffer": 1,
                    "input_params": 1,
                    "metadata": 1,
                    "metadata_buffer": 1,
                    "metadata_ptr": 1,
                    "output_array": 12,
                    "output_buffer": 1,
                    "output_data": 2
                },
                "pcVar6": {
                    "callback": 1,
                    "callback_func": 2,
                    "callback_function": 4,
                    "code_function": 1,
                    "decompress_fn": 1,
                    "func_ptr": 1,
                    "function_pointer": 7,
                    "function_pointer_var": 1,
                    "function_ptr": 10,
                    "function_var_6": 1,
                    "process_func": 1
                },
                "piVar1": {
                    "dynamic_buffer": 1,
                    "p_data": 1,
                    "pointer_var1": 3,
                    "pointer_var_1": 1,
                    "ptr": 2,
                    "ptr1": 6,
                    "ptr_var1": 2,
                    "temp_pointer": 4,
                    "temp_ptr": 8,
                    "temp_var": 1,
                    "temp_var1": 1
                },
                "uVar3": {
                    "flag": 3,
                    "flags": 8,
                    "header_flags": 1,
                    "header_value": 1,
                    "metadata_flag": 1,
                    "temp_short": 1,
                    "temp_uint1": 1,
                    "temp_value": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "ushort_var": 1,
                    "ushort_var3": 2,
                    "ushort_var_3": 1,
                    "var2": 3,
                    "var3": 2
                },
                "uVar4": {
                    "flag_and_size": 1,
                    "flags2": 1,
                    "flags_temp": 1,
                    "header_flag": 1,
                    "temp": 3,
                    "temp_flag": 2,
                    "temp_flags": 1,
                    "temp_uint": 1,
                    "temp_uint2": 1,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_variable": 1,
                    "uint_var": 1,
                    "uint_var4": 2,
                    "uint_var_4": 1,
                    "var3": 3,
                    "var4": 2
                },
                "unaff_r4": {
                    "result": 9,
                    "return_value": 6,
                    "status": 2,
                    "temp_uint3": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "unaff_r4": 1,
                    "unaff_r4_var": 1,
                    "unaff_reg4": 1,
                    "unaff_var": 1,
                    "unaff_var4": 1,
                    "unaffected_var_4": 1,
                    "unused": 1,
                    "var5": 1
                }
            },
            "called": [
                "FUN_00083d9c",
                "FUN_00083b14"
            ],
            "calling": [
                "FUN_00083f34",
                "FUN_0008378c",
                "FUN_000846a4",
                "FUN_000844c4"
            ],
            "code": "\nundefined4 decode_and_process_data_00083adc(int *input_array,int *output_array)\n\n{\n  int *temp_ptr;\n  int temp_var;\n  ushort flags;\n  uint temp_var3;\n  int temp_var4;\n  code *function_ptr;\n  undefined4 result;\n  int temp_var;\n  \n  if ((input_array != (int *)0x0) && (input_array[0xe] == 0)) {\n    __sinit();\n  }\n  if (*(short *)(output_array + 3) == 0) {\n    return 0;\n  }\n  flags = *(ushort *)(output_array + 3);\n  if ((int)((uint)flags << 0x1c) < 0) {\n    temp_var = output_array[4];\n    if (temp_var == 0) {\n      return 0;\n    }\n    temp_var = *output_array;\n    if ((flags & 3) == 0) {\n      temp_var4 = output_array[5];\n    }\n    else {\n      temp_var4 = 0;\n    }\n    *output_array = temp_var;\n    temp_var = temp_var - temp_var;\n    output_array[2] = temp_var4;\n    do {\n      if (temp_var < 1) {\n        return 0;\n      }\n      temp_var4 = (*(code *)output_array[9])(input_array,output_array[7],temp_var,temp_var,result);\n      temp_var = temp_var - temp_var4;\n      temp_var = temp_var + temp_var4;\n    } while (0 < temp_var4);\nLAB_00083a54:\n    *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n    return 0xffffffff;\n  }\n  *(ushort *)(output_array + 3) = flags | 0x800;\n  if ((output_array[1] < 1) && (output_array[0xf] < 1)) {\n    return 0;\n  }\n  function_ptr = (code *)output_array[10];\n  if (function_ptr == (code *)0x0) {\n    return 0;\n  }\n  temp_var3 = (uint)(flags | 0x800);\n  temp_var = *input_array;\n  *input_array = 0;\n  if ((flags & 0x1000) == 0) {\n    temp_var = (*function_ptr)(input_array,output_array[7],temp_var3 & 0x1000,1);\n    if ((temp_var == -1) && (temp_var4 = *input_array, temp_var4 != 0)) {\n      if ((temp_var4 == 0x1d) || (temp_var4 == 0x16)) {\n        *input_array = temp_var;\n        return 0;\n      }\n      goto LAB_00083a54;\n    }\n    temp_var3 = (uint)*(ushort *)(output_array + 3);\n    function_ptr = (code *)output_array[10];\n  }\n  else {\n    temp_var = output_array[0x14];\n  }\n  if (((int)(temp_var3 << 0x1d) < 0) && (temp_var = temp_var - output_array[1], output_array[0xc] != 0)) {\n    temp_var = temp_var - output_array[0xf];\n  }\n  temp_var = (*function_ptr)(input_array,output_array[7],temp_var,0);\n  if (temp_var == -1) {\n    temp_var4 = *input_array;\n    if (temp_var4 != 0) {\n      if ((temp_var4 != 0x1d) && (temp_var4 != 0x16)) {\n        *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) | 0x40;\n        return 0xffffffff;\n      }\n      *(ushort *)(output_array + 3) = *(ushort *)(output_array + 3) & 0xf7ff;\n      *output_array = output_array[4];\n      output_array[1] = 0;\n      goto LAB_00083a00;\n    }\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    output_array[1] = 0;\n    *(ushort *)(output_array + 3) = flags;\n    *output_array = output_array[4];\n  }\n  else {\n    flags = *(ushort *)(output_array + 3) & 0xf7ff;\n    *output_array = output_array[4];\n    *(ushort *)(output_array + 3) = flags;\n    output_array[1] = 0;\n  }\n  if ((int)((uint)flags << 0x13) < 0) {\n    output_array[0x14] = temp_var;\n  }\nLAB_00083a00:\n  temp_ptr = (int *)output_array[0xc];\n  *input_array = temp_var;\n  if (temp_ptr == (int *)0x0) {\n    return 0;\n  }\n  if (temp_ptr != output_array + 0x10) {\n    _free_r(input_array);\n  }\n  output_array[0xc] = 0;\n  return 0;\n}\n\n",
            "current_name": "decode_and_process_data_00083adc",
            "entrypoint": "0x00083adc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083adc": "decode_and_process_data_00083adc",
                "iVar2": "temp_var",
                "iVar5": "temp_var4",
                "iVar7": "temp_var",
                "param_1": "input_array",
                "param_2": "output_array",
                "pcVar6": "function_ptr",
                "piVar1": "temp_ptr",
                "uVar3": "flags",
                "uVar4": "temp_var3",
                "unaff_r4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083b14": {
            "additional_data": {
                "FUN_00083b14": {
                    "initialize_data": 1,
                    "initialize_data_structure": 2,
                    "initialize_data_structures": 24,
                    "initialize_function": 2,
                    "initialize_objects": 1,
                    "initialize_parameters": 1
                },
                "param_1": {
                    "base_address": 2,
                    "data": 2,
                    "data_struct": 2,
                    "data_struct_pointer": 1,
                    "data_struct_ptr": 4,
                    "data_structure": 3,
                    "data_structure_address": 3,
                    "data_structure_pointer": 1,
                    "data_structure_ptr": 3,
                    "data_structures": 2,
                    "data_structures_address": 1,
                    "data_structures_parameter": 1,
                    "function_parameter": 3,
                    "object_address": 1,
                    "param": 2
                },
                "puVar1": {
                    "data_block1": 1,
                    "data_pointer1": 1,
                    "data_struct_ptr1": 1,
                    "data_structure_1": 1,
                    "data_structure_ptr1": 1,
                    "data_structures1": 1,
                    "first_array": 1,
                    "first_data_structure": 1,
                    "first_struct_ptr": 1,
                    "local_var1": 1,
                    "obj1": 1,
                    "param1": 1,
                    "pointer1": 8,
                    "ptr1": 4,
                    "struct1": 1,
                    "struct_ptr1": 2,
                    "structure_pointer1": 1,
                    "temp_ptr1": 1,
                    "var1": 1,
                    "variable1": 1
                },
                "puVar2": {
                    "data_block2": 1,
                    "data_pointer2": 1,
                    "data_struct_ptr2": 1,
                    "data_structure_2": 1,
                    "data_structure_ptr2": 1,
                    "data_structures2": 1,
                    "local_var2": 1,
                    "obj2": 1,
                    "param2": 1,
                    "pointer2": 8,
                    "ptr2": 4,
                    "second_array": 1,
                    "second_data_structure": 1,
                    "second_struct_ptr": 1,
                    "struct2": 1,
                    "struct_ptr2": 2,
                    "structure_pointer2": 1,
                    "temp_ptr2": 1,
                    "var2": 1,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_00082504"
            ],
            "calling": [
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_000844c4",
                "FUN_00082b38",
                "FUN_00083808"
            ],
            "code": "\nvoid initialize_data_structures_00083b14(int data_struct_ptr)\n\n{\n  undefined4 *pointer1;\n  undefined4 *pointer2;\n  \n  if (*(int *)(data_struct_ptr + 0x38) == 0) {\n    pointer1 = *(undefined4 **)(data_struct_ptr + 4);\n    *(undefined **)(data_struct_ptr + 0x3c) = &LAB_00083b08_1;\n    *(undefined4 *)(data_struct_ptr + 0x2e4) = 3;\n    *(int *)(data_struct_ptr + 0x2e8) = data_struct_ptr + 0x2ec;\n    *(undefined4 *)(data_struct_ptr + 0x2e0) = 0;\n    *(undefined2 *)(pointer1 + 3) = 4;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    *(undefined2 *)((int)pointer1 + 0xe) = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    memset(pointer1 + 0x17,0,8);\n    pointer2 = *(undefined4 **)(data_struct_ptr + 8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)((int)pointer2 + 0xe) = 1;\n    *(undefined2 *)(pointer2 + 3) = 9;\n    *pointer2 = 0;\n    pointer2[1] = 0;\n    pointer2[2] = 0;\n    pointer2[0x19] = 0;\n    pointer2[4] = 0;\n    pointer2[5] = 0;\n    pointer2[6] = 0;\n    memset(pointer2 + 0x17,0,8);\n    pointer1 = *(undefined4 **)(data_struct_ptr + 0xc);\n    pointer2[7] = pointer2;\n    pointer2[8] = &LAB_00084440_1;\n    pointer2[9] = 0x84465;\n    pointer2[10] = 0x8449d;\n    pointer2[0xb] = &LAB_000844bc_1;\n    *(undefined2 *)(pointer1 + 3) = 0x12;\n    *(undefined2 *)((int)pointer1 + 0xe) = 2;\n    *pointer1 = 0;\n    pointer1[1] = 0;\n    pointer1[2] = 0;\n    pointer1[0x19] = 0;\n    pointer1[4] = 0;\n    pointer1[5] = 0;\n    pointer1[6] = 0;\n    memset(pointer1 + 0x17,0,8);\n    pointer1[7] = pointer1;\n    pointer1[8] = &LAB_00084440_1;\n    pointer1[9] = 0x84465;\n    pointer1[10] = 0x8449d;\n    pointer1[0xb] = &LAB_000844bc_1;\n    *(undefined4 *)(data_struct_ptr + 0x38) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_00083b14",
            "entrypoint": "0x00083b14",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083b14": "initialize_data_structures_00083b14",
                "param_1": "data_struct_ptr",
                "puVar1": "pointer1",
                "puVar2": "pointer2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083c08": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c08(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c08",
            "entrypoint": "0x00083c08",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c08": "FUNC_00083c08"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c0c": {
            "called": [],
            "calling": [
                "FUN_000846a4"
            ],
            "code": "\nvoid FUNC_00083c0c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00083c0c",
            "entrypoint": "0x00083c0c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00083c0c": "FUNC_00083c0c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_00083c40": {
            "additional_data": {
                "FUN_00083c40": {
                    "convert_and_print": 2,
                    "convert_and_print_data": 1,
                    "convert_and_print_string": 8,
                    "convert_and_write_character": 1,
                    "convert_and_write_chars": 1,
                    "convert_and_write_to_buffer": 1,
                    "convert_and_write_to_stream": 3,
                    "convert_char_to_multi_byte": 1,
                    "convert_character": 1,
                    "convert_character_to_byte": 1,
                    "convert_string_to_bytes": 1,
                    "convert_to_multibyte": 1,
                    "convert_to_utf8": 1,
                    "convert_unicode_to_multi_byte": 1,
                    "encode_string": 1,
                    "print_character": 1,
                    "print_unicode_string": 1,
                    "write_string": 1,
                    "write_to_stream": 2
                },
                "FUN_00084298": {
                    "get_max_bytes": 1
                },
                "FUN_000844c4": {
                    "convert_character_to_stream": 1
                },
                "FUN_0008456c": {
                    "flush_buffer_to_stream": 1
                },
                "__locale_mb_cur_max": {
                    "get_max_bytes": 1,
                    "get_max_bytes_from_locale": 1
                },
                "__swbuf_r": {
                    "flush_buffer": 1,
                    "write_char_to_buffer": 1
                },
                "_wcrtomb_r": {
                    "convert_character": 1,
                    "convert_wide_char_to_multi_byte": 1
                },
                "abStack_1b": {
                    "additional_buffer": 1,
                    "additional_bytes": 3,
                    "buffer": 1,
                    "byte_array": 2,
                    "byte_buffer": 1,
                    "bytes": 1,
                    "bytes_buffered": 1,
                    "bytes_conversion_buffer": 1,
                    "conversion_buffer": 8,
                    "conversion_stack": 1,
                    "mb_cur_max": 1,
                    "multi_char_buffer": 1,
                    "special_chars": 1,
                    "stack_buffer": 4,
                    "temp_array": 2,
                    "temp_bytes": 1,
                    "temp_char_array": 1
                },
                "iVar1": {
                    "locale_max": 1,
                    "max": 1,
                    "max_byte_count": 1,
                    "max_byte_length": 1,
                    "max_byte_size": 1,
                    "max_bytes": 20,
                    "max_bytes_per_char": 1,
                    "max_char_length": 1,
                    "max_character_count": 1,
                    "max_chars": 1,
                    "mb_cur_max": 2
                },
                "local_1c": {
                    "byte_to_convert": 1,
                    "byte_value": 1,
                    "byte_var": 1,
                    "ch": 1,
                    "char_buffer": 2,
                    "char_to_convert": 1,
                    "character": 1,
                    "converted_byte": 2,
                    "converted_char": 2,
                    "current_byte": 2,
                    "local_byte": 1,
                    "single_byte": 6,
                    "single_byte_char": 1,
                    "single_char": 3,
                    "temp_byte": 2,
                    "temp_char": 4
                },
                "param_1": {
                    "context": 1,
                    "file_stream": 1,
                    "locale": 4,
                    "locale_category": 1,
                    "locale_info": 2,
                    "output_stream": 2,
                    "param": 3,
                    "param1": 5,
                    "param_1": 1,
                    "state": 1,
                    "stream": 10
                },
                "param_2": {
                    "char_count": 1,
                    "char_length": 1,
                    "character": 6,
                    "character_count": 1,
                    "data_length": 1,
                    "input": 1,
                    "input_length": 3,
                    "input_size": 1,
                    "length": 5,
                    "num_chars": 1,
                    "param2": 3,
                    "size": 1,
                    "string_length": 3,
                    "value": 3
                },
                "param_3": {
                    "buffer": 8,
                    "byte_array": 1,
                    "byte_pointer": 1,
                    "data_ptr": 1,
                    "output": 4,
                    "output_buffer": 4,
                    "param3": 3,
                    "stream_buffer": 3,
                    "stream_data": 2,
                    "string": 2,
                    "string_array": 1,
                    "string_pointer": 1
                },
                "pbVar4": {
                    "buffer_pointer": 4,
                    "buffer_ptr": 12,
                    "current_byte": 1,
                    "current_char": 2,
                    "end_of_buffer": 1,
                    "output_pointer": 1,
                    "output_ptr": 4,
                    "pointer": 1,
                    "ptr": 1,
                    "stream_buffer": 1,
                    "stream_byte": 1,
                    "stream_ptr": 1,
                    "string_buffer": 1
                },
                "uVar2": {
                    "bytes_converted": 4,
                    "bytes_written": 7,
                    "conversion_result": 4,
                    "converted_bytes": 3,
                    "result": 13
                },
                "uVar3": {
                    "byte_value": 1,
                    "ch": 1,
                    "converted_byte": 11,
                    "converted_char": 10,
                    "converted_character": 3,
                    "current_byte": 2,
                    "current_character": 1,
                    "unicode_value": 1,
                    "value": 1
                },
                "uVar5": {
                    "byte_counter": 1,
                    "byte_index": 2,
                    "counter": 2,
                    "index": 20,
                    "iteration": 5,
                    "iteration_count": 1
                }
            },
            "called": [
                "FUN_0008456c",
                "FUN_000844c4",
                "FUN_00084298"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nuint convert_and_print_string_00083c40(undefined4 stream,uint character,byte **buffer)\n\n{\n  int max_bytes;\n  uint result;\n  uint converted_byte;\n  byte *buffer_ptr;\n  uint index;\n  byte single_byte;\n  byte conversion_buffer [3];\n  \n  if (-1 < (int)((uint)*(ushort *)(buffer + 3) << 0x12)) {\n    *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x2000;\n    buffer[0x19] = (byte *)((uint)buffer[0x19] | 0x2000);\n  }\n  max_bytes = get_max_bytes();\n  if ((max_bytes == 1) && (character - 1 < 0xff)) {\n    converted_byte = character & 0xff;\n    single_byte = (byte)converted_byte;\n    result = 1;\n  }\n  else {\n    result = convert_wide_char_to_multi_byte(stream,&single_byte,character,buffer + 0x17);\n    if (result == 0xffffffff) {\n      *(ushort *)(buffer + 3) = *(ushort *)(buffer + 3) | 0x40;\n      return 0xffffffff;\n    }\n    if (result == 0) {\n      return character;\n    }\n    converted_byte = (uint)single_byte;\n  }\n  index = 0;\n  do {\n    buffer_ptr = buffer[2] + -1;\n    buffer[2] = buffer_ptr;\n    if ((int)buffer_ptr < 0) {\n      if ((int)buffer[6] <= (int)buffer_ptr) {\n        **buffer = (byte)converted_byte;\n        buffer_ptr = *buffer;\n        converted_byte = (uint)*buffer_ptr;\n        if (converted_byte != 10) goto LAB_00083c90;\n      }\n      max_bytes = flush_buffer(stream,converted_byte,buffer);\n      if (max_bytes == -1) {\n        return 0xffffffff;\n      }\n    }\n    else {\n      **buffer = (byte)converted_byte;\n      buffer_ptr = *buffer;\nLAB_00083c90:\n      *buffer = buffer_ptr + 1;\n    }\n    if (result <= index + 1) {\n      return character;\n    }\n    converted_byte = (uint)conversion_buffer[index];\n    index = index + 1;\n  } while( true );\n}\n\n",
            "current_name": "convert_and_print_string_00083c40",
            "entrypoint": "0x00083c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083c40": "convert_and_print_string_00083c40",
                "__locale_mb_cur_max": "get_max_bytes",
                "__swbuf_r": "flush_buffer",
                "_wcrtomb_r": "convert_wide_char_to_multi_byte",
                "abStack_1b": "conversion_buffer",
                "iVar1": "max_bytes",
                "local_1c": "single_byte",
                "param_1": "stream",
                "param_2": "character",
                "param_3": "buffer",
                "pbVar4": "buffer_ptr",
                "uVar2": "result",
                "uVar3": "converted_byte",
                "uVar5": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d00": {
            "additional_data": {
                "DAT_20071194": {
                    "allocated_memory": 5,
                    "data_size": 1,
                    "data_var": 1,
                    "free_memory": 1,
                    "heap_base": 1,
                    "heap_offset": 1,
                    "mem_offset": 1,
                    "memory_offset": 3,
                    "total_allocated": 1,
                    "total_memory": 4
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_array": 1,
                    "memory_array": 3,
                    "rel_array": 3,
                    "rel_table": 1,
                    "relocation_array": 1
                },
                "FUNC_00082598": {
                    "acquire_lock": 1,
                    "lock_malloc": 1,
                    "malloc_unlock": 1
                },
                "FUNC_0008259c": {
                    "release_lock": 1,
                    "unlock_malloc": 1,
                    "update_allocated_memory": 1
                },
                "FUN_00082598": {
                    "lock_memory": 2
                },
                "FUN_0008259c": {
                    "unlock_memory": 2
                },
                "FUN_00082970": {
                    "adjust_pointer": 1,
                    "initialize": 1,
                    "initialize_array": 1,
                    "initialize_memory": 1,
                    "update_lock_pointer": 1
                },
                "FUN_00083d00": {
                    "allocate_and_lock_memory": 1,
                    "allocate_dynamic_memory": 1,
                    "allocate_memory": 17,
                    "allocate_memory_block": 1,
                    "allocate_memory_region": 1,
                    "improve_alloc": 1,
                    "improve_allocation": 1,
                    "improve_memory_allocation": 2,
                    "improved_allocate_memory": 1,
                    "improved_memory_allocation": 1,
                    "manage_memory": 1,
                    "manage_memory_allocation": 1,
                    "reallocate_memory": 1
                },
                "__malloc_lock": {
                    "lock_malloc": 1,
                    "lock_memory": 3,
                    "malloc_lock": 1
                },
                "__malloc_unlock": {
                    "malloc_unlock": 1,
                    "unlock_malloc": 1,
                    "unlock_memory": 3
                },
                "_sbrk_r": {
                    "allocate_memory": 2,
                    "get_brk_info": 1,
                    "increase_heap_size": 1,
                    "increase_memory_heap": 1,
                    "increment_break": 1,
                    "increment_brk": 1,
                    "request_memory": 1,
                    "sbrk": 2,
                    "sbrk_r": 3,
                    "sbrk_reserve": 1,
                    "sbrk_result": 1,
                    "sbrk_safe": 1
                },
                "dword": {
                    "pointer": 1,
                    "uint": 2,
                    "word": 1
                },
                "iVar1": {
                    "addr1": 1,
                    "alloc_result": 1,
                    "allocation_result": 4,
                    "brk_result": 4,
                    "brk_value": 1,
                    "current_address": 1,
                    "current_break": 1,
                    "current_memory": 1,
                    "malloc_result": 1,
                    "modified_var3": 1,
                    "result": 10,
                    "result1": 1,
                    "sbrk_result": 3,
                    "sbrk_result1": 1
                },
                "iVar3": {
                    "adjusted_base": 1,
                    "adjusted_size": 9,
                    "adjusted_value": 1,
                    "adjustment_size": 1,
                    "alignment": 1,
                    "allocated_memory": 1,
                    "allocated_page": 1,
                    "allocation_size": 1,
                    "brk_offset": 1,
                    "info_2": 1,
                    "modified_var2": 1,
                    "new_allocation": 1,
                    "new_allocation_size": 1,
                    "new_block_addr": 1,
                    "new_break": 1,
                    "new_brk_value": 1,
                    "new_size": 1,
                    "offset": 3,
                    "required_size": 2,
                    "result2": 1
                },
                "param_1": {
                    "heap_lock": 1,
                    "lock": 7,
                    "lock_flag": 1,
                    "lock_param": 2,
                    "lock_pointer": 1,
                    "lock_ptr": 1,
                    "mem_lock": 2,
                    "memory_lock": 1,
                    "mutex": 1,
                    "param": 6,
                    "param1": 1,
                    "param1_size": 1,
                    "param_1": 3,
                    "param_ptr": 1,
                    "size": 2
                },
                "param_2": {
                    "alignment": 1,
                    "current_size": 1,
                    "desired_size": 5,
                    "memory_size": 1,
                    "offset": 1,
                    "param2": 1,
                    "param_2": 3,
                    "requested_size": 3,
                    "size": 15
                },
                "uVar2": {
                    "alignment_offset": 1,
                    "info": 2,
                    "info_1": 1,
                    "info_offset": 1,
                    "info_value": 1,
                    "mask": 1,
                    "masked_value": 2,
                    "modified_var1": 1,
                    "offset": 3,
                    "r_info_value": 1,
                    "rel_array_value": 1,
                    "rel_info": 14,
                    "rel_info_value": 1,
                    "unaligned_base": 1
                }
            },
            "called": [
                "FUN_00082970",
                "FUN_00082598",
                "FUN_0008259c"
            ],
            "calling": [
                "FUN_00083d9c"
            ],
            "code": "\nundefined4 allocate_memory_region_00083d00(undefined4 lock,int size)\n\n{\n  int result;\n  uint rel_info;\n  int adjusted_size;\n  \n  lock_memory();\n  rel_info = *(uint *)(rel_array[141].r_info + 4) & 0xfffffffc;\n  adjusted_size = ((rel_info - size) + 0xfef & 0xfffff000) - 0x1000;\n  if (0xfff < adjusted_size) {\n    result = sbrk_r(lock,0);\n    if (result == rel_array[141].r_info + rel_info) {\n      result = sbrk_r(lock,-adjusted_size);\n      if (result != -1) {\n        DAT_20071194 = DAT_20071194 - adjusted_size;\n        *(uint *)(rel_array[141].r_info + 4) = rel_info - adjusted_size | 1;\n        unlock_memory(lock);\n        return 1;\n      }\n      adjusted_size = sbrk_r(lock,0);\n      if (0xf < (int)(adjusted_size - rel_array[141].r_info)) {\n        DAT_20071194 = adjusted_size - rel_array[270].r_offset;\n        *(uint *)(rel_array[141].r_info + 4) =\n             adjusted_size - rel_array[141].r_info | 1;\n      }\n    }\n  }\n  unlock_memory(lock);\n  return 0;\n}\n\n",
            "current_name": "allocate_memory_region_00083d00",
            "entrypoint": "0x00083d00",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083d00": "allocate_memory_region_00083d00",
                "__malloc_lock": "lock_memory",
                "__malloc_unlock": "unlock_memory",
                "_sbrk_r": "sbrk_r",
                "dword": "uint",
                "iVar1": "result",
                "iVar3": "adjusted_size",
                "param_1": "lock",
                "param_2": "size",
                "uVar2": "rel_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083d9c": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "rel_array": 2
                },
                "FUNC_00082598": {
                    "function_one": 1,
                    "lock_memory": 1
                },
                "FUNC_0008259c": {
                    "function_two": 1,
                    "unlock_memory": 1
                },
                "FUN_00083d00": {
                    "function_three": 1,
                    "trim_memory": 1
                },
                "FUN_00083d9c": {
                    "decompress_binary": 1,
                    "process_binary_data": 1,
                    "process_relocation": 2,
                    "rearrange_data_blocks": 1,
                    "rearrange_pointers": 1
                },
                "bVar2": {
                    "bool_var2": 1,
                    "boolean_variable": 1,
                    "check": 1,
                    "flag": 6,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_flag_set": 1,
                    "is_match": 3,
                    "is_offset_1_2007046c": 1,
                    "is_special": 1,
                    "is_special_case": 6,
                    "is_temp_var2_true": 1,
                    "is_true": 3,
                    "is_zero": 1,
                    "temp_var2": 1,
                    "var_bool": 1
                },
                "dVar4": {
                    "address1": 2,
                    "base_address": 1,
                    "block_info": 1,
                    "curr_info": 1,
                    "current_entry": 1,
                    "current_info": 1,
                    "current_rel_info": 1,
                    "data1": 1,
                    "data_var": 2,
                    "dword_var": 1,
                    "entry": 1,
                    "offset": 1,
                    "offset1": 1,
                    "ptr": 1,
                    "temp1": 2,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_var4": 2,
                    "temp_variable_2": 1,
                    "value2": 1,
                    "var2": 2,
                    "var_info": 1,
                    "variable3": 2
                },
                "dVar7": {
                    "address2": 2,
                    "adjusted_rel_info": 1,
                    "base_address": 1,
                    "curr_reloc": 1,
                    "current_address": 1,
                    "current_entry": 1,
                    "data2": 1,
                    "data_var2": 1,
                    "dword_var2": 1,
                    "new_info": 1,
                    "offset2": 1,
                    "prev": 1,
                    "prev_block_info": 1,
                    "previous_entry": 1,
                    "shifted_address": 1,
                    "temp2": 2,
                    "temp_var4": 2,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "temp_variable_4": 1,
                    "value4": 1,
                    "var4": 2,
                    "var_address": 1,
                    "variable6": 2
                },
                "dVar9": {
                    "address3": 2,
                    "adjusted_data": 1,
                    "data3": 1,
                    "data_var3": 1,
                    "dword_var3": 1,
                    "new_entry": 1,
                    "new_offset": 1,
                    "new_prev": 1,
                    "new_previous_entry": 1,
                    "new_rel_info": 1,
                    "new_reloc": 1,
                    "new_value": 1,
                    "next_block_info": 1,
                    "next_info": 1,
                    "offset3": 1,
                    "temp3": 2,
                    "temp_var6": 2,
                    "temp_var8": 1,
                    "temp_var9": 2,
                    "temp_variable_6": 1,
                    "value6": 1,
                    "var6": 2,
                    "var_temp": 1,
                    "variable8": 2
                },
                "iVar1": {
                    "first_var": 1,
                    "index": 3,
                    "index1": 6,
                    "index_var": 1,
                    "index_variable_1": 1,
                    "int_var1": 1,
                    "iterator1": 2,
                    "offset": 2,
                    "offset_1": 1,
                    "temp1": 1,
                    "temp_var1": 6,
                    "value1": 1,
                    "var1": 1,
                    "var_offset1": 1,
                    "variable1": 2
                },
                "iVar5": {
                    "index2": 6,
                    "index_variable_2": 1,
                    "int_var2": 1,
                    "iterator2": 2,
                    "next_entry": 1,
                    "offset_2": 1,
                    "prev_offset": 1,
                    "second_var": 1,
                    "temp2": 1,
                    "temp_index": 2,
                    "temp_var1": 1,
                    "temp_var2": 3,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "value1": 1,
                    "value2": 1,
                    "var2": 1,
                    "var_offset2": 1,
                    "variable4": 2
                },
                "param_1": {
                    "arg1": 4,
                    "lock": 7,
                    "lock_param": 2,
                    "lock_status": 1,
                    "param": 2,
                    "param1": 12,
                    "param_": 1,
                    "param_1": 1,
                    "parameter_1": 1
                },
                "param_2": {
                    "address": 1,
                    "arg2": 3,
                    "binary": 1,
                    "data": 1,
                    "data_blocks": 1,
                    "data_param": 2,
                    "input": 1,
                    "input_param": 1,
                    "memory_address": 1,
                    "param2": 12,
                    "param_2": 2,
                    "parameter_2": 1,
                    "pointer": 1,
                    "ptr": 1,
                    "relocation_table": 1,
                    "size": 1
                },
                "uVar3": {
                    "bitwise_var": 1,
                    "first_block_info": 1,
                    "flag": 1,
                    "flag1": 1,
                    "flags": 2,
                    "info": 1,
                    "mask": 2,
                    "offset": 1,
                    "shifted_val": 1,
                    "size": 1,
                    "size_and_flag": 1,
                    "size_var": 1,
                    "temp_var1": 2,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_variable_1": 1,
                    "uint_var": 1,
                    "value1": 4,
                    "var1": 2,
                    "var_mask": 1,
                    "variable2": 2
                },
                "uVar6": {
                    "adjusted_val": 1,
                    "bitwise_var2": 1,
                    "block_size": 1,
                    "entry_size": 1,
                    "flag2": 1,
                    "info_mask": 1,
                    "length": 3,
                    "offset": 2,
                    "shifted_size": 1,
                    "size": 1,
                    "temp_var3": 2,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "temp_variable_3": 1,
                    "total_size": 1,
                    "uint_var2": 1,
                    "value2": 3,
                    "value3": 1,
                    "var3": 2,
                    "var_increment": 1,
                    "variable5": 2
                },
                "uVar8": {
                    "adjusted_size": 2,
                    "allocated_size": 1,
                    "bitwise_var3": 1,
                    "current_offset": 1,
                    "flag3": 1,
                    "new_entry_size": 1,
                    "new_length": 1,
                    "new_offset": 2,
                    "new_size": 2,
                    "size": 1,
                    "temp_var5": 2,
                    "temp_var7": 1,
                    "temp_var8": 2,
                    "temp_variable_5": 1,
                    "uint_var3": 1,
                    "value2": 1,
                    "value3": 3,
                    "value5": 1,
                    "var5": 2,
                    "var_result": 1,
                    "variable7": 2
                }
            },
            "called": [
                "FUN_00082598",
                "FUN_0008259c",
                "FUN_00083d00"
            ],
            "calling": [
                "FUN_00081e04",
                "FUN_00083f34",
                "FUN_000825b0",
                "FUN_000846a4",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00081e14"
            ],
            "code": "\nvoid process_relocation_00083d9c(undefined4 param1,int param2)\n\n{\n  int temp_var1;\n  bool flag;\n  uint value1;\n  dword temp_var4;\n  int index2;\n  uint value2;\n  dword temp_var4;\n  uint value3;\n  dword temp_var6;\n  \n  if (param2 == 0) {\n    return;\n  }\n  __malloc_lock();\n  value1 = *(uint *)(param2 + -4);\n  temp_var4 = param2 - 8;\n  value2 = value1 & 0xfffffffe;\n  temp_var4 = temp_var4 + value2;\n  value3 = *(uint *)(temp_var4 + 4) & 0xfffffffc;\n  if (rel_array[141].r_info == temp_var4) {\n    value3 = value3 + value2;\n    if (-1 < (int)(value1 << 0x1f)) {\n      temp_var4 = temp_var4 - *(int *)(param2 + -8);\n      index2 = *(int *)(temp_var4 + 0xc);\n      temp_var1 = *(int *)(temp_var4 + 8);\n      value3 = value3 + *(int *)(param2 + -8);\n      *(int *)(temp_var1 + 0xc) = index2;\n      *(int *)(index2 + 8) = temp_var1;\n    }\n    temp_var4 = rel_array[269].r_info;\n    *(uint *)(temp_var4 + 4) = value3 | 1;\n    rel_array[141].r_info = temp_var4;\n    if (temp_var4 <= value3) {\n      _malloc_trim_r(param1,DAT_20071190);\n    }\n  }\n  else {\n    *(uint *)(temp_var4 + 4) = value3;\n    if ((value1 & 1) == 0) {\n      temp_var4 = temp_var4 - *(int *)(param2 + -8);\n      temp_var1 = *(int *)(temp_var4 + 8);\n      value2 = value2 + *(int *)(param2 + -8);\n      if (temp_var1 == 0x2007046c) {\n        flag = true;\n      }\n      else {\n        index2 = *(int *)(temp_var4 + 0xc);\n        *(int *)(temp_var1 + 0xc) = index2;\n        *(int *)(index2 + 8) = temp_var1;\n        flag = false;\n      }\n    }\n    else {\n      flag = false;\n    }\n    if (-1 < *(int *)(temp_var4 + value3 + 4) << 0x1f) {\n      value2 = value2 + value3;\n      temp_var1 = *(int *)(temp_var4 + 8);\n      if ((!flag) && (temp_var1 == 0x2007046c)) {\n        rel_array[142].r_info = temp_var4;\n        rel_array[143].r_offset = temp_var4;\n        *(undefined4 *)(temp_var4 + 0xc) = 0x2007046c;\n        *(undefined4 *)(temp_var4 + 8) = 0x2007046c;\n        *(uint *)(temp_var4 + 4) = value2 | 1;\n        *(uint *)(temp_var4 + value2) = value2;\n        goto LAB_00083e30;\n      }\n      index2 = *(int *)(temp_var4 + 0xc);\n      *(int *)(temp_var1 + 0xc) = index2;\n      *(int *)(index2 + 8) = temp_var1;\n    }\n    *(uint *)(temp_var4 + 4) = value2 | 1;\n    *(uint *)(temp_var4 + value2) = value2;\n    if (!flag) {\n      if (value2 < 0x200) {\n        value1 = value2 & 0xfffffff8;\n        temp_var1 = *(int *)((int)&rel_array[0x8d].r_info + value1);\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << ((int)(value2 >> 3) >> 2 & 0xffU);\n        *(int *)(temp_var4 + 8) = temp_var1;\n        *(uint *)(temp_var4 + 0xc) = value1 + 0x20070464;\n        *(dword *)((int)&rel_array[0x8d].r_info + value1) = temp_var4;\n        *(dword *)(temp_var1 + 0xc) = temp_var4;\n        __malloc_unlock(param1);\n        return;\n      }\n      value1 = value2 >> 9;\n      if (value1 < 5) {\n        temp_var1 = (value2 >> 6) + 0x38;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x15) {\n        temp_var1 = value1 + 0x5b;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x55) {\n        temp_var1 = (value2 >> 0xc) + 0x6e;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x155) {\n        temp_var1 = (value2 >> 0xf) + 0x77;\n        index2 = temp_var1 * 2;\n      }\n      else if (value1 < 0x555) {\n        temp_var1 = (value2 >> 0x12) + 0x7c;\n        index2 = temp_var1 * 2;\n      }\n      else {\n        index2 = 0xfc;\n        temp_var1 = 0x7e;\n      }\n      temp_var6 = index2 * 4 + 0x20070464;\n      temp_var4 = (&rel_array[0x8d].r_info)[index2];\n      if (temp_var4 == temp_var6) {\n        rel_array[141].r_offset =\n             rel_array[141].r_offset | 1 << (temp_var1 >> 2 & 0xffU);\n        temp_var6 = temp_var4;\n      }\n      else {\n        do {\n          if ((*(uint *)(temp_var4 + 4) & 0xfffffffc) <= value2) break;\n          temp_var4 = *(dword *)(temp_var4 + 8);\n        } while (temp_var6 != temp_var4);\n        temp_var6 = *(dword *)(temp_var4 + 0xc);\n      }\n      *(dword *)(temp_var4 + 0xc) = temp_var6;\n      *(dword *)(temp_var4 + 8) = temp_var4;\n      *(dword *)(temp_var6 + 8) = temp_var4;\n      *(dword *)(temp_var4 + 0xc) = temp_var4;\n    }\n  }\nLAB_00083e30:\n  __malloc_unlock(param1);\n  return;\n}\n\n",
            "current_name": "process_relocation_00083d9c",
            "entrypoint": "0x00083d9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00083d9c": "process_relocation_00083d9c",
                "bVar2": "flag",
                "dVar4": "temp_var4",
                "dVar7": "temp_var4",
                "dVar9": "temp_var6",
                "iVar1": "temp_var1",
                "iVar5": "index2",
                "param_1": "param1",
                "param_2": "param2",
                "uVar3": "value1",
                "uVar6": "value2",
                "uVar8": "value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00083f34": {
            "additional_data": {
                "FUN_00083f34": {
                    "process_data": 8,
                    "process_function": 1
                },
                "__swsetup_r": {
                    "function1": 1,
                    "setup_function": 2,
                    "setup_helper": 1,
                    "setup_r": 2,
                    "setup_swapping_r": 1,
                    "setup_variables": 1,
                    "string_width_setup": 1
                },
                "_fflush_r": {
                    "clear_output_buffer": 1,
                    "fflush_function": 2,
                    "flush_buffer": 3,
                    "flush_buffer_r": 1,
                    "flush_data": 1,
                    "flush_function": 1,
                    "flush_output_buffer": 1,
                    "flush_r": 2,
                    "function5": 1
                },
                "_free_r": {
                    "free_function": 3,
                    "free_memory": 6,
                    "free_memory_r": 3,
                    "function4": 1
                },
                "_malloc_r": {
                    "allocate_memory": 6,
                    "allocate_memory_r": 3,
                    "function2": 1,
                    "malloc_function": 3
                },
                "_realloc_r": {
                    "function3": 1,
                    "realloc_function": 3,
                    "realloc_memory_r": 1,
                    "reallocate_memory": 4,
                    "reallocate_memory_r": 2,
                    "resize_memory": 2
                },
                "_strlen_r": {
                    "get_string_length": 1
                },
                "_swsetup_r": {
                    "setup_function": 1
                },
                "allocateMemoryR": {
                    "original_allocate_memory_r": 1
                },
                "buffer": {
                    "buffer_data": 1
                },
                "copyMemory": {
                    "original_copy_memory": 1
                },
                "findFirstOccurrence": {
                    "original_find_first_occurrence": 1
                },
                "flag_var2": {
                    "flag_var2": 1
                },
                "flushR": {
                    "original_flush_r": 1
                },
                "freeMemoryR": {
                    "original_free_memory_r": 1
                },
                "iVar1": {
                    "error_code": 1,
                    "index": 3,
                    "result": 16,
                    "return_value": 5,
                    "status": 3,
                    "swsetup_result": 3
                },
                "input_data": {
                    "ptr_to_input_data": 1
                },
                "local_2c": {
                    "local_flag": 1,
                    "local_temp_var": 1,
                    "local_value": 2,
                    "local_var": 9,
                    "local_var1": 7,
                    "local_variable": 5,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_value": 1,
                    "temp_var9": 1,
                    "var6": 1
                },
                "memchr": {
                    "chr_function": 1,
                    "find_char": 2,
                    "find_character": 2,
                    "find_character_in_memory": 1,
                    "find_first_occurrence": 2,
                    "function8": 1,
                    "search_character": 1,
                    "search_function": 1,
                    "search_memory": 1
                },
                "memcpy": {
                    "copy_function": 2,
                    "copy_memory": 9,
                    "copy_memory_function": 1,
                    "function6": 1
                },
                "memcpyWAlign": {
                    "copy_memory_with_alignment": 1
                },
                "memmove": {
                    "function7": 1,
                    "move_function": 2,
                    "move_memory": 9,
                    "move_memory_function": 1
                },
                "memset": {
                    "clear_memory": 1
                },
                "moveMemory": {
                    "original_move_memory": 1
                },
                "param_1": {
                    "array_pointer": 1,
                    "buffer": 1,
                    "data_ptr": 1,
                    "error_code": 4,
                    "error_code_ptr": 1,
                    "error_status": 1,
                    "input_array": 3,
                    "input_data": 2,
                    "output": 3,
                    "output_status": 1,
                    "param1": 4,
                    "param_array": 4,
                    "param_pointer": 1,
                    "parameter_array": 1,
                    "pointer_array": 1,
                    "ptr_to_result": 1,
                    "return_value": 1
                },
                "param_2": {
                    "buffer": 2,
                    "data": 3,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "input": 2,
                    "input_array": 1,
                    "input_buffer": 2,
                    "input_data": 2,
                    "input_pointer": 1,
                    "input_value": 1,
                    "length_array": 1,
                    "length_ptr": 1,
                    "param2": 4,
                    "param_pointer": 1,
                    "ptr_to_input": 1,
                    "uint_array": 5,
                    "uint_pointer": 1,
                    "value_pointer": 1
                },
                "param_3": {
                    "array_of_pointers": 1,
                    "array_ptr": 1,
                    "buffer": 2,
                    "buffer_data": 1,
                    "extra_data": 1,
                    "output_array": 2,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_pointer": 2,
                    "param3": 4,
                    "param3_array": 1,
                    "param_array_ptr": 1,
                    "param_pointer_array": 1,
                    "params": 2,
                    "pointer_array": 1,
                    "pointer_array_ptr": 1,
                    "pointer_to_pointer_array": 1,
                    "pointers": 1,
                    "ptr_array": 2,
                    "ptr_to_buffer": 1,
                    "ptr_to_ptr": 1,
                    "ptr_to_uint_pointer": 1,
                    "ptr_uint_array": 1
                },
                "ptr_to_buffer": {
                    "ptr_to_buffer_data": 1
                },
                "puVar6": {
                    "pointer1": 6,
                    "pointer_val1": 1,
                    "pointer_var1": 2,
                    "ptr1": 9,
                    "ptr6": 1,
                    "ptr_value_1": 1,
                    "ptr_var1": 3,
                    "temp_pointer1": 2,
                    "temp_ptr1": 2,
                    "uint_pointer1": 1,
                    "uint_ptr1": 1
                },
                "puVar7": {
                    "pointer2": 6,
                    "pointer_val2": 1,
                    "pointer_var2": 2,
                    "ptr2": 9,
                    "ptr7": 1,
                    "ptr_value_2": 1,
                    "ptr_var2": 3,
                    "temp_pointer2": 2,
                    "temp_ptr2": 2,
                    "uint_pointer2": 1,
                    "uint_ptr2": 1
                },
                "reallocateMemoryR": {
                    "original_reallocate_memory_r": 1
                },
                "result": {
                    "status": 1
                },
                "reverse_and_improve_function": {
                    "main_function": 1
                },
                "setupR": {
                    "original_setup_r": 1
                },
                "uVar10": {
                    "copy_size": 1,
                    "length": 1,
                    "loop_value3": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_value2": 1,
                    "temp_value3": 2,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var7": 7,
                    "u_var10": 1,
                    "uint_value3": 1,
                    "uint_var3": 1,
                    "uint_var4": 2,
                    "value7": 1,
                    "value_7": 1,
                    "var10": 1,
                    "var2": 1,
                    "var4": 2,
                    "var7": 2
                },
                "uVar11": {
                    "loop_value4": 1,
                    "result": 1,
                    "return_value": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_value3": 1,
                    "temp_value4": 2,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var8": 7,
                    "u_var11": 1,
                    "uint_value4": 1,
                    "uint_var4": 1,
                    "uint_var5": 2,
                    "value8": 1,
                    "value_8": 1,
                    "var11": 1,
                    "var3": 1,
                    "var5": 2,
                    "var8": 2
                },
                "uVar2": {
                    "amount": 1,
                    "count1": 1,
                    "flag1": 1,
                    "temp1": 3,
                    "temp_var1": 13,
                    "u_var2": 1,
                    "value1": 7,
                    "value_1": 1,
                    "var1": 2,
                    "var2": 1
                },
                "uVar3": {
                    "count2": 1,
                    "flag2": 1,
                    "temp2": 3,
                    "temp_var": 1,
                    "temp_var2": 13,
                    "u_var3": 1,
                    "value2": 7,
                    "value_2": 1,
                    "var2": 2,
                    "var3": 1
                },
                "uVar4": {
                    "flag": 7,
                    "flags": 2,
                    "input_value": 1,
                    "mask": 1,
                    "short_value": 1,
                    "temp1": 1,
                    "temp_value": 1,
                    "temp_var3": 7,
                    "ushort_value": 2,
                    "ushort_var": 2,
                    "ushort_var1": 1,
                    "value3": 1,
                    "value_3": 1,
                    "var3": 2,
                    "var4": 1
                },
                "uVar5": {
                    "count": 1,
                    "flag_value": 1,
                    "input_value_as_uint": 1,
                    "length": 1,
                    "num": 1,
                    "size": 1,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_var4": 7,
                    "u_var5": 1,
                    "uint_value": 2,
                    "uint_var1": 2,
                    "unsigned_value": 1,
                    "ushort_value": 1,
                    "ushort_var2": 1,
                    "value": 1,
                    "value4": 1,
                    "value_4": 1,
                    "var1": 2,
                    "var4": 2,
                    "var5": 1
                },
                "uVar8": {
                    "count": 2,
                    "length": 2,
                    "loop_value1": 1,
                    "size": 2,
                    "size_value": 2,
                    "sub_val1": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_value": 1,
                    "temp_var5": 7,
                    "uint_value1": 1,
                    "uint_var1": 1,
                    "uint_var2": 2,
                    "value5": 1,
                    "value_5": 1,
                    "var2": 2,
                    "var5": 2,
                    "var8": 1
                },
                "uVar9": {
                    "allocated_size": 1,
                    "loop_value2": 1,
                    "malloc_size": 1,
                    "size": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_value": 1,
                    "temp_value2": 2,
                    "temp_var3": 1,
                    "temp_var6": 7,
                    "u_var9": 1,
                    "uint_value2": 1,
                    "uint_var2": 1,
                    "uint_var3": 2,
                    "value6": 1,
                    "value_6": 1,
                    "var1": 1,
                    "var3": 2,
                    "var6": 2,
                    "var9": 1
                },
                "ushort_var1": {
                    "flag_var1": 1
                }
            },
            "called": [
                "FUN_00082438",
                "FUN_000825b0",
                "FUN_00084384",
                "FUN_00083d9c",
                "FUN_0008234c",
                "FUN_00083adc",
                "FUN_00083808",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00082ac0"
            ],
            "code": "\nundefined4 process_data_00083f34(undefined4 *error_code,uint *uint_array,uint **param3)\n\n{\n  int result;\n  uint temp_var1;\n  uint temp_var2;\n  ushort flag;\n  uint temp_var4;\n  uint *ptr1;\n  uint *ptr2;\n  uint temp_var5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint local_var;\n  \n  if (param3[2] != (uint *)0x0) {\n    flag = *(ushort *)(uint_array + 3);\n    temp_var4 = (uint)flag;\n    if (((int)(temp_var4 << 0x1c) < 0) && (uint_array[4] != 0)) {\n      ptr2 = *param3;\n    }\n    else {\n      result = setup_function(error_code,uint_array);\n      if (result != 0) {\n        return 0xffffffff;\n      }\n      flag = *(ushort *)(uint_array + 3);\n      temp_var4 = (uint)flag;\n      ptr2 = *param3;\n    }\n    if ((flag & 2) == 0) {\n      temp_var1 = temp_var4 & 2;\n      temp_var7 = temp_var1;\n      temp_var5 = temp_var1;\n      local_var = temp_var1;\n      if ((temp_var4 & 1) == 0) {\n        temp_var1 = 0;\n        temp_var7 = 0;\n        while( true ) {\n          while (temp_var1 == 0) {\n            temp_var7 = *ptr2;\n            ptr1 = ptr2 + 1;\n            ptr2 = ptr2 + 2;\n            temp_var1 = *ptr1;\n          }\n          temp_var5 = uint_array[2];\n          if ((int)(temp_var4 << 0x16) < 0) {\n            if (temp_var1 < temp_var5) {\n              temp_var4 = *uint_array;\n              temp_var5 = temp_var1;\n            }\n            else if ((temp_var4 & 0x480) == 0) {\n              temp_var4 = *uint_array;\n            }\n            else {\n              result = *uint_array - uint_array[4];\n              temp_var5 = result + 1 + temp_var1;\n              temp_var6 = (int)(uint_array[5] * 3) / 2;\n              if (temp_var5 <= temp_var6) {\n                temp_var5 = temp_var6;\n              }\n              if ((int)(temp_var4 << 0x15) < 0) {\n                temp_var6 = allocate_memory(error_code,temp_var5);\n                if (temp_var6 == 0) {\n                  *error_code = 0xc;\n                  flag = *(ushort *)(uint_array + 3);\n                  goto LAB_00084030;\n                }\n                copy_memory(temp_var6,uint_array[4],result);\n                *(ushort *)(uint_array + 3) = *(ushort *)(uint_array + 3) & 0xfb7f | 0x80;\n              }\n              else {\n                temp_var6 = reallocate_memory(error_code);\n                if (temp_var6 == 0) {\n                  free_memory(error_code,uint_array[4]);\n                  flag = *(ushort *)(uint_array + 3) & 0xff7f;\n                  *error_code = 0xc;\n                  goto LAB_00084030;\n                }\n              }\n              temp_var4 = temp_var6 + result;\n              uint_array[4] = temp_var6;\n              uint_array[5] = temp_var5;\n              *uint_array = temp_var4;\n              uint_array[2] = temp_var5 - result;\n              temp_var5 = temp_var1;\n            }\n            move_memory(temp_var4,temp_var7,temp_var5);\n            uint_array[2] = uint_array[2] - temp_var5;\n            *uint_array = *uint_array + temp_var5;\n            temp_var5 = temp_var1;\n          }\n          else if ((uint_array[4] < *uint_array) || (temp_var4 = uint_array[5], temp_var1 < temp_var4)) {\n            if (temp_var1 < temp_var5) {\n              temp_var5 = temp_var1;\n            }\n            move_memory(*uint_array,temp_var7,temp_var5);\n            temp_var4 = uint_array[2];\n            uint_array[2] = temp_var4 - temp_var5;\n            *uint_array = *uint_array + temp_var5;\n            if ((temp_var4 - temp_var5 == 0) && (result = flush_buffer(error_code,uint_array), result != 0))\n            goto LAB_0008402e;\n          }\n          else {\n            temp_var5 = 0x7fffffff;\n            if (temp_var1 < 0x7fffffff) {\n              temp_var5 = temp_var1;\n            }\n            temp_var5 = (*(code *)uint_array[9])(error_code,uint_array[7],temp_var7,(temp_var5 / temp_var4) * temp_var4);\n            if ((int)temp_var5 < 1) goto LAB_0008402e;\n          }\n          ptr1 = param3[2];\n          temp_var7 = temp_var7 + temp_var5;\n          temp_var1 = temp_var1 - temp_var5;\n          param3[2] = (uint *)((int)ptr1 - temp_var5);\n          if ((uint *)((int)ptr1 - temp_var5) == (uint *)0x0) break;\n          temp_var4 = (uint)*(ushort *)(uint_array + 3);\n        }\n      }\n      else {\n        do {\n          while (temp_var1 == 0) {\n            temp_var5 = *ptr2;\n            temp_var1 = ptr2[1];\n            local_var = 0;\n            ptr2 = ptr2 + 2;\n          }\n          if (local_var == 0) {\n            result = find_first_occurrence(temp_var5,10,temp_var1);\n            if (result == 0) {\n              temp_var7 = temp_var1 + 1;\n              local_var = 1;\n            }\n            else {\n              temp_var7 = (result + 1) - temp_var5;\n              local_var = 1;\n            }\n          }\n          temp_var6 = *uint_array;\n          temp_var4 = temp_var7;\n          if (temp_var1 <= temp_var7) {\n            temp_var4 = temp_var1;\n          }\n          temp_var2 = uint_array[5];\n          if ((uint_array[4] < temp_var6) && (temp_var8 = uint_array[2] + temp_var2, (int)temp_var8 < (int)temp_var4)) {\n            move_memory(temp_var6,temp_var5,temp_var8);\n            *uint_array = *uint_array + temp_var8;\n            result = flush_buffer(error_code,uint_array);\n            if (result != 0) goto LAB_0008402e;\n          }\n          else if ((int)temp_var4 < (int)temp_var2) {\n            move_memory(temp_var6,temp_var5,temp_var4);\n            uint_array[2] = uint_array[2] - temp_var4;\n            *uint_array = temp_var4 + *uint_array;\n            temp_var8 = temp_var4;\n          }\n          else {\n            temp_var8 = (*(code *)uint_array[9])(error_code,uint_array[7],temp_var5,temp_var2);\n            if ((int)temp_var8 < 1) goto LAB_0008402e;\n          }\n          temp_var7 = temp_var7 - temp_var8;\n          if (temp_var7 == 0) {\n            result = flush_buffer(error_code,uint_array);\n            if (result != 0) goto LAB_0008402e;\n            local_var = 0;\n          }\n          ptr1 = param3[2];\n          temp_var5 = temp_var5 + temp_var8;\n          temp_var1 = temp_var1 - temp_var8;\n          param3[2] = (uint *)((int)ptr1 - temp_var8);\n        } while ((uint *)((int)ptr1 - temp_var8) != (uint *)0x0);\n      }\n    }\n    else {\n      temp_var1 = 0;\n      temp_var4 = 0;\n      do {\n        while( true ) {\n          temp_var7 = temp_var4;\n          if (0x7ffffbff < temp_var4) {\n            temp_var7 = 0x7ffffc00;\n          }\n          if (temp_var4 != 0) break;\n          temp_var1 = *ptr2;\n          temp_var4 = ptr2[1];\n          ptr2 = ptr2 + 2;\n        }\n        result = (*(code *)uint_array[9])(error_code,uint_array[7],temp_var1,temp_var7);\n        if (result < 1) {\nLAB_0008402e:\n          flag = *(ushort *)(uint_array + 3);\nLAB_00084030:\n          *(ushort *)(uint_array + 3) = flag | 0x40;\n          return 0xffffffff;\n        }\n        ptr1 = param3[2];\n        temp_var1 = temp_var1 + result;\n        temp_var4 = temp_var4 - result;\n        param3[2] = (uint *)((int)ptr1 - result);\n      } while ((uint *)((int)ptr1 - result) != (uint *)0x0);\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_data_00083f34",
            "entrypoint": "0x00083f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00083f34": "process_data_00083f34",
                "__swsetup_r": "setup_function",
                "_fflush_r": "flush_buffer",
                "_free_r": "free_memory",
                "_malloc_r": "allocate_memory",
                "_realloc_r": "reallocate_memory",
                "_swsetup_r": "setup_function",
                "iVar1": "result",
                "local_2c": "local_var",
                "memchr": "find_first_occurrence",
                "memcpy": "copy_memory",
                "memmove": "move_memory",
                "param_1": "error_code",
                "param_2": "uint_array",
                "param_3": "param3",
                "puVar6": "ptr1",
                "puVar7": "ptr2",
                "uVar10": "temp_var7",
                "uVar11": "temp_var8",
                "uVar2": "temp_var1",
                "uVar3": "temp_var2",
                "uVar4": "flag",
                "uVar5": "temp_var4",
                "uVar8": "temp_var5",
                "uVar9": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084290": {
            "additional_data": {
                "": {
                    "": 3
                },
                "0x20070874": {
                    "base_address": 1,
                    "memory_address": 3
                },
                "FUN_00084290": {
                    "get_base_address": 5,
                    "get_initial_value": 4,
                    "get_magic_number": 2,
                    "get_memory_address": 19,
                    "get_return_value": 1
                },
                "PTR_FUN_00084290_1": {
                    "base_address": 1
                },
                "PTR_PARAM_1": {
                    "param1": 1
                },
                "PTR_PARAM_2": {
                    "param2": 1
                },
                "result": {
                    "memory_address": 1
                },
                "undefined4": {
                    "uint32": 2,
                    "uint32_t": 8,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nuint32_t get_memory_address_00084290(void)\n\n{\n  return 0x20070874;\n}\n\n",
            "current_name": "get_memory_address_00084290",
            "entrypoint": "0x00084290",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084290": "get_memory_address_00084290",
                "undefined4": "uint32_t"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084298": {
            "additional_data": {
                "274": {
                    "desired_index": 1,
                    "index": 1
                },
                "Elf32_Rel_ARRAY_20070000": {
                    "elf32_rel_array": 3,
                    "elf_rel_array": 5,
                    "elf_relocation_array": 1,
                    "elf_relocation_info_array": 1,
                    "rel_array": 8,
                    "rel_info_array": 1,
                    "rel_table": 1,
                    "relocation_array": 5,
                    "relocation_info_array": 1,
                    "relocation_table": 4
                },
                "FUN_00084298": {
                    "get_elf32_rel_info": 2,
                    "get_elf32_rel_r_info": 2,
                    "get_elf_rel_info": 4,
                    "get_elf_relocation_info": 2,
                    "get_r_info_from_elf_rel": 1,
                    "get_r_info_value": 1,
                    "get_rel_info": 4,
                    "get_rel_r_info": 3,
                    "get_relocation_info": 9,
                    "get_relocation_type": 2
                },
                "r_info": {
                    "rel_info": 1,
                    "relative_info": 1,
                    "relocation_index": 1,
                    "relocation_info": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\ndword get_r_info_from_elf_rel_00084298(void)\n\n{\n  return rel_array[274].relocation_info;\n}\n\n",
            "current_name": "get_r_info_from_elf_rel_00084298",
            "entrypoint": "0x00084298",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_00084298": "get_r_info_from_elf_rel_00084298",
                "r_info": "relocation_info"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000842a4": {
            "additional_data": {
                "FUN_00081e14": {
                    "allocate_memory": 3,
                    "subfunction3": 1
                },
                "FUN_000842a4": {
                    "check_file_attributes": 1,
                    "extract_file_permissions": 1,
                    "extract_metadata": 1,
                    "get_file_info": 1,
                    "improve_and_check_file": 1,
                    "improve_binary_processing": 1,
                    "initialize_file": 9,
                    "initialize_file_data": 1,
                    "initialize_file_stream": 1,
                    "initialize_process": 1,
                    "parse_file_info": 1,
                    "process_file": 3
                },
                "FUN_000846b4": {
                    "create_file_descriptor": 1,
                    "set_and_check_file_data": 1,
                    "set_file_status": 1,
                    "subfunction2": 1
                },
                "FUN_000846dc": {
                    "change_file_permissions": 1,
                    "set_file_data": 1,
                    "set_permissions": 1,
                    "subfunction1": 1
                },
                "LAB_00083b08_1": {
                    "error_handler": 1,
                    "error_label": 1
                },
                "LAB_00084300": {
                    "allocate_memory": 1
                },
                "_fstat_r": {
                    "get_file_status": 3,
                    "retrieve_file_stats": 1
                },
                "_isatty_r": {
                    "check_for_terminal": 1,
                    "check_if_terminal_device": 1,
                    "is_terminal_device": 2
                },
                "_malloc_r": {
                    "allocate_dynamic_memory": 1,
                    "allocate_memory": 3
                },
                "auStack_54": {
                    "buffer": 4,
                    "file_stat": 1,
                    "file_stat_buffer": 5,
                    "file_stats": 1,
                    "stack_array": 1,
                    "stack_buffer": 1,
                    "stack_variable": 1,
                    "stat_buffer": 16,
                    "temp_stack": 1
                },
                "bVar5": {
                    "boolean_var": 1,
                    "is_block_special_file": 1,
                    "is_executable": 5,
                    "is_executable_file": 1,
                    "is_match": 1,
                    "is_regular_file": 17,
                    "is_special": 1,
                    "is_terminal": 1,
                    "is_tty": 3
                },
                "iVar2": {
                    "allocation_size": 1,
                    "buffer_size": 1,
                    "file_buffer_size": 1,
                    "file_mode": 2,
                    "file_stat": 3,
                    "file_stat_result": 3,
                    "file_status": 8,
                    "result": 1,
                    "stat_result": 2,
                    "status": 8,
                    "value2": 1
                },
                "iVar3": {
                    "allocated_mem": 1,
                    "allocated_memory": 4,
                    "allocation_result": 8,
                    "allocation_status": 4,
                    "malloc_result": 7,
                    "malloc_size": 1,
                    "memory": 1,
                    "memory_allocation": 1,
                    "memory_allocation_status": 1,
                    "memory_block": 1,
                    "result": 1,
                    "value3": 1
                },
                "local_50": {
                    "file_attribute_mask": 1,
                    "file_attributes": 1,
                    "file_mode": 6,
                    "file_mode_mask": 1,
                    "file_permissions": 3,
                    "file_stat_result": 2,
                    "file_stats": 1,
                    "file_type": 5,
                    "local_flags": 1,
                    "local_permissions": 1,
                    "local_value": 2,
                    "local_var": 2,
                    "local_variable": 1,
                    "mode": 1,
                    "stat_result": 3
                },
                "param_1": {
                    "file_descriptor": 27,
                    "input_file_descriptor": 2,
                    "param1": 1,
                    "param_1": 1
                },
                "param_2": {
                    "file_buffer": 1,
                    "file_data": 4,
                    "file_details": 1,
                    "file_info": 15,
                    "file_information": 1,
                    "file_status": 1,
                    "metadata": 1,
                    "output_array": 2,
                    "output_data": 1,
                    "param2": 1,
                    "params_array": 1,
                    "process_data": 1,
                    "stream_buffer": 1
                },
                "uVar1": {
                    "file_attr": 1,
                    "file_attributes": 3,
                    "file_flags": 5,
                    "file_info_flags": 2,
                    "file_mode": 6,
                    "file_permission": 3,
                    "file_permission_flags": 1,
                    "file_permissions": 1,
                    "file_type": 1,
                    "flags": 1,
                    "permission_flags": 1,
                    "permissions": 1,
                    "stream_flags": 1,
                    "unspecified_var1": 1,
                    "value": 2,
                    "value1": 1
                },
                "uVar4": {
                    "converted_file_mode": 1,
                    "converted_permission": 1,
                    "file_attr_copy": 1,
                    "file_attributes_copy": 1,
                    "file_flag": 1,
                    "file_flags_as_u_int": 1,
                    "file_flags_temp": 1,
                    "file_info_flags_copy": 1,
                    "file_info_flags_uint": 1,
                    "file_mode": 1,
                    "file_mode_converted": 1,
                    "file_mode_copy": 1,
                    "new_value": 1,
                    "permission_flags": 1,
                    "permission_flags_temp": 1,
                    "permissions_copy": 1,
                    "stream_flags_uint": 1,
                    "temp": 1,
                    "temp_file_flags": 1,
                    "temp_flags": 1,
                    "temp_var": 3,
                    "temp_variable": 2,
                    "u_mode": 1,
                    "u_var4": 1,
                    "ushort_value": 1,
                    "ushort_var": 1,
                    "value4": 1,
                    "value_cast_to_uint": 1
                }
            },
            "called": [
                "FUN_000846dc",
                "FUN_000846b4",
                "FUN_00081e14"
            ],
            "calling": [
                "FUN_00083808"
            ],
            "code": "\nvoid initialize_file_data_000842a4(int file_descriptor,int *file_info)\n\n{\n  ushort file_mode;\n  int status;\n  int allocation_result;\n  uint temp_var;\n  bool is_regular_file;\n  undefined stat_buffer [4];\n  uint file_mode;\n  \n  file_mode = *(ushort *)(file_info + 3);\n  temp_var = (uint)file_mode;\n  if ((int)(temp_var << 0x1e) < 0) {\n    *file_info = (int)file_info + 0x43;\n    file_info[4] = (int)file_info + 0x43;\n    file_info[5] = 1;\n    return;\n  }\n  if (-1 < *(short *)((int)file_info + 0xe)) {\n    status = get_file_status(file_descriptor,(int)*(short *)((int)file_info + 0xe),stat_buffer);\n    if (-1 < status) {\n      is_regular_file = (file_mode & 0xf000) == 0x2000;\n      if (((file_mode & 0xf000) == 0x8000) && (file_info[10] == 0x8449d)) {\n        status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x400;\n        file_info[0x13] = 0x400;\n      }\n      else {\n        status = 0x400;\n        *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 0x800;\n      }\n      goto allocate_memory;\n    }\n    file_mode = *(ushort *)(file_info + 3);\n    temp_var = (uint)file_mode;\n  }\n  *(ushort *)(file_info + 3) = file_mode | 0x800;\n  if ((temp_var & 0x80) == 0) {\n    status = 0x400;\n  }\n  else {\n    status = 0x40;\n  }\n  is_regular_file = false;\nallocate_memory:\n  allocation_result = allocate_memory(file_descriptor,status);\n  file_mode = *(ushort *)(file_info + 3);\n  if (allocation_result == 0) {\n    if (-1 < (int)((uint)file_mode << 0x16)) {\n      *(ushort *)(file_info + 3) = file_mode | 2;\n      *file_info = (int)file_info + 0x43;\n      file_info[4] = (int)file_info + 0x43;\n      file_info[5] = 1;\n    }\n  }\n  else {\n    *(undefined **)(file_descriptor + 0x3c) = &error_handler;\n    *(ushort *)(file_info + 3) = file_mode | 0x80;\n    *file_info = allocation_result;\n    file_info[4] = allocation_result;\n    file_info[5] = status;\n    if ((is_regular_file) && (status = is_terminal_device(file_descriptor,(int)*(short *)((int)file_info + 0xe)), status != 0)) {\n      *(ushort *)(file_info + 3) = *(ushort *)(file_info + 3) | 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_file_data_000842a4",
            "entrypoint": "0x000842a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000842a4": "initialize_file_data_000842a4",
                "LAB_00083b08_1": "error_handler",
                "LAB_00084300": "allocate_memory",
                "_fstat_r": "get_file_status",
                "_isatty_r": "is_terminal_device",
                "_malloc_r": "allocate_memory",
                "auStack_54": "stat_buffer",
                "bVar5": "is_regular_file",
                "iVar2": "status",
                "iVar3": "allocation_result",
                "local_50": "file_mode",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "uVar1": "file_mode",
                "uVar4": "temp_var"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084384": {
            "additional_data": {
                "FUN_00084384": {
                    "find_char": 2,
                    "find_char_in_array": 2,
                    "find_char_in_buffer": 1,
                    "find_char_index": 1,
                    "find_char_ptr": 1,
                    "find_char_sequence": 2,
                    "find_character": 5,
                    "find_first_occurrence": 14,
                    "find_next_match": 1,
                    "find_next_occurrence": 1,
                    "find_param": 1
                },
                "LAB_000843b4": {
                    "check_alignment": 1,
                    "start_loop": 1
                },
                "LAB_000843dc": {
                    "not_found": 1,
                    "return_zero": 1
                },
                "bVar4": {
                    "end_reached": 1,
                    "flag": 2,
                    "found": 6,
                    "found_char": 1,
                    "is_final_iteration": 1,
                    "is_last": 1,
                    "is_last_element": 5,
                    "is_last_index": 8,
                    "is_last_iteration": 3,
                    "is_match": 1,
                    "reached_end": 1
                },
                "iVar2": {
                    "counter": 1,
                    "index": 29,
                    "iteration_counter": 1
                },
                "param_1": {
                    "array": 20,
                    "buffer": 4,
                    "data": 2,
                    "input_arr": 1,
                    "input_array": 2,
                    "str": 1,
                    "string": 1
                },
                "param_2": {
                    "character": 8,
                    "search_char": 1,
                    "target": 14,
                    "target_char": 5,
                    "target_value": 2,
                    "value": 1
                },
                "param_3": {
                    "array_length": 8,
                    "buffer_size": 3,
                    "length": 14,
                    "size": 6
                },
                "puVar3": {
                    "current": 5,
                    "current_byte": 1,
                    "current_element": 4,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_ptr": 3,
                    "next": 1,
                    "pointer": 2,
                    "ptr": 12,
                    "temp_pointer": 1
                },
                "uVar1": {
                    "result": 4,
                    "temp": 12,
                    "temp1": 2,
                    "xor_result": 11,
                    "xored_value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_00083f34",
                "FUN_00082b38"
            ],
            "code": "\nuint * find_first_occurrence_00084384(uint *array,char target,uint length)\n\n{\n  uint temp;\n  int index;\n  uint *ptr;\n  bool is_last_index;\n  \n  if (((uint)array & 3) == 0) {\ncheck_alignment:\n    if (3 < length) {\n      ptr = array;\n      do {\n        temp = *ptr ^ CONCAT22(CONCAT11(target,target),CONCAT11(target,target));\n        array = ptr;\n        if ((temp + 0xfefefeff & ~temp & 0x80808080) != 0) break;\n        length = length - 4;\n        array = ptr + 1;\n        ptr = ptr + 1;\n      } while (3 < length);\n    }\n    if (length == 0) {\n      array = (uint *)0x0;\n    }\n    else if (*(char *)array != target) {\n      index = 0;\n      do {\n        array = (uint *)((int)array + 1);\n        is_last_index = index == length - 1;\n        index = index + 1;\n        if (is_last_index) goto return_zero;\n      } while (*(char *)array != target);\n    }\n  }\n  else if (length == 0) {\nreturn_zero:\n    array = (uint *)0x0;\n  }\n  else if (*(char *)array != target) {\n    ptr = (uint *)((int)array + 1);\n    length = length - 1;\n    do {\n      array = ptr;\n      if (((uint)array & 3) == 0) goto check_alignment;\n      if (length == 0) goto return_zero;\n      ptr = (uint *)((int)array + 1);\n      length = length - 1;\n    } while (*(char *)array != target);\n  }\n  return array;\n}\n\n",
            "current_name": "find_first_occurrence_00084384",
            "entrypoint": "0x00084384",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084384": "find_first_occurrence_00084384",
                "LAB_000843b4": "check_alignment",
                "LAB_000843dc": "return_zero",
                "bVar4": "is_last_index",
                "iVar2": "index",
                "param_1": "array",
                "param_2": "target",
                "param_3": "length",
                "puVar3": "ptr",
                "uVar1": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084464": {
            "additional_data": {
                "DAT_200711bc": {
                    "error_code": 1,
                    "write_error": 1
                },
                "FLE_writeData": {
                    "write_data_to_file": 1
                },
                "FUN_00084464": {
                    "revised_write_data": 1,
                    "write_data": 4,
                    "write_data_to_file": 8,
                    "write_file": 1,
                    "write_to_file": 15,
                    "write_to_memory": 1
                },
                "iVar1": {
                    "write_result": 26,
                    "write_status": 3
                },
                "in_lr": {
                    "arg4": 1,
                    "arg7": 1,
                    "arg_7": 1,
                    "in_link_register": 3,
                    "in_lr": 1,
                    "lr": 1,
                    "next_lr": 1,
                    "param_7": 1,
                    "param_8": 1,
                    "parameter_7": 1,
                    "reserved4": 1,
                    "return_address": 2,
                    "unused4": 1,
                    "unused_4": 2,
                    "unused_param": 2,
                    "unused_register4": 1,
                    "unused_register_lr": 1,
                    "unused_var4": 1,
                    "unused_variable": 1
                },
                "param_1": {
                    "fd": 1,
                    "file": 1,
                    "file_descriptor": 28,
                    "output_buffer": 1
                },
                "param_2": {
                    "buffer": 3,
                    "buffer_address": 2,
                    "buffer_pointer": 1,
                    "buffer_ptr": 1,
                    "data_buffer": 1,
                    "data_offset": 1,
                    "data_pointer": 2,
                    "data_struct_address": 2,
                    "descriptor_index": 1,
                    "entry_info": 1,
                    "file_data": 1,
                    "file_info": 10,
                    "header": 1,
                    "header_address": 1,
                    "input_buffer": 1,
                    "meta_data": 1,
                    "struct_address": 1
                },
                "param_3": {
                    "buffer": 14,
                    "data": 10,
                    "data_buffer": 5,
                    "data_pointer": 1,
                    "data_ptr": 1
                },
                "param_4": {
                    "buffer_size": 6,
                    "count": 1,
                    "data_length": 2,
                    "data_size": 6,
                    "length": 1,
                    "num_bytes": 2,
                    "size": 13
                },
                "uVar2": {
                    "block_offset": 1,
                    "buffer_size": 1,
                    "data_copied": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "entry_flags": 1,
                    "file_flags": 1,
                    "file_mode": 1,
                    "file_offset": 3,
                    "file_position": 2,
                    "file_size": 1,
                    "flag": 7,
                    "flags": 6,
                    "header_value": 1,
                    "offset": 1,
                    "short_value": 1
                },
                "unaff_r4": {
                    "arg1": 1,
                    "arg4": 1,
                    "arg_4": 1,
                    "param_3_copy": 1,
                    "param_4": 1,
                    "param_5": 1,
                    "parameter_4": 1,
                    "r4": 1,
                    "reserved1": 1,
                    "unaff1": 1,
                    "unaff_4": 1,
                    "unaff_param_1": 1,
                    "unaff_r4": 1,
                    "unaff_val_1": 1,
                    "unused1": 1,
                    "unused_1": 2,
                    "unused_param": 2,
                    "unused_param4": 1,
                    "unused_register1": 1,
                    "unused_register4": 1,
                    "unused_var1": 1
                },
                "unaff_r5": {
                    "arg2": 1,
                    "arg5": 1,
                    "arg_5": 1,
                    "param_4_copy": 1,
                    "param_5": 1,
                    "param_6": 1,
                    "parameter_5": 1,
                    "r5": 1,
                    "reserved2": 1,
                    "unaff2": 1,
                    "unaff_5": 1,
                    "unaff_param_2": 1,
                    "unaff_r5": 1,
                    "unaff_val_2": 1,
                    "unused2": 1,
                    "unused_2": 2,
                    "unused_param": 2,
                    "unused_param5": 1,
                    "unused_register2": 1,
                    "unused_register5": 1,
                    "unused_var2": 1
                },
                "unaff_r6": {
                    "arg3": 1,
                    "arg6": 1,
                    "arg_6": 1,
                    "param_6": 1,
                    "param_7": 1,
                    "parameter_6": 1,
                    "r6": 1,
                    "reserved3": 1,
                    "unaff3": 1,
                    "unaff_6": 1,
                    "unaff_param_3": 1,
                    "unaff_r6": 1,
                    "unaff_val_3": 1,
                    "unused3": 1,
                    "unused_3": 2,
                    "unused_param": 2,
                    "unused_param6": 1,
                    "unused_register3": 1,
                    "unused_register6": 1,
                    "unused_var3": 1,
                    "unused_variable": 1
                }
            },
            "called": [
                "FUN_00084700",
                "FUN_000811cc"
            ],
            "calling": [],
            "code": "\nvoid write_data_to_file_00084464(int *file_descriptor,int file_info,undefined4 buffer,undefined4 size)\n\n{\n  int write_result;\n  ushort flag;\n  undefined4 unused_param;\n  undefined4 unused_2;\n  undefined4 unused_3;\n  undefined4 in_link_register;\n  \n  flag = *(ushort *)(file_info + 0xc);\n  if ((int)((uint)flag << 0x17) < 0) {\n    _lseek_r(file_descriptor,(int)*(short *)(file_info + 0xe),0,2);\n    flag = *(ushort *)(file_info + 0xc);\n  }\n  *(ushort *)(file_info + 0xc) = flag & 0xefff;\n  DAT_200711bc = 0;\n  write_result = _write((int)*(short *)(file_info + 0xe),buffer,size,size,unused_param,unused_2,unused_3,\n                 in_link_register);\n  if ((write_result == -1) && (DAT_200711bc != 0)) {\n    *file_descriptor = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "write_data_to_file_00084464",
            "entrypoint": "0x00084464",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084464": "write_data_to_file_00084464",
                "iVar1": "write_result",
                "in_lr": "in_link_register",
                "param_1": "file_descriptor",
                "param_2": "file_info",
                "param_3": "buffer",
                "param_4": "size",
                "uVar2": "flag",
                "unaff_r4": "unused_param",
                "unaff_r5": "unused_2",
                "unaff_r6": "unused_3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008449c": {
            "additional_data": {
                "FUN_0008449c": {
                    "improve_code": 2,
                    "perform_file_seek": 1,
                    "reposition_file_pointer": 2,
                    "rewritten_function": 1,
                    "seek_and_set_file_position": 2,
                    "seek_and_set_flag": 6,
                    "seek_and_update_flags": 1,
                    "set_cursor_position": 1,
                    "update_file_attributes": 1,
                    "update_file_offset": 2,
                    "update_file_pointer": 2,
                    "update_file_position": 3,
                    "update_file_seek": 1,
                    "update_file_seek_status": 3,
                    "update_file_status": 1,
                    "update_read_status": 1
                },
                "FUN_00084700": {
                    "helper_function": 1,
                    "perform_action": 1,
                    "sub_function": 1,
                    "update_file_status": 1,
                    "write_to_memory": 1
                },
                "iVar1": {
                    "file_offset": 1,
                    "result": 1,
                    "seek_result": 29
                },
                "param_1": {
                    "fd": 1,
                    "file_descriptor": 30
                },
                "param_2": {
                    "buffer": 6,
                    "buffer_address": 2,
                    "context": 1,
                    "data_pointer": 1,
                    "data_struct": 1,
                    "file_metadata": 1,
                    "input_buffer": 1,
                    "memory_address": 1,
                    "param_address": 1,
                    "param_buffer": 1,
                    "struct_address": 7,
                    "struct_pointer": 8
                },
                "param_3": {
                    "param3": 1
                },
                "param_4": {
                    "param4": 1
                },
                "uVar2": {
                    "file_status": 1,
                    "flag": 7,
                    "flag_value": 2,
                    "flags": 1,
                    "modified_flag": 3,
                    "modified_flags": 2,
                    "modified_value": 1,
                    "new_flag": 1,
                    "new_permission": 1,
                    "status_flag": 1,
                    "updated_flag": 2,
                    "updated_flags": 5,
                    "updated_status": 3,
                    "updated_value": 1
                }
            },
            "called": [
                "FUN_00084700"
            ],
            "calling": [],
            "code": "\nvoid seek_and_set_flag_0008449c(undefined4 file_descriptor,int struct_pointer)\n\n{\n  int seek_result;\n  ushort flag;\n  \n  seek_result = _lseek_r(file_descriptor,(int)*(short *)(struct_pointer + 0xe));\n  if (seek_result == -1) {\n    flag = *(ushort *)(struct_pointer + 0xc) & 0xefff;\n  }\n  else {\n    flag = *(ushort *)(struct_pointer + 0xc) | 0x1000;\n  }\n  if (seek_result != -1) {\n    *(int *)(struct_pointer + 0x50) = seek_result;\n  }\n  *(ushort *)(struct_pointer + 0xc) = flag;\n  return;\n}\n\n",
            "current_name": "seek_and_set_flag_0008449c",
            "entrypoint": "0x0008449c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008449c": "seek_and_set_flag_0008449c",
                "iVar1": "seek_result",
                "param_1": "file_descriptor",
                "param_2": "struct_pointer",
                "uVar2": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000844c4": {
            "additional_data": {
                "FUN_00083808": {
                    "config_stream": 1
                },
                "FUN_00083adc": {
                    "analyze_input": 1
                },
                "FUN_00083b14": {
                    "finalize_stream": 1
                },
                "FUN_000844c4": {
                    "process_buffer": 1,
                    "process_data": 2,
                    "process_input": 13,
                    "process_input_buffer": 1,
                    "process_output": 1,
                    "process_stream": 1,
                    "read_and_print_char": 1,
                    "reverse_string": 1,
                    "write_to_file": 1,
                    "write_to_output": 1,
                    "write_to_stream": 2
                },
                "__sinit": {
                    "__initialize_stream": 1,
                    "initialize": 3,
                    "initialize_buffer": 1,
                    "initialize_stream": 3
                },
                "__swsetup_r": {
                    "__setup_stream_r": 1,
                    "setup_buffer": 1,
                    "setup_r": 1,
                    "setup_read_write": 1,
                    "setup_stream": 3,
                    "setup_sw": 1
                },
                "_fflush_r": {
                    "__flush_stream_r": 1,
                    "flush_buffer": 3,
                    "flush_r": 1,
                    "flush_stream": 3
                },
                "iVar4": {
                    "count": 1,
                    "counter": 2,
                    "i_var4": 1,
                    "index": 12,
                    "index_value": 1,
                    "int_value": 1,
                    "loop_counter": 1,
                    "offset": 3,
                    "result": 4,
                    "stream_index": 1,
                    "temp": 1,
                    "temp_var": 2,
                    "temp_variable": 1
                },
                "param_1": {
                    "buffer_ptr": 1,
                    "data_pointer": 2,
                    "file_descriptor": 3,
                    "input": 4,
                    "input_buffer": 3,
                    "input_data": 5,
                    "input_param": 2,
                    "input_ptr": 5,
                    "input_value": 2,
                    "stream": 3,
                    "stream_handle": 1
                },
                "param_2": {
                    "bitmask": 1,
                    "character": 8,
                    "current_char": 1,
                    "data": 1,
                    "data_byte": 1,
                    "flag": 6,
                    "flags": 3,
                    "input_length": 3,
                    "input_value": 2,
                    "output": 1,
                    "output_val": 1,
                    "output_value": 2,
                    "value": 1
                },
                "param_3": {
                    "array": 1,
                    "array_pointer": 1,
                    "buffer": 15,
                    "buffer_props": 1,
                    "buffer_ptr": 1,
                    "data": 1,
                    "function_data": 1,
                    "output_array": 2,
                    "output_buffer": 2,
                    "output_ptr": 2,
                    "stream_args": 1,
                    "stream_buffer": 1,
                    "stream_data": 1,
                    "stream_state": 1
                },
                "param_4": {
                    "arg": 1,
                    "buffer_length": 1,
                    "buffer_size": 3,
                    "config_value": 1,
                    "file": 1,
                    "flag": 3,
                    "int_value": 1,
                    "mode": 1,
                    "other_param": 1,
                    "output_length": 1,
                    "output_value": 1,
                    "param": 2,
                    "param4": 1,
                    "param_4": 1,
                    "size": 8,
                    "stream_mutex": 1,
                    "value": 2,
                    "variable_4": 1
                },
                "puVar3": {
                    "buffer_pointer": 2,
                    "buffer_ptr": 4,
                    "byte_pointer": 2,
                    "byte_ptr": 1,
                    "current_byte": 1,
                    "current_byte_ptr": 1,
                    "current_char": 1,
                    "current_char_ptr": 1,
                    "current_element": 1,
                    "data_ptr": 1,
                    "output_ptr": 1,
                    "pointer": 3,
                    "ptr": 8,
                    "ptr_to_undefined": 1,
                    "stream_buffer": 1,
                    "undefined_pointer": 2
                },
                "uVar1": {
                    "array_value": 1,
                    "buffer_size": 2,
                    "buffer_value": 1,
                    "char_count": 1,
                    "config_flags": 1,
                    "count": 1,
                    "current_char": 1,
                    "element": 1,
                    "first_short": 1,
                    "flag": 1,
                    "length": 1,
                    "num_elements": 1,
                    "size": 1,
                    "stream_args_len": 1,
                    "stream_flags": 3,
                    "ushort_value": 7,
                    "ushort_var": 2,
                    "value": 3,
                    "value1": 1
                },
                "uVar2": {
                    "buffer_size_uint": 1,
                    "buffer_value_as_int": 1,
                    "char_value": 1,
                    "config_value_uint": 1,
                    "converted_size": 1,
                    "converted_value": 3,
                    "converted_var": 1,
                    "count_uint": 1,
                    "current_char_uint": 1,
                    "element_value": 1,
                    "first_int": 1,
                    "flag_as_int": 1,
                    "length_unsigned": 1,
                    "num_elements_as_int": 1,
                    "stream_args_len_uint": 1,
                    "stream_flags_as_int": 2,
                    "stream_flags_uint": 1,
                    "u_value": 1,
                    "u_var2": 1,
                    "uint_value": 7,
                    "uint_var": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_00083adc",
                "FUN_00083b14",
                "FUN_00083808"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nuint process_input_buffer_000844c4(int input_ptr,uint character,undefined4 *buffer,undefined4 size)\n\n{\n  ushort ushort_value;\n  uint uint_value;\n  undefined *ptr;\n  int index;\n  \n  if ((input_ptr != 0) && (*(int *)(input_ptr + 0x38) == 0)) {\n    initialize();\n  }\n  ushort_value = *(ushort *)(buffer + 3);\n  uint_value = (uint)ushort_value;\n  buffer[2] = buffer[6];\n  if ((-1 < (int)(uint_value << 0x1c)) || (index = buffer[4], index == 0)) {\n    index = setup_stream(input_ptr,buffer,ushort_value,uint_value,size);\n    if (index != 0) {\n      return 0xffffffff;\n    }\n    ushort_value = *(ushort *)(buffer + 3);\n    index = buffer[4];\n    uint_value = (uint)ushort_value;\n  }\n  character = character & 0xff;\n  if ((int)(uint_value << 0x12) < 0) {\n    ptr = (undefined *)*buffer;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) {\nLAB_000844f6:\n      index = index + 1;\n      goto LAB_000844f8;\n    }\n  }\n  else {\n    buffer[0x19] = buffer[0x19] & 0xffffdfff;\n    ptr = (undefined *)*buffer;\n    *(ushort *)(buffer + 3) = ushort_value | 0x2000;\n    index = (int)ptr - index;\n    if (index < (int)buffer[5]) goto LAB_000844f6;\n  }\n  index = flush_buffer(input_ptr,buffer);\n  if (index != 0) {\n    return 0xffffffff;\n  }\n  ptr = (undefined *)*buffer;\n  index = 1;\nLAB_000844f8:\n  buffer[2] = buffer[2] + -1;\n  *buffer = ptr + 1;\n  *ptr = (char)character;\n  if (((buffer[5] == index) ||\n      (((int)((uint)*(ushort *)(buffer + 3) << 0x1f) < 0 && (character == 10)))) &&\n     (index = flush_buffer(input_ptr,buffer), index != 0)) {\n    return 0xffffffff;\n  }\n  return character;\n}\n\n",
            "current_name": "process_input_buffer_000844c4",
            "entrypoint": "0x000844c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000844c4": "process_input_buffer_000844c4",
                "__sinit": "initialize",
                "__swsetup_r": "setup_stream",
                "_fflush_r": "flush_buffer",
                "iVar4": "index",
                "param_1": "input_ptr",
                "param_2": "character",
                "param_3": "buffer",
                "param_4": "size",
                "puVar3": "ptr",
                "uVar1": "ushort_value",
                "uVar2": "uint_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008456c": {
            "additional_data": {
                "FUN_00084290": {
                    "get_locale_charset": 1
                },
                "FUN_0008456c": {
                    "convert_character_encoding": 2,
                    "convert_characters": 1,
                    "convert_data": 2,
                    "convert_encoding": 1,
                    "convert_locale_charset": 1,
                    "convert_string": 2,
                    "convert_string_to_locale": 1,
                    "convert_text_to_unicode": 1,
                    "convert_to_encoding": 1,
                    "convert_to_locale_string": 1,
                    "decode_and_extract": 1,
                    "decode_and_process_data": 1,
                    "decode_and_store_value": 1,
                    "decode_and_update_status": 1,
                    "decode_and_write": 1,
                    "decode_data": 2,
                    "execute_function": 1,
                    "execute_localization_function": 1,
                    "parse_data": 1,
                    "process_data": 5,
                    "process_function": 1
                },
                "FUN_000845bc": {
                    "process_param": 1
                },
                "auStack_24": {
                    "auxiliary_buffer": 2,
                    "auxiliary_stack": 1,
                    "buffer": 10,
                    "character_buffer": 1,
                    "conversion_buffer": 2,
                    "stack_array": 1,
                    "stack_data": 3,
                    "temp_buffer": 7,
                    "temporary_array": 1,
                    "temporary_buffer": 2
                },
                "iVar3": {
                    "conversion_result": 1,
                    "result": 19,
                    "result_code": 1,
                    "return_value": 10
                },
                "param_1": {
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "input_buffer": 1,
                    "output": 2,
                    "output_array": 1,
                    "output_buffer": 14,
                    "output_data": 1,
                    "output_pointer": 2,
                    "output_string": 5,
                    "param_array": 1,
                    "result": 2
                },
                "param_2": {
                    "array_size": 1,
                    "buffer_length": 2,
                    "buffer_size": 4,
                    "count": 1,
                    "data_length": 1,
                    "input_length": 10,
                    "input_size": 6,
                    "length": 3,
                    "size": 3
                },
                "param_3": {
                    "additional_arg": 1,
                    "additional_argument": 1,
                    "auxiliary_data": 1,
                    "constant_value": 1,
                    "conversion_flag": 1,
                    "input": 3,
                    "input_char": 2,
                    "input_data": 1,
                    "input_value": 4,
                    "locale": 1,
                    "param": 2,
                    "param3": 5,
                    "param_3": 1,
                    "param_value": 2,
                    "unused": 2,
                    "unused_param": 1,
                    "value": 2
                },
                "param_4": {
                    "error_code": 12,
                    "error_flag": 1,
                    "output_buffer": 1,
                    "output_ptr": 1,
                    "output_status": 1,
                    "result": 3,
                    "result_array": 2,
                    "result_pointer": 1,
                    "result_ptr": 1,
                    "return_value": 1,
                    "status": 6,
                    "status_pointer": 1
                },
                "pcVar1": {
                    "conversion_func": 1,
                    "conversion_function": 3,
                    "encoding_function": 2,
                    "function_pointer": 17,
                    "function_ptr": 7,
                    "localization_function": 1
                },
                "uVar2": {
                    "charset": 25,
                    "charset_value": 1,
                    "encoding": 1,
                    "locale_charset": 4
                }
            },
            "called": [
                "FUN_000845bc",
                "FUN_00084290"
            ],
            "calling": [
                "FUN_00083c40"
            ],
            "code": "\nvoid decode_and_process_data_0008456c(undefined4 *output_buffer,int input_length,undefined4 param3,undefined4 *error_code)\n\n{\n  code *function_pointer;\n  undefined4 charset;\n  int result;\n  undefined buffer [12];\n  \n  function_pointer = DAT_20070898;\n  if (input_length == 0) {\n    charset = __locale_charset();\n    result = (*function_pointer)(output_buffer,buffer,0,charset,error_code);\n  }\n  else {\n    charset = __locale_charset();\n    result = (*function_pointer)(output_buffer,input_length,param3,charset,error_code);\n  }\n  if (result == -1) {\n    *error_code = 0;\n    *output_buffer = 0x8a;\n  }\n  return;\n}\n\n",
            "current_name": "decode_and_process_data_0008456c",
            "entrypoint": "0x0008456c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0008456c": "decode_and_process_data_0008456c",
                "auStack_24": "buffer",
                "iVar3": "result",
                "param_1": "output_buffer",
                "param_2": "input_length",
                "param_3": "param3",
                "param_4": "error_code",
                "pcVar1": "function_pointer",
                "uVar2": "charset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000845bc": {
            "additional_data": {
                "0": {
                    "success": 1
                },
                "0x0": {
                    "null": 1
                },
                "0x100": {
                    "256": 1,
                    "max_value": 1
                },
                "0x8a": {
                    "error_code": 1,
                    "error_value": 1
                },
                "0xffffffff": {
                    "error_code": 1,
                    "failure": 1
                },
                "FUN_000845bc": {
                    "convert_and_store_value": 1,
                    "convert_byte_to_char": 1,
                    "convert_int_to_char": 2,
                    "convert_number_to_char": 1,
                    "convert_param_to_char": 1,
                    "convert_to_byte": 2,
                    "convert_uint_to_byte": 1,
                    "convert_value_to_char": 3,
                    "copy_byte_to_pointer": 1,
                    "copy_number_to_memory": 1,
                    "copy_uint_to_memory": 1,
                    "copy_value": 1,
                    "copy_value_to_memory": 1,
                    "decode_and_store_value": 2,
                    "decode_byte": 1,
                    "extract_character": 1,
                    "store_byte_in_buffer": 1,
                    "store_value": 1,
                    "store_value_in_memory": 1,
                    "write_byte_to_buffer": 1,
                    "write_byte_to_memory": 4,
                    "write_to_buffer": 1,
                    "write_value_to_memory": 1
                },
                "NULL": {
                    "0x0": 1
                },
                "char": {
                    "converted_char": 1
                },
                "param_1": {
                    "address": 1,
                    "buffer": 2,
                    "dest": 1,
                    "dest_pointer": 1,
                    "destination": 4,
                    "memory_address": 4,
                    "output": 6,
                    "output_buffer": 1,
                    "output_byte": 2,
                    "output_char": 1,
                    "output_pointer": 1,
                    "output_ptr": 4,
                    "output_value": 1,
                    "result": 1,
                    "value_pointer": 1
                },
                "param_2": {
                    "buffer": 6,
                    "byte_pointer": 1,
                    "byte_ptr": 3,
                    "data": 2,
                    "data_byte": 1,
                    "destination": 2,
                    "destination_pointer": 1,
                    "input": 1,
                    "input_buffer": 1,
                    "input_byte": 2,
                    "input_ptr": 3,
                    "output": 1,
                    "output_buffer": 1,
                    "source": 3,
                    "src": 1,
                    "src_pointer": 1,
                    "value": 1
                },
                "param_3": {
                    "byte_value": 3,
                    "encoded_byte": 1,
                    "encoded_value": 1,
                    "input": 1,
                    "input_uint": 1,
                    "input_value": 3,
                    "number": 2,
                    "size": 1,
                    "value": 17,
                    "value_to_write": 1
                },
                "return": {
                    "success": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0008456c"
            ],
            "code": "\nundefined4 write_byte_to_memory_000845bc(undefined4 *output,undefined *buffer,uint value)\n\n{\n  if (buffer == (undefined *)0x0) {\n    success 0;\n  }\n  if (value < 0x100) {\n    *buffer = (converted_char)value;\n    success 1;\n  }\n  *output = 0x8a;\n  success 0xffffffff;\n}\n\n",
            "current_name": "write_byte_to_memory_000845bc",
            "entrypoint": "0x000845bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000845bc": "write_byte_to_memory_000845bc",
                "char": "converted_char",
                "param_1": "output",
                "param_2": "buffer",
                "param_3": "value",
                "return": "success"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846a4": {
            "additional_data": {
                "Elf32_Rel_ARRAY_20070000": {
                    "elf_relocation_array": 1,
                    "rel_array": 2
                },
                "FUNC_00083c08": {
                    "initialize": 6,
                    "initialize_sfp_lock": 1,
                    "initialize_streams": 1
                },
                "FUNC_00083c0c": {
                    "acquire_lock": 1,
                    "lock_acquire": 1,
                    "release": 1,
                    "release_buffer": 1,
                    "release_lock": 3,
                    "release_sfp_lock": 1
                },
                "FUN_00083adc": {
                    "call_code_function": 1,
                    "call_func2": 1,
                    "call_function_r": 1,
                    "check_errors": 1,
                    "check_params": 1,
                    "code_block": 1,
                    "execute_code": 1,
                    "read_from_file": 1
                },
                "FUN_00083b14": {
                    "free_memory": 1,
                    "free_r": 2,
                    "free_resource": 1,
                    "free_resources": 4
                },
                "FUN_00083d9c": {
                    "call_func1": 1,
                    "execute_func": 1,
                    "fflush_r": 3,
                    "flush_buffer": 1,
                    "flush_r": 1,
                    "write_to_file": 1
                },
                "FUN_000846a4": {
                    "cleanup_and_flush": 1,
                    "cleanup_function": 1,
                    "cleanup_resource": 1,
                    "flush_and_cleanup": 1,
                    "flush_and_free_memory": 1,
                    "flush_and_free_resources": 11,
                    "flush_and_release_resources": 4,
                    "flush_buffer": 3,
                    "flush_file": 5,
                    "flush_output_buffer": 1,
                    "flush_stream": 2
                },
                "__free_r": {
                    "free": 2,
                    "free_data_recursive": 1,
                    "free_memory": 2
                },
                "__sfp_lock_acquire": {
                    "acquire_lock": 7,
                    "acquire_stream_lock": 1,
                    "lock_acquire": 1
                },
                "__sfp_lock_release": {
                    "lock_release": 1,
                    "release_lock": 7,
                    "release_stream_lock": 1
                },
                "__sinit": {
                    "initialize": 4,
                    "initialize_global_state": 1,
                    "initialize_library": 1,
                    "initialize_stream": 3
                },
                "_fflush_r": {
                    "flush": 2,
                    "flush_buffer": 1,
                    "flush_buffer_and_return_result": 1,
                    "flush_data_recursive": 1,
                    "flush_file": 1,
                    "flush_stream": 3
                },
                "_free_r": {
                    "free_memory": 1,
                    "free_resource": 1,
                    "free_resources": 2
                },
                "code": {
                    "function_pointer": 1
                },
                "dVar1": {
                    "base_address": 1,
                    "elf_rel_offset": 1,
                    "elf_relocation_offset": 1,
                    "offset": 18,
                    "offset_value": 1,
                    "r_offset": 2,
                    "rel_offset": 6,
                    "relocation_offset": 1
                },
                "iVar3": {
                    "call_result": 1,
                    "comparison_result": 2,
                    "function_result": 1,
                    "result": 6,
                    "return_value": 10,
                    "status": 10,
                    "temp_var": 1
                },
                "param_1": {
                    "arg": 1,
                    "buffer": 1,
                    "buffer_address": 1,
                    "buffer_ptr": 1,
                    "buffer_size": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "file": 1,
                    "file_descriptor": 2,
                    "file_ptr": 2,
                    "input": 4,
                    "input_param": 5,
                    "input_parameter": 2,
                    "input_value": 2,
                    "output_buffer": 1,
                    "param": 1,
                    "resource": 1,
                    "resource_handle": 1,
                    "stream": 2
                },
                "param_2": {
                    "input2": 1,
                    "output_data": 1
                },
                "uVar2": {
                    "result": 23,
                    "ret_value": 1,
                    "return_value": 6,
                    "status": 1
                }
            },
            "called": [
                "FUN_00083c08",
                "FUN_00083c0c",
                "FUN_00083d9c",
                "FUN_00083adc",
                "FUN_00083b14"
            ],
            "calling": [],
            "code": "\nundefined4 flush_and_free_resources_000846a4(int input_param)\n\n{\n  dword offset;\n  undefined4 result;\n  int return_value;\n  \n  offset = rel_array[140].r_offset;\n  if (input_param != 0) {\n    if ((rel_array[140].r_offset != 0) &&\n       (*(int *)(rel_array[140].r_offset + 0x38) == 0)) {\n      initialize();\n    }\n    if (*(short *)(input_param + 0xc) != 0) {\n      result = flush_stream(offset,input_param);\n      if ((*(function_pointer **)(input_param + 0x2c) != (function_pointer *)0x0) &&\n         (return_value = (**(function_pointer **)(input_param + 0x2c))(offset,*(undefined4 *)(input_param + 0x1c)), return_value < 0))\n      {\n        result = 0xffffffff;\n      }\n      if ((int)((uint)*(ushort *)(input_param + 0xc) << 0x18) < 0) {\n        free_resources(offset,*(undefined4 *)(input_param + 0x10));\n      }\n      if (*(int *)(input_param + 0x30) != 0) {\n        if (*(int *)(input_param + 0x30) != input_param + 0x40) {\n          free_resources(offset);\n        }\n        *(undefined4 *)(input_param + 0x30) = 0;\n      }\n      if (*(int *)(input_param + 0x44) != 0) {\n        free_resources(offset);\n        *(undefined4 *)(input_param + 0x44) = 0;\n      }\n      acquire_lock();\n      *(undefined2 *)(input_param + 0xc) = 0;\n      release_lock();\n      return result;\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "flush_and_free_resources_000846a4",
            "entrypoint": "0x000846a4",
            "imported": false,
            "improved": true,
            "renaming": {
                "Elf32_Rel_ARRAY_20070000": "rel_array",
                "FUN_000846a4": "flush_and_free_resources_000846a4",
                "__sfp_lock_acquire": "acquire_lock",
                "__sfp_lock_release": "release_lock",
                "__sinit": "initialize",
                "_fflush_r": "flush_stream",
                "_free_r": "free_resources",
                "code": "function_pointer",
                "dVar1": "offset",
                "iVar3": "return_value",
                "param_1": "input_param",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846b4": {
            "additional_data": {
                "DAT_200711bc": {
                    "error_code": 1
                },
                "FUN_000846b4": {
                    "check_and_assign_file_size": 1,
                    "check_and_assign_return_value": 1,
                    "check_and_set_file_size": 1,
                    "check_file_stat": 1,
                    "check_file_stats": 1,
                    "check_fstat": 1,
                    "file_stat": 1,
                    "file_stats_check": 1,
                    "file_status_check": 1,
                    "get_file_info": 2,
                    "get_file_size": 3,
                    "get_file_stat": 6,
                    "get_file_status": 7,
                    "get_fstat_error_code": 1,
                    "update_file_stats": 1,
                    "validate_and_return": 1,
                    "validate_file_size": 1
                },
                "_fstat": {
                    "get_file_status": 1,
                    "get_file_status_details": 1
                },
                "iVar1": {
                    "file_stat_result": 3,
                    "file_status": 4,
                    "fstat_result": 2,
                    "result": 2,
                    "stat_result": 1,
                    "status": 10
                },
                "param_1": {
                    "error_code": 2,
                    "file_size": 2,
                    "file_stats": 1,
                    "output": 2,
                    "output_result": 1,
                    "output_value": 1,
                    "result": 15,
                    "result_ptr": 2,
                    "return_value": 1,
                    "status": 4
                },
                "param_2": {
                    "fd": 3,
                    "file_descriptor": 28
                },
                "param_3": {
                    "buf": 2,
                    "buffer": 4,
                    "file_stat": 1,
                    "file_stat_buffer": 1,
                    "file_status": 1,
                    "file_status_buffer": 1,
                    "stat_buf": 4,
                    "stat_buffer": 17
                },
                "param_4": {
                    "buffer_size": 15,
                    "file_size": 1,
                    "file_stat_buffer_size": 1,
                    "length": 2,
                    "path": 2,
                    "size": 3,
                    "stat_buf_size": 1,
                    "stat_buffer_size": 3,
                    "stat_size": 2,
                    "statistics": 1
                }
            },
            "called": [
                "FUN_000811b4"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid get_file_info_000846b4(int *result,undefined4 file_descriptor,undefined4 stat_buffer,undefined4 buffer_size)\n\n{\n  int status;\n  \n  DAT_200711bc = 0;\n  status = get_file_status_details(file_descriptor,stat_buffer,stat_buffer,0,buffer_size);\n  if ((status == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "get_file_info_000846b4",
            "entrypoint": "0x000846b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846b4": "get_file_info_000846b4",
                "_fstat": "get_file_status_details",
                "iVar1": "status",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "stat_buffer",
                "param_4": "buffer_size"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000846dc": {
            "additional_data": {
                "DAT_200711bc": {
                    "saved_output": 1,
                    "saved_result": 2,
                    "saved_terminal_info": 1,
                    "saved_value": 1,
                    "stored_value": 1,
                    "terminal_num": 1
                },
                "FUN_000846dc": {
                    "check_and_assign_output": 1,
                    "check_and_assign_terminal_num": 1,
                    "check_and_assign_tty_value": 1,
                    "check_and_assign_value": 1,
                    "check_and_save_terminal_info": 1,
                    "check_and_save_terminal_state": 1,
                    "check_and_set_isatty": 1,
                    "check_and_set_stdin_output": 1,
                    "check_and_set_terminal": 1,
                    "check_and_set_terminal_error": 1,
                    "check_if_interactive": 1,
                    "check_if_terminal": 4,
                    "check_if_terminal_and_set_param": 1,
                    "check_if_terminal_and_store": 1,
                    "check_is_interactive_terminal": 1,
                    "check_is_terminal": 2,
                    "check_isatty": 1,
                    "check_terminal_and_assign_result": 1,
                    "check_terminal_connection": 1,
                    "check_terminal_input": 1,
                    "check_terminal_support": 1,
                    "check_terminal_type": 1,
                    "check_termination_condition": 1,
                    "check_tty_and_set_param": 1,
                    "detect_and_save_is_tty": 1,
                    "initialize_if_not_tty": 1,
                    "is_terminal_not_stdin": 1
                },
                "_isatty": {
                    "check_if_terminal": 1,
                    "check_input_tty": 1,
                    "check_terminal": 1,
                    "check_terminal_device": 1,
                    "check_terminal_function": 1,
                    "check_tty": 1
                },
                "iVar1": {
                    "is_interactive": 1,
                    "is_terminal": 13,
                    "is_tty": 5,
                    "terminal_check_result": 1
                },
                "param_1": {
                    "output": 3,
                    "output_value": 10,
                    "result": 12,
                    "result_pointer": 3,
                    "result_ptr": 3
                },
                "param_2": {
                    "file_descriptor": 27,
                    "input_handle": 1,
                    "input_value": 2,
                    "terminal_descriptor": 1
                }
            },
            "called": [
                "FUN_000811be"
            ],
            "calling": [
                "FUN_000842a4"
            ],
            "code": "\nvoid check_if_terminal_and_set_param_000846dc(int *result,undefined4 file_descriptor)\n\n{\n  int is_terminal;\n  \n  DAT_200711bc = 0;\n  is_terminal = check_terminal_device(file_descriptor);\n  if ((is_terminal == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "check_if_terminal_and_set_param_000846dc",
            "entrypoint": "0x000846dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000846dc": "check_if_terminal_and_set_param_000846dc",
                "_isatty": "check_terminal_device",
                "iVar1": "is_terminal",
                "param_1": "result",
                "param_2": "file_descriptor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084700": {
            "additional_data": {
                "FUN_00084700": {
                    "file_seek": 1,
                    "perform_lseek": 1,
                    "reverse_and_update_offset": 1,
                    "rewind_file": 2,
                    "seek_and_assign": 3,
                    "seek_and_check": 1,
                    "seek_and_copy": 1,
                    "seek_and_copy_data": 1,
                    "seek_and_set": 1,
                    "seek_and_set_error": 1,
                    "seek_and_set_error_code": 1,
                    "seek_and_set_param": 2,
                    "seek_and_set_param_if_error": 1,
                    "seek_and_set_result": 2,
                    "seek_and_set_return_value": 1,
                    "seek_and_store": 4,
                    "seek_and_store_offset": 1,
                    "seek_position": 1,
                    "seek_to_position": 2,
                    "set_file_pointer": 1,
                    "set_file_position_and_check_error": 1
                },
                "Funct_00084700": {
                    "seek_and_assign": 1
                },
                "iVar1": {
                    "lseek_result": 1,
                    "result": 2,
                    "seek_result": 24
                },
                "param_1": {
                    "error_code": 2,
                    "error_flag": 1,
                    "file_pointer": 1,
                    "output": 1,
                    "output_result": 1,
                    "result": 24,
                    "result_ptr": 1
                },
                "param_2": {
                    "file_descriptor": 31
                },
                "param_3": {
                    "move_distance": 1,
                    "offset": 30
                },
                "param_4": {
                    "move_method": 1,
                    "origin": 7,
                    "seek_origin": 1,
                    "whence": 22
                }
            },
            "called": [
                "FUN_000811c2"
            ],
            "calling": [
                "FUN_00084464",
                "FUN_0008449c"
            ],
            "code": "\nvoid seek_and_set_return_value_00084700(int *result,undefined4 file_descriptor,undefined4 offset,undefined4 whence)\n\n{\n  int seek_result;\n  \n  DAT_200711bc = 0;\n  seek_result = _lseek(file_descriptor,offset,whence);\n  if ((seek_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "seek_and_set_return_value_00084700",
            "entrypoint": "0x00084700",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084700": "seek_and_set_return_value_00084700",
                "iVar1": "seek_result",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "offset",
                "param_4": "whence"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084728": {
            "additional_data": {
                "FUN_000811c6": {
                    "initialize_read": 1
                },
                "FUN_00084728": {
                    "read_and_assign": 1,
                    "read_and_assign_error": 2,
                    "read_and_assign_error_code": 1,
                    "read_and_assign_value": 1,
                    "read_and_check": 3,
                    "read_and_check_error": 5,
                    "read_and_check_errors": 1,
                    "read_and_handle_error": 3,
                    "read_and_process_data": 1,
                    "read_and_set_return_value": 1,
                    "read_and_store_data": 1,
                    "read_and_store_error_code": 1,
                    "read_and_store_if_error": 1,
                    "read_and_store_result": 1,
                    "read_and_store_value": 4,
                    "read_data": 1,
                    "read_data_from_stream": 1,
                    "read_file_and_set_param": 1
                },
                "iVar1": {
                    "read_result": 28,
                    "read_status": 2
                },
                "param_1": {
                    "error_code": 2,
                    "error_ptr": 1,
                    "output": 4,
                    "output_data": 1,
                    "output_param": 1,
                    "output_pointer": 1,
                    "output_ptr": 1,
                    "output_value": 8,
                    "output_value_ptr": 1,
                    "result": 8,
                    "result_ptr": 2,
                    "return_value": 1
                },
                "param_2": {
                    "buffer": 3,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "file_descriptor": 22,
                    "file_pointer": 1,
                    "input1": 1,
                    "input_buffer": 1,
                    "stream_source": 1
                },
                "param_3": {
                    "buffer": 23,
                    "buffer_ptr": 1,
                    "buffer_size": 1,
                    "input2": 1,
                    "size": 5
                },
                "param_4": {
                    "buffer_size": 1,
                    "count": 20,
                    "file_descriptor": 1,
                    "input3": 1,
                    "length": 2,
                    "num_bytes": 1,
                    "size": 5
                }
            },
            "called": [
                "FUN_000811c6"
            ],
            "calling": [],
            "code": "\nvoid read_and_check_error_00084728(int *result,undefined4 file_descriptor,undefined4 buffer,undefined4 count)\n\n{\n  int read_result;\n  \n  DAT_200711bc = 0;\n  read_result = _read(file_descriptor,buffer,count);\n  if ((read_result == -1) && (DAT_200711bc != 0)) {\n    *result = DAT_200711bc;\n    return;\n  }\n  return;\n}\n\n",
            "current_name": "read_and_check_error_00084728",
            "entrypoint": "0x00084728",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084728": "read_and_check_error_00084728",
                "iVar1": "read_result",
                "param_1": "result",
                "param_2": "file_descriptor",
                "param_3": "buffer",
                "param_4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084750": {
            "additional_data": {
                "FUN_00084750": {
                    "calculate_dividend": 1,
                    "calculate_division_and_remainder": 1,
                    "calculate_quotient": 1,
                    "calculate_result": 10,
                    "divide_and_check": 2,
                    "divide_and_check_if_zero": 1,
                    "divide_and_check_params": 1,
                    "divide_and_check_zero": 1,
                    "divide_or_negative_check": 1,
                    "divide_with_remainder": 1,
                    "divmod_helper": 5,
                    "divmod_or_default": 1,
                    "divmod_or_error": 1,
                    "perform_division": 1
                },
                "FUN_000847ac": {
                    "process_dividend": 1
                },
                "iVar1": {
                    "division_result": 1,
                    "quotient": 4,
                    "result": 18
                },
                "param_1": {
                    "a": 1,
                    "dividend": 14,
                    "input1": 5,
                    "input_1": 9,
                    "numerator": 2
                },
                "param_2": {
                    "b": 1,
                    "denominator": 1,
                    "divisor": 13,
                    "input2": 5,
                    "input_2": 9,
                    "param_2": 2
                },
                "param_3": {
                    "c": 1,
                    "input3": 5,
                    "input_3": 9,
                    "param3": 3,
                    "param_3": 2,
                    "quotient": 7,
                    "remainder": 2,
                    "unused1": 1,
                    "unused_1": 1
                },
                "param_4": {
                    "d": 1,
                    "input4": 5,
                    "input_4": 9,
                    "param4": 3,
                    "param_4": 2,
                    "quotient": 2,
                    "remainder": 7,
                    "unused2": 1,
                    "unused_2": 1
                },
                "param_5": {
                    "result": 3
                }
            },
            "called": [
                "FUN_000847ac"
            ],
            "calling": [
                "FUN_00082b38"
            ],
            "code": "\nint calculate_result_00084750(int dividend,int divisor,int input_3,int input_4)\n\n{\n  int result;\n  \n  if ((input_4 == 0) && (input_3 == 0)) {\n    if (divisor != 0 || dividend != 0) {\n      dividend = -1;\n    }\n    return dividend;\n  }\n  result = __gnu_uldivmod_helper();\n  return result;\n}\n\n",
            "current_name": "calculate_result_00084750",
            "entrypoint": "0x00084750",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084750": "calculate_result_00084750",
                "iVar1": "result",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "input_3",
                "param_4": "input_4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0008477c": {
            "additional_data": {
                "CONCAT44": {
                    "concatenate_uints": 1
                },
                "FUN_0008477c": {
                    "calculate_difference": 5,
                    "subtract_and_adjust": 2,
                    "subtract_and_assign": 1,
                    "subtract_and_divide": 1,
                    "subtract_and_set_values": 1,
                    "subtract_and_shift": 1,
                    "subtract_and_shift_right": 1,
                    "subtract_and_store": 2,
                    "subtract_and_store_difference": 1,
                    "subtract_and_store_result": 1,
                    "subtract_and_store_values": 1,
                    "subtract_and_update": 9,
                    "subtract_and_update_parameters": 1,
                    "subtract_and_update_params": 1,
                    "subtract_multiply": 1,
                    "subtract_param_and_multiply": 1,
                    "subtract_param_from_product": 1
                },
                "FUN_000847e0": {
                    "multiply_unsigned_ints": 1
                },
                "__divdi3": {
                    "divide_integers": 1,
                    "divide_signed_integers": 1,
                    "multiply_and_divide": 1
                },
                "lVar2": {
                    "calculated_value2": 1,
                    "div_result": 1,
                    "dividend": 1,
                    "division_result": 1,
                    "intermediate_result": 1,
                    "intermediate_value": 1,
                    "multiplied_value": 1,
                    "product": 12,
                    "product_high": 1,
                    "product_value": 1,
                    "result": 2,
                    "result1": 1,
                    "result_2": 1,
                    "result_long_long": 1,
                    "result_longlong": 2,
                    "temp_result": 1,
                    "temp_value": 1
                },
                "param_1": {
                    "data_1": 1,
                    "dividend": 2,
                    "initial_value": 1,
                    "input": 1,
                    "input1": 1,
                    "input_1": 2,
                    "input_param": 1,
                    "input_value": 18,
                    "input_value1": 1,
                    "original_value": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "another_input_value": 1,
                    "another_value": 1,
                    "count": 1,
                    "data_2": 1,
                    "divisor": 2,
                    "input2": 1,
                    "input_2": 2,
                    "input_integer": 1,
                    "input_value2": 1,
                    "int_value": 2,
                    "length": 2,
                    "offset_value": 1,
                    "param_2": 3,
                    "param_length": 1,
                    "param_size": 2,
                    "param_value": 3,
                    "second_input": 1,
                    "shift_amount": 1,
                    "subtracted_value": 1,
                    "subtraction_value": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "concat_param_1": 1,
                    "concatenated_value1": 1,
                    "concatenated_value_1": 1,
                    "data_3": 1,
                    "factor1": 1,
                    "fourth_param": 1,
                    "high_part": 1,
                    "low_word": 1,
                    "lower_divisor_half": 1,
                    "lower_parameter": 1,
                    "operand1": 1,
                    "operand_1": 1,
                    "operand_1_low": 1,
                    "param3": 1
                },
                "param_4": {
                    "concat_param_2": 1,
                    "concatenated_value2": 1,
                    "concatenated_value_2": 1,
                    "data_4": 1,
                    "factor2": 1,
                    "high_word": 1,
                    "higher_divisor_half": 1,
                    "low_part": 1,
                    "operand2": 1,
                    "operand_1_high": 1,
                    "operand_2": 1,
                    "param4": 1,
                    "third_param": 1,
                    "upper_parameter": 1
                },
                "param_5": {
                    "output": 1,
                    "output_array": 9,
                    "output_parameters": 1,
                    "output_values": 2,
                    "result": 1,
                    "result_array": 16,
                    "result_list": 1
                },
                "uVar1": {
                    "calculated_value": 2,
                    "calculated_value1": 1,
                    "calculation_result": 1,
                    "casted_result": 1,
                    "converted_div_result": 1,
                    "converted_value": 1,
                    "product_low": 2,
                    "product_lower_half": 1,
                    "result": 9,
                    "result2": 1,
                    "result_1": 1,
                    "result_low": 1,
                    "result_uint": 2,
                    "result_unsigned": 1,
                    "result_variable": 1,
                    "temp": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "unsigned_result": 1
                }
            },
            "called": [
                "FUN_000847e0"
            ],
            "calling": [],
            "code": "\nvoid subtract_and_update_params_0008477c(uint input_value,int param_value,undefined4 factor1,undefined4 third_param,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = divide_signed_integers();\n  product = product * concatenate_uints(third_param,factor1);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (param_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_update_params_0008477c",
            "entrypoint": "0x0008477c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_uints",
                "FUN_0008477c": "subtract_and_update_params_0008477c",
                "__divdi3": "divide_signed_integers",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "param_value",
                "param_3": "factor1",
                "param_4": "third_param",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847ac": {
            "additional_data": {
                "CONCAT44": {
                    "concatenate": 1
                },
                "FUN_000847ac": {
                    "calculate_difference": 6,
                    "calculate_subtraction_and_store": 1,
                    "subtract_and_adjust": 8,
                    "subtract_and_assign": 1,
                    "subtract_and_assign_values": 1,
                    "subtract_and_shift": 1,
                    "subtract_and_store": 3,
                    "subtract_and_store_difference": 1,
                    "subtract_and_store_result": 1,
                    "subtract_and_update": 4,
                    "subtract_and_update_values": 3,
                    "subtract_values": 1
                },
                "FUN_00084a80": {
                    "multiply_unsigned": 1
                },
                "__udivdi3": {
                    "divide": 1,
                    "divide_unsigned": 1,
                    "unsigned_division": 1
                },
                "lVar2": {
                    "calculated_value": 1,
                    "divided_value": 1,
                    "dividend": 1,
                    "division_result": 1,
                    "multiplication_result": 1,
                    "multiplied_value": 1,
                    "product": 12,
                    "product_as_longlong": 1,
                    "product_result": 1,
                    "quotient": 2,
                    "result": 3,
                    "result_l_var2": 1,
                    "result_long": 1,
                    "result_longlong": 1,
                    "temp_result": 2,
                    "temp_value": 1
                },
                "param_1": {
                    "initial_value": 2,
                    "input": 1,
                    "input1": 1,
                    "input_param": 4,
                    "input_param_1": 1,
                    "input_value": 21,
                    "original_value": 1
                },
                "param_2": {
                    "count_param": 1,
                    "current_value": 1,
                    "input2": 1,
                    "input_param": 1,
                    "input_param_2": 1,
                    "int_param": 2,
                    "int_value": 1,
                    "length": 1,
                    "length_param": 1,
                    "offset": 1,
                    "offset_value": 1,
                    "param": 2,
                    "param2": 3,
                    "param_2": 2,
                    "param_size": 1,
                    "param_value": 2,
                    "second_input": 1,
                    "second_param": 1,
                    "subtract_value": 3,
                    "subtraction_value": 2,
                    "value_to_subtract": 2
                },
                "param_3": {
                    "const_param1": 1,
                    "first_byte": 1,
                    "first_value": 1,
                    "high32": 1,
                    "input_param_3": 1,
                    "low_word_param": 1,
                    "lower32_bits": 1,
                    "lower_half_multiplier": 1,
                    "lower_half_param": 1,
                    "lower_part_multiplier": 1,
                    "multiplicand_low": 1,
                    "multiplier_1": 1,
                    "operand1": 1,
                    "operand_1": 1,
                    "param3": 3,
                    "param_4": 1,
                    "value_1": 2
                },
                "param_4": {
                    "const_param2": 1,
                    "high_word_param": 1,
                    "higher_half_param": 1,
                    "input_param_4": 1,
                    "low32": 1,
                    "multiplicand_high": 1,
                    "multiplier_2": 1,
                    "operand2": 1,
                    "operand_2": 1,
                    "param4": 3,
                    "param_3": 1,
                    "second_byte": 1,
                    "second_value": 1,
                    "upper32_bits": 1,
                    "upper_half_multiplier": 1,
                    "upper_part_multiplier": 1,
                    "value_2": 2
                },
                "param_5": {
                    "output": 1,
                    "output_array": 9,
                    "output_param": 2,
                    "output_values": 3,
                    "result_array": 16
                },
                "uVar1": {
                    "calculated_result": 1,
                    "calculated_value": 3,
                    "calculation_result": 1,
                    "lower_half_result": 1,
                    "multiplied_value": 1,
                    "product": 3,
                    "product_as_int": 1,
                    "product_low": 2,
                    "result": 8,
                    "result_as_uint": 1,
                    "result_u_var1": 1,
                    "result_uint": 1,
                    "result_unsigned": 1,
                    "result_value": 1,
                    "temp_result": 1,
                    "temporary_value": 1,
                    "uint_value": 1,
                    "unsigned_result": 1,
                    "updated_value": 1
                }
            },
            "called": [
                "FUN_00084a80"
            ],
            "calling": [
                "FUN_00084750"
            ],
            "code": "\nvoid subtract_and_assign_values_000847ac(uint input_value,int subtract_value,undefined4 param3,undefined4 param4,int *result_array)\n\n{\n  uint result;\n  longlong product;\n  \n  product = unsigned_division();\n  product = product * concatenate(param4,param3);\n  result = (uint)product;\n  *result_array = input_value - result;\n  result_array[1] = (subtract_value - (int)((ulonglong)product >> 0x20)) - (uint)(input_value < result);\n  return;\n}\n\n",
            "current_name": "subtract_and_assign_values_000847ac",
            "entrypoint": "0x000847ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate",
                "FUN_000847ac": "subtract_and_assign_values_000847ac",
                "__udivdi3": "unsigned_division",
                "lVar2": "product",
                "param_1": "input_value",
                "param_2": "subtract_value",
                "param_3": "param3",
                "param_4": "param4",
                "param_5": "result_array",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_000847e0": {
            "additional_data": {
                "FUN_000847e0": {
                    "calculate_division": 2,
                    "calculate_quotient_remainder": 1,
                    "div_and_mod": 1,
                    "divide_and_remainder": 1,
                    "divide_signed_integers": 1,
                    "divide_unsigned": 3,
                    "divide_unsigned_integers": 5,
                    "divide_with_overflow": 1,
                    "divide_with_overflow_check": 1,
                    "divide_with_remainder": 3,
                    "divide_without_overflow": 1,
                    "dividing_function": 1,
                    "division_with_overflow_check": 1,
                    "division_with_remainder": 2,
                    "integer_divide": 1,
                    "integer_division_with_remainder": 1,
                    "perform_division": 3,
                    "unsigned_division": 1
                },
                "bVar13": {
                    "borrow": 1,
                    "carry_flag": 12,
                    "has_carry": 2,
                    "is_carry": 4,
                    "is_negative": 1,
                    "is_negative_divisor": 1
                },
                "bVar15": {
                    "carry_flag": 1
                },
                "bVar16": {
                    "b_var16": 1
                },
                "bVar17": {
                    "b_var17": 1
                },
                "bVar18": {
                    "b_var18": 1,
                    "bit_flag": 1
                },
                "bVar19": {
                    "b_var19": 1
                },
                "bVar20": {
                    "b_var20": 1
                },
                "bVar21": {
                    "b_var21": 1
                },
                "bVar22": {
                    "b_var22": 1
                },
                "bVar23": {
                    "b_var23": 1
                },
                "iVar16": {
                    "leading_zero_count": 1
                },
                "iVar6": {
                    "bit_shift": 2,
                    "bit_shift_amount": 1,
                    "bit_shift_count": 1,
                    "i_var6": 1,
                    "quotient_bit_count": 1,
                    "shift": 1,
                    "shift_amount": 10,
                    "shift_count": 5
                },
                "lVar1": {
                    "extended_divisor_multiplication": 1,
                    "product": 2,
                    "quotient": 3,
                    "quotient_product": 1,
                    "quotient_remainder": 1,
                    "result": 2,
                    "temp": 3,
                    "temp_large_variable": 1,
                    "temp_long": 3,
                    "temp_long1": 1,
                    "temp_product": 1,
                    "temporary_long_long": 1
                },
                "param_1": {
                    "dividend": 30,
                    "input_value_1": 1
                },
                "param_2": {
                    "div_remainder": 1,
                    "dividend_high": 11,
                    "dividend_low_bits": 1,
                    "dividend_lower": 2,
                    "dividend_quotient": 1,
                    "dividend_sign": 1,
                    "dividend_temp": 1,
                    "dividend_top": 1,
                    "dividend_upper32": 2,
                    "dividend_upper_bits": 1,
                    "dividend_upper_half": 1,
                    "divisor": 6,
                    "input_value_2": 1,
                    "quotient": 1
                },
                "param_3": {
                    "divisor": 20,
                    "divisor_high": 3,
                    "divisor_upper32": 1,
                    "input_value_3": 1,
                    "quotient": 6
                },
                "param_4": {
                    "divisor_high": 11,
                    "divisor_low": 3,
                    "divisor_low_bits": 1,
                    "divisor_lower": 2,
                    "divisor_lower32": 1,
                    "divisor_sign": 1,
                    "divisor_temp": 1,
                    "divisor_top": 1,
                    "divisor_upper32": 1,
                    "divisor_upper_bits": 1,
                    "divisor_upper_half": 1,
                    "input_value_4": 1,
                    "remainder": 6
                },
                "uVar1": {
                    "quotient_high_bits": 1,
                    "temp8": 1
                },
                "uVar10": {
                    "divisor_partial": 1,
                    "divisor_shifted": 1,
                    "divisor_sign": 1,
                    "is_divisor_negative": 7,
                    "is_neg_divisor": 1,
                    "is_negative_divisor": 3,
                    "neg_quotient1": 1,
                    "negative_divisor": 1,
                    "quotient1_3": 1,
                    "quotient3": 1,
                    "quotient_sign": 1,
                    "quotient_temp1": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_quotient": 1,
                    "temp_quotient_low": 1,
                    "temp_value1": 1,
                    "tmp4": 1,
                    "u_var10": 2
                },
                "uVar11": {
                    "is_quotient_negative": 2,
                    "neg_quotient2": 1,
                    "quotient2_3": 1,
                    "quotient4": 1,
                    "quotient_multiplier_bit_count": 1,
                    "quotient_remainder_divisor": 1,
                    "quotient_temp2": 1,
                    "remainder_low": 1,
                    "remainder_partial": 1,
                    "shift_amount": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 3,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_divisor_partial": 1,
                    "temp_quotient": 1,
                    "temp_quotient_high": 2,
                    "temp_quotient_low": 1,
                    "temp_value2": 1,
                    "tmp1": 1,
                    "tmp5": 1,
                    "u_var11": 2,
                    "var11": 1
                },
                "uVar12": {
                    "divisor_concatenated": 1,
                    "divisor_low": 1,
                    "divisor_shifted2": 1,
                    "extended_divisor": 2,
                    "extended_divisor_low": 1,
                    "is_product_negative": 1,
                    "partial_divisor": 1,
                    "quotient_divisor": 1,
                    "remainder_sign": 1,
                    "result_upper": 1,
                    "shifted_divisor": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp6": 3,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_quotient_high": 1,
                    "temp_value3": 1,
                    "tmp2": 1,
                    "tmp6": 1,
                    "u_var12": 4,
                    "var12": 1
                },
                "uVar13": {
                    "carry_flag": 2,
                    "is_dividend_less": 1,
                    "is_negative_dividend": 1,
                    "temp9": 1,
                    "u_var13": 1
                },
                "uVar14": {
                    "is_divisor_less": 1,
                    "is_negative_quotient": 1,
                    "shifted_dividend": 1,
                    "shifted_divisor": 1,
                    "subtraction_result": 1,
                    "temp10": 1,
                    "temp_divided_quotient_lower32": 1,
                    "u_var14": 1
                },
                "uVar15": {
                    "is_divisor_less_or_equal": 1,
                    "is_negative_result": 1,
                    "quotient": 1,
                    "temp_divided_quotient_upper32": 1,
                    "temp_divisor": 1,
                    "u_var15": 1
                },
                "uVar16": {
                    "remainder": 1,
                    "shift_difference": 1,
                    "temp_remainder": 1,
                    "temp_remainder_lower32": 1
                },
                "uVar17": {
                    "remainder": 1,
                    "temp5": 1,
                    "temp_remainder_upper32": 1
                },
                "uVar18": {
                    "remainder_upper": 1
                },
                "uVar2": {
                    "divided_quotient_lower32": 1,
                    "dividend_high": 1,
                    "quotient": 8,
                    "quotient1": 3,
                    "quotient_final": 1,
                    "quotient_high": 2,
                    "quotient_low": 11,
                    "quotient_low_bits": 1,
                    "quotient_lower32": 1,
                    "quotient_result": 1,
                    "quotient_upper_half": 1
                },
                "uVar3": {
                    "divided_quotient_upper32": 1,
                    "quotient2": 3,
                    "quotient_high": 14,
                    "quotient_low": 2,
                    "quotient_lower_half": 1,
                    "quotient_remainder": 1,
                    "quotient_temp": 1,
                    "quotient_upper": 3,
                    "quotient_upper32": 1,
                    "remainder": 2,
                    "remainder_final": 1,
                    "temp1": 1
                },
                "uVar4": {
                    "dividend_low": 1,
                    "dividend_remainder": 1,
                    "divisor_high": 1,
                    "divisor_high_shifted": 1,
                    "divisor_low": 1,
                    "divisor_quotient": 1,
                    "divisor_shifted": 1,
                    "divisor_upper": 1,
                    "quotient": 1,
                    "quotient3": 2,
                    "quotient_bit_shift": 1,
                    "quotient_lower32": 1,
                    "quotient_quotient": 1,
                    "quotient_remainder": 1,
                    "quotient_temp1": 2,
                    "remainder_low": 1,
                    "temp1": 7,
                    "temp2": 1,
                    "tmp1": 1,
                    "u_var4": 3
                },
                "uVar5": {
                    "divisor_low": 1,
                    "mul_result_lower": 1,
                    "partial_product": 1,
                    "product": 1,
                    "product_low": 1,
                    "quotient4": 2,
                    "quotient_low": 1,
                    "quotient_multiplier": 1,
                    "quotient_partial": 1,
                    "quotient_partial_divisor": 1,
                    "quotient_temp2": 2,
                    "quotient_upper32": 1,
                    "remainder_high": 1,
                    "remainder_low": 1,
                    "remainder_upper_half": 1,
                    "temp2": 6,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_divisor_quotient": 1,
                    "tmp2": 1,
                    "u_var5": 3
                },
                "uVar6": {
                    "quotient_dividend": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temporary_value": 1,
                    "u_var6": 1
                },
                "uVar7": {
                    "carry": 2,
                    "divisor_product": 1,
                    "divisor_remainder": 1,
                    "mult1": 1,
                    "partial_dividend_low": 1,
                    "product": 1,
                    "quotient_divisor": 1,
                    "quotient_partial": 1,
                    "quotient_temp": 1,
                    "remainder": 3,
                    "remainder_lower32": 1,
                    "remainder_result": 1,
                    "temp": 1,
                    "temp1": 5,
                    "temp3": 3,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_dividend_low": 1,
                    "temp_low": 2,
                    "u_var7": 2
                },
                "uVar8": {
                    "dividend_partial": 2,
                    "divisor_quotient": 1,
                    "mult2": 1,
                    "partial_dividend_high": 1,
                    "quotient_remainder": 1,
                    "remainder_high": 3,
                    "remainder_remainder": 1,
                    "remainder_upper32": 1,
                    "temp2": 4,
                    "temp3": 2,
                    "temp4": 3,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_dividend": 1,
                    "temp_dividend_high": 1,
                    "temp_high": 2,
                    "temp_upper": 1,
                    "temporary_value": 1,
                    "tmp3": 1,
                    "u_var8": 2
                },
                "uVar9": {
                    "dividend_sign": 2,
                    "is_dividend_negative": 10,
                    "is_divisor_negative": 1,
                    "is_neg_dividend": 2,
                    "is_negative": 2,
                    "is_negative1": 1,
                    "is_negative_dividend": 7,
                    "neg_flag": 1,
                    "negative_dividend": 1,
                    "sign1": 2,
                    "u_var9": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0008477c"
            ],
            "code": "\nundefined8 divide_unsigned_integers_000847e0(uint dividend,uint dividend_high,uint divisor,uint divisor_high)\n\n{\n  longlong temp;\n  uint quotient_low;\n  uint quotient_high;\n  uint temp1;\n  uint temp2;\n  int shift_amount;\n  uint temp1;\n  uint temp2;\n  uint is_dividend_negative;\n  uint is_divisor_negative;\n  uint temp5;\n  uint u_var12;\n  bool carry_flag;\n  \n  if ((int)dividend_high < 0) {\n    carry_flag = dividend != 0;\n    dividend = -dividend;\n    dividend_high = -dividend_high - (uint)carry_flag;\n    is_dividend_negative = 0xffffffff;\n  }\n  else {\n    is_dividend_negative = 0;\n  }\n  if ((int)divisor_high < 0) {\n    is_dividend_negative = ~is_dividend_negative;\n    carry_flag = divisor != 0;\n    divisor = -divisor;\n    divisor_high = -divisor_high - (uint)carry_flag;\n  }\n  if (divisor_high == 0) {\n    if (dividend_high < divisor) {\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount != 0) {\n        quotient_high = dividend >> (0x20U - shift_amount & 0xff);\n        divisor = divisor << shift_amount;\n        dividend = dividend << shift_amount;\n        dividend_high = dividend_high << shift_amount | quotient_high;\n      }\n      quotient_low = divisor >> 0x10;\n      temp1 = dividend_high / quotient_low;\n      temp1 = (divisor & 0xffff) * temp1;\n      is_divisor_negative = dividend >> 0x10 | (dividend_high - quotient_low * temp1) * 0x10000;\n      quotient_high = temp1;\n      if (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0) {\n        carry_flag = CARRY4(is_divisor_negative,divisor);\n        is_divisor_negative = is_divisor_negative + divisor;\n        quotient_high = temp1 - 1;\n        if ((carry_flag == false) && (is_divisor_negative <= temp1 && temp1 - is_divisor_negative != 0)) {\n          quotient_high = temp1 - 2;\n          is_divisor_negative = is_divisor_negative + divisor;\n        }\n      }\n      temp2 = (is_divisor_negative - temp1) / quotient_low;\n      temp1 = (divisor & 0xffff) * temp2;\n      temp1 = dividend & 0xffff | ((is_divisor_negative - temp1) - quotient_low * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= temp1 && temp1 - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= temp1 && temp1 - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      quotient_high = 0;\n    }\n    else {\n      if (divisor == 0) {\n        divisor = 1 / 0;\n      }\n      shift_amount = LZCOUNT(divisor);\n      if (shift_amount == 0) {\n        dividend_high = dividend_high - divisor;\n        temp1 = divisor >> 0x10;\n        u_var12 = divisor & 0xffff;\n        quotient_high = 1;\n      }\n      else {\n        divisor = divisor << shift_amount;\n        quotient_high = dividend_high >> (0x20U - shift_amount & 0xff);\n        temp1 = divisor >> 0x10;\n        is_divisor_negative = quotient_high / temp1;\n        u_var12 = divisor & 0xffff;\n        temp1 = u_var12 * is_divisor_negative;\n        temp2 = dividend >> (0x20U - shift_amount & 0xff) | dividend_high << shift_amount;\n        quotient_high = temp2 >> 0x10 | (quotient_high - temp1 * is_divisor_negative) * 0x10000;\n        dividend = dividend << shift_amount;\n        quotient_low = is_divisor_negative;\n        if (quotient_high <= temp1 && temp1 - quotient_high != 0) {\n          carry_flag = CARRY4(quotient_high,divisor);\n          quotient_high = quotient_high + divisor;\n          quotient_low = is_divisor_negative - 1;\n          if ((carry_flag == false) && (quotient_high <= temp1 && temp1 - quotient_high != 0)) {\n            quotient_low = is_divisor_negative - 2;\n            quotient_high = quotient_high + divisor;\n          }\n        }\n        temp2 = (quotient_high - temp1) / temp1;\n        is_divisor_negative = u_var12 * temp2;\n        dividend_high = temp2 & 0xffff | ((quotient_high - temp1) - temp1 * temp2) * 0x10000;\n        quotient_high = temp2;\n        if (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0) {\n          carry_flag = CARRY4(dividend_high,divisor);\n          dividend_high = dividend_high + divisor;\n          quotient_high = temp2 - 1;\n          if ((carry_flag == false) && (dividend_high <= is_divisor_negative && is_divisor_negative - dividend_high != 0)) {\n            quotient_high = temp2 - 2;\n            dividend_high = dividend_high + divisor;\n          }\n        }\n        dividend_high = dividend_high - is_divisor_negative;\n        quotient_high = quotient_high | quotient_low << 0x10;\n      }\n      quotient_low = dividend_high / temp1;\n      is_divisor_negative = u_var12 * quotient_low;\n      temp2 = dividend >> 0x10 | (dividend_high - temp1 * quotient_low) * 0x10000;\n      temp1 = quotient_low;\n      if (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0) {\n        carry_flag = CARRY4(temp2,divisor);\n        temp2 = temp2 + divisor;\n        temp1 = quotient_low - 1;\n        if ((carry_flag == false) && (temp2 <= is_divisor_negative && is_divisor_negative - temp2 != 0)) {\n          temp1 = quotient_low - 2;\n          temp2 = temp2 + divisor;\n        }\n      }\n      temp2 = (temp2 - is_divisor_negative) / temp1;\n      u_var12 = u_var12 * temp2;\n      temp1 = dividend & 0xffff | ((temp2 - is_divisor_negative) - temp1 * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= u_var12 && u_var12 - temp1 != 0) {\n        quotient_low = temp2 - 1;\n        if ((CARRY4(temp1,divisor) == false) &&\n           (temp1 + divisor <= u_var12 && u_var12 - (temp1 + divisor) != 0)) {\n          quotient_low = temp2 - 2;\n        }\n      }\n      quotient_low = quotient_low | temp1 << 0x10;\n    }\n  }\n  else if (dividend_high < divisor_high) {\n    quotient_high = 0;\n    quotient_low = 0;\n  }\n  else {\n    shift_amount = LZCOUNT(divisor_high);\n    if (shift_amount == 0) {\n      if ((divisor_high < dividend_high) || (divisor <= dividend)) {\n        quotient_high = 0;\n        quotient_low = 1;\n      }\n      else {\n        quotient_low = 0;\n        quotient_high = 0;\n      }\n    }\n    else {\n      quotient_high = 0x20 - shift_amount;\n      temp1 = dividend_high >> (quotient_high & 0xff);\n      u_var12 = divisor >> (quotient_high & 0xff) | divisor_high << shift_amount;\n      is_divisor_negative = u_var12 >> 0x10;\n      quotient_low = temp1 / is_divisor_negative;\n      temp2 = (u_var12 & 0xffff) * quotient_low;\n      temp1 = dividend_high << shift_amount | dividend >> (quotient_high & 0xff);\n      temp1 = temp1 >> 0x10 | (temp1 - is_divisor_negative * quotient_low) * 0x10000;\n      quotient_high = quotient_low;\n      if (temp1 <= temp2 && temp2 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,u_var12);\n        temp1 = temp1 + u_var12;\n        quotient_high = quotient_low - 1;\n        if ((carry_flag == false) && (temp1 <= temp2 && temp2 - temp1 != 0)) {\n          quotient_high = quotient_low - 2;\n          temp1 = temp1 + u_var12;\n        }\n      }\n      temp2 = (temp1 - temp2) / is_divisor_negative;\n      temp5 = (u_var12 & 0xffff) * temp2;\n      temp1 = temp1 & 0xffff | ((temp1 - temp2) - is_divisor_negative * temp2) * 0x10000;\n      quotient_low = temp2;\n      if (temp1 <= temp5 && temp5 - temp1 != 0) {\n        carry_flag = CARRY4(temp1,u_var12);\n        temp1 = temp1 + u_var12;\n        quotient_low = temp2 - 1;\n        if ((carry_flag == false) && (temp1 <= temp5 && temp5 - temp1 != 0)) {\n          quotient_low = temp2 - 2;\n          temp1 = temp1 + u_var12;\n        }\n      }\n      quotient_low = quotient_low | quotient_high << 0x10;\n      temp = (ulonglong)quotient_low * (ulonglong)(divisor << shift_amount);\n      temp1 = (uint)((ulonglong)temp >> 0x20);\n      quotient_high = 0;\n      if ((temp1 - temp5 < temp1) ||\n         ((temp1 - temp5 == temp1 && (dividend << shift_amount < (uint)temp)))) {\n        quotient_low = quotient_low - 1;\n        quotient_high = 0;\n      }\n    }\n  }\n  if (is_dividend_negative != 0) {\n    carry_flag = quotient_low != 0;\n    quotient_low = -quotient_low;\n    quotient_high = -quotient_high - (uint)carry_flag;\n  }\n  return CONCAT44(quotient_high,quotient_low);\n}\n\n",
            "current_name": "divide_unsigned_integers_000847e0",
            "entrypoint": "0x000847e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_000847e0": "divide_unsigned_integers_000847e0",
                "bVar13": "carry_flag",
                "iVar6": "shift_amount",
                "lVar1": "temp",
                "param_1": "dividend",
                "param_2": "dividend_high",
                "param_3": "divisor",
                "param_4": "divisor_high",
                "uVar1": "temp8",
                "uVar10": "is_divisor_negative",
                "uVar11": "temp5",
                "uVar12": "u_var12",
                "uVar2": "quotient_low",
                "uVar3": "quotient_high",
                "uVar4": "temp1",
                "uVar5": "temp2",
                "uVar7": "temp1",
                "uVar8": "temp2",
                "uVar9": "is_dividend_negative"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00084a80": {
            "additional_data": {
                "FUN_00084a80": {
                    "calculate_divide_remainder": 1,
                    "calculate_division": 2,
                    "calculate_division_remainder": 1,
                    "calculate_quotient": 6,
                    "calculate_quotient_and_remainder": 1,
                    "calculate_quotient_remainder": 2,
                    "div_mod": 3,
                    "divide_and_multiply_uintegers": 1,
                    "divide_and_remainder": 4,
                    "divide_uintegers": 1,
                    "divide_unsigned": 1,
                    "divide_with_remainder": 2,
                    "divided_multiplication": 1,
                    "division_operation": 1,
                    "perform_division": 3,
                    "reverse_division": 1
                },
                "bVar11": {
                    "carry": 4,
                    "carry_flag": 16,
                    "carry_occurred": 1,
                    "has_carry": 1,
                    "is_carry": 4,
                    "is_carry_flag": 1
                },
                "iVar10": {
                    "bit_count": 3,
                    "bit_shift": 1,
                    "leading_zeros": 3,
                    "num_shifts": 1,
                    "offset": 1,
                    "shift": 3,
                    "shift_amount": 6,
                    "shift_bits": 1,
                    "shift_count": 11
                },
                "iVar11": {
                    "shift_count": 1
                },
                "lVar1": {
                    "calculation_result": 1,
                    "mul_result": 1,
                    "partial_product": 1,
                    "product": 2,
                    "product_temp": 1,
                    "quotient": 2,
                    "result": 7,
                    "temp_long": 1,
                    "temp_result": 2
                },
                "param_1": {
                    "dividend": 30,
                    "numerator": 1
                },
                "param_2": {
                    "denominator": 1,
                    "dividend_high": 4,
                    "dividend_lower": 1,
                    "dividend_upper": 2,
                    "dividend_upper32": 1,
                    "divisor": 22
                },
                "param_3": {
                    "divisor": 8,
                    "quotient": 13,
                    "quotient1": 2,
                    "quotient_high": 2,
                    "quotient_part1": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp_1": 1,
                    "u_var_a": 1
                },
                "param_4": {
                    "divisor_high": 4,
                    "divisor_upper": 3,
                    "divisor_upper32": 1,
                    "quotient2": 2,
                    "quotient_low": 2,
                    "quotient_part2": 1,
                    "remainder": 14,
                    "temp2": 2,
                    "temp_2": 1,
                    "u_var_b": 1
                },
                "uVar10": {
                    "remainder_high": 1
                },
                "uVar11": {
                    "c_var": 1,
                    "carry": 1
                },
                "uVar12": {
                    "carry": 1
                },
                "uVar2": {
                    "bit_result": 1,
                    "partial_quotient": 1,
                    "q1": 1,
                    "quotient": 3,
                    "quotient1": 3,
                    "quotient_low": 4,
                    "quotient_lower": 1,
                    "quotient_upper32": 1,
                    "result": 5,
                    "result1": 4,
                    "result_high": 2,
                    "result_low": 1,
                    "result_part1": 1,
                    "result_upper": 1,
                    "temp1": 1,
                    "u_quotient_high": 1
                },
                "uVar3": {
                    "bit_divisor": 1,
                    "dividend1": 1,
                    "dividend_low": 1,
                    "dividend_lsb": 1,
                    "dividend_partial": 1,
                    "divisor1": 1,
                    "divisor_low": 2,
                    "divisor_lower16": 1,
                    "q2": 1,
                    "quotient1": 3,
                    "quotient2": 1,
                    "quotient_1": 1,
                    "quotient_high": 1,
                    "quotient_high1": 1,
                    "quotient_low": 1,
                    "quotient_part1": 1,
                    "quotient_portion": 1,
                    "quotient_upper": 1,
                    "remainder1": 1,
                    "result_part2": 1,
                    "shifted_dividend": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp_divisor": 1,
                    "temp_divisor_low": 1,
                    "u_dividend_high": 1,
                    "u_quotient_low": 1
                },
                "uVar4": {
                    "bit_quotient": 1,
                    "divisor_lsb": 1,
                    "divisor_partial": 1,
                    "divisor_quotient": 1,
                    "partial_quotient": 1,
                    "q3": 1,
                    "quotient1_tmp": 1,
                    "quotient2": 1,
                    "quotient_high": 1,
                    "quotient_low1": 1,
                    "quotient_mid": 1,
                    "quotient_part2": 1,
                    "quotient_partial": 1,
                    "remainder": 1,
                    "remainder1": 3,
                    "remainder_low": 2,
                    "temp1": 4,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_quotient": 2,
                    "temp_result1": 1,
                    "u_divisor": 1,
                    "u_partial_quotient_high": 1
                },
                "uVar5": {
                    "bit_remainder": 1,
                    "dividend2": 1,
                    "dividend_remainder": 3,
                    "multiplication_low": 1,
                    "multiplier": 2,
                    "multiply_tmp": 1,
                    "partial_product": 1,
                    "partial_product1": 1,
                    "partial_remainder": 1,
                    "product1": 1,
                    "product_low": 1,
                    "q4": 1,
                    "remainder1": 1,
                    "remainder2": 1,
                    "remainder_lower": 1,
                    "remainder_portion": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_low": 1,
                    "temp_quotient": 1,
                    "temp_remainder_low": 1,
                    "temp_result": 1,
                    "temp_result1_lower16": 1,
                    "u_multiplier": 1,
                    "u_partial_quotient_low": 1
                },
                "uVar6": {
                    "dividend1": 1,
                    "dividend_high_bits": 1,
                    "dividend_low": 1,
                    "dividend_part1": 1,
                    "dividend_shifted": 2,
                    "dividend_shifted1": 1,
                    "partial_dividend": 1,
                    "product1": 1,
                    "quotient2": 1,
                    "quotient3": 1,
                    "quotient_mid": 1,
                    "remainder_upper": 1,
                    "remainder_upper32": 1,
                    "result2": 1,
                    "result_low": 1,
                    "result_lower": 1,
                    "shifted_result": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 2,
                    "temp5": 1,
                    "temp_dividend": 2,
                    "temp_dividend_low": 1,
                    "temp_remainder": 1,
                    "u_product_high": 1
                },
                "uVar7": {
                    "dividend3": 1,
                    "dividend_part2": 1,
                    "divisor_remainder": 2,
                    "partial_product2": 1,
                    "partial_remainder": 1,
                    "product2": 1,
                    "quotient1": 1,
                    "quotient2": 1,
                    "quotient3": 1,
                    "quotient_2": 1,
                    "quotient_final": 1,
                    "quotient_high": 1,
                    "quotient_lower16": 1,
                    "quotient_mid": 1,
                    "remainder": 1,
                    "remainder2": 2,
                    "temp": 1,
                    "temp2": 3,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp_high": 1,
                    "temp_remainder": 2,
                    "temp_result": 1,
                    "u_multiplier_high": 1,
                    "u_product_low": 1
                },
                "uVar8": {
                    "carry": 1,
                    "dividend_shifted": 1,
                    "dividend_upper_quotient": 1,
                    "divisor_high_bits": 1,
                    "divisor_part1": 1,
                    "divisor_quotient1": 1,
                    "partial_quotient": 1,
                    "partial_quotient_1": 1,
                    "quotient": 1,
                    "quotient2": 2,
                    "quotient2_tmp": 1,
                    "quotient3": 1,
                    "quotient4": 1,
                    "quotient_adjustment": 1,
                    "quotient_high": 2,
                    "quotient_mid": 1,
                    "quotient_mid_high": 1,
                    "quotient_part": 1,
                    "remainder2": 1,
                    "temp": 1,
                    "temp3": 1,
                    "temp5": 2,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_quotient1": 1,
                    "temp_result2": 1,
                    "u_dividend_high": 1,
                    "u_divisor_high": 1
                },
                "uVar9": {
                    "dividend4": 1,
                    "dividend_remainder_quotient": 1,
                    "divisor_part2": 1,
                    "divisor_quotient2": 1,
                    "exact_div": 1,
                    "final_quotient": 1,
                    "multiply_tmp_2": 1,
                    "partial_product_1": 1,
                    "quotient3": 1,
                    "quotient4": 1,
                    "quotient_temp": 1,
                    "remainder3": 1,
                    "remainder_final": 1,
                    "remainder_high": 1,
                    "remainder_low": 1,
                    "remainder_mid": 2,
                    "remainder_part": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_dividend_high": 1,
                    "temp_remainder1": 1,
                    "temp_result2": 1,
                    "temp_result2_lower16": 1,
                    "u_dividend_low": 1,
                    "u_partial_product_high": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_000847ac"
            ],
            "code": "\nulonglong calculate_quotient_and_remainder_00084a80(uint dividend,uint divisor,uint quotient,uint remainder)\n\n{\n  longlong result;\n  uint result;\n  uint quotient1;\n  uint temp1;\n  uint dividend_remainder;\n  uint temp_dividend;\n  uint temp2;\n  uint quotient2;\n  uint remainder_mid;\n  int shift_count;\n  bool carry_flag;\n  \n  if (remainder == 0) {\n    if (quotient <= divisor) {\n      if (quotient == 0) {\n        quotient = 1 / 0;\n      }\n      shift_count = LZCOUNT(quotient);\n      if (shift_count == 0) {\n        divisor = divisor - quotient;\n        quotient1 = quotient >> 0x10;\n        dividend_remainder = quotient & 0xffff;\n        result = 1;\n      }\n      else {\n        quotient = quotient << shift_count;\n        quotient2 = divisor >> (0x20U - shift_count & 0xff);\n        quotient1 = quotient >> 0x10;\n        remainder_mid = quotient2 / quotient1;\n        dividend_remainder = quotient & 0xffff;\n        result = dividend_remainder * remainder_mid;\n        temp_dividend = dividend >> (0x20U - shift_count & 0xff) | divisor << shift_count;\n        temp1 = temp_dividend >> 0x10 | (quotient2 - quotient1 * remainder_mid) * 0x10000;\n        dividend = dividend << shift_count;\n        quotient2 = remainder_mid;\n        if (temp1 <= result && result - temp1 != 0) {\n          carry_flag = CARRY4(temp1,quotient);\n          temp1 = temp1 + quotient;\n          quotient2 = remainder_mid - 1;\n          if ((carry_flag == false) && (temp1 <= result && result - temp1 != 0)) {\n            quotient2 = remainder_mid - 2;\n            temp1 = temp1 + quotient;\n          }\n        }\n        temp2 = (temp1 - result) / quotient1;\n        remainder_mid = dividend_remainder * temp2;\n        divisor = temp_dividend & 0xffff | ((temp1 - result) - quotient1 * temp2) * 0x10000;\n        result = temp2;\n        if (divisor <= remainder_mid && remainder_mid - divisor != 0) {\n          carry_flag = CARRY4(divisor,quotient);\n          divisor = divisor + quotient;\n          result = temp2 - 1;\n          if ((carry_flag == false) && (divisor <= remainder_mid && remainder_mid - divisor != 0)) {\n            result = temp2 - 2;\n            divisor = divisor + quotient;\n          }\n        }\n        divisor = divisor - remainder_mid;\n        result = result | quotient2 << 0x10;\n      }\n      remainder_mid = divisor / quotient1;\n      temp1 = dividend_remainder * remainder_mid;\n      temp_dividend = dividend >> 0x10 | (divisor - quotient1 * remainder_mid) * 0x10000;\n      quotient2 = remainder_mid;\n      if (temp_dividend <= temp1 && temp1 - temp_dividend != 0) {\n        carry_flag = CARRY4(temp_dividend,quotient);\n        temp_dividend = temp_dividend + quotient;\n        quotient2 = remainder_mid - 1;\n        if ((carry_flag == false) && (temp_dividend <= temp1 && temp1 - temp_dividend != 0)) {\n          quotient2 = remainder_mid - 2;\n          temp_dividend = temp_dividend + quotient;\n        }\n      }\n      remainder_mid = (temp_dividend - temp1) / quotient1;\n      dividend_remainder = dividend_remainder * remainder_mid;\n      temp_dividend = dividend & 0xffff | ((temp_dividend - temp1) - quotient1 * remainder_mid) * 0x10000;\n      quotient1 = remainder_mid;\n      if (temp_dividend <= dividend_remainder && dividend_remainder - temp_dividend != 0) {\n        quotient1 = remainder_mid - 1;\n        if ((CARRY4(temp_dividend,quotient) == false) &&\n           (temp_dividend + quotient <= dividend_remainder && dividend_remainder - (temp_dividend + quotient) != 0)) {\n          quotient1 = remainder_mid - 2;\n        }\n      }\n      return CONCAT44(result,quotient1 | quotient2 << 0x10);\n    }\n    shift_count = LZCOUNT(quotient);\n    if (shift_count != 0) {\n      quotient2 = dividend >> (0x20U - shift_count & 0xff);\n      quotient = quotient << shift_count;\n      dividend = dividend << shift_count;\n      divisor = quotient2 | divisor << shift_count;\n    }\n    result = quotient >> 0x10;\n    quotient1 = divisor / result;\n    dividend_remainder = (quotient & 0xffff) * quotient1;\n    remainder_mid = dividend >> 0x10 | (divisor - result * quotient1) * 0x10000;\n    quotient2 = quotient1;\n    if (remainder_mid <= dividend_remainder && dividend_remainder - remainder_mid != 0) {\n      carry_flag = CARRY4(remainder_mid,quotient);\n      remainder_mid = remainder_mid + quotient;\n      quotient2 = quotient1 - 1;\n      if ((carry_flag == false) && (remainder_mid <= dividend_remainder && dividend_remainder - remainder_mid != 0)) {\n        quotient2 = quotient1 - 2;\n        remainder_mid = remainder_mid + quotient;\n      }\n    }\n    temp_dividend = (remainder_mid - dividend_remainder) / result;\n    quotient1 = (quotient & 0xffff) * temp_dividend;\n    dividend_remainder = dividend & 0xffff | ((remainder_mid - dividend_remainder) - result * temp_dividend) * 0x10000;\n    result = temp_dividend;\n    if (dividend_remainder <= quotient1 && quotient1 - dividend_remainder != 0) {\n      result = temp_dividend - 1;\n      if ((CARRY4(dividend_remainder,quotient) == false) &&\n         (dividend_remainder + quotient <= quotient1 && quotient1 - (dividend_remainder + quotient) != 0)) {\n        result = temp_dividend - 2;\n      }\n    }\n    result = result | quotient2 << 0x10;\n  }\n  else {\n    if (divisor < remainder) {\n      return 0;\n    }\n    shift_count = LZCOUNT(remainder);\n    if (shift_count == 0) {\n      if ((remainder < divisor) || (quotient <= dividend)) {\n        return 1;\n      }\n      result = 0;\n    }\n    else {\n      result = 0x20 - shift_count;\n      quotient2 = divisor >> (result & 0xff);\n      quotient1 = remainder << shift_count | quotient >> (result & 0xff);\n      dividend_remainder = quotient1 >> 0x10;\n      temp1 = quotient2 / dividend_remainder;\n      remainder_mid = (quotient1 & 0xffff) * temp1;\n      temp_dividend = dividend >> (result & 0xff) | divisor << shift_count;\n      result = temp_dividend >> 0x10 | (quotient2 - dividend_remainder * temp1) * 0x10000;\n      quotient2 = temp1;\n      if (result <= remainder_mid && remainder_mid - result != 0) {\n        carry_flag = CARRY4(result,quotient1);\n        result = result + quotient1;\n        quotient2 = temp1 - 1;\n        if ((carry_flag == false) && (result <= remainder_mid && remainder_mid - result != 0)) {\n          quotient2 = temp1 - 2;\n          result = result + quotient1;\n        }\n      }\n      temp1 = (result - remainder_mid) / dividend_remainder;\n      temp2 = (quotient1 & 0xffff) * temp1;\n      dividend_remainder = temp_dividend & 0xffff | ((result - remainder_mid) - dividend_remainder * temp1) * 0x10000;\n      result = temp1;\n      if (dividend_remainder <= temp2 && temp2 - dividend_remainder != 0) {\n        carry_flag = CARRY4(dividend_remainder,quotient1);\n        dividend_remainder = dividend_remainder + quotient1;\n        result = temp1 - 1;\n        if ((carry_flag == false) && (dividend_remainder <= temp2 && temp2 - dividend_remainder != 0)) {\n          result = temp1 - 2;\n          dividend_remainder = dividend_remainder + quotient1;\n        }\n      }\n      result = result | quotient2 << 0x10;\n      result = (ulonglong)result * (ulonglong)(quotient << shift_count);\n      quotient2 = (uint)((ulonglong)result >> 0x20);\n      if ((dividend_remainder - temp2 < quotient2) || ((dividend_remainder - temp2 == quotient2 && (dividend << shift_count < (uint)result)))\n         ) {\n        result = result - 1;\n      }\n    }\n  }\n  return (ulonglong)result;\n}\n\n",
            "current_name": "calculate_quotient_and_remainder_00084a80",
            "entrypoint": "0x00084a80",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_00084a80": "calculate_quotient_and_remainder_00084a80",
                "bVar11": "carry_flag",
                "iVar10": "shift_count",
                "lVar1": "result",
                "param_1": "dividend",
                "param_2": "divisor",
                "param_3": "quotient",
                "param_4": "remainder",
                "uVar2": "result",
                "uVar3": "quotient1",
                "uVar4": "temp1",
                "uVar5": "dividend_remainder",
                "uVar6": "temp_dividend",
                "uVar7": "temp2",
                "uVar8": "quotient2",
                "uVar9": "remainder_mid"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_00085858": {
            "called": [],
            "calling": [
                "FUN_00081d7c"
            ],
            "code": "\nvoid FUNC_00085858(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_00085858",
            "entrypoint": "0x00085858",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_00085858": "FUNC_00085858"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_000800f4",
            "FUN_00080164",
            "FUN_000801b0",
            "FUN_0008021c",
            "FUN_00080258",
            "FUN_000802da",
            "FUN_000803d4",
            "FUN_00080410",
            "FUN_0008043e",
            "FUN_000805d0",
            "FUN_00080a68",
            "FUN_00080ae4",
            "FUN_00080c0c",
            "FUN_00080ce0",
            "FUN_00080d2e",
            "FUN_00080d54",
            "FUN_00080d7a",
            "FUN_00080da0",
            "FUN_00080e04",
            "FUN_00080e18",
            "FUN_00080e9c",
            "FUN_00080f24",
            "FUN_00080f9c",
            "FUN_00081034",
            "FUN_00081042",
            "FUN_0008105c",
            "FUN_00081066",
            "FUN_0008106e",
            "FUN_00081184",
            "FUN_0008118c",
            "FUN_000811ae",
            "FUN_000811b4",
            "FUN_000811be",
            "FUN_000811c2",
            "FUN_000811c6",
            "FUN_000811cc",
            "FUN_00081210",
            "FUN_00081318",
            "FUN_00081388",
            "FUN_000813a8",
            "FUN_000813c2",
            "FUN_000813e4",
            "FUN_00081454",
            "FUN_000814e4",
            "FUN_00081508",
            "FUN_000815d4",
            "FUN_000815f8",
            "FUN_000815fe",
            "FUN_0008160c",
            "FUN_00081622",
            "FUN_0008163a",
            "FUN_0008165c",
            "FUN_00081682",
            "FUN_000816d4",
            "FUN_00081714",
            "FUN_00081730",
            "FUN_00081734",
            "FUN_00081894",
            "FUN_0008189c",
            "FUN_00081944",
            "FUN_00081bf4",
            "FUN_00081c54",
            "FUN_00081c5c",
            "FUN_00081c94",
            "FUN_00081ca8",
            "FUN_00081cd0",
            "FUN_00081d1c",
            "FUN_00081d5c",
            "FUN_00081d7c",
            "FUN_00081df4",
            "FUN_00081e04",
            "FUN_00081e14",
            "FUN_0008234c",
            "FUN_00082438",
            "FUN_00082504",
            "FUN_000825a0",
            "FUN_000825b0",
            "FUN_00082970",
            "FUN_00082994",
            "FUN_00082a50",
            "FUN_00082ac0",
            "FUN_00082b38",
            "FUN_0008378c",
            "FUN_00083808",
            "FUN_00083974",
            "FUN_00083adc",
            "FUN_00083b14",
            "FUN_00083c40",
            "FUN_00083d00",
            "FUN_00083d9c",
            "FUN_00083f34",
            "FUN_00084290",
            "FUN_00084298",
            "FUN_000842a4",
            "FUN_00084384",
            "FUN_00084464",
            "FUN_0008449c",
            "FUN_000844c4",
            "FUN_0008456c",
            "FUN_000845bc",
            "FUN_000846a4",
            "FUN_000846b4",
            "FUN_000846dc",
            "FUN_00084700",
            "FUN_00084728",
            "FUN_00084750",
            "FUN_0008477c",
            "FUN_000847ac",
            "FUN_000847e0",
            "FUN_00084a80"
        ],
        [
            "FUN_000804a8",
            "FUN_000816a8"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 457787
}