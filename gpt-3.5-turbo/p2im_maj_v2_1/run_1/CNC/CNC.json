{
    "functions": {
        "FUN_08000188": {
            "additional_data": {
                "DAT_2000044c": {
                    "flag": 16,
                    "flag_status": 1
                },
                "FUN_08000188": {
                    "check_and_update_flag": 1,
                    "initialize_dat_value": 1,
                    "initialize_data": 1,
                    "initialize_flag": 22,
                    "set_flag_if_not_set": 2,
                    "set_flag_if_unset": 1,
                    "toggle_flag": 1,
                    "update_flag": 1
                },
                "param_1": {
                    "flag": 2,
                    "input": 12,
                    "input_data": 1,
                    "input_value": 12,
                    "param": 1,
                    "status": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initialize_flag_08000188(undefined4 input)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input;\n}\n\n",
            "current_name": "initialize_flag_08000188",
            "entrypoint": "0x08000188",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000188": "initialize_flag_08000188",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001ac": {
            "additional_data": {
                "FUN_080001ac": {
                    "combine_params": 1,
                    "concat44": 1,
                    "concatenate": 2,
                    "concatenate_32bit_to_64bit": 1,
                    "concatenate_64bit": 1,
                    "concatenate_64bit_integer": 1,
                    "concatenate_64bit_values": 1,
                    "concatenate_and_convert": 1,
                    "concatenate_integers": 2,
                    "concatenate_numbers": 2,
                    "concatenate_param": 2,
                    "concatenate_param1_param2": 1,
                    "concatenate_parameters": 2,
                    "concatenate_params": 8,
                    "concatenate_uint32_to_uint64": 1,
                    "concatenate_values": 4
                },
                "param_1": {
                    "first_integer": 2,
                    "first_operand": 1,
                    "first_param": 5,
                    "first_parameter": 6,
                    "first_value": 2,
                    "input1": 1,
                    "input_1": 2,
                    "input_param_1": 1,
                    "lower_32bit": 1,
                    "number1": 2,
                    "param1": 1,
                    "param_1": 1,
                    "parameter1": 1,
                    "uint32_value": 1,
                    "value1": 2,
                    "value_1": 2
                },
                "param_2": {
                    "higher_32bit": 1,
                    "input2": 1,
                    "input_2": 2,
                    "input_param_2": 1,
                    "number2": 2,
                    "param2": 1,
                    "param_2": 1,
                    "parameter2": 1,
                    "second_integer": 2,
                    "second_operand": 1,
                    "second_param": 5,
                    "second_parameter": 6,
                    "second_value": 2,
                    "uint32_value": 1,
                    "value2": 2,
                    "value_2": 2
                },
                "param_n": {
                    "new_parameter_name": 1
                },
                "undefined8": {
                    "uint64_value": 1
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nuint64_value concatenate_params_080001ac(undefined4 first_parameter,undefined4 second_parameter)\n\n{\n  return CONCAT44(second_parameter,first_parameter);\n}\n\n",
            "current_name": "concatenate_params_080001ac",
            "entrypoint": "0x080001ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001ac": "concatenate_params_080001ac",
                "param_1": "first_parameter",
                "param_2": "second_parameter",
                "undefined8": "uint64_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001c8": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001c8",
            "entrypoint": "0x080001c8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001d4": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001d4",
            "entrypoint": "0x080001d4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001e0": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001e0",
            "entrypoint": "0x080001e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001ec": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001ec",
            "entrypoint": "0x080001ec",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001f8": {
            "additional_data": {
                "FUN_080001f8": {
                    "initialize_system": 31
                },
                "_system_component_address": {
                    "system_component_address": 1
                },
                "initialize_system_components_08000210": {
                    "init_sys_comp": 1,
                    "initialize_components": 12,
                    "initialize_system_components": 11
                }
            },
            "called": [
                "FUN_08000210"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_system_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  initialize_system_080001f8_components_08000210();\n  return;\n}\n\n",
            "current_name": "initialize_system_080001f8",
            "entrypoint": "0x080001f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001f8": "initialize_system_080001f8",
                "initialize_system_components_08000210": "initialize_components"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000210": {
            "additional_data": {
                "FUC_080001d4": {
                    "initialize_module_b": 1
                },
                "FUC_080001ec": {
                    "initialize_module_a": 1
                },
                "FUC_08000210": {
                    "initialize_components": 1
                },
                "FUNC_080001d4": {
                    "configure_environment": 1,
                    "configure_settings": 4,
                    "do_something_else": 1,
                    "execute_initialization": 1,
                    "execute_second_function": 1,
                    "execute_task": 1,
                    "initialize_function_2": 3,
                    "initialize_function_b": 1,
                    "initialize_main_component": 1,
                    "initialize_second_component": 1,
                    "initialize_second_module": 1,
                    "initialize_subsystem_b": 1,
                    "perform_additional_tasks": 2,
                    "perform_checks": 1,
                    "perform_initialization": 3,
                    "perform_operation": 1,
                    "perform_operations": 1,
                    "perform_second_action": 1,
                    "perform_second_operation": 2,
                    "perform_setup": 1,
                    "second_function": 1
                },
                "FUNC_080001ec": {
                    "do_something": 1,
                    "execute_first_function": 1,
                    "execute_preparation": 1,
                    "execute_preparation_steps": 1,
                    "execute_startup_operations": 1,
                    "execute_startup_routines": 1,
                    "first_function": 1,
                    "initialize_data": 2,
                    "initialize_first_component": 1,
                    "initialize_first_module": 1,
                    "initialize_function": 1,
                    "initialize_function_1": 3,
                    "initialize_function_a": 1,
                    "initialize_module": 1,
                    "initialize_subcomponent": 1,
                    "initialize_subsystem_a": 1,
                    "initialize_system": 3,
                    "perform_first_action": 1,
                    "perform_first_operation": 2,
                    "perform_initialization": 2,
                    "perform_preparation_tasks": 1,
                    "setup_environment": 1,
                    "setup_preconditions": 1
                },
                "FUN_08000210": {
                    "execute_init_tasks": 1,
                    "execute_initial_setup": 1,
                    "execute_initialization": 3,
                    "execute_main_function": 1,
                    "execute_main_tasks": 1,
                    "execute_startup_sequence": 1,
                    "execute_startup_tasks": 1,
                    "initialize": 7,
                    "initialize_and_execute": 1,
                    "initialize_application": 2,
                    "initialize_components": 5,
                    "initialize_function": 1,
                    "initialize_program": 2,
                    "initialize_system": 1,
                    "initialize_system_components": 1
                }
            },
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "calling": [
                "FUN_080025e8",
                "FUN_080001f8",
                "FUN_08000220"
            ],
            "code": "\nvoid initialize_system_components_08000210(void)\n\n{\n  FUNC_080001ec();\n  FUNC_080001d4();\n  return;\n}\n\n",
            "current_name": "initialize_system_components_08000210",
            "entrypoint": "0x08000210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000210": "initialize_system_components_08000210"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000220": {
            "additional_data": {
                "FUNC_080001c8": {
                    "do_something_when_input_is1": 1,
                    "execute_action1": 1,
                    "execute_action_1": 1,
                    "execute_function1": 1,
                    "function1": 1,
                    "function_1": 3,
                    "function_a": 1,
                    "function_c": 1,
                    "function_one": 1,
                    "handle_input_1": 2,
                    "handle_param_1_case_1": 1,
                    "handle_state1": 1,
                    "perform_action1": 5,
                    "perform_action_1": 2,
                    "process_first_case": 1,
                    "process_input1": 1,
                    "process_input_1": 1,
                    "process_input_one": 1,
                    "process_input_type_1": 1,
                    "set_up_system_component_a": 1,
                    "update_function_one": 2
                },
                "FUNC_080001e0": {
                    "do_something_when_input_is2": 1,
                    "execute_action2": 1,
                    "execute_action_2": 1,
                    "execute_function2": 1,
                    "function2": 1,
                    "function_2": 3,
                    "function_b": 1,
                    "function_e": 1,
                    "function_two": 1,
                    "handle_input_2": 2,
                    "handle_param_1_case_2": 1,
                    "handle_state2": 1,
                    "perform_action2": 5,
                    "perform_action_2": 2,
                    "process_input2": 1,
                    "process_input_2": 1,
                    "process_input_two": 1,
                    "process_input_type_2": 1,
                    "process_second_case": 1,
                    "set_up_system_component_b": 1,
                    "update_function_two": 2
                },
                "FUN_08000220": {
                    "handle_param": 1,
                    "handle_param_1": 2,
                    "process_and_initialize": 2,
                    "process_and_initialize_components": 1,
                    "process_and_update": 2,
                    "process_and_update_data": 2,
                    "process_and_update_state": 1,
                    "process_data": 4,
                    "process_input": 1,
                    "process_parameter": 1,
                    "update_and_set_param": 1,
                    "update_data": 3,
                    "update_data_blocks": 1,
                    "update_param": 1,
                    "update_parameter_value": 1,
                    "update_system_component": 1,
                    "update_system_components": 2,
                    "update_system_state": 4
                },
                "initialize_system_components_08000210": {
                    "initialize_system_components": 30
                },
                "param_1": {
                    "data": 2,
                    "data_value": 1,
                    "input": 9,
                    "input_character": 1,
                    "input_data": 3,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 2,
                    "new_param": 3,
                    "new_parameter_value": 1,
                    "new_state": 4,
                    "parameter": 1,
                    "status": 1
                },
                "process_data_blocks_08002fd4": {
                    "process_data_blocks": 28
                }
            },
            "called": [
                "FUN_080001e0",
                "FUN_08000210",
                "FUN_080001c8",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_and_update_data_08000220(char input)\n\n{\n  if (input != DAT_20000468) {\n    process_data_blocks();\n    if (input == '\\x01') {\n      FUNC_080001c8();\n      DAT_20000468 = input;\n    }\n    else if (input == '\\x02') {\n      FUNC_080001e0();\n      DAT_20000468 = input;\n    }\n    else {\n      initialize_system_components_08000210();\n      DAT_20000468 = input;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_and_update_data_08000220",
            "entrypoint": "0x08000220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000220": "process_and_update_data_08000220",
                "initialize_system_components_08000210": "initialize_system_components",
                "param_1": "input",
                "process_data_blocks_08002fd4": "process_data_blocks"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000268": {
            "additional_data": {
                "0xa8": {
                    "divisor": 1
                },
                "1000": {
                    "const_multiplier": 1
                },
                "FUN_08000268": {
                    "calculate_adjusted_value": 18,
                    "calculate_adjustment": 1,
                    "calculate_data": 1,
                    "calculate_data_value": 3,
                    "calculate_modified_value": 1,
                    "calculate_new_value": 2,
                    "calculate_result": 3,
                    "calculate_updated_value": 1,
                    "calculate_value": 1
                },
                "_DAT_e000e018": {
                    "config_value": 1,
                    "constant_value": 1,
                    "data": 1,
                    "data_constant": 5,
                    "data_field": 1,
                    "data_value": 2,
                    "data_variable": 5,
                    "divisor": 1,
                    "global_variable": 1,
                    "memory_address": 1,
                    "memory_value": 1,
                    "offset": 1,
                    "offset_value": 1,
                    "operand": 1,
                    "some_data": 5,
                    "some_data_value": 1,
                    "some_other_value": 1,
                    "some_value": 1
                },
                "get_data_value_08005a84": {
                    "get_current_value": 1,
                    "get_data_value": 21,
                    "retrieve_data_value": 3
                },
                "iVar1": {
                    "current_value": 1,
                    "data_value": 29
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002b6"
            ],
            "code": "\n\n\nint calculate_adjusted_value_08000268(void)\n\n{\n  int data_value;\n  \n  data_value = get_data_value_08005a84();\n  return (data_value + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "current_name": "calculate_adjusted_value_08000268",
            "entrypoint": "0x08000268",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000268": "calculate_adjusted_value_08000268",
                "get_data_value_08005a84": "get_data_value",
                "iVar1": "data_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002a0": {
            "additional_data": {
                "FUN_080002a0": {
                    "find_and_process_target_value": 3,
                    "find_and_return_target_value": 2,
                    "find_target_in_range": 1,
                    "find_target_value": 22,
                    "find_target_value_in_range": 1,
                    "find_value_in_range": 1,
                    "search_value_in_range": 1
                },
                "find_target_value_in_range_08005a98": {
                    "find_target_value_in_given_range": 1,
                    "helper_function": 1,
                    "search_for_target_value_in_range": 1,
                    "search_range_for_target": 1,
                    "search_value_in_range": 1,
                    "search_value_in_range_helper": 1
                },
                "param_1": {
                    "input_value": 2,
                    "target": 1,
                    "target_value": 25,
                    "value": 3
                }
            },
            "called": [
                "FUN_08005a98"
            ],
            "calling": [
                "FUN_08002408"
            ],
            "code": "\nvoid find_and_process_target_value_080002a0(undefined4 target_value)\n\n{\n  search_value_in_range_helper(target_value);\n  return;\n}\n\n",
            "current_name": "find_and_process_target_value_080002a0",
            "entrypoint": "0x080002a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002a0": "find_and_process_target_value_080002a0",
                "find_target_value_in_range_08005a98": "search_value_in_range_helper",
                "param_1": "target_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002b6": {
            "additional_data": {
                "FUN_080002b6": {
                    "adjust_values": 1,
                    "calculate_adjusted_value_loop": 1,
                    "calculate_threshold": 1,
                    "check_adjusted_value": 6,
                    "check_if_value_is_adjusted": 1,
                    "find_adjusted_value": 8,
                    "find_adjustment_value": 1,
                    "perform_reverse_calculation": 1,
                    "refine_adjusted_value": 1,
                    "reverse_and_adjust_values": 3,
                    "reverse_loop": 1,
                    "verify_param_value": 1
                },
                "bVar3": {
                    "comparison_result": 4,
                    "is_adjusted": 1,
                    "is_adjusted_value_equal": 1,
                    "is_adjusted_value_greater": 2,
                    "is_adjusted_value_greater_than": 1,
                    "is_adjusted_value_high": 1,
                    "is_adjusted_value_less_or_equal": 1,
                    "is_adjusted_value_valid": 1,
                    "is_adjustment_valid": 1,
                    "is_condition_met": 1,
                    "is_equal_or_less": 1,
                    "is_greater": 4,
                    "is_greater_or_equal": 2,
                    "is_input_greater": 1,
                    "is_less_or_equal": 1,
                    "is_less_than_or_equal_to": 1,
                    "is_lower": 1,
                    "is_target_reached": 1,
                    "is_threshold_reached": 1,
                    "is_top_greater_or_equal": 1,
                    "is_valid": 1,
                    "is_value_greater": 1,
                    "is_value_reached": 1
                },
                "lVar4": {
                    "adjusted_result": 3,
                    "adjusted_sum": 2,
                    "adjusted_value": 15,
                    "adjusted_value3": 3,
                    "adjusted_value_result": 1,
                    "adjusted_value_sum": 3,
                    "calculated_value": 4
                },
                "param_1": {
                    "adjustment_value": 1,
                    "input": 2,
                    "input_param": 2,
                    "input_value": 22,
                    "param": 1,
                    "value": 3
                },
                "uVar1": {
                    "adjusted_value": 4,
                    "adjusted_value1": 12,
                    "adjusted_value_1": 1,
                    "adjusted_value_high": 2,
                    "adjusted_value_left": 1,
                    "calculated_value": 1,
                    "extracted_bits": 1,
                    "high_bits_result": 1,
                    "quotient": 1,
                    "shifted_input_top": 1,
                    "shifted_value": 1,
                    "shifted_value1": 1,
                    "upper_bits_result": 2,
                    "upper_bits_value": 1,
                    "value_upper": 1
                },
                "uVar2": {
                    "adjusted_input_value": 2,
                    "adjusted_quotient": 1,
                    "adjusted_sum": 1,
                    "adjusted_value": 2,
                    "adjusted_value2": 12,
                    "adjusted_value_2": 1,
                    "adjusted_value_high_input": 1,
                    "adjusted_value_high_param": 1,
                    "adjusted_value_right": 1,
                    "adjusted_value_upper": 1,
                    "shifted_bits": 1,
                    "shifted_calculated_top": 1,
                    "shifted_value": 1,
                    "shifted_value2": 1,
                    "target_value": 2,
                    "upper_bits_adjusted_value": 1,
                    "upper_bits_l_var4_input": 1
                },
                "uVar5": {
                    "adjusted_value": 1,
                    "adjusted_value2": 1,
                    "adjusted_value3": 2,
                    "adjusted_value4": 3,
                    "adjusted_value_3": 1,
                    "adjusted_value_new": 1,
                    "adjusted_value_result2": 1,
                    "adjusted_value_temp": 5,
                    "calculated_adjusted_value": 1,
                    "calculated_value": 1,
                    "current_adjusted_value": 2,
                    "new_adjusted_value": 2,
                    "next_adjusted_value": 2,
                    "shifted_adjusted_value": 1,
                    "temp_adjusted_value": 3,
                    "temp_value": 3,
                    "updated_adjusted_value": 1
                }
            },
            "called": [
                "FUN_08000268"
            ],
            "calling": [],
            "code": "\nvoid find_adjusted_value_080002b6(uint input_value)\n\n{\n  uint adjusted_value1;\n  uint adjusted_value2;\n  bool comparison_result;\n  longlong adjusted_value;\n  undefined8 adjusted_value_temp;\n  \n  adjusted_value = calculate_adjusted_value_08000268();\n  adjusted_value2 = (uint)(adjusted_value + (ulonglong)input_value >> 0x20);\n  do {\n    adjusted_value_temp = calculate_adjusted_value_08000268();\n    adjusted_value1 = (uint)((ulonglong)adjusted_value_temp >> 0x20);\n    comparison_result = adjusted_value2 <= adjusted_value1;\n    if (adjusted_value1 == adjusted_value2) {\n      comparison_result = (uint)(adjusted_value + (ulonglong)input_value) <= (uint)adjusted_value_temp;\n    }\n  } while (!comparison_result);\n  return;\n}\n\n",
            "current_name": "find_adjusted_value_080002b6",
            "entrypoint": "0x080002b6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002b6": "find_adjusted_value_080002b6",
                "bVar3": "comparison_result",
                "lVar4": "adjusted_value",
                "param_1": "input_value",
                "uVar1": "adjusted_value1",
                "uVar2": "adjusted_value2",
                "uVar5": "adjusted_value_temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002f0": {
            "additional_data": {
                "DAT_2000046c": {
                    "counter": 1,
                    "data_flag": 6,
                    "flag": 21
                },
                "DAT_20000470": {
                    "data": 1,
                    "data_array": 4,
                    "data_block": 2,
                    "data_buffer": 17,
                    "data_pointer": 1,
                    "memory_address": 1,
                    "memory_block": 1
                },
                "FUN_080002f0": {
                    "clear_memory": 1,
                    "initialize_data": 28,
                    "initialize_data_structures": 1,
                    "initialize_memory": 1
                },
                "memset_with_value_0800b430": {
                    "clear_memory_with_fill_value": 1,
                    "fill_memory_with": 1,
                    "fill_memory_with_value": 4,
                    "fill_with_data": 4,
                    "initialize_array": 1,
                    "initialize_memory": 5,
                    "memset_with_value": 2,
                    "set_initial_value": 1,
                    "set_memory": 3,
                    "set_memory_to_value": 4,
                    "set_memory_with": 1,
                    "set_memory_with_byte": 1,
                    "set_memory_with_value": 1
                },
                "original_function_name": {
                    "more_descriptive_function_name": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_parameter_name_2": {
                    "new_parameter_name_2": 1
                },
                "original_variable_name_1": {
                    "new_variable_name_1": 1
                },
                "original_variable_name_2": {
                    "new_variable_name_2": 1
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_080003ec",
                "FUN_08000374",
                "FUN_08000310",
                "FUN_08000340"
            ],
            "code": "\nvoid initialize_data_structures_080002f0(void)\n\n{\n  memset_with_value_0800b430(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_structures_080002f0",
            "entrypoint": "0x080002f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002f0": "initialize_data_structures_080002f0",
                "memset_with_value_0800b430": "initialize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000310": {
            "additional_data": {
                "DAT_2000046c": {
                    "data_initialized": 2,
                    "data_structures_initialized": 12,
                    "flag": 1,
                    "initialized": 1,
                    "is_data_structures_initialized": 3
                },
                "DAT_20000470": {
                    "data_array": 5,
                    "data_elements": 2,
                    "data_entries": 1,
                    "data_structure_array": 1,
                    "data_values": 1
                },
                "FUN_08000310": {
                    "get_data": 2,
                    "get_data_at_index": 1,
                    "get_data_element": 12,
                    "get_data_entry": 4,
                    "get_data_from_index": 4,
                    "get_data_from_memory": 1,
                    "get_data_from_offset": 1,
                    "get_data_item": 1,
                    "get_data_value": 3,
                    "get_element_from_data_structure": 1,
                    "get_value_from_data": 1
                },
                "initialize_data_structures_080002f0": {
                    "initialize_data_structures": 26
                },
                "param_1": {
                    "data_index": 1,
                    "element_index": 5,
                    "entry_index": 2,
                    "index": 13,
                    "input": 1,
                    "input_index": 1,
                    "input_value": 5,
                    "offset": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "code": "\nundefined get_element_from_data_structure_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_data_structures();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "current_name": "get_element_from_data_structure_08000310",
            "entrypoint": "0x08000310",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000310": "get_element_from_data_structure_08000310",
                "initialize_data_structures_080002f0": "initialize_data_structures",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000340": {
            "additional_data": {
                "DAT_2000046c": {
                    "data_structures_initialized": 1
                },
                "DAT_20000470": {
                    "data_structures_array": 1
                },
                "FUN_08000340": {
                    "save_data": 1,
                    "set_parameter_value": 1,
                    "store_data": 15,
                    "store_data_in_array": 1,
                    "store_data_in_struct": 1,
                    "store_data_to_data_structure": 1,
                    "store_param_value": 1,
                    "store_parameter_data": 1,
                    "store_parameter_in_data_structures": 1,
                    "store_parameter_value": 4,
                    "store_value_in_data_structures": 1,
                    "store_value_to_data_structure": 1,
                    "update_data": 1,
                    "update_data_structure": 1
                },
                "initialize_data_structures_080002f0": {
                    "initialize_data_structures": 3
                },
                "param_1": {
                    "index": 28,
                    "input_index": 1,
                    "parameter_index": 1,
                    "value_index": 1
                },
                "param_2": {
                    "data": 8,
                    "input_data": 1,
                    "parameter_value": 1,
                    "value": 21
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_08004c2a",
                "FUN_08000374"
            ],
            "code": "\nvoid store_value_to_data_structure_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_data_structures();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "current_name": "store_value_to_data_structure_08000340",
            "entrypoint": "0x08000340",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000340": "store_value_to_data_structure_08000340",
                "initialize_data_structures_080002f0": "initialize_data_structures",
                "param_1": "index",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000374": {
            "additional_data": {
                "FUN_08000374": {
                    "process_data": 21,
                    "process_input": 4,
                    "process_input_data": 4,
                    "reverse_and_store_data": 1,
                    "store_values_to_data_structure": 1
                },
                "local_14": {
                    "current_address": 1,
                    "current_index": 24,
                    "current_offset": 2,
                    "destination_offset": 1,
                    "index": 2,
                    "value_pointer": 1
                },
                "local_18": {
                    "current_byte": 2,
                    "current_char": 10,
                    "current_char_pointer": 2,
                    "current_char_ptr": 2,
                    "current_character": 1,
                    "current_data": 7,
                    "current_element": 4,
                    "current_ptr": 1,
                    "data_pointer": 1
                },
                "local_1c": {
                    "count": 1,
                    "length_counter": 1,
                    "remaining_data": 1,
                    "remaining_iter": 1,
                    "remaining_iterations": 2,
                    "remaining_length": 24,
                    "remaining_size": 1
                },
                "local_9": {
                    "accumulated_value": 5,
                    "accumulator": 2,
                    "calculated_value": 1,
                    "checksum": 10,
                    "computed_value": 2,
                    "is_first_iteration": 1,
                    "result": 1,
                    "sum": 7,
                    "sum_of_chars": 1,
                    "temp_val": 1
                },
                "param_1": {
                    "data_offset": 4,
                    "data_start_index": 1,
                    "index": 4,
                    "input_length": 5,
                    "input_param": 1,
                    "input_size": 4,
                    "source_address": 1,
                    "source_offset": 1,
                    "start_index": 10
                },
                "param_2": {
                    "data": 7,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "data_string": 1,
                    "input_array": 2,
                    "input_data": 10,
                    "input_string": 7,
                    "source_data": 1
                },
                "param_3": {
                    "array_length": 3,
                    "buffer_length": 1,
                    "data_length": 6,
                    "data_size": 1,
                    "input_count": 1,
                    "input_length": 1,
                    "input_size": 1,
                    "length": 11,
                    "num_iter": 1,
                    "num_iterations": 2,
                    "output_length": 1,
                    "string_length": 2
                }
            },
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "calling": [
                "FUN_08004bf4",
                "FUN_08004c2a",
                "FUN_08004bc0"
            ],
            "code": "\nvoid process_input_data_08000374(int start_index,char *input_data,int length)\n\n{\n  int remaining_length;\n  char *current_char;\n  int current_index;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = length;\n  current_char = input_data;\n  current_index = start_index;\n  if (DAT_2000046c == 0) {\n    initialize_data_structures_080002f0();\n    current_char = input_data;\n    current_index = start_index;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_char;\n    store_value_to_data_structure_08000340(current_index,*current_char);\n    current_char = current_char + 1;\n    current_index = current_index + 1;\n  }\n  store_value_to_data_structure_08000340(current_index,checksum);\n  return;\n}\n\n",
            "current_name": "process_input_data_08000374",
            "entrypoint": "0x08000374",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000374": "process_input_data_08000374",
                "local_14": "current_index",
                "local_18": "current_char",
                "local_1c": "remaining_length",
                "local_9": "checksum",
                "param_1": "start_index",
                "param_2": "input_data",
                "param_3": "length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003ec": {
            "additional_data": {
                "FUN_080003ec": {
                    "check_and_count": 2,
                    "check_character_equality": 1,
                    "check_data_equality": 1,
                    "check_element_equality": 1,
                    "check_elements": 1,
                    "check_elements_match": 1,
                    "check_equality": 11,
                    "check_equality_of_elements": 1,
                    "check_match": 1,
                    "check_matching_data": 1,
                    "check_sequence": 1,
                    "check_similarity": 1,
                    "compare_and_count_characters": 1,
                    "compare_and_count_matches": 1,
                    "count_matching_elements": 1,
                    "is_equal": 1,
                    "validate_and_count_elements": 1,
                    "validate_checksum": 2,
                    "validate_sum": 1
                },
                "cVar1": {
                    "current_char": 2,
                    "current_character": 1,
                    "current_element": 7,
                    "element": 3
                },
                "get_element_from_data_structure_08000310": {
                    "get_element_from_data_structure": 4,
                    "get_from_data_structure": 1,
                    "get_next_character_from_structure": 1
                },
                "initialize_data_structures_080002f0": {
                    "initialize_data_structures": 6
                },
                "local_14": {
                    "current_char": 4,
                    "current_char_pointer": 1,
                    "current_char_ptr": 2,
                    "current_element": 2,
                    "current_element_ptr": 1,
                    "current_ptr": 1,
                    "output": 1,
                    "output_array": 3,
                    "output_data": 1,
                    "output_str": 1,
                    "output_string": 13,
                    "result_sequence": 1
                },
                "local_18": {
                    "current_index": 31
                },
                "local_1c": {
                    "remaining_length": 30,
                    "remaining_size": 1
                },
                "local_9": {
                    "char_count": 4,
                    "char_counter": 1,
                    "char_sum": 1,
                    "character_count": 1,
                    "character_counter": 1,
                    "character_sum": 1,
                    "checksum": 2,
                    "count": 5,
                    "element_sum": 1,
                    "match_count": 2,
                    "matching_count": 1,
                    "nonzero_count": 1,
                    "similarity_score": 1,
                    "sum": 6,
                    "sum_of_elements": 1,
                    "total_count": 2
                },
                "param_1": {
                    "array": 4,
                    "data_buffer": 1,
                    "input": 1,
                    "input_array": 2,
                    "input_data": 1,
                    "input_str": 1,
                    "input_string": 17,
                    "sequence": 1,
                    "string": 3
                },
                "param_2": {
                    "index": 1,
                    "start_index": 30
                },
                "param_3": {
                    "data_length": 1,
                    "length": 28,
                    "size": 1,
                    "string_length": 1
                },
                "uVar2": {
                    "expected_char": 1,
                    "expected_character": 1,
                    "expected_checksum": 2,
                    "expected_element": 1,
                    "expected_sum": 2,
                    "expected_value": 1,
                    "last_element": 2
                }
            },
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "calling": [
                "FUN_08004d2c",
                "FUN_08004d7c",
                "FUN_08004dd2"
            ],
            "code": "\nbool check_character_equality_080003ec(char *input_string,int start_index,int length)\n\n{\n  char current_element;\n  uint expected_checksum;\n  int remaining_length;\n  int current_index;\n  char *output_string;\n  byte sum;\n  \n  sum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  output_string = input_string;\n  if (DAT_2000046c == 0) {\n    initialize_data_structures();\n    current_index = start_index;\n    output_string = input_string;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_element = get_element_from_data_structure(current_index);\n    sum = current_element + (sum != 0);\n    *output_string = current_element;\n    current_index = current_index + 1;\n    output_string = output_string + 1;\n  }\n  expected_checksum = get_element_from_data_structure(current_index);\n  return sum == expected_checksum;\n}\n\n",
            "current_name": "check_character_equality_080003ec",
            "entrypoint": "0x080003ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080003ec": "check_character_equality_080003ec",
                "cVar1": "current_element",
                "get_element_from_data_structure_08000310": "get_element_from_data_structure",
                "initialize_data_structures_080002f0": "initialize_data_structures",
                "local_14": "output_string",
                "local_18": "current_index",
                "local_1c": "remaining_length",
                "local_9": "sum",
                "param_1": "input_string",
                "param_2": "start_index",
                "param_3": "length",
                "uVar2": "expected_checksum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000478": {
            "additional_data": {
                "FUN_08000478": {
                    "initialize_data": 6,
                    "initialize_param_values": 1,
                    "initialize_parameters": 12,
                    "initialize_params": 5,
                    "initialize_variables": 3,
                    "set_parameters": 1,
                    "store_parameters": 1,
                    "store_params": 2
                },
                "param_1": {
                    "data1": 4,
                    "first_parameter": 1,
                    "input1": 3,
                    "input_1": 1,
                    "input_parameter1": 1,
                    "new_value1": 1,
                    "param1": 6,
                    "param_1": 1,
                    "parameter1": 8,
                    "value1": 5
                },
                "param_2": {
                    "data2": 4,
                    "input2": 3,
                    "input_2": 1,
                    "input_parameter2": 1,
                    "new_value2": 1,
                    "param2": 6,
                    "param_2": 1,
                    "parameter2": 8,
                    "second_parameter": 1,
                    "value2": 5
                },
                "param_3": {
                    "data3": 4,
                    "input3": 3,
                    "input_3": 1,
                    "input_parameter3": 1,
                    "new_value3": 1,
                    "param3": 6,
                    "param_3": 1,
                    "parameter3": 8,
                    "third_parameter": 1,
                    "value3": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac"
            ],
            "code": "\nvoid initialize_parameters_08000478(undefined parameter1,undefined parameter2,undefined parameter3)\n\n{\n  DAT_20000e89 = parameter1;\n  DAT_20000e8a = parameter2;\n  DAT_20000e8b = parameter3;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_08000478",
            "entrypoint": "0x08000478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000478": "initialize_parameters_08000478",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004ac": {
            "additional_data": {
                "DAT_20000e70": {
                    "data_array": 2,
                    "data_buffer": 1,
                    "input_data": 1,
                    "memory_block": 10,
                    "memory_buffer": 3
                },
                "DAT_20000e74": {
                    "flag": 12,
                    "parameter_2": 2,
                    "parameter_count": 1,
                    "value": 1
                },
                "DAT_20000e78": {
                    "config_data": 1,
                    "config_value": 1,
                    "constant_value": 2,
                    "data_pointer": 2,
                    "default_parameter_value": 1,
                    "global_data": 1,
                    "input_constant": 1,
                    "input_value": 1,
                    "parameter": 1,
                    "parameter1": 1,
                    "parameter_1": 2,
                    "parameter_value": 1,
                    "program_config": 1,
                    "value": 1
                },
                "DAT_20000e8c": {
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 13
                },
                "DAT_20000e90": {
                    "output_array": 1,
                    "output_buffer": 1,
                    "output_data": 11,
                    "processed_data": 1
                },
                "FUN_080004ac": {
                    "initialize": 1,
                    "initialize_and_process": 3,
                    "initialize_and_process_data": 4,
                    "initialize_and_process_input": 12,
                    "initialize_and_process_inputs": 1,
                    "initialize_application": 4,
                    "initialize_main_function": 1,
                    "initialize_program": 4
                },
                "check_and_process_input_08004d7c": {
                    "check_and_process_input": 12,
                    "process_input": 2,
                    "process_user_input": 1,
                    "validate_and_process_input": 16
                },
                "display_error_message_08004030": {
                    "display_error_message": 20,
                    "show_error_message": 11
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 16
                },
                "initialize_parameters_08000478": {
                    "initialize_parameters": 19,
                    "initialize_params": 1,
                    "set_initial_parameters": 3,
                    "set_initial_params": 1,
                    "set_initial_values": 3,
                    "set_parameters": 2,
                    "setup_parameters": 2
                },
                "memset_with_value_0800b430": {
                    "clear_memory": 3,
                    "init_data_array": 1,
                    "initialize_memory": 13,
                    "initialize_memory_block": 2
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08004030",
                "FUN_08004d7c",
                "FUN_08000478"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_process_input_080004ac(void)\n\n{\n  int result;\n  \n  memset_with_value_0800b430(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  initialize_parameters_08000478(0,1,2);\n  DAT_20000e74 = 1;\n  result = validate_and_process_input(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    display_error_message(10);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_process_input_080004ac",
            "entrypoint": "0x080004ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004ac": "initialize_and_process_input_080004ac",
                "check_and_process_input_08004d7c": "validate_and_process_input",
                "display_error_message_08004030": "display_error_message",
                "iVar1": "result",
                "initialize_parameters_08000478": "initialize_parameters",
                "memset_with_value_0800b430": "initialize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004fc": {
            "additional_data": {
                "DAT_20000e7c": {
                    "floating_point_value_1": 2
                },
                "DAT_20000e80": {
                    "floating_point_value_2": 2
                },
                "DAT_20000e84": {
                    "floating_point_value_3": 2
                },
                "DAT_20000ebc": {
                    "constant_1": 1
                },
                "DAT_20000ec0": {
                    "constant_2": 1
                },
                "DAT_20000ec4": {
                    "constant_3": 1
                },
                "FUN_080004fc": {
                    "calculate_and_store_floating_point_values": 4,
                    "calculate_float_values": 1,
                    "calculate_floating_point_values": 24,
                    "calculate_shifted_floating_point_values": 1,
                    "update_floating_point_values": 1
                },
                "calculate_floating_point_value_08009054": {
                    "calculate_float_value": 1,
                    "calculate_floating_point_value": 22,
                    "calculate_fp_value": 2,
                    "compute_floating_point_value": 2
                },
                "count_bits_set_and_shift_08008e44": {
                    "calculate_bit_count": 5,
                    "calculate_bit_count_and_shift": 1,
                    "calculate_bits_set_and_shift": 1,
                    "calculate_bits_set_and_shift_count": 1,
                    "count_bits_set_and_shift": 13,
                    "count_set_bits_and_shift": 3,
                    "get_bit_count": 1,
                    "get_bit_set_count": 1
                },
                "param_1": {
                    "data_1": 1,
                    "input1": 3,
                    "input_1": 12,
                    "input_param_1": 2,
                    "input_parameter_1": 1,
                    "input_value_1": 4,
                    "value_1": 8
                },
                "param_2": {
                    "data_2": 1,
                    "input2": 3,
                    "input_2": 12,
                    "input_param_2": 2,
                    "input_parameter_2": 1,
                    "input_value_2": 4,
                    "value_2": 8
                },
                "param_3": {
                    "data_3": 1,
                    "input3": 3,
                    "input_3": 12,
                    "input_param_3": 2,
                    "input_parameter_3": 1,
                    "input_value_3": 4,
                    "value_3": 8
                },
                "uVar1": {
                    "bit_count": 15,
                    "bit_count_and_shift": 1,
                    "bit_set_count": 1,
                    "bits_set_count": 4,
                    "bits_set_shift_count": 1,
                    "bits_set_shifted": 1,
                    "bits_set_shifted_count": 1,
                    "count": 1,
                    "num_bits": 2,
                    "num_bits_set": 1,
                    "set_bits_count": 1
                }
            },
            "called": [
                "FUN_08009054",
                "FUN_08008e44"
            ],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid calculate_and_store_floating_point_values_080004fc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 bit_count;\n  \n  bit_count = count_bits_set_and_shift_08008e44(input_1);\n  DAT_20000e7c = calculate_floating_point_value_08009054(bit_count,DAT_20000ebc);\n  bit_count = count_bits_set_and_shift_08008e44(input_2);\n  DAT_20000e80 = calculate_floating_point_value_08009054(bit_count,DAT_20000ec0);\n  bit_count = count_bits_set_and_shift_08008e44(input_3);\n  DAT_20000e84 = calculate_floating_point_value_08009054(bit_count,DAT_20000ec4);\n  return;\n}\n\n",
            "current_name": "calculate_and_store_floating_point_values_080004fc",
            "entrypoint": "0x080004fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004fc": "calculate_and_store_floating_point_values_080004fc",
                "calculate_floating_point_value_08009054": "calculate_floating_point_value",
                "count_bits_set_and_shift_08008e44": "count_bits_set_and_shift",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "bit_count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800056c": {
            "additional_data": {
                "FUN_0800056c": {
                    "calculate": 1,
                    "calculate_final_result": 1,
                    "calculate_float": 1,
                    "calculate_float_result": 2,
                    "calculate_float_value": 1,
                    "calculate_float_value_from_bits": 1,
                    "calculate_float_value_if_flag_set": 2,
                    "calculate_float_value_shift_and_reverse": 1,
                    "calculate_improved_float": 3,
                    "calculate_improved_result": 1,
                    "calculate_improved_value": 2,
                    "calculate_result": 3,
                    "calculate_reversed_shifted_value": 1,
                    "improve_and_calculate_float_value": 1,
                    "improve_float_value": 1,
                    "improved_calculate": 1,
                    "improved_calculation": 1,
                    "process_data": 2,
                    "process_input": 1,
                    "reverse_and_calculate": 1
                },
                "calculate_float_value_08008c30": {
                    "calculate_float_value": 3
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 3
                },
                "param_1": {
                    "data": 1,
                    "input": 2,
                    "input_value": 27,
                    "value": 1
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_and_shift": 1,
                    "reverse_and_shift_bits": 1,
                    "reverse_bits_and_shift": 1
                },
                "uVar1": {
                    "bits_and_shift_result": 1,
                    "reversed_and_shifted_input": 1,
                    "reversed_and_shifted_value": 1,
                    "reversed_data": 1,
                    "reversed_input": 1,
                    "reversed_shifted_value": 14,
                    "reversed_value": 11,
                    "shifted_value": 1
                }
            },
            "called": [
                "FUN_08008c30",
                "FUN_08008590",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 calculate_float_result_0800056c(undefined4 input_value)\n\n{\n  undefined8 reversed_shifted_value;\n  \n  if (DAT_20000e73 != '\\0') {\n    reversed_shifted_value = reverse_bits_and_shift_08008590(input_value);\n    reversed_shifted_value = calculate_improved_result((int)reversed_shifted_value,(int)((ulonglong)reversed_shifted_value >> 0x20),0x66666666,0x40396666);\n    input_value = calculate_float_value_08008c30((int)reversed_shifted_value,(int)((ulonglong)reversed_shifted_value >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "current_name": "calculate_float_result_0800056c",
            "entrypoint": "0x0800056c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800056c": "calculate_float_result_0800056c",
                "calculate_float_value_08008c30": "calculate_float_value",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "param_1": "input_value",
                "reverse_bits_and_shift_08008590": "reverse_and_shift_bits",
                "uVar1": "reversed_shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005b4": {
            "additional_data": {
                "DAT_20000e70": {
                    "error_flag": 2
                },
                "DAT_20000e71": {
                    "flag1": 1,
                    "param_value_11": 1
                },
                "DAT_20000e72": {
                    "flag2": 1,
                    "param_value_12": 1
                },
                "DAT_20000e73": {
                    "flag3": 1,
                    "param_value_13": 1
                },
                "DAT_20000e74": {
                    "flag4": 1,
                    "param_value_14": 1
                },
                "DAT_20000e75": {
                    "flag5": 1,
                    "param_value_15": 1
                },
                "DAT_20000e76": {
                    "flag6": 1,
                    "param_value_16": 1
                },
                "DAT_20000e77": {
                    "flag7": 1,
                    "param_value_17": 1
                },
                "DAT_20000e78": {
                    "float_value1": 1,
                    "param_value_18": 1
                },
                "DAT_20000e7c": {
                    "device_data1": 1,
                    "param_value_19": 1
                },
                "DAT_20000e80": {
                    "device_data2": 1,
                    "param_value_20": 1
                },
                "DAT_20000e84": {
                    "device_data3": 1,
                    "param_value_21": 1
                },
                "DAT_20000e88": {
                    "param_value_22": 1,
                    "shifted_value": 1
                },
                "DAT_20000e89": {
                    "device_data_index1": 1,
                    "index1": 1
                },
                "DAT_20000e8a": {
                    "device_data_index2": 1,
                    "index2": 1
                },
                "DAT_20000e8b": {
                    "index": 1,
                    "switch_case_index1": 1
                },
                "DAT_20000e8c": {
                    "param_value_23": 1,
                    "switch_case_index2": 1
                },
                "DAT_20000e90": {
                    "output_1": 1,
                    "temp_device_data1": 1
                },
                "DAT_20000e94": {
                    "output_2": 1,
                    "temp_device_data2": 1
                },
                "DAT_20000e98": {
                    "output_3": 1,
                    "temp_device_data3": 1
                },
                "DAT_20000ea9": {
                    "constant1": 2
                },
                "DAT_20000eb8": {
                    "counter": 1,
                    "temp_flag": 1
                },
                "DAT_20000ed0": {
                    "constant_2": 1
                },
                "FUN_080005b4": {
                    "parse_and_process_data": 1,
                    "parse_and_process_input": 1,
                    "parse_binary_function": 2,
                    "parse_input": 1,
                    "process_and_modify_data": 1,
                    "process_and_return_result": 1,
                    "process_and_update_data": 2,
                    "process_and_update_device_data": 1,
                    "process_config": 1,
                    "process_configuration": 1,
                    "process_data": 5,
                    "process_input": 8,
                    "process_input_and_return_result": 2
                },
                "auStack_70": {
                    "data_stack": 1,
                    "device_data": 1,
                    "device_data_array": 1,
                    "device_data_temp": 1,
                    "float_array": 6,
                    "float_data_array": 1,
                    "float_parameters": 1,
                    "float_params2": 1,
                    "float_params_array": 1,
                    "float_params_stack": 1,
                    "float_stack": 1,
                    "float_values": 4,
                    "input_values": 1,
                    "local_array2": 1,
                    "parameters2": 1,
                    "parameters_array_2": 1,
                    "params": 1,
                    "register_array": 1,
                    "temp_array": 2
                },
                "cVar3": {
                    "error": 2,
                    "error_code": 4,
                    "error_flag": 1,
                    "output_char": 2,
                    "result": 3,
                    "return_value": 11,
                    "status": 6
                },
                "calculate_and_update_device_data_08001f00": {
                    "calculate_and_update_device_data": 2
                },
                "calculate_float_addition_08008cd8": {
                    "calculate_float_addition": 2
                },
                "calculate_float_result_0800056c": {
                    "calculate_float_result": 2
                },
                "calculate_float_value_08008c30": {
                    "calculate_float_value": 1,
                    "calculate_float_value3": 1
                },
                "calculate_float_value_08008cdc": {
                    "calculate_float_value2": 1
                },
                "calculate_float_value_08008eec": {
                    "calculate_float_value": 2
                },
                "calculate_floating_point_value_08008894": {
                    "calculate_floating_point_value": 2
                },
                "calculate_hypotenuse_0800981c": {
                    "calculate_hypotenuse": 2
                },
                "calculate_parameter_value_08008ba0": {
                    "calculate_parameter_value": 2
                },
                "calculate_shifted_result_08009798": {
                    "calculate_shifted_result": 2
                },
                "calculate_shifted_value_08008bf0": {
                    "calculate_shifted_value": 2
                },
                "check_and_parse_character_0800184c": {
                    "check_and_parse_character": 2
                },
                "check_and_process_input_08004d7c": {
                    "check_and_process_input": 2
                },
                "check_concatenation_result_0800923c": {
                    "check_concatenation_result": 2
                },
                "check_if_concatenated_string_is_empty_08009228": {
                    "check_if_concatenated_string_is_empty": 2
                },
                "check_if_concatenation_result_is_not_null_08009214": {
                    "check_if_concatenation_result_is_not_null": 2
                },
                "iVar1": {
                    "check_result": 1,
                    "iteration_variable": 1,
                    "loop_counter": 1,
                    "result": 23,
                    "return_value": 2
                },
                "improved_process_data_080098d0": {
                    "improved_process_data": 1
                },
                "initialize_and_check_system_components_080025e8": {
                    "initialize_and_check_system_components": 2
                },
                "initialize_parameters_08000478": {
                    "initialize_parameters": 2
                },
                "local_24": {
                    "calc_result": 1,
                    "device_data": 1,
                    "float_variable": 1,
                    "input_param": 1,
                    "int_value": 1,
                    "local_var25": 1,
                    "local_var_16": 1,
                    "param_value": 4,
                    "parameter_data": 1,
                    "parameter_result": 1,
                    "parameter_value": 11,
                    "parameter_value2": 1,
                    "temp_int": 1,
                    "uint_value": 2,
                    "uint_var1": 1,
                    "value": 1
                },
                "local_26": {
                    "bit_flags": 3,
                    "bit_mask": 2,
                    "bit_result": 1,
                    "bit_value": 2,
                    "bitmask": 1,
                    "character_index": 1,
                    "concatenation_flag": 1,
                    "flag7": 1,
                    "flags_2": 1,
                    "input_flag": 1,
                    "local_var24": 1,
                    "local_var_15": 1,
                    "parameter_flag": 1,
                    "shift_result": 1,
                    "shift_value": 1,
                    "shifted_value": 1,
                    "short_flags": 1,
                    "temp16": 1,
                    "temp_short": 1,
                    "ushort": 1,
                    "ushort_value": 4,
                    "ushort_var1": 1,
                    "value6": 1
                },
                "local_27": {
                    "bit_flags": 3,
                    "bit_value_flag": 1,
                    "bitmask": 1,
                    "bits_flag": 1,
                    "bitwise_result": 1,
                    "byte": 1,
                    "byte_flag": 1,
                    "byte_flags": 1,
                    "byte_value": 2,
                    "byte_value5": 1,
                    "byte_var5": 1,
                    "concatenation_mask": 1,
                    "device_data_flag": 1,
                    "device_mask": 1,
                    "flag1": 2,
                    "flag2": 1,
                    "flag4": 2,
                    "flag6": 1,
                    "flags": 1,
                    "flags_1": 1,
                    "float_flags": 1,
                    "float_param_flag": 1,
                    "init_flag2": 1,
                    "local_var23": 1,
                    "local_var_14": 1
                },
                "local_2c": {
                    "constant1": 1,
                    "float_calc_result": 1,
                    "float_param": 1,
                    "float_param_4": 1,
                    "float_result2": 1,
                    "float_result_4": 1,
                    "float_value1": 1,
                    "float_value2": 1,
                    "float_value3": 1,
                    "float_value4": 1,
                    "float_value5": 1,
                    "float_value8": 1,
                    "float_value_1": 2,
                    "float_var": 1,
                    "float_var1": 1,
                    "float_var3": 2,
                    "float_var9": 1,
                    "float_variable": 1,
                    "float_variable_1": 1,
                    "initial_param_value": 1,
                    "local_var22": 1,
                    "local_var_13": 1,
                    "shift_value": 1,
                    "shifted_float_result": 1,
                    "shifted_float_value": 1,
                    "temp_float2": 1,
                    "temp_var": 1,
                    "value5": 1
                },
                "local_2d": {
                    "byte_value": 1,
                    "byte_value7": 1,
                    "calculation_type3": 1,
                    "char_value3": 1,
                    "char_var3": 1,
                    "character": 1,
                    "concatenation_result": 1,
                    "flag3": 1,
                    "flag5": 1,
                    "flag_3": 1,
                    "float_type": 1,
                    "init_flag": 1,
                    "is_condition": 1,
                    "is_inverse": 1,
                    "local_var17": 1,
                    "local_var21": 1,
                    "local_var_12": 1,
                    "loop_flag_8": 1,
                    "loop_variable_7": 1,
                    "operation_type": 1,
                    "param_value_6": 1,
                    "parameter2": 1,
                    "parameter_index3": 1,
                    "shift_code": 1,
                    "switch_case_value3": 1,
                    "switch_case_value4": 1,
                    "temp_char3": 1,
                    "temp_var14": 1,
                    "temp_variable12": 1,
                    "value4": 1
                },
                "local_2e": {
                    "adc_code": 1,
                    "byte_value": 1,
                    "byte_value6": 1,
                    "calculation_type2": 1,
                    "char_value2": 1,
                    "char_var2": 1,
                    "character": 1,
                    "concatenation_value": 1,
                    "condition_result": 1,
                    "device_mode": 1,
                    "flag4": 1,
                    "float_type": 1,
                    "local_var20": 1,
                    "local_var_11": 1,
                    "loop_flag_7": 1,
                    "loop_variable_6": 1,
                    "operation": 1,
                    "operation_type": 2,
                    "option": 1,
                    "param_value_5": 1,
                    "parameter1": 1,
                    "parameter_index2": 1,
                    "shift_mode": 1,
                    "switch_case_value2": 1,
                    "switch_case_value3": 1,
                    "temp_char2": 1,
                    "temp_var13": 1,
                    "temp_variable11": 1,
                    "value3": 1
                },
                "local_2f": {
                    "calculation_type": 1,
                    "condition": 1,
                    "count": 1,
                    "device_id": 1,
                    "flag": 1,
                    "flag3": 3,
                    "int_value3": 1,
                    "int_var1": 1,
                    "int_variable": 1,
                    "local_var19": 1,
                    "local_var_10": 1,
                    "loop_flag_6": 1,
                    "loop_variable_5": 1,
                    "operation_code": 1,
                    "parameter_type": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "state": 3,
                    "status": 1,
                    "switch_case": 1,
                    "switch_case_value1": 1,
                    "switch_case_value2": 1,
                    "temp_var12": 1,
                    "temp_variable10": 1,
                    "value1": 1
                },
                "local_34": {
                    "calculation": 1,
                    "control_param": 1,
                    "float_param2": 1,
                    "float_result3": 1,
                    "float_value_2": 1,
                    "float_value_parameter": 1,
                    "float_var8": 1,
                    "float_variable": 1,
                    "hypotenuse": 1,
                    "int_value1": 1,
                    "int_value2": 1,
                    "integer_param_1": 1,
                    "local_var16": 1,
                    "local_var18": 1,
                    "local_var_9": 1,
                    "local_variable_1": 1,
                    "parameter_value": 1,
                    "parameter_value1": 1,
                    "result10": 1,
                    "result_var4": 1,
                    "scalar_parameter3": 1,
                    "string_value": 1,
                    "temp15": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var11": 1,
                    "temp_var2": 1,
                    "temp_var6": 1,
                    "value": 1,
                    "var_34": 1
                },
                "local_38": {
                    "calculation_value": 2,
                    "character_value": 1,
                    "float_param": 1,
                    "float_param1": 1,
                    "float_param_3": 1,
                    "float_parameter": 1,
                    "float_parameter_value": 1,
                    "float_result": 1,
                    "float_result2": 1,
                    "float_value": 2,
                    "float_value3": 1,
                    "float_value7": 1,
                    "float_value_result": 1,
                    "float_value_union": 1,
                    "float_var7": 1,
                    "float_variable": 1,
                    "hex_value": 1,
                    "hypotenuse_result": 1,
                    "input_value": 1,
                    "int_value": 2,
                    "int_var": 1,
                    "local_var17": 1,
                    "local_var_8": 1,
                    "param_value": 1,
                    "result9": 1,
                    "result_var3": 1,
                    "value": 1
                },
                "local_39": {
                    "byte5": 1,
                    "byte_value": 1,
                    "byte_value5": 1,
                    "calculation_flag": 1,
                    "char_value": 2,
                    "char_var1": 1,
                    "character": 1,
                    "concat_flag4": 1,
                    "config_type": 1,
                    "control_code": 1,
                    "flag3": 1,
                    "local_var15": 1,
                    "local_var16": 1,
                    "local_var_7": 1,
                    "loop_flag_5": 1,
                    "loop_var5": 1,
                    "mode": 1,
                    "param_value_4": 1,
                    "parameter_flag": 1,
                    "parameter_index": 1,
                    "parameter_index1": 1,
                    "parameter_value": 1,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "shifted_value": 1,
                    "temp_char1": 1,
                    "temp_char2": 1,
                    "temp_var8": 1,
                    "value2": 1
                },
                "local_3a": {
                    "bit_flag4": 1,
                    "bit_mask4": 1,
                    "byte4": 1,
                    "byte_value": 1,
                    "byte_value4": 2,
                    "byte_var4": 1,
                    "calculation_flag4": 1,
                    "character": 1,
                    "index4": 3,
                    "local_var14": 1,
                    "local_var15": 1,
                    "loop_counter": 1,
                    "loop_counter_4": 1,
                    "loop_flag_4": 1,
                    "loop_index4": 1,
                    "loop_var4": 1,
                    "loop_var_4": 1,
                    "loop_variable_4": 1,
                    "shift_count4": 1,
                    "temp14": 1,
                    "temp6": 1,
                    "temp_byte4": 1,
                    "temp_char1": 1,
                    "temp_character": 1,
                    "temp_var13": 1,
                    "temp_var7": 1
                },
                "local_3b": {
                    "bit_flag3": 1,
                    "bit_mask3": 1,
                    "byte3": 1,
                    "byte_value": 1,
                    "byte_value3": 2,
                    "byte_var3": 1,
                    "calculation_flag3": 1,
                    "character": 1,
                    "flag5": 1,
                    "index3": 3,
                    "local_var13": 1,
                    "local_var14": 1,
                    "loop_counter_3": 1,
                    "loop_flag_3": 1,
                    "loop_index3": 1,
                    "loop_var3": 1,
                    "loop_var_3": 1,
                    "loop_variable_3": 1,
                    "shift_count3": 1,
                    "temp13": 1,
                    "temp5": 1,
                    "temp_byte3": 2,
                    "temp_var10": 1,
                    "temp_var12": 1,
                    "temp_var6": 1
                },
                "local_3c": {
                    "bit_flag2": 1,
                    "bit_mask2": 1,
                    "byte2": 1,
                    "byte_value": 1,
                    "byte_value2": 2,
                    "byte_var2": 1,
                    "calculation_flag2": 1,
                    "character": 1,
                    "flag4": 1,
                    "index2": 3,
                    "local_var12": 1,
                    "local_var13": 1,
                    "loop_counter_2": 1,
                    "loop_flag_2": 1,
                    "loop_index2": 1,
                    "loop_var2": 1,
                    "loop_var_2": 1,
                    "loop_variable_2": 1,
                    "shift_count2": 1,
                    "temp12": 1,
                    "temp4": 1,
                    "temp_byte2": 2,
                    "temp_var11": 1,
                    "temp_var5": 1,
                    "temp_var9": 1
                },
                "local_3d": {
                    "bit_flag1": 1,
                    "bit_mask1": 1,
                    "byte1": 1,
                    "byte_value": 1,
                    "byte_value1": 2,
                    "byte_var1": 1,
                    "calculation_flag1": 1,
                    "character": 1,
                    "flag3": 1,
                    "index": 1,
                    "index1": 2,
                    "local_var11": 1,
                    "local_var12": 1,
                    "loop_counter_1": 1,
                    "loop_flag_1": 1,
                    "loop_index1": 1,
                    "loop_var1": 1,
                    "loop_var_1": 1,
                    "loop_variable_1": 1,
                    "shift_count": 1,
                    "temp11": 1,
                    "temp3": 1,
                    "temp_byte1": 2,
                    "temp_var10": 1,
                    "temp_var4": 1,
                    "temp_var8": 1
                },
                "local_4": {
                    "constant2": 1
                },
                "local_44": {
                    "calculation_result": 4,
                    "float_result": 2,
                    "float_result1": 1,
                    "float_result_3": 1,
                    "float_sum_2": 1,
                    "float_value1": 1,
                    "float_value2": 2,
                    "float_value3": 1,
                    "float_value5": 1,
                    "float_value_result": 1,
                    "float_var6": 1,
                    "float_variable": 1,
                    "local_var10": 1,
                    "local_var11": 1,
                    "param_value": 1,
                    "parameter_value": 3,
                    "result": 1,
                    "result8": 1,
                    "result_value": 1,
                    "shifted_result": 1,
                    "temp_var_10": 1,
                    "value": 1
                },
                "local_45": {
                    "bool_flag": 1,
                    "bool_value": 2,
                    "bool_var": 1,
                    "bool_var1": 1,
                    "boolean": 1,
                    "boolean_flag": 2,
                    "boolean_value": 1,
                    "boolean_var_1": 1,
                    "condition": 2,
                    "flag": 1,
                    "flag2": 7,
                    "flag_2": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_increment": 1,
                    "is_special_case": 1,
                    "is_true": 1,
                    "local_boolean_flag": 1,
                    "local_var10": 1,
                    "local_var9": 1,
                    "shift_direction": 1
                },
                "local_4c": {
                    "concatenation_result1": 1,
                    "float_add_result1": 1,
                    "float_addition_result": 1,
                    "float_param_2": 1,
                    "float_result1": 1,
                    "float_result_2": 1,
                    "float_sum_1": 1,
                    "float_value2": 1,
                    "float_value4": 1,
                    "float_value6": 1,
                    "float_var2": 2,
                    "float_var5": 1,
                    "float_variable": 1,
                    "local_flag_3": 1,
                    "local_var8": 1,
                    "local_var9": 1,
                    "local_var_6": 1,
                    "result7": 1,
                    "result_var2": 1,
                    "scalar_parameter2": 1,
                    "temp10": 1,
                    "temp4": 1,
                    "temp_float1": 1,
                    "temp_float2": 1,
                    "temp_var": 1,
                    "temp_var8": 1,
                    "temp_variable7": 1,
                    "temp_variable9": 1
                },
                "local_50": {
                    "concatenation_result": 1,
                    "device_data_6": 1,
                    "float_param_1": 1,
                    "float_result": 2,
                    "float_result_1": 1,
                    "float_value1": 1,
                    "float_value2": 1,
                    "float_value3": 1,
                    "float_value5": 1,
                    "float_var1": 2,
                    "float_var4": 1,
                    "float_variable": 1,
                    "local_flag_2": 1,
                    "local_var7": 1,
                    "local_var8": 1,
                    "local_var_5": 1,
                    "param_value_3": 1,
                    "result6": 1,
                    "result_var1": 1,
                    "scalar_parameter1": 1,
                    "temp3": 1,
                    "temp9": 1,
                    "temp_device_data1": 1,
                    "temp_float1": 1,
                    "temp_var": 1,
                    "temp_var7": 1,
                    "temp_variable6": 1,
                    "temp_variable8": 1
                },
                "local_51": {
                    "check_flag": 1,
                    "check_result": 1,
                    "condition_flag": 1,
                    "flag": 15,
                    "flag1": 3,
                    "is_null": 1,
                    "local_flag_1": 1,
                    "local_var6": 1,
                    "local_var7": 1,
                    "temp_var7": 1,
                    "temp_var_9": 1
                },
                "local_52": {
                    "char_value": 1,
                    "character": 11,
                    "character2": 2,
                    "character_check": 1,
                    "command": 1,
                    "command_character": 1,
                    "current_char": 1,
                    "input_char": 2,
                    "input_character": 1,
                    "input_flag": 1,
                    "parameter": 1,
                    "parameter_character": 1,
                    "parse_result": 1,
                    "parsed_char": 2,
                    "parsed_character": 1,
                    "switch_value": 1,
                    "temp8": 1
                },
                "local_58": {
                    "calculation_parameter": 1,
                    "character": 5,
                    "character_value": 1,
                    "concat_value": 1,
                    "concatenated_string": 2,
                    "current_char": 1,
                    "flipped_bits": 1,
                    "float_value_3": 1,
                    "float_variable": 1,
                    "input": 1,
                    "input_byte": 1,
                    "input_char": 4,
                    "input_param": 1,
                    "input_value": 3,
                    "local_var6": 1,
                    "local_var_4": 1,
                    "parsed_value": 1,
                    "raw_data": 1,
                    "temp_variable7": 1,
                    "value": 1
                },
                "local_7": {
                    "constant3": 1
                },
                "local_7c": {
                    "device_data3": 3,
                    "device_data_3": 1,
                    "device_data_parameter3": 1,
                    "float_var3": 1,
                    "float_variable": 1,
                    "input_data": 1,
                    "input_val": 1,
                    "local_var3": 3,
                    "local_var_3": 1,
                    "output_data": 1,
                    "output_param": 1,
                    "param3": 1,
                    "param_4": 1,
                    "parameter3": 3,
                    "parameter_4": 1,
                    "result": 1,
                    "result3": 1,
                    "temp_param": 1,
                    "temp_var4": 1,
                    "temp_var7": 1,
                    "temp_variable3": 1,
                    "temp_variable_3": 1,
                    "var_7c": 1
                },
                "local_80": {
                    "component2": 1,
                    "device_data2": 3,
                    "device_data_2": 2,
                    "device_data_parameter2": 1,
                    "float_param2": 1,
                    "float_value2": 1,
                    "float_var2": 1,
                    "float_var3": 1,
                    "float_variable": 1,
                    "local_var2": 3,
                    "local_var_2": 1,
                    "param2": 2,
                    "param_3": 1,
                    "param_value_2": 1,
                    "parameter2": 3,
                    "parameter_3": 1,
                    "result2": 1,
                    "temp_var3": 1,
                    "temp_variable2": 1,
                    "temp_variable_2": 1,
                    "updated_data2": 1,
                    "var_80": 1
                },
                "local_84": {
                    "component1": 1,
                    "device_data1": 3,
                    "device_data_1": 2,
                    "device_data_parameter1": 1,
                    "float_param1": 1,
                    "float_value1": 1,
                    "float_var1": 1,
                    "float_var2": 1,
                    "float_variable": 1,
                    "local_var1": 3,
                    "local_var_1": 1,
                    "param1": 2,
                    "param_2": 1,
                    "param_value_1": 1,
                    "parameter1": 3,
                    "parameter_2": 1,
                    "result1": 1,
                    "temp_var2": 1,
                    "temp_variable1": 1,
                    "temp_variable_1": 1,
                    "updated_data1": 1,
                    "var_84": 1
                },
                "local_94": {
                    "float_array": 1,
                    "float_parameter_list": 1,
                    "float_parameters": 1,
                    "float_params": 1,
                    "float_params_arr": 1,
                    "input_parameters": 1,
                    "local_array1": 1,
                    "param_values": 1,
                    "parameter_array": 4,
                    "parameter_values": 2,
                    "parameters": 11,
                    "parameters1": 1,
                    "parameters_1": 1,
                    "parameters_array_1": 1,
                    "params_array": 1,
                    "temp_array1": 1
                },
                "memset_with_value_0800b430": {
                    "initialize_array": 1,
                    "memset_with_value": 1
                },
                "param_1": {
                    "config_data": 1,
                    "input": 7,
                    "input_char": 1,
                    "input_character": 1,
                    "input_data": 6,
                    "input_param": 8,
                    "input_parameter": 2,
                    "input_value": 1,
                    "parameter": 1,
                    "user_input": 1
                },
                "process_and_update_data_0800525c": {
                    "process_and_update_data": 2
                },
                "process_and_update_device_data_08001e98": {
                    "process_and_update_device_data": 2
                },
                "process_data_blocks_08002408": {
                    "process_data_blocks": 1
                },
                "process_data_blocks_08002fd4": {
                    "process_data_blocks": 2
                },
                "process_input_and_send_data_08004bf4": {
                    "process_input_and_send_data": 1
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 2
                },
                "uStack_74": {
                    "device_data_5": 1,
                    "float_variable": 1,
                    "local_var5": 3,
                    "param_6": 1,
                    "parameter5": 1,
                    "previous_input_data_2": 1,
                    "result5": 1,
                    "stack_val2": 1,
                    "stack_value2": 1,
                    "stack_var2": 1,
                    "stack_variable_2": 1,
                    "temp2": 1,
                    "temp7": 1,
                    "temp_data2": 1,
                    "temp_device_data3": 1,
                    "temp_param2": 1,
                    "temp_stack2": 1,
                    "temp_stack_2": 1,
                    "temp_stack_variable2": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "temp_var9": 1,
                    "temp_var_8": 1,
                    "temp_variable5": 1,
                    "variable2": 1
                },
                "uStack_78": {
                    "device_data_4": 1,
                    "float_variable": 1,
                    "local_var4": 3,
                    "param_5": 1,
                    "parameter4": 1,
                    "previous_input_data_1": 1,
                    "result4": 1,
                    "stack_val1": 1,
                    "stack_value1": 1,
                    "stack_var1": 1,
                    "stack_variable_1": 1,
                    "temp1": 1,
                    "temp6": 1,
                    "temp_data1": 1,
                    "temp_device_data2": 1,
                    "temp_param1": 1,
                    "temp_stack1": 1,
                    "temp_stack_1": 1,
                    "temp_stack_variable1": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var8": 1,
                    "temp_var_7": 1,
                    "temp_variable4": 1,
                    "variable1": 1
                },
                "uVar2": {
                    "calculation_result": 1,
                    "float_result": 6,
                    "float_value": 4,
                    "float_value1": 1,
                    "temp": 2,
                    "temp_value": 3,
                    "temp_value1": 1,
                    "temp_var": 5,
                    "temp_var1": 2,
                    "temp_var_1": 1,
                    "temp_variable1": 1,
                    "value": 2
                },
                "uVar4": {
                    "index": 2,
                    "loop_var": 1,
                    "switch_case_value": 1,
                    "switch_value": 1,
                    "temp": 4,
                    "temp2": 1,
                    "temp_index": 1,
                    "temp_value": 2,
                    "temp_value2": 1,
                    "temp_var": 2,
                    "temp_var1": 3,
                    "temp_var2": 4,
                    "temp_var_1": 1,
                    "temp_var_2": 1,
                    "temp_variable": 1,
                    "temp_variable2": 1,
                    "var4": 1
                },
                "uVar5": {
                    "calculation_result": 2,
                    "float_value": 5,
                    "float_value2": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_float": 1,
                    "temp_float_value": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "temp_var2": 2,
                    "temp_var3": 4,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_variable": 1,
                    "temp_variable3": 1,
                    "value2": 1,
                    "var5": 1
                },
                "uVar6": {
                    "calculation_temp_var_1": 1,
                    "reverse_result": 1,
                    "shifted_result": 11,
                    "shifted_value": 1,
                    "shifted_value1": 2,
                    "temp3": 1,
                    "temp_value3": 1,
                    "temp_value4": 1,
                    "temp_var3": 1,
                    "temp_var4": 4,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "temp_variable": 1,
                    "temp_variable4": 1,
                    "var6": 1
                },
                "uVar7": {
                    "calculation_temp_var_2": 1,
                    "float_value3": 1,
                    "hypo_result": 2,
                    "hypotenuse": 6,
                    "hypotenuse1": 1,
                    "hypotenuse_result": 1,
                    "shifted_result2": 1,
                    "shifted_value2": 2,
                    "temp4": 1,
                    "temp_value4": 1,
                    "temp_value5": 1,
                    "temp_var4": 1,
                    "temp_var5": 4,
                    "temp_var_4": 1,
                    "temp_var_5": 1,
                    "temp_variable": 1,
                    "temp_variable5": 1,
                    "val1": 1,
                    "var7": 1
                },
                "uVar8": {
                    "calculation_temp_var_3": 1,
                    "float_value2": 1,
                    "float_value4": 1,
                    "hypotenuse": 1,
                    "hypotenuse2": 1,
                    "hypotenuse_result": 1,
                    "reverse_result": 1,
                    "reverse_shifted_result": 1,
                    "reversed_shifted_result": 1,
                    "shifted_float": 1,
                    "shifted_value3": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp_float": 1,
                    "temp_result": 1,
                    "temp_value5": 1,
                    "temp_value6": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var6": 4,
                    "temp_var_5": 1,
                    "temp_var_6": 1,
                    "temp_variable": 1,
                    "temp_variable6": 1,
                    "val2": 1,
                    "var8": 1
                }
            },
            "called": [
                "FUN_0800923c",
                "FUN_0800981c",
                "FUN_08008eec",
                "FUN_080098d0",
                "FUN_08008bf0",
                "FUN_08002fd4",
                "FUN_08001f00",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08001e98",
                "FUN_08009214",
                "FUN_08008894",
                "FUN_0800525c",
                "FUN_08000220",
                "FUN_0800b430",
                "FUN_080025e8",
                "FUN_08002408",
                "FUN_08004d7c",
                "FUN_08004bf4",
                "FUN_0800184c",
                "FUN_0800056c",
                "FUN_08008cd8",
                "FUN_08009228",
                "FUN_08008ba0",
                "FUN_08008590",
                "FUN_08009798",
                "FUN_08000478"
            ],
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "code": "\nchar process_input_and_return_result_080005b4(undefined4 input_param)\n\n{\n  int result;\n  undefined4 float_result;\n  char return_value;\n  uint temp_var2;\n  undefined4 float_value;\n  undefined8 shifted_result;\n  undefined8 hypotenuse;\n  undefined8 temp_var6;\n  undefined4 parameters [4];\n  undefined4 parameter1;\n  undefined4 device_data2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 float_array [6];\n  undefined4 character;\n  byte character;\n  undefined flag;\n  undefined4 float_result;\n  undefined4 float_var2;\n  undefined flag2;\n  uint calculation_result;\n  byte temp_byte1;\n  byte index2;\n  byte index3;\n  byte index4;\n  char char_value;\n  uint float_value;\n  undefined4 temp_var2;\n  sbyte state;\n  char operation_type;\n  char flag_3;\n  undefined4 float_value_1;\n  byte bit_flags;\n  ushort ushort_value;\n  uint parameter_value;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    return_value = '\\f';\n  }\n  else {\n    flag = 0;\n    ushort_value = 0;\n    bit_flags = 0;\n    float_value_1 = 0xbf800000;\n    flag_3 = '\\0';\n    operation_type = '\\0';\n    memset_with_value_0800b430(float_array + 3,0,0xc);\n    memset_with_value_0800b430(float_array,0,0xc);\n    DAT_20000e70 = '\\0';\n    state = 0;\n    while (result = check_and_parse_character(&character,float_array + 6,input_param,&flag), result != 0) {\n      shifted_result = reverse_bits_and_shift_08008590(character);\n      shifted_result = calculate_shifted_result((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n      parameter_value = calculate_parameter_value_08008ba0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n      if (character == 0x47) {\n        switch(parameter_value) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          state = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          state = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          state = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          state = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          state = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          state = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          state = 6;\n        }\n        switch(parameter_value) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          operation_type = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          operation_type = '\\x02';\n          break;\n        case 0x11:\n          initialize_parameters_08000478(0,1,2);\n          break;\n        case 0x12:\n          initialize_parameters_08000478(2,0,1);\n          break;\n        case 0x13:\n          initialize_parameters_08000478(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          float_result = calculate_float_value_08008eec(character,0x41200000);\n          shifted_result = reverse_bits_and_shift_08008590(float_result);\n          shifted_result = calculate_shifted_result((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          parameter_value = calculate_parameter_value_08008ba0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          switch(parameter_value) {\n          case 0x118:\n            operation_type = '\\x03';\n            break;\n          case 0x119:\n            operation_type = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            operation_type = '\\x05';\n            break;\n          case 0x12d:\n            operation_type = '\\x06';\n          }\n          break;\n        case 0x35:\n          flag_3 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)parameter_value - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          float_result = calculate_float_value_08008c30(character,0x41200000);\n          shifted_result = reverse_bits_and_shift_08008590(float_result);\n          shifted_result = calculate_shifted_result((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          parameter_value = calculate_parameter_value_08008ba0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          if (parameter_value == 0x398) {\n            operation_type = '\\a';\n          }\n          else if (parameter_value == 0x399) {\n            operation_type = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (character == 0x4d) {\n        if (parameter_value == 0x1e) {\nLAB_08000b96:\n          state = 5;\n        }\n        else if ((int)parameter_value < 0x1f) {\n          if ((int)parameter_value < 3) {\n            if (-1 < (int)parameter_value) goto LAB_08000b96;\n          }\n          else if (parameter_value - 3 < 3) {\n            state = 8;\n          }\n        }\n        switch(parameter_value) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (state != 0) {\n        if (((int)(uint)ushort_value >> state & 1U) == 0) {\n          ushort_value = ushort_value | (ushort)(1 << state);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        state = 0;\n      }\n    }\n    return_value = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      temp_var2 = 0;\n      float_value = 0;\n      char_value = '\\0';\n      flag = 0;\nswitchD_08000d18_caseD_47:\n      result = check_and_parse_character(&character,float_array + 6,input_param,&flag);\n      if (result != 0) {\n        switch(character) {\n        case 0x46:\n          result = check_concatenation_result(character,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = calculate_float_result(character);\n          }\n          else {\n            float_value_1 = calculate_float_result(character);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_var2 = (uint)character;\n          float_result = calculate_float_result(character);\n          float_array[temp_var2 - 0x49] = float_result;\n          break;\n        case 0x4c:\n          shifted_result = reverse_bits_and_shift_08008590(character);\n          shifted_result = calculate_shifted_result((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          char_value = calculate_shifted_value_08008bf0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          break;\n        case 0x50:\n          temp_var2 = character;\n          break;\n        case 0x52:\n          float_value = calculate_float_result(character);\n          break;\n        case 0x53:\n          result = check_if_concatenated_string_is_empty(character,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = check_if_concatenated_string_is_empty(character,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          shifted_result = reverse_bits_and_shift_08008590(character);\n          shifted_result = calculate_shifted_result((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          DAT_20000e88 = calculate_shifted_value_08008bf0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          break;\n        case 0x58:\n          float_array[3] = calculate_float_result(character);\n          bit_flags = bit_flags | 1;\n          break;\n        case 0x59:\n          float_array[4] = calculate_float_result(character);\n          bit_flags = bit_flags | 2;\n          break;\n        case 0x5a:\n          float_array[5] = calculate_float_result(character);\n          bit_flags = bit_flags | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      return_value = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          process_and_update_data((int)DAT_20000e76);\n          process_and_update_data_08000220(DAT_20000e77);\n        }\n        if ((ushort_value & 0x200) != 0) {\n          result = check_and_process_input(DAT_20000e8c,&local_var3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = local_var3;\n          DAT_20000e94 = local_var4;\n          DAT_20000e98 = local_var5;\n        }\n        switch(operation_type) {\n        case '\\x01':\n          result = check_if_concatenated_string_is_empty(temp_var2,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              process_data_blocks(temp_var2);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          shifted_result = reverse_bits_and_shift_08008590(temp_var2);\n          shifted_result = calculate_shifted_result((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          parameter_value = calculate_parameter_value_08008ba0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n          if ((((char_value == '\\x02') || (char_value == '\\x14')) && (-1 < (int)parameter_value)) &&\n             ((int)parameter_value < 7)) {\n            if ((bit_flags == 0) && (char_value == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)parameter_value < 1) {\n                parameter_value = (uint)DAT_20000e8c;\n              }\n              else {\n                parameter_value = parameter_value - 1;\n              }\n              result = check_and_process_input(parameter_value & 0xff,parameters);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (index4 = 0; index4 < 3; index4 = index4 + 1) {\n                if (((int)(uint)bit_flags >> index4 & 1U) != 0) {\n                  if (char_value == '\\x14') {\n                    temp_var2 = (uint)index4;\n                    float_result = calculate_float_addition_08008cd8(*(undefined4 *)(&DAT_20000e74 + (index4 + 2) * 4),\n                                         float_array[index4 + 3]);\n                    parameters[temp_var2] = float_result;\n                  }\n                  else {\n                    parameters[index4] = float_array[index4 + 3];\n                  }\n                }\n              }\n              process_input_and_send_data(parameter_value & 0xff,parameters);\n              if (parameter_value == DAT_20000e8c) {\n                DAT_20000e90 = parameters[0];\n                DAT_20000e94 = parameters[1];\n                DAT_20000e98 = parameters[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          bit_flags = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (bit_flags != 0) {\n            for (index3 = 0; index3 < 3; index3 = index3 + 1) {\n              if (((int)(uint)bit_flags >> index3 & 1U) == 0) {\n                float_array[index3 + 3] = *(undefined4 *)(&DAT_20000e74 + (index3 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)index3;\n                float_result = calculate_float_value_08008cdc(float_array[index3 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (index3 + 2) * 4));\n                float_array[temp_var2 + 3] = float_result;\n              }\n              else {\n                float_value = float_array[index3 + 3];\n                float_result = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index3 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (index3 + 10) * 4));\n                temp_var2 = (uint)index3;\n                float_result = calculate_float_value_08008cdc(float_value,float_result);\n                float_array[temp_var2 + 3] = float_result;\n              }\n            }\n            process_and_update_device_data(float_array[3],float_array[4],float_array[5],DAT_20000ed0,0);\n          }\n          if (operation_type == '\\x05') {\n            result = check_and_process_input(7,parameters + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = check_and_process_input(6,parameters + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          process_and_update_device_data(parameters[3],parameter1,device_data2,DAT_20000ed0,0);\n          DAT_20000e7c = parameters[3];\n          DAT_20000e80 = parameter1;\n          DAT_20000e84 = device_data2;\n          bit_flags = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (operation_type == '\\x06') {\n            process_input_and_send_data(7,&DAT_20000e7c);\n          }\n          else {\n            process_input_and_send_data(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (bit_flags == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (index2 = 0; index2 < 3; index2 = index2 + 1) {\n              if (((int)(uint)bit_flags >> index2 & 1U) != 0) {\n                float_result = calculate_float_addition_08008cd8(*(undefined4 *)(&DAT_20000e74 + (index2 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (index2 + 8) * 4));\n                temp_var2 = (uint)index2;\n                float_result = calculate_float_addition_08008cd8(float_result,float_array[index2 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_var2 + 10) * 4) = float_result;\n              }\n            }\n          }\n          bit_flags = 0;\n          break;\n        case '\\b':\n          memset_with_value_0800b430(&DAT_20000e9c,0,0xc);\n        }\n        if (((ushort_value & 4) != 0) || (bit_flags != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = check_if_concatenated_string_is_empty(float_value_1,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((flag_3 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (temp_byte1 = 0; temp_byte1 < 3; temp_byte1 = temp_byte1 + 1) {\n            if (((int)(uint)bit_flags >> temp_byte1 & 1U) == 0) {\n              float_array[temp_byte1 + 3] = *(undefined4 *)(&DAT_20000e74 + (temp_byte1 + 2) * 4);\n            }\n            else if (flag_3 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)temp_byte1;\n                float_result = calculate_float_value_08008cdc(float_array[temp_byte1 + 3],\n                                     *(undefined4 *)(&DAT_20000e74 + (temp_byte1 + 2) * 4));\n                float_array[temp_var2 + 3] = float_result;\n              }\n              else {\n                float_value = float_array[temp_byte1 + 3];\n                float_result = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (temp_byte1 + 8) * 4),\n                                     *(undefined4 *)(&DAT_20000e74 + (temp_byte1 + 10) * 4));\n                temp_var2 = (uint)temp_byte1;\n                float_result = calculate_float_value_08008cdc(float_value,float_result);\n                float_array[temp_var2 + 3] = float_result;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (bit_flags == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              process_and_update_device_data(float_array[3],float_array[4],float_array[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (bit_flags == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              float_result = float_value_1;\n              if (DAT_20000e72 == '\\0') {\n                float_result = DAT_20000e78;\n              }\n              process_and_update_device_data(float_array[3],float_array[4],float_array[5],float_result,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            bit_flags = bit_flags & ~(byte)(1 << DAT_20000e8b);\n            if ((bit_flags == 0) ||\n               (((result = check_if_concatenation_result_is_not_null(float_value,0), result != 0 &&\n                 (result = check_if_concatenation_result_is_not_null(float_array[DAT_20000e89],0), result != 0)) &&\n                (result = check_if_concatenation_result_is_not_null(float_array[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = check_if_concatenation_result_is_not_null(float_value,0);\n              if (result == 0) {\n                float_var2 = calculate_float_addition_08008cd8(float_array[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                float_result = calculate_float_addition_08008cd8(float_array[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                memset_with_value_0800b430(float_array,0,0xc);\n                float_result = calculate_float_value(float_value,0x40800000);\n                float_result = calculate_float_value(float_result,float_value);\n                float_value = calculate_float_value(float_var2,float_var2);\n                float_result = calculate_float_addition_08008cd8(float_result,float_value);\n                float_value = calculate_float_value(float_result,float_result);\n                calculation_result = calculate_float_addition_08008cd8(float_result,float_value);\n                result = check_if_concatenated_string_is_empty(calculation_result,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                shifted_result = reverse_bits_and_shift_08008590(calculation_result);\n                shifted_result = improved_process_data((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n                hypotenuse = reverse_bits_and_shift_08008590(float_var2);\n                temp_var6 = reverse_bits_and_shift_08008590(float_result);\n                hypotenuse = calculate_hypotenuse((int)hypotenuse,(int)((ulonglong)hypotenuse >> 0x20),(int)temp_var6,\n                                     (int)((ulonglong)temp_var6 >> 0x20));\n                shifted_result = calculate_floating_point_value((int)shifted_result,(uint)((ulonglong)shifted_result >> 0x20) ^ 0x80000000,\n                                     (int)hypotenuse,(int)((ulonglong)hypotenuse >> 0x20));\n                calculation_result = calculate_float_value((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  calculation_result = calculation_result ^ 0x80000000;\n                }\n                result = check_if_concatenated_string_is_empty(float_value,0);\n                if (result != 0) {\n                  calculation_result = calculation_result ^ 0x80000000;\n                  float_value = float_value ^ 0x80000000;\n                }\n                float_result = calculate_float_value(float_result,calculation_result);\n                float_result = calculate_float_addition_08008cd8(float_var2,float_result);\n                temp_var2 = (uint)DAT_20000e89;\n                float_result = calculate_float_value(float_result,0x3f000000);\n                float_array[temp_var2] = float_result;\n                float_result = calculate_float_value(float_var2,calculation_result);\n                float_result = calculate_float_value_08008cdc(float_result,float_result);\n                temp_var2 = (uint)DAT_20000e8a;\n                float_result = calculate_float_value(float_result,0x3f000000);\n                float_array[temp_var2] = float_result;\n              }\n              else {\n                shifted_result = reverse_bits_and_shift_08008590(float_array[DAT_20000e89]);\n                hypotenuse = reverse_bits_and_shift_08008590(float_array[DAT_20000e8a]);\n                shifted_result = calculate_hypotenuse((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20),(int)hypotenuse,\n                                     (int)((ulonglong)hypotenuse >> 0x20));\n                float_value = calculate_float_value((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n              }\n              flag2 = DAT_20000e71 == '\\x02';\n              float_result = float_value_1;\n              if (DAT_20000e72 == '\\0') {\n                float_result = DAT_20000e78;\n              }\n              calculate_and_update_device_data(&DAT_20000e7c,float_array + 3,float_array,DAT_20000e89,DAT_20000e8a,\n                           DAT_20000e8b,float_result,DAT_20000e72,float_value,flag2);\n            }\n            break;\n          case '\\x04':\n            if (bit_flags != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = float_array[3];\n          DAT_20000e80 = float_array[4];\n          DAT_20000e84 = float_array[5];\n        }\n        return_value = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          process_data_blocks();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            initialize_and_check_system_components();\n            return_value = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            return_value = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return return_value;\n}\n\n",
            "current_name": "process_input_and_return_result_080005b4",
            "entrypoint": "0x080005b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005b4": "process_input_and_return_result_080005b4",
                "auStack_70": "float_array",
                "cVar3": "return_value",
                "calculate_and_update_device_data_08001f00": "calculate_and_update_device_data",
                "calculate_float_addition_08008cd8": "calculate_float_addition",
                "calculate_float_result_0800056c": "calculate_float_result",
                "calculate_float_value_08008c30": "calculate_float_value",
                "calculate_float_value_08008cdc": "calculate_float_value2",
                "calculate_float_value_08008eec": "calculate_float_value",
                "calculate_floating_point_value_08008894": "calculate_floating_point_value",
                "calculate_hypotenuse_0800981c": "calculate_hypotenuse",
                "calculate_parameter_value_08008ba0": "calculate_parameter_value",
                "calculate_shifted_result_08009798": "calculate_shifted_result",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "check_and_parse_character_0800184c": "check_and_parse_character",
                "check_and_process_input_08004d7c": "check_and_process_input",
                "check_concatenation_result_0800923c": "check_concatenation_result",
                "check_if_concatenated_string_is_empty_08009228": "check_if_concatenated_string_is_empty",
                "check_if_concatenation_result_is_not_null_08009214": "check_if_concatenation_result_is_not_null",
                "iVar1": "result",
                "improved_process_data_080098d0": "improved_process_data",
                "initialize_and_check_system_components_080025e8": "initialize_and_check_system_components",
                "initialize_parameters_08000478": "initialize_parameters",
                "local_24": "parameter_value",
                "local_26": "ushort_value",
                "local_27": "bit_flags",
                "local_2c": "float_value_1",
                "local_2d": "flag_3",
                "local_2e": "operation_type",
                "local_2f": "state",
                "local_34": "temp_var2",
                "local_38": "float_value",
                "local_39": "char_value",
                "local_3a": "index4",
                "local_3b": "index3",
                "local_3c": "index2",
                "local_3d": "temp_byte1",
                "local_4": "constant2",
                "local_44": "calculation_result",
                "local_45": "flag2",
                "local_4c": "float_var2",
                "local_50": "float_result",
                "local_51": "flag",
                "local_52": "character",
                "local_58": "character",
                "local_7": "constant3",
                "local_7c": "local_var3",
                "local_80": "device_data2",
                "local_84": "parameter1",
                "local_94": "parameters",
                "memset_with_value_0800b430": "memset_with_value",
                "param_1": "input_param",
                "process_and_update_data_0800525c": "process_and_update_data",
                "process_and_update_device_data_08001e98": "process_and_update_device_data",
                "process_data_blocks_08002408": "process_data_blocks",
                "process_data_blocks_08002fd4": "process_data_blocks",
                "process_input_and_send_data_08004bf4": "process_input_and_send_data",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "uStack_74": "local_var5",
                "uStack_78": "local_var4",
                "uVar2": "float_result",
                "uVar4": "temp_var2",
                "uVar5": "float_value",
                "uVar6": "shifted_result",
                "uVar7": "hypotenuse",
                "uVar8": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800184c": {
            "additional_data": {
                "DAT_20000e70": {
                    "error_code": 1
                },
                "FUN_0800184c": {
                    "check_and_parse": 1,
                    "check_and_parse_character": 2,
                    "check_and_update_char": 1,
                    "check_and_update_char_code": 1,
                    "check_and_update_character": 2,
                    "convert_character": 1,
                    "extract_and_check_character": 1,
                    "extract_character": 2,
                    "parse_and_calculate": 1,
                    "parse_and_check_character": 3,
                    "parse_and_check_letter": 2,
                    "parse_and_update_value": 1,
                    "parse_and_validate_character": 1,
                    "parse_byte": 1,
                    "parse_byte_and_check_validity": 1,
                    "parse_character": 6,
                    "parse_input_byte": 1,
                    "parse_integer_from_string": 1,
                    "parse_string": 1,
                    "reverse_string_parameter": 1
                },
                "iVar1": {
                    "integer_result": 1,
                    "parse_result": 6,
                    "parsed_integer": 1,
                    "parsed_result": 1,
                    "result": 18,
                    "return_value": 1
                },
                "param_1": {
                    "converted_character": 1,
                    "output": 11,
                    "output_buffer": 4,
                    "output_byte": 5,
                    "output_char": 3,
                    "output_character": 4,
                    "output_value": 1,
                    "result": 2
                },
                "param_2": {
                    "calculation_input": 1,
                    "config": 1,
                    "context": 1,
                    "input": 1,
                    "input_code": 1,
                    "input_data": 1,
                    "input_int": 2,
                    "input_length": 1,
                    "input_parameter": 2,
                    "input_size": 2,
                    "input_value": 4,
                    "input_var": 1,
                    "integer": 1,
                    "integer_limit": 1,
                    "param": 5,
                    "param2": 1,
                    "param_2": 1,
                    "param_size": 1,
                    "size": 3
                },
                "param_3": {
                    "array_base": 1,
                    "array_base_addr": 1,
                    "base_address": 14,
                    "base_pointer": 1,
                    "data": 5,
                    "data_input": 1,
                    "data_offset": 3,
                    "data_start": 1,
                    "index_offset": 1,
                    "input_offset": 1,
                    "input_size": 1,
                    "string_offset": 1
                },
                "param_4": {
                    "array_index": 1,
                    "char_index": 1,
                    "current_address": 1,
                    "current_index": 2,
                    "current_offset": 1,
                    "current_position": 2,
                    "data": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "index": 4,
                    "index_pointer": 1,
                    "input": 3,
                    "input_buffer": 3,
                    "input_byte": 1,
                    "input_character_pointer": 1,
                    "input_data": 1,
                    "input_string": 1,
                    "next_character": 1,
                    "offset_char": 1,
                    "position": 1,
                    "source_string": 1,
                    "string_ptr": 1
                },
                "uVar2": {
                    "is_success": 2,
                    "is_valid": 1,
                    "result": 1,
                    "return_value": 6,
                    "success": 7,
                    "success_flag": 8,
                    "success_indicator": 1,
                    "success_status": 1
                }
            },
            "called": [
                "FUN_08002638"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 check_and_parse_character_0800184c(byte *output,undefined4 param,int base_address,byte *index)\n\n{\n  int result;\n  undefined4 success_flag;\n  \n  if (*(char *)(base_address + (uint)*index) == '\\0') {\n    success_flag = 0;\n  }\n  else {\n    *output = *(byte *)(base_address + (uint)*index);\n    if ((*output < 0x41) || (0x5a < *output)) {\n      DAT_20000e70 = 2;\n      success_flag = 0;\n    }\n    else {\n      *index = *index + 1;\n      result = parse_and_calculate_integer_08002638(base_address,index,param);\n      if (result == 0) {\n        DAT_20000e70 = 1;\n        success_flag = 0;\n      }\n      else {\n        success_flag = 1;\n      }\n    }\n  }\n  return success_flag;\n}\n\n",
            "current_name": "check_and_parse_character_0800184c",
            "entrypoint": "0x0800184c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800184c": "check_and_parse_character_0800184c",
                "iVar1": "result",
                "param_1": "output",
                "param_2": "param",
                "param_3": "base_address",
                "param_4": "index",
                "uVar2": "success_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018cc": {
            "additional_data": {
                "0xfffffaaf": {
                    "mask": 2
                },
                "FUN_080018cc": {
                    "apply_bitmask": 2,
                    "merge_flags": 1,
                    "set_bits_in_memory": 1,
                    "set_bitwise_or_for_bitmask": 1,
                    "set_bitwise_or_mask": 1,
                    "set_flag_in_register": 1,
                    "set_register_with_mask": 1,
                    "update_data": 5,
                    "update_flag": 1,
                    "update_flag_value": 1,
                    "update_flags": 3,
                    "update_memory": 2,
                    "update_memory_value": 2,
                    "update_register": 1,
                    "update_register_bits": 1,
                    "update_register_value": 3,
                    "update_registration_status": 1,
                    "update_sensor_data": 1,
                    "update_status": 1,
                    "update_status_flags": 1
                },
                "_DAT_40021014": {
                    "current_status": 1,
                    "data": 1,
                    "data_pointer": 1,
                    "data_register": 1,
                    "existing_data": 1,
                    "existing_value": 2,
                    "flag_register": 1,
                    "flags": 2,
                    "flags_register": 1,
                    "memory_address": 2,
                    "memory_value": 2,
                    "previous_flag_value": 1,
                    "register": 1,
                    "register_value": 6,
                    "registration_flags": 1,
                    "status_register": 1
                },
                "param_1": {
                    "bits_to_set": 1,
                    "flag": 1,
                    "flag_value": 2,
                    "input": 1,
                    "input_flag": 1,
                    "input_value": 7,
                    "new_bits": 1,
                    "new_parameter": 1,
                    "new_sensor_data": 1,
                    "new_status": 1,
                    "new_value": 8,
                    "status": 1,
                    "value": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_sensor_data_080018cc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_sensor_data_080018cc",
            "entrypoint": "0x080018cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018cc": "update_sensor_data_080018cc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018fc": {
            "additional_data": {
                "0xfffff55f": {
                    "bitmask": 1,
                    "mask": 1
                },
                "FUN_080018fc": {
                    "apply_mask": 1,
                    "apply_param_to_memory": 1,
                    "mask_bits": 1,
                    "merge_flags": 1,
                    "modify_register_value": 1,
                    "set_bit_in_register": 1,
                    "set_bitmask": 1,
                    "set_bits_in_memory": 2,
                    "set_bitwise_or_mask": 1,
                    "update_config_flags": 1,
                    "update_configuration": 1,
                    "update_data": 2,
                    "update_data_flags": 1,
                    "update_data_with_mask": 1,
                    "update_flag_with_mask": 1,
                    "update_flags": 2,
                    "update_memory_value": 2,
                    "update_param_and_mask": 1,
                    "update_param_with_mask": 1,
                    "update_parameter": 1,
                    "update_register": 1,
                    "update_register_flags": 1,
                    "update_register_value": 2,
                    "update_registers": 1,
                    "update_status": 1,
                    "update_variable_with_mask": 1
                },
                "_DAT_40021014": {
                    "config_flags_ptr": 1,
                    "config_value": 1,
                    "data_flags": 1,
                    "data_register": 2,
                    "existing_data": 2,
                    "existing_value": 2,
                    "flags": 2,
                    "memory": 1,
                    "memory_location": 2,
                    "memory_value": 1,
                    "original_value": 1,
                    "register_data": 2,
                    "register_value": 9,
                    "status": 1
                },
                "param_1": {
                    "bit": 1,
                    "bitmask": 1,
                    "bits_to_set": 3,
                    "config_flags": 1,
                    "data": 3,
                    "flag": 1,
                    "input": 2,
                    "input_mask": 1,
                    "input_value": 5,
                    "new_flags": 1,
                    "new_parameter_value": 1,
                    "new_value": 5,
                    "param": 1,
                    "updated_value": 1,
                    "value": 3,
                    "value_to_or": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_register_flags_080018fc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_register_flags_080018fc",
            "entrypoint": "0x080018fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018fc": "update_register_flags_080018fc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800192c": {
            "additional_data": {
                "DAT_20000e4c": {
                    "bit_value": 4,
                    "extracted_bit": 2,
                    "extracted_flag": 4,
                    "flag": 3,
                    "flag_extracted": 4,
                    "flag_value": 3,
                    "is_flag_set": 5,
                    "output_dat": 1,
                    "output_flag": 4
                },
                "DAT_20000ee4": {
                    "binary_flag": 1,
                    "bitfield_flags": 1,
                    "bitwise_data": 1,
                    "data": 3,
                    "flag": 5,
                    "flag_data": 1,
                    "flag_variable": 1,
                    "flags": 1,
                    "input_dat": 1,
                    "input_data": 5,
                    "input_flag": 4,
                    "input_flag_variable": 1,
                    "input_number": 1,
                    "input_value": 2,
                    "original_flag": 1,
                    "original_flag_value": 1,
                    "original_value": 1
                },
                "FUN_0800192c": {
                    "check_flag": 1,
                    "determine_flag_value": 1,
                    "extract_and_set_flag": 2,
                    "extract_bit_fields": 1,
                    "extract_bit_from_data": 1,
                    "extract_bit_from_flag": 3,
                    "extract_bit_from_integer": 1,
                    "extract_data_from_binary": 1,
                    "extract_flag_bit": 1,
                    "extract_flag_from_binary": 1,
                    "extract_flag_from_bitwise": 1,
                    "extract_flag_from_data": 7,
                    "extract_flag_from_variable": 1,
                    "get_bit_from_flag": 1,
                    "initialize_flag": 1,
                    "initialize_flags": 1,
                    "parse_dat_flags": 1,
                    "set_bit_from_flag": 1,
                    "set_dat_20000e4c": 1,
                    "set_flag_from_bit": 1,
                    "update_flag_based_on_bit": 1,
                    "update_flag_based_on_condition": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001ddc",
                "FUN_08004e30"
            ],
            "code": "\nvoid extract_flag_from_data_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "current_name": "extract_flag_from_data_0800192c",
            "entrypoint": "0x0800192c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800192c": "extract_flag_from_data_0800192c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800195c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "comp_status": 1,
                    "component_flag": 1,
                    "component_status": 1,
                    "flag": 5,
                    "status": 2,
                    "status_check": 1,
                    "status_flag": 4,
                    "system_component_flag": 1,
                    "system_component_status": 2,
                    "system_flag": 1,
                    "system_status": 8,
                    "system_status_flag": 1
                },
                "DAT_20000eaa": {
                    "component_status": 1,
                    "flags": 2,
                    "status": 2,
                    "system_component_flag": 1,
                    "system_component_flags": 2,
                    "system_components": 1,
                    "system_components_flag": 3,
                    "system_config": 1,
                    "system_config_flag": 1,
                    "system_flags": 10,
                    "system_state_flag": 1,
                    "system_status": 3
                },
                "DAT_a9": {
                    "system_state": 1
                },
                "DAT_aa": {
                    "component_flags": 1
                },
                "FUN_0800195c": {
                    "check_and_initialize_system_components": 1,
                    "initialize_and_check_components": 1,
                    "initialize_and_check_system": 8,
                    "initialize_and_check_system_components": 5,
                    "initialize_and_update_system": 1,
                    "initialize_check_system_components": 1,
                    "initialize_system": 1,
                    "initialize_system_and_check_components": 1,
                    "initialize_system_components": 9,
                    "initialize_system_components_if_needed": 3
                },
                "VAR_20000ea9": {
                    "system_component_flag": 1
                },
                "VAR_20000eaa": {
                    "system_status": 1
                },
                "initialize_and_check_system_components_080025e8": {
                    "initialize_and_check_system_components": 3
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid check_and_initialize_system_components_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    initialize_and_check_system_components();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "check_and_initialize_system_components_0800195c",
            "entrypoint": "0x0800195c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800195c": "check_and_initialize_system_components_0800195c",
                "initialize_and_check_system_components_080025e8": "initialize_and_check_system_components"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001994": {
            "additional_data": {
                "FUN_08001994": {
                    "calculate_data": 1,
                    "calculate_sensor_values": 1,
                    "improved_process_data": 4,
                    "process_data": 19,
                    "process_sensor_data": 3
                },
                "local_10": {
                    "param1": 1
                },
                "local_11": {
                    "changed_flag": 1,
                    "count": 4,
                    "counter": 13,
                    "counter2": 1,
                    "counter_enable": 1,
                    "current_flag": 1,
                    "flag1": 1,
                    "flag2": 1,
                    "flag_count": 1,
                    "increment": 1,
                    "increment_count": 1,
                    "local_counter": 1,
                    "loop_counter2": 1,
                    "temp": 1,
                    "temp_flag_count": 1,
                    "var19": 1
                },
                "local_17": {
                    "sensor_value": 1
                },
                "local_18": {
                    "adjusted_result": 1,
                    "delay": 1,
                    "final_param_result": 1,
                    "limit": 5,
                    "loop_limit": 1,
                    "min_param_result": 1,
                    "min_parameter": 1,
                    "min_result": 3,
                    "min_sensor_data": 1,
                    "min_threshold": 1,
                    "min_value": 5,
                    "minimum_value": 1,
                    "result11": 1,
                    "threshold": 2,
                    "value11": 2,
                    "value18": 1,
                    "value_f": 1,
                    "value_limit": 1,
                    "var18": 1
                },
                "local_1a": {
                    "constant2": 1,
                    "data_d": 1,
                    "flag5": 1,
                    "flag_copy": 1,
                    "flag_value": 1,
                    "flags_result": 1,
                    "modified_data": 1,
                    "register_flags": 3,
                    "sensor_control": 1,
                    "sensor_data1_temp": 1,
                    "sensor_data4": 2,
                    "sensor_data5": 1,
                    "sensor_data_6": 1,
                    "sensor_flag": 1,
                    "sensor_value": 1,
                    "shift_value2": 1,
                    "temp_flag": 2,
                    "temp_value": 1,
                    "update_value": 1,
                    "updated_param_2_data": 1,
                    "updated_value": 1,
                    "value10": 2,
                    "value17": 1,
                    "var17": 1
                },
                "local_1e": {
                    "temp_value3": 1
                },
                "local_20": {
                    "accumulated_value3": 1,
                    "adjusted_value3": 1,
                    "flag3_value": 1,
                    "flag_2_counter": 1,
                    "flag_shifted": 1,
                    "increment_counter": 1,
                    "index2": 1,
                    "initial_sum": 1,
                    "loop_temp2": 1,
                    "negative_counter_copy": 1,
                    "offset3": 2,
                    "param_2_difference": 1,
                    "result2_temp2": 1,
                    "shift": 1,
                    "shift_value1": 1,
                    "shift_value3": 1,
                    "shifted_result3": 1,
                    "shifted_value3": 2,
                    "temp_value2": 1,
                    "temp_value6": 1,
                    "value16": 1,
                    "value3": 1,
                    "value3_copy": 1,
                    "value6": 1,
                    "value9": 2,
                    "value_6": 1,
                    "value_e": 1,
                    "var16": 1
                },
                "local_24": {
                    "accumulated_value2": 1,
                    "adjusted_value2": 1,
                    "difference_value2": 1,
                    "flag1_shifted": 1,
                    "flag2_value": 1,
                    "flag_1_counter": 1,
                    "index1": 1,
                    "loop_temp1": 1,
                    "negative_counter": 1,
                    "negative_shift": 1,
                    "offset2": 2,
                    "param_1_difference": 1,
                    "parameter_1_sum": 1,
                    "result1_temp2": 1,
                    "shift_value2": 1,
                    "shifted_max_value": 1,
                    "shifted_result2": 1,
                    "shifted_value2": 2,
                    "temp_value1": 1,
                    "temp_value5": 1,
                    "value15": 1,
                    "value2": 1,
                    "value2_copy": 1,
                    "value5": 1,
                    "value8": 2,
                    "value_5": 1,
                    "value_d": 1,
                    "var15": 1
                },
                "local_28": {
                    "accumulator": 1,
                    "adjusted_value1": 1,
                    "difference_value1": 1,
                    "flag1_value": 1,
                    "flag2_shifted": 1,
                    "flag_3_counter": 1,
                    "half_max_value": 1,
                    "loop_rollover": 1,
                    "negative_count": 1,
                    "offset1": 2,
                    "param_3_difference": 1,
                    "parameter_2_sum": 1,
                    "result10": 1,
                    "result2": 1,
                    "shift_value1": 1,
                    "shifted_result1": 1,
                    "shifted_value1": 2,
                    "shifted_value2": 1,
                    "temp_index": 1,
                    "temp_value4": 1,
                    "value1": 1,
                    "value14": 1,
                    "value1_copy": 1,
                    "value4": 1,
                    "value7": 2,
                    "value_4": 1,
                    "value_c": 1,
                    "var14": 1
                },
                "local_2c": {
                    "count_difference": 1,
                    "counter_difference": 1,
                    "diff": 1,
                    "difference": 9,
                    "difference_value": 1,
                    "loop_condition": 1,
                    "pending_value": 1,
                    "remaining_value": 1,
                    "sensor_offset_diff": 1,
                    "shift_count": 1,
                    "shift_offset": 1,
                    "shift_value": 1,
                    "shift_value_temp": 1,
                    "shifted_difference": 1,
                    "shifted_increment": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "shifted_value_difference": 1,
                    "value13": 1,
                    "value6": 2,
                    "value_b": 1,
                    "var13": 1
                },
                "local_30": {
                    "accumulated_value": 1,
                    "accumulator": 5,
                    "count": 1,
                    "counter": 1,
                    "factor": 1,
                    "loop_accumulator": 1,
                    "sensor_data": 1,
                    "shift_counter": 1,
                    "shift_value": 1,
                    "shifted_sum": 1,
                    "sum": 2,
                    "sum_value": 2,
                    "temp_sum": 1,
                    "total": 1,
                    "total_count": 1,
                    "total_increment": 1,
                    "total_shifted_value": 2,
                    "total_value": 2,
                    "value12": 1,
                    "value5": 2,
                    "value_a": 1,
                    "var12": 1
                },
                "local_34": {
                    "count": 2,
                    "counter": 5,
                    "increment": 2,
                    "loop_counter": 3,
                    "register_value": 1,
                    "result9": 1,
                    "sensor_counter": 1,
                    "sensor_data3": 1,
                    "sensor_data_5": 1,
                    "sensor_offset": 1,
                    "shift_value": 1,
                    "shifted_result": 1,
                    "shifted_value_result": 1,
                    "sum": 1,
                    "temp_value": 1,
                    "threshold": 2,
                    "value11": 1,
                    "value4": 2,
                    "value_temp": 1,
                    "var11": 1
                },
                "local_35": {
                    "shift_value": 1
                },
                "local_36": {
                    "data_c": 1,
                    "sensor_data": 1,
                    "sensor_data2": 1,
                    "sensor_data3": 7,
                    "sensor_data4": 4,
                    "sensor_data_4": 1,
                    "shift_result": 1,
                    "temp_data": 3,
                    "temp_sensor_data": 1,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "updated_sensor_data": 6,
                    "value10": 1,
                    "value3": 1,
                    "var10": 1
                },
                "local_3c": {
                    "data_b": 1,
                    "func_result": 2,
                    "function_result": 1,
                    "op_result": 1,
                    "output_data": 1,
                    "result2": 1,
                    "sensor_data2": 9,
                    "sensor_data3": 4,
                    "sensor_data_3": 1,
                    "sensor_result": 2,
                    "sensor_value": 2,
                    "shifted_value": 1,
                    "temp_value2": 1,
                    "value2": 1,
                    "value9": 1,
                    "var9": 1
                },
                "local_3f": {
                    "float_value1": 1
                },
                "local_40": {
                    "float_value2": 1,
                    "max_flag_result": 1,
                    "max_param_result": 1,
                    "max_parameter": 2,
                    "max_result": 3,
                    "max_value": 8,
                    "max_value1": 1,
                    "max_value2": 1,
                    "maximum_param_result": 1,
                    "maximum_value": 1,
                    "param_1_max": 1,
                    "result": 1,
                    "result7": 1,
                    "result8": 2,
                    "result9": 1,
                    "result_g": 1,
                    "temp_value1": 1,
                    "value8": 1,
                    "var8": 1
                },
                "local_44": {
                    "float_result": 1,
                    "float_result1": 2,
                    "float_value": 13,
                    "float_value1": 11,
                    "float_value_1": 1,
                    "result_f": 1,
                    "value7": 1,
                    "var7": 1
                },
                "local_47": {
                    "result3": 1
                },
                "local_48": {
                    "result1": 1,
                    "result2": 1,
                    "result_e": 1,
                    "shifted_data": 1,
                    "shifted_value": 23,
                    "shifted_value_temp": 1,
                    "value6": 1,
                    "var6": 1
                },
                "local_4b": {
                    "result2": 1
                },
                "local_4c": {
                    "min_value": 1,
                    "param_1_result": 1,
                    "param_result": 2,
                    "param_result4": 1,
                    "parameter_result": 3,
                    "result": 2,
                    "result1": 1,
                    "result3": 1,
                    "result4": 2,
                    "result4_temp": 1,
                    "result6": 1,
                    "result7": 2,
                    "result8": 1,
                    "result_d": 1,
                    "scaled_value": 1,
                    "sensor_data2": 5,
                    "sensor_data_2": 1,
                    "sensor_data_result": 1,
                    "value5": 1,
                    "var5": 1
                },
                "local_4d": {
                    "result1": 1
                },
                "local_4e": {
                    "constant1": 1,
                    "data_a": 1,
                    "sensor_data": 9,
                    "sensor_data1": 14,
                    "sensor_data2": 1,
                    "sensor_data_1": 1,
                    "value1": 1,
                    "value4": 1,
                    "var4": 1
                },
                "local_53": {
                    "value3": 1
                },
                "local_54": {
                    "flag_3_result": 1,
                    "flag_result3": 1,
                    "local_value3": 1,
                    "param3_result": 1,
                    "param_1_value3": 1,
                    "param_3_result": 1,
                    "param_result3": 1,
                    "parameter3": 1,
                    "parameter_3": 1,
                    "result3": 4,
                    "result3_temp": 1,
                    "result5": 1,
                    "result6": 2,
                    "result7": 1,
                    "result_c": 1,
                    "value3": 7,
                    "value5": 1,
                    "value_3": 1,
                    "var3": 1,
                    "variable3": 1
                },
                "local_57": {
                    "value2": 1
                },
                "local_58": {
                    "flag_2_result": 1,
                    "flag_result2": 1,
                    "local_value2": 1,
                    "param2_result": 1,
                    "param_1_value2": 1,
                    "param_2_result": 1,
                    "param_result2": 1,
                    "parameter2": 1,
                    "parameter_2": 1,
                    "result2": 4,
                    "result2_temp": 1,
                    "result4": 1,
                    "result5": 2,
                    "result6": 1,
                    "result_b": 1,
                    "value2": 7,
                    "value4": 1,
                    "value_2": 1,
                    "var2": 1,
                    "variable2": 1
                },
                "local_5b": {
                    "value1": 1
                },
                "local_5c": {
                    "flag_1_result": 1,
                    "flag_result1": 1,
                    "local_value1": 1,
                    "param1_result": 1,
                    "param_1_result": 1,
                    "param_1_value1": 1,
                    "param_result1": 1,
                    "parameter1": 1,
                    "parameter_1": 1,
                    "result1": 4,
                    "result1_temp": 1,
                    "result3": 1,
                    "result4": 2,
                    "result5": 1,
                    "result_a": 1,
                    "value1": 7,
                    "value3": 1,
                    "value_1": 1,
                    "var1": 1,
                    "variable1": 1
                },
                "local_61": {
                    "flag": 2,
                    "flag4": 1,
                    "flag_backup": 1,
                    "flag_copy": 1,
                    "flag_copy2": 1,
                    "flag_count": 2,
                    "flags_temp": 1,
                    "local_flag": 5,
                    "num_flags": 1,
                    "param_1_copy": 1,
                    "param_flags": 1,
                    "result": 1,
                    "result_flag": 1,
                    "result_flags": 3,
                    "sensor_data": 1,
                    "temp_byte": 1,
                    "temp_flag": 2,
                    "updated_flags": 1
                },
                "param_1": {
                    "bit_flags": 1,
                    "byte_param": 1,
                    "flag": 5,
                    "flag1": 2,
                    "flag_param": 1,
                    "flags": 16,
                    "input_flags": 4,
                    "param1": 1
                },
                "param_2": {
                    "char_param_1": 1,
                    "condition": 4,
                    "condition_flag": 1,
                    "enable": 1,
                    "enable_flag": 1,
                    "enable_sensor": 1,
                    "flag1": 7,
                    "flag2": 3,
                    "flag_1": 1,
                    "is_condition1_true": 1,
                    "is_flag1_enabled": 1,
                    "is_flag_on": 1,
                    "is_flag_set": 1,
                    "is_param_2_zero": 1,
                    "option1": 1,
                    "param2": 4,
                    "param_2": 1
                },
                "param_3": {
                    "char_param_2": 1,
                    "condition_flag": 1,
                    "enable_data": 1,
                    "enable_flag": 1,
                    "flag2": 7,
                    "flag3": 3,
                    "flag_2": 1,
                    "flag_condition": 1,
                    "invert": 1,
                    "is_condition2_true": 1,
                    "is_flag2_enabled": 1,
                    "is_param_3_zero": 1,
                    "is_sensor_enabled": 1,
                    "option2": 1,
                    "param3": 4,
                    "param_3": 1,
                    "sensor": 1,
                    "update_flag": 3
                },
                "param_4": {
                    "data": 1,
                    "float_param": 1,
                    "float_value": 1,
                    "floating_point_value": 1,
                    "input_value": 1,
                    "param": 5,
                    "param4": 8,
                    "param_4": 3,
                    "param_value": 1,
                    "parameter": 2,
                    "parameter4": 1,
                    "shift_value": 3,
                    "value": 3
                },
                "uVar1": {
                    "result": 2,
                    "result1": 14,
                    "result_1": 1,
                    "result_var": 1,
                    "temp_var": 1
                },
                "uVar2": {
                    "largest_value": 1,
                    "max_value": 12,
                    "min_value": 1,
                    "result2": 5
                },
                "uVar3": {
                    "bits_result": 1,
                    "data1": 1,
                    "processed_value1": 1,
                    "result2": 4,
                    "result3": 3,
                    "result_2": 1,
                    "reverse_bits_value": 1,
                    "shifted_value": 2,
                    "temp1": 1,
                    "temp_value1": 1,
                    "temp_var2": 1,
                    "value": 1,
                    "value1": 1
                },
                "uVar4": {
                    "data2": 1,
                    "improved_value": 1,
                    "processed_result": 1,
                    "processed_value": 2,
                    "processed_value2": 1,
                    "result2": 1,
                    "result3": 4,
                    "result4": 3,
                    "result_3": 1,
                    "temp2": 1,
                    "temp_value2": 1,
                    "temp_var3": 1,
                    "value2": 1
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_080018cc",
                "FUN_08009318",
                "FUN_08008894",
                "FUN_080098d0",
                "FUN_08008bf0",
                "FUN_080095b8",
                "FUN_080078f4",
                "FUN_0800854c",
                "FUN_0800b430",
                "FUN_080018fc",
                "FUN_08002828",
                "FUN_08009054",
                "FUN_08008c30",
                "FUN_08008590",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08001d4c"
            ],
            "code": "\nvoid improved_process_data_08001994(byte flags,char flag1,char flag2,undefined4 param4)\n\n{\n  undefined4 result1;\n  uint max_value;\n  undefined8 result2;\n  undefined8 result3;\n  byte local_flag;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort sensor_data1;\n  uint sensor_data2;\n  int shifted_value;\n  undefined4 float_value;\n  uint max_value;\n  uint sensor_data2;\n  ushort sensor_data3;\n  uint counter;\n  uint accumulator;\n  int difference;\n  int shifted_value1;\n  int offset2;\n  int offset3;\n  ushort register_flags;\n  uint min_value;\n  char counter;\n  \n  counter = '\\0';\n  memset_with_value_0800b430(&value1,0,0xc);\n  if ((flags & 1) != 0) {\n    counter = counter + '\\x01';\n    result2 = reverse_bits_and_shift_08008590(DAT_20000ebc);\n    value1 = calculate_parameter_result_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    counter = counter + '\\x01';\n    result2 = reverse_bits_and_shift_08008590(DAT_20000ec0);\n    value2 = calculate_parameter_result_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    counter = counter + '\\x01';\n    result2 = reverse_bits_and_shift_08008590(DAT_20000ec4);\n    value3 = calculate_parameter_result_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  max_value = value3;\n  if (value3 < value2) {\n    max_value = value2;\n  }\n  max_value = value1;\n  if (value1 < max_value) {\n    max_value = max_value;\n  }\n  result2 = reverse_bits_0800854c(max_value);\n  result3 = reverse_bits_0800854c(counter);\n  result3 = improved_process_data_08001994_080098d0((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result2 = calculate_floating_point_value_08008894((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  float_value = calculate_float_value_08008c30((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = calculate_float_value_08008eec(DAT_20000edc,float_value);\n  result1 = calculate_floating_point_value_08009054(result1,0x453b8000);\n  result2 = reverse_bits_and_shift_08008590(result1);\n  result2 = calculate_result_with_precision_08009318((int)result2,(int)((ulonglong)result2 >> 0x20));\n  shifted_value = calculate_shifted_value_08008bf0((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = reverse_bits_0800854c(counter);\n  result2 = improved_process_data_08001994_080098d0((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result3 = reverse_bits_and_shift_08008590(param4);\n  result2 = calculate_improved_result_08008640((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                       (int)((ulonglong)result3 >> 0x20));\n  result1 = calculate_float_value_08008c30((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = calculate_float_value_08008eec(float_value,result1);\n  result1 = calculate_floating_point_value_08009054(0x4c64e1c0,result1);\n  result2 = reverse_bits_and_shift_08008590(result1);\n  sensor_data2 = calculate_parameter_result_080095b8((int)result2,(int)((ulonglong)result2 >> 0x20));\n  min_value = 75000;\n  if (sensor_data2 < 75000) {\n    min_value = sensor_data2;\n  }\n  sensor_data1 = DAT_20000ed4;\n  register_flags = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (flag1 == '\\0') {\n    register_flags = register_flags ^ 0xaa0;\n  }\n  update_register_flags_080018fc(register_flags);\n  update_sensor_data_080018cc(sensor_data1);\n  shifted_value1 = -(max_value >> 1);\n  difference = min_value - DAT_20000ec9;\n  accumulator = 0;\n  counter = 10000;\n  local_flag = flags;\n  offset2 = shifted_value1;\n  offset3 = shifted_value1;\n  while( true ) {\n    sensor_data3 = sensor_data1;\n    sensor_data2 = FUNC_080078f4();\n    if (flag2 == '\\0') {\n      sensor_data2 = sensor_data2 ^ 0x1e;\n    }\n    if (((local_flag & 1) != 0) && (offset3 = offset3 + value1, 0 < offset3)) {\n      if ((sensor_data2 & 0x10) == 0) {\n        local_flag = local_flag & 0xfe;\n      }\n      else {\n        sensor_data3 = sensor_data3 ^ 0x10;\n      }\n      offset3 = offset3 - max_value;\n    }\n    if (((local_flag & 2) != 0) && (offset2 = offset2 + value2, 0 < offset2)) {\n      if ((sensor_data2 & 8) == 0) {\n        local_flag = local_flag & 0xfd;\n      }\n      else {\n        sensor_data3 = sensor_data3 ^ 0x440;\n      }\n      offset2 = offset2 - max_value;\n    }\n    if (((local_flag & 4) != 0) && (shifted_value1 = shifted_value1 + value3, 0 < shifted_value1)) {\n      if ((sensor_data2 & 4) == 0) {\n        local_flag = local_flag & 0xfb;\n      }\n      else {\n        sensor_data3 = sensor_data3 ^ 0x100;\n      }\n      shifted_value1 = shifted_value1 - max_value;\n    }\n    if ((local_flag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_sensor_data_080018cc(sensor_data3);\n    FUNC_08002828(DAT_20000ec9);\n    update_sensor_data_080018cc(sensor_data1);\n    FUNC_08002828(difference);\n    if ((sensor_data2 < min_value) && (counter = min_value + counter, 20000 < counter)) {\n      counter = counter - 20000;\n      accumulator = shifted_value + accumulator;\n      min_value = 60000000 / accumulator;\n      if (min_value < sensor_data2) {\n        min_value = sensor_data2;\n      }\n      difference = min_value - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "improved_process_data_08001994",
            "entrypoint": "0x08001994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001994": "improved_process_data_08001994",
                "local_11": "counter",
                "local_18": "min_value",
                "local_1a": "register_flags",
                "local_20": "offset3",
                "local_24": "offset2",
                "local_28": "shifted_value1",
                "local_2c": "difference",
                "local_30": "accumulator",
                "local_34": "counter",
                "local_36": "sensor_data3",
                "local_3c": "sensor_data2",
                "local_40": "max_value",
                "local_44": "float_value",
                "local_48": "shifted_value",
                "local_4c": "sensor_data2",
                "local_4e": "sensor_data1",
                "local_54": "value3",
                "local_58": "value2",
                "local_5c": "value1",
                "local_61": "local_flag",
                "param_1": "flags",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "param4",
                "uVar1": "result1",
                "uVar2": "max_value",
                "uVar3": "result2",
                "uVar4": "result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "additional_data": {
                "DAT_20000ee8": {
                    "data2": 1,
                    "data_3": 2,
                    "other_data_array": 1
                },
                "DAT_20000eec": {
                    "data1": 1,
                    "data_1": 2,
                    "data_array": 1
                },
                "DAT_20000ef0": {
                    "data3": 1,
                    "data_2": 2,
                    "operation_parameter": 1
                },
                "FUNC_08002814": {
                    "perform_function": 1,
                    "perform_operation": 4
                },
                "FUN_08001d4c": {
                    "initialize_and_process_data": 28,
                    "process_and_clear_flags": 1,
                    "process_data": 1,
                    "process_data_and_check_condition": 1
                },
                "cVar1": {
                    "countdown_minus_one": 1,
                    "current_value": 1,
                    "iteration_counter": 1,
                    "loop_counter": 2,
                    "loop_counter_decremented": 1,
                    "loop_counter_minus_one": 1,
                    "new_char": 1,
                    "previous_counter": 1,
                    "temp_counter": 1,
                    "updated_counter": 2,
                    "updated_loop_counter": 1
                },
                "clear_bitwise_flags_and_check_condition_080057e4": {
                    "clear_bitwise_flags_and_check_condition": 1,
                    "clear_flags_and_check_condition": 4
                },
                "improved_process_data_08001994": {
                    "improved_process_data": 1,
                    "process_data": 4
                },
                "initialize_global_variables_08005790": {
                    "initialize_global_variables": 5
                },
                "local_9": {
                    "condition_flag": 1,
                    "count": 2,
                    "countdown": 1,
                    "counter": 8,
                    "loop_count": 1,
                    "loop_counter": 17,
                    "loop_iterator": 1
                }
            },
            "called": [
                "FUN_08002814",
                "FUN_08001994",
                "FUN_080057e4",
                "FUN_08005790"
            ],
            "calling": [
                "FUN_080024c4"
            ],
            "code": "\nvoid initialize_and_process_data_08001d4c(void)\n\n{\n  char loop_counter;\n  char loop_counter;\n  \n  initialize_global_variables();\n  process_data(4,1,0,DAT_20000eec);\n  process_data(3,1,0,DAT_20000eec);\n  FUNC_08002814(DAT_20000ef0);\n  loop_counter = '\\x02';\n  while( true ) {\n    loop_counter = loop_counter + -1;\n    if (loop_counter == '\\0') break;\n    process_data(7,0,1,DAT_20000ee8);\n    FUNC_08002814(DAT_20000ef0);\n    loop_counter = loop_counter;\n    if ('\\0' < loop_counter) {\n      process_data(7,1,0,DAT_20000ee8);\n      FUNC_08002814(DAT_20000ef0);\n    }\n  }\n  clear_flags_and_check_condition();\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_08001d4c",
            "entrypoint": "0x08001d4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001d4c": "initialize_and_process_data_08001d4c",
                "cVar1": "loop_counter",
                "clear_bitwise_flags_and_check_condition_080057e4": "clear_flags_and_check_condition",
                "improved_process_data_08001994": "process_data",
                "initialize_global_variables_08005790": "initialize_global_variables",
                "local_9": "loop_counter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "additional_data": {
                "DAT_20000ea8": {
                    "flag": 1
                },
                "DAT_20000ea9": {
                    "status": 1
                },
                "DAT_20000eaa": {
                    "counter": 1
                },
                "DAT_20000eb8": {
                    "is_device_online": 1
                },
                "DAT_20000ee4": {
                    "device_state": 1
                },
                "FUNC_08008244": {
                    "exec_func": 1,
                    "execute_first_function": 1,
                    "execute_function1": 1,
                    "execute_functions": 1,
                    "execute_initialization": 1,
                    "execute_initialization_function": 1,
                    "execute_preprocessing": 1,
                    "execute_startup_function": 1,
                    "function1": 1,
                    "initialize": 2,
                    "initialize_data_functions": 1,
                    "initialize_functions": 1,
                    "initialize_global_variables": 1,
                    "initialize_grbl_system": 1,
                    "initialize_hardware": 2,
                    "initialize_library": 1,
                    "initialize_logging": 1,
                    "initialize_system": 4,
                    "perform_initial_operations": 2,
                    "perform_initial_setup": 1,
                    "perform_initialization": 2,
                    "perform_startup_operations": 1
                },
                "FUNC_080082ba": {
                    "exec_func_2": 1,
                    "execute_additional_functions": 1,
                    "execute_function": 1,
                    "execute_function2": 1,
                    "execute_second_function": 1,
                    "initialize_2": 1,
                    "initialize_and_clear_data": 1,
                    "initialize_peripherals": 1,
                    "log_data": 1,
                    "perform_additional_operations": 1,
                    "perform_additional_processing": 1,
                    "reset_device": 1,
                    "reset_system": 1,
                    "update_flags": 1
                },
                "FUN_08001ddc": {
                    "initialize_and_process": 2,
                    "initialize_and_process_data": 3,
                    "initialize_and_process_device_data": 4,
                    "initialize_and_process_loop": 1,
                    "initialize_and_process_system": 1,
                    "initialize_system": 2,
                    "main_control_loop": 1,
                    "main_function": 1,
                    "process_binary_data": 1,
                    "process_data": 6,
                    "process_data_and_device": 1,
                    "process_data_and_devices": 1,
                    "process_data_cycle": 1,
                    "process_device": 2,
                    "process_device_data": 3,
                    "process_main_loop": 1
                },
                "display_device_status_message_080041a0": {
                    "display_device_status_message": 25,
                    "display_device_status_msg": 1,
                    "display_status_message": 5
                },
                "extract_flag_from_data_0800192c": {
                    "extract_flag": 2,
                    "extract_flag_from_data": 29
                },
                "initialize_and_calculate_floating_point_values_0800283a": {
                    "calculate_floating_point_values": 4,
                    "init_and_calc_float_values": 1,
                    "initialize_and_calculate_float_values": 13,
                    "initialize_and_calculate_floating_point": 1,
                    "initialize_and_calculate_floating_point_values": 9,
                    "initialize_and_calculate_floats": 2,
                    "initialize_and_calculate_fp_values": 1
                },
                "initialize_and_clear_data_08002f24": {
                    "init_and_clear_data": 1,
                    "initialize_and_clear_data": 28
                },
                "initialize_and_print_grbl_version_080039a0": {
                    "init_and_print_version": 1,
                    "initialize_and_print_firmware_version": 1,
                    "initialize_and_print_grbl_version": 17,
                    "initialize_and_print_program_version": 1,
                    "initialize_and_print_version": 9,
                    "print_grbl_version_information": 1
                },
                "initialize_and_process_data_080051b4": {
                    "init_and_process_data": 1,
                    "initialize_and_process_data": 29,
                    "initialize_and_process_data2": 1
                },
                "initialize_and_process_input_080004ac": {
                    "init_and_process_input": 1,
                    "initialize_and_process_input": 29
                },
                "initialize_and_reset_system_08005238": {
                    "init_and_reset_system": 1,
                    "initialize_and_reset_system": 29
                },
                "initialize_data_08005814": {
                    "init_data": 1,
                    "initialize_data": 30
                },
                "initialize_system_080001f8": {
                    "init_system": 1,
                    "initialize_system": 28,
                    "initialize_system_state": 1
                },
                "memset_with_value_0800b430": {
                    "clear_memory": 5,
                    "clear_memory_with_value": 3,
                    "initialize_memory": 10,
                    "initialize_memory_to_zero": 1,
                    "initialize_memory_with_value": 2,
                    "initialize_memory_with_zero": 1,
                    "memset_with_value": 4,
                    "set_mem_value": 1,
                    "set_memory": 1,
                    "set_memory_as_value": 1,
                    "zero_out_memory": 1
                },
                "process_device_data_08003a74": {
                    "device_data_handler": 1,
                    "process_device_data": 30
                },
                "process_input_and_process_device_data_08003f34": {
                    "input_and_device_data_handler": 1,
                    "input_and_process_device_data": 1,
                    "process_input_and_device_data": 20,
                    "process_input_and_process_device_data": 9
                },
                "process_input_data_080039bc": {
                    "input_data_handler": 1,
                    "process_and_handle_input": 1,
                    "process_input_data": 29
                },
                "update_and_initialize_data_0800583c": {
                    "update_and_init_data": 1,
                    "update_and_initialize_data": 30
                }
            },
            "called": [
                "FUN_08008244",
                "FUN_08003f34",
                "FUN_080039a0",
                "FUN_080039bc",
                "FUN_080001f8",
                "FUN_08003a74",
                "FUN_080082ba",
                "FUN_0800583c",
                "FUN_0800b430",
                "FUN_0800283a",
                "FUN_08005814",
                "FUN_0800192c",
                "FUN_080051b4",
                "FUN_08005238",
                "FUN_080004ac",
                "FUN_08002f24",
                "FUN_080041a0"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_and_process_device_data_08001ddc(void)\n\n{\n  FUNC_08008244();\n  initialize_and_process_data();\n  update_and_initialize_data();\n  memset_with_value_0800b430(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      FUNC_080082ba();\n      initialize_and_clear_data();\n      initialize_and_process_input();\n      initialize_and_print_grbl_version();\n      initialize_and_reset_system();\n      initialize_system();\n      extract_flag_from_data_0800192c();\n      initialize_data();\n      initialize_and_calculate_float_values();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        display_device_status_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        process_input_data();\n      }\n    }\n    process_device_data();\n    process_input_and_device_data();\n  } while( true );\n}\n\n",
            "current_name": "initialize_and_process_device_data_08001ddc",
            "entrypoint": "0x08001ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ddc": "initialize_and_process_device_data_08001ddc",
                "display_device_status_message_080041a0": "display_device_status_message",
                "extract_flag_from_data_0800192c": "extract_flag_from_data",
                "initialize_and_calculate_floating_point_values_0800283a": "initialize_and_calculate_float_values",
                "initialize_and_clear_data_08002f24": "initialize_and_clear_data",
                "initialize_and_print_grbl_version_080039a0": "initialize_and_print_grbl_version",
                "initialize_and_process_data_080051b4": "initialize_and_process_data",
                "initialize_and_process_input_080004ac": "initialize_and_process_input",
                "initialize_and_reset_system_08005238": "initialize_and_reset_system",
                "initialize_data_08005814": "initialize_data",
                "initialize_system_080001f8": "initialize_system",
                "memset_with_value_0800b430": "initialize_memory",
                "process_device_data_08003a74": "process_device_data",
                "process_input_and_process_device_data_08003f34": "process_input_and_device_data",
                "process_input_data_080039bc": "process_input_data",
                "update_and_initialize_data_0800583c": "update_and_initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e98": {
            "additional_data": {
                "FUN_08001e98": {
                    "improved_process_device_data": 1,
                    "process_and_improve_data": 2,
                    "process_and_initialize_data": 3,
                    "process_and_update_device_data": 1,
                    "process_data": 6,
                    "process_data_and_initialize_globals": 1,
                    "process_device": 1,
                    "process_device_and_data": 1,
                    "process_device_data": 15
                },
                "are_data_values_equal_08002fac": {
                    "are_data_values_equal": 7,
                    "are_data_values_equal_check": 1,
                    "are_data_values_equal_helper": 1,
                    "are_values_equal": 1,
                    "are_values_equal_helper": 1,
                    "check_data_equality": 3,
                    "check_data_values_equal": 1,
                    "check_data_values_equality": 1
                },
                "iVar1": {
                    "are_data_values_equal": 3,
                    "are_data_values_equal_result": 4,
                    "are_values_equal": 6,
                    "are_values_equal_result": 2,
                    "comparison_result": 4,
                    "data_check_result": 1,
                    "data_equal": 2,
                    "data_values_equal": 2,
                    "equal_values": 2,
                    "is_equal": 4,
                    "is_value_equal": 1
                },
                "improved_process_data_08003004": {
                    "improved_process_data": 18
                },
                "initialize_globals_if_needed_0800585c": {
                    "initialize_globals": 5,
                    "initialize_globals_if_needed": 13
                },
                "param_1": {
                    "arg1": 2,
                    "data_param1": 2,
                    "data_param_1": 2,
                    "device_id": 4,
                    "device_info": 1,
                    "device_info_1": 1,
                    "device_param": 2,
                    "device_param1": 2,
                    "device_param_1": 5,
                    "input1": 2,
                    "input_1": 1,
                    "input_param1": 1,
                    "input_param_1": 3,
                    "param1": 3
                },
                "param_2": {
                    "arg2": 2,
                    "connection_info": 1,
                    "data_buffer": 1,
                    "data_param": 1,
                    "data_param2": 2,
                    "data_param_2": 2,
                    "device_info_2": 1,
                    "device_param2": 2,
                    "device_param_2": 5,
                    "device_status": 1,
                    "device_type": 1,
                    "input2": 2,
                    "input_2": 1,
                    "input_param": 1,
                    "input_param2": 1,
                    "input_param_2": 3,
                    "param2": 3,
                    "param_2": 1
                },
                "param_3": {
                    "arg3": 2,
                    "config_param": 2,
                    "data_info": 1,
                    "data_length": 1,
                    "data_param3": 2,
                    "data_param_3": 2,
                    "device_info": 1,
                    "device_info_3": 1,
                    "device_param3": 2,
                    "device_param_3": 5,
                    "device_setting": 1,
                    "input3": 2,
                    "input_3": 1,
                    "input_param3": 1,
                    "input_param_3": 3,
                    "param3": 3,
                    "param_3": 1
                },
                "param_4": {
                    "arg4": 2,
                    "config_buffer": 1,
                    "data_param4": 2,
                    "data_param_4": 2,
                    "device_config": 1,
                    "device_info_4": 1,
                    "device_param4": 2,
                    "device_param_4": 5,
                    "device_settings": 1,
                    "info_param": 1,
                    "input4": 2,
                    "input_4": 1,
                    "input_param4": 1,
                    "input_param_4": 3,
                    "output_param": 1,
                    "param4": 3,
                    "param_4": 1,
                    "settings_info": 1
                },
                "param_5": {
                    "additional_data": 1,
                    "additional_param": 1,
                    "arg5": 2,
                    "config_flag": 1,
                    "data_param": 1,
                    "data_param5": 1,
                    "device_param": 1,
                    "device_param5": 2,
                    "device_param_5": 4,
                    "flag": 3,
                    "flag_param": 3,
                    "input_5": 1,
                    "input_param5": 1,
                    "input_param_5": 3,
                    "is_running": 1,
                    "param5": 4,
                    "param_5": 1
                },
                "process_device_data_08003a74": {
                    "process_data": 1,
                    "process_device_data": 11,
                    "process_device_data_helper": 4
                }
            },
            "called": [
                "FUN_08002fac",
                "FUN_08003004",
                "FUN_08003a74",
                "FUN_0800585c"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "code": "\nvoid process_and_update_device_data_08001e98(undefined4 device_param_1,undefined4 device_param_2,undefined4 device_param_3,undefined4 device_param_4,\n                 undefined device_param_5)\n\n{\n  int are_values_equal;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      process_device_data();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      are_values_equal = are_data_values_equal_08002fac();\n    } while (are_values_equal != 0);\n    improved_process_data(device_param_1,device_param_2,device_param_3,device_param_4,device_param_5);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      initialize_globals_if_needed();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_and_update_device_data_08001e98",
            "entrypoint": "0x08001e98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e98": "process_and_update_device_data_08001e98",
                "are_data_values_equal_08002fac": "are_data_values_equal",
                "iVar1": "are_values_equal",
                "improved_process_data_08003004": "improved_process_data",
                "initialize_globals_if_needed_0800585c": "initialize_globals_if_needed",
                "param_1": "device_param_1",
                "param_2": "device_param_2",
                "param_3": "device_param_3",
                "param_4": "device_param_4",
                "param_5": "device_param_5",
                "process_device_data_08003a74": "process_device_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f00": {
            "additional_data": {
                "DAT_20000ea8": {
                    "should_return": 1
                },
                "DAT_20000ed8": {
                    "precision_value": 1
                },
                "DAT_20000ef2": {
                    "max_counter": 1
                },
                "DAT_20000efa": {
                    "limit": 1
                },
                "FUN_08001f00": {
                    "calculate_and_process_device_data": 1,
                    "calculate_and_update_device_data": 1,
                    "calculate_device_data": 14,
                    "calculate_device_metrics": 1,
                    "calculate_device_parameters": 1,
                    "calculate_device_result": 1,
                    "calculate_floating_point_result": 1,
                    "calculate_improved_result": 1,
                    "calculate_result": 1,
                    "calculate_result_with_accuracy": 1,
                    "calculate_result_with_concatenation": 1,
                    "process_and_update_device_data": 2,
                    "process_device_data": 4,
                    "process_updated_device_data": 1
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 1
                },
                "calculate_float_addition_08008cd8": {
                    "calculate_float_addition": 1
                },
                "calculate_float_value_08008c30": {
                    "calculate_float_to_integer": 1
                },
                "calculate_float_value_08008cdc": {
                    "calculate_float_difference": 1
                },
                "calculate_float_value_08008eec": {
                    "calculate_float_product": 1
                },
                "calculate_floating_point_value_08009054": {
                    "calculate_floating_point_value": 1
                },
                "calculate_hypotenuse_0800981c": {
                    "calculate_hypotenuse": 1
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 1
                },
                "calculate_result_with_improved_accuracy_080096e8": {
                    "calculate_result_with_improved_accuracy": 1
                },
                "calculate_result_with_precision_080094c0": {
                    "calculate_result_with_precision": 1
                },
                "calculate_shifted_value_08008bf0": {
                    "calculate_shifted_value": 1
                },
                "check_concatenation_result_0800923c": {
                    "check_concatenation_result1": 1
                },
                "check_concatenation_result_08009250": {
                    "check_concatenation_result2": 1
                },
                "check_if_concatenation_result_is_not_null_08009214": {
                    "check_if_concatenation_result_not_null": 1
                },
                "count_bits_set_and_shift_08008e44": {
                    "count_bits_set_and_shift": 1
                },
                "iVar3": {
                    "check": 1,
                    "check_result": 12,
                    "comparison": 1,
                    "comparison_result": 1,
                    "is_concatenation_result_valid": 1,
                    "result": 7,
                    "result3": 3,
                    "result_flag": 1,
                    "return_value": 1,
                    "status": 1,
                    "temp": 1
                },
                "improved_calculate_result_08009410": {
                    "improved_calculate_result": 1
                },
                "local_1c": {
                    "bitwise_value": 1,
                    "calculation_param5": 1,
                    "float_value13": 1,
                    "float_value14": 1,
                    "float_value16": 1,
                    "float_value3": 1,
                    "float_value_op": 1,
                    "local_uint1": 1,
                    "local_uint3": 1,
                    "local_var13": 1,
                    "local_var8": 1,
                    "modified_param3": 1,
                    "modified_value1": 1,
                    "temp1": 2,
                    "temp13": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_1c": 1,
                    "temp_8": 1,
                    "temp_result6": 1,
                    "temp_value1": 1,
                    "temp_value11": 1,
                    "temp_value3": 1,
                    "temp_value7": 1,
                    "temp_var10": 1,
                    "uint_value4": 1,
                    "var7": 1,
                    "xor2": 1,
                    "xor_value1": 1
                },
                "local_20": {
                    "calculation_result5": 1,
                    "final_result5": 1,
                    "float_result2": 1,
                    "float_result3": 1,
                    "float_value": 2,
                    "float_value10": 1,
                    "float_value12": 1,
                    "float_value13": 1,
                    "float_value15": 1,
                    "float_value2": 1,
                    "float_value_4": 1,
                    "floating_point_result2": 1,
                    "local_result2": 1,
                    "local_uint2": 2,
                    "modified_param2": 1,
                    "modified_value2": 1,
                    "result3": 1,
                    "result4": 2,
                    "result_val3": 1,
                    "result_value2": 1,
                    "result_value6": 1,
                    "temp12": 1,
                    "temp2": 1,
                    "temp_20": 1,
                    "temp_var9": 1,
                    "total_result": 1,
                    "uint_value3": 1,
                    "var6": 1
                },
                "local_24": {
                    "calculation_result4": 1,
                    "final_result": 2,
                    "final_result4": 1,
                    "float_result": 3,
                    "float_result2": 1,
                    "float_value": 1,
                    "float_value11": 2,
                    "float_value12": 1,
                    "float_value14": 1,
                    "float_value6": 1,
                    "float_value9": 1,
                    "float_value_3": 1,
                    "floating_point_result": 1,
                    "local_float12": 1,
                    "local_float7": 1,
                    "local_result": 1,
                    "result": 1,
                    "result3": 2,
                    "result4": 1,
                    "result_val2": 1,
                    "result_value1": 1,
                    "result_value5": 1,
                    "temp11": 1,
                    "temp_24": 1,
                    "var5": 1
                },
                "local_26": {
                    "count_value": 1,
                    "counter": 3,
                    "counter2": 1,
                    "idx": 1,
                    "index": 4,
                    "index4": 2,
                    "iteration": 1,
                    "iteration_count": 1,
                    "local_loop_var": 1,
                    "local_ushort2": 1,
                    "loop_counter": 1,
                    "loop_index": 4,
                    "loop_var": 5,
                    "temp_counter1": 1,
                    "temp_ushort": 1,
                    "ushort_value": 1,
                    "ushort_value2": 1,
                    "value6": 1
                },
                "local_27": {
                    "bit_count": 2,
                    "char_value1": 1,
                    "char_value3": 1,
                    "count": 4,
                    "count_flag": 1,
                    "counter": 11,
                    "counter1": 1,
                    "counter_char": 1,
                    "counter_flag": 2,
                    "flag3": 1,
                    "local_char": 1,
                    "local_flag": 1,
                    "loop_count": 2,
                    "temp_char": 1,
                    "value5": 1
                },
                "local_2a": {
                    "temp_ushort2": 1
                },
                "local_2c": {
                    "calc_value10": 1,
                    "calculated_value1": 1,
                    "float_value1": 5,
                    "float_value10": 2,
                    "float_value11": 1,
                    "float_value12": 1,
                    "float_value13": 1,
                    "float_value8": 1,
                    "float_value_2": 1,
                    "float_var12": 1,
                    "local_float1": 1,
                    "local_float11": 1,
                    "local_var10": 2,
                    "local_var12": 1,
                    "local_var7": 1,
                    "result6": 1,
                    "temp10": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_2c": 1,
                    "temp_float_value4": 1,
                    "temp_result5": 1,
                    "temp_value10": 1,
                    "value1": 1,
                    "value3": 1
                },
                "local_30": {
                    "calc_value9": 1,
                    "calculated_value2": 1,
                    "calculation_result4": 2,
                    "float_value10": 1,
                    "float_value11": 1,
                    "float_value12": 1,
                    "float_value2": 1,
                    "float_value7": 1,
                    "float_value_1": 1,
                    "float_var11": 1,
                    "local_float10": 1,
                    "local_float2": 1,
                    "local_var11": 1,
                    "local_var9": 2,
                    "result5": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp9": 1,
                    "temp_30": 1,
                    "temp_float_value3": 1,
                    "temp_result4": 1,
                    "temp_value2": 1,
                    "temp_value9": 1,
                    "temp_var10": 1,
                    "temp_var8": 1,
                    "uint_value2": 1,
                    "value2": 1,
                    "var4": 1
                },
                "local_34": {
                    "bitwise_result": 1,
                    "calc_value8": 1,
                    "calculated_value3": 1,
                    "calculation_result3": 2,
                    "float_value10": 1,
                    "float_value11": 1,
                    "float_value3": 1,
                    "float_value9": 1,
                    "local_float3": 1,
                    "local_uint": 1,
                    "local_var10": 1,
                    "result4": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp4": 1,
                    "temp8": 1,
                    "temp_34": 1,
                    "temp_7": 1,
                    "temp_float_value2": 1,
                    "temp_result3": 1,
                    "temp_value1": 1,
                    "temp_value8": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "uint_value1": 1,
                    "value3": 1,
                    "var3": 1,
                    "xor_value2": 1
                },
                "local_38": {
                    "addition_result2": 1,
                    "addition_value1": 1,
                    "calc_value7": 1,
                    "calculated_value4": 1,
                    "calculation_result1": 1,
                    "calculation_result2": 1,
                    "final_result3": 1,
                    "float_add_2": 1,
                    "float_value10": 1,
                    "float_value4": 1,
                    "float_value8": 1,
                    "float_value9": 3,
                    "float_var9": 1,
                    "local_float4": 1,
                    "local_float9": 1,
                    "local_var10": 1,
                    "local_var6": 1,
                    "local_var8": 2,
                    "local_var9": 1,
                    "result3": 1,
                    "result_value4": 1,
                    "temp3": 1,
                    "temp7": 1,
                    "temp_38": 1,
                    "temp_result3": 1,
                    "temp_var8": 1,
                    "value10": 1,
                    "var2": 1
                },
                "local_3c": {
                    "addition_result1": 1,
                    "addition_value2": 1,
                    "calc_value6": 1,
                    "calculated_value5": 1,
                    "calculation_result1": 1,
                    "calculation_result2": 1,
                    "final_result2": 1,
                    "float_add_1": 1,
                    "float_value5": 1,
                    "float_value7": 1,
                    "float_value8": 3,
                    "float_value9": 1,
                    "float_var8": 1,
                    "local_float5": 1,
                    "local_float8": 1,
                    "local_var5": 1,
                    "local_var7": 2,
                    "local_var9": 1,
                    "result2": 1,
                    "result_value3": 1,
                    "temp4": 1,
                    "temp_3c": 1,
                    "value9": 1,
                    "var1": 1
                },
                "local_40": {
                    "calculation_result3": 1,
                    "final_result": 1,
                    "final_result1": 1,
                    "float_result": 4,
                    "float_value7": 4,
                    "float_value8": 1,
                    "float_var7": 1,
                    "hypotenuse": 5,
                    "hypotenuse_value": 1,
                    "local_float6": 1,
                    "local_float7": 1,
                    "local_var8": 2,
                    "output": 1,
                    "result": 1,
                    "result1": 1,
                    "result6": 1,
                    "result_float": 1,
                    "result_value2": 1,
                    "temp_40": 1,
                    "temp_var7": 1
                },
                "local_42": {
                    "bit_count": 1,
                    "calc_result2": 1,
                    "concatenation_result": 1,
                    "count": 2,
                    "count_value": 1,
                    "counter": 1,
                    "float_value7": 1,
                    "iteration_count": 1,
                    "length": 1,
                    "local_ushort": 2,
                    "local_var7": 2,
                    "loop_count": 1,
                    "num_iterations": 1,
                    "shift_amount": 1,
                    "shift_value": 3,
                    "shifted_value": 7,
                    "temp_42": 1,
                    "total_iterations": 1,
                    "ushort_value": 2
                },
                "local_48": {
                    "calc_result1": 1,
                    "float_res6": 1,
                    "float_value1": 1,
                    "float_value6": 6,
                    "float_value8": 1,
                    "float_value_local_6": 1,
                    "float_var6": 1,
                    "floating_point_value1": 1,
                    "local_float6": 1,
                    "local_float8": 1,
                    "local_var4": 1,
                    "local_var6": 5,
                    "result_value1": 1,
                    "temp6": 2,
                    "temp_48": 1,
                    "temp_6": 1,
                    "temp_value6": 1,
                    "temp_var6": 1,
                    "value8": 1
                },
                "local_4c": {
                    "calc_value5": 1,
                    "float_res5": 1,
                    "float_value2": 1,
                    "float_value5": 6,
                    "float_value9": 1,
                    "float_value_local_5": 1,
                    "float_var5": 1,
                    "floating_point_value2": 1,
                    "local_float5": 1,
                    "local_float9": 1,
                    "local_var3": 1,
                    "local_var5": 5,
                    "temp5": 2,
                    "temp_4c": 1,
                    "temp_5": 1,
                    "temp_value5": 1,
                    "temp_value6": 1,
                    "temp_value7": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "value7": 1
                },
                "local_50": {
                    "calc_value4": 1,
                    "float_res4": 1,
                    "float_value10": 1,
                    "float_value3": 1,
                    "float_value4": 6,
                    "float_value_local_4": 1,
                    "float_var4": 1,
                    "local_float10": 1,
                    "local_float4": 1,
                    "local_var2": 1,
                    "local_var4": 5,
                    "result7": 1,
                    "temp4": 2,
                    "temp_4": 1,
                    "temp_50": 1,
                    "temp_value4": 1,
                    "temp_value5": 1,
                    "temp_value6": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "value6": 1
                },
                "local_54": {
                    "calc_value3": 1,
                    "float_res3": 1,
                    "float_value11": 1,
                    "float_value3": 6,
                    "float_value4": 1,
                    "float_value_local_3": 1,
                    "float_var3": 1,
                    "local_float11": 1,
                    "local_float3": 1,
                    "local_var1": 1,
                    "local_var3": 5,
                    "result8": 1,
                    "temp3": 2,
                    "temp_3": 1,
                    "temp_54": 1,
                    "temp_value3": 1,
                    "temp_value4": 1,
                    "temp_value5": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "value5": 1
                },
                "local_58": {
                    "calc_value2": 1,
                    "calculation_result2": 1,
                    "float_res2": 1,
                    "float_value12": 1,
                    "float_value2": 6,
                    "float_value_local_2": 1,
                    "float_var2": 1,
                    "floating_point_value3": 1,
                    "local_float2": 1,
                    "local_var2": 5,
                    "new_value1": 1,
                    "temp2": 2,
                    "temp_2": 1,
                    "temp_58": 1,
                    "temp_float1": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "temp_value4": 1,
                    "temp_var11": 1,
                    "temp_var2": 1,
                    "value4": 1
                },
                "local_5c": {
                    "calc_value1": 1,
                    "calculation_result1": 1,
                    "float_res1": 1,
                    "float_value1": 6,
                    "float_value13": 1,
                    "float_value_local_1": 1,
                    "float_var1": 1,
                    "floating_point_value4": 1,
                    "local_float1": 1,
                    "local_var1": 5,
                    "new_value2": 1,
                    "temp1": 2,
                    "temp_1": 1,
                    "temp_5c": 1,
                    "temp_float2": 1,
                    "temp_value1": 1,
                    "temp_value3": 1,
                    "temp_var1": 1,
                    "temp_var12": 1,
                    "value3": 1
                },
                "local_6c": {
                    "calculated_values": 1,
                    "data_result": 1,
                    "device_data": 3,
                    "device_data_results": 1,
                    "device_metrics": 1,
                    "float_array": 4,
                    "float_array2": 1,
                    "float_results": 1,
                    "float_values": 3,
                    "float_values_array": 1,
                    "local_array": 1,
                    "local_data": 1,
                    "local_device_data": 1,
                    "output_array": 1,
                    "result_array": 3,
                    "temp_array": 4,
                    "values": 1
                },
                "param_1": {
                    "address1": 1,
                    "data1": 1,
                    "data_array1": 1,
                    "data_ptr1": 1,
                    "data_start": 2,
                    "device_data": 2,
                    "device_data1": 5,
                    "device_data_ptr": 2,
                    "device_param1": 1,
                    "input1": 8,
                    "input_addr": 1,
                    "input_array1": 1,
                    "input_buffer": 1,
                    "input_data_1": 1,
                    "input_param1": 1,
                    "input_ptr1": 1,
                    "value1": 1
                },
                "param_10": {
                    "calculation_param4": 1,
                    "char2": 1,
                    "char_param2": 1,
                    "char_value2": 1,
                    "condition": 2,
                    "condition2": 1,
                    "device_flag2": 1,
                    "device_param10": 1,
                    "flag2": 7,
                    "flag_param": 1,
                    "input_char2": 1,
                    "param10": 7,
                    "param3": 1,
                    "param_10": 1,
                    "param_g": 1,
                    "should_reverse": 1,
                    "value4": 2
                },
                "param_2": {
                    "data": 1,
                    "data2": 1,
                    "data_array": 1,
                    "data_array2": 1,
                    "data_ptr2": 1,
                    "data_values_ptr": 1,
                    "device_data2": 5,
                    "device_data_values": 1,
                    "device_param2": 1,
                    "float_array": 1,
                    "float_values": 4,
                    "floating_point_array": 1,
                    "input2": 2,
                    "input_array": 5,
                    "input_array2": 1,
                    "input_data_array": 1,
                    "input_param2": 1,
                    "input_ptr2": 1,
                    "input_values": 1
                },
                "param_3": {
                    "address2": 1,
                    "data_addr": 1,
                    "data_end": 2,
                    "data_ptr": 1,
                    "data_ptr3": 1,
                    "device3_index": 1,
                    "device_data3": 3,
                    "device_data_offset": 1,
                    "device_param3": 1,
                    "input2": 6,
                    "input3": 2,
                    "input_array_size": 1,
                    "input_data_2": 1,
                    "input_param3": 1,
                    "input_ptr3": 1,
                    "offset": 1,
                    "output_buffer": 1,
                    "param3": 3,
                    "param_3": 1,
                    "value2": 1
                },
                "param_4": {
                    "bit1": 1,
                    "byte1": 4,
                    "byte_1_addr": 1,
                    "byte_index1": 2,
                    "byte_param1": 1,
                    "byte_value1": 1,
                    "device_data_index1": 1,
                    "device_index1": 1,
                    "device_param1": 1,
                    "device_param4": 1,
                    "float_param_1": 1,
                    "index1": 10,
                    "index_1": 2,
                    "input_byte1": 1,
                    "param4": 1,
                    "param4_index": 1,
                    "param_a": 1
                },
                "param_5": {
                    "bit2": 1,
                    "byte2": 4,
                    "byte_2_addr": 1,
                    "byte_index2": 2,
                    "byte_param2": 1,
                    "byte_value2": 1,
                    "device_data_index2": 1,
                    "device_index2": 1,
                    "device_param2": 1,
                    "device_param5": 1,
                    "float_param_2": 1,
                    "index2": 10,
                    "index_2": 2,
                    "input_byte2": 1,
                    "param5": 1,
                    "param5_index": 1,
                    "param_b": 1
                },
                "param_6": {
                    "bit3": 1,
                    "byte3": 4,
                    "byte_3_addr": 1,
                    "byte_index3": 2,
                    "byte_param3": 1,
                    "byte_value3": 1,
                    "device_data_index3": 1,
                    "device_index3": 1,
                    "device_param3": 1,
                    "device_param6": 1,
                    "float_param_3": 1,
                    "index3": 10,
                    "index_3": 2,
                    "input_byte3": 1,
                    "param6": 1,
                    "param6_index": 1,
                    "param_c": 1
                },
                "param_7": {
                    "calc_param_1": 1,
                    "calculation_param1": 2,
                    "constant1": 1,
                    "device_param4": 1,
                    "device_param7": 1,
                    "float1": 1,
                    "float_param1": 1,
                    "float_value1": 1,
                    "input_value1": 1,
                    "param1": 1,
                    "param7": 7,
                    "param_7": 2,
                    "param_d": 1,
                    "value1": 8,
                    "value3": 1,
                    "value_1": 1
                },
                "param_8": {
                    "calc_param_2": 1,
                    "calculation_param2": 2,
                    "char1": 1,
                    "char_param1": 1,
                    "char_value1": 1,
                    "condition1": 1,
                    "device_flag1": 1,
                    "device_param8": 1,
                    "flag": 1,
                    "flag1": 7,
                    "input_char1": 1,
                    "param8": 7,
                    "param_8": 1,
                    "param_e": 1,
                    "use_enhanced_result": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "param_9": {
                    "calc_param_3": 1,
                    "calculation_param3": 2,
                    "constant2": 1,
                    "device_param5": 1,
                    "device_param9": 1,
                    "float2": 1,
                    "float_param2": 1,
                    "float_value2": 1,
                    "input_value2": 1,
                    "param2": 1,
                    "param9": 7,
                    "param_9": 2,
                    "param_f": 1,
                    "value2": 6,
                    "value3": 2,
                    "value4": 1,
                    "value_3": 1
                },
                "process_and_update_device_data_08001e98": {
                    "process_and_update_device_data": 1
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 1
                },
                "uVar1": {
                    "float_val1": 1,
                    "float_value1": 1,
                    "result1": 21,
                    "result_1": 1,
                    "value1": 4,
                    "value_1": 1,
                    "var1": 1
                },
                "uVar2": {
                    "float_val2": 1,
                    "float_value2": 1,
                    "result2": 21,
                    "result_2": 1,
                    "value2": 4,
                    "value_2": 1,
                    "var2": 1
                },
                "uVar3": {
                    "temp_result1": 1
                },
                "uVar4": {
                    "calc_result": 1,
                    "calc_value": 1,
                    "calculated_value": 1,
                    "calculation_result": 2,
                    "float_result": 3,
                    "float_value": 2,
                    "float_value5": 1,
                    "integer_value": 1,
                    "result3": 2,
                    "result4": 3,
                    "result_val": 1,
                    "result_value": 1,
                    "temp": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp_float_value": 1,
                    "temp_result2": 1,
                    "temp_value": 2,
                    "temp_var1": 1,
                    "uint_result": 1,
                    "value": 1
                },
                "uVar5": {
                    "float_result1": 1,
                    "floating_result_1": 1,
                    "result1": 1,
                    "result3": 1,
                    "result4": 2,
                    "result5": 4,
                    "result_value_1": 1,
                    "reverse_bits1": 2,
                    "reverse_bits_result1": 1,
                    "reverse_result": 1,
                    "reverse_shift_result": 1,
                    "reverse_shifted_val1": 1,
                    "reverse_value1": 1,
                    "reversed_shifted_value": 1,
                    "shifted_result1": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_result": 1,
                    "temp_result1": 2,
                    "temp_value1": 3,
                    "temp_var2": 1
                },
                "uVar6": {
                    "float_result2": 1,
                    "floating_result_2": 1,
                    "result2": 1,
                    "result4": 1,
                    "result5": 2,
                    "result6": 4,
                    "result_value_2": 1,
                    "reverse_bits2": 2,
                    "reverse_bits_result2": 1,
                    "reverse_result2": 1,
                    "reverse_shift": 1,
                    "reverse_shifted_val2": 1,
                    "reverse_value2": 1,
                    "reversed_shifted_value2": 1,
                    "shifted_result2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp_result2": 3,
                    "temp_value2": 3,
                    "temp_var3": 1
                }
            },
            "called": [
                "FUN_0800923c",
                "FUN_0800981c",
                "FUN_08009214",
                "FUN_08008eec",
                "FUN_080082d0",
                "FUN_08009410",
                "FUN_080082d4",
                "FUN_08008bf0",
                "FUN_08009250",
                "FUN_080096e8",
                "thunk_FUN_08009990",
                "FUN_080094c0",
                "FUN_08008cd8",
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08008590",
                "FUN_08001e98",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid calculate_and_update_device_data_08001f00(int input1,undefined4 *device_data2,int input2,byte index1,byte index2,byte index3\n                 ,undefined4 value1,char flag1,undefined4 param9,char param10)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int check_result;\n  uint result4;\n  undefined8 result5;\n  undefined8 result6;\n  uint float_array [4];\n  undefined4 float_value1;\n  undefined4 float_value2;\n  undefined4 float_value3;\n  undefined4 float_value4;\n  undefined4 float_value5;\n  undefined4 float_value6;\n  ushort shifted_value;\n  undefined4 hypotenuse;\n  undefined4 float_value8;\n  undefined4 float_value9;\n  uint calculation_result3;\n  undefined4 calculation_result4;\n  undefined4 float_value1;\n  char counter;\n  ushort loop_var;\n  undefined4 float_result;\n  uint result4;\n  uint temp1;\n  \n  float_value1 = calculate_float_value_08008cdc(*(undefined4 *)((uint)index1 * 4 + input1),\n                          *(undefined4 *)((uint)index1 * 4 + input2));\n  calculation_result4 = calculate_float_value_08008cdc(*(undefined4 *)((uint)index2 * 4 + input1),\n                          *(undefined4 *)((uint)index2 * 4 + input2));\n  calculation_result3 = calculate_float_addition_08008cd8(device_data2[index3],*(undefined4 *)((uint)index3 * 4 + input1));\n  temp1 = *(uint *)((uint)index1 * 4 + input2) ^ 0x80000000;\n  result4 = *(uint *)((uint)index2 * 4 + input2) ^ 0x80000000;\n  float_value9 = calculate_float_addition_08008cd8(device_data2[index1],float_value1);\n  float_value8 = calculate_float_addition_08008cd8(device_data2[index2],calculation_result4);\n  result1 = calculate_float_value_08008eec(temp1,float_value8);\n  result2 = calculate_float_value_08008eec(result4,float_value9);\n  result1 = calculate_float_addition_08008cd8(result1,result2);\n  result5 = reverse_bits_080082d0_and_shift_08008590(result1);\n  result1 = calculate_float_value_08008eec(temp1,float_value9);\n  result2 = calculate_float_value_08008eec(result4,float_value8);\n  result1 = calculate_float_value_08008cdc(result1,result2);\n  result6 = reverse_bits_080082d0_and_shift_08008590(result1);\n  result5 = thunk_calculate_floating_point_result_08009990((int)result5,(int)((ulonglong)result5 >> 0x20),(int)result6,\n                             (int)((ulonglong)result6 >> 0x20));\n  float_result = calculate_float_value_08008c30((int)result5,(int)((ulonglong)result5 >> 0x20));\n  if (param10 == '\\0') {\n    check_result = check_concatenation_result1(float_result,0);\n    if (check_result != 0) {\n      result5 = reverse_bits_080082d0_and_shift_08008590(float_result);\n      result5 = calculate_double_precision_result_080082d4((int)result5,(int)((ulonglong)result5 >> 0x20),0x54442d18,0x401921fb);\n      float_result = calculate_float_value_08008c30((int)result5,(int)((ulonglong)result5 >> 0x20));\n    }\n  }\n  else {\n    check_result = check_concatenation_result2(float_result,0);\n    if (check_result != 0) {\n      result5 = reverse_bits_080082d0_and_shift_08008590(float_result);\n      result5 = reverse_bits_080082d0((int)result5,(int)((ulonglong)result5 >> 0x20),0x54442d18,0x401921fb);\n      float_result = calculate_float_value_08008c30((int)result5,(int)((ulonglong)result5 >> 0x20));\n    }\n  }\n  result1 = calculate_float_value_08008eec(float_result,param9);\n  result5 = reverse_bits_080082d0_and_shift_08008590(result1);\n  result6 = reverse_bits_080082d0_and_shift_08008590(calculation_result3 & 0x7fffffff);\n  result5 = calculate_hypotenuse((int)result5,(int)((ulonglong)result5 >> 0x20),(int)result6,\n                       (int)((ulonglong)result6 >> 0x20));\n  hypotenuse = calculate_float_value_08008c30((int)result5,(int)((ulonglong)result5 >> 0x20));\n  check_result = check_if_concatenation_result_not_null(hypotenuse,0);\n  if (check_result == 0) {\n    result1 = calculate_floating_point_value_08009054(hypotenuse,DAT_20000ed8);\n    result5 = reverse_bits_080082d0_and_shift_08008590(result1);\n    result5 = calculate_result_with_precision((int)result5,(int)((ulonglong)result5 >> 0x20));\n    shifted_value = calculate_shifted_value_08008bf0((int)result5,(int)((ulonglong)result5 >> 0x20));\n    if (flag1 != '\\0') {\n      result1 = count_bits_set_and_shift_08008e44(shifted_value);\n      value1 = calculate_float_value_08008eec(value1,result1);\n    }\n    result1 = count_bits_set_and_shift_08008e44(shifted_value);\n    float_value6 = calculate_floating_point_value_08009054(float_result,result1);\n    result1 = count_bits_set_and_shift_08008e44(shifted_value);\n    float_value5 = calculate_floating_point_value_08009054(calculation_result3,result1);\n    result5 = reverse_bits_080082d0_and_shift_08008590(float_value6);\n    result5 = calculate_improved_result((int)result5,(int)((ulonglong)result5 >> 0x20),0,0x3fe00000);\n    result6 = reverse_bits_080082d0_and_shift_08008590(float_value6);\n    result5 = calculate_improved_result((int)result5,(int)((ulonglong)result5 >> 0x20),(int)result6,\n                         (int)((ulonglong)result6 >> 0x20));\n    result5 = reverse_bits_080082d0(0,0x3ff00000,(int)result5,(int)((ulonglong)result5 >> 0x20));\n    float_value4 = calculate_float_value_08008c30((int)result5,(int)((ulonglong)result5 >> 0x20));\n    float_value3 = float_value6;\n    counter = '\\0';\n    float_array[index3] = *(uint *)(input1 + (uint)index3 * 4);\n    for (loop_var = 1; loop_var < shifted_value; loop_var = loop_var + 1) {\n      if ((int)counter < (int)(uint)DAT_20000efa) {\n        result1 = calculate_float_value_08008eec(temp1,float_value3);\n        result2 = calculate_float_value_08008eec(result4,float_value4);\n        float_array[3] = calculate_float_value_08008cdc(result1,result2);\n        result1 = calculate_float_value_08008eec(temp1,float_value4);\n        result2 = calculate_float_value_08008eec(result4,float_value3);\n        temp1 = calculate_float_addition_08008cd8(result1,result2);\n        result4 = float_array[3];\n        counter = counter + '\\x01';\n      }\n      else {\n        result1 = count_bits_set_and_shift_08008e44(loop_var);\n        result1 = calculate_float_value_08008eec(result1,float_value6);\n        result5 = reverse_bits_080082d0_and_shift_08008590(result1);\n        result5 = improved_calculate_result((int)result5,(int)((ulonglong)result5 >> 0x20));\n        float_value2 = calculate_float_value_08008c30((int)result5,(int)((ulonglong)result5 >> 0x20));\n        result1 = count_bits_set_and_shift_08008e44(loop_var);\n        result1 = calculate_float_value_08008eec(result1,float_value6);\n        result5 = reverse_bits_080082d0_and_shift_08008590(result1);\n        result5 = calculate_result_with_improved_accuracy((int)result5,(int)((ulonglong)result5 >> 0x20));\n        float_value1 = calculate_float_value_08008c30((int)result5,(int)((ulonglong)result5 >> 0x20));\n        result1 = calculate_float_value_08008eec(*(uint *)((uint)index1 * 4 + input2) ^ 0x80000000,float_value2);\n        result2 = calculate_float_value_08008eec(*(undefined4 *)((uint)index2 * 4 + input2),float_value1);\n        temp1 = calculate_float_value_08008cdc(result1,result2);\n        result1 = calculate_float_value_08008eec(*(uint *)((uint)index1 * 4 + input2) ^ 0x80000000,float_value1);\n        result2 = calculate_float_value_08008eec(*(undefined4 *)((uint)index2 * 4 + input2),float_value2);\n        result4 = calculate_float_addition_08008cd8(result1,result2);\n        counter = '\\0';\n      }\n      result4 = calculate_float_value_08008cdc(float_value1,temp1);\n      float_array[index1] = result4;\n      result4 = calculate_float_value_08008cdc(calculation_result4,result4);\n      float_array[index2] = result4;\n      result4 = calculate_float_value_08008cdc(float_array[index3],float_value5);\n      float_array[index3] = result4;\n      process_and_update_device_data(float_array[0],float_array[1],float_array[2],value1,flag1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    process_and_update_device_data(*device_data2,device_data2[1],device_data2[2],value1,flag1);\n  }\n  return;\n}\n\n",
            "current_name": "calculate_and_update_device_data_08001f00",
            "entrypoint": "0x08001f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f00": "calculate_and_update_device_data_08001f00",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "calculate_float_addition_08008cd8": "calculate_float_addition",
                "calculate_float_value_08008c30": "calculate_float_to_integer",
                "calculate_float_value_08008cdc": "calculate_float_difference",
                "calculate_float_value_08008eec": "calculate_float_product",
                "calculate_floating_point_value_08009054": "calculate_floating_point_value",
                "calculate_hypotenuse_0800981c": "calculate_hypotenuse",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "calculate_result_with_improved_accuracy_080096e8": "calculate_result_with_improved_accuracy",
                "calculate_result_with_precision_080094c0": "calculate_result_with_precision",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "check_concatenation_result_0800923c": "check_concatenation_result1",
                "check_concatenation_result_08009250": "check_concatenation_result2",
                "check_if_concatenation_result_is_not_null_08009214": "check_if_concatenation_result_not_null",
                "count_bits_set_and_shift_08008e44": "count_bits_set_and_shift",
                "iVar3": "check_result",
                "improved_calculate_result_08009410": "improved_calculate_result",
                "local_1c": "temp1",
                "local_20": "result4",
                "local_24": "float_result",
                "local_26": "loop_var",
                "local_27": "counter",
                "local_2c": "float_value1",
                "local_30": "calculation_result4",
                "local_34": "calculation_result3",
                "local_38": "float_value9",
                "local_3c": "float_value8",
                "local_40": "hypotenuse",
                "local_42": "shifted_value",
                "local_48": "float_value6",
                "local_4c": "float_value5",
                "local_50": "float_value4",
                "local_54": "float_value3",
                "local_58": "float_value2",
                "local_5c": "float_value1",
                "local_6c": "float_array",
                "param_1": "input1",
                "param_10": "param10",
                "param_2": "device_data2",
                "param_3": "input2",
                "param_4": "index1",
                "param_5": "index2",
                "param_6": "index3",
                "param_7": "value1",
                "param_8": "flag1",
                "param_9": "param9",
                "process_and_update_device_data_08001e98": "process_and_update_device_data",
                "reverse_bits_080082d0": "reverse_bits",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002408": {
            "additional_data": {
                "FUNC_08002814": {
                    "call_function": 1,
                    "perform_action": 1
                },
                "FUN_08002408": {
                    "process_and_analyze_data": 1,
                    "process_and_count_data": 1,
                    "process_and_process_again": 1,
                    "process_and_shift_data": 1,
                    "process_data": 22,
                    "process_data_and_devices": 1,
                    "process_data_blocks": 2,
                    "process_data_sequence": 1
                },
                "calculate_float_addition_08008cd8": {
                    "calculate_float_addition": 2
                },
                "calculate_float_value_08008eec": {
                    "calculate_float_value": 2
                },
                "calculate_result_with_precision_080094c0": {
                    "calculate_result_with_precision": 2
                },
                "calculate_shifted_value_08008bf0": {
                    "calculate_shifted_value": 2
                },
                "count_bits_set_and_shift_08008e44": {
                    "count_bits_set_and_shift": 2
                },
                "find_and_process_target_value_080002a0": {
                    "find_and_process_target_value": 2
                },
                "local_12": {
                    "iterations": 1,
                    "loop_count": 2,
                    "loop_counter": 1,
                    "loop_variable": 1,
                    "shift_amount": 1,
                    "shifted_count": 2,
                    "shifted_value": 18,
                    "shifted_value_2": 3,
                    "shifted_value_3": 1,
                    "shifted_value_count": 1
                },
                "param_1": {
                    "data": 4,
                    "data_sequence": 1,
                    "input": 2,
                    "input_data": 5,
                    "input_param": 7,
                    "input_parameter": 3,
                    "input_value": 9
                },
                "process_data_blocks_08002fd4": {
                    "process_data_blocks": 2
                },
                "process_device_data_08003a74": {
                    "process_device_data": 2
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 2
                },
                "uVar1": {
                    "result": 7,
                    "result1": 3,
                    "result_1": 1,
                    "result_shifted": 1,
                    "result_shifted_value": 1,
                    "result_value": 1,
                    "result_variable": 1,
                    "shifted_result": 3,
                    "shifted_value": 10
                },
                "uVar2": {
                    "float1": 1,
                    "float_result1": 1,
                    "float_result_1": 1,
                    "float_value": 5,
                    "float_value1": 11,
                    "float_value_1": 12
                },
                "uVar3": {
                    "bit_count": 4,
                    "bit_count_and_shift": 1,
                    "bit_count_result": 1,
                    "bits_and_shift": 1,
                    "bits_set": 2,
                    "bits_set_and_shift": 6,
                    "bits_set_and_shift_value": 1,
                    "bits_set_shifted": 3,
                    "bits_shifted": 1,
                    "bits_shifted_count": 1,
                    "bits_shifted_value": 1,
                    "float2": 1,
                    "float_value2": 1,
                    "float_value_2": 1,
                    "shifted_bits": 1,
                    "shifted_bits_value": 1,
                    "shifted_value_1": 1,
                    "shifted_value_2": 2,
                    "shifted_value_by_bits_set": 1
                },
                "uVar4": {
                    "calculated_result": 1,
                    "float_result2": 1,
                    "float_result_2": 1,
                    "float_value2": 5,
                    "float_value_2": 4,
                    "processed_value": 1,
                    "result": 3,
                    "result2": 2,
                    "result_2": 1,
                    "result_precision": 1,
                    "result_value": 4,
                    "reverse_result": 1,
                    "reversed_shifted_result": 2,
                    "reversed_shifted_value": 1,
                    "reversed_value": 1,
                    "shifted_result": 2
                }
            },
            "called": [
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_080002a0",
                "FUN_080094c0",
                "FUN_08008e44",
                "FUN_08008cd8",
                "FUN_08003a74",
                "FUN_08008bf0",
                "FUN_08008590",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_data_blocks_08002408(undefined4 input_value)\n\n{\n  undefined2 shifted_value;\n  undefined4 float_value_1;\n  undefined4 bits_set_and_shift;\n  undefined8 float_value2;\n  ushort shifted_value;\n  \n  float_value_1 = calculate_float_value_08008eec(input_value,0x41a00000);\n  float_value2 = reverse_bits_and_shift_08008590(float_value_1);\n  float_value2 = calculate_result_with_precision((int)float_value2,(int)((ulonglong)float_value2 >> 0x20));\n  shifted_value = calculate_shifted_value_08008bf0((int)float_value2,(int)((ulonglong)float_value2 >> 0x20));\n  process_data_blocks_08002408();\n  float_value_1 = calculate_float_value_08008eec(input_value,0x447a0000);\n  bits_set_and_shift = count_bits_set_and_shift_08008e44((uint)shifted_value * 0x32);\n  float_value_1 = calculate_float_addition_08008cd8(float_value_1,bits_set_and_shift);\n  float_value2 = reverse_bits_and_shift_08008590(float_value_1);\n  float_value2 = calculate_result_with_precision((int)float_value2,(int)((ulonglong)float_value2 >> 0x20));\n  shifted_value = calculate_shifted_value_08008bf0((int)float_value2,(int)((ulonglong)float_value2 >> 0x20));\n  FUNC_08002814(shifted_value);\n  while ((shifted_value != 0 && (process_device_data(), DAT_20000ea8 == '\\0'))) {\n    find_and_process_target_value(0x32);\n    shifted_value = shifted_value - 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_data_blocks_08002408",
            "entrypoint": "0x08002408",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002408": "process_data_blocks_08002408",
                "calculate_float_addition_08008cd8": "calculate_float_addition",
                "calculate_float_value_08008eec": "calculate_float_value",
                "calculate_result_with_precision_080094c0": "calculate_result_with_precision",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "count_bits_set_and_shift_08008e44": "count_bits_set_and_shift",
                "find_and_process_target_value_080002a0": "find_and_process_target_value",
                "local_12": "shifted_value",
                "param_1": "input_value",
                "process_data_blocks_08002fd4": "process_data_blocks",
                "process_device_data_08003a74": "process_device_data",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "uVar1": "shifted_value",
                "uVar2": "float_value_1",
                "uVar3": "bits_set_and_shift",
                "uVar4": "float_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080024c4": {
            "additional_data": {
                "DAT_20000e4c": {
                    "result": 1
                },
                "DAT_20000ea8": {
                    "device_flag1": 1,
                    "flag": 1,
                    "flag_dat_1": 1
                },
                "DAT_20000ea9": {
                    "count": 1,
                    "flag_dat_2": 1
                },
                "DAT_20000ee4": {
                    "control": 1,
                    "device_flag3": 1,
                    "flag_dat_4": 1,
                    "yet_another_data_variable": 1
                },
                "DAT_20000ee6": {
                    "device_flag2": 1,
                    "flag_dat_3": 1,
                    "flags": 1,
                    "some_data_variable": 1
                },
                "DAT_20000eec": {
                    "block": 1,
                    "dat_value_2": 1,
                    "device_data1": 1,
                    "some_other_data_variable": 1
                },
                "DAT_20000ef4": {
                    "another_data_variable": 1,
                    "dat_value_1": 1,
                    "value": 1
                },
                "FUN_080024c4": {
                    "initialize_and_process_data": 2,
                    "initialize_and_process_device_data": 4,
                    "initialize_and_update_device_data": 1,
                    "initialize_data": 1,
                    "initialize_device": 17,
                    "initialize_device_data": 1,
                    "initialize_device_info": 1,
                    "initialize_process": 1,
                    "initialize_process_and_update_device_data": 1,
                    "process_data": 1,
                    "process_device_data": 1
                },
                "calculate_float_value_08008eec": {
                    "calculate_float_value": 20
                },
                "count_bits_set_and_shift_08008e44": {
                    "count_bits_and_shift": 2,
                    "count_bits_set_and_shift": 13,
                    "count_set_bits_and_shift": 5
                },
                "initialize_and_calculate_floating_point_values_0800283a": {
                    "init_and_calculate_float_values": 2,
                    "initialize_and_calculate_float_values": 13,
                    "initialize_and_calculate_floating_point": 2,
                    "initialize_and_calculate_floating_point_values": 2,
                    "initialize_calculate_float_values": 1
                },
                "initialize_and_process_data_08001d4c": {
                    "initialize_and_process_data": 19,
                    "initialize_process_data": 1
                },
                "initialize_globals_if_needed_0800585c": {
                    "init_globals_if_needed": 1,
                    "initialize_globals_if_needed": 19
                },
                "local_11": {
                    "bit3": 1,
                    "enable_feature1": 1,
                    "first_flag": 1,
                    "flag3": 6,
                    "flag_3": 1,
                    "flag_device_data_3": 1,
                    "initialize_13": 1,
                    "is_bit9_set": 2,
                    "is_bit_set": 1,
                    "is_bit_set1": 1,
                    "is_bit_set3": 2,
                    "is_bit_set_0": 1,
                    "is_bit_set_in_local11": 1,
                    "is_bit_set_three": 1,
                    "is_condition1": 2,
                    "is_condition1_set": 1,
                    "is_condition_one": 1,
                    "is_enabled_1": 1,
                    "is_feature3_enabled": 1,
                    "is_flag_set1": 1,
                    "is_local11_set": 1
                },
                "local_12": {
                    "bit2": 1,
                    "enable_feature2": 1,
                    "flag2": 6,
                    "flag_2": 1,
                    "flag_device_data_2": 1,
                    "initialize_12": 1,
                    "is_bit10_set": 1,
                    "is_bit7_set": 1,
                    "is_bit_set": 1,
                    "is_bit_set2": 3,
                    "is_bit_set_1": 1,
                    "is_bit_set_in_local12": 1,
                    "is_bit_set_two": 1,
                    "is_condition2": 2,
                    "is_condition2_set": 1,
                    "is_condition_two": 1,
                    "is_enabled_2": 1,
                    "is_feature2_enabled": 1,
                    "is_flag_set2": 1,
                    "is_local12_set": 1,
                    "second_flag": 1
                },
                "local_13": {
                    "bit1": 1,
                    "enable_feature3": 1,
                    "flag1": 6,
                    "flag_1": 1,
                    "flag_device_data_1": 1,
                    "initialize_11": 1,
                    "is_bit11_set": 1,
                    "is_bit3_set": 1,
                    "is_bit_set": 1,
                    "is_bit_set1": 2,
                    "is_bit_set3": 1,
                    "is_bit_set_2": 1,
                    "is_bit_set_in_local13": 1,
                    "is_bit_set_one": 1,
                    "is_condition3": 2,
                    "is_condition3_set": 1,
                    "is_condition_three": 1,
                    "is_enabled_3": 1,
                    "is_feature1_enabled": 1,
                    "is_flag_set3": 1,
                    "is_local13_set": 1,
                    "third_flag": 1
                },
                "memset_with_value_0800b430": {
                    "clear_memory": 3,
                    "clear_memory_with_value": 1,
                    "clear_memory_with_zero": 2,
                    "initialize_array": 2,
                    "initialize_memory": 6,
                    "initialize_memory_block": 1,
                    "initialize_memory_with_zero": 1,
                    "memset_with_value": 3,
                    "reset_memory_with_zeroes": 1
                },
                "process_and_update_device_data_08001e98": {
                    "process_and_update_device_data": 20
                },
                "process_data_blocks_08002fd4": {
                    "process_data_blocks": 20
                },
                "process_device_data_08003a74": {
                    "process_device_data": 20
                },
                "uVar1": {
                    "bits_set_count_0": 1,
                    "count1": 1,
                    "float_value1": 6,
                    "float_value_one": 1,
                    "num_bits_set_in_local11": 1,
                    "shifted_value1": 1
                },
                "uVar2": {
                    "bits_set_count_1": 1,
                    "count2": 1,
                    "float_value2": 6,
                    "float_value_two": 1,
                    "num_bits_set_in_local12": 1,
                    "shifted_value2": 1
                },
                "uVar3": {
                    "bits_set_count_2": 1,
                    "count3": 1,
                    "float_value3": 6,
                    "float_value_three": 1,
                    "num_bits_set_in_local13": 1,
                    "shifted_value3": 1
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08008eec",
                "FUN_0800283a",
                "FUN_08008e44",
                "FUN_08003a74",
                "FUN_08001e98",
                "FUN_08001d4c",
                "FUN_0800585c",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid initialize_process_and_update_device_data_080024c4(void)\n\n{\n  undefined4 float_value1;\n  undefined4 float_value2;\n  undefined4 float_value3;\n  char flag1;\n  char flag2;\n  char flag3;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  initialize_and_process_data();\n  process_device_data();\n  if (DAT_20000ea8 == '\\0') {\n    memset_with_value_0800b430(&DAT_20000eac,0,0xc);\n    initialize_and_calculate_float_value_08008eecs();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      flag3 = -1;\n    }\n    else {\n      flag3 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      flag2 = -1;\n    }\n    else {\n      flag2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      flag1 = -1;\n    }\n    else {\n      flag1 = '\\x01';\n    }\n    float_value1 = count_bits_set_and_shift_08008e44((int)flag3);\n    float_value1 = calculate_float_value_08008eec(float_value1,DAT_20000ef4);\n    float_value2 = count_bits_set_and_shift_08008e44((int)flag2);\n    float_value2 = calculate_float_value_08008eec(float_value2,DAT_20000ef4);\n    float_value3 = count_bits_set_and_shift_08008e44((int)flag1);\n    float_value3 = calculate_float_value_08008eec(float_value3,DAT_20000ef4);\n    process_and_update_device_data(float_value1,float_value2,float_value3,DAT_20000eec,0);\n    initialize_globals_if_needed();\n    process_data_blocks();\n    initialize_and_calculate_float_value_08008eecs();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_process_and_update_device_data_080024c4",
            "entrypoint": "0x080024c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080024c4": "initialize_process_and_update_device_data_080024c4",
                "calculate_float_value_08008eec": "calculate_float_value",
                "count_bits_set_and_shift_08008e44": "count_bits_set_and_shift",
                "initialize_and_calculate_floating_point_values_0800283a": "initialize_and_calculate_float_values",
                "initialize_and_process_data_08001d4c": "initialize_and_process_data",
                "initialize_globals_if_needed_0800585c": "initialize_globals_if_needed",
                "local_11": "flag3",
                "local_12": "flag2",
                "local_13": "flag1",
                "memset_with_value_0800b430": "initialize_memory",
                "process_and_update_device_data_08001e98": "process_and_update_device_data",
                "process_data_blocks_08002fd4": "process_data_blocks",
                "process_device_data_08003a74": "process_device_data",
                "uVar1": "float_value1",
                "uVar2": "float_value2",
                "uVar3": "float_value3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025e8": {
            "additional_data": {
                "DAT_20000ea9": {
                    "condition": 2,
                    "condition_flag": 1,
                    "condition_value": 2,
                    "condition_variable": 1,
                    "some_condition": 1,
                    "system_condition": 1,
                    "system_threshold": 1
                },
                "DAT_20000eaa": {
                    "flags": 2,
                    "system_flags": 7
                },
                "FUN_080025e8": {
                    "initialize_and_check_flags": 1,
                    "initialize_and_check_system": 17,
                    "initialize_and_check_system_components": 1,
                    "initialize_system": 7,
                    "initialize_system_if_flag_not_set": 1,
                    "initialize_system_if_not_already_initialized": 1,
                    "initialize_system_if_not_initialized": 3
                },
                "clear_bitwise_flags_and_check_condition_080057e4": {
                    "check_and_clear_flags": 1,
                    "check_bitwise_flags": 1,
                    "check_condition": 1,
                    "clear_bitwise_flags_and_check_condition": 1,
                    "clear_flags_and_check_condition": 22,
                    "clear_flags_and_check_conditions": 1,
                    "clear_flags_and_verify_condition": 1,
                    "clear_flags_check_condition": 1
                },
                "initialize_system_08005250": {
                    "initialize_main_system": 1,
                    "initialize_system": 22,
                    "initialize_system_1": 1,
                    "initialize_system_components": 4,
                    "set_up_system": 1
                },
                "initialize_system_components_08000210": {
                    "initialize_components": 4,
                    "initialize_system_2": 1,
                    "initialize_system_components": 22,
                    "initialize_system_flags": 2,
                    "initialize_system_variables": 1
                }
            },
            "called": [
                "FUN_08005250",
                "FUN_080057e4",
                "FUN_08000210"
            ],
            "calling": [
                "FUN_0800195c",
                "FUN_08003a18",
                "FUN_080005b4",
                "FUN_08005900",
                "FUN_08003b98"
            ],
            "code": "\nvoid initialize_and_check_system_components_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    initialize_system();\n    initialize_system_components_08000210();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      clear_flags_and_check_condition();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_system_components_080025e8",
            "entrypoint": "0x080025e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025e8": "initialize_and_check_system_components_080025e8",
                "clear_bitwise_flags_and_check_condition_080057e4": "clear_flags_and_check_condition",
                "initialize_system_08005250": "initialize_system",
                "initialize_system_components_08000210": "initialize_system_components"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002638": {
            "additional_data": {
                "FUN_08002638": {
                    "parse_and_calculate_integer": 2,
                    "parse_and_convert_number": 1,
                    "parse_and_convert_string": 1,
                    "parse_integer": 22,
                    "parse_integer_and_store": 1,
                    "parse_number": 2,
                    "parse_number_and_convert_to_float": 1,
                    "parse_number_and_store": 1
                },
                "bVar1": {
                    "decimal_number": 1,
                    "digit": 18,
                    "digit_value": 2,
                    "is_digit": 1,
                    "numeric_value": 1
                },
                "bVar2": {
                    "is_negative": 22,
                    "is_negative_indicator": 1,
                    "negative": 3,
                    "negative_flag": 2
                },
                "bVar3": {
                    "concat_flag": 1,
                    "concatenated_float": 1,
                    "concatenating": 1,
                    "found_decimal": 1,
                    "has_decimal": 1,
                    "has_dot": 1,
                    "has_floating_point": 1,
                    "is_0xfe_checked": 1,
                    "is_big_number": 1,
                    "is_concatenating": 1,
                    "is_concatenation": 4,
                    "is_concatenation_result": 1,
                    "is_decimal": 3,
                    "is_decimal_point": 1,
                    "is_float": 2,
                    "is_floating_point": 1,
                    "is_hex": 2,
                    "is_overflow": 1,
                    "is_shifted": 1,
                    "is_zero": 1,
                    "shifted": 1
                },
                "iVar4": {
                    "check_result": 7,
                    "concat_result": 3,
                    "concat_result_check": 1,
                    "concatenation_check": 3,
                    "concatenation_flag": 1,
                    "concatenation_result": 3,
                    "result": 4,
                    "result_status": 1,
                    "temp_var": 1
                },
                "local_14": {
                    "decimal_length": 1,
                    "int_value": 1,
                    "integer_value": 7,
                    "parsed_integer": 9,
                    "parsed_number": 8,
                    "parsed_value": 1,
                    "result": 4
                },
                "local_15": {
                    "concatenation_count": 1,
                    "decimal_count": 2,
                    "decimal_point": 1,
                    "digit_sign": 1,
                    "dot_position": 1,
                    "exponent": 4,
                    "float_exponent": 1,
                    "negative_exponent": 2,
                    "negative_exponent_count": 1,
                    "num_decimal_places": 1,
                    "num_decimals": 1,
                    "overflow": 1,
                    "shift_count": 12,
                    "shifting_count": 1,
                    "sign_multiplier": 1
                },
                "local_16": {
                    "digit_count": 29,
                    "num_digits": 2
                },
                "local_1c": {
                    "shifted_value": 30
                },
                "local_c": {
                    "char_pointer": 1,
                    "current_byte": 2,
                    "current_char_ptr": 1,
                    "current_pos": 2,
                    "current_position": 3,
                    "current_ptr": 5,
                    "next_byte": 1,
                    "next_char": 3,
                    "next_char_address": 1,
                    "next_char_pointer": 1,
                    "next_char_ptr": 1,
                    "next_character": 2,
                    "next_digit": 2,
                    "next_pointer": 1,
                    "next_position": 1,
                    "ptr": 1,
                    "remaining_chars": 1,
                    "remaining_string": 1
                },
                "local_d": {
                    "current_char": 11,
                    "current_char_value": 1,
                    "current_character": 1,
                    "current_digit": 9,
                    "current_sign": 1,
                    "first_char": 6,
                    "is_negative": 1,
                    "sign_char": 1
                },
                "param_1": {
                    "base": 1,
                    "base_address": 20,
                    "base_offset": 1,
                    "buffer_offset": 1,
                    "input_buffer_address": 1,
                    "input_offset": 2,
                    "offset": 1,
                    "start_address": 2,
                    "start_index": 1,
                    "start_offset": 1
                },
                "param_2": {
                    "binary": 1,
                    "buffer": 1,
                    "byte_array": 2,
                    "byte_array_pointer": 1,
                    "byte_string": 1,
                    "bytes": 1,
                    "current_byte": 1,
                    "current_position": 1,
                    "data_pointer": 1,
                    "input_buffer": 4,
                    "input_data": 2,
                    "input_ptr": 1,
                    "input_str": 1,
                    "input_string": 8,
                    "parsed_string": 1,
                    "string": 1,
                    "string_pointer": 1,
                    "string_ptr": 2
                },
                "param_3": {
                    "output": 1,
                    "output_integer": 1,
                    "output_ptr": 1,
                    "output_value": 10,
                    "parsed_integer": 1,
                    "parsed_value": 1,
                    "result": 10,
                    "result_float": 1,
                    "result_pointer": 2,
                    "result_ptr": 2,
                    "result_value": 1
                },
                "pcVar5": {
                    "curr_char": 1,
                    "current_char": 17,
                    "current_char_ptr": 1,
                    "next_byte": 3,
                    "next_char": 2,
                    "next_char_ptr": 2
                },
                "pcVar6": {
                    "current_byte": 3,
                    "current_char": 1,
                    "current_char_ptr": 2,
                    "next_char": 17,
                    "next_char_ptr": 1,
                    "offset_ptr": 1,
                    "start_char_ptr": 1
                },
                "uVar7": {
                    "result": 2,
                    "ret_value": 1,
                    "return_val": 2,
                    "return_value": 14,
                    "status": 1,
                    "success": 1,
                    "success_status": 1
                },
                "uVar8": {
                    "calculation_result": 5,
                    "improved_result": 11,
                    "temp_result": 2,
                    "temp_value": 4
                }
            },
            "called": [
                "FUN_08009214",
                "FUN_08008eec",
                "FUN_08008e3c",
                "FUN_08008c30",
                "FUN_08008590",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_0800184c",
                "FUN_08003b98"
            ],
            "code": "\nundefined4 parse_and_calculate_integer_08002638(int base_address,byte *input_string,uint *output_value)\n\n{\n  byte digit;\n  bool is_negative;\n  bool is_concatenation;\n  int check_result;\n  char *current_char;\n  char *next_char;\n  undefined4 return_value;\n  undefined8 improved_result;\n  uint shifted_value;\n  byte digit_count;\n  char shift_count;\n  int parsed_integer;\n  char current_char;\n  char *current_ptr;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_char = *next_char;\n  is_negative = false;\n  if (current_char == '-') {\n    is_negative = true;\n    current_char = *current_char;\n    current_ptr = next_char + 2;\n  }\n  else {\n    current_ptr = current_char;\n    if (current_char == '+') {\n      current_ptr = next_char + 2;\n      current_char = *current_char;\n    }\n  }\n  parsed_integer = 0;\n  shift_count = '\\0';\n  digit_count = 0;\n  is_concatenation = false;\n  do {\n    digit = current_char - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (is_concatenation) {\n          shift_count = shift_count + -1;\n        }\n        parsed_integer = (uint)digit + parsed_integer * 10;\n      }\n      else if (!is_concatenation) {\n        shift_count = shift_count + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (is_concatenation)) {\n        if (digit_count == 0) {\n          return_value = 0;\n        }\n        else {\n          shifted_value = calculate_shifted_value_08008e3c(parsed_integer);\n          check_result = check_if_concatenation_result_is_not_null_08009214(shifted_value,0);\n          if (check_result == 0) {\n            for (; shift_count < -1; shift_count = shift_count + '\\x02') {\n              improved_result = reverse_bits_and_shift_08008590(shifted_value);\n              improved_result = calculate_improved_result_08008640((int)improved_result,(int)((ulonglong)improved_result >> 0x20),0x47ae147b,0x3f847ae1)\n              ;\n              shifted_value = calculate_float_value_08008c30((int)improved_result,(int)((ulonglong)improved_result >> 0x20));\n            }\n            if (shift_count < '\\0') {\n              improved_result = reverse_bits_and_shift_08008590(shifted_value);\n              improved_result = calculate_improved_result_08008640((int)improved_result,(int)((ulonglong)improved_result >> 0x20),0x9999999a,0x3fb99999)\n              ;\n              shifted_value = calculate_float_value_08008c30((int)improved_result,(int)((ulonglong)improved_result >> 0x20));\n            }\n            else {\n              for (; '\\0' < shift_count; shift_count = shift_count + -1) {\n                shifted_value = calculate_float_value_08008eec(shifted_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *output_value = shifted_value ^ 0x80000000;\n          }\n          else {\n            *output_value = shifted_value;\n          }\n          *input_string = ((char)current_ptr - (char)base_address) - 1;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      is_concatenation = true;\n    }\n    current_char = *current_ptr;\n    current_ptr = current_ptr + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_and_calculate_integer_08002638",
            "entrypoint": "0x08002638",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002638": "parse_and_calculate_integer_08002638",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "is_concatenation",
                "iVar4": "check_result",
                "local_14": "parsed_integer",
                "local_15": "shift_count",
                "local_16": "digit_count",
                "local_1c": "shifted_value",
                "local_c": "current_ptr",
                "local_d": "current_char",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "output_value",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "return_value",
                "uVar8": "improved_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002814": {
            "called": [],
            "calling": [
                "FUN_08002408",
                "FUN_08004148",
                "FUN_08001d4c"
            ],
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002814",
            "entrypoint": "0x08002814",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002828": {
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002828",
            "entrypoint": "0x08002828",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800283a": {
            "additional_data": {
                "DAT_20000eac": {
                    "parameter1": 5,
                    "parameter_1": 2
                },
                "DAT_20000eb0": {
                    "parameter2": 5,
                    "parameter_2": 2
                },
                "DAT_20000eb4": {
                    "parameter3": 5,
                    "parameter_3": 2
                },
                "FUN_0800283a": {
                    "initialize_and_calculate_float_values": 1,
                    "initialize_and_calculate_floating_point": 1,
                    "initialize_and_calculate_floating_point_values": 28,
                    "initialize_and_store_floating_point_values": 1
                },
                "calculate_and_store_floating_point_values_080004fc": {
                    "calculate_and_store_float_values": 1,
                    "calculate_and_store_floating_point_values": 20,
                    "calculate_and_store_values": 1
                },
                "initialize_parameters_080035ec": {
                    "initialize_parameters": 22
                }
            },
            "called": [
                "FUN_080004fc",
                "FUN_080035ec"
            ],
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "code": "\nvoid initialize_and_calculate_floating_point_values_0800283a(void)\n\n{\n  initialize_parameters_080035ec(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  calculate_and_store_floating_point_values(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "current_name": "initialize_and_calculate_floating_point_values_0800283a",
            "entrypoint": "0x0800283a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800283a": "initialize_and_calculate_floating_point_values_0800283a",
                "calculate_and_store_floating_point_values_080004fc": "calculate_and_store_floating_point_values",
                "initialize_parameters_080035ec": "initialize_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002870": {
            "additional_data": {
                "FUN_08002870": {
                    "increment_and_cap": 1,
                    "increment_and_check": 5,
                    "increment_and_check_limit": 5,
                    "increment_and_check_overflow": 1,
                    "increment_and_constrain_value": 1,
                    "increment_and_limit": 6,
                    "increment_and_limit_value": 1,
                    "increment_and_reset": 5,
                    "increment_and_reset_if_equal": 1,
                    "increment_and_reset_if_equal_to18": 1,
                    "increment_and_wrap": 3,
                    "increment_and_zero_check": 1
                },
                "local_9": {
                    "incremented_value": 1,
                    "output_value": 1,
                    "result": 25,
                    "result_char": 2,
                    "result_value": 2
                },
                "param_1": {
                    "input": 17,
                    "input_char": 4,
                    "input_value": 6,
                    "value": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_08002e08",
                "FUN_08002ba8",
                "FUN_08003004",
                "FUN_08002ef0",
                "FUN_08002f40"
            ],
            "code": "\nchar increment_and_check_limit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "current_name": "increment_and_check_limit_08002870",
            "entrypoint": "0x08002870",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002870": "increment_and_check_limit_08002870",
                "local_9": "result",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002896": {
            "additional_data": {
                "FUN_08002896": {
                    "calculate_new_value": 1,
                    "convert_character": 1,
                    "decrease_and_set_default": 1,
                    "decrement_and_default": 6,
                    "decrement_and_default_to18": 2,
                    "decrement_and_set_default": 5,
                    "decrement_and_shift": 2,
                    "decrement_char": 2,
                    "increment_and_negate_char": 1,
                    "initialize_value": 1,
                    "modify_char": 1,
                    "normalize_char": 1,
                    "reversed_char": 1,
                    "subtract_one_from_input": 1,
                    "update_char": 2,
                    "update_char_value": 2,
                    "update_character": 1
                },
                "local_9": {
                    "converted_char": 1,
                    "modified_char": 3,
                    "new_char": 1,
                    "new_value": 1,
                    "normalized_char": 1,
                    "output_char": 1,
                    "result": 13,
                    "result_char": 6,
                    "updated_char": 4
                },
                "param_1": {
                    "character": 1,
                    "input": 8,
                    "input_char": 18,
                    "input_value": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nchar decrement_and_set_default_08002896(char input_char)\n\n{\n  char result;\n  \n  result = input_char;\n  if (input_char == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "current_name": "decrement_and_set_default_08002896",
            "entrypoint": "0x08002896",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002896": "decrement_and_set_default_08002896",
                "local_9": "result",
                "param_1": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028bc": {
            "additional_data": {
                "FUN_080028bc": {
                    "calculate_and_return_sum_of_floats": 1,
                    "calculate_combined_float_value": 6,
                    "calculate_combined_float_values": 1,
                    "calculate_final_result": 1,
                    "calculate_floating_point_sum": 2,
                    "calculate_result": 17,
                    "calculate_total": 1,
                    "calculate_total_float_value": 1,
                    "calculate_total_value": 1
                },
                "param_1": {
                    "float_param_1": 2,
                    "input1": 3,
                    "input_1": 5,
                    "input_param_1": 2,
                    "input_value_1": 6,
                    "value1": 2,
                    "value_1": 11
                },
                "param_2": {
                    "float_param_2": 2,
                    "input2": 3,
                    "input_2": 5,
                    "input_param_2": 2,
                    "input_value_2": 6,
                    "value2": 2,
                    "value_2": 11
                },
                "param_3": {
                    "float_param_3": 2,
                    "input3": 3,
                    "input_3": 5,
                    "input_param_3": 2,
                    "input_value_3": 6,
                    "value3": 2,
                    "value_3": 11
                },
                "uVar1": {
                    "combined_value_1": 1,
                    "float_value1": 2,
                    "float_value_1": 6,
                    "result": 1,
                    "result1": 3,
                    "result_1": 14,
                    "sum1": 1,
                    "sum_of_floats": 1,
                    "sum_value": 1,
                    "total_value_1": 1
                },
                "uVar2": {
                    "another_sum_value": 1,
                    "combined_value_2": 1,
                    "float_param_squared": 1,
                    "float_value2": 2,
                    "float_value_2": 6,
                    "result2": 3,
                    "result_2": 14,
                    "sum2": 1,
                    "temp_value": 1,
                    "total_value_2": 1
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_08009054",
                "FUN_08008cd8",
                "FUN_08008cdc"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_final_result_080028bc(undefined4 value_1,undefined4 value_2,undefined4 value_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_float_value_08008eec(value_2,value_2);\n  result_2 = calculate_float_value_08008eec(value_1,value_1);\n  result_1 = calculate_float_addition_08008cd8(result_1,result_2);\n  result_2 = calculate_float_value_08008cdc(value_3,value_3);\n  result_1 = calculate_floating_point_value_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "current_name": "calculate_final_result_080028bc",
            "entrypoint": "0x080028bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028bc": "calculate_final_result_080028bc",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002908": {
            "additional_data": {
                "FUN_08002908": {
                    "calculate_final_result": 4,
                    "calculate_final_value": 1,
                    "calculate_float_sum": 1,
                    "calculate_result": 23,
                    "calculate_total": 1,
                    "calculate_total_value": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 4,
                    "input_1": 4,
                    "input_value1": 1,
                    "input_value_1": 2,
                    "value1": 4,
                    "value_1": 15
                },
                "param_2": {
                    "input2": 4,
                    "input_2": 4,
                    "input_value2": 1,
                    "input_value_2": 2,
                    "second_param": 1,
                    "value2": 4,
                    "value_2": 15
                },
                "param_3": {
                    "input3": 4,
                    "input_3": 4,
                    "input_value3": 1,
                    "input_value_3": 2,
                    "third_param": 1,
                    "value3": 4,
                    "value_3": 15
                },
                "param_4": {
                    "fourth_param": 1,
                    "input4": 4,
                    "input_4": 4,
                    "input_value4": 1,
                    "input_value_4": 2,
                    "value4": 4,
                    "value_4": 15
                },
                "uVar1": {
                    "float_value_1": 4,
                    "intermediate_result_1": 2,
                    "intermediate_value1": 1,
                    "result1": 5,
                    "result_1": 16,
                    "sum1": 1,
                    "total_value": 1
                },
                "uVar2": {
                    "float_value_2": 4,
                    "intermediate_result_2": 2,
                    "intermediate_value2": 1,
                    "result2": 5,
                    "result_2": 16,
                    "sum2": 1,
                    "temp_value": 1
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_08008cd8",
                "FUN_08009054",
                "FUN_08008cdc"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_final_result_08002908(undefined4 value_1,undefined4 value_2,undefined4 value_3,undefined4 value_4)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  \n  result_1 = calculate_float_value_08008cdc(value_3,value_3);\n  result_1 = calculate_float_value_08008eec(result_1,value_4);\n  result_2 = calculate_float_value_08008eec(value_1,value_1);\n  result_1 = calculate_float_addition_08008cd8(result_1,result_2);\n  result_2 = calculate_float_value_08008eec(value_2,value_2);\n  result_1 = calculate_float_value_08008cdc(result_1,result_2);\n  result_2 = calculate_float_value_08008eec(value_3,0x40800000);\n  result_1 = calculate_floating_point_value_08009054(result_1,result_2);\n  return result_1;\n}\n\n",
            "current_name": "calculate_final_result_08002908",
            "entrypoint": "0x08002908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002908": "calculate_final_result_08002908",
                "param_1": "value_1",
                "param_2": "value_2",
                "param_3": "value_3",
                "param_4": "value_4",
                "uVar1": "result_1",
                "uVar2": "result_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002978": {
            "additional_data": {
                "FUN_08002978": {
                    "calculate_and_process_data": 2,
                    "calculate_float_value_and_process_data": 1,
                    "calculate_improved_float_value": 1,
                    "calculate_improved_value": 1,
                    "calculate_processed_float": 1,
                    "calculate_result": 3,
                    "process_data": 18,
                    "process_data_and_calculate_result": 1,
                    "process_float_data": 1,
                    "process_float_values": 2
                },
                "calculate_float_addition_08008cd8": {
                    "calculate_float_addition": 5
                },
                "calculate_float_value_08008c30": {
                    "calculate_and_combine_values": 1,
                    "calculate_float": 1,
                    "calculate_float_square": 1,
                    "calculate_float_value3": 1,
                    "calculate_float_value_4": 1,
                    "calculate_float_value_c": 1
                },
                "calculate_float_value_08008cd8": {
                    "calculate_float_addition": 1
                },
                "calculate_float_value_08008cdc": {
                    "calculate_and_combine_values": 1,
                    "calculate_float": 1,
                    "calculate_float_square": 1,
                    "calculate_float_value2": 1,
                    "calculate_float_value_2": 1,
                    "calculate_float_value_b": 1
                },
                "calculate_float_value_08008eec": {
                    "calculate_and_combine_values": 1,
                    "calculate_float": 1,
                    "calculate_float_square": 1,
                    "calculate_float_value": 1,
                    "calculate_float_value_3": 1,
                    "calculate_float_value_a": 1
                },
                "improved_process_data_080098d0": {
                    "improved_process_data": 5,
                    "process_data_improved": 1
                },
                "param_1": {
                    "input1": 6,
                    "input_1": 9,
                    "input_param": 2,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value_1": 8,
                    "value1": 4
                },
                "param_2": {
                    "calc_param": 1,
                    "calc_param1": 1,
                    "input2": 6,
                    "input_2": 9,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value_2": 8,
                    "value2": 4
                },
                "param_3": {
                    "calc_param2": 1,
                    "input3": 6,
                    "input_3": 9,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_value_3": 8,
                    "shift_param": 1,
                    "value3": 4
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 6
                },
                "uVar1": {
                    "calc_result1": 1,
                    "calculated_value1": 2,
                    "float_result1": 1,
                    "float_value1": 3,
                    "float_value_1": 5,
                    "result1": 7,
                    "result_1": 10,
                    "value_1": 2
                },
                "uVar2": {
                    "calc_result2": 1,
                    "calculated_value2": 2,
                    "float_result2": 1,
                    "float_value2": 3,
                    "float_value_2": 5,
                    "result2": 7,
                    "result_2": 10,
                    "value_2": 2
                },
                "uVar3": {
                    "combined_result": 1,
                    "converted_value": 1,
                    "processed_data": 5,
                    "processed_result": 1,
                    "processed_value": 2,
                    "result": 2,
                    "reverse_result": 1,
                    "reversed_and_shifted_result": 1,
                    "reversed_and_shifted_value": 1,
                    "reversed_data": 1,
                    "reversed_result": 5,
                    "reversed_shifted_value": 5,
                    "reversed_value": 2,
                    "shifted_result": 3
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_080098d0",
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08008c30",
                "FUN_08008590"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08002afc",
                "FUN_080029d8"
            ],
            "code": "\nundefined4 process_data_and_calculate_result_08002978(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined8 reversed_result;\n  \n  result_1 = calculate_float_value_08008eec(input_2,input_2);\n  result_2 = calculate_float_value_08008cdc(input_1,input_1);\n  result_2 = calculate_float_value_08008eec(result_2,input_3);\n  result_1 = calculate_float_addition_08008cd8(result_1,result_2);\n  reversed_result = reverse_bits_and_shift_08008590(result_1);\n  reversed_result = improved_process_data((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  result_1 = calculate_float_value_08008c30((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n  return result_1;\n}\n\n",
            "current_name": "process_data_and_calculate_result_08002978",
            "entrypoint": "0x08002978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002978": "process_data_and_calculate_result_08002978",
                "calculate_float_addition_08008cd8": "calculate_float_addition",
                "calculate_float_value_08008c30": "calculate_float_square",
                "calculate_float_value_08008cdc": "calculate_float_value_2",
                "calculate_float_value_08008eec": "calculate_float_value_3",
                "improved_process_data_080098d0": "improved_process_data",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "uVar1": "result_1",
                "uVar2": "result_2",
                "uVar3": "reversed_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080029d8": {
            "additional_data": {
                "DAT_20000edc": {
                    "constant_value": 2,
                    "encryption_key": 1
                },
                "FUN_080029d8": {
                    "concatenate_and_update": 1,
                    "concatenate_and_update_result": 1,
                    "concatenate_strings": 1,
                    "concatenated_string_processing": 1,
                    "concatenator_function": 1,
                    "process_and_set_result": 2,
                    "process_concatenation": 13,
                    "process_data": 1,
                    "update_concatenated_result": 1,
                    "update_concatenated_string": 3,
                    "update_concatenation_result": 1,
                    "update_string": 1
                },
                "check_if_concatenated_string_is_empty_08009228": {
                    "check_concatenated_string_empty": 1,
                    "check_if_concatenated_string_is_empty": 1
                },
                "check_if_concatenation_result_is_not_null_08009214": {
                    "check_concatenation_result_not_null": 1,
                    "check_if_concatenation_result_is_not_null": 1
                },
                "iVar1": {
                    "check_result": 1,
                    "concat_check_result": 1,
                    "concat_result": 4,
                    "concat_result_check": 1,
                    "concatenation_check": 2,
                    "concatenation_check_result": 3,
                    "concatenation_result": 7,
                    "concatenation_result_check": 1,
                    "is_concatenated_null": 1,
                    "is_concatenation_not_null": 1,
                    "is_concatenation_result_null": 1,
                    "is_not_null": 1,
                    "is_result_valid": 1,
                    "result": 5,
                    "result_checker": 1
                },
                "is_c_string_empty_08009264": {
                    "check_string_empty": 1,
                    "is_c_string_empty": 1
                },
                "param_1": {
                    "arg1": 6,
                    "arg_1": 1,
                    "data_ptr": 1,
                    "input": 1,
                    "param": 2,
                    "param1": 9,
                    "param_1": 3,
                    "result": 3,
                    "undefined_param_1": 1,
                    "undefined_value": 1,
                    "unknown_param": 1,
                    "unused_param": 1,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "array1": 1,
                    "buffer1": 2,
                    "concatenated_result": 1,
                    "concatenated_string": 1,
                    "concatenated_string_param": 1,
                    "concatenated_string_struct": 1,
                    "concatenation": 1,
                    "concatenation_ptr": 2,
                    "concatenation_result": 3,
                    "data_block": 1,
                    "input1": 1,
                    "input_data": 1,
                    "input_param": 2,
                    "input_ptr": 1,
                    "source_data": 2,
                    "source_ptr": 1,
                    "source_string": 2,
                    "str1": 1,
                    "string1": 1,
                    "string1_ptr": 2,
                    "string_obj": 1
                },
                "param_3": {
                    "another_input_param": 1,
                    "arg3": 2,
                    "array2": 1,
                    "buffer2": 2,
                    "c_string": 1,
                    "c_string_data": 1,
                    "c_string_param": 1,
                    "data": 1,
                    "data_ptr": 2,
                    "dest_ptr": 1,
                    "destination_string": 1,
                    "input2": 1,
                    "input_data": 1,
                    "other_obj": 1,
                    "other_string": 1,
                    "other_struct": 1,
                    "output_param": 1,
                    "process_data": 1,
                    "str2": 1,
                    "string": 1,
                    "string2": 1,
                    "string2_ptr": 2,
                    "string_block": 1,
                    "string_ptr": 1,
                    "target_data": 2,
                    "target_string": 1
                },
                "process_data_and_calculate_result_08002978": {
                    "calculate_result": 1,
                    "process_data_and_calculate_result": 1
                },
                "uVar2": {
                    "new_result": 1,
                    "processed_data": 9,
                    "processed_data1": 1,
                    "processed_data_result": 7,
                    "processed_result": 9,
                    "result": 2,
                    "result1": 1,
                    "result_variable": 1
                },
                "uVar3": {
                    "buffer1_content": 1,
                    "c_string_data_copy": 1,
                    "concat_result": 1,
                    "concatenated_string": 7,
                    "concatenation_result": 1,
                    "data_to_check": 1,
                    "existing_string": 1,
                    "initial_data": 1,
                    "initial_result": 1,
                    "input_data": 1,
                    "original_c_string": 1,
                    "original_concatenation_result": 1,
                    "original_data": 6,
                    "original_result": 2,
                    "original_string": 1,
                    "previous_string": 1,
                    "process_data_result": 1,
                    "processed_string": 1,
                    "temp_string": 1
                }
            },
            "called": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08002978",
                "FUN_08009264"
            ],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nvoid process_concatenation_080029d8(undefined4 param1,int concatenation_result,int target_data)\n\n{\n  int concatenation_result;\n  undefined4 processed_data;\n  undefined4 concatenated_string;\n  \n  if (((concatenation_result != 0) && (target_data != 0)) &&\n     (concatenation_result = check_concatenation_result_not_null(*(undefined4 *)(concatenation_result + 0x18),*(undefined4 *)(concatenation_result + 0x1c)),\n     concatenation_result == 0)) {\n    if ((*(char *)(concatenation_result + 0x25) == '\\0') &&\n       (concatenation_result = is_c_string_empty(*(undefined4 *)(concatenation_result + 0x1c),*(undefined4 *)(target_data + 0x18)),\n       concatenation_result != 0)) {\n      concatenated_string = *(undefined4 *)(concatenation_result + 0x1c);\n      processed_data = process_data_and_calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(target_data + 0x18),\n                           *(undefined4 *)(concatenation_result + 0x20));\n      concatenation_result = check_concatenated_string_empty(concatenated_string,processed_data);\n      if (concatenation_result == 0) {\n        processed_data = process_data_and_calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(target_data + 0x18),\n                             *(undefined4 *)(concatenation_result + 0x20));\n      }\n      else {\n        processed_data = *(undefined4 *)(concatenation_result + 0x1c);\n      }\n      *(undefined4 *)(concatenation_result + 0x18) = processed_data;\n    }\n    else {\n      *(undefined4 *)(concatenation_result + 0x18) = *(undefined4 *)(concatenation_result + 0x1c);\n    }\n    *(undefined *)(concatenation_result + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "process_concatenation_080029d8",
            "entrypoint": "0x080029d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080029d8": "process_concatenation_080029d8",
                "check_if_concatenated_string_is_empty_08009228": "check_concatenated_string_empty",
                "check_if_concatenation_result_is_not_null_08009214": "check_concatenation_result_not_null",
                "iVar1": "concatenation_result",
                "is_c_string_empty_08009264": "is_c_string_empty",
                "param_1": "param1",
                "param_2": "concatenation_result",
                "param_3": "target_data",
                "process_data_and_calculate_result_08002978": "process_data_and_calculate_result",
                "uVar2": "processed_data",
                "uVar3": "concatenated_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a94": {
            "additional_data": {
                "FUN_08002a94": {
                    "process_concatenation": 7,
                    "process_concatenation_loop": 10,
                    "process_data": 13,
                    "reverse_and_concatenate": 1
                },
                "decrement_and_set_default_08002896": {
                    "decrement_and_set_default": 1
                },
                "local_14": {
                    "current_address": 2,
                    "current_chunk": 1,
                    "current_concatenation": 1,
                    "current_data": 3,
                    "current_data_ptr": 1,
                    "current_iteration_value": 1,
                    "current_pointer": 3,
                    "current_ptr": 4,
                    "current_value": 1,
                    "dest_ptr": 1,
                    "prev_buffer_ptr": 1,
                    "prev_ptr_copy": 1,
                    "previous_address": 4,
                    "previous_concatenation": 2,
                    "previous_data": 2,
                    "previous_result": 1,
                    "temp_ptr": 2
                },
                "local_18": {
                    "buffer_ptr": 1,
                    "current_address": 4,
                    "current_concatenation": 2,
                    "current_data": 2,
                    "current_ptr": 1,
                    "current_result": 1,
                    "prev_ptr": 1,
                    "previous_address": 2,
                    "previous_chunk": 1,
                    "previous_concatenation": 1,
                    "previous_data": 3,
                    "previous_data_ptr": 1,
                    "previous_iteration_value": 1,
                    "previous_pointer": 3,
                    "previous_ptr": 5,
                    "previous_value": 1,
                    "source_ptr": 1
                },
                "local_9": {
                    "byte_data": 1,
                    "byte_value": 6,
                    "current_byte": 11,
                    "current_index": 2,
                    "current_value": 3,
                    "data_byte": 1,
                    "default_byte": 1,
                    "default_value": 6
                },
                "process_concatenation_080029d8": {
                    "process_concatenation": 1
                },
                "puVar1": {
                    "current_ptr": 2,
                    "prev_buffer_ptr_temp": 1,
                    "prev_ptr": 1,
                    "previous_address_copy": 1,
                    "previous_data_copy": 1,
                    "previous_iteration_value_temp": 1,
                    "previous_value": 1,
                    "temp": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 2
                }
            },
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid process_concatenation_loop_08002a94(void)\n\n{\n  undefined *current_ptr;\n  undefined *previous_ptr;\n  undefined *previous_address;\n  byte current_byte;\n  \n  current_byte = DAT_20000cf0;\n  previous_ptr = (undefined *)0x0;\n  previous_address = (undefined *)0x0;\n  while (current_ptr = previous_address, current_byte != DAT_20000cf1) {\n    current_byte = decrement_and_set_default_08002896(current_byte);\n    previous_address = previous_ptr;\n    process_concatenation(&DAT_20000870 + (uint)current_byte * 0x40,previous_ptr,current_ptr);\n    previous_ptr = &DAT_20000870 + (uint)current_byte * 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "process_concatenation_loop_08002a94",
            "entrypoint": "0x08002a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a94": "process_concatenation_loop_08002a94",
                "decrement_and_set_default_08002896": "decrement_and_set_default",
                "local_14": "previous_address",
                "local_18": "previous_ptr",
                "local_9": "current_byte",
                "process_concatenation_080029d8": "process_concatenation",
                "puVar1": "current_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002afc": {
            "additional_data": {
                "0x18": {
                    "ptr1": 1
                },
                "0x20": {
                    "ptr2": 1
                },
                "0x24": {
                    "flag": 1
                },
                "0x25": {
                    "offset1": 1
                },
                "0x80000000": {
                    "xor_constant": 1
                },
                "DAT_20000edc": {
                    "constant": 1,
                    "encryption_key": 1
                },
                "FUN_08002afc": {
                    "concatenate_strings_if_not_empty": 1,
                    "process_and_concatenate_strings": 1,
                    "process_concatenated_data": 1,
                    "process_concatenated_string": 1,
                    "process_concatenated_strings": 8,
                    "process_concatenation": 8,
                    "process_concatenation_result": 1,
                    "process_data": 1,
                    "process_parameters": 2,
                    "process_string_data": 1,
                    "update_concatenated_string": 2,
                    "update_concatenation_result": 1,
                    "update_string": 1,
                    "update_strings": 1
                },
                "check_if_concatenated_string_is_empty_08009228": {
                    "check_if_concatenated_string_is_empty": 1,
                    "is_concatenated_string_empty": 2,
                    "is_concatenation_empty": 1,
                    "is_empty_concatenated_string": 3,
                    "is_string_empty": 1
                },
                "check_if_concatenation_result_is_not_null_08009214": {
                    "check_if_concatenation_result_is_not_null": 1,
                    "is_concatenation_not_null": 1,
                    "is_concatenation_result_not_null": 5,
                    "is_not_null": 1
                },
                "iVar1": {
                    "concat_string_result": 1,
                    "concatenation_check": 1,
                    "concatenation_result": 1,
                    "concatenation_status": 1,
                    "is_concat_empty": 1,
                    "is_concatenated_string_empty": 2,
                    "is_concatenation_empty": 3,
                    "is_empty": 12,
                    "is_empty_result": 1,
                    "is_string_empty": 1,
                    "result": 4,
                    "result_check": 1
                },
                "param_1": {
                    "concatenation1": 2,
                    "concatenation_result": 1,
                    "data_ptr1": 1,
                    "first_string_ptr": 1,
                    "input1": 3,
                    "input_1": 1,
                    "input_param": 1,
                    "input_parameter_1": 1,
                    "input_string1": 2,
                    "input_string_1": 2,
                    "source_string": 1,
                    "str1": 1,
                    "string1": 9,
                    "string1_addr": 1,
                    "string1_ptr": 1,
                    "string_1": 1,
                    "string_data_1": 1
                },
                "param_2": {
                    "concatenation2": 2,
                    "data": 1,
                    "data_ptr2": 1,
                    "destination_string": 1,
                    "input2": 3,
                    "input_2": 1,
                    "input_parameter_2": 1,
                    "input_string2": 2,
                    "input_string_2": 2,
                    "output_param": 1,
                    "second_string_ptr": 1,
                    "str2": 1,
                    "string2": 9,
                    "string2_addr": 1,
                    "string2_ptr": 1,
                    "string_2": 1,
                    "string_data_2": 1
                },
                "process_data_and_calculate_result_08002978": {
                    "process_and_calculate": 1,
                    "process_data_and_calculate_result": 7
                },
                "uVar2": {
                    "calculated_result": 1,
                    "calculation_result": 1,
                    "data_result": 1,
                    "processed_data": 7,
                    "processed_data_result": 3,
                    "processed_result": 6,
                    "result": 6,
                    "result1": 1,
                    "result_1": 2,
                    "result_ptr": 1
                },
                "uVar3": {
                    "concatenated_string1": 1,
                    "input_2_copy": 1,
                    "input_ptr": 1,
                    "input_string2_copy": 1,
                    "original_string2": 4,
                    "original_value": 1,
                    "previous_result": 1,
                    "result_2": 2,
                    "second_string_ptr_backup": 1,
                    "string2_copy": 1,
                    "temp": 3,
                    "temp_result": 1,
                    "temp_string": 8,
                    "temp_string2": 1,
                    "temp_variable": 1,
                    "temporary_data": 1
                }
            },
            "called": [
                "FUN_08009214",
                "FUN_08009228",
                "FUN_08002978"
            ],
            "calling": [
                "FUN_08002ba8"
            ],
            "code": "\nvoid process_concatenation_result_08002afc(int string1,int string2)\n\n{\n  int is_empty;\n  undefined4 processed_data;\n  undefined4 temp_string;\n  \n  if (((string1 != 0) && (*(char *)(string1 + 0x25) == '\\0')) &&\n     (is_empty = is_empty_concatenated_string(*(undefined4 *)(string1 + 0x18),*(undefined4 *)(string2 + 0x18)),\n     is_empty != 0)) {\n    temp_string = *(undefined4 *)(string2 + 0x18);\n    processed_data = process_data_and_calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(string1 + 0x18),\n                         *(undefined4 *)(string1 + 0x20));\n    is_empty = is_empty_concatenated_string(temp_string,processed_data);\n    if (is_empty == 0) {\n      processed_data = process_data_and_calculate_result(DAT_20000edc ^ 0x80000000,*(undefined4 *)(string1 + 0x18),\n                           *(undefined4 *)(string1 + 0x20));\n    }\n    else {\n      processed_data = *(undefined4 *)(string2 + 0x18);\n    }\n    is_empty = is_concatenation_result_not_null(processed_data,*(undefined4 *)(string2 + 0x18));\n    if (is_empty == 0) {\n      *(undefined4 *)(string2 + 0x18) = processed_data;\n      *(undefined *)(string2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_concatenation_result_08002afc",
            "entrypoint": "0x08002afc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002afc": "process_concatenation_result_08002afc",
                "check_if_concatenated_string_is_empty_08009228": "is_empty_concatenated_string",
                "check_if_concatenation_result_is_not_null_08009214": "is_concatenation_result_not_null",
                "iVar1": "is_empty",
                "param_1": "string1",
                "param_2": "string2",
                "process_data_and_calculate_result_08002978": "process_data_and_calculate_result",
                "uVar2": "processed_data",
                "uVar3": "temp_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "additional_data": {
                "DAT_20000cf0": {
                    "dat_end": 1
                },
                "DAT_20000cf1": {
                    "dat_start": 1
                },
                "FUN_08002ba8": {
                    "concatenate_and_process_result": 1,
                    "concatenate_and_process_results": 2,
                    "concatenate_buffer_data": 1,
                    "concatenate_data": 1,
                    "concatenate_strings": 2,
                    "concatenation_process": 1,
                    "process_and_concatenate_data": 2,
                    "process_conc_result": 2,
                    "process_concatenated_data": 1,
                    "process_concatenation": 16,
                    "process_concatenation_results": 1,
                    "process_results": 1
                },
                "increment_and_check_limit_08002870": {
                    "increment_and_check_limit": 3
                },
                "local_10": {
                    "current_address": 1,
                    "current_buffer": 1,
                    "current_concat_result": 1,
                    "current_concatenated_result": 1,
                    "current_concatenation": 1,
                    "current_concatenation_result": 1,
                    "current_data": 2,
                    "current_element": 1,
                    "current_result": 14,
                    "current_string": 2,
                    "destination_pointer": 1,
                    "new_buffer_data": 1,
                    "next_data": 1,
                    "next_ptr": 1,
                    "next_result": 1,
                    "temp_2": 1
                },
                "local_14": {
                    "current_data": 1,
                    "current_ptr": 1,
                    "current_result": 2,
                    "new_data": 1,
                    "old_buffer_data": 1,
                    "prev_address": 1,
                    "prev_buffer": 1,
                    "prev_result": 1,
                    "previous_concat_result": 1,
                    "previous_concatenation": 1,
                    "previous_concatenation_result": 1,
                    "previous_data": 2,
                    "previous_result": 13,
                    "previous_string": 2,
                    "source_pointer": 1,
                    "temp_1": 1
                },
                "local_9": {
                    "byte_limit": 1,
                    "byte_value": 7,
                    "counter": 1,
                    "current_byte": 6,
                    "current_char": 1,
                    "current_value": 1,
                    "data_index": 1,
                    "data_limit": 1,
                    "limit": 7,
                    "limit_byte": 1,
                    "limit_check": 1,
                    "limit_counter": 1,
                    "limit_flag": 1,
                    "limit_value": 1
                },
                "process_concatenation_result_08002afc": {
                    "concatenate_strings_process": 1,
                    "process_concatenation_result": 2
                },
                "puVar2": {
                    "current_result_temp": 1,
                    "prev_ptr": 1,
                    "prev_result_ptr": 1,
                    "previous_buffer_data": 1,
                    "previous_concatenation_ptr": 1,
                    "previous_data": 3,
                    "previous_data_ptr": 1,
                    "previous_pointer": 1,
                    "previous_ptr": 1,
                    "previous_result": 2,
                    "previous_result_copy_2": 1,
                    "previous_result_pointer": 1,
                    "previous_result_ptr": 8,
                    "source": 1
                },
                "puVar3": {
                    "current_buffer_data": 1,
                    "current_data": 2,
                    "current_pointer": 1,
                    "current_ptr": 1,
                    "last_result": 1,
                    "prev_result_ptr_before": 1,
                    "previous_concatenated_result": 1,
                    "previous_concatenation_ptr_last": 1,
                    "previous_data": 1,
                    "previous_data_ptr": 1,
                    "previous_data_ptr_temp": 1,
                    "previous_previous_result_ptr": 1,
                    "previous_result_copy": 1,
                    "previous_result_pointer_previous": 1,
                    "previous_result_ptr": 2,
                    "previous_result_ptr2": 1,
                    "previous_result_ptr_old": 1,
                    "previous_result_ptr_previous_iteration": 1,
                    "previous_result_ptr_temp": 3,
                    "previous_result_temp": 2,
                    "previous_source": 1,
                    "previous_string_2": 1,
                    "previous_string_temp": 1,
                    "temp_ptr": 1
                },
                "uVar1": {
                    "byte_value": 1,
                    "byte_value_as_uint": 1,
                    "converted_limit": 1,
                    "current_byte_as_uint": 2,
                    "current_byte_converted": 1,
                    "current_char_as_index": 1,
                    "current_data_index": 1,
                    "current_offset": 1,
                    "current_value": 1,
                    "data_value": 1,
                    "index": 5,
                    "limit_check_uint": 1,
                    "limit_counter_uint": 1,
                    "limit_index": 1,
                    "limit_uint": 1,
                    "temp": 1,
                    "temp_value": 1
                }
            },
            "called": [
                "FUN_08002870",
                "FUN_08002afc"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid process_concatenation_results_08002ba8(void)\n\n{\n  uint index;\n  undefined *previous_result_ptr;\n  undefined *previous_result_ptr_temp;\n  undefined *previous_result;\n  undefined *current_result;\n  byte limit;\n  \n  previous_result = (undefined *)0x0;\n  current_result = (undefined *)0x0;\n  limit = DAT_20000cf1;\n  previous_result_ptr_temp = (undefined *)0x0;\n  while (previous_result_ptr = previous_result, limit != DAT_20000cf0) {\n    previous_result = current_result;\n    index = (uint)limit;\n    process_concatenation_result(previous_result_ptr,current_result,&DAT_20000870 + index * 0x40);\n    limit = increment_and_check_limit_08002870(limit);\n    previous_result_ptr_temp = previous_result_ptr;\n    current_result = &DAT_20000870 + index * 0x40;\n  }\n  process_concatenation_result(previous_result,current_result,0,previous_result,previous_result_ptr_temp);\n  return;\n}\n\n",
            "current_name": "process_concatenation_results_08002ba8",
            "entrypoint": "0x08002ba8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ba8": "process_concatenation_results_08002ba8",
                "increment_and_check_limit_08002870": "increment_and_check_limit",
                "local_10": "current_result",
                "local_14": "previous_result",
                "local_9": "limit",
                "process_concatenation_result_08002afc": "process_concatenation_result",
                "puVar2": "previous_result_ptr",
                "puVar3": "previous_result_ptr_temp",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c18": {
            "additional_data": {
                "FUN_08002c18": {
                    "calculate_and_store_values": 2,
                    "calculate_and_update_values": 1,
                    "calculate_final_values": 1,
                    "calculate_function": 1,
                    "calculate_parameter": 1,
                    "calculate_parameters": 6,
                    "calculate_result": 6,
                    "calculate_shift_and_sum": 2,
                    "calculate_shifted_and_summed_values": 1,
                    "calculate_shifted_float_values": 1,
                    "calculate_shifted_values": 5,
                    "calculate_values": 3,
                    "improve_calculation": 1
                },
                "calculate_final_result_080028bc": {
                    "calculate_final_result": 2
                },
                "calculate_final_result_08002908": {
                    "calculate_final_result2": 2
                },
                "calculate_float_value_08008eec": {
                    "calculate_float_value": 2
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 2
                },
                "calculate_parameter_value_08008ba0": {
                    "calculate_parameter_value": 2
                },
                "calculate_result_with_precision_08009318": {
                    "calculate_result_with_precision": 2
                },
                "calculate_result_with_precision_080094c0": {
                    "calculate_result_with_precision2": 2
                },
                "calculate_shifted_value_08008bf0": {
                    "calculate_shifted_value2": 2
                },
                "calculate_shifted_value_08008e3c": {
                    "calculate_shifted_value": 2
                },
                "count_bits_set_and_shift_08008e44": {
                    "count_bits_and_shift": 1,
                    "count_bits_set_and_shift": 1
                },
                "iVar2": {
                    "bit_count": 1,
                    "bit_set_count": 1,
                    "bit_set_value": 1,
                    "bits_set_value": 1,
                    "calculated_value": 1,
                    "calculated_value_1": 1,
                    "calculation_result": 2,
                    "count": 1,
                    "param_value": 1,
                    "parameter_value": 16,
                    "parameter_value_1": 2,
                    "result_1": 1,
                    "shifted_value2": 2
                },
                "local_1c": {
                    "calculation_2": 1,
                    "local_value": 1,
                    "local_variable_2": 1,
                    "min_value": 2,
                    "minimum_value": 2,
                    "param_1_value": 1,
                    "param_result1": 1,
                    "param_value": 1,
                    "param_value1": 1,
                    "param_value_shifted2": 1,
                    "parameter_value": 3,
                    "parameter_value1": 3,
                    "parameter_value2": 2,
                    "parameter_value_1": 4,
                    "parameter_value_2": 1,
                    "result4": 1,
                    "result_2": 1,
                    "result_2_difference": 1,
                    "result_value": 1,
                    "shifted_part_value": 1,
                    "temp_result": 1
                },
                "local_20": {
                    "calculation_1": 1,
                    "difference": 7,
                    "difference_1": 1,
                    "final_result": 7,
                    "local_variable_1": 1,
                    "result": 4,
                    "result1": 1,
                    "result3": 1,
                    "result_1": 1,
                    "result_1_difference": 1,
                    "result_difference": 4,
                    "updated_value": 2
                },
                "param_1": {
                    "data": 2,
                    "data_ptr": 1,
                    "data_struct": 1,
                    "function_data": 1,
                    "input": 2,
                    "input_data": 10,
                    "input_param": 1,
                    "input_parameter": 2,
                    "input_ptr": 2,
                    "input_value": 1,
                    "param": 2,
                    "parameter": 1,
                    "result_ptr": 1,
                    "result_structure": 1,
                    "value": 2,
                    "value_array": 1
                },
                "param_2": {
                    "float_param": 1,
                    "float_param1": 1,
                    "float_param_1": 5,
                    "float_parameter_1": 1,
                    "float_value1": 1,
                    "float_value_1": 1,
                    "param2": 3,
                    "param_2": 2,
                    "param_shift_1": 1,
                    "param_value_1": 1,
                    "precision_value": 1,
                    "shifted_value": 1,
                    "shifted_value_parameter_1": 1,
                    "value1": 8,
                    "value_1": 3
                },
                "param_3": {
                    "another_float_param": 1,
                    "float_param2": 1,
                    "float_param_2": 5,
                    "float_parameter_2": 1,
                    "float_value": 1,
                    "float_value2": 1,
                    "float_value_2": 1,
                    "param3": 3,
                    "param_3": 2,
                    "param_shift_2": 1,
                    "param_value_2": 1,
                    "shift_value": 1,
                    "shifted_value_parameter_2": 1,
                    "value2": 8,
                    "value_2": 3
                },
                "reverse_bits_and_shift_0800856c": {
                    "reverse_bits_and_shift2": 1
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 2
                },
                "uVar1": {
                    "shifted_value": 7,
                    "shifted_value1": 11,
                    "shifted_value_1": 13
                },
                "uVar3": {
                    "float_val_1": 1,
                    "shifted_float_1": 1,
                    "shifted_value1": 1,
                    "shifted_value2": 10,
                    "shifted_value3": 2,
                    "shifted_value_2": 16
                },
                "uVar4": {
                    "bit_count": 1,
                    "bit_count_shifted": 3,
                    "bit_set_count_2": 1,
                    "bits_set_and_shift": 5,
                    "bits_set_shift": 1,
                    "bits_set_shifted": 3,
                    "bits_set_shifted_value": 1,
                    "bits_set_shifted_value_1": 1,
                    "bits_set_value1": 1,
                    "bits_set_value_result": 1,
                    "bits_shifted": 1,
                    "count_bits_set": 1,
                    "shifted_float_2": 1,
                    "shifted_value3": 4,
                    "shifted_value4": 2,
                    "shifted_value_3": 4
                },
                "uVar5": {
                    "bit_count_for_value1": 1,
                    "bit_count_neg": 1,
                    "bit_count_shifted2": 1,
                    "bit_count_shifted_neg": 1,
                    "bit_set_count_3": 1,
                    "bits_set_and_shift2": 2,
                    "bits_set_and_shift_2": 2,
                    "bits_set_and_shift_temp": 1,
                    "bits_set_shift2": 1,
                    "bits_set_shifted_2": 3,
                    "bits_set_shifted_value1": 1,
                    "bits_set_shifted_value_2": 1,
                    "bits_set_value2": 1,
                    "bits_set_value_result_2": 1,
                    "bits_shifted_neg": 1,
                    "count_bits_set_2": 1,
                    "shifted_float_3": 1,
                    "shifted_value4": 4,
                    "shifted_value5": 2,
                    "shifted_value_4": 4
                },
                "uVar6": {
                    "bit_count": 1,
                    "param_value_shifted": 1,
                    "parameter_value": 4,
                    "parameter_value1": 2,
                    "parameter_value2": 3,
                    "parameter_value_masked": 1,
                    "parameter_value_temp": 1,
                    "result": 3,
                    "result1": 2,
                    "result_1": 2,
                    "result_2": 1,
                    "result_precision": 1,
                    "result_shift": 1,
                    "result_shifted": 1,
                    "result_value": 3,
                    "shifted_value6": 1,
                    "temp_value": 2,
                    "unsigned_value": 1
                },
                "uVar7": {
                    "float_result": 1,
                    "result": 8,
                    "result2": 2,
                    "result_2": 2,
                    "result_precision": 1,
                    "result_value": 2,
                    "result_with_precision": 2,
                    "reversed_and_shifted": 1,
                    "reversed_and_shifted_value": 1,
                    "reversed_shifted_result": 1,
                    "reversed_shifted_value": 6,
                    "reversed_value": 2,
                    "shifted_and_reversed": 1,
                    "shifted_result": 1
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_08009318",
                "FUN_08002908",
                "FUN_080094c0",
                "FUN_08008e44",
                "FUN_08008e3c",
                "FUN_08008bf0",
                "FUN_08008ba0",
                "FUN_080028bc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_0800856c"
            ],
            "calling": [
                "FUN_08002e08"
            ],
            "code": "\nvoid calculate_shifted_and_summed_values_08002c18(int input_data,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 shifted_value_1;\n  int parameter_value;\n  undefined4 shifted_value_2;\n  undefined4 bits_set_and_shift;\n  undefined4 shifted_value_4;\n  uint parameter_value;\n  undefined8 result;\n  int difference;\n  uint parameter_value_1;\n  \n  shifted_value_1 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  shifted_value_1 = calculate_float_value_08008eec(shifted_value_1,value1);\n  result = reverse_bits_and_shift_08008590(shifted_value_1);\n  result = calculate_result_with_precision((int)result,(int)((ulonglong)result >> 0x20));\n  shifted_value_1 = calculate_shifted_value_08008bf0((int)result,(int)((ulonglong)result >> 0x20));\n  *(undefined4 *)(input_data + 0x28) = shifted_value_1;\n  shifted_value_1 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  shifted_value_1 = calculate_float_value_08008eec(shifted_value_1,value2);\n  result = reverse_bits_and_shift_08008590(shifted_value_1);\n  result = calculate_result_with_precision((int)result,(int)((ulonglong)result >> 0x20));\n  shifted_value_1 = calculate_shifted_value_08008bf0((int)result,(int)((ulonglong)result >> 0x20));\n  *(undefined4 *)(input_data + 0x2c) = shifted_value_1;\n  result = reverse_bits_and_shift_0800856c(*(int *)(input_data + 0x30) * 0x32);\n  result = calculate_improved_result((int)result,(int)((ulonglong)result >> 0x20),0,0x404e0000);\n  parameter_value = calculate_parameter_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n  shifted_value_1 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x28));\n  shifted_value_2 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  bits_set_and_shift = count_bits_set_and_shift_08008e44(parameter_value);\n  shifted_value_1 = calculate_final_result(shifted_value_1,shifted_value_2,bits_set_and_shift);\n  result = reverse_bits_and_shift_08008590(shifted_value_1);\n  result = calculate_result_with_precision((int)result,(int)((ulonglong)result >> 0x20));\n  parameter_value_1 = calculate_parameter_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n  shifted_value_1 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x3c));\n  shifted_value_2 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x2c));\n  bits_set_and_shift = count_bits_set_and_shift_08008e44(-parameter_value);\n  shifted_value_1 = calculate_final_result(shifted_value_1,shifted_value_2,bits_set_and_shift);\n  result = reverse_bits_and_shift_08008590(shifted_value_1);\n  result = calculate_result_with_precision2((int)result,(int)((ulonglong)result >> 0x20));\n  difference = calculate_parameter_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n  difference = (*(int *)(input_data + 0x10) - parameter_value_1) - difference;\n  if (difference < 0) {\n    shifted_value_1 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x28));\n    shifted_value_2 = calculate_shifted_value_08008e3c(*(undefined4 *)(input_data + 0x2c));\n    bits_set_and_shift = count_bits_set_and_shift_08008e44(parameter_value);\n    shifted_value_4 = count_bits_set_and_shift_08008e44(*(undefined4 *)(input_data + 0x10));\n    shifted_value_1 = calculate_final_result2(shifted_value_1,shifted_value_2,bits_set_and_shift,shifted_value_4);\n    result = reverse_bits_and_shift_08008590(shifted_value_1);\n    result = calculate_result_with_precision((int)result,(int)((ulonglong)result >> 0x20));\n    parameter_value = calculate_parameter_value_08008ba0((int)result,(int)((ulonglong)result >> 0x20));\n    parameter_value = parameter_value & ~((int)parameter_value >> 0x1f);\n    parameter_value_1 = *(uint *)(input_data + 0x10);\n    if ((int)parameter_value <= (int)*(uint *)(input_data + 0x10)) {\n      parameter_value_1 = parameter_value;\n    }\n    difference = 0;\n  }\n  *(uint *)(input_data + 0x34) = parameter_value_1;\n  *(uint *)(input_data + 0x38) = difference + parameter_value_1;\n  return;\n}\n\n",
            "current_name": "calculate_shifted_and_summed_values_08002c18",
            "entrypoint": "0x08002c18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c18": "calculate_shifted_and_summed_values_08002c18",
                "calculate_final_result_080028bc": "calculate_final_result",
                "calculate_final_result_08002908": "calculate_final_result2",
                "calculate_float_value_08008eec": "calculate_float_value",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "calculate_parameter_value_08008ba0": "calculate_parameter_value",
                "calculate_result_with_precision_08009318": "calculate_result_with_precision",
                "calculate_result_with_precision_080094c0": "calculate_result_with_precision2",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value2",
                "calculate_shifted_value_08008e3c": "calculate_shifted_value",
                "count_bits_set_and_shift_08008e44": "count_bits_and_shift",
                "iVar2": "parameter_value",
                "local_1c": "parameter_value_1",
                "local_20": "difference",
                "param_1": "input_data",
                "param_2": "value1",
                "param_3": "value2",
                "reverse_bits_and_shift_0800856c": "reverse_bits_and_shift2",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "uVar1": "shifted_value_1",
                "uVar3": "shifted_value_2",
                "uVar4": "bits_set_and_shift",
                "uVar5": "shifted_value_4",
                "uVar6": "parameter_value",
                "uVar7": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002e08": {
            "additional_data": {
                "FUN_08002e08": {
                    "calculate_and_sum_floating_point_values": 1,
                    "calculate_and_sum_shifted_values": 6,
                    "calculate_and_sum_values": 3,
                    "calculate_shifted_and_summed_values": 16,
                    "calculate_sum_of_shifted_values": 1,
                    "calculate_summed_values": 1,
                    "process_data": 2,
                    "sum_and_shift_values": 1
                },
                "calculate_floating_point_value_08009054": {
                    "calculate_float_value": 3
                },
                "calculate_shifted_and_summed_values_08002c18": {
                    "calculate_shift_and_sum": 1,
                    "shift_and_sum_values": 1,
                    "sum_shifted_values": 1
                },
                "iVar3": {
                    "array_index": 1,
                    "current_index": 2,
                    "data_offset": 1,
                    "element_offset": 1,
                    "entry_shift": 1,
                    "index": 16,
                    "offset": 5,
                    "shifted_index": 2
                },
                "increment_and_check_limit_08002870": {
                    "increment_and_check_limit": 3
                },
                "local_11": {
                    "byte_limit": 1,
                    "byte_value": 4,
                    "counter": 4,
                    "current_byte": 8,
                    "current_index": 5,
                    "index": 3,
                    "input_byte": 1,
                    "limit": 2,
                    "loop_counter": 2,
                    "loop_index": 1
                },
                "local_18": {
                    "current_data": 13,
                    "current_element": 1,
                    "current_entry": 3,
                    "current_record": 1,
                    "current_value": 2,
                    "current_values": 1,
                    "data_pointer": 2,
                    "data_ptr": 4,
                    "input_data": 1,
                    "ptr": 1,
                    "ptr_current_data": 1,
                    "ptr_data": 1
                },
                "uVar1": {
                    "float_val1": 1,
                    "float_value1": 1,
                    "float_value_1": 3,
                    "floating_point_value1": 2,
                    "floating_point_value_1": 1,
                    "fp_value1": 1,
                    "fp_value_1": 1,
                    "fp_value_current": 1,
                    "result1": 3,
                    "value1": 11,
                    "value_1": 4
                },
                "uVar2": {
                    "float_val2": 1,
                    "float_value2": 1,
                    "float_value_2": 3,
                    "floating_point_value2": 2,
                    "floating_point_value_2": 1,
                    "fp_value2": 1,
                    "fp_value_2": 1,
                    "fp_value_constant": 1,
                    "result2": 3,
                    "value2": 11,
                    "value_2": 4
                }
            },
            "called": [
                "FUN_08002870",
                "FUN_08009054",
                "FUN_08002c18"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid calculate_shifted_and_summed_values_08002e08(void)\n\n{\n  undefined4 value1;\n  undefined4 value2;\n  int index;\n  undefined *current_data;\n  byte current_byte;\n  \n  current_data = (undefined *)0x0;\n  current_byte = DAT_20000cf1;\n  while (current_byte != DAT_20000cf0) {\n    index = (uint)current_byte * 0x40;\n    if ((current_data != (undefined *)0x0) &&\n       ((current_data[0x24] != '\\0' || ((&DAT_20000894)[index] != '\\0')))) {\n      value1 = calculate_floating_point_value_08009054(*(undefined4 *)(current_data + 0x18),*(undefined4 *)(current_data + 0x14));\n      value2 = calculate_floating_point_value_08009054(*(undefined4 *)(&DAT_20000888 + index),*(undefined4 *)(current_data + 0x14));\n      sum_shifted_values(current_data,value1,value2);\n      current_data[0x24] = 0;\n    }\n    current_byte = increment_and_check_limit_08002870(current_byte);\n    current_data = &DAT_20000870 + index;\n  }\n  value1 = calculate_floating_point_value_08009054(*(undefined4 *)(current_data + 0x18),*(undefined4 *)(current_data + 0x14));\n  value2 = calculate_floating_point_value_08009054(0,*(undefined4 *)(current_data + 0x14));\n  sum_shifted_values(current_data,value1,value2);\n  current_data[0x24] = 0;\n  return;\n}\n\n",
            "current_name": "calculate_shifted_and_summed_values_08002e08",
            "entrypoint": "0x08002e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002e08": "calculate_shifted_and_summed_values_08002e08",
                "calculate_floating_point_value_08009054": "calculate_float_value",
                "calculate_shifted_and_summed_values_08002c18": "sum_shifted_values",
                "iVar3": "index",
                "increment_and_check_limit_08002870": "increment_and_check_limit",
                "local_11": "current_byte",
                "local_18": "current_data",
                "uVar1": "value1",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002edc": {
            "additional_data": {
                "FUN_08002edc": {
                    "execute_concatenation_operations": 1,
                    "perform_concatenation_and_calculation": 1,
                    "perform_data_processing": 1,
                    "process_and_calculate": 1,
                    "process_and_calculate_results": 2,
                    "process_and_calculate_values": 2,
                    "process_combined_data": 1,
                    "process_complete_calculation": 1,
                    "process_concatenation": 2,
                    "process_concatenation_and_calculation": 4,
                    "process_concatenation_loop_results": 1,
                    "process_concatenation_results": 3,
                    "process_concatenation_results_and_values": 1,
                    "process_data": 8,
                    "process_result_concatenation": 1,
                    "process_results": 1
                },
                "calculate_shifted_and_summed_values_08002e08": {
                    "calculate_shifted_and_sum": 1,
                    "calculate_shifted_and_summed_values": 10,
                    "calculate_shifted_sum": 6,
                    "calculate_summed_values": 1,
                    "compute_shifted_and_summed_values": 3,
                    "shift_and_sum_data_values": 1,
                    "shift_and_sum_values": 7,
                    "shifted_and_summed_values": 2
                },
                "process_concatenation_loop_08002a94": {
                    "concatenate_data": 5,
                    "concatenate_data_elements": 1,
                    "concatenate_results_in_loop": 1,
                    "concatenate_strings": 2,
                    "concatenate_values": 5,
                    "concatenation_loop": 6,
                    "loop_and_concatenate": 1,
                    "loop_through_concatenation": 2,
                    "perform_concatenation": 2,
                    "perform_concatenation_loop": 2,
                    "process_concatenation_loop": 4
                },
                "process_concatenation_results_08002ba8": {
                    "analyze_concatenation_results": 2,
                    "concatenation_results": 6,
                    "handle_concatenation_results": 1,
                    "process_concatenated_data": 3,
                    "process_concatenated_results": 2,
                    "process_concatenation_results": 13,
                    "process_result": 1,
                    "process_results": 1
                }
            },
            "called": [
                "FUN_08002e08",
                "FUN_08002a94",
                "FUN_08002ba8"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08003618"
            ],
            "code": "\nvoid process_combined_data_08002edc(void)\n\n{\n  concatenation_loop();\n  process_concatenation_results();\n  calculate_shifted_and_summed_values();\n  return;\n}\n\n",
            "current_name": "process_combined_data_08002edc",
            "entrypoint": "0x08002edc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002edc": "process_combined_data_08002edc",
                "calculate_shifted_and_summed_values_08002e08": "calculate_shifted_and_summed_values",
                "process_concatenation_loop_08002a94": "concatenation_loop",
                "process_concatenation_results_08002ba8": "process_concatenation_results"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "additional_data": {
                "DAT_20000cf0": {
                    "current_value": 2,
                    "original_data": 3,
                    "previous_value": 1
                },
                "DAT_20000cf1": {
                    "current_value": 1,
                    "previous_data": 1,
                    "previous_value": 2,
                    "updated_data": 4
                },
                "DAT_20000cf2": {
                    "is_limit_reached": 1,
                    "limit_check_result": 1,
                    "limit_checked_result": 1,
                    "limit_reached": 1,
                    "limit_result": 1,
                    "new_data": 1,
                    "new_value": 2
                },
                "FUN_08002ef0": {
                    "initialize_data": 8,
                    "set_and_increment_limit": 1,
                    "set_limit": 1,
                    "update_and_check_limit": 2,
                    "update_data": 8,
                    "update_data_and_check_limit": 8,
                    "update_limit": 2,
                    "update_limit_value": 1
                },
                "increment_and_check_limit_08002870": {
                    "check_and_increment_limit": 2,
                    "check_and_update_limit": 3,
                    "check_limit": 5,
                    "check_limit_and_increment": 1,
                    "check_limit_increment": 1,
                    "increase_and_validate_limit": 1,
                    "increment_and_check": 1,
                    "increment_and_check_limit": 9,
                    "update_and_check_limit": 1
                },
                "increment_and_check_limit_08002871": {
                    "increment_and_check_limit_1": 1
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_08002f24"
            ],
            "code": "\nvoid update_data_and_check_limit_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = increment_and_check_limit_08002870(DAT_20000cf0);\n  return;\n}\n\n",
            "current_name": "update_data_and_check_limit_08002ef0",
            "entrypoint": "0x08002ef0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ef0": "update_data_and_check_limit_08002ef0",
                "increment_and_check_limit_08002870": "increment_and_check_limit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f24": {
            "additional_data": {
                "DAT_20000cf4": {
                    "data_array": 1,
                    "data_block": 1,
                    "data_buffer": 2,
                    "data_structure": 1
                },
                "FUN_08002f24": {
                    "clear_and_update_data": 1,
                    "clear_data_and_update_limit": 1,
                    "initialize_and_clear_data": 2,
                    "initialize_data": 26,
                    "update_and_clear_data": 1
                },
                "memset_with_value_0800b430": {
                    "clear_memory": 17,
                    "clear_memory_with_value": 3,
                    "clear_memory_with_value_0800b430": 1,
                    "fill_buffer_with_value": 1,
                    "initialize_memory": 4,
                    "initialize_memory_with_value": 1,
                    "set_memory": 1
                },
                "update_data_and_check_limit_08002ef0": {
                    "update_and_check_data_limit": 2,
                    "update_and_check_limit": 6,
                    "update_data_and_check_limit": 23
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08002ef0"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_clear_data_08002f24(void)\n\n{\n  update_data_and_check_limit();\n  memset_with_value_0800b430(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "current_name": "initialize_and_clear_data_08002f24",
            "entrypoint": "0x08002f24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f24": "initialize_and_clear_data_08002f24",
                "memset_with_value_0800b430": "clear_memory",
                "update_data_and_check_limit_08002ef0": "update_data_and_check_limit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f40": {
            "additional_data": {
                "DAT_20000cf0": {
                    "current_data": 1,
                    "current_limit": 1,
                    "current_value": 2,
                    "data_value1": 1,
                    "previous_dat_variable": 1
                },
                "DAT_20000cf1": {
                    "counter_value": 1,
                    "current_limit": 8,
                    "current_limit_value": 1,
                    "current_value": 6,
                    "dat_variable": 1,
                    "data_1": 1,
                    "data_value2": 1,
                    "updated_dat_value": 1,
                    "updated_dat_variable": 1,
                    "updated_data": 1,
                    "updated_limit": 1,
                    "updated_value": 3
                },
                "FUN_08002f40": {
                    "check_and_increment": 1,
                    "check_and_increment_limit": 2,
                    "increment_and_check_limit": 1,
                    "increment_data_if_not_equal": 1,
                    "update_counter_if_limit_reached": 1,
                    "update_counter_if_not_equal": 1,
                    "update_dat_value_if_not_equal": 1,
                    "update_dat_variable_if_not_equal": 2,
                    "update_data_if_changed": 3,
                    "update_data_if_needed": 1,
                    "update_data_if_not_equal": 2,
                    "update_if_different": 2,
                    "update_if_limit_changed": 1,
                    "update_if_not_equal": 4,
                    "update_limit": 1,
                    "update_limit_if_mismatch": 1,
                    "update_limit_if_needed": 1,
                    "update_limit_if_not_equal": 2,
                    "update_limit_value": 1,
                    "update_value_if_changed": 1,
                    "update_value_if_not_equal": 1
                },
                "increment_and_check_limit_08002870": {
                    "check_and_increment_limit": 2,
                    "check_and_update_limit": 1,
                    "check_limit": 1,
                    "get_updated_limit": 1,
                    "increment_and_check_limit": 16,
                    "increment_and_validate_limit": 2
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nvoid update_limit_if_not_equal_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = increment_and_check_limit_08002870(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "current_name": "update_limit_if_not_equal_08002f40",
            "entrypoint": "0x08002f40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f40": "update_limit_if_not_equal_08002f40",
                "increment_and_check_limit_08002870": "increment_and_check_limit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f74": {
            "additional_data": {
                "DAT_20000cf0": {
                    "current_data_block_index": 1,
                    "data_block_start": 2,
                    "data_length": 1,
                    "data_start": 1,
                    "input_value_1": 1,
                    "start_data_block_index": 1,
                    "start_index": 4
                },
                "DAT_20000cf1": {
                    "current_data_block_index": 1,
                    "current_index": 1,
                    "data_block_index": 2,
                    "data_index": 1,
                    "end_index": 4,
                    "input_value_2": 1,
                    "total_data_blocks": 1
                },
                "FUN_08002f74": {
                    "get_active_segment": 1,
                    "get_available_memory": 1,
                    "get_current_block": 1,
                    "get_current_data": 1,
                    "get_current_data_block": 6,
                    "get_current_data_ptr": 3,
                    "get_current_entry_address": 1,
                    "get_data_address": 1,
                    "get_data_buffer_pointer": 1,
                    "get_data_from_pointer": 1,
                    "get_data_pointer": 6,
                    "get_data_ptr": 2,
                    "get_last_element_address": 1,
                    "get_next_data_address": 1,
                    "get_next_data_block": 2,
                    "get_valid_pointer": 1,
                    "retrieve_data": 1
                },
                "puVar1": {
                    "active_segment_ptr": 1,
                    "current_block_pointer": 2,
                    "current_data_block": 3,
                    "current_data_block_ptr": 2,
                    "current_data_pointer": 1,
                    "current_data_ptr": 1,
                    "current_entry_address": 1,
                    "current_ptr": 1,
                    "data_address": 1,
                    "data_buffer_pointer": 1,
                    "data_pointer": 6,
                    "data_ptr": 2,
                    "last_element_address": 1,
                    "memory_location": 1,
                    "next_data_address": 1,
                    "next_data_block": 1,
                    "next_data_block_ptr": 1,
                    "result": 1,
                    "result_ptr": 1,
                    "valid_pointer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "code": "\nundefined * get_current_data_block_08002f74(void)\n\n{\n  undefined *data_pointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    data_pointer = (undefined *)0x0;\n  }\n  else {\n    data_pointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return data_pointer;\n}\n\n",
            "current_name": "get_current_data_block_08002f74",
            "entrypoint": "0x08002f74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f74": "get_current_data_block_08002f74",
                "puVar1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fac": {
            "additional_data": {
                "DAT_20000cf1": {
                    "data1": 13,
                    "data_value1": 2,
                    "first_data": 3,
                    "first_value": 1,
                    "first_variable": 1,
                    "input_value1": 1,
                    "value1": 4,
                    "variable1": 2
                },
                "DAT_20000cf2": {
                    "data2": 13,
                    "data_value2": 2,
                    "input_value2": 1,
                    "second_data": 3,
                    "second_value": 1,
                    "second_variable": 1,
                    "value2": 4,
                    "variable2": 2
                },
                "FUN_08002fac": {
                    "are_both_data_equal": 1,
                    "are_data_equal": 8,
                    "are_data_values_equal": 1,
                    "are_datas_equal": 1,
                    "are_equal": 1,
                    "are_pointers_equal": 1,
                    "are_variables_equal": 2,
                    "check_data_equality": 2,
                    "check_equality": 3,
                    "check_if_data_equal": 2,
                    "check_if_equal": 2,
                    "check_variable_equality": 1,
                    "compare_data": 3,
                    "compare_data_equality": 1,
                    "compare_data_values": 1,
                    "compare_values": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nbool are_data_values_equal_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "current_name": "are_data_values_equal_08002fac",
            "entrypoint": "0x08002fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fac": "are_data_values_equal_08002fac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "additional_data": {
                "DAT_20000ea8": {
                    "device_data_completed": 1,
                    "device_data_status": 1,
                    "device_processing_finished": 1,
                    "end_flag": 2,
                    "exit_condition": 1,
                    "exit_flag": 3,
                    "should_exit": 2,
                    "should_stop_processing": 1,
                    "stop_condition": 1,
                    "stop_processing": 2,
                    "terminate_flag": 1
                },
                "DAT_20000ea9": {
                    "continue_condition": 1,
                    "current_state": 1,
                    "data_block_flag": 1,
                    "data_block_status": 3,
                    "data_condition": 1,
                    "device_state": 1,
                    "device_status": 2,
                    "end_condition": 1,
                    "end_of_data": 1,
                    "exit_condition": 1,
                    "flag": 2,
                    "is_data_block_zero": 1,
                    "status_condition": 1,
                    "termination_flag": 1
                },
                "FUN_08002fd4": {
                    "process_current_data_block": 1,
                    "process_data_blocks": 17,
                    "process_device_blocks": 1,
                    "process_device_data": 2,
                    "process_device_data_loop": 10
                },
                "get_current_data_block_08002f74": {
                    "get_current_data_block": 22,
                    "get_next_data_block": 2
                },
                "iVar1": {
                    "current_data_block": 20,
                    "data_block": 4,
                    "data_block_index": 3
                },
                "process_device_data_08003a74": {
                    "process_device_data": 28
                }
            },
            "called": [
                "FUN_08003a74",
                "FUN_08002f74"
            ],
            "calling": [
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_080024c4",
                "FUN_0800525c",
                "FUN_08000220"
            ],
            "code": "\nvoid process_data_blocks_08002fd4(void)\n\n{\n  int current_data_block;\n  \n  while ((current_data_block = get_current_data_block_08002f74(), current_data_block != 0 || (DAT_20000ea9 == '\\x03'))) {\n    process_device_data();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_data_blocks_08002fd4",
            "entrypoint": "0x08002fd4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fd4": "process_data_blocks_08002fd4",
                "get_current_data_block_08002f74": "get_current_data_block",
                "iVar1": "current_data_block",
                "process_device_data_08003a74": "process_device_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003004": {
            "additional_data": {
                "DAT_20000870": {
                    "data_array": 1
                },
                "DAT_20000874": {
                    "diff_array1": 1
                },
                "DAT_20000878": {
                    "diff_array2": 1
                },
                "DAT_2000087c": {
                    "diff_array3": 1
                },
                "DAT_20000880": {
                    "min_diff_array": 1
                },
                "DAT_20000884": {
                    "concat_string_result": 1
                },
                "DAT_20000888": {
                    "concat_result_final": 1
                },
                "DAT_2000088c": {
                    "local_result": 1
                },
                "DAT_20000890": {
                    "calc_result": 1
                },
                "DAT_20000894": {
                    "flag_array": 1
                },
                "DAT_20000895": {
                    "concat_flag": 1
                },
                "DAT_20000cf0": {
                    "array_size": 1,
                    "limit": 1
                },
                "DAT_20000cf1": {
                    "limit2": 1
                },
                "DAT_20000cf2": {
                    "limit": 1,
                    "new_limit": 1
                },
                "DAT_20000cf4": {
                    "result_1": 1,
                    "threshold1": 1
                },
                "DAT_20000cf8": {
                    "result_2": 1,
                    "threshold2": 1
                },
                "DAT_20000cfc": {
                    "result_3": 1,
                    "threshold3": 1
                },
                "DAT_20000d00": {
                    "float_value_10": 1,
                    "prev_value1": 1
                },
                "DAT_20000d04": {
                    "float_value_11": 1,
                    "prev_value2": 1
                },
                "DAT_20000d08": {
                    "float_value_12": 1,
                    "prev_value3": 1
                },
                "DAT_20000d0c": {
                    "concat_string": 1,
                    "concatenated_string2": 1
                },
                "DAT_20000ebc": {
                    "const1": 1,
                    "floating_param_1": 1
                },
                "DAT_20000ec0": {
                    "const2": 1,
                    "floating_param_2": 1
                },
                "DAT_20000ec4": {
                    "const3": 1,
                    "floating_param_3": 1
                },
                "DAT_20000edc": {
                    "const4": 1,
                    "floating_param_4": 1
                },
                "DAT_20000ee0": {
                    "const5": 1,
                    "floating_param_5": 1
                },
                "FUN_08003004": {
                    "calculate_combined_data": 1,
                    "calculate_data": 2,
                    "calculate_data_processing": 1,
                    "calculate_improved_result": 1,
                    "calculate_result": 2,
                    "improved_process_data": 4,
                    "process_data": 20
                },
                "iVar10": {
                    "array_index": 1,
                    "base_pointer": 1,
                    "index": 17,
                    "offset": 7
                },
                "iVar12": {
                    "abs_diff": 11,
                    "abs_difference": 2,
                    "abs_offset": 1,
                    "abs_value": 2,
                    "absolute_diff": 2,
                    "absolute_difference": 3,
                    "absolute_value": 2,
                    "diff": 1,
                    "diff_result": 1,
                    "difference": 1,
                    "difference3": 1,
                    "res_check": 1,
                    "string_check": 1,
                    "temp_result": 2
                },
                "iVar2": {
                    "parameter_result_1": 1,
                    "result1": 15,
                    "result_1": 15
                },
                "iVar3": {
                    "parameter_result_2": 1,
                    "result2": 14,
                    "result_2": 15
                },
                "iVar4": {
                    "parameter_result_3": 1,
                    "result3": 14,
                    "result_3": 15
                },
                "local_1c": {
                    "calculated_float": 1,
                    "calculation_result": 1,
                    "combined_string": 1,
                    "condition2": 1,
                    "final_result2": 1,
                    "float_8": 1,
                    "float_param": 1,
                    "float_result_6": 1,
                    "float_val_7": 1,
                    "float_val_temp": 1,
                    "float_value": 2,
                    "float_value2": 1,
                    "float_value4": 1,
                    "float_value_2": 1,
                    "float_value_param_4": 1,
                    "floating_param": 1,
                    "local_var2": 1,
                    "output_result": 1,
                    "result_4": 1,
                    "result_check": 1,
                    "result_variable2": 1,
                    "selected_value": 1,
                    "string2": 2,
                    "string_2": 1,
                    "string_value2": 1,
                    "temp_var2": 1
                },
                "local_20": {
                    "calculated_string": 1,
                    "combined_string": 2,
                    "concat_result": 1,
                    "concat_string": 1,
                    "concatenated_string": 5,
                    "condition1": 1,
                    "empty_string_check1": 1,
                    "final_result1": 1,
                    "local_var1": 1,
                    "optimal_value": 1,
                    "processed_data": 3,
                    "result_string": 1,
                    "result_variable1": 1,
                    "selected_string": 1,
                    "string1": 2,
                    "string_1": 1,
                    "string_empty": 1,
                    "string_length": 1,
                    "string_ptr": 1,
                    "string_value": 2,
                    "string_value1": 1,
                    "temp_var1": 1
                },
                "param_1": {
                    "input1": 3,
                    "input_1": 6,
                    "input_param1": 3,
                    "input_value1": 2,
                    "input_value_1": 2,
                    "param1": 2,
                    "param_1": 1,
                    "param_float1": 1,
                    "parameter_1": 1,
                    "value1": 3,
                    "value_1": 6
                },
                "param_2": {
                    "input2": 3,
                    "input_2": 6,
                    "input_param2": 3,
                    "input_value2": 2,
                    "input_value_2": 2,
                    "param2": 2,
                    "param_2": 1,
                    "param_float2": 1,
                    "parameter_2": 1,
                    "value2": 3,
                    "value_2": 6
                },
                "param_3": {
                    "input3": 3,
                    "input_3": 6,
                    "input_param3": 3,
                    "input_value3": 2,
                    "input_value_3": 2,
                    "param3": 2,
                    "param_3": 1,
                    "param_float3": 1,
                    "parameter_3": 1,
                    "value3": 3,
                    "value_3": 6
                },
                "param_4": {
                    "additional_input": 1,
                    "input4": 3,
                    "input_4": 5,
                    "input_param4": 3,
                    "input_value4": 1,
                    "input_value_4": 2,
                    "param4": 3,
                    "param_4": 1,
                    "param_float4": 1,
                    "parameter_4": 1,
                    "value4": 3,
                    "value_4": 6
                },
                "param_5": {
                    "flag": 25,
                    "is_flag_set": 2,
                    "param5": 2,
                    "param_5": 1
                },
                "puVar11": {
                    "data_array": 1,
                    "data_pointer": 3,
                    "data_ptr": 5,
                    "output": 1,
                    "pointer": 8,
                    "pointer1": 1,
                    "ptr": 1,
                    "ptr_arr": 1,
                    "ptr_data": 5,
                    "ptr_values": 1,
                    "result_array": 2,
                    "ushort_ptr": 2
                },
                "uVar1": {
                    "calculated_value1": 1,
                    "float_1": 2,
                    "float_result_1": 1,
                    "float_val1": 2,
                    "float_val_1": 2,
                    "float_value1": 10,
                    "float_value_1": 10,
                    "value1": 2,
                    "value_1": 1
                },
                "uVar13": {
                    "combined_result": 1,
                    "max_abs_diff": 1,
                    "max_diff": 2,
                    "max_difference": 2,
                    "max_result": 4,
                    "max_value": 6,
                    "max_value2": 1,
                    "max_value_2": 1,
                    "maximum_value": 1,
                    "min_value": 9,
                    "temp_value": 2,
                    "value_3": 1
                },
                "uVar14": {
                    "combined_string_result": 1,
                    "float_result": 1,
                    "float_val_4": 1,
                    "processed_data": 1,
                    "processed_result": 1,
                    "processed_result1": 1,
                    "processed_value": 1,
                    "processed_value1": 2,
                    "processed_value2": 1,
                    "result_value": 1,
                    "rev_and_shifted_value1": 1,
                    "reverse_bits_and_shift_value": 1,
                    "reverse_result": 1,
                    "reverse_shifted": 1,
                    "reverse_value": 1,
                    "reversed_float": 1,
                    "reversed_float_value": 1,
                    "reversed_float_value1": 2,
                    "reversed_result": 2,
                    "reversed_result_1": 1,
                    "reversed_shifted_value1": 1,
                    "reversed_value": 5,
                    "reversed_value1": 1,
                    "shifted_result": 1
                },
                "uVar15": {
                    "calc_value1": 2,
                    "calculated_value_1": 1,
                    "concatenation_result": 1,
                    "float_6": 1,
                    "float_result1": 1,
                    "float_val_5": 1,
                    "float_value_8": 1,
                    "floating_point_value1": 1,
                    "improved_result1": 1,
                    "intermediate_value_1": 1,
                    "processed_data_2": 1,
                    "processed_result2": 1,
                    "processed_result_1": 1,
                    "processed_value1": 1,
                    "processed_value2": 1,
                    "result_1": 1,
                    "result_value1": 1,
                    "reversed_float_value2": 1,
                    "reversed_result_2": 1,
                    "shifted_value_1": 1,
                    "temp_float_val3": 1,
                    "temp_val_1": 1,
                    "temp_value_1": 1
                },
                "uVar16": {
                    "calc_value2": 2,
                    "calculated_value_2": 1,
                    "float_7": 1,
                    "float_result2": 1,
                    "float_val_6": 1,
                    "float_value_9": 1,
                    "floating_point_value2": 1,
                    "improved_result2": 1,
                    "intermediate_value_2": 1,
                    "processed_data_3": 1,
                    "processed_result_2": 1,
                    "processed_value2": 1,
                    "processed_value3": 1,
                    "result_2": 1,
                    "result_value2": 1,
                    "reversed_float_value3": 1,
                    "reversed_result_3": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "shifted_value_2": 1,
                    "temp_float_val4": 1,
                    "temp_val_2": 1,
                    "temp_value_2": 1
                },
                "uVar5": {
                    "calculated_value2": 1,
                    "count1": 1,
                    "float_2": 2,
                    "float_result_2": 1,
                    "float_val2": 2,
                    "float_val_2": 2,
                    "float_value2": 7,
                    "float_value_2": 9,
                    "shifted_result_1": 1,
                    "value2": 2,
                    "value_2": 1
                },
                "uVar6": {
                    "calculated_value3": 1,
                    "count2": 1,
                    "float_3": 2,
                    "float_result_3": 1,
                    "float_val3": 2,
                    "float_val_3": 2,
                    "float_value3": 6,
                    "float_value_3": 9,
                    "rev_and_shifted_value2": 1,
                    "shifted_result_2": 1,
                    "value3": 2,
                    "value_3": 1
                },
                "uVar7": {
                    "calc_result_1": 1,
                    "calculation_result1": 1,
                    "combined_value": 1,
                    "combined_value1": 1,
                    "count3": 1,
                    "float_4": 1,
                    "float_result_1": 1,
                    "float_result_4": 1,
                    "float_sum": 1,
                    "float_val4": 1,
                    "float_value2": 1,
                    "float_value3": 1,
                    "float_value4": 3,
                    "float_value_4": 7,
                    "intermediate_result_1": 1,
                    "result": 1,
                    "result_value": 1,
                    "result_with_precision": 1,
                    "temp_float_val1": 1,
                    "temp_result": 1,
                    "value4": 1,
                    "value_4": 1
                },
                "uVar8": {
                    "calc_result_2": 1,
                    "calculation_result2": 1,
                    "combined_value2": 1,
                    "float_5": 1,
                    "float_result_2": 1,
                    "float_result_5": 1,
                    "float_val5": 1,
                    "float_val_4": 1,
                    "float_value2": 1,
                    "float_value3": 1,
                    "float_value4": 1,
                    "float_value5": 4,
                    "float_value_4": 1,
                    "float_value_5": 7,
                    "intermediate_result_2": 1,
                    "shifted_value": 1,
                    "temp_float_val2": 1,
                    "temp_value": 1,
                    "value5": 1,
                    "value_1": 1,
                    "value_5": 1
                },
                "uVar9": {
                    "max_result": 2,
                    "max_value": 14,
                    "max_value1": 1,
                    "min_result": 4,
                    "min_value": 7,
                    "minimum_value": 1,
                    "temp": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_080082d0",
                "FUN_08009318",
                "FUN_08008894",
                "FUN_08008b24",
                "FUN_080098d0",
                "FUN_08008bf0",
                "FUN_08009250",
                "FUN_080095b8",
                "FUN_08002870",
                "FUN_08008b60",
                "FUN_08002edc",
                "FUN_08009054",
                "FUN_08008e44",
                "FUN_08009228",
                "FUN_08008cd8",
                "FUN_08008ba0",
                "FUN_08008c30",
                "FUN_08008cdc",
                "FUN_08008590",
                "FUN_08008640",
                "FUN_08002978",
                "FUN_08009264"
            ],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nvoid improved_process_data_08003004(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 value_4,\n                 char flag)\n\n{\n  undefined4 float_value_1;\n  int result_1;\n  int result_2;\n  int result_3;\n  undefined4 float_value_2;\n  undefined4 float_value_3;\n  undefined4 float_value_4;\n  undefined4 float_value_5;\n  uint max_value;\n  int index;\n  ushort *pointer;\n  int abs_diff;\n  uint min_value;\n  undefined8 reversed_value;\n  undefined8 calc_value1;\n  undefined8 calc_value2;\n  undefined4 concatenated_string;\n  undefined4 string2;\n  \n  index = (uint)DAT_20000cf0 * 0x40;\n  pointer = (ushort *)(&DAT_20000870 + index);\n  float_value_1 = calculate_float_value_08008eec(DAT_20000ebc,input_1);\n  reversed_value = reverse_bits_and_shift_08008590(float_value_1);\n  result_1 = calculate_parameter_result_080095b8((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n  float_value_1 = calculate_float_value_08008eec(DAT_20000ec0,input_2);\n  reversed_value = reverse_bits_and_shift_08008590(float_value_1);\n  result_2 = calculate_parameter_result_080095b8((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n  float_value_1 = calculate_float_value_08008eec(DAT_20000ec4,input_3);\n  reversed_value = reverse_bits_and_shift_08008590(float_value_1);\n  result_3 = calculate_parameter_result_080095b8((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n  *pointer = 0;\n  if (result_1 < DAT_20000cf4) {\n    *pointer = *pointer | 0x20;\n  }\n  if (result_2 < DAT_20000cf8) {\n    *pointer = *pointer | 0x880;\n  }\n  if (result_3 < DAT_20000cfc) {\n    *pointer = *pointer | 0x200;\n  }\n  abs_diff = result_1 - DAT_20000cf4;\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(&DAT_20000874 + index) = abs_diff;\n  abs_diff = result_2 - DAT_20000cf8;\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(&DAT_20000878 + index) = abs_diff;\n  abs_diff = result_3 - DAT_20000cfc;\n  if (abs_diff < 0) {\n    abs_diff = -abs_diff;\n  }\n  *(int *)(&DAT_2000087c + index) = abs_diff;\n  max_value = *(uint *)(&DAT_2000087c + index);\n  if (*(uint *)(&DAT_2000087c + index) < *(uint *)(&DAT_20000878 + index)) {\n    max_value = *(uint *)(&DAT_20000878 + index);\n  }\n  min_value = *(uint *)(&DAT_20000874 + index);\n  if (*(uint *)(&DAT_20000874 + index) < max_value) {\n    min_value = max_value;\n  }\n  *(uint *)(&DAT_20000880 + index) = min_value;\n  if (*(int *)(&DAT_20000880 + index) != 0) {\n    float_value_1 = count_bits_set_and_shift_08008e44(result_1 - DAT_20000cf4);\n    float_value_1 = calculate_floating_point_value_08009054(float_value_1,DAT_20000ebc);\n    float_value_2 = count_bits_set_and_shift_08008e44(result_2 - DAT_20000cf8);\n    float_value_2 = calculate_floating_point_value_08009054(float_value_2,DAT_20000ec0);\n    float_value_3 = count_bits_set_and_shift_08008e44(result_3 - DAT_20000cfc);\n    float_value_3 = calculate_floating_point_value_08009054(float_value_3,DAT_20000ec4);\n    float_value_4 = calculate_float_value_08008eec(float_value_1,float_value_1);\n    float_value_5 = calculate_float_value_08008eec(float_value_2,float_value_2);\n    float_value_4 = calculate_float_value_08008cdc(float_value_4,float_value_5);\n    float_value_5 = calculate_float_value_08008eec(float_value_3,float_value_3);\n    float_value_4 = calculate_float_value_08008cdc(float_value_4,float_value_5);\n    reversed_value = reverse_bits_and_shift_08008590(float_value_4);\n    reversed_value = improved_process_data_08003004_080098d0((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n    float_value_4 = calculate_float_value_08008c30((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + index) = float_value_4;\n    float_value_4 = calculate_floating_point_value_08009054(0x3f800000,*(undefined4 *)(&DAT_20000890 + index));\n    if (flag == '\\0') {\n      string2 = calculate_float_value_08008eec(value_4,float_value_4);\n    }\n    else {\n      string2 = calculate_floating_point_value_08009054(0x3f800000,value_4);\n    }\n    float_value_5 = calculate_float_value_08008eec(*(undefined4 *)(&DAT_20000890 + index),string2);\n    *(undefined4 *)(&DAT_20000884 + index) = float_value_5;\n    float_value_5 = count_bits_set_and_shift_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    float_value_5 = calculate_float_value_08008eec(float_value_5,string2);\n    reversed_value = reverse_bits_and_shift_08008590(float_value_5);\n    reversed_value = calculate_result_with_precision_08009318((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n    float_value_5 = calculate_shifted_value_08008bf0((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + index) = float_value_5;\n    float_value_5 = count_bits_set_and_shift_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n    float_value_5 = calculate_float_value_08008eec(float_value_5,float_value_4);\n    float_value_5 = calculate_float_value_08008eec(float_value_5,DAT_20000edc);\n    float_value_5 = calculate_floating_point_value_08009054(float_value_5,0x453b8000);\n    reversed_value = reverse_bits_and_shift_08008590(float_value_5);\n    reversed_value = calculate_result_with_precision_08009318((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n    float_value_5 = calculate_parameter_value_08008ba0((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + index) = float_value_5;\n    max_value = calculate_float_value_08008eec(float_value_1,float_value_4);\n    float_value_1 = calculate_float_value_08008eec(float_value_2,float_value_4);\n    float_value_2 = calculate_float_value_08008eec(float_value_3,float_value_4);\n    concatenated_string = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (abs_diff = is_c_string_empty_08009264(DAT_20000d0c,0), abs_diff != 0)) {\n      float_value_3 = calculate_float_value_08008eec(DAT_20000d00 ^ 0x80000000,max_value);\n      float_value_4 = calculate_float_value_08008eec(DAT_20000d04,float_value_1);\n      float_value_3 = calculate_float_addition_08008cd8(float_value_3,float_value_4);\n      float_value_4 = calculate_float_value_08008eec(DAT_20000d08,float_value_2);\n      float_value_3 = calculate_float_addition_08008cd8(float_value_3,float_value_4);\n      reversed_value = reverse_bits_and_shift_08008590(float_value_3);\n      abs_diff = check_if_string_is_empty_08008b24((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),0x66666666,0x3fee6666);\n      if (abs_diff != 0) {\n        abs_diff = check_if_concatenated_string_is_empty_08009228(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + index));\n        concatenated_string = DAT_20000d0c;\n        if (abs_diff == 0) {\n          concatenated_string = *(undefined4 *)(&DAT_20000884 + index);\n        }\n        reversed_value = reverse_bits_and_shift_08008590(float_value_3);\n        abs_diff = check_if_string_is_empty_08008b60((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),0x66666666,0xbfee6666);\n        if (abs_diff != 0) {\n          reversed_value = reverse_bits_and_shift_08008590(float_value_3);\n          reversed_value = reverse_bits_080082d0(0,0x3ff00000,(int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n          reversed_value = calculate_improved_result_08008640((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),0,0x3fe00000);\n          reversed_value = improved_process_data_08003004_080098d0((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n          float_value_3 = calculate_float_value_08008c30((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n          reversed_value = reverse_bits_and_shift_08008590(concatenated_string);\n          float_value_4 = calculate_float_value_08008eec(DAT_20000edc,DAT_20000ee0);\n          float_value_4 = calculate_float_value_08008eec(float_value_4,float_value_3);\n          calc_value1 = reverse_bits_and_shift_08008590(float_value_4);\n          calc_value2 = reverse_bits_and_shift_08008590(float_value_3);\n          calc_value2 = reverse_bits_080082d0(0,0x3ff00000,(int)calc_value2,(int)((ulonglong)calc_value2 >> 0x20));\n          calc_value1 = calculate_floating_point_value_08008894((int)calc_value1,(int)((ulonglong)calc_value1 >> 0x20),(int)calc_value2,\n                                (int)((ulonglong)calc_value2 >> 0x20));\n          calc_value1 = improved_process_data_08003004_080098d0((int)calc_value1,(int)((ulonglong)calc_value1 >> 0x20));\n          abs_diff = check_if_string_is_empty_08008b24((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),(int)calc_value1,\n                                (int)((ulonglong)calc_value1 >> 0x20));\n          if (abs_diff == 0) {\n            float_value_4 = calculate_float_value_08008eec(DAT_20000edc,DAT_20000ee0);\n            float_value_4 = calculate_float_value_08008eec(float_value_4,float_value_3);\n            reversed_value = reverse_bits_and_shift_08008590(float_value_4);\n            calc_value1 = reverse_bits_and_shift_08008590(float_value_3);\n            calc_value1 = reverse_bits_080082d0(0,0x3ff00000,(int)calc_value1,(int)((ulonglong)calc_value1 >> 0x20));\n            reversed_value = calculate_floating_point_value_08008894((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),(int)calc_value1,\n                                  (int)((ulonglong)calc_value1 >> 0x20));\n            reversed_value = improved_process_data_08003004_080098d0((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n            concatenated_string = calculate_float_value_08008c30((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + index) = concatenated_string;\n    float_value_4 = process_data_and_calculate_result_08002978(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + index));\n    abs_diff = check_if_concatenated_string_is_empty_08009228(concatenated_string,float_value_4);\n    float_value_3 = float_value_4;\n    if (abs_diff != 0) {\n      float_value_3 = concatenated_string;\n    }\n    *(undefined4 *)(&DAT_20000888 + index) = float_value_3;\n    abs_diff = check_concatenation_result_08009250(float_value_4,*(undefined4 *)(&DAT_20000884 + index));\n    if (abs_diff == 0) {\n      (&DAT_20000895)[index] = 0;\n    }\n    else {\n      (&DAT_20000895)[index] = 1;\n    }\n    (&DAT_20000894)[index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = max_value;\n    DAT_20000d04 = float_value_1;\n    DAT_20000d08 = float_value_2;\n    DAT_20000cf2 = increment_and_check_limit_08002870(DAT_20000cf2);\n    DAT_20000cf4 = result_1;\n    DAT_20000cf8 = result_2;\n    DAT_20000cfc = result_3;\n    process_combined_data_08002edc();\n  }\n  return;\n}\n\n",
            "current_name": "improved_process_data_08003004",
            "entrypoint": "0x08003004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003004": "improved_process_data_08003004",
                "iVar10": "index",
                "iVar12": "abs_diff",
                "iVar2": "result_1",
                "iVar3": "result_2",
                "iVar4": "result_3",
                "local_1c": "string2",
                "local_20": "concatenated_string",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "value_4",
                "param_5": "flag",
                "puVar11": "pointer",
                "uVar1": "float_value_1",
                "uVar13": "min_value",
                "uVar14": "reversed_value",
                "uVar15": "calc_value1",
                "uVar16": "calc_value2",
                "uVar5": "float_value_2",
                "uVar6": "float_value_3",
                "uVar7": "float_value_4",
                "uVar8": "float_value_5",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035ec": {
            "additional_data": {
                "FUN_080035ec": {
                    "initialize_data": 3,
                    "initialize_parameters": 17,
                    "initialize_params": 3,
                    "initialize_variables": 3,
                    "set_function_params": 1,
                    "set_parameters": 3,
                    "set_params": 1
                },
                "param_1": {
                    "argument1": 1,
                    "data_1": 1,
                    "first_parameter": 2,
                    "initial_value": 1,
                    "input1": 3,
                    "input_1": 1,
                    "input_param1": 3,
                    "input_parameter1": 1,
                    "new_param1": 1,
                    "new_param_1": 1,
                    "param1": 5,
                    "parameter1": 6,
                    "parameter_1": 1,
                    "value1": 4
                },
                "param_2": {
                    "argument2": 1,
                    "data_2": 1,
                    "default_value": 1,
                    "input2": 3,
                    "input_2": 1,
                    "input_param2": 3,
                    "input_parameter2": 1,
                    "new_param2": 1,
                    "new_param_2": 1,
                    "param2": 5,
                    "parameter2": 6,
                    "parameter_2": 1,
                    "second_parameter": 2,
                    "value2": 4
                },
                "param_3": {
                    "alternate_value": 1,
                    "argument3": 1,
                    "data_3": 1,
                    "input3": 3,
                    "input_3": 1,
                    "input_param3": 3,
                    "input_parameter3": 1,
                    "new_param3": 1,
                    "new_param_3": 1,
                    "param3": 5,
                    "parameter3": 6,
                    "parameter_3": 1,
                    "third_parameter": 2,
                    "value3": 4
                }
            },
            "called": [],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid initialize_parameters_080035ec(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  DAT_20000cf4 = parameter1;\n  DAT_20000cf8 = parameter2;\n  DAT_20000cfc = parameter3;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_080035ec",
            "entrypoint": "0x080035ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003618": {
            "additional_data": {
                "FUN_08003618": {
                    "process_and_store_data": 1,
                    "process_combined_data": 3,
                    "process_data": 16,
                    "update_and_process_data": 1,
                    "update_combined_data": 7,
                    "update_data": 2,
                    "update_data_and_process": 1
                },
                "calculate_float_value_08008eec": {
                    "calculate_float_value": 20,
                    "calculate_updated_float_value": 1,
                    "compute_float_result": 1
                },
                "calculate_floating_point_value_08009054": {
                    "calculate_floating_point_value": 20,
                    "calculate_updated_floating_point_value": 1,
                    "compute_floating_point_result": 1
                },
                "count_bits_set_and_shift_08008e44": {
                    "calculate_bit_count_shift": 1,
                    "calculate_shifted_value": 1,
                    "count_bits_and_shift": 2,
                    "count_bits_set_and_shift": 12,
                    "count_bits_shift": 2,
                    "count_bits_shifted_second": 1,
                    "count_set_bits_and_shift": 2,
                    "get_bit_count_and_shift": 1
                },
                "count_bits_set_and_shift_08008e44_1": {
                    "count_bits_and_shift1": 1,
                    "get_bit_count_and_shift1": 1
                },
                "iVar2": {
                    "address_offset": 1,
                    "array_index": 2,
                    "data_index": 5,
                    "data_offset": 1,
                    "index": 14,
                    "index_offset": 1,
                    "offset": 7
                },
                "param_1": {
                    "data": 2,
                    "data_input": 1,
                    "input_data": 7,
                    "input_value": 13,
                    "new_value": 8
                },
                "process_combined_data_08002edc": {
                    "execute_data_processing": 1,
                    "process_combined_data": 18,
                    "process_data": 1
                },
                "uVar1": {
                    "bit_count": 3,
                    "bit_count1": 2,
                    "bit_count_shift": 1,
                    "bit_count_shift_result": 3,
                    "bit_count_shifted": 5,
                    "bit_count_shifted_value": 2,
                    "bit_shift_output": 1,
                    "bits_set_and_shift_result": 2,
                    "bits_set_and_shift_value": 1,
                    "bits_set_and_shifted": 2,
                    "bits_set_shifted_result": 1,
                    "bits_set_shifted_value": 2,
                    "bits_shifted_value": 1,
                    "num_bits_shifted": 1,
                    "result": 1,
                    "shifted_input": 1,
                    "shifted_value": 2
                },
                "uVar3": {
                    "current_value": 1,
                    "data_value": 4,
                    "float_value": 12,
                    "initial_value": 4,
                    "original_value": 1,
                    "prev_value": 2,
                    "previous_value": 1,
                    "stored_value": 1,
                    "temp_value": 1,
                    "value": 3,
                    "value1": 1
                }
            },
            "called": [
                "FUN_08008eec",
                "FUN_08002edc",
                "FUN_08009054",
                "FUN_08008e44"
            ],
            "calling": [
                "FUN_080058a0"
            ],
            "code": "\nvoid process_combined_data_08003618(undefined4 input_value)\n\n{\n  undefined4 bit_count_shifted;\n  int index;\n  undefined4 float_value;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  float_value = *(undefined4 *)(&DAT_20000890 + index);\n  bit_count_shifted = count_bits_set_and_shift_08008e44(input_value);\n  bit_count_shifted = calculate_float_value_08008eec(float_value,bit_count_shifted);\n  float_value = count_bits_set_and_shift_08008e44(*(undefined4 *)(&DAT_20000880 + index));\n  bit_count_shifted = calculate_floating_point_value_08009054(bit_count_shifted,float_value);\n  *(undefined4 *)(&DAT_20000890 + index) = bit_count_shifted;\n  *(undefined4 *)(&DAT_20000880 + index) = input_value;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  process_combined_data_08003618();\n  return;\n}\n\n",
            "current_name": "process_combined_data_08003618",
            "entrypoint": "0x08003618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003618": "process_combined_data_08003618",
                "calculate_float_value_08008eec": "calculate_float_value",
                "calculate_floating_point_value_08009054": "calculate_floating_point_value",
                "count_bits_set_and_shift_08008e44": "count_bits_set_and_shift",
                "iVar2": "index",
                "param_1": "input_value",
                "process_combined_data_08002edc": "process_combined_data",
                "uVar1": "bit_count_shifted",
                "uVar3": "float_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800369c": {
            "additional_data": {
                "FUN_0800369c": {
                    "send_string": 1,
                    "send_string_to_device": 30
                },
                "local_c": {
                    "current_char": 27,
                    "current_character": 4
                },
                "param_1": {
                    "input_string": 2,
                    "string": 28,
                    "string_to_be_sent": 1
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "code": "\nvoid send_string_to_device_0800369c(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    send_byte_to_device_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "send_string_to_device_0800369c",
            "entrypoint": "0x0800369c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800369c": "send_string_to_device_0800369c",
                "local_c": "current_char",
                "param_1": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036c6": {
            "additional_data": {
                "FUN_080036c6": {
                    "send_string": 1,
                    "send_string_to_device": 30
                },
                "local_c": {
                    "current_char": 25,
                    "current_character": 6
                },
                "param_1": {
                    "input_string": 5,
                    "message": 1,
                    "str": 2,
                    "string": 21,
                    "string_to_send": 2
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_0800423c",
                "FUN_08004940",
                "FUN_08004030",
                "FUN_08004250",
                "FUN_080044e8",
                "FUN_08004900",
                "FUN_08004148",
                "FUN_080046d0",
                "FUN_08004228",
                "FUN_080041a0"
            ],
            "code": "\nvoid send_string_to_device_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    send_byte_to_device_08008250(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "send_string_to_device_080036c6",
            "entrypoint": "0x080036c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036c6": "send_string_to_device_080036c6",
                "local_c": "current_char",
                "param_1": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f0": {
            "additional_data": {
                "FUN_080036f0": {
                    "print_bits": 1,
                    "reverse_bits": 1,
                    "send_binary_data": 6,
                    "send_binary_to_device": 2,
                    "send_binary_value": 1,
                    "send_bits": 2,
                    "send_bits_to_device": 18
                },
                "local_10": {
                    "bit_count": 2,
                    "bit_counter": 1,
                    "bit_index": 25,
                    "current_bit": 1
                },
                "local_c": {
                    "bit_mask": 22,
                    "mask": 7
                },
                "param_1": {
                    "binary": 2,
                    "bit_sequence": 1,
                    "data": 22,
                    "input": 1,
                    "input_data": 3,
                    "input_value": 1,
                    "value": 1
                },
                "param_2": {
                    "bit_count": 2,
                    "num_bits": 29
                },
                "uVar1": {
                    "binary_char": 1,
                    "binary_digit": 1,
                    "bit": 1,
                    "bit_value": 18,
                    "output_bit": 2,
                    "output_byte": 2
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08003740",
                "FUN_0800375c"
            ],
            "code": "\nvoid send_bits_to_device_080036f0(uint data,int num_bits)\n\n{\n  undefined4 bit_value;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_index = 0; bit_index < num_bits; bit_index = bit_index + 1) {\n    if ((bit_mask & data) == 0) {\n      bit_value = 0x30;\n    }\n    else {\n      bit_value = 0x31;\n    }\n    send_byte_to_device_08008250(bit_value);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "current_name": "send_bits_to_device_080036f0",
            "entrypoint": "0x080036f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f0": "send_bits_to_device_080036f0",
                "local_10": "bit_index",
                "local_c": "bit_mask",
                "param_1": "data",
                "param_2": "num_bits",
                "uVar1": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003740": {
            "additional_data": {
                "8": {
                    "num_bits": 1
                },
                "FUN_08003740": {
                    "send_8_bits_to_device": 2,
                    "send_bits": 2,
                    "send_bits_to_device": 27
                },
                "param_1": {
                    "bits": 1,
                    "data": 28,
                    "device_data": 1,
                    "input_data": 1
                },
                "send_bits_to_device_080036f0": {
                    "send_bits": 14,
                    "send_bits_to_device": 6,
                    "send_data": 1,
                    "send_data_to_device": 4
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [],
            "code": "\nvoid send_8_bits_to_device_08003740(undefined data)\n\n{\n  send_bits(data,8);\n  return;\n}\n\n",
            "current_name": "send_8_bits_to_device_08003740",
            "entrypoint": "0x08003740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003740": "send_8_bits_to_device_08003740",
                "param_1": "data",
                "send_bits_to_device_080036f0": "send_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800375c": {
            "additional_data": {
                "0x10": {
                    "bits_to_send": 2,
                    "num_bits": 3
                },
                "FUN_0800375c": {
                    "send_bits": 5,
                    "send_bits_to_device": 26
                },
                "data": {
                    "param1": 1
                },
                "param_1": {
                    "data": 20,
                    "device_data": 5,
                    "device_handle": 1,
                    "device_param": 3,
                    "param": 2
                },
                "param_2": {
                    "size": 1
                },
                "send_bits_to_device_080036f0": {
                    "new_send_bits_to_device": 1,
                    "send_bits": 12,
                    "send_bits_to_device": 6,
                    "send_bits_to_device_improved": 1
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [
                "FUN_08004250"
            ],
            "code": "\nvoid send_bits_to_device_0800375c(undefined2 data)\n\n{\n  send_bits(data,0x10);\n  return;\n}\n\n",
            "current_name": "send_bits_to_device_0800375c",
            "entrypoint": "0x0800375c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800375c": "send_bits_to_device_0800375c",
                "param_1": "data",
                "send_bits_to_device_080036f0": "send_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003778": {
            "additional_data": {
                "FUN_08003778": {
                    "convert_and_send_number": 6,
                    "convert_and_send_to_device": 3,
                    "print_decimal_number": 1,
                    "print_digits": 1,
                    "print_integer": 1,
                    "print_number": 4,
                    "print_number_reverse": 1,
                    "print_number_to_device": 2,
                    "send_number_to_device": 9,
                    "send_uint_as_string": 1,
                    "send_uint_to_device": 1,
                    "send_unsigned_integer_to_device": 1
                },
                "acStack_15": {
                    "char_buffer": 1,
                    "digit_array": 3,
                    "digit_buffer": 6,
                    "digit_stack": 7,
                    "digits": 7,
                    "digits_array": 1,
                    "number_as_string": 1,
                    "number_characters": 1,
                    "number_stack": 3,
                    "number_string": 1
                },
                "local_1c": {
                    "current_number": 1,
                    "current_value": 1,
                    "divided_number": 1,
                    "dividend": 2,
                    "number": 1,
                    "remainder": 7,
                    "remaining": 1,
                    "remaining_digits": 4,
                    "remaining_number": 7,
                    "temp": 1,
                    "temp_input": 1,
                    "temp_num": 1,
                    "temp_number": 3
                },
                "local_9": {
                    "buffer_index": 1,
                    "digit": 5,
                    "digit_count": 12,
                    "num_digits": 11,
                    "stack_size": 2
                },
                "param_1": {
                    "input_number": 5,
                    "number": 25,
                    "value": 1
                },
                "uVar1": {
                    "counter": 2,
                    "i": 1,
                    "index": 17,
                    "old_value": 1,
                    "previous_index": 2,
                    "temp": 3,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "tmp1": 1
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080037fc"
            ],
            "code": "\nvoid send_number_to_device_08003778(uint number)\n\n{\n  uint index;\n  uint remaining_number;\n  char digit_stack [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  remaining_number = number;\n  if (number == 0) {\n    send_byte_to_device_08008250(0x30);\n  }\n  else {\n    for (; remaining_number != 0; remaining_number = remaining_number / 10) {\n      index = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digit_stack[index + 1] = (char)(remaining_number % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      send_byte_to_device_08008250(digit_stack[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "send_number_to_device_08003778",
            "entrypoint": "0x08003778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003778": "send_number_to_device_08003778",
                "acStack_15": "digit_stack",
                "local_1c": "remaining_number",
                "local_9": "digit_count",
                "param_1": "number",
                "uVar1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080037fc": {
            "additional_data": {
                "FUN_080037fc": {
                    "print_absolute_value": 9,
                    "send_abs_value": 1,
                    "send_absolute_value": 16,
                    "send_number_or_negative": 2,
                    "send_number_or_negative_value": 1,
                    "send_number_with_sign": 1,
                    "send_positive_or_negative_number": 1
                },
                "local_c": {
                    "abs_number": 1,
                    "absolute_number": 1,
                    "absolute_value": 29
                },
                "param_1": {
                    "input": 2,
                    "input_number": 3,
                    "input_value": 1,
                    "number": 10,
                    "value": 15
                }
            },
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08004250",
                "FUN_08004900",
                "FUN_080046d0"
            ],
            "code": "\nvoid send_absolute_value_080037fc(int value)\n\n{\n  int absolute_value;\n  \n  absolute_value = value;\n  if (value < 0) {\n    send_byte_to_device_08008250(0x2d);\n    absolute_value = -value;\n  }\n  send_number_to_device_08003778(absolute_value);\n  return;\n}\n\n",
            "current_name": "send_absolute_value_080037fc",
            "entrypoint": "0x080037fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080037fc": "send_absolute_value_080037fc",
                "local_c": "absolute_value",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003826": {
            "additional_data": {
                "FUN_08003826": {
                    "convert_float_to_ascii": 6,
                    "convert_float_to_ascii_and_send": 2,
                    "convert_float_to_char": 1,
                    "convert_float_to_decimal": 4,
                    "convert_float_to_string": 2,
                    "convert_integer_to_ascii": 1,
                    "convert_unsigned_integer_to_decimal_string": 1,
                    "display_float": 1,
                    "format_and_send_float": 2,
                    "format_and_send_float_value": 2,
                    "format_float_value": 1,
                    "generate_float_string": 2,
                    "print_float_value": 4,
                    "process_float": 1,
                    "reverse_and_send_float": 1
                },
                "acStack_1d": {
                    "ascii_buffer": 1,
                    "ascii_digits": 2,
                    "ascii_stack": 1,
                    "ascii_value_array": 1,
                    "buffer": 1,
                    "converted_char_stack": 1,
                    "converted_value": 1,
                    "decimal_digits": 1,
                    "decimal_string": 4,
                    "float_ascii": 1,
                    "float_str": 1,
                    "float_string": 7,
                    "float_string_array": 1,
                    "formatted_digits": 1,
                    "formatted_float": 1,
                    "formatted_float_value": 1,
                    "formatted_string": 1,
                    "output_string": 2,
                    "result_string": 1,
                    "string_value": 1
                },
                "bVar3": {
                    "byte_value": 3,
                    "byte_var": 1,
                    "digit": 4,
                    "digit_byte": 1,
                    "extra_byte": 2,
                    "extra_digit": 1,
                    "next_digit": 1,
                    "remainder": 1,
                    "temp_byte": 16,
                    "temporary_byte": 1
                },
                "iVar1": {
                    "is_concatenated_string_empty": 4,
                    "is_empty": 23,
                    "is_empty_concatenated_string": 1,
                    "is_empty_string": 2,
                    "is_string_empty": 1
                },
                "local_10": {
                    "divided_value": 7,
                    "dividend": 5,
                    "divisor": 1,
                    "extracted_integer": 2,
                    "int_value": 2,
                    "integer_value": 11,
                    "remainder": 2,
                    "temp_int": 1
                },
                "local_24": {
                    "float_value": 1,
                    "float_value_copy": 1,
                    "float_value_modified": 2,
                    "formatted_value": 2,
                    "input_value": 1,
                    "modified_float": 2,
                    "modified_input": 3,
                    "modified_input_float": 3,
                    "modified_input_value": 2,
                    "modified_unsigned_integer": 1,
                    "modified_value": 8,
                    "number_copy": 1,
                    "processed_value": 1,
                    "temp_float": 2,
                    "temp_value": 1
                },
                "local_9": {
                    "count": 1,
                    "iteration": 1,
                    "length": 1,
                    "loop_count": 2,
                    "loop_counter": 10,
                    "loop_value": 1,
                    "loop_variable": 1,
                    "num_digits": 4,
                    "original_decimal_digits": 1,
                    "start_value": 1,
                    "string_length": 3,
                    "total_digits": 1
                },
                "local_a": {
                    "char_index": 1,
                    "counter": 1,
                    "current_digit": 4,
                    "digit_index": 3,
                    "i": 1,
                    "index": 20,
                    "loop_index": 1
                },
                "param_1": {
                    "float_value": 1,
                    "input_float": 10,
                    "input_number": 1,
                    "input_value": 12,
                    "unsigned_integer": 1,
                    "value": 6
                },
                "uVar2": {
                    "converted_float": 3,
                    "converted_float_value": 1,
                    "float_value": 27
                },
                "uVar4": {
                    "digit": 2,
                    "digit_index": 1,
                    "index": 2,
                    "temp": 4,
                    "temp_u_int": 6,
                    "temp_uint": 9,
                    "temp_value": 7
                }
            },
            "called": [
                "FUN_08009278",
                "FUN_08008eec",
                "FUN_08009228",
                "FUN_08008cdc",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08004940",
                "FUN_08004250",
                "FUN_080044e8",
                "FUN_080046d0"
            ],
            "code": "\nvoid convert_float_to_ascii_and_send_08003826(uint input_value)\n\n{\n  int is_empty;\n  undefined4 float_value;\n  byte temp_byte;\n  uint temp_uint;\n  uint modified_value;\n  char float_string [13];\n  uint integer_value;\n  byte index;\n  byte loop_counter;\n  \n  is_empty = check_if_concatenated_string_is_empty_08009228(input_value,0);\n  modified_value = input_value;\n  if (is_empty != 0) {\n    send_byte_to_device_08008250(0x2d);\n    modified_value = input_value ^ 0x80000000;\n  }\n  for (loop_counter = DAT_20000ef9; 1 < loop_counter; loop_counter = loop_counter - 2) {\n    modified_value = calculate_float_value_08008eec(modified_value,0x42c80000);\n  }\n  if (loop_counter != 0) {\n    modified_value = calculate_float_value_08008eec(modified_value,0x41200000);\n  }\n  float_value = calculate_float_value_08008cdc(modified_value,0x3f000000);\n  index = 0;\n  integer_value = extract_integer_from_binary_08009278(float_value);\n  float_string[DAT_20000ef9 + 1] = '.';\n  for (; integer_value != 0; integer_value = integer_value / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    temp_uint = (uint)index;\n    index = index + 1;\n    float_string[temp_uint + 1] = (char)(integer_value % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    temp_uint = (uint)index;\n    index = index + 1;\n    float_string[temp_uint + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    temp_byte = index + 1;\n    index = index + 2;\n    float_string[temp_byte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    send_byte_to_device_08008250(float_string[index]);\n  }\n  return;\n}\n\n",
            "current_name": "convert_float_to_ascii_and_send_08003826",
            "entrypoint": "0x08003826",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003826": "convert_float_to_ascii_and_send_08003826",
                "acStack_1d": "float_string",
                "bVar3": "temp_byte",
                "iVar1": "is_empty",
                "local_10": "integer_value",
                "local_24": "modified_value",
                "local_9": "loop_counter",
                "local_a": "index",
                "param_1": "input_value",
                "uVar2": "float_value",
                "uVar4": "temp_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003980": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20000e10": {
                    "counter": 8,
                    "counter1": 6,
                    "data_count": 3,
                    "data_counter": 2,
                    "data_counter1": 1,
                    "data_flag1": 3,
                    "data_initialized_flag": 1,
                    "data_state_flag1": 1,
                    "data_value_one": 1,
                    "data_variable1": 2,
                    "data_variable_1": 1,
                    "data_zero": 1
                },
                "DAT_20000e11": {
                    "counter2": 6,
                    "data_counter2": 1,
                    "data_flag": 4,
                    "data_flag2": 3,
                    "data_offset": 1,
                    "data_one": 1,
                    "data_state_flag2": 1,
                    "data_value_two": 1,
                    "data_variable2": 2,
                    "data_variable_2": 1,
                    "flag": 8,
                    "unused_variable": 1
                },
                "FUN_08003980": {
                    "clear_data": 1,
                    "initialize_data": 28,
                    "initialize_data_state": 1,
                    "reset_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "code": "\nvoid initialize_data_state_08003980(void)\n\n{\n  DAT_20000e10 = 0;\n  DAT_20000e11 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_state_08003980",
            "entrypoint": "0x08003980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003980": "initialize_data_state_08003980"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039a0": {
            "additional_data": {
                "FUN_080039a0": {
                    "initialize_and_print_grbl": 3,
                    "initialize_and_print_grbl_version": 19,
                    "initialize_and_print_version": 5,
                    "initialize_and_print_version_info": 1,
                    "initialize_and_print_version_information": 1,
                    "initialize_grbl": 2
                },
                "initialize_data_state_08003980": {
                    "initialize_data_state": 29
                },
                "print_grbl_version_08004228": {
                    "display_grbl_version": 1,
                    "print_grbl_version": 29
                }
            },
            "called": [
                "FUN_08003980",
                "FUN_08004228"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_print_grbl_version_080039a0(void)\n\n{\n  initialize_data_state_08003980();\n  print_grbl_version();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_and_print_grbl_version_080039a0",
            "entrypoint": "0x080039a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039a0": "initialize_and_print_grbl_version_080039a0",
                "initialize_data_state_08003980": "initialize_data_state",
                "print_grbl_version_08004228": "print_grbl_version"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039bc": {
            "additional_data": {
                "DAT_20000d10": {
                    "input_data": 3
                },
                "FUN_080039bc": {
                    "process_and_display_data": 3,
                    "process_and_display_input": 2,
                    "process_and_display_messages": 1,
                    "process_and_display_results": 1,
                    "process_data": 4,
                    "process_data_and_display_errors": 1,
                    "process_input": 3,
                    "process_input_and_display_error_messages": 1,
                    "process_input_and_display_errors": 2,
                    "process_input_data": 8,
                    "process_input_loop": 5
                },
                "check_and_process_input_data_08004d2c": {
                    "check_and_process_input_data": 5,
                    "validate_and_process_data": 1
                },
                "display_error_message_08004030": {
                    "display_error_message": 5
                },
                "iVar1": {
                    "check_result": 1,
                    "input_check_result": 6,
                    "input_processing_result": 3,
                    "input_result": 9,
                    "input_status": 1,
                    "result": 10
                },
                "local_9": {
                    "count": 1,
                    "counter": 6,
                    "iteration": 3,
                    "iteration_count": 13,
                    "loop_count": 1,
                    "loop_counter": 6,
                    "message_index": 1
                },
                "process_input_and_return_result_080005b4": {
                    "process_input_and_get_result": 1,
                    "process_input_and_return_result": 4
                },
                "send_string_to_device_0800369c": {
                    "send_data_to_device": 1,
                    "send_string_to_device": 4
                },
                "uVar2": {
                    "error_code": 7,
                    "input_processing_result": 1,
                    "output_result": 1,
                    "process_result": 6,
                    "processed_result": 8,
                    "processing_result": 2,
                    "result": 1,
                    "result_code": 4
                }
            },
            "called": [
                "FUN_08004030",
                "FUN_08004d2c",
                "FUN_080005b4",
                "FUN_0800369c"
            ],
            "calling": [
                "FUN_08001ddc",
                "FUN_08003b98"
            ],
            "code": "\nvoid process_input_data_080039bc(void)\n\n{\n  int result;\n  undefined4 processed_result;\n  byte iteration_count;\n  \n  for (iteration_count = 0; iteration_count < 2; iteration_count = iteration_count + 1) {\n    result = check_and_process_input_data_080039bc(iteration_count,&DAT_20000d10);\n    if (result == 0) {\n      display_error_message(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      send_string_to_device(&DAT_20000d10);\n      processed_result = process_input_and_return_result(&DAT_20000d10);\n      display_error_message(processed_result);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_input_data_080039bc",
            "entrypoint": "0x080039bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039bc": "process_input_data_080039bc",
                "check_and_process_input_data_08004d2c": "check_and_process_input_data",
                "display_error_message_08004030": "display_error_message",
                "iVar1": "result",
                "local_9": "iteration_count",
                "process_input_and_return_result_080005b4": "process_input_and_return_result",
                "send_string_to_device_0800369c": "send_string_to_device",
                "uVar2": "processed_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a18": {
            "additional_data": {
                "DAT_20000eaa": {
                    "data_register": 1,
                    "flags": 1,
                    "system_component_flags": 1,
                    "system_component_status": 2,
                    "system_components": 6,
                    "system_components_status": 2,
                    "system_flags": 6,
                    "system_status": 5
                },
                "FUN_08003a18": {
                    "check_and_set_flags": 3,
                    "check_and_set_system_flags": 1,
                    "check_and_update_component_state": 1,
                    "check_and_update_flags": 1,
                    "check_component_status": 1,
                    "check_flags": 1,
                    "check_initialization_and_set_flags": 1,
                    "check_param_and_update_flags": 1,
                    "check_system_components": 5,
                    "handle_param": 3,
                    "initialize_or_check_components": 1,
                    "initialize_or_check_system_components": 1,
                    "initialize_system": 1,
                    "process_data": 1,
                    "process_input": 1,
                    "process_param": 2,
                    "process_parameter": 4,
                    "update_system_components": 1,
                    "update_system_settings": 1
                },
                "initialize_and_check_system_components_080025e8": {
                    "initialize_and_check_system_components": 8
                },
                "param_1": {
                    "component_state": 1,
                    "component_status": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "flags": 3,
                    "input": 10,
                    "input_flag": 2,
                    "input_parameter": 1,
                    "input_value": 5,
                    "param": 2,
                    "parameter": 2,
                    "settings": 1
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid initialize_or_check_system_components_08003a18(uint input)\n\n{\n  if ((input & 0x80) == 0) {\n    if ((input & 0x40) == 0) {\n      if ((input & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    initialize_and_check_system_components();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_or_check_system_components_08003a18",
            "entrypoint": "0x08003a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a18": "initialize_or_check_system_components_08003a18",
                "initialize_and_check_system_components_080025e8": "initialize_and_check_system_components",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a74": {
            "additional_data": {
                "D16T_20000ea9": {
                    "alarm_level": 1
                },
                "D8T_20000eaa": {
                    "device_status": 1
                },
                "DAT_20000ea8": {
                    "condition_flag": 1,
                    "data_var3": 1,
                    "flag": 1,
                    "is_triggered": 1,
                    "special_status": 1
                },
                "DAT_20000ea9": {
                    "alarm_code": 1,
                    "alarm_count": 1,
                    "alarm_type": 1,
                    "byte_var2": 1,
                    "maximum_alarm_priority": 1
                },
                "DAT_20000eaa": {
                    "byte_var1": 1,
                    "data_value": 1,
                    "status": 2,
                    "status_flag": 1
                },
                "DAT_20000eb8": {
                    "data_var2": 1,
                    "global_flag_value": 1,
                    "global_variable": 1,
                    "initialize_flag": 1,
                    "is_initialized": 1
                },
                "DAT_20000ee4": {
                    "data_var1": 1,
                    "global_flag": 1,
                    "global_flags": 2
                },
                "F0F_080041a0": {
                    "display_device_status_message": 1
                },
                "FD5_0800585c": {
                    "initialize_globals_if_needed": 1
                },
                "FDB_080058a0": {
                    "process_combined_data": 1
                },
                "FDD_20000ee4": {
                    "global_flags": 1
                },
                "FDF_0800587c": {
                    "update_status_if_condition_met": 1
                },
                "FDT_20000eb8": {
                    "global_flag": 1
                },
                "FFF_08004148": {
                    "display_system_alarm_message": 1
                },
                "FFF_08004940": {
                    "print_machine_status": 1
                },
                "FUN_08003a74": {
                    "execute_alarm_tasks": 1,
                    "handle_alarm_event": 2,
                    "handle_alarm_status": 1,
                    "handle_device_event": 1,
                    "handle_device_events": 1,
                    "manage_device_actions": 1,
                    "process_alarm": 4,
                    "process_alarm_and_statuses": 1,
                    "process_alarm_status": 1,
                    "process_data": 1,
                    "process_device_data": 6,
                    "process_device_events": 3,
                    "process_device_status": 3,
                    "process_function": 2,
                    "process_function_08003a74": 1,
                    "process_status": 1,
                    "update_device_status": 1
                },
                "bVar1": {
                    "alarm_and_statuses_byte": 1,
                    "alarm_byte": 1,
                    "alarm_status": 1,
                    "byte_val": 1,
                    "byte_value": 2,
                    "byte_var": 1,
                    "current_byte": 2,
                    "current_event": 1,
                    "current_status": 9,
                    "device_data": 2,
                    "device_data_flags": 3,
                    "device_event_flags": 1,
                    "device_flags": 1,
                    "event_flags": 1,
                    "input_byte": 1,
                    "input_flags": 2,
                    "status_flags": 1
                },
                "display_alarm_message_08004148": {
                    "display_alarm_message": 11
                },
                "display_device_status_message_080041a0": {
                    "display_device_status_message": 11
                },
                "initialize_globals_if_needed_0800585c": {
                    "initialize_globals": 1,
                    "initialize_globals_if_needed": 10
                },
                "print_machine_status_08004940": {
                    "print_machine_status": 11
                },
                "process_combined_data_080058a0": {
                    "process_combined_data": 11
                },
                "update_status_if_condition_met_0800587c": {
                    "update_status": 1,
                    "update_status_if_condition_met": 10
                }
            },
            "called": [
                "FUN_08004940",
                "FUN_0800587c",
                "FUN_080058a0",
                "FUN_08004148",
                "FUN_0800585c",
                "FUN_080041a0"
            ],
            "calling": [
                "FUN_08003f34",
                "FUN_08001ddc",
                "FUN_08002408",
                "FUN_080024c4",
                "FUN_08001e98",
                "FUN_08002fd4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_device_data_08003a74(void)\n\n{\n  byte current_status;\n  \n  current_status = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        display_alarm_message(0xffffffff);\n        display_device_status_message(1);\n        do {\n        } while( true );\n      }\n      display_alarm_message(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((current_status & 0x10) == 0) {\n      if ((current_status & 1) != 0) {\n        print_machine_status();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((current_status & 8) != 0) {\n        update_status_if_condition_met_0800587c();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((current_status & 4) != 0) {\n        process_combined_data();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((current_status & 2) != 0) {\n        initialize_globals_if_needed();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_device_data_08003a74",
            "entrypoint": "0x08003a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a74": "process_device_data_08003a74",
                "bVar1": "current_status",
                "display_alarm_message_08004148": "display_alarm_message",
                "display_device_status_message_080041a0": "display_device_status_message",
                "initialize_globals_if_needed_0800585c": "initialize_globals_if_needed",
                "print_machine_status_08004940": "print_machine_status",
                "process_combined_data_080058a0": "process_combined_data",
                "update_status_if_condition_met_0800587c": "update_status_if_condition_met"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003b98": {
            "additional_data": {
                "FUN_08003b98": {
                    "process_and_handle_input": 1,
                    "process_command": 20,
                    "process_commands": 1,
                    "process_grbl_command": 3,
                    "process_input": 6
                },
                "bVar1": {
                    "byte_val": 1,
                    "byte_value": 1,
                    "char": 1,
                    "cmd_byte": 1,
                    "command_byte": 2,
                    "command_char": 4,
                    "current_char": 1,
                    "first_byte": 1,
                    "first_char": 16,
                    "input_char": 1,
                    "second_char": 1,
                    "symbol": 1
                },
                "calculate_shifted_result_08009798": {
                    "calculate_shifted_result": 4
                },
                "calculate_shifted_value_08008bf0": {
                    "calculate_shifted_value": 4
                },
                "check_and_process_input_data_08004d2c": {
                    "check_and_process_input": 1,
                    "check_and_process_input_data": 3
                },
                "convert_and_send_g92_command_080044e8": {
                    "convert_and_send_g92_command": 3,
                    "send_g92_command": 1
                },
                "display_device_status_message_080041a0": {
                    "display_device_status_message": 4
                },
                "display_error_message_08004030": {
                    "display_error_message": 4
                },
                "extract_integer_from_binary_08009278": {
                    "extract_integer_from_binary": 4
                },
                "iVar2": {
                    "error_code": 3,
                    "result": 14,
                    "result_code": 1,
                    "return_value": 8,
                    "status": 2,
                    "temp": 2
                },
                "initialize_and_check_system_components_080025e8": {
                    "initialize_and_check_system_components": 4
                },
                "initialize_and_update_data_structure_08004e30": {
                    "initialize_and_updata_data_structure": 1,
                    "initialize_and_update_data_structure": 3
                },
                "initialize_process_and_update_device_data_080024c4": {
                    "initialize_and_update_device_data": 1,
                    "initialize_process_and_update_device_data": 3
                },
                "local_10": {
                    "command_index": 1,
                    "data_2": 1,
                    "first_argument": 1,
                    "first_integer": 4,
                    "first_value": 3,
                    "param2_int": 1,
                    "param_value": 1,
                    "parameter2": 1,
                    "parse_index": 1,
                    "parsed_value2": 1,
                    "secondary_flag": 1,
                    "shifted_integer": 1,
                    "shifted_value": 2,
                    "temp_value": 2,
                    "temp_variable": 1,
                    "value": 3,
                    "value2": 4,
                    "variable_2": 1
                },
                "local_14": {
                    "argument": 1,
                    "data_1": 1,
                    "int_value": 1,
                    "new_value": 1,
                    "param1_int": 1,
                    "parameter1": 1,
                    "parsed_integer": 1,
                    "parsed_value1": 1,
                    "second_argument": 1,
                    "second_extracted_integer": 1,
                    "second_int_value": 1,
                    "second_integer": 6,
                    "second_value": 4,
                    "secondary_index": 1,
                    "setting": 1,
                    "setting_value": 1,
                    "subcommand": 1,
                    "value1": 5,
                    "variable_1": 1
                },
                "local_9": {
                    "flag": 14,
                    "flag_2": 1,
                    "index2": 2,
                    "index_2": 1,
                    "index_b": 3,
                    "is_second_char": 1,
                    "is_second_value": 1,
                    "loop_counter": 1,
                    "loop_index": 3,
                    "second_index": 2,
                    "sub_command_flag": 1,
                    "switch_case": 1
                },
                "local_a": {
                    "char_index": 1,
                    "command": 1,
                    "command_index": 1,
                    "command_len": 1,
                    "command_length": 1,
                    "command_start_position": 1,
                    "flag_1": 1,
                    "index": 14,
                    "index1": 2,
                    "index_1": 1,
                    "index_a": 3,
                    "parse_index2": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "sub_command": 1
                },
                "param_1": {
                    "command": 19,
                    "command_string": 2,
                    "input": 8,
                    "input_data": 1,
                    "input_string": 1
                },
                "parse_and_calculate_integer_08002638": {
                    "parse_and_calculate_integer": 3,
                    "parse_integer": 1
                },
                "print_configuration_settings_08004250": {
                    "print_configuration_settings": 4
                },
                "print_grbl_commands_0800423c": {
                    "print_grbl_commands": 2,
                    "print_supported_commands": 1
                },
                "process_and_store_input_data_08004bc0": {
                    "process_and_store_input_data": 4
                },
                "process_input_and_return_result_080005b4": {
                    "process_input_and_return_result": 2
                },
                "process_input_data_080039bc": {
                    "process_input_data": 4
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 4
                },
                "send_data_to_device_08004900": {
                    "send_data_to_device": 4
                },
                "send_information_to_device_080046d0": {
                    "send_information_to_device": 4
                },
                "uVar3": {
                    "converted_value": 1,
                    "extracted_int": 1,
                    "extracted_integer": 8,
                    "extracted_value": 13,
                    "int_value": 1,
                    "integer": 1,
                    "integer_value": 1,
                    "value": 1
                },
                "uVar4": {
                    "result": 16,
                    "return_value": 14
                },
                "uVar5": {
                    "shifted_result": 23,
                    "shifted_value": 5
                }
            },
            "called": [
                "FUN_0800423c",
                "FUN_080024c4",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_08004bc0",
                "FUN_080046d0",
                "FUN_08002638",
                "FUN_08009278",
                "FUN_08004030",
                "FUN_080025e8",
                "FUN_08004d2c",
                "FUN_08004250",
                "FUN_080005b4",
                "FUN_08004900",
                "FUN_080044e8",
                "FUN_08004e30",
                "FUN_08009798",
                "FUN_08008590",
                "FUN_080041a0"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nuint process_grbl_command_08003b98(char *command)\n\n{\n  byte first_char;\n  int result;\n  undefined4 extracted_value;\n  uint result;\n  undefined8 shifted_result;\n  undefined4 second_integer;\n  undefined4 value2;\n  byte index;\n  byte flag;\n  \n  if (*command != '$') {\n    result = process_input_and_return_result(command);\n    return result;\n  }\n  index = 1;\n  flag = '\\0';\n  first_char = command[1];\n  if (first_char == 0) {\n    print_grbl_commands();\n    return 0;\n  }\n  if ((0x58 < first_char) || (first_char < 0x23)) goto switchD_08003bdc_caseD_25;\n  switch(first_char) {\n  case 0x23:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    convert_and_send_g92_command();\n    break;\n  case 0x24:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    print_configuration_settings();\n    break;\n  case 0x43:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      initialize_and_check_system_components();\n      display_device_status_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      display_device_status_message(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    send_information_to_device();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    initialize_process_and_update_device_data();\n    if (DAT_20000ea8 == '\\0') {\n      process_input_data();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (command[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        result = check_and_process_input_data(flag,command);\n        if (result == 0) {\n          display_error_message(10);\n        }\n        else {\n          send_data_to_device(flag,command);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\nswitchD_08003bdc_caseD_25:\n    result = parse_and_calculate_integer(command,&index,&value2);\n    if (result == 0) {\n      return 1;\n    }\n    first_char = index + 1;\n    if (command[index] != '=') {\n      return 3;\n    }\n    index = first_char;\n    if (flag == '\\0') {\n      result = parse_and_calculate_integer(command,&index,&second_integer);\n      if (result == 0) {\n        return 1;\n      }\n      if (command[index] == '\\0') {\n        extracted_value = extract_integer_from_binary_08009278(value2);\n        result = initialize_and_update_data_structure(extracted_value,second_integer);\n        return result;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index - (uint)first_char] = command[index];\n      result = (uint)index;\n      index = index + 1;\n    } while (command[result] != '\\0');\n    flag = first_char;\n    flag = process_input_and_return_result(command);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    shifted_result = reverse_bits_and_shift_08008590(value2);\n    shifted_result = calculate_shifted_result((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n    flag = calculate_shifted_value_08008bf0((int)shifted_result,(int)((ulonglong)shifted_result >> 0x20));\n    process_and_store_input_data(flag,command);\n    break;\n  case 0x58:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      display_device_status_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_grbl_command_08003b98",
            "entrypoint": "0x08003b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003b98": "process_grbl_command_08003b98",
                "bVar1": "first_char",
                "calculate_shifted_result_08009798": "calculate_shifted_result",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "check_and_process_input_data_08004d2c": "check_and_process_input_data",
                "convert_and_send_g92_command_080044e8": "convert_and_send_g92_command",
                "display_device_status_message_080041a0": "display_device_status_message",
                "display_error_message_08004030": "display_error_message",
                "extract_integer_from_binary_08009278": "extract_integer_from_binary",
                "iVar2": "result",
                "initialize_and_check_system_components_080025e8": "initialize_and_check_system_components",
                "initialize_and_update_data_structure_08004e30": "initialize_and_update_data_structure",
                "initialize_process_and_update_device_data_080024c4": "initialize_process_and_update_device_data",
                "local_10": "value2",
                "local_14": "second_integer",
                "local_9": "flag",
                "local_a": "index",
                "param_1": "command",
                "parse_and_calculate_integer_08002638": "parse_and_calculate_integer",
                "print_configuration_settings_08004250": "print_configuration_settings",
                "print_grbl_commands_0800423c": "print_grbl_commands",
                "process_and_store_input_data_08004bc0": "process_and_store_input_data",
                "process_input_and_return_result_080005b4": "process_input_and_return_result",
                "process_input_data_080039bc": "process_input_data",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "send_data_to_device_08004900": "send_data_to_device",
                "send_information_to_device_080046d0": "send_information_to_device",
                "uVar3": "extracted_value",
                "uVar4": "result",
                "uVar5": "shifted_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f34": {
            "additional_data": {
                "DAT_20000d10": {
                    "buffer": 1,
                    "data_array": 1,
                    "input_buffer": 2,
                    "input_data": 1
                },
                "DAT_20000e10": {
                    "current_index": 2,
                    "data_index": 6,
                    "data_size": 1,
                    "index": 1,
                    "input_index": 1,
                    "num_bytes": 1,
                    "num_chars": 2
                },
                "DAT_20000e11": {
                    "in_parentheses": 5,
                    "in_quote": 1,
                    "inside_parentheses": 4,
                    "inside_parenthesis": 2,
                    "is_inside_parentheses": 1,
                    "is_parenthesis_open": 1
                },
                "DAT_20000ea8": {
                    "check_condition": 1,
                    "data_error_flag": 1,
                    "data_processing_complete": 1,
                    "device_data_flag": 2,
                    "device_error": 1,
                    "device_error_flag": 1,
                    "device_is_active": 1,
                    "end_flag": 1,
                    "error_flag": 1,
                    "is_device_data_processed": 1,
                    "terminate_flag": 1
                },
                "FUN_08003f34": {
                    "process_data": 1,
                    "process_input": 12,
                    "process_input_and_display": 2,
                    "process_input_and_display_errors": 1,
                    "process_input_and_display_messages": 1,
                    "process_input_and_execute": 1,
                    "process_input_and_process_device_data": 1,
                    "process_input_data": 10,
                    "process_input_stream": 1,
                    "read_and_process_input": 1
                },
                "bVar1": {
                    "byte_input": 6,
                    "current_byte": 2,
                    "input_byte": 23
                },
                "display_error_message_08004030": {
                    "display_error": 2,
                    "display_error_message": 20
                },
                "initialize_data_state_08003980": {
                    "initialize_data": 1,
                    "initialize_data_state": 18,
                    "reset_data_state": 3
                },
                "process_byte_input_08008286": {
                    "get_byte_input": 5,
                    "get_input_byte": 5,
                    "get_next_byte": 2,
                    "get_next_byte_from_input": 2,
                    "get_next_input_byte": 1,
                    "read_byte": 1,
                    "read_byte_from_input": 2,
                    "read_byte_input": 2,
                    "read_input_byte": 1
                },
                "process_device_data_08003a74": {
                    "process_device_data": 22
                },
                "process_grbl_command_08003b98": {
                    "execute_grbl_command": 1,
                    "process_command": 5,
                    "process_grbl_command": 15
                },
                "uVar2": {
                    "command_result": 4,
                    "error_code": 18,
                    "result": 6,
                    "return_value": 3
                },
                "uVar3": {
                    "data_index": 7,
                    "index": 23,
                    "input_index": 1
                }
            },
            "called": [
                "FUN_08003980",
                "FUN_08004030",
                "FUN_08003a74",
                "FUN_08003b98",
                "FUN_08008286"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid process_input_and_process_device_data_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 error_code;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = get_input_byte();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            display_error_message(0xd);\n            initialize_data_state_08003980();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    process_device_data();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      display_error_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      error_code = process_grbl_command(&DAT_20000d10);\n      display_error_message(error_code);\n    }\n    initialize_data_state_08003980();\n  }\n  return;\n}\n\n",
            "current_name": "process_input_and_process_device_data_08003f34",
            "entrypoint": "0x08003f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f34": "process_input_and_process_device_data_08003f34",
                "bVar1": "input_byte",
                "display_error_message_08004030": "display_error_message",
                "initialize_data_state_08003980": "initialize_data_state",
                "process_byte_input_08008286": "get_input_byte",
                "process_device_data_08003a74": "process_device_data",
                "process_grbl_command_08003b98": "process_grbl_command",
                "uVar2": "error_code",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004030": {
            "additional_data": {
                "DAT_0800b5c8": {
                    "default_error_message": 2,
                    "null_error_message": 1
                },
                "DAT_0800b6d8": {
                    "end_error_message": 2,
                    "error_message_suffix": 1
                },
                "FUN_08004030": {
                    "display_error": 4,
                    "display_error_message": 14,
                    "handle_error": 3,
                    "print_error_message": 8,
                    "send_error_message": 2
                },
                "param_1": {
                    "error_code": 31
                },
                "send_string_to_device_080036c6": {
                    "send_message_to_device": 1,
                    "send_string_to_device": 2
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003f34",
                "FUN_080051b4",
                "FUN_080039bc",
                "FUN_080044e8",
                "FUN_080004ac",
                "FUN_08003b98"
            ],
            "code": "\nvoid display_error_message_08004030(char error_code)\n\n{\n  if (error_code == '\\0') {\n    send_string_to_device(&DAT_0800b5c8);\n  }\n  else {\n    send_string_to_device(\"error: \");\n    switch(error_code) {\n    case '\\x01':\n      send_string_to_device(\"Bad number format\");\n      break;\n    case '\\x02':\n      send_string_to_device(\"Expected command letter\");\n      break;\n    case '\\x03':\n      send_string_to_device(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      send_string_to_device(\"Invalid radius\");\n      break;\n    case '\\x05':\n      send_string_to_device(\"Modal group violation\");\n      break;\n    case '\\x06':\n      send_string_to_device(\"Invalid statement\");\n      break;\n    case '\\a':\n      send_string_to_device(\"Setting disabled\");\n      break;\n    case '\\b':\n      send_string_to_device(\"Value < 0.0\");\n      break;\n    case '\\t':\n      send_string_to_device(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      send_string_to_device(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      send_string_to_device(\"Busy or queued\");\n      break;\n    case '\\f':\n      send_string_to_device(\"Alarm lock\");\n      break;\n    case '\\r':\n      send_string_to_device(\"Line overflow\");\n    }\n    send_string_to_device(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "current_name": "display_error_message_08004030",
            "entrypoint": "0x08004030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004030": "display_error_message_08004030",
                "param_1": "error_code",
                "send_string_to_device_080036c6": "send_string_to_device"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004148": {
            "additional_data": {
                "FUN_08004148": {
                    "display_alarm_message": 26,
                    "print_alarm_message": 3,
                    "send_alarm_message": 1,
                    "show_alarm_message": 1
                },
                "param_1": {
                    "alarm_code": 2,
                    "alarm_type": 1,
                    "error_code": 28
                }
            },
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid display_alarm_message_08004148(char error_code)\n\n{\n  send_string_to_device_080036c6(\"ALARM: \");\n  if (error_code == -2) {\n    send_string_to_device_080036c6(\"Abort during cycle\");\n  }\n  else if (error_code == -1) {\n    send_string_to_device_080036c6(\"Hard limit\");\n  }\n  send_string_to_device_080036c6(\". MPos?\\r\\n\");\n  FUNC_08002814(500);\n  return;\n}\n\n",
            "current_name": "display_alarm_message_08004148",
            "entrypoint": "0x08004148",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004148": "display_alarm_message_08004148",
                "param_1": "error_code"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a0": {
            "additional_data": {
                "1": {
                    "reset_message": 1
                },
                "2": {
                    "unlock_message": 1
                },
                "3": {
                    "unlocked_message": 1
                },
                "4": {
                    "enabled_message": 1
                },
                "5": {
                    "disabled_message": 1
                },
                "DAT_0800b710": {
                    "device_name": 1,
                    "intro_message": 2,
                    "reset_message": 4,
                    "reset_prompt": 2,
                    "status_header": 1,
                    "status_message1": 1
                },
                "DAT_0800b764": {
                    "device_status_message": 1,
                    "end_message": 5,
                    "end_prompt": 1,
                    "outro_message": 2,
                    "status_footer": 1,
                    "status_message2": 1
                },
                "FUN_080041a0": {
                    "display_device_info": 1,
                    "display_device_message": 1,
                    "display_device_status": 3,
                    "display_device_status_message": 1,
                    "display_message": 1,
                    "display_status": 2,
                    "display_status_message": 17,
                    "print_device_status": 2,
                    "print_status_message": 2,
                    "send_status_message": 1
                },
                "param_1": {
                    "display_mode": 1,
                    "message_type": 3,
                    "status": 21,
                    "status_code": 5,
                    "status_type": 1
                },
                "send_string_to_device_080036c6": {
                    "send_message_to_device": 4,
                    "send_string_to_device": 18,
                    "send_to_device": 3
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08001ddc",
                "FUN_08003a74",
                "FUN_08003b98"
            ],
            "code": "\nvoid display_device_status_message_080041a0(undefined status)\n\n{\n  send_string_to_device(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    send_string_to_device(\"Reset to continue\");\n    break;\n  case 2:\n    send_string_to_device(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    send_string_to_device(\"Caution: Unlocked\");\n    break;\n  case 4:\n    send_string_to_device(\"Enabled\");\n    break;\n  case 5:\n    send_string_to_device(\"Disabled\");\n  }\n  send_string_to_device(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "display_device_status_message_080041a0",
            "entrypoint": "0x080041a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a0": "display_device_status_message_080041a0",
                "param_1": "status",
                "send_string_to_device_080036c6": "send_string_to_device"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004228": {
            "additional_data": {
                "FUN_08004228": {
                    "display_grbl_version": 7,
                    "initialize_grbl": 8,
                    "print_gcode_version": 1,
                    "print_grbl_version": 10,
                    "print_greetings": 1,
                    "print_welcome_message": 2,
                    "send_grbl_version": 1,
                    "send_welcome_message": 1
                },
                "send_string_to_device_080036c6": {
                    "send_init_message_to_serial": 1,
                    "send_initialization_string": 1,
                    "send_message": 1,
                    "send_output_string": 1,
                    "send_startup_message": 2,
                    "send_startup_msg": 1,
                    "send_string": 1,
                    "send_string_to_device": 22,
                    "send_welcome_message": 1
                },
                "string_080036e8": {
                    "grbl_version_string": 1
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_080039a0"
            ],
            "code": "\nvoid print_grbl_version_08004228(void)\n\n{\n  send_string_to_device(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "current_name": "print_grbl_version_08004228",
            "entrypoint": "0x08004228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004228": "print_grbl_version_08004228",
                "send_string_to_device_080036c6": "send_string_to_device"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800423c": {
            "additional_data": {
                "$$": {
                    "view_grbl_settings": 3
                },
                "$C": {
                    "check_gcode_mode": 3
                },
                "$G": {
                    "view_parser_state": 3
                },
                "$H": {
                    "run_homing_cycle": 3
                },
                "$N": {
                    "view_startup_blocks": 3
                },
                "$Nx": {
                    "save_startup_block": 1
                },
                "$X": {
                    "kill_alarm_lock": 3
                },
                "$x": {
                    "save_grbl_setting": 1
                },
                "FUN_0800423c": {
                    "display_grbl_commands": 1,
                    "display_grbl_settings": 1,
                    "display_menu": 1,
                    "print_commands": 1,
                    "print_commands_to_console": 1,
                    "print_device_commands": 1,
                    "print_grbl_command_menu": 1,
                    "print_grbl_commands": 8,
                    "print_grbl_menu": 3,
                    "print_grbl_options": 2,
                    "print_grbl_settings": 1,
                    "print_menu_options": 1,
                    "send_command_menu": 1,
                    "send_commands_to_device": 1,
                    "send_menu": 1,
                    "send_menu_options": 1,
                    "send_menu_to_device": 3,
                    "send_menu_to_serial_device": 1,
                    "show_grbl_commands": 1
                },
                "i": {
                    "current_index": 1
                },
                "line": {
                    "block_line": 3,
                    "input_line": 1,
                    "startup_block": 1,
                    "startup_block_line": 3
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_parameter_name_2": {
                    "new_parameter_name_2": 1
                },
                "original_variable_name_1": {
                    "new_variable_name_1": 1
                },
                "original_variable_name_2": {
                    "new_variable_name_2": 1
                },
                "s": {
                    "settings_string": 1
                },
                "send_string_to_device_080036c6": {
                    "print_to_device": 1,
                    "send_string_to_device": 29
                },
                "value": {
                    "grbl_setting_value": 1,
                    "input_value": 1,
                    "setting_value": 6
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvocurrent_indexd print_grbl_commands_0800423c(vocurrent_indexd)\n\n{\n  send_string_to_device(\n              \"view_grbl_settings (vcurrent_indexew Grbl settings_stringettcurrent_indexngsettings_string)\\r\\n$# (vcurrent_indexew # parametersettings_string)\\r\\nview_parser_state (vcurrent_indexew parsettings_stringer settings_stringtate)\\r\\nview_startup_blocks (vcurrent_indexew settings_stringtartup blocksettings_string)\\r\\nsave_grbl_setting=setting_value (settings_stringave Grbl settings_stringettcurrent_indexng)\\r\\nsave_startup_block=block_line (settings_stringave settings_stringtartup block)\\r\\ncheck_gcode_mode (check gcode mode)\\r\\nkill_alarm_lock (kcurrent_indexll alarm lock)\\r\\nrun_homing_cycle (run homcurrent_indexng cycle)\\r\\n~ (cycle settings_stringtart)\\r\\n! (feed hold)\\r\\n? (current settings_stringtatusettings_string)\\r\\nctrl-x (resettings_stringet Grbl)\\r\\n\"\n              );\n  return;\n}\n\n",
            "current_name": "print_grbl_commands_0800423c",
            "entrypoint": "0x0800423c",
            "imported": false,
            "improved": true,
            "renaming": {
                "$$": "view_grbl_settings",
                "$C": "check_gcode_mode",
                "$G": "view_parser_state",
                "$H": "run_homing_cycle",
                "$N": "view_startup_blocks",
                "$Nx": "save_startup_block",
                "$X": "kill_alarm_lock",
                "$x": "save_grbl_setting",
                "FUN_0800423c": "print_grbl_commands_0800423c",
                "i": "current_index",
                "line": "block_line",
                "s": "settings_string",
                "send_string_to_device_080036c6": "send_string_to_device",
                "value": "setting_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004250": {
            "additional_data": {
                "DAT_0800b8b8": {
                    "string1": 1
                },
                "DAT_0800bb94": {
                    "string2": 1
                },
                "DAT_20000ebc": {
                    "x_step_per_mm": 1,
                    "x_step_size": 1
                },
                "DAT_20000ec0": {
                    "y_step_per_mm": 1,
                    "y_step_size": 1
                },
                "DAT_20000ec4": {
                    "z_step_per_mm": 1,
                    "z_step_size": 1
                },
                "DAT_20000ec9": {
                    "step_pulse": 1,
                    "step_pulse_usec": 1
                },
                "DAT_20000ecc": {
                    "default_feed": 1,
                    "default_feed_mm_min": 1
                },
                "DAT_20000ed0": {
                    "default_seek": 1,
                    "default_seek_mm_min": 1
                },
                "DAT_20000ed4": {
                    "step_port_invert_mask": 2
                },
                "DAT_20000ed6": {
                    "dir_port_invert_mask": 2
                },
                "DAT_20000ed8": {
                    "arc": 1,
                    "junction_deviation_mm": 1
                },
                "DAT_20000edc": {
                    "acceleration_parameter": 1
                },
                "DAT_20000ee0": {
                    "junction_deviation": 1
                },
                "DAT_20000ee4": {
                    "report_inches_auto_start_invert_step_enable_hard_limits": 1,
                    "report_inches_bool": 1
                },
                "DAT_20000ee6": {
                    "homing_cycle_bool": 1,
                    "homing_cycle_homing_dir_invert_mask": 1
                },
                "DAT_20000ee8": {
                    "homing_feed": 1,
                    "homing_feed_mm_min": 1
                },
                "DAT_20000eec": {
                    "homing_seek": 1,
                    "homing_seek_mm_min": 1
                },
                "DAT_20000ef0": {
                    "homing_debounce": 1,
                    "homing_debounce_msec": 1
                },
                "DAT_20000ef4": {
                    "homing_pull_off": 1,
                    "homing_pull_off_mm": 1
                },
                "DAT_20000ef8": {
                    "step_idle_delay": 1
                },
                "DAT_20000ef9": {
                    "n_decimals": 2
                },
                "DAT_20000efa": {
                    "n_arc_correction": 2
                },
                "FUN_08004250": {
                    "display_configuration_values": 1,
                    "display_settings": 1,
                    "display_system_configuration": 1,
                    "print_configuration": 5,
                    "print_configuration_settings": 2,
                    "print_device_info": 1,
                    "print_device_settings": 5,
                    "print_machine_settings": 1,
                    "print_settings": 2,
                    "print_system_settings": 1,
                    "send_configuration_data": 3,
                    "send_configuration_information": 1,
                    "send_configuration_to_device": 2,
                    "send_configuration_to_serial": 1,
                    "send_device_info": 1,
                    "send_device_settings": 2,
                    "send_settings_to_device": 1
                },
                "calculateFloatingPointValue": {
                    "calculate_floating_point_value": 3
                },
                "calculate_floating_point_value_08009054": {
                    "calculate_acceleration": 1,
                    "calculate_floating_point_value": 23
                },
                "convertFloatToAsciiAndSend": {
                    "convert_float_to_ascii_and_send": 1
                },
                "convert_float_to_ascii_and_send_08003826": {
                    "convert_and_print_float": 1,
                    "convert_and_send_float": 1,
                    "convert_float_and_send": 5,
                    "convert_float_to_ascii_and_send": 7,
                    "convert_float_to_string_and_send": 1,
                    "send_float": 1,
                    "send_float_to_ascii": 2,
                    "send_float_to_device": 2,
                    "send_float_value": 6,
                    "send_float_value_to_device": 4
                },
                "printConfigurationSettings": {
                    "print_configuration_settings": 1
                },
                "printDeviceInfo": {
                    "print_device_info": 1
                },
                "printDeviceSettings": {
                    "print_device_settings": 2
                },
                "sendAbsoluteValue": {
                    "send_absolute_value": 2
                },
                "sendAbsoluteValueToDevice": {
                    "send_absolute_value_to_device": 1
                },
                "sendBitsToDevice": {
                    "send_bits_to_device": 3
                },
                "sendFloatValue": {
                    "send_float_value": 1
                },
                "sendFloatValueToDevice": {
                    "send_float_value_to_device": 1
                },
                "sendStringToDevice": {
                    "send_string_to_device": 3
                },
                "send_absolute_value_080037fc": {
                    "print_absolute_value": 1,
                    "send_absolute_value": 24,
                    "send_absolute_value_to_device": 5
                },
                "send_bits_to_device_0800375c": {
                    "print_bits_to_device": 1,
                    "send_bits_to_device": 29
                },
                "send_string_to_device_080036c6": {
                    "print_string_to_device": 1,
                    "send_string_to_device": 28
                },
                "uVar1": {
                    "acceleration": 2,
                    "floating_point_value": 2
                }
            },
            "called": [
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_0800375c",
                "FUN_080036c6",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_080051b4",
                "FUN_08003b98"
            ],
            "code": "\nvoid print_configuration_settings_08004250(void)\n\n{\n  undefined4 floating_point_value;\n  \n  send_string_to_device(&DAT_0800b8b8);\n  convert_float_to_ascii_and_send(DAT_20000ebc);\n  send_string_to_device(\" (x, step/mm)\\r\\n$1=\");\n  convert_float_to_ascii_and_send(DAT_20000ec0);\n  send_string_to_device(\" (y, step/mm)\\r\\n$2=\");\n  convert_float_to_ascii_and_send(DAT_20000ec4);\n  send_string_to_device(\" (z, step/mm)\\r\\n$3=\");\n  send_absolute_value(DAT_20000ec9);\n  send_string_to_device(\" (step pulse, usec)\\r\\n$4=\");\n  convert_float_to_ascii_and_send(DAT_20000ecc);\n  send_string_to_device(\" (default feed, mm/min)\\r\\n$5=\");\n  convert_float_to_ascii_and_send(DAT_20000ed0);\n  send_string_to_device(\" (default seek, mm/min)\\r\\n$6=\");\n  send_absolute_value(DAT_20000ed4);\n  send_string_to_device(\" (step port invert mask, int:\");\n  send_bits_to_device(DAT_20000ed4);\n  send_string_to_device(\")\\r\\n$7=\");\n  send_absolute_value(DAT_20000ef8);\n  send_string_to_device(\" (step idle delay, msec)\\r\\n$8=\");\n  floating_point_value = calculate_floating_point_value_08009054(DAT_20000edc,0x45610000);\n  convert_float_to_ascii_and_send(floating_point_value);\n  send_string_to_device(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  convert_float_to_ascii_and_send(DAT_20000ee0);\n  send_string_to_device(\" (junction deviation, mm)\\r\\n$10=\");\n  convert_float_to_ascii_and_send(DAT_20000ed8);\n  send_string_to_device(\" (arc, mm/segment)\\r\\n$11=\");\n  send_absolute_value(DAT_20000efa);\n  send_string_to_device(\" (n-arc correction, int)\\r\\n$12=\");\n  send_absolute_value(DAT_20000ef9);\n  send_string_to_device(\" (n-decimals, int)\\r\\n$13=\");\n  send_absolute_value((DAT_20000ee4 & 1) != 0);\n  send_string_to_device(\" (report inches, bool)\\r\\n$14=\");\n  send_absolute_value((DAT_20000ee4 & 2) != 0);\n  send_string_to_device(\" (auto start, bool)\\r\\n$15=\");\n  send_absolute_value((DAT_20000ee4 & 4) != 0);\n  send_string_to_device(\" (invert step enable, bool)\\r\\n$16=\");\n  send_absolute_value((DAT_20000ee4 & 8) != 0);\n  send_string_to_device(\" (hard limits, bool)\\r\\n$17=\");\n  send_absolute_value((DAT_20000ee4 & 0x10) != 0);\n  send_string_to_device(\" (homing cycle, bool)\\r\\n$18=\");\n  send_absolute_value(DAT_20000ee6);\n  send_string_to_device(\" (homing dir invert mask, int:\");\n  send_bits_to_device(DAT_20000ee6);\n  send_string_to_device(\")\\r\\n$19=\");\n  convert_float_to_ascii_and_send(DAT_20000ee8);\n  send_string_to_device(\" (homing feed, mm/min)\\r\\n$20=\");\n  convert_float_to_ascii_and_send(DAT_20000eec);\n  send_string_to_device(\" (homing seek, mm/min)\\r\\n$21=\");\n  send_absolute_value(DAT_20000ef0);\n  send_string_to_device(\" (homing debounce, msec)\\r\\n$22=\");\n  convert_float_to_ascii_and_send(DAT_20000ef4);\n  send_string_to_device(\" (homing pull-off, mm)\\r\\n$23=\");\n  send_absolute_value(DAT_20000ed6);\n  send_string_to_device(\" (dir port invert mask, int:\");\n  send_bits_to_device(DAT_20000ed6);\n  send_string_to_device(&DAT_0800bb94);\n  return;\n}\n\n",
            "current_name": "print_configuration_settings_08004250",
            "entrypoint": "0x08004250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004250": "print_configuration_settings_08004250",
                "calculate_floating_point_value_08009054": "calculate_floating_point_value",
                "convert_float_to_ascii_and_send_08003826": "convert_float_to_ascii_and_send",
                "send_absolute_value_080037fc": "send_absolute_value",
                "send_bits_to_device_0800375c": "send_bits_to_device",
                "send_string_to_device_080036c6": "send_string_to_device",
                "uVar1": "floating_point_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080044e8": {
            "additional_data": {
                "DAT_0800b764": {
                    "colon_string": 1,
                    "end_delimiter": 1
                },
                "DAT_0800bb98": {
                    "error_message": 1,
                    "error_message1": 1
                },
                "DAT_0800bb9c": {
                    "error_message2": 1,
                    "message0": 1
                },
                "DAT_0800bba0": {
                    "error_message3": 1,
                    "message1": 1
                },
                "DAT_0800bba4": {
                    "error_message4": 1,
                    "message2": 1
                },
                "DAT_0800bba8": {
                    "error_message5": 1,
                    "message3": 1
                },
                "DAT_0800bbac": {
                    "error_message6": 1,
                    "message4": 1
                },
                "DAT_0800bbb0": {
                    "error_message7": 1,
                    "message5": 1
                },
                "DAT_0800bbb4": {
                    "error_message8": 1,
                    "message6": 1
                },
                "DAT_0800bbb8": {
                    "error_message9": 1,
                    "message7": 1
                },
                "DAT_0800bbbc": {
                    "comma_string": 1,
                    "delimiter": 1
                },
                "DAT_20000e74": {
                    "data_buffer": 1,
                    "float_values_buffer": 1
                },
                "DAT_20000ee4": {
                    "flag": 5
                },
                "FUN_080044e8": {
                    "convert_and_send_float_values": 4,
                    "convert_and_send_g92_command": 1,
                    "convert_float_values": 1,
                    "parse_and_send_g_code": 1,
                    "process_data": 1,
                    "process_g92_command": 1,
                    "send_command": 1,
                    "send_command_and_convert_float_values": 1,
                    "send_command_to_device": 1,
                    "send_command_to_devices": 1,
                    "send_coordinates_to_device": 1,
                    "send_data_to_device": 1,
                    "send_float_values_to_device": 2,
                    "send_g92_command": 7,
                    "send_g_code": 2,
                    "send_gcode_command": 1,
                    "send_multiple_float_values": 1,
                    "send_three_float_values": 1,
                    "send_values_to_device": 1
                },
                "auStack_18": {
                    "command_params": 1,
                    "converted_float_values": 1,
                    "float_array": 1,
                    "float_stack": 1,
                    "float_values": 3,
                    "input_array": 6,
                    "input_float_buffer": 1,
                    "input_values": 12,
                    "inputs": 1,
                    "parameters": 1,
                    "values": 1
                },
                "calculate_float_value_08008c30": {
                    "calculate_float_value": 6
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 6
                },
                "check_and_process_input_08004d7c": {
                    "check_and_process_input": 5
                },
                "convert_float_to_ascii_and_send_08003826": {
                    "convert_and_send_float": 1,
                    "convert_float_and_send": 1,
                    "convert_float_to_ascii_and_send": 4
                },
                "display_error_message_08004030": {
                    "display_error_message": 6
                },
                "iVar1": {
                    "input_check_result": 6,
                    "input_processed": 1,
                    "input_processing_result": 1,
                    "input_result": 8,
                    "input_status": 8,
                    "result": 1,
                    "success": 1
                },
                "local_9": {
                    "command_index": 6,
                    "counter": 6,
                    "current_byte": 1,
                    "device_index": 1,
                    "index": 4,
                    "iteration": 4,
                    "iteration_count": 5,
                    "loop_counter": 3,
                    "loop_index": 1
                },
                "local_a": {
                    "element_index": 1,
                    "i": 2,
                    "index": 17,
                    "inner_loop_iteration": 1,
                    "iteration": 2,
                    "iterator": 2,
                    "loop_count": 1,
                    "param_index": 3,
                    "parameter_index": 1,
                    "value_index": 1
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 6
                },
                "send_string_to_device_080036c6": {
                    "send_string": 1,
                    "send_string_to_device": 5
                },
                "uVar2": {
                    "float_value": 27
                },
                "uVar3": {
                    "converted_result": 1,
                    "converted_value": 10,
                    "improved_result": 1,
                    "result": 1,
                    "reverse_shifted_value": 2,
                    "reversed_value": 8,
                    "shifted_value": 4
                }
            },
            "called": [
                "FUN_08003826",
                "FUN_08004030",
                "FUN_08004d7c",
                "FUN_080036c6",
                "FUN_08008c30",
                "FUN_08008590",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid convert_and_send_g92_command_080044e8(void)\n\n{\n  int input_status;\n  undefined4 float_value;\n  undefined8 converted_value;\n  undefined4 input_values [3];\n  byte index;\n  byte counter;\n  \n  counter = 0;\n  while( true ) {\n    if (7 < counter) {\n      send_string_to_device(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          convert_float_to_ascii_and_send(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          converted_value = reverse_bits_and_shift_08008590(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          converted_value = calculate_improved_result((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0x57e16865,0x3fa42851);\n          float_value = calculate_float_value_08008c30((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n          convert_float_to_ascii_and_send(float_value);\n        }\n        if (index < 2) {\n          send_string_to_device(&DAT_0800bbbc);\n        }\n        else {\n          send_string_to_device(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    input_status = check_and_process_input(counter,input_values);\n    if (input_status == 0) break;\n    send_string_to_device(&DAT_0800bb98);\n    switch(counter) {\n    case 0:\n      send_string_to_device(&DAT_0800bb9c);\n      break;\n    case 1:\n      send_string_to_device(&DAT_0800bba0);\n      break;\n    case 2:\n      send_string_to_device(&DAT_0800bba4);\n      break;\n    case 3:\n      send_string_to_device(&DAT_0800bba8);\n      break;\n    case 4:\n      send_string_to_device(&DAT_0800bbac);\n      break;\n    case 5:\n      send_string_to_device(&DAT_0800bbb0);\n      break;\n    case 6:\n      send_string_to_device(&DAT_0800bbb4);\n      break;\n    case 7:\n      send_string_to_device(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        convert_float_to_ascii_and_send(input_values[index]);\n      }\n      else {\n        converted_value = reverse_bits_and_shift_08008590(input_values[index]);\n        converted_value = calculate_improved_result((int)converted_value,(int)((ulonglong)converted_value >> 0x20),0x57e16865,0x3fa42851);\n        float_value = calculate_float_value_08008c30((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n        convert_float_to_ascii_and_send(float_value);\n      }\n      if (index < 2) {\n        send_string_to_device(&DAT_0800bbbc);\n      }\n      else {\n        send_string_to_device(&DAT_0800b764);\n      }\n    }\n    counter = counter + 1;\n  }\n  display_error_message(10);\n  return;\n}\n\n",
            "current_name": "convert_and_send_g92_command_080044e8",
            "entrypoint": "0x080044e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080044e8": "convert_and_send_g92_command_080044e8",
                "auStack_18": "input_values",
                "calculate_float_value_08008c30": "calculate_float_value",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "check_and_process_input_08004d7c": "check_and_process_input",
                "convert_float_to_ascii_and_send_08003826": "convert_float_to_ascii_and_send",
                "display_error_message_08004030": "display_error_message",
                "iVar1": "input_status",
                "local_9": "counter",
                "local_a": "index",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "send_string_to_device_080036c6": "send_string_to_device",
                "uVar2": "float_value",
                "uVar3": "converted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046d0": {
            "additional_data": {
                "DAT_0800b764": {
                    "string26": 1,
                    "string27": 1,
                    "string_24": 1,
                    "string_27": 1
                },
                "DAT_0800bbc8": {
                    "string1": 2,
                    "string_0": 1,
                    "string_1": 1
                },
                "DAT_0800bbcc": {
                    "string2": 2,
                    "string_1": 1,
                    "string_2": 1
                },
                "DAT_0800bbd0": {
                    "string3": 2,
                    "string_2": 1,
                    "string_3": 1
                },
                "DAT_0800bbd4": {
                    "string4": 2,
                    "string_3": 1,
                    "string_4": 1
                },
                "DAT_0800bbd8": {
                    "string5": 2,
                    "string_4": 1,
                    "string_5": 1
                },
                "DAT_0800bbe0": {
                    "string6": 2,
                    "string_5": 1,
                    "string_6": 1
                },
                "DAT_0800bbe4": {
                    "string7": 2,
                    "string_6": 1,
                    "string_7": 1
                },
                "DAT_0800bbec": {
                    "string8": 2,
                    "string_7": 1,
                    "string_8": 1
                },
                "DAT_0800bbf4": {
                    "string9": 2,
                    "string_8": 1,
                    "string_9": 1
                },
                "DAT_0800bbfc": {
                    "string11": 1,
                    "string_10": 1,
                    "string_11": 1
                },
                "DAT_0800bc04": {
                    "string10": 2,
                    "string_10": 1,
                    "string_9": 1
                },
                "DAT_0800bc0c": {
                    "string12": 1,
                    "string13": 1,
                    "string_12": 1,
                    "string_13": 1
                },
                "DAT_0800bc14": {
                    "string11": 1,
                    "string12": 1,
                    "string_11": 1,
                    "string_12": 1
                },
                "DAT_0800bc1c": {
                    "string14": 1,
                    "string15": 1,
                    "string_14": 1,
                    "string_15": 1
                },
                "DAT_0800bc24": {
                    "string13": 1,
                    "string14": 1,
                    "string_13": 1,
                    "string_14": 1
                },
                "DAT_0800bc2c": {
                    "string17": 1,
                    "string20": 1,
                    "string_17": 1
                },
                "DAT_0800bc30": {
                    "string18": 1,
                    "string19": 1,
                    "string_18": 1
                },
                "DAT_0800bc34": {
                    "string15": 1,
                    "string16": 1,
                    "string_15": 1,
                    "string_16": 1
                },
                "DAT_0800bc38": {
                    "string18": 1,
                    "string19": 1,
                    "string_16": 1,
                    "string_19": 1
                },
                "DAT_0800bc3c": {
                    "string16": 1,
                    "string20": 1,
                    "string_17": 1,
                    "string_20": 1
                },
                "DAT_0800bc40": {
                    "string17": 1,
                    "string21": 1,
                    "string_18": 1,
                    "string_21": 1
                },
                "DAT_0800bc44": {
                    "string22": 1,
                    "string23": 1,
                    "string_20": 1,
                    "string_23": 1
                },
                "DAT_0800bc48": {
                    "string23": 1,
                    "string24": 1,
                    "string_21": 1,
                    "string_24": 1
                },
                "DAT_0800bc4c": {
                    "string21": 1,
                    "string22": 1,
                    "string_19": 1,
                    "string_22": 1
                },
                "DAT_0800bc50": {
                    "string24": 1,
                    "string25": 1,
                    "string_22": 1,
                    "string_25": 1
                },
                "DAT_0800bc54": {
                    "string25": 1,
                    "string26": 1,
                    "string_23": 1,
                    "string_26": 1
                },
                "DAT_20000e71": {
                    "data_1": 1,
                    "data_item_1": 1,
                    "device_id": 1,
                    "device_info": 1,
                    "device_mode": 5,
                    "device_setting": 1,
                    "device_status": 3,
                    "device_type": 4
                },
                "DAT_20000e72": {
                    "check_flag_5": 1,
                    "flag3": 1,
                    "flag5": 2,
                    "flag_5": 4,
                    "flag_e": 1,
                    "has_signal": 1,
                    "is_bluetooth_connected": 1,
                    "is_condition3_active": 1,
                    "is_ready": 2,
                    "is_value_set": 1,
                    "is_zero_4": 1,
                    "status5": 1
                },
                "DAT_20000e73": {
                    "check_flag_3": 1,
                    "flag3": 2,
                    "flag7": 1,
                    "flag_3": 4,
                    "flag_c": 1,
                    "is_active": 1,
                    "is_condition1_active": 1,
                    "is_connected": 2,
                    "is_power_on": 1,
                    "is_reverse_needed": 1,
                    "is_zero_2": 1,
                    "status3": 1
                },
                "DAT_20000e74": {
                    "check_flag_4": 1,
                    "flag4": 2,
                    "flag_4": 4,
                    "flag_d": 1,
                    "has_power": 1,
                    "is_active": 1,
                    "is_condition2_active": 1,
                    "is_internet_connected": 1,
                    "is_valid": 1,
                    "is_value_zero": 1,
                    "is_zero_3": 1,
                    "status4": 1
                },
                "DAT_20000e75": {
                    "check_value_1": 1,
                    "condition1_value": 1,
                    "data_item_3": 1,
                    "device_mode": 1,
                    "device_option": 1,
                    "flag4": 1,
                    "flag6": 2,
                    "flag_6": 2,
                    "num_flag_1": 1,
                    "num_value_1": 1,
                    "option_value": 1,
                    "signal_strength": 1,
                    "value2": 1,
                    "value_comparison1": 1,
                    "volume_level": 1
                },
                "DAT_20000e76": {
                    "brightness_level": 1,
                    "check_value_2": 1,
                    "condition2_value": 1,
                    "connection_quality": 1,
                    "data_item_4": 1,
                    "flag5": 1,
                    "flag7": 2,
                    "flag_7": 2,
                    "flag_f": 1,
                    "input_mode": 1,
                    "num_flag_2": 1,
                    "num_value_2": 1,
                    "setting_value": 1,
                    "status6": 1,
                    "value_comparison2": 1
                },
                "DAT_20000e77": {
                    "check_value_3": 1,
                    "choice_value": 1,
                    "condition3_value": 1,
                    "data_item_5": 1,
                    "flag6": 1,
                    "flag8": 2,
                    "flag_8": 2,
                    "flag_g": 1,
                    "num_flag_3": 1,
                    "num_value_3": 1,
                    "output_mode": 1,
                    "power_level": 1,
                    "value3": 1,
                    "value_comparison3": 1,
                    "wifi_signal_strength": 1
                },
                "DAT_20000e78": {
                    "calculation_value": 1,
                    "data_4": 1,
                    "data_item_7": 1,
                    "float_input": 2,
                    "float_value": 4,
                    "float_value2": 2,
                    "float_value_2": 1,
                    "float_value_3": 1,
                    "float_value_to_convert": 1,
                    "reverse_value": 1,
                    "value5": 1,
                    "value_c": 1
                },
                "DAT_20000e88": {
                    "additional_value": 1,
                    "battery_level": 1,
                    "data_3": 1,
                    "data_item_6": 1,
                    "device_number": 1,
                    "float_offset": 1,
                    "float_value": 3,
                    "float_value_2": 2,
                    "value": 2,
                    "value2": 1,
                    "value4": 1,
                    "value_2": 1,
                    "value_b": 1
                },
                "DAT_20000e89": {
                    "check_flag_1": 1,
                    "flag1": 3,
                    "flag_1": 4,
                    "flag_a": 1,
                    "is_active": 1,
                    "is_connected": 1,
                    "is_enabled": 1,
                    "is_flag_active": 1,
                    "is_special": 1,
                    "is_value_positive": 1,
                    "is_zero": 1,
                    "status1": 1
                },
                "DAT_20000e8a": {
                    "check_flag_2": 1,
                    "flag2": 3,
                    "flag_2": 4,
                    "flag_b": 1,
                    "flag_value": 1,
                    "is_battery_low": 1,
                    "is_enabled": 2,
                    "is_one": 1,
                    "is_supported": 1,
                    "is_value_one": 1,
                    "status2": 1
                },
                "DAT_20000e8c": {
                    "absolute_offset": 1,
                    "absolute_value": 1,
                    "base_value": 1,
                    "data_2": 1,
                    "data_item_2": 1,
                    "device_address": 1,
                    "device_size": 1,
                    "device_value": 3,
                    "device_version": 1,
                    "offset": 2,
                    "value": 1,
                    "value1": 2,
                    "value_a": 1
                },
                "FUN_080046d0": {
                    "send_data_to_device": 7,
                    "send_device_data": 4,
                    "send_device_info": 10,
                    "send_device_info_to_output": 1,
                    "send_device_information": 5,
                    "send_device_status": 1,
                    "send_information": 2,
                    "send_information_to_device": 1
                },
                "calculate_float_value_08008c30": {
                    "calculate_float_value": 7,
                    "calculate_float_value_and_send": 1
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 8
                },
                "convert_float_to_ascii_and_send_08003826": {
                    "convert_float_and_send": 2,
                    "convert_float_to_ascii_and_send": 5,
                    "send_float_as_ascii": 1
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 8
                },
                "sendStringToDevice": {
                    "send_string_to_device": 1
                },
                "send_absolute_value_080037fc": {
                    "send_absolute_value": 8
                },
                "send_string_to_device_080036c6": {
                    "send_string_to_device": 8
                },
                "uVar1": {
                    "converted_value": 4,
                    "float_result": 1,
                    "float_value": 17,
                    "result": 5,
                    "result1": 1,
                    "result_code": 1
                },
                "uVar2": {
                    "calculation_result": 1,
                    "converted_value": 1,
                    "float_result": 2,
                    "improved_result": 13,
                    "result": 3,
                    "result2": 1,
                    "reversed_shifted_value": 1,
                    "reversed_value": 3,
                    "shifted_result": 1,
                    "shifted_value": 2,
                    "transformed_value": 1
                }
            },
            "called": [
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_080036c6",
                "FUN_08008c30",
                "FUN_08008590",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid send_information_to_device_080046d0(void)\n\n{\n  undefined4 float_value;\n  undefined8 improved_result;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    send_string_to_device(&DAT_0800bbc8);\n    break;\n  case 1:\n    send_string_to_device(&DAT_0800bbcc);\n    break;\n  case 2:\n    send_string_to_device(&DAT_0800bbd0);\n    break;\n  case 3:\n    send_string_to_device(&DAT_0800bbd4);\n    break;\n  case 4:\n    send_string_to_device(&DAT_0800bbd8);\n  }\n  send_string_to_device(&DAT_0800bbe0);\n  send_absolute_value(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      send_string_to_device(&DAT_0800bbe4);\n    }\n    else {\n      send_string_to_device(&DAT_0800bbec);\n    }\n  }\n  else {\n    send_string_to_device(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    send_string_to_device(&DAT_0800bc04);\n  }\n  else {\n    send_string_to_device(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    send_string_to_device(&DAT_0800bc14);\n  }\n  else {\n    send_string_to_device(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    send_string_to_device(&DAT_0800bc24);\n  }\n  else {\n    send_string_to_device(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    send_string_to_device(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      send_string_to_device(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      send_string_to_device(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    send_string_to_device(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      send_string_to_device(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      send_string_to_device(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    send_string_to_device(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      send_string_to_device(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      send_string_to_device(&DAT_0800bc48);\n    }\n  }\n  send_string_to_device(&DAT_0800bc50);\n  send_absolute_value(DAT_20000e88);\n  send_string_to_device(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    convert_float_to_ascii_and_send(DAT_20000e78);\n  }\n  else {\n    improved_result = reverse_bits_and_shift_08008590(DAT_20000e78);\n    improved_result = calculate_improved_result((int)improved_result,(int)((ulonglong)improved_result >> 0x20),0x57e16865,0x3fa42851);\n    float_value = calculate_float_value_08008c30((int)improved_result,(int)((ulonglong)improved_result >> 0x20));\n    convert_float_to_ascii_and_send(float_value);\n  }\n  send_string_to_device(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "send_information_to_device_080046d0",
            "entrypoint": "0x080046d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046d0": "send_information_to_device_080046d0",
                "calculate_float_value_08008c30": "calculate_float_value",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "convert_float_to_ascii_and_send_08003826": "convert_float_to_ascii_and_send",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "send_absolute_value_080037fc": "send_absolute_value",
                "send_string_to_device_080036c6": "send_string_to_device",
                "uVar1": "float_value",
                "uVar2": "improved_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004900": {
            "additional_data": {
                "FUN_08004900": {
                    "initialize_device": 1,
                    "send_data": 1,
                    "send_data_to_device": 28,
                    "send_info_to_device": 1
                },
                "param_1": {
                    "data": 4,
                    "data1": 6,
                    "data_1": 14,
                    "data_param": 1,
                    "data_value": 1,
                    "device_data": 2,
                    "device_data_1": 2,
                    "value_parameter": 1
                },
                "param_2": {
                    "additional_data": 1,
                    "address": 1,
                    "data2": 6,
                    "data_2": 14,
                    "data_parameter": 1,
                    "device_data_2": 2,
                    "message": 2,
                    "message_param": 1,
                    "status_value": 1,
                    "user_data": 1,
                    "value": 1
                },
                "param_3": {
                    "data3": 1
                },
                "send_absolute_value_080037fc": {
                    "send_data_value": 3
                },
                "send_string_to_device_0800369c": {
                    "send_message": 1,
                    "send_message_to_device": 1,
                    "send_string_address": 1
                },
                "send_string_to_device_080036c6": {
                    "send_end_marker": 1,
                    "send_footer_to_device": 1,
                    "send_string_footer": 1
                }
            },
            "called": [
                "FUN_080037fc",
                "FUN_080036c6",
                "FUN_0800369c"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid send_data_to_device_08004900(undefined data_1,undefined4 data_2)\n\n{\n  send_string_footer(&DAT_0800bc58);\n  send_data_value(data_1);\n  send_string_footer(&DAT_0800bc5c);\n  send_string_address(data_2);\n  send_string_footer(&DAT_0800b6d8);\n  return;\n}\n\n",
            "current_name": "send_data_to_device_08004900",
            "entrypoint": "0x08004900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004900": "send_data_to_device_08004900",
                "param_1": "data_1",
                "param_2": "data_2",
                "send_absolute_value_080037fc": "send_data_value",
                "send_string_to_device_0800369c": "send_string_address",
                "send_string_to_device_080036c6": "send_string_footer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004940": {
            "additional_data": {
                "DAT_0800bbbc": {
                    "delimiter": 1,
                    "separator": 1
                },
                "DAT_0800bc70": {
                    "status3": 1,
                    "status_string1": 1
                },
                "DAT_0800bca8": {
                    "end_message": 1,
                    "end_string": 1
                },
                "DAT_20000e70": {
                    "float_value1": 1
                },
                "DAT_20000e74": {
                    "float_value2": 1
                },
                "DAT_20000ea9": {
                    "device_status": 1,
                    "status": 1
                },
                "DAT_20000eac": {
                    "auxiliary_data1": 1,
                    "status0": 1
                },
                "DAT_20000eb0": {
                    "auxiliary_data2": 1,
                    "status1": 1
                },
                "DAT_20000eb4": {
                    "auxiliary_data3": 1,
                    "status2": 1
                },
                "DAT_20000ebc": {
                    "floating_point_data": 1
                },
                "DAT_20000ee4": {
                    "flag": 2
                },
                "FUN_08004940": {
                    "display_device_status": 3,
                    "display_machine_status": 1,
                    "display_position": 1,
                    "display_position_information": 1,
                    "display_status": 1,
                    "display_status_and_position": 1,
                    "print_device_info": 2,
                    "print_device_status": 1,
                    "print_machine_status": 4,
                    "print_position_data": 1,
                    "print_position_information": 1,
                    "print_position_status": 3,
                    "print_status": 5,
                    "print_status_and_position": 2,
                    "print_status_and_positions": 1,
                    "send_status_and_position": 1,
                    "send_status_to_display": 1
                },
                "auStack_2c": {
                    "axis_values": 1,
                    "converted_values": 2,
                    "float_array": 1,
                    "float_values": 6,
                    "floating_point_values": 3,
                    "floating_values": 1,
                    "position_data": 1,
                    "position_values": 5,
                    "status_and_position": 1,
                    "status_and_position_array": 1,
                    "status_stack": 1,
                    "status_values": 2,
                    "values": 5,
                    "values_array": 1
                },
                "calculate_float_addition_08008cd8": {
                    "calculate_float_addition": 2
                },
                "calculate_float_value_08008c30": {
                    "calculate_float_value": 2
                },
                "calculate_float_value_08008cdc": {
                    "calculate_float_value2": 2
                },
                "calculate_floating_point_value_08009054": {
                    "calculate_floating_point_value": 2
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 2
                },
                "convert_float_to_ascii_and_send_08003826": {
                    "convert_float_to_ascii_and_send": 1,
                    "convert_float_to_ascii_and_send_to_device": 1
                },
                "count_bits_set_and_shift_08008e44": {
                    "count_bits_set_and_shift": 2
                },
                "local_11": {
                    "axis_index": 7,
                    "counter": 1,
                    "dimension": 2,
                    "dimension_index": 1,
                    "dimension_loop_counter": 1,
                    "i": 5,
                    "index": 14
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 2
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 2
                },
                "send_string_to_device_080036c6": {
                    "send_status_string_to_device": 1,
                    "send_string_to_device": 1
                },
                "send_string_to_device_08003826": {
                    "send_float_value_string_to_device": 1
                },
                "uVar1": {
                    "bit_count": 9,
                    "bit_count_and_shift_value": 1,
                    "bit_count_shifted": 2,
                    "bits_count": 1,
                    "bits_set": 5,
                    "bits_set_and_shift_count": 1,
                    "bits_set_and_shift_result": 1,
                    "bits_set_and_shifted": 1,
                    "bits_set_and_shifted_value": 1,
                    "bits_set_count": 1,
                    "bits_set_shift": 1,
                    "bits_set_shifted": 1,
                    "set_bits_count": 2
                },
                "uVar2": {
                    "bit_index": 1,
                    "dimension_index": 2,
                    "i": 1,
                    "index": 14,
                    "iteration": 1,
                    "loop_counter": 1,
                    "loop_index": 2,
                    "temp": 3,
                    "temp_var": 1,
                    "u_val": 1
                },
                "uVar3": {
                    "addition_result": 1,
                    "float_addition": 1,
                    "float_value": 20,
                    "float_value1": 2,
                    "floating_point_value": 1,
                    "result": 1,
                    "value": 1
                },
                "uVar4": {
                    "reverse_bits": 2,
                    "reverse_bits_and_shift1": 1,
                    "reverse_bits_and_shifted": 1,
                    "reverse_bits_result": 1,
                    "reverse_value1": 2,
                    "reversed_bit_shifted_value": 1,
                    "reversed_bits": 2,
                    "reversed_bits1": 2,
                    "reversed_bits_and_shift": 1,
                    "reversed_bits_and_shift_result": 1,
                    "reversed_value": 11,
                    "reversed_value1": 1,
                    "temp_value": 1
                },
                "uVar5": {
                    "improved_result": 9,
                    "improved_value": 7,
                    "reverse_bits_and_shift2": 1,
                    "reverse_bits_and_shift_result": 1,
                    "reverse_bits_value": 1,
                    "reverse_shifted_value": 1,
                    "reverse_value2": 2,
                    "reversed_bits2": 2,
                    "reversed_bits_value": 1,
                    "reversed_value2": 2
                }
            },
            "called": [
                "FUN_08003826",
                "FUN_080082d0",
                "FUN_08008cd8",
                "FUN_080036c6",
                "FUN_08008e44",
                "FUN_08009054",
                "FUN_08008c30",
                "FUN_08008cdc",
                "FUN_08008590",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid print_machine_status_08004940(void)\n\n{\n  undefined4 bit_count;\n  uint index;\n  undefined4 float_value;\n  undefined8 reversed_value;\n  undefined8 improved_result;\n  undefined4 float_values [6];\n  byte index;\n  \n  float_values[3] = DAT_20000eac;\n  float_values[4] = DAT_20000eb0;\n  float_values[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    send_status_string_to_device(\"<Idle\");\n    break;\n  case 2:\n    send_status_string_to_device(\"<Queue\");\n    break;\n  case 3:\n    send_status_string_to_device(&DAT_0800bc70);\n    break;\n  case 4:\n    send_status_string_to_device(\"<Hold\");\n    break;\n  case 5:\n    send_status_string_to_device(\"<Home\");\n    break;\n  case 6:\n    send_status_string_to_device(\"<Alarm\");\n    break;\n  case 7:\n    send_status_string_to_device(\"<Check\");\n  }\n  send_status_string_to_device(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    bit_count = count_bits_set_and_shift_08008e44(float_values[index + 3]);\n    index = (uint)index;\n    bit_count = calculate_floating_point_value_08009054(bit_count,(&DAT_20000ebc)[index]);\n    float_values[index] = bit_count;\n    if ((DAT_20000ee4 & 1) != 0) {\n      reversed_value = reverse_bits_and_shift_08008590(float_values[index]);\n      reversed_value = calculate_improved_result((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)index;\n      bit_count = calculate_float_value_08008c30((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n      float_values[index] = bit_count;\n    }\n    convert_float_to_ascii_and_send(float_values[index]);\n    send_status_string_to_device(&DAT_0800bbbc);\n  }\n  send_status_string_to_device(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      float_value = float_values[index];\n      bit_count = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      index = (uint)index;\n      bit_count = calculate_float_addition_08008cd8(float_value,bit_count);\n      float_values[index] = bit_count;\n    }\n    else {\n      reversed_value = reverse_bits_and_shift_08008590(float_values[index]);\n      bit_count = calculate_float_value_08008cdc(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                           *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      improved_result = reverse_bits_and_shift_08008590(bit_count);\n      improved_result = calculate_improved_result((int)improved_result,(int)((ulonglong)improved_result >> 0x20),0x57e16865,0x3fa42851);\n      reversed_value = reverse_bits_080082d0((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20),(int)improved_result,\n                           (int)((ulonglong)improved_result >> 0x20));\n      index = (uint)index;\n      bit_count = calculate_float_value_08008c30((int)reversed_value,(int)((ulonglong)reversed_value >> 0x20));\n      float_values[index] = bit_count;\n    }\n    convert_float_to_ascii_and_send(float_values[index]);\n    if (index < 2) {\n      send_status_string_to_device(&DAT_0800bbbc);\n    }\n  }\n  send_status_string_to_device(&DAT_0800bca8);\n  return;\n}\n\n",
            "current_name": "print_machine_status_08004940",
            "entrypoint": "0x08004940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004940": "print_machine_status_08004940",
                "auStack_2c": "float_values",
                "calculate_float_addition_08008cd8": "calculate_float_addition",
                "calculate_float_value_08008c30": "calculate_float_value",
                "calculate_float_value_08008cdc": "calculate_float_value2",
                "calculate_floating_point_value_08009054": "calculate_floating_point_value",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "convert_float_to_ascii_and_send_08003826": "convert_float_to_ascii_and_send",
                "count_bits_set_and_shift_08008e44": "count_bits_set_and_shift",
                "local_11": "index",
                "reverse_bits_080082d0": "reverse_bits",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "send_string_to_device_080036c6": "send_status_string_to_device",
                "uVar1": "bit_count",
                "uVar2": "index",
                "uVar3": "float_value",
                "uVar4": "reversed_value",
                "uVar5": "improved_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "additional_data": {
                "0x100": {
                    "buffer_size": 1,
                    "constant_c": 1,
                    "data_size": 5,
                    "input_size": 1,
                    "size": 2
                },
                "0x101": {
                    "constant_a": 1,
                    "multiplier": 8,
                    "offset_multiplier": 2
                },
                "0x300": {
                    "base_address": 2,
                    "base_offset": 2,
                    "constant_b": 1,
                    "offset": 5,
                    "offset_in_data": 1
                },
                "FUN_08004bc0": {
                    "process_and_output_data": 1,
                    "process_and_store_data": 1,
                    "process_and_store_input": 1,
                    "process_and_store_input_data": 2,
                    "process_and_transform_data": 1,
                    "process_data": 2,
                    "process_input": 4,
                    "process_input_and_initialize": 1,
                    "process_input_data": 18
                },
                "param_1": {
                    "byte_data": 1,
                    "byte_input": 1,
                    "byte_value": 1,
                    "data": 1,
                    "data_byte": 1,
                    "input": 3,
                    "input_byte": 23
                },
                "param_2": {
                    "additional_param": 1,
                    "data": 3,
                    "data_pointer": 1,
                    "input_data": 11,
                    "input_value": 9,
                    "param_2": 2,
                    "param_value": 1,
                    "parameter_2": 1,
                    "parameter_value": 1,
                    "size": 1
                },
                "param_3": {
                    "data_size": 1
                },
                "process_input_data_08000374": {
                    "process_data": 5,
                    "process_data_helper": 1,
                    "process_input_data": 4,
                    "process_input_data_helper": 1,
                    "process_input_data_internal": 1
                },
                "ushort": {
                    "input_data_address": 1,
                    "input_length": 1,
                    "input_multiplier": 1,
                    "input_offset": 1,
                    "input_short": 3,
                    "input_value": 2,
                    "offset": 1
                },
                "ushort_cast": {
                    "input_offset": 1
                },
                "ushort_param_1": {
                    "calculated_value": 1
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08004d2c",
                "FUN_08003b98"
            ],
            "code": "\nvoid process_and_store_input_data_08004bc0(byte input_byte,undefined4 input_data)\n\n{\n  process_data((input_short)input_byte * 0x101 + 0x300,input_data,0x100);\n  return;\n}\n\n",
            "current_name": "process_and_store_input_data_08004bc0",
            "entrypoint": "0x08004bc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bc0": "process_and_store_input_data_08004bc0",
                "param_1": "input_byte",
                "param_2": "input_data",
                "process_input_data_08000374": "process_data",
                "ushort": "input_short"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "additional_data": {
                "0x200": {
                    "512": 1,
                    "addition": 1,
                    "addition_constant": 1,
                    "address_offset": 1,
                    "constant_offset": 2,
                    "offset": 3
                },
                "0xc": {
                    "12": 1,
                    "data_length": 2,
                    "data_size": 1,
                    "length": 3,
                    "process_size": 1,
                    "size": 1
                },
                "0xd": {
                    "13": 1,
                    "address_multiplier": 1,
                    "multiplier": 6,
                    "multiply_factor": 1
                },
                "FUN_08004bf4": {
                    "process_and_convert_input": 1,
                    "process_and_output_data": 1,
                    "process_and_print_data": 1,
                    "process_and_store_data": 2,
                    "process_and_store_input": 2,
                    "process_byte_data": 1,
                    "process_input": 9,
                    "process_input_and_multiply": 1,
                    "process_input_and_send_data": 1,
                    "process_input_data": 12
                },
                "data_ptr": {
                    "data_ptr": 1
                },
                "input_byte": {
                    "input_byte": 1
                },
                "param_1": {
                    "input_byte": 29,
                    "input_param": 2
                },
                "param_2": {
                    "additional_param": 1,
                    "data": 4,
                    "data_param": 1,
                    "data_ptr": 3,
                    "input_data": 8,
                    "input_param": 2,
                    "input_undefined4": 1,
                    "input_value": 5,
                    "param": 1,
                    "param_2": 4,
                    "param_value": 1
                },
                "param_3": {
                    "length": 1
                },
                "process_input_data_08000374": {
                    "process_data": 8,
                    "process_data_segment": 1,
                    "process_input_data": 3
                },
                "ushort": {
                    "input_address": 1,
                    "input_value": 4,
                    "short_value": 2,
                    "unsigned_short": 7
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08004d7c",
                "FUN_080005b4"
            ],
            "code": "\nvoid process_input_and_send_data_08004bf4(byte input_byte,undefined4 input_data)\n\n{\n  process_data((unsigned_short)input_byte * 0xd + 0x200,input_data,0xc);\n  return;\n}\n\n",
            "current_name": "process_input_and_send_data_08004bf4",
            "entrypoint": "0x08004bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bf4": "process_input_and_send_data_08004bf4",
                "param_1": "input_byte",
                "param_2": "input_data",
                "process_input_data_08000374": "process_data",
                "ushort": "unsigned_short"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "additional_data": {
                "FUN_08004c2a": {
                    "initialize_data": 12,
                    "initialize_data_and_process_input": 1,
                    "initialize_data_processing": 2,
                    "initialize_data_structure": 7,
                    "initialize_data_structures": 3,
                    "process_and_store_data": 2,
                    "process_data": 4
                },
                "process_input_data_08000374": {
                    "handle_input_data": 1,
                    "process_and_store_input_data": 1,
                    "process_data": 1,
                    "process_input": 5,
                    "process_input_data": 23
                },
                "store_value_to_data_structure_08000340": {
                    "initialize_data_structure": 2,
                    "initialize_value_in_data_structure": 1,
                    "set_data": 1,
                    "set_initial_values": 2,
                    "set_value": 1,
                    "set_value_in_data_structure": 3,
                    "store_data_value": 3,
                    "store_value": 10,
                    "store_value_to_data_structure": 6,
                    "store_value_to_structure": 1,
                    "write_data_to_structure": 1
                }
            },
            "called": [
                "FUN_08000374",
                "FUN_08000340"
            ],
            "calling": [
                "FUN_08004c48",
                "FUN_08004e30"
            ],
            "code": "\nvoid initialize_data_structure_08004c2a(void)\n\n{\n  store_value(0,5);\n  process_input_data(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08004c2a",
            "entrypoint": "0x08004c2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c2a": "initialize_data_structure_08004c2a",
                "process_input_data_08000374": "process_input_data",
                "store_value_to_data_structure_08000340": "store_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c48": {
            "additional_data": {
                "DAT_20000ebc": {
                    "constant1": 4,
                    "constant_1": 8,
                    "constant_value1": 1,
                    "constant_value_1": 3,
                    "hash_value_1": 1,
                    "initial_value": 1,
                    "key1": 1,
                    "magic_number_1": 2,
                    "value1": 1,
                    "variable_1": 1
                },
                "DAT_20000ec0": {
                    "constant2": 4,
                    "constant_2": 7,
                    "constant_value2": 1,
                    "constant_value_2": 3,
                    "hash_value_2": 1,
                    "initial_value2": 1,
                    "magic_number_2": 2,
                    "value2": 1,
                    "variable_2": 1
                },
                "DAT_20000ec4": {
                    "constant3": 4,
                    "constant_3": 7,
                    "constant_value3": 1,
                    "constant_value_3": 3,
                    "hash_value_3": 1,
                    "initial_value3": 1,
                    "magic_number_3": 2,
                    "value3": 1,
                    "variable_3": 1
                },
                "DAT_20000ec9": {
                    "constant1": 1,
                    "constant4": 4,
                    "constant_1": 3,
                    "constant_4": 7,
                    "constant_value4": 1,
                    "constant_value_4": 3,
                    "increment_value": 1,
                    "variable_4": 1
                },
                "DAT_20000ecc": {
                    "constant2": 1,
                    "constant5": 4,
                    "constant_2": 3,
                    "constant_5": 7,
                    "constant_value5": 1,
                    "constant_value_5": 3,
                    "floating_point_1": 1,
                    "floating_value1": 1,
                    "value1": 1,
                    "variable_5": 1
                },
                "DAT_20000ed0": {
                    "constant3": 1,
                    "constant6": 4,
                    "constant_3": 3,
                    "constant_6": 7,
                    "constant_value6": 1,
                    "constant_value_6": 3,
                    "floating_point_2": 1,
                    "floating_value2": 1,
                    "variable_6": 1
                },
                "DAT_20000ed4": {
                    "constant4": 1,
                    "constant9": 4,
                    "constant_9": 6,
                    "constant_value9": 1,
                    "constant_value_9": 3,
                    "initialized_flag": 1,
                    "variable_9": 1,
                    "zero": 1,
                    "zero_value": 1
                },
                "DAT_20000ed6": {
                    "constant10": 4,
                    "constant5": 1,
                    "constant_10": 6,
                    "constant_2": 1,
                    "constant_value10": 1,
                    "constant_value_10": 3,
                    "initialized_value": 1,
                    "offset": 1,
                    "some_value": 1,
                    "variable_10": 1
                },
                "DAT_20000ed8": {
                    "constant8": 4,
                    "constant_4": 2,
                    "constant_7": 1,
                    "constant_8": 6,
                    "constant_value8": 1,
                    "constant_value_8": 3,
                    "floating_point_4": 1,
                    "floating_value4": 1,
                    "variable_8": 1
                },
                "DAT_20000edc": {
                    "constant7": 4,
                    "constant_4": 1,
                    "constant_7": 6,
                    "constant_value7": 1,
                    "constant_value_7": 3,
                    "floating_point_3": 1,
                    "floating_value3": 1,
                    "variable_7": 1
                },
                "DAT_20000ee0": {
                    "constant11": 4,
                    "constant6": 1,
                    "constant_11": 6,
                    "constant_5": 3,
                    "constant_8": 1,
                    "constant_value11": 1,
                    "constant_value_11": 3,
                    "floating_point_5": 1,
                    "floating_value5": 1,
                    "value2": 1,
                    "variable_11": 1
                },
                "DAT_20000ee4": {
                    "constant1": 1,
                    "constant12": 4,
                    "constant7": 1,
                    "constant_12": 6,
                    "constant_3": 1,
                    "constant_6": 2,
                    "constant_9": 1,
                    "constant_value1": 1,
                    "constant_value12": 1,
                    "constant_value_12": 3,
                    "variable_1": 1,
                    "variable_12": 1
                },
                "DAT_20000ee6": {
                    "constant13": 3,
                    "constant2": 1,
                    "constant8": 1,
                    "constant_10": 1,
                    "constant_13": 6,
                    "constant_7": 2,
                    "constant_value13": 1,
                    "constant_value2": 1,
                    "constant_value_13": 3,
                    "variable_13": 1,
                    "variable_2": 1,
                    "zero_2": 1
                },
                "DAT_20000ee8": {
                    "constant13": 1,
                    "constant14": 3,
                    "constant3": 1,
                    "constant9": 1,
                    "constant_11": 1,
                    "constant_14": 5,
                    "constant_16": 1,
                    "constant_8": 2,
                    "constant_value14": 1,
                    "constant_value_14": 3,
                    "floating_point_6": 1,
                    "floating_value6": 1,
                    "variable_14": 1,
                    "variable_3": 1
                },
                "DAT_20000eec": {
                    "constant10": 1,
                    "constant14": 1,
                    "constant15": 3,
                    "constant_12": 1,
                    "constant_15": 5,
                    "constant_value15": 1,
                    "constant_value_15": 3,
                    "floating_point_7": 1,
                    "floating_value7": 1,
                    "variable_15": 1
                },
                "DAT_20000ef0": {
                    "constant11": 1,
                    "constant15": 1,
                    "constant16": 3,
                    "constant4": 1,
                    "constant_13": 1,
                    "constant_16": 5,
                    "constant_17": 1,
                    "constant_4": 1,
                    "constant_9": 2,
                    "constant_value16": 1,
                    "constant_value_16": 3,
                    "count_value": 1,
                    "variable_16": 1,
                    "variable_4": 1
                },
                "DAT_20000ef4": {
                    "constant12": 1,
                    "constant16": 1,
                    "constant17": 3,
                    "constant5": 1,
                    "constant_10": 2,
                    "constant_14": 1,
                    "constant_17": 5,
                    "constant_18": 1,
                    "constant_value17": 1,
                    "constant_value_17": 3,
                    "floating_point_8": 1,
                    "floating_value8": 1,
                    "variable_17": 1,
                    "variable_5": 1
                },
                "DAT_20000ef8": {
                    "constant13": 1,
                    "constant17": 1,
                    "constant18": 3,
                    "constant6": 1,
                    "constant_11": 2,
                    "constant_15": 1,
                    "constant_18": 5,
                    "constant_19": 1,
                    "constant_5": 1,
                    "constant_value18": 1,
                    "constant_value3": 1,
                    "constant_value_18": 3,
                    "variable_18": 1,
                    "variable_6": 1
                },
                "DAT_20000ef9": {
                    "constant14": 1,
                    "constant18": 1,
                    "constant19": 3,
                    "constant7": 1,
                    "constant_12": 2,
                    "constant_16": 1,
                    "constant_19": 5,
                    "constant_20": 1,
                    "constant_6": 1,
                    "constant_value19": 1,
                    "constant_value4": 1,
                    "constant_value_19": 3,
                    "variable_19": 1,
                    "variable_7": 1
                },
                "DAT_20000efa": {
                    "constant15": 1,
                    "constant19": 1,
                    "constant20": 3,
                    "constant8": 1,
                    "constant_13": 2,
                    "constant_17": 1,
                    "constant_20": 5,
                    "constant_21": 1,
                    "constant_7": 1,
                    "constant_value20": 1,
                    "constant_value5": 1,
                    "constant_value_20": 3,
                    "variable_20": 1,
                    "variable_8": 1
                },
                "FUN_08004c48": {
                    "initialize_data": 24,
                    "initialize_data_structure": 7
                },
                "initialize_data_structure_08004c2a": {
                    "initialize_data_structure": 4
                },
                "param_1": {
                    "character": 1,
                    "flag": 2,
                    "input": 3,
                    "input_char": 5,
                    "input_data": 1,
                    "input_flag": 5,
                    "input_param": 9,
                    "input_parameter": 2,
                    "input_value": 3
                }
            },
            "called": [
                "FUN_08004c2a"
            ],
            "calling": [
                "FUN_080051b4",
                "FUN_08004dd2"
            ],
            "code": "\nvoid initialize_data_structure_08004c48(char input_param)\n\n{\n  if (input_param != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  initialize_data_structure_08004c48();\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_08004c48",
            "entrypoint": "0x08004c48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c48": "initialize_data_structure_08004c48",
                "initialize_data_structure_08004c2a": "initialize_data_structure",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "additional_data": {
                "FUN_08004d2c": {
                    "check_and_process_character": 1,
                    "check_and_process_input": 21,
                    "check_and_process_input_data": 2,
                    "check_and_store_input": 1,
                    "check_and_update_character": 1,
                    "reverse_check": 1,
                    "validate_and_process_data": 1,
                    "validate_and_process_input": 3
                },
                "check_character_equality_080003ec": {
                    "check_character_equality": 4,
                    "check_equality": 1
                },
                "iVar1": {
                    "character_equality_check_result": 1,
                    "equality_check_result": 5,
                    "equality_result": 2,
                    "is_equal": 12,
                    "result": 4
                },
                "param_1": {
                    "byte": 1,
                    "byte_value": 5,
                    "character": 14,
                    "input_byte": 11
                },
                "param_2": {
                    "buffer": 1,
                    "data": 4,
                    "data_array": 1,
                    "data_buffer": 5,
                    "data_pointer": 1,
                    "data_ptr": 3,
                    "input_array": 1,
                    "input_buffer": 1,
                    "input_data": 7,
                    "output_buffer": 1,
                    "output_data": 5,
                    "output_string": 1
                },
                "process_and_store_input_data_08004bc0": {
                    "process_and_store_input_data": 4,
                    "process_data": 1
                }
            },
            "called": [
                "FUN_080003ec",
                "FUN_08004bc0"
            ],
            "calling": [
                "FUN_080039bc",
                "FUN_08003b98"
            ],
            "code": "\nbool check_and_process_input_data_08004d2c(byte character,undefined *input_data)\n\n{\n  int is_equal;\n  \n  is_equal = check_character_equality(input_data,(ushort)character * 0x101 + 0x300,0x100);\n  if (is_equal == 0) {\n    *input_data = 0;\n    process_and_store_input_data(character,input_data);\n  }\n  return is_equal != 0;\n}\n\n",
            "current_name": "check_and_process_input_data_08004d2c",
            "entrypoint": "0x08004d2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d2c": "check_and_process_input_data_08004d2c",
                "check_character_equality_080003ec": "check_character_equality",
                "iVar1": "is_equal",
                "param_1": "character",
                "param_2": "input_data",
                "process_and_store_input_data_08004bc0": "process_and_store_input_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "additional_data": {
                "FUN_08004d7c": {
                    "check_and_process_data": 6,
                    "check_and_process_input": 12,
                    "check_and_update_character": 1,
                    "check_character_and_process": 1,
                    "check_character_equality": 1,
                    "process_character": 1,
                    "validate_and_process_data": 1,
                    "validate_and_process_input": 5,
                    "validate_and_update_input": 1,
                    "validate_character": 1,
                    "verify_and_process_input": 1
                },
                "check_character_equality_080003ec": {
                    "check_character_equality": 5
                },
                "iVar1": {
                    "char_equality_check_result": 1,
                    "character_equality_check_result": 1,
                    "equality_check_result": 4,
                    "is_character_equal": 1,
                    "is_equal": 7,
                    "result": 13
                },
                "memset_with_value_0800b430": {
                    "initialize_buffer": 1,
                    "initialize_data": 1,
                    "initialize_memory": 1,
                    "memset_with_value": 1,
                    "reset_data": 1,
                    "set_memory_to_zero": 1
                },
                "param_1": {
                    "byte_param": 3,
                    "byte_value": 3,
                    "character": 7,
                    "input": 1,
                    "input_byte": 16,
                    "input_character": 1
                },
                "param_2": {
                    "address": 1,
                    "buffer": 3,
                    "data": 5,
                    "data_buffer": 3,
                    "data_ptr": 1,
                    "input_address": 1,
                    "input_buffer": 4,
                    "input_data": 8,
                    "int_param": 1,
                    "memory_address": 1,
                    "param": 1,
                    "param_2": 1,
                    "param_4": 1
                },
                "process_input_and_send_data_08004bf4": {
                    "process_and_send_data": 1,
                    "process_input_and_send_data": 4,
                    "send_processed_data": 1
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08004bf4",
                "FUN_080003ec"
            ],
            "calling": [
                "FUN_080005b4",
                "FUN_080051b4",
                "FUN_080044e8",
                "FUN_080004ac"
            ],
            "code": "\nbool check_and_process_input_08004d7c(byte input_byte,undefined4 input_data)\n\n{\n  int result;\n  \n  result = check_character_equality(input_data,(ushort)input_byte * 0xd + 0x200,0xc);\n  if (result == 0) {\n    memset_with_value_0800b430(input_data,0,0xc);\n    process_input_and_send_data(input_byte,input_data);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "check_and_process_input_08004d7c",
            "entrypoint": "0x08004d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d7c": "check_and_process_input_08004d7c",
                "check_character_equality_080003ec": "check_character_equality",
                "iVar1": "result",
                "memset_with_value_0800b430": "reset_data",
                "param_1": "input_byte",
                "param_2": "input_data",
                "process_input_and_send_data_08004bf4": "process_input_and_send_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "additional_data": {
                "FUN_08004dd2": {
                    "check_and_initialize_data": 1,
                    "check_and_initialize_data_structure": 4,
                    "check_data": 1,
                    "check_data_and_initialize": 1,
                    "check_data_integrity": 1,
                    "check_data_structure": 8,
                    "check_data_validity": 7,
                    "check_element": 1,
                    "check_element_and_initialize_structure": 1,
                    "check_input_validity": 1,
                    "process_data": 2,
                    "validate_data": 1,
                    "validate_input": 1,
                    "verify_data_structure": 1
                },
                "bVar1": {
                    "data_element": 2,
                    "element": 29
                },
                "iVar2": {
                    "character_equality_check_result": 1,
                    "equality_check_result": 4,
                    "equality_result": 1,
                    "equals_error": 1,
                    "result": 24
                }
            },
            "called": [
                "FUN_08004c48",
                "FUN_080003ec",
                "FUN_08000310"
            ],
            "calling": [
                "FUN_080051b4"
            ],
            "code": "\nundefined4 check_and_initialize_data_structure_08004dd2(void)\n\n{\n  byte element;\n  int result;\n  \n  element = get_element_from_data_structure_08000310(0);\n  if (element == 5) {\n    result = check_character_equality_080003ec(&DAT_20000ebc,1,0x40);\n    if (result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < element) {\n      return 0;\n    }\n    result = check_character_equality_080003ec(&DAT_20000ebc,1,0x28);\n    if (result == 0) {\n      return 0;\n    }\n    initialize_data_structure_08004c48(0);\n  }\n  return 1;\n}\n\n",
            "current_name": "check_and_initialize_data_structure_08004dd2",
            "entrypoint": "0x08004dd2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004dd2": "check_and_initialize_data_structure_08004dd2",
                "bVar1": "element",
                "iVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e30": {
            "additional_data": {
                "DAT_20000ebc": {
                    "concatenated_value1": 1
                },
                "DAT_20000ec9": {
                    "shifted_value1": 1
                },
                "DAT_20000ecc": {
                    "value4": 1
                },
                "DAT_20000ed0": {
                    "value5": 1
                },
                "DAT_20000ed4": {
                    "shifted_value6": 1
                },
                "DAT_20000ed6": {
                    "shifted_value25": 1
                },
                "DAT_20000ed8": {
                    "value11": 1
                },
                "DAT_20000edc": {
                    "float_value3": 1
                },
                "DAT_20000ee0": {
                    "value9": 1
                },
                "DAT_20000ee4": {
                    "flag": 1
                },
                "DAT_20000ee6": {
                    "shifted_value19": 1
                },
                "DAT_20000ee8": {
                    "value20": 1
                },
                "DAT_20000eec": {
                    "value21": 1
                },
                "DAT_20000ef0": {
                    "shifted_value22": 1
                },
                "DAT_20000ef4": {
                    "value23": 1
                },
                "DAT_20000ef8": {
                    "shifted_value10": 1
                },
                "DAT_20000ef9": {
                    "shifted_value13": 1
                },
                "DAT_20000efa": {
                    "shifted_value12": 1
                },
                "FUN_08004e30": {
                    "initialize_and_set_data": 2,
                    "initialize_and_set_values": 2,
                    "initialize_and_set_variables": 1,
                    "initialize_and_store_data": 2,
                    "initialize_and_update_data": 2,
                    "initialize_and_update_data_structure": 1,
                    "initialize_and_update_variables": 1,
                    "initialize_data": 4,
                    "initialize_data_structure": 4,
                    "initialize_parameters_and_calculate_values": 1,
                    "update_data": 4,
                    "update_data_structure": 6
                },
                "calculate_double_precision_result_08009654": {
                    "calc_double_precision_result": 1,
                    "calculate_double_precision_result": 8,
                    "calculate_double_result": 1
                },
                "calculate_float_value_08008eec": {
                    "calc_float_value": 1,
                    "calculate_float_value": 9
                },
                "calculate_shifted_result_08009798": {
                    "calc_shifted_result": 1,
                    "calculate_shifted_result": 8
                },
                "calculate_shifted_value_08008bf0": {
                    "calc_shifted_value": 1,
                    "calculate_shifted_value": 9
                },
                "check_concatenation_result_0800923c": {
                    "check_concatenation_result": 9,
                    "check_result_of_concatenation": 1
                },
                "check_if_concatenated_string_is_empty_08009228": {
                    "check_empty_concatenated_string": 2,
                    "check_if_concatenated_string_is_empty": 3,
                    "check_if_empty_string": 1,
                    "check_if_string_is_empty": 4
                },
                "check_if_concatenation_result_is_not_null_08009214": {
                    "check_if_concatenation_result_is_not_null": 3,
                    "check_if_result_is_not_null": 3,
                    "check_if_result_not_null": 2,
                    "check_non_null_concatenation_result": 1,
                    "check_not_null_concatenation_result": 1
                },
                "extract_flag_from_data_0800192c": {
                    "extract_flag_from_data": 10
                },
                "iVar2": {
                    "check_result": 6,
                    "result": 20
                },
                "initialize_data_structure_08004c2a": {
                    "initialize_data_structure": 9
                },
                "param_1": {
                    "action": 2,
                    "case_number": 1,
                    "code_type": 1,
                    "command": 1,
                    "data_type": 3,
                    "function_code": 1,
                    "index": 2,
                    "input": 1,
                    "input_choice": 1,
                    "input_code": 1,
                    "input_index": 1,
                    "input_type": 2,
                    "operation": 4,
                    "operation_code": 2,
                    "option": 1,
                    "param": 1,
                    "selection": 1,
                    "type": 3,
                    "variable_id": 1
                },
                "param_2": {
                    "data": 1,
                    "data_value": 3,
                    "input_value": 8,
                    "value": 18
                },
                "reverse_bits_and_shift_08008590": {
                    "reverse_bits_and_shift": 10
                },
                "uVar1": {
                    "concat_result": 1,
                    "float_result": 4,
                    "float_val": 1,
                    "float_value": 14,
                    "result": 2,
                    "return_value": 1
                },
                "uVar3": {
                    "calculated_value": 1,
                    "computed_value": 1,
                    "processed_value": 1,
                    "shifted_result": 2,
                    "shifted_value": 17,
                    "temp_value": 2,
                    "transformed_value": 2
                }
            },
            "called": [
                "FUN_0800923c",
                "FUN_08009214",
                "FUN_08008eec",
                "FUN_0800192c",
                "FUN_08004c2a",
                "FUN_08009228",
                "FUN_08008bf0",
                "FUN_08008590",
                "FUN_08009654",
                "FUN_08009798"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nundefined4 initialize_and_update_data_structure_08004e30(int operation,uint value)\n\n{\n  undefined4 float_value;\n  int result;\n  undefined8 shifted_value;\n  \n  switch(operation) {\n  case 0:\n  case 1:\n  case 2:\n    result = check_concatenation_result(value,0);\n    if (result != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[operation] = value;\n    break;\n  case 3:\n    result = check_if_string_is_empty(value,0x40400000);\n    if (result != 0) {\n      return 9;\n    }\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_double_precision_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000ec9 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = value;\n    break;\n  case 5:\n    DAT_20000ed0 = value;\n    break;\n  case 6:\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_shifted_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000ed4 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  case 7:\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_double_precision_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000ef8 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  case 8:\n    float_value = calculate_float_value_08008eec(value,0x42700000);\n    DAT_20000edc = calculate_float_value_08008eec(float_value,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = value;\n    break;\n  case 0xb:\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_double_precision_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000efa = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  case 0xc:\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_double_precision_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000ef9 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  case 0xd:\n    result = check_if_result_is_not_null(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    result = check_if_result_is_not_null(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    result = check_if_result_is_not_null(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    result = check_if_result_is_not_null(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    extract_flag_from_data_0800192c();\n    break;\n  case 0x11:\n    result = check_if_result_is_not_null(value,0);\n    if (result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_shifted_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000ee6 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = value;\n    break;\n  case 0x14:\n    DAT_20000eec = value;\n    break;\n  case 0x15:\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_double_precision_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000ef0 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = value;\n    break;\n  case 0x17:\n    shifted_value = reverse_bits_and_shift_08008590(value);\n    shifted_value = calculate_shifted_result((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    DAT_20000ed6 = calculate_shifted_value_08008bf0((int)shifted_value,(int)((ulonglong)shifted_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  initialize_data_structure();\n  return 0;\n}\n\n",
            "current_name": "initialize_and_update_data_structure_08004e30",
            "entrypoint": "0x08004e30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e30": "initialize_and_update_data_structure_08004e30",
                "calculate_double_precision_result_08009654": "calculate_double_precision_result",
                "calculate_float_value_08008eec": "calculate_float_value",
                "calculate_shifted_result_08009798": "calculate_shifted_result",
                "calculate_shifted_value_08008bf0": "calculate_shifted_value",
                "check_concatenation_result_0800923c": "check_concatenation_result",
                "check_if_concatenated_string_is_empty_08009228": "check_if_string_is_empty",
                "check_if_concatenation_result_is_not_null_08009214": "check_if_result_is_not_null",
                "extract_flag_from_data_0800192c": "extract_flag_from_data",
                "iVar2": "result",
                "initialize_data_structure_08004c2a": "initialize_data_structure",
                "param_1": "operation",
                "param_2": "value",
                "reverse_bits_and_shift_08008590": "reverse_bits_and_shift",
                "uVar1": "float_value",
                "uVar3": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080051b4": {
            "additional_data": {
                "FUN_080051b4": {
                    "initialize_and_process": 1,
                    "initialize_and_process_data": 4,
                    "initialize_and_process_input": 3,
                    "process_and_display_configuration": 2,
                    "process_configuration": 1,
                    "process_data": 13,
                    "process_input": 2,
                    "process_input_and_display_configuration": 2,
                    "process_input_and_display_settings": 3
                },
                "auStack_18": {
                    "data_buffer": 1,
                    "input_buffer": 20,
                    "input_data": 3,
                    "input_data_array": 1,
                    "local_buffer": 1,
                    "stack_buffer": 2,
                    "stack_data": 1,
                    "temp_buffer": 1,
                    "temporary_data": 1
                },
                "check_and_initialize_data_structure_08004dd2": {
                    "initialize_data_structure_check": 1
                },
                "check_and_process_input_08004d7c": {
                    "process_input_check": 1
                },
                "display_error_message_08004030": {
                    "display_error_message": 1
                },
                "iVar1": {
                    "result": 6
                },
                "initialize_data_structure_08004c48": {
                    "initialize_data_structure": 1
                },
                "local_9": {
                    "counter": 4,
                    "current_index": 2,
                    "current_iteration": 1,
                    "index": 8,
                    "input_index": 12,
                    "iteration": 1,
                    "iteration_index": 1,
                    "iterator": 1,
                    "loop_index": 1
                },
                "print_configuration_settings_08004250": {
                    "print_configuration_settings": 1
                }
            },
            "called": [
                "FUN_08004030",
                "FUN_08004250",
                "FUN_08004c48",
                "FUN_08004d7c",
                "FUN_08004dd2"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_process_data_080051b4(void)\n\n{\n  int result;\n  undefined input_buffer [15];\n  byte input_index;\n  \n  result = initialize_data_structure_check();\n  if (result == 0) {\n    display_error_message(10);\n    initialize_data_structure(1);\n    print_configuration_settings();\n  }\n  for (input_index = 0; input_index < 8; input_index = input_index + 1) {\n    result = process_input_check(input_index,input_buffer);\n    if (result == 0) {\n      display_error_message(10);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_process_data_080051b4",
            "entrypoint": "0x080051b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080051b4": "initialize_and_process_data_080051b4",
                "auStack_18": "input_buffer",
                "check_and_initialize_data_structure_08004dd2": "initialize_data_structure_check",
                "check_and_process_input_08004d7c": "process_input_check",
                "display_error_message_08004030": "display_error_message",
                "iVar1": "result",
                "initialize_data_structure_08004c48": "initialize_data_structure",
                "local_9": "input_index",
                "print_configuration_settings_08004250": "print_configuration_settings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005208": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005208",
            "entrypoint": "0x08005208",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005214": {
            "called": [],
            "calling": [
                "FUN_08005250"
            ],
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005214",
            "entrypoint": "0x08005214",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005220": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005220",
            "entrypoint": "0x08005220",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800522c": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800522c",
            "entrypoint": "0x0800522c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005238": {
            "additional_data": {
                "DAT_20000e12": {
                    "data_20000e12": 1,
                    "state": 1,
                    "status": 1,
                    "system_initialized": 1
                },
                "FUN_08005238": {
                    "initialize_and_reset": 7,
                    "initialize_and_reset_data": 1,
                    "initialize_and_reset_system": 2,
                    "initialize_application": 1,
                    "initialize_game": 1,
                    "initialize_system": 19
                },
                "initialize_system_08005250": {
                    "initialize_system": 14,
                    "initialize_system_helper": 5,
                    "initialize_system_internal": 1
                }
            },
            "called": [
                "FUN_08005250"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_and_reset_system_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  initialize_system();\n  return;\n}\n\n",
            "current_name": "initialize_and_reset_system_08005238",
            "entrypoint": "0x08005238",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005238": "initialize_and_reset_system_08005238",
                "initialize_system_08005250": "initialize_system"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005250": {
            "additional_data": {
                "FUC_08005214": {
                    "perform_initialization": 1
                },
                "FUC_08005250": {
                    "initialize_system": 1
                },
                "FUNC_08005214": {
                    "call_initialization_function": 1,
                    "execute": 1,
                    "execute_initialization": 1,
                    "initialize_components": 3,
                    "initialize_data": 2,
                    "initialize_dependencies": 1,
                    "initialize_resources": 2,
                    "initialize_system": 5,
                    "initialize_variables": 1,
                    "perform_initialization": 8,
                    "reset_system": 1,
                    "setup_configuration": 2,
                    "setup_environment": 2
                },
                "FUN_08005250": {
                    "execute_code": 1,
                    "execute_first_function": 1,
                    "execute_function": 2,
                    "execute_initial_setup": 1,
                    "execute_initialization": 7,
                    "execute_initiation": 1,
                    "execute_operation": 1,
                    "execute_startup_function": 1,
                    "initialize": 3,
                    "initialize_application": 4,
                    "initialize_system": 7,
                    "run_initialization": 1
                },
                "return": {
                    "exit": 1
                },
                "void": {
                    "no_return": 1
                }
            },
            "called": [
                "FUN_08005214"
            ],
            "calling": [
                "FUN_080025e8",
                "FUN_08005238",
                "FUN_0800525c"
            ],
            "code": "\nno_return initialize_system_08005250(no_return)\n\n{\n  FUNC_08005214();\n  exit;\n}\n\n",
            "current_name": "initialize_system_08005250",
            "entrypoint": "0x08005250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005250": "initialize_system_08005250",
                "return": "exit",
                "void": "no_return"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800525c": {
            "additional_data": {
                "DAT_20000e12": {
                    "previous_byte": 1,
                    "previous_input": 1,
                    "previous_input_byte": 1,
                    "saved_input_byte": 1,
                    "stored_byte": 1,
                    "stored_input": 1,
                    "stored_value": 1
                },
                "FUNC_08005208": {
                    "additional_processing": 1,
                    "execute_instructions": 1,
                    "final_process": 1,
                    "final_processing": 4,
                    "finalize_process": 5,
                    "finalize_processing": 9,
                    "perform_additional_tasks": 1,
                    "process_data": 1
                },
                "FUNC_08005220": {
                    "do_something_else": 2,
                    "handle_byte_greater_than_one": 1,
                    "handle_case_non_zero": 1,
                    "handle_high_input": 1,
                    "handle_input_greater_than_zero": 2,
                    "handle_nonzero_input": 1,
                    "handle_param_greater_than_0": 1,
                    "handle_param_greater_than_1": 1,
                    "handle_positive_data": 1,
                    "handle_positive_input": 1,
                    "handle_success": 1,
                    "handle_valid_input": 6,
                    "handle_valid_param": 1,
                    "positive_input_handler": 1,
                    "process_greater_than_one": 1,
                    "process_positive_input_params": 1
                },
                "FUNC_0800522c": {
                    "do_something": 2,
                    "handle_byte_lower_than_one": 1,
                    "handle_case_zero": 1,
                    "handle_error": 1,
                    "handle_input_zero": 2,
                    "handle_invalid_input": 6,
                    "handle_invalid_param": 1,
                    "handle_low_input": 1,
                    "handle_negative_data": 1,
                    "handle_negative_input": 1,
                    "handle_param_less_than_1": 2,
                    "handle_zero_input": 1,
                    "negative_input_handler": 1,
                    "process_input_param_zero": 1,
                    "process_less_than_one": 1
                },
                "FUN_0800525c": {
                    "check_and_update_parameter": 1,
                    "handle_input": 1,
                    "handle_param": 2,
                    "process_and_initialize": 3,
                    "process_and_update_data": 3,
                    "process_and_update_value": 1,
                    "process_byte": 3,
                    "process_byte_data": 1,
                    "process_data": 9,
                    "process_input": 1,
                    "process_or_init": 1,
                    "process_param": 2,
                    "process_param1": 1,
                    "process_param_data": 1,
                    "process_parameter": 1
                },
                "initialize_system_08005250": {
                    "initialize_system": 23
                },
                "param_1": {
                    "byte_data": 1,
                    "byte_to_process": 1,
                    "byte_value": 2,
                    "data": 1,
                    "input": 5,
                    "input_byte": 13,
                    "input_param": 5,
                    "input_value": 3
                },
                "process_data_blocks_08002fd4": {
                    "initialize_data_blocks": 1,
                    "process_data_blocks": 19
                }
            },
            "called": [
                "FUN_08005250",
                "FUN_08005220",
                "FUN_0800522c",
                "FUN_08002fd4",
                "FUN_08005208"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid process_and_update_data_0800525c(byte input_byte)\n\n{\n  if ((int)(char)input_byte != (uint)DAT_20000e12) {\n    process_data_blocks();\n    if (input_byte == 0) {\n      initialize_system();\n      DAT_20000e12 = input_byte;\n    }\n    else {\n      if ((char)input_byte < '\\x01') {\n        FUNC_0800522c();\n      }\n      else {\n        FUNC_08005220();\n      }\n      FUNC_08005208();\n      DAT_20000e12 = input_byte;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_and_update_data_0800525c",
            "entrypoint": "0x0800525c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800525c": "process_and_update_data_0800525c",
                "initialize_system_08005250": "initialize_system",
                "param_1": "input_byte",
                "process_data_blocks_08002fd4": "process_data_blocks"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052ac": {
            "additional_data": {
                "0xfffffaaf": {
                    "bitmask": 1,
                    "mask_value": 1
                },
                "FUN_080052ac": {
                    "apply_param_to_global_variable": 1,
                    "set_bitmask": 1,
                    "set_bits_in_memory": 1,
                    "set_bitwise_or_masked_value": 1,
                    "set_param_and_update": 1,
                    "update_bitmask": 1,
                    "update_config": 1,
                    "update_config_value": 1,
                    "update_configuration": 1,
                    "update_data": 4,
                    "update_data_mask": 1,
                    "update_data_register": 1,
                    "update_data_with_flags": 1,
                    "update_data_with_mask": 1,
                    "update_flag_value": 1,
                    "update_global_value": 1,
                    "update_memory": 1,
                    "update_memory_address": 1,
                    "update_memory_value": 1,
                    "update_param_bitmask": 1,
                    "update_permission_flags": 1,
                    "update_permissions": 1,
                    "update_register": 1,
                    "update_register_value": 3,
                    "update_settings": 1
                },
                "_DAT_40021014": {
                    "current_config": 1,
                    "current_settings": 1,
                    "data_register": 3,
                    "data_to_update": 1,
                    "existing_bitmask": 1,
                    "existing_data": 3,
                    "existing_data_mask": 1,
                    "existing_permissions": 1,
                    "global_variable": 1,
                    "memory_address": 2,
                    "memory_value": 1,
                    "old_data": 1,
                    "original_value": 2,
                    "param1_value": 1,
                    "permission_flags": 1,
                    "register_value": 5
                },
                "param_1": {
                    "bitmask": 1,
                    "bits_to_set": 1,
                    "config_value": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "new_bitmask": 1,
                    "new_config_value": 1,
                    "new_data": 6,
                    "new_flag_value": 2,
                    "new_permission": 1,
                    "new_permissions": 1,
                    "new_settings": 1,
                    "new_value": 8,
                    "value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08005778",
                "FUN_08005760",
                "FUN_0800583c"
            ],
            "code": "\n\n\nvoid update_data_with_mask_080052ac(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_data_with_mask_080052ac",
            "entrypoint": "0x080052ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052ac": "update_data_with_mask_080052ac",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052dc": {
            "additional_data": {
                "FUN_080052dc": {
                    "apply_bitwise_mask": 1,
                    "set_bit_in_register": 1,
                    "set_bitmask": 1,
                    "set_bits_in_register": 1,
                    "set_bits_with_mask": 1,
                    "set_flag_with_mask": 1,
                    "update_bits": 1,
                    "update_bits_in_register": 1,
                    "update_data": 4,
                    "update_data_and_mask": 1,
                    "update_data_value": 1,
                    "update_data_with_mask": 1,
                    "update_data_with_param": 1,
                    "update_flag_bits": 2,
                    "update_flag_value": 1,
                    "update_flags": 2,
                    "update_global_data": 1,
                    "update_memory_address": 1,
                    "update_memory_value": 2,
                    "update_memory_with_param": 1,
                    "update_multipurpose_register": 1,
                    "update_parameter_and_mask": 1,
                    "update_register_value": 2,
                    "update_value": 1
                },
                "_DAT_40021014": {
                    "current_value": 1,
                    "data_register": 1,
                    "data_to_be_updated": 1,
                    "existing_data": 3,
                    "flag": 1,
                    "flag_register": 2,
                    "flag_value": 1,
                    "flags": 1,
                    "global_data": 1,
                    "memory_address": 2,
                    "memory_value": 3,
                    "multipurpose_register": 1,
                    "original_value": 1,
                    "previous_value": 1,
                    "register": 1,
                    "register_value": 7
                },
                "mask": {
                    "bit_mask": 1
                },
                "newBits": {
                    "bits": 1
                },
                "param_1": {
                    "bit_mask": 1,
                    "bits_to_update": 1,
                    "data": 1,
                    "flag": 1,
                    "input_data": 1,
                    "input_value": 6,
                    "new_bits": 1,
                    "new_data": 3,
                    "new_value": 11,
                    "value": 5
                },
                "param_2": {
                    "register_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\n\n\nvoid update_data_with_mask_080052dc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_data_with_mask_080052dc",
            "entrypoint": "0x080052dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052dc": "update_data_with_mask_080052dc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800530c": {
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800530c",
            "entrypoint": "0x0800530c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005318": {
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005318",
            "entrypoint": "0x08005318",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005324": {
            "additional_data": {
                "FUN_08005324": {
                    "calculate_and_update_data": 1,
                    "calculate_and_update_rate": 1,
                    "calculate_data_rate": 14,
                    "calculate_data_update": 3,
                    "calculate_data_update_rate": 1,
                    "calculate_frequency": 2,
                    "calculate_frequency_scaling": 1,
                    "calculate_time_period": 1,
                    "calculate_update_frequency": 1,
                    "calculate_update_interval": 3,
                    "calculate_update_rate": 2,
                    "calculate_update_value": 1
                },
                "local_14": {
                    "adjusted_data_amount": 1,
                    "adjusted_data_rate": 2,
                    "adjusted_data_size": 1,
                    "adjusted_rate": 3,
                    "adjusted_size": 2,
                    "adjusted_value": 7,
                    "clamped_data_rate": 1,
                    "clamped_input_value": 1,
                    "clamped_value": 6,
                    "min_data_value": 1,
                    "optimized_value": 1,
                    "scaled_frequency": 1,
                    "update_interval": 1,
                    "updated_frequency": 1,
                    "updated_input_value": 1,
                    "valid_input_data_rate": 1
                },
                "param_1": {
                    "data_amount": 1,
                    "data_size": 2,
                    "input_data": 1,
                    "input_data_rate": 4,
                    "input_frequency": 2,
                    "input_rate": 3,
                    "input_size": 1,
                    "input_value": 17
                }
            },
            "called": [
                "FUN_08007bf0"
            ],
            "calling": [
                "FUN_080058a0",
                "FUN_08005814",
                "FUN_080053a0"
            ],
            "code": "\nvoid calculate_data_update_rate_08005324(uint input_value)\n\n{\n  uint adjusted_value;\n  \n  adjusted_value = input_value;\n  if (input_value < 800) {\n    adjusted_value = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjusted_value;\n  update_data_08007bf0(DAT_20000e28);\n  return;\n}\n\n",
            "current_name": "calculate_data_update_rate_08005324",
            "entrypoint": "0x08005324",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005324": "calculate_data_update_rate_08005324",
                "local_14": "adjusted_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005360": {
            "additional_data": {
                "420000": {
                    "threshold": 1
                },
                "DAT_20000e28": {
                    "constant_threshold": 1,
                    "current_value": 1,
                    "increment_value": 1,
                    "initial_value": 4,
                    "previous_value": 1
                },
                "DAT_20000e2c": {
                    "accumulated_value": 2,
                    "counter": 1,
                    "current_value": 5,
                    "sum": 1,
                    "total_value": 1
                },
                "FUN_08005360": {
                    "accumulate_and_check_limit": 2,
                    "accumulate_and_check_threshold": 3,
                    "accumulate_and_reset": 1,
                    "accumulate_and_wrap_around": 1,
                    "calculate_exceeded_threshold": 2,
                    "calculate_exceeds_threshold": 1,
                    "calculate_overflow": 2,
                    "calculate_threshold": 1,
                    "calculate_threshold_exceeded": 2,
                    "check_if_exceeded_limit": 1,
                    "check_if_threshold_exceeded": 3,
                    "check_if_too_large": 1,
                    "check_threshold_exceeded": 6,
                    "increment_data_and_check_threshold": 1,
                    "update_and_check_threshold": 1,
                    "update_and_check_value": 1,
                    "update_counter": 2
                },
                "bVar1": {
                    "exceeded_threshold": 1,
                    "exceeds_limit": 1,
                    "exceeds_threshold": 2,
                    "is_counter_exceeded": 1,
                    "is_exceeded_threshold": 3,
                    "is_limit_exceeded": 1,
                    "is_overflow": 2,
                    "is_threshold_exceeded": 18,
                    "is_value_exceeded": 1,
                    "limit_exceeded": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nbool check_if_threshold_exceeded_08005360(void)\n\n{\n  bool is_threshold_exceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  is_threshold_exceeded = 420000 < DAT_20000e2c;\n  if (is_threshold_exceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return is_threshold_exceeded;\n}\n\n",
            "current_name": "check_if_threshold_exceeded_08005360",
            "entrypoint": "0x08005360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005360": "check_if_threshold_exceeded_08005360",
                "bVar1": "is_threshold_exceeded"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053a0": {
            "additional_data": {
                "0x0": {
                    "null": 1
                },
                "0x10": {
                    "flag1": 1
                },
                "0x100": {
                    "flag5": 1
                },
                "0x1a": {
                    "offset2": 1
                },
                "0x1c": {
                    "offset3": 1
                },
                "0x1e": {
                    "offset4": 1
                },
                "0x20": {
                    "flag2": 1
                },
                "0x200": {
                    "flag6": 1
                },
                "0x440": {
                    "flag4": 1
                },
                "0x8": {
                    "offset1": 1
                },
                "0x80": {
                    "flag3": 1
                },
                "210000": {
                    "max_update_rate": 1
                },
                "420000": {
                    "offset5": 1
                },
                "DAG_20000e14": {
                    "counter_1": 1
                },
                "DAG_20000e18": {
                    "counter_4": 1
                },
                "DAG_20000e1c": {
                    "counter_5": 1
                },
                "DAG_20000e20": {
                    "counter_2": 1
                },
                "DAG_20000e24": {
                    "counter_3": 1
                },
                "DAG_20000e2c": {
                    "data_threshold": 1
                },
                "DAG_20000e30": {
                    "data_update_rate": 1
                },
                "DAG_20000e38": {
                    "data_block": 1
                },
                "DAG_20000e3c": {
                    "data_flags": 1
                },
                "DAG_20000e3e": {
                    "current_data": 1
                },
                "DAG_20000e40": {
                    "previous_data": 1
                },
                "DAG_20000ea9": {
                    "data_type": 1
                },
                "DAG_20000eaa": {
                    "bitwise_flag": 1
                },
                "DAG_20000eac": {
                    "bitwise_flag_2": 1
                },
                "DAG_20000eb0": {
                    "bitwise_flag_3": 1
                },
                "DAG_20000eb4": {
                    "bitwise_flag_4": 1
                },
                "DAG_20000eb8": {
                    "threshold_exceeded": 1
                },
                "DAG_20000ed4": {
                    "variable_1": 1
                },
                "DAG_20000ed6": {
                    "variable_2": 1
                },
                "DAT_20000e14": {
                    "data1": 2,
                    "data14": 1,
                    "data_block_value_2": 1,
                    "data_element_offset_1": 1,
                    "data_offset1": 1,
                    "var8": 1
                },
                "DAT_20000e16": {
                    "limit": 1
                },
                "DAT_20000e18": {
                    "data17": 1,
                    "data3": 2,
                    "data_block_value_4": 1,
                    "data_element_offset_3": 1,
                    "data_offset4": 1,
                    "var5": 1
                },
                "DAT_20000e1a": {
                    "limit": 1
                },
                "DAT_20000e1c": {
                    "data18": 1,
                    "data4": 2,
                    "data_block_value_5": 1,
                    "data_element_offset_4": 1,
                    "data_offset5": 1,
                    "var13": 1
                },
                "DAT_20000e1e": {
                    "limit": 1
                },
                "DAT_20000e20": {
                    "data15": 1,
                    "data2": 2,
                    "data_block_value_3": 1,
                    "data_element_offset_2": 1,
                    "data_offset2": 1,
                    "var3": 1
                },
                "DAT_20000e22": {
                    "threshold_exceeded": 1
                },
                "DAT_20000e24": {
                    "counter": 2,
                    "data19": 1,
                    "data_counter": 1,
                    "data_element_counter": 1,
                    "data_offset3": 1,
                    "var12": 1
                },
                "DAT_20000e2c": {
                    "data6": 1,
                    "data_update_interval": 1,
                    "data_update_rate_threshold": 1,
                    "max_data_rate": 1,
                    "threshold": 2,
                    "update_time": 1
                },
                "DAT_20000e30": {
                    "data5": 1,
                    "data_update_rate": 6
                },
                "DAT_20000e34": {
                    "data5": 1,
                    "data7": 1,
                    "data_block_value_1": 1,
                    "data_threshold": 1,
                    "data_value": 1,
                    "var1": 1
                },
                "DAT_20000e38": {
                    "current_data": 1,
                    "current_data_block": 1,
                    "data4": 1,
                    "data_block": 4
                },
                "DAT_20000e3c": {
                    "bitwise_flags": 1,
                    "data13": 1,
                    "data_element_flags": 1,
                    "data_flag": 1,
                    "data_flags": 1,
                    "data_mask": 1,
                    "flag": 1
                },
                "DAT_20000e3e": {
                    "current_data": 2,
                    "data": 1,
                    "data16": 1,
                    "data_element": 1,
                    "data_value": 1,
                    "var7": 1
                },
                "DAT_20000e40": {
                    "data2": 1,
                    "data_element_update": 1,
                    "previous_data": 3,
                    "previous_data_value": 2
                },
                "DAT_20000ea9": {
                    "condition": 1,
                    "condition_flag": 2,
                    "data_update_type": 1,
                    "flag2": 1,
                    "update_type": 1,
                    "update_type_flag": 1
                },
                "DAT_20000eaa": {
                    "bitwise_condition": 1,
                    "bitwise_flag": 1,
                    "bitwise_flags": 2,
                    "condition": 1,
                    "flag1": 1
                },
                "DAT_20000eac": {
                    "bitwise_flag_count_1": 1,
                    "data_count3": 1,
                    "flag3": 1,
                    "flag_1_counter": 1,
                    "value1": 1,
                    "var9": 1
                },
                "DAT_20000eb0": {
                    "bitwise_flag_count_2": 1,
                    "data_count1": 1,
                    "flag6": 1,
                    "flag_2_counter": 1,
                    "value2": 1,
                    "var10": 1
                },
                "DAT_20000eb4": {
                    "bitwise_flag_count_3": 1,
                    "data_count2": 1,
                    "flag7": 1,
                    "flag_3_counter": 1,
                    "value3": 1,
                    "var11": 1
                },
                "DAT_20000ed4": {
                    "bit_mask1": 1,
                    "xor1": 1,
                    "xor_data1": 2,
                    "xor_key_1": 1,
                    "xor_mask1": 1,
                    "xor_value_1": 1
                },
                "DAT_20000ed6": {
                    "bit_mask2": 1,
                    "xor2": 1,
                    "xor_data2": 2,
                    "xor_key_2": 1,
                    "xor_mask2": 1,
                    "xor_value_2": 1
                },
                "FUN_080053a0": {
                    "update_data": 29,
                    "update_data_with_mask": 2
                },
                "PTR_08002f74": {
                    "get_current_data_block": 1
                },
                "PTR_080052dc": {
                    "update_data_with_mask": 1
                },
                "calculate_data_update_rate_08005324": {
                    "calculate_data_update_rate": 25,
                    "calculate_update_rate": 5
                },
                "check_if_threshold_exceeded_08005360": {
                    "check_if_threshold_exceeded": 13,
                    "check_threshold_exceeded": 17
                },
                "clear_bitwise_flags_and_check_condition_080057e4": {
                    "clear_bitwise_flags_and_check_condition": 18,
                    "clear_flags_and_check_condition": 11,
                    "clear_flags_check_condition": 1
                },
                "get_current_data_block_08002f74": {
                    "get_current_block": 2,
                    "get_current_data_block": 28
                },
                "iVar1": {
                    "result": 7,
                    "threshold_exceeded": 10
                },
                "return": {
                    "return": 1
                },
                "update_data_with_mask_080052dc": {
                    "apply_mask_to_data": 2,
                    "update_data_with_mask": 21
                },
                "update_limit_if_not_equal_08002f40": {
                    "update_limit_if_not_equal": 11
                }
            },
            "called": [
                "FUN_080052dc",
                "FUN_080057e4",
                "FUN_08002f74",
                "FUN_08005360",
                "FUN_08005324",
                "FUN_08002f40"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_data_with_mask_080053a0(void)\n\n{\n  int threshold_exceeded;\n  \n  update_data_with_mask_080053a0(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_current_data_block_08002f74();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      clear_bitwise_flags_and_check_condition();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        calculate_data_update_rate(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        threshold_exceeded = check_if_threshold_exceeded_08005360();\n        if (threshold_exceeded != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            calculate_data_update_rate(DAT_20000e30);\n          }\n          else {\n            clear_bitwise_flags_and_check_condition();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        threshold_exceeded = check_if_threshold_exceeded_08005360();\n        if (threshold_exceeded != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          calculate_data_update_rate(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          calculate_data_update_rate(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        threshold_exceeded = check_if_threshold_exceeded_08005360();\n        if (threshold_exceeded != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          calculate_data_update_rate(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      update_limit_if_not_equal();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "current_name": "update_data_with_mask_080053a0",
            "entrypoint": "0x080053a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053a0": "update_data_with_mask_080053a0",
                "calculate_data_update_rate_08005324": "calculate_data_update_rate",
                "check_if_threshold_exceeded_08005360": "check_threshold_exceeded",
                "clear_bitwise_flags_and_check_condition_080057e4": "clear_bitwise_flags_and_check_condition",
                "get_current_data_block_08002f74": "get_current_data_block",
                "iVar1": "threshold_exceeded",
                "update_data_with_mask_080052dc": "update_data_with_mask",
                "update_limit_if_not_equal_08002f40": "update_limit_if_not_equal"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005760": {
            "additional_data": {
                "DAT_20000ed4": {
                    "data": 24,
                    "data_to_update": 4,
                    "data_with_mask": 2
                },
                "FUN_08005760": {
                    "update_data": 14,
                    "update_data_using_mask": 4,
                    "update_data_with_mask": 13
                },
                "update_data_with_mask_080052ac": {
                    "apply_mask": 5,
                    "apply_mask_to_data": 1
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_data_with_mask_08005760(void)\n\n{\n  update_data_with_mask_08005760_080052ac(DAT_20000ed4);\n  return;\n}\n\n",
            "current_name": "update_data_with_mask_08005760",
            "entrypoint": "0x08005760",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005760": "update_data_with_mask_08005760",
                "update_data_with_mask_080052ac": "apply_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005778": {
            "additional_data": {
                "DAT_20000e40": {
                    "data": 21,
                    "data_to_be_updated": 1,
                    "data_to_update": 2,
                    "data_with_mask": 2,
                    "masked_data": 1
                },
                "FUN_08005778": {
                    "update_data": 14,
                    "update_data_and_mask": 1,
                    "update_data_from_mask": 1,
                    "update_data_using_mask": 3,
                    "update_data_with_mask": 12
                },
                "update_data_with_mask_080052ac": {
                    "apply_mask": 3,
                    "update_data_with_mask": 2
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_data_with_mask_08005778(void)\n\n{\n  update_data_with_mask_08005778_080052ac(DAT_20000e40);\n  return;\n}\n\n",
            "current_name": "update_data_with_mask_08005778",
            "entrypoint": "0x08005778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005778": "update_data_with_mask_08005778",
                "update_data_with_mask_080052ac": "apply_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005790": {
            "additional_data": {
                "DAT_20000e3c": {
                    "stored_value1": 1,
                    "variable1": 1
                },
                "DAT_20000e3e": {
                    "stored_value2": 1,
                    "variable2": 1
                },
                "DAT_20000ea9": {
                    "flag": 1,
                    "status": 1
                },
                "DAT_20000ec9": {
                    "param": 1,
                    "parameter": 1
                },
                "DAT_20000ed4": {
                    "new_value1": 1,
                    "value1": 1
                },
                "DAT_20000ed6": {
                    "new_value2": 1,
                    "value2": 1
                },
                "FUNC_08005318": {
                    "call_initialize_function": 1,
                    "call_some_function": 2,
                    "execute_preparation_function": 1,
                    "initialize": 1,
                    "perform_initialization": 1,
                    "some_initialization_function": 1
                },
                "FUN_08005790": {
                    "execute_conditional_operation": 1,
                    "execute_function": 1,
                    "execute_logic": 1,
                    "initialize": 1,
                    "initialize_and_set_globals": 1,
                    "initialize_data": 1,
                    "initialize_global_data": 2,
                    "initialize_global_variables": 18,
                    "initialize_globals": 2,
                    "process_data": 1,
                    "process_input": 1,
                    "update_global_variables": 1
                },
                "set_flags_and_values_08007b70": {
                    "configure_flags": 3,
                    "initialize_flags_and_values": 1,
                    "set_flags": 1,
                    "set_flags_and_values": 23,
                    "update_flags": 2,
                    "update_flags_and_values": 1
                },
                "set_global_variable_08007c40": {
                    "set_current_value": 2,
                    "set_error_code": 1,
                    "set_flag": 6,
                    "set_flag_value": 2,
                    "set_global_variable": 5,
                    "set_global_variable1": 1,
                    "set_global_variable_a": 3,
                    "set_global_variable_with_constant": 1,
                    "set_initial_value": 4,
                    "set_mode": 3,
                    "set_option": 1,
                    "set_variable": 1,
                    "store_initial_value": 1
                },
                "set_param_into_global_variable_08007c5e": {
                    "calculate_param": 1,
                    "calculate_value": 1,
                    "set_calculated_value": 1,
                    "set_computed_value": 2,
                    "set_global_variable2": 1,
                    "set_global_variable_b": 3,
                    "set_global_variable_with_computation": 1,
                    "set_multiplier": 2,
                    "set_param_in_global_variable": 1,
                    "set_param_into_global_variable": 6,
                    "set_param_multiplier": 1,
                    "set_param_to_flag": 1,
                    "set_param_value": 4,
                    "set_parameter": 4,
                    "set_parameter_into_variable": 1,
                    "set_threshold": 1
                }
            },
            "called": [
                "FUN_08007c40",
                "FUN_08007c5e",
                "FUN_08005318",
                "FUN_08007b70"
            ],
            "calling": [
                "FUN_08001d4c",
                "FUN_0800585c",
                "FUN_0800583c"
            ],
            "code": "\nvoid initialize_global_variables_08005790(void)\n\n{\n  FUNC_08005318();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_global_variable_08007c40(0x69);\n    set_param_into_global_variable_08007c5e((DAT_20000ec9 + 5) * 0x15);\n    set_flags_and_values_08007b70();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_global_variables_08005790",
            "entrypoint": "0x08005790",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005790": "initialize_global_variables_08005790",
                "set_flags_and_values_08007b70": "set_flags_and_values",
                "set_global_variable_08007c40": "set_flag",
                "set_param_into_global_variable_08007c5e": "set_param_into_global_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057e4": {
            "additional_data": {
                "DAT_20000eaa": {
                    "bitwise_flags": 8,
                    "control": 1,
                    "data_value": 1,
                    "flag2": 3,
                    "flag_2": 1,
                    "status_variable": 1
                },
                "DAT_20000ef8": {
                    "condition_variable": 1,
                    "data_flag": 2,
                    "error_check": 1,
                    "flag": 1,
                    "flag1": 3,
                    "flag_1": 1,
                    "flag_value": 2,
                    "flag_variable": 4
                },
                "FUNC_0800530c": {
                    "check_conditions": 1,
                    "do_something": 1,
                    "execute_action": 4,
                    "execute_function": 3,
                    "execute_operation": 1,
                    "execute_some_operation": 1,
                    "execute_special_action": 3,
                    "execute_specific_function": 2,
                    "execute_task": 2,
                    "execute_when_flag_set": 1,
                    "perform_action": 6,
                    "perform_cleanup": 1,
                    "perform_operation": 4
                },
                "FUN_080057e4": {
                    "check_and_execute_action": 1,
                    "check_flags_and_call_function": 1,
                    "clear_and_check_flags": 1,
                    "clear_and_update_flags": 1,
                    "clear_bitwise_flags": 5,
                    "clear_bitwise_flags_and_check": 3,
                    "clear_bitwise_flags_and_check_condition": 4,
                    "clear_bitwise_flags_and_check_conditions": 1,
                    "clear_bitwise_flags_and_trigger_function": 1,
                    "clear_flags_and_execute": 1,
                    "clear_flags_and_execute_function": 1,
                    "initialize_bitwise_flags": 1,
                    "initialize_flags": 6,
                    "update_flags": 4
                },
                "VAR_20000eaa": {
                    "bitwise_flags_variable": 1
                },
                "VAR_20000ef8": {
                    "condition_check_variable": 1
                },
                "clear_bitwise_flags_08007bc2": {
                    "clear_bitwise_flags": 11,
                    "clear_flags": 1
                },
                "func_0800530c": {
                    "execute_update": 1
                },
                "original_function_name": {
                    "more_descriptive_function_name": 1
                },
                "original_function_name_2": {
                    "new_function_name_2": 1
                },
                "original_parameter_name_1": {
                    "new_parameter_name_1": 1
                },
                "original_parameter_name_2": {
                    "new_parameter_name_2": 1
                },
                "original_variable_name_1": {
                    "new_variable_name_1": 2
                },
                "original_variable_name_2": {
                    "new_variable_name_2": 2
                }
            },
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "calling": [
                "FUN_080025e8",
                "FUN_080053a0",
                "FUN_08001d4c",
                "FUN_0800583c"
            ],
            "code": "\nvoid clear_bitwise_flags_and_check_condition_080057e4(void)\n\n{\n  clear_bitwise_flags_08007bc2();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    FUNC_0800530c();\n  }\n  return;\n}\n\n",
            "current_name": "clear_bitwise_flags_and_check_condition_080057e4",
            "entrypoint": "0x080057e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057e4": "clear_bitwise_flags_and_check_condition_080057e4",
                "clear_bitwise_flags_08007bc2": "clear_bitwise_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005814": {
            "additional_data": {
                "0": {
                    "initial_value": 1
                },
                "0x24": {
                    "memory_size": 1,
                    "num_bytes": 1
                },
                "20000e14": {
                    "data_block": 1,
                    "data_buffer": 1
                },
                "20000e38": {
                    "update_rate": 2
                },
                "800": {
                    "rate": 1,
                    "update_rate": 2
                },
                "DAT_20000e14": {
                    "data": 3,
                    "data_array": 2,
                    "data_buffer": 6,
                    "initialized_data": 1
                },
                "DAT_20000e38": {
                    "counter": 1,
                    "data_update_flag": 1,
                    "flag": 1,
                    "update_flag": 3,
                    "update_rate": 6,
                    "update_rate_flag": 1,
                    "update_trigger": 1
                },
                "FUN_08005814": {
                    "initialize_data": 31
                },
                "calculate_data_update_rate_08005324": {
                    "calculate_data_update_rate": 18,
                    "calculate_update_rate": 10,
                    "update_data_rate": 1
                },
                "memset_with_value_0800b430": {
                    "clear_memory": 10,
                    "initialize_memory": 11,
                    "set_memory_value": 1,
                    "set_memory_with_value": 4
                },
                "void": {
                    "initialize_data": 1
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\ninitialize_data_08005814 initialize_data_08005814(initialize_data_08005814)\n\n{\n  memset_with_value_0800b430(&DAT_20000e14,0,0x24);\n  calculate_data_update_rate(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08005814",
            "entrypoint": "0x08005814",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005814": "initialize_data_08005814",
                "calculate_data_update_rate_08005324": "calculate_data_update_rate",
                "memset_with_value_0800b430": "initialize_memory",
                "void": "initialize_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800583c": {
            "additional_data": {
                "DAT_20000ed4": {
                    "data": 1
                },
                "FUN_0800583c": {
                    "initialize_and_check_conditions": 5,
                    "initialize_and_check_flags": 4,
                    "initialize_and_clear_bitwise_flags": 1,
                    "initialize_and_update_data": 3,
                    "initialize_application": 1,
                    "initialize_program": 1,
                    "initialize_system": 1,
                    "perform_updated_initialization": 1,
                    "update_and_check_conditions": 1,
                    "update_and_check_flags": 4,
                    "update_and_initialize": 1,
                    "update_and_initialize_data": 3,
                    "update_and_initialize_flags": 2,
                    "update_data_and_check_condition": 2,
                    "update_initialized_data": 1
                },
                "clear_bitwise_flags_and_check_condition_080057e4": {
                    "clear_bitwise_flags_and_check_condition": 8,
                    "clear_flag_and_check_condition": 1,
                    "clear_flags_and_check_condition": 21,
                    "clear_flags_check_condition": 1
                },
                "initialize_global_variables_08005790": {
                    "initialize_global_variables": 28,
                    "initialize_globals": 3
                },
                "update_data_with_mask_080052ac": {
                    "apply_data_mask": 1,
                    "update_data": 2,
                    "update_data_with_mask": 18
                }
            },
            "called": [
                "FUN_080057e4",
                "FUN_08005790",
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid update_and_initialize_data_0800583c(void)\n\n{\n  update_data_with_mask_080052ac(DAT_20000ed4);\n  initialize_global_variables();\n  clear_flags_and_check_condition();\n  return;\n}\n\n",
            "current_name": "update_and_initialize_data_0800583c",
            "entrypoint": "0x0800583c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800583c": "update_and_initialize_data_0800583c",
                "clear_bitwise_flags_and_check_condition_080057e4": "clear_flags_and_check_condition",
                "initialize_global_variables_08005790": "initialize_global_variables",
                "update_data_with_mask_080052ac": "update_data_with_mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800585c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "current_state": 1,
                    "data_status": 1,
                    "global_variable": 1,
                    "mode": 1,
                    "stage_status": 2,
                    "state": 1,
                    "status": 4,
                    "status_flag": 1,
                    "status_variable": 1
                },
                "FUN_0800585c": {
                    "initialize_global_variables_if_condition_met": 1,
                    "initialize_global_variables_if_needed": 1,
                    "initialize_global_variables_if_second_byte_is_two": 1,
                    "initialize_global_variables_if_state_is_2": 1,
                    "initialize_global_variables_if_status_equals_2": 1,
                    "initialize_global_vars_if_mode_2": 1,
                    "initialize_globals": 1,
                    "initialize_globals_if_needed": 1,
                    "initialize_if_02_and_initialize_globals": 1,
                    "initialize_if_condition": 1,
                    "initialize_if_condition_met": 1,
                    "initialize_if_current_state_is_2_and_initialize_global_variables": 1,
                    "initialize_if_data_is_2": 1,
                    "initialize_if_flag_is_set": 1,
                    "initialize_if_mode_changed": 1,
                    "initialize_if_mode_is_two": 1,
                    "initialize_if_necessary": 1,
                    "initialize_if_needed": 7,
                    "initialize_if_pending_stage_transition": 1,
                    "initialize_if_previous_process_completed": 1,
                    "initialize_if_stage_finished": 1,
                    "initialize_next_stage": 1,
                    "update_data_if_needed": 1,
                    "update_status_and_initialize": 2
                },
                "initialize_global_variables_08005790": {
                    "initialize_global_variables": 15,
                    "initialize_global_vars": 2,
                    "initialize_globals": 3,
                    "initialize_globals_helper": 1
                }
            },
            "called": [
                "FUN_08005790"
            ],
            "calling": [
                "FUN_080024c4",
                "FUN_08003a74",
                "FUN_08001e98"
            ],
            "code": "\nvoid initialize_globals_if_needed_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    initialize_global_variables();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_globals_if_needed_0800585c",
            "entrypoint": "0x0800585c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800585c": "initialize_globals_if_needed_0800585c",
                "initialize_global_variables_08005790": "initialize_global_variables"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800587c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20000ea9": {
                    "current_state": 2,
                    "current_status": 8,
                    "data_flag": 1,
                    "state": 2,
                    "status": 9,
                    "status_flag": 4
                },
                "DAT_20000eb8": {
                    "counter": 26
                },
                "DA_20000ea9": {
                    "status_value": 1
                },
                "DA_20000eb8": {
                    "counter": 1
                },
                "FUN_0800587c": {
                    "initialize_state": 1,
                    "set_value_and_reset_counter": 1,
                    "update_data": 2,
                    "update_data_if_condition_met": 1,
                    "update_data_if_needed": 1,
                    "update_state": 3,
                    "update_status": 21,
                    "update_status_if_condition_met": 1
                },
                "VAR_20000ea9": {
                    "status": 1
                },
                "VAR_20000eb8": {
                    "counter": 1
                },
                "ea9": {
                    "status": 1
                },
                "eb8": {
                    "counter": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid update_status_if_condition_met_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "current_name": "update_status_if_condition_met_0800587c",
            "entrypoint": "0x0800587c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800587c": "update_status_if_condition_met_0800587c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058a0": {
            "additional_data": {
                "DAT_20000e24": {
                    "initial_value": 2,
                    "previous_offset": 1
                },
                "DAT_20000e2c": {
                    "data_update_rate": 1,
                    "update_rate": 2
                },
                "DAT_20000e30": {
                    "data_size": 1,
                    "data_update_flag": 1,
                    "update_flag": 1
                },
                "DAT_20000e38": {
                    "data_ptr": 2,
                    "input_data": 1
                },
                "DAT_20000ea9": {
                    "output_status": 1,
                    "status": 2
                },
                "FUN_080058a0": {
                    "initialize_data": 1,
                    "initialize_data_processing": 5,
                    "process_combined_data": 2,
                    "process_data": 12,
                    "update_combined_data": 1,
                    "update_data": 8,
                    "update_data_processing": 2
                },
                "VAR_20000e24": {
                    "previous_data": 1
                },
                "VAR_20000e2c": {
                    "data_update_rate": 1
                },
                "VAR_20000e30": {
                    "data_update_flag": 1
                },
                "VAR_20000e38": {
                    "data_ptr": 1
                },
                "VAR_20000ea9": {
                    "data_status": 1
                },
                "calculate_data_update_rate_08005324": {
                    "calculate_data_update_rate": 26,
                    "calculate_update_rate": 3,
                    "update_data_rate": 1
                },
                "process_combined_data_08003618": {
                    "calculate_combined_data": 1,
                    "process_combined_data": 27,
                    "process_data": 1
                }
            },
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid process_combined_data_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    process_combined_data_080058a0(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    calculate_data_update_rate(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "current_name": "process_combined_data_080058a0",
            "entrypoint": "0x080058a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058a0": "process_combined_data_080058a0",
                "calculate_data_update_rate_08005324": "calculate_data_update_rate",
                "process_combined_data_08003618": "process_combined_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005900": {
            "additional_data": {
                "0x18": {
                    "ascii_cancel": 1
                },
                "0x21": {
                    "ascii_exclamation_point": 1
                },
                "0x3f": {
                    "ascii_question_mark": 1
                },
                "0x40": {
                    "ascii_at": 1
                },
                "0x7e": {
                    "ascii_tilde": 1
                },
                "0x7f": {
                    "ascii_delete": 1
                },
                "DAT_20000eaa": {
                    "control_flags": 1,
                    "feature_flag": 1,
                    "flag": 1,
                    "flag_register": 1,
                    "flag_value": 1,
                    "flag_variable": 2,
                    "flags": 2,
                    "function_flags": 1,
                    "status": 1,
                    "status_flag": 1,
                    "status_flags": 4,
                    "system_components": 1,
                    "system_flags": 4,
                    "system_status": 1
                },
                "FUN_08005900": {
                    "check_and_set_flags": 1,
                    "check_and_update_features": 1,
                    "check_and_update_flags": 3,
                    "check_and_update_settings": 1,
                    "check_and_update_status": 1,
                    "check_byte": 1,
                    "check_function_capabilities": 1,
                    "check_input_and_update_flag": 1,
                    "handle_byte": 3,
                    "handle_command": 1,
                    "process_byte": 10,
                    "process_byte_signal": 1,
                    "process_input_byte": 5,
                    "update_system_status": 1
                },
                "initialize_and_check_system_components_080025e8": {
                    "initialize_and_check_system_components": 2,
                    "initialize_system_components": 1
                },
                "param_1": {
                    "byte_to_check": 1,
                    "byte_value": 15,
                    "command": 1,
                    "data": 1,
                    "incoming_byte": 1,
                    "input": 1,
                    "input_byte": 8,
                    "input_value": 2,
                    "param": 1
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\nundefined4 process_input_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        initialize_and_check_system_components();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_input_byte_08005900",
            "entrypoint": "0x08005900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005900": "process_input_byte_08005900",
                "initialize_and_check_system_components_080025e8": "initialize_and_check_system_components",
                "param_1": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800597c": {
            "additional_data": {
                "": {
                    "": 3
                },
                "DAT_": {
                    "": 1
                },
                "FUN_0800597c": {
                    "broadcast_interrupt": 1,
                    "call_software_interrupt": 1,
                    "call_system_interrupt": 2,
                    "execute_software_interrupt": 4,
                    "execute_system_call": 1,
                    "execute_system_interrupt": 5,
                    "fetch_data_and_return": 1,
                    "initiate_system_interrupt": 1,
                    "interrupt_function": 2,
                    "interrupt_system_call": 1,
                    "invoke_system_interrupt": 1,
                    "perform_interrupt": 1,
                    "perform_software_interrupt": 2,
                    "perform_system_interrupt": 1,
                    "retrieve_system_info": 1,
                    "send_interrupt_signal": 1,
                    "software_interrupt_handler": 1,
                    "trigger_software_interrupt": 2,
                    "trigger_system_call": 1,
                    "trigger_system_interrupt": 1
                },
                "PTR_": {
                    "": 1
                },
                "PTR_0x3f": {
                    "interrupt_number": 1
                },
                "PTR_XXXXXXX": {
                    "ptr_xxxxxxx": 1
                },
                "original_function_name": {
                    "more_descriptive_function_name": 1
                },
                "original_parameter_name1": {
                    "new_parameter_name1": 1
                },
                "software_interrupt": {
                    "call_interrupt_function": 1,
                    "call_system_function": 1,
                    "execute_interrupt": 5,
                    "handle_software_interrupt": 1,
                    "interrupt_execution": 1,
                    "interrupt_handler": 1,
                    "interrupt_number": 1,
                    "invoke_interrupt": 2,
                    "perform_interrupt": 2,
                    "trigger_interrupt": 1,
                    "trigger_software_interrupt": 1,
                    "trigger_system_call": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08005984"
            ],
            "code": "\nvoid execute_system_interrupt_0800597c(void)\n\n{\n  execute_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_system_interrupt_0800597c",
            "entrypoint": "0x0800597c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800597c": "execute_system_interrupt_0800597c",
                "software_interrupt": "execute_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005984": {
            "additional_data": {
                "FUN_08005984": {
                    "execute_if_dat_not_zero": 1,
                    "execute_interrupt": 6,
                    "execute_interrupt_handler": 5,
                    "execute_interrupt_if_flag_zero": 1,
                    "execute_or_nothing": 1,
                    "execute_or_return_result": 1,
                    "execute_or_skip_interrupt": 1,
                    "execute_or_skip_system_interrupt": 5,
                    "execute_system_interrupt": 9,
                    "execute_system_interrupt_handler": 1
                },
                "param_1": {
                    "arg": 1,
                    "flag": 1,
                    "handler_param": 1,
                    "input": 1,
                    "input_param": 4,
                    "input_value": 10,
                    "interrupt_code": 1,
                    "interrupt_number": 3,
                    "interrupt_param": 1,
                    "interrupt_type": 4,
                    "parameter": 1,
                    "status": 1,
                    "task": 1,
                    "value": 1
                },
                "uVar1": {
                    "execution_result": 2,
                    "output_value": 1,
                    "result": 26,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_0800597c"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nundefined4 execute_or_skip_system_interrupt_08005984(undefined4 input_value)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = execute_system_interrupt_0800597c(1,input_value,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "execute_or_skip_system_interrupt_08005984",
            "entrypoint": "0x08005984",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005984": "execute_or_skip_system_interrupt_08005984",
                "param_1": "input_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059b4": {
            "additional_data": {
                "FUNC_08005a50": {
                    "execute_function": 8,
                    "execute_main_function": 2,
                    "execute_main_operation": 1,
                    "execute_operation": 2,
                    "perform_action": 3,
                    "perform_additional_functionality": 2,
                    "perform_additional_operations": 3,
                    "perform_additional_processing": 1,
                    "perform_additional_tasks": 2,
                    "perform_function": 2,
                    "perform_operation": 3,
                    "perform_other_function": 1,
                    "perform_task": 1
                },
                "FUN_080059b4": {
                    "configure_and_execute": 1,
                    "initialize": 1,
                    "initialize_and_configure": 1,
                    "initialize_and_configure_application": 1,
                    "initialize_and_process_data": 1,
                    "initialize_and_setup": 1,
                    "initialize_and_start": 1,
                    "initialize_device": 1,
                    "initialize_parameters": 2,
                    "initialize_program": 1,
                    "initialize_settings": 1,
                    "initialize_system": 19
                },
                "_DAT_40023c00": {
                    "device_flags": 1
                },
                "set_bits_in_register_08006ce0": {
                    "configure_bits_in_register": 1,
                    "configure_register": 3,
                    "configure_register_bits": 9,
                    "configure_registers": 1,
                    "set_bits_in_register": 9,
                    "set_flag_bits": 1,
                    "set_register_bits": 7
                },
                "validate_and_modify_param_08006d72": {
                    "validate_and_adjust_parameter": 16,
                    "validate_and_modify": 1,
                    "validate_and_modify_parameter": 10,
                    "validate_and_set_param": 1,
                    "validate_and_set_parameter": 1,
                    "validate_and_update_parameter": 2
                }
            },
            "called": [
                "FUN_08005a50",
                "FUN_08006ce0",
                "FUN_08006d72"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nundefined4 initialize_system_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  validate_and_adjust_parameter(16000);\n  configure_register_bits(3);\n  FUNC_08005a50();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_080059b4",
            "entrypoint": "0x080059b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "set_bits_in_register_08006ce0": "configure_register_bits",
                "validate_and_modify_param_08006d72": "validate_and_adjust_parameter"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f8": {
            "additional_data": {
                "FUNC_08005a5c": {
                    "do_something": 1,
                    "execute_other_function": 1,
                    "perform_additional_setup": 2,
                    "perform_additional_tasks": 2,
                    "perform_initialization": 1,
                    "perform_operation": 2,
                    "process_data": 1
                },
                "FUN_080059f8": {
                    "initialize_data": 28,
                    "initialize_variables": 2,
                    "reset_data": 1
                },
                "_DAT_40023810": {
                    "data3": 13,
                    "data_3": 5,
                    "data_entry_3": 1,
                    "data_field3": 1,
                    "data_var3": 1,
                    "data_variable3": 1
                },
                "_DAT_40023814": {
                    "data4": 13,
                    "data_4": 5,
                    "data_entry_4": 1,
                    "data_field4": 1,
                    "data_var4": 1,
                    "data_variable4": 1
                },
                "_DAT_40023818": {
                    "data5": 13,
                    "data_5": 5,
                    "data_entry_5": 1,
                    "data_field5": 1,
                    "data_var5": 1,
                    "data_variable5": 1
                },
                "_DAT_40023820": {
                    "data1": 13,
                    "data_1": 5,
                    "data_entry_1": 1,
                    "data_field1": 1,
                    "data_item1": 1,
                    "data_value1": 1,
                    "data_var1": 1,
                    "data_variable1": 1,
                    "var1": 1
                },
                "_DAT_40023824": {
                    "data2": 13,
                    "data_2": 5,
                    "data_entry_2": 1,
                    "data_field2": 1,
                    "data_item2": 1,
                    "data_value2": 1,
                    "data_var2": 1,
                    "data_variable2": 1,
                    "var2": 1
                }
            },
            "called": [
                "FUN_08005a5c"
            ],
            "calling": [],
            "code": "\n\n\nundefined4 initialize_data_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  FUNC_08005a5c();\n  return 0;\n}\n\n",
            "current_name": "initialize_data_080059f8",
            "entrypoint": "0x080059f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059f8": "initialize_data_080059f8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a50": {
            "called": [],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a50",
            "entrypoint": "0x08005a50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a5c": {
            "called": [],
            "calling": [
                "FUN_080059f8"
            ],
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a5c",
            "entrypoint": "0x08005a5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a68": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20000e48": {
                    "counter": 23,
                    "data_count": 1,
                    "data_counter": 4
                },
                "FUN_08005a68": {
                    "increment_counter": 24,
                    "increment_data_count": 1,
                    "increment_data_counter": 4,
                    "increment_data_value": 1,
                    "increment_global_counter": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid increment_data_counter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "current_name": "increment_data_counter_08005a68",
            "entrypoint": "0x08005a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a68": "increment_data_counter_08005a68"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a84": {
            "additional_data": {
                "DAT_20000e48": {
                    "data": 11,
                    "data_from_memory": 1,
                    "data_value": 2,
                    "global_value": 1,
                    "global_variable": 1,
                    "global_variable_value": 1,
                    "result": 1,
                    "value": 1
                },
                "FUN_08005a84": {
                    "get_dat_value": 1,
                    "get_data": 12,
                    "get_data_address": 1,
                    "get_data_from_memory": 2,
                    "get_data_value": 10,
                    "get_global_value": 1,
                    "get_global_variable": 1,
                    "get_global_variable_value": 1,
                    "get_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005a98",
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08007756",
                "FUN_08005cec"
            ],
            "code": "\nundefined4 get_data_value_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "current_name": "get_data_value_08005a84",
            "entrypoint": "0x08005a84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a84": "get_data_value_08005a84"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a98": {
            "additional_data": {
                "FUN_08005a98": {
                    "check_and_adjust_param": 1,
                    "check_data_range": 1,
                    "check_data_values": 1,
                    "check_if_data_value_in_range": 1,
                    "check_param_and_iterate": 1,
                    "check_param_value_in_range": 1,
                    "check_parameter_limit": 1,
                    "compare_and_adjust_values": 1,
                    "compare_data_values": 1,
                    "extract_and_compare": 1,
                    "find_data_value": 2,
                    "find_end_value": 1,
                    "find_stop_threshold": 1,
                    "find_target_data": 1,
                    "find_target_value": 4,
                    "find_target_value_in_range": 1,
                    "find_threshold": 1,
                    "find_threshold_value": 1,
                    "find_value_in_range": 6,
                    "perform_operation_until_limit": 1,
                    "verify_param_boundary": 1,
                    "wait_until_value_reached": 1
                },
                "iVar1": {
                    "base_value": 1,
                    "current_value": 1,
                    "data_value1": 3,
                    "initial_data_value": 5,
                    "initial_value": 16,
                    "prev_data_value": 1,
                    "range_start": 2,
                    "start_value": 1,
                    "starting_value": 1
                },
                "param_1": {
                    "boundary": 1,
                    "comparison_limit": 1,
                    "data_limit": 1,
                    "end_value": 1,
                    "input": 1,
                    "input_value": 1,
                    "limit": 3,
                    "limit_value": 1,
                    "range": 1,
                    "range_end": 3,
                    "range_limit": 2,
                    "target": 1,
                    "target_value": 9,
                    "threshold": 2,
                    "value_to_check": 1,
                    "value_to_compare": 2
                },
                "uVar2": {
                    "current_data_value": 6,
                    "current_value": 17,
                    "data_value": 5,
                    "data_value2": 3
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002a0"
            ],
            "code": "\nvoid find_target_value_in_range_08005a98(int target_value)\n\n{\n  int initial_value;\n  uint current_value;\n  \n  initial_value = get_data_value_08005a84();\n  do {\n    current_value = get_data_value_08005a84();\n  } while (current_value < (uint)(target_value + initial_value));\n  return;\n}\n\n",
            "current_name": "find_target_value_in_range_08005a98",
            "entrypoint": "0x08005a98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a98": "find_target_value_in_range_08005a98",
                "iVar1": "initial_value",
                "param_1": "target_value",
                "uVar2": "current_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "additional_data": {
                "0x1fff1c00": {
                    "address2": 1,
                    "data_array_b": 1,
                    "memory_address2": 1
                },
                "0xe000ed14": {
                    "address1": 2,
                    "data_array_a": 1,
                    "memory_address1": 2
                },
                "FUN_08005bdc": {
                    "set_byte": 1,
                    "set_byte_at_address": 1,
                    "set_byte_in_memory": 1,
                    "set_byte_value": 1,
                    "store_byte": 2,
                    "store_byte_value": 3,
                    "store_data": 2,
                    "store_integer_at_address": 1,
                    "store_value": 3,
                    "update_memory": 6,
                    "write_byte_to_memory": 4,
                    "write_data": 2,
                    "write_to_memory": 4
                },
                "char": {
                    "character": 2
                },
                "param_1": {
                    "address": 9,
                    "byte_to_write": 1,
                    "byte_value": 4,
                    "data": 1,
                    "data_index": 1,
                    "input": 1,
                    "input_byte": 9,
                    "input_value": 2,
                    "memory_address": 1,
                    "source_value": 1,
                    "value": 1
                },
                "param_2": {
                    "data": 11,
                    "data_byte": 1,
                    "data_value": 1,
                    "input_value": 3,
                    "new_value": 1,
                    "shift_amount": 1,
                    "store_data": 1,
                    "target_value": 1,
                    "unsigned_value": 1,
                    "value": 10
                },
                "param_3": {
                    "destination_address": 1,
                    "new_data": 1
                },
                "result": {
                    "shifted_value": 1
                },
                "var_1": {
                    "offset": 1
                },
                "var_2": {
                    "base_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005c30"
            ],
            "code": "\nvoid set_byte_in_memory_08005bdc(byte address,uint data)\n\n{\n  if ((character)address < '\\0') {\n    *(character *)((address & 0xf) + 0xe000ed14) = (character)((data & 0xff) << 4);\n  }\n  else {\n    *(character *)((character)address + -0x1fff1c00) = (character)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "set_byte_in_memory_08005bdc",
            "entrypoint": "0x08005bdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bdc": "set_byte_in_memory_08005bdc",
                "char": "character",
                "param_1": "address",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c30": {
            "additional_data": {
                "FUN_08005c30": {
                    "check_and_configure_param": 1,
                    "check_and_initialize": 5,
                    "check_and_set_data": 1,
                    "check_and_set_param": 1,
                    "check_and_set_parameters": 1,
                    "check_and_update_value": 1,
                    "check_if_valid_range": 1,
                    "check_input_validity": 2,
                    "check_param_and_update": 1,
                    "check_param_range": 2,
                    "initialize_memory": 1,
                    "is_param_valid": 2,
                    "is_param_within_range": 1,
                    "is_valid_param": 1,
                    "perform_operation": 1,
                    "reverse_and_initialize": 1,
                    "save_and_set_variables": 1,
                    "set_memory_options": 1,
                    "update_register_and_memory": 1,
                    "validate_input": 1,
                    "validate_param": 2,
                    "validate_param_and_configure": 1,
                    "verify_param_range": 1
                },
                "_DAT_e000e010": {
                    "another_value": 1,
                    "final_variable": 1,
                    "flag": 2,
                    "flag_value": 3,
                    "initialization_flag": 1,
                    "memory_offset_2": 1,
                    "memory_value_2": 1,
                    "mode_value": 1,
                    "offset_value": 1,
                    "option_value": 1,
                    "seven_value": 1,
                    "some_other_value": 1,
                    "some_value": 1,
                    "special_value2": 1,
                    "val2": 1,
                    "var2": 1
                },
                "_DAT_e000e014": {
                    "adjusted_value": 1,
                    "decremented_input": 1,
                    "memory_base": 1,
                    "modified_input": 4,
                    "modified_input_value": 1,
                    "modified_param": 1,
                    "modified_value": 2,
                    "prev_value": 1,
                    "prev_value_address": 1,
                    "previous_input": 1,
                    "previous_value": 1,
                    "updated_input": 1,
                    "updated_param": 1,
                    "updated_value": 2
                },
                "_DAT_e000e018": {
                    "additional_value": 1,
                    "another_variable": 1,
                    "counter": 1,
                    "counter_value": 1,
                    "extra_data": 1,
                    "initialized_value": 1,
                    "memory_offset_1": 1,
                    "memory_value_1": 1,
                    "new_value": 1,
                    "reset_value": 3,
                    "some_value": 2,
                    "special_value1": 1,
                    "val1": 1,
                    "value_address": 1,
                    "var1": 1,
                    "zero_value": 1
                },
                "bVar1": {
                    "is_data_valid": 1,
                    "is_in_range": 2,
                    "is_input_valid": 2,
                    "is_param_valid": 3,
                    "is_valid": 15,
                    "is_valid_input": 2,
                    "is_valid_number": 1,
                    "is_valid_value": 1,
                    "is_value_valid": 1,
                    "is_within_range": 3
                },
                "param_1": {
                    "data": 1,
                    "input": 5,
                    "input_number": 1,
                    "input_param": 4,
                    "input_value": 16,
                    "value": 4
                },
                "set_byte_in_memory_08005bdc": {
                    "set_memory": 1,
                    "set_memory_byte": 5
                }
            },
            "called": [
                "FUN_08005bdc"
            ],
            "calling": [
                "FUN_0800618c"
            ],
            "code": "\n\n\nbool check_and_initialize_08005c30(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    set_byte_in_memory_08005bdc(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "check_and_initialize_08005c30",
            "entrypoint": "0x08005c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c30": "check_and_initialize_08005c30",
                "bVar1": "is_valid",
                "param_1": "input_value",
                "set_byte_in_memory_08005bdc": "set_memory_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cec": {
            "additional_data": {
                "CONCAT13": {
                    "concat13": 1,
                    "concatenate13": 1
                },
                "DAT_40023800_1": {
                    "temp2": 1
                },
                "DAT_40023800_3": {
                    "flag_value": 1,
                    "global3_part3": 1,
                    "register3_1": 1,
                    "register4": 1,
                    "register_4": 1,
                    "system_status_byte3": 1,
                    "temp": 1,
                    "temp1": 1
                },
                "DAT_40023870_1": {
                    "flag_value_2": 1,
                    "global2_part1": 1,
                    "hardware_status_byte1": 1,
                    "register5": 1,
                    "register7_1": 1,
                    "temp3": 1
                },
                "DAT_40023874": {
                    "register4": 1
                },
                "FUN_08005cec": {
                    "check_and_process_flags": 1,
                    "check_and_validate_data": 1,
                    "check_and_verify_conditions": 1,
                    "check_conditions": 7,
                    "check_conditions_and_values": 1,
                    "check_configuration": 3,
                    "check_data": 1,
                    "check_data_conditions": 1,
                    "check_data_validity": 2,
                    "check_flags": 5,
                    "check_integrity": 1,
                    "check_param_validity": 1,
                    "check_security": 1,
                    "check_status": 2,
                    "check_system_status": 1,
                    "evaluate_data": 1
                },
                "_DAT_40007000": {
                    "flag_reg_2": 1,
                    "global5": 1,
                    "hardware_control2": 1,
                    "register2": 1,
                    "register6": 1,
                    "register7": 1,
                    "register_9": 1
                },
                "_DAT_40023800": {
                    "control_reg": 1,
                    "global3": 1,
                    "register2": 1,
                    "register3": 2,
                    "register_3": 1,
                    "system_status": 1,
                    "temp_reg": 1
                },
                "_DAT_40023804": {
                    "control_reg_2": 1,
                    "global2": 1,
                    "hardware_status": 1,
                    "port_config": 1,
                    "register1": 1,
                    "register2": 2,
                    "register_2": 1
                },
                "_DAT_40023808": {
                    "control_reg_1": 1,
                    "flag_control_register": 1,
                    "global1": 1,
                    "hardware_config": 1,
                    "port_status": 1,
                    "register1": 2,
                    "register_1": 1
                },
                "_DAT_40023840": {
                    "flag_reg_1": 1,
                    "global4": 1,
                    "hardware_control1": 1,
                    "register1": 1,
                    "register5": 1,
                    "register6": 1,
                    "register_8": 1
                },
                "_DAT_40023870": {
                    "control_reg_3": 1,
                    "global2_part2": 1,
                    "hardware_control3": 1,
                    "register11": 1,
                    "register3": 1,
                    "register7": 1,
                    "register_10": 1
                },
                "_DAT_40023874": {
                    "flag_reg_3": 1,
                    "global6": 1,
                    "hardware_control4": 1,
                    "register4": 1,
                    "register8": 1,
                    "register_6": 1
                },
                "_DAT_42470000": {
                    "flag1": 1,
                    "flag_reg_4": 1,
                    "global7": 1,
                    "register5": 1,
                    "register9": 2,
                    "register_5": 1
                },
                "_DAT_42470060": {
                    "flag3": 1,
                    "flag_reg_6": 1,
                    "global9": 1,
                    "register12": 1,
                    "register7": 1,
                    "register8": 1,
                    "register_11": 1
                },
                "_DAT_42470e80": {
                    "flag2": 1,
                    "flag_reg_5": 1,
                    "global8": 1,
                    "register10": 1,
                    "register6": 1,
                    "register_7": 1
                },
                "get_data_value_08005a84": {
                    "get_data_value": 7
                },
                "iVar1": {
                    "data_value": 8,
                    "data_value1": 6,
                    "return_value": 1,
                    "temp_var1": 1,
                    "value": 4,
                    "value1": 8
                },
                "param_1": {
                    "config": 3,
                    "data": 2,
                    "data_array": 2,
                    "data_flags": 2,
                    "flags": 15,
                    "input_data": 1,
                    "param_array": 1,
                    "params": 2,
                    "status": 1,
                    "status_flags": 1
                },
                "uVar2": {
                    "compare_value": 1,
                    "comparison_result": 1,
                    "current_value": 1,
                    "data_comparison": 1,
                    "data_value": 3,
                    "data_value2": 7,
                    "new_value": 3,
                    "next_data_value": 1,
                    "other_data_value": 1,
                    "temp_var2": 1,
                    "value2": 8
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 check_and_verify_conditions_08005cec(uint *flags)\n\n{\n  int value1;\n  uint value2;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flags[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 5000U <= value2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = concatenate13(DAT_40023800_3,CONCAT12((char)flags[1],_DAT_40023800));\n      if (flags[1] == 1) {\n        value1 = get_data_value_08005a84();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          value2 = get_data_value_08005a84();\n          if (value1 + 5000U <= value2) {\n            return 3;\n          }\n        }\n      }\n      else {\n        value1 = get_data_value_08005a84();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          value2 = get_data_value_08005a84();\n          if (value1 + 5000U <= value2) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flags[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (flags[3] == 0) {\n      _DAT_42470000 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 2) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 2) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = flags[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[5] == 0) {\n      _DAT_42470e80 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023874 & 2) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023874 & 2) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    value1 = get_data_value_08005a84();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      value2 = get_data_value_08005a84();\n      if (value1 + 100U <= value2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    value1 = get_data_value_08005a84();\n    while ((_DAT_40023870 & 2) != 0) {\n      value2 = get_data_value_08005a84();\n      if (value1 + 5000U <= value2) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = CONCAT31(DAT_40023870_1,(char)flags[2]);\n    if (flags[2] == 1) {\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023870 & 2) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 5000U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023870 & 2) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 5000U <= value2) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (flags[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (flags[6] == 2) {\n      _DAT_42470060 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           flags[0xb] << 0x18 |\n           flags[8] | flags[9] << 6 | ((flags[10] >> 1) - 1) * 0x10000 | flags[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      value1 = get_data_value_08005a84();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        value2 = get_data_value_08005a84();\n        if (value1 + 100U <= value2) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_and_verify_conditions_08005cec",
            "entrypoint": "0x08005cec",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT13": "concatenate13",
                "FUN_08005cec": "check_and_verify_conditions_08005cec",
                "get_data_value_08005a84": "get_data_value",
                "iVar1": "value1",
                "param_1": "flags",
                "uVar2": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800618c": {
            "additional_data": {
                "DAT_40023c00_1": {
                    "clock_config_partial": 1,
                    "control_variable_2": 1,
                    "flag2": 1,
                    "register_1_lower_byte": 1
                },
                "FUN_0800618c": {
                    "check_and_initialize": 2,
                    "check_and_initialize_clock": 7,
                    "check_and_initialize_clock_frequency": 3,
                    "check_and_initialize_frequency": 1,
                    "check_configuration": 1,
                    "configure_hardware": 1,
                    "handle_data_transfer": 1,
                    "initialize_and_calculate_frequency": 2,
                    "initialize_and_check": 1,
                    "initialize_and_check_clock": 1,
                    "initialize_and_check_clock_frequency": 1,
                    "initialize_and_check_system": 1,
                    "initialize_and_configure_device": 1,
                    "initialize_clock_and_frequency": 1,
                    "initialize_configuration": 1,
                    "process_data": 1,
                    "update_clock_and_frequency": 1,
                    "update_settings": 1,
                    "validate_and_configure": 1
                },
                "_DAT_40023800": {
                    "config_register": 1,
                    "config_register_2": 1,
                    "data_register_2": 1,
                    "device_config": 1,
                    "device_flags": 1,
                    "flag3": 1,
                    "register_2": 1
                },
                "_DAT_40023808": {
                    "control_register": 1,
                    "data_register_3": 1,
                    "device_status": 1,
                    "flag4": 1,
                    "register": 1,
                    "register_3": 1,
                    "status_register": 1
                },
                "_DAT_40023c00": {
                    "clock_config": 1,
                    "config_data": 1,
                    "config_register_1": 1,
                    "control_variable_1": 1,
                    "data_register_1": 1,
                    "flag1": 1,
                    "register_1": 1
                },
                "_DAT_40023c00_1": {
                    "config_register_1_lower": 1
                },
                "calculate_clock_and_store_frequency_08006628": {
                    "calculate_clock_and_frequency": 1,
                    "calculate_clock_and_store_frequency": 1,
                    "calculate_clock_frequency": 13,
                    "calculate_clock_frequency_and_store": 1,
                    "calculate_frequency": 1,
                    "get_clock_frequency": 1
                },
                "check_and_initialize_08005c30": {
                    "check_and_initialize": 11,
                    "check_and_initialize_configuration": 1,
                    "check_and_initialize_data": 1,
                    "check_and_initialize_device": 1,
                    "check_and_initialize_features": 1,
                    "check_and_initialize_frequency": 1,
                    "initialize_and_check": 1,
                    "initialize_clock_and_frequency": 1
                },
                "get_data_value_08005a84": {
                    "get_current_data_value": 2,
                    "get_current_value": 4,
                    "get_data_value": 9
                },
                "iVar1": {
                    "data_value": 24,
                    "data_value_addition": 1,
                    "data_value_calculation": 1,
                    "data_value_result": 2,
                    "data_value_sum": 1,
                    "result": 1,
                    "value": 1
                },
                "param_1": {
                    "config": 2,
                    "config_array": 2,
                    "config_data": 2,
                    "config_flags": 1,
                    "config_params": 3,
                    "config_values": 2,
                    "configuration": 3,
                    "configuration_data": 1,
                    "data_flags": 1,
                    "flags": 2,
                    "input_array": 1,
                    "input_flags": 1,
                    "input_params": 1,
                    "input_values": 1,
                    "param_array": 1,
                    "parameters": 3,
                    "params": 1,
                    "settings": 2,
                    "system_params": 1
                },
                "param_2": {
                    "array_length": 2,
                    "config_data_length": 1,
                    "config_flags": 3,
                    "config_length": 4,
                    "config_size": 1,
                    "config_value": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "flag_count": 1,
                    "input_length": 1,
                    "length": 3,
                    "num_config_flags": 1,
                    "num_configs": 1,
                    "num_params": 2,
                    "param": 2,
                    "param_count": 2,
                    "param_length": 2,
                    "size": 1,
                    "value": 1
                },
                "uVar2": {
                    "current_data_value": 2,
                    "current_value": 18,
                    "data_check_value": 1,
                    "data_value": 7,
                    "data_value2": 2,
                    "new_data_value": 1
                },
                "uVar3": {
                    "data_threshold": 1,
                    "data_value3": 1,
                    "limit": 1,
                    "limit_value": 2,
                    "target_data_value": 1,
                    "target_value": 6,
                    "threshold": 12,
                    "threshold_value": 6,
                    "upper_limit": 1
                },
                "uVar4": {
                    "clock_and_frequency": 2,
                    "clock_frequency": 28,
                    "frequency": 1
                }
            },
            "called": [
                "FUN_08005c30",
                "FUN_08006628",
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 initialize_and_check_clock_frequency_0800618c(uint *config_params,uint config_length)\n\n{\n  int data_value;\n  uint current_value;\n  uint threshold;\n  undefined8 clock_frequency;\n  \n  if ((_DAT_40023c00 & 0xf) < config_length) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_length);\n    if (config_length != (config_length & 0xf)) {\n      return 1;\n    }\n    if ((*config_params & 1) != 0) {\n      if (config_params[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((config_params[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = config_params[1] | _DAT_40023808 & 0xfffffffc;\n      data_value = get_data_value_08005a84();\n      threshold = data_value + 5000;\n      if (config_params[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_value = get_data_value_08005a84();\n          if (threshold <= current_value) {\n            return 3;\n          }\n        }\n      }\n      else if (config_params[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_value = get_data_value_08005a84();\n          if (threshold <= current_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_value = get_data_value_08005a84();\n          if (threshold <= current_value) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*config_params & 1) != 0) {\n      if (config_params[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (config_params[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = config_params[1] | _DAT_40023808 & 0xfffffffc;\n      data_value = get_data_value_08005a84();\n      threshold = data_value + 5000;\n      if (config_params[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_value = get_data_value_08005a84();\n          if (threshold <= current_value) {\n            return 3;\n          }\n        }\n      }\n      else if (config_params[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_value = get_data_value_08005a84();\n          if (threshold <= current_value) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_value = get_data_value_08005a84();\n          if (threshold <= current_value) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)config_length);\n    if (config_length != (config_length & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*config_params & 2) != 0) {\n    _DAT_40023808 = config_params[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*config_params & 4) != 0) {\n    _DAT_40023808 = config_params[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*config_params & 8) != 0) {\n    _DAT_40023808 = config_params[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  clock_frequency = calculate_clock_frequency();\n  check_and_initialize((uint)clock_frequency / 1000,(int)((ulonglong)clock_frequency >> 0x20),(uint)clock_frequency * 0x10624dd3);\n  return 0;\n}\n\n",
            "current_name": "initialize_and_check_clock_frequency_0800618c",
            "entrypoint": "0x0800618c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800618c": "initialize_and_check_clock_frequency_0800618c",
                "calculate_clock_and_store_frequency_08006628": "calculate_clock_frequency",
                "check_and_initialize_08005c30": "check_and_initialize",
                "get_data_value_08005a84": "get_data_value",
                "iVar1": "data_value",
                "param_1": "config_params",
                "param_2": "config_length",
                "uVar2": "current_value",
                "uVar3": "threshold",
                "uVar4": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800640c": {
            "additional_data": {
                "FUN_0800640c": {
                    "configure_system": 1,
                    "initialize_parameters": 3,
                    "update_config": 1,
                    "update_configuration": 2,
                    "update_flags": 2,
                    "update_flags_and_parameters": 1,
                    "update_parameters": 17,
                    "update_parameters_and_flags": 1,
                    "update_params_and_flags": 1,
                    "update_registers": 1
                },
                "_DAT_40023808": {
                    "register_data2": 1
                },
                "_DAT_40023830": {
                    "register_data1": 1
                },
                "local_10": {
                    "config_value3": 1,
                    "config_value4": 1,
                    "constant2": 1,
                    "constant3": 8,
                    "constant4": 2,
                    "constant_3": 2,
                    "constant_4": 1,
                    "count_2": 1,
                    "flag_2": 1,
                    "local_var2": 1,
                    "local_var3": 1,
                    "parameter2": 1,
                    "parameter3": 2,
                    "parameter_c": 1,
                    "update_flag2": 1,
                    "value2": 1,
                    "value3": 1,
                    "value4": 1,
                    "value_3": 1,
                    "var2": 1
                },
                "local_14": {
                    "config_value3": 1,
                    "config_value4": 1,
                    "constant3": 3,
                    "constant4": 7,
                    "constant_3": 1,
                    "constant_4": 2,
                    "flag_3": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "parameter3": 1,
                    "parameter4": 1,
                    "parameter_d": 1,
                    "unused_1": 1,
                    "value3": 1,
                    "value4": 1,
                    "value5": 1,
                    "value_4": 1,
                    "var3": 1
                },
                "local_18": {
                    "config_value2": 2,
                    "constant1": 1,
                    "constant2": 10,
                    "constant_2": 3,
                    "count_1": 1,
                    "flag_1": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "parameter1": 1,
                    "parameter2": 2,
                    "parameter_b": 1,
                    "update_flag1": 1,
                    "value1": 1,
                    "value2": 1,
                    "value3": 1,
                    "value_2": 1,
                    "var1": 1
                },
                "local_1c": {
                    "base_address": 1,
                    "block_size": 1,
                    "buffer_size": 1,
                    "config_value1": 2,
                    "constant1": 10,
                    "constant_1": 3,
                    "flag_value": 1,
                    "local_var1": 1,
                    "memory_size": 1,
                    "parameter1": 2,
                    "parameter_a": 1,
                    "size": 2,
                    "type_flag": 1,
                    "update_value": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "local_c": {
                    "config_value5": 2,
                    "constant4": 1,
                    "constant5": 9,
                    "constant_5": 3,
                    "flag_4": 1,
                    "local_var4": 1,
                    "local_var5": 1,
                    "parameter4": 2,
                    "parameter5": 1,
                    "parameter_e": 1,
                    "unused_2": 1,
                    "update_flag3": 1,
                    "value4": 1,
                    "value5": 1,
                    "value6": 1,
                    "value_5": 1,
                    "var4": 1
                },
                "param_1": {
                    "condition": 1,
                    "config_flag": 1,
                    "flag": 18,
                    "flags": 1,
                    "is_first_param": 1,
                    "is_zero": 1,
                    "mode": 3,
                    "param_type": 1,
                    "switch_parameter": 1,
                    "type": 1,
                    "update_type": 1
                },
                "param_2": {
                    "data1": 1,
                    "flag1": 1,
                    "flag_parameter": 1,
                    "flags": 1,
                    "mask1": 2,
                    "param2": 2,
                    "param_a": 1,
                    "param_flag_1": 1,
                    "val1": 1,
                    "value1": 16,
                    "value_1": 3
                },
                "param_3": {
                    "data2": 1,
                    "data_parameter": 1,
                    "flag2": 1,
                    "mask": 1,
                    "mask2": 2,
                    "param3": 2,
                    "param_b": 1,
                    "param_flag_2": 1,
                    "val2": 1,
                    "value2": 16,
                    "value_2": 3
                },
                "update_parameters_08006e88": {
                    "update_memory_parameters": 1,
                    "update_parameters": 1
                }
            },
            "called": [
                "FUN_08006e88"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_parameters_and_flags_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 constant1;\n  undefined4 constant2;\n  undefined4 constant4;\n  undefined4 constant3;\n  undefined4 constant5;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    constant1 = 0x100;\n    constant2 = 2;\n    constant3 = 3;\n    constant4 = 0;\n    constant5 = 0;\n    update_parameters_08006e88(0x40020000,&constant1);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    constant1 = 0x200;\n    constant2 = 2;\n    constant3 = 3;\n    constant4 = 0;\n    constant5 = 0;\n    update_parameters_08006e88(0x40020800,&constant1);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_and_flags_0800640c",
            "entrypoint": "0x0800640c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800640c": "update_parameters_and_flags_0800640c",
                "local_10": "constant3",
                "local_14": "constant4",
                "local_18": "constant2",
                "local_1c": "constant1",
                "local_c": "constant5",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2",
                "update_parameters_08006e88": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080064ec": {
            "additional_data": {
                "FUN_080064ec": {
                    "calculate_clock_frequency": 15,
                    "calculate_clock_speed": 15,
                    "calculate_frequency": 1
                },
                "_DAT_40023804": {
                    "clock_multiplier_register": 1,
                    "config_register": 1,
                    "config_register2": 1,
                    "reg2": 1,
                    "status_register": 1
                },
                "_DAT_40023808": {
                    "clock_config_register": 1,
                    "config_register": 1,
                    "config_register1": 1,
                    "control_register": 1,
                    "reg1": 1
                },
                "local_c": {
                    "adjusted_clock_speed": 2,
                    "calculated_frequency": 1,
                    "calculated_speed": 2,
                    "clock_frequency": 10,
                    "clock_speed": 9,
                    "final_clock_speed": 1,
                    "frequency": 4,
                    "result": 2
                },
                "uVar1": {
                    "clock_bits": 1,
                    "clock_config": 12,
                    "clock_mode": 4,
                    "clock_setting": 1,
                    "clock_source": 2,
                    "config_bit_mask": 1,
                    "config_bits": 3,
                    "config_flags": 1,
                    "config_mode": 1,
                    "config_value": 1,
                    "configuration": 1,
                    "mode": 1,
                    "value_mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006628"
            ],
            "code": "\n\n\nuint calculate_clock_frequency_080064ec(void)\n\n{\n  uint clock_config;\n  uint clock_frequency;\n  \n  clock_config = _DAT_40023808 & 0xc;\n  if (clock_config == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clock_frequency = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clock_frequency / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clock_config < 9) {\n    if (clock_config == 0) {\n      return 16000000;\n    }\n    if (clock_config == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "current_name": "calculate_clock_frequency_080064ec",
            "entrypoint": "0x080064ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "local_c": "clock_frequency",
                "uVar1": "clock_config"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006628": {
            "additional_data": {
                "DAT_20000000": {
                    "adjusted_frequency": 1,
                    "clock_frequency": 1,
                    "clock_frequency_shifted": 1,
                    "frequency_shifted": 1,
                    "output_data": 1,
                    "result": 1,
                    "shifted_clock_frequency": 1,
                    "shifted_clock_speed": 1,
                    "shifted_frequency": 3,
                    "stored_clock_frequency": 1,
                    "stored_frequency": 1,
                    "updated_clock_frequency": 1
                },
                "FUN_08006628": {
                    "calculate_and_set_clock_frequency": 2,
                    "calculate_and_store_clock_frequency": 4,
                    "calculate_clock_and_store_frequency": 1,
                    "calculate_clock_and_store_result": 1,
                    "calculate_clock_frequency": 17,
                    "calculate_clock_frequency_and_store": 2,
                    "calculate_clock_frequency_and_store_frequency": 1,
                    "calculate_clock_speed": 1,
                    "calculate_filtered_frequency": 1,
                    "calculate_frequency_and_save": 1
                },
                "_DAT_40023808": {
                    "config_register": 1,
                    "control_register": 1,
                    "data_register": 1,
                    "data_register_value": 1,
                    "input_data": 6,
                    "input_register": 3,
                    "input_value": 7,
                    "io_register": 1,
                    "register_value": 5,
                    "sensor_value": 1,
                    "some_value": 1
                },
                "calculate_clock_frequency_080064ec": {
                    "calculate_clock_frequency": 2,
                    "calculate_raw_frequency": 1
                },
                "uVar1": {
                    "clock_frequency": 26,
                    "clock_speed": 1,
                    "frequency": 4
                }
            },
            "called": [
                "FUN_080064ec"
            ],
            "calling": [
                "FUN_08006680",
                "FUN_080066cc",
                "FUN_0800618c"
            ],
            "code": "\n\n\nuint calculate_clock_and_store_frequency_08006628(void)\n\n{\n  uint clock_frequency;\n  \n  clock_frequency = calculate_clock_frequency_080064ec();\n  DAT_20000000 = clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return clock_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "current_name": "calculate_clock_and_store_frequency_08006628",
            "entrypoint": "0x08006628",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006628": "calculate_clock_and_store_frequency_08006628",
                "calculate_clock_frequency_080064ec": "calculate_clock_frequency",
                "uVar1": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006680": {
            "additional_data": {
                "DAT_0800bcac": {
                    "bit_shift_amount": 1,
                    "frequency_adjustment_table": 2,
                    "frequency_mapping": 1,
                    "frequency_offset": 1,
                    "frequency_offsets_table": 1,
                    "frequency_shift": 1,
                    "frequency_table": 8,
                    "offset_table": 1,
                    "shift_value": 1
                },
                "FUN_08006680": {
                    "calculate_adjusted_frequency": 5,
                    "calculate_and_adjust_frequency": 2,
                    "calculate_and_shift_clock_frequency": 1,
                    "calculate_and_shift_frequency": 1,
                    "calculate_and_store_frequency": 1,
                    "calculate_clock_frequency": 1,
                    "calculate_frequency": 14,
                    "calculate_frequency_and_shift": 1,
                    "calculate_frequency_and_store": 1,
                    "calculate_frequency_divided_by_clock": 1,
                    "calculate_shifted_clock_frequency": 1,
                    "calculate_shifted_frequency": 1,
                    "get_adjusted_clock_frequency": 1
                },
                "PTR_DAT_0800bcac": {
                    "shift_data": 1
                },
                "_DAT_0800bcac": {
                    "frequency_table": 1,
                    "shift_table": 1
                },
                "_DAT_40023808": {
                    "clock_bits": 1,
                    "clock_config": 1,
                    "clock_data": 3,
                    "clock_register": 1,
                    "clock_register_value": 1,
                    "clock_setting": 1,
                    "clock_settings": 1,
                    "clock_value": 1,
                    "control_register": 1,
                    "data_register": 1,
                    "data_value": 1,
                    "frequency_value": 1,
                    "input": 1,
                    "input_data": 6,
                    "input_register": 1,
                    "input_value": 5
                },
                "calculate_clock_and_store_frequency_08006628": {
                    "calculate_clock_and_store_frequency": 1,
                    "calculate_clock_frequency": 2,
                    "get_frequency": 2
                },
                "uVar1": {
                    "adjusted_frequency": 1,
                    "clock_frequency": 8,
                    "frequency": 19
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nuint calculate_adjusted_frequency_08006680(void)\n\n{\n  uint frequency;\n  \n  frequency = calculate_clock_frequency();\n  return frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "current_name": "calculate_adjusted_frequency_08006680",
            "entrypoint": "0x08006680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006680": "calculate_adjusted_frequency_08006680",
                "calculate_clock_and_store_frequency_08006628": "calculate_clock_frequency",
                "uVar1": "frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080066cc": {
            "additional_data": {
                "0xd": {
                    "shift_count": 1
                },
                "0xe000": {
                    "mask": 1
                },
                "DAT_0800bcac": {
                    "data_table": 1,
                    "frequency_coefficients": 1,
                    "frequency_divisor": 1,
                    "frequency_lookup_table": 1,
                    "frequency_offset": 1,
                    "frequency_shift": 1,
                    "frequency_shift_array": 1,
                    "frequency_shift_table": 2,
                    "frequency_table": 6,
                    "lookup_table": 1,
                    "shift_array": 1,
                    "shift_data": 1,
                    "shift_table": 3,
                    "shift_values": 1
                },
                "FUN_080066cc": {
                    "calculate_adjusted_frequency": 3,
                    "calculate_and_adjust_clock_frequency": 2,
                    "calculate_and_shift_clock_frequency": 3,
                    "calculate_and_shift_frequency": 5,
                    "calculate_and_store_clock_frequency": 2,
                    "calculate_clock_frequency": 4,
                    "calculate_frequency": 3,
                    "calculate_frequency_and_shift_bit": 1,
                    "calculate_frequency_and_store": 1,
                    "calculate_frequency_divided_by_certain_value": 1,
                    "calculate_frequency_divided_by_clock": 1,
                    "calculate_frequency_divided_by_power_of_two": 1,
                    "calculate_frequency_shift": 1,
                    "calculate_shifted_frequency": 2,
                    "get_clock_frequency": 1
                },
                "PTR_DAT_0800bcac": {
                    "clock_table": 1
                },
                "_DAT_40023808": {
                    "bitmask": 1,
                    "clock_register": 2,
                    "clock_setting": 1,
                    "control_register": 1,
                    "data_register": 1,
                    "input_data": 3,
                    "input_register": 1,
                    "input_value": 3,
                    "mask": 1,
                    "processor_mask": 1,
                    "register_value": 15,
                    "shift_value": 1
                },
                "calculate_clock_and_store_frequency_08006628": {
                    "calculate_frequency": 1,
                    "get_clock_frequency": 1
                },
                "uVar1": {
                    "clock_and_frequency": 1,
                    "clock_frequency": 12,
                    "frequency": 17
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nuint calculate_and_shift_clock_frequency_080066cc(void)\n\n{\n  uint frequency;\n  \n  frequency = get_clock_frequency();\n  return frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "current_name": "calculate_and_shift_clock_frequency_080066cc",
            "entrypoint": "0x080066cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080066cc": "calculate_and_shift_clock_frequency_080066cc",
                "calculate_clock_and_store_frequency_08006628": "get_clock_frequency",
                "uVar1": "frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006950": {
            "additional_data": {
                "0x5fa0000": {
                    "constant": 1,
                    "constant_value": 1
                },
                "0xf8ff": {
                    "bit_mask": 1,
                    "mask": 1
                },
                "FUN_08006950": {
                    "configure_peripheral": 1,
                    "set_bits_in_register": 2,
                    "set_configuration": 1,
                    "set_configuration_register": 1,
                    "set_control_bits": 1,
                    "set_display_mode": 1,
                    "set_memory_config": 1,
                    "set_memory_configuration": 2,
                    "set_memory_protection_flags": 1,
                    "set_param_value": 1,
                    "set_parameters": 1,
                    "set_register_bits": 2,
                    "set_register_value": 2,
                    "set_special_bits": 1,
                    "update_configuration_register": 2,
                    "update_control_bits": 2,
                    "update_control_register": 2,
                    "update_flag_value": 1,
                    "update_memory_config": 1,
                    "update_parameter_settings": 1,
                    "update_register_bits": 1,
                    "update_register_value": 3
                },
                "_DAT_e000ed0c": {
                    "configuration_register": 3,
                    "control_register": 5,
                    "display_control_register": 1,
                    "flag_register": 1,
                    "memory_config": 2,
                    "memory_protection_register": 1,
                    "memory_register": 1,
                    "parameter_register": 1,
                    "register": 3,
                    "register_value": 8
                },
                "param_1": {
                    "bit_pattern": 1,
                    "bitmask": 1,
                    "bits_to_set": 1,
                    "config_value": 3,
                    "configuration": 1,
                    "configuration_bits": 1,
                    "configuration_value": 1,
                    "control": 1,
                    "display_mode": 1,
                    "flag_value": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_value": 6,
                    "memory_config": 1,
                    "memory_options": 1,
                    "new_value": 2,
                    "param": 1,
                    "peripheral_config": 1,
                    "protection_level": 1,
                    "register_value": 2,
                    "value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08006ce0"
            ],
            "code": "\n\n\nvoid set_bits_in_register_08006950(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "set_bits_in_register_08006950",
            "entrypoint": "0x08006950",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006950": "set_bits_in_register_08006950",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006998": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_08006998": {
                    "extract_bits_from_value": 1,
                    "get_bit_from_register": 1,
                    "get_bit_mask": 1,
                    "get_bit_pattern": 2,
                    "get_bit_shifted_value": 1,
                    "get_bit_value": 2,
                    "get_bits": 1,
                    "get_bits_from_address": 1,
                    "get_bits_from_byte": 1,
                    "get_bits_from_register": 4,
                    "get_bitwise_shifted_value": 1,
                    "get_lower_bits": 1,
                    "get_shifted_bits": 6,
                    "get_shifted_value": 2,
                    "get_three_least_significant_bits": 5,
                    "get_top_three_bits": 1
                },
                "_DAT_e000ed0c": {
                    "address": 1,
                    "bit_pattern": 2,
                    "byte_data": 1,
                    "data": 1,
                    "data_register": 8,
                    "data_variable": 1,
                    "input_data": 2,
                    "input_value": 1,
                    "original_value": 1,
                    "register_value": 8,
                    "shifted_bits": 1,
                    "shifted_value": 2,
                    "source_value": 1,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006cf6",
                "FUN_08006d8a"
            ],
            "code": "\n\n\nuint get_shifted_bits_08006998(void)\n\n{\n  return _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_shifted_bits_08006998",
            "entrypoint": "0x08006998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006998": "get_shifted_bits_08006998"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069b4": {
            "additional_data": {
                "FUN_080069b4": {
                    "set_bit": 9,
                    "set_bit_at_index": 2,
                    "set_bit_at_memory_address": 1,
                    "set_bit_at_offset": 2,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 1,
                    "set_bit_in_integer": 1,
                    "set_bit_in_memory": 10,
                    "set_bit_in_register": 1,
                    "set_bit_value": 1,
                    "store_bit_in_array": 1,
                    "update_bit_in_memory": 1
                },
                "char": {
                    "signed_char": 1
                },
                "param_1": {
                    "bit_position": 2,
                    "bit_value": 1,
                    "byte_to_change": 1,
                    "byte_to_set": 3,
                    "byte_value": 6,
                    "input": 1,
                    "input_byte": 15,
                    "position": 1,
                    "value": 1
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d2e"
            ],
            "code": "\nvoid set_bit_in_memory_080069b4(byte input_byte)\n\n{\n  *(int *)(((unsigned_int)(int)(signed_char)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080069b4",
            "entrypoint": "0x080069b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069b4": "set_bit_in_memory_080069b4",
                "char": "signed_char",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069e4": {
            "additional_data": {
                "DAT_": {
                    "": 2
                },
                "FUN_080069e4": {
                    "set_bit": 8,
                    "set_bit_at_index": 2,
                    "set_bit_in_array": 10,
                    "set_bit_in_memory": 10,
                    "update_bitmask": 1
                },
                "PTR_": {
                    "": 2
                },
                "byte": {
                    "byte_value": 1
                },
                "char": {
                    "character": 1
                },
                "int": {
                    "integer": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "bit_position": 1,
                    "byte": 1,
                    "byte_to_set": 4,
                    "byte_value": 10,
                    "data": 1,
                    "input_byte": 11,
                    "new_value": 1
                },
                "param_2": {
                    "byte_to_set": 1,
                    "new_parameter_name_2": 2
                },
                "param_3": {
                    "byte_to_set": 1
                },
                "param_4": {
                    "byte_to_set": 1
                },
                "param_5": {
                    "byte_to_set": 1
                },
                "param_6": {
                    "byte_to_set": 1
                },
                "param_7": {
                    "byte_to_set": 1
                },
                "param_8": {
                    "byte_to_set": 1
                },
                "param_n": {
                    "new_parameter_name_n": 1
                },
                "uint": {
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d4a"
            ],
            "code": "\nvoid set_bit_in_memory_080069e4(byte_value input_byte)\n\n{\n  *(integer *)((((unsigned_integer)(integer)(character)input_byte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080069e4",
            "entrypoint": "0x080069e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069e4": "set_bit_in_memory_080069e4",
                "byte": "byte_value",
                "char": "character",
                "int": "integer",
                "param_1": "input_byte",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a18": {
            "additional_data": {
                "0x1f": {
                    "bit_mask": 1,
                    "bit_range": 1,
                    "constant4": 1,
                    "mask": 1
                },
                "0x40": {
                    "constant1": 1,
                    "offset": 2
                },
                "1": {
                    "bit_mask": 2
                },
                "4": {
                    "bit_offset": 1,
                    "constant2": 1
                },
                "DAT_": {
                    "dat_": 1
                },
                "FUN_08006a18": {
                    "check_bit": 12,
                    "check_bit_at_index": 1,
                    "check_bit_in_array": 1,
                    "check_bit_in_memory": 2,
                    "check_bit_set": 5,
                    "check_bit_status": 2,
                    "check_bit_value": 3,
                    "is_bit_set": 5
                },
                "PTR_": {
                    "ptr_": 1
                },
                "char": {
                    "character": 3
                },
                "param_1": {
                    "byte_to_check": 3,
                    "byte_value": 15,
                    "input": 2,
                    "input_byte": 10,
                    "param_1": 1
                },
                "uint": {
                    "data_pointer": 1,
                    "unsigned_int": 2,
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006de0"
            ],
            "code": "\nbool check_bit_set_08006a18(byte byte_value)\n\n{\n  return (*(unsigned_int *)((((unsigned_int)(int)(character)byte_value >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byte_value & 0x1f)) != 0;\n}\n\n",
            "current_name": "check_bit_set_08006a18",
            "entrypoint": "0x08006a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006a18": "check_bit_set_08006a18",
                "char": "character",
                "param_1": "byte_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a58": {
            "additional_data": {
                "0x1f": {
                    "bit_mask": 1
                },
                "0x40": {
                    "constant_offset": 1
                },
                "DAT_": {
                    "data": 1
                },
                "FUN_08006a58": {
                    "set_bit": 8,
                    "set_bit_at_index": 1,
                    "set_bit_at_offset": 1,
                    "set_bit_in_array": 9,
                    "set_bit_in_memory": 10,
                    "set_bit_value": 1,
                    "store_bit_in_memory": 1
                },
                "PTR_": {
                    "ptr": 1
                },
                "char": {
                    "character": 2
                },
                "int": {
                    "integer": 1
                },
                "param_1": {
                    "bit_position": 1,
                    "byte_to_set": 4,
                    "byte_to_store": 1,
                    "byte_value": 6,
                    "data": 1,
                    "input_byte": 17,
                    "value": 1
                },
                "uint": {
                    "unsigned_int": 1,
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dc4"
            ],
            "code": "\nvoid set_bit_in_memory_08006a58(byte input_byte)\n\n{\n  *(integer *)((((unsigned_int)(integer)(character)input_byte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a58",
            "entrypoint": "0x08006a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "char": "character",
                "int": "integer",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "additional_data": {
                "0x60": {
                    "base_offset": 1
                },
                "4": {
                    "element_size": 1
                },
                "FUN_08006a8c": {
                    "clear_bit_in_memory": 1,
                    "set_bit": 5,
                    "set_bit_at_offset": 2,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 7,
                    "set_bit_in_memory": 15
                },
                "char": {
                    "char_value": 1
                },
                "input_byte": {
                    "byte_to_set": 1
                },
                "int": {
                    "int_value": 1
                },
                "param_1": {
                    "bit_offset": 1,
                    "bit_position": 1,
                    "byte_to_set": 4,
                    "byte_value": 9,
                    "input": 2,
                    "input_byte": 14
                },
                "result_var": {
                    "updated_array": 1
                },
                "uint": {
                    "unsigned_int_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dfe"
            ],
            "code": "\nvoid set_bit_in_memory_08006a8c(byte input_byte)\n\n{\n  *(int_value *)((((unsigned_int_value)(int_value)(char_value)input_byte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a8c",
            "entrypoint": "0x08006a8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "char": "char_value",
                "int": "int_value",
                "param_1": "input_byte",
                "uint": "unsigned_int_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "additional_data": {
                "FUN_08006ac0": {
                    "check_bit": 19,
                    "check_bit_in_array": 2,
                    "check_bit_set": 3,
                    "check_bit_status": 1,
                    "check_bit_value": 2,
                    "is_bit_set": 4
                },
                "char": {
                    "character": 1
                },
                "param_1": {
                    "bit_to_check": 1,
                    "byte_code": 1,
                    "byte_value": 17,
                    "data": 2,
                    "input": 1,
                    "input_byte": 9
                },
                "uint": {
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006e1a"
            ],
            "code": "\nbool check_bit_set_08006ac0(byte byte_value)\n\n{\n  return (*(unsigned_integer *)((((unsigned_integer)(int)(character)byte_value >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (byte_value & 0x1f)) != 0;\n}\n\n",
            "current_name": "check_bit_set_08006ac0",
            "entrypoint": "0x08006ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ac0": "check_bit_set_08006ac0",
                "char": "character",
                "param_1": "byte_value",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b00": {
            "additional_data": {
                "0x1fff1c00": {
                    "memory_location_b": 1
                },
                "0xe000ed14": {
                    "address1": 1,
                    "memory_location_a": 1,
                    "positive_base_address": 1
                },
                "0xf": {
                    "positive_offset": 1
                },
                "FUN_08006b00": {
                    "set_byte_at_address": 1,
                    "store_byte_in_memory": 1,
                    "store_byte_value": 3,
                    "store_data": 1,
                    "store_data_byte": 1,
                    "store_data_in_memory": 1,
                    "store_shifted_byte": 1,
                    "update_byte_value": 2,
                    "update_data": 1,
                    "update_memory": 5,
                    "update_storage": 1,
                    "write_byte_to_memory": 3,
                    "write_data": 4,
                    "write_data_to_memory": 1,
                    "write_to_memory": 2,
                    "write_to_memory_address": 1,
                    "write_value_to_memory": 2
                },
                "char": {
                    "byte_value": 1
                },
                "funPtr": {
                    "function_pointer": 1
                },
                "param_1": {
                    "address": 5,
                    "address_offset": 1,
                    "byte_to_write": 2,
                    "byte_value": 4,
                    "data": 1,
                    "data_index": 2,
                    "input_byte": 9,
                    "input_char": 1,
                    "input_value": 3,
                    "offset": 1,
                    "source": 1,
                    "storage_address": 1
                },
                "param_2": {
                    "byte_value": 1,
                    "data": 6,
                    "data_to_store": 1,
                    "data_to_write": 1,
                    "input_number": 1,
                    "input_value": 3,
                    "new_byte": 1,
                    "new_value": 1,
                    "output_value": 1,
                    "uint_value": 1,
                    "update_value": 1,
                    "value": 10,
                    "value_to_store": 1,
                    "value_to_write": 2
                },
                "param_3": {
                    "address": 1,
                    "buffer": 1,
                    "new_value": 1,
                    "output_address": 1
                },
                "param_4": {
                    "address": 1,
                    "mask": 1
                },
                "updatedByteValue": {
                    "address3": 1
                },
                "var_1": {
                    "target_address": 1
                },
                "var_2": {
                    "write_value": 1
                },
                "var_3": {
                    "base_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006cf6",
                "FUN_08006c9c"
            ],
            "code": "\nvoid write_data_to_memory_08006b00(byte input_byte,uint value)\n\n{\n  if ((byte_value)input_byte < '\\0') {\n    *(byte_value *)((input_byte & 0xf) + 0xe000ed14) = (byte_value)((value & 0xff) << 4);\n  }\n  else {\n    *(byte_value *)((byte_value)input_byte + -0x1fff1c00) = (byte_value)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "write_data_to_memory_08006b00",
            "entrypoint": "0x08006b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b00": "write_data_to_memory_08006b00",
                "char": "byte_value",
                "param_1": "input_byte",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b54": {
            "additional_data": {
                "0x1fff1c00": {
                    "memory_offset2": 1,
                    "ptr2": 1
                },
                "0xe000ed14": {
                    "memory_offset1": 1,
                    "offset_1": 1,
                    "ptr1": 1
                },
                "0xf": {
                    "mask": 1
                },
                "FUN_08006b54": {
                    "byte_to_nibble": 2,
                    "extract_and_shift": 1,
                    "extract_bits": 1,
                    "extract_byte": 10,
                    "extract_byte_from_binary": 3,
                    "extract_byte_from_memory": 2,
                    "extracted_byte": 3,
                    "extracted_byte_value": 1,
                    "extracted_value": 1,
                    "get_byte_shifted_value": 1,
                    "get_nibble": 1,
                    "get_nibble_from_byte": 1,
                    "get_nibble_from_memory": 2,
                    "get_shifted_value": 1,
                    "shift_and_extract_nibble": 1
                },
                "bVar1": {
                    "extracted_byte": 3,
                    "output_byte": 10,
                    "output_nibble": 3,
                    "output_value": 1,
                    "result": 8,
                    "result_byte": 6
                },
                "param_1": {
                    "input": 4,
                    "input_byte": 23,
                    "input_value": 3,
                    "original_byte": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nbyte extract_byte_from_binary_08006b54(byte input_byte)\n\n{\n  byte output_byte;\n  \n  if ((char)input_byte < '\\0') {\n    output_byte = *(byte *)((input_byte & 0xf) + 0xe000ed14);\n  }\n  else {\n    output_byte = *(byte *)((char)input_byte + -0x1fff1c00);\n  }\n  return output_byte >> 4;\n}\n\n",
            "current_name": "extract_byte_from_binary_08006b54",
            "entrypoint": "0x08006b54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b54": "extract_byte_from_binary_08006b54",
                "bVar1": "output_byte",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "additional_data": {
                "0": {
                    "zero": 1
                },
                "1": {
                    "bit_mask": 1
                },
                "3": {
                    "min_remaining_bits": 1
                },
                "4": {
                    "max_bits": 1
                },
                "7": {
                    "total_bits": 1
                },
                "DAT_XXXXXXXX": {
                    "new_variable_name": 1
                },
                "FUN_08006ba0": {
                    "apply_bitwise_operations": 2,
                    "apply_mask": 1,
                    "bitwise_concatenation": 1,
                    "bitwise_operation": 13,
                    "convert_bits": 1,
                    "extract_and_combine_bits": 1,
                    "extract_bits": 6,
                    "extract_bits_from_value": 1,
                    "get_bitwise_values": 1,
                    "mask_bits": 2,
                    "masking_function": 1,
                    "reverse_bits": 1
                },
                "param_1": {
                    "bit_mask": 1,
                    "bit_offset": 2,
                    "bit_position": 6,
                    "bit_shift_value": 1,
                    "bitmask": 1,
                    "input": 1,
                    "input1": 1,
                    "input_bit": 1,
                    "input_bits": 2,
                    "input_index": 1,
                    "input_mask": 2,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 3,
                    "masked_value": 1,
                    "offset2": 1,
                    "original_bit_position": 1,
                    "position": 1,
                    "shifted_value": 1,
                    "value": 1
                },
                "param_1_2": {
                    "adjusted_input": 1
                },
                "param_1_orig": {
                    "original_input": 1
                },
                "param_1_shifted": {
                    "shifted_input_mask": 1
                },
                "param_2": {
                    "bit_mask": 4,
                    "bit_mask1": 1,
                    "bitmask": 1,
                    "bits_to_combine": 1,
                    "bitwise_mask": 1,
                    "bitwise_value": 1,
                    "data": 1,
                    "input2": 1,
                    "input_bits": 1,
                    "input_value": 4,
                    "mask": 4,
                    "mask_value": 1,
                    "original_value": 1,
                    "second_parameter": 1,
                    "shifted_bits": 1,
                    "source_bits": 2,
                    "source_value": 1,
                    "value": 1,
                    "value1": 2,
                    "value_to_extract": 1
                },
                "param_2_2": {
                    "adjusted_second_parameter": 1
                },
                "param_2_masked": {
                    "masked_data": 1
                },
                "param_2_orig": {
                    "original_mask": 1
                },
                "param_3": {
                    "bit_mask": 1,
                    "bit_mask2": 1,
                    "bit_position": 1,
                    "bitfield": 1,
                    "data": 1,
                    "destination_value": 1,
                    "input": 1,
                    "input3": 1,
                    "input_data": 1,
                    "input_value": 2,
                    "mask": 2,
                    "original_value": 3,
                    "output_mask": 1,
                    "output_value": 3,
                    "result": 1,
                    "target_bits": 2,
                    "target_value": 2,
                    "third_parameter": 1,
                    "value": 3,
                    "value2": 2
                },
                "param_3_masked": {
                    "masked_result": 1
                },
                "param_3_orig": {
                    "original_value": 1
                },
                "uVar1": {
                    "bits_to_extract": 1,
                    "bits_to_keep": 1,
                    "bits_to_shift": 2,
                    "difference": 1,
                    "limit": 1,
                    "num_bits1": 1,
                    "num_ones": 1,
                    "num_trailing_zeros": 1,
                    "offset1": 1,
                    "remaining_bits": 7,
                    "shift_amount": 10,
                    "shift_value": 2,
                    "shifted_value": 1
                },
                "uVar2": {
                    "combined_bits": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006cf6"
            ],
            "code": "\nuint bitwise_operation_08006ba0(uint bit_position,uint bit_mask,uint original_value)\n\n{\n  uint shift_amount;\n  \n  bit_position = bit_position & 7;\n  shift_amount = 7 - bit_position;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_position + 4 < 7) {\n    bit_position = 0;\n  }\n  else {\n    bit_position = bit_position - 3;\n  }\n  return original_value & (1 << (bit_position & 0xff)) - 1U |\n         ((1 << (shift_amount & 0xff)) - 1U & bit_mask) << (bit_position & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_08006ba0",
            "entrypoint": "0x08006ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "bit_position",
                "param_2": "bit_mask",
                "param_3": "original_value",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c04": {
            "additional_data": {
                "DAT_": {
                    "": 2
                },
                "FUN_08006c04": {
                    "bitwise_operation": 2,
                    "extract_and_mask_bits": 2,
                    "extract_bit_segments": 1,
                    "extract_bits": 25
                },
                "F_UN_08006c04": {
                    "extract_bits": 1
                },
                "PTR_": {
                    "": 2
                },
                "PTR_to_output1": {
                    "output1": 1
                },
                "PTR_to_output2": {
                    "output2": 1
                },
                "param_1": {
                    "data": 2,
                    "input": 5,
                    "input_data": 2,
                    "input_value": 22
                },
                "param_2": {
                    "adjusted_num_bits": 1,
                    "bit_offset": 9,
                    "bit_offset_adjusted": 1,
                    "bit_position": 8,
                    "num_bits": 5,
                    "num_bits_to_extract": 1,
                    "start_bit": 4,
                    "start_index": 1,
                    "start_offset": 1
                },
                "param_3": {
                    "bit_mask_1": 1,
                    "bit_masked_value": 1,
                    "extracted_bits": 1,
                    "extracted_bits_1": 2,
                    "extracted_bits_result": 1,
                    "output1": 3,
                    "output_1": 1,
                    "output_bits": 1,
                    "output_data1": 2,
                    "output_ptr1": 1,
                    "output_segment1": 1,
                    "output_value1": 7,
                    "output_value_1": 5,
                    "result1": 1,
                    "result_1": 2,
                    "result_bits": 1
                },
                "param_4": {
                    "bit_extracted_value": 1,
                    "bit_mask_2": 1,
                    "extracted_bits_2": 2,
                    "masked_bits_result": 1,
                    "output2": 3,
                    "output_2": 1,
                    "output_data2": 2,
                    "output_ptr2": 1,
                    "output_remainder": 1,
                    "output_segment2": 1,
                    "output_value2": 7,
                    "output_value_2": 5,
                    "remaining_bits": 1,
                    "result2": 1,
                    "result_2": 2,
                    "result_bits_remainder": 1
                },
                "uVar1": {
                    "bits_to_extract": 2,
                    "diff_bits": 1,
                    "num_bits": 2,
                    "num_bits_to_extract": 7,
                    "num_shift": 1,
                    "num_shifts": 1,
                    "num_unused_bits": 1,
                    "remaining_bits": 5,
                    "remaining_bits_count": 1,
                    "shift_amount": 9,
                    "valid_bits": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nvoid extract_and_mask_bits_08006c04(uint input_value,uint bit_offset,uint *output_value1,uint *output_value2)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  *output_value1 = (1 << (shift_amount & 0xff)) - 1U & input_value >> (bit_offset & 0xff);\n  *output_value2 = (1 << (bit_offset & 0xff)) - 1U & input_value;\n  return;\n}\n\n",
            "current_name": "extract_and_mask_bits_08006c04",
            "entrypoint": "0x08006c04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c04": "extract_and_mask_bits_08006c04",
                "param_1": "input_value",
                "param_2": "bit_offset",
                "param_3": "output_value1",
                "param_4": "output_value2",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c70": {
            "additional_data": {
                "0xf": {
                    "barrier": 1,
                    "count": 1,
                    "sync_value": 1
                },
                "DataSynchronizationBarrier": {
                    "barrier": 4,
                    "sync_barrier": 16,
                    "synchronize_data": 4,
                    "synchronize_data_barrier": 1,
                    "wait_for_data_sync": 2
                },
                "FUN_08006c70": {
                    "continuous_loop": 5,
                    "data_sync_loop": 1,
                    "do_nothing_loop": 1,
                    "endless_loop": 2,
                    "infinite_loop": 12,
                    "run_infinite_loop": 7,
                    "synchronize_data": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d66"
            ],
            "code": "\nvoid run_infinite_loop_08006c70(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_08006c70",
            "entrypoint": "0x08006c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "DataSynchronizationBarrier": "sync_barrier",
                "FUN_08006c70": "run_infinite_loop_08006c70"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "additional_data": {
                "FUN_08006c9c": {
                    "check_and_configure": 1,
                    "check_and_configure_memory": 3,
                    "check_and_initialize": 3,
                    "check_and_initialize_data": 1,
                    "check_and_modify_param": 1,
                    "check_and_set_data": 1,
                    "check_and_set_memory": 3,
                    "check_and_set_values": 1,
                    "check_and_update_data": 1,
                    "check_and_update_memory": 1,
                    "check_and_update_parameters": 1,
                    "check_and_update_value": 2,
                    "check_and_write_to_memory": 1,
                    "check_boundary_and_set_variables": 1,
                    "check_input_validity": 1,
                    "check_param_and_update_registers": 1,
                    "check_param_value": 1,
                    "check_valid_param": 1,
                    "check_value_and_write": 1,
                    "initialize_memory": 2,
                    "store_data_and_set_config": 1,
                    "validate_and_set_param": 1,
                    "validate_and_set_value": 1
                },
                "_DAT_e000e010": {
                    "config_setting": 1,
                    "counter": 2,
                    "data2": 1,
                    "data_2": 3,
                    "default_value": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "memory_flag": 1,
                    "memory_offset": 1,
                    "mode": 1,
                    "register_2": 1,
                    "set_value": 1,
                    "variable2": 1
                },
                "_DAT_e000e014": {
                    "adjusted_value": 2,
                    "memory_address": 2,
                    "modified_input": 1,
                    "modified_param": 2,
                    "modified_value": 2,
                    "previous_value": 1,
                    "stored_value": 1,
                    "updated_param": 2,
                    "updated_value": 3
                },
                "_DAT_e000e018": {
                    "config_value": 2,
                    "data": 1,
                    "data1": 1,
                    "data_1": 3,
                    "flag": 1,
                    "initial_value": 1,
                    "memory_data": 1,
                    "memory_value": 1,
                    "register_1": 1,
                    "reset_value": 3,
                    "variable1": 1
                },
                "bVar1": {
                    "is_in_range": 4,
                    "is_input_valid": 5,
                    "is_less_than_threshold": 1,
                    "is_memory_valid": 1,
                    "is_param_valid": 2,
                    "is_valid": 9,
                    "is_valid_input": 2,
                    "is_valid_range": 1,
                    "is_valid_value": 1,
                    "is_value_valid": 1,
                    "is_within_range": 4
                },
                "param_1": {
                    "input_data": 1,
                    "input_param": 2,
                    "input_parameter": 2,
                    "input_value": 19,
                    "memory_size": 1,
                    "param_value": 1,
                    "value": 5
                },
                "write_data_to_memory_08006b00": {
                    "write_data_to_memory": 2,
                    "write_memory_data": 1,
                    "write_to_memory": 2
                }
            },
            "called": [
                "FUN_08006b00"
            ],
            "calling": [
                "FUN_08006d72"
            ],
            "code": "\n\n\nbool check_and_modify_param_08006c9c(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    write_data_to_memory_08006b00(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "check_and_modify_param_08006c9c",
            "entrypoint": "0x08006c9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c9c": "check_and_modify_param_08006c9c",
                "bVar1": "is_valid",
                "param_1": "input_value",
                "write_data_to_memory_08006b00": "write_data_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "additional_data": {
                "FUN_08006ce0": {
                    "set_bits": 2,
                    "set_bits_in_register": 29
                },
                "param_1": {
                    "data": 1,
                    "input": 5,
                    "input_data": 1,
                    "input_value": 4,
                    "param": 1,
                    "register": 1,
                    "register_value": 15,
                    "value": 3
                },
                "set_bits_in_register_08006950": {
                    "set_bits": 1,
                    "set_bits_in_register": 5,
                    "set_bits_in_register_helper": 2
                }
            },
            "called": [
                "FUN_08006950"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid set_bits_in_register_08006ce0(undefined4 register_value)\n\n{\n  set_bits_in_register_08006ce0(register_value);\n  return;\n}\n\n",
            "current_name": "set_bits_in_register_08006ce0",
            "entrypoint": "0x08006ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ce0": "set_bits_in_register_08006ce0",
                "param_1": "register_value",
                "set_bits_in_register_08006950": "set_bits_in_register"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "additional_data": {
                "FUN_08006cf6": {
                    "store_shifted_bits": 1,
                    "write_data_to_memory": 3,
                    "write_shifted_bits": 3,
                    "write_shifted_bits_to_memory": 20,
                    "write_shifted_data": 1,
                    "write_shifted_data_to_memory": 3
                },
                "bitwise_operation_08006ba0": {
                    "apply_bitwise_operation": 2,
                    "bitwise_operation": 1,
                    "perform_bitwise_operation": 17
                },
                "get_shifted_bits_08006998": {
                    "get_shifted_bits": 20
                },
                "param_1": {
                    "char_data": 1,
                    "char_value": 2,
                    "character": 8,
                    "data": 2,
                    "data_address": 2,
                    "data_location": 1,
                    "data_to_write": 1,
                    "destination": 1,
                    "memory_address": 10,
                    "output_char": 1,
                    "target_address": 1,
                    "write_address": 1
                },
                "param_2": {
                    "bit_shift": 1,
                    "bit_shift_value": 2,
                    "data_1": 1,
                    "input1": 2,
                    "input_param1": 2,
                    "input_value": 1,
                    "input_value_1": 1,
                    "operand1": 2,
                    "operand_1": 1,
                    "operation_param1": 1,
                    "shift": 2,
                    "shift_amount": 1,
                    "shift_value": 2,
                    "shifted_bits": 2,
                    "shifted_data": 1,
                    "shifted_value": 2,
                    "shifted_value_1": 1,
                    "value1": 4,
                    "value_1": 1,
                    "value_to_shift": 1
                },
                "param_3": {
                    "additional_data": 1,
                    "bit_operation": 1,
                    "bitmask": 1,
                    "bitwise_operation_result": 1,
                    "bitwise_operation_value": 2,
                    "bitwise_value": 2,
                    "data_2": 1,
                    "input2": 2,
                    "input_param2": 2,
                    "input_value_2": 1,
                    "operand2": 2,
                    "operand_2": 1,
                    "operation": 1,
                    "operation_param2": 1,
                    "param3": 1,
                    "param_3": 2,
                    "shift_amount": 2,
                    "shifted_value_2": 1,
                    "value": 1,
                    "value2": 4,
                    "value_2": 1
                },
                "uVar1": {
                    "shifted_bits": 28,
                    "shifted_bits_data": 1,
                    "shifted_bits_value": 1
                },
                "write_data_to_memory_08006b00": {
                    "store_data_in_memory": 1,
                    "store_data_to_memory": 1,
                    "write_data_to_memory": 16,
                    "write_to_memory": 2
                }
            },
            "called": [
                "FUN_08006b00",
                "FUN_08006998",
                "FUN_08006ba0"
            ],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid write_shifted_bits_to_memory_08006cf6(char memory_address,undefined4 value1,undefined4 value2)\n\n{\n  undefined4 shifted_bits;\n  \n  shifted_bits = get_shifted_bits_08006998();\n  shifted_bits = bitwise_operation_08006ba0(shifted_bits,value1,value2);\n  write_data_to_memory_08006b00((int)memory_address,shifted_bits);\n  return;\n}\n\n",
            "current_name": "write_shifted_bits_to_memory_08006cf6",
            "entrypoint": "0x08006cf6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006cf6": "write_shifted_bits_to_memory_08006cf6",
                "bitwise_operation_08006ba0": "perform_bitwise_operation",
                "get_shifted_bits_08006998": "get_shifted_bits",
                "param_1": "memory_address",
                "param_2": "value1",
                "param_3": "value2",
                "uVar1": "shifted_bits",
                "write_data_to_memory_08006b00": "write_data_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "additional_data": {
                "FUN_08006d2e": {
                    "set_bit_in_memory": 26,
                    "set_memory_bit": 5
                },
                "int": {
                    "integer": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "bit_position": 2,
                    "bit_to_set": 1,
                    "byte": 1,
                    "byte_to_set": 1,
                    "character": 3,
                    "input": 5,
                    "input_byte": 2,
                    "input_char": 2,
                    "input_value": 1,
                    "memory_address": 1,
                    "new_bit": 1,
                    "value": 9,
                    "value_to_set": 1
                },
                "set_bit_in_memory_080069b4": {
                    "set_bit": 3
                }
            },
            "called": [
                "FUN_080069b4"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_memory_08006d2e(char value)\n\n{\n  set_bit_in_memory_08006d2e_080069b4((integer)value);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006d2e",
            "entrypoint": "0x08006d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d2e": "set_bit_in_memory_08006d2e",
                "int": "integer",
                "param_1": "value",
                "set_bit_in_memory_080069b4": "set_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "additional_data": {
                "FUN_08006d4a": {
                    "set_bit_in_memory": 22,
                    "set_memory_bit": 8,
                    "set_param_bit": 1
                },
                "param_1": {
                    "bit_index": 2,
                    "bit_number": 1,
                    "byte_to_set": 1,
                    "character": 10,
                    "input": 5,
                    "input_byte": 4,
                    "input_char": 1,
                    "input_value": 1,
                    "param": 1,
                    "value": 5
                },
                "set_bit_in_memory_080069e4": {
                    "set_bit_in_memory": 3,
                    "set_bit_in_memory_helper": 1
                }
            },
            "called": [
                "FUN_080069e4"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_memory_08006d4a(char character)\n\n{\n  set_bit_in_memory_08006d4a((int)character);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006d4a",
            "entrypoint": "0x08006d4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d4a": "set_bit_in_memory_08006d4a",
                "param_1": "character",
                "set_bit_in_memory_080069e4": "set_bit_in_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d66": {
            "additional_data": {
                "FUN_08006d66": {
                    "execute_infinite_loop": 1,
                    "infinite_loop_function": 1,
                    "run_infinite_loop": 28
                },
                "run_infinite_loop_08006c70": {
                    "execute_infinite_loop": 1,
                    "infinite_loop": 8,
                    "initialize_infinite_loop": 1,
                    "original_infinite_loop": 2,
                    "run_infinite_loop": 3,
                    "start_infinite_loop": 10,
                    "start_loop": 2
                }
            },
            "called": [
                "FUN_08006c70"
            ],
            "calling": [],
            "code": "\nvoid run_infinite_loop_08006d66(void)\n\n{\n  run_infinite_loop_08006d66_08006c70();\n  return;\n}\n\n",
            "current_name": "run_infinite_loop_08006d66",
            "entrypoint": "0x08006d66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d66": "run_infinite_loop_08006d66",
                "run_infinite_loop_08006c70": "start_infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d72": {
            "additional_data": {
                "FUN_08006d72": {
                    "check_and_modify": 1,
                    "check_and_modify_param": 5,
                    "check_param_and_modify": 1,
                    "handle_param_verification": 1,
                    "handle_parameter": 1,
                    "modify_and_check_param": 1,
                    "modify_and_return": 1,
                    "modify_param": 7,
                    "modify_param_and_return": 1,
                    "modify_parameter": 2,
                    "process_param": 2,
                    "validate_and_modify_param": 5,
                    "validate_and_modify_parameter": 3
                },
                "param_1": {
                    "input": 1,
                    "input_param": 22,
                    "input_parameter": 1,
                    "param": 5,
                    "parameter": 2
                },
                "uVar1": {
                    "modified_param": 5,
                    "output_param": 1,
                    "processed_param": 1,
                    "result": 23,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_08006c9c"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nundefined4 validate_and_modify_param_08006d72(undefined4 input_param)\n\n{\n  undefined4 result;\n  \n  result = check_and_modify_param_08006c9c(input_param);\n  return result;\n}\n\n",
            "current_name": "validate_and_modify_param_08006d72",
            "entrypoint": "0x08006d72",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d72": "validate_and_modify_param_08006d72",
                "param_1": "input_param",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "additional_data": {
                "FUN_08006d8a": {
                    "calculate_shifted_bits": 2,
                    "get_shifted_bits": 20,
                    "get_shifted_bits_value": 1,
                    "get_shifted_bits_wrapper": 1,
                    "shifted_bits_function": 6,
                    "shifted_bits_getter": 1
                },
                "uVar1": {
                    "shifted_bits": 27,
                    "shifted_bits_result": 2,
                    "shifted_bits_value": 1,
                    "shifted_value": 1
                }
            },
            "called": [
                "FUN_08006998"
            ],
            "calling": [],
            "code": "\nundefined4 get_shifted_bits_wrapper_08006d8a(void)\n\n{\n  undefined4 shifted_bits;\n  \n  shifted_bits = get_shifted_bits_08006998();\n  return shifted_bits;\n}\n\n",
            "current_name": "get_shifted_bits_wrapper_08006d8a",
            "entrypoint": "0x08006d8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d8a": "get_shifted_bits_wrapper_08006d8a",
                "uVar1": "shifted_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d98": {
            "additional_data": {
                "FUN_08006d98": {
                    "decode_and_extract_bits": 1,
                    "decode_and_mask_bits": 1,
                    "extract_and_mask_bits": 16,
                    "extract_and_mask_bits_from_binary": 3,
                    "extract_from_binary_and_mask_bits": 1,
                    "parse_binary_data": 1,
                    "process_binary_data": 5,
                    "process_byte_from_binary": 1,
                    "process_extracted_data": 1,
                    "update_and_mask_bits": 1
                },
                "param_1": {
                    "binary_data": 7,
                    "binary_value": 2,
                    "byte": 4,
                    "byte_to_extract": 1,
                    "data_character": 1,
                    "input": 4,
                    "input_byte": 5,
                    "input_char": 3,
                    "input_character": 2,
                    "input_value": 2
                },
                "param_2": {
                    "arg1": 5,
                    "bit_param1": 1,
                    "destination_1": 1,
                    "extracted_value1": 1,
                    "new_value1": 1,
                    "output1": 3,
                    "output_param1": 1,
                    "output_param_1": 1,
                    "output_value": 1,
                    "param2": 7,
                    "param_2": 2,
                    "param_a": 1,
                    "parameter1": 1,
                    "parameter2": 2,
                    "parameter_2": 3
                },
                "param_3": {
                    "arg2": 5,
                    "bit_param2": 1,
                    "destination_2": 1,
                    "extracted_value2": 1,
                    "mask_value1": 1,
                    "new_value2": 1,
                    "output2": 3,
                    "output_param2": 1,
                    "output_param_2": 1,
                    "param3": 7,
                    "param_3": 2,
                    "param_b": 1,
                    "parameter2": 1,
                    "parameter3": 2,
                    "parameter_3": 3
                },
                "param_4": {
                    "arg3": 5,
                    "bit_param3": 1,
                    "destination_3": 1,
                    "extracted_value3": 1,
                    "mask_value2": 1,
                    "new_value3": 1,
                    "output3": 3,
                    "output_param3": 1,
                    "output_param_3": 1,
                    "param4": 7,
                    "param_4": 2,
                    "param_c": 1,
                    "parameter3": 1,
                    "parameter4": 2,
                    "parameter_4": 3
                },
                "uVar1": {
                    "byte_value": 2,
                    "extracted_byte": 28
                }
            },
            "called": [
                "FUN_08006c04",
                "FUN_08006b54"
            ],
            "calling": [],
            "code": "\nvoid extract_from_binary_and_mask_bits_08006d98(char binary_data,undefined4 param2,undefined4 param3,undefined4 param4)\n\n{\n  undefined4 extracted_byte;\n  \n  extracted_byte = extract_byte_from_binary_08006b54((int)binary_data);\n  extract_and_mask_bits_08006c04(extracted_byte,param2,param3,param4);\n  return;\n}\n\n",
            "current_name": "extract_from_binary_and_mask_bits_08006d98",
            "entrypoint": "0x08006d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d98": "extract_from_binary_and_mask_bits_08006d98",
                "param_1": "binary_data",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "extracted_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "additional_data": {
                "FUN_08006dc4": {
                    "set_bit": 1,
                    "set_bit_in_memory": 26,
                    "set_memory_bit": 3,
                    "set_parameter_bit": 1
                },
                "param_1": {
                    "bit_index": 3,
                    "bit_number": 1,
                    "bit_to_set": 2,
                    "character": 3,
                    "input": 5,
                    "input_byte": 1,
                    "input_char": 3,
                    "input_character": 1,
                    "parameter": 1,
                    "value": 11
                },
                "set_bit_in_memory_08006a58": {
                    "set_bit_in_memory": 1,
                    "set_bit_in_memory_helper": 1,
                    "set_memory_bit_at_address": 1,
                    "update_memory_bit": 1
                }
            },
            "called": [
                "FUN_08006a58"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_memory_08006dc4(char value)\n\n{\n  set_bit_in_memory_08006dc4_08006a58((int)value);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006dc4",
            "entrypoint": "0x08006dc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dc4": "set_bit_in_memory_08006dc4",
                "param_1": "value",
                "set_bit_in_memory_08006a58": "set_memory_bit_at_address"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006de0": {
            "additional_data": {
                "FUN_08006de0": {
                    "bit_check": 1,
                    "check_bit": 7,
                    "check_bit_is_set": 1,
                    "check_bit_set": 15,
                    "check_bit_set_from_char": 1,
                    "check_bit_status": 1,
                    "check_bit_value": 1,
                    "check_if_bit_set": 1,
                    "check_parameter_bit": 2,
                    "decode_character": 1
                },
                "param_1": {
                    "character": 3,
                    "input": 15,
                    "input_byte": 3,
                    "input_char": 5,
                    "input_character": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 2
                },
                "uVar1": {
                    "bit_check_result": 1,
                    "bit_set": 3,
                    "bit_set_check": 1,
                    "bit_set_result": 5,
                    "bit_status": 2,
                    "bit_value": 1,
                    "check_result": 1,
                    "result": 14,
                    "return_value": 1
                }
            },
            "called": [
                "FUN_08006a18"
            ],
            "calling": [],
            "code": "\nundefined4 check_bit_set_from_char_08006de0(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_set_08006a18((int)input);\n  return result;\n}\n\n",
            "current_name": "check_bit_set_from_char_08006de0",
            "entrypoint": "0x08006de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006de0": "check_bit_set_from_char_08006de0",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "additional_data": {
                "FUN_08006dfe": {
                    "set_bit_in_memory": 20,
                    "set_bit_in_parameter": 1,
                    "set_memory_bit": 10
                },
                "param_1": {
                    "bit_index": 1,
                    "bit_position": 1,
                    "bit_to_set": 1,
                    "bit_value": 1,
                    "byte_to_set": 1,
                    "character": 2,
                    "input": 7,
                    "input_byte": 2,
                    "input_char": 3,
                    "input_value": 4,
                    "value": 8
                },
                "set_bit_in_memory_08006a8c": {
                    "set_bit_in_memory": 2,
                    "set_bit_in_memory_helper": 4,
                    "set_memory_bit": 1,
                    "update_memory_bit": 1
                }
            },
            "called": [
                "FUN_08006a8c"
            ],
            "calling": [],
            "code": "\nvoid set_bit_in_memory_08006dfe(char value)\n\n{\n  set_bit_in_memory_08006dfe_08006a8c((int)value);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006dfe",
            "entrypoint": "0x08006dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dfe": "set_bit_in_memory_08006dfe",
                "param_1": "value",
                "set_bit_in_memory_08006a8c": "set_bit_in_memory_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "additional_data": {
                "FUN_08006e1a": {
                    "bit_check": 1,
                    "check_bit": 6,
                    "check_bit_and_return": 1,
                    "check_bit_and_return_result": 1,
                    "check_bit_is_set": 1,
                    "check_bit_param": 1,
                    "check_bit_set": 18,
                    "check_bit_set_status": 1,
                    "check_if_bit_set": 1
                },
                "param_1": {
                    "bit_value": 1,
                    "character": 2,
                    "input": 14,
                    "input_char": 8,
                    "input_character": 1,
                    "input_value": 4,
                    "value": 1
                },
                "uVar1": {
                    "bit_check_result": 1,
                    "bit_result": 2,
                    "bit_set_result": 6,
                    "bit_status": 2,
                    "output": 1,
                    "result": 17
                }
            },
            "called": [
                "FUN_08006ac0"
            ],
            "calling": [],
            "code": "\nundefined4 check_bit_set_status_08006e1a(char input)\n\n{\n  undefined4 result;\n  \n  result = check_bit_set_08006ac0((int)input);\n  return result;\n}\n\n",
            "current_name": "check_bit_set_status_08006e1a",
            "entrypoint": "0x08006e1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e1a": "check_bit_set_status_08006e1a",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e88": {
            "additional_data": {
                "DAT_40013c00": {
                    "register3": 1
                },
                "DAT_40013c04": {
                    "register4": 1
                },
                "DAT_40013c08": {
                    "register5": 1
                },
                "DAT_40013c0c": {
                    "register6": 1
                },
                "DAT_40023844": {
                    "register1": 1
                },
                "FUN_08006e88": {
                    "reverse_and_update_bits": 1,
                    "toggle_bits": 1,
                    "update_bitmask": 1,
                    "update_bits": 2,
                    "update_bitwise_values": 1,
                    "update_configuration": 2,
                    "update_data": 2,
                    "update_param_values": 3,
                    "update_parameters": 7,
                    "update_params": 5,
                    "update_register_values": 1,
                    "update_registers": 4
                },
                "_DAT_40013800": {
                    "register2": 1
                },
                "iVar3": {
                    "array_index": 3,
                    "block_index": 2,
                    "index": 21,
                    "mem_slot": 1,
                    "register_index": 3,
                    "section_index": 1
                },
                "local_c": {
                    "bit_index": 4,
                    "bit_position": 3,
                    "count": 1,
                    "counter": 8,
                    "i": 1,
                    "index": 4,
                    "iterator": 2,
                    "loop_counter": 6,
                    "loop_index": 1,
                    "loop_var": 1
                },
                "param_1": {
                    "bit_array1": 1,
                    "bits_to_modify": 1,
                    "config_array": 1,
                    "current_config": 1,
                    "data": 1,
                    "destination": 1,
                    "output": 2,
                    "output_array": 3,
                    "output_params": 7,
                    "param_array": 1,
                    "param_values": 1,
                    "parameters1": 1,
                    "register_array1": 1,
                    "register_array_1": 1,
                    "register_data": 1,
                    "registers": 1,
                    "registers_1": 1,
                    "source_param": 1,
                    "source_parameters": 1,
                    "target": 1,
                    "target_params": 2
                },
                "param_2": {
                    "bit_array2": 1,
                    "bitmask": 1,
                    "flags": 1,
                    "input": 2,
                    "input_array": 4,
                    "input_data": 1,
                    "input_params": 7,
                    "mask": 1,
                    "new_config": 1,
                    "new_parameters": 1,
                    "new_values": 1,
                    "parameters2": 1,
                    "register_array2": 1,
                    "register_array_2": 1,
                    "registers_2": 1,
                    "source": 2,
                    "source_params": 2,
                    "target_param": 1,
                    "update_array": 1
                },
                "uVar1": {
                    "bit": 1,
                    "bit_mask": 21,
                    "bit_mask1": 1,
                    "bit_mask_value": 1,
                    "bit_position": 1,
                    "mask": 4,
                    "new_value": 1,
                    "shifted_bit": 1
                },
                "uVar2": {
                    "bit_and_result": 1,
                    "bit_check": 8,
                    "bit_mask": 1,
                    "bit_mask2": 1,
                    "bit_mask_check": 1,
                    "bit_result": 3,
                    "bit_value": 6,
                    "bitwise_comparison": 1,
                    "bitwise_result": 2,
                    "check_bit": 1,
                    "flag_bit": 1,
                    "masked_value": 4,
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "code": "\n\n\nvoid update_parameters_08006e88(uint *output_params,uint *input_params)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    bit_mask = 1 << (counter & 0xff);\n    bit_check = *input_params & bit_mask;\n    if (bit_check == bit_mask) {\n      if ((input_params[1] == 2) || (input_params[1] == 0x12)) {\n        bit_mask = input_params[4];\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] | bit_mask << ((counter & 7) << 2);\n      }\n      *output_params = *output_params & ~(3 << ((counter & 0x7f) << 1));\n      *output_params = *output_params | (input_params[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((input_params[1] == 1) || (input_params[1] == 2)) || (input_params[1] == 0x11)) || (input_params[1] == 0x12)\n         ) {\n        output_params[2] = output_params[2] & ~(3 << ((counter & 0x7f) << 1));\n        output_params[2] = output_params[2] | input_params[3] << ((counter & 0x7f) << 1);\n        output_params[1] = output_params[1] & ~(1 << (counter & 0xff));\n        output_params[1] = output_params[1] | (input_params[1] >> 4 & 1) << (counter & 0xff);\n      }\n      output_params[3] = output_params[3] & ~(3 << ((counter & 0x7f) << 1));\n      output_params[3] = output_params[3] | input_params[2] << ((counter & 0x7f) << 1);\n      if ((input_params[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        if (output_params == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (output_params == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (output_params == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (output_params == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (output_params == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (output_params == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (output_params == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (output_params == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (output_params == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (output_params == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((counter & 3) << 2) | *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bit_check & _DAT_40013c00;\n        _DAT_40013c04 = ~bit_check & _DAT_40013c04;\n        if ((input_params[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bit_check | _DAT_40013c00;\n        }\n        if ((input_params[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bit_check | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bit_check & _DAT_40013c08;\n        _DAT_40013c0c = ~bit_check & _DAT_40013c0c;\n        if ((input_params[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bit_check | _DAT_40013c08;\n        }\n        if ((input_params[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bit_check | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_08006e88",
            "entrypoint": "0x08006e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e88": "update_parameters_08006e88",
                "iVar3": "index",
                "local_c": "counter",
                "param_1": "output_params",
                "param_2": "input_params",
                "uVar1": "bit_mask",
                "uVar2": "bit_check"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800733e": {
            "additional_data": {
                "0x18": {
                    "first_field_address": 1,
                    "object_offset2": 1
                },
                "0x1a": {
                    "object_offset1": 1,
                    "second_field_address": 1
                },
                "FUN_0800733e": {
                    "assign_param": 1,
                    "assign_param_value": 1,
                    "assign_parameter": 1,
                    "assign_parameter_value": 1,
                    "assign_value_based_on_flag": 1,
                    "set_param": 1,
                    "set_param_value": 9,
                    "set_parameter_value": 1,
                    "set_selected_value": 1,
                    "store_param_value": 1,
                    "update_data": 2,
                    "update_data_value": 1,
                    "update_param": 3,
                    "update_param_value": 1,
                    "update_parameter": 1,
                    "update_parameter_value": 2,
                    "update_value": 2,
                    "update_variable": 1
                },
                "param_1": {
                    "base_address": 8,
                    "data_address": 2,
                    "data_buffer": 1,
                    "data_offset": 1,
                    "data_pointer": 1,
                    "function_pointer": 1,
                    "memory_address": 1,
                    "obj_addr": 1,
                    "object_address": 11,
                    "object_pointer": 1,
                    "struct_address": 1,
                    "struct_base_address": 1,
                    "target_address": 1
                },
                "param_2": {
                    "new_param_value": 1,
                    "new_parameter": 1,
                    "new_parameter_value": 1,
                    "new_value": 14,
                    "param_value": 2,
                    "parameter_value": 2,
                    "value": 10
                },
                "param_3": {
                    "condition": 5,
                    "condition_flag": 1,
                    "flag": 5,
                    "is_data_valid": 1,
                    "is_flag_set": 2,
                    "is_main_param_set": 1,
                    "is_second_field": 1,
                    "is_second_param": 1,
                    "is_second_value": 4,
                    "is_secondary": 4,
                    "is_secondary_param": 1,
                    "is_set": 1,
                    "is_special": 1,
                    "is_special_case": 1,
                    "is_zero": 2
                },
                "param_4": {
                    "data_address": 1,
                    "default_value": 1
                },
                "param_5": {
                    "optional_value": 1
                },
                "ptr_1": {
                    "ptr_offset1": 1
                },
                "ptr_2": {
                    "ptr_offset2": 1
                },
                "var_1": {
                    "main_value_address": 1
                },
                "var_2": {
                    "secondary_value_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800778c"
            ],
            "code": "\nvoid set_param_value_0800733e(int object_address,undefined2 new_value,char condition)\n\n{\n  if (condition == '\\0') {\n    *(undefined2 *)(object_address + 0x1a) = new_value;\n  }\n  else {\n    *(undefined2 *)(object_address + 0x18) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "set_param_value_0800733e",
            "entrypoint": "0x0800733e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800733e": "set_param_value_0800733e",
                "param_1": "object_address",
                "param_2": "new_value",
                "param_3": "condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800738e": {
            "additional_data": {
                "FUNC_080073c0": {
                    "call_specialized_function": 1,
                    "execute_function": 1,
                    "handle_update": 1,
                    "invoke_function": 3,
                    "invoke_other_function": 1,
                    "perform_action": 2,
                    "perform_operation": 2,
                    "perform_update": 3,
                    "process_data": 6,
                    "process_function": 1
                },
                "FUN_0800738e": {
                    "process_input": 1,
                    "process_param": 1,
                    "update_and_call_func": 1,
                    "update_and_call_function": 3,
                    "update_and_invoke_function": 1,
                    "update_config": 1,
                    "update_data": 6,
                    "update_data_and_call_function": 3,
                    "update_data_and_invoke_function": 1,
                    "update_data_if_condition_met": 1,
                    "update_data_if_needed": 2,
                    "update_flag": 1,
                    "update_flag_if_set_and_invoke_function": 1,
                    "update_if_set": 1,
                    "update_param": 1,
                    "update_param_and_call_function": 2,
                    "update_param_if_set": 2,
                    "update_parameter": 1,
                    "update_parameter_and_call_func": 1
                },
                "_DAT_40013c14": {
                    "bit_mask": 2,
                    "condition_flag": 1,
                    "current_data": 1,
                    "data": 4,
                    "data_flag": 4,
                    "data_mask": 1,
                    "data_value": 2,
                    "data_variable": 2,
                    "flag": 2,
                    "flags": 1,
                    "mask": 2,
                    "masked_value": 1,
                    "param_mask": 1,
                    "variable_to_update": 1
                },
                "param_1": {
                    "data": 3,
                    "data_to_update": 1,
                    "flag": 1,
                    "input": 4,
                    "input_data": 1,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_value": 14,
                    "updated_param": 1,
                    "value": 3,
                    "value_to_update": 1
                }
            },
            "called": [
                "FUN_080073c0"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_data_and_call_function_0800738e(ushort input_value)\n\n{\n  if ((input_value & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)input_value;\n    FUNC_080073c0(input_value);\n  }\n  return;\n}\n\n",
            "current_name": "update_data_and_call_function_0800738e",
            "entrypoint": "0x0800738e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800738e": "update_data_and_call_function_0800738e",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073c0": {
            "called": [],
            "calling": [
                "FUN_0800738e"
            ],
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080073c0",
            "entrypoint": "0x080073c0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080073d4": {
            "additional_data": {
                "DAT_": {
                    "": 1
                },
                "FUN_080073d4": {
                    "apply_bitmask": 1,
                    "set_bit": 4,
                    "set_bit_at_index": 1,
                    "set_bit_in_array": 5,
                    "set_bit_in_memory": 11,
                    "set_bit_in_short_array": 2,
                    "set_bit_value": 1,
                    "update_array_value": 1,
                    "update_bit": 1,
                    "update_short_value": 2,
                    "write_bit_to_memory": 1,
                    "write_bitmask_to_memory": 1
                },
                "int": {
                    "int32": 1,
                    "int_value": 1
                },
                "param_1": {
                    "array_index": 1,
                    "bit_index": 2,
                    "bit_position": 6,
                    "index": 3,
                    "input": 5,
                    "input_index": 2,
                    "input_number": 1,
                    "input_value": 6,
                    "num": 1,
                    "num_to_set_bit": 1,
                    "number": 1,
                    "value": 2
                },
                "short": {
                    "array_element": 1,
                    "bit_value": 1,
                    "int16": 1,
                    "short_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007520"
            ],
            "code": "\nvoid set_bit_in_memory_080073d4(uint32 input_value)\n\n{\n  *(bit_value *)(((int32)input_value >> 4) * 0x400 + 0x4002001a) = (bit_value)(1 << (input_value & 0xf));\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080073d4",
            "entrypoint": "0x080073d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "int": "int32",
                "param_1": "input_value",
                "short": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007402": {
            "additional_data": {
                "0x400": {
                    "offset": 1
                },
                "0x40020018": {
                    "memory_address": 1
                },
                "0xf": {
                    "bit_mask": 1
                },
                "1": {
                    "bit": 1
                },
                "FUN_08007402": {
                    "set_bit": 5,
                    "set_bit_at_offset": 2,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 1,
                    "set_bit_in_memory": 9,
                    "set_bit_in_short": 1,
                    "set_bit_value_in_memory": 2,
                    "store_bit_in_memory": 1,
                    "store_bitwise_shifted_value": 1,
                    "update_bit_in_memory": 1,
                    "update_memory": 2,
                    "write_bit_to_memory": 3,
                    "write_short_to_memory": 1,
                    "write_to_memory": 1
                },
                "int": {
                    "int_type": 1,
                    "integer": 1
                },
                "param_1": {
                    "address": 1,
                    "bit_index": 1,
                    "bit_offset": 1,
                    "bit_position": 5,
                    "index": 2,
                    "input": 9,
                    "input_number": 2,
                    "input_value": 5,
                    "offset": 1,
                    "position": 2,
                    "value": 2
                },
                "param_2": {
                    "bit_position": 1
                },
                "short": {
                    "short": 2,
                    "short_integer": 1,
                    "short_type": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid set_bit_value_in_memory_08007402(uint_type input)\n\n{\n  *(short_type *)(((int_type)input >> 4) * 0x400 + 0x40020018) = (short_type)(1 << (input & 0xf));\n  return;\n}\n\n",
            "current_name": "set_bit_value_in_memory_08007402",
            "entrypoint": "0x08007402",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007402": "set_bit_value_in_memory_08007402",
                "int": "int_type",
                "param_1": "input",
                "short": "short_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007430": {
            "additional_data": {
                "": {
                    "block": 1
                },
                "DAT_XXXXXXXX": {
                    "dat_xxxx": 1
                },
                "FUN_08007430": {
                    "do_nothing_loop": 1,
                    "infinite_delay_loop": 1,
                    "infinite_loop": 23,
                    "infinite_loop_function": 2,
                    "run_endless_loop": 1,
                    "run_infinite_loop": 3
                },
                "PTR_XXXXXXXX": {
                    "ptr_xxxx": 1
                },
                "do": {
                    "": 1,
                    "do": 1,
                    "while": 3
                },
                "original_variable_name_1": {
                    "counter": 1
                },
                "original_variable_name_n": {
                    "new_variable_name_n": 1
                },
                "ptr_param1": {
                    "ptr_param1": 1
                },
                "ptr_param2": {
                    "ptr_param2": 1
                },
                "true": {
                    "": 1,
                    "condition": 2,
                    "true": 2
                },
                "while": {
                    "": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\nvoid run_infinite_loop_08007430(void)\n\n{\n  while {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( condition );\n}\n\n",
            "current_name": "run_infinite_loop_08007430",
            "entrypoint": "0x08007430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007430": "run_infinite_loop_08007430",
                "do": "while",
                "true": "condition"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007436": {
            "additional_data": {
                "FUN_08007436": {
                    "initialize_and_check": 1,
                    "initialize_and_check_conditions": 2,
                    "initialize_and_check_system": 2,
                    "initialize_and_verify_hardware": 2,
                    "initialize_and_verify_settings": 2,
                    "initialize_clock_and_check_conditions": 1,
                    "initialize_core_components": 1,
                    "initialize_device": 1,
                    "initialize_hardware": 3,
                    "initialize_system": 16
                },
                "check_and_verify_conditions_08005cec": {
                    "verify_conditions": 2
                },
                "iVar1": {
                    "condition_check_result": 1,
                    "result": 6,
                    "verification_result": 1
                },
                "initialize_and_check_clock_frequency_0800618c": {
                    "check_clock_frequency": 2
                },
                "local_10": {
                    "address2": 3,
                    "clock_error": 1,
                    "clock_freq4": 2,
                    "clock_freq_4": 1,
                    "clock_freq_var4": 1,
                    "clock_frequency4": 1,
                    "clock_frequency_4": 5,
                    "clock_frequency_check_4": 1,
                    "clock_value": 1,
                    "count4": 1,
                    "initialize_param": 1,
                    "loop_limit": 2,
                    "max_frequency": 1,
                    "memory_size": 1,
                    "register_a": 1,
                    "size": 2,
                    "threshold_value": 1,
                    "value10": 3,
                    "value12": 1,
                    "value_j": 1
                },
                "local_14": {
                    "clock_delay": 1,
                    "clock_freq3": 2,
                    "clock_freq_3": 1,
                    "clock_freq_var3": 1,
                    "clock_frequency3": 1,
                    "clock_frequency_3": 5,
                    "clock_frequency_check_3": 1,
                    "clock_source": 2,
                    "clock_value": 1,
                    "condition2": 1,
                    "condition8": 1,
                    "count3": 1,
                    "counter": 1,
                    "loop_counter": 2,
                    "offset": 2,
                    "value11": 1,
                    "value4": 1,
                    "value6": 1,
                    "value9": 3,
                    "value_i": 1
                },
                "local_18": {
                    "clock_condition": 1,
                    "clock_divider": 1,
                    "clock_divisor": 1,
                    "clock_freq2": 2,
                    "clock_freq_2": 1,
                    "clock_freq_var2": 1,
                    "clock_frequency2": 1,
                    "clock_frequency_2": 5,
                    "clock_frequency_check_2": 1,
                    "clock_initialization_value": 1,
                    "clock_mode": 1,
                    "clock_multiplier": 1,
                    "condition1": 1,
                    "condition4": 1,
                    "condition7": 1,
                    "condition_4": 1,
                    "count2": 1,
                    "frequency_check": 1,
                    "mode": 1,
                    "value10": 1,
                    "value3": 1,
                    "value5": 1,
                    "value8": 3,
                    "value_h": 1
                },
                "local_1c": {
                    "clock_freq1": 2,
                    "clock_freq_1": 1,
                    "clock_freq_var1": 1,
                    "clock_frequency": 9,
                    "clock_frequency1": 1,
                    "clock_frequency_1": 5,
                    "clock_frequency_check_1": 1,
                    "clock_frequency_value": 1,
                    "clock_param": 1,
                    "count1": 1,
                    "count4": 1,
                    "frequency": 1,
                    "mask": 1,
                    "value7": 3,
                    "value9": 1,
                    "value_g": 1
                },
                "local_20": {
                    "condition6": 2,
                    "condition8": 1,
                    "condition_3": 1,
                    "condition_8": 6,
                    "condition_check_8": 1,
                    "config": 1,
                    "constant4": 1,
                    "limit": 1,
                    "loop_var3": 1,
                    "num6": 1,
                    "setting8": 1,
                    "timeout": 1,
                    "value2": 2,
                    "value4": 2,
                    "value6": 4,
                    "value8": 1,
                    "value_3": 1,
                    "value_6": 1,
                    "value_f": 1
                },
                "local_24": {
                    "condition3": 1,
                    "condition5": 2,
                    "condition7": 1,
                    "condition_2": 1,
                    "condition_7": 6,
                    "condition_check_7": 1,
                    "constant3": 1,
                    "count3": 1,
                    "counter": 1,
                    "loop_var2": 1,
                    "mode": 1,
                    "num5": 1,
                    "option": 1,
                    "setting7": 1,
                    "value3": 2,
                    "value5": 4,
                    "value7": 1,
                    "value_2": 1,
                    "value_5": 1,
                    "value_e": 1
                },
                "local_28": {
                    "condition4": 1,
                    "condition6": 1,
                    "condition_6": 6,
                    "condition_check_6": 1,
                    "constant2": 1,
                    "delay": 1,
                    "loop_delay": 1,
                    "num4": 1,
                    "setting6": 1,
                    "timeout": 1,
                    "timer": 1,
                    "value": 1,
                    "value1": 2,
                    "value2": 2,
                    "value4": 4,
                    "value6": 1,
                    "value_1": 1,
                    "value_4": 1,
                    "value_d": 1
                },
                "local_2c": {
                    "condition3": 1,
                    "condition4": 1,
                    "condition5": 1,
                    "condition_4": 1,
                    "condition_5": 6,
                    "condition_check_5": 1,
                    "constant1": 1,
                    "count": 1,
                    "count2": 1,
                    "counter": 1,
                    "data_size": 1,
                    "loop_count": 1,
                    "loop_var": 1,
                    "num3": 1,
                    "setting5": 1,
                    "value1": 2,
                    "value3": 4,
                    "value5": 1,
                    "value_3": 1,
                    "value_c": 1
                },
                "local_30": {
                    "address": 2,
                    "address1": 3,
                    "base_address": 2,
                    "condition2": 1,
                    "condition4": 1,
                    "condition_4": 6,
                    "condition_check_4": 1,
                    "memory_address": 5,
                    "num2": 1,
                    "setting4": 1,
                    "value2": 4,
                    "value4": 1,
                    "value_2": 1,
                    "value_b": 1
                },
                "local_34": {
                    "condition": 1,
                    "condition1": 1,
                    "condition2": 1,
                    "condition3": 4,
                    "condition_1": 1,
                    "condition_3": 7,
                    "condition_check_3": 1,
                    "condition_var3": 1,
                    "count1": 1,
                    "counter": 2,
                    "num1": 1,
                    "setting3": 1,
                    "system_mode": 1,
                    "value": 1,
                    "value1": 4,
                    "value3": 1,
                    "value_1": 1,
                    "value_a": 1
                },
                "local_48": {
                    "bitwise_flag2": 1,
                    "condition2": 4,
                    "condition_2": 7,
                    "condition_check_2": 1,
                    "condition_flag_2": 1,
                    "condition_var2": 1,
                    "enable_module": 1,
                    "flag": 1,
                    "flag2": 8,
                    "flag_2": 2,
                    "flag_b": 1,
                    "initialized_flag2": 1,
                    "setting2": 1,
                    "value2": 1
                },
                "local_4c": {
                    "bitwise_flag": 1,
                    "condition": 1,
                    "condition1": 4,
                    "condition_1": 7,
                    "condition_check_1": 1,
                    "condition_flag_1": 1,
                    "condition_var1": 1,
                    "enable_interrupts": 1,
                    "flag": 1,
                    "flag1": 7,
                    "flag_1": 2,
                    "flag_a": 1,
                    "initialized_flag": 1,
                    "setting1": 1,
                    "value1": 1
                },
                "local_c": {
                    "address3": 1,
                    "block_size": 1,
                    "buffer": 1,
                    "buffer_size": 1,
                    "clock_freq5": 2,
                    "clock_freq_5": 1,
                    "clock_freq_var5": 1,
                    "clock_frequency5": 1,
                    "clock_frequency_5": 5,
                    "clock_frequency_check_5": 1,
                    "clock_threshold": 1,
                    "count5": 1,
                    "initialize_condition": 1,
                    "loop_increment": 2,
                    "min_frequency": 1,
                    "register_b": 1,
                    "value11": 3,
                    "value13": 1,
                    "value2": 1,
                    "value7": 1,
                    "value_k": 1
                },
                "run_infinite_loop_08007430": {
                    "infinite_loop": 2
                }
            },
            "called": [
                "FUN_0800618c",
                "FUN_08007430",
                "FUN_08005cec"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_and_check_system_08007436(void)\n\n{\n  int result;\n  undefined4 flag1;\n  undefined4 flag2;\n  undefined4 condition_3;\n  undefined4 condition_4;\n  undefined4 condition_5;\n  undefined4 condition_6;\n  undefined4 condition_7;\n  undefined4 condition_8;\n  undefined4 clock_frequency;\n  undefined4 clock_frequency_2;\n  undefined4 clock_frequency_3;\n  undefined4 clock_frequency_4;\n  undefined4 clock_frequency_5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  flag1 = 1;\n  flag2 = 1;\n  condition_3 = 2;\n  condition_4 = 0x400000;\n  condition_5 = 8;\n  condition_6 = 0x150;\n  condition_7 = 2;\n  condition_8 = 7;\n  result = verify_conditions(&flag1);\n  if (result != 0) {\n    run_infinite_loop_08007430();\n  }\n  clock_frequency = 0xf;\n  clock_frequency_2 = 2;\n  clock_frequency_3 = 0;\n  clock_frequency_4 = 0x1400;\n  clock_frequency_5 = 0x1000;\n  result = check_clock_frequency(&clock_frequency,5);\n  if (result != 0) {\n    run_infinite_loop_08007430();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_and_check_system_08007436",
            "entrypoint": "0x08007436",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007436": "initialize_and_check_system_08007436",
                "check_and_verify_conditions_08005cec": "verify_conditions",
                "iVar1": "result",
                "initialize_and_check_clock_frequency_0800618c": "check_clock_frequency",
                "local_10": "clock_frequency_4",
                "local_14": "clock_frequency_3",
                "local_18": "clock_frequency_2",
                "local_1c": "clock_frequency",
                "local_20": "condition_8",
                "local_24": "condition_7",
                "local_28": "condition_6",
                "local_2c": "condition_5",
                "local_30": "condition_4",
                "local_34": "condition_3",
                "local_48": "flag2",
                "local_4c": "flag1",
                "local_c": "clock_frequency_5",
                "run_infinite_loop_08007430": "infinite_loop"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080074c8": {
            "additional_data": {
                "0x1e": {
                    "system_components_flag_mask": 1
                },
                "DAT_20000e4c": {
                    "check_system_components_flag": 1,
                    "is_component_initialized": 1,
                    "is_system_component_initialized": 1,
                    "is_system_components_initialized": 1,
                    "is_system_initialized": 1,
                    "should_check_and_initialize": 1,
                    "system_component_flag_1": 2,
                    "system_component_flag_a": 1,
                    "system_components_enabled": 1,
                    "system_components_flag1": 4,
                    "system_components_initialized": 6,
                    "system_initialized": 1
                },
                "DAT_20000e50": {
                    "initialize_system_components_flag": 1,
                    "is_component_check_needed": 1,
                    "is_system_checked": 1,
                    "is_system_components_checked": 1,
                    "is_system_initialized": 1,
                    "should_initialize_or_check": 1,
                    "system_checked": 1,
                    "system_component_flag_2": 2,
                    "system_component_flag_b": 1,
                    "system_components_available": 1,
                    "system_components_checked": 4,
                    "system_components_enabled": 1,
                    "system_components_flag2": 4,
                    "system_components_initialized": 1
                },
                "FUN_080074c8": {
                    "handle_system_changes": 1,
                    "handle_system_configuration": 2,
                    "handle_system_options": 1,
                    "handle_system_parameters": 1,
                    "initialize_system": 18,
                    "initialize_system_components": 4,
                    "initialize_system_function": 1,
                    "perform_system_initialization": 1,
                    "process_parameters": 1,
                    "update_system_components": 1
                },
                "check_and_initialize_system_components_0800195c": {
                    "check_and_init_system_components": 1,
                    "check_and_initialize_components": 14,
                    "check_and_initialize_components_a": 1,
                    "check_and_initialize_sys_components_func": 1,
                    "check_and_initialize_system_components": 7,
                    "initialize_components": 1,
                    "initialize_system_components": 5,
                    "initialize_system_components_if_required": 1
                },
                "initialize_or_check_system_components_08003a18": {
                    "check_or_initialize_system_components": 2,
                    "init_or_check_system_components": 1,
                    "initialize_or_check_components": 15,
                    "initialize_or_check_components_b": 1,
                    "initialize_or_check_sys_components_func": 1,
                    "initialize_or_check_system_components": 11
                },
                "param_1": {
                    "config_flags": 1,
                    "configuration_flags": 1,
                    "flags": 18,
                    "input": 1,
                    "input_flags": 3,
                    "input_param": 1,
                    "options": 1,
                    "param": 2,
                    "parameter": 1,
                    "system_changes": 1,
                    "system_parameters": 1
                },
                "set_bit_value_in_memory_08007402": {
                    "enable_specific_feature": 1,
                    "set_bit_value_in_memory": 8,
                    "set_flag_in_memory": 1,
                    "set_memory_bit": 2,
                    "set_memory_bit_value": 19
                }
            },
            "called": [
                "FUN_08007402",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid initialize_system_components_080074c8(uint flags)\n\n{\n  if ((flags & 1) != 0) {\n    set_bit_value_in_memory_08007402(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((flags & 0x1e) != 0)) {\n    check_and_initialize_components();\n  }\n  if ((DAT_20000e50 != 0) && ((flags & 0x80) != 0)) {\n    initialize_or_check_components(flags);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_system_components_080074c8",
            "entrypoint": "0x080074c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080074c8": "initialize_system_components_080074c8",
                "check_and_initialize_system_components_0800195c": "check_and_initialize_components",
                "initialize_or_check_system_components_08003a18": "initialize_or_check_components",
                "param_1": "flags",
                "set_bit_value_in_memory_08007402": "set_memory_bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007520": {
            "additional_data": {
                "0x3e": {
                    "address": 1,
                    "bit_mask": 2,
                    "bit_pattern": 1,
                    "bit_value": 2
                },
                "FUN_08007520": {
                    "set_bit_if_lsb_is_set": 1,
                    "set_bit_if_lsb_set": 1,
                    "set_bit_if_odd": 16,
                    "set_bit_if_param_lsb_is_set": 1,
                    "set_bit_if_param_odd": 1,
                    "set_bit_if_param_one_is_odd": 1,
                    "set_bit_in_memory": 1,
                    "set_bit_in_memory_if_odd": 3,
                    "set_memory_bit": 4,
                    "set_memory_bit_if_odd": 1,
                    "update_memory_bit_if_odd": 1
                },
                "param_1": {
                    "bitmask": 1,
                    "flag": 1,
                    "input": 6,
                    "input_number": 1,
                    "input_param": 1,
                    "input_value": 7,
                    "number": 8,
                    "value": 6
                },
                "set_bit_in_memory_080073d4": {
                    "set_bit": 1,
                    "set_bit_in_memory": 9,
                    "set_memory_bit": 9,
                    "set_memory_bit_in_address": 2
                }
            },
            "called": [
                "FUN_080073d4"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid set_bit_in_memory_if_odd_08007520(uint number)\n\n{\n  if ((number & 1) != 0) {\n    set_bit_in_memory_080073d4(0x3e);\n  }\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_if_odd_08007520",
            "entrypoint": "0x08007520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007520": "set_bit_in_memory_if_odd_08007520",
                "param_1": "number",
                "set_bit_in_memory_080073d4": "set_bit_in_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007540": {
            "additional_data": {
                "FUN_08007540": {
                    "initialize_and_execute_system": 1,
                    "initialize_and_process_system": 3,
                    "initialize_system": 24,
                    "initialize_system_and_data": 3
                },
                "execute_or_skip_system_interrupt_08005984": {
                    "execute_or_skip_system_interrupt": 29,
                    "execute_system_interrupt": 1,
                    "handle_system_interrupt": 1
                },
                "initialize_and_check_system_08007436": {
                    "check_system": 1,
                    "check_system_status": 1,
                    "initialize_and_check_system": 29
                },
                "initialize_and_process_device_data_08001ddc": {
                    "initialize_and_process_device_data": 30,
                    "process_device_data": 1
                },
                "initialize_data_structure_080079c0": {
                    "initialize_data_structure": 31
                },
                "initialize_memory_flags_08008190": {
                    "initialize_memory_flags": 31
                },
                "initialize_system_080059b4": {
                    "initialize_system": 7,
                    "initialize_system_080059b4": 1
                },
                "initialize_system_08007e08": {
                    "initialize_additional_system": 1,
                    "initialize_device_system": 1,
                    "initialize_graphics_system": 2,
                    "initialize_secondary_system": 2,
                    "initialize_subsystem": 1,
                    "initialize_system": 8,
                    "initialize_system2": 2,
                    "initialize_system_08007e08": 1,
                    "initialize_system_2": 11,
                    "initialize_system_again": 1,
                    "initialize_system_components": 1
                },
                "update_and_set_parameters_0800778c": {
                    "update_and_set_parameters": 29,
                    "update_parameters": 1,
                    "update_system_parameters": 1
                }
            },
            "called": [
                "FUN_080079c0",
                "FUN_08001ddc",
                "FUN_08008190",
                "FUN_08007436",
                "FUN_080059b4",
                "FUN_0800778c",
                "FUN_08005984",
                "FUN_08007e08"
            ],
            "calling": [
                "entry"
            ],
            "code": "\nundefined4 initialize_and_process_system_08007540(void)\n\n{\n  initialize_system();\n  initialize_and_check_system();\n  update_and_set_parameters();\n  initialize_system_2();\n  initialize_data_structure();\n  initialize_memory_flags();\n  execute_or_skip_system_interrupt(0);\n  initialize_and_process_device_data();\n  return 0;\n}\n\n",
            "current_name": "initialize_and_process_system_08007540",
            "entrypoint": "0x08007540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007540": "initialize_and_process_system_08007540",
                "execute_or_skip_system_interrupt_08005984": "execute_or_skip_system_interrupt",
                "initialize_and_check_system_08007436": "initialize_and_check_system",
                "initialize_and_process_device_data_08001ddc": "initialize_and_process_device_data",
                "initialize_data_structure_080079c0": "initialize_data_structure",
                "initialize_memory_flags_08008190": "initialize_memory_flags",
                "initialize_system_080059b4": "initialize_system",
                "initialize_system_08007e08": "initialize_system_2",
                "update_and_set_parameters_0800778c": "update_and_set_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800756c": {
            "additional_data": {
                "FUN_0800756c": {
                    "initialize_default_settings": 1,
                    "initialize_device": 1,
                    "initialize_hardware": 2,
                    "initialize_memory": 6,
                    "initialize_registers": 8,
                    "initialize_system": 12,
                    "initialize_variables": 1
                },
                "_DAT_40023800": {
                    "config_register": 3,
                    "control_register": 7,
                    "interrupt_config": 1,
                    "interrupt_control_register": 2,
                    "mask": 1,
                    "memory_config": 1,
                    "register3": 3,
                    "register_value": 5,
                    "status_register": 1,
                    "system_config": 1,
                    "system_config_value": 1,
                    "system_configuration": 2,
                    "system_control_reg": 1,
                    "system_control_register": 1,
                    "var_3": 1
                },
                "_DAT_40023804": {
                    "address_register": 1,
                    "base_address": 7,
                    "configuration_register": 2,
                    "control_register": 3,
                    "initial_value": 1,
                    "memory_address": 2,
                    "pointer_to_register_address": 1,
                    "register2": 3,
                    "register_address": 1,
                    "registers": 1,
                    "system_config": 1,
                    "system_config_address": 2,
                    "system_config_reg": 1,
                    "system_control_address": 1,
                    "system_control_register": 1,
                    "system_status_register": 1,
                    "var_2": 1
                },
                "_DAT_40023808": {
                    "counter": 2,
                    "interrupt_flag": 1,
                    "register1": 3,
                    "status_register": 1,
                    "system_error_flag": 1,
                    "system_status_reg": 1,
                    "var_1": 1
                },
                "_DAT_4002380c": {
                    "counter": 1,
                    "flag": 1,
                    "interrupt_register": 1,
                    "register4": 3,
                    "status": 1,
                    "status_register": 1,
                    "system_error_reg": 1,
                    "system_interrupt_flag": 1,
                    "var_4": 1
                },
                "_DAT_e000ed08": {
                    "debug_register": 1,
                    "exception_register": 3,
                    "interrupt_config": 2,
                    "interrupt_control": 2,
                    "interrupt_control_register": 5,
                    "interrupt_controller_config": 1,
                    "interrupt_enable_register": 3,
                    "interrupt_handler_config": 1,
                    "interrupt_priority_reg": 1,
                    "main_stack_pointer": 1,
                    "periph_reg": 1,
                    "register5": 3,
                    "system_control": 3,
                    "system_control_register": 3,
                    "system_exception_control_register": 1
                }
            },
            "called": [],
            "calling": [
                "entry"
            ],
            "code": "\n\n\nvoid initialize_system_0800756c(void)\n\n{\n  _DAT_40023808 = 0;\n  _DAT_40023804 = 0x24003010;\n  _DAT_40023800 = _DAT_40023800 & 0xfef2ffff | 1;\n  _DAT_4002380c = 0;\n  _DAT_e000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_system_0800756c",
            "entrypoint": "0x0800756c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080076c8": {
            "additional_data": {
                "0x40020014": {
                    "base_address": 1,
                    "memory_address": 2
                },
                "FUN_080076c8": {
                    "flip_bit_in_memory": 1,
                    "modify_bit_at_position": 1,
                    "modify_bits": 1,
                    "modify_bitwise_operation": 1,
                    "modify_data": 1,
                    "modify_memory": 1,
                    "set_bit": 1,
                    "set_bit_in_memory": 1,
                    "toggle_bit": 4,
                    "toggle_bit_in_memory": 1,
                    "update_bit": 7,
                    "update_bit_in_memory": 3,
                    "update_bit_value": 3,
                    "update_bits": 1,
                    "update_bits_at_address": 1,
                    "update_memory_value": 2,
                    "write_bit": 1
                },
                "PTR_40020014": {
                    "memory_address": 1
                },
                "int": {
                    "shifted_input": 1
                },
                "param_1": {
                    "address": 2,
                    "bit_index": 2,
                    "bit_position": 3,
                    "index": 1,
                    "input": 13,
                    "input_number": 1,
                    "input_value": 4,
                    "memory_address": 1,
                    "value": 4
                },
                "param_2": {
                    "bit_position": 1,
                    "bit_value": 1,
                    "mask": 1,
                    "size": 1
                },
                "param_3": {
                    "base_address": 1,
                    "bit_position": 1,
                    "value": 1
                },
                "param_4": {
                    "memory": 1,
                    "modifier": 1
                },
                "param_5": {
                    "mask": 1,
                    "offset": 1
                },
                "param_6": {
                    "bit_position": 1,
                    "data": 1
                },
                "param_7": {
                    "shift": 1
                },
                "param_8": {
                    "new_value": 1
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid update_bit_value_080076c8(unsigned_int input)\n\n{\n  *(unsigned_int *)(((shifted_input)input >> 4) * 0x400 + 0x40020014) =\n       *(unsigned_int *)(((shifted_input)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "current_name": "update_bit_value_080076c8",
            "entrypoint": "0x080076c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080076c8": "update_bit_value_080076c8",
                "int": "shifted_input",
                "param_1": "input",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007756": {
            "additional_data": {
                "FUN_08007756": {
                    "check_and_update_data": 2,
                    "check_and_update_data_values": 1,
                    "check_and_update_system_status": 2,
                    "handle_data_update": 1,
                    "update_components": 1,
                    "update_data_and_components": 7,
                    "update_data_components": 2,
                    "update_data_system": 1,
                    "update_system": 6,
                    "update_system_components": 6,
                    "update_system_components_if_needed": 1,
                    "update_system_state": 1
                },
                "get_data_value_08005a84": {
                    "get_data_value": 26,
                    "retrieve_data_value": 1
                },
                "increment_data_counter_08005a68": {
                    "increment_data_counter": 31
                },
                "uVar1": {
                    "data_value": 27
                },
                "update_bit_value_080076c8": {
                    "set_bit_value": 4,
                    "update_bit_value": 27
                },
                "update_system_components_08007930": {
                    "update_components": 1,
                    "update_system_components": 30
                }
            },
            "called": [
                "FUN_080076c8",
                "FUN_08007930",
                "FUN_08005a68",
                "FUN_08005a84"
            ],
            "calling": [],
            "code": "\nvoid update_system_components_if_needed_08007756(void)\n\n{\n  uint data_value;\n  \n  data_value = get_data_value_08005a84();\n  if ((data_value & 0x1ff) == 0) {\n    update_bit_value_080076c8(0x3c);\n  }\n  if ((data_value & 0xf) == 0) {\n    update_system_components();\n  }\n  increment_data_counter_08005a68();\n  return;\n}\n\n",
            "current_name": "update_system_components_if_needed_08007756",
            "entrypoint": "0x08007756",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007756": "update_system_components_if_needed_08007756",
                "get_data_value_08005a84": "get_data_value",
                "increment_data_counter_08005a68": "increment_data_counter",
                "uVar1": "data_value",
                "update_bit_value_080076c8": "update_bit_value",
                "update_system_components_08007930": "update_system_components"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800778c": {
            "additional_data": {
                "FUN_08007788": {
                    "initialize_registers": 1
                },
                "FUN_0800778c": {
                    "configure_hardware": 2,
                    "configure_peripheral": 1,
                    "initialize": 1,
                    "initialize_bits": 1,
                    "initialize_bits_and_parameters": 1,
                    "initialize_device": 2,
                    "initialize_flags_and_parameters": 1,
                    "initialize_hardware": 1,
                    "initialize_parameters": 1,
                    "initialize_registers": 4,
                    "initialize_settings": 1,
                    "update_and_set_parameters": 8,
                    "update_bitmask_and_parameters": 1,
                    "update_configuration": 1,
                    "update_device_configuration": 2,
                    "update_parameters_and_values": 1,
                    "update_registers": 1
                },
                "iVar1": {
                    "array_offset": 1,
                    "index": 5,
                    "offset": 9
                },
                "local_10": {
                    "config_ptr": 1,
                    "data_array": 1,
                    "data_ptr": 2,
                    "param_array": 3,
                    "param_ptr": 3,
                    "parameter": 2,
                    "parameter_array": 1,
                    "parameter_info": 1,
                    "parameter_list": 2,
                    "parameter_pointer": 1,
                    "parameter_ptr": 1,
                    "parameters": 4,
                    "parameters_ptr": 1,
                    "pointer": 3,
                    "register_data": 1,
                    "register_ptr": 3,
                    "settings_array": 1
                },
                "local_14": {
                    "address4": 1,
                    "data_4": 1,
                    "param4": 10,
                    "param_4": 7,
                    "param_value_4": 1,
                    "parameter4": 1,
                    "parameter_4": 4,
                    "parameter_value_4": 2,
                    "value4": 1,
                    "value_4": 3
                },
                "local_18": {
                    "address3": 1,
                    "data_3": 1,
                    "param3": 10,
                    "param_3": 7,
                    "param_value_3": 1,
                    "parameter3": 1,
                    "parameter_3": 4,
                    "parameter_value_3": 2,
                    "value3": 1,
                    "value_3": 3
                },
                "local_1c": {
                    "address2": 1,
                    "data_2": 1,
                    "param2": 10,
                    "param_2": 7,
                    "param_value_2": 1,
                    "parameter2": 1,
                    "parameter_2": 4,
                    "parameter_value_2": 2,
                    "value2": 1,
                    "value_2": 3
                },
                "local_20": {
                    "address1": 1,
                    "data_1": 1,
                    "param1": 10,
                    "param_1": 7,
                    "param_value_1": 1,
                    "parameter1": 1,
                    "parameter_1": 4,
                    "parameter_value_1": 2,
                    "value1": 1,
                    "value_1": 3
                },
                "local_24": {
                    "bit_flags": 1,
                    "bit_mask": 14,
                    "bit_pattern": 1,
                    "bit_position": 1,
                    "bit_value": 1,
                    "bitmask": 5,
                    "mask": 2,
                    "param_bitmask": 1,
                    "param_flag": 1,
                    "parameter_flag": 1,
                    "set_bits": 1,
                    "shift_value": 1,
                    "value_to_set": 1
                },
                "local_c": {
                    "count": 1,
                    "counter": 15,
                    "index": 5,
                    "iteration": 1,
                    "loop_count": 1,
                    "loop_counter": 4,
                    "loop_index": 3,
                    "register_index": 1
                },
                "set_param_value_0800733e": {
                    "set_parameter_value": 1
                },
                "update_parameters_08006e88": {
                    "update_parameters": 1
                }
            },
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid update_and_set_parameters_0800778c(void)\n\n{\n  int offset;\n  int bit_mask;\n  undefined4 param1;\n  undefined4 param2;\n  undefined4 param3;\n  undefined4 param4;\n  uint *parameters;\n  uint counter;\n  \n  for (counter = 0; counter < 0x11; counter = counter + 1) {\n    offset = counter * 0x18;\n    parameters = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*parameters >> 4 & 0xff);\n    bit_mask = 1 << (*parameters & 0xf);\n    param1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    param2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    param3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    param4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    update_parameters_08006e88(((*parameters >> 4) + 0x100080) * 0x400,&bit_mask);\n    if (-1 < (int)parameters[5]) {\n      set_param_value_0800733e(((*parameters >> 4) + 0x100080) * 0x400,1 << (*parameters & 0xf) & 0xffff,\n                   parameters[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_and_set_parameters_0800778c",
            "entrypoint": "0x0800778c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800778c": "update_and_set_parameters_0800778c",
                "iVar1": "offset",
                "local_10": "parameters",
                "local_14": "param4",
                "local_18": "param3",
                "local_1c": "param2",
                "local_20": "param1",
                "local_24": "bit_mask",
                "local_c": "counter",
                "set_param_value_0800733e": "set_parameter_value",
                "update_parameters_08006e88": "update_parameters"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007854": {
            "additional_data": {
                "0x400": {
                    "address_offset": 1,
                    "block_size": 1
                },
                "0x40020010": {
                    "base_address": 2,
                    "memory_base_address": 1
                },
                "0xf": {
                    "bit_mask": 2
                },
                "DAT_": {
                    "": 1,
                    "dat_": 1
                },
                "FUN_08007854": {
                    "bitwise_shift_and_mask": 1,
                    "check_bit": 3,
                    "check_bit_at_index": 1,
                    "check_bit_value": 3,
                    "extract_and_check_bit": 1,
                    "extract_bit": 2,
                    "extract_bit_from_memory": 2,
                    "extract_bit_from_uint": 2,
                    "extract_bit_from_word": 1,
                    "extract_bit_value": 1,
                    "get_bit_from_address": 1,
                    "get_bit_from_array": 1,
                    "get_bit_from_memory": 2,
                    "get_bit_from_table": 1,
                    "get_bit_value": 4,
                    "read_bit": 1,
                    "read_bit_from_address": 1,
                    "read_bit_from_memory": 1
                },
                "PTR_": {
                    "": 1,
                    "ptr_": 1
                },
                "int": {
                    "shifted_address": 1
                },
                "new_variable_name_1": {
                    "shifted_value": 1
                },
                "new_variable_name_2": {
                    "base_address": 1
                },
                "new_variable_name_3": {
                    "mask": 1
                },
                "param_1": {
                    "address": 2,
                    "bit_address": 1,
                    "index": 2,
                    "input": 4,
                    "input_uint": 2,
                    "input_value": 15,
                    "memory_address": 2,
                    "num": 1,
                    "number": 2
                },
                "uint": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007884"
            ],
            "code": "\nresult check_bit_value_08007854(result input_value)\n\n{\n  return *(result *)(((shifted_address)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "current_name": "check_bit_value_08007854",
            "entrypoint": "0x08007854",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007854": "check_bit_value_08007854",
                "int": "shifted_address",
                "param_1": "input_value",
                "uint": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007884": {
            "additional_data": {
                "FUN_08007884": {
                    "bit_flags": 1,
                    "bit_values_to_int": 1,
                    "calculate_bit_flags": 1,
                    "calculate_bit_mask": 1,
                    "calculate_bit_value": 1,
                    "combine_bit_values": 1,
                    "combine_bits": 2,
                    "decode_bit_values": 1,
                    "extract_bit_values": 1,
                    "extract_bits": 1,
                    "get_bit_flags": 1,
                    "get_bit_pattern": 1,
                    "get_bit_value": 6,
                    "get_bit_values": 5,
                    "get_bit_values_combined": 1,
                    "get_bitwise_combination": 1,
                    "get_bitwise_combined_value": 1,
                    "get_combined_bit_value": 1,
                    "get_combined_flags": 1,
                    "map_bit_values": 1,
                    "reversed_bit_combination": 1
                },
                "check_bit_value_08007854": {
                    "check_bit_value": 3,
                    "get_bit_value": 2
                },
                "iVar1": {
                    "bit0": 2,
                    "bit_0x36": 11,
                    "bit_0x36_value": 1,
                    "bit_value_0x36": 13,
                    "bit_value_1": 2,
                    "flag0x36": 1,
                    "flag_0x36": 1
                },
                "iVar2": {
                    "bit1": 2,
                    "bit_0x37": 11,
                    "bit_0x37_value": 1,
                    "bit_value_0x37": 13,
                    "bit_value_2": 2,
                    "flag0x37": 1,
                    "flag_0x37": 1
                },
                "iVar3": {
                    "bit2": 2,
                    "bit_0x38": 11,
                    "bit_0x38_value": 1,
                    "bit_value_0x38": 13,
                    "bit_value_3": 2,
                    "flag0x38": 1,
                    "flag_0x38": 1
                },
                "iVar4": {
                    "bit3": 2,
                    "bit_0x39": 11,
                    "bit_0x39_value": 1,
                    "bit_value_0x39": 13,
                    "bit_value_4": 2,
                    "flag0x39": 1,
                    "flag_0x39": 1
                },
                "iVar5": {
                    "bit4": 1,
                    "bit7": 1,
                    "bit_0x0_f_value": 1,
                    "bit_0xf": 11,
                    "bit_value_0x0_f": 1,
                    "bit_value_0xf": 12,
                    "bit_value_5": 2,
                    "flag0xf": 1,
                    "flag_0xf": 1
                },
                "uVar6": {
                    "bit5": 1,
                    "bit6": 1,
                    "bit_0": 4,
                    "bit_0_value": 1,
                    "bit_0x0": 7,
                    "bit_value_0": 12,
                    "bit_value_0x0": 1,
                    "bit_value_0x00": 1,
                    "bit_value_6": 1,
                    "flag0": 1,
                    "flag_0": 1
                }
            },
            "called": [
                "FUN_08007854"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nuint get_combined_bit_value_08007884(void)\n\n{\n  int bit_value_0x36;\n  int bit_value_0x37;\n  int bit_value_0x38;\n  int bit_value_0x39;\n  int bit_value_0xf;\n  uint bit_value_0;\n  \n  bit_value_0x36 = check_bit_value_08007854(0x36);\n  bit_value_0x37 = check_bit_value_08007854(0x37);\n  bit_value_0x38 = check_bit_value_08007854(0x38);\n  bit_value_0x39 = check_bit_value_08007854(0x39);\n  bit_value_0xf = check_bit_value_08007854(0xf);\n  bit_value_0 = check_bit_value_08007854(0);\n  return bit_value_0 | bit_value_0x36 << 4 | bit_value_0x37 << 3 | bit_value_0x38 << 2 | bit_value_0x39 << 1 | bit_value_0xf << 7;\n}\n\n",
            "current_name": "get_combined_bit_value_08007884",
            "entrypoint": "0x08007884",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007884": "get_combined_bit_value_08007884",
                "check_bit_value_08007854": "check_bit_value",
                "iVar1": "bit_value_0x36",
                "iVar2": "bit_value_0x37",
                "iVar3": "bit_value_0x38",
                "iVar4": "bit_value_0x39",
                "iVar5": "bit_value_0xf",
                "uVar6": "bit_value_0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080078f4": {
            "called": [],
            "calling": [
                "FUN_08001994",
                "FUN_08007930"
            ],
            "code": "\nuint FUNC_080078f4(void)\n\n{\n  int local_10;\n  uint local_c;\n  \n  local_c = 0;\n  for (local_10 = 0; local_10 < 4; local_10 = local_10 + 1) {\n    local_c = *(uint *)(&DAT_20000e54 + local_10 * 4) | local_c;\n  }\n  return local_c;\n}\n\n",
            "current_name": "FUNC_080078f4",
            "entrypoint": "0x080078f4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080078f4": "FUNC_080078f4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08007930": {
            "additional_data": {
                "FUNC_080078f4": {
                    "get_current_bit_value": 3,
                    "get_new_value": 1,
                    "perform_operation": 1,
                    "update_function": 1
                },
                "FUN_08007930": {
                    "execute_system_routine": 1,
                    "update_data_and_components": 1,
                    "update_memory": 1,
                    "update_memory_and_components": 1,
                    "update_memory_bit": 1,
                    "update_system_components": 15,
                    "update_system_configuration": 2,
                    "update_system_data": 1,
                    "update_system_state": 7,
                    "update_system_status": 1
                },
                "get_combined_bit_value_08007884": {
                    "calculate_combined_bit_value": 1,
                    "get_combined_bit_value": 4,
                    "retrieve_combined_bit_value": 1
                },
                "iVar1": {
                    "counter": 1,
                    "current_bit_index": 3,
                    "current_component": 1,
                    "current_component_index": 2,
                    "current_idx": 1,
                    "current_pointer": 1,
                    "current_position": 1,
                    "current_value": 2,
                    "data_index": 1,
                    "index": 5,
                    "memory_index": 1,
                    "previous_index": 1,
                    "previous_state": 1
                },
                "initialize_system_components_080074c8": {
                    "initialize_changed_components": 3,
                    "initialize_components": 4,
                    "initialize_system_components": 4
                },
                "set_bit_in_memory_if_odd_08007520": {
                    "set_bit_if_odd": 1,
                    "set_bit_in_memory_if_odd": 5,
                    "set_odd_bit_in_memory": 4,
                    "set_odd_memory_bit": 1
                },
                "uVar1": {
                    "current_index": 1
                },
                "uVar2": {
                    "combined_bit_value": 1,
                    "current_state": 1,
                    "current_value": 1,
                    "initial_value": 1,
                    "original_value": 1,
                    "previous_bit_value": 5,
                    "previous_combined_bit_value": 1,
                    "previous_config": 1,
                    "previous_state": 3,
                    "previous_status": 1,
                    "previous_system_state": 1,
                    "previous_value": 8
                },
                "uVar3": {
                    "bit_value": 2,
                    "combined_bit_value": 19,
                    "combined_value": 2,
                    "new_bit_value": 1,
                    "new_state": 1
                },
                "uVar4": {
                    "current_combined_bit_value": 1,
                    "current_system_state": 1,
                    "current_value": 2,
                    "new_bit_value": 6,
                    "new_combined_bit_value": 2,
                    "new_combined_value": 2,
                    "new_config": 1,
                    "new_config_value": 1,
                    "new_state": 3,
                    "new_status": 1,
                    "new_value": 4,
                    "state_change": 1,
                    "system_status": 1
                },
                "uVar5": {
                    "bit_diff": 1,
                    "bit_difference": 2,
                    "bits_to_update": 1,
                    "changed_bits": 19,
                    "changed_status": 1,
                    "odd_state_change": 1,
                    "set_bits": 1
                }
            },
            "called": [
                "FUN_080074c8",
                "FUN_08007520",
                "FUN_08007884",
                "FUN_080078f4"
            ],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid update_system_components_08007930(void)\n\n{\n  int index;\n  uint previous_value;\n  undefined4 combined_bit_value;\n  uint new_bit_value;\n  uint changed_bits;\n  \n  index = DAT_20000e68;\n  previous_value = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    combined_bit_value = get_combined_bit_value();\n    *(undefined4 *)(&DAT_20000e54 + index * 4) = combined_bit_value;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    new_bit_value = FUNC_080078f4();\n    previous_value = DAT_20000e64;\n    if (new_bit_value != DAT_20000e64) {\n      changed_bits = ~new_bit_value & DAT_20000e64;\n      if ((~DAT_20000e64 & new_bit_value) != 0) {\n        initialize_components(~DAT_20000e64 & new_bit_value);\n      }\n      previous_value = new_bit_value;\n      if (changed_bits != 0) {\n        set_bit_in_memory_if_odd(changed_bits);\n      }\n    }\n  }\n  DAT_20000e64 = previous_value;\n  return;\n}\n\n",
            "current_name": "update_system_components_08007930",
            "entrypoint": "0x08007930",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007930": "update_system_components_08007930",
                "get_combined_bit_value_08007884": "get_combined_bit_value",
                "iVar1": "index",
                "initialize_system_components_080074c8": "initialize_components",
                "set_bit_in_memory_if_odd_08007520": "set_bit_in_memory_if_odd",
                "uVar2": "previous_value",
                "uVar3": "combined_bit_value",
                "uVar4": "new_bit_value",
                "uVar5": "changed_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079c0": {
            "additional_data": {
                "0x18": {
                    "memory_size": 1
                },
                "DAT_20000e54": {
                    "data": 3,
                    "data_array": 2,
                    "data_block": 10,
                    "data_buffer": 7,
                    "data_structure": 5
                },
                "DAT_20000e6c": {
                    "data_flag": 3,
                    "flag": 21,
                    "flag_value": 1,
                    "status": 1,
                    "variable_flag": 1
                },
                "FUN_080079c0": {
                    "init_data_structure": 1,
                    "initialize_data": 26,
                    "initialize_data_structure": 3,
                    "initialize_data_structures": 1
                },
                "memset_with_value_0800b430": {
                    "clear_memory": 4,
                    "fill_memory_with_value": 3,
                    "initialize_memory": 10,
                    "initialize_memory_with_zero": 1,
                    "initialize_with_zero": 1,
                    "memset_with_data": 1,
                    "memset_with_value": 5,
                    "set_memory": 1,
                    "set_memory_with_value": 3
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_data_structure_080079c0(void)\n\n{\n  memset_with_value_0800b430(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_080079c0",
            "entrypoint": "0x080079c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079c0": "initialize_data_structure_080079c0",
                "memset_with_value_0800b430": "initialize_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e0": {
            "additional_data": {
                "FUN_080079e0": {
                    "set_bit": 9,
                    "set_bit_at_index": 2,
                    "set_bit_at_offset": 2,
                    "set_bit_in_array": 4,
                    "set_bit_in_integer_array": 1,
                    "set_bit_in_memory": 10,
                    "set_bit_value": 3
                },
                "int": {
                    "integer_ptr": 1
                },
                "param_1": {
                    "bit_index": 2,
                    "bit_position": 2,
                    "byte_to_set": 4,
                    "byte_value": 4,
                    "index": 1,
                    "input_byte": 16,
                    "new_byte_to_set": 1,
                    "offset": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid set_bit_in_memory_080079e0(byte input_byte)\n\n{\n  *(integer_ptr *)(((uinteger_ptr)(integer_ptr)(char)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080079e0",
            "entrypoint": "0x080079e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "int": "integer_ptr",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a10": {
            "additional_data": {
                "0x40000000": {
                    "flag_a": 1
                },
                "0x40000400": {
                    "flag_b": 1
                },
                "FUN_08007a10": {
                    "apply_permissions": 1,
                    "check_and_update_flag": 1,
                    "set_flag": 2,
                    "set_flag_based_on_param": 1,
                    "set_memory_permission": 1,
                    "set_permission_flags": 1,
                    "update_dat_40023840": 1,
                    "update_data": 1,
                    "update_data_flag": 2,
                    "update_data_flags": 3,
                    "update_flag": 5,
                    "update_flag_based_on_param": 1,
                    "update_flag_bits": 2,
                    "update_flag_value": 1,
                    "update_flags": 3,
                    "update_memory_flag": 1,
                    "update_memory_flags": 1,
                    "update_status": 1,
                    "update_status_flags": 2
                },
                "_DAT_40023840": {
                    "data_flag": 2,
                    "data_flags": 1,
                    "data_register": 1,
                    "flag": 6,
                    "flag_data": 2,
                    "flag_register": 3,
                    "flag_status": 1,
                    "flags": 3,
                    "memory_flag": 1,
                    "memory_flags": 1,
                    "memory_permission": 1,
                    "permission_flags": 1,
                    "permissions": 1,
                    "status": 1,
                    "status_flags": 2
                },
                "param_1": {
                    "address": 8,
                    "data_pointer": 3,
                    "data_ptr": 1,
                    "flag": 1,
                    "input": 6,
                    "input_param": 1,
                    "input_pointer": 3,
                    "input_ptr": 3,
                    "memory_address": 3,
                    "memory_region": 1,
                    "param": 1
                },
                "undefined": {
                    "byte": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "code": "\n\n\nvoid check_and_update_flag_08007a10(byte *address)\n\n{\n  if (address == (byte *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (address == (byte *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (address == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "current_name": "check_and_update_flag_08007a10",
            "entrypoint": "0x08007a10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a10": "check_and_update_flag_08007a10",
                "param_1": "address",
                "undefined": "byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a70": {
            "additional_data": {
                "FUN_08007a70": {
                    "decode_and_set_bit": 1,
                    "process_binary_data": 1,
                    "process_block": 1,
                    "process_data": 1,
                    "process_memory": 7,
                    "process_memory_location": 1,
                    "process_memory_operation": 1,
                    "process_memory_regions": 1,
                    "process_memory_shift": 1,
                    "process_memory_write": 2,
                    "process_shifted_bits": 2,
                    "shifted_bits_to_memory": 1,
                    "write_bits_to_memory": 1,
                    "write_shifted_bits": 1,
                    "write_shifted_bits_and_set_bit": 4,
                    "write_shifted_bits_and_set_bit_memory": 1,
                    "write_shifted_bits_and_set_memory": 1,
                    "write_shifted_bits_to_memory": 2,
                    "write_shifted_bits_to_memory_and_set_bit": 1
                },
                "local_c": {
                    "bit_count": 1,
                    "bit_mask": 1,
                    "bit_offset": 1,
                    "bit_shift_amount": 1,
                    "bit_shift_value": 3,
                    "bit_shifted_value": 2,
                    "shift_amount": 5,
                    "shift_value": 3,
                    "shifted_bit_value": 1,
                    "shifted_bits": 10,
                    "shifted_bits_value": 2,
                    "shifted_value": 1
                },
                "param_1": {
                    "address": 3,
                    "block_address": 1,
                    "data_pointer": 1,
                    "input": 1,
                    "input_address": 3,
                    "input_pointer": 4,
                    "input_ptr": 2,
                    "memory_address": 13,
                    "memory_location": 1,
                    "memory_region": 1,
                    "pointer": 1
                },
                "param_2": {
                    "data_1": 3,
                    "data_to_write": 1,
                    "param1": 1,
                    "shift_value": 1,
                    "shifted_bits": 1,
                    "value1": 10,
                    "value_1": 12,
                    "value_2": 1,
                    "value_to_write": 1
                },
                "param_3": {
                    "bit_value": 1,
                    "data_2": 3,
                    "data_size": 1,
                    "memory_address": 1,
                    "param2": 1,
                    "value2": 10,
                    "value_2": 12,
                    "value_3": 1,
                    "value_size": 1
                },
                "set_bit_in_memory_080079e0": {
                    "set_bit_in_memory": 4
                },
                "write_shifted_bits_to_memory_08006cf6": {
                    "write_bits_to_memory": 3,
                    "write_shifted_bits_to_memory": 1
                }
            },
            "called": [
                "FUN_08006cf6",
                "FUN_080079e0"
            ],
            "calling": [
                "FUN_08007ad0"
            ],
            "code": "\nvoid write_shifted_bits_to_memory_and_set_bit_08007a70(undefined *memory_address,undefined4 value_1,undefined4 value_2)\n\n{\n  undefined shifted_bits;\n  \n  if (memory_address == (undefined *)0x40000000) {\n    shifted_bits = 0x1c;\n  }\n  else if (memory_address == (undefined *)0x40000400) {\n    shifted_bits = 0x1d;\n  }\n  else {\n    if (memory_address != &DAT_40000800) {\n      return;\n    }\n    shifted_bits = 0x1e;\n  }\n  write_bits_to_memory(shifted_bits,value_1,value_2);\n  set_bit_in_memory_080079e0(shifted_bits);\n  return;\n}\n\n",
            "current_name": "write_shifted_bits_to_memory_and_set_bit_08007a70",
            "entrypoint": "0x08007a70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a70": "write_shifted_bits_to_memory_and_set_bit_08007a70",
                "local_c": "shifted_bits",
                "param_1": "memory_address",
                "param_2": "value_1",
                "param_3": "value_2",
                "set_bit_in_memory_080079e0": "set_bit_in_memory",
                "write_shifted_bits_to_memory_08006cf6": "write_bits_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "additional_data": {
                "DAT_20000000": {
                    "constant1": 1,
                    "dat_value": 1,
                    "data": 1,
                    "data_0x20000000": 1,
                    "data_value": 2,
                    "data_variable": 1,
                    "input_data": 1,
                    "input_value": 3,
                    "some_constant": 1,
                    "total_memory": 1,
                    "total_memory_size": 2
                },
                "FUN_08007ad0": {
                    "initialize_data": 1,
                    "initialize_memory": 29,
                    "reset_memory_and_flags": 1
                },
                "_DAT_20000000": {
                    "input_value": 1
                },
                "_DAT_40000000": {
                    "data_0x40000000": 1,
                    "first_flag": 1,
                    "flag": 1,
                    "flag_1": 1,
                    "memory_address": 3,
                    "memory_block0": 1,
                    "memory_location1": 1,
                    "memory_location_1": 3
                },
                "_DAT_40000004": {
                    "flag_2": 1,
                    "memory_block1": 1,
                    "memory_location_2": 3
                },
                "_DAT_40000008": {
                    "flag_3": 1,
                    "memory_block2": 1,
                    "memory_location_3": 3
                },
                "_DAT_4000000c": {
                    "flag_4": 1,
                    "memory_block3": 1,
                    "memory_location_4": 3
                },
                "_DAT_40000010": {
                    "flag_5": 1,
                    "memory_block4": 1,
                    "memory_location_5": 3
                },
                "_DAT_40000028": {
                    "calculated_value": 4,
                    "data_0x40000028": 1,
                    "flag_6": 1,
                    "memory_location2": 1,
                    "memory_location_6": 2,
                    "shift_amount": 1,
                    "shifted_bit_value": 1,
                    "shifted_bits": 4,
                    "shifted_result": 1,
                    "shifted_value": 3,
                    "value": 1
                },
                "_DAT_4000002c": {
                    "flag_7": 1,
                    "memory_location_6": 1,
                    "memory_location_7": 2,
                    "shifted_bits": 1
                },
                "_DAT_40000034": {
                    "flag_8": 1,
                    "memory_location_7": 1,
                    "memory_location_8": 2
                },
                "_DAT_40000038": {
                    "flag_9": 1,
                    "memory_location_8": 1,
                    "memory_location_9": 2
                },
                "_DAT_4000003c": {
                    "flag_10": 1,
                    "memory_location_10": 2,
                    "memory_location_9": 1
                },
                "_DAT_40000040": {
                    "flag_11": 1,
                    "memory_location_10": 1,
                    "memory_location_11": 2
                },
                "_DAT_40000048": {
                    "flag_12": 1,
                    "memory_location_11": 1,
                    "memory_location_12": 2
                },
                "_DAT_4000004c": {
                    "flag_13": 1,
                    "memory_location_12": 1,
                    "memory_location_13": 2
                },
                "bitValue": {
                    "bit_value": 1
                },
                "checkAndUpdateFlag": {
                    "check_and_update_flag": 2
                },
                "check_and_update_flag_08007a10": {
                    "check_and_update_flag": 14
                },
                "flagValue": {
                    "flag_value": 1
                },
                "initializeMemory": {
                    "initialize_memory": 2
                },
                "param_1": {
                    "flag_value": 1
                },
                "param_2": {
                    "shifted_bits": 1
                },
                "param_3": {
                    "bit_value": 1
                },
                "shiftedBits": {
                    "shifted_bits": 1
                },
                "writeBitsToMemoryAndSetBit": {
                    "write_bits_to_memory_and_set_bit": 2
                },
                "write_shifted_bits_to_memory_and_set_bit_08007a70": {
                    "write_and_set_bits_in_memory": 1,
                    "write_bits_and_set_bit": 1,
                    "write_bits_and_set_flag": 3,
                    "write_bits_to_memory": 2,
                    "write_bits_to_memory_and_set_bit": 15,
                    "write_bits_to_memory_and_set_flag": 3,
                    "write_shifted_bits_to_memory_and_set_bit": 1,
                    "write_to_memory_with_bits": 1
                }
            },
            "called": [
                "FUN_08007a10",
                "FUN_08007a70"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_memory_08007ad0(void)\n\n{\n  check_and_update_flag_08007a10(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  write_bits_to_memory_and_set_bit(0x40000000,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_memory_08007ad0",
            "entrypoint": "0x08007ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ad0": "initialize_memory_08007ad0",
                "check_and_update_flag_08007a10": "check_and_update_flag",
                "write_shifted_bits_to_memory_and_set_bit_08007a70": "write_bits_to_memory_and_set_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007b70": {
            "additional_data": {
                "FUN_08007b70": {
                    "configure_flags": 3,
                    "initialize_flags": 1,
                    "set_bits_in_registers": 1,
                    "set_flags": 8,
                    "set_flags_and_permissions": 1,
                    "set_flags_and_values": 2,
                    "set_flags_based_on_conditions": 2,
                    "set_flags_based_on_input": 1,
                    "set_flags_for_data": 1,
                    "update_flags": 7,
                    "update_flags_and_registers": 2,
                    "update_flags_and_values": 1,
                    "update_register_values": 1
                },
                "_DAT_40000000": {
                    "control_register": 2,
                    "global_variable": 1,
                    "register": 1,
                    "register_b": 1,
                    "status_reg": 1
                },
                "_DAT_4000000c": {
                    "control_reg": 1,
                    "flag_register": 1,
                    "flags_register": 1,
                    "global_variable": 1,
                    "register_a": 1,
                    "result": 1
                },
                "_DAT_40000034": {
                    "": 1,
                    "condition1": 8,
                    "condition_1": 2,
                    "condition_a": 1,
                    "data_1": 1,
                    "flag1": 1,
                    "flag_1": 1,
                    "input_flag_1": 1
                },
                "_DAT_40000038": {
                    "": 1,
                    "condition2": 8,
                    "condition_2": 2,
                    "condition_b": 1,
                    "data_2": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "input_flag_2": 1
                },
                "local_c": {
                    "bit_flags": 1,
                    "flag": 4,
                    "flag_update_value": 1,
                    "flag_value": 3,
                    "flags": 22
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_flags_and_values_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "current_name": "set_flags_and_values_08007b70",
            "entrypoint": "0x08007b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007b70": "set_flags_and_values_08007b70",
                "local_c": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_08007bc2": {
                    "clear_bit": 1,
                    "clear_bits": 7,
                    "clear_bitwise_flags": 1,
                    "clear_flags": 22
                },
                "_DAT_40000000": {
                    "data0": 1,
                    "data1": 3,
                    "data_buffer": 1,
                    "data_register1": 2,
                    "flag0": 1,
                    "flag1": 7,
                    "flag_a": 1,
                    "flag_register": 1,
                    "flags1": 1,
                    "flags_register": 4,
                    "flags_variable": 2,
                    "register_a": 2,
                    "status": 1,
                    "status_flag": 1,
                    "status_register": 1
                },
                "_DAT_4000000c": {
                    "config": 1,
                    "config_flag": 1,
                    "config_register": 1,
                    "config_variable": 1,
                    "control_register": 4,
                    "control_variable": 1,
                    "data1": 1,
                    "data2": 3,
                    "data_register2": 2,
                    "flag1": 1,
                    "flag2": 7,
                    "flag_b": 1,
                    "flags2": 1,
                    "register_b": 2,
                    "settings_register": 1,
                    "status_register": 1
                },
                "_i_NUM_40000000": {
                    "flag1": 1
                },
                "_i_NUM_4000000c": {
                    "flag2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\n\n\nvoid clear_bitwise_flags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "current_name": "clear_bitwise_flags_08007bc2",
            "entrypoint": "0x08007bc2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bc2": "clear_bitwise_flags_08007bc2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "additional_data": {
                "FUN_08007bf0": {
                    "update_data": 14,
                    "update_min_value": 4,
                    "update_minimum": 1,
                    "update_minimum_value": 6,
                    "update_param_1": 1,
                    "update_param_and_limit": 1,
                    "update_param_and_store_min": 1,
                    "update_variable": 1,
                    "update_variable_and_min_value": 1,
                    "update_variable_and_minimum": 1
                },
                "_DAT_40000024": {
                    "global_minimum": 1,
                    "limit": 1,
                    "min_data": 1,
                    "min_param": 1,
                    "min_value": 11,
                    "minimum_value": 13,
                    "minimum_value_so_far": 1
                },
                "_DAT_4000002c": {
                    "current_data": 1,
                    "current_max": 1,
                    "current_min": 1,
                    "current_min_value": 2,
                    "current_minimum": 3,
                    "current_minimum_value": 1,
                    "current_param": 1,
                    "current_value": 18,
                    "stored_param": 1
                },
                "param_1": {
                    "input_value": 3,
                    "new_data": 1,
                    "new_param": 2,
                    "new_value": 24,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005324"
            ],
            "code": "\n\n\nvoid update_data_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_08007bf0",
            "entrypoint": "0x08007bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bf0": "update_data_08007bf0",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c40": {
            "additional_data": {
                "FUN_08007c40": {
                    "initialize_data": 2,
                    "initialize_global_data": 1,
                    "initialize_global_variable": 1,
                    "set_data": 1,
                    "set_data_value": 1,
                    "set_global_data": 2,
                    "set_global_param": 2,
                    "set_global_parameter": 1,
                    "set_global_value": 4,
                    "set_global_variable": 9,
                    "set_memory_address": 1,
                    "set_param": 2,
                    "set_param_1": 1,
                    "set_param_as_data": 1,
                    "set_param_value": 1,
                    "store_data": 1
                },
                "_DAT_40000034": {
                    "data_address": 2,
                    "data_ptr": 1,
                    "data_storage": 1,
                    "global_data": 3,
                    "global_param": 1,
                    "global_value": 1,
                    "global_var": 1,
                    "global_variable": 11,
                    "initialized_data": 1,
                    "param_value": 1,
                    "parameter": 1
                },
                "param_1": {
                    "data": 6,
                    "data_value": 1,
                    "memory_address": 1,
                    "new_param_value": 1,
                    "new_value": 5,
                    "param": 1,
                    "value": 16
                },
                "return": {
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_global_variable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  void;\n}\n\n",
            "current_name": "set_global_variable_08007c40",
            "entrypoint": "0x08007c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c40": "set_global_variable_08007c40",
                "param_1": "value",
                "return": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "additional_data": {
                "FUN_08007c5e": {
                    "assign_param_to_global_variable": 1,
                    "initialize_global_variable": 1,
                    "initialize_param": 1,
                    "save_parameter_value": 1,
                    "set_data_at_address": 1,
                    "set_data_value": 1,
                    "set_global_data": 2,
                    "set_global_param": 1,
                    "set_global_parameter": 4,
                    "set_global_value": 1,
                    "set_global_variable": 11,
                    "set_param_into_global_variable": 1,
                    "set_param_to_global": 1,
                    "set_value_to_global": 1,
                    "set_variable": 1,
                    "store_parameter_in_global_variable": 1,
                    "store_parameter_in_memory": 1
                },
                "_DAT_40000038": {
                    "address": 1,
                    "data": 1,
                    "global_data": 2,
                    "global_parameter": 2,
                    "global_value": 3,
                    "global_var": 1,
                    "global_variable": 14
                },
                "param_1": {
                    "data": 1,
                    "data_value": 1,
                    "input_value": 3,
                    "new_param": 1,
                    "new_value": 7,
                    "param": 2,
                    "value": 16
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_param_into_global_variable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "current_name": "set_param_into_global_variable_08007c5e",
            "entrypoint": "0x08007c5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c5e": "set_param_into_global_variable_08007c5e",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "additional_data": {
                "FUN_08007c7c": {
                    "check_and_update_data": 2,
                    "handle_data_updates": 1,
                    "update_and_mask_data": 1,
                    "update_data": 6,
                    "update_data_based_on_flags": 2,
                    "update_data_based_on_status": 1,
                    "update_data_bits": 1,
                    "update_data_if_flag_set": 1,
                    "update_data_if_flags_set": 5,
                    "update_data_if_set": 1,
                    "update_data_with_mask": 1,
                    "update_data_with_masks": 6,
                    "update_flagged_data": 1,
                    "update_flags": 1,
                    "update_flags_if_conditions_met": 1
                },
                "_DAT_4000000c": {
                    "control_flag": 1,
                    "control_register": 4,
                    "data_control_register": 1,
                    "data_flag2": 1,
                    "data_register2": 1,
                    "data_register_2": 6,
                    "flags_2": 1,
                    "flags_mask": 1,
                    "mask": 2,
                    "mask_data": 1,
                    "mask_register": 6,
                    "mask_values": 1,
                    "other_flag": 1,
                    "register_2": 1,
                    "update_flag": 1
                },
                "_DAT_40000010": {
                    "data_flag": 3,
                    "data_flag1": 1,
                    "data_register": 4,
                    "data_register1": 1,
                    "data_register_1": 6,
                    "data_status_register": 1,
                    "flag_register": 1,
                    "flags": 2,
                    "flags_1": 1,
                    "flags_register": 4,
                    "input_data": 1,
                    "mask_flags": 1,
                    "register_1": 1,
                    "status_register": 2
                },
                "update_data_with_mask_080053a0": {
                    "update_data_flag3": 1,
                    "update_data_mask3": 1,
                    "update_data_mask_3": 2,
                    "update_data_using_mask_c": 1,
                    "update_data_with_mask_1": 1,
                    "update_data_with_mask_3": 2,
                    "update_mask_3": 1
                },
                "update_data_with_mask_08005760": {
                    "update_data_flag2": 1,
                    "update_data_mask2": 1,
                    "update_data_mask_2": 2,
                    "update_data_using_mask_b": 1,
                    "update_data_with_mask_2": 2,
                    "update_data_with_mask_4": 1,
                    "update_mask_2": 1
                },
                "update_data_with_mask_08005778": {
                    "update_data_flag1": 1,
                    "update_data_mask1": 1,
                    "update_data_mask_1": 2,
                    "update_data_using_mask_a": 1,
                    "update_data_with_mask_1": 2,
                    "update_data_with_mask_2": 1,
                    "update_mask_1": 1
                }
            },
            "called": [
                "FUN_080053a0",
                "FUN_08005778",
                "FUN_08005760"
            ],
            "calling": [],
            "code": "\n\n\nvoid update_data_with_masks_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    update_data_with_mask_1();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    update_data_mask_2();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    update_data_mask_3();\n  }\n  return;\n}\n\n",
            "current_name": "update_data_with_masks_08007c7c",
            "entrypoint": "0x08007c7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c7c": "update_data_with_masks_08007c7c",
                "update_data_with_mask_080053a0": "update_data_mask_3",
                "update_data_with_mask_08005760": "update_data_mask_2",
                "update_data_with_mask_08005778": "update_data_with_mask_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007d08": {
            "additional_data": {
                "DAT_20000000": {
                    "clock_frequency": 1
                },
                "FUN_08007d08": {
                    "initialize_data": 1,
                    "initialize_device": 7,
                    "initialize_device_registers": 1,
                    "initialize_flag": 2,
                    "initialize_flags": 2,
                    "initialize_hardware": 1,
                    "initialize_register_values": 1,
                    "initialize_registers": 13,
                    "initialize_system": 3
                },
                "_DAT_40000800": {
                    "device_control_register": 1,
                    "device_flag": 3,
                    "device_register": 2,
                    "flag": 10,
                    "flag_1": 1,
                    "flag_address": 3,
                    "flag_register": 8,
                    "flag_value": 1
                },
                "_DAT_40000804": {
                    "variable_1": 1
                },
                "_DAT_40000808": {
                    "counter1": 1,
                    "counter_1": 1,
                    "flag_2": 1,
                    "register1": 1,
                    "variable_2": 1
                },
                "_DAT_4000080c": {
                    "counter2": 1,
                    "counter_2": 1,
                    "flag_3": 1,
                    "register2": 1,
                    "variable_3": 1
                },
                "_DAT_40000810": {
                    "counter_3": 1,
                    "flag_4": 1,
                    "timer_config": 1,
                    "timer_control_register": 1,
                    "variable_4": 1
                },
                "_DAT_40000814": {
                    "device_enable": 1,
                    "device_flag": 1,
                    "enable_flag": 12,
                    "enable_signal": 1,
                    "flag_5": 1,
                    "flag_initialized": 1,
                    "flag_register": 1,
                    "flag_status": 1,
                    "flag_update": 1,
                    "flag_value": 2,
                    "initialized": 1,
                    "register7": 1,
                    "status_register": 1,
                    "timer_enable_flag": 1,
                    "timer_enable_register": 1,
                    "value": 1,
                    "variable_13": 1
                },
                "_DAT_40000818": {
                    "baud_rate": 1,
                    "configuration_register": 1,
                    "control_register_1": 1,
                    "device_config": 1,
                    "frequency_value": 1,
                    "initial_value_1": 1,
                    "register3": 1,
                    "register_1": 1,
                    "timer1": 1,
                    "timer_config": 1,
                    "timer_interval": 2,
                    "timer_load_value_register": 1
                },
                "_DAT_4000081c": {
                    "variable_5": 1
                },
                "_DAT_40000820": {
                    "variable_6": 1
                },
                "_DAT_40000824": {
                    "variable_7": 1
                },
                "_DAT_40000828": {
                    "baud_rate": 3,
                    "baud_rate_divider": 2,
                    "baudrate_register": 1,
                    "calculated_value": 2,
                    "clock_divider": 3,
                    "control_register_2": 1,
                    "counter": 1,
                    "device_clock": 1,
                    "device_frequency": 1,
                    "divider": 1,
                    "flag_divisor": 1,
                    "initial_value_2": 1,
                    "prescaler": 1,
                    "prescaler_value": 1,
                    "register4": 1,
                    "register_2": 1,
                    "timer2": 1,
                    "timer_divider": 1,
                    "timer_frequency": 1,
                    "timer_prescaler": 3,
                    "timer_prescaler_register": 1,
                    "timer_register": 1,
                    "timer_value": 1
                },
                "_DAT_4000082c": {
                    "buffer_size": 1,
                    "constant": 1,
                    "constant1": 1,
                    "constant_value": 1,
                    "constant_value_1": 1,
                    "control_register_3": 1,
                    "device_threshold": 1,
                    "device_value1": 1,
                    "divider": 1,
                    "flag_constant": 1,
                    "initial_value_3": 1,
                    "interrupt_priority": 1,
                    "interrupt_register": 2,
                    "limit": 1,
                    "register5": 1,
                    "register_3": 1,
                    "reload_value": 2,
                    "timer3": 1,
                    "timer_count": 1,
                    "timer_divider": 1,
                    "timer_interrupt_register": 1,
                    "timer_interval": 1,
                    "timer_prescaler": 1,
                    "timer_reload": 2,
                    "timer_reload_value": 2,
                    "timer_value": 2
                },
                "_DAT_40000834": {
                    "unused_var": 1,
                    "variable_8": 1
                },
                "_DAT_40000838": {
                    "constant2": 1,
                    "constant_value_2": 1,
                    "control_register_4": 1,
                    "counter": 5,
                    "counter_register": 1,
                    "counter_threshold": 1,
                    "data_buffer_length": 1,
                    "data_value": 1,
                    "delay": 1,
                    "delay_time": 1,
                    "device_limit": 1,
                    "device_value2": 1,
                    "flag_delay": 1,
                    "initial_value_4": 1,
                    "register6": 1,
                    "register_4": 1,
                    "sensor_threshold": 1,
                    "some_value": 1,
                    "threshold_value": 1,
                    "timeout": 2,
                    "timeout_value": 1,
                    "timer4": 1,
                    "timer_counter": 1,
                    "timer_match_value_register": 1,
                    "timer_threshold": 2
                },
                "_DAT_4000083c": {
                    "variable_9": 1
                },
                "_DAT_40000840": {
                    "variable_10": 1
                },
                "_DAT_40000848": {
                    "variable_11": 1
                },
                "_DAT_4000084c": {
                    "variable_12": 1
                },
                "_unused": {
                    "reserved_variable": 1
                },
                "check_and_update_flag_08007a10": {
                    "check_and_update_flag": 1
                }
            },
            "called": [
                "FUN_08007a10"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_device_registers_08007d08(void)\n\n{\n  check_and_update_flag_08007a10(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_device_registers_08007d08",
            "entrypoint": "0x08007d08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007d08": "initialize_device_registers_08007d08",
                "check_and_update_flag_08007a10": "check_and_update_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007da8": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_08007da8": {
                    "enable_hardware_features": 1,
                    "mark_bits_as_set": 1,
                    "set_enable_flags": 1,
                    "set_flag_and_enable": 1,
                    "set_flag_and_initialized": 1,
                    "set_flags": 16,
                    "set_flags_and_enable": 4,
                    "set_flags_and_return": 1,
                    "set_flags_and_status": 1,
                    "set_flags_and_toggle": 1,
                    "update_flags": 3
                },
                "_DAT_40000800": {
                    "bit_flags": 1,
                    "control": 1,
                    "control_flag": 1,
                    "control_register": 14,
                    "data": 1,
                    "enable": 1,
                    "enable_register": 2,
                    "flag_register2": 1,
                    "flag_status2": 1,
                    "flags2": 1,
                    "hardware_status": 1,
                    "status": 1,
                    "status_register": 1,
                    "value": 3
                },
                "_DAT_40000820": {
                    "enable_flags": 1,
                    "flag_register": 9,
                    "flag_register1": 1,
                    "flag_status1": 1,
                    "flags": 8,
                    "flags1": 1,
                    "flags_register": 5,
                    "hardware_flags": 1,
                    "register_flags": 1,
                    "status_flag": 1,
                    "status_register": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid set_flags_and_enable_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "current_name": "set_flags_and_enable_08007da8",
            "entrypoint": "0x08007da8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007da8": "set_flags_and_enable_08007da8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e08": {
            "additional_data": {
                "FUN_08007e08": {
                    "initialize_and_configure_device": 1,
                    "initialize_and_enable_device": 7,
                    "initialize_and_set_flags": 1,
                    "initialize_memory_and_devices": 1,
                    "initialize_memory_device_and_flags": 2,
                    "initialize_memory_registers_and_flags": 1,
                    "initialize_program": 1,
                    "initialize_system": 17
                },
                "initialize_device_registers_08007d08": {
                    "initialize_device_registers": 27,
                    "initialize_registers": 4
                },
                "initialize_memory_08007ad0": {
                    "initialize_memory": 31
                },
                "set_flags_and_enable_08007da8": {
                    "configure_flags_and_enable": 3,
                    "set_flags_and_enable": 28
                }
            },
            "called": [
                "FUN_08007da8",
                "FUN_08007ad0",
                "FUN_08007d08"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_system_08007e08(void)\n\n{\n  initialize_memory();\n  initialize_device_registers();\n  set_flags_and_enable_08007da8();\n  return;\n}\n\n",
            "current_name": "initialize_system_08007e08",
            "entrypoint": "0x08007e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e08": "initialize_system_08007e08",
                "initialize_device_registers_08007d08": "initialize_device_registers",
                "initialize_memory_08007ad0": "initialize_memory",
                "set_flags_and_enable_08007da8": "set_flags_and_enable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "additional_data": {
                "FUN_08007e1c": {
                    "initialize_parameter": 1,
                    "send_byte": 2,
                    "send_byte_and_wait_for_ack": 1,
                    "send_byte_and_wait_for_flag": 1,
                    "send_byte_over_serial": 1,
                    "send_byte_to_address": 1,
                    "send_byte_to_device": 3,
                    "send_byte_to_register": 1,
                    "send_byte_to_serial": 1,
                    "send_param_to_data_port": 1,
                    "set_byte_parameter": 1,
                    "set_byte_to_memory": 1,
                    "set_byte_to_register": 1,
                    "set_byte_to_register_wait_for_flag": 1,
                    "set_byte_value": 1,
                    "set_flag": 1,
                    "set_flag_on": 1,
                    "set_param_and_wait": 2,
                    "store_byte_and_wait": 2,
                    "store_byte_to_address": 1,
                    "write_byte_and_wait": 1,
                    "write_byte_to_memory": 3,
                    "write_byte_to_port": 1,
                    "write_to_memory": 1
                },
                "_DAT_40004400": {
                    "address_mask": 1,
                    "address_status": 1,
                    "data_port": 1,
                    "device_status_register": 1,
                    "flag_register": 1,
                    "memory_data": 1,
                    "memory_status": 1,
                    "memory_status_register": 1,
                    "port_status": 1,
                    "register": 1,
                    "register_flags": 1,
                    "register_status": 1,
                    "serial_status_register": 1,
                    "status_register": 11
                },
                "_DAT_40004404": {
                    "address_to_store": 1,
                    "control_register": 1,
                    "data_address": 1,
                    "data_register": 7,
                    "memory_address": 4,
                    "memory_data_register": 1,
                    "output_register": 2,
                    "parameter_register": 1,
                    "port_data": 1,
                    "register_data": 1,
                    "register_value": 1,
                    "serial_data_register": 2,
                    "set_param": 1
                },
                "param_1": {
                    "byte_to_send": 10,
                    "byte_to_set": 1,
                    "byte_to_store": 2,
                    "byte_to_write": 4,
                    "byte_value": 5,
                    "data": 2,
                    "data_byte": 1,
                    "flag_value": 2,
                    "new_param": 2,
                    "param": 1,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "code": "\n\n\nvoid send_byte_to_device_08007e1c(byte byte_to_send)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)byte_to_send;\n  return;\n}\n\n",
            "current_name": "send_byte_to_device_08007e1c",
            "entrypoint": "0x08007e1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e1c": "send_byte_to_device_08007e1c",
                "param_1": "byte_to_send"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e58": {
            "additional_data": {
                "0x20": {
                    "bit_5": 1,
                    "flag_mask": 1,
                    "mask": 1
                },
                "FUN_08007e58": {
                    "check_bit": 2,
                    "check_bit_32": 1,
                    "check_bit_5_set": 1,
                    "check_bit_flag": 2,
                    "check_bit_is_set": 2,
                    "check_bit_set": 5,
                    "check_flag": 2,
                    "check_flag_bit": 1,
                    "check_flag_set": 9,
                    "check_flag_status": 2,
                    "check_if_bit_set": 1,
                    "is_bit_set": 2,
                    "is_flag_set": 1
                },
                "_DAT_40004400": {
                    "bit_data": 1,
                    "bit_field": 1,
                    "bit_flag": 2,
                    "data": 3,
                    "data_register": 2,
                    "flag": 6,
                    "flag_register": 3,
                    "flag_status": 1,
                    "flag_value": 1,
                    "flag_variable": 4,
                    "flags": 1,
                    "global_variable": 1,
                    "register_value": 1,
                    "status": 1,
                    "status_flag": 1,
                    "status_register": 2
                },
                "bool": {
                    "bool": 1
                },
                "return": {
                    "flag_status": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nbool check_bit_5_set_08007e58(void)\n\n{\n  flag_status (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "current_name": "check_bit_5_set_08007e58",
            "entrypoint": "0x08007e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e58": "check_bit_5_set_08007e58",
                "return": "flag_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e84": {
            "additional_data": {
                "0xff": {
                    "mask": 1
                },
                "FUN_08007e84": {
                    "get_last_byte": 3,
                    "get_least_significant_byte": 3,
                    "get_lower_byte": 2,
                    "get_lowest_byte": 22,
                    "get_lsb": 1
                },
                "_DAT_40004404": {
                    "data": 10,
                    "data_40004404": 1,
                    "data_input": 1,
                    "data_register": 2,
                    "data_value": 4,
                    "data_variable": 4,
                    "input_data": 4,
                    "original_value": 3,
                    "value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "current_name": "get_lowest_byte_08007e84",
            "entrypoint": "0x08007e84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "additional_data": {
                "0x40004800": {
                    "address_c": 1,
                    "base_address3": 1,
                    "memory_address3": 1
                },
                "0x40004c00": {
                    "address_d": 1,
                    "base_address4": 1,
                    "memory_address4": 1
                },
                "0x40005000": {
                    "address_e": 1,
                    "base_address5": 1,
                    "memory_address5": 1
                },
                "0x40011000": {
                    "address_a": 1,
                    "base_address1": 1,
                    "memory_address1": 1
                },
                "0x40011400": {
                    "address_f": 1,
                    "base_address6": 1,
                    "memory_address6": 1
                },
                "FUN_08007ea4": {
                    "set_bitmask": 1,
                    "update_control_registers": 1,
                    "update_data_flags": 1,
                    "update_flags": 3,
                    "update_flags_based_on_address": 1,
                    "update_memory_flag": 4,
                    "update_memory_flags": 16,
                    "update_memory_location": 1,
                    "update_memory_permissions": 1,
                    "update_memory_status": 1,
                    "update_register_flags": 1
                },
                "_DAT_40023840": {
                    "control_register2": 1,
                    "data_flag2": 1,
                    "flag2": 4,
                    "flag_b": 1,
                    "flag_register2": 1,
                    "flag_register_b": 2,
                    "flags2": 2,
                    "memory_flag2": 10,
                    "memory_flags2": 3,
                    "register2": 1,
                    "register_flags2": 1,
                    "status2": 1
                },
                "_DAT_40023844": {
                    "control_register1": 1,
                    "data_flag1": 1,
                    "flag1": 4,
                    "flag_a": 1,
                    "flag_register1": 1,
                    "flag_register_a": 2,
                    "flags1": 2,
                    "memory_flag1": 10,
                    "memory_flags1": 3,
                    "register1": 1,
                    "register_flags1": 1,
                    "status1": 1
                },
                "param_1": {
                    "address": 8,
                    "data_pointer": 1,
                    "input": 1,
                    "input_ptr": 1,
                    "memory_address": 17,
                    "memory_block": 1,
                    "memory_location": 1
                },
                "undefined": {
                    "byte": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\n\n\nvoid update_memory_flags_08007ea4(byte *memory_address)\n\n{\n  if (memory_address == (byte *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memory_address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memory_address == (byte *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memory_address == (byte *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memory_address == (byte *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memory_address == (byte *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_flags_08007ea4",
            "entrypoint": "0x08007ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ea4": "update_memory_flags_08007ea4",
                "param_1": "memory_address",
                "undefined": "byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f54": {
            "additional_data": {
                "FUN_08007f54": {
                    "calculate_adjusted_and_shifted_frequency": 2,
                    "calculate_adjusted_clock": 1,
                    "calculate_adjusted_frequency": 7,
                    "calculate_and_set_frequency": 1,
                    "calculate_and_update_frequency": 2,
                    "calculate_clock_frequency": 3,
                    "calculate_frequency": 4,
                    "calculate_frequency_adjustment": 6,
                    "update_clock_frequency": 1,
                    "update_frequency": 4
                },
                "calculate_adjusted_frequency_08006680": {
                    "calculate_adjusted_frequency": 15,
                    "calculate_adjusted_frequency1": 3,
                    "calculate_adjusted_frequency_function": 1,
                    "calculate_adjusted_frequency_with_multiplier1": 1
                },
                "calculate_and_shift_clock_frequency_080066cc": {
                    "calculate_adjusted_and_shifted_frequency": 1,
                    "calculate_adjusted_and_shifted_frequency2": 1,
                    "calculate_adjusted_frequency2": 2,
                    "calculate_adjusted_frequency_with_multiplier2": 1,
                    "calculate_and_shift_clock_frequency": 12,
                    "calculate_and_shift_clock_frequency_function": 1,
                    "calculate_shifted_clock_frequency": 2
                },
                "iVar2": {
                    "adjusted_freq1": 1,
                    "adjusted_frequency": 1,
                    "adjusted_frequency1": 10,
                    "adjusted_frequency2": 9,
                    "adjusted_frequency_1": 2,
                    "adjusted_frequency_result": 1,
                    "adjusted_result": 1,
                    "adjusted_value1": 1,
                    "frequency1": 4,
                    "result1": 1
                },
                "iVar3": {
                    "adjusted_freq2": 1,
                    "adjusted_frequency2": 11,
                    "adjusted_frequency3": 9,
                    "adjusted_frequency_2": 2,
                    "adjusted_frequency_result2": 1,
                    "adjusted_value": 1,
                    "adjusted_value2": 1,
                    "frequency2": 4,
                    "result2": 1
                },
                "param_1": {
                    "address": 8,
                    "base_address": 7,
                    "clock_address": 1,
                    "device_address": 5,
                    "frequency_address": 4,
                    "frequency_adjustment": 1,
                    "input1": 1,
                    "input_address": 2,
                    "memory_address": 2
                },
                "param_2": {
                    "clock_divider": 1,
                    "divisor": 1,
                    "factor": 2,
                    "frequency": 2,
                    "input2": 1,
                    "input_parameter": 1,
                    "input_value": 2,
                    "multiplier": 6,
                    "param2": 2,
                    "param_multiplier": 1,
                    "parameter": 1,
                    "shift_amount": 3,
                    "shift_value": 1,
                    "value": 7
                },
                "uVar1": {
                    "adjusted_frequency": 23,
                    "adjusted_frequency1": 2,
                    "adjusted_value": 2,
                    "frequency": 2,
                    "frequency_adjustment": 1,
                    "frequency_result": 1
                },
                "uVar4": {
                    "clock_frequency": 23,
                    "frequency": 2,
                    "frequency_adjustment": 1,
                    "shifted_frequency": 3
                }
            },
            "called": [
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\nvoid calculate_adjusted_and_shifted_frequency_08007f54(int address,int value)\n\n{\n  ulonglong adjusted_frequency;\n  int adjusted_frequency1;\n  int adjusted_frequency2;\n  undefined8 clock_frequency;\n  \n  if ((*(uint *)(address + 0xc) & 0x8000) == 0) {\n    if ((address != 0x40011000) && (address != 0x40011400)) {\n      clock_frequency = calculate_adjusted_frequency();\n      adjusted_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(value << 2);\n      adjusted_frequency1 = calculate_adjusted_frequency((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(adjusted_frequency * 0x51eb851f));\n      adjusted_frequency2 = calculate_adjusted_frequency();\n      *(uint *)(address + 8) =\n           (int)(adjusted_frequency / 100) << 4 |\n           (((uint)(adjusted_frequency1 * 0x19) / (uint)(value << 2) +\n            (int)(((ulonglong)(uint)(adjusted_frequency2 * 0x19) / (ulonglong)(uint)(value << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clock_frequency = calculate_and_shift_clock_frequency();\n    adjusted_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(value << 2);\n    adjusted_frequency1 = calculate_and_shift_clock_frequency((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(adjusted_frequency * 0x51eb851f));\n    adjusted_frequency2 = calculate_and_shift_clock_frequency();\n    *(uint *)(address + 8) =\n         (int)(adjusted_frequency / 100) << 4 |\n         (((uint)(adjusted_frequency1 * 0x19) / (uint)(value << 2) +\n          (int)(((ulonglong)(uint)(adjusted_frequency2 * 0x19) / (ulonglong)(uint)(value << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((address != 0x40011000) && (address != 0x40011400)) {\n      clock_frequency = calculate_adjusted_frequency();\n      adjusted_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(value << 1);\n      adjusted_frequency1 = calculate_adjusted_frequency((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(adjusted_frequency * 0x51eb851f));\n      adjusted_frequency2 = calculate_adjusted_frequency();\n      *(uint *)(address + 8) =\n           (int)(adjusted_frequency / 100) << 4 |\n           (((uint)(adjusted_frequency1 * 0x19) / (uint)(value << 1) +\n            (int)(((ulonglong)(uint)(adjusted_frequency2 * 0x19) / (ulonglong)(uint)(value << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    clock_frequency = calculate_and_shift_clock_frequency();\n    adjusted_frequency = (ulonglong)(uint)((int)clock_frequency * 0x19) / (ulonglong)(uint)(value << 1);\n    adjusted_frequency1 = calculate_and_shift_clock_frequency((int)clock_frequency,(int)((ulonglong)clock_frequency >> 0x20),(int)(adjusted_frequency * 0x51eb851f));\n    adjusted_frequency2 = calculate_and_shift_clock_frequency();\n    *(uint *)(address + 8) =\n         (int)(adjusted_frequency / 100) << 4 |\n         (((uint)(adjusted_frequency1 * 0x19) / (uint)(value << 1) +\n          (int)(((ulonglong)(uint)(adjusted_frequency2 * 0x19) / (ulonglong)(uint)(value << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_adjusted_and_shifted_frequency_08007f54",
            "entrypoint": "0x08007f54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f54": "calculate_adjusted_and_shifted_frequency_08007f54",
                "calculate_adjusted_frequency_08006680": "calculate_adjusted_frequency",
                "calculate_and_shift_clock_frequency_080066cc": "calculate_and_shift_clock_frequency",
                "iVar2": "adjusted_frequency1",
                "iVar3": "adjusted_frequency2",
                "param_1": "address",
                "param_2": "value",
                "uVar1": "adjusted_frequency",
                "uVar4": "clock_frequency"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008190": {
            "additional_data": {
                "0x1c200": {
                    "adjustment_value": 1,
                    "base_frequency": 1,
                    "frequency": 1,
                    "frequency_value": 5
                },
                "0x2000": {
                    "flag_value": 1,
                    "set_bits": 1
                },
                "0xc": {
                    "set_bits": 1,
                    "value1": 1
                },
                "0xffff400c": {
                    "mask1": 1,
                    "preserve_bits": 1
                },
                "0xffff8090": {
                    "mask2": 1,
                    "preserve_bits": 1
                },
                "0xfffff000": {
                    "mask3": 1,
                    "preserve_bits": 1
                },
                "0xfffffc00": {
                    "mask4": 1,
                    "preserve_bits": 1
                },
                "FUN_08008190": {
                    "configure_memory_and_frequency": 1,
                    "initialize_memory": 12,
                    "initialize_memory_flags": 1,
                    "update_and_shift_frequency": 2,
                    "update_flags": 1,
                    "update_flags_and_frequency": 1,
                    "update_frequency_and_flags": 1,
                    "update_frequency_settings": 1,
                    "update_memory_flags": 11
                },
                "_DAT_40004400": {
                    "data_reg": 1,
                    "flag_4": 1,
                    "flags4": 1,
                    "frequency": 2,
                    "frequency_data": 1,
                    "frequency_setting4": 1,
                    "memory": 2,
                    "memory_address": 1,
                    "memory_block": 1,
                    "memory_data": 3,
                    "memory_flag4": 1,
                    "memory_flags": 6,
                    "memory_flags_4": 1,
                    "memory_flags_40004400": 1,
                    "memory_value": 1,
                    "original_frequency": 1,
                    "shifted_flag": 1
                },
                "_DAT_4000440c": {
                    "adjusted_flags": 5,
                    "adjusted_frequency": 2,
                    "adjusted_mask": 1,
                    "control_reg": 1,
                    "control_register": 1,
                    "flag1": 1,
                    "flag_1": 1,
                    "flags": 1,
                    "flags1": 1,
                    "flags_1": 1,
                    "frequency_config": 1,
                    "frequency_setting1": 1,
                    "memory_configuration": 1,
                    "memory_flag": 1,
                    "memory_flag1": 3,
                    "memory_flags": 1,
                    "memory_flags_1": 1,
                    "memory_flags_4000440c": 1,
                    "modified_flags": 1,
                    "register_a": 1,
                    "register_value1": 1,
                    "update_flags": 1
                },
                "_DAT_40004410": {
                    "adjusted_flags": 1,
                    "clear_flags": 1,
                    "flag2": 1,
                    "flag_2": 1,
                    "flags2": 1,
                    "flags_2": 1,
                    "frequency_configuration": 1,
                    "frequency_flag": 1,
                    "frequency_flags": 1,
                    "frequency_mask": 1,
                    "frequency_setting2": 1,
                    "interrupt_register": 1,
                    "masked_flags": 1,
                    "memory_flag2": 3,
                    "memory_flags": 2,
                    "memory_flags_2": 1,
                    "memory_flags_40004410": 1,
                    "register_b": 1,
                    "register_value2": 1,
                    "reserved_config": 1,
                    "shifted_flags": 2,
                    "shifted_frequency": 3,
                    "status_reg": 1
                },
                "_DAT_40004414": {
                    "address_register": 1,
                    "adjusted_flag": 1,
                    "adjusted_flags": 2,
                    "adjusted_frequency": 2,
                    "adjusted_shifted_frequency": 1,
                    "clear_memory": 1,
                    "config_reg": 1,
                    "flag3": 1,
                    "flag_3": 1,
                    "flags3": 1,
                    "flags_3": 1,
                    "frequency_setting3": 1,
                    "memory_config": 1,
                    "memory_flag3": 3,
                    "memory_flags_3": 1,
                    "memory_flags_40004414": 1,
                    "register_c": 1,
                    "register_value3": 1,
                    "reset_flags": 1,
                    "shift_configuration": 1,
                    "shift_mask": 1,
                    "shifted_flags": 2,
                    "shifted_frequency": 1,
                    "unused_variable": 1
                },
                "adjustedMask": {
                    "adjusted_mask": 1
                },
                "calculateFreq": {
                    "calculate_freq": 1
                },
                "calculate_adjusted_and_shifted_frequency_08007f54": {
                    "adjust_and_shift_frequency": 1,
                    "calculate_adjusted_and_shifted_frequency": 3,
                    "calculate_adjusted_frequency": 5,
                    "calculate_adjusted_shifted_frequency": 1,
                    "calculate_freq": 1,
                    "calculate_frequency": 12,
                    "calculate_frequency_adjustment": 1,
                    "calculate_frequency_helper": 1
                },
                "frequencyMask": {
                    "frequency_mask": 1
                },
                "initializeMemory": {
                    "initialize_memory": 1
                },
                "shiftMask": {
                    "shift_mask": 1
                },
                "update_memory_flags_08007ea4": {
                    "update_memory_flags": 8,
                    "update_memory_flags_helper": 1
                }
            },
            "called": [
                "FUN_08007f54",
                "FUN_08007ea4"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_memory_flags_08008190(void)\n\n{\n  update_memory_flags_08007ea4(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  calculate_frequency(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "current_name": "initialize_memory_flags_08008190",
            "entrypoint": "0x08008190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008190": "initialize_memory_flags_08008190",
                "calculate_adjusted_and_shifted_frequency_08007f54": "calculate_frequency",
                "update_memory_flags_08007ea4": "update_memory_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008244": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008244",
            "entrypoint": "0x08008244",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008250": {
            "additional_data": {
                "FUN_08008250": {
                    "send_byte_to_device": 31
                },
                "param_1": {
                    "byte_data": 2,
                    "byte_to_send": 11,
                    "data": 8,
                    "data_byte": 1,
                    "data_to_send": 1,
                    "device_byte": 1,
                    "input_byte": 7
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [
                "FUN_08003826",
                "FUN_080037fc",
                "FUN_08003778",
                "FUN_080036c6",
                "FUN_080036f0",
                "FUN_0800369c"
            ],
            "code": "\nvoid send_byte_to_device_08008250(undefined byte_to_send)\n\n{\n  send_byte_to_device_08008250_08007e1c(byte_to_send);\n  return;\n}\n\n",
            "current_name": "send_byte_to_device_08008250",
            "entrypoint": "0x08008250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008250": "send_byte_to_device_08008250",
                "param_1": "byte_to_send"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800826a": {
            "additional_data": {
                "FUN_0800826a": {
                    "send_byte_to_device": 29,
                    "send_param_to_device": 2
                },
                "param_1": {
                    "byte": 2,
                    "byte_data": 5,
                    "byte_to_send": 21,
                    "data": 1,
                    "param": 2
                },
                "send_byte_to_device_08007e1c": {
                    "send_byte_to_device": 3
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [],
            "code": "\nundefined4 send_byte_to_device_0800826a(undefined byte_to_send)\n\n{\n  send_byte_to_device_0800826a(byte_to_send);\n  return 0;\n}\n\n",
            "current_name": "send_byte_to_device_0800826a",
            "entrypoint": "0x0800826a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800826a": "send_byte_to_device_0800826a",
                "param_1": "byte_to_send",
                "send_byte_to_device_08007e1c": "send_byte_to_device"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008286": {
            "additional_data": {
                "0xff": {
                    "error_code": 1
                },
                "FUN_08008286": {
                    "check_and_process_input": 2,
                    "process_and_validate_input": 2,
                    "process_byte": 1,
                    "process_byte_input": 1,
                    "process_input": 10,
                    "process_input_and_check_bit": 1,
                    "process_input_byte": 13,
                    "process_input_value": 1
                },
                "check_bit_5_set_08007e58": {
                    "check_bit5_set": 5,
                    "check_bit_5_set": 10,
                    "check_if_bit_5_is_set": 1,
                    "is_bit5_set": 1,
                    "is_bit_5_set": 3
                },
                "get_lowest_byte_08007e84": {
                    "get_lowest_byte": 19,
                    "retrieve_lowest_byte": 1
                },
                "iVar2": {
                    "bit_5_status": 1,
                    "bit_check_result": 14,
                    "bit_is_set": 1,
                    "bit_set": 1,
                    "bit_status": 2,
                    "is_bit_5_set": 2,
                    "result": 2
                },
                "process_input_byte_08005900": {
                    "process_byte": 2,
                    "process_input": 1,
                    "process_input_byte": 13
                },
                "uVar1": {
                    "byte": 2,
                    "byte_value": 3,
                    "input": 1,
                    "input_byte": 7,
                    "lowest_byte": 10
                }
            },
            "called": [
                "FUN_08007e84",
                "FUN_08005900",
                "FUN_08007e58"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nundefined process_byte_input_08008286(void)\n\n{\n  undefined lowest_byte;\n  int bit_check_result;\n  \n  bit_check_result = check_bit_5_set_08007e58();\n  if (bit_check_result != 0) {\n    lowest_byte = get_lowest_byte_08007e84();\n    bit_check_result = process_input_byte(lowest_byte);\n    if (bit_check_result == 0) {\n      return lowest_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "current_name": "process_byte_input_08008286",
            "entrypoint": "0x08008286",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008286": "process_byte_input_08008286",
                "check_bit_5_set_08007e58": "check_bit_5_set",
                "get_lowest_byte_08007e84": "get_lowest_byte",
                "iVar2": "bit_check_result",
                "process_input_byte_08005900": "process_input_byte",
                "uVar1": "lowest_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082ba": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080082ba",
            "entrypoint": "0x080082ba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080082d0": {
            "additional_data": {
                "FUN_080082d0": {
                    "calculate": 2,
                    "calculate_quotient_and_remainder": 1,
                    "calculate_sum": 1,
                    "calculate_unsigned_addition": 1,
                    "perform_computation": 1,
                    "perform_operation": 1,
                    "perform_unsigned_arithmetic": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bits": 5,
                    "reverse_bitwise_operation": 1,
                    "reverse_bitwise_operations": 1,
                    "reverse_operation": 1,
                    "reverse_operations": 1
                },
                "bVar13": {
                    "b_var1": 1,
                    "bool1": 1,
                    "bool_1": 1,
                    "cond1": 1,
                    "condition1": 3,
                    "condition_1": 1,
                    "condition_a": 1,
                    "flag1": 7,
                    "flag_1": 4,
                    "is_condition1": 1,
                    "is_condition_met1": 1,
                    "is_equal": 3,
                    "is_zero": 3,
                    "temp13": 2,
                    "temp_bool1": 1
                },
                "bVar14": {
                    "b_var2": 1,
                    "bool2": 1,
                    "bool_2": 1,
                    "cond2": 1,
                    "condition1": 1,
                    "condition2": 3,
                    "condition_2": 1,
                    "condition_b": 1,
                    "flag2": 7,
                    "flag_2": 4,
                    "is_carry": 1,
                    "is_condition1": 1,
                    "is_condition2": 1,
                    "is_condition_met2": 1,
                    "is_equal": 1,
                    "is_zero": 1,
                    "temp14": 2,
                    "temp27": 1,
                    "temp_bool2": 1
                },
                "bVar15": {
                    "b_var3": 1,
                    "bool3": 1,
                    "bool_3": 1,
                    "cond3": 1,
                    "condition3": 3,
                    "condition_3": 1,
                    "condition_c": 1,
                    "flag3": 6,
                    "flag_3": 4,
                    "is_carry": 1,
                    "is_condition2": 1,
                    "is_condition_met3": 1,
                    "is_negative": 1,
                    "is_overflow": 2,
                    "sign_flag": 1,
                    "temp15": 2,
                    "temp21": 1,
                    "temp_bool3": 1
                },
                "bVar2": {
                    "b_var": 1,
                    "byte_value": 1,
                    "carry": 6,
                    "carry_flag": 2,
                    "flag": 1,
                    "temp2": 8,
                    "temp29": 1
                },
                "iVar1": {
                    "index1": 1,
                    "index2": 1,
                    "index_1": 1,
                    "result1": 1,
                    "right_shifted_param4": 1,
                    "shift1": 1,
                    "shift_amount": 1,
                    "shift_amount1": 4,
                    "shift_amount2": 1,
                    "shift_amount_1": 1,
                    "shift_count1": 1,
                    "shifted_input4": 1,
                    "shifted_param_4": 1,
                    "temp1": 8,
                    "var5": 1
                },
                "iVar8": {
                    "index1": 1,
                    "index2": 1,
                    "index_2": 1,
                    "result2": 1,
                    "shift2": 1,
                    "shift_amount1": 1,
                    "shift_amount2": 4,
                    "shift_amount_2": 2,
                    "shift_count2": 1,
                    "shifted_input2": 1,
                    "shifted_param_2_2": 1,
                    "temp1": 1,
                    "temp19": 1,
                    "temp6": 1,
                    "temp8": 8,
                    "temp_6": 3,
                    "var6": 1
                },
                "param_1": {
                    "a": 1,
                    "dividend": 1,
                    "input1": 20,
                    "input_1": 6,
                    "input_a": 1,
                    "input_value_1": 1,
                    "num1": 1
                },
                "param_2": {
                    "b": 1,
                    "divisor": 1,
                    "input2": 20,
                    "input_2": 6,
                    "input_b": 1,
                    "input_value_2": 1,
                    "num2": 1
                },
                "param_3": {
                    "c": 1,
                    "input3": 20,
                    "input_3": 6,
                    "input_c": 1,
                    "input_value_3": 1,
                    "num3": 1,
                    "quotient": 1
                },
                "param_4": {
                    "d": 1,
                    "input4": 20,
                    "input_4": 6,
                    "input_d": 1,
                    "input_value_4": 1,
                    "num4": 1,
                    "remainder": 1
                },
                "uVar10": {
                    "result2": 4,
                    "result4": 1,
                    "result_b": 1,
                    "shifted_input1": 1,
                    "sum_of_inputs": 1,
                    "temp1": 1,
                    "temp10": 7,
                    "temp12": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp_2": 1,
                    "temp_5": 1,
                    "temp_8": 3,
                    "temp_var2": 1,
                    "tmp5": 1,
                    "tmp_3": 1,
                    "var8": 1
                },
                "uVar11": {
                    "difference": 1,
                    "difference_of_shifted_inputs": 1,
                    "modified_input3": 2,
                    "result": 1,
                    "result3": 4,
                    "result5": 1,
                    "result_1": 1,
                    "result_c": 1,
                    "temp11": 7,
                    "temp2": 1,
                    "temp28": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp_6": 1,
                    "temp_9": 3,
                    "tmp6": 1,
                    "tmp_4": 1,
                    "var9": 1
                },
                "uVar12": {
                    "carry_result": 1,
                    "modified_input": 1,
                    "result4": 4,
                    "result6": 1,
                    "result_2": 1,
                    "result_d": 1,
                    "shift_amount_3": 1,
                    "shifted_difference": 1,
                    "temp": 1,
                    "temp12": 7,
                    "temp26": 1,
                    "temp3": 1,
                    "temp5": 2,
                    "temp7": 1,
                    "temp_10": 3,
                    "temp_7": 1,
                    "temp_var": 1,
                    "tmp7": 1,
                    "var10": 1
                },
                "uVar16": {
                    "result_1": 1
                },
                "uVar17": {
                    "result_2": 1
                },
                "uVar18": {
                    "result_3": 1
                },
                "uVar19": {
                    "result_4": 1
                },
                "uVar20": {
                    "result_5": 1
                },
                "uVar21": {
                    "result_6": 1
                },
                "uVar22": {
                    "result_7": 1
                },
                "uVar23": {
                    "result_8": 1
                },
                "uVar24": {
                    "result_9": 1
                },
                "uVar25": {
                    "result_10": 1
                },
                "uVar3": {
                    "carry1": 1,
                    "result": 1,
                    "result1": 2,
                    "result_1": 1,
                    "sum1": 1,
                    "sum_1": 1,
                    "temp1": 6,
                    "temp3": 8,
                    "temp6": 1,
                    "temp_1": 4,
                    "temp_shifted_input_1": 1,
                    "temp_u_var1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1
                },
                "uVar4": {
                    "bitwise_or1": 1,
                    "carry2": 1,
                    "modified_input_1": 1,
                    "result2": 1,
                    "sum2": 1,
                    "sum_2": 1,
                    "temp1": 1,
                    "temp2": 5,
                    "temp23": 1,
                    "temp4": 8,
                    "temp7": 1,
                    "temp_2": 4,
                    "tmp_1": 1,
                    "u_var2": 1,
                    "var1": 1,
                    "var_a": 1
                },
                "uVar5": {
                    "bitwise_or2": 1,
                    "carry3": 1,
                    "result3": 1,
                    "shifted_modified_input_1": 1,
                    "sum_3": 1,
                    "temp2": 2,
                    "temp3": 5,
                    "temp5": 8,
                    "temp8": 1,
                    "temp_3": 4,
                    "tmp1": 1,
                    "tmp_2": 1,
                    "u_var3": 1,
                    "var2": 1,
                    "var_b": 1
                },
                "uVar6": {
                    "mask_1": 1,
                    "modified_input4": 2,
                    "modified_input_4": 1,
                    "output1": 1,
                    "result1": 1,
                    "result4": 1,
                    "result_1": 1,
                    "reversed_input4": 1,
                    "temp1": 1,
                    "temp22": 1,
                    "temp3": 1,
                    "temp4": 4,
                    "temp6": 8,
                    "temp_4": 3,
                    "tmp2": 1,
                    "var3": 1,
                    "var_c": 1,
                    "xor_param_4": 1
                },
                "uVar7": {
                    "mask_2": 1,
                    "modified_input_2": 1,
                    "result2": 1,
                    "result5": 1,
                    "result_2": 1,
                    "reversed_input2": 1,
                    "temp24": 1,
                    "temp4": 3,
                    "temp5": 4,
                    "temp7": 8,
                    "temp9": 1,
                    "temp_1": 1,
                    "temp_5": 3,
                    "tmp3": 1,
                    "var4": 1,
                    "var_d": 1
                },
                "uVar9": {
                    "modified_input2": 2,
                    "output2": 1,
                    "result1": 4,
                    "result2": 1,
                    "result3": 1,
                    "result_2": 1,
                    "result_a": 1,
                    "shifted_input2": 2,
                    "shifted_input_2": 1,
                    "shifted_param_2": 1,
                    "temp2": 2,
                    "temp25": 1,
                    "temp9": 7,
                    "temp_4": 1,
                    "temp_7": 3,
                    "tmp4": 1,
                    "var7": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08009410",
                "FUN_0800a5a0",
                "FUN_08009b24",
                "FUN_080096e8",
                "FUN_0800af78",
                "FUN_08001f00",
                "FUN_0800adf0",
                "FUN_0800a1bc",
                "FUN_08009990",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "code": "\nulonglong reverse_bits_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp6 = input4 ^ 0x80000000;\n  temp9 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp6) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (temp9 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp8 = (int)temp9 >> 0x15;\n  if (!flag2) {\n    flag2 = temp8 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp1 == -1;\n  }\n  if (flag2) {\n    if (temp8 == -1 || temp1 == -1) {\n      temp9 = temp6;\n      temp11 = input3;\n      if (temp8 == -1) {\n        temp9 = input2;\n        temp11 = input1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        input3 = temp11;\n        temp6 = temp9;\n      }\n      flag2 = (temp11 | temp9 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp6 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = temp9 == temp6;\n      }\n      if (!flag2) {\n        temp9 = temp9 | 0x80000;\n      }\n      return CONCAT44(temp9,temp11);\n    }\n    if (((input2 ^ temp6) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((temp9 | input1) == 0) {\n        input1 = input3;\n        input2 = temp6;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp6) {\n      return 0;\n    }\n    if (temp9 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp6 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp6 = temp6 | 0x80000000;\n      }\n      return CONCAT44(temp6,input1 << 1);\n    }\n    if (temp9 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  temp9 = temp9 >> 0x15;\n  input4 = input4 >> 0x15;\n  temp11 = input4 - temp9;\n  flag2 = temp11 != 0;\n  if (input4 < temp9) {\n    temp11 = -temp11;\n  }\n  temp10 = input1;\n  temp7 = input2;\n  if (flag2 && temp9 <= input4) {\n    temp9 = temp9 + temp11;\n    temp10 = input3;\n    temp7 = temp6;\n    input3 = input1;\n    temp6 = input2;\n  }\n  if (0x36 < temp11) {\n    return CONCAT44(temp7,temp10);\n  }\n  temp4 = temp7 & 0xfffff | 0x100000;\n  if ((temp7 & 0x80000000) != 0) {\n    flag2 = temp10 != 0;\n    temp10 = -temp10;\n    temp4 = -temp4 - (uint)flag2;\n  }\n  temp7 = temp6 & 0xfffff | 0x100000;\n  if ((temp6 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp7 = -temp7 - (uint)flag2;\n  }\n  if (temp9 == temp11) {\n    temp7 = temp7 ^ 0x100000;\n    if (temp9 == 0) {\n      temp4 = temp4 ^ 0x100000;\n      temp9 = 1;\n    }\n    else {\n      temp11 = temp11 - 1;\n    }\n  }\n  temp6 = -temp11 + 0x20;\n  if ((int)temp11 < 0x21) {\n    temp12 = input3 << (temp6 & 0xff);\n    input3 = input3 >> (temp11 & 0xff);\n    temp3 = temp10 + input3;\n    temp5 = temp7 << (temp6 & 0xff);\n    temp6 = temp3 + temp5;\n    temp4 = temp4 + CARRY4(temp10,input3) + ((int)temp7 >> (temp11 & 0xff)) +\n            (uint)CARRY4(temp3,temp5);\n  }\n  else {\n    temp12 = temp7 << (-temp11 + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp12 = temp12 | 2;\n    }\n    temp7 = (int)temp7 >> (temp11 - 0x20 & 0xff);\n    temp6 = temp10 + temp7;\n    temp4 = temp4 + ((int)temp7 >> 0x1f) + (uint)CARRY4(temp10,temp7);\n  }\n  input2 = temp4 & 0x80000000;\n  temp11 = temp4;\n  if ((int)temp4 < 0) {\n    flag2 = temp12 == 0;\n    temp12 = -temp12;\n    temp11 = -temp6;\n    temp6 = -(uint)!flag2 - temp6;\n    temp11 = -(uint)(flag2 <= temp11) - temp4;\n  }\n  if (0xfffff < temp11) {\n    temp10 = temp9 - 1;\n    if (0x1fffff < temp11) {\n      temp10 = temp11 & 1;\n      temp11 = temp11 >> 1;\n      temp2 = (byte)temp6;\n      temp6 = (uint)(temp10 != 0) << 0x1f | temp6 >> 1;\n      temp12 = (uint)(temp2 & 1) << 0x1f | temp12 >> 1;\n      temp10 = temp9;\n      if (0xffbfffff < temp9 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < temp12;\n    if (temp12 == 0x80000000) {\n      flag2 = (temp6 & 1) != 0;\n    }\n    return CONCAT44(temp11 + temp10 * 0x100000 + (uint)CARRY4(temp6,(uint)flag2) | input2,\n                    temp6 + flag2);\n  }\n  flag1 = (temp12 & 0x80000000) != 0;\n  temp12 = temp12 << 1;\n  temp10 = temp6 * 2;\n  flag2 = CARRY4(temp6,temp6);\n  temp6 = temp6 * 2 + (uint)flag1;\n  temp11 = temp11 * 2 + (uint)(flag2 || CARRY4(temp10,(uint)flag1));\n  temp10 = temp9 - 2;\n  if (temp9 - 1 != 0 && 0xfffff < temp11) goto LAB_080083e0;\n  temp7 = temp6;\n  temp9 = temp11;\n  if (temp11 == 0) {\n    temp7 = 0;\n    temp9 = temp6;\n  }\n  temp8 = LZCOUNT(temp9);\n  if (temp11 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  temp11 = temp8 - 0xb;\n  flag3 = SBORROW4(temp11,0x20);\n  temp6 = temp8 - 0x2b;\n  flag2 = (int)temp6 < 0;\n  flag1 = temp6 == 0;\n  if ((int)temp11 < 0x20) {\n    flag3 = SCARRY4(temp6,0xc);\n    temp8 = temp8 + -0x1f;\n    flag2 = temp8 < 0;\n    flag1 = temp8 == 0;\n    temp6 = temp11;\n    if (!flag1 && flag2 == flag3) {\n      temp7 = temp9 << (temp11 & 0xff);\n      temp9 = temp9 >> (0xcU - temp8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    temp12 = 0x20 - temp6;\n  }\n  temp9 = temp9 << (temp6 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    temp9 = temp9 | temp7 >> (temp12 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp7 = temp7 << (temp6 & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp11 <= (int)temp10) {\n    return CONCAT44(temp9 + (temp10 - temp11) * 0x100000 | input2,temp7);\n  }\n  temp6 = ~(temp10 - temp11);\n  if ((int)temp6 < 0x1f) {\n    temp8 = temp6 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp6 - 0x1f,0xc)) {\n      return CONCAT44(temp4,temp7 >> (0x20 - (0xcU - temp8) & 0xff) | temp9 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp6 = temp6 + 1;\n    return CONCAT44(input2 | temp9 >> (temp6 & 0xff),\n                    temp7 >> (temp6 & 0xff) | temp9 << (0x20 - temp6 & 0xff));\n  }\n  return CONCAT44(temp4,temp9 >> (temp6 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_080082d0",
            "entrypoint": "0x080082d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080082d0": "reverse_bits_080082d0",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "bVar2": "temp2",
                "iVar1": "temp1",
                "iVar8": "temp8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "temp10",
                "uVar11": "temp11",
                "uVar12": "temp12",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082d4": {
            "additional_data": {
                "FUN_080082d4": {
                    "calculate_converted_numbers": 1,
                    "calculate_double_precision_result": 1,
                    "calculate_extended_sum": 1,
                    "calculate_result": 5,
                    "calculate_sum": 3,
                    "calculate_unsigned_division": 1,
                    "calculate_unsigned_multiplication": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_calculation": 1,
                    "perform_operation": 1,
                    "perform_unsigned_division": 1,
                    "reverse_bits": 2,
                    "reverse_variable_swap": 1
                },
                "bVar13": {
                    "are_inputs_equal": 2,
                    "are_values_equal": 1,
                    "bool1": 2,
                    "check1": 2,
                    "check_1": 1,
                    "compare_result_1": 1,
                    "condition1": 4,
                    "equal_flag1": 1,
                    "is_carry": 1,
                    "is_condition1": 1,
                    "is_condition_met1": 1,
                    "is_divisor_and_remainder_zero": 1,
                    "is_equal": 4,
                    "is_equal_flag1": 1,
                    "is_input2_equal_input4": 2,
                    "is_input_shift_equal": 1,
                    "is_same": 1,
                    "no_carry_flag1": 1,
                    "same_sign": 1
                },
                "bVar14": {
                    "bool2": 2,
                    "check2": 2,
                    "check_2": 1,
                    "compare_result_2": 1,
                    "condition": 1,
                    "condition2": 4,
                    "condition_met": 1,
                    "equal_flag2": 1,
                    "is_condition2": 1,
                    "is_condition_met2": 1,
                    "is_condition_met_1": 1,
                    "is_condition_true": 2,
                    "is_equal_flag2": 1,
                    "is_first_condition_met": 1,
                    "is_quotient_valid": 1,
                    "is_result": 1,
                    "is_shifted_b_zero": 1,
                    "is_zero": 5,
                    "no_carry_flag2": 1
                },
                "bVar15": {
                    "bool3": 2,
                    "carry_flag": 1,
                    "check3": 2,
                    "check_3": 1,
                    "condition3": 4,
                    "is_borrow": 1,
                    "is_carry": 1,
                    "is_condition3": 1,
                    "is_condition_met3": 1,
                    "is_condition_met_2": 1,
                    "is_negative": 4,
                    "is_overflow": 1,
                    "is_second_condition_met": 1,
                    "is_shifted_d_zero": 1,
                    "is_subtraction_negative": 1,
                    "is_subtraction_overflow": 1,
                    "subtraction_flag": 2,
                    "subtraction_result": 1,
                    "temp_8": 1
                },
                "bVar2": {
                    "bit1": 1,
                    "carry": 9,
                    "carry1": 1,
                    "carry_bit": 1,
                    "carry_flag": 2,
                    "temp_bit": 1,
                    "temp_byte": 1,
                    "val2": 1
                },
                "iVar1": {
                    "input_4_shift_right": 1,
                    "left_shift_value1": 1,
                    "right_shift1": 1,
                    "shift1": 6,
                    "shift_amt1": 1,
                    "shift_count2": 1,
                    "shift_count_2": 1,
                    "shift_right1": 1,
                    "shift_value1": 1,
                    "shifted_1": 1,
                    "shifted_input2": 1,
                    "shifted_input4_ms_bits": 1,
                    "shifted_input4_upper_bits": 1,
                    "shifted_input_4_shifted": 1,
                    "shifted_op4_as_int": 1,
                    "shifted_right_input1": 1,
                    "shifted_sum1": 1,
                    "val1": 1
                },
                "iVar6": {
                    "input_2_shift_right": 1,
                    "left_shift_value2": 1,
                    "right_shift2": 1,
                    "shift1": 1,
                    "shift2": 6,
                    "shift_amount": 1,
                    "shift_amt2": 1,
                    "shift_count": 1,
                    "shift_count1": 1,
                    "shift_right2": 1,
                    "shift_value2": 1,
                    "shifted_2": 1,
                    "shifted_b_last_bit": 1,
                    "shifted_input2_ms_bits": 1,
                    "shifted_input2_upper_bits": 1,
                    "shifted_input4": 1,
                    "shifted_input_2_shifted": 1,
                    "shifted_op2_as_int": 1,
                    "shifted_right_input2": 1,
                    "shifted_sum2": 1,
                    "temp2": 1,
                    "temp_4": 2,
                    "val6": 1
                },
                "param_1": {
                    "a": 2,
                    "dividend": 2,
                    "input1": 13,
                    "input_1": 5,
                    "input_a": 1,
                    "input_number_1": 1,
                    "num1": 2,
                    "number_1": 1,
                    "operand1": 2
                },
                "param_2": {
                    "b": 2,
                    "divisor": 2,
                    "input2": 13,
                    "input_2": 5,
                    "input_b": 1,
                    "input_number_2": 1,
                    "num2": 2,
                    "number_2": 1,
                    "operand2": 2
                },
                "param_3": {
                    "c": 2,
                    "input3": 13,
                    "input_3": 5,
                    "input_c": 1,
                    "input_number_3": 1,
                    "num3": 2,
                    "number_3": 1,
                    "operand3": 2,
                    "quotient": 2
                },
                "param_4": {
                    "d": 2,
                    "input4": 13,
                    "input_4": 5,
                    "input_d": 1,
                    "input_number_4": 1,
                    "num4": 2,
                    "number_4": 1,
                    "operand4": 2,
                    "remainder": 2
                },
                "uVar10": {
                    "difference": 10,
                    "distance": 1,
                    "quotient_extended": 1,
                    "result2": 2,
                    "result5": 1,
                    "shifted_input4": 1,
                    "shifted_num7": 1,
                    "shifted_result2": 1,
                    "shifted_result4": 1,
                    "shifted_result_2": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 3,
                    "temp_8": 1,
                    "u_var10": 2,
                    "val10": 1
                },
                "uVar11": {
                    "part1": 1,
                    "remainder_extended": 1,
                    "result2": 1,
                    "result3": 1,
                    "result6": 1,
                    "result_1": 1,
                    "result_4": 1,
                    "shifted_num8": 1,
                    "shifted_output1": 1,
                    "shifted_result1": 1,
                    "shifted_result_1": 1,
                    "shifted_sum2": 1,
                    "sign_bit": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 3,
                    "temp_6": 1,
                    "temp_9": 1,
                    "temp_result1": 1,
                    "temp_var4": 1,
                    "temp_variable1": 1,
                    "tmp_value_1": 1,
                    "u_var11": 2,
                    "val11": 1
                },
                "uVar11_temp": {
                    "temp_result_1": 1
                },
                "uVar12": {
                    "part2": 1,
                    "partial_result": 1,
                    "result1": 1,
                    "result2": 1,
                    "result3": 1,
                    "result4": 1,
                    "result7": 1,
                    "result_2": 1,
                    "result_5": 1,
                    "result_temp": 1,
                    "shifted_num9": 1,
                    "shifted_output2": 1,
                    "shifted_result2": 1,
                    "sum": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 3,
                    "temp_10": 1,
                    "temp_7": 1,
                    "temp_result2": 1,
                    "temp_var5": 1,
                    "temp_variable2": 1,
                    "temporary_result": 1,
                    "tmp_value_2": 1,
                    "u_var12": 2,
                    "val12": 1
                },
                "uVar12_temp": {
                    "temp_result_2": 1
                },
                "uVar13": {
                    "sign_bit": 1,
                    "temp8": 1
                },
                "uVar14": {
                    "mask": 1,
                    "temp9": 1,
                    "temp_variable5": 1
                },
                "uVar15": {
                    "shift_count_temp": 1,
                    "temp10": 1
                },
                "uVar2": {
                    "temp_result5": 1
                },
                "uVar3": {
                    "carry": 1,
                    "result1": 1,
                    "result_1": 1,
                    "shifted_b": 1,
                    "shifted_num1": 1,
                    "sum1": 4,
                    "sum_temp1": 1,
                    "temp1": 11,
                    "temp_1": 4,
                    "temp_result3": 1,
                    "temp_var1": 1,
                    "temp_variable3": 1,
                    "val3": 1
                },
                "uVar4": {
                    "result2": 1,
                    "result_2": 1,
                    "shifted_d": 1,
                    "shifted_num2": 1,
                    "shifted_sum1": 1,
                    "sum2": 3,
                    "sum_temp2": 1,
                    "temp1": 1,
                    "temp2": 11,
                    "temp_2": 4,
                    "temp_result4": 1,
                    "temp_var2": 1,
                    "temp_variable4": 1,
                    "val4": 1
                },
                "uVar5": {
                    "input2_copy": 1,
                    "modified_input_2": 1,
                    "param_2_mod": 1,
                    "result1": 1,
                    "result3": 1,
                    "result_1": 1,
                    "shifted_a": 1,
                    "shifted_input2": 1,
                    "shifted_num3": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp3": 10,
                    "temp_3": 2,
                    "temp_var3": 1,
                    "u_var5": 2,
                    "val5": 1
                },
                "uVar6": {
                    "temp_result6": 1
                },
                "uVar7": {
                    "divisor_shifted": 1,
                    "doubled_divisor": 1,
                    "input_2_shift": 1,
                    "masked_input2": 1,
                    "shifted1": 1,
                    "shifted_b_msb": 1,
                    "shifted_input2": 8,
                    "shifted_input_2": 3,
                    "shifted_input_number_2": 1,
                    "shifted_left_2": 1,
                    "shifted_left_input2": 1,
                    "shifted_num4": 1,
                    "shifted_op1": 1,
                    "shifted_op2": 1,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_5": 1,
                    "val7": 1
                },
                "uVar7_temp": {
                    "temp_shifted_input_2": 1
                },
                "uVar8": {
                    "dividend_shifted": 1,
                    "input1_copy": 1,
                    "modified_input_1": 1,
                    "result": 1,
                    "result1": 2,
                    "result_2": 1,
                    "result_3": 1,
                    "shifted2": 1,
                    "shifted_d_last_bit": 1,
                    "shifted_input1": 1,
                    "shifted_input2_ls_bits": 1,
                    "shifted_input4": 4,
                    "shifted_left_input1": 1,
                    "shifted_num5": 1,
                    "shifted_op2": 1,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_5": 1,
                    "temp_6": 1,
                    "u_var8": 2,
                    "val8": 1
                },
                "uVar8_temp": {
                    "temp_modified_input_1": 1
                },
                "uVar9": {
                    "divisor_extended": 1,
                    "doubled_remainder": 1,
                    "input_4_shift": 1,
                    "masked_input4": 1,
                    "result1": 2,
                    "result2": 1,
                    "result4": 1,
                    "shifted_d_msb": 1,
                    "shifted_input4": 4,
                    "shifted_input_4": 3,
                    "shifted_input_number_4": 1,
                    "shifted_left_4": 1,
                    "shifted_left_input4": 1,
                    "shifted_num6": 1,
                    "shifted_op4": 1,
                    "shifted_result1": 1,
                    "shifted_result2": 1,
                    "temp5": 1,
                    "temp6": 3,
                    "temp_7": 1,
                    "val9": 1
                },
                "uVar9_temp": {
                    "temp_shifted_input_4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009318",
                "FUN_0800a5a0",
                "FUN_08009654",
                "FUN_08009b24",
                "FUN_0800af78",
                "FUN_08001f00",
                "FUN_0800adf0",
                "FUN_080094c0",
                "FUN_0800a1bc",
                "FUN_0800b2e8",
                "FUN_08009990",
                "FUN_08009798",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "code": "\nulonglong calculate_double_precision_result_080082d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int shift1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint shifted_input4;\n  uint difference;\n  uint temp8;\n  uint temp9;\n  bool condition1;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  condition1 = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = condition1 && input1 == input3;\n  if (!condition1 || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  shift1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || shift1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || shift1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp9 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp8 = input3 << (temp9 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (temp9 & 0xff);\n    temp9 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + CARRY4(shifted_input4,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)CARRY4(temp1,temp2);\n  }\n  else {\n    temp8 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp8 = temp8 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp9 = shifted_input4 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)CARRY4(shifted_input4,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = temp8 == 0;\n    temp8 = -temp8;\n    difference = -temp9;\n    temp9 = -(uint)!is_zero - temp9;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp9;\n      temp9 = (uint)(shifted_input4 != 0) << 0x1f | temp9 >> 1;\n      temp8 = (uint)(carry & 1) << 0x1f | temp8 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    is_zero = 0x7fffffff < temp8;\n    if (temp8 == 0x80000000) {\n      is_zero = (temp9 & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input4 * 0x100000 + (uint)CARRY4(temp9,(uint)is_zero) | input2,\n                    temp9 + is_zero);\n  }\n  condition1 = (temp8 & 0x80000000) != 0;\n  temp8 = temp8 << 1;\n  shifted_input4 = temp9 * 2;\n  is_zero = CARRY4(temp9,temp9);\n  temp9 = temp9 * 2 + (uint)condition1;\n  difference = difference * 2 + (uint)(is_zero || CARRY4(shifted_input4,(uint)condition1));\n  shifted_input4 = shifted_input2 - 2;\n  if (shifted_input2 - 1 != 0 && 0xfffff < difference) goto LAB_080083e0;\n  temp3 = temp9;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = temp9;\n  }\n  shift2 = LZCOUNT(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp9 = shift2 - 0xb;\n  is_negative = SBORROW4(temp9,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  condition1 = difference == 0;\n  if ((int)temp9 < 0x20) {\n    is_negative = SCARRY4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    condition1 = shift2 == 0;\n    difference = temp9;\n    if (!condition1 && is_zero == is_negative) {\n      temp3 = shifted_input2 << (temp9 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (condition1 || is_zero != is_negative) {\n    temp8 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (condition1 || is_zero != is_negative) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp8 & 0xff);\n  }\n  if (condition1 || is_zero != is_negative) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp9 <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - temp9) * 0x100000 | input2,temp3);\n  }\n  difference = ~(shifted_input4 - temp9);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == SCARRY4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_double_precision_result_080082d4",
            "entrypoint": "0x080082d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080082d4": "calculate_double_precision_result_080082d4",
                "bVar13": "condition1",
                "bVar14": "is_zero",
                "bVar15": "is_negative",
                "bVar2": "carry",
                "iVar1": "shift1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "temp8",
                "uVar12": "temp9",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800854c": {
            "additional_data": {
                "0x100000": {
                    "threshold_multiplier": 1
                },
                "0x13": {
                    "threshold_check_offset": 1
                },
                "0x15": {
                    "bit_constant": 1
                },
                "0x1e": {
                    "threshold_check": 1
                },
                "0x20": {
                    "bit_size": 1
                },
                "0x432": {
                    "threshold_offset": 1
                },
                "0x433": {
                    "threshold": 1
                },
                "0xb": {
                    "bit_offset": 1
                },
                "0xc": {
                    "shift_offset": 1
                },
                "0xcU": {
                    "shift_limit": 1
                },
                "CONCAT44": {
                    "combine_values": 3,
                    "concat_values": 1,
                    "concatenate": 1
                },
                "FUN_0800854c": {
                    "bit_reverse": 1,
                    "bit_shift_and_concat": 1,
                    "bit_shift_function": 1,
                    "bitwise_shift": 1,
                    "convert_to_unsigned_long_long": 1,
                    "decode_and_shift_bits": 1,
                    "reverse_and_shift": 1,
                    "reverse_bit_order": 1,
                    "reverse_bits": 10,
                    "reverse_shift": 1,
                    "shift_and_combine": 3,
                    "shift_and_concat": 2,
                    "shift_and_concat_bits": 2,
                    "shift_and_concatenate": 2,
                    "shift_and_rotate": 1,
                    "shift_and_rotate_bits": 1,
                    "shift_bits_and_concat": 1
                },
                "LAB_08008458": {
                    "apply_shift": 2,
                    "bitwise_operations": 1,
                    "calculate_result": 1,
                    "calculate_shift": 1,
                    "compute_result": 1,
                    "end_label": 2,
                    "perform_shift": 2,
                    "shift_bits": 1,
                    "shift_label": 1,
                    "shift_left": 1,
                    "shift_operation": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "SCARRY4": {
                    "subtract_carry": 1
                },
                "bVar5": {
                    "is_negative": 28,
                    "is_negative_shift": 1,
                    "is_negative_shift_amount": 1,
                    "is_shift_negative": 1
                },
                "bVar6": {
                    "is_shift_zero": 1,
                    "is_zero": 28,
                    "is_zero_shift": 1,
                    "is_zero_shift_amount": 1
                },
                "bVar7": {
                    "carry": 3,
                    "carry_flag": 3,
                    "has_carry": 1,
                    "has_overflow": 1,
                    "is_borrow": 6,
                    "is_carry": 6,
                    "is_greater_or_equal": 1,
                    "is_overflow": 5,
                    "is_overflown": 1,
                    "is_underflow": 1,
                    "overflow": 3
                },
                "iVar3": {
                    "bit_count": 13,
                    "count": 5,
                    "leading_zero_count": 1,
                    "leading_zeros": 11,
                    "lz_count": 1
                },
                "in_r12": {
                    "difference": 1,
                    "inversed_shift": 1,
                    "max_shift": 1,
                    "remaining": 1,
                    "remaining_bits": 19,
                    "remaining_shift": 2,
                    "remaining_shift_amount": 1,
                    "shift_mask": 1,
                    "shifted_value": 1,
                    "temp": 2,
                    "temp_var": 1
                },
                "param_1": {
                    "input": 21,
                    "input_num": 1,
                    "input_value": 7,
                    "num": 1,
                    "shifted_value": 1
                },
                "uVar1": {
                    "combined_result": 1,
                    "concatenated_value": 1,
                    "high_bits": 1,
                    "output": 1,
                    "output_upper": 1,
                    "output_value": 1,
                    "result": 7,
                    "result1": 2,
                    "result_1": 2,
                    "result_high": 2,
                    "result_upper": 1,
                    "shifted_bits": 2,
                    "shifted_result": 1,
                    "shifted_value": 4,
                    "shifted_value1": 1,
                    "upper_bits": 2,
                    "upper_word": 1
                },
                "uVar2": {
                    "lower_bits": 1,
                    "result2": 1,
                    "result_2": 2,
                    "shift": 2,
                    "shift_amount": 19,
                    "shift_count": 2,
                    "shift_value": 1,
                    "shifted_value": 1,
                    "shifted_value2": 1
                },
                "uVar4": {
                    "add_constant": 1,
                    "adjusted_count": 1,
                    "adjusted_shift": 2,
                    "adjusted_shift_amount": 1,
                    "constant": 2,
                    "final_shift_count": 1,
                    "length_offset": 1,
                    "new_shift_amount": 1,
                    "num_bits": 1,
                    "offset": 4,
                    "shift_amount": 7,
                    "shift_value": 1,
                    "shifted_leading_zero_count": 1,
                    "shifted_value": 1,
                    "temp_shift": 1,
                    "temp_value": 1,
                    "threshold": 1,
                    "total_bits": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nulonglong reverse_bits_0800854c(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_carry;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  bit_count = leading_zero_count(input);\n  shift_amount = bit_count + 0x15;\n  is_carry = SBORROW4(shift_amount,0x20);\n  shift_amount = bit_count - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_carry = subtract_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = bit_count + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_carry == false) {\n      result = input << shift_amount;\n      input = input >> (shift_limit - (bit_count + 1) & 0xff);\n      goto end_label;\n    }\n  }\n  if (is_zero || is_negative != is_carry) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_carry) {\n    input = input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_carry) {\n    result = 0 << (shift_amount & 0xff);\n  }\nend_label:\n  if (shift_amount < 0x433) {\n    return combine_values(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  bit_count = shift_amount - 0x13;\n  if (bit_count == 0 || bit_count < 0 != subtract_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_values(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (shift_limit - bit_count) & 0xff) | input << (shift_limit - bit_count & 0xff));\n}\n\n",
            "current_name": "reverse_bits_0800854c",
            "entrypoint": "0x0800854c",
            "imported": false,
            "improved": true,
            "renaming": {
                "0xcU": "shift_limit",
                "CONCAT44": "combine_values",
                "FUN_0800854c": "reverse_bits_0800854c",
                "LAB_08008458": "end_label",
                "LZCOUNT": "leading_zero_count",
                "SCARRY4": "subtract_carry",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_carry",
                "iVar3": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800856c": {
            "additional_data": {
                "0x100000": {
                    "constant_multiplier": 1
                },
                "0x13": {
                    "min_positive_shift": 1
                },
                "0x1e": {
                    "max_positive_shift": 1
                },
                "0x1f": {
                    "shift_amount_mask": 1
                },
                "0x20": {
                    "bits_per_byte": 1
                },
                "0x432": {
                    "shift_limit": 1
                },
                "0x433": {
                    "max_shift_amount": 1
                },
                "0x80000000": {
                    "sign_bit_mask": 1
                },
                "0xc": {
                    "shift_constant": 1
                },
                "0xffffffff": {
                    "32_bit_mask": 1
                },
                "CONCAT44": {
                    "combine_uint64": 1
                },
                "FUN_0800856c": {
                    "bit_shift_and_concat": 2,
                    "bit_shift_and_concatenation": 1,
                    "bit_shift_and_mask": 1,
                    "bitwise_shift": 2,
                    "calculate_shift_and_mask": 1,
                    "extract_bits": 1,
                    "extract_bits_from_int": 1,
                    "mask_sign_bits": 1,
                    "reverse_and_shift_bits": 3,
                    "reverse_bits": 10,
                    "reverse_bits_and_shift": 1,
                    "reverse_uint": 1,
                    "shift_and_align_bits": 1,
                    "shift_and_combine": 1,
                    "shift_and_combine_bits": 2,
                    "shift_and_concatenate": 1
                },
                "LAB_08008458": {
                    "bit_shift_operations": 1,
                    "process_shift": 1,
                    "shift_and_combine": 1
                },
                "SBORROW4": {
                    "is_subtraction_borrow4": 1
                },
                "SCARRY4": {
                    "is_subtraction_carry4": 1
                },
                "bVar7": {
                    "has_leading_zeroes": 1,
                    "has_negative_shift": 1,
                    "high_bit_shifted": 1,
                    "is_less_than_zero": 1,
                    "is_negative": 13,
                    "is_negative_shift_count": 1,
                    "is_shift_less_than_zero": 2,
                    "is_shift_negative": 1,
                    "is_shifted": 1,
                    "leading_zeroes_negative": 1,
                    "leading_zeros_less_than_shift": 1,
                    "no_overflow1": 1,
                    "shift_condition_1": 2,
                    "shift_positive": 1,
                    "shifted_out": 1,
                    "test_1": 1
                },
                "bVar8": {
                    "is_equal_zero": 1,
                    "is_shift_amount_zero": 1,
                    "is_shift_equal_to_zero": 2,
                    "is_shift_zero": 1,
                    "is_zero": 14,
                    "is_zero_shift": 3,
                    "is_zero_shift_count": 1,
                    "leading_zeroes_zero": 1,
                    "leading_zeros_equal_to_shift": 1,
                    "shift_condition_2": 2,
                    "shift_zero": 1,
                    "test_2": 1,
                    "zero_shift": 1
                },
                "bVar9": {
                    "carry": 3,
                    "carry_condition": 1,
                    "carry_flag": 3,
                    "has_carry": 1,
                    "has_carry_flag": 1,
                    "is_carry": 2,
                    "is_negative": 2,
                    "is_overflow": 1,
                    "is_shift_amount_negative": 1,
                    "is_shift_carry": 2,
                    "leading_zeroes_negative_overflow": 1,
                    "need_extra_bit": 1,
                    "no_overflow2": 1,
                    "overflow": 5,
                    "shift_carry": 1,
                    "shift_condition_3": 1,
                    "shift_count_carry": 1,
                    "should_invert_shift": 1,
                    "test_3": 1
                },
                "iVar4": {
                    "bits_diff": 1,
                    "input_leading_zeros": 1,
                    "leading_zero_count": 3,
                    "leading_zeroes": 3,
                    "leading_zeros": 22,
                    "lz_count": 1
                },
                "in_r12": {
                    "bit_mask": 2,
                    "invert_mask": 1,
                    "mask": 1,
                    "remaining_bits": 20,
                    "remaining_shift": 1,
                    "remaining_shift_amount": 1,
                    "result": 1,
                    "shift_amount": 1,
                    "shifted_bits": 1,
                    "temp": 1,
                    "temp_var": 1
                },
                "new_variable_name_1": {
                    "temp1": 1
                },
                "new_variable_name_2": {
                    "temp2": 1
                },
                "new_variable_name_n": {
                    "temp_n": 1
                },
                "param_1": {
                    "input": 23,
                    "input_number": 1,
                    "input_value": 1,
                    "num": 1,
                    "number": 3,
                    "result64": 1,
                    "value": 1
                },
                "uVar1": {
                    "bit_count": 5,
                    "bits_set": 1,
                    "count": 2,
                    "count_leading_zeros": 2,
                    "counter": 1,
                    "mask": 1,
                    "output_upper_bits": 1,
                    "result": 6,
                    "result1": 1,
                    "shift_amount": 4,
                    "shift_count": 2,
                    "shifted_bits": 1,
                    "shifted_number": 1,
                    "shifted_result": 1,
                    "shifted_value": 2
                },
                "uVar10": {
                    "result": 1,
                    "shifted_input": 1
                },
                "uVar11": {
                    "result": 1
                },
                "uVar1_clz": {
                    "count_leading_zeros": 1
                },
                "uVar1_ctz": {
                    "count_trailing_zeros": 1
                },
                "uVar2": {
                    "abs_input": 16,
                    "abs_input_number": 1,
                    "abs_num": 2,
                    "abs_number": 2,
                    "abs_value": 2,
                    "absolute_value": 2,
                    "input_abs": 1,
                    "masked_value": 1,
                    "positive_input": 1,
                    "result": 1,
                    "result2": 1,
                    "temp_input": 1
                },
                "uVar2_add": {
                    "add": 1
                },
                "uVar2_and": {
                    "bitwise_and": 1
                },
                "uVar2_ashr": {
                    "arithmetic_shift_right": 1
                },
                "uVar2_bsf": {
                    "bit_scan_forward": 1
                },
                "uVar2_bsr": {
                    "bit_scan_reverse": 1
                },
                "uVar2_bt": {
                    "bit_test": 1
                },
                "uVar2_btc": {
                    "bit_test_and_complement": 1
                },
                "uVar2_btr": {
                    "bit_test_and_reset": 1
                },
                "uVar2_bts": {
                    "bit_test_and_set": 1
                },
                "uVar2_call": {
                    "call": 1
                },
                "uVar2_clr": {
                    "clear_bit": 1
                },
                "uVar2_cmovcc": {
                    "conditional_move": 1
                },
                "uVar2_cmp": {
                    "compare": 1
                },
                "uVar2_dec": {
                    "decrement": 1
                },
                "uVar2_div": {
                    "divide": 1
                },
                "uVar2_idiv": {
                    "signed_divide": 1
                },
                "uVar2_imod": {
                    "signed_modulo": 1
                },
                "uVar2_imul": {
                    "signed_multiply": 1
                },
                "uVar2_inc": {
                    "increment": 1
                },
                "uVar2_jmp": {
                    "jump": 1
                },
                "uVar2_loop": {
                    "loop": 1
                },
                "uVar2_mov": {
                    "move": 1
                },
                "uVar2_mul": {
                    "multiply": 1
                },
                "uVar2_neg": {
                    "negate": 1
                },
                "uVar2_not": {
                    "bitwise_not": 1
                },
                "uVar2_or": {
                    "bitwise_or": 1
                },
                "uVar2_pop": {
                    "pop": 1
                },
                "uVar2_push": {
                    "push": 1
                },
                "uVar2_ret": {
                    "return": 1
                },
                "uVar2_rol": {
                    "rotate_left": 1
                },
                "uVar2_ror": {
                    "rotate_right": 1
                },
                "uVar2_sar": {
                    "shift_arithmetic_right": 1
                },
                "uVar2_set": {
                    "set_bit": 1
                },
                "uVar2_setcc": {
                    "conditionally_set": 1
                },
                "uVar2_sext": {
                    "sign_extend": 1
                },
                "uVar2_shl": {
                    "shift_left": 1
                },
                "uVar2_shld": {
                    "double_precision_shift_left": 1
                },
                "uVar2_shr": {
                    "shift_right": 1
                },
                "uVar2_shrd": {
                    "double_precision_shift_right": 1
                },
                "uVar2_sub": {
                    "subtract": 1
                },
                "uVar2_tst": {
                    "test_bit": 1
                },
                "uVar2_xor": {
                    "bitwise_xor": 1
                },
                "uVar2_zext": {
                    "zero_extend": 1
                },
                "uVar3": {
                    "bit_position": 1,
                    "final_shift_count": 1,
                    "offset": 1,
                    "shift": 2,
                    "shift_amount": 19,
                    "shift_count": 4,
                    "shifted_amount": 2
                },
                "uVar3_add": {
                    "add": 1
                },
                "uVar3_and": {
                    "bitwise_and": 1
                },
                "uVar3_ashr": {
                    "arithmetic_shift_right": 1
                },
                "uVar3_bsf": {
                    "bit_scan_forward": 1
                },
                "uVar3_bsr": {
                    "bit_scan_reverse": 1
                },
                "uVar3_bt": {
                    "bit_test": 1
                },
                "uVar3_btc": {
                    "bit_test_and_complement": 1
                },
                "uVar3_btr": {
                    "bit_test_and_reset": 1
                },
                "uVar3_bts": {
                    "bit_test_and_set": 1
                },
                "uVar3_call": {
                    "call": 1
                },
                "uVar3_clr": {
                    "clear_bit": 1
                },
                "uVar3_cmovcc": {
                    "conditional_move": 1
                },
                "uVar3_cmp": {
                    "compare": 1
                },
                "uVar3_dec": {
                    "decrement": 1
                },
                "uVar3_div": {
                    "divide": 1
                },
                "uVar3_idiv": {
                    "signed_divide": 1
                },
                "uVar3_imod": {
                    "signed_modulo": 1
                },
                "uVar3_imul": {
                    "signed_multiply": 1
                },
                "uVar3_inc": {
                    "increment": 1
                },
                "uVar3_jmp": {
                    "jump": 1
                },
                "uVar3_loop": {
                    "loop": 1
                },
                "uVar3_mov": {
                    "move": 1
                },
                "uVar3_mul": {
                    "multiply": 1
                },
                "uVar3_neg": {
                    "negate": 1
                },
                "uVar3_not": {
                    "bitwise_not": 1
                },
                "uVar3_or": {
                    "bitwise_or": 1
                },
                "uVar3_pop": {
                    "pop": 1
                },
                "uVar3_push": {
                    "push": 1
                },
                "uVar3_ret": {
                    "return": 1
                },
                "uVar3_rol": {
                    "rotate_left": 1
                },
                "uVar3_ror": {
                    "rotate_right": 1
                },
                "uVar3_sar": {
                    "shift_arithmetic_right": 1
                },
                "uVar3_set": {
                    "set_bit": 1
                },
                "uVar3_setcc": {
                    "conditionally_set": 1
                },
                "uVar3_sext": {
                    "sign_extend": 1
                },
                "uVar3_shl": {
                    "shift_left": 1
                },
                "uVar3_shld": {
                    "double_precision_shift_left": 1
                },
                "uVar3_shr": {
                    "shift_right": 1
                },
                "uVar3_shrd": {
                    "double_precision_shift_right": 1
                },
                "uVar3_sub": {
                    "subtract": 1
                },
                "uVar3_tst": {
                    "test_bit": 1
                },
                "uVar3_xor": {
                    "bitwise_xor": 1
                },
                "uVar3_zext": {
                    "zero_extend": 1
                },
                "uVar5": {
                    "adjusted_bit_count": 1,
                    "adjusted_count": 1,
                    "adjusted_shift": 1,
                    "adjusted_shift_amount": 1,
                    "adjusted_shift_count": 1,
                    "desired_shift": 1,
                    "effective_bit_count": 1,
                    "final_shift": 2,
                    "final_shift_amount": 2,
                    "new_shift_amount": 3,
                    "new_shifted_number": 1,
                    "offset": 2,
                    "shift_amount": 1,
                    "shifted_amount": 3,
                    "shifted_bits": 1,
                    "shifted_width": 1,
                    "shifted_zeros": 1,
                    "total_bits": 5,
                    "total_shift": 2
                },
                "uVar6": {
                    "input_sign": 1,
                    "input_sign_bit": 1,
                    "is_negative": 2,
                    "sign": 1,
                    "sign_bit": 25,
                    "sign_mask": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800a5a0",
                "FUN_08002c18",
                "FUN_08009d78"
            ],
            "code": "\nulonglong reverse_bits_and_shift_0800856c(uint input)\n\n{\n  uint result;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  result = 0;\n  leading_zeros = LZCOUNT(abs_input);\n  total_bits = leading_zeros + 0x15;\n  overflow = is_subtraction_borrow4(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    overflow = is_subtraction_carry4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && overflow == false) {\n      result = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shift_and_combine;\n    }\n  }\n  if (is_zero || is_negative != overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != overflow) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != overflow) {\n    result = 0 << (shift_amount & 0xff);\n  }\nshift_and_combine:\n  if (total_bits < 0x433) {\n    return combine_uint64(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,result);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return combine_uint64(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != is_subtraction_carry4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_uint64(sign_bit | abs_input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return combine_uint64(input,result >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_shift_0800856c",
            "entrypoint": "0x0800856c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_uint64",
                "FUN_0800856c": "reverse_bits_and_shift_0800856c",
                "LAB_08008458": "shift_and_combine",
                "SBORROW4": "is_subtraction_borrow4",
                "SCARRY4": "is_subtraction_carry4",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "overflow",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008590": {
            "additional_data": {
                "FUN_08008590": {
                    "bitwise_transformation": 1,
                    "extracted_function": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bit_pattern": 1,
                    "reverse_bits": 21,
                    "reverse_bits_and_shift": 1,
                    "shift_and_combine": 1
                },
                "LAB_08008458": {
                    "continue_reverse": 1
                },
                "bVar10": {
                    "b_var10": 1,
                    "carry": 1,
                    "carry_flag": 2,
                    "carry_flag_3": 1,
                    "check_var2": 1,
                    "condition3": 1,
                    "flag3": 1,
                    "is_borrow": 1,
                    "is_carry": 1,
                    "is_count_overflow": 1,
                    "is_invalid": 1,
                    "is_less_than_zero2": 1,
                    "is_negative": 8,
                    "is_overflow": 1,
                    "is_shift_greater": 1,
                    "is_shifted": 1,
                    "is_zero2": 1,
                    "overflow": 3,
                    "subtract_check": 1,
                    "temp_bool": 1
                },
                "bVar8": {
                    "carry_flag": 1,
                    "carry_flag_1": 1,
                    "condition1": 1,
                    "equal_check": 1,
                    "flag1": 1,
                    "is_count_negative": 1,
                    "is_less_than_zero1": 1,
                    "is_neg": 1,
                    "is_negative": 7,
                    "is_positive": 1,
                    "is_shift_equal": 1,
                    "is_shift_zero": 1,
                    "is_zero": 7,
                    "is_zero_shift": 1,
                    "is_zero_shift_count": 1,
                    "temp_bool": 1,
                    "u_var4_negative": 1
                },
                "bVar9": {
                    "carry_flag_2": 1,
                    "check_mask": 1,
                    "check_var1": 1,
                    "condition2": 1,
                    "flag2": 1,
                    "is_equal": 1,
                    "is_ff": 1,
                    "is_ff000000": 2,
                    "is_full_byte": 1,
                    "is_mask255": 1,
                    "is_mask_zero": 1,
                    "is_masked": 1,
                    "is_match": 1,
                    "is_shift_zero": 1,
                    "is_shifted": 1,
                    "is_zero": 10,
                    "is_zero1": 2,
                    "temp_bool": 1,
                    "zero_check": 1
                },
                "iVar6": {
                    "bit_count": 9,
                    "count": 11,
                    "index": 2,
                    "leading_zeros": 1,
                    "lz_count": 1,
                    "lzcount_result": 1,
                    "num_bits": 1,
                    "number_of_bits": 1,
                    "shift_amount": 1,
                    "shift_amt2": 1,
                    "shift_count": 1,
                    "temp2": 1
                },
                "in_r12": {
                    "bit_count": 1,
                    "bit_offset": 2,
                    "bit_width": 1,
                    "constant": 1,
                    "in_r12": 2,
                    "in_register12": 2,
                    "input_bit_size": 1,
                    "masked_input": 1,
                    "remainder": 4,
                    "remainder2": 1,
                    "remaining": 1,
                    "remaining_bits": 4,
                    "temp": 3,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_value4": 1,
                    "unused": 1,
                    "var10": 1
                },
                "param_1": {
                    "input": 24,
                    "input_param": 1,
                    "input_val": 1,
                    "input_value": 5
                },
                "param_2": {
                    "arg1": 2,
                    "flag": 1,
                    "ignore1": 1,
                    "param1": 1,
                    "param2": 9,
                    "second_param": 1,
                    "unused": 3,
                    "unused_param": 2,
                    "unused_param_1": 1,
                    "unused_parameter1": 1,
                    "var2": 2
                },
                "param_3": {
                    "arg2": 2,
                    "flag2": 1,
                    "ignore2": 1,
                    "param2": 1,
                    "param3": 9,
                    "third_param": 1,
                    "unused": 3,
                    "unused_param": 2,
                    "unused_param_2": 1,
                    "unused_parameter2": 1,
                    "var3": 2
                },
                "param_4": {
                    "arg3": 1,
                    "condition": 2,
                    "flag": 2,
                    "flags": 1,
                    "fourth_param": 1,
                    "ignore3": 1,
                    "mask": 10,
                    "param3": 1,
                    "param4": 7,
                    "unused_param": 1,
                    "unused_param_3": 1,
                    "unused_parameter3": 1,
                    "var4": 2
                },
                "uVar1": {
                    "bit1": 1,
                    "bit31": 6,
                    "bit31_mask": 1,
                    "bit31_set": 1,
                    "bit31_shifted": 1,
                    "high_bit": 3,
                    "is_negative": 1,
                    "mask": 1,
                    "msb": 3,
                    "msb_bit": 1,
                    "msb_flag": 1,
                    "msb_mask": 2,
                    "msb_set": 1,
                    "msb_set_mask": 1,
                    "prefix": 1,
                    "result1": 1,
                    "sign_bit": 1,
                    "sign_extension": 2,
                    "signed_bit": 1,
                    "top_bit_mask": 1
                },
                "uVar2": {
                    "output": 4,
                    "result": 2,
                    "result2": 1,
                    "shifted_input": 4,
                    "shifted_val": 1,
                    "shifted_value": 1,
                    "temp": 6,
                    "temp1": 5,
                    "temp_value1": 1,
                    "temp_var": 2,
                    "temp_var1": 2,
                    "var1": 1
                },
                "uVar3": {
                    "bit31": 1,
                    "bit31_bit0": 1,
                    "combined": 1,
                    "final_result": 1,
                    "final_val": 1,
                    "output": 2,
                    "output_high": 1,
                    "result": 12,
                    "result1": 1,
                    "result3": 1,
                    "result_1": 1,
                    "result_high": 4,
                    "result_upper": 1,
                    "result_with_mask": 1,
                    "sign_extension": 1,
                    "var5": 1
                },
                "uVar4": {
                    "bit_shift1": 1,
                    "result4": 1,
                    "result_2": 1,
                    "shift": 1,
                    "shift_amount": 5,
                    "shift_amount1": 1,
                    "shift_amt1": 1,
                    "shifted": 3,
                    "shifted_bit": 1,
                    "shifted_count": 1,
                    "shifted_input": 8,
                    "shifted_input_value": 1,
                    "shifted_mask": 2,
                    "shifted_value": 2,
                    "temp": 1,
                    "temp2": 1
                },
                "uVar5": {
                    "double_input": 1,
                    "doubled_input": 1,
                    "input_times2": 1,
                    "result2": 1,
                    "shift_amount2": 1,
                    "shifted_input": 5,
                    "shifted_input2": 1,
                    "shifted_input_times2": 1,
                    "shifted_input_value2": 1,
                    "shifted_result": 1,
                    "temp": 9,
                    "temp1": 1,
                    "temp2": 2,
                    "temp_2": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "var7": 1
                },
                "uVar7": {
                    "bit_count": 1,
                    "bit_difference": 1,
                    "bit_shift2": 1,
                    "bit_value": 1,
                    "bits": 1,
                    "offset": 1,
                    "remainder": 1,
                    "shift": 2,
                    "shift_amount": 8,
                    "shift_amt3": 1,
                    "shift_count": 2,
                    "shifted_amount": 1,
                    "shifted_result": 1,
                    "subtraction_result": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_3": 1,
                    "temp_value3": 1,
                    "u_var7": 1,
                    "upper_bits": 1,
                    "var9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004940",
                "FUN_08003004",
                "FUN_080046d0",
                "FUN_08002638",
                "FUN_08001994",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_0800056c",
                "FUN_08004e30",
                "FUN_08003b98",
                "FUN_08002c18",
                "FUN_08002978"
            ],
            "code": "\nulonglong reverse_bits_and_shift_08008590(uint input,undefined4 param2,undefined4 param3,uint mask)\n\n{\n  uint bit31;\n  uint temp;\n  uint result;\n  uint shifted_input;\n  uint temp;\n  int count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_zero;\n  bool is_zero;\n  bool is_negative;\n  \n  temp = input << 1;\n  is_zero = temp == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)temp >> 3) >> 1;\n  result = bit31 | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    mask = temp & 0xff000000;\n    is_zero = mask == 0;\n  }\n  if (!is_zero) {\n    is_zero = mask == 0xff000000;\n  }\n  if (!is_zero) {\n    return CONCAT44(result,input) ^ 0x3800000000000000;\n  }\n  if ((temp & 0xffffff) == 0) {\n    return CONCAT44(result,input);\n  }\n  if (mask == 0xff000000) {\n    return CONCAT44(result,input) | 0x8000000000000;\n  }\n  temp = input;\n  temp = shifted_input;\n  if (shifted_input == 0) {\n    temp = 0;\n    temp = input;\n  }\n  count = LZCOUNT(temp);\n  if (shifted_input == 0) {\n    count = count + 0x20;\n  }\n  shift_amount = count - 0xb;\n  is_negative = SBORROW4(shift_amount,0x20);\n  shifted_input = count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_zero = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = SCARRY4(shifted_input,0xc);\n    count = count + -0x1f;\n    is_zero = count < 0;\n    is_zero = count == 0;\n    shifted_input = shift_amount;\n    if (!is_zero && is_zero == is_negative) {\n      temp = temp << (shift_amount & 0xff);\n      temp = temp >> (0xcU - count & 0xff);\n      goto continue_reverse;\n    }\n  }\n  if (is_zero || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  temp = temp << (shifted_input & 0xff);\n  if (is_zero || is_zero != is_negative) {\n    temp = temp | temp >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_zero != is_negative) {\n    temp = temp << (shifted_input & 0xff);\n  }\ncontinue_reverse:\n  if ((int)shift_amount < 0x381) {\n    return CONCAT44(temp + (0x380 - shift_amount) * 0x100000 | bit31,temp);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return CONCAT44(result,temp >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  count = shifted_input - 0x13;\n  if (count == 0 || count < 0 != SCARRY4(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return CONCAT44(bit31 | temp >> (shifted_input & 0xff),\n                    temp >> (shifted_input & 0xff) | temp << (0x20 - shifted_input & 0xff));\n  }\n  return CONCAT44(result,temp >> (0x20 - (0xcU - count) & 0xff) | temp << (0xcU - count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bits_and_shift_08008590",
            "entrypoint": "0x08008590",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008590": "reverse_bits_and_shift_08008590",
                "LAB_08008458": "continue_reverse",
                "bVar10": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "is_zero",
                "iVar6": "count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "mask",
                "uVar1": "bit31",
                "uVar2": "temp",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "temp",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008640": {
            "additional_data": {
                "FUN_08008640": {
                    "calculate": 2,
                    "calculate_and_update": 1,
                    "calculate_bitwise_operation": 1,
                    "calculate_floating_point": 1,
                    "calculate_improved_result": 9,
                    "calculate_improved_value": 4,
                    "calculate_modified_value": 3,
                    "calculate_operation": 1,
                    "calculate_result": 9
                },
                "bVar10": {
                    "b_var2": 1,
                    "bool2": 2,
                    "condition2": 3,
                    "flag2": 12,
                    "flag_2": 1,
                    "flag_var2": 1,
                    "is_carry": 1,
                    "is_condition2": 2,
                    "is_condition_met2": 1,
                    "is_negative": 5,
                    "is_true2": 1,
                    "temp_bool_2": 1
                },
                "bVar11": {
                    "b_var3": 1,
                    "bool3": 2,
                    "borrow": 1,
                    "condition3": 3,
                    "flag3": 12,
                    "flag_3": 1,
                    "flag_var3": 1,
                    "is_condition3": 2,
                    "is_condition_met3": 1,
                    "is_negative": 1,
                    "is_negative2": 1,
                    "is_negative_overflow": 1,
                    "is_same_sign": 1,
                    "is_true3": 1,
                    "overflow": 1,
                    "temp_bool_3": 1
                },
                "bVar9": {
                    "b_var1": 1,
                    "bool1": 2,
                    "condition1": 3,
                    "flag1": 12,
                    "flag_1": 1,
                    "flag_var1": 1,
                    "is_condition1": 2,
                    "is_condition_met1": 1,
                    "is_true1": 1,
                    "is_zero": 6,
                    "temp_bool_1": 1
                },
                "iVar5": {
                    "i_var5": 1,
                    "result": 1,
                    "result5": 2,
                    "sum": 3,
                    "temp3": 16,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_3": 1,
                    "temp_5": 1,
                    "temp_var3": 1,
                    "var3": 1
                },
                "lVar2": {
                    "product2": 1,
                    "result2": 16,
                    "result_2": 1,
                    "result_var2": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp2": 3,
                    "temp_2": 1,
                    "temp_result": 4
                },
                "param_1": {
                    "arg1": 1,
                    "input1": 18,
                    "input_1": 1,
                    "input_a": 1,
                    "input_param1": 3,
                    "input_param_1": 3,
                    "num1": 1,
                    "value1": 3
                },
                "param_2": {
                    "arg2": 1,
                    "input2": 18,
                    "input_2": 1,
                    "input_b": 1,
                    "input_param2": 3,
                    "input_param_2": 3,
                    "num2": 1,
                    "value2": 3
                },
                "param_3": {
                    "arg3": 1,
                    "input3": 18,
                    "input_3": 1,
                    "input_c": 1,
                    "input_param3": 3,
                    "input_param_3": 3,
                    "num3": 1,
                    "value3": 3
                },
                "param_4": {
                    "arg4": 1,
                    "input4": 18,
                    "input_4": 1,
                    "input_d": 1,
                    "input_param4": 3,
                    "input_param_4": 3,
                    "num4": 1,
                    "value4": 3
                },
                "uVar1": {
                    "product": 1,
                    "product1": 1,
                    "result": 3,
                    "result1": 16,
                    "result_1": 1,
                    "result_low": 2,
                    "result_lower": 1,
                    "result_upper": 1,
                    "result_var1": 1,
                    "temp1": 3,
                    "temp_1": 1
                },
                "uVar12": {
                    "combined_input": 7,
                    "combined_inputs": 2,
                    "combined_num": 1,
                    "concat_value": 1,
                    "concatenated": 1,
                    "concatenated_args": 1,
                    "concatenated_input": 2,
                    "concatenated_inputs": 1,
                    "concatenated_param2_param1": 1,
                    "concatenated_params": 1,
                    "concatenated_value": 2,
                    "original_parameters": 1,
                    "result": 3,
                    "temp10": 2,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_8": 1,
                    "temp_result": 1
                },
                "uVar3": {
                    "bit_shifted_param": 1,
                    "exponent": 1,
                    "result3": 2,
                    "result_high": 1,
                    "result_lower_shifted": 1,
                    "temp1": 17,
                    "temp2": 1,
                    "temp3": 3,
                    "temp_1": 1,
                    "temp_3": 1,
                    "temp_var1": 1,
                    "var1": 1
                },
                "uVar4": {
                    "arg2_shifted": 1,
                    "result4": 2,
                    "shifted_input": 1,
                    "temp2": 17,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_2": 1,
                    "temp_4": 1,
                    "temp_exponent": 1,
                    "temp_var2": 1,
                    "u_var4": 1,
                    "var2": 1
                },
                "uVar6": {
                    "result6": 2,
                    "temp": 1,
                    "temp3": 1,
                    "temp4": 16,
                    "temp5": 1,
                    "temp6": 3,
                    "temp_4": 1,
                    "temp_6": 1,
                    "temp_shifted_input": 1,
                    "temp_sum": 1,
                    "temp_var": 1,
                    "temp_var4": 1,
                    "var4": 1
                },
                "uVar7": {
                    "bit_shifted_temp": 1,
                    "mask": 1,
                    "max_value": 1,
                    "result": 1,
                    "result7": 1,
                    "result8": 1,
                    "temp5": 7,
                    "temp6": 9,
                    "temp7": 1,
                    "temp8": 3,
                    "temp_6": 1,
                    "temp_7": 1,
                    "temp_result_high": 1,
                    "temp_var6": 1,
                    "var6": 1
                },
                "uVar8": {
                    "result8": 1,
                    "result9": 1,
                    "result_upper_shifted": 1,
                    "temp6": 8,
                    "temp7": 9,
                    "temp8": 1,
                    "temp9": 3,
                    "temp_7": 1,
                    "temp_8": 1,
                    "temp_result": 1,
                    "temp_result_low": 1,
                    "temp_var7": 1,
                    "u_var8": 1,
                    "var7": 1
                },
                "unaff_r5": {
                    "arg4_shifted": 1,
                    "result7": 1,
                    "temp4": 1,
                    "temp5": 9,
                    "temp6": 1,
                    "temp7": 4,
                    "temp_5": 1,
                    "temp_num": 1,
                    "temp_var5": 1,
                    "unaff_r5": 1,
                    "var5": 1
                }
            },
            "called": [
                "FUN_0800881c"
            ],
            "calling": [
                "FUN_08004940",
                "FUN_08003004",
                "FUN_0800a5a0",
                "FUN_08009b24",
                "FUN_080046d0",
                "FUN_08002638",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_08001f00",
                "FUN_0800adf0",
                "FUN_0800a1bc",
                "FUN_0800b2e8",
                "FUN_080044e8",
                "FUN_0800056c",
                "FUN_08002c18",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "code": "\nulonglong calculate_improved_result_08008640(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  ulonglong result1;\n  longlong result2;\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input2,input1);\n  temp6 = 0x7ff;\n  temp2 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp2 == 0;\n  if (!flag1) {\n    temp5 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp5 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp2 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp5 == 0x7ff;\n  }\n  if (flag1) {\n    combined_input = calculate_bitwise_operation_0800881c();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  temp3 = temp2 + temp5;\n  temp2 = temp1 ^ input4;\n  temp1 = temp1 & ~(temp6 << 0x15);\n  input4 = input4 & ~(temp6 << 0x15);\n  flag1 = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!flag1) {\n    flag1 = (input3 | input4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input4 = input4 | 0x100000;\n  if (flag1) {\n    input3 = (uint)combined_input | input3;\n    input4 = (temp2 & 0x80000000 | temp1) ^ input4;\n    temp2 = temp6 >> 1;\n    flag3 = SBORROW4(temp3,temp2);\n    temp4 = temp3 - temp2;\n    flag1 = temp4 == 0;\n    temp1 = temp4;\n    if (!flag1 && (int)temp2 <= temp3) {\n      flag3 = SBORROW4(temp6,temp4);\n      temp1 = temp6 - temp4;\n      flag1 = temp6 == temp4;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      input4 = input4 | temp4 * 0x100000;\n    }\n    if (!flag1 && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input4,input3);\n    }\n    input4 = input4 | 0x100000;\n    temp6 = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    flag1 = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result1 = (combined_input & 0xffffffff) * (ulonglong)input3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input4 +\n             (ulonglong)temp1 * (ulonglong)input3 + (result1 >> 0x20);\n    temp7 = (uint)combined_input;\n    result2 = (ulonglong)temp1 * (ulonglong)input4 + (combined_input >> 0x20);\n    temp6 = (uint)result2;\n    temp1 = (uint)((ulonglong)result2 >> 0x20);\n    if ((int)result1 != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (temp3 + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      flag1 = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      result2 = CONCAT44(temp1 * 2 + (uint)(CARRY4(temp6,temp6) || CARRY4(temp6 * 2,(uint)flag1)),\n                       temp6 * 2 + (uint)flag1);\n    }\n    input4 = temp2 & 0x80000000 | (int)((ulonglong)result2 >> 0x20) << 0xb | (uint)result2 >> 0x15;\n    input3 = (uint)result2 << 0xb | temp7 >> 0x15;\n    temp6 = temp7 * 0x800;\n    flag2 = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    flag1 = temp1 == 0;\n    temp2 = temp1;\n    if (flag2 && !flag1) {\n      flag2 = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      flag1 = temp1 == 0x700;\n    }\n    if (!flag2 || flag1) {\n      flag1 = 0x7fffffff < temp6;\n      if (temp6 == 0x80000000) {\n        flag1 = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input4 + temp4 * 0x100000 + (uint)CARRY4(input3,(uint)flag1),input3 + flag1\n                     );\n    }\n  }\n  if (!flag1 && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag2 = SCARRY4(temp4,0x36);\n  flag1 = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || flag1 != flag2) {\n    input3 = 0;\n  }\n  if (flag3 || flag1 != flag2) {\n    input4 = input4 & 0x80000000;\n  }\n  if (flag3 || flag1 != flag2) {\n    return CONCAT44(input4,input3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input3 >> (temp1 & 0xff) | input4 << (0x20 - temp1 & 0xff);\n    temp2 = (input4 >> (temp1 & 0xff) & ~((input4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((temp6 | input3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input4,temp2) & 0x80000000ffffffff;\n  }\n  temp3 = temp2 - 0x14;\n  if (temp3 == 0 || temp3 < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input3 << (temp4 + 0x20 & 0xff);\n    temp1 = input3 >> (temp2 & 0xff) | input4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((temp6 | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input4 & 0x80000000) +\n                    ((input4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - temp3;\n  temp4 = input3 << (temp2 & 0xff);\n  temp2 = input3 >> (0x20 - temp2 & 0xff) | input4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((temp6 | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_improved_result_08008640",
            "entrypoint": "0x08008640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008640": "calculate_improved_result_08008640",
                "bVar10": "flag2",
                "bVar11": "flag3",
                "bVar9": "flag1",
                "iVar5": "temp3",
                "lVar2": "result2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "result1",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "temp6",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800881c": {
            "additional_data": {
                "FUN_0800881c": {
                    "bitwise_operation": 4,
                    "bitwise_shift_function": 1,
                    "calculate_bitwise": 1,
                    "calculate_bitwise_difference": 3,
                    "calculate_bitwise_operation": 1,
                    "calculate_bitwise_xor": 1,
                    "calculate_hash": 1,
                    "calculate_shifted_mask": 1,
                    "calculate_unsigned_product": 1,
                    "extract_bit_field": 1,
                    "extract_bit_pattern": 1,
                    "extract_bits": 1,
                    "extract_bits_and_combine": 1,
                    "reverse_binary": 1,
                    "reverse_bit_order": 1,
                    "reverse_bit_shift": 1,
                    "reverse_bits": 5,
                    "reverse_bitwise_operations": 1,
                    "reversed_bit_operations": 1,
                    "reversed_operations": 1
                },
                "bVar4": {
                    "check": 2,
                    "check_result": 1,
                    "condition": 2,
                    "condition1": 1,
                    "flag": 3,
                    "flag_1": 1,
                    "is_bit_zero": 1,
                    "is_zero": 20
                },
                "in_r12": {
                    "bit32_d": 1,
                    "bit4": 1,
                    "bit5": 4,
                    "bit_5": 1,
                    "bit_check5": 1,
                    "bit_check_5": 1,
                    "bit_field": 1,
                    "bit_mask": 2,
                    "constant": 2,
                    "constant1": 1,
                    "constant_1": 1,
                    "constant_value": 1,
                    "in_register12": 1,
                    "mask": 1,
                    "temp2": 2,
                    "temp5": 3,
                    "temp_2": 4,
                    "temp_5": 2,
                    "var_2": 1
                },
                "param_1": {
                    "input1": 12,
                    "input_1": 13,
                    "input_a": 2,
                    "input_value_1": 1,
                    "num1": 1,
                    "temp_1": 1,
                    "value1": 1
                },
                "param_2": {
                    "input2": 12,
                    "input_2": 13,
                    "input_b": 2,
                    "input_value_2": 1,
                    "num2": 1,
                    "temp_2": 1,
                    "value2": 1
                },
                "param_3": {
                    "input3": 12,
                    "input_3": 13,
                    "input_c": 2,
                    "input_value_3": 1,
                    "num3": 1,
                    "temp_4": 1,
                    "value3": 1
                },
                "param_4": {
                    "input4": 12,
                    "input_4": 13,
                    "input_d": 2,
                    "input_value_4": 1,
                    "num4": 1,
                    "temp_5": 1,
                    "value4": 1
                },
                "uVar1": {
                    "bit1": 8,
                    "bit32_a": 1,
                    "bit_1": 4,
                    "bit_check1": 1,
                    "bit_extraction_result_2": 1,
                    "bit_shift_1": 1,
                    "result_1": 1,
                    "result_2": 1,
                    "shift_count": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_1": 2,
                    "temp_3": 2,
                    "temp_5": 1,
                    "temp_bit": 1,
                    "updated_var1": 1
                },
                "uVar2": {
                    "bit2": 3,
                    "bit3": 5,
                    "bit_2": 2,
                    "bit_3": 2,
                    "bit_check3": 1,
                    "bit_extraction_result": 1,
                    "mask": 1,
                    "result_2": 1,
                    "shift_result": 1,
                    "shifted_input": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp_2": 3,
                    "temp_3": 3,
                    "temp_4": 1,
                    "temp_bit_2": 1,
                    "updated_var2": 1
                },
                "uVar3": {
                    "bit3": 2,
                    "bit4": 4,
                    "bit_3": 1,
                    "bit_4": 2,
                    "bit_check4": 1,
                    "combined_result": 1,
                    "result": 2,
                    "result1": 1,
                    "result_1": 2,
                    "temp": 1,
                    "temp4": 3,
                    "temp5": 1,
                    "temp_1": 1,
                    "temp_3": 2,
                    "temp_4": 2,
                    "temp_5": 1,
                    "temp_bit_3": 1,
                    "temp_input": 1,
                    "updated_bit": 1,
                    "updated_var3": 1
                },
                "uVar4": {
                    "result2": 1
                },
                "unaff_r4": {
                    "accumulator": 1,
                    "bit2": 5,
                    "bit32_b": 1,
                    "bit4": 1,
                    "bit5": 1,
                    "bit_2": 4,
                    "bit_check2": 1,
                    "bit_check_2": 1,
                    "bit_shift_2": 1,
                    "temp1": 3,
                    "temp2": 3,
                    "temp_1": 5,
                    "temp_2": 2,
                    "unaffected_r4": 1,
                    "var_1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008640"
            ],
            "code": "\nulonglong calculate_bitwise_operation_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit1;\n  uint temp_1;\n  uint bit3;\n  uint bit4;\n  uint temp_2;\n  bool is_zero;\n  \n  bit3 = temp_2 & input_4 >> 0x14;\n  if (temp_1 != temp_2 && bit3 != temp_2) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp_1 == 0) {\n      bit4 = input_2 & 0x80000000;\n      do {\n        bit1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit4 = input_2;\n  if (((!is_zero) && ((temp_1 != temp_2 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit3 != temp_2 || (input_1 = input_3, bit4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "calculate_bitwise_operation_0800881c",
            "entrypoint": "0x0800881c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800881c": "calculate_bitwise_operation_0800881c",
                "bVar4": "is_zero",
                "in_r12": "temp_2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "temp_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008894": {
            "additional_data": {
                "FUN_08008894": {
                    "calculate_double_precision": 2,
                    "calculate_double_precision_float": 1,
                    "calculate_double_precision_floating_point": 1,
                    "calculate_float": 3,
                    "calculate_float_from_uint": 1,
                    "calculate_floating_point": 12,
                    "calculate_floating_point_encoding": 1,
                    "calculate_floating_point_number": 1,
                    "calculate_floating_point_representation": 1,
                    "calculate_floating_point_value": 4
                },
                "bVar14": {
                    "bool_var1": 1,
                    "check": 1,
                    "check_flag": 1,
                    "condition": 1,
                    "condition1": 2,
                    "condition2": 1,
                    "condition_a": 1,
                    "flag1": 6,
                    "flag_1": 2,
                    "flag_5": 1,
                    "is_equal": 2,
                    "is_exponent_zero": 1,
                    "is_normal_or_denormal": 1,
                    "is_zero": 6,
                    "is_zero1": 1,
                    "is_zero_exponent": 1,
                    "is_zero_or_infinity1": 1,
                    "overflow1": 1
                },
                "bVar15": {
                    "bool_var2": 1,
                    "carry_bit": 1,
                    "check2": 1,
                    "condition2": 2,
                    "condition3": 1,
                    "condition_b": 1,
                    "equality_flag": 1,
                    "flag2": 6,
                    "flag_2": 2,
                    "flag_6": 1,
                    "is_equal": 2,
                    "is_exponent_equal": 1,
                    "is_less": 3,
                    "is_mantissa_zero": 1,
                    "is_negative": 1,
                    "is_smaller": 1,
                    "is_zero": 2,
                    "is_zero2": 1,
                    "is_zero_or_infinity2": 1,
                    "overflow2": 1
                },
                "bVar16": {
                    "bool_var3": 1,
                    "carry": 2,
                    "carry_bit": 1,
                    "check3": 1,
                    "condition3": 2,
                    "condition4": 1,
                    "condition_passed": 1,
                    "flag3": 6,
                    "flag_3": 2,
                    "flag_7": 1,
                    "is_exponent_overflow": 1,
                    "is_greater": 1,
                    "is_negative": 3,
                    "is_negative_exponent": 1,
                    "is_overflow": 1,
                    "is_overflow1": 1,
                    "overflow": 1,
                    "overflow3": 1,
                    "overflow_bit": 1,
                    "subtract_flag": 1,
                    "temp_flag": 1
                },
                "bVar17": {
                    "carry": 1,
                    "carry_bit": 1,
                    "flag_4": 1,
                    "is_bit_set": 1,
                    "is_overflow2": 1,
                    "is_zero_number": 1
                },
                "iVar8": {
                    "diff_exponent": 1,
                    "difference": 8,
                    "exponent_diff": 4,
                    "exponent_diff_sign": 1,
                    "exponent_difference": 4,
                    "exponent_difference_result": 1,
                    "result_exponent": 1,
                    "temp8": 7,
                    "temp_8": 3,
                    "temp_var8": 1
                },
                "param_1": {
                    "bitwise_or_param": 1,
                    "first_half_uint": 1,
                    "flags": 1,
                    "float1": 1,
                    "floating_param1": 1,
                    "input1": 5,
                    "input_a": 1,
                    "input_flags": 1,
                    "input_param": 2,
                    "input_param_1": 3,
                    "integer_part": 1,
                    "sign": 6,
                    "sign_and_exponent": 1,
                    "sign_bit": 1,
                    "sign_exponent": 1,
                    "value1": 4
                },
                "param_2": {
                    "exponent": 6,
                    "exponent_bits": 1,
                    "exponent_part": 1,
                    "float2": 1,
                    "floating_param2": 1,
                    "fractional_part": 1,
                    "input2": 5,
                    "input_b": 1,
                    "input_param1": 1,
                    "input_param_2": 3,
                    "input_significand": 1,
                    "input_value": 1,
                    "second_half_uint": 1,
                    "significand": 1,
                    "significand_high": 2,
                    "value2": 4
                },
                "param_3": {
                    "exponent": 1,
                    "exponent_part1": 1,
                    "float3": 1,
                    "float_param": 1,
                    "floating_param3": 1,
                    "input3": 5,
                    "input_c": 1,
                    "input_exponent": 1,
                    "input_param2": 1,
                    "input_param_3": 3,
                    "mantissa": 1,
                    "mantissa1": 1,
                    "mantissa_bits": 1,
                    "mantissa_high": 3,
                    "mantissa_part": 1,
                    "significand_high": 1,
                    "significand_low": 2,
                    "third_half_uint": 1,
                    "value3": 4
                },
                "param_4": {
                    "control_word": 1,
                    "exponent_part2": 1,
                    "float4": 1,
                    "float_value": 1,
                    "floating_param4": 1,
                    "fourth_half_uint": 1,
                    "input4": 5,
                    "input_checkerboard": 1,
                    "input_d": 1,
                    "input_param3": 1,
                    "input_param_4": 3,
                    "mantissa2": 1,
                    "mantissa_b": 1,
                    "mantissa_low": 3,
                    "other_exponent_bits": 1,
                    "previous": 1,
                    "sign_part": 1,
                    "significand_low": 1,
                    "significand_low_bits": 1,
                    "value4": 4
                },
                "uVar1": {
                    "bit_mask": 1,
                    "bit_mask1": 1,
                    "carry": 1,
                    "exponent1": 1,
                    "exponent_bits": 3,
                    "exponent_greater_than_half": 1,
                    "first_bit": 1,
                    "first_half_mask": 1,
                    "float5": 1,
                    "is_denormal": 1,
                    "loop_var1": 1,
                    "lower_part": 1,
                    "mask": 1,
                    "masked_bits": 1,
                    "normalized_mantissa": 1,
                    "sign_bit": 1,
                    "temp1": 8,
                    "temp_1": 3,
                    "temp_mantissa": 1,
                    "temp_var1": 1
                },
                "uVar10": {
                    "adjusted_mantissa_high_bits": 1,
                    "biased_other_exponent": 1,
                    "exponent2_shifted": 1,
                    "exponent_high_bits": 1,
                    "input_c_shifted": 1,
                    "mantissa1": 1,
                    "mask_b": 1,
                    "normalized_second_half": 1,
                    "result": 1,
                    "result1": 1,
                    "result_significand_low": 1,
                    "shifted_fractional_part": 1,
                    "sum3": 1,
                    "temp1": 1,
                    "temp10": 1,
                    "temp11": 6,
                    "temp2": 1,
                    "temp3": 1,
                    "temp9": 1,
                    "temp_11": 3,
                    "temp_exponent": 1,
                    "temp_var10": 1,
                    "temp_var6": 1,
                    "value1": 1
                },
                "uVar11": {
                    "adjusted_mantissa_low_bits": 1,
                    "fractional_part_result": 1,
                    "mantissa": 1,
                    "mantissa1": 1,
                    "mantissa2": 1,
                    "mantissa_high_bits": 1,
                    "normalized_mantissa": 1,
                    "normalized_number": 1,
                    "result": 1,
                    "result1": 1,
                    "result2": 1,
                    "result_fraction": 1,
                    "result_upper": 1,
                    "shifted_numerator": 1,
                    "sum4": 1,
                    "sum_bit": 1,
                    "temp10": 1,
                    "temp12": 6,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_12": 3,
                    "temp_var11": 1,
                    "value2": 1
                },
                "uVar12": {
                    "diff": 2,
                    "diff_fraction": 1,
                    "diff_mantissa": 1,
                    "difference": 1,
                    "difference_shifted": 2,
                    "exponent_diff_adjustment": 1,
                    "mantissa2": 1,
                    "mantissa_diff": 1,
                    "mantissa_difference": 1,
                    "mask": 1,
                    "result2": 1,
                    "shifted_mantissa1": 1,
                    "subtract_bit": 1,
                    "sum5": 1,
                    "temp11": 1,
                    "temp13": 6,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_13": 3,
                    "temp_diff": 1,
                    "temp_var12": 1,
                    "temp_var7": 1
                },
                "uVar13": {
                    "all_ones": 1,
                    "bit_mask": 2,
                    "carry": 1,
                    "comparison_flag": 1,
                    "comparison_result": 1,
                    "condition1": 1,
                    "exponent_mask": 3,
                    "flags": 1,
                    "is_special_value": 1,
                    "mantissa_product": 1,
                    "mantissa_sum": 1,
                    "mask": 2,
                    "max_bit": 1,
                    "temp12": 1,
                    "temp14": 6,
                    "temp6": 1,
                    "temp_14": 3,
                    "temp_var13": 1,
                    "temp_var8": 1,
                    "zero": 1
                },
                "uVar14": {
                    "sign_mask": 1
                },
                "uVar15": {
                    "result": 1
                },
                "uVar17": {
                    "bit_reversed_value": 1,
                    "combined_bits": 2,
                    "combined_value": 1,
                    "result": 1,
                    "reversed_bits": 14,
                    "reversed_value": 3,
                    "temp7": 1,
                    "temp_15": 1,
                    "temp_result": 1
                },
                "uVar18": {
                    "floating_point_bits": 1,
                    "normalized_exponent": 1,
                    "result_high": 1,
                    "reverse_bits_result": 1
                },
                "uVar19": {
                    "normalized_mantissa_sign": 1,
                    "result_low": 1
                },
                "uVar2": {
                    "bit_mask2": 1,
                    "exponent2": 1,
                    "exponent_bits": 1,
                    "exponent_difference": 1,
                    "exponent_equals_half": 1,
                    "float6": 1,
                    "is_inf_or_na_n": 1,
                    "loop_var2": 1,
                    "mantissa_high_bits": 1,
                    "mask": 2,
                    "second_bit": 1,
                    "second_half_mask": 1,
                    "shifted_bits": 1,
                    "shifted_mantissa2": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 8,
                    "temp_2": 3,
                    "temp_var2": 1,
                    "u_shifted": 1,
                    "upper_part": 1
                },
                "uVar20": {
                    "mask": 1
                },
                "uVar21": {
                    "shift": 1
                },
                "uVar22": {
                    "carry": 1
                },
                "uVar23": {
                    "temp_shift": 1
                },
                "uVar24": {
                    "temp_operand": 1
                },
                "uVar25": {
                    "temp_result": 1
                },
                "uVar26": {
                    "temp_compare": 1
                },
                "uVar3": {
                    "exponent1": 2,
                    "exponent3": 1,
                    "exponent_equals_zero": 1,
                    "exponent_mnemonic_value": 1,
                    "float7": 1,
                    "mantissa_low_bits": 1,
                    "mask": 1,
                    "rounded_bits": 1,
                    "shift": 1,
                    "shifted_exponent": 1,
                    "shifted_mantissa": 1,
                    "significand_high_bits": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 8,
                    "temp_3": 3,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "third_bit": 1,
                    "third_half_mask": 1,
                    "unaff_r5_bits": 1
                },
                "uVar4": {
                    "exponent2": 2,
                    "exponent4": 1,
                    "exponent_not_zero": 1,
                    "float8": 1,
                    "fourth_bit": 1,
                    "fourth_half_mask": 1,
                    "fractional_bits": 1,
                    "mask": 1,
                    "masked_mnemonic_value": 1,
                    "shifted_mantissa": 1,
                    "shifted_value": 1,
                    "significand_low_bits": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 8,
                    "temp_4": 3,
                    "temp_var2": 1,
                    "temp_var4": 1
                },
                "uVar5": {
                    "bit_shift1": 1,
                    "exponent_diff": 2,
                    "fifth_bit": 1,
                    "float9": 1,
                    "mantissa": 1,
                    "mask": 1,
                    "normalized_significand": 1,
                    "numerator_high": 1,
                    "reverse_bit": 1,
                    "shifted_bits": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 8,
                    "temp_5": 3,
                    "temp_exponent1": 1,
                    "temp_result": 1,
                    "temp_var3": 1,
                    "temp_var5": 1
                },
                "uVar6": {
                    "bit_shift2": 1,
                    "exponent": 1,
                    "float10": 1,
                    "fractional_bits_shifted": 1,
                    "is_zero_diff": 1,
                    "mantissa1": 1,
                    "mantissa_lsb": 1,
                    "mask": 1,
                    "numerator_low": 1,
                    "shift_amount": 1,
                    "shifted_significand": 1,
                    "sixth_bit": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 8,
                    "temp_6": 3,
                    "temp_exponent2": 1,
                    "temp_var4": 1,
                    "temp_var6": 1
                },
                "uVar7": {
                    "bit_mask": 1,
                    "bit_shift3": 1,
                    "bit_value": 1,
                    "exponent": 1,
                    "exponent_bits_mask": 1,
                    "exponent_value1": 1,
                    "flags_with_exponent": 1,
                    "float11": 1,
                    "mantissa2": 1,
                    "mask": 1,
                    "new_exponent": 1,
                    "result": 1,
                    "result1": 1,
                    "result_lower": 1,
                    "result_sign": 1,
                    "result_sign_bit": 1,
                    "result_sign_bits": 1,
                    "rounded_exponent": 1,
                    "temp7": 8,
                    "temp_7": 3,
                    "temp_var5": 1,
                    "temp_var7": 1
                },
                "uVar9": {
                    "adjusted_exponent": 1,
                    "biased_exponent": 1,
                    "carry": 1,
                    "exponent": 1,
                    "exponent1": 1,
                    "exponent_difference": 1,
                    "exponent_difference_plus_one": 1,
                    "exponent_sum": 2,
                    "result_exponent": 1,
                    "result_significand_high": 1,
                    "rounded_exponent_diff": 1,
                    "shifted": 1,
                    "shifted_diff": 1,
                    "shifted_exponent_sum": 1,
                    "shifted_mantissa": 1,
                    "sum": 1,
                    "sum1": 1,
                    "temp1": 2,
                    "temp8": 1,
                    "temp9": 6,
                    "temp_9": 3,
                    "temp_var9": 1
                },
                "unaff_r5": {
                    "bit_20": 1,
                    "exponent2": 1,
                    "exponent_b": 1,
                    "exponent_diff_abs": 1,
                    "exponent_value2": 1,
                    "new_mantissa": 1,
                    "other_exponent": 2,
                    "sum2": 1,
                    "temp10": 6,
                    "temp2": 1,
                    "temp_10": 3,
                    "unaff_r5": 1,
                    "unaffected_exponent": 1
                }
            },
            "called": [
                "FUN_08008a02"
            ],
            "calling": [
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_0800a1bc",
                "FUN_080005b4",
                "FUN_080098d0",
                "FUN_08009990"
            ],
            "code": "\nulonglong calculate_floating_point_value_08008894(undefined4 sign,uint exponent,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int difference;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  undefined8 reversed_bits;\n  \n  reversed_bits = CONCAT44(exponent,sign);\n  temp14 = 0x7ff;\n  temp7 = exponent >> 0x14 & 0x7ff;\n  is_zero = temp7 == 0;\n  if (!is_zero) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    is_zero = temp10 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp7 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp10 == 0x7ff;\n  }\n  if (is_zero) {\n    reversed_bits = reverse_bits_08008a02();\n  }\n  temp9 = (uint)((ulonglong)reversed_bits >> 0x20);\n  temp12 = (uint)reversed_bits;\n  difference = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(difference,temp14 >> 1);\n    temp9 = difference + (temp14 >> 1);\n    is_zero = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && is_zero == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      is_zero = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && is_zero == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && is_zero == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    is_zero = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    is_zero = temp3 <= temp11;\n    if (temp11 == temp3) {\n      is_zero = temp14 <= temp12;\n    }\n    difference = difference + (uint)is_zero;\n    temp9 = difference + 0x3fd;\n    if (is_zero == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      is_zero = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)is_zero) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!is_zero;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || is_zero) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      is_zero = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || is_zero) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || is_zero) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      is_zero = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || is_zero) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || is_zero) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = difference + 0x300;\n    is_zero = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !is_zero) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = difference - 0x400;\n      is_zero = temp4 == 0x700;\n    }\n    if (!flag3 || is_zero) {\n      is_zero = temp6 <= temp11;\n      if (temp11 == temp6) {\n        is_zero = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        is_zero = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)is_zero),temp12 + is_zero);\n    }\n  }\n  if (!is_zero && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  is_zero = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || is_zero != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || is_zero != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || is_zero != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  difference = temp3 - 0x14;\n  if (difference != 0 && difference < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - difference;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_floating_point_value_08008894",
            "entrypoint": "0x08008894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008894": "calculate_floating_point_value_08008894",
                "bVar14": "is_zero",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "difference",
                "param_1": "sign",
                "param_2": "exponent",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "reversed_bits",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a02": {
            "additional_data": {
                "FUN_08008a02": {
                    "calculate_bitwise_value": 1,
                    "calculate_double": 3,
                    "calculate_double_bitwise": 1,
                    "calculate_double_precision": 1,
                    "calculate_double_precision_number": 1,
                    "calculate_double_value": 1,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_bits": 1,
                    "calculate_floating_point_number": 1,
                    "calculate_value_with_conditions": 1,
                    "convert_float_bits_to_long_long": 1,
                    "convert_float_to_binary": 1,
                    "convert_to_double": 1,
                    "convert_to_ieee754": 1,
                    "decode_and_convert": 1,
                    "extract_bits_from_input": 1,
                    "extract_float_bits": 1,
                    "extracted_binary_function": 1,
                    "extracted_code": 1,
                    "reverse_and_convert": 1,
                    "reverse_bits": 6
                },
                "bVar4": {
                    "boolean_var": 1,
                    "flag": 2,
                    "is_zero": 26,
                    "temp_var6": 1
                },
                "in_r12": {
                    "bit4": 1,
                    "bit5": 5,
                    "bit8": 1,
                    "bit_5": 1,
                    "condition2": 1,
                    "constant": 3,
                    "constant1": 1,
                    "constant2": 1,
                    "constant_mask": 1,
                    "mask": 2,
                    "mask3": 1,
                    "r12": 1,
                    "register12": 1,
                    "register_b": 1,
                    "temp2": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_var5": 1,
                    "temp_var_4": 1,
                    "threshold": 1,
                    "var3": 1
                },
                "param_1": {
                    "dividend": 1,
                    "first_parameter": 1,
                    "input1": 15,
                    "input_1": 4,
                    "input_a": 2,
                    "input_float_a": 1,
                    "num1": 2,
                    "number": 1,
                    "number1": 2,
                    "value1": 2
                },
                "param_2": {
                    "divisor": 1,
                    "exponent": 1,
                    "input2": 15,
                    "input_2": 4,
                    "input_b": 2,
                    "input_float_b": 1,
                    "num2": 2,
                    "number2": 2,
                    "second_parameter": 1,
                    "value2": 2
                },
                "param_3": {
                    "fraction": 1,
                    "input3": 15,
                    "input_3": 4,
                    "input_c": 2,
                    "input_float_c": 1,
                    "num3": 2,
                    "number3": 2,
                    "remainder": 1,
                    "third_parameter": 1,
                    "value3": 2
                },
                "param_4": {
                    "fourth_parameter": 1,
                    "input4": 15,
                    "input_4": 4,
                    "input_d": 2,
                    "input_float_d": 1,
                    "num4": 2,
                    "number4": 2,
                    "quotient": 1,
                    "sign": 1,
                    "value4": 2
                },
                "uVar1": {
                    "bit1": 15,
                    "bit_1": 2,
                    "bit_a": 3,
                    "bit_mask1": 2,
                    "mask1": 1,
                    "temp1": 2,
                    "temp_1": 1,
                    "temp_var1": 1,
                    "tmp1": 1,
                    "var1": 1
                },
                "uVar2": {
                    "bit2": 2,
                    "bit3": 7,
                    "bit5": 1,
                    "bit_3": 1,
                    "bit_b": 2,
                    "bit_c": 1,
                    "bit_mask2": 2,
                    "extracted_bits1": 1,
                    "masked_input": 1,
                    "masked_input4": 1,
                    "masked_r12": 1,
                    "shifted_mask": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_2": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "var1": 1,
                    "var2": 1
                },
                "uVar3": {
                    "bit3": 2,
                    "bit32_input2": 1,
                    "bit4": 7,
                    "bit6": 1,
                    "bit_4": 1,
                    "bit_c": 1,
                    "bit_d": 1,
                    "extracted_bits2": 1,
                    "output1": 1,
                    "result": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 2,
                    "temp_3": 1,
                    "temp_result": 1,
                    "temp_var4": 1,
                    "temp_var_3": 1,
                    "tmp2": 1,
                    "updated_input2": 1,
                    "var2": 1,
                    "var3": 1
                },
                "unaff_r4": {
                    "bit2": 8,
                    "bit4": 1,
                    "bit_2": 1,
                    "bit_b": 1,
                    "condition1": 1,
                    "constant": 2,
                    "constant_value": 1,
                    "input4_copy": 1,
                    "input5": 1,
                    "mask": 1,
                    "mask2": 1,
                    "register_a": 1,
                    "temp1": 3,
                    "temp2": 2,
                    "temp_1": 1,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "unaff_r4": 1,
                    "unaffected_register4": 1,
                    "unused_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008894"
            ],
            "code": "\nulonglong reverse_bits_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint bit2;\n  uint bit3;\n  uint bit4;\n  uint bit5;\n  bool is_zero;\n  \n  bit3 = bit5 & input4 >> 0x14;\n  bit4 = input2;\n  if (bit2 != bit5 || bit3 != bit5) {\n    if (bit2 == bit5) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, bit4 = input4, bit3 != bit5)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit3 == bit5) {\n      input1 = input3;\n      bit4 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (bit2 == 0) {\n          bit4 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | bit4;\n          if (bit3 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          bit4 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(bit4 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(bit4,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_08008a02",
            "entrypoint": "0x08008a02",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a02": "reverse_bits_08008a02",
                "bVar4": "is_zero",
                "in_r12": "bit5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "bit2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a74": {
            "additional_data": {
                "0x15": {
                    "shift_bits": 1,
                    "shift_value": 1
                },
                "0xc": {
                    "shift_bits_2": 1,
                    "xor_shift_amount": 1
                },
                "FUN_08008a74": {
                    "check_conditions": 1,
                    "check_conditions_and_return_flag": 1,
                    "check_data_equality": 1,
                    "check_equality": 7,
                    "check_equality_and_comparison": 1,
                    "check_equality_and_range": 1,
                    "check_input_parameters": 1,
                    "check_inputs": 1,
                    "check_inputs_equal": 1,
                    "check_param_equality": 1,
                    "check_parameters": 4,
                    "check_parameters_match": 1,
                    "check_params": 1,
                    "check_params_equality": 1,
                    "check_values": 1,
                    "compare_parameters": 5,
                    "validate_parameters": 1,
                    "verify_equal_parameters": 1
                },
                "bVar2": {
                    "all_zero": 1,
                    "are_inputs_zero": 2,
                    "are_parameters_equal": 1,
                    "are_params_zero": 1,
                    "is_all_zero": 2,
                    "is_equal": 3,
                    "is_input1_or_input2_zero": 1,
                    "is_zero": 15,
                    "is_zero1": 1,
                    "is_zero_1": 1,
                    "is_zero_check": 1,
                    "is_zero_variables": 1,
                    "match1": 1
                },
                "bVar3": {
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_greater": 2,
                    "is_input3_or_input4_less_than_or_equal": 1,
                    "is_less": 2,
                    "is_less_than_check": 1,
                    "is_less_than_or_equal": 1,
                    "is_lower": 1,
                    "is_negative": 12,
                    "is_output_negative": 1,
                    "is_param4_less_than_param2": 1,
                    "is_parameter_less_or_equal": 1,
                    "is_range_valid": 1,
                    "is_result_negative": 1,
                    "is_smaller": 1,
                    "is_zero2": 1,
                    "is_zero_2": 1,
                    "match2": 1
                },
                "param_1": {
                    "a": 3,
                    "data1": 1,
                    "first_param": 2,
                    "first_parameter": 1,
                    "first_variable": 1,
                    "input1": 3,
                    "input_1": 4,
                    "shifted_param1": 1,
                    "value1": 12,
                    "value_1": 3
                },
                "param_2": {
                    "b": 3,
                    "data2": 1,
                    "input2": 3,
                    "input_2": 4,
                    "second_param": 2,
                    "second_parameter": 1,
                    "second_variable": 1,
                    "shifted_param2": 1,
                    "value2": 12,
                    "value_2": 3
                },
                "param_3": {
                    "c": 3,
                    "data3": 1,
                    "input3": 3,
                    "input_3": 4,
                    "shifted_param3": 1,
                    "third_param": 2,
                    "third_parameter": 1,
                    "third_variable": 1,
                    "value3": 12,
                    "value_3": 3
                },
                "param_4": {
                    "d": 3,
                    "data4": 1,
                    "fourth_param": 2,
                    "fourth_parameter": 1,
                    "fourth_variable": 1,
                    "input4": 3,
                    "input_4": 4,
                    "shifted_param4": 1,
                    "value4": 12,
                    "value_4": 3
                },
                "return": {
                    "result": 1,
                    "return_value": 1
                },
                "return_value": {
                    "result": 1
                },
                "uVar1": {
                    "result": 21,
                    "temp": 1,
                    "temp_result": 1,
                    "temp_var1": 1,
                    "values_xor": 1,
                    "xor_result": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_08008b00"
            ],
            "code": "\nuint check_param_equality_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_param_equality_08008a74",
            "entrypoint": "0x08008a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a74": "check_param_equality_08008a74",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "additional_data": {
                "FUN_08008af0": {
                    "check_and_return_equality": 1,
                    "check_and_return_param_equality": 3,
                    "check_and_return_parameters_equality": 1,
                    "check_and_return_params": 3,
                    "check_param_and_return": 9,
                    "check_param_equality": 1,
                    "check_param_equality_and_return": 8,
                    "check_parameter_equality": 2,
                    "check_parameters_and_return": 3
                },
                "param_1": {
                    "arg1": 3,
                    "check_param1": 1,
                    "first_param": 1,
                    "input_1": 8,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "param1": 5,
                    "param_1": 5,
                    "param_a": 2,
                    "param_first": 1,
                    "parameter_1": 3
                },
                "param_2": {
                    "arg2": 3,
                    "check_param2": 1,
                    "input_2": 8,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "param2": 5,
                    "param_2": 5,
                    "param_b": 2,
                    "param_second": 1,
                    "parameter_2": 3,
                    "second_param": 1
                },
                "param_3": {
                    "arg3": 2,
                    "comparison_param1": 1,
                    "input_param_1": 1,
                    "input_param_3": 1,
                    "param1": 1,
                    "param3": 6,
                    "param_1": 1,
                    "param_3": 7,
                    "param_a": 1,
                    "param_c": 2,
                    "param_third": 1,
                    "parameter_1": 1,
                    "parameter_3": 3,
                    "third_param": 1,
                    "value_1": 2
                },
                "param_4": {
                    "arg4": 2,
                    "comparison_param2": 1,
                    "fourth_param": 1,
                    "input_param_2": 1,
                    "input_param_4": 1,
                    "param2": 1,
                    "param4": 6,
                    "param_2": 1,
                    "param_4": 7,
                    "param_b": 1,
                    "param_d": 2,
                    "param_fourth": 1,
                    "parameter_2": 1,
                    "parameter_4": 3,
                    "value_2": 2
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "code": "\nvoid check_and_return_param_equality_08008af0(undefined4 input_1,undefined4 input_2,undefined4 param_3,undefined4 param_4)\n\n{\n  check_param_equality_and_return_08008b00(param_3,param_4,input_1,input_2);\n  return;\n}\n\n",
            "current_name": "check_and_return_param_equality_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af0": "check_and_return_param_equality_08008af0",
                "param_1": "input_1",
                "param_2": "input_2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b00": {
            "additional_data": {
                "FUN_08008b00": {
                    "check_and_return": 1,
                    "check_and_return_param": 8,
                    "check_and_return_value": 2,
                    "check_equality_and_return": 1,
                    "check_param_and_return": 10,
                    "check_param_equality": 1,
                    "check_param_equality_and_return": 1,
                    "validate_and_return_param": 1,
                    "validate_param": 3,
                    "verify_and_return_param": 2,
                    "verify_param_and_return": 1
                },
                "check_param_equality_08008a74": {
                    "check_param_equality": 3,
                    "check_parameter_equality": 2,
                    "verify_param_equality": 2
                },
                "param_1": {
                    "data": 1,
                    "input": 2,
                    "input_param": 25,
                    "param": 2,
                    "value": 1
                }
            },
            "called": [
                "FUN_08008a74"
            ],
            "calling": [
                "FUN_08008b24",
                "FUN_08008af0",
                "FUN_08008b10"
            ],
            "code": "\nundefined4 check_param_equality_and_return_08008b00(undefined4 input_param)\n\n{\n  check_param_equality_08008a74();\n  return input_param;\n}\n\n",
            "current_name": "check_param_equality_and_return_08008b00",
            "entrypoint": "0x08008b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b00": "check_param_equality_and_return_08008b00",
                "check_param_equality_08008a74": "check_param_equality",
                "param_1": "input_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b10": {
            "additional_data": {
                "FUN_08008b10": {
                    "check_and_return_param_equality": 2,
                    "check_equality_and_return": 1,
                    "check_if_param_not_null": 1,
                    "check_param_and_return": 7,
                    "check_param_and_return_bool": 2,
                    "check_param_and_return_result": 1,
                    "check_param_equality_and_return": 11,
                    "check_parameter_equality_and_return": 2,
                    "is_in_zr_not_null": 1,
                    "is_param_not_equal_to_null": 1,
                    "is_param_not_equal_to_zero": 2
                },
                "check_param_equality_and_return_08008b00": {
                    "check_param_equality_and_return": 1
                },
                "in_ZR": {
                    "input_char": 8,
                    "input_character": 11,
                    "input_param": 1,
                    "is_in_zr": 1,
                    "is_not_null": 2,
                    "is_not_zero": 3,
                    "is_param_equal_to_zero": 1,
                    "param_eq_result": 1,
                    "param_value": 2,
                    "result": 1
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_0800a5a0",
                "FUN_08009d78"
            ],
            "code": "\nbool check_and_return_param_equality_08008b10(void)\n\n{\n  char input_character;\n  \n  check_param_equality_and_return();\n  return input_character != '\\0';\n}\n\n",
            "current_name": "check_and_return_param_equality_08008b10",
            "entrypoint": "0x08008b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b10": "check_and_return_param_equality_08008b10",
                "check_param_equality_and_return_08008b00": "check_param_equality_and_return",
                "in_ZR": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b24": {
            "additional_data": {
                "FUN_08008b24": {
                    "check_end_of_string": 1,
                    "check_if_end_of_string": 1,
                    "check_if_input_empty": 1,
                    "check_if_input_is_empty": 3,
                    "check_if_input_is_null": 2,
                    "check_if_null_terminated": 1,
                    "check_if_null_terminator": 1,
                    "check_if_param_equal_null": 1,
                    "check_if_param_is_null": 1,
                    "check_if_string_empty": 6,
                    "check_if_string_is_empty": 3,
                    "check_if_string_terminated": 2,
                    "check_input": 1,
                    "check_input_emptiness": 1,
                    "check_null_termination": 1,
                    "is_character_null": 1,
                    "is_end_of_string": 2,
                    "is_final_character_null": 1,
                    "is_null_terminator": 1
                },
                "check_param_equality_and_return_08008b00": {
                    "check_parameter_equality_and_return": 1
                },
                "in_CY": {
                    "character": 2,
                    "current_character": 1,
                    "input_char": 6,
                    "input_character": 22
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "code": "\nbool check_if_string_is_empty_08008b24(void)\n\n{\n  char input_character;\n  \n  check_parameter_equality_and_return();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_string_is_empty_08008b24",
            "entrypoint": "0x08008b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b24": "check_if_string_is_empty_08008b24",
                "check_param_equality_and_return_08008b00": "check_parameter_equality_and_return",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "additional_data": {
                "FUN_08008b4c": {
                    "check_and_return_equality": 2,
                    "check_and_return_in_zr_if_in_cy_false": 1,
                    "check_and_return_param_equality": 10,
                    "check_and_return_result": 1,
                    "check_equality": 1,
                    "check_equality_and_return": 1,
                    "check_equality_with_flags": 1,
                    "check_for_equality": 2,
                    "check_for_equality_and_return": 1,
                    "check_param_equality": 7,
                    "check_result": 1,
                    "check_return_equality": 1,
                    "check_return_param_equality": 2
                },
                "bool": {
                    "boolean": 1
                },
                "check_and_return_param_equality_08008af0": {
                    "check_and_return_equality": 1
                },
                "in_CY": {
                    "bool1": 1,
                    "carry": 1,
                    "carry_flag": 14,
                    "carry_result": 1,
                    "flag_carry_result": 2,
                    "is_carry": 7,
                    "is_carry_flag": 1,
                    "is_carry_set": 1,
                    "is_cy_zero": 1,
                    "param_cy": 1,
                    "parameter_not_equal_zero": 1
                },
                "in_ZR": {
                    "bool2": 1,
                    "flag_zero_result": 2,
                    "is_zero": 5,
                    "is_zero_register": 1,
                    "is_zero_result": 1,
                    "is_zero_return": 2,
                    "is_zr_zero": 1,
                    "param_zr": 1,
                    "parameter_equal_zero": 1,
                    "zero_flag": 11,
                    "zero_result": 5
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nboolean check_and_return_param_equality_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  check_and_return_equality();\n  return !(boolean)carry_flag || (boolean)zero_flag;\n}\n\n",
            "current_name": "check_and_return_param_equality_08008b4c",
            "entrypoint": "0x08008b4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b4c": "check_and_return_param_equality_08008b4c",
                "bool": "boolean",
                "check_and_return_param_equality_08008af0": "check_and_return_equality",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b60": {
            "additional_data": {
                "FUN_08008b60": {
                    "check_and_return_param_equality": 1,
                    "check_for_null_termination": 1,
                    "check_if_end_of_string_reached": 1,
                    "check_if_input_is_empty": 2,
                    "check_if_null_terminated": 1,
                    "check_if_null_termination": 1,
                    "check_if_param_is_null": 1,
                    "check_if_string_empty": 5,
                    "check_if_string_is_empty": 3,
                    "check_if_string_terminated_by_null": 1,
                    "check_null_termination": 1,
                    "check_param_equality": 1,
                    "check_value_equals_null": 1,
                    "is_end_of_input": 2,
                    "is_end_of_string": 1,
                    "is_input_empty": 3,
                    "is_input_null_terminated": 1,
                    "is_null_terminated_string": 1,
                    "is_null_terminator_encountered": 1,
                    "is_string_empty": 2
                },
                "in_CY": {
                    "char_to_check": 1,
                    "current_character": 2,
                    "first_character": 1,
                    "input_char": 9,
                    "input_character": 17,
                    "input_string": 1
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800af78",
                "FUN_08003004",
                "FUN_08009318",
                "FUN_080094c0"
            ],
            "code": "\nbool check_if_string_is_empty_08008b60(void)\n\n{\n  char input_character;\n  \n  check_and_return_param_equality_08008af0();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_string_is_empty_08008b60",
            "entrypoint": "0x08008b60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b60": "check_if_string_is_empty_08008b60",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b74": {
            "additional_data": {
                "FUN_08008b74": {
                    "check_conditions": 4,
                    "check_input_validity": 1,
                    "check_inputs": 1,
                    "check_param_combination": 1,
                    "check_parameters": 7,
                    "check_params": 8,
                    "check_params_valid": 2,
                    "check_params_validity": 1,
                    "is_input_valid": 1,
                    "is_valid_combination": 1,
                    "is_valid_input": 4
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 8,
                    "input_1": 4,
                    "input_param_1": 1,
                    "input_value_1": 2,
                    "value1": 14,
                    "value_1": 1
                },
                "param_2": {
                    "input2": 8,
                    "input_2": 3,
                    "input_param_3": 1,
                    "input_value_2": 1,
                    "second_param": 1,
                    "shifted_input_2": 1,
                    "shifted_value1": 1,
                    "shifted_value_1": 1,
                    "value2": 13,
                    "value_2": 1
                },
                "param_3": {
                    "input3": 8,
                    "input_3": 4,
                    "input_param_2": 1,
                    "input_value_2": 1,
                    "input_value_3": 1,
                    "third_param": 1,
                    "value2": 1,
                    "value3": 13,
                    "value_3": 1
                },
                "param_4": {
                    "fourth_param": 1,
                    "input4": 8,
                    "input_4": 3,
                    "input_param_4": 1,
                    "input_value_4": 1,
                    "shifted_input_4": 1,
                    "shifted_value2": 1,
                    "shifted_value_2": 1,
                    "value4": 13,
                    "value_4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0"
            ],
            "code": "\nundefined4 check_params_valid_08008b74(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_params_valid_08008b74",
            "entrypoint": "0x08008b74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b74": "check_params_valid_08008b74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "additional_data": {
                "FUN_08008ba0": {
                    "apply_arithmetic_operations": 1,
                    "calculate_dividend": 1,
                    "calculate_parameter_value": 1,
                    "calculate_result": 3,
                    "calculate_unsigned_division": 2,
                    "calculate_unsigned_value": 1,
                    "calculate_value": 3,
                    "convert_to_sign_magnitude": 1,
                    "convert_to_signed_integer": 1,
                    "convert_to_twos_complement": 1,
                    "convert_unsigned_to_signed": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_bitwise_calculation": 1,
                    "perform_operation": 1,
                    "process_unsigned": 1,
                    "reverse_and_saturate": 1,
                    "reverse_arithmetic": 1,
                    "reverse_bits": 3,
                    "reverse_bitwise_calculation": 1,
                    "reverse_calculation": 1,
                    "reverse_integer": 2
                },
                "iVar2": {
                    "adjusted_divisor": 1,
                    "calculated_value": 2,
                    "calculated_var": 1,
                    "calculation": 1,
                    "modified_input_value": 1,
                    "modified_parameter2": 1,
                    "modified_shift_amount": 1,
                    "multiplied_value": 3,
                    "offset": 7,
                    "product": 1,
                    "result2": 1,
                    "scaled_divisor": 1,
                    "shifted_result": 1,
                    "shifted_value_times2": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var2": 2,
                    "temp_variable1": 1
                },
                "param_1": {
                    "dividend": 3,
                    "input1": 9,
                    "input_1": 1,
                    "input_bitstream": 1,
                    "input_parameter1": 1,
                    "input_value": 7,
                    "input_value1": 5,
                    "input_value_1": 2,
                    "unsigned_number1": 1,
                    "value": 1
                },
                "param_2": {
                    "divisor": 3,
                    "input2": 8,
                    "input_2": 1,
                    "input_parameter2": 1,
                    "input_value2": 4,
                    "input_value_2": 2,
                    "masked_param2": 1,
                    "modified_bitstream": 1,
                    "modified_unsigned_number2": 1,
                    "multiplier": 3,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_value": 3,
                    "temp17": 1
                },
                "return": {
                    "reversed_value": 1
                },
                "uVar1": {
                    "final_result": 1,
                    "new_value": 1,
                    "quotient": 2,
                    "result": 12,
                    "result1": 1,
                    "shift_amount": 1,
                    "shifted_calc": 1,
                    "shifted_value": 6,
                    "shifted_value11": 1,
                    "temp15": 1,
                    "temp_var1": 2,
                    "unsigned_var1": 1,
                    "value_shifted": 1
                },
                "uVar3": {
                    "adjusted_shift_amount": 1,
                    "adjusted_value": 1,
                    "calculated_value": 1,
                    "computed_value": 1,
                    "condition_result": 1,
                    "count": 1,
                    "inverse_shift": 1,
                    "mask": 2,
                    "modified_length": 1,
                    "new_shifted_value": 1,
                    "offset_value": 2,
                    "result": 1,
                    "result3": 1,
                    "shift_amount": 5,
                    "shift_factor": 1,
                    "shifted_negative_value": 1,
                    "shifted_offset": 1,
                    "shifted_value2": 1,
                    "shifted_value_times2_adjusted": 1,
                    "temp16": 1,
                    "temp_value": 2,
                    "temp_var3": 2,
                    "unsigned_var3": 1
                },
                "uVar4": {
                    "result": 2,
                    "result4": 1,
                    "shifted_value": 1,
                    "temp_var4": 1
                },
                "uVar5": {
                    "normalized_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003004",
                "FUN_0800adf0",
                "FUN_080005b4",
                "FUN_0800a5a0",
                "FUN_08002c18",
                "FUN_08009d78",
                "FUN_080095b8",
                "FUN_0800a348"
            ],
            "code": "\nuint calculate_parameter_value_08008ba0(uint input1,uint input2)\n\n{\n  uint result;\n  int offset;\n  uint shift_amount;\n  \n  offset = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < offset) {\n      reversed_value 0;\n    }\n    result = offset >> 0x15;\n    shift_amount = -result - 0x3e1;\n    if (result < 0xfffffc20 && shift_amount != 0) {\n      result = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        result = -result;\n      }\n      reversed_value result;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    reversed_value 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  reversed_value input2;\n}\n\n",
            "current_name": "calculate_parameter_value_08008ba0",
            "entrypoint": "0x08008ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ba0": "calculate_parameter_value_08008ba0",
                "iVar2": "offset",
                "param_1": "input1",
                "param_2": "input2",
                "return": "reversed_value",
                "uVar1": "result",
                "uVar3": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "additional_data": {
                "0x15": {
                    "shift_value": 1
                },
                "0x200000": {
                    "hash_constant": 1
                },
                "0x3e1": {
                    "hash_offset": 1
                },
                "0x80000000": {
                    "sign_bit": 1
                },
                "0xb": {
                    "left_shift_amount": 1
                },
                "0xc": {
                    "second_left_shift_amount": 1
                },
                "0xffe00000": {
                    "min_hash_range": 1
                },
                "FUN_08008bf0": {
                    "calculate_hash": 1,
                    "calculate_shift": 1,
                    "calculate_shift_amount": 1,
                    "calculate_shifted_value": 13,
                    "check_overflow": 2,
                    "compute_reverse": 1,
                    "convert_to_positive_integer": 1,
                    "convert_to_unsigned_integer": 1,
                    "divide_with_shift": 1,
                    "extract_bit_range": 1,
                    "get_shifted_value": 1,
                    "perform_calculation": 2,
                    "process_data": 1,
                    "process_unsigned_numbers": 1,
                    "validate_parameters": 1
                },
                "iVar1": {
                    "hash_intermediate": 1,
                    "intermediate_value1": 1,
                    "multiplied_input": 1,
                    "scaled_value": 1,
                    "shifted_divisor": 1,
                    "shifted_result": 1,
                    "shifted_value": 9,
                    "shifted_value_plus": 1,
                    "temp1": 1,
                    "temp_1": 1,
                    "temp_value": 2,
                    "temp_value_1": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "temp_var_1": 1,
                    "temp_variable": 3,
                    "temporary1": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "data": 1,
                    "dividend": 1,
                    "input": 1,
                    "input1": 3,
                    "input_1": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_param1": 1,
                    "input_value": 12,
                    "input_value1": 4,
                    "input_value_1": 1,
                    "value": 1,
                    "value1": 1,
                    "value_1": 2
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_position": 1,
                    "bit_shift": 1,
                    "divisor": 1,
                    "input2": 3,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_value2": 4,
                    "input_value_2": 1,
                    "multiplier": 1,
                    "salt": 1,
                    "shift_amount": 6,
                    "shift_amt": 1,
                    "shift_count": 1,
                    "shift_param": 1,
                    "shift_value": 1,
                    "value": 2,
                    "value2": 1,
                    "value_2": 2
                },
                "uVar2": {
                    "extracted_bits": 1,
                    "intermediate_value2": 1,
                    "result": 3,
                    "shift_amount": 6,
                    "shift_amount_adjustment": 1,
                    "shift_amount_result": 1,
                    "shift_count": 3,
                    "shift_value": 2,
                    "shifted_hash": 1,
                    "shifted_value": 4,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_value_2": 1,
                    "temp_var2": 2,
                    "temp_var_2": 1,
                    "temporary2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08003b98",
                "FUN_08002c18"
            ],
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_value,uint shift_amount)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((shift_amount & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = shift_amount * 2 + 0x200000;\n  if (shift_amount * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (shift_amount << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | shift_amount << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_shifted_value_08008bf0",
            "entrypoint": "0x08008bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "iVar1": "shifted_value",
                "param_1": "input_value",
                "param_2": "shift_amount",
                "uVar2": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008c30": {
            "additional_data": {
                "FUN_08008c30": {
                    "calculate_float": 8,
                    "calculate_float32": 1,
                    "calculate_float_overflow": 1,
                    "calculate_float_representation": 1,
                    "calculate_float_value": 2,
                    "calculate_floating_point": 3,
                    "calculate_floating_point_addition": 1,
                    "calculate_floating_point_value": 1,
                    "calculate_modified_float": 1,
                    "calculate_normalized_float": 1,
                    "calculate_normalized_value": 1,
                    "calculate_result": 2,
                    "convert_float_to_fixed_point": 1,
                    "convert_float_to_uint": 1,
                    "convert_float_to_unsigned_int": 1,
                    "convert_to_float": 2,
                    "decode_and_shift": 1,
                    "floating_point_conversion": 1,
                    "reverse_bits": 1
                },
                "SCARRY4": {
                    "is_carry": 2,
                    "is_carry_set": 2,
                    "overflow_check": 1,
                    "scarry": 1,
                    "signed_carry": 1
                },
                "bVar4": {
                    "check_flag": 1,
                    "condition": 1,
                    "condition1": 2,
                    "is_invalid": 1,
                    "is_limit_reached": 1,
                    "is_special_case": 1,
                    "is_zero": 24
                },
                "bVar5": {
                    "check": 1,
                    "comparison_flag": 1,
                    "condition2": 2,
                    "in_range": 1,
                    "is_in_range": 2,
                    "is_less": 1,
                    "is_less_than": 3,
                    "is_less_than70000000": 2,
                    "is_less_than_limit": 1,
                    "is_less_than_max": 3,
                    "is_less_than_threshold": 6,
                    "is_lower": 1,
                    "is_positive": 1,
                    "is_small": 2,
                    "is_valid": 1,
                    "is_valid_range": 1,
                    "is_valid_shift": 1,
                    "is_within_range": 1
                },
                "in_r12": {
                    "additional_value": 2,
                    "adjusted_offset2": 1,
                    "adjusted_shift_amount": 1,
                    "adjusted_var": 1,
                    "alternate_adjusted_input": 1,
                    "alternative_value": 1,
                    "comparison_value": 1,
                    "condition_check": 1,
                    "condition_value": 1,
                    "conditional_float_bits": 1,
                    "limit": 2,
                    "modified_shifted_flag": 1,
                    "shifted_with_offset": 1,
                    "special_value": 1,
                    "temp": 1,
                    "temp3": 6,
                    "temp_value": 2,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "temp_var3": 2,
                    "temporary_value": 1,
                    "threshold": 1
                },
                "param_1": {
                    "float_value": 2,
                    "floating_point_number1": 1,
                    "input": 2,
                    "input1": 6,
                    "input_float": 4,
                    "input_value": 6,
                    "input_value1": 2,
                    "integer": 1,
                    "numerator": 1,
                    "value": 4,
                    "value1": 2
                },
                "param_2": {
                    "bit_offset": 1,
                    "bit_pattern": 1,
                    "denominator": 1,
                    "exponent": 1,
                    "float_bits": 1,
                    "floating_point_number2": 1,
                    "input2": 6,
                    "input_flag": 2,
                    "input_integer": 1,
                    "input_sign": 1,
                    "input_value": 1,
                    "input_value2": 2,
                    "multiplier": 4,
                    "shift": 1,
                    "shift_amount": 3,
                    "sign": 1,
                    "unsigned_int_value": 1,
                    "value2": 2
                },
                "uVar1": {
                    "converted_float_bits": 1,
                    "output_float": 1,
                    "result": 29
                },
                "uVar1_shifted": {
                    "result_shifted": 1
                },
                "uVar2": {
                    "double_bit_pattern": 1,
                    "double_input": 2,
                    "double_shift_amount": 1,
                    "double_unsigned_int_value": 1,
                    "doubled_multiplier": 1,
                    "modified_flag": 1,
                    "multiplied_value": 1,
                    "multiplier_times_two": 2,
                    "scaled_exponent": 1,
                    "shifted": 2,
                    "shifted_bit_offset": 1,
                    "shifted_float_bits": 1,
                    "shifted_input_flag": 1,
                    "shifted_number": 1,
                    "shifted_value": 2,
                    "sign_times2": 1,
                    "temp1": 6,
                    "temp_value": 1,
                    "temp_var": 1,
                    "temp_var1": 2,
                    "twice_multiplier": 1
                },
                "uVar2_shifted": {
                    "temp1_shifted": 1
                },
                "uVar3": {
                    "added_number": 1,
                    "adjusted_input": 1,
                    "adjusted_multiplier": 1,
                    "adjusted_offset": 1,
                    "adjusted_value": 2,
                    "final_float_bits": 1,
                    "final_value": 1,
                    "intermediate_var": 1,
                    "modified_bit_pattern": 1,
                    "modified_float": 1,
                    "modified_input_flag": 1,
                    "modified_multiplier": 1,
                    "modified_shift_amount": 1,
                    "modified_sign": 1,
                    "new_value": 1,
                    "normalized": 1,
                    "offset": 1,
                    "scaled_exponent_plus_constant": 1,
                    "shifted_value": 1,
                    "shifted_with_base": 1,
                    "temp2": 6,
                    "temp_value2": 1,
                    "temp_var2": 2,
                    "updated_multiplier": 1
                },
                "uVar3_multiplied": {
                    "temp2_multiplied": 1
                },
                "uVar3_shifted": {
                    "temp2_shifted": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004940",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080044e8",
                "FUN_0800056c",
                "FUN_08002978",
                "FUN_080046d0",
                "FUN_08002638"
            ],
            "code": "\nuint calculate_float_value_08008c30(uint input_value,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than_threshold;\n  \n  temp1 = input2 * 2;\n  is_less_than_threshold = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than_threshold) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than_threshold && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than_threshold || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input_value | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != is_carry(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input_value >> (temp1 & 0xff);\n    if (input_value << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input_value = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input_value >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input_value * 8);\n  if (input_value * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_float_value_08008c30",
            "entrypoint": "0x08008c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008c30": "calculate_float_value_08008c30",
                "SCARRY4": "is_carry",
                "bVar4": "is_zero",
                "bVar5": "is_less_than_threshold",
                "in_r12": "temp3",
                "param_1": "input_value",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "additional_data": {
                "FUN_08008cd8": {
                    "apply_function": 1,
                    "calculate_float": 15,
                    "calculate_float_addition": 1,
                    "calculate_new_number": 1,
                    "calculate_new_value": 1,
                    "calculate_next_uint": 1,
                    "calculate_shifted_value": 2,
                    "compute": 1,
                    "perform_arithmetic": 1,
                    "perform_arithmetic_operation": 1,
                    "reverse_bitwise_operation": 1
                },
                "bVar10": {
                    "is_negative_masked": 1
                },
                "bVar11": {
                    "is_difference_positive": 1
                },
                "bVar8": {
                    "bool_flag": 1,
                    "compare_result": 1,
                    "flag": 3,
                    "is_condition_met": 2,
                    "is_condition_true": 5,
                    "is_equal": 13,
                    "is_equal_masked_float": 1,
                    "is_true": 3,
                    "is_zero": 1,
                    "is_zero_shifted_input": 1
                },
                "bVar9": {
                    "is_negative_result": 1,
                    "is_zero": 1
                },
                "iVar1": {
                    "input1_shifted": 1,
                    "int_value_1": 1,
                    "left_shifted_input_byte": 1,
                    "msb_input_shifted": 1,
                    "numerator_shifted": 1,
                    "operand1_sign": 1,
                    "shift1": 3,
                    "shift_amount1": 1,
                    "shift_value": 1,
                    "shift_value1": 1,
                    "shifted_exponent": 1,
                    "shifted_first_operand": 1,
                    "shifted_float": 1,
                    "shifted_input": 3,
                    "shifted_input1": 5,
                    "shifted_input1_h": 1,
                    "shifted_input_1": 1,
                    "shifted_number": 1,
                    "shifted_out1": 1,
                    "shifted_value": 1,
                    "shifted_value1": 2
                },
                "iVar2": {
                    "input2_shifted": 1,
                    "int_value_2": 1,
                    "left_shifted_magic_byte": 1,
                    "mask_shifted": 1,
                    "msb_shifted_value": 1,
                    "numerator_shifted_2": 1,
                    "operand2_shifted_sign": 1,
                    "shift2": 3,
                    "shift_amount2": 1,
                    "shift_value2": 1,
                    "shift_value_2": 1,
                    "shifted_input2": 6,
                    "shifted_input2_h": 1,
                    "shifted_input_2": 1,
                    "shifted_masked_shifted_mask": 1,
                    "shifted_out2": 1,
                    "shifted_param": 1,
                    "shifted_return_value": 1,
                    "shifted_second_operand": 1,
                    "shifted_value2": 3,
                    "temp_variable": 1
                },
                "param_1": {
                    "final_result": 1,
                    "first_operand": 1,
                    "float_value_1": 1,
                    "input1": 9,
                    "input_1": 3,
                    "input_a": 1,
                    "input_float": 1,
                    "input_number": 1,
                    "input_sign": 1,
                    "input_value": 4,
                    "input_value1": 4,
                    "num1": 1,
                    "number1": 1,
                    "numerator": 1,
                    "operand1": 1
                },
                "param_2": {
                    "denominator": 1,
                    "float_value_2": 1,
                    "input2": 10,
                    "input_2": 3,
                    "input_b": 1,
                    "input_exponent": 1,
                    "input_mask": 3,
                    "input_value2": 4,
                    "magic_number": 1,
                    "mask": 1,
                    "num2": 1,
                    "number2": 1,
                    "operand2": 1,
                    "return_value": 1,
                    "second_operand": 1
                },
                "param_3": {
                    "constant": 1,
                    "extra_param": 1,
                    "input3": 9,
                    "input_3": 3,
                    "input_c": 1,
                    "input_fraction": 1,
                    "input_shift": 1,
                    "input_value3": 4,
                    "n": 1,
                    "num3": 1,
                    "output_param": 1,
                    "param3": 1,
                    "param_3": 1,
                    "parameter_3": 1,
                    "round_mode": 1,
                    "some_flag": 1,
                    "temp1": 1,
                    "temp_var": 1
                },
                "param_4": {
                    "exception_flags": 1,
                    "input4": 9,
                    "input_4": 3,
                    "input_d": 1,
                    "input_other": 1,
                    "input_value": 1,
                    "input_value4": 4,
                    "num4": 1,
                    "output_value": 1,
                    "param4": 1,
                    "param_4": 1,
                    "parameter_4": 1,
                    "result": 2,
                    "shift_param": 1,
                    "shift_value": 1,
                    "shifted_mask": 1,
                    "temp2": 1
                },
                "uVar3": {
                    "bitwise_xor": 1,
                    "bitwise_xor1": 1,
                    "complement_input2": 1,
                    "flipped_input2": 1,
                    "flipped_magic": 1,
                    "flipped_num2": 1,
                    "float_temp_1": 1,
                    "input1_xor": 1,
                    "masked_float": 1,
                    "masked_input": 2,
                    "masked_input2": 1,
                    "masked_value1": 1,
                    "modified_exponent": 1,
                    "number1_updated": 1,
                    "numerator_xor": 1,
                    "operand2_complement": 1,
                    "result1": 2,
                    "result_1": 3,
                    "shifted_input_b": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_number": 1,
                    "temp_operand_1": 1,
                    "temp_value1": 1,
                    "temp_var2": 1,
                    "value1": 1,
                    "xor_result": 1
                },
                "uVar4": {
                    "bitwise_xor2": 1,
                    "flipped_input": 1,
                    "flipped_input1": 1,
                    "flipped_num1": 1,
                    "float_temp_2": 1,
                    "input2_xor": 1,
                    "masked_input1": 1,
                    "masked_output": 1,
                    "masked_shifted": 1,
                    "masked_shifted_mask": 1,
                    "masked_value2": 1,
                    "modified_fraction": 1,
                    "modified_input1": 1,
                    "number2_updated": 1,
                    "numerator_shifted_xor": 1,
                    "result2": 2,
                    "result_2": 3,
                    "result_fraction": 1,
                    "shifted_input_a": 1,
                    "shifted_result_with_sign": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_mask": 1,
                    "temp_operand_2": 1,
                    "temp_value2": 1,
                    "temp_var3": 1,
                    "value2": 1
                },
                "uVar5": {
                    "float_result_1": 1,
                    "input_shifted": 1,
                    "left_shifted_input": 1,
                    "modified_input1": 1,
                    "modified_input2": 1,
                    "operand1_shifted": 1,
                    "result": 2,
                    "result1": 4,
                    "result_3": 1,
                    "result_float": 1,
                    "result_number": 1,
                    "result_sign": 1,
                    "result_value1": 1,
                    "shifted_input1_2": 1,
                    "shifted_num1": 1,
                    "shifted_result": 1,
                    "shifted_result1": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp_1": 2,
                    "temp_a": 1,
                    "temp_result_1": 1,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_var4": 1
                },
                "uVar6": {
                    "addition": 1,
                    "adjusted_input1": 1,
                    "count": 1,
                    "final_input": 1,
                    "float_result_2": 1,
                    "loop_index": 1,
                    "result": 1,
                    "result2": 3,
                    "result_4": 1,
                    "result_exponent": 1,
                    "shift_count": 3,
                    "shifted": 1,
                    "shifted_num2": 1,
                    "shifted_result": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp6": 1,
                    "temp_2": 2,
                    "temp_b": 1,
                    "temp_result_2": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var5": 1,
                    "updated_result": 1,
                    "updated_value1": 1
                },
                "uVar7": {
                    "diff": 1,
                    "difference": 19,
                    "difference_value": 1,
                    "float_temp_3": 1,
                    "result_5": 1,
                    "shift_amount": 1,
                    "shift_diff": 1,
                    "sign_difference": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp7": 1,
                    "temp_var6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004940",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002908",
                "FUN_080005b4",
                "FUN_080028bc",
                "FUN_08002978"
            ],
            "code": "\nuint calculate_float_addition_08008cd8(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result_1;\n  uint result_2;\n  uint result1;\n  uint shift_count;\n  uint difference;\n  bool is_equal;\n  \n  result_1 = input2 ^ 0x80000000;\n  result1 = input1 << 1;\n  is_equal = result1 == 0;\n  if (!is_equal) {\n    input4 = input2 << 1;\n    is_equal = input4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result1 == input4;\n  }\n  shifted_input1 = (int)result1 >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_input1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result1 = result_1;\n      if (shifted_input1 == -1) {\n        result1 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        result_1 = result1;\n      }\n      is_equal = (result1 & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (result_1 & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result1 == result_1;\n      }\n      if (!is_equal) {\n        result1 = result1 | 0x400000;\n      }\n      return result1;\n    }\n    if (((input1 ^ result_1) & 0x7fffffff) != 0) {\n      if (result1 == 0) {\n        input1 = result_1;\n      }\n      return input1;\n    }\n    if (input1 != result_1) {\n      return 0;\n    }\n    if ((result1 & 0xff000000) == 0) {\n      result_1 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result_1 = result_1 | 0x80000000;\n      }\n      return result_1;\n    }\n    if (result1 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  result1 = result1 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result1;\n  is_equal = difference != 0;\n  shift_count = result1;\n  if (is_equal && result1 <= input4) {\n    shift_count = result1 + difference;\n  }\n  if (is_equal && result1 <= input4) {\n    result_1 = result_1 ^ input1;\n  }\n  if (is_equal && result1 <= input4) {\n    input1 = input1 ^ result_1;\n  }\n  if (is_equal && result1 <= input4) {\n    result_1 = result_1 ^ input1;\n  }\n  if (input4 < result1) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result1 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  result_2 = result_1 & 0xffffff | 0x800000;\n  if ((result_1 & 0x80000000) != 0) {\n    result_2 = -result_2;\n  }\n  if (shift_count == difference) {\n    result_2 = result_2 ^ 0x800000;\n    if (shift_count == 0) {\n      result1 = result1 ^ 0x800000;\n      shift_count = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result1 = result1 + ((int)result_2 >> (difference & 0xff));\n  result_2 = result_2 << (0x20 - difference & 0xff);\n  input1 = result1 & 0x80000000;\n  if ((int)result1 < 0) {\n    is_equal = result_2 != 0;\n    result_2 = -result_2;\n    result1 = -result1 - (uint)is_equal;\n  }\n  if (result1 < 0x800000) {\n    result_1 = result_2 & 0x80000000;\n    result_2 = result_2 << 1;\n    result1 = result1 * 2 + (uint)(result_1 != 0);\n    result_1 = shift_count - 2;\n    if (shift_count - 1 == 0 || result1 < 0x800000) {\n      difference = LZCOUNT(result1) - 8;\n      result1 = result1 << (difference & 0xff);\n      if ((int)result_1 < (int)difference) {\n        result1 = result1 >> (-(result_1 - difference) & 0xff);\n      }\n      else {\n        result1 = result1 + (result_1 - difference) * 0x800000;\n      }\n      return result1 | input1;\n    }\n  }\n  else {\n    result_1 = shift_count - 1;\n    if (0xffffff < result1) {\n      result_1 = result1 & 1;\n      result1 = result1 >> 1;\n      result_2 = (uint)(result_1 != 0) << 0x1f | result_2 >> 1;\n      result_1 = shift_count;\n      if (0xfd < shift_count) goto LAB_08008e12;\n    }\n  }\n  result1 = result1 + result_1 * 0x800000 + (uint)(0x7fffffff < result_2);\n  if (result_2 == 0x80000000) {\n    result1 = result1 & 0xfffffffe;\n  }\n  return result1 | input1;\n}\n\n",
            "current_name": "calculate_float_addition_08008cd8",
            "entrypoint": "0x08008cd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cd8": "calculate_float_addition_08008cd8",
                "bVar8": "is_equal",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result_1",
                "uVar4": "result_2",
                "uVar5": "result1",
                "uVar6": "shift_count",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "additional_data": {
                "FUN_08008cdc": {
                    "calculate_float": 12,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 3,
                    "calculate_floating_point_result": 1,
                    "calculate_floating_point_value": 1,
                    "compute_float": 1,
                    "convert_float_to_uint": 1,
                    "float_to_integer": 1,
                    "perform_unsigned_integer_operation": 1,
                    "reverse_binary_operations": 1,
                    "reverse_bits": 2,
                    "reverse_bitwise_operation": 1,
                    "reverse_float_bits": 1,
                    "simplified_float_calculation": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 2
                },
                "bVar7": {
                    "bool1": 1,
                    "bool_flag": 1,
                    "comparison": 1,
                    "condition": 2,
                    "flag": 1,
                    "flag_a": 1,
                    "is_case1": 1,
                    "is_comparison_true": 1,
                    "is_condition_met": 1,
                    "is_equal": 7,
                    "is_true": 1,
                    "is_zero": 11,
                    "should_return_input1": 1
                },
                "iVar1": {
                    "bit_shift": 1,
                    "bits1": 1,
                    "int1": 1,
                    "shift_a": 1,
                    "shift_amount1": 1,
                    "shift_bits": 1,
                    "shift_value1": 1,
                    "shifted_a": 1,
                    "shifted_float1": 1,
                    "shifted_input1": 12,
                    "shifted_input1_sign": 1,
                    "shifted_num1": 2,
                    "shifted_operand1": 1,
                    "shifted_value1": 3,
                    "sign_bit1": 1
                },
                "iVar2": {
                    "bit_shift2": 1,
                    "bits2": 1,
                    "int2": 1,
                    "shift_amount2": 1,
                    "shift_b": 1,
                    "shift_bits2": 1,
                    "shift_value2": 1,
                    "shifted_b": 1,
                    "shifted_float2": 1,
                    "shifted_input2": 11,
                    "shifted_input2_sign": 1,
                    "shifted_num2": 2,
                    "shifted_operand2": 1,
                    "shifted_result": 1,
                    "shifted_value2": 3,
                    "sign_bit2": 1
                },
                "new_var_1": {
                    "diff": 1
                },
                "new_var_2": {
                    "significand_temp": 1
                },
                "new_var_3": {
                    "shifted_significand": 1
                },
                "new_var_4": {
                    "is_equal": 1
                },
                "new_var_5": {
                    "exponent_mask": 1
                },
                "param_1": {
                    "a": 1,
                    "float1": 1,
                    "float_value1": 1,
                    "input1": 17,
                    "input_a": 1,
                    "input_value1": 3,
                    "num1": 4,
                    "operand1": 2,
                    "value1": 1
                },
                "param_2": {
                    "b": 1,
                    "float2": 1,
                    "float_value2": 1,
                    "input2": 17,
                    "input_b": 1,
                    "input_value2": 3,
                    "num2": 4,
                    "operand2": 2,
                    "value2": 1
                },
                "param_3": {
                    "flag": 3,
                    "input3": 8,
                    "input_value3": 2,
                    "modifier": 1,
                    "operand3": 1,
                    "param3": 8,
                    "round_mode": 1,
                    "shift_amount": 1,
                    "type_flag": 1,
                    "undefined": 2,
                    "undefined4_param": 1,
                    "unused_param": 1
                },
                "param_4": {
                    "c": 1,
                    "exception_flags": 1,
                    "float3": 1,
                    "float_value_result": 1,
                    "input3": 1,
                    "input4": 8,
                    "input_value4": 2,
                    "operand4": 1,
                    "output": 1,
                    "param4": 7,
                    "result": 3,
                    "round_flag": 1,
                    "round_mode": 1,
                    "rounding_mode": 1,
                    "unused_param2": 1
                },
                "uVar3": {
                    "abs_input1": 1,
                    "float4": 1,
                    "float_result1": 1,
                    "fractional_a": 1,
                    "fractional_input1": 1,
                    "input1_fraction": 1,
                    "mantissa1": 1,
                    "mask1": 1,
                    "modified_input1": 1,
                    "normalized_input1": 1,
                    "part1": 1,
                    "partial_sum": 1,
                    "positive_input1": 1,
                    "result": 2,
                    "result1": 6,
                    "result_a": 1,
                    "result_value1": 1,
                    "shifted_result": 2,
                    "significand1": 1,
                    "temp1": 3,
                    "temp_a": 1,
                    "value1_32bit": 1
                },
                "uVar4": {
                    "abs_input2": 1,
                    "abs_num1": 1,
                    "float5": 1,
                    "float_result2": 1,
                    "fractional_b": 1,
                    "fractional_input2": 1,
                    "input1_result": 1,
                    "input_value1": 1,
                    "mantissa2": 1,
                    "modified_input1": 1,
                    "modified_input2": 1,
                    "normalized_input2": 1,
                    "num1_shifted": 1,
                    "part2": 1,
                    "positive_input2": 1,
                    "result": 1,
                    "result2": 3,
                    "result_value2": 1,
                    "shifted_input1": 2,
                    "shifted_result": 1,
                    "shifted_result1": 1,
                    "shifted_value1_again": 1,
                    "significand2": 1,
                    "temp2": 2,
                    "temp_a": 1,
                    "temp_b": 1,
                    "value2_32bit": 1
                },
                "uVar5": {
                    "abs_num2": 1,
                    "abs_shifted_input1": 1,
                    "count": 2,
                    "divisor": 1,
                    "exponent": 1,
                    "float6": 1,
                    "i": 1,
                    "loop_counter": 1,
                    "max_shift_value": 1,
                    "num_bits_shifted": 1,
                    "num_set_bits": 1,
                    "part3": 1,
                    "result3": 1,
                    "shift": 1,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "shifted_input2": 1,
                    "shifted_result2": 1,
                    "shifted_value1_or_input1": 1,
                    "temp1": 3,
                    "temp3": 2,
                    "temp_c": 1,
                    "temp_fractional_input": 1,
                    "temp_result": 1,
                    "temp_value1": 1
                },
                "uVar6": {
                    "abs_shifted_input2": 1,
                    "diff": 3,
                    "difference": 14,
                    "float7": 1,
                    "input2_result": 1,
                    "part4": 1,
                    "result4": 1,
                    "shift_amount": 1,
                    "temp2": 3,
                    "temp4": 2,
                    "temp_b": 1,
                    "temp_value2": 1
                },
                "uVar8": {
                    "normalized_input1": 1
                },
                "uVar9": {
                    "normalized_input2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004940",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002908",
                "FUN_080005b4",
                "FUN_080028bc",
                "FUN_08002978"
            ],
            "code": "\nuint calculate_float_value_08008cdc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint temp1;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == input4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      return result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      return input1;\n    }\n    if (input1 != input2) {\n      return 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      return result2;\n    }\n    if (result2 < 0xfe000000) {\n      return input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    return input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result2;\n  is_zero = difference != 0;\n  temp1 = result2;\n  if (is_zero && result2 <= input4) {\n    temp1 = result2 + difference;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (temp1 == difference) {\n    result1 = result1 ^ 0x800000;\n    if (temp1 == 0) {\n      result2 = result2 ^ 0x800000;\n      temp1 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = temp1 - 2;\n    if (temp1 - 1 == 0 || result2 < 0x800000) {\n      temp1 = leading_zero_count(result2) - 8;\n      result2 = result2 << (temp1 & 0xff);\n      if ((int)difference < (int)temp1) {\n        result2 = result2 >> (-(difference - temp1) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - temp1) * 0x800000;\n      }\n      return result2 | input1;\n    }\n  }\n  else {\n    difference = temp1 - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = temp1;\n      if (0xfd < temp1) goto LAB_08008e12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  return result2 | input1;\n}\n\n",
            "current_name": "calculate_float_value_08008cdc",
            "entrypoint": "0x08008cdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cdc": "calculate_float_value_08008cdc",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "temp1",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "additional_data": {
                "FUN_08008e3c": {
                    "calculate_hash_value": 1,
                    "calculate_improved_value": 1,
                    "calculate_masked_value": 1,
                    "calculate_modified_value": 3,
                    "calculate_result": 3,
                    "calculate_shifted_value": 4,
                    "calculate_updated_value": 1,
                    "calculate_value": 5,
                    "count_bits": 1,
                    "count_leading_zeros": 1,
                    "decompress_uint": 1,
                    "new_function_name": 1,
                    "reverse_bits": 4
                },
                "LZCOUNT": {
                    "count_leading_zeros": 1
                },
                "iVar3": {
                    "base_value": 3,
                    "constant": 9,
                    "constant_offset": 1,
                    "constant_value": 3,
                    "intermediate_value": 2,
                    "offset": 11,
                    "result": 2
                },
                "iVar3_new": {
                    "modified_offset": 1
                },
                "param_1": {
                    "input": 6,
                    "input_value": 22,
                    "number": 1,
                    "value": 2
                },
                "uVar1": {
                    "bits": 1,
                    "final_result": 1,
                    "leading_zero_count": 6,
                    "leading_zeroes": 3,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 8,
                    "leading_zeros_count": 3,
                    "modified_value": 1,
                    "output": 1,
                    "result": 5,
                    "updated_value": 1
                },
                "uVar1_bitwise": {
                    "leading_zeroes_count": 1
                },
                "uVar1_bitwise_final": {
                    "leading_zeroes_count": 1
                },
                "uVar1_combined": {
                    "leading_zeroes_count_minus8_shifted": 1
                },
                "uVar1_combinedShifted": {
                    "leading_zeroes_count_minus8_shifted": 1
                },
                "uVar1_final": {
                    "leading_zeroes_count": 1
                },
                "uVar1_finalBitwise": {
                    "leading_zeroes_count": 1
                },
                "uVar1_finalMasked": {
                    "leading_zeroes_count": 1
                },
                "uVar1_new": {
                    "leading_zeroes_count_minus8": 1
                },
                "uVar1_shifted": {
                    "leading_zeroes_count_minus8": 1
                },
                "uVar1_updated": {
                    "leading_zeroes_count": 1
                },
                "uVar2": {
                    "adjusted_value": 1,
                    "shift": 1,
                    "shift_amount": 18,
                    "shift_value": 1,
                    "shifted_bits": 1,
                    "shifted_input": 1,
                    "shifted_value": 2,
                    "shifted_zeros": 1,
                    "shifted_zeros_count": 1,
                    "temp": 2,
                    "temp_shifted_value": 1,
                    "temp_value": 1
                },
                "uVar2_bitwise": {
                    "shift_amount": 1
                },
                "uVar2_bitwise_final": {
                    "shift_amount": 1
                },
                "uVar2_conditionMask": {
                    "shift_amount": 1
                },
                "uVar2_final": {
                    "shift_amount": 1
                },
                "uVar2_new": {
                    "shift_amount_with8": 1
                },
                "uVar2_reducedShift": {
                    "reduced_shift": 1
                },
                "uVar2_shifted": {
                    "shifted_value": 1
                },
                "uVar2_updated": {
                    "shift_amount": 1
                },
                "uVar3": {
                    "result": 1
                },
                "uVar4": {
                    "bit_mask": 1,
                    "bitwise_operation": 1,
                    "carry": 1,
                    "carry_bit": 1,
                    "comparison_value": 1,
                    "final_result": 1,
                    "mask": 16,
                    "masked_value": 1,
                    "overflow_check": 1,
                    "shifted_value": 2,
                    "temp": 1,
                    "temp_value": 2,
                    "test_value": 1,
                    "zero_flag": 1
                },
                "uVar4_final": {
                    "flag": 1
                },
                "uVar4_new": {
                    "flag": 1
                },
                "uVar4_updated": {
                    "mask": 1
                },
                "uVar5": {
                    "mask": 1,
                    "result": 3,
                    "shifted_value": 1
                },
                "uVar6": {
                    "adjusted_value": 1,
                    "result": 1,
                    "temp": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002c18",
                "FUN_08002638"
            ],
            "code": "\nuint calculate_shifted_value_08008e3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int offset;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input_value);\n  shift_amount = leading_zeros - 8;\n  offset = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = offset + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = offset + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "calculate_shifted_value_08008e3c",
            "entrypoint": "0x08008e3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e3c": "calculate_shifted_value_08008e3c",
                "LZCOUNT": "count_leading_zeros",
                "iVar3": "offset",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e44": {
            "additional_data": {
                "0x80000000": {
                    "sign_bit_mask": 1
                },
                "FUN_08008e44": {
                    "binary_to_twos_complement": 1,
                    "calculate_hash": 3,
                    "calculate_inverse": 1,
                    "calculate_new_value": 1,
                    "calculate_reverse": 1,
                    "calculate_shifted_sum": 1,
                    "calculate_shifted_value": 3,
                    "calculate_value": 2,
                    "clear_bit_count": 1,
                    "count_bits": 5,
                    "count_bits_set_and_shift": 1,
                    "count_leading_zeros": 2,
                    "count_set_bits": 1,
                    "count_trailing_zeros": 1,
                    "decode_number": 1,
                    "decode_unsigned_integer": 1,
                    "extract_and_adjust_bits": 1,
                    "get_bit_count": 1,
                    "reverse_bits": 3
                },
                "LZCOUNT": {
                    "count_leading_zeros": 3,
                    "leading_zero_count": 1
                },
                "iVar4": {
                    "adjusted_constant": 1,
                    "adjusted_output": 1,
                    "adjusted_value": 2,
                    "calculated_value": 1,
                    "calculation_result": 1,
                    "hash": 1,
                    "hashed_value": 1,
                    "modified_value": 1,
                    "offset": 1,
                    "result": 20,
                    "sum": 1
                },
                "param_1": {
                    "input": 12,
                    "input_num": 3,
                    "input_number": 3,
                    "input_value": 12,
                    "number": 1
                },
                "uVar1": {
                    "bit_count": 2,
                    "leading_zero_count": 2,
                    "leading_zeroes": 2,
                    "leading_zeros": 19,
                    "leading_zeros_count": 1,
                    "num_bits": 1,
                    "num_set_bits": 1,
                    "shifted_result": 1,
                    "trailing_zeros": 1,
                    "zero_pad": 1
                },
                "uVar2": {
                    "result_2": 1,
                    "shift": 1,
                    "shift_amount": 16,
                    "shift_count": 4,
                    "shift_offset": 1,
                    "shift_value": 3,
                    "shifted_bits": 2,
                    "shifted_count": 1,
                    "shifted_difference": 1,
                    "shifted_input": 1
                },
                "uVar3": {
                    "is_negative": 6,
                    "masked_result": 1,
                    "modified_result": 1,
                    "negative_flag": 1,
                    "result": 1,
                    "sign_bit": 19,
                    "sign_mask": 2
                },
                "uVar5": {
                    "mask": 1
                },
                "uVar6": {
                    "sign_extend": 1
                },
                "uVar7": {
                    "carry": 1
                },
                "uVar8": {
                    "is_negative": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004940",
                "FUN_080004fc",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_080024c4",
                "FUN_08003618",
                "FUN_08002c18"
            ],
            "code": "\nuint count_bits_set_and_shift_08008e44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = count_leading_zeros(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "count_bits_set_and_shift_08008e44",
            "entrypoint": "0x08008e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e44": "count_bits_set_and_shift_08008e44",
                "LZCOUNT": "count_leading_zeros",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008eec": {
            "additional_data": {
                "FUN_08008eec": {
                    "calculate_float": 10,
                    "calculate_float_value": 3,
                    "calculate_floating_point": 12,
                    "compute_floating_point": 2,
                    "reverse_bits": 1
                },
                "SBORROW4": {
                    "subtract_with_borrow": 1,
                    "subtraction_borrow": 2
                },
                "SCARRY4": {
                    "addition_carry": 1,
                    "subtract_with_carry": 1,
                    "subtraction_carry": 1
                },
                "bVar10": {
                    "bool_flag2": 1,
                    "carry_flag": 3,
                    "check2": 1,
                    "condition2": 1,
                    "flag2": 2,
                    "is_borrow": 1,
                    "is_carry_flag_set": 1,
                    "is_condition2_true": 1,
                    "is_negative": 9,
                    "is_negative_diff": 1,
                    "is_negative_offset": 1,
                    "is_overflow": 2,
                    "is_positive": 1,
                    "is_subtraction1": 1,
                    "is_subtraction_overflow": 1,
                    "overflow": 2,
                    "overflow_flag": 1,
                    "sub_overflow": 1
                },
                "bVar9": {
                    "are_bits_zero": 1,
                    "bool_flag1": 1,
                    "check1": 1,
                    "check_condition": 1,
                    "check_zero": 1,
                    "condition1": 1,
                    "flag1": 2,
                    "is_bits27to35_input1_zero": 1,
                    "is_condition1_true": 1,
                    "is_condition_met": 1,
                    "is_exponent_zero": 1,
                    "is_zero": 12,
                    "is_zero1": 2,
                    "is_zero_byte": 1,
                    "is_zero_flag": 1,
                    "is_zero_or_ff": 1,
                    "is_zero_shifted1": 1,
                    "is_zero_value_1": 1
                },
                "iVar4": {
                    "bit_sum": 1,
                    "input1_and4_sum": 1,
                    "shift_sum": 2,
                    "shifted_sum": 2,
                    "sum": 15,
                    "sum1": 1,
                    "sum_bytes": 1,
                    "sum_exponents": 2,
                    "sum_inputs_shifted": 1,
                    "sum_of_shifted_inputs": 1,
                    "sum_shifted": 1,
                    "sum_shifted_bits": 1,
                    "temp1": 1,
                    "temp4": 1
                },
                "iVar5": {
                    "bit_difference": 1,
                    "clamped_exponent": 1,
                    "diff": 5,
                    "diff1": 1,
                    "difference": 9,
                    "normalized_result": 1,
                    "shift_amount": 1,
                    "shift_amt": 1,
                    "shift_diff": 1,
                    "shifted_sum": 1,
                    "sum_and_carry": 1,
                    "sum_diff": 1,
                    "temp2": 1,
                    "temp5": 1,
                    "temp_var1": 1,
                    "tmp1": 1
                },
                "iVar7": {
                    "bit_difference2": 1,
                    "diff2": 2,
                    "difference": 2,
                    "difference2": 2,
                    "exponent_diff": 1,
                    "normalized_result2": 1,
                    "offset": 1,
                    "overflow_diff": 1,
                    "product_difference": 1,
                    "remaining_bits": 1,
                    "shift": 1,
                    "shift_amt_alt": 1,
                    "shift_count": 1,
                    "shift_difference": 1,
                    "shifted_sum_difference": 1,
                    "sum2": 1,
                    "temp": 4,
                    "temp2": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_b": 1,
                    "temp_shift_amount": 1,
                    "temp_var2": 1,
                    "tmp2": 1
                },
                "iVar9": {
                    "carry_flag": 1
                },
                "lVar1": {
                    "long_product": 1,
                    "long_result": 2,
                    "long_variable": 1,
                    "multiplication": 1,
                    "multiplied_result": 1,
                    "multiply_result": 2,
                    "product": 3,
                    "temp": 1,
                    "temp_long": 2,
                    "temp_result": 1
                },
                "param_1": {
                    "a": 1,
                    "first_operand": 1,
                    "float_1": 1,
                    "float_value1": 1,
                    "input1": 14,
                    "input_1": 1,
                    "input_a": 3,
                    "input_float1": 1,
                    "input_value1": 2,
                    "input_value_1": 1,
                    "num1": 1,
                    "number1": 1,
                    "value1": 1,
                    "value_1": 1,
                    "x": 1
                },
                "param_2": {
                    "b": 1,
                    "float_2": 1,
                    "float_value2": 1,
                    "input2": 14,
                    "input_2": 1,
                    "input_b": 3,
                    "input_float2": 1,
                    "input_value2": 2,
                    "input_value_2": 1,
                    "num2": 1,
                    "number2": 1,
                    "second_operand": 1,
                    "value2": 1,
                    "value_2": 1,
                    "y": 1
                },
                "param_3": {
                    "c": 1,
                    "flag": 2,
                    "input3": 6,
                    "input_c": 1,
                    "input_float3": 1,
                    "input_value3": 1,
                    "input_value_3": 1,
                    "modifier": 1,
                    "param1": 1,
                    "param3": 4,
                    "param_3": 2,
                    "parameter3": 1,
                    "threshold": 1,
                    "unsigned_value1": 1,
                    "unused": 3,
                    "unused_param": 2,
                    "unused_parameter": 1,
                    "z": 1
                },
                "param_4": {
                    "condition": 1,
                    "d": 1,
                    "flag": 1,
                    "flag_copy": 1,
                    "float_3": 1,
                    "input2_shifted": 1,
                    "input3": 2,
                    "input4": 5,
                    "input_d": 1,
                    "input_float4": 1,
                    "input_value3": 1,
                    "input_value4": 1,
                    "input_value_4": 1,
                    "mask": 1,
                    "param2": 1,
                    "param4": 4,
                    "parameter4": 1,
                    "temp_a": 1,
                    "unsigned_value2": 1,
                    "unused_param2": 1,
                    "unused_parameter": 1,
                    "value_3_shifted": 1,
                    "w": 1
                },
                "uVar2": {
                    "bit_slice2": 1,
                    "bitwise_result": 1,
                    "output": 1,
                    "result": 24,
                    "result_3": 1,
                    "result_float": 1,
                    "temp": 1
                },
                "uVar3": {
                    "bit_index1": 1,
                    "bit_shift1": 1,
                    "bits27to35_input1": 1,
                    "bits_extracted_from_input1": 1,
                    "exponent1": 3,
                    "exponent_a": 1,
                    "first_byte_input1": 1,
                    "first_operand_high_byte": 1,
                    "input1_shifted": 3,
                    "input1_sign": 1,
                    "input_1_shifted": 1,
                    "mask1": 1,
                    "shift1": 1,
                    "shift_count1": 1,
                    "shifted1": 1,
                    "shifted_a": 1,
                    "shifted_bits_a": 1,
                    "shifted_input1": 2,
                    "shifted_num1": 1,
                    "shifted_result": 1,
                    "shifted_value": 1,
                    "shifted_value1": 1,
                    "temp1": 1,
                    "value_1_shifted": 1,
                    "value_a": 1,
                    "x_shifted": 1
                },
                "uVar32": {
                    "temp_shift": 1
                },
                "uVar6": {
                    "mult_result": 1,
                    "multiplication_result": 3,
                    "multiplied_inputs": 1,
                    "multiplied_result": 2,
                    "multiplied_result_low": 1,
                    "multiplied_value": 2,
                    "product": 4,
                    "product_low": 1,
                    "product_lower": 1,
                    "result2": 1,
                    "result_2": 1,
                    "result_lower_bits": 1,
                    "shifted2": 1,
                    "shifted_product": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp_low": 1,
                    "temp_product": 1,
                    "temp_result": 1,
                    "temp_u_int": 1,
                    "tmp_result": 1,
                    "value_b": 1
                },
                "uVar8": {
                    "bit_mask1": 1,
                    "exponent2": 2,
                    "final_result": 1,
                    "float_result": 1,
                    "masked_result": 2,
                    "modified_input": 2,
                    "product_upper": 1,
                    "result": 1,
                    "result1": 1,
                    "result_1": 1,
                    "result_copy": 1,
                    "result_shifted": 1,
                    "shifted_result": 2,
                    "sign_and_fraction": 1,
                    "temp": 4,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_result": 4,
                    "value_c": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003826",
                "FUN_08003004",
                "FUN_080024c4",
                "FUN_08003618",
                "FUN_080028bc",
                "FUN_08002638",
                "FUN_08001994",
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_08002908",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08002c18",
                "FUN_08002978"
            ],
            "code": "\nuint calculate_float_value_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint exponent1;\n  int sum;\n  int difference;\n  uint product;\n  int temp;\n  uint temp;\n  bool is_zero;\n  bool is_negative;\n  \n  exponent1 = input1 >> 0x17 & 0xff;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = exponent1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (exponent1 == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp = result;\n      if (((is_zero) || ((exponent1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = exponent1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      exponent1 = exponent1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = exponent1 + input4;\n  temp = input1 ^ input2;\n  exponent1 = input1 << 9;\n  is_zero = exponent1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (exponent1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = subtraction_borrow(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    temp = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = subtraction_borrow(0xff,difference);\n      temp = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = subtraction_borrow(difference,1);\n    temp = sum - 0x80;\n    is_zero = temp == 0;\n    exponent1 = temp;\n  }\n  else {\n    product = (ulonglong)(exponent1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp & 0x80000000 | result;\n    temp = (sum + -0x7f) - (uint)is_zero;\n    is_negative = subtraction_borrow(temp,0xfd);\n    is_zero = temp == 0xfd;\n    exponent1 = temp - 0xfd;\n    if (temp < 0xfe) {\n      result = result + temp * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)exponent1 < 0 != is_negative) {\n    is_zero = (int)(temp + 0x19) < 0;\n    if (temp == 0xffffffe7 || is_zero != subtract_with_carry(temp,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp != 0xffffffe7 && is_zero == subtract_with_carry(temp,0x19)) {\n      exponent1 = (result << 1) >> (-temp & 0xff);\n      temp = result << (temp + 0x20 & 0xff);\n      exponent1 = ((uint)((result & 0x80000000) != 0) << 0x1f | exponent1 >> 1) + (uint)((byte)exponent1 & 1);\n      if ((product | temp << 1) == 0) {\n        exponent1 = exponent1 & ~(temp >> 0x1f);\n      }\n      return exponent1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_float_value_08008eec",
            "entrypoint": "0x08008eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008eec": "calculate_float_value_08008eec",
                "SBORROW4": "subtraction_borrow",
                "SCARRY4": "subtract_with_carry",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "temp",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "exponent1",
                "uVar6": "product",
                "uVar8": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009054": {
            "additional_data": {
                "FUN_08009054": {
                    "calculate_float": 5,
                    "calculate_float_addition": 2,
                    "calculate_float_from_int": 1,
                    "calculate_floating_point": 8,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_value": 2,
                    "compute_floating_point_number": 1,
                    "convert_float_to_int": 1,
                    "float_to_bits": 1,
                    "float_to_u_int": 1,
                    "float_to_uint": 1,
                    "float_to_unsigned_int": 1,
                    "improved_float_conversion": 1,
                    "perform_floating_point_operation": 1,
                    "reverse_float": 1,
                    "reverse_float_bits": 1
                },
                "SBORROW4": {
                    "is_signed_borrow": 1
                },
                "SCARRY4": {
                    "is_unsigned_carry": 1
                },
                "bVar10": {
                    "borrow": 1
                },
                "bVar7": {
                    "bool1": 1,
                    "bool_var1": 1,
                    "carry": 1,
                    "check": 2,
                    "condition1": 4,
                    "condition_check": 1,
                    "flag1": 5,
                    "flag_1": 1,
                    "is_zero": 12,
                    "is_zero1": 1,
                    "is_zero_exp1": 1,
                    "is_zero_shift": 1
                },
                "bVar7_2": {
                    "carry2": 1
                },
                "bVar8": {
                    "bool2": 1,
                    "bool_var2": 1,
                    "check2": 1,
                    "check_result": 1,
                    "comparison_check1": 1,
                    "condition2": 4,
                    "flag2": 5,
                    "flag_2": 1,
                    "is_borrow": 1,
                    "is_carry": 1,
                    "is_ff": 1,
                    "is_negative": 3,
                    "is_negative_shift": 1,
                    "is_overflow": 3,
                    "is_underflow": 1,
                    "is_zero2": 1,
                    "is_zero_sum": 1,
                    "less_than_zero": 1,
                    "overflow": 1,
                    "shift_carry_plus129": 1
                },
                "bVar9": {
                    "bool3": 1,
                    "bool_var3": 1,
                    "carry": 2,
                    "carry_flag": 4,
                    "check3": 1,
                    "check_result2": 1,
                    "comparison_check2": 1,
                    "condition3": 3,
                    "flag3": 5,
                    "flag_3": 1,
                    "is_borrow": 1,
                    "is_negative": 1,
                    "is_overflow": 2,
                    "is_underflow": 2,
                    "overflow": 3,
                    "shift_carry": 1,
                    "temp_bool": 1
                },
                "iVar3": {
                    "diff": 4,
                    "diff_bytes": 1,
                    "diff_shift_amt": 1,
                    "difference": 6,
                    "exp_diff": 1,
                    "exponent_difference": 3,
                    "operand_difference": 1,
                    "shift_diff": 1,
                    "shift_difference": 1,
                    "temp3": 7,
                    "temp_3": 1,
                    "temp_var3": 2,
                    "temp_var4": 1,
                    "var3": 1
                },
                "iVar5": {
                    "add_amount": 1,
                    "adjusted_difference_plus127": 1,
                    "adjusted_exp": 1,
                    "exponent_sum": 1,
                    "shift_diff_plus127": 1,
                    "sum": 5,
                    "sum1": 1,
                    "sum_bytes": 1,
                    "sum_check": 1,
                    "sum_plus7f": 1,
                    "sum_shift_amt": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 7,
                    "temp_5": 1,
                    "temp_var5": 2,
                    "temp_var6": 1,
                    "tmp": 1,
                    "var5": 1
                },
                "param_1": {
                    "first_float": 1,
                    "first_operand": 1,
                    "float1": 6,
                    "float_part1": 1,
                    "floating_point1": 1,
                    "input1": 8,
                    "input_1": 1,
                    "input_float1": 1,
                    "input_value1": 1,
                    "num1": 1,
                    "number1": 2,
                    "operand1": 3,
                    "value1": 4
                },
                "param_2": {
                    "float2": 6,
                    "float_part2": 1,
                    "floating_point2": 1,
                    "input2": 8,
                    "input_2": 1,
                    "input_float2": 1,
                    "input_value2": 1,
                    "num2": 1,
                    "number2": 2,
                    "operand2": 3,
                    "second_float": 1,
                    "second_operand": 1,
                    "value2": 4
                },
                "param_3": {
                    "a": 1,
                    "constant": 1,
                    "constant1": 1,
                    "control": 1,
                    "flags": 1,
                    "float3": 3,
                    "input3": 2,
                    "input_3": 1,
                    "input_value": 1,
                    "param3": 6,
                    "param_3": 1,
                    "parameter3": 1,
                    "some_parameter": 1,
                    "uint_param": 1,
                    "undefined": 1,
                    "undefined4_param": 1,
                    "unused": 3,
                    "value1": 1,
                    "value3": 1,
                    "variable3": 1
                },
                "param_4": {
                    "b": 1,
                    "constant2": 1,
                    "exp_bits2": 1,
                    "flags": 1,
                    "float3": 1,
                    "float4": 2,
                    "float_param": 1,
                    "input3": 2,
                    "input4": 2,
                    "input_4": 1,
                    "input_mask": 1,
                    "param4": 5,
                    "parameter4": 1,
                    "shift_amount": 2,
                    "shift_amt": 1,
                    "shift_value": 1,
                    "status": 1,
                    "temp_var1": 1,
                    "value2": 1,
                    "value3": 2,
                    "value4": 1,
                    "variable4": 1
                },
                "uVar1": {
                    "adjusted_float2": 1,
                    "float_mask": 1,
                    "mask1": 2,
                    "normalized_operand2": 1,
                    "quotient": 3,
                    "remainder": 1,
                    "shifted_input2": 5,
                    "shifted_operand2": 1,
                    "shifted_value2": 1,
                    "temp1": 9,
                    "temp_1": 1,
                    "temp_var1": 3,
                    "temp_var2": 1,
                    "var1": 1
                },
                "uVar10": {
                    "mask": 1
                },
                "uVar2": {
                    "bit_mask1": 1,
                    "byte1": 1,
                    "exponent1": 1,
                    "first_exponent": 1,
                    "normalized_float1": 1,
                    "normalized_operand1": 1,
                    "remainder": 1,
                    "shifted_byte1": 1,
                    "shifted_input1": 5,
                    "shifted_operand1": 1,
                    "shifted_value1": 1,
                    "temp2": 9,
                    "temp_2": 1,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "value1_exponent": 1,
                    "var2": 1
                },
                "uVar4": {
                    "addition": 1,
                    "adjusted_difference": 1,
                    "bitwise_subtraction_result": 1,
                    "condition1": 1,
                    "exponent2": 1,
                    "normalized_float2": 1,
                    "shifted_byte2": 1,
                    "shifted_diff": 1,
                    "shifted_input1_copy": 1,
                    "shifted_input_diff": 1,
                    "sum": 2,
                    "temp": 4,
                    "temp3": 2,
                    "temp4": 7,
                    "temp_4": 1,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "var4": 1
                },
                "uVar6": {
                    "result": 20,
                    "result1": 1,
                    "temp6": 5,
                    "temp_6": 1,
                    "temp_var6": 2,
                    "temp_var7": 1,
                    "var6": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004940",
                "FUN_08002e08",
                "FUN_080004fc",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08001f00",
                "FUN_08004250",
                "FUN_08002908",
                "FUN_08003618",
                "FUN_080028bc"
            ],
            "code": "\nuint calculate_floating_point_value_08009054(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int temp3;\n  uint temp4;\n  int temp5;\n  uint result;\n  bool is_zero;\n  bool flag2;\n  bool flag3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff;\n  }\n  if (is_zero) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      is_zero = (input1 & 0x7fffffff) == 0;\n      if (!is_zero) {\n        is_zero = (input2 & 0x7fffffff) == 0;\n      }\n      if (!is_zero) {\n        is_zero = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input1 = input1 << 1;\n            is_zero = (input1 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        is_zero = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (is_zero) {\n            input2 = input2 << 1;\n            is_zero = (input2 & 0x800000) == 0;\n          }\n          if (!is_zero) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    temp3 = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      flag3 = is_unsigned_carry(temp3,0x7f);\n      temp5 = temp3 + 0x7f;\n      is_zero = temp5 < 0;\n      flag2 = temp5 == 0;\n      if (!flag2 && is_zero == flag3) {\n        flag3 = is_signed_borrow(0xff,temp5);\n        is_zero = 0xff - temp5 < 0;\n        flag2 = temp5 == 0xff;\n      }\n      if (!flag2 && is_zero == flag3) {\n        input1 = input1 | temp5 * 0x800000;\n      }\n      if (!flag2 && is_zero == flag3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      flag2 = is_signed_borrow(temp5,1);\n      temp4 = temp3 + 0x7e;\n      is_zero = temp4 == 0;\n      result = temp4;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      is_zero = temp1 <= temp2;\n      if (!is_zero) {\n        temp2 = temp2 << 1;\n      }\n      temp4 = temp3 + 0x7d + (uint)is_zero;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        is_zero = temp1 >> 1 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 1;\n        }\n        is_zero = temp1 >> 2 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 2;\n        }\n        is_zero = temp1 >> 3 <= temp2;\n        if (is_zero) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (is_zero) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        is_zero = temp2 == 0;\n        if (!is_zero) {\n          result = result >> 4;\n          is_zero = result == 0;\n        }\n      } while (!is_zero);\n      flag2 = is_signed_borrow(temp4,0xfd);\n      is_zero = temp4 == 0xfd;\n      result = temp4 - 0xfd;\n      if (temp4 < 0xfe) {\n        input1 = input1 + temp4 * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (is_zero || (int)result < 0 != flag2) {\n      is_zero = (int)(temp4 + 0x19) < 0;\n      if (temp4 == 0xffffffe7 || is_zero != is_unsigned_carry(temp4,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (temp4 == 0xffffffe7 || is_zero != is_unsigned_carry(temp4,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-temp4 & 0xff);\n      temp4 = input1 << (temp4 + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | temp4 << 1) == 0) {\n        result = result & ~(temp4 >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_value_08009054",
            "entrypoint": "0x08009054",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009054": "calculate_floating_point_value_08009054",
                "SBORROW4": "is_signed_borrow",
                "SCARRY4": "is_unsigned_carry",
                "bVar7": "is_zero",
                "bVar8": "flag2",
                "bVar9": "flag3",
                "iVar3": "temp3",
                "iVar5": "temp5",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "temp4",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800919c": {
            "additional_data": {
                "FUN_0800919c": {
                    "calculate_abstraction": 1,
                    "calculate_combination": 1,
                    "calculate_param_result": 2,
                    "calculate_result": 10,
                    "calculate_sign_and_comparison": 1,
                    "check_overflow": 4,
                    "check_overflow_and_apply_logic": 1,
                    "check_overflow_and_sign": 3,
                    "is_param_overflow": 1,
                    "multiply_and_adjust": 1,
                    "multiply_and_check": 2,
                    "multiply_and_check_bounds": 1,
                    "multiply_and_compare": 1,
                    "transform_numbers": 1
                },
                "bVar1": {
                    "has_negative": 1,
                    "is_combined_negative": 2,
                    "is_input_xor_zero": 1,
                    "is_neg_combined": 1,
                    "is_negative": 16,
                    "is_negative_combine": 1,
                    "is_negative_combined": 1,
                    "is_negative_result": 4,
                    "is_negative_xor": 1,
                    "is_positive": 1,
                    "is_result_negative": 1,
                    "is_xor_negative": 1
                },
                "bVar5": {
                    "is_combined_input_zero": 1,
                    "is_combined_vars_zero": 1,
                    "is_combined_zero": 1,
                    "is_operand_a_or_operand_b_zero": 1,
                    "is_result_zero": 1,
                    "is_zero": 20,
                    "is_zero_combine": 1,
                    "is_zero_combined": 1,
                    "is_zero_result": 4
                },
                "combined_values": {
                    "combined_input_values": 1
                },
                "is_negative": {
                    "is_result_negative": 1
                },
                "is_zero": {
                    "is_combined_values_zero": 1
                },
                "param_1": {
                    "input1": 4,
                    "input_1": 14,
                    "input_a": 2,
                    "input_value_1": 1,
                    "multiplier": 1,
                    "num1": 1,
                    "operand_a": 1,
                    "output": 1,
                    "result": 4,
                    "value1": 1
                },
                "param_1_doubled": {
                    "input1_doubled": 1,
                    "input_1_times_two": 1
                },
                "param_1_minus_2_times_input2": {
                    "result_minus_2_times_input2": 1
                },
                "param_1_negated": {
                    "result_negated": 1
                },
                "param_1_or_1": {
                    "result_or_1": 1
                },
                "param_1_shifted": {
                    "shifted_result": 1
                },
                "param_2": {
                    "input2": 5,
                    "input_2": 18,
                    "input_b": 2,
                    "input_value_2": 1,
                    "multiplier_2": 1,
                    "num2": 1,
                    "operand_b": 1,
                    "value2": 1
                },
                "param_2_doubled": {
                    "input_2_times_two": 1
                },
                "return": {
                    "result": 2
                },
                "return_value": {
                    "result": 1
                },
                "uVar2": {
                    "double_input_1": 3,
                    "double_input_a": 1,
                    "doubled_input1": 1,
                    "doubled_input_1": 3,
                    "input1_doubled": 2,
                    "input1_times_2": 2,
                    "input_1_doubled": 5,
                    "input_1_multiplied": 1,
                    "input_1_times_2": 4,
                    "input_1_times_two": 1,
                    "input_a_doubled": 1,
                    "multiplied_input1": 1,
                    "multiplied_input_1": 2,
                    "multiplied_param_1": 1,
                    "num1_doubled": 1,
                    "operand_a_doubled": 1,
                    "value1_doubled": 1
                },
                "uVar3": {
                    "double_input_2": 3,
                    "double_input_b": 1,
                    "doubled_input2": 1,
                    "doubled_input_2": 3,
                    "input2_doubled": 2,
                    "input2_times_2": 2,
                    "input_2_doubled": 5,
                    "input_2_multiplied": 1,
                    "input_2_times_2": 4,
                    "input_2_times_two": 1,
                    "input_b_doubled": 1,
                    "multiplied_input2": 1,
                    "multiplied_input_2": 2,
                    "multiplied_param_2": 1,
                    "num2_doubled": 1,
                    "operand_b_doubled": 1,
                    "value2_doubled": 1
                },
                "uVar4": {
                    "adjusted_param": 1,
                    "bitwise_or": 1,
                    "combined": 1,
                    "combined_input": 6,
                    "combined_inputs": 11,
                    "combined_inputs_bitwise": 1,
                    "combined_inputs_with_lower_bit_cleared": 1,
                    "combined_nums": 1,
                    "combined_result": 2,
                    "combined_value": 2,
                    "combined_values": 2,
                    "combined_vars": 1,
                    "operand_a_or_operand_b": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009204"
            ],
            "code": "\nuint calculate_param_result_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_doubled;\n  uint input_2_doubled;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_doubled = input_1 * 2;\n  input_2_doubled = input_2 * 2;\n  if (((int)input_1_doubled >> 0x18 == -1 || (int)input_2_doubled >> 0x18 == -1) &&\n     ((((int)input_1_doubled >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_doubled >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_doubled | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_doubled + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_doubled <= input_1_doubled) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_doubled > input_1_doubled) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "calculate_param_result_0800919c",
            "entrypoint": "0x0800919c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800919c": "calculate_param_result_0800919c",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "input_1_doubled",
                "uVar3": "input_2_doubled",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091fc": {
            "additional_data": {
                "FUN_080091fc": {
                    "concatenate_and_return": 2,
                    "concatenate_arguments": 1,
                    "concatenate_parameters": 7,
                    "concatenate_params": 21
                },
                "param_1": {
                    "arg1": 1,
                    "dest": 4,
                    "destination": 10,
                    "destination_param": 1,
                    "first_param": 4,
                    "first_parameter": 1,
                    "input1": 2,
                    "input_param1": 1,
                    "input_parameter1": 1,
                    "output_param": 1,
                    "param1": 1,
                    "source": 2,
                    "source_param": 2
                },
                "param_2": {
                    "arg2": 1,
                    "dest_param": 1,
                    "destination": 2,
                    "destination_param": 1,
                    "input2": 2,
                    "input_param": 1,
                    "input_param2": 1,
                    "input_parameter2": 1,
                    "param2": 1,
                    "second_param": 4,
                    "second_parameter": 1,
                    "source": 10,
                    "source_param": 1,
                    "src": 4
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "code": "\nvoid concatenate_params_080091fc(undefined4 destination,undefined4 source)\n\n{\n  concatenate_params_080091fc_08009204(source,destination);\n  return;\n}\n\n",
            "current_name": "concatenate_params_080091fc",
            "entrypoint": "0x080091fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091fc": "concatenate_params_080091fc",
                "param_1": "destination",
                "param_2": "source"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009204": {
            "additional_data": {
                "FUN_08009204": {
                    "combine_parameters": 1,
                    "concatenate_and_return": 1,
                    "concatenate_param": 1,
                    "concatenate_param_values": 3,
                    "concatenate_parameters": 6,
                    "concatenate_params": 19
                },
                "param_1": {
                    "first_param": 15,
                    "first_parameter": 8,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "number1": 1,
                    "param1": 1,
                    "param_value_1": 1,
                    "value1": 3
                },
                "param_2": {
                    "input_param2": 1,
                    "input_param_2": 1,
                    "number2": 1,
                    "param2": 1,
                    "param_value_2": 1,
                    "second_param": 15,
                    "second_parameter": 8,
                    "value2": 3
                }
            },
            "called": [
                "FUN_0800919c"
            ],
            "calling": [
                "FUN_080091fc",
                "FUN_0800923c",
                "FUN_08009214",
                "FUN_08009228"
            ],
            "code": "\nundefined8 concatenate_params_08009204(undefined4 first_param,undefined4 second_param)\n\n{\n  calculate_param_result_0800919c();\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_08009204",
            "entrypoint": "0x08009204",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009204": "concatenate_params_08009204",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009214": {
            "additional_data": {
                "FUN_08009214": {
                    "check_concatenated_params": 1,
                    "check_concatenation_result": 8,
                    "check_if_concatenated_params_exist": 1,
                    "check_if_concatenated_params_not_empty": 3,
                    "check_if_concatenated_string_is_not_empty": 1,
                    "check_if_concatenation_result_is_not_empty": 1,
                    "check_if_concatenation_result_is_not_null": 1,
                    "check_if_concatenation_succeeded": 1,
                    "check_if_concatenation_successful": 1,
                    "check_if_params_concatenated": 2,
                    "check_input_validity": 1,
                    "check_non_empty": 1,
                    "check_non_empty_char": 1,
                    "check_non_empty_string": 1,
                    "check_param_concatenation": 1,
                    "is_concatenation_successful": 3,
                    "is_param_concatenation_successful": 1,
                    "is_parameter_concatenated": 1,
                    "is_string_concatenated": 1
                },
                "concatenate_params_08009204": {
                    "concatenate_parameters": 1
                },
                "in_ZR": {
                    "concatenated_param": 1,
                    "concatenated_params": 1,
                    "concatenated_result": 1,
                    "concatenation_result": 7,
                    "concatenation_result_is_not_empty": 1,
                    "input_char": 3,
                    "input_character": 1,
                    "is_concatenated": 1,
                    "is_not_empty_result": 1,
                    "is_not_null": 1,
                    "result": 8,
                    "result_after_concatenation": 1,
                    "result_of_concatenation": 4
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_080029d8",
                "FUN_08002638"
            ],
            "code": "\nbool check_if_concatenation_result_is_not_null_08009214(void)\n\n{\n  char result;\n  \n  concatenate_parameters();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_concatenation_result_is_not_null_08009214",
            "entrypoint": "0x08009214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009214": "check_if_concatenation_result_is_not_null_08009214",
                "concatenate_params_08009204": "concatenate_parameters",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009228": {
            "additional_data": {
                "FUN_08009228": {
                    "check_if_concatenated_params_are_empty": 4,
                    "check_if_concatenated_string_is_empty": 1,
                    "check_if_concatenation_is_empty": 2,
                    "check_if_concatenation_successful": 1,
                    "check_if_empty": 1,
                    "check_if_input_empty": 1,
                    "check_if_input_is_empty": 1,
                    "check_if_input_is_null_terminated": 1,
                    "check_if_parameters_concatenated": 1,
                    "check_if_string_concatenated": 1,
                    "check_if_string_empty": 5,
                    "check_if_string_is_empty": 1,
                    "is_carry_zero": 1,
                    "is_empty": 1,
                    "is_empty_string": 1,
                    "is_null_string": 1,
                    "is_null_terminated": 7
                },
                "in_CY": {
                    "carry_flag": 1,
                    "character": 1,
                    "concatenated_params": 1,
                    "concatenated_string": 1,
                    "input_char": 7,
                    "input_character": 18,
                    "input_parameter": 1,
                    "termination_char": 1
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_080029d8"
            ],
            "code": "\nbool check_if_concatenated_string_is_empty_08009228(void)\n\n{\n  char input_character;\n  \n  concatenate_params_08009204();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_concatenated_string_is_empty_08009228",
            "entrypoint": "0x08009228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009228": "check_if_concatenated_string_is_empty_08009228",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800923c": {
            "additional_data": {
                "FUN_0800923c": {
                    "check_concatenation": 1,
                    "check_concatenation_result": 9,
                    "check_concatenation_status": 1,
                    "check_conditions": 1,
                    "check_conjunction": 1,
                    "check_consecutive_zeros_and_carry": 1,
                    "check_for_concatenation_errors": 1,
                    "check_if_any_params_are_zero": 1,
                    "check_if_reverse_needed": 1,
                    "check_params_and_concatenate": 1,
                    "check_params_and_return": 1,
                    "check_params_validity": 1,
                    "check_zero_or_carries": 1,
                    "concatenate_and_check": 1,
                    "concatenate_or_skip": 1,
                    "concatenate_params_and_check": 2,
                    "concatenate_params_and_check_conditions": 1,
                    "concatenation_status": 1,
                    "does_concatenation_result_contain_zero": 1,
                    "is_concatenation_invalid": 1,
                    "is_concatenation_successful": 2
                },
                "concatenate_params_08009204": {
                    "concatenate_parameters": 3,
                    "perform_concatenation": 1
                },
                "in_CY": {
                    "carry_bit": 1,
                    "carry_flag": 7,
                    "carry_flag_set": 1,
                    "concatenation_result_carry": 1,
                    "has_carries": 1,
                    "is_carry": 8,
                    "is_carry_flag": 1,
                    "is_carry_flag_set": 3,
                    "is_carry_set": 7,
                    "params_concatenated_successfully": 1
                },
                "in_ZR": {
                    "concatenation_failed": 1,
                    "concatenation_result_zero": 1,
                    "is_zero": 4,
                    "is_zero_flag": 1,
                    "is_zero_flag_set": 1,
                    "is_zero_result": 12,
                    "is_zero_return": 2,
                    "is_zero_returned": 1,
                    "zero_flag": 5,
                    "zero_flag_set": 1,
                    "zero_result": 2
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_08004e30"
            ],
            "code": "\nbool check_concatenation_result_0800923c(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  concatenate_parameters();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "current_name": "check_concatenation_result_0800923c",
            "entrypoint": "0x0800923c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800923c": "check_concatenation_result_0800923c",
                "concatenate_params_08009204": "concatenate_parameters",
                "in_CY": "is_carry",
                "in_ZR": "is_zero_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009250": {
            "additional_data": {
                "FUN_08009250": {
                    "check_concantenation_result": 1,
                    "check_concatenated_params": 3,
                    "check_concatenation_parameters": 1,
                    "check_concatenation_result": 9,
                    "check_concatenation_results": 2,
                    "check_concatenation_success": 3,
                    "check_conditions": 1,
                    "check_params_and_return": 1,
                    "check_zero_cy_or_zr": 1,
                    "concatenate_and_check_flags": 1,
                    "concatenate_and_check_zero": 1,
                    "concatenate_and_evaluate_result": 1,
                    "concatenate_params": 1,
                    "concatenate_params_and_check": 3,
                    "concatenate_params_and_check_conditions": 1,
                    "concatenation_or_operation_result": 1
                },
                "concatenate_params_080091fc": {
                    "concatenate_parameters": 1
                },
                "in_CY": {
                    "carry": 1,
                    "carry_flag": 2,
                    "carry_result": 1,
                    "cy_flag": 1,
                    "is_carry": 8,
                    "is_carry_flag": 1,
                    "is_carry_flag_set": 1,
                    "is_carry_result": 5,
                    "is_carry_set": 7,
                    "is_concatenated": 1,
                    "is_cy_set": 1,
                    "is_cy_zero": 1,
                    "is_not_carry": 1
                },
                "in_ZR": {
                    "is_zero": 8,
                    "is_zero_register": 1,
                    "is_zero_result": 15,
                    "is_zero_return": 2,
                    "is_zr_set": 1,
                    "is_zr_zero": 1,
                    "zero_flag": 1,
                    "zero_result": 1,
                    "zr_flag": 1
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_08001f00"
            ],
            "code": "\nbool check_concatenation_result_08009250(void)\n\n{\n  undefined is_zero_result;\n  undefined is_carry;\n  \n  concatenate_parameters();\n  return !(bool)is_carry || (bool)is_zero_result;\n}\n\n",
            "current_name": "check_concatenation_result_08009250",
            "entrypoint": "0x08009250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009250": "check_concatenation_result_08009250",
                "concatenate_params_080091fc": "concatenate_parameters",
                "in_CY": "is_carry",
                "in_ZR": "is_zero_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009264": {
            "additional_data": {
                "FUN_08009264": {
                    "check_end_of_input": 1,
                    "check_if_concatenated_parameters_are_empty": 1,
                    "check_if_concatenated_params_are_empty": 2,
                    "check_if_concatenated_params_empty": 1,
                    "check_if_concatenating_params_yields_null_termination": 1,
                    "check_if_concatenation_empty": 3,
                    "check_if_concatenation_failed": 1,
                    "check_if_concatenation_is_empty": 1,
                    "check_if_concatenation_successful": 1,
                    "check_if_string_empty": 1,
                    "check_null_termination": 3,
                    "check_string_termination": 2,
                    "is_c_string_empty": 1,
                    "is_concatenation_empty": 1,
                    "is_concatenation_successful": 2,
                    "is_cy_null": 1,
                    "is_empty_string": 2,
                    "is_end_of_string": 1,
                    "is_null_terminated": 1,
                    "is_null_terminated_string": 1,
                    "is_string_empty": 3
                },
                "concatenate_params_080091fc": {
                    "concatenate_parameters": 2,
                    "concatenate_params": 1
                },
                "in_CY": {
                    "char_to_check": 2,
                    "character": 1,
                    "concatenated_string": 2,
                    "concatenated_string_result": 1,
                    "concatenation_result": 2,
                    "current_char": 1,
                    "current_character": 1,
                    "input_char": 12,
                    "input_character": 8,
                    "input_string": 1
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_08003004",
                "FUN_080029d8"
            ],
            "code": "\nbool is_c_string_empty_08009264(void)\n\n{\n  char input_char;\n  \n  concatenate_parameters();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "is_c_string_empty_08009264",
            "entrypoint": "0x08009264",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009264": "is_c_string_empty_08009264",
                "concatenate_params_080091fc": "concatenate_parameters",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009278": {
            "additional_data": {
                "FUN_08009278": {
                    "convert_and_extract_value": 1,
                    "convert_and_limit_value": 1,
                    "convert_to_fixed_point": 1,
                    "convert_to_negative": 1,
                    "convert_to_positive_integer": 1,
                    "convert_to_signed_int": 1,
                    "convert_to_signed_integer": 1,
                    "convert_to_twos_complement": 1,
                    "convert_unsigned_integer_to_int": 1,
                    "decode_and_convert": 1,
                    "decode_integer": 1,
                    "decode_number": 1,
                    "decode_signed_integer": 1,
                    "decode_signed_number": 1,
                    "decode_uint": 1,
                    "extract_and_convert_bits": 1,
                    "extract_and_scale_value": 1,
                    "extract_integer": 1,
                    "extract_integer_from_binary": 2,
                    "extract_integer_from_param": 1,
                    "extract_value": 1,
                    "extract_value_from_uint": 1,
                    "reverse_and_adjust": 1,
                    "reverse_data": 1,
                    "reverse_integer": 2,
                    "reverse_number": 2,
                    "transform_number": 1
                },
                "param_1": {
                    "binary_value": 1,
                    "extracted_value": 1,
                    "input": 7,
                    "input_data": 1,
                    "input_num": 1,
                    "input_number": 4,
                    "input_value": 13,
                    "modified_input_value": 1,
                    "number": 1,
                    "value": 1
                },
                "param_1_1": {
                    "bit_mask": 1
                },
                "param_1_2": {
                    "zero_mask": 1
                },
                "param_2": {
                    "flag": 1
                },
                "uVar1": {
                    "converted_value": 2,
                    "left_shifted_number": 1,
                    "modified_value": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shifted_bits": 6,
                    "shifted_input": 2,
                    "shifted_number": 3,
                    "shifted_value": 14
                },
                "uVar2": {
                    "adjusted_offset": 1,
                    "adjusted_value": 1,
                    "diff_value": 1,
                    "difference": 17,
                    "difference_value": 1,
                    "scaling_factor": 1,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "shift_difference": 1,
                    "shifted_bits_difference": 1,
                    "shifted_value": 1,
                    "subtract_value": 1,
                    "transformed_value": 1
                },
                "uVar3": {
                    "computed_value": 1,
                    "converted_value": 1,
                    "masked_shifted_value": 1,
                    "new_value": 1,
                    "result": 1,
                    "shifted": 1,
                    "shifted_and_converted": 1,
                    "shifted_and_masked_value": 1,
                    "shifted_bits": 1,
                    "shifted_data": 1,
                    "shifted_input": 1,
                    "shifted_number": 1,
                    "shifted_result": 1,
                    "shifted_value": 3
                },
                "uVar4": {
                    "converted_num": 1,
                    "converted_value": 1,
                    "negated_number": 1,
                    "result": 5,
                    "shifted_negative": 1,
                    "shifted_sign": 1,
                    "sign_extension": 1
                },
                "uVar5": {
                    "mask": 1,
                    "result": 1,
                    "shifted_masked_input": 1,
                    "sign_extended_input": 1
                },
                "uVar6": {
                    "negative_output": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003826",
                "FUN_08003b98"
            ],
            "code": "\nuint extract_integer_from_binary_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "extract_integer_from_binary_08009278",
            "entrypoint": "0x08009278",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009278": "extract_integer_from_binary_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009318": {
            "additional_data": {
                "FUN_08009318": {
                    "calculate_double_precision": 5,
                    "calculate_double_precision_value": 1,
                    "calculate_longlong_value": 1,
                    "calculate_new_value": 1,
                    "calculate_precision_result": 1,
                    "calculate_result": 17,
                    "calculate_result_from_parameters": 1,
                    "calculate_result_with_precision": 2,
                    "convert_to_double": 2
                },
                "bVar4": {
                    "carry": 12,
                    "carry_flag": 17,
                    "carry_overflow": 1,
                    "is_carry": 1
                },
                "iVar1": {
                    "check_result": 1,
                    "is_empty": 20,
                    "is_empty_check": 1,
                    "is_empty_str": 1,
                    "is_string_empty": 4,
                    "string_check": 2,
                    "string_empty_check_result": 1
                },
                "lVar6": {
                    "converted_value": 1,
                    "final_result": 18,
                    "final_value": 2,
                    "new_value": 1,
                    "output": 5,
                    "output_result": 1,
                    "result": 2,
                    "result_value": 1
                },
                "param_1": {
                    "input1": 8,
                    "input_1": 7,
                    "input_param1": 3,
                    "input_param_1": 4,
                    "input_parameter_1": 1,
                    "input_val_1": 1,
                    "input_value1": 1,
                    "input_value_1": 2,
                    "num1": 1,
                    "value1": 3
                },
                "param_2": {
                    "input2": 8,
                    "input_2": 7,
                    "input_param2": 3,
                    "input_param_2": 4,
                    "input_parameter_2": 1,
                    "input_val_2": 1,
                    "input_value2": 1,
                    "input_value_2": 2,
                    "num2": 1,
                    "value2": 3
                },
                "param_3": {
                    "constant_1": 4,
                    "constant_param1": 1,
                    "input_param_3": 2,
                    "input_parameter_3": 1,
                    "new_param_3": 1,
                    "param3": 11,
                    "param_3": 4,
                    "temp_1": 1,
                    "unused_param": 2,
                    "unused_param3": 1,
                    "unused_param_1": 3
                },
                "param_4": {
                    "constant_2": 4,
                    "constant_param2": 1,
                    "input_param_4": 2,
                    "input_parameter_4": 1,
                    "new_param_4": 1,
                    "param4": 11,
                    "param_4": 4,
                    "temp_2": 1,
                    "unused_param": 2,
                    "unused_param4": 1,
                    "unused_param_2": 3
                },
                "uVar2": {
                    "delta_value": 1,
                    "difference": 4,
                    "exponent": 2,
                    "exponent_diff": 1,
                    "exponent_difference": 1,
                    "shift_amount": 8,
                    "shift_count": 2,
                    "shift_val": 1,
                    "shift_value": 2,
                    "shifted_bits": 7,
                    "shifted_count": 1,
                    "shifted_difference": 1
                },
                "uVar3": {
                    "bit_mask": 3,
                    "bit_shift": 1,
                    "bitmask": 2,
                    "mask": 20,
                    "mask_value": 1,
                    "right_shifted_val": 1,
                    "shifted_bits": 2,
                    "shifted_val": 1
                },
                "uVar5": {
                    "double_precision_result": 1,
                    "precision_result": 1,
                    "result": 29
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08002c18"
            ],
            "code": "\nlonglong calculate_result_with_precision_08009318(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int is_empty;\n  uint shift_amount;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong final_result;\n  \n  mask = (input2 << 1) >> 0x15;\n  shift_amount = mask - 0x3ff;\n  if ((int)shift_amount < 0x14) {\n    if ((int)shift_amount < 0) {\n      result = calculate_double_precision_result_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      is_empty = check_if_string_is_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input2,input1);\n      if (is_empty != 0) {\n        if ((int)input2 < 0) {\n          final_result = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          final_result = 0;\n        }\n        else {\n          final_result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shift_amount & 0xff);\n      final_result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = calculate_double_precision_result_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n        is_empty = check_if_string_is_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        final_result = CONCAT44(input2,input1);\n        if (is_empty != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (shift_amount & 0xff));\n          }\n          final_result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shift_amount < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result = calculate_double_precision_result_080082d4(input1,input2,0x8800759c,0x7e37e43c,param4);\n      is_empty = check_if_string_is_empty_08008b60((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input2,input1);\n      if (is_empty != 0) {\n        if (0 < (int)input2) {\n          if (shift_amount == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shift_amount = 1 << (0x34 - shift_amount & 0xff);\n            carry_flag = CARRY4(shift_amount,input1);\n            input1 = shift_amount + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input2,input1);\n    if (shift_amount == 0x400) {\n      final_result = calculate_double_precision_result_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_result_with_precision_08009318",
            "entrypoint": "0x08009318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009318": "calculate_result_with_precision_08009318",
                "bVar4": "carry_flag",
                "iVar1": "is_empty",
                "lVar6": "final_result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "shift_amount",
                "uVar3": "mask",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009410": {
            "additional_data": {
                "FUN_08009410": {
                    "calculate": 1,
                    "calculate_final_result": 1,
                    "calculate_improved_result": 6,
                    "calculate_improved_value": 1,
                    "calculate_result": 17,
                    "improve_result": 1,
                    "improved_calculate_result": 3,
                    "improved_calculated_result": 1
                },
                "calculate_improved_result_08009d78": {
                    "improved_result_1": 1
                },
                "calculate_improved_result_0800adf0": {
                    "improved_result_2": 1
                },
                "calculate_improved_result_from_binary_0800a348": {
                    "improved_result_3": 1
                },
                "local_20": {
                    "arg3": 1,
                    "calculated_value3": 1,
                    "calculation_result_3": 1,
                    "data_3": 1,
                    "internal_value_3": 1,
                    "local_var3": 1,
                    "local_var_3": 1,
                    "result3": 2,
                    "result_3": 6,
                    "temp2": 1,
                    "temp3": 4,
                    "temp_3": 3,
                    "temp_result_3": 4,
                    "temp_var3": 2,
                    "var3": 2
                },
                "local_28": {
                    "arg1": 1,
                    "calculated_value1": 1,
                    "calculation_result_1": 1,
                    "data_1": 1,
                    "internal_value_1": 1,
                    "local_var1": 1,
                    "local_var_1": 1,
                    "result": 1,
                    "result1": 2,
                    "result_1": 6,
                    "temp1": 4,
                    "temp_1": 3,
                    "temp_result_1": 4,
                    "temp_var1": 2,
                    "var1": 2
                },
                "param_1": {
                    "arg1": 2,
                    "input1": 4,
                    "input_1": 4,
                    "input_data": 2,
                    "input_param": 4,
                    "input_param_1": 2,
                    "input_value": 8,
                    "input_value_1": 2,
                    "result": 2,
                    "value1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "flag": 2,
                    "flags": 2,
                    "input2": 4,
                    "input_2": 4,
                    "input_flag": 1,
                    "input_mask": 1,
                    "input_param_2": 2,
                    "input_size": 2,
                    "input_value": 5,
                    "input_value_2": 2,
                    "mask_value": 1,
                    "other_value": 1,
                    "value": 1,
                    "value2": 1
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 1
                },
                "uStack_1c": {
                    "arg4": 1,
                    "calculated_value4": 1,
                    "calculation_result_4": 1,
                    "data_4": 1,
                    "internal_value_4": 1,
                    "local_var4": 1,
                    "local_var_4": 1,
                    "result4": 2,
                    "result_4": 6,
                    "temp3": 1,
                    "temp4": 4,
                    "temp_4": 3,
                    "temp_result_4": 4,
                    "temp_var4": 2,
                    "var4": 2
                },
                "uStack_24": {
                    "arg2": 1,
                    "calculated_value2": 1,
                    "calculation_result_2": 1,
                    "data_2": 1,
                    "internal_value_2": 1,
                    "local_var2": 1,
                    "local_var_2": 1,
                    "result2": 2,
                    "result_2": 6,
                    "temp1": 1,
                    "temp2": 4,
                    "temp_2": 3,
                    "temp_result_2": 4,
                    "temp_var2": 2,
                    "var2": 2
                },
                "uVar1": {
                    "final_result": 8,
                    "improved_result": 1,
                    "output_value": 1,
                    "result": 20
                },
                "uVar2": {
                    "bit_result": 1,
                    "calculation_result": 1,
                    "calculation_type": 4,
                    "condition": 3,
                    "condition_result": 1,
                    "flag": 2,
                    "improved_result": 2,
                    "mask": 2,
                    "operation_type": 2,
                    "result_category": 1,
                    "result_code": 1,
                    "result_flag": 1,
                    "result_mod": 1,
                    "result_modifier": 1,
                    "result_state": 1,
                    "result_type": 4,
                    "status": 2
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 improved_calculate_result_08009410(undefined4 input_value,uint input_value)\n\n{\n  undefined4 result;\n  uint result_type;\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      result_type = improved_result_1(input_value,input_value,&result_1);\n      result_type = result_type & 3;\n      if (result_type == 1) {\n        result = improved_result_2(result_1,result_2,result_3,result_4,1);\n      }\n      else if (result_type == 2) {\n        result = improved_result_3(result_1,result_2,result_3,result_4);\n      }\n      else if (result_type == 0) {\n        result = improved_result_3(result_1,result_2,result_3,result_4);\n      }\n      else {\n        result = improved_result_2(result_1,result_2,result_3,result_4,1);\n      }\n    }\n    else {\n      result = reverse_bits_080082d0(input_value,input_value,input_value,input_value);\n    }\n    return result;\n  }\n  result = improved_result_3(input_value,input_value,0,0);\n  return result;\n}\n\n",
            "current_name": "improved_calculate_result_08009410",
            "entrypoint": "0x08009410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009410": "improved_calculate_result_08009410",
                "calculate_improved_result_08009d78": "improved_result_1",
                "calculate_improved_result_0800adf0": "improved_result_2",
                "calculate_improved_result_from_binary_0800a348": "improved_result_3",
                "local_20": "result_3",
                "local_28": "result_1",
                "param_1": "input_value",
                "param_2": "input_value",
                "reverse_bits_080082d0": "reverse_bits",
                "uStack_1c": "result_4",
                "uStack_24": "result_2",
                "uVar1": "result",
                "uVar2": "result_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094c0": {
            "additional_data": {
                "FUN_080094c0": {
                    "calculate_double_precision": 4,
                    "calculate_double_precision_results": 1,
                    "calculate_longlong_result": 1,
                    "calculate_precise_result": 1,
                    "calculate_precision_result": 2,
                    "calculate_result": 17,
                    "calculate_result_with_precision": 3
                },
                "bVar4": {
                    "carry": 7,
                    "carry_bit": 1,
                    "carry_flag": 22,
                    "is_carry": 1
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 1
                },
                "check_if_string_is_empty_08008b60": {
                    "check_if_string_is_empty": 1
                },
                "iVar1": {
                    "is_empty": 12,
                    "is_empty_flag": 1,
                    "is_empty_string": 1,
                    "is_string_empty": 2,
                    "result": 1,
                    "result_1": 1,
                    "string_check": 4,
                    "string_check_result": 2,
                    "string_empty_check": 3,
                    "string_empty_check_result": 1,
                    "string_is_empty": 1,
                    "string_length": 1
                },
                "lVar6": {
                    "combined_result": 4,
                    "combined_values": 1,
                    "concatenated_result": 1,
                    "final_result": 11,
                    "output": 4,
                    "output_val": 1,
                    "output_value": 2,
                    "result": 7
                },
                "param_1": {
                    "input1": 5,
                    "input_1": 13,
                    "input_param": 1,
                    "input_param1": 2,
                    "input_param_1": 3,
                    "input_val1": 1,
                    "input_value_1": 1,
                    "num1": 1,
                    "operand_1": 1,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "input2": 5,
                    "input_2": 13,
                    "input_param2": 2,
                    "input_param_2": 3,
                    "input_val2": 1,
                    "input_value_2": 1,
                    "num2": 1,
                    "operand_2": 1,
                    "shift_value": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "additional_param_1": 1,
                    "constant_1": 5,
                    "input_3": 1,
                    "param1": 1,
                    "param3": 6,
                    "param_3": 6,
                    "parameter_3": 1,
                    "some_param": 1,
                    "unknown_param_1": 1,
                    "unused_param": 1,
                    "unused_param1": 1,
                    "unused_param3": 1,
                    "unused_param_1": 4
                },
                "param_4": {
                    "additional_param_2": 1,
                    "another_param": 1,
                    "another_unused_param": 1,
                    "constant_2": 5,
                    "input_4": 1,
                    "param2": 1,
                    "param4": 6,
                    "param_4": 6,
                    "parameter_4": 1,
                    "unknown_param_2": 1,
                    "unused_param2": 1,
                    "unused_param4": 1,
                    "unused_param_2": 4
                },
                "uVar2": {
                    "bit_shifted_param_2": 1,
                    "diff_from0x3ff": 1,
                    "diff_value": 1,
                    "difference": 2,
                    "exponent_diff": 2,
                    "exponent_difference": 1,
                    "shift_amount": 5,
                    "shift_count": 1,
                    "shift_value": 1,
                    "shifted_amount": 2,
                    "shifted_bits": 8,
                    "shifted_bits_diff": 1,
                    "shifted_difference": 2,
                    "shifted_value": 3
                },
                "uVar3": {
                    "approximation": 1,
                    "bit_mask": 3,
                    "bitmask": 2,
                    "mask": 12,
                    "mask_value": 1,
                    "shifted": 1,
                    "shifted_bits": 3,
                    "shifted_bits_2": 1,
                    "shifted_input2": 2,
                    "shifted_input_2": 1,
                    "shifted_value": 3,
                    "trailing_ones_mask": 1
                },
                "uVar5": {
                    "double_precision_result": 7,
                    "double_result": 2,
                    "precision_result": 2,
                    "result": 20
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_08002408",
                "FUN_0800a5a0",
                "FUN_08002c18"
            ],
            "code": "\nlonglong calculate_result_with_precision_080094c0(uint input_1,uint input_2,undefined4 param3,undefined4 param_4)\n\n{\n  int is_empty;\n  uint shifted_bits;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong final_result;\n  \n  mask = (input_2 << 1) >> 0x15;\n  shifted_bits = mask - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      result = calculate_double_precision_result_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,param_4);\n      is_empty = check_if_string_is_empty((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_empty != 0) {\n        if ((int)input_2 < 0) {\n          if ((input_1 | input_2 & 0x7fffffff) != 0) {\n            input_2 = 0xbff00000;\n          }\n          final_result = (ulonglong)input_2 << 0x20;\n        }\n        else {\n          final_result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_bits & 0xff);\n      final_result = CONCAT44(input_2,input_1);\n      if ((input_2 & mask | input_1) != 0) {\n        result = calculate_double_precision_result_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,param_4);\n        is_empty = check_if_string_is_empty((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        final_result = CONCAT44(input_2,input_1);\n        if (is_empty != 0) {\n          if ((int)input_2 < 0) {\n            input_2 = input_2 + (0x100000 >> (shifted_bits & 0xff));\n          }\n          final_result = (ulonglong)(input_2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_bits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    final_result = CONCAT44(input_2,input_1);\n    if ((mask & input_1) != 0) {\n      result = calculate_double_precision_result_080082d4(input_1,input_2,0x8800759c,0x7e37e43c,param_4);\n      is_empty = check_if_string_is_empty((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      final_result = CONCAT44(input_2,input_1);\n      if (is_empty != 0) {\n        if ((int)input_2 < 0) {\n          if (shifted_bits == 0x14) {\n            input_2 = input_2 + 1;\n          }\n          else {\n            shifted_bits = 1 << (0x34 - shifted_bits & 0xff);\n            carry_flag = CARRY4(shifted_bits,input_1);\n            input_1 = shifted_bits + input_1;\n            if (carry_flag != false) {\n              input_2 = input_2 + 1;\n            }\n          }\n        }\n        final_result = CONCAT44(input_2,input_1 & ~mask);\n      }\n    }\n  }\n  else {\n    final_result = CONCAT44(input_2,input_1);\n    if (shifted_bits == 0x400) {\n      final_result = calculate_double_precision_result_080082d4();\n    }\n  }\n  return final_result;\n}\n\n",
            "current_name": "calculate_result_with_precision_080094c0",
            "entrypoint": "0x080094c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094c0": "calculate_result_with_precision_080094c0",
                "bVar4": "carry_flag",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "check_if_string_is_empty_08008b60": "check_if_string_is_empty",
                "iVar1": "is_empty",
                "lVar6": "final_result",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "param3",
                "uVar2": "shifted_bits",
                "uVar3": "mask",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080095b8": {
            "additional_data": {
                "FUN_080095b8": {
                    "calculate_multiplied_value": 2,
                    "calculate_param_value": 1,
                    "calculate_parameter_result": 1,
                    "calculate_product": 5,
                    "calculate_result": 12,
                    "calculate_scaled_value": 2,
                    "calculate_shifted_value": 1,
                    "calculate_unsigned_result": 1,
                    "calculate_updated_value": 2,
                    "calculate_value": 2,
                    "calculate_value_with_sign": 1,
                    "compute_result": 1
                },
                "iVar4": {
                    "result": 3,
                    "return_value": 1,
                    "sign": 24,
                    "sign_factor": 1,
                    "sign_indicator": 1,
                    "sign_value": 1
                },
                "param_1": {
                    "input1": 2,
                    "input_1": 9,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "input_value": 2,
                    "input_value1": 2,
                    "input_value_1": 8,
                    "multiplier": 4,
                    "value_1": 1
                },
                "param_2": {
                    "input2": 2,
                    "input_2": 9,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "input_value2": 2,
                    "input_value_2": 8,
                    "multiplicand": 4,
                    "scaling_factor": 1,
                    "shift_amount": 1,
                    "value_2": 1
                },
                "uVar1": {
                    "bit_shift_value": 1,
                    "bit_shifted_value": 1,
                    "bitwise_shifted_value": 1,
                    "carry": 4,
                    "carry_mask": 1,
                    "half_bitmask": 1,
                    "mask": 2,
                    "shifted_bit": 1,
                    "shifted_bits": 2,
                    "shifted_input": 1,
                    "shifted_param": 1,
                    "shifted_value": 3,
                    "temp1": 3,
                    "temp_1": 5,
                    "temp_var_1": 2,
                    "temporary_value_1": 1,
                    "tmp1": 1
                },
                "uVar2": {
                    "shift_amount": 4,
                    "shifted_amount": 2,
                    "shifted_bits": 3,
                    "shifted_bits_2": 1,
                    "shifted_factor": 1,
                    "shifted_input": 1,
                    "shifted_input2": 2,
                    "shifted_input_2": 2,
                    "shifted_input_value2": 2,
                    "shifted_multiplicand": 1,
                    "shifted_param_2": 1,
                    "shifted_parameter": 1,
                    "shifted_value": 6,
                    "temp2": 1,
                    "temp_2": 3
                },
                "uVar3": {
                    "modified_input1": 1,
                    "modified_input_2": 1,
                    "modified_input_value1": 1,
                    "product": 1,
                    "result": 24,
                    "temp3": 1,
                    "temp_3": 1,
                    "updated_value": 1
                },
                "uVar5": {
                    "difference": 14,
                    "exponent": 4,
                    "exponent_diff": 2,
                    "exponent_difference": 1,
                    "param2_difference": 1,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "shifted_amount": 1,
                    "shifted_difference": 1,
                    "temp": 1,
                    "temp4": 1,
                    "temp_3": 1,
                    "temp_4": 1,
                    "u_var5": 1
                }
            },
            "called": [
                "FUN_08008ba0"
            ],
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "code": "\nint calculate_parameter_result_080095b8(uint input_1,uint input_2)\n\n{\n  uint temp_1;\n  uint shifted_value;\n  uint result;\n  int sign;\n  uint difference;\n  \n  shifted_value = (input_2 << 1) >> 0x15;\n  difference = shifted_value - 0x3ff;\n  if ((int)input_2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input_2 & 0xfffff | 0x100000;\n  if ((int)difference < 0x14) {\n    if ((int)difference < 0) {\n      if (difference != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (difference & 0xff)) >> (0x14 - difference & 0xff);\n  }\n  else {\n    if (0x1e < difference) {\n      sign = calculate_parameter_value_08008ba0();\n      return sign;\n    }\n    if ((int)difference < 0x34) {\n      temp_1 = 0x80000000 >> (shifted_value - 0x413 & 0xff);\n      if (CARRY4(temp_1,input_1) != false) {\n        result = result + 1;\n      }\n      result = result << (shifted_value - 0x413 & 0xff);\n      if (difference != 0x14) {\n        result = result | temp_1 + input_1 >> (0x34 - difference & 0xff);\n      }\n    }\n    else {\n      result = result << (shifted_value - 0x413 & 0xff) | input_1 << (shifted_value - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "current_name": "calculate_parameter_result_080095b8",
            "entrypoint": "0x080095b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080095b8": "calculate_parameter_result_080095b8",
                "iVar4": "sign",
                "param_1": "input_1",
                "param_2": "input_2",
                "uVar1": "temp_1",
                "uVar2": "shifted_value",
                "uVar3": "result",
                "uVar5": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009654": {
            "additional_data": {
                "CARRY4": {
                    "carry": 1,
                    "carry4": 1,
                    "carry_add_check": 1,
                    "check_carry": 1,
                    "is_carry_set": 1
                },
                "FUN_08009654": {
                    "calculate_double_precision": 12,
                    "calculate_double_precision_result": 3,
                    "calculate_double_precision_value": 2,
                    "calculate_float_precision_result": 1,
                    "calculate_precision_value": 1,
                    "calculate_result": 1,
                    "convert_to_double": 3,
                    "convert_to_double_precision": 3,
                    "convert_to_long_long": 1,
                    "decode_float": 1,
                    "parse_double": 1,
                    "perform_floating_point_conversion": 1,
                    "process_float_to_double": 1
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 4
                },
                "lVar3": {
                    "concatenated_result": 1,
                    "converted_result": 1,
                    "result": 29
                },
                "lVar3_2": {
                    "result_if": 1
                },
                "param_1": {
                    "exponent": 1,
                    "first_param": 1,
                    "input1": 6,
                    "input_1": 5,
                    "input_a": 1,
                    "input_factor": 1,
                    "input_high": 1,
                    "input_integer1": 1,
                    "input_low": 1,
                    "input_param1": 1,
                    "input_upper": 1,
                    "input_value_1": 4,
                    "integer_part": 3,
                    "mantissa": 2,
                    "num1": 2
                },
                "param_2": {
                    "exponent": 2,
                    "fraction": 1,
                    "fraction_part": 1,
                    "fractional_part": 2,
                    "input2": 6,
                    "input_2": 5,
                    "input_high": 1,
                    "input_integer2": 1,
                    "input_low": 1,
                    "input_lower": 1,
                    "input_param2": 1,
                    "input_value": 1,
                    "input_value_2": 4,
                    "new_result": 1,
                    "num2": 2,
                    "second_param": 1
                },
                "uVar1": {
                    "adjusted_exponent": 1,
                    "diff_from1023": 1,
                    "diff_value": 1,
                    "difference": 1,
                    "exponent": 2,
                    "exponent_diff": 5,
                    "exponent_difference": 3,
                    "mask_value": 1,
                    "offset": 1,
                    "shift_amount": 2,
                    "shift_count": 1,
                    "shift_diff": 1,
                    "shifted_amount": 1,
                    "shifted_bits": 5,
                    "shifted_diff": 2,
                    "shifted_minus_0x3ff": 1,
                    "shifted_value": 2
                },
                "uVar10": {
                    "add_mask": 1
                },
                "uVar1_2": {
                    "carry_mask": 1
                },
                "uVar1_3": {
                    "ones_mask": 1
                },
                "uVar1_4": {
                    "carry_result": 1
                },
                "uVar2": {
                    "mask": 9,
                    "shift_amount": 3,
                    "shift_value": 1,
                    "shifted": 1,
                    "shifted_bits_mask": 1,
                    "shifted_exp": 1,
                    "shifted_exponent": 5,
                    "shifted_input2": 2,
                    "shifted_low": 1,
                    "shifted_lower": 1,
                    "shifted_num2": 1,
                    "shifted_offset": 1,
                    "shifted_param2": 1,
                    "shifted_result": 2,
                    "shifted_value": 1
                },
                "uVar2_10": {
                    "ones_mask2": 1
                },
                "uVar2_2": {
                    "mask1": 1
                },
                "uVar2_3": {
                    "mask2": 1
                },
                "uVar2_4": {
                    "mask3": 1
                },
                "uVar2_5": {
                    "mask4": 1
                },
                "uVar2_6": {
                    "carry_shift": 1
                },
                "uVar2_7": {
                    "shift_amount": 1
                },
                "uVar2_8": {
                    "mask5": 1
                },
                "uVar2_9": {
                    "shift_amount2": 1
                },
                "uVar3": {
                    "exponent_diff_minus_0x3ff": 1,
                    "shifted_val": 1
                },
                "uVar4": {
                    "mask": 1,
                    "shifted_value_mask": 1
                },
                "uVar5": {
                    "exponent_flag": 1,
                    "flag": 1
                },
                "uVar6": {
                    "carry_mask": 1
                },
                "uVar7": {
                    "shifted_result_mask": 1
                },
                "uVar8": {
                    "shift_mask": 1
                },
                "uVar9": {
                    "high_bits_mask": 1
                },
                "xC": {
                    "constant_1": 1
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08004e30"
            ],
            "code": "\nlonglong calculate_double_precision_result_08009654(uint input1,uint input2)\n\n{\n  uint shifted_bits;\n  uint mask;\n  longlong result;\n  \n  result = CONCAT44(input2,input1);\n  mask = (input2 << 1) >> 0x15;\n  shifted_bits = mask - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      input2 = input2 & 0x80000000;\n      if (shifted_bits == 0xffffffff) {\n        input2 = input2 | 0x3ff00000;\n      }\n      result = (ulonglong)input2 << 0x20;\n    }\n    else {\n      mask = 0xfffff >> (shifted_bits & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = (ulonglong)(input2 + (0x80000 >> (shifted_bits & 0xff)) & ~mask) << 0x20;\n      }\n    }\n  }\n  else if ((int)shifted_bits < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    if ((input1 & mask) != 0) {\n      shifted_bits = 1 << (0x33 - shifted_bits & 0xff);\n      if (carry4(input1,shifted_bits) != false) {\n        input2 = input2 + 1;\n      }\n      result = CONCAT44(input2,input1 + shifted_bits & ~mask);\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (shifted_bits == 0x400) {\n      result = calculate_double_precision_result_08009654();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_double_precision_result_08009654",
            "entrypoint": "0x08009654",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_08009654": "calculate_double_precision_result_08009654",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "lVar3": "result",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shifted_bits",
                "uVar2": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e8": {
            "additional_data": {
                "FUN_080096e8": {
                    "calculate_improved_result": 7,
                    "calculate_improved_value": 4,
                    "calculate_output": 1,
                    "calculate_result": 13,
                    "calculate_result_with_improved_accuracy": 1,
                    "improved_calculate": 1,
                    "improved_calculate_result": 2,
                    "improved_calculation": 1,
                    "process_binary_input": 1
                },
                "calculate_improved_result_08009d78": {
                    "calculate_result_1": 3,
                    "improved_calculation_1": 1
                },
                "calculate_improved_result_0800adf0": {
                    "calculate_result_2": 2,
                    "calculate_result_3": 1,
                    "improved_calculation_3": 1
                },
                "calculate_improved_result_from_binary_0800a348": {
                    "calculate_result_2": 1,
                    "calculate_result_from_binary": 2,
                    "improved_calculation_2": 1
                },
                "local_20": {
                    "another_result": 1,
                    "binary_result": 1,
                    "calculation_value_3": 1,
                    "intermediate_value_3": 2,
                    "local_value": 1,
                    "output_value": 1,
                    "result3": 2,
                    "result_2": 1,
                    "result_3": 4,
                    "result_val_3": 2,
                    "result_value_3": 2,
                    "result_var3": 1,
                    "result_var_2": 1,
                    "temp2": 1,
                    "temp_3": 1,
                    "temp_result3": 1,
                    "temp_value3": 1,
                    "temp_value_3": 1,
                    "temp_var3": 1,
                    "temp_var_3": 1,
                    "temporary_value_3": 1,
                    "var1": 1,
                    "var3": 2
                },
                "local_28": {
                    "calculation_value_1": 1,
                    "improved_result": 2,
                    "intermediate_result": 1,
                    "intermediate_value_1": 2,
                    "result": 2,
                    "result1": 2,
                    "result_1": 5,
                    "result_val_1": 2,
                    "result_value": 1,
                    "result_value_1": 2,
                    "result_var": 1,
                    "result_var1": 1,
                    "temp_1": 1,
                    "temp_result1": 1,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_var1": 1,
                    "temp_var_1": 1,
                    "temporary_value": 1,
                    "var1": 2
                },
                "param_1": {
                    "arg1": 1,
                    "input": 1,
                    "input_1": 2,
                    "input_param": 10,
                    "input_value": 14,
                    "input_value_1": 3
                },
                "param_2": {
                    "arg2": 1,
                    "binary_value": 1,
                    "bit_flag": 1,
                    "bitmask": 2,
                    "flag_value": 1,
                    "flags": 3,
                    "input_2": 2,
                    "input_flag": 2,
                    "input_mask": 1,
                    "input_number": 1,
                    "input_size": 1,
                    "input_value": 9,
                    "input_value_2": 3,
                    "mask": 2,
                    "value": 1
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 4
                },
                "uStack_1c": {
                    "another_stack_var": 1,
                    "binary_result_storage": 1,
                    "calculation_value_4": 1,
                    "intermediate_value_4": 2,
                    "result4": 2,
                    "result_4": 4,
                    "result_val_4": 2,
                    "result_value_4": 2,
                    "result_var4": 1,
                    "stack_value_2": 1,
                    "stack_var_2": 1,
                    "temp3": 1,
                    "temp_4": 1,
                    "temp_flag": 1,
                    "temp_result4": 1,
                    "temp_value4": 1,
                    "temp_value_4": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1,
                    "temporary_value_4": 1,
                    "unused_param_2": 1,
                    "var2": 1,
                    "var4": 2
                },
                "uStack_24": {
                    "calculation_value_2": 1,
                    "improved_result_storage": 1,
                    "intermediate_value_2": 2,
                    "result2": 2,
                    "result_2": 4,
                    "result_val_2": 2,
                    "result_value_2": 2,
                    "result_var2": 1,
                    "stack_value_1": 1,
                    "stack_var": 1,
                    "stack_var_1": 1,
                    "temp1": 1,
                    "temp_2": 1,
                    "temp_result2": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 1,
                    "temporary_value": 1,
                    "temporary_value_2": 1,
                    "unused_param": 1,
                    "var2": 2
                },
                "uVar1": {
                    "final_result": 4,
                    "improved_result": 5,
                    "improved_value": 2,
                    "output_value": 2,
                    "result": 15
                },
                "uVar2": {
                    "calculated_result": 1,
                    "calculation_code": 1,
                    "calculation_flag": 2,
                    "calculation_type": 3,
                    "comparison_value": 1,
                    "condition": 2,
                    "flag": 2,
                    "function_result": 1,
                    "improved_flags": 1,
                    "improved_result": 1,
                    "mask_result": 1,
                    "operation": 1,
                    "output_size": 1,
                    "result2_code": 1,
                    "result_flag": 1,
                    "result_flags": 1,
                    "result_type": 6,
                    "temp_result": 1
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800adf0",
                "FUN_08009d78",
                "FUN_0800a348"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 calculate_result_with_improved_accuracy_080096e8(undefined4 input_value,uint input_value)\n\n{\n  undefined4 result;\n  uint result_type;\n  undefined4 result_1;\n  undefined4 result_2;\n  undefined4 result_3;\n  undefined4 result_4;\n  \n  if (0x3fe921fb < (input_value & 0x7fffffff)) {\n    if ((input_value & 0x7fffffff) < 0x7ff00000) {\n      result_type = calculate_result_1(input_value,input_value,&result_1);\n      result_type = result_type & 3;\n      if (result_type == 1) {\n        result = calculate_result_from_binary(result_1,result_2,result_3,result_4);\n      }\n      else if (result_type == 2) {\n        result = calculate_result_2(result_1,result_2,result_3,result_4,1);\n      }\n      else if (result_type == 0) {\n        result = calculate_result_2(result_1,result_2,result_3,result_4,1);\n      }\n      else {\n        result = calculate_result_from_binary(result_1,result_2,result_3,result_4);\n      }\n    }\n    else {\n      result = reverse_bits_080082d0(input_value,input_value,input_value,input_value);\n    }\n    return result;\n  }\n  result = calculate_result_2(input_value,input_value,0,0,0);\n  return result;\n}\n\n",
            "current_name": "calculate_result_with_improved_accuracy_080096e8",
            "entrypoint": "0x080096e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e8": "calculate_result_with_improved_accuracy_080096e8",
                "calculate_improved_result_08009d78": "calculate_result_1",
                "calculate_improved_result_0800adf0": "calculate_result_2",
                "calculate_improved_result_from_binary_0800a348": "calculate_result_from_binary",
                "local_20": "result_3",
                "local_28": "result_1",
                "param_1": "input_value",
                "param_2": "input_value",
                "reverse_bits_080082d0": "reverse_bits",
                "uStack_1c": "result_4",
                "uStack_24": "result_2",
                "uVar1": "result",
                "uVar2": "result_type"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009798": {
            "additional_data": {
                "FUN_08009798": {
                    "calculate_new_result": 1,
                    "calculate_precise_value": 1,
                    "calculate_precision_result": 1,
                    "calculate_result": 8,
                    "calculate_result_with_precision": 1,
                    "calculate_shift_and_mask": 1,
                    "calculate_shifted_result": 4,
                    "calculate_shifted_value": 1,
                    "convert_to_double_precision": 3,
                    "convert_to_fixed_point": 1,
                    "decimal_to_double": 1,
                    "decode_and_transform": 1,
                    "extract_bit_sequence": 1,
                    "extract_bits_and_calculate": 1,
                    "extract_double_precision_bits": 1,
                    "extract_significant_bits": 1,
                    "extracted_value": 1,
                    "get_result": 1,
                    "reversed_binary_params": 1
                },
                "lVar3": {
                    "result": 30,
                    "return_value": 1
                },
                "param_1": {
                    "input1": 3,
                    "input_1": 7,
                    "input_data_1": 1,
                    "input_param1": 2,
                    "input_parameter_1": 1,
                    "input_unsigned1": 1,
                    "input_value": 1,
                    "input_value1": 3,
                    "input_value_1": 8,
                    "input_var_1": 1,
                    "integer_part": 1,
                    "num1": 1,
                    "source_value": 1
                },
                "param_2": {
                    "fractional_part": 1,
                    "input2": 3,
                    "input_2": 7,
                    "input_data_2": 1,
                    "input_param2": 2,
                    "input_parameter_2": 1,
                    "input_unsigned2": 1,
                    "input_value2": 3,
                    "input_value_2": 8,
                    "input_var_2": 1,
                    "num2": 1,
                    "shift_amount": 1,
                    "shifted_value": 1
                },
                "param_3": {
                    "param3": 1,
                    "param_3": 3,
                    "temp_1": 1,
                    "temp_variable_1": 1,
                    "unused_param": 6,
                    "unused_param1": 3,
                    "unused_param3": 3,
                    "unused_param_1": 4,
                    "unused_param_3": 3,
                    "unused_parameter": 1,
                    "unused_parameter1": 2,
                    "unused_parameter_1": 2,
                    "unused_var1": 1
                },
                "param_4": {
                    "param4": 1,
                    "param_4": 3,
                    "temp_2": 1,
                    "temp_variable_2": 1,
                    "unused_param": 5,
                    "unused_param2": 4,
                    "unused_param4": 3,
                    "unused_param_2": 4,
                    "unused_param_4": 3,
                    "unused_parameter": 1,
                    "unused_parameter2": 2,
                    "unused_parameter_2": 2,
                    "unused_var2": 1
                },
                "uVar1": {
                    "bit_difference": 1,
                    "bits_shifted": 1,
                    "difference": 2,
                    "exponent_diff": 1,
                    "loop_counter1": 1,
                    "num_bits_shifted": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_difference": 1,
                    "shifted_amount": 2,
                    "shifted_bits": 8,
                    "shifted_bits1": 2,
                    "shifted_diff": 1,
                    "shifted_difference": 3,
                    "shifted_param1": 1,
                    "shifted_value": 4
                },
                "uVar2": {
                    "loop_counter2": 1,
                    "result_shifted": 1,
                    "shift_amount": 4,
                    "shifted_amount": 1,
                    "shifted_bits": 4,
                    "shifted_bits2": 2,
                    "shifted_input": 1,
                    "shifted_input2": 1,
                    "shifted_input_2": 1,
                    "shifted_num": 1,
                    "shifted_param2": 1,
                    "shifted_param_2": 2,
                    "shifted_value": 10,
                    "shifted_value_result": 1
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_080005b4",
                "FUN_08004e30",
                "FUN_08003b98"
            ],
            "code": "\nlonglong calculate_shifted_result_08009798(uint input_value_1,uint input_value_2,undefined4 unused_param,undefined4 unused_param)\n\n{\n  uint shifted_bits;\n  uint shifted_value;\n  longlong result;\n  \n  shifted_value = (input_value_2 << 1) >> 0x15;\n  shifted_bits = shifted_value - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input_value_2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input_value_2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return CONCAT44(input_value_2,input_value_1 & ~(0xffffffffU >> (shifted_value - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return CONCAT44(input_value_2,input_value_1);\n    }\n    result = calculate_double_precision_result_080082d4(input_value_1,input_value_2,input_value_1,input_value_2,unused_param);\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_shifted_result_08009798",
            "entrypoint": "0x08009798",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009798": "calculate_shifted_result_08009798",
                "lVar3": "result",
                "param_1": "input_value_1",
                "param_2": "input_value_2",
                "param_3": "unused_param",
                "param_4": "unused_param",
                "uVar1": "shifted_bits",
                "uVar2": "shifted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800981c": {
            "additional_data": {
                "FUN_0800981c": {
                    "calculate_and_check_result": 1,
                    "calculate_hypotenuse": 24,
                    "calculate_result": 4,
                    "calculate_result_with_checks": 1,
                    "calculate_result_with_conditions": 1
                },
                "extract_sign_bit_0800b2d4": {
                    "extract_sign_bit": 1
                },
                "get_data_value_0800b3dc": {
                    "get_data_value": 1
                },
                "iVar1": {
                    "check": 1,
                    "check_result": 1,
                    "extract_result": 2,
                    "is_non_negative": 1,
                    "is_valid1": 1,
                    "is_valid_side_a": 1,
                    "result": 2,
                    "result1": 1,
                    "result_1": 1,
                    "sign_bit": 1,
                    "sign_bit_a": 1,
                    "sign_bit_check": 2,
                    "sign_result": 2,
                    "status_flag": 1,
                    "validation_result": 1
                },
                "improved_calculate_result_08009b24": {
                    "improved_calculate_result": 1
                },
                "initialize_program_0800b2e0": {
                    "initialize_program": 1
                },
                "local_30": {
                    "extracted_bit": 1,
                    "extracted_sign_bit": 1,
                    "is_negative": 1,
                    "sign_bit": 23,
                    "sign_bit_c": 1,
                    "sign_bit_extraction_result": 1,
                    "sign_bit_value": 1,
                    "sign_check": 1,
                    "sign_result": 1
                },
                "local_38": {
                    "constant2": 1,
                    "constant_1": 1,
                    "lower_limit": 3,
                    "min_bound": 1,
                    "min_float_value": 1,
                    "min_limit": 1,
                    "min_value": 7,
                    "start_value": 1
                },
                "local_40": {
                    "arg3": 1,
                    "c": 1,
                    "calculation_param_3": 1,
                    "input_3": 1,
                    "input_3_copy": 2,
                    "input_c": 1,
                    "input_param_3": 1,
                    "length3": 1,
                    "length_3": 1,
                    "param3": 2,
                    "param_3_copy": 5,
                    "param_c": 2,
                    "side1_copy": 1,
                    "side3_copy": 1,
                    "side_3": 1,
                    "side_3_copy": 1,
                    "side_c": 2,
                    "side_c_copy": 2,
                    "value4": 1,
                    "value_4": 1,
                    "width_1_copy": 2
                },
                "local_48": {
                    "a": 1,
                    "arg1": 1,
                    "base_copy": 1,
                    "calculation_param_1": 1,
                    "input_1": 1,
                    "input_1_copy": 2,
                    "input_a": 1,
                    "input_param_1": 1,
                    "length1": 1,
                    "length_1": 1,
                    "length_1_copy": 2,
                    "param1": 2,
                    "param_1_copy": 5,
                    "param_a": 2,
                    "side1_copy": 1,
                    "side_1": 1,
                    "side_1_copy": 1,
                    "side_a": 2,
                    "side_a_copy": 2,
                    "value2": 1,
                    "value_2": 1
                },
                "local_50": {
                    "algorithm_choice": 1,
                    "algorithm_type": 1,
                    "calculation_method": 1,
                    "calculation_type": 2,
                    "constant1": 1,
                    "constant_3": 1,
                    "function_code": 1,
                    "function_flag": 1,
                    "function_type": 1,
                    "hypotenuse_type": 1,
                    "num_dimensions": 1,
                    "operation": 3,
                    "operation_code": 2,
                    "operation_mode": 1,
                    "operation_type": 3,
                    "option": 1,
                    "program_id": 1,
                    "program_mode": 1,
                    "shape": 1,
                    "shape_constant": 1,
                    "shape_type": 2,
                    "value1": 1,
                    "value_1": 2
                },
                "param_1": {
                    "base": 1,
                    "input1": 2,
                    "input_1": 4,
                    "input_value_1": 1,
                    "length_1": 2,
                    "length_side1": 1,
                    "length_side_a": 1,
                    "num1": 1,
                    "side1": 1,
                    "side1_length": 3,
                    "side_1": 4,
                    "side_a": 10
                },
                "param_2": {
                    "height": 1,
                    "input2": 2,
                    "input_2": 4,
                    "input_value_2": 1,
                    "length_2": 2,
                    "length_side2": 1,
                    "length_side_b": 1,
                    "num2": 1,
                    "side2": 1,
                    "side2_length": 3,
                    "side_2": 4,
                    "side_b": 10
                },
                "param_3": {
                    "input3": 2,
                    "input_3": 4,
                    "input_value_3": 1,
                    "length_side3": 1,
                    "length_side_c": 1,
                    "num3": 1,
                    "side1": 1,
                    "side3": 1,
                    "side3_length": 3,
                    "side_3": 4,
                    "side_c": 10,
                    "width_1": 2
                },
                "param_4": {
                    "angle": 1,
                    "input4": 2,
                    "input_4": 4,
                    "input_value_4": 1,
                    "length_side4": 1,
                    "length_side_d": 1,
                    "num4": 1,
                    "side2": 1,
                    "side4": 1,
                    "side4_length": 3,
                    "side_4": 4,
                    "side_d": 9,
                    "width_2": 2
                },
                "pcStack_4c": {
                    "algorithm_name": 2,
                    "calculation_name": 2,
                    "function_name": 8,
                    "hypotenuse_name": 1,
                    "method_name": 1,
                    "name": 1,
                    "operation_name": 9,
                    "program_name": 3,
                    "shape_name": 4
                },
                "piVar3": {
                    "data_int_ptr": 1,
                    "data_value_2": 1,
                    "data_value_int_pointer": 1,
                    "data_value_int_ptr": 4,
                    "data_value_pointer": 1,
                    "data_value_pointer_int": 1,
                    "data_value_ptr": 2,
                    "data_value_ptr_2": 1,
                    "data_value_ptr_int": 2,
                    "int_data_value_ptr": 1,
                    "int_ptr": 1,
                    "number_pointer": 1,
                    "result_pointer": 1,
                    "sign_bit_ptr": 1
                },
                "puVar2": {
                    "data_pointer": 2,
                    "data_ptr": 1,
                    "data_value": 1,
                    "data_value_pointer": 3,
                    "data_value_ptr": 11,
                    "data_value_ptr2": 1
                },
                "uStack_34": {
                    "constant3": 1,
                    "constant_2": 1,
                    "end_value": 1,
                    "max_bound": 1,
                    "max_float_value": 1,
                    "max_limit": 1,
                    "max_value": 7,
                    "upper_limit": 3
                },
                "uStack_3c": {
                    "angle": 1,
                    "arg4": 1,
                    "calculation_param_4": 1,
                    "d": 1,
                    "input_4": 1,
                    "input_4_copy": 2,
                    "input_d": 1,
                    "input_param_4": 1,
                    "length4": 1,
                    "length_4": 1,
                    "param4": 2,
                    "param_4_copy": 5,
                    "param_d": 2,
                    "side2_copy": 1,
                    "side4_copy": 1,
                    "side_4": 1,
                    "side_4_copy": 1,
                    "side_d": 1,
                    "side_d_copy": 2,
                    "value5": 1,
                    "value_5": 1,
                    "width_2_copy": 2
                },
                "uStack_44": {
                    "arg2": 1,
                    "b": 1,
                    "calculation_param_2": 1,
                    "height_copy": 1,
                    "input_2": 1,
                    "input_2_copy": 2,
                    "input_b": 1,
                    "input_param_2": 1,
                    "length2": 1,
                    "length_2": 1,
                    "length_2_copy": 2,
                    "param2": 2,
                    "param_2_copy": 5,
                    "param_b": 2,
                    "side2_copy": 1,
                    "side_2": 1,
                    "side_2_copy": 1,
                    "side_b": 2,
                    "side_b_copy": 2,
                    "value3": 1,
                    "value_3": 1
                },
                "uVar4": {
                    "result": 21,
                    "result2": 1,
                    "result_2": 1,
                    "result_concatenated": 1
                }
            },
            "called": [
                "FUN_0800b3dc",
                "FUN_0800b2d4",
                "FUN_0800b2e0",
                "FUN_08009b24"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int sign_result;\n  undefined4 *data_value_ptr;\n  int *data_value_int_ptr;\n  undefined8 result;\n  undefined4 operation_type;\n  char *operation_name;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 min_value;\n  undefined4 max_value;\n  int sign_bit;\n  \n  result = improved_calculate_result();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  sign_bit = extract_sign_bit_0800b2d4();\n  if (sign_bit != 0) {\n    return result;\n  }\n  sign_result = extract_sign_bit_0800b2d4(side_a,side_b);\n  if (sign_result == 0) {\n    return result;\n  }\n  sign_result = extract_sign_bit_0800b2d4(side_c,side_d);\n  if (sign_result == 0) {\n    return result;\n  }\n  operation_type = 3;\n  operation_name = \"hypot\";\n  param_1_copy = side_a;\n  param_2_copy = side_b;\n  param_3_copy = side_c;\n  param_4_copy = side_d;\n  if (DAT_20000014 == '\\0') {\n    min_value = 0xe0000000;\n    max_value = 0x47efffff;\nLAB_080098aa:\n    sign_result = initialize_program_0800b2e0(&operation_type);\n    if (sign_result != 0) goto LAB_08009896;\n  }\n  else {\n    min_value = 0;\n    max_value = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  data_value_ptr = (undefined4 *)get_data_value_0800b3dc();\n  *data_value_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(max_value,min_value);\n  if (sign_bit != 0) {\n    data_value_int_ptr = (int *)get_data_value_0800b3dc();\n    result = CONCAT44(max_value,min_value);\n    *data_value_int_ptr = sign_bit;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_hypotenuse_0800981c",
            "entrypoint": "0x0800981c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "extract_sign_bit_0800b2d4": "extract_sign_bit",
                "get_data_value_0800b3dc": "get_data_value",
                "iVar1": "sign_result",
                "improved_calculate_result_08009b24": "improved_calculate_result",
                "initialize_program_0800b2e0": "initialize_program",
                "local_30": "sign_bit",
                "local_38": "min_value",
                "local_40": "param_3_copy",
                "local_48": "param_1_copy",
                "local_50": "operation_type",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "pcStack_4c": "operation_name",
                "piVar3": "data_value_int_ptr",
                "puVar2": "data_value_ptr",
                "uStack_34": "max_value",
                "uStack_3c": "param_4_copy",
                "uStack_44": "param_2_copy",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098d0": {
            "additional_data": {
                "FUN_080098d0": {
                    "calculate_result": 2,
                    "calculate_result_with_validation": 1,
                    "execute_program": 1,
                    "improved_calculate_result": 2,
                    "improved_check_and_initialize": 3,
                    "improved_code": 1,
                    "improved_process": 1,
                    "improved_process_data": 2,
                    "improved_process_parameters": 1,
                    "process_data": 2,
                    "process_parameters": 1,
                    "validate_and_initialize": 1
                },
                "cVar1": {
                    "char_value": 3,
                    "character": 2,
                    "condition": 1,
                    "constant": 2,
                    "data_char": 1,
                    "data_value": 1,
                    "data_value_check": 1,
                    "flag": 3,
                    "flag_char": 1,
                    "flag_value": 2,
                    "mode": 1,
                    "program_mode": 1
                },
                "iVar3": {
                    "check_result": 5,
                    "check_result_2": 1,
                    "is_params_valid": 1,
                    "is_string_empty": 1,
                    "is_valid": 10,
                    "param_check_result": 1,
                    "result_check": 1,
                    "result_code": 1,
                    "string_check_result": 1,
                    "string_empty": 1,
                    "valid_check_result": 1
                },
                "local_30": {
                    "check_result": 1,
                    "empty_string_check": 1,
                    "error_code": 1,
                    "param_check_result": 4,
                    "param_valid": 2,
                    "param_validity": 2,
                    "params_valid": 2,
                    "string_check_result": 6,
                    "string_empty_check": 1,
                    "string_length": 9,
                    "string_result": 1,
                    "string_valid": 1
                },
                "local_38": {
                    "float_value": 2,
                    "floating_point_result": 1,
                    "floating_point_value": 15,
                    "floating_value": 3,
                    "result": 10
                },
                "local_40": {
                    "arg1_copy": 1,
                    "first_param_copy_2": 1,
                    "init_input_param1_copy": 1,
                    "input1_copy2": 1,
                    "input_1_copy2": 2,
                    "input_1_copy_2": 2,
                    "input_1_copy_copy": 1,
                    "input_param1_copy2": 2,
                    "input_param_1_copy2": 2,
                    "input_param_1_cpy2": 1,
                    "input_param_1_duplicate": 1,
                    "input_value_1_copy2": 1,
                    "local_param_1_copy": 1,
                    "new_input_param1": 1,
                    "original_input1": 1,
                    "param_1": 1,
                    "param_1_copy": 1,
                    "param_1_copy2": 2,
                    "param_1_copy_2": 2,
                    "saved_input_parameter_1": 1,
                    "temp_3": 1,
                    "temp_data1": 1,
                    "temp_input3": 1,
                    "temp_param_1": 2
                },
                "local_48": {
                    "arg1": 1,
                    "copy_input1": 1,
                    "copy_param_1": 1,
                    "current_input_parameter_1": 1,
                    "first_param_copy": 1,
                    "init_input_param1": 1,
                    "input1_copy": 1,
                    "input_1_copy": 5,
                    "input_param1_copy": 2,
                    "input_param_1_copy": 5,
                    "input_param_1_cpy": 1,
                    "input_value_1_copy": 1,
                    "local_param_1": 1,
                    "original_input_param1": 1,
                    "original_param_1": 1,
                    "output_data1": 1,
                    "param_1_copy": 4,
                    "temp_1": 1,
                    "temp_input1": 1
                },
                "local_4c": {
                    "buffer": 1,
                    "char_pointer": 1,
                    "char_ptr": 1,
                    "constant_string_ptr": 1,
                    "data_pointer": 1,
                    "error_message": 1,
                    "init_data_ptr": 1,
                    "local_string_ptr": 1,
                    "message": 4,
                    "pointer": 1,
                    "pointer_to_constant_data": 1,
                    "pointer_to_string": 1,
                    "ptr_const_data": 1,
                    "str_ptr": 1,
                    "string": 4,
                    "string_pointer": 1,
                    "string_ptr": 8,
                    "string_var": 1
                },
                "local_50": {
                    "count": 1,
                    "counter": 2,
                    "flag": 19,
                    "flag1": 1,
                    "init_flag": 1,
                    "initialized_flag": 2,
                    "is_initialized": 1,
                    "is_valid_input": 1,
                    "local_flag": 1,
                    "result": 1,
                    "validation_result": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 4,
                    "input_1": 7,
                    "input_data1": 1,
                    "input_param1": 4,
                    "input_param_1": 11,
                    "input_parameter_1": 2,
                    "input_value_1": 1
                },
                "param_2": {
                    "input2": 4,
                    "input_2": 7,
                    "input_data2": 1,
                    "input_param2": 4,
                    "input_param_2": 11,
                    "input_parameter_2": 2,
                    "input_value_2": 1,
                    "second_param": 1
                },
                "piVar5": {
                    "data_value": 1,
                    "data_value_int_pointer": 1,
                    "data_value_int_ptr": 7,
                    "data_value_ptr": 1,
                    "data_value_ptr2": 3,
                    "data_value_ptr_int": 3,
                    "int_value_pointer": 1,
                    "int_value_ptr": 1,
                    "pointer_to_integer_value": 1,
                    "string_value_ptr": 1,
                    "value_pointer": 1,
                    "value_ptr": 2
                },
                "puVar4": {
                    "data_pointer": 2,
                    "data_ptr": 3,
                    "data_value_pointer": 2,
                    "data_value_ptr": 15,
                    "pointer_to_data_value": 1
                },
                "uStack_3c": {
                    "arg2_copy": 1,
                    "init_input_param2_copy": 1,
                    "input2_copy2": 1,
                    "input_2_copy2": 2,
                    "input_2_copy_2": 2,
                    "input_2_copy_copy": 1,
                    "input_param2_copy2": 2,
                    "input_param_2_copy2": 2,
                    "input_param_2_cpy2": 1,
                    "input_param_2_duplicate": 1,
                    "input_value_2_copy2": 1,
                    "local_param_2_copy": 1,
                    "new_input_param2": 1,
                    "original_input2": 1,
                    "param_2": 1,
                    "param_2_copy": 1,
                    "param_2_copy2": 2,
                    "param_2_copy_2": 2,
                    "saved_input_parameter_2": 1,
                    "second_param_copy_2": 1,
                    "temp_4": 1,
                    "temp_data2": 1,
                    "temp_input4": 1,
                    "temp_param_2": 2
                },
                "uStack_44": {
                    "arg2": 1,
                    "copy_input2": 1,
                    "copy_param_2": 1,
                    "current_input_parameter_2": 1,
                    "init_input_param2": 1,
                    "input2_copy": 1,
                    "input_2_copy": 5,
                    "input_param2_copy": 2,
                    "input_param_2_copy": 5,
                    "input_param_2_cpy": 1,
                    "input_value_2_copy": 1,
                    "local_param_2": 1,
                    "original_input_param2": 1,
                    "original_param_2": 1,
                    "output_data2": 1,
                    "param_2_copy": 4,
                    "second_param_copy": 1,
                    "temp_2": 1,
                    "temp_input2": 1
                },
                "uVar2": {
                    "calc_result": 1,
                    "calculated_result": 3,
                    "calculation_result": 1,
                    "improved_result": 1,
                    "result": 16,
                    "result_value": 4
                }
            },
            "called": [
                "FUN_0800b3dc",
                "FUN_0800a1bc",
                "FUN_08008b24",
                "FUN_08008894",
                "FUN_08008b74",
                "FUN_0800b2e0"
            ],
            "calling": [
                "FUN_08001994",
                "FUN_08003004",
                "FUN_080005b4",
                "FUN_08002978"
            ],
            "code": "\nundefined4 improved_process_data_080098d0(undefined4 input_param_1,undefined4 input_param_2)\n\n{\n  char char_value;\n  undefined4 result;\n  int is_valid;\n  undefined4 *data_value_ptr;\n  int *data_value_int_ptr;\n  undefined4 flag;\n  undefined *string_ptr;\n  undefined4 input_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input_param1_copy2;\n  undefined4 param_2_copy_2;\n  undefined8 floating_point_value;\n  int string_length;\n  \n  result = improved_calculate_result_0800a1bc();\n  char_value = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (string_length = check_params_valid_08008b74(input_param_1,input_param_2,input_param_1,input_param_2), string_length != 0)) ||\n     (is_valid = check_if_string_is_empty_08008b24(input_param_1,input_param_2,0,0), is_valid == 0)) {\n    return result;\n  }\n  flag = 1;\n  string_ptr = &DAT_0800be5c;\n  input_1_copy = input_param_1;\n  input_2_copy = input_param_2;\n  input_param1_copy2 = input_param_1;\n  param_2_copy_2 = input_param_2;\n  if (char_value == '\\0') {\n    floating_point_value = 0;\nLAB_0800996c:\n    is_valid = initialize_program_0800b2e0(&flag);\n    if (is_valid != 0) goto joined_r0x0800997a;\n  }\n  else {\n    floating_point_value = calculate_floating_point_value_08008894(0,0,0,0);\n    if (char_value != '\\x02') goto LAB_0800996c;\n  }\n  data_value_ptr = (undefined4 *)get_data_value_0800b3dc();\n  *data_value_ptr = 0x21;\njoined_r0x0800997a:\n  if (string_length != 0) {\n    data_value_int_ptr = (int *)get_data_value_0800b3dc();\n    *data_value_int_ptr = string_length;\n  }\n  return (undefined4)floating_point_value;\n}\n\n",
            "current_name": "improved_process_data_080098d0",
            "entrypoint": "0x080098d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098d0": "improved_process_data_080098d0",
                "cVar1": "char_value",
                "iVar3": "is_valid",
                "local_30": "string_length",
                "local_38": "floating_point_value",
                "local_40": "input_param1_copy2",
                "local_48": "input_1_copy",
                "local_4c": "string_ptr",
                "local_50": "flag",
                "param_1": "input_param_1",
                "param_2": "input_param_2",
                "piVar5": "data_value_int_ptr",
                "puVar4": "data_value_ptr",
                "uStack_3c": "param_2_copy_2",
                "uStack_44": "input_2_copy",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009990": {
            "additional_data": {
                "0x33145c07": {
                    "constant1": 1,
                    "reverse_bits_constant1": 1
                },
                "0x3ca1a626": {
                    "constant2": 1,
                    "reverse_bits_constant2": 1
                },
                "0x3d00000": {
                    "threshold": 1
                },
                "0x3ff921fb54442d18": {
                    "result_constant3": 1
                },
                "0x400921fb": {
                    "result_constant2": 1
                },
                "0x54442d18": {
                    "result_constant1": 1
                },
                "0x7ff00000": {
                    "max_float": 1
                },
                "DAT_0800be68": {
                    "constant_1": 1,
                    "constants1": 1,
                    "lookup_table1": 1,
                    "result_array1": 1,
                    "value_1": 2
                },
                "DAT_0800be80": {
                    "constant_2": 1,
                    "constants2": 1,
                    "lookup_table2": 1,
                    "result_array2": 1,
                    "value_2": 2
                },
                "FUNC_0800b2cc": {
                    "additional_calculations": 1,
                    "additional_processing_function": 1,
                    "call_some_function": 1,
                    "function_2": 1,
                    "function_b2cc": 1,
                    "helper_function": 1,
                    "perform_additional_calculations": 1,
                    "perform_additional_operation": 2,
                    "perform_operation": 1,
                    "perform_some_operation": 1
                },
                "FUN_08009990": {
                    "calculate": 2,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_result": 3,
                    "calculate_fp_result": 1,
                    "calculate_improved_result": 1,
                    "calculate_new_result": 1,
                    "calculate_result": 19,
                    "calculate_updated_result": 1,
                    "calculate_updated_value": 1
                },
                "SCARRY4": {
                    "is_signed_carry4": 1
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_p_result": 1,
                    "calculate_double_precision_result": 9,
                    "double_precision_result_calculation": 1
                },
                "calculate_floating_point_value_08008894": {
                    "calculate_float_value": 2,
                    "calculate_floating_point": 1,
                    "calculate_floating_point_value": 7,
                    "floating_point_value_calculation": 1
                },
                "calculate_improved_result_0800af78": {
                    "calculate_improved_result": 9,
                    "calculate_result_using_improved_method": 1,
                    "improved_result_calculation": 1
                },
                "iVar1": {
                    "diff": 4,
                    "difference": 21,
                    "result": 1,
                    "temp_1": 1,
                    "temp_var1": 2,
                    "temp_variable": 1,
                    "var1": 1
                },
                "param_1": {
                    "a": 1,
                    "exponent1": 2,
                    "input1": 10,
                    "input_1": 12,
                    "input_param1": 1,
                    "input_param_1": 2,
                    "value_1": 1,
                    "x1": 2
                },
                "param_2": {
                    "b": 1,
                    "input2": 10,
                    "input_2": 12,
                    "input_param2": 1,
                    "input_param_2": 2,
                    "mantissa1": 2,
                    "value_2": 1,
                    "x2": 2
                },
                "param_3": {
                    "c": 1,
                    "exponent2": 2,
                    "input3": 10,
                    "input_3": 12,
                    "input_param3": 1,
                    "input_param_3": 2,
                    "value_3": 1,
                    "x3": 2
                },
                "param_4": {
                    "d": 1,
                    "input4": 10,
                    "input_4": 12,
                    "input_param4": 1,
                    "input_param_4": 2,
                    "mantissa2": 2,
                    "value_4": 1,
                    "x4": 2
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 11
                },
                "uVar2": {
                    "high_bits": 2,
                    "high_order_bits": 1,
                    "result": 1,
                    "result1": 1,
                    "result_1": 2,
                    "result_high": 6,
                    "result_high_bits": 1,
                    "result_upper": 2,
                    "result_upper_bits": 1,
                    "temp": 1,
                    "temp_2": 1,
                    "temp_var2": 2,
                    "upper32bits": 1,
                    "upper_bits": 3,
                    "upper_result": 1,
                    "upper_word": 1,
                    "var2": 1
                },
                "uVar3": {
                    "bit_check": 2,
                    "bitwise_shift": 1,
                    "case_value": 1,
                    "comparison": 1,
                    "control_variable": 1,
                    "filter_condition": 1,
                    "flag": 6,
                    "flag_1": 1,
                    "input_sign": 1,
                    "mode": 1,
                    "msb_3_and_2": 1,
                    "result": 1,
                    "result_case": 1,
                    "result_low": 1,
                    "shift_value": 1,
                    "shifted": 1,
                    "shifted_bit": 1,
                    "shifted_bits": 1,
                    "shifted_value": 2,
                    "sign_extension_flag": 1,
                    "sign_shifted": 1,
                    "temp_var3": 2,
                    "var3": 1
                },
                "uVar4": {
                    "abs_input4": 1,
                    "abs_mantissa2": 1,
                    "abs_value": 1,
                    "abs_x4": 1,
                    "adjusted_param_4": 1,
                    "filtered_input_4": 1,
                    "flag_2": 1,
                    "mantissa2_masked": 1,
                    "masked_input4": 1,
                    "masked_input_4": 1,
                    "masked_value": 1,
                    "modified_input4": 2,
                    "modified_input_4": 1,
                    "modified_param_4": 2,
                    "non_neg_x4": 1,
                    "normalized_input4": 1,
                    "normalized_input_4": 1,
                    "param4": 1,
                    "param4_filtered": 1,
                    "param_4_masked": 3,
                    "param_4_msb_cleared": 1,
                    "positive_d": 1,
                    "positive_value": 1,
                    "temp_var4": 2,
                    "unsigned_param4": 1,
                    "var4": 1
                },
                "uVar5": {
                    "abs_input2": 1,
                    "abs_mantissa1": 1,
                    "abs_value_2": 1,
                    "abs_x2": 1,
                    "adjusted_param_2": 1,
                    "filtered_input_2": 1,
                    "flag_3": 1,
                    "mantissa1_masked": 1,
                    "masked_input2": 1,
                    "masked_input_2": 1,
                    "masked_value_2": 1,
                    "modified_input2": 2,
                    "modified_input_2": 1,
                    "modified_param_2": 2,
                    "non_neg_x2": 1,
                    "normalized_input2": 1,
                    "normalized_input_2": 1,
                    "param2": 1,
                    "param2_filtered": 1,
                    "param_2_masked": 3,
                    "param_2_msb_cleared": 1,
                    "positive_b": 1,
                    "positive_input": 1,
                    "temp_var5": 2,
                    "unsigned_param2": 1,
                    "var5": 1
                },
                "uVar6": {
                    "computed_result": 1,
                    "floating_point_value": 5,
                    "improved_result": 4,
                    "intermediate_result": 1,
                    "result": 16,
                    "temp_result": 1,
                    "temp_var6": 2,
                    "var6": 1
                },
                "uVar7": {
                    "reversed": 1
                },
                "uVar8": {
                    "temp": 1
                }
            },
            "called": [
                "FUN_0800af78",
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d4"
            ],
            "calling": [
                "thunk_FUN_08009990"
            ],
            "code": "\nuint calculate_floating_point_result_08009990(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  int difference;\n  undefined4 result_high;\n  uint flag;\n  uint param_4_masked;\n  uint param_2_masked;\n  undefined8 result;\n  \n  param_4_masked = input_4 & 0x7fffffff;\n  if (((param_4_masked | (-input_3 | input_3) >> 0x1f) < 0x7ff00001) &&\n     (param_2_masked = input_2 & 0x7fffffff, (param_2_masked | (-input_1 | input_1) >> 0x1f) < 0x7ff00001)) {\n    if ((input_4 + 0xc0100000 | input_3) == 0) {\n      param_4_masked = calculate_improved_result();\n      return param_4_masked;\n    }\n    flag = (int)input_4 >> 0x1e & 2U | input_2 >> 0x1f;\n    if ((param_2_masked | input_1) == 0) {\n      if (flag == 2) {\n        input_1 = 0x54442d18;\n      }\n      else if (flag == 3) {\n        input_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((param_4_masked | input_3) != 0) {\n        if (param_4_masked == 0x7ff00000) {\n          flag = flag - 1;\n          if (param_2_masked == 0x7ff00000) {\n            if (flag < 3) {\n              return *(uint *)(&DAT_0800be68 + flag * 8);\n            }\n            return 0x54442d18;\n          }\n          if (flag < 3) {\n            return *(uint *)(&DAT_0800be80 + flag * 8);\n          }\n          return 0;\n        }\n        if (param_2_masked != 0x7ff00000) {\n          difference = (int)(param_2_masked - param_4_masked) >> 0x14;\n          if ((int)(param_2_masked - param_4_masked) < 0x3d00000) {\n            if (((int)input_4 < 0) && (difference + 0x3c < 0 != is_signed_carry4(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              calculate_floating_point_value(input_1,input_2,input_3,input_4,input_4);\n              FUNC_0800b2cc();\n              result = calculate_improved_result();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          result_high = (undefined4)((ulonglong)result >> 0x20);\n          param_4_masked = (uint)result;\n          if (flag == 1) {\n            return param_4_masked;\n          }\n          if (flag == 2) {\n            result = reverse_bits_080082d0(param_4_masked,result_high,0x33145c07,0x3ca1a626);\n            param_4_masked = reverse_bits_080082d0(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return param_4_masked;\n          }\n          if (flag == 0) {\n            return param_4_masked;\n          }\n          result = reverse_bits_080082d0(param_4_masked,result_high,0x33145c07,0x3ca1a626);\n          param_4_masked = reverse_bits_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return param_4_masked;\n        }\n      }\n      if ((int)input_2 < 0) {\n        input_1 = 0x54442d18;\n      }\n      else {\n        input_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input_1 = calculate_double_precision_result_080082d4(input_3,input_4,input_1,input_2);\n  }\n  return input_1;\n}\n\n",
            "current_name": "calculate_floating_point_result_08009990",
            "entrypoint": "0x08009990",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009990": "calculate_floating_point_result_08009990",
                "SCARRY4": "is_signed_carry4",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "calculate_floating_point_value_08008894": "calculate_floating_point_value",
                "calculate_improved_result_0800af78": "calculate_improved_result",
                "iVar1": "difference",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "reverse_bits_080082d0": "reverse_bits",
                "uVar2": "result_high",
                "uVar3": "flag",
                "uVar4": "param_4_masked",
                "uVar5": "param_2_masked",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009b24": {
            "additional_data": {
                "FUN_08009b24": {
                    "calculate_precise_result": 1,
                    "calculate_result": 25,
                    "calculate_result_using_parameters": 1,
                    "calculate_result_with_conditions": 1,
                    "calculate_result_with_constraints": 1,
                    "improved_calculate_result": 2
                },
                "iVar2": {
                    "check": 1,
                    "check_result": 2,
                    "is_string_empty": 3,
                    "result2": 10,
                    "result_2": 10,
                    "result_i_var2": 1,
                    "result_var_2": 1,
                    "string_empty_check": 1,
                    "temp_2": 1,
                    "temp_var2": 1
                },
                "iVar4": {
                    "check_result": 1,
                    "check_result2": 1,
                    "double_precision_result_low": 1,
                    "result4": 9,
                    "result_4": 10,
                    "result_high": 1,
                    "result_i_var4": 1,
                    "result_var_4": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_3": 1,
                    "temp_var": 1,
                    "temp_var3": 1
                },
                "iVar6": {
                    "check_1": 1,
                    "combined_input2_high": 1,
                    "operand2_high": 1,
                    "result6": 9,
                    "result_6": 10,
                    "result_high": 1,
                    "result_i_var6": 1,
                    "result_var_6": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_5": 1,
                    "temp_var2": 1,
                    "temp_var5": 1
                },
                "local_3c": {
                    "adjustment": 1,
                    "constant1": 1,
                    "count": 1,
                    "counter": 1,
                    "local_value": 2,
                    "local_var": 3,
                    "local_var_1": 1,
                    "local_variable": 3,
                    "local_variable1": 1,
                    "offset": 1,
                    "result14": 4,
                    "result_14": 5,
                    "result_local_3c": 1,
                    "shift_amount": 1,
                    "temp": 1,
                    "temp11": 1,
                    "temp_13": 1,
                    "temp_var13": 1,
                    "temp_var3": 1
                },
                "param_1": {
                    "a": 1,
                    "input1": 7,
                    "input_1": 12,
                    "input_param1": 2,
                    "input_param_1": 3,
                    "input_value1": 1,
                    "num1": 2,
                    "value1": 2,
                    "value_1": 1
                },
                "param_2": {
                    "b": 1,
                    "input2": 7,
                    "input_2": 12,
                    "input_param2": 2,
                    "input_param_2": 3,
                    "input_value2": 1,
                    "num2": 2,
                    "value2": 2,
                    "value_2": 1
                },
                "param_3": {
                    "c": 1,
                    "input3": 7,
                    "input_3": 12,
                    "input_param3": 2,
                    "input_param_3": 3,
                    "input_value3": 1,
                    "num3": 2,
                    "value3": 2,
                    "value_3": 1
                },
                "param_4": {
                    "d": 1,
                    "input4": 7,
                    "input_4": 12,
                    "input_param4": 2,
                    "input_param_4": 3,
                    "input_value4": 1,
                    "num4": 2,
                    "value4": 2,
                    "value_4": 1
                },
                "uVar1": {
                    "result": 4,
                    "result1": 11,
                    "result8": 1,
                    "result_1": 10,
                    "result_u_var1": 1,
                    "result_var_1": 1,
                    "reverse_bits_result_low": 1,
                    "temp_1": 1,
                    "temp_var1": 1
                },
                "uVar10": {
                    "calculation_result": 1,
                    "combined_input2": 1,
                    "final_result": 1,
                    "final_result1": 1,
                    "final_result_1": 2,
                    "result": 1,
                    "result10": 8,
                    "result3": 1,
                    "result6": 1,
                    "result7": 1,
                    "result_10": 8,
                    "result_u_var10": 1,
                    "result_var_10": 1,
                    "temp7": 1,
                    "temp_9": 1,
                    "temp_var9": 1
                },
                "uVar11": {
                    "calculation_result2": 1,
                    "combined_input1": 1,
                    "final_result2": 1,
                    "final_result_2": 2,
                    "input_param": 1,
                    "result11": 8,
                    "result7": 1,
                    "result8": 1,
                    "result_11": 8,
                    "result_4": 1,
                    "result_u_var11": 1,
                    "result_var_11": 1,
                    "temp8": 1,
                    "temp_10": 1,
                    "temp_var10": 1,
                    "var3": 1
                },
                "uVar12": {
                    "double_precision_result": 1,
                    "double_precision_result_high": 1,
                    "final_result3": 1,
                    "final_result_3": 2,
                    "result": 1,
                    "result12": 8,
                    "result9": 1,
                    "result_12": 8,
                    "result_5": 1,
                    "result_u_var12": 1,
                    "result_var_12": 1,
                    "temp9": 1,
                    "temp_11": 1,
                    "temp_var11": 1,
                    "var4": 1
                },
                "uVar13": {
                    "final_result4": 1,
                    "final_result_4": 2,
                    "result": 1,
                    "result10": 1,
                    "result13": 8,
                    "result9": 1,
                    "result_13": 8,
                    "result_6": 1,
                    "result_u_var13": 1,
                    "result_var_13": 1,
                    "reverse_bits_result_high": 1,
                    "reverse_result": 1,
                    "temp10": 1,
                    "temp_12": 1,
                    "temp_var12": 1,
                    "var5": 1
                },
                "uVar3": {
                    "calculation_result": 1,
                    "output": 2,
                    "result": 3,
                    "result2": 1,
                    "result3": 9,
                    "result_3": 10,
                    "result_u_var3": 1,
                    "result_var": 1,
                    "result_var_3": 1,
                    "temp1": 1,
                    "temp_result": 1
                },
                "uVar5": {
                    "combined_input2_low": 1,
                    "operand2_low": 1,
                    "output_low": 1,
                    "result2": 1,
                    "result3": 2,
                    "result5": 9,
                    "result_1": 1,
                    "result_5": 10,
                    "result_u_var5": 1,
                    "result_var_5": 1,
                    "temp2": 1,
                    "temp_4": 1,
                    "temp_var4": 1
                },
                "uVar7": {
                    "max_input": 1,
                    "max_input_param": 1,
                    "max_value": 3,
                    "result4": 1,
                    "result7": 9,
                    "result_7": 10,
                    "result_u_var7": 1,
                    "result_var_7": 1,
                    "temp4": 2,
                    "temp_6": 1,
                    "temp_var6": 1
                },
                "uVar8": {
                    "combined_input1_low": 1,
                    "operand1_low": 1,
                    "result4": 1,
                    "result5": 1,
                    "result8": 9,
                    "result_2": 1,
                    "result_8": 10,
                    "result_low": 1,
                    "result_u_var8": 1,
                    "result_var_8": 1,
                    "temp5": 1,
                    "temp_7": 1,
                    "temp_var7": 1,
                    "var1": 1
                },
                "uVar9": {
                    "combined_input1_high": 1,
                    "operand1_high": 1,
                    "result5": 1,
                    "result6": 1,
                    "result9": 9,
                    "result_3": 1,
                    "result_9": 10,
                    "result_low": 1,
                    "result_u_var9": 1,
                    "result_var_9": 1,
                    "temp6": 1,
                    "temp_8": 1,
                    "temp_var8": 1,
                    "var2": 1
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800a1bc",
                "FUN_08008b24",
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint improved_calculate_result_08009b24(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  undefined4 result1;\n  int result_2;\n  uint result_3;\n  int result_4;\n  undefined4 result_5;\n  int result_6;\n  uint result_7;\n  undefined4 result_8;\n  undefined4 result_9;\n  undefined8 result_10;\n  undefined8 result11;\n  undefined8 result12;\n  undefined8 result_13;\n  int result_14;\n  \n  input_2 = input_2 & 0x7fffffff;\n  input_4 = input_4 & 0x7fffffff;\n  result_3 = input_1;\n  result_7 = input_2;\n  if (input_2 < input_4) {\n    result_3 = input_3;\n    input_3 = input_1;\n    result_7 = input_4;\n    input_4 = input_2;\n  }\n  if (0x3c00000 < (int)(result_7 - input_4)) {\n    result_3 = calculate_double_precision_result_080082d4(result_3,result_7,input_3,input_4);\n    return result_3;\n  }\n  if (result_7 < 0x5f300001) {\n    result_14 = 0;\n  }\n  else {\n    if (0x7fefffff < result_7) {\n      if ((result_7 & 0xfffff | result_3) != 0) {\n        result_3 = calculate_double_precision_result_080082d4(result_3,result_7,input_3,input_4);\n      }\n      if ((input_4 ^ 0x7ff00000 | input_3) != 0) {\n        return result_3;\n      }\n      return input_3;\n    }\n    result_7 = result_7 + 0xda800000;\n    input_4 = input_4 + 0xda800000;\n    result_14 = 600;\n  }\n  result11 = CONCAT44(result_7,result_3);\n  result_10 = CONCAT44(input_4,input_3);\n  if ((int)input_4 < 0x20b00000) {\n    if ((int)input_4 < 0x100000) {\n      if ((input_4 | input_3) == 0) {\n        return result_3;\n      }\n      result_10 = calculate_improved_result_08008640(input_3,input_4,0,0x7fd00000);\n      result11 = calculate_improved_result_08008640(result_3,result_7,0,0x7fd00000);\n      result_14 = result_14 + -0x3fe;\n    }\n    else {\n      result_7 = result_7 + 0x25800000;\n      result11 = CONCAT44(result_7,result_3);\n      input_4 = input_4 + 0x25800000;\n      result_10 = CONCAT44(input_4,input_3);\n      result_14 = result_14 + -600;\n    }\n  }\n  result_9 = (undefined4)((ulonglong)result11 >> 0x20);\n  result_8 = (undefined4)result11;\n  result_6 = (int)((ulonglong)result_10 >> 0x20);\n  result_5 = (undefined4)result_10;\n  result_10 = reverse_bits_080082d0(result_8,result_9,result_5,result_6);\n  result_4 = (int)((ulonglong)result_10 >> 0x20);\n  result1 = (undefined4)result_10;\n  result_2 = check_if_string_is_empty_08008b24(result_5,result_6,result1,result_4);\n  if (result_2 == 0) {\n    result_10 = calculate_improved_result_08008640(0,input_4,0);\n    result11 = calculate_improved_result_08008640(result1,result_4 + -0x80000000,result1,result_4);\n    result12 = calculate_double_precision_result_080082d4(result_8,result_9,result_8,result_9);\n    result12 = reverse_bits_080082d0((int)result12,(int)((ulonglong)result12 >> 0x20),0,result_7 + 0x100000);\n    result12 = calculate_improved_result_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),result_5,result_6);\n    result_13 = reverse_bits_080082d0(result_5,result_6,0,input_4);\n    result_13 = calculate_improved_result_08008640((int)result_13,(int)((ulonglong)result_13 >> 0x20),0,result_7 + 0x100000);\n    result12 = calculate_double_precision_result_080082d4((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result_13,\n                          (int)((ulonglong)result_13 >> 0x20));\n    result11 = reverse_bits_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    reverse_bits_080082d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result_10 = improved_calculate_result_08009b24_0800a1bc();\n  }\n  else {\n    result_10 = calculate_improved_result_08008640(0,result_7,0,result_7);\n    result11 = calculate_improved_result_08008640(result_5,result_6 + -0x80000000,result_5,result_6);\n    result12 = calculate_double_precision_result_080082d4(result_8,result_9,0,result_7);\n    result_13 = reverse_bits_080082d0(result_8,result_9,0,result_7);\n    result12 = calculate_improved_result_08008640((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result_13,\n                          (int)((ulonglong)result_13 >> 0x20));\n    result11 = reverse_bits_080082d0((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                          (int)((ulonglong)result12 >> 0x20));\n    reverse_bits_080082d0((int)result_10,(int)((ulonglong)result_10 >> 0x20),(int)result11,\n                 (int)((ulonglong)result11 >> 0x20));\n    result_10 = improved_calculate_result_08009b24_0800a1bc();\n  }\n  result_3 = (uint)result_10;\n  if (result_14 != 0) {\n    result_3 = calculate_improved_result_08008640(result_3,(int)((ulonglong)result_10 >> 0x20),0,result_14 * 0x100000 + 0x3ff00000);\n  }\n  return result_3;\n}\n\n",
            "current_name": "improved_calculate_result_08009b24",
            "entrypoint": "0x08009b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009b24": "improved_calculate_result_08009b24",
                "iVar2": "result_2",
                "iVar4": "result_4",
                "iVar6": "result_6",
                "local_3c": "result_14",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "result1",
                "uVar10": "result_10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result_13",
                "uVar3": "result_3",
                "uVar5": "result_5",
                "uVar7": "result_7",
                "uVar8": "result_8",
                "uVar9": "result_9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009d78": {
            "additional_data": {
                "FUN_08009d78": {
                    "calculate_improved_result": 8,
                    "calculate_result": 5,
                    "improve_and_readability": 1
                },
                "iVar9": {
                    "calc_result": 1,
                    "calculation_result": 1,
                    "condition": 1,
                    "error_code": 1,
                    "index": 1,
                    "int_var": 1,
                    "loop_counter": 1,
                    "new_var_9": 1,
                    "new_variable9": 1,
                    "result": 10,
                    "result9": 2,
                    "result_code": 1,
                    "result_index": 1,
                    "status": 2,
                    "temp2": 2,
                    "var9": 3
                },
                "local_30": {
                    "calc_result3": 1,
                    "local_result2_3": 1,
                    "local_temp3": 1,
                    "local_temp5": 1,
                    "local_temp_3": 1,
                    "local_temp_5": 1,
                    "local_temp_result_c": 1,
                    "local_value5": 1,
                    "local_value_3": 1,
                    "local_value_5": 1,
                    "local_var3": 1,
                    "local_var4": 1,
                    "local_var5": 8,
                    "local_variable3": 1,
                    "local_variable_5": 1,
                    "new_var_17": 1,
                    "new_variable17": 1,
                    "param3_value": 2,
                    "parameter_3": 1,
                    "temp8": 1,
                    "temp_value30": 1,
                    "temp_var6": 1
                },
                "local_38": {
                    "calc_result2": 1,
                    "local_result2_2": 1,
                    "local_temp2": 1,
                    "local_temp4": 1,
                    "local_temp_2": 1,
                    "local_temp_4": 1,
                    "local_temp_result_b": 1,
                    "local_value4": 1,
                    "local_value_2": 1,
                    "local_value_4": 1,
                    "local_var2": 1,
                    "local_var3": 1,
                    "local_var4": 8,
                    "local_variable2": 1,
                    "local_variable_4": 1,
                    "new_var_16": 1,
                    "new_variable16": 1,
                    "param2_value": 2,
                    "parameter_2": 1,
                    "temp7": 1,
                    "temp_value38": 1,
                    "temp_var5": 1
                },
                "local_40": {
                    "calc_result1": 1,
                    "local_result2_1": 1,
                    "local_temp1": 1,
                    "local_temp3": 1,
                    "local_temp_1": 1,
                    "local_temp_3": 1,
                    "local_temp_result_a": 1,
                    "local_value3": 1,
                    "local_value_1": 1,
                    "local_value_3": 1,
                    "local_var1": 1,
                    "local_var2": 1,
                    "local_var3": 8,
                    "local_variable1": 1,
                    "local_variable_3": 1,
                    "new_var_15": 1,
                    "new_variable15": 1,
                    "param1_value": 2,
                    "parameter_1": 1,
                    "temp6": 1,
                    "temp_value40": 1,
                    "temp_var4": 1
                },
                "local_50": {
                    "final_result_low": 1,
                    "local1": 1,
                    "local_result1": 3,
                    "local_result1_1": 1,
                    "local_result_1": 2,
                    "local_result_a": 1,
                    "local_temp1": 1,
                    "local_temp_1": 1,
                    "local_value1": 1,
                    "local_value_1": 1,
                    "local_var1": 10,
                    "local_variable_1": 1,
                    "new_var_13": 1,
                    "new_variable13": 1,
                    "temp4": 1,
                    "temp_9": 1,
                    "temp_result4": 1,
                    "temp_value50": 1
                },
                "param_1": {
                    "input1": 8,
                    "input_1": 2,
                    "input_param": 5,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "input_value": 7,
                    "input_value1": 1,
                    "new_param1": 1,
                    "new_param_1": 1,
                    "param1": 1,
                    "value1": 1
                },
                "param_2": {
                    "flag": 1,
                    "input2": 8,
                    "input_2": 2,
                    "input_flag": 2,
                    "input_flags": 1,
                    "input_param": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "input_size": 2,
                    "input_uint": 1,
                    "input_value": 3,
                    "input_value2": 1,
                    "new_param2": 1,
                    "new_param_2": 1,
                    "param2": 1,
                    "unsigned_num": 1,
                    "value2": 1
                },
                "param_3": {
                    "new_param3": 1,
                    "new_param_3": 1,
                    "output": 6,
                    "output_array": 3,
                    "output_buffer": 1,
                    "output_data": 1,
                    "output_param": 5,
                    "output_parameter": 1,
                    "output_params": 1,
                    "output_values": 4,
                    "param3": 1,
                    "result": 2,
                    "result_array": 2,
                    "result_ptr": 1
                },
                "uStack_4c": {
                    "final_result_high": 1,
                    "local2": 1,
                    "local_result1_2": 1,
                    "local_result2": 3,
                    "local_result_2": 2,
                    "local_result_b": 1,
                    "local_temp2": 1,
                    "local_temp_2": 1,
                    "local_value2": 1,
                    "local_value_2": 1,
                    "local_var2": 8,
                    "local_variable_2": 1,
                    "new_var_14": 1,
                    "new_variable14": 1,
                    "temp5": 1,
                    "temp_10": 1,
                    "temp_result4_high": 1,
                    "temp_value4c": 1,
                    "unsigned_stack_var": 1
                },
                "uVar1": {
                    "first_param": 1,
                    "new_var_1": 1,
                    "new_variable1": 1,
                    "result1": 10,
                    "result1_1": 1,
                    "result_1": 3,
                    "result_a": 1,
                    "result_low": 1,
                    "temp1": 2,
                    "temp_1": 2,
                    "temp_value1": 1,
                    "unsigned_var5": 1,
                    "var1": 4
                },
                "uVar10": {
                    "intermediate_result1": 1,
                    "new_var_10": 1,
                    "new_variable10": 1,
                    "result_1": 1,
                    "temp1": 7,
                    "temp10": 1,
                    "temp3": 2,
                    "temp8": 1,
                    "temp_6": 1,
                    "temp_8": 1,
                    "temp_result": 1,
                    "temp_result1": 1,
                    "temp_result_1": 1,
                    "temp_result_a": 1,
                    "temp_value": 1,
                    "temp_value10": 1,
                    "temp_value_1": 2,
                    "temp_var1": 1,
                    "unsigned_var2": 1,
                    "value1": 1,
                    "var10": 2
                },
                "uVar11": {
                    "intermediate_result2": 1,
                    "new_var_11": 1,
                    "new_variable11": 1,
                    "result_2": 1,
                    "temp11": 1,
                    "temp2": 7,
                    "temp4": 2,
                    "temp9": 1,
                    "temp_7": 1,
                    "temp_9": 1,
                    "temp_result2": 2,
                    "temp_result_2": 1,
                    "temp_result_b": 1,
                    "temp_value11": 1,
                    "temp_value2": 1,
                    "temp_value_2": 2,
                    "temp_var2": 1,
                    "unsigned_var3": 1,
                    "value2": 1,
                    "var11": 2
                },
                "uVar12": {
                    "intermediate_result3": 1,
                    "new_var_12": 1,
                    "new_variable12": 1,
                    "result_3": 1,
                    "reverse_result": 1,
                    "temp10": 1,
                    "temp12": 1,
                    "temp3": 7,
                    "temp5": 2,
                    "temp_10": 1,
                    "temp_8": 1,
                    "temp_result3": 2,
                    "temp_result_3": 1,
                    "temp_result_c": 1,
                    "temp_value12": 1,
                    "temp_value_3": 2,
                    "temp_var3": 1,
                    "unsigned_var4": 1,
                    "value3": 1,
                    "var12": 2
                },
                "uVar2": {
                    "calc_result1_high": 1,
                    "new_var_2": 1,
                    "new_variable2": 1,
                    "result1_2": 1,
                    "result2": 8,
                    "result_2": 3,
                    "result_b": 1,
                    "result_high": 1,
                    "second_param": 1,
                    "temp2": 2,
                    "temp_2": 2,
                    "temp_value2": 1,
                    "unsigned_var6": 1,
                    "var2": 4
                },
                "uVar3": {
                    "new_var_3": 1,
                    "new_variable3": 1,
                    "result1_3": 1,
                    "result1_high": 1,
                    "result2": 1,
                    "result3": 7,
                    "result_3": 2,
                    "result_c": 1,
                    "temp1": 1,
                    "temp1_low": 1,
                    "temp3": 2,
                    "temp_1": 1,
                    "temp_3": 2,
                    "temp_value3": 1,
                    "third_param": 1,
                    "unsigned_var7": 1,
                    "var3": 4
                },
                "uVar4": {
                    "calc_result2_high": 1,
                    "fourth_param": 1,
                    "new_var_4": 1,
                    "new_variable4": 1,
                    "result1_4": 1,
                    "result3": 1,
                    "result4": 7,
                    "result_4": 2,
                    "result_d": 1,
                    "temp1_high": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp_2": 1,
                    "temp_4": 2,
                    "temp_value4": 1,
                    "unsigned_var8": 1,
                    "var4": 4
                },
                "uVar5": {
                    "calc_result3_high": 1,
                    "fifth_param": 1,
                    "new_var_5": 1,
                    "new_variable5": 1,
                    "result1_5": 1,
                    "result4": 1,
                    "result5": 7,
                    "result_5": 2,
                    "result_e": 1,
                    "temp2_low": 1,
                    "temp3": 1,
                    "temp5": 2,
                    "temp_3": 1,
                    "temp_5": 2,
                    "temp_value5": 1,
                    "unsigned_var9": 1,
                    "var5": 4
                },
                "uVar6": {
                    "calc_result4": 1,
                    "new_var_6": 1,
                    "new_variable6": 1,
                    "result1_6": 1,
                    "result5": 1,
                    "result6": 7,
                    "result_6": 2,
                    "result_f": 1,
                    "sixth_param": 1,
                    "temp2_high": 1,
                    "temp4": 1,
                    "temp6": 2,
                    "temp_4": 1,
                    "temp_6": 2,
                    "temp_value6": 1,
                    "unsigned_var10": 1,
                    "var6": 4
                },
                "uVar7": {
                    "calc_result4_high": 1,
                    "new_var_7": 1,
                    "new_variable7": 1,
                    "result1_7": 1,
                    "result6": 1,
                    "result7": 7,
                    "result_7": 2,
                    "result_g": 1,
                    "seventh_param": 1,
                    "temp3_low": 1,
                    "temp5": 1,
                    "temp7": 2,
                    "temp_5": 1,
                    "temp_7": 2,
                    "temp_value7": 1,
                    "unsigned_var11": 1,
                    "var7": 4
                },
                "uVar8": {
                    "abs_unsigned_num": 1,
                    "abs_value": 2,
                    "absolute_value": 1,
                    "filtered_input": 1,
                    "masked_input_value2": 1,
                    "modified_flag": 2,
                    "modified_input2": 1,
                    "modified_size": 1,
                    "new_var_8": 1,
                    "new_variable8": 1,
                    "normalized_input_2": 1,
                    "normalized_input_param_2": 1,
                    "param2_unsigned": 1,
                    "positive_input2": 1,
                    "positive_input_2": 1,
                    "temp1": 2,
                    "temp_8": 1,
                    "u_flags": 1,
                    "u_var": 1,
                    "u_var8": 2,
                    "unsigned_input": 1,
                    "unsigned_var": 1,
                    "value": 1,
                    "var8": 3
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_080082d4",
                "FUN_0800a5a0",
                "FUN_08008ba0",
                "FUN_08008640",
                "FUN_0800856c",
                "FUN_08008b10"
            ],
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "code": "\nint calculate_improved_result_08009d78(undefined4 input1,uint input2,undefined8 *output)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  undefined4 result6;\n  undefined4 result7;\n  uint var8;\n  int result;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp3;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  \n  var8 = input2 & 0x7fffffff;\n  if (var8 < 0x3fe921fc) {\n    *(undefined4 *)output = input1;\n    *(uint *)((int)output + 4) = input2;\n    *(undefined4 *)(output + 1) = 0;\n    *(undefined4 *)((int)output + 0xc) = 0;\n    return 0;\n  }\n  if (var8 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp1 = calculate_double_precision_result_080082d4(input1,input2,0x54400000,0x3ff921fb);\n      result3 = (undefined4)((ulonglong)temp1 >> 0x20);\n      result1 = (undefined4)temp1;\n      if (var8 != 0x3ff921fb) {\n        temp1 = calculate_double_precision_result_080082d4(result1,result3,0x1a626331,0x3dd0b461);\n        *output = temp1;\n        temp1 = reverse_bits_080082d0(result1,result3);\n        temp1 = calculate_double_precision_result_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n        output[1] = temp1;\n        return -1;\n      }\n      temp1 = calculate_double_precision_result_080082d4(result1,result3,0x1a600000,0x3dd0b461);\n      result1 = (undefined4)((ulonglong)temp1 >> 0x20);\n      temp2 = calculate_double_precision_result_080082d4((int)temp1,result1,0x2e037073,0x3ba3198a);\n      *output = temp2;\n      temp1 = reverse_bits_080082d0((int)temp1,result1);\n      temp1 = calculate_double_precision_result_080082d4((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n      output[1] = temp1;\n      return -1;\n    }\n    temp1 = reverse_bits_080082d0();\n    result3 = (undefined4)((ulonglong)temp1 >> 0x20);\n    result1 = (undefined4)temp1;\n    if (var8 != 0x3ff921fb) {\n      temp1 = reverse_bits_080082d0(result1,result3,0x1a626331,0x3dd0b461);\n      *output = temp1;\n      temp1 = reverse_bits_080082d0(result1,result3);\n      temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x1a626331,0x3dd0b461);\n      output[1] = temp1;\n      return 1;\n    }\n    temp1 = reverse_bits_080082d0(result1,result3,0x1a600000,0x3dd0b461);\n    result1 = (undefined4)((ulonglong)temp1 >> 0x20);\n    temp2 = reverse_bits_080082d0((int)temp1,result1,0x2e037073,0x3ba3198a);\n    *output = temp2;\n    temp1 = reverse_bits_080082d0((int)temp1,result1);\n    temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x2e037073,0x3ba3198a);\n    output[1] = temp1;\n    return 1;\n  }\n  if (0x413921fb < var8) {\n    if (0x7fefffff < var8) {\n      temp1 = reverse_bits_080082d0(input1,input2,input1,input2);\n      output[1] = temp1;\n      *output = temp1;\n      return 0;\n    }\n    result = ((int)var8 >> 0x14) + -0x416;\n    calculate_parameter_value_08008ba0();\n    local_var3 = reverse_bits_and_shift_0800856c();\n    temp1 = reverse_bits_080082d0(input1,var8 + result * -0x100000,(int)local_var3,\n                          (int)((ulonglong)local_var3 >> 0x20));\n    temp1 = calculate_improved_result_08009d78_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    calculate_parameter_value_08008ba0();\n    local_var4 = reverse_bits_and_shift_0800856c();\n    temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    local_var5 = calculate_improved_result_08009d78_08008640((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x41700000);\n    check_and_return_param_equality_08008b10((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    result = calculate_result_0800a5a0(&local_var3,output,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)output + 4) = *(int *)((int)output + 4) + -0x80000000;\n    *(int *)((int)output + 0xc) = *(int *)((int)output + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp1 = FUNC_0800b2cc();\n  result3 = (undefined4)((ulonglong)temp1 >> 0x20);\n  temp2 = calculate_improved_result_08009d78_08008640((int)temp1,result3,0x6dc9c883,0x3fe45f30);\n  calculate_double_precision_result_080082d4((int)temp2,(int)((ulonglong)temp2 >> 0x20),0,0x3fe00000);\n  result = calculate_parameter_value_08008ba0();\n  temp2 = reverse_bits_and_shift_0800856c();\n  result4 = (undefined4)((ulonglong)temp2 >> 0x20);\n  result1 = (undefined4)temp2;\n  temp2 = calculate_improved_result_08009d78_08008640(result1,result4,0x54400000,0x3ff921fb);\n  temp1 = reverse_bits_080082d0((int)temp1,result3,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n  result5 = (undefined4)((ulonglong)temp1 >> 0x20);\n  result3 = (undefined4)temp1;\n  temp2 = calculate_improved_result_08009d78_08008640(result1,result4,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == var8)) {\n    temp3 = reverse_bits_080082d0(result3,result5,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)((var8 >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp2 = calculate_improved_result_08009d78_08008640(result1,result4,0x1a600000,0x3dd0b461);\n    result6 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = reverse_bits_080082d0(result3,result5,(int)temp2,result6);\n    result7 = (undefined4)((ulonglong)temp1 >> 0x20);\n    result2 = (undefined4)temp1;\n    temp3 = reverse_bits_080082d0(result3,result5,result2,result7);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,result6);\n    temp3 = calculate_improved_result_08009d78_08008640(result1,result4,0x2e037073,0x3ba3198a);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n    temp3 = reverse_bits_080082d0(result2,result7,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n    if ((int)(((int)var8 >> 0x14) - ((uint)((int)((ulonglong)temp3 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp2 = calculate_improved_result_08009d78_08008640(result1,result4,0x2e000000,0x3ba3198a);\n    result3 = (undefined4)((ulonglong)temp2 >> 0x20);\n    temp1 = reverse_bits_080082d0(result2,result7,(int)temp2,result3);\n    temp3 = reverse_bits_080082d0(result2,result7);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,result3);\n    temp3 = calculate_improved_result_08009d78_08008640(result1,result4,0x252049c1,0x397b839a);\n    temp2 = reverse_bits_080082d0((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp2,\n                          (int)((ulonglong)temp2 >> 0x20));\n  }\n  temp3 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)temp1 >> 0x20);\n  local_var1 = (undefined4)temp1;\n  *output = temp3;\n  temp1 = reverse_bits_080082d0(local_var1,local_var2);\n  temp1 = reverse_bits_080082d0((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                        (int)((ulonglong)temp2 >> 0x20));\n  output[1] = temp1;\n  if ((int)input2 < 0) {\n    *(int *)output = (int)temp3;\n    *(int *)((int)output + 4) = (int)((ulonglong)temp3 >> 0x20) + -0x80000000;\n    *(int *)(output + 1) = (int)temp1;\n    *(int *)((int)output + 0xc) = (int)((ulonglong)temp1 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_improved_result_08009d78",
            "entrypoint": "0x08009d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009d78": "calculate_improved_result_08009d78",
                "iVar9": "result",
                "local_30": "local_var5",
                "local_38": "local_var4",
                "local_40": "local_var3",
                "local_50": "local_var1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "output",
                "uStack_4c": "local_var2",
                "uVar1": "result1",
                "uVar10": "temp1",
                "uVar11": "temp2",
                "uVar12": "temp3",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar5": "result5",
                "uVar6": "result6",
                "uVar7": "result7",
                "uVar8": "var8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "additional_data": {
                "FUN_0800a1bc": {
                    "calculate": 1,
                    "calculate_result": 24,
                    "calculate_result_with_precision": 1,
                    "calculate_value": 1,
                    "compute_result": 1,
                    "improved_calculate_result": 1
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 1,
                    "double_precision_result": 1
                },
                "calculate_floating_point_value_08008894": {
                    "calculate_floating_point": 1,
                    "floating_point_value": 1
                },
                "calculate_improved_result_08008640": {
                    "calculate_result": 1,
                    "improved_result": 1
                },
                "iVar10": {
                    "bit_counter": 1,
                    "counter": 2,
                    "counter_2": 1,
                    "counter_3": 1,
                    "index": 1,
                    "inner_counter": 3,
                    "iteration": 1,
                    "iteration_counter_2": 1,
                    "loop_count": 2,
                    "loop_counter": 5,
                    "loop_counter2": 1,
                    "loop_counter_2": 1,
                    "loop_index": 1,
                    "num2": 1,
                    "temp10": 3,
                    "temp_10": 3,
                    "temp_8": 1,
                    "temp_counter": 1,
                    "var_10": 1
                },
                "iVar14": {
                    "loop_counter_3": 1
                },
                "iVar16": {
                    "sum": 1
                },
                "iVar2": {
                    "bit_count": 2,
                    "count": 1,
                    "counter": 8,
                    "counter_1": 2,
                    "index": 2,
                    "iteration_count": 2,
                    "iteration_counter_1": 1,
                    "iteration_index": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "loop_counter1": 1,
                    "temp": 1,
                    "temp2": 3,
                    "temp_2": 3,
                    "temp_var_1": 1,
                    "var_2": 1
                },
                "param_1": {
                    "input1": 3,
                    "input_1": 16,
                    "input_a": 2,
                    "input_param1": 1,
                    "input_value": 4,
                    "input_value1": 1,
                    "input_value_1": 4
                },
                "param_2": {
                    "bit_value": 1,
                    "exponent": 1,
                    "flag": 1,
                    "input2": 3,
                    "input_2": 16,
                    "input_b": 2,
                    "input_param2": 1,
                    "input_value2": 1,
                    "input_value_2": 4,
                    "shift_value": 1
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 1,
                    "reversed_bits": 1
                },
                "uVar1": {
                    "bits_difference": 1,
                    "count": 1,
                    "remainder": 2,
                    "result_1": 3,
                    "shift": 1,
                    "shift_amount": 2,
                    "shift_count": 2,
                    "shifted_bit_value": 1,
                    "shifted_count": 1,
                    "shifted_flag": 1,
                    "shifted_input": 1,
                    "shifted_input2": 2,
                    "shifted_input_2": 3,
                    "shifted_value": 2,
                    "temp1": 4,
                    "temp_1": 3,
                    "var_1": 1
                },
                "uVar11": {
                    "adjusted_shifted_result": 1,
                    "compare_value": 2,
                    "comparison_result": 1,
                    "current_value": 1,
                    "extra_value_2": 1,
                    "final_result": 1,
                    "modified_result": 1,
                    "new_value": 1,
                    "one": 1,
                    "quotient": 1,
                    "temp11": 3,
                    "temp4": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_11": 3,
                    "temp_2": 1,
                    "temp_9": 1,
                    "temp_result": 3,
                    "temp_result_2": 1,
                    "u_var11": 2,
                    "updated_remainder": 1,
                    "updated_result": 1,
                    "var_11": 1
                },
                "uVar12": {
                    "extra_bits": 1,
                    "final_result": 1,
                    "final_shift": 2,
                    "leading_zeros": 1,
                    "normalized_shift": 1,
                    "result_shift": 2,
                    "shift": 1,
                    "shift_amount": 3,
                    "shift_amount_value": 1,
                    "shift_count": 1,
                    "shift_value": 2,
                    "shifted_bits": 1,
                    "shifted_input_2": 1,
                    "shifted_result": 1,
                    "shifts": 1,
                    "temp10": 1,
                    "temp12": 3,
                    "temp_10": 1,
                    "temp_12": 3,
                    "trailing_zeros": 1,
                    "u_var12": 1,
                    "var_12": 1
                },
                "uVar13": {
                    "calculated_result": 2,
                    "calculation_result": 5,
                    "combined": 1,
                    "double_result": 1,
                    "improved_result": 5,
                    "intermediate_result": 2,
                    "result": 2,
                    "temp13": 3,
                    "temp5": 1,
                    "temp_11": 1,
                    "temp_13": 3,
                    "temp_double": 1,
                    "temp_result": 1,
                    "temp_result_3": 1,
                    "u_var13": 1,
                    "var_13": 1
                },
                "uVar14": {
                    "mask": 1,
                    "temp_3": 1
                },
                "uVar15": {
                    "bit_mask": 1,
                    "shift": 1
                },
                "uVar16": {
                    "u_var16": 1
                },
                "uVar17": {
                    "carry": 1
                },
                "uVar18": {
                    "bit": 1
                },
                "uVar19": {
                    "divisor": 1
                },
                "uVar20": {
                    "remainder": 1
                },
                "uVar3": {
                    "bit_shift": 1,
                    "current_bit": 1,
                    "mask": 7,
                    "result": 1,
                    "result_2": 1,
                    "result_upper": 1,
                    "shifted_input1": 1,
                    "shifted_input_2_mod": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp_1": 1,
                    "temp_3": 3,
                    "temp_count": 1,
                    "temp_value": 3,
                    "temp_var_2": 1,
                    "u_var3": 1,
                    "var_3": 1
                },
                "uVar4": {
                    "extra_value": 1,
                    "result": 1,
                    "result_4": 1,
                    "result_part_1": 1,
                    "shifted_input2_upper": 1,
                    "temp": 6,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_1": 1,
                    "temp_2": 1,
                    "temp_4": 3,
                    "temp_float": 2,
                    "temp_value_2": 1,
                    "temp_var_3": 1,
                    "temp_variable": 1,
                    "u_var4": 2,
                    "upper_half": 1,
                    "var_4": 1
                },
                "uVar5": {
                    "bit_mask": 1,
                    "counter_2": 1,
                    "mask": 4,
                    "shift": 3,
                    "shift_amount": 2,
                    "shift_count": 1,
                    "shift_value": 2,
                    "shifted_input1": 1,
                    "shifted_input2_temp": 1,
                    "shifted_input_1": 1,
                    "shifted_input_1_mod": 1,
                    "shifted_value": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_1": 1,
                    "temp_3": 1,
                    "temp_5": 3,
                    "temp_shifted_flag": 1,
                    "var_5": 1
                },
                "uVar6": {
                    "bit": 3,
                    "bit_mask": 4,
                    "bitmask": 1,
                    "comparison": 1,
                    "divisor": 1,
                    "left_shift_value": 1,
                    "mask": 5,
                    "mask_bit": 1,
                    "shift_mask": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 3,
                    "temp_2": 1,
                    "temp_4": 1,
                    "temp_6": 3,
                    "temp_bit": 1,
                    "u_var6": 1,
                    "var_6": 1
                },
                "uVar7": {
                    "adjusted_result": 1,
                    "calculation_result": 1,
                    "output": 1,
                    "remainder": 2,
                    "result": 11,
                    "result_1": 2,
                    "shifted_input_1_and_mask": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp7": 3,
                    "temp_5": 1,
                    "temp_7": 3,
                    "value": 1,
                    "value_1": 1,
                    "var_7": 1
                },
                "uVar8": {
                    "diff": 2,
                    "difference": 1,
                    "remainder": 1,
                    "remaining": 1,
                    "remaining_bits": 1,
                    "remaining_count": 1,
                    "remaining_flag": 1,
                    "remaining_shift": 3,
                    "remaining_shifts": 1,
                    "result_2": 2,
                    "shifted_input": 1,
                    "shifted_remainder": 2,
                    "temp2": 1,
                    "temp5": 1,
                    "temp7": 1,
                    "temp8": 3,
                    "temp_6": 1,
                    "temp_8": 3,
                    "temp_result": 2,
                    "value_2": 1,
                    "var_8": 1
                },
                "uVar9": {
                    "input_shifted": 1,
                    "multiplier": 1,
                    "num1": 1,
                    "result_3": 1,
                    "shifted_input": 1,
                    "shifted_input1": 1,
                    "shifted_input1_temp": 1,
                    "shifted_input_1": 3,
                    "shifted_input_1_copy": 1,
                    "shifted_input_value": 1,
                    "shifted_result": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp9": 3,
                    "temp_2": 1,
                    "temp_7": 1,
                    "temp_9": 3,
                    "temp_a": 1,
                    "temp_input_1": 1,
                    "temp_value": 3,
                    "value_3": 1,
                    "var_9": 1
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_08008894",
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "code": "\nuint improved_calculate_result_0800a1bc(uint input_1,uint input_2)\n\n{\n  uint temp1;\n  int counter;\n  uint mask;\n  undefined4 temp;\n  uint mask;\n  uint mask;\n  uint result;\n  uint temp_8;\n  uint temp_9;\n  int loop_counter;\n  uint temp11;\n  uint shift_amount;\n  undefined8 calculation_result;\n  \n  if ((~input_2 & 0x7ff00000) == 0) {\n    calculation_result = improved_result(input_1,input_2,input_1,input_2);\n    result = calculate_double_precision_result_080082d4((int)calculation_result,(int)((ulonglong)calculation_result >> 0x20),input_1,input_2);\n    return result;\n  }\n  if ((int)input_2 < 1) {\n    if ((input_2 & 0x7fffffff | input_1) == 0) {\n      return input_1;\n    }\n    if (input_2 != 0) {\n      calculation_result = reverse_bits_080082d0(input_1,input_2,input_1);\n      temp = (undefined4)((ulonglong)calculation_result >> 0x20);\n      result = floating_point_value((int)calculation_result,temp,(int)calculation_result,temp);\n      return result;\n    }\n    do {\n      temp_9 = input_1;\n      result = temp_9 >> 0xb;\n      input_2 = input_2 - 0x15;\n      input_1 = temp_9 << 0x15;\n    } while (result == 0);\n    temp1 = input_2;\n    if (-1 < (int)temp_9) goto LAB_0800a290;\n    shift_amount = 0x20;\n    mask = 0xffffffff;\n    temp_9 = input_1;\n  }\n  else {\n    temp1 = (int)input_2 >> 0x14;\n    result = input_2;\n    temp_9 = input_1;\n    if (temp1 != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp_9 = 0;\n    shift_amount = result;\n    do {\n      mask = temp_9;\n      result = shift_amount << 1;\n      loop_counter = shift_amount << 0xc;\n      temp_9 = mask + 1;\n      shift_amount = result;\n    } while (-1 < loop_counter);\n    shift_amount = 0x20 - temp_9;\n    input_2 = temp1;\n    temp_9 = input_1 << (temp_9 & 0xff);\n  }\n  result = input_1 >> (shift_amount & 0xff) | result;\n  temp1 = input_2 - mask;\nLAB_0800a1da:\n  result = result & 0xfffff | 0x100000;\n  if (-1 < (int)(temp1 << 0x1f)) {\n    result = result * 2 - ((int)temp_9 >> 0x1f);\n    temp_9 = temp_9 << 1;\n  }\n  shift_amount = 0;\n  result = result * 2 - ((int)temp_9 >> 0x1f);\n  temp_9 = temp_9 << 1;\n  temp1 = 0;\n  loop_counter = 0x16;\n  mask = 0x200000;\n  do {\n    counter = temp1 + mask;\n    if (counter <= (int)result) {\n      result = result - counter;\n      temp1 = counter + mask;\n      shift_amount = shift_amount + mask;\n    }\n    loop_counter = loop_counter + -1;\n    result = result * 2 - ((int)temp_9 >> 0x1f);\n    mask = mask >> 1;\n    temp_9 = temp_9 << 1;\n  } while (loop_counter != 0);\n  counter = 0x20;\n  mask = 0x80000000;\n  loop_counter = 0;\n  mask = 0;\n  do {\n    mask = mask + loop_counter;\n    temp11 = temp1;\n    if ((int)temp1 < (int)result) {\n      if ((int)mask < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(mask + mask)) {\n          temp11 = temp1 + 1;\n        }\n      }\n      temp_8 = result - temp1;\n      temp1 = temp11;\n      if (temp_9 < mask) {\n        temp_8 = temp_8 - 1;\n      }\nLAB_0800a262:\n      loop_counter = mask + mask;\n      temp_9 = temp_9 - mask;\n      mask = mask + mask;\n      result = temp_8;\n    }\n    else if ((result == temp1) && (mask <= temp_9)) {\n      if ((int)mask < 0) goto LAB_0800a26a;\n      temp_8 = 0;\n      temp1 = result;\n      goto LAB_0800a262;\n    }\n    counter = counter + -1;\n    mask = mask >> 1;\n    result = result * 2 - ((int)temp_9 >> 0x1f);\n    temp_9 = temp_9 << 1;\n    if (counter == 0) {\n      if ((result | temp_9) == 0) {\n        mask = mask >> 1;\n      }\n      else if (mask == 0xffffffff) {\n        shift_amount = shift_amount + 1;\n        mask = 0;\n      }\n      else {\n        mask = mask + 1 >> 1;\n      }\n      if ((shift_amount & 1) != 0) {\n        mask = mask | 0x80000000;\n      }\n      return mask;\n    }\n  } while( true );\n}\n\n",
            "current_name": "improved_calculate_result_0800a1bc",
            "entrypoint": "0x0800a1bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a1bc": "improved_calculate_result_0800a1bc",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "calculate_floating_point_value_08008894": "floating_point_value",
                "calculate_improved_result_08008640": "improved_result",
                "iVar10": "loop_counter",
                "iVar2": "counter",
                "param_1": "input_1",
                "param_2": "input_2",
                "reverse_bits_080082d0": "reverse_bits",
                "uVar1": "temp1",
                "uVar11": "temp11",
                "uVar12": "shift_amount",
                "uVar13": "calculation_result",
                "uVar3": "mask",
                "uVar4": "temp",
                "uVar5": "mask",
                "uVar6": "mask",
                "uVar7": "result",
                "uVar8": "temp_8",
                "uVar9": "temp_9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a348": {
            "additional_data": {
                "FUN_0800a348": {
                    "calculate_improved_result": 11,
                    "calculate_improved_result_from_binary": 1,
                    "calculate_improved_value": 6,
                    "calculate_result": 8,
                    "improved_calculate_result": 1
                },
                "PTR_08008640": {
                    "calculate_improved_result": 1
                },
                "PTR_08008ba0": {
                    "calculate_param_value": 1
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 1
                },
                "iVar1": {
                    "calc_result": 1,
                    "calc_value": 2,
                    "calculated_value": 3,
                    "calculation_result": 8,
                    "param_value": 2,
                    "parameter_value": 2,
                    "result": 3,
                    "result1": 3,
                    "result_1": 2,
                    "result_var": 1,
                    "u_var4_minus_value": 1,
                    "value": 1
                },
                "local_28": {
                    "calc_result_6": 1,
                    "calculation_result_8": 1,
                    "local_var3": 3,
                    "local_var_3": 2,
                    "local_variable3": 2,
                    "processed_value3": 1,
                    "result5": 1,
                    "result8": 1,
                    "temp2": 2,
                    "temp3": 4,
                    "temp_3": 4,
                    "temp_result2": 1,
                    "temp_result32_bit": 1,
                    "temp_value_3": 1,
                    "temp_var3": 3,
                    "temp_var_3": 1,
                    "temp_var_6": 1,
                    "temp_variable_3": 1
                },
                "local_30": {
                    "calc_result_4": 1,
                    "calculation_result_6": 1,
                    "local_result32_bit": 1,
                    "local_var1": 3,
                    "local_var_1": 2,
                    "local_variable1": 2,
                    "processed_value1": 1,
                    "result6": 1,
                    "result7_lower": 1,
                    "temp1": 5,
                    "temp5": 1,
                    "temp_1": 4,
                    "temp_result": 1,
                    "temp_value_1": 1,
                    "temp_var1": 3,
                    "temp_var_1": 1,
                    "temp_var_4": 1,
                    "temp_variable_1": 1
                },
                "param_1": {
                    "input1": 13,
                    "input_1": 6,
                    "input_param": 3,
                    "input_param1": 2,
                    "input_param_1": 4,
                    "input_value": 2,
                    "input_value_1": 1
                },
                "param_2": {
                    "flags": 1,
                    "input2": 13,
                    "input_2": 6,
                    "input_flag": 1,
                    "input_param2": 2,
                    "input_param_2": 4,
                    "input_parameter": 1,
                    "input_value": 2,
                    "input_value_2": 1
                },
                "param_3": {
                    "additional_param_1": 1,
                    "another_param": 1,
                    "extra_param_1": 1,
                    "input3": 13,
                    "input_3": 6,
                    "input_param3": 3,
                    "input_param_1": 1,
                    "input_param_3": 4,
                    "input_value_3": 1
                },
                "param_4": {
                    "additional_param_2": 1,
                    "another_value": 1,
                    "extra_param_2": 1,
                    "input4": 13,
                    "input_4": 6,
                    "input_param4": 3,
                    "input_param_2": 1,
                    "input_param_4": 4,
                    "input_value_4": 1
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 1
                },
                "uStack_10": {
                    "temp_value_7": 1
                },
                "uStack_1c": {
                    "temp_value_6": 1
                },
                "uStack_20": {
                    "temp_value_5": 1
                },
                "uStack_24": {
                    "calc_result_7": 1,
                    "calculation_result_9": 1,
                    "local_var4": 3,
                    "local_var_4": 2,
                    "local_variable4": 2,
                    "processed_value4": 1,
                    "result6": 1,
                    "result9": 1,
                    "temp2": 1,
                    "temp2_hi": 1,
                    "temp2_high": 1,
                    "temp4": 3,
                    "temp_4": 4,
                    "temp_result2_high": 1,
                    "temp_result_upper32_bit": 1,
                    "temp_value_4": 1,
                    "temp_var4": 3,
                    "temp_var_4": 1,
                    "temp_var_7": 1,
                    "temp_variable_4": 1
                },
                "uStack_2c": {
                    "calc_result_5": 1,
                    "calculation_result_7": 1,
                    "local_result_upper32_bit": 1,
                    "local_var2": 3,
                    "local_var_2": 2,
                    "local_variable2": 2,
                    "processed_value2": 1,
                    "result7": 1,
                    "result7_upper": 1,
                    "temp1_hi": 1,
                    "temp1_high": 1,
                    "temp2": 3,
                    "temp4": 1,
                    "temp_2": 4,
                    "temp_result_high": 1,
                    "temp_value_2": 1,
                    "temp_var2": 3,
                    "temp_var_2": 1,
                    "temp_var_5": 1,
                    "temp_variable_2": 1
                },
                "uStack_4": {
                    "temp_value_10": 1
                },
                "uStack_8": {
                    "temp_value_9": 1
                },
                "uStack_c": {
                    "temp_value_8": 1
                },
                "uVar1": {
                    "temp3": 1
                },
                "uVar10": {
                    "reverse_bits2": 1,
                    "temp4_hi": 1
                },
                "uVar11": {
                    "reverse_bits2_high": 1,
                    "temp5": 1
                },
                "uVar12": {
                    "reverse_bits3": 1,
                    "temp5_hi": 1
                },
                "uVar13": {
                    "reverse_bits3_high": 1,
                    "temp6": 1
                },
                "uVar14": {
                    "reverse_bits4": 1,
                    "temp6_hi": 1
                },
                "uVar15": {
                    "reverse_bits4_high": 1,
                    "temp7": 1
                },
                "uVar16": {
                    "reverse_bits5": 1,
                    "temp7_hi": 1
                },
                "uVar17": {
                    "reverse_bits5_high": 1,
                    "temp8": 1
                },
                "uVar18": {
                    "reverse_bits6": 1,
                    "temp8_hi": 1
                },
                "uVar19": {
                    "reverse_bits6_high": 1
                },
                "uVar2": {
                    "calculation_result_1": 1,
                    "processed_result1": 1,
                    "result1": 6,
                    "result1_lo": 1,
                    "result2": 3,
                    "result32_bit": 1,
                    "result8_lower": 1,
                    "result_1": 1,
                    "result_2": 1,
                    "result_low": 7,
                    "result_lower": 3,
                    "result_u_var2": 1,
                    "result_var1": 1,
                    "temp_result1": 1,
                    "temp_var_1": 1,
                    "var1": 1
                },
                "uVar3": {
                    "calculation_result_2": 1,
                    "processed_result2": 1,
                    "result1_hi": 1,
                    "result1_high": 2,
                    "result2": 4,
                    "result3": 3,
                    "result8_upper": 1,
                    "result_2": 1,
                    "result_3": 1,
                    "result_high": 7,
                    "result_u_var3": 1,
                    "result_upper": 3,
                    "result_upper32_bit": 1,
                    "result_var2": 1,
                    "temp_result2": 1,
                    "temp_var_2": 1,
                    "var2": 1
                },
                "uVar4": {
                    "abs_input2": 6,
                    "abs_input_parameter": 1,
                    "abs_input_value": 1,
                    "adjusted_input2": 1,
                    "cleaned_input_2": 1,
                    "input_masked": 1,
                    "masked_flags": 1,
                    "masked_input_param_2": 1,
                    "masked_param2": 1,
                    "masked_value": 1,
                    "modified_flag": 1,
                    "modified_input2": 3,
                    "param_masked": 1,
                    "positive_input2": 1,
                    "positive_input_2": 2,
                    "positive_param_2": 1,
                    "temp_value": 1,
                    "temp_var_3": 1,
                    "u_var4": 1,
                    "unsigned_input": 1,
                    "unsigned_input2": 1,
                    "unsigned_input_param2": 1,
                    "unsigned_value": 1
                },
                "uVar5": {
                    "calc_result1": 2,
                    "calc_result_1": 1,
                    "calculation_result_3": 1,
                    "improved_result_1": 2,
                    "intermediate_result": 2,
                    "intermediate_result1": 3,
                    "result1": 3,
                    "result2": 3,
                    "result3": 2,
                    "result4": 1,
                    "result5": 1,
                    "result64_bit": 1,
                    "result_1": 2,
                    "result_temp": 1,
                    "result_temp_1": 1,
                    "result_u_var5": 1,
                    "result_value": 1,
                    "temp_result": 2,
                    "temp_result_1": 1
                },
                "uVar6": {
                    "calc_result2": 2,
                    "calc_result_2": 1,
                    "calculation_result_4": 1,
                    "current_result": 1,
                    "final_result": 6,
                    "improved_result_2": 2,
                    "intermediate_result2": 3,
                    "intermediate_value": 1,
                    "result2": 2,
                    "result3": 3,
                    "result4": 2,
                    "result5": 1,
                    "result6": 1,
                    "result9": 1,
                    "result_2": 2,
                    "result_temp_2": 1,
                    "temp_result_2": 1
                },
                "uVar7": {
                    "additional_result": 1,
                    "calc_result": 1,
                    "calc_result3": 2,
                    "calc_result_3": 1,
                    "calculation_result2": 1,
                    "calculation_result_5": 1,
                    "final_result2": 1,
                    "improved_result": 2,
                    "improved_result_3": 2,
                    "intermediate_result3": 3,
                    "other_intermediate_value": 1,
                    "result10": 1,
                    "result3": 2,
                    "result4": 3,
                    "result5": 2,
                    "result6": 1,
                    "result7": 1,
                    "result_3": 2,
                    "result_temp_3": 1,
                    "result_u_var7": 1,
                    "temp_result_3": 1
                },
                "uVar8": {
                    "reverse_bits1": 1,
                    "temp3_hi": 1
                },
                "uVar9": {
                    "reverse_bits1_high": 1,
                    "temp4": 1
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "code": "\nundefined4 calculate_improved_result_from_binary_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int calculation_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  uint abs_input2;\n  undefined8 intermediate_result1;\n  undefined8 final_result;\n  undefined8 intermediate_result3;\n  undefined4 temp1;\n  undefined4 temp_2;\n  undefined4 temp3;\n  undefined4 temp_4;\n  \n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x3e400000) {\n    calculation_result = calculate_parameter_value_08008ba0();\n    if (calculation_result == 0) {\n      return 0;\n    }\n    intermediate_result1 = calculate_improved_result_08008640(input1,input2,input1,input2);\n    result_high = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n    result_low = (undefined4)intermediate_result1;\n    final_result = calculate_improved_result_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result = calculate_double_precision_result_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_double_precision_result_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_double_precision_result_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n  }\n  else {\n    intermediate_result1 = calculate_improved_result_08008640(input1,input2,input1,input2);\n    result_high = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n    result_low = (undefined4)intermediate_result1;\n    final_result = calculate_improved_result_08008640(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result = calculate_double_precision_result_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_double_precision_result_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = calculate_double_precision_result_080082d4((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = calculate_improved_result_08008640((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    if (0x3fd33332 < abs_input2) {\n      if (abs_input2 < 0x3fe90001) {\n        calculation_result = abs_input2 - 0x200000;\n        intermediate_result1 = reverse_bits_080082d0(0,0x3ff00000,0,calculation_result);\n      }\n      else {\n        calculation_result = 0x3fd20000;\n        intermediate_result1 = 0x3fe7000000000000;\n      }\n      temp_4 = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n      temp3 = (undefined4)intermediate_result1;\n      intermediate_result1 = calculate_improved_result_08008640(result_low,result_high,0,0x3fe00000);\n      intermediate_result1 = reverse_bits_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),0,calculation_result);\n      final_result = calculate_improved_result_08008640(result_low,result_high,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n      intermediate_result3 = calculate_improved_result_08008640(input1,input2,input3,input4);\n      final_result = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)intermediate_result3,\n                           (int)((ulonglong)intermediate_result3 >> 0x20));\n      intermediate_result1 = reverse_bits_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)final_result,\n                           (int)((ulonglong)final_result >> 0x20));\n      result_low = reverse_bits_080082d0(temp3,temp_4,(int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20));\n      return result_low;\n    }\n  }\n  temp_2 = (undefined4)((ulonglong)final_result >> 0x20);\n  temp1 = (undefined4)final_result;\n  result_low = (undefined4)((ulonglong)intermediate_result1 >> 0x20);\n  final_result = calculate_improved_result_08008640((int)intermediate_result1,result_low,0,0x3fe00000);\n  intermediate_result1 = calculate_improved_result_08008640((int)intermediate_result1,result_low,temp1,temp_2);\n  intermediate_result3 = calculate_improved_result_08008640(input1,input2,input3,input4);\n  intermediate_result1 = reverse_bits_080082d0((int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20),(int)intermediate_result3,\n                       (int)((ulonglong)intermediate_result3 >> 0x20));\n  intermediate_result1 = reverse_bits_080082d0((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)intermediate_result1,\n                       (int)((ulonglong)intermediate_result1 >> 0x20));\n  result_low = reverse_bits_080082d0(0,0x3ff00000,(int)intermediate_result1,(int)((ulonglong)intermediate_result1 >> 0x20));\n  return result_low;\n}\n\n",
            "current_name": "calculate_improved_result_from_binary_0800a348",
            "entrypoint": "0x0800a348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a348": "calculate_improved_result_from_binary_0800a348",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "iVar1": "calculation_result",
                "local_28": "temp3",
                "local_30": "temp1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_080082d0": "reverse_bits",
                "uStack_24": "temp_4",
                "uStack_2c": "temp_2",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "abs_input2",
                "uVar5": "intermediate_result1",
                "uVar6": "final_result",
                "uVar7": "intermediate_result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "additional_data": {
                "FUN_0800a5a0": {
                    "calculate_result": 14,
                    "improve_and_calculate": 1,
                    "new_function_name": 1,
                    "reverse_and_calculate": 1,
                    "reverse_and_shift_bits": 1
                },
                "bVar24": {
                    "bool_var1": 1,
                    "boolean": 1,
                    "boolean_var_1": 1,
                    "cond": 1,
                    "condition": 2,
                    "flag": 8,
                    "flag1": 1,
                    "flag_bool": 1,
                    "is_true": 2,
                    "temp_boolean": 1,
                    "temp_boolean_1": 1
                },
                "iVar14": {
                    "count": 1,
                    "counter3": 3,
                    "counter_3": 3,
                    "index2": 1,
                    "index3": 1,
                    "index_var_2": 1,
                    "inner_count": 1,
                    "iterator3": 1,
                    "k": 2,
                    "loop_counter2": 1,
                    "loop_var3": 1,
                    "new_var_14": 1,
                    "temp7": 2,
                    "temp_counter": 2,
                    "temp_counter1": 1,
                    "temp_counter2": 1,
                    "temp_counter_3": 1,
                    "temp_index": 1,
                    "temp_index3": 1,
                    "temp_int_3": 1,
                    "temp_variable_2": 1,
                    "var14": 1
                },
                "iVar15": {
                    "first_index": 1,
                    "i_var15": 2,
                    "lookup_index": 2,
                    "new_var_15": 1,
                    "offset": 1,
                    "offset_index": 1,
                    "offset_minus_1": 1,
                    "param_equality_value": 1,
                    "size": 1,
                    "some_value": 1,
                    "start_index": 2,
                    "temp_count1": 1,
                    "temp_index_offset": 1,
                    "temp_int_4": 1,
                    "temp_length_1": 1,
                    "temp_value": 1,
                    "temp_value2": 1,
                    "temp_var3": 1,
                    "temp_var5": 2,
                    "value1": 2,
                    "var1": 1,
                    "var15": 1,
                    "var5": 1,
                    "var_1": 1
                },
                "iVar17": {
                    "count": 1,
                    "counter4": 2,
                    "counter_4": 2,
                    "i_var17": 1,
                    "index": 3,
                    "index4": 1,
                    "j": 1,
                    "loop_counter3": 1,
                    "loop_index": 1,
                    "loop_var1": 1,
                    "loop_var_2": 1,
                    "new_var_17": 1,
                    "offset2": 1,
                    "temp_count2": 1,
                    "temp_counter_4": 1,
                    "temp_int_5": 1,
                    "temp_iteration_offset": 1,
                    "temp_value2": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "value2": 2,
                    "var17": 1,
                    "var2": 1,
                    "var6": 1,
                    "var_2": 1
                },
                "iVar18": {
                    "temp_counter_5": 1,
                    "temp_variable_3": 1
                },
                "iVar20": {
                    "counter5": 1,
                    "temp_count4": 1,
                    "temp_int_6": 1,
                    "var20": 1
                },
                "iVar21": {
                    "calculation_index": 1,
                    "comparison": 1,
                    "comparison_result": 1,
                    "counter5": 1,
                    "counter_5": 1,
                    "i_var21": 1,
                    "i_var21_temp": 1,
                    "index5": 1,
                    "loop_counter4": 1,
                    "loop_offset_index": 1,
                    "loop_var2": 1,
                    "mode_check": 1,
                    "new_var_21": 1,
                    "temp2": 1,
                    "temp_count3": 1,
                    "temp_index": 1,
                    "temp_index2": 1,
                    "temp_var5": 1,
                    "temp_variable_4": 1,
                    "value3": 2,
                    "var3": 1,
                    "var7": 1,
                    "var_3": 1
                },
                "iVar22": {
                    "temp_counter_6": 1,
                    "temp_int_7": 1
                },
                "iVar23": {
                    "temp_index2": 1
                },
                "iVar24": {
                    "check_result": 1
                },
                "iVar26": {
                    "calculation_result_1": 1
                },
                "iVar4": {
                    "count": 1,
                    "counter": 7,
                    "counter1": 1,
                    "counter_1": 1,
                    "i": 2,
                    "index": 7,
                    "index1": 1,
                    "index_var": 1,
                    "iterator1": 1,
                    "loop_counter1": 1,
                    "loop_var1": 1,
                    "new_var_4": 1,
                    "temp2": 2,
                    "temp_counter_1": 1,
                    "temp_int": 1,
                    "temp_variable": 1
                },
                "iVar9": {
                    "count": 1,
                    "counter2": 3,
                    "counter_2": 3,
                    "diff": 1,
                    "end_index": 1,
                    "i": 1,
                    "index2": 2,
                    "inner_index": 1,
                    "iter": 1,
                    "iteration": 1,
                    "iterator2": 1,
                    "j": 1,
                    "loop_counter2": 1,
                    "loop_counter4": 1,
                    "loop_var2": 1,
                    "loop_var_1": 1,
                    "new_var_9": 1,
                    "param_counter": 1,
                    "temp_counter": 1,
                    "temp_counter_2": 1,
                    "temp_int_2": 1,
                    "temp_iteration2": 1,
                    "temp_variable_1": 1,
                    "var4": 1,
                    "var9": 1
                },
                "local_160": {
                    "array_8": 1,
                    "calculation_array": 1,
                    "local_array1": 1,
                    "local_array3": 2,
                    "local_array4": 2,
                    "local_array_2": 1,
                    "local_array_3": 1,
                    "local_var3": 1,
                    "local_var7": 1,
                    "new_var_160": 1,
                    "parameter_array": 1,
                    "result_temp": 1,
                    "stack_array": 1,
                    "stack_variable3": 1,
                    "temp_array": 1,
                    "temp_array2": 1,
                    "temp_array3": 2,
                    "temp_array4": 1,
                    "temp_array_2": 2,
                    "temp_array_5": 1,
                    "temp_index_array": 2,
                    "temp_stack3": 1,
                    "temp_values": 1,
                    "temp_vars_array": 1,
                    "var_array2": 1
                },
                "local_168": {
                    "array_7": 1,
                    "double_precision_result": 1,
                    "local_value4": 1,
                    "local_value_3": 1,
                    "local_var1": 1,
                    "local_var2": 2,
                    "local_var5": 2,
                    "local_var6": 1,
                    "local_variable1": 1,
                    "new_var_168": 1,
                    "result_array_2": 1,
                    "result_variable": 1,
                    "reversed_bits_temp": 1,
                    "stack_value2": 1,
                    "stack_variable2": 1,
                    "temp13": 1,
                    "temp_array3": 1,
                    "temp_array_1": 1,
                    "temp_array_4": 1,
                    "temp_result": 1,
                    "temp_result2": 1,
                    "temp_result_array": 1,
                    "temp_stack2": 1,
                    "temp_storage2": 1,
                    "temp_value7": 1,
                    "temp_var2": 1,
                    "temp_var_array": 1,
                    "var_5": 1
                },
                "local_258": {
                    "array2": 1,
                    "array_6": 1,
                    "array_temp": 1,
                    "binary_data": 1,
                    "calculation_array": 1,
                    "data_result": 1,
                    "input_array": 3,
                    "intermediate_array": 1,
                    "local_array": 1,
                    "local_array2": 2,
                    "local_array3": 2,
                    "local_array_2": 1,
                    "local_array_3": 1,
                    "local_result_array": 1,
                    "local_var5": 1,
                    "lookup_array": 1,
                    "new_var_258": 1,
                    "result_array": 4,
                    "stack_array2": 1,
                    "temp_array": 1,
                    "temp_array2": 1,
                    "temp_array_3": 1
                },
                "local_260": {
                    "array": 1,
                    "array1": 1,
                    "array_5": 1,
                    "input_array": 1,
                    "local_array": 2,
                    "local_array1": 1,
                    "local_array2": 3,
                    "local_array_1": 1,
                    "local_array_2": 1,
                    "local_stack_array": 1,
                    "local_var4": 1,
                    "new_var_260": 1,
                    "output_data": 1,
                    "result_array": 2,
                    "result_array_1": 1,
                    "reverse_bit_array": 1,
                    "stack_array1": 1,
                    "temp_array": 1,
                    "temp_array2": 2,
                    "temp_array_2": 1,
                    "var_array": 1
                },
                "local_26c": {
                    "array_4": 1,
                    "array_length": 1,
                    "calculation_size": 1,
                    "calculation_var2": 1,
                    "div1": 1,
                    "local_counter": 1,
                    "local_counter3": 1,
                    "local_value3": 1,
                    "local_value_1": 1,
                    "local_var1": 2,
                    "local_var3": 1,
                    "local_var4": 2,
                    "new_var_26c": 1,
                    "num_complete_chunks": 1,
                    "reverse_shift_count": 1,
                    "stack_var4": 1,
                    "temp_count": 1,
                    "temp_count7": 1,
                    "temp_length_3": 2,
                    "temp_offset2": 1,
                    "temp_value4": 1,
                    "temp_value6": 1,
                    "temp_var_1": 1,
                    "temp_variable_7": 1,
                    "var5": 1,
                    "var_3": 1
                },
                "local_270": {
                    "array_3": 1,
                    "array_end": 2,
                    "array_index": 2,
                    "calculation_length_1": 1,
                    "current_index": 1,
                    "div2": 1,
                    "local_count2": 1,
                    "local_counter2": 1,
                    "local_size": 1,
                    "local_temp": 1,
                    "local_value": 1,
                    "local_value2": 1,
                    "local_var2": 1,
                    "local_var3": 2,
                    "new_var_270": 1,
                    "reverse_shift_amount": 1,
                    "shift_value": 1,
                    "stack_var3": 1,
                    "temp11": 1,
                    "temp_count6": 1,
                    "temp_length_2": 1,
                    "temp_offset": 2,
                    "temp_offset_1": 1,
                    "temp_value3": 1,
                    "temp_value5": 1,
                    "temp_variable_6": 1,
                    "var_2": 1
                },
                "local_280": {
                    "array_2": 1,
                    "calculation_length_2": 1,
                    "calculation_var1": 1,
                    "div3": 1,
                    "end_index": 1,
                    "local_array1_length": 1,
                    "local_count1": 1,
                    "local_counter": 2,
                    "local_counter1": 1,
                    "local_value1": 1,
                    "local_value_2": 1,
                    "local_var2": 2,
                    "loop_counter_4": 1,
                    "new_var_280": 1,
                    "num_non_zero_elements": 1,
                    "output_array_index": 1,
                    "stack_var2": 1,
                    "temp_array_size": 1,
                    "temp_count": 1,
                    "temp_count5": 1,
                    "temp_counter2": 1,
                    "temp_length_1": 1,
                    "temp_length_2": 1,
                    "temp_offset_index": 1,
                    "temp_value4": 1,
                    "temp_variable_5": 1,
                    "var_1": 1,
                    "var_4": 1
                },
                "local_284": {
                    "array_1": 1,
                    "local_array1": 4,
                    "local_array_1": 1,
                    "local_pointer1": 1,
                    "local_ptr": 1,
                    "local_stack_array_1": 1,
                    "local_var1": 3,
                    "new_var_284": 1,
                    "output_array_ptr": 1,
                    "ptr4": 1,
                    "result_array": 1,
                    "result_array_2": 1,
                    "result_array_end": 1,
                    "stack_var1": 1,
                    "temp_array": 6,
                    "temp_array1": 1,
                    "temp_array_1": 1,
                    "temp_array_ptr": 2
                },
                "local_29c": {
                    "temp_result2": 1
                },
                "param_1": {
                    "initial_value": 1,
                    "input": 1,
                    "input1": 5,
                    "input_1": 6,
                    "input_data": 1,
                    "input_param": 5,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "input_parameter": 4,
                    "input_parameter1": 1,
                    "input_size": 1,
                    "input_value_1": 1,
                    "input_variable": 1,
                    "new_param_1": 1
                },
                "param_2": {
                    "array": 1,
                    "input2": 5,
                    "input_2": 6,
                    "input_array": 2,
                    "input_param2": 2,
                    "input_param_2": 1,
                    "input_parameter2": 1,
                    "new_param_2": 1,
                    "output": 1,
                    "output_array": 1,
                    "output_data": 1,
                    "output_param": 5,
                    "output_parameter": 3,
                    "result_array": 1
                },
                "param_3": {
                    "array_length": 4,
                    "input3": 2,
                    "input_3": 5,
                    "input_array_length": 1,
                    "input_length": 7,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_parameter3": 1,
                    "input_size": 4,
                    "length": 1,
                    "new_param_3": 1,
                    "num_elements": 1,
                    "size": 2
                },
                "param_4": {
                    "additional_length": 1,
                    "input4": 2,
                    "input_4": 5,
                    "input_array_offset": 1,
                    "input_offset": 1,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_parameter4": 1,
                    "input_start": 1,
                    "loop_counter_1": 1,
                    "multiplier": 1,
                    "new_param_4": 1,
                    "num1": 1,
                    "num_iterations": 5,
                    "offset": 4,
                    "param1": 1,
                    "param_4": 1,
                    "second_input": 1,
                    "start_index": 1
                },
                "param_5": {
                    "calculation_type": 2,
                    "flag": 1,
                    "input5": 2,
                    "input_5": 5,
                    "input_param5": 1,
                    "input_param_5": 1,
                    "input_parameter5": 1,
                    "input_precision": 1,
                    "loop_count": 1,
                    "loop_counter_2": 1,
                    "loop_limit": 1,
                    "mode": 2,
                    "new_param_5": 1,
                    "num2": 1,
                    "param2": 1,
                    "param_5": 1,
                    "param_equality": 1,
                    "param_flag": 1,
                    "param_type": 1,
                    "param_val": 1,
                    "parameter_count": 1,
                    "parameter_flag": 1,
                    "precision": 1,
                    "switch_value": 1
                },
                "param_6": {
                    "array": 1,
                    "bit_shift": 1,
                    "constants": 1,
                    "data_array": 1,
                    "data_source": 1,
                    "input6": 2,
                    "input_6": 5,
                    "input_array": 2,
                    "input_param6": 1,
                    "input_param_6": 1,
                    "input_parameter6": 1,
                    "lookup_table": 3,
                    "new_param_6": 1,
                    "num3": 1,
                    "param3": 1,
                    "param_6": 1,
                    "param_ptr": 1,
                    "param_shift": 1,
                    "param_value": 1,
                    "parameter_values": 1,
                    "reverse_flag": 1,
                    "shift_amount": 1,
                    "shift_val": 1
                },
                "ppuVar7": {
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "double_pointer": 3,
                    "new_var_7": 1,
                    "pointer3": 2,
                    "pointer_3": 1,
                    "pointer_pointer": 1,
                    "pointer_ptr": 1,
                    "ppu_var7": 1,
                    "ptr10": 1,
                    "ptr_ptr": 3,
                    "ptr_ptr7": 1,
                    "ptr_ptr_array": 1,
                    "ptr_ptr_temp": 1,
                    "ptr_ptr_var": 1,
                    "ptr_ptr_var1": 1,
                    "result_array_ptr_ptr": 1,
                    "temp_pointer3": 1,
                    "temp_pointer_3": 1,
                    "temp_ptr": 1,
                    "temp_ptr_ptr": 1
                },
                "puVar1": {
                    "new_var_1": 1,
                    "pointer1": 4,
                    "pointer_1": 5,
                    "pointer_var1": 1,
                    "ptr1": 5,
                    "ptr_1": 1,
                    "ptr_temp1": 1,
                    "ptr_var1": 2,
                    "ptr_var_1": 1,
                    "temp_pointer": 1,
                    "temp_pointer1": 1,
                    "temp_pointer_1": 1,
                    "temp_ptr_1": 1,
                    "temp_var1": 1
                },
                "puVar10": {
                    "input_ptr": 1,
                    "new_var_10": 1,
                    "pointer3": 2,
                    "pointer4": 2,
                    "pointer_3": 4,
                    "pointer_4": 1,
                    "pointer_var3": 1,
                    "precision_pointer": 1,
                    "ptr10": 1,
                    "ptr2": 1,
                    "ptr3": 2,
                    "ptr_3": 1,
                    "ptr_temp3": 1,
                    "ptr_var3": 2,
                    "ptr_var_2": 1,
                    "result_array": 1,
                    "temp_pointer4": 1,
                    "temp_pointer_4": 1,
                    "temp_ptr": 1,
                    "temp_ptr_3": 1,
                    "temp_var4": 1
                },
                "puVar11": {
                    "temp_pointer_5": 1
                },
                "puVar13": {
                    "carry_pointer": 1,
                    "new_var_13": 1,
                    "pointer": 1,
                    "pointer4": 1,
                    "pointer5": 2,
                    "pointer_4": 3,
                    "pointer_5": 1,
                    "pointer_var4": 1,
                    "ptr1": 1,
                    "ptr13": 1,
                    "ptr3": 1,
                    "ptr4": 2,
                    "ptr_4": 1,
                    "ptr_temp4": 1,
                    "ptr_var4": 2,
                    "ptr_var_3": 1,
                    "pu_var13": 1,
                    "temp_pointer": 1,
                    "temp_pointer5": 1,
                    "temp_pointer_6": 1,
                    "temp_ptr": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_1": 1,
                    "temp_ptr_4": 1
                },
                "puVar16": {
                    "current_pointer8": 1,
                    "pointer6": 2,
                    "pointer_4": 1,
                    "pointer_5": 2,
                    "pointer_6": 1,
                    "pointer_var5": 1,
                    "ptr4": 1,
                    "ptr5": 2,
                    "ptr_1": 1,
                    "ptr_temp5": 1,
                    "ptr_var5": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_pointer6": 1,
                    "temp_ptr3": 2
                },
                "puVar18": {
                    "current_pointer6": 1,
                    "inner_pointer": 1,
                    "new_var_18": 1,
                    "pointer7": 1,
                    "pointer8": 1,
                    "pointer_6": 1,
                    "pointer_var6": 1,
                    "ptr6": 2,
                    "ptr_5": 1,
                    "temp_pointer2": 1,
                    "temp_ptr4": 2
                },
                "puVar19": {
                    "current_pointer7": 1,
                    "pointer7": 1,
                    "pointer_7": 1,
                    "pointer_var7": 1,
                    "ptr3": 1,
                    "ptr7": 2,
                    "ptr_2": 1,
                    "ptr_temp6": 1,
                    "reverse_pointer": 1,
                    "temp_pointer3": 1,
                    "temp_pointer_7": 1,
                    "temp_ptr5": 1
                },
                "puVar20": {
                    "temp_pointer_8": 1
                },
                "puVar21": {
                    "pointer8": 1,
                    "pointer_8": 1,
                    "ptr_6": 1
                },
                "puVar22": {
                    "current_pointer4": 1,
                    "new_var_22": 1,
                    "pointer9": 2,
                    "pointer_7": 1,
                    "ptr8": 2,
                    "ptr_3": 1,
                    "ptr_7": 1,
                    "ptr_temp7": 1,
                    "ptr_var_4": 1,
                    "pu_var22": 1,
                    "reverse_pointer2": 1,
                    "temp_pointer7": 1,
                    "temp_ptr5": 1,
                    "temp_ptr6": 1,
                    "temp_ptr_5": 1
                },
                "puVar23": {
                    "current_pointer5": 1,
                    "new_var_23": 1,
                    "pointer10": 2,
                    "pointer_8": 1,
                    "pointer_9": 1,
                    "ptr2": 1,
                    "ptr9": 2,
                    "ptr_4": 1,
                    "ptr_8": 1,
                    "ptr_temp8": 1,
                    "ptr_var5": 1,
                    "ptr_var_5": 1,
                    "pu_var23": 1,
                    "reverse_pointer3": 1,
                    "temp_pointer8": 1,
                    "temp_ptr6": 1,
                    "temp_ptr7": 1,
                    "temp_ptr_6": 1
                },
                "puVar5": {
                    "current_pointer9": 1,
                    "new_var_5": 1,
                    "pointer2": 3,
                    "pointer_2": 5,
                    "pointer_var2": 1,
                    "ptr2": 3,
                    "ptr5": 1,
                    "ptr_2": 1,
                    "ptr_array": 1,
                    "ptr_temp2": 1,
                    "ptr_var2": 2,
                    "result_array_ptr": 1,
                    "result_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_pointer_2": 1,
                    "temp_ptr_2": 1,
                    "temp_var3": 1
                },
                "puVarR": {
                    "result_pointer": 1
                },
                "tracker_1": {
                    "local_284": 1
                },
                "uStack_208": {
                    "local_var1": 1,
                    "new_var_208": 1,
                    "reverse_array": 1,
                    "reversed_bits": 1,
                    "shifted_value": 1,
                    "stack_value1": 1,
                    "stack_value_1": 1,
                    "stack_var": 1,
                    "stack_var1": 1,
                    "stack_var5": 1,
                    "stack_variable1": 1,
                    "temp12": 1,
                    "temp_result_stack": 1,
                    "temp_stack1": 2,
                    "temp_stack_value1": 1,
                    "temp_storage1": 1,
                    "temp_value_10": 1,
                    "temp_value_5": 1,
                    "temp_var": 2,
                    "temp_var1": 2,
                    "temp_var8": 1,
                    "temp_variable_6": 1,
                    "u_stack_var1": 1,
                    "var_4": 1
                },
                "uStack_c8": {
                    "carry_value": 1,
                    "improved_result_temp": 1,
                    "local_var4": 1,
                    "new_var_c8": 1,
                    "reverse_result": 1,
                    "reversed_input_array": 1,
                    "stack_value3": 1,
                    "stack_value_2": 1,
                    "stack_var2": 1,
                    "stack_var6": 1,
                    "stack_var_2": 1,
                    "stack_variable4": 1,
                    "temp14": 1,
                    "temp_result_stack2": 1,
                    "temp_stack2": 1,
                    "temp_stack4": 1,
                    "temp_stack_value2": 1,
                    "temp_storage3": 1,
                    "temp_value_11": 1,
                    "temp_var2": 2,
                    "temp_var3": 1,
                    "temp_var9": 1,
                    "temp_var_2": 1,
                    "temp_variable_7": 1,
                    "u_stack_var2": 1,
                    "var_6": 1
                },
                "uVar11": {
                    "high_part_2": 1,
                    "high_value": 1,
                    "improved_result_3": 1,
                    "local_variable": 1,
                    "new_var_11": 1,
                    "result_3": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp5": 2,
                    "temp_4": 1,
                    "temp_result3": 2,
                    "temp_result4": 1,
                    "temp_result7": 1,
                    "temp_result_3": 1,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_value_3": 1,
                    "temp_var1": 1,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "var11": 1,
                    "var3": 1
                },
                "uVar12": {
                    "carry_value": 1,
                    "loop_variable": 1,
                    "low_part_2": 1,
                    "masked_value": 1,
                    "new_var_12": 1,
                    "parameter_value_1": 1,
                    "shifted_value": 1,
                    "temp4": 2,
                    "temp6": 2,
                    "temp_5": 1,
                    "temp_result4": 1,
                    "temp_result_4": 1,
                    "temp_value": 3,
                    "temp_value2": 1,
                    "temp_value_3": 1,
                    "temp_value_4": 1,
                    "temp_var2": 1,
                    "temp_var4": 2,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_variable_3": 1,
                    "value2": 1,
                    "var12": 1,
                    "var4": 1
                },
                "uVar16": {
                    "temp_var6": 1
                },
                "uVar18": {
                    "mask_1": 1,
                    "temp_6": 1,
                    "temp_var4": 1
                },
                "uVar19": {
                    "calc_result3": 1,
                    "mask_2": 1,
                    "new_var_19": 1,
                    "some_value_2": 1,
                    "temp_value_5": 1,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "var19": 1
                },
                "uVar2": {
                    "new_var_2": 1,
                    "output_var": 1,
                    "result": 29
                },
                "uVar20": {
                    "improved_result": 1,
                    "operand_c": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_result2": 1,
                    "temp_result_5": 1,
                    "temp_value": 1,
                    "temp_value_6": 1,
                    "temp_var6": 2
                },
                "uVar21": {
                    "temp_variable_4": 1
                },
                "uVar22": {
                    "temp_var7": 1
                },
                "uVar23": {
                    "temp_variable_5": 1
                },
                "uVar25": {
                    "calc_result4": 1,
                    "calculate_result": 1,
                    "new_var_25": 1,
                    "reversed_result": 1,
                    "shifted_value": 1,
                    "temp3": 3,
                    "temp6": 1,
                    "temp8": 2,
                    "temp_7": 1,
                    "temp_result": 1,
                    "temp_result2": 2,
                    "temp_result3": 1,
                    "temp_result5": 1,
                    "temp_result_1": 2,
                    "temp_result_2": 1,
                    "temp_result_6": 1,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "temp_value_7": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var8": 2,
                    "var25": 1
                },
                "uVar26": {
                    "calc_result": 1,
                    "final_result": 1,
                    "improved_result": 1,
                    "new_var_26": 1,
                    "reversed_and_shifted": 1,
                    "reversed_result": 3,
                    "temp9": 1,
                    "temp_8": 1,
                    "temp_result": 1,
                    "temp_result2": 2,
                    "temp_result3": 1,
                    "temp_result4": 1,
                    "temp_result_1": 1,
                    "temp_result_2": 1,
                    "temp_result_7": 1,
                    "temp_value4": 1,
                    "temp_value_8": 1,
                    "temp_var7": 2,
                    "temp_var9": 1,
                    "value": 1,
                    "value1": 1,
                    "value3": 1,
                    "var26": 1,
                    "var8": 1
                },
                "uVar27": {
                    "calc_result5": 1,
                    "calculate_result_2": 1,
                    "calculation_result_2": 1,
                    "final_result": 1,
                    "improved_temp2_result": 1,
                    "new_var_27": 1,
                    "shifted_result": 1,
                    "temp10": 1,
                    "temp9": 1,
                    "temp_9": 1,
                    "temp_result3": 2,
                    "temp_result4": 1,
                    "temp_result5": 1,
                    "temp_result6": 1,
                    "temp_result_3": 1,
                    "temp_result_8": 1,
                    "temp_value5": 1,
                    "temp_value_4": 1,
                    "temp_value_9": 1,
                    "temp_var10": 1,
                    "temp_var8": 2,
                    "temp_var9": 1,
                    "value2": 2,
                    "var27": 1,
                    "var9": 1
                },
                "uVar3": {
                    "carry": 1,
                    "new_var_3": 1,
                    "param_value": 1,
                    "shifted_result": 2,
                    "temp": 1,
                    "temp1": 2,
                    "temp_result": 16,
                    "temp_result5": 1,
                    "temp_var": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "u_result": 1
                },
                "uVar6": {
                    "calc_result1": 1,
                    "high_part_1": 1,
                    "improved_result": 2,
                    "improved_result_1": 1,
                    "new_var_6": 1,
                    "operand_a": 1,
                    "param_value1": 1,
                    "result_1": 1,
                    "shifted_result": 1,
                    "temp": 2,
                    "temp1": 2,
                    "temp1_result": 1,
                    "temp3": 2,
                    "temp_2": 1,
                    "temp_high": 1,
                    "temp_result1": 1,
                    "temp_result2": 1,
                    "temp_value_1": 1,
                    "temp_var1": 3,
                    "temp_var2": 1,
                    "temp_variable_1": 1,
                    "value": 2,
                    "var1": 1,
                    "var6": 1
                },
                "uVar8": {
                    "calc_result2": 1,
                    "improved_result_2": 1,
                    "low_part_1": 1,
                    "new_var_8": 1,
                    "operand_b": 1,
                    "param_value2": 1,
                    "parameter_value": 1,
                    "result_2": 1,
                    "temp": 1,
                    "temp2": 3,
                    "temp4": 2,
                    "temp_3": 1,
                    "temp_low": 1,
                    "temp_result2": 2,
                    "temp_result3": 1,
                    "temp_result6": 1,
                    "temp_result_2": 1,
                    "temp_value_2": 2,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_variable_2": 1,
                    "var2": 1,
                    "var8": 1
                },
                "uvVar25": {
                    "temp_result4": 1
                },
                "uvVar26": {
                    "prev_result": 1
                },
                "uvVar27": {
                    "temp_result5": 1
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_0800b2e8",
                "FUN_080094c0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_0800856c",
                "FUN_08008640",
                "FUN_08008b4c",
                "FUN_08008b10"
            ],
            "calling": [
                "FUN_08009d78"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculate_result_0800a5a0(int input_1,undefined8 *input_2,int input_length,int input_4,int input_5,int input_6)\n\n{\n  undefined4 *pointer_1;\n  uint result;\n  uint temp_result;\n  int counter;\n  uint *pointer_2;\n  undefined4 temp_var1;\n  uint **double_pointer;\n  undefined4 temp_var2;\n  int counter_2;\n  undefined4 *pointer_3;\n  undefined4 temp_var3;\n  uint temp_value;\n  uint *pointer_4;\n  int counter3;\n  int value1;\n  undefined8 *temp_ptr3;\n  int index;\n  undefined4 *temp_ptr4;\n  undefined8 *ptr7;\n  undefined4 temp_var6;\n  int value3;\n  undefined8 *ptr8;\n  undefined4 *ptr9;\n  bool flag;\n  undefined8 temp3;\n  undefined8 reversed_result;\n  undefined8 temp_var8;\n  undefined8 *temp_array;\n  int local_counter;\n  int temp_offset;\n  int local_var4;\n  uint *local_array2 [2];\n  uint result_array [20];\n  undefined8 temp_var;\n  undefined8 local_var5;\n  int temp_array_2 [38];\n  undefined8 temp_var2;\n  \n  value1 = *(int *)(&DAT_0800c060 + input_5 * 4);\n  counter_2 = input_4 + -1;\n  local_array2[1] = (uint *)input_2;\n  if (input_length + 0x14 < 0 == SCARRY4(input_length,0x14)) {\n    local_var4 = (input_length + -3) / 0x18;\n    temp_offset = (local_var4 + 1) * -0x18;\n  }\n  else {\n    temp_offset = -0x18;\n    local_var4 = 0;\n  }\n  temp_offset = input_length + temp_offset;\n  index = local_var4 - counter_2;\n  if (-1 < value1 + counter_2) {\n    value3 = value1 + counter_2 + 1 + index;\n    temp_ptr3 = &temp_var;\n    do {\n      while (index < 0) {\n        index = index + 1;\n        *(undefined4 *)temp_ptr3 = 0;\n        *(undefined4 *)((int)temp_ptr3 + 4) = 0;\n        temp_ptr3 = temp_ptr3 + 1;\n        if (index == value3) goto LAB_0800a626;\n      }\n      reversed_result = reverse_bits_and_shift_0800856c(*(undefined4 *)(input_6 + index * 4));\n      index = index + 1;\n      *temp_ptr3 = reversed_result;\n      temp_ptr3 = temp_ptr3 + 1;\n    } while (index != value3);\n  }\nLAB_0800a626:\n  pointer_3 = (undefined4 *)(input_1 + -8);\n  if (-1 < value1) {\n    ptr8 = &temp_var + input_4;\n    index = counter_2;\n    temp_ptr3 = &temp_var2;\n    do {\n      if (counter_2 < 0) {\n        reversed_result = 0;\n      }\n      else {\n        reversed_result = 0;\n        ptr9 = pointer_3;\n        ptr7 = ptr8;\n        do {\n          temp_ptr4 = ptr9 + 2;\n          temp3 = calculate_improved_result_08008640(*temp_ptr4,ptr9[3],*(undefined4 *)(ptr7 + -1),\n                                *(undefined4 *)((int)ptr7 + -4));\n          reversed_result = calculate_double_precision_result_080082d4((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),(int)temp3,\n                                (int)((ulonglong)temp3 >> 0x20));\n          ptr9 = temp_ptr4;\n          ptr7 = ptr7 + -1;\n        } while (temp_ptr4 != pointer_3 + input_4 * 2);\n      }\n      index = index + 1;\n      *temp_ptr3 = reversed_result;\n      ptr8 = ptr8 + 1;\n      temp_ptr3 = temp_ptr3 + 1;\n    } while (index != value1 + input_4);\n  }\n  local_array2[0] = result_array + value1 + -1;\n  index = value1;\n  do {\n    reversed_result = CONCAT44(*(undefined4 *)((int)&temp_var2 + index * 8 + 4),\n                      *(undefined4 *)(&temp_var2 + index));\n    if (0 < index) {\n      temp_ptr3 = &temp_var2 + index;\n      pointer_2 = result_array;\n      do {\n        temp_var1 = (undefined4)((ulonglong)reversed_result >> 0x20);\n        calculate_improved_result_08008640((int)reversed_result,temp_var1,0,0x3e700000);\n        calculate_parameter_value_08008ba0();\n        temp3 = reverse_bits_and_shift_0800856c();\n        temp_var2 = (undefined4)((ulonglong)temp3 >> 0x20);\n        temp_var8 = calculate_improved_result_08008640((int)temp3,temp_var2,0,0x41700000);\n        reverse_bits_080082d0((int)reversed_result,temp_var1,(int)temp_var8,(int)((ulonglong)temp_var8 >> 0x20));\n        result = calculate_parameter_value_08008ba0();\n        ptr8 = temp_ptr3 + -1;\n        temp_var1 = *(undefined4 *)ptr8;\n        temp_var3 = *(undefined4 *)((int)temp_ptr3 + -4);\n        *pointer_2 = result;\n        reversed_result = calculate_double_precision_result_080082d4((int)temp3,temp_var2,temp_var1,temp_var3);\n        temp_ptr3 = ptr8;\n        pointer_2 = pointer_2 + 1;\n      } while (ptr8 != &temp_var2);\n    }\n    reversed_result = calculate_reversed_result_0800b2e8((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),temp_offset);\n    temp_var2 = (undefined4)((ulonglong)reversed_result >> 0x20);\n    calculate_improved_result_08008640((int)reversed_result,temp_var2,0,0x3fc00000);\n    temp3 = calculate_result_0800a5a0_with_precision_080094c0();\n    temp3 = calculate_improved_result_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x40200000);\n    reversed_result = reverse_bits_080082d0((int)reversed_result,temp_var2,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n    result = calculate_parameter_value_08008ba0();\n    temp3 = reverse_bits_and_shift_0800856c();\n    reversed_result = reverse_bits_080082d0((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),(int)temp3,\n                          (int)((ulonglong)temp3 >> 0x20));\n    temp_var1 = (undefined4)((ulonglong)reversed_result >> 0x20);\n    temp_var2 = (undefined4)reversed_result;\n    if (temp_offset < 1) {\n      if (temp_offset == 0) {\n        value3 = (int)result_array[index + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      value3 = check_and_return_param_equality_08008b4c(temp_var2,temp_var1,0,0x3fe00000);\n      if (value3 != 0) {\n        result = result + 1;\n        if (index < 1) {\n          reversed_result = reverse_bits_080082d0(0,0x3ff00000,temp_var2,temp_var1);\n          value3 = 2;\n          goto LAB_0800a7a4;\n        }\n        value3 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      counter = (int)result_array[index + -1] >> (0x18U - temp_offset & 0xff);\n      temp_value = result_array[index + -1] - (counter << (0x18U - temp_offset & 0xff));\n      value3 = (int)temp_value >> (0x17U - temp_offset & 0xff);\n      result_array[index + -1] = temp_value;\n      result = result + counter;\njoined_r0x0800a8b8:\n      if (0 < value3) {\n        result = result + 1;\n        if (index < 1) {\n          flag = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (result_array[0] == 0) {\n            flag = false;\n            if (index != 1) {\n              pointer_2 = result_array;\n              counter = 1;\n              do {\n                pointer_2 = pointer_2 + 1;\n                if (*pointer_2 != 0) {\n                  counter3 = counter + 1;\n                  temp_value = *pointer_2;\n                  goto LAB_0800a8e2;\n                }\n                counter = counter + 1;\n              } while (counter != index);\n              flag = false;\n            }\n          }\n          else {\n            counter3 = 1;\n            counter = 0;\n            temp_value = result_array[0];\nLAB_0800a8e2:\n            result_array[counter] = 0x1000000 - temp_value;\n            if (counter3 < index) {\n              temp_value = result_array[counter3];\n              pointer_2 = result_array + counter3;\n              while( true ) {\n                pointer_4 = pointer_2 + 1;\n                *pointer_2 = 0xffffff - temp_value;\n                if (pointer_4 == result_array + index) break;\n                temp_value = *pointer_4;\n                pointer_2 = pointer_4;\n              }\n            }\n            flag = true;\n          }\n        }\n        if (0 < temp_offset) {\n          if (temp_offset == 1) {\n            result_array[index + -1] = result_array[index + -1] & 0x7fffff;\n          }\n          else if (temp_offset == 2) {\n            result_array[index + -1] = result_array[index + -1] & 0x3fffff;\n          }\n        }\n        if (value3 == 2) {\n          reversed_result = reverse_bits_080082d0(0,0x3ff00000,temp_var2,temp_var1);\n          if (flag) {\n            temp3 = calculate_reversed_result_0800b2e8(0,0x3ff00000,temp_offset);\n            reversed_result = reverse_bits_080082d0((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),(int)temp3,\n                                  (int)((ulonglong)temp3 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp_var2 = (undefined4)((ulonglong)reversed_result >> 0x20);\n    counter = check_and_return_param_equality_08008b10((int)reversed_result,temp_var2,0,0);\n    if (counter == 0) {\n      reversed_result = calculate_reversed_result_0800b2e8((int)reversed_result,temp_var2,-temp_offset);\n      temp_var1 = (undefined4)((ulonglong)reversed_result >> 0x20);\n      temp_var2 = (undefined4)reversed_result;\n      counter_2 = check_and_return_param_equality_08008b4c(temp_var2,temp_var1,0,0x41700000);\n      if (counter_2 == 0) {\n        temp_value = calculate_parameter_value_08008ba0(temp_var2,temp_var1);\n        result_array[index] = temp_value;\n        counter = index;\n      }\n      else {\n        calculate_improved_result_08008640(temp_var2,temp_var1,0,0x3e700000);\n        temp_value = calculate_parameter_value_08008ba0();\n        reversed_result = reverse_bits_and_shift_0800856c();\n        reversed_result = calculate_improved_result_08008640((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),0,0x41700000);\n        reverse_bits_080082d0(temp_var2,temp_var1,(int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n        temp_result = calculate_parameter_value_08008ba0();\n        temp_offset = temp_offset + 0x18;\n        result_array[index] = temp_result;\n        result_array[index + 1] = temp_value;\n        counter = index + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    counter = index + -1;\n    if (value1 <= counter) {\n      temp_value = 0;\n      pointer_2 = result_array + index + 0x3fffffff;\n      do {\n        pointer_4 = pointer_2 + -1;\n        temp_value = temp_value | *pointer_2;\n        pointer_2 = pointer_4;\n      } while (pointer_4 != local_array2[0]);\n      if (temp_value != 0) break;\n    }\n    if (result_array[value1 + -1] == 0) {\n      local_counter = 1;\n      double_pointer = local_array2 + value1;\n      do {\n        pointer_2 = *double_pointer;\n        local_counter = local_counter + 1;\n        double_pointer = double_pointer + -1;\n      } while (pointer_2 == (uint *)0x0);\n      local_counter = index + local_counter;\n    }\n    else {\n      local_counter = index + 1;\n    }\n    value3 = index + 1;\n    ptr9 = (undefined4 *)(input_6 + (value3 + local_var4 + 0x3fffffff) * 4);\n    temp_ptr3 = &temp_var + index + input_4;\n    temp_array = &temp_var2 + value3;\n    do {\n      ptr9 = ptr9 + 1;\n      reversed_result = reverse_bits_and_shift_0800856c(*ptr9);\n      *temp_ptr3 = reversed_result;\n      ptr8 = temp_ptr3 + 1;\n      if (counter_2 < 0) {\n        temp3 = 0;\n      }\n      else {\n        temp3 = 0;\n        temp_ptr4 = pointer_3;\n        while( true ) {\n          temp_ptr3 = temp_ptr3 + -1;\n          pointer_1 = temp_ptr4 + 2;\n          reversed_result = calculate_improved_result_08008640((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),*pointer_1,temp_ptr4[3]);\n          temp3 = calculate_double_precision_result_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)reversed_result,\n                                (int)((ulonglong)reversed_result >> 0x20));\n          if (pointer_1 == pointer_3 + input_4 * 2) break;\n          reversed_result = *temp_ptr3;\n          temp_ptr4 = pointer_1;\n        }\n      }\n      *temp_array = temp3;\n      value3 = value3 + 1;\n      index = local_counter;\n      temp_ptr3 = ptr8;\n      temp_array = temp_array + 1;\n    } while (value3 <= local_counter);\n  } while( true );\n  temp_offset = temp_offset + -0x18;\n  if (result_array[counter] == 0) {\n    pointer_2 = result_array + index + 0x3ffffffe;\n    do {\n      temp_value = *pointer_2;\n      counter = counter + -1;\n      temp_offset = temp_offset + -0x18;\n      pointer_2 = pointer_2 + -1;\n    } while (temp_value == 0);\n  }\nLAB_0800a9f6:\n  reversed_result = calculate_reversed_result_0800b2e8(0,0x3ff00000,temp_offset);\n  if (counter < 0) {\n    if (2 < input_5) {\n      if (input_5 == 3) {\n        reversed_result = 0;\nLAB_0800abe4:\n        if (value3 == 0) {\n          *local_array2[1] = (undefined4)local_var5;\n          *(int *)((int)local_array2[1] + 4) = local_var5._4_4_;\n          *(undefined8 *)((int)local_array2[1] + 0x10) = reversed_result;\n          *(int *)((int)local_array2[1] + 8) = temp_array_2[0];\n          *(int *)((int)local_array2[1] + 0xc) = temp_array_2[1];\n          return result & 7;\n        }\n        *(int *)((int)local_array2[1] + 0x10) = (int)reversed_result;\n        *(int *)((int)local_array2[1] + 8) = temp_array_2[0];\n        *(int *)((int)local_array2[1] + 0x14) = (int)((ulonglong)reversed_result >> 0x20) + -0x80000000;\n        *(int *)((int)local_array2[1] + 4) = local_var5._4_4_ + -0x80000000;\n        *(int *)((int)local_array2[1] + 0xc) = temp_array_2[1] + -0x80000000;\n        *local_array2[1] = (undefined4)local_var5;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input_5 < 1) {\n      if (input_5 != 0) goto LAB_0800ab0e;\n      reversed_result = 0;\nLAB_0800aafc:\n      counter_2 = (int)((ulonglong)reversed_result >> 0x20);\n      if (value3 != 0) {\n        counter_2 = counter_2 + -0x80000000;\n      }\n      *local_array2[1] = (int)reversed_result;\n      *(int *)((int)local_array2[1] + 4) = counter_2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    reversed_result = 0;\n  }\n  else {\n    ptr8 = &temp_var2 + counter;\n    pointer_2 = result_array + counter + 1;\n    temp_ptr3 = &temp_var2 + counter + 1;\n    do {\n      temp_var2 = (undefined4)((ulonglong)reversed_result >> 0x20);\n      pointer_2 = pointer_2 + -1;\n      temp3 = reverse_bits_and_shift_0800856c(*pointer_2);\n      temp3 = calculate_improved_result_08008640((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)reversed_result,temp_var2);\n      temp_ptr3 = temp_ptr3 + -1;\n      *temp_ptr3 = temp3;\n      reversed_result = calculate_improved_result_08008640((int)reversed_result,temp_var2,0,0x3e700000);\n    } while (pointer_2 != result_array);\n    counter_2 = 0;\n    do {\n      if (value1 < 0) {\n        reversed_result = 0;\n      }\n      else {\n        temp_var2 = 0x40000000;\n        temp_var1 = 0x3ff921fb;\n        reversed_result = 0;\n        index = 0;\n        temp_ptr3 = ptr8;\n        pointer_3 = &DAT_0800c028;\n        while( true ) {\n          temp3 = calculate_improved_result_08008640(*(undefined4 *)temp_ptr3,*(undefined4 *)((int)temp_ptr3 + 4),temp_var2,temp_var1\n                               );\n          reversed_result = calculate_double_precision_result_080082d4((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),(int)temp3,\n                                (int)((ulonglong)temp3 >> 0x20));\n          index = index + 1;\n          if ((value1 < index) || (counter_2 < index)) break;\n          temp_var2 = *pointer_3;\n          temp_var1 = pointer_3[1];\n          temp_ptr3 = temp_ptr3 + 1;\n          pointer_3 = pointer_3 + 2;\n        }\n      }\n      flag = counter_2 != counter;\n      *(int *)(&local_var5 + counter_2) = (int)reversed_result;\n      *(int *)((int)&local_var5 + (counter_2 * 2 + 1) * 4) = (int)((ulonglong)reversed_result >> 0x20);\n      ptr8 = ptr8 + -1;\n      counter_2 = counter_2 + 1;\n    } while (flag);\n    if (2 < input_5) {\n      if (input_5 == 3) {\n        if (counter != 0) {\n          temp_ptr3 = &local_var5 + counter;\n          reversed_result = CONCAT44(*(undefined4 *)((int)&local_var5 + (counter * 2 + 1) * 4),\n                            *(undefined4 *)temp_ptr3);\n          do {\n            temp_var1 = (undefined4)((ulonglong)reversed_result >> 0x20);\n            temp_var2 = (undefined4)reversed_result;\n            temp_var3 = *(undefined4 *)(temp_ptr3 + -1);\n            temp_var6 = *(undefined4 *)((int)temp_ptr3 + -4);\n            reversed_result = calculate_double_precision_result_080082d4(temp_var2,temp_var1,temp_var3,temp_var6);\n            temp3 = reverse_bits_080082d0(temp_var3,temp_var6,(int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n            temp3 = calculate_double_precision_result_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp_var2,temp_var1);\n            *temp_ptr3 = temp3;\n            temp_ptr3 = temp_ptr3 + -1;\n            *temp_ptr3 = reversed_result;\n          } while (&local_var5 != temp_ptr3);\n          if (1 < counter) {\n            temp_ptr3 = &local_var5 + counter;\n            reversed_result = CONCAT44(*(undefined4 *)((int)&local_var5 + (counter * 2 + 1) * 4),\n                              *(undefined4 *)temp_ptr3);\n            do {\n              temp_var1 = (undefined4)((ulonglong)reversed_result >> 0x20);\n              temp_var2 = (undefined4)reversed_result;\n              temp_var3 = *(undefined4 *)(temp_ptr3 + -1);\n              temp_var6 = *(undefined4 *)((int)temp_ptr3 + -4);\n              reversed_result = calculate_double_precision_result_080082d4(temp_var2,temp_var1,temp_var3,temp_var6);\n              temp3 = reverse_bits_080082d0(temp_var3,temp_var6,(int)reversed_result,(int)((ulonglong)reversed_result >> 0x20));\n              temp3 = calculate_double_precision_result_080082d4((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp_var2,temp_var1);\n              *temp_ptr3 = temp3;\n              temp_ptr3 = temp_ptr3 + -1;\n              *temp_ptr3 = reversed_result;\n            } while (&local_var5 + 1 != temp_ptr3);\n            reversed_result = 0;\n            temp_ptr3 = &local_var5 + counter + 1;\n            do {\n              ptr8 = temp_ptr3 + -1;\n              reversed_result = calculate_double_precision_result_080082d4((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),\n                                    *(undefined4 *)ptr8,*(undefined4 *)((int)temp_ptr3 + -4));\n              temp_ptr3 = ptr8;\n            } while (&local_var5 + 2 != ptr8);\n            goto LAB_0800abe4;\n          }\n        }\n        reversed_result = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input_5 < 1) {\n      if (input_5 != 0) goto LAB_0800ab0e;\n      reversed_result = 0;\n      temp_ptr3 = &local_var5 + counter + 1;\n      do {\n        ptr8 = temp_ptr3 + -1;\n        reversed_result = calculate_double_precision_result_080082d4((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),*(undefined4 *)ptr8,\n                              *(undefined4 *)((int)temp_ptr3 + -4));\n        temp_ptr3 = ptr8;\n      } while (&local_var5 != ptr8);\n      goto LAB_0800aafc;\n    }\n    reversed_result = 0;\n    temp_ptr3 = &local_var5 + counter + 1;\n    do {\n      ptr8 = temp_ptr3 + -1;\n      reversed_result = calculate_double_precision_result_080082d4((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),*(undefined4 *)ptr8,\n                            *(undefined4 *)((int)temp_ptr3 + -4));\n      temp_ptr3 = ptr8;\n    } while (&local_var5 != ptr8);\n  }\n  counter_2 = (int)((ulonglong)reversed_result >> 0x20);\n  temp_var2 = (undefined4)reversed_result;\n  if (value3 == 0) {\n    *(undefined8 *)local_array2[1] = reversed_result;\n    reversed_result = reverse_bits_080082d0((undefined4)local_var5,local_var5._4_4_,temp_var2,counter_2);\n    if (counter < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    counter_2 = 1;\n    temp_ptr3 = &local_var5;\n    do {\n      reversed_result = calculate_double_precision_result_080082d4((int)reversed_result,(int)((ulonglong)reversed_result >> 0x20),\n                            *(undefined4 *)(temp_ptr3 + 1),*(undefined4 *)((int)temp_ptr3 + 0xc));\n      counter_2 = counter_2 + 1;\n      temp_ptr3 = temp_ptr3 + 1;\n    } while (counter_2 <= counter);\n    if (value3 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_array2[1] = temp_var2;\n    *(int *)((int)local_array2[1] + 4) = counter_2 + -0x80000000;\n    reversed_result = reverse_bits_080082d0((undefined4)local_var5,local_var5._4_4_,temp_var2,counter_2);\n    if (0 < counter) goto LAB_0800ad04;\n  }\n  reversed_result = CONCAT44((int)((ulonglong)reversed_result >> 0x20) + -0x80000000,(int)reversed_result);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_array2[1] + 8) = reversed_result;\n  return result & 7;\n}\n\n",
            "current_name": "calculate_result_0800a5a0",
            "entrypoint": "0x0800a5a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "bVar24": "flag",
                "iVar14": "counter3",
                "iVar15": "value1",
                "iVar17": "index",
                "iVar21": "value3",
                "iVar4": "counter",
                "iVar9": "counter_2",
                "local_160": "temp_array_2",
                "local_168": "local_var5",
                "local_258": "result_array",
                "local_260": "local_array2",
                "local_26c": "local_var4",
                "local_270": "temp_offset",
                "local_280": "local_counter",
                "local_284": "temp_array",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_length",
                "param_4": "input_4",
                "param_5": "input_5",
                "param_6": "input_6",
                "ppuVar7": "double_pointer",
                "puVar1": "pointer_1",
                "puVar10": "pointer_3",
                "puVar13": "pointer_4",
                "puVar16": "temp_ptr3",
                "puVar18": "temp_ptr4",
                "puVar19": "ptr7",
                "puVar22": "ptr8",
                "puVar23": "ptr9",
                "puVar5": "pointer_2",
                "uStack_208": "temp_var",
                "uStack_c8": "temp_var2",
                "uVar11": "temp_var3",
                "uVar12": "temp_value",
                "uVar16": "temp_var6",
                "uVar18": "mask_1",
                "uVar19": "temp_var7",
                "uVar2": "result",
                "uVar20": "temp_var6",
                "uVar22": "temp_var7",
                "uVar23": "temp_variable_5",
                "uVar25": "temp3",
                "uVar26": "reversed_result",
                "uVar27": "temp_var8",
                "uVar3": "temp_result",
                "uVar6": "temp_var1",
                "uVar8": "temp_var2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "additional_data": {
                "FUN_0800adf0": {
                    "calculate_final_value": 1,
                    "calculate_improved_result": 13,
                    "calculate_improved_value": 8,
                    "calculate_new_result": 1,
                    "calculate_result": 8
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 1
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 1
                },
                "calculate_parameter_value_08008ba0": {
                    "calculate_parameter_value": 1
                },
                "iVar1": {
                    "calc_result": 3,
                    "calc_value": 3,
                    "calculate_param_value": 1,
                    "calculated_value": 6,
                    "calculation_result": 6,
                    "calculation_result1": 1,
                    "param_value": 1,
                    "parameter_value": 2,
                    "result": 6,
                    "result_1": 1,
                    "result_flag": 1
                },
                "param_1": {
                    "input1": 2,
                    "input_1": 2,
                    "input_param": 6,
                    "input_param_1": 1,
                    "input_value": 17,
                    "input_value1": 1,
                    "result": 1,
                    "value1": 1
                },
                "param_2": {
                    "bitmask": 1,
                    "condition": 1,
                    "flag": 1,
                    "flags": 1,
                    "input2": 2,
                    "input_2": 2,
                    "input_flag": 2,
                    "input_param_2": 1,
                    "input_parameter": 2,
                    "input_value": 1,
                    "input_value2": 2,
                    "mask_value": 1,
                    "param_value": 3,
                    "parameter": 2,
                    "parameter_value": 1,
                    "threshold": 1,
                    "value": 1,
                    "value2": 1,
                    "value_limit": 2,
                    "value_param": 3
                },
                "param_3": {
                    "calc_param_1": 2,
                    "calculation_param_1": 1,
                    "config_param": 1,
                    "extra_param_1": 2,
                    "input3": 2,
                    "input_3": 2,
                    "input_param_3": 1,
                    "input_value3": 1,
                    "param3": 3,
                    "param_3": 9,
                    "param_a": 1,
                    "parameter1": 1,
                    "temp_param1": 1,
                    "temp_value_1": 1,
                    "value3": 1,
                    "value_1": 1,
                    "value_3": 1
                },
                "param_4": {
                    "calc_param_2": 2,
                    "calculation_param_2": 1,
                    "extra_param_2": 2,
                    "input4": 2,
                    "input_4": 2,
                    "input_param_4": 1,
                    "input_value4": 1,
                    "param4": 3,
                    "param_4": 9,
                    "param_b": 1,
                    "parameter2": 1,
                    "size_param": 1,
                    "temp_param2": 1,
                    "temp_value_2": 1,
                    "value4": 1,
                    "value_2": 1,
                    "value_4": 1
                },
                "param_5": {
                    "calculate_reverse": 1,
                    "condition": 1,
                    "flag": 11,
                    "flag_param": 1,
                    "is_reverse": 1,
                    "is_reversed": 9,
                    "reverse": 1,
                    "reverse_bits_param": 1,
                    "reverse_flag": 4,
                    "reverse_required": 1
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 1
                },
                "uVar2": {
                    "part1": 1,
                    "result1": 5,
                    "result1_high": 3,
                    "result1_low": 2,
                    "result1_part1": 1,
                    "result2": 1,
                    "result_1": 2,
                    "result_1_low": 1,
                    "result_2": 1,
                    "result_a_part1": 1,
                    "result_high_32": 1,
                    "result_low": 2,
                    "result_part1": 2,
                    "result_part_1": 2,
                    "result_var1": 3,
                    "temp_1": 1,
                    "temp_result_1": 1,
                    "value1": 1
                },
                "uVar3": {
                    "part2": 1,
                    "result1_high": 2,
                    "result1_low": 3,
                    "result1_part2": 1,
                    "result2": 5,
                    "result3": 1,
                    "result_1_high": 1,
                    "result_2": 2,
                    "result_3": 1,
                    "result_a_part2": 1,
                    "result_high": 2,
                    "result_low_32": 1,
                    "result_part2": 2,
                    "result_part_2": 2,
                    "result_var2": 3,
                    "temp_2": 1,
                    "temp_result_2": 1,
                    "value2": 1
                },
                "uVar4": {
                    "new_result_low": 1,
                    "part3": 1,
                    "result2_high": 3,
                    "result2_low": 2,
                    "result2_part1": 1,
                    "result3": 5,
                    "result4": 1,
                    "result_2_low": 1,
                    "result_3": 2,
                    "result_4": 1,
                    "result_b_part1": 1,
                    "result_part3": 1,
                    "result_part_3": 2,
                    "result_var3": 3,
                    "temp_3": 1,
                    "temp_high_32": 1,
                    "temp_low": 1,
                    "temp_part1": 1,
                    "temp_result_3": 1,
                    "value3": 1
                },
                "uVar5": {
                    "new_result_high": 1,
                    "part4": 1,
                    "result2_high": 2,
                    "result2_low": 3,
                    "result2_part2": 1,
                    "result4": 5,
                    "result5": 1,
                    "result_2_high": 1,
                    "result_4": 2,
                    "result_5": 1,
                    "result_b_part2": 1,
                    "result_part4": 1,
                    "result_part_4": 2,
                    "result_var4": 3,
                    "temp_4": 1,
                    "temp_high": 1,
                    "temp_low_32": 1,
                    "temp_part2": 1,
                    "temp_result_4": 1,
                    "value4": 1
                },
                "uVar6": {
                    "double_result_high_32": 1,
                    "double_result_low": 1,
                    "final_result_part1": 1,
                    "part5": 1,
                    "result3_high": 5,
                    "result3_part1": 1,
                    "result5": 5,
                    "result6": 1,
                    "result_3_high": 1,
                    "result_5": 2,
                    "result_6": 1,
                    "result_part5": 1,
                    "result_part_5": 2,
                    "result_var5": 3,
                    "reverse_temp_low": 1,
                    "temp_5": 1,
                    "temp_part3": 1,
                    "temp_result_5": 1,
                    "value5": 1
                },
                "uVar7": {
                    "calc_result": 2,
                    "calc_result_1": 1,
                    "calculation_result": 1,
                    "calculation_result_low": 1,
                    "double_result_high": 1,
                    "double_result_low_32": 1,
                    "final_result": 1,
                    "final_result1": 1,
                    "final_result_part2": 1,
                    "improved_result": 2,
                    "improved_result_1": 1,
                    "intermediate_result": 5,
                    "intermediate_result_high": 1,
                    "result": 1,
                    "result3_low": 3,
                    "result3_part2": 1,
                    "result6": 2,
                    "result_6": 1,
                    "reverse_temp_high": 1,
                    "temp_6": 1,
                    "temp_result1": 1,
                    "temp_value": 1
                },
                "uVar8": {
                    "calc_result2": 1,
                    "calc_result_2": 2,
                    "calculation_result2": 1,
                    "calculation_result_high": 1,
                    "double_precision_result": 1,
                    "final_result2": 1,
                    "improved_result_2": 1,
                    "intermediate_result": 2,
                    "intermediate_result2": 2,
                    "intermediate_result_2": 1,
                    "intermediate_result_2_high": 1,
                    "result4_high": 3,
                    "result4_part2": 1,
                    "result7": 2,
                    "result_7": 1,
                    "reverse_bits_result": 1,
                    "reverse_result": 2,
                    "reverse_result_high_32": 1,
                    "reverse_result_low": 1,
                    "reversed_result": 1,
                    "temp_7": 1,
                    "temp_result": 1,
                    "temp_result2": 1,
                    "temp_value2": 1
                },
                "uVar9": {
                    "temp_result3": 1
                }
            },
            "called": [
                "FUN_080082d0",
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08009410",
                "FUN_080096e8"
            ],
            "code": "\nundefined4\ncalculate_improved_result_0800adf0(undefined4 input_value,uint value_param,undefined4 param_3,undefined4 param_4,int flag)\n\n{\n  int calculated_value;\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result3_high;\n  undefined8 intermediate_result;\n  undefined8 result4_high;\n  \n  if (((value_param & 0x7fffffff) < 0x3e400000) && (calculated_value = calculate_parameter_value_08008ba0(), calculated_value == 0)) {\n    return input_value;\n  }\n  intermediate_result = calculate_improved_result_0800adf0(input_value,value_param,input_value);\n  result3 = (undefined4)((ulonglong)intermediate_result >> 0x20);\n  result2 = (undefined4)intermediate_result;\n  intermediate_result = calculate_improved_result_0800adf0(input_value,value_param,result2,result3);\n  result4 = (undefined4)((ulonglong)intermediate_result >> 0x20);\n  result1 = (undefined4)intermediate_result;\n  intermediate_result = calculate_improved_result_0800adf0(result2,result3,0x5acfd57c,0x3de5d93a);\n  intermediate_result = reverse_bits_080082d0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  intermediate_result = calculate_improved_result_0800adf0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),result2,result3);\n  intermediate_result = calculate_double_precision_result_080082d4((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  intermediate_result = calculate_improved_result_0800adf0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),result2,result3);\n  intermediate_result = reverse_bits_080082d0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0x19c161d5,0x3f2a01a0);\n  intermediate_result = calculate_improved_result_0800adf0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),result2,result3);\n  intermediate_result = calculate_double_precision_result_080082d4((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0x1110f8a6,0x3f811111);\n  result3_high = (undefined4)((ulonglong)intermediate_result >> 0x20);\n  if (flag != 0) {\n    result4_high = calculate_improved_result_0800adf0(param_3,param_4,0,0x3fe00000);\n    intermediate_result = calculate_improved_result_0800adf0(result1,result4,(int)intermediate_result,result3_high);\n    intermediate_result = reverse_bits_080082d0((int)result4_high,(int)((ulonglong)result4_high >> 0x20),(int)intermediate_result,\n                         (int)((ulonglong)intermediate_result >> 0x20));\n    intermediate_result = calculate_improved_result_0800adf0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),result2,result3);\n    intermediate_result = reverse_bits_080082d0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),param_3,param_4);\n    result4_high = calculate_improved_result_0800adf0(result1,result4,0x55555549,0x3fc55555);\n    intermediate_result = calculate_double_precision_result_080082d4((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),(int)result4_high,\n                         (int)((ulonglong)result4_high >> 0x20));\n    result2 = reverse_bits_080082d0(input_value,value_param,(int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20));\n    return result2;\n  }\n  intermediate_result = calculate_improved_result_0800adf0(result2,result3,(int)intermediate_result,result3_high);\n  intermediate_result = reverse_bits_080082d0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),0x55555549,0x3fc55555);\n  intermediate_result = calculate_improved_result_0800adf0((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),result1,result4);\n  result2 = calculate_double_precision_result_080082d4((int)intermediate_result,(int)((ulonglong)intermediate_result >> 0x20),input_value,value_param);\n  return result2;\n}\n\n",
            "current_name": "calculate_improved_result_0800adf0",
            "entrypoint": "0x0800adf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800adf0": "calculate_improved_result_0800adf0",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "calculate_parameter_value_08008ba0": "calculate_parameter_value",
                "iVar1": "calculated_value",
                "param_1": "input_value",
                "param_2": "value_param",
                "param_5": "flag",
                "reverse_bits_080082d0": "reverse_bits",
                "uVar2": "result1",
                "uVar3": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result3_high",
                "uVar7": "intermediate_result",
                "uVar8": "result4_high"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800af78": {
            "additional_data": {
                "FUN_0800af78": {
                    "calculate": 1,
                    "calculate_improved_result": 1,
                    "calculate_improved_value": 2,
                    "calculate_modified_result": 1,
                    "calculate_result": 22,
                    "calculate_value": 1,
                    "improved_calculate_result": 1
                },
                "iVar5": {
                    "category": 1,
                    "option": 1,
                    "output": 5,
                    "output_value": 4,
                    "result": 14,
                    "result5": 1,
                    "result_index": 1,
                    "result_type": 1,
                    "return_value": 1,
                    "status": 2
                },
                "local_2c": {
                    "local_result": 3,
                    "local_var": 5,
                    "local_var1": 1,
                    "local_variable": 10,
                    "result8": 1,
                    "result9": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_4": 1,
                    "temp_result": 1,
                    "temp_value": 2,
                    "var10": 2
                },
                "param_1": {
                    "input1": 14,
                    "input_1": 3,
                    "input_param": 3,
                    "input_value": 6,
                    "input_value1": 4,
                    "input_value_1": 1
                },
                "param_2": {
                    "flag": 1,
                    "flags": 5,
                    "input2": 14,
                    "input_2": 3,
                    "input_flag": 2,
                    "input_mask": 1,
                    "input_value2": 4,
                    "input_value_2": 1
                },
                "uVar1": {
                    "first_result": 1,
                    "result1": 18,
                    "result_1": 3,
                    "result_upper_1": 1,
                    "temp1": 2,
                    "temp_var1": 1,
                    "value1": 1,
                    "value_1": 1,
                    "var1": 3
                },
                "uVar2": {
                    "result2": 18,
                    "result_2": 3,
                    "result_upper_2": 1,
                    "second_result": 1,
                    "temp2": 2,
                    "temp_var2": 1,
                    "value2": 1,
                    "value_2": 1,
                    "var2": 3
                },
                "uVar3": {
                    "result3": 18,
                    "result_3": 3,
                    "result_upper_3": 1,
                    "temp3": 2,
                    "temp_var3": 1,
                    "third_result": 1,
                    "value3": 1,
                    "value_3": 1,
                    "var3": 3
                },
                "uVar4": {
                    "fourth_result": 1,
                    "result4": 18,
                    "result_4": 3,
                    "result_upper_4": 1,
                    "temp4": 2,
                    "temp_var4": 1,
                    "value4": 1,
                    "value_4": 1,
                    "var4": 3
                },
                "uVar6": {
                    "fifth_result": 1,
                    "result5": 7,
                    "result6": 3,
                    "temp1": 4,
                    "temp5": 2,
                    "temp_1": 3,
                    "temp_result1": 3,
                    "temp_result_1": 1,
                    "temp_upper": 1,
                    "temp_var5": 1,
                    "val1": 1,
                    "value5": 1,
                    "var6": 3
                },
                "uVar7": {
                    "abs_input2": 1,
                    "lower_flags": 1,
                    "mask_flags": 1,
                    "masked_input": 1,
                    "modified_input2": 2,
                    "normalized_flag": 1,
                    "param2_abs": 2,
                    "positive_input2": 5,
                    "positive_input_2": 2,
                    "temp": 1,
                    "temp2": 3,
                    "temp6": 1,
                    "temp_2": 2,
                    "temp_flag": 1,
                    "temp_flags": 1,
                    "temp_var6": 1,
                    "u_flags": 1,
                    "uvar": 1,
                    "value_mask": 1,
                    "var7": 2
                },
                "uVar8": {
                    "calc_result": 1,
                    "calculation_result": 2,
                    "final_result": 1,
                    "floating_point_result": 1,
                    "intermediate_result": 2,
                    "result6": 3,
                    "result7": 1,
                    "result8": 1,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 3,
                    "temp6": 1,
                    "temp7": 1,
                    "temp_2": 1,
                    "temp_3": 2,
                    "temp_result": 1,
                    "temp_result1": 1,
                    "temp_result2": 2,
                    "temp_result_2": 1,
                    "temp_var7": 1,
                    "var8": 2
                },
                "uVar9": {
                    "double_calc_result": 1,
                    "double_precision_result": 3,
                    "double_result": 1,
                    "result7": 3,
                    "result8": 1,
                    "result9": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 3,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_3": 1,
                    "temp_4": 2,
                    "temp_result": 1,
                    "temp_result2": 2,
                    "temp_result3": 2,
                    "temp_result_2": 1,
                    "temp_result_3": 1,
                    "temp_var8": 1,
                    "var9": 2
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d0",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08009990"
            ],
            "code": "\nint calculate_improved_result_0800af78(int input1,uint input2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int result;\n  undefined4 result5;\n  uint positive_input2;\n  undefined8 result6;\n  undefined8 double_precision_result;\n  undefined4 local_variable;\n  \n  result6 = CONCAT44(input2,input1);\n  positive_input2 = input2 & 0x7fffffff;\n  if (positive_input2 < 0x44100000) {\n    if (positive_input2 < 0x3fdc0000) {\n      if (positive_input2 < 0x3e200000) {\n        double_precision_result = calculate_double_precision_result_080082d4(input1,input2,0x8800759c,0x7e37e43c);\n        result = check_if_string_is_empty_08008b60((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return input1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      result6 = FUNC_0800b2cc();\n      result4 = (undefined4)((ulonglong)result6 >> 0x20);\n      result1 = (undefined4)result6;\n      if (positive_input2 < 0x3ff30000) {\n        if (positive_input2 < 0x3fe60000) {\n          result6 = calculate_double_precision_result_080082d4(result1,result4,result1,result4);\n          result6 = reverse_bits_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),0,0x3ff00000);\n          double_precision_result = calculate_double_precision_result_080082d4(result1,result4,0,0x40000000);\n          result6 = calculate_floating_point_value_08008894((int)result6,(int)((ulonglong)result6 >> 0x20),(int)double_precision_result,\n                               (int)((ulonglong)double_precision_result >> 0x20));\n          result = 0;\n        }\n        else {\n          result6 = reverse_bits_080082d0(result1,result4,0,0x3ff00000);\n          double_precision_result = calculate_double_precision_result_080082d4(result1,result4,0,0x3ff00000);\n          result6 = calculate_floating_point_value_08008894((int)result6,(int)((ulonglong)result6 >> 0x20),(int)double_precision_result,\n                               (int)((ulonglong)double_precision_result >> 0x20));\n          result = 1;\n        }\n      }\n      else if (positive_input2 < 0x40038000) {\n        result6 = reverse_bits_080082d0(result1,result4,0,0x3ff80000);\n        double_precision_result = calculate_improved_result_0800af78_08008640(result1,result4,0,0x3ff80000);\n        double_precision_result = calculate_double_precision_result_080082d4((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),0,0x3ff00000);\n        result6 = calculate_floating_point_value_08008894((int)result6,(int)((ulonglong)result6 >> 0x20),(int)double_precision_result,\n                             (int)((ulonglong)double_precision_result >> 0x20));\n        result = 2;\n      }\n      else {\n        result6 = calculate_floating_point_value_08008894(0,0xbff00000,result1,result4);\n        result = 3;\n      }\n    }\n    local_variable = (undefined4)((ulonglong)result6 >> 0x20);\n    result5 = (undefined4)result6;\n    result6 = calculate_improved_result_0800af78_08008640(result5,local_variable,result5);\n    result2 = (undefined4)((ulonglong)result6 >> 0x20);\n    result1 = (undefined4)result6;\n    result6 = calculate_improved_result_0800af78_08008640(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)result6 >> 0x20);\n    result4 = (undefined4)result6;\n    result6 = calculate_improved_result_0800af78_08008640(result4,result3,0xe322da11,0x3f90ad3a);\n    result6 = calculate_double_precision_result_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0x24760deb,0x3fa97b4b);\n    result6 = calculate_improved_result_0800af78_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = calculate_double_precision_result_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0xa0d03d51,0x3fb10d66);\n    result6 = calculate_improved_result_0800af78_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = calculate_double_precision_result_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0xc54c206e,0x3fb745cd);\n    result6 = calculate_improved_result_0800af78_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = calculate_double_precision_result_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0x920083ff,0x3fc24924);\n    result6 = calculate_improved_result_0800af78_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result4,result3);\n    result6 = calculate_double_precision_result_080082d4((int)result6,(int)((ulonglong)result6 >> 0x20),0x5555550d,0x3fd55555);\n    result6 = calculate_improved_result_0800af78_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)result6 >> 0x20);\n    double_precision_result = calculate_improved_result_0800af78_08008640(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    double_precision_result = reverse_bits_080082d0((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),0x52defd9a,0x3fadde2d);\n    double_precision_result = calculate_improved_result_0800af78_08008640((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),result4,result3);\n    double_precision_result = reverse_bits_080082d0((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    double_precision_result = calculate_improved_result_0800af78_08008640((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),result4,result3);\n    double_precision_result = reverse_bits_080082d0((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),0xfe231671,0x3fbc71c6);\n    double_precision_result = calculate_improved_result_0800af78_08008640((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),result4,result3);\n    double_precision_result = reverse_bits_080082d0((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),0x9998ebc4,0x3fc99999);\n    double_precision_result = calculate_improved_result_0800af78_08008640((int)double_precision_result,(int)((ulonglong)double_precision_result >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)double_precision_result >> 0x20);\n    if (result == -1) {\n      result6 = calculate_double_precision_result_080082d4((int)result6,result1,(int)double_precision_result,result4);\n      result6 = calculate_improved_result_0800af78_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result5,local_variable);\n      result = reverse_bits_080082d0(result5,local_variable,(int)result6,(int)((ulonglong)result6 >> 0x20));\n      return result;\n    }\n    result6 = calculate_double_precision_result_080082d4((int)result6,result1,(int)double_precision_result,result4);\n    result6 = calculate_improved_result_0800af78_08008640((int)result6,(int)((ulonglong)result6 >> 0x20),result5,local_variable);\n    result6 = reverse_bits_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),\n                         *(undefined4 *)(&UNK_0800c090 + result * 8),\n                         *(undefined4 *)(&UNK_0800c094 + result * 8));\n    result6 = reverse_bits_080082d0((int)result6,(int)((ulonglong)result6 >> 0x20),result5,local_variable);\n    result = reverse_bits_080082d0(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                         *(undefined4 *)(&UNK_0800c074 + result * 8),(int)result6,\n                         (int)((ulonglong)result6 >> 0x20));\n    if ((int)input2 < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < positive_input2) || ((positive_input2 == 0x7ff00000 && (input1 != 0)))) {\n      result = calculate_double_precision_result_080082d4(input1,input2,input1);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_improved_result_0800af78",
            "entrypoint": "0x0800af78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800af78": "calculate_improved_result_0800af78",
                "iVar5": "result",
                "local_2c": "local_variable",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar6": "result5",
                "uVar7": "positive_input2",
                "uVar8": "result6",
                "uVar9": "double_precision_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "called": [],
            "calling": [
                "FUN_0800af78",
                "FUN_08009990",
                "FUN_08009d78"
            ],
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b2cc",
            "entrypoint": "0x0800b2cc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b2d4": {
            "additional_data": {
                "0x100000": {
                    "shift_value": 1
                },
                "0x1f": {
                    "right_shift_amount": 1
                },
                "0x80000000": {
                    "sign_bit": 1
                },
                "FUN_0800b2d4": {
                    "calculate_shifted_bit": 1,
                    "calculate_shifted_value": 1,
                    "clear_highest_bit_and_shift_right": 1,
                    "compute_bitwise_or": 1,
                    "count_leading_ones": 1,
                    "extract_bit": 1,
                    "extract_bit_from_offset": 1,
                    "extract_msb": 1,
                    "extract_sign_bit": 4,
                    "extracted_bits": 1,
                    "get_high_bit": 1,
                    "get_sign_bit": 1,
                    "reverse_bitwise_operation": 1,
                    "reverse_flag_bit": 1,
                    "set_bit_and_shift_right": 1,
                    "set_bit_as_msb": 1,
                    "set_high_bit_and_divide_by_2": 1,
                    "set_high_bit_and_shift": 2,
                    "set_most_significant_bit": 2,
                    "set_most_significant_bit_to1": 1,
                    "set_msb_bit_and_shift": 2,
                    "set_msb_bit_keep_sign": 1,
                    "set_sign_bit": 1,
                    "set_sign_bit_if_needed": 1,
                    "sign_extend": 1
                },
                "local_1": {
                    "result": 1,
                    "shifted_data": 1
                },
                "local_2": {
                    "result": 1
                },
                "param_1": {
                    "flag": 1,
                    "input": 2,
                    "input_bit": 1,
                    "input_flag": 4,
                    "input_flags": 1,
                    "input_parameter": 1,
                    "input_value": 7,
                    "offset": 1,
                    "param_1": 1,
                    "result": 1,
                    "size": 1,
                    "status": 2,
                    "undefined": 2,
                    "undefined_param": 1,
                    "unused": 1,
                    "unused_param": 1,
                    "value": 2,
                    "value_to_modify": 1
                },
                "param_2": {
                    "bit_pattern": 1,
                    "bit_vector": 1,
                    "bitmask": 1,
                    "bitwise_value": 2,
                    "data": 3,
                    "input": 3,
                    "input_value": 9,
                    "number": 1,
                    "original_value": 3,
                    "result": 1,
                    "shifted_value": 1,
                    "value": 5
                },
                "param_3": {
                    "bit_mask": 1,
                    "output": 3,
                    "result": 2,
                    "shift_amount": 1,
                    "shift_value": 1
                },
                "param_4": {
                    "mask": 1
                },
                "param_5": {
                    "shift_amount": 1
                },
                "param_n": {
                    "new_param": 1
                },
                "undefined4": {
                    "unsigned_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint extract_sign_bit_0800b2d4(unsigned_value input_value,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "current_name": "extract_sign_bit_0800b2d4",
            "entrypoint": "0x0800b2d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2d4": "extract_sign_bit_0800b2d4",
                "param_1": "input_value",
                "param_2": "input_value",
                "undefined4": "unsigned_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "additional_data": {
                "FUN_0800b2e0": {
                    "calculate_result": 1,
                    "do_nothing": 1,
                    "get_default_value": 4,
                    "get_return_value": 3,
                    "get_zero_value": 1,
                    "initialize": 10,
                    "initialize_application": 1,
                    "initialize_default_value": 1,
                    "initialize_function": 1,
                    "initialize_program": 5,
                    "initialize_value": 1,
                    "perform_initialization": 1,
                    "return_zero": 1
                },
                "original_variable_name": {
                    "updated_variable_name": 1
                },
                "result": {
                    "return_value": 1
                },
                "return": {
                    "result": 1
                },
                "undefined4": {
                    "int": 2,
                    "void": 9
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "code": "\nvoid initialize_program_0800b2e0(void)\n\n{\n  result 0;\n}\n\n",
            "current_name": "initialize_program_0800b2e0",
            "entrypoint": "0x0800b2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2e0": "initialize_program_0800b2e0",
                "return": "result",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "additional_data": {
                "FUN_0800b2e8": {
                    "calculate_result": 28,
                    "calculate_result_from_param": 1,
                    "calculate_reversed_result": 2
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 13
                },
                "calculate_improved_result_08008640": {
                    "calculate_improved_result": 13
                },
                "iVar2": {
                    "modified_modifier": 1,
                    "modified_offset": 1,
                    "modified_result": 1,
                    "modified_shifted_input_2": 1,
                    "modified_value": 1,
                    "new_param": 1,
                    "result": 4,
                    "result_factor": 1,
                    "result_modifier": 1,
                    "result_shifted": 1,
                    "result_with_param_3": 1,
                    "shift_sum": 1,
                    "sum": 10,
                    "sum_offset": 2,
                    "sum_result": 1,
                    "sum_shifted": 1,
                    "sum_shifted_input2_offset": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "input1": 6,
                    "input_1": 10,
                    "input_param": 1,
                    "input_param1": 3,
                    "input_param_1": 3,
                    "input_value1": 2,
                    "input_value_1": 5,
                    "value1": 1
                },
                "param_2": {
                    "input2": 6,
                    "input_2": 10,
                    "input_param2": 3,
                    "input_param_2": 3,
                    "input_value2": 2,
                    "input_value_2": 5,
                    "shifted_param": 1,
                    "value2": 1
                },
                "param_3": {
                    "additional_param": 1,
                    "calculation_factor": 1,
                    "count": 1,
                    "increment": 1,
                    "input_param3": 3,
                    "input_param_3": 3,
                    "input_value_3": 1,
                    "modifier": 7,
                    "offset": 9,
                    "offset_value": 1,
                    "shift_amount": 2,
                    "shift_value": 1
                },
                "param_4": {
                    "calculation_constant": 1,
                    "constant": 15,
                    "constant_param": 2,
                    "constant_value": 1,
                    "input_param4": 3,
                    "input_param_4": 3,
                    "input_value_4": 1,
                    "param4": 1,
                    "param_4": 1,
                    "parameter4": 1,
                    "undefined": 2
                },
                "uVar1": {
                    "result_shift": 1,
                    "shift_amount": 1,
                    "shifted": 1,
                    "shifted_amount": 1,
                    "shifted_bits": 1,
                    "shifted_input": 2,
                    "shifted_input2": 7,
                    "shifted_input_2": 3,
                    "shifted_param": 1,
                    "shifted_param_2": 3,
                    "shifted_result": 1,
                    "shifted_val": 1,
                    "shifted_value": 8
                },
                "uVar3": {
                    "concatenated_param": 1,
                    "high32": 1,
                    "high_32_bits": 1,
                    "high_bits": 11,
                    "high_bits_input1": 1,
                    "high_bits_of_input_2": 1,
                    "high_bits_of_input_params_concat": 1,
                    "high_value": 1,
                    "input2_highbits": 1,
                    "input_1_shifted": 1,
                    "input_2_shifted": 1,
                    "shifted_input_2": 1,
                    "upper_bits": 4,
                    "upper_input1": 2,
                    "upper_input_2": 1,
                    "upper_part": 1,
                    "upper_val": 1
                },
                "uVar4": {
                    "combined_input": 8,
                    "combined_inputs": 6,
                    "combined_param": 1,
                    "combined_params": 1,
                    "combined_val": 1,
                    "combined_value": 2,
                    "combined_values": 5,
                    "concat_input": 1,
                    "concatenated_input_params": 1,
                    "concatenated_inputs": 3,
                    "concatenated_values": 2
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nuint calculate_reversed_result_0800b2e8(uint input_1,uint input_2,int offset,undefined4 constant)\n\n{\n  uint shifted_value;\n  int sum;\n  uint high_bits;\n  undefined8 combined_input;\n  \n  combined_input = CONCAT44(input_2,input_1);\n  shifted_value = (input_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_1 | input_2 & 0x7fffffff) == 0) {\n      return input_1;\n    }\n    combined_input = calculate_improved_result(input_1,input_2,0,0x43500000);\n    if (offset < -50000) goto LAB_0800b34a;\n    shifted_value = ((uint)((int)((ulonglong)combined_input >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_value == 0x7ff) {\n    shifted_value = calculate_double_precision_result_080082d4(input_1,input_2,input_1,input_2,constant);\n    return shifted_value;\n  }\n  high_bits = (uint)((ulonglong)combined_input >> 0x20);\n  sum = shifted_value + offset;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)combined_input;\n    }\n    if (sum + 0x35 < 0 == SCARRY4(sum,0x35)) {\n      shifted_value = calculate_improved_result((uint)combined_input,high_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_value;\n    }\n    if (offset < 0xc351) {\n      combined_input = CONCAT44(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_value = calculate_improved_result((int)combined_input,(int)((ulonglong)combined_input >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_value;\n    }\n  }\n  shifted_value = calculate_improved_result(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_value;\n}\n\n",
            "current_name": "calculate_reversed_result_0800b2e8",
            "entrypoint": "0x0800b2e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2e8": "calculate_reversed_result_0800b2e8",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "calculate_improved_result_08008640": "calculate_improved_result",
                "iVar2": "sum",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "offset",
                "param_4": "constant",
                "uVar1": "shifted_value",
                "uVar3": "high_bits",
                "uVar4": "combined_input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "additional_data": {
                "DAT_20000018": {
                    "constant_value": 1,
                    "data": 5,
                    "data_offset": 2,
                    "data_pointer": 1,
                    "data_segment_value": 1,
                    "data_value": 2,
                    "global_data": 2,
                    "global_variable": 3,
                    "result": 1
                },
                "FUN_0800b3dc": {
                    "get_constant_value": 1,
                    "get_dat_20000018": 1,
                    "get_data": 8,
                    "get_data_address": 1,
                    "get_data_offset": 2,
                    "get_data_pointer": 1,
                    "get_data_ptr": 1,
                    "get_data_segment": 1,
                    "get_data_value": 8,
                    "get_global_data": 2,
                    "get_global_value": 1,
                    "get_global_variable": 3,
                    "get_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c",
                "FUN_080098d0"
            ],
            "code": "\nundefined4 get_data_value_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_value_0800b3dc",
            "entrypoint": "0x0800b3dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3dc": "get_data_value_0800b3dc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "additional_data": {
                "DAT_0800c0b4": {
                    "data_pointer": 1,
                    "function_array": 3,
                    "function_pointers_array": 1
                },
                "FUNC_0800b5b0": {
                    "initialize": 6,
                    "initialize_function": 1,
                    "initialize_functions": 1
                },
                "FUN_0800b3e8": {
                    "execute_callbacks": 2,
                    "execute_code_blocks": 1,
                    "execute_configured_operations": 1,
                    "execute_function_block": 1,
                    "execute_function_list": 1,
                    "execute_function_loop": 3,
                    "execute_function_sequence": 1,
                    "execute_function_set": 3,
                    "execute_function_set_twice": 2,
                    "execute_functions": 6,
                    "execute_multiple_functions": 1,
                    "execute_tasks": 3,
                    "initialize_and_execute": 1,
                    "initialize_and_execute_functions": 2,
                    "initialize_and_run_functions": 1,
                    "perform_operations": 1
                },
                "iVar1": {
                    "callback_count": 1,
                    "counter": 8,
                    "function_index": 1,
                    "index": 1,
                    "iteration": 1,
                    "iteration_count": 11,
                    "iteration_counter": 3,
                    "loop_counter": 1,
                    "num_iterations": 2,
                    "task_count": 1,
                    "task_index": 1
                },
                "ppcVar2": {
                    "callback_array": 1,
                    "callback_pointers": 1,
                    "code_block_pointer": 1,
                    "function_array": 2,
                    "function_list": 1,
                    "function_pointer": 10,
                    "function_pointer_array": 5,
                    "function_pointer_list": 2,
                    "function_pointers": 5,
                    "function_set_pointer": 1,
                    "task_pointers": 2
                }
            },
            "called": [
                "FUN_0800b4d0",
                "FUN_0800b5b0",
                "FUN_080001ac"
            ],
            "calling": [
                "entry"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initialize_and_execute_functions_0800b3e8(void)\n\n{\n  int iteration_count;\n  code **function_pointer;\n  \n  FUNC_0800b5b0();\n  iteration_count = 0;\n  function_pointer = (code **)&DAT_0800c0b4;\n  do {\n    iteration_count = iteration_count + 1;\n    (**function_pointer)();\n    function_pointer = function_pointer + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "current_name": "initialize_and_execute_functions_0800b3e8",
            "entrypoint": "0x0800b3e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3e8": "initialize_and_execute_functions_0800b3e8",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b430": {
            "additional_data": {
                "FUN_0800b430": {
                    "copy_data": 1,
                    "copy_to_buffer": 1,
                    "fill_buffer": 2,
                    "fill_buffer_with_byte": 2,
                    "fill_memory": 7,
                    "initialize_memory": 2,
                    "memset": 8,
                    "memset_array": 1,
                    "memset_pattern": 1,
                    "memset_uint_array": 1,
                    "memset_with_offset": 1,
                    "memset_with_pattern": 1,
                    "memset_with_value": 2,
                    "write_repeated_value": 1
                },
                "bVar5": {
                    "end_reached": 1,
                    "is_count_zero": 1,
                    "is_empty": 1,
                    "is_end_loop": 1,
                    "is_finished": 1,
                    "is_last_iteration": 1,
                    "is_length_zero": 2,
                    "is_remainder_zero": 1,
                    "is_remaining_size_zero": 1,
                    "is_remaining_zero": 4,
                    "is_size_zero": 2,
                    "is_zero": 11,
                    "is_zero_size": 1,
                    "size_reached": 1
                },
                "joined_r0x0800b4a8": {
                    "continue_label": 1,
                    "end_of_loop": 1,
                    "skip_write": 1
                },
                "param_1": {
                    "array": 2,
                    "buffer": 6,
                    "dest": 12,
                    "destination": 9,
                    "dst": 1,
                    "memory_array": 1
                },
                "param_2": {
                    "byte": 1,
                    "byte_to_fill": 1,
                    "initial_value": 1,
                    "pattern": 2,
                    "value": 26
                },
                "param_3": {
                    "buffer_size": 1,
                    "count": 3,
                    "length": 4,
                    "num": 1,
                    "size": 22
                },
                "puVar1": {
                    "buffer_ptr": 1,
                    "current": 1,
                    "current_pointer": 1,
                    "dest": 1,
                    "dest_ptr": 17,
                    "dst_ptr": 1,
                    "p": 1,
                    "p_buffer": 1,
                    "p_dest": 1,
                    "ptr": 1,
                    "ptr1": 2,
                    "src_ptr": 1
                },
                "puVar2": {
                    "dest_ptr2": 1,
                    "dest_ptr_next": 1,
                    "dst_ptr": 1,
                    "next": 1,
                    "next_dest_ptr": 1,
                    "next_pointer": 1,
                    "next_ptr": 1,
                    "p_dest": 1,
                    "p_next": 1,
                    "ptr": 2,
                    "ptr2": 2,
                    "q": 1,
                    "source_ptr": 1,
                    "src_ptr": 3,
                    "temp": 1,
                    "temp_ptr": 10
                },
                "uVar3": {
                    "counter": 1,
                    "remaining": 3,
                    "remaining_length": 3,
                    "remaining_size": 19,
                    "temp_count": 1,
                    "temp_size": 2
                },
                "uVar4": {
                    "combined_value": 1,
                    "concat_value": 1,
                    "concatenated_byte": 1,
                    "concatenated_value": 1,
                    "fill_pattern": 1,
                    "fill_value": 3,
                    "four_byte_value": 2,
                    "four_bytes": 1,
                    "new_value": 2,
                    "packed_value": 1,
                    "pattern": 2,
                    "pattern_unaligned": 1,
                    "pattern_value": 1,
                    "repeated_value": 1,
                    "temp_value": 1,
                    "value32": 2,
                    "value_32": 1,
                    "value_concat": 2,
                    "value_concatenated": 1,
                    "value_copy": 1,
                    "wide_value": 1,
                    "word_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001ddc",
                "FUN_080079c0",
                "FUN_08001994",
                "FUN_08005814",
                "FUN_08004d7c",
                "FUN_080005b4",
                "FUN_080002f0",
                "FUN_080024c4",
                "FUN_080004ac",
                "FUN_08002f24"
            ],
            "code": "\nvoid memset_with_value_0800b430(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  undefined4 fill_value;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = fill_value;\n        dest_ptr[-3] = fill_value;\n        dest_ptr[-2] = fill_value;\n        dest_ptr[-1] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining_size = size & 0xc;\n      dest = dest + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_size == 0) goto continue_label;\n    }\n    dest_ptr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      temp_ptr = dest + 1;\n      *dest = fill_value;\n      dest = temp_ptr;\n    } while (dest_ptr != temp_ptr);\n    size = size & 3;\n    dest = dest_ptr;\n  }\ncontinue_label:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(size + (int)dest) != temp_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "memset_with_value_0800b430",
            "entrypoint": "0x0800b430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b430": "memset_with_value_0800b430",
                "bVar5": "is_zero",
                "joined_r0x0800b4a8": "continue_label",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "remaining_size",
                "uVar4": "fill_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "called": [
                "FUN_0800b524"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b4d0",
            "entrypoint": "0x0800b4d0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b51c": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b51c",
            "entrypoint": "0x0800b51c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b520": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b520",
            "entrypoint": "0x0800b520",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b524": {
            "additional_data": {
                "FUN_0800b524": {
                    "extract_data": 1,
                    "process_data": 3,
                    "register_parameter": 1,
                    "store_data_and_update_flags": 1,
                    "update_data": 20,
                    "update_data_buffer": 1,
                    "update_data_entry": 1,
                    "update_parameter_and_flag": 1,
                    "update_records": 1,
                    "update_value": 1
                },
                "param_1": {
                    "action": 2,
                    "action_type": 1,
                    "data_flag": 3,
                    "data_type": 3,
                    "flag": 4,
                    "input_type": 2,
                    "mode": 2,
                    "operation_type": 4,
                    "record_type": 1,
                    "state": 1,
                    "status": 2,
                    "type": 4,
                    "value": 1,
                    "value_type": 1
                },
                "param_2": {
                    "data": 8,
                    "data_1": 1,
                    "data_entry": 1,
                    "input": 1,
                    "new_data": 2,
                    "new_value": 6,
                    "value": 10,
                    "value1": 2
                },
                "param_3": {
                    "data1": 9,
                    "data_1": 1,
                    "data_2": 1,
                    "data_value": 1,
                    "data_value1": 1,
                    "item1": 1,
                    "new_data1": 2,
                    "old_value": 1,
                    "output1": 1,
                    "param1": 1,
                    "param3_value": 1,
                    "parameter1": 1,
                    "type1": 1,
                    "update_value1": 1,
                    "value1": 6,
                    "value2": 2
                },
                "param_4": {
                    "data2": 9,
                    "data_2": 1,
                    "data_3": 1,
                    "data_value2": 1,
                    "extra_value": 1,
                    "item2": 1,
                    "new_data2": 2,
                    "output2": 1,
                    "param2": 1,
                    "param4_value": 1,
                    "parameter2": 1,
                    "type2": 1,
                    "update_value2": 1,
                    "value": 1,
                    "value2": 6,
                    "value3": 2
                },
                "puVar1": {
                    "current_data": 1,
                    "current_record": 1,
                    "data_buffer": 2,
                    "data_pointer": 2,
                    "data_ptr": 19,
                    "entry_pointer": 1,
                    "pointer": 1,
                    "pointer1": 1,
                    "ptr": 1,
                    "ptr_data": 2
                },
                "uVar2": {
                    "result": 11,
                    "return_value": 20
                },
                "uVar3": {
                    "bit_flag": 2,
                    "bit_mask": 23,
                    "bit_shift": 1,
                    "bitmask": 2,
                    "flag1": 1,
                    "mask": 2
                },
                "uVar4": {
                    "count": 14,
                    "counter": 3,
                    "data_count": 3,
                    "data_counter": 1,
                    "data_index": 1,
                    "data_length": 1,
                    "data_size": 1,
                    "entry_count": 1,
                    "index": 3,
                    "num_elements": 1,
                    "num_values": 1,
                    "record_count": 1
                }
            },
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "calling": [
                "FUN_0800b4d0"
            ],
            "code": "\nundefined4 update_data_entry_0800b524(int operation_type,undefined4 value,undefined4 data1,undefined4 data2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  FUNC_0800b51c(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (operation_type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = data2;\n      if (operation_type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    return_value = DAT_20000448;\n    *(uint *)(data_ptr + 4) = count + 1;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = value;\n    FUNC_0800b520(return_value);\n    return_value = 0;\n  }\n  else {\n    FUNC_0800b520(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_entry_0800b524",
            "entrypoint": "0x0800b524",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b524": "update_data_entry_0800b524",
                "param_1": "operation_type",
                "param_2": "value",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "called": [],
            "calling": [
                "FUN_08000188",
                "FUN_0800b3e8",
                "FUN_080001ac"
            ],
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5b0",
            "entrypoint": "0x0800b5b0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b5bc": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5bc",
            "entrypoint": "0x0800b5bc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "skipped": true,
            "tags": []
        },
        "entry": {
            "called": [
                "FUN_0800b3e8",
                "FUN_08007540",
                "FUN_0800756c"
            ],
            "calling": [],
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid entry(void)\n\n{\n  int iVar1;\n  undefined4 *puVar2;\n  code *UNRECOVERED_JUMPTABLE;\n  \n  for (iVar1 = 0; (undefined4 *)(iVar1 + 0x20000000) < &DAT_2000044c; iVar1 = iVar1 + 4) {\n    *(undefined4 *)(iVar1 + 0x20000000) = *(undefined4 *)(iVar1 + 0x800c0c0);\n  }\n  for (puVar2 = &DAT_2000044c; puVar2 < &DAT_20000f20; puVar2 = puVar2 + 1) {\n    *puVar2 = 0;\n  }\n  initialize_system_0800756c();\n  initialize_and_execute_functions_0800b3e8();\n  UNRECOVERED_JUMPTABLE = (code *)0x80092fa;\n  initialize_and_process_system_08007540();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*UNRECOVERED_JUMPTABLE)();\n  return;\n}\n\n",
            "current_name": "entry",
            "entrypoint": "0x080092c4",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "thunk_FUN_08009990": {
            "additional_data": {
                "DAT_0800be68": {
                    "constant1": 1,
                    "constant_1": 1,
                    "constants1": 1,
                    "data_1": 2
                },
                "DAT_0800be80": {
                    "constant2": 1,
                    "constant_2": 1,
                    "constants2": 1,
                    "data_2": 2
                },
                "FUNC_0800b2cc": {
                    "calculate_floating_point_output": 1,
                    "func1": 1,
                    "function_1": 1,
                    "helper_function": 1,
                    "perform_operation": 3,
                    "process_result": 1,
                    "some_function": 2
                },
                "SCARRY4": {
                    "signed_carry_4": 1
                },
                "calculate_double_precision_result_080082d4": {
                    "calculate_double_precision_result": 9,
                    "calculate_double_result": 1
                },
                "calculate_floating_point_value_08008894": {
                    "calculate_float_value": 1,
                    "calculate_floating_point_value": 9
                },
                "calculate_improved_result_0800af78": {
                    "calculate_improved_result": 9,
                    "calculate_new_result": 1
                },
                "iVar1": {
                    "diff": 1,
                    "difference": 18,
                    "difference_value": 1,
                    "interval": 1,
                    "temp7": 1,
                    "temp_7": 1,
                    "temp_var": 2,
                    "temp_var_1": 5
                },
                "param_1": {
                    "first_parameter": 2,
                    "input1": 10,
                    "input_1": 7,
                    "input_a": 2,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_parameter_1": 1,
                    "input_value_1": 1,
                    "num1": 1,
                    "operand1": 1,
                    "value1": 1,
                    "value_1": 2,
                    "x1": 1
                },
                "param_2": {
                    "input2": 10,
                    "input_2": 7,
                    "input_b": 2,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_parameter_2": 1,
                    "input_value_2": 1,
                    "num2": 1,
                    "operand2": 1,
                    "second_parameter": 2,
                    "value2": 1,
                    "value_2": 2,
                    "x2": 1
                },
                "param_3": {
                    "input3": 10,
                    "input_3": 7,
                    "input_c": 2,
                    "input_param3": 1,
                    "input_param_3": 1,
                    "input_parameter_3": 1,
                    "input_value_3": 1,
                    "num3": 1,
                    "operand3": 1,
                    "third_parameter": 2,
                    "value3": 1,
                    "value_3": 2,
                    "x3": 1
                },
                "param_4": {
                    "fourth_parameter": 2,
                    "input4": 10,
                    "input_4": 7,
                    "input_d": 2,
                    "input_param4": 1,
                    "input_param_4": 1,
                    "input_parameter_4": 1,
                    "input_value_4": 1,
                    "num4": 1,
                    "operand4": 1,
                    "value4": 1,
                    "value_4": 2,
                    "x4": 1
                },
                "reverse_bits_080082d0": {
                    "reverse_bits": 10
                },
                "thunk_FUN_08009990": {
                    "calculate_float_result": 1,
                    "calculate_floating_point_result": 1,
                    "calculate_floating_point_value": 1,
                    "calculate_result": 24,
                    "calculate_reversed_double_precision": 1,
                    "calculate_value": 1,
                    "get_improved_result": 1,
                    "improved_calculate_value": 1
                },
                "uVar1": {
                    "temp1": 1,
                    "temp_1": 1
                },
                "uVar2": {
                    "high_bits": 1,
                    "result": 1,
                    "result1": 2,
                    "result_bits": 1,
                    "result_high": 1,
                    "result_high_bits": 1,
                    "result_upper": 1,
                    "result_upper_bits": 1,
                    "temp2": 1,
                    "temp_2": 1,
                    "temp_var2": 1,
                    "temp_var_2": 5,
                    "upper_bits": 3,
                    "upper_half_result": 1,
                    "upper_result": 1
                },
                "uVar3": {
                    "additional_value": 1,
                    "bit_mask1": 1,
                    "bit_shift": 2,
                    "bit_shift_result": 1,
                    "bit_shift_value": 1,
                    "bit_shifted_value": 1,
                    "bitwise_combination": 1,
                    "bitwise_shift_value": 1,
                    "condition": 2,
                    "flag": 4,
                    "flags": 1,
                    "parameter_combination": 1,
                    "result_lower": 1,
                    "result_type": 1,
                    "shift_check": 1,
                    "shifted_bits": 2,
                    "shifted_param": 2,
                    "temp3": 1,
                    "temp_3": 1,
                    "temp_var_3": 5
                },
                "uVar4": {
                    "abs_param4": 1,
                    "adjusted_x4": 1,
                    "bit_mask2": 1,
                    "filtered_input_4": 1,
                    "masked_param": 1,
                    "masked_param_4": 1,
                    "mod_param4": 1,
                    "modified_fourth_parameter": 1,
                    "modified_input_d": 1,
                    "modified_param_4": 1,
                    "modified_value_4": 1,
                    "normalized_input_4": 1,
                    "param4_absolute": 1,
                    "param4_bitwise": 1,
                    "param4_masked": 1,
                    "param4_positive": 1,
                    "param_4_filtered": 1,
                    "param_4_masked": 1,
                    "param_4_unsigned": 1,
                    "positive_input4": 1,
                    "positive_input_4": 2,
                    "positive_num4": 1,
                    "temp4": 1,
                    "temp_4": 1,
                    "temp_var_4": 5
                },
                "uVar5": {
                    "abs_param2": 1,
                    "adjusted_x2": 1,
                    "bit_mask3": 1,
                    "filtered_input_2": 1,
                    "masked_param2": 1,
                    "masked_param_2": 1,
                    "mod_param2": 1,
                    "modified_input_b": 1,
                    "modified_param_2": 1,
                    "modified_second_parameter": 1,
                    "modified_value_2": 1,
                    "normalized_input_2": 1,
                    "param2_absolute": 1,
                    "param2_bitwise": 1,
                    "param2_masked": 1,
                    "param2_positive": 1,
                    "param_2_filtered": 1,
                    "param_2_masked": 1,
                    "param_2_unsigned": 1,
                    "positive_input2": 1,
                    "positive_input_2": 2,
                    "positive_num2": 1,
                    "temp5": 1,
                    "temp_5": 1,
                    "temp_var_5": 5
                },
                "uVar6": {
                    "calculated_result": 1,
                    "float_result": 1,
                    "floating_point_result": 3,
                    "floating_point_value": 5,
                    "improved_result": 1,
                    "result": 8,
                    "result2": 2,
                    "result_64bit": 1,
                    "result_combined": 1,
                    "temp6": 1,
                    "temp_6": 1,
                    "temp_var_6": 5,
                    "tmp_result": 1
                },
                "uvar3": {
                    "shift_value": 1
                },
                "uvar4": {
                    "mod_d": 1
                },
                "uvar5": {
                    "mod_b": 1
                }
            },
            "called": [
                "FUN_08009990"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nuint calculate_float_result_thunk_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 temp_var_2;\n  uint temp_var_3;\n  uint temp_var_4;\n  uint temp_var_5;\n  undefined8 result;\n  \n  temp_var_4 = input4 & 0x7fffffff;\n  if (((temp_var_4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (temp_var_5 = input2 & 0x7fffffff, (temp_var_5 | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      temp_var_4 = calculate_improved_result();\n      return temp_var_4;\n    }\n    temp_var_3 = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((temp_var_5 | input1) == 0) {\n      if (temp_var_3 == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (temp_var_3 == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp_var_4 | input3) != 0) {\n        if (temp_var_4 == 0x7ff00000) {\n          temp_var_3 = temp_var_3 - 1;\n          if (temp_var_5 == 0x7ff00000) {\n            if (temp_var_3 < 3) {\n              return *(uint *)(&DAT_0800be68 + temp_var_3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (temp_var_3 < 3) {\n            return *(uint *)(&DAT_0800be80 + temp_var_3 * 8);\n          }\n          return 0;\n        }\n        if (temp_var_5 != 0x7ff00000) {\n          difference = (int)(temp_var_5 - temp_var_4) >> 0x14;\n          if ((int)(temp_var_5 - temp_var_4) < 0x3d00000) {\n            if (((int)input4 < 0) && (difference + 0x3c < 0 != signed_carry_4(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              calculate_floating_point_value(input1,input2,input3,input4,input4);\n              FUNC_0800b2cc();\n              result = calculate_improved_result();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          temp_var_2 = (undefined4)((ulonglong)result >> 0x20);\n          temp_var_4 = (uint)result;\n          if (temp_var_3 == 1) {\n            return temp_var_4;\n          }\n          if (temp_var_3 == 2) {\n            result = reverse_bits_080082d0(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n            temp_var_4 = reverse_bits_080082d0(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return temp_var_4;\n          }\n          if (temp_var_3 == 0) {\n            return temp_var_4;\n          }\n          result = reverse_bits_080082d0(temp_var_4,temp_var_2,0x33145c07,0x3ca1a626);\n          temp_var_4 = reverse_bits_080082d0((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return temp_var_4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = calculate_double_precision_result_080082d4(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "current_name": "calculate_float_result_thunk_08009990",
            "entrypoint": "0x08009818",
            "imported": false,
            "improved": true,
            "renaming": {
                "SCARRY4": "signed_carry_4",
                "calculate_double_precision_result_080082d4": "calculate_double_precision_result",
                "calculate_floating_point_value_08008894": "calculate_floating_point_value",
                "calculate_improved_result_0800af78": "calculate_improved_result",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_080082d0": "reverse_bits",
                "thunk_FUN_08009990": "calculate_float_result_thunk_08009990",
                "uVar2": "temp_var_2",
                "uVar3": "temp_var_3",
                "uVar4": "temp_var_4",
                "uVar5": "temp_var_5",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_08000210",
            "FUN_08000478",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_080035ec",
            "FUN_08003980",
            "FUN_08005250",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005360",
            "FUN_0800587c",
            "FUN_0800597c",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005bdc",
            "FUN_080064ec",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007854",
            "FUN_080078f4",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007da8",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_08009278",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_080001f8",
            "FUN_08000268",
            "FUN_080002f0",
            "FUN_080004fc",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002ef0",
            "FUN_08002f40",
            "FUN_08005238",
            "FUN_08005324",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005984",
            "FUN_08005a98",
            "FUN_08005c30",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_08006628",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d2e",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08007520",
            "FUN_0800778c",
            "FUN_08007884",
            "FUN_080079c0",
            "FUN_08007d08",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008640",
            "FUN_08008894",
            "FUN_08008b00",
            "FUN_08009204",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_08009798"
        ],
        [
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_0800056c",
            "FUN_080025e8",
            "FUN_0800283a",
            "FUN_08002f24",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003778",
            "FUN_080053a0",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800618c",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006d72",
            "FUN_08007a70",
            "FUN_08008af0",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_080091fc",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800adf0",
            "FUN_0800b2e8"
        ],
        [
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_0800195c",
            "FUN_08002638",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003a18",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08005900",
            "FUN_080059b4",
            "FUN_08007436",
            "FUN_08007ad0",
            "FUN_08007c7c",
            "FUN_08007f54",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_080098d0",
            "FUN_08009b24"
        ],
        [
            "FUN_0800184c",
            "FUN_08002978",
            "FUN_080039a0",
            "FUN_08004250",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_080074c8",
            "FUN_08007e08",
            "FUN_08008190",
            "FUN_08008286",
            "FUN_08009318",
            "FUN_080094c0",
            "FUN_0800981c",
            "FUN_0800af78"
        ],
        [
            "FUN_08001994",
            "FUN_080029d8",
            "FUN_08002afc",
            "FUN_08002c18",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004e30",
            "FUN_08007930",
            "FUN_08009990",
            "FUN_0800a5a0",
            "thunk_FUN_08009990"
        ],
        [
            "FUN_080004ac",
            "FUN_08001d4c",
            "FUN_08002a94",
            "FUN_08002ba8",
            "FUN_08002e08",
            "FUN_080044e8",
            "FUN_08004dd2",
            "FUN_08007756",
            "FUN_08009d78"
        ],
        [
            "FUN_08002edc",
            "FUN_080051b4",
            "FUN_08009410",
            "FUN_080096e8"
        ],
        [
            "FUN_08003004",
            "FUN_08003618"
        ],
        [
            "FUN_080058a0"
        ],
        [
            "FUN_08003a74"
        ],
        [
            "FUN_08001e98",
            "FUN_08002fd4"
        ],
        [
            "FUN_08000220",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_0800525c"
        ],
        [
            "FUN_080005b4"
        ],
        [
            "FUN_080039bc"
        ],
        [
            "FUN_08003b98"
        ],
        [
            "FUN_08003f34"
        ],
        [
            "FUN_08001ddc"
        ],
        [
            "FUN_08007540"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 919761
}