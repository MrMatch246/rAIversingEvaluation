{
    "functions": {
        "FUN_08000188": {
            "additional_data": {
                "DAT_2000044c": {
                    "flag": 10,
                    "flag_variable": 2
                },
                "FUN_08000188": {
                    "initialize_flag": 25,
                    "initialize_flag_if_not_set": 1,
                    "initialize_flag_if_unset": 1,
                    "set_flag_if_not_set": 2,
                    "update_flag_if_unset": 1,
                    "update_flag_if_zero": 1
                },
                "param_1": {
                    "input": 10,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_value": 17,
                    "input_var": 1
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08000194) */\n\nundefined4 initialize_flag_if_unset_08000188(undefined4 input_value)\n\n{\n  if ((char)DAT_2000044c == '\\0') {\n    DAT_2000044c._0_1_ = '\\x01';\n  }\n  return input_value;\n}\n\n",
            "current_name": "initialize_flag_if_unset_08000188",
            "entrypoint": "0x08000188",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000188": "initialize_flag_if_unset_08000188",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001ac": {
            "additional_data": {
                "FUN_080001ac": {
                    "concat_param": 1,
                    "concat_params": 1,
                    "concat_values": 1,
                    "concatenate": 1,
                    "concatenate_integers": 6,
                    "concatenate_numbers": 2,
                    "concatenate_param_values": 1,
                    "concatenate_parameters": 7,
                    "concatenate_params": 3,
                    "concatenate_values": 8
                },
                "param_1": {
                    "first_integer": 3,
                    "first_number": 1,
                    "first_param": 6,
                    "first_parameter": 5,
                    "first_part": 1,
                    "first_value": 2,
                    "input1": 1,
                    "input_param1": 1,
                    "input_parameter1": 1,
                    "integer1": 3,
                    "source_parameter": 1,
                    "val1": 1,
                    "value1": 4,
                    "value_1": 1
                },
                "param_2": {
                    "input2": 1,
                    "input_param2": 1,
                    "input_parameter2": 1,
                    "integer2": 3,
                    "second_integer": 3,
                    "second_number": 1,
                    "second_param": 6,
                    "second_parameter": 5,
                    "second_part": 1,
                    "second_value": 2,
                    "target_parameter": 1,
                    "val2": 1,
                    "value2": 4,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_0800b5b0"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x080001b2) */\n\nundefined8 concatenate_param_values_080001ac(undefined4 first_param,undefined4 second_param)\n\n{\n  return CONCAT44(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_param_values_080001ac",
            "entrypoint": "0x080001ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001ac": "concatenate_param_values_080001ac",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080001c8": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001c8(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001c8",
            "entrypoint": "0x080001c8",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001c8": "FUNC_080001c8"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001d4": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001d4(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001d4",
            "entrypoint": "0x080001d4",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001d4": "FUNC_080001d4"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001e0": {
            "called": [],
            "calling": [
                "FUN_08000220"
            ],
            "code": "\nvoid FUNC_080001e0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001e0",
            "entrypoint": "0x080001e0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001e0": "FUNC_080001e0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001ec": {
            "called": [],
            "calling": [
                "FUN_08000210"
            ],
            "code": "\nvoid FUNC_080001ec(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080001ec",
            "entrypoint": "0x080001ec",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080001ec": "FUNC_080001ec"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080001f8": {
            "additional_data": {
                "FUN_080001f8": {
                    "disable_coolant": 2,
                    "initialize_coolant_system": 5,
                    "reset_coolant_system": 4,
                    "stop_coolant": 4,
                    "stop_coolant_flow": 5,
                    "stop_coolant_process": 1,
                    "stop_coolant_system": 9,
                    "turn_off_coolant_system": 1
                },
                "FUN_08000210": {
                    "disable_alarm": 1,
                    "disable_coolant_system": 1,
                    "do_something": 1,
                    "perform_additional_tasks": 2,
                    "reset_state": 1,
                    "shut_off_coolant": 1,
                    "stop_coolant": 1,
                    "update_coolant_status": 1
                },
                "coolant_stop": {
                    "stop_coolant": 4,
                    "stop_coolant_flow": 9,
                    "stop_coolant_function": 1,
                    "turn_off_coolant": 3
                }
            },
            "called": [
                "FUN_08000210"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid stop_coolant_system_080001f8(void)\n\n{\n  DAT_20000468 = 0;\n  stop_coolant_flow();\n  return;\n}\n\n",
            "current_name": "stop_coolant_system_080001f8",
            "entrypoint": "0x080001f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080001f8": "stop_coolant_system_080001f8",
                "coolant_stop": "stop_coolant_flow"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000210": {
            "additional_data": {
                "FUNC_080001d4": {
                    "": 1,
                    "coolant_mist_off": 28,
                    "turn_off_coolant_mist": 2
                },
                "FUNC_080001ec": {
                    "": 1,
                    "coolant_flood_off": 28,
                    "turn_off_coolant_flood": 2
                },
                "FUN_08000210": {
                    "disable_coolant": 1,
                    "turn_off_coolant": 11,
                    "turn_off_coolant_spraying": 1,
                    "turn_off_coolant_system": 12,
                    "turn_off_coolant_systems": 5,
                    "turn_off_cooling_system": 1
                }
            },
            "called": [
                "FUN_080001d4",
                "FUN_080001ec"
            ],
            "calling": [
                "FUN_080025e8",
                "FUN_08000220",
                "FUN_080001f8"
            ],
            "code": "\nvoid turn_off_coolant_system_08000210(void)\n\n{\n  coolant_mist_off();\n  coolant_flood_off();\n  return;\n}\n\n",
            "current_name": "turn_off_coolant_system_08000210",
            "entrypoint": "0x08000210",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000210": "turn_off_coolant_system_08000210"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000220": {
            "additional_data": {
                "DAT_20000468": {
                    "coolant_previous_status": 1,
                    "coolant_status": 2,
                    "current_code": 1,
                    "current_command": 1,
                    "current_control_signal": 1,
                    "current_coolant_setting": 1,
                    "current_coolant_state": 1,
                    "current_mode": 1,
                    "last_command": 1,
                    "last_coolant_command": 1,
                    "last_coolant_status": 1,
                    "previous_status": 1
                },
                "FUNC_080001c8": {
                    "coolant_flood_on": 2
                },
                "FUNC_080001e0": {
                    "coolant_mist_on": 3
                },
                "FUN_08000210": {
                    "plan_synchronize": 3
                },
                "FUN_08000220": {
                    "adjust_coolant": 1,
                    "adjust_coolant_flow": 1,
                    "control_coolant": 3,
                    "control_coolant_flow": 4,
                    "control_coolant_system": 5,
                    "control_cooling_system": 1,
                    "coolant_control": 1,
                    "handle_coolant": 1,
                    "handle_coolant_command": 1,
                    "handle_coolant_control": 2,
                    "manage_coolant": 1,
                    "process_coolant_command": 2,
                    "update_coolant": 1,
                    "update_coolant_status": 7
                },
                "FUN_08002fd4": {
                    "coolant_stop": 3
                },
                "SOC_080001c8": {
                    "coolant_flood_on": 1
                },
                "coolant_flood_on": {
                    "turn_flood_coolant_on": 1,
                    "turn_on_coolant_flood": 19,
                    "turn_on_flood_coolant": 7,
                    "turn_on_flooding_coolant": 1
                },
                "coolant_mist_on": {
                    "turn_mist_coolant_on": 1,
                    "turn_on_coolant_mist": 19,
                    "turn_on_mist_coolant": 7,
                    "turn_on_misting_coolant": 1
                },
                "coolant_stop": {
                    "stop_coolant": 25,
                    "stop_coolant_flow": 2,
                    "stop_coolant_system": 1
                },
                "param_1": {
                    "command": 7,
                    "control_signal": 5,
                    "coolant_command": 1,
                    "coolant_setting": 1,
                    "coolant_state": 1,
                    "coolant_status": 2,
                    "coolant_type": 1,
                    "input": 3,
                    "input_code": 1,
                    "mode": 1,
                    "new_status": 3,
                    "state": 1,
                    "status": 4
                },
                "plan_synchronize": {
                    "synchronize_coolant_system": 2,
                    "synchronize_plan": 7,
                    "synchronize_planned": 2,
                    "synchronize_planned_operations": 1,
                    "synchronize_planning": 2,
                    "synchronize_plans": 14
                }
            },
            "called": [
                "FUN_08000210",
                "FUN_080001c8",
                "FUN_080001e0",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid control_coolant_system_08000220(char command)\n\n{\n  if (command != DAT_20000468) {\n    synchronize_plans();\n    if (command == '\\x01') {\n      turn_on_coolant_flood();\n      DAT_20000468 = command;\n    }\n    else if (command == '\\x02') {\n      turn_on_coolant_mist();\n      DAT_20000468 = command;\n    }\n    else {\n      stop_coolant();\n      DAT_20000468 = command;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "control_coolant_system_08000220",
            "entrypoint": "0x08000220",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000220": "control_coolant_system_08000220",
                "coolant_flood_on": "turn_on_coolant_flood",
                "coolant_mist_on": "turn_on_coolant_mist",
                "coolant_stop": "stop_coolant",
                "param_1": "command",
                "plan_synchronize": "synchronize_plans"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000268": {
            "additional_data": {
                "FUN_08000268": {
                    "calculate_adjusted_tick": 4,
                    "calculate_adjusted_time": 6,
                    "calculate_delay": 5,
                    "calculate_elapsed_time": 9,
                    "calculate_time_difference": 4,
                    "calculate_time_offset": 1,
                    "calculate_timeout_value": 1,
                    "get_adjusted_tick": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 12,
                    "get_current_time": 1,
                    "get_tick": 1,
                    "get_tick_count": 5,
                    "get_tick_value": 1
                },
                "_DAT_e000e018": {
                    "data": 1,
                    "data_value": 1,
                    "device_reg_value": 1,
                    "elapsed_time": 1,
                    "hardware_offset": 1,
                    "hardware_value": 1,
                    "interrupt_priority": 1,
                    "offset": 1,
                    "some_data": 2,
                    "some_variable": 1,
                    "something_important": 1,
                    "system_clock": 3,
                    "system_offset": 1,
                    "system_tick": 2,
                    "system_tick_base": 1,
                    "system_time": 4,
                    "system_timer_register": 1,
                    "system_timer_value": 1,
                    "time_base": 1,
                    "timer_register": 3,
                    "value_to_subtract": 1
                },
                "iVar1": {
                    "current_tick": 23,
                    "current_time": 1,
                    "tick": 1,
                    "tick_count": 3
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002b6"
            ],
            "code": "\n\n\nint calculate_elapsed_time_08000268(void)\n\n{\n  int current_tick;\n  \n  current_tick = get_current_tick();\n  return (current_tick + 1) * 1000 - _DAT_e000e018 / 0xa8;\n}\n\n",
            "current_name": "calculate_elapsed_time_08000268",
            "entrypoint": "0x08000268",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000268": "calculate_elapsed_time_08000268",
                "HAL_GetTick": "get_current_tick",
                "iVar1": "current_tick"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002a0": {
            "additional_data": {
                "FUN_080002a0": {
                    "delay": 1,
                    "delay_execution": 9,
                    "delay_function": 21
                },
                "FUN_08005a98": {
                    "do_something": 1,
                    "handle_delay": 1,
                    "handle_interrupt": 1,
                    "perform_action": 1,
                    "process_data": 4,
                    "process_integer": 1,
                    "secondary_function": 1,
                    "sub_function": 4
                },
                "HAL_Delay": {
                    "delay": 1,
                    "delay_millisecond": 1,
                    "perform_delay": 1
                },
                "delayFunction": {
                    "delay_function": 1
                },
                "delayTime": {
                    "param": 1
                },
                "param_1": {
                    "action_type": 1,
                    "delay_duration": 2,
                    "delay_period": 1,
                    "delay_time": 21,
                    "interrupt_code": 1,
                    "milliseconds": 2,
                    "param": 3
                },
                "subFunction": {
                    "sub_function": 1
                }
            },
            "called": [
                "FUN_08005a98"
            ],
            "calling": [
                "FUN_08002408"
            ],
            "code": "\nvoid delay_function_080002a0(undefined4 delay_time)\n\n{\n  perform_delay(delay_time);\n  return;\n}\n\n",
            "current_name": "delay_function_080002a0",
            "entrypoint": "0x080002a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002a0": "delay_function_080002a0",
                "HAL_Delay": "perform_delay",
                "param_1": "delay_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002b6": {
            "additional_data": {
                "FUN_080002b6": {
                    "delay_and_wait": 1,
                    "delay_execution": 5,
                    "delay_function": 6,
                    "delay_until": 2,
                    "delay_until_time": 2,
                    "wait_for_time": 3,
                    "wait_for_time_to_pass": 1,
                    "wait_until_system_time": 1,
                    "wait_until_time": 6,
                    "wait_until_time_arrives": 1,
                    "wait_until_time_elapsed": 1,
                    "wait_until_time_reached": 2
                },
                "bVar3": {
                    "is_delay_complete": 6,
                    "is_delay_completed": 1,
                    "is_delay_over": 1,
                    "is_delay_reached": 2,
                    "is_elapsed": 1,
                    "is_target_reached": 4,
                    "is_target_time_reached": 1,
                    "is_time_elapsed": 1,
                    "is_time_passed": 1,
                    "is_time_reached": 5,
                    "time_elapsed": 2,
                    "time_reached": 5,
                    "time_up": 1
                },
                "get_current_usecs": {
                    "get_current_microseconds": 1
                },
                "lVar4": {
                    "current_microseconds": 7,
                    "current_time": 7,
                    "current_usecs": 8,
                    "current_usecs_low": 1,
                    "initial_time": 1,
                    "start_microseconds": 1,
                    "start_time": 3,
                    "start_timestamp": 1,
                    "start_usecs": 2
                },
                "param_1": {
                    "delay_duration": 1,
                    "delay_in_microseconds": 1,
                    "delay_in_millis": 1,
                    "delay_in_usecs": 1,
                    "delay_milliseconds": 1,
                    "delay_time": 6,
                    "duration": 3,
                    "microseconds": 1,
                    "microseconds_to_wait": 1,
                    "milliseconds": 7,
                    "milliseconds_to_wait": 1,
                    "time_delay": 1,
                    "time_interval": 1,
                    "time_to_wait": 4,
                    "wait_duration": 1
                },
                "uVar1": {
                    "current_high": 1,
                    "current_microseconds": 2,
                    "current_millis": 1,
                    "current_milliseconds": 5,
                    "current_seconds": 4,
                    "current_seconds_upper": 1,
                    "current_secs_upper": 1,
                    "current_time": 2,
                    "current_time_high": 1,
                    "current_usecs1": 1,
                    "current_usecs_1": 1,
                    "current_usecs_high": 7,
                    "current_usecs_upper": 1,
                    "system_time_high": 1,
                    "upper_bits_current_time": 1,
                    "upper_bits_time": 1
                },
                "uVar2": {
                    "current_seconds_plus_micros": 1,
                    "current_usecs2": 1,
                    "current_usecs_2": 1,
                    "current_usecs_high_param": 1,
                    "initial_time_upper": 1,
                    "initial_usecs_high": 1,
                    "start_usecs_high": 1,
                    "target_high": 1,
                    "target_microseconds": 2,
                    "target_millis": 1,
                    "target_milliseconds": 5,
                    "target_seconds": 3,
                    "target_seconds_upper": 1,
                    "target_secs_upper": 1,
                    "target_time": 3,
                    "target_time_high": 2,
                    "target_usecs_high": 3,
                    "time_reached_high": 1,
                    "upper_bits_target_time": 1
                },
                "uVar5": {
                    "current_microseconds": 1,
                    "current_microseconds_temp": 1,
                    "current_microseconds_updated": 1,
                    "current_time": 7,
                    "current_time2": 1,
                    "current_time_high": 1,
                    "current_timestamp": 1,
                    "current_usecs": 3,
                    "current_usecs_after_wait": 1,
                    "current_usecs_copy": 1,
                    "current_usecs_new": 1,
                    "current_usecs_now": 2,
                    "current_usecs_upper": 1,
                    "new_microseconds": 1,
                    "new_time": 4,
                    "target_time": 2,
                    "temp_usecs": 1,
                    "updated_usecs": 1
                }
            },
            "called": [
                "FUN_08000268"
            ],
            "calling": [],
            "code": "\nvoid wait_until_time_reached_080002b6(uint milliseconds)\n\n{\n  uint current_usecs_high;\n  uint target_milliseconds;\n  bool is_delay_complete;\n  longlong current_usecs;\n  undefined8 current_time;\n  \n  current_usecs = get_current_microseconds();\n  target_milliseconds = (uint)(current_usecs + (ulonglong)milliseconds >> 0x20);\n  do {\n    current_time = get_current_microseconds();\n    current_usecs_high = (uint)((ulonglong)current_time >> 0x20);\n    is_delay_complete = target_milliseconds <= current_usecs_high;\n    if (current_usecs_high == target_milliseconds) {\n      is_delay_complete = (uint)(current_usecs + (ulonglong)milliseconds) <= (uint)current_time;\n    }\n  } while (!is_delay_complete);\n  return;\n}\n\n",
            "current_name": "wait_until_time_reached_080002b6",
            "entrypoint": "0x080002b6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002b6": "wait_until_time_reached_080002b6",
                "bVar3": "is_delay_complete",
                "get_current_usecs": "get_current_microseconds",
                "lVar4": "current_usecs",
                "param_1": "milliseconds",
                "uVar1": "current_usecs_high",
                "uVar2": "target_milliseconds",
                "uVar5": "current_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080002f0": {
            "additional_data": {
                "DAT_2000046c": {
                    "count": 1,
                    "counter": 2,
                    "data_count": 1,
                    "data_flag": 1,
                    "status": 4,
                    "value": 1
                },
                "DAT_20000470": {
                    "data": 5,
                    "data_array": 1,
                    "data_buffer": 2,
                    "memory": 1,
                    "memory_block": 1
                },
                "FUN_080002f0": {
                    "initialize_data": 26,
                    "initialize_memory": 5
                },
                "FUN_0800b430": {
                    "process_data": 2
                },
                "dataBuffer": {
                    "buffer": 1
                },
                "dataPtr": {
                    "data_pointer": 1
                },
                "flag": {
                    "data_flag": 1,
                    "is_initialized": 1
                },
                "memset": {
                    "set_memory": 2
                },
                "param_1": {
                    "array": 4,
                    "array_pointer": 1,
                    "array_ptr": 2,
                    "buffer": 1,
                    "data": 1,
                    "data_array": 1,
                    "data_buffer": 4,
                    "data_pointer": 6,
                    "data_ptr": 4,
                    "param": 1,
                    "pointer": 2,
                    "ptr": 1,
                    "ptr_array": 1
                },
                "param_2": {
                    "byte": 1,
                    "flag": 18,
                    "value": 10
                },
                "param_3": {
                    "count": 2,
                    "data_size": 1,
                    "length": 1,
                    "size": 25
                },
                "size": {
                    "data_size": 1
                },
                "undefined": {
                    "uint8": 1
                },
                "undefined4": {
                    "uint32": 1
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08000310",
                "FUN_08000340",
                "FUN_08000374",
                "FUN_080003ec"
            ],
            "code": "\nvoid initialize_data_080002f0(void)\n\n{\n  set_memory(&DAT_20000470,0xff,4);\n  DAT_2000046c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_080002f0",
            "entrypoint": "0x080002f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080002f0": "initialize_data_080002f0",
                "memset": "set_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000310": {
            "additional_data": {
                "0x3ff": {
                    "mask": 2
                },
                "DAT_2000046c": {
                    "eeprom_initialized": 18,
                    "is_eeprom_initialized": 2
                },
                "DAT_20000470": {
                    "eeprom_data": 9,
                    "memory_values": 1
                },
                "FUN_080002f0": {
                    "eeprom_init": 5,
                    "initialize_data": 1
                },
                "FUN_08000310": {
                    "get_data_from_eeprom": 6,
                    "get_eeprom_data": 14,
                    "get_eeprom_value": 10,
                    "get_memory_value": 1
                },
                "eeprom_init": {
                    "initialize_eeprom": 19
                },
                "param_1": {
                    "data_index": 4,
                    "index": 17,
                    "input": 1,
                    "input_index": 1,
                    "input_param": 1,
                    "input_value": 2,
                    "offset": 1,
                    "value_index": 4
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_080003ec",
                "FUN_08004dd2"
            ],
            "code": "\nundefined get_data_from_eeprom_08000310(uint index)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_eeprom();\n  }\n  return (&DAT_20000470)[index & 0x3ff];\n}\n\n",
            "current_name": "get_data_from_eeprom_08000310",
            "entrypoint": "0x08000310",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000310": "get_data_from_eeprom_08000310",
                "eeprom_init": "initialize_eeprom",
                "param_1": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000340": {
            "additional_data": {
                "DAT_2000046c": {
                    "is_eeprom_initialized": 1
                },
                "DAT_20000470": {
                    "eeprom_data_array": 1
                },
                "FUN_08000340": {
                    "store_data": 4,
                    "store_data_in_eeprom": 4,
                    "store_parameter_value": 1,
                    "store_to_eeprom": 1,
                    "store_value_in_eeprom": 4,
                    "update_eeprom": 1,
                    "update_eeprom_data": 3,
                    "update_eeprom_value": 4,
                    "write_to_eeprom": 9
                },
                "eeprom_init": {
                    "initialize_eeprom": 5
                },
                "param_1": {
                    "address": 5,
                    "index": 25,
                    "parameter_index": 1
                },
                "param_2": {
                    "data": 12,
                    "parameter_value": 1,
                    "value": 17,
                    "value_to_store": 1
                }
            },
            "called": [
                "FUN_080002f0"
            ],
            "calling": [
                "FUN_08004c2a",
                "FUN_08000374"
            ],
            "code": "\nvoid write_to_eeprom_08000340(uint index,undefined value)\n\n{\n  if (DAT_2000046c == 0) {\n    initialize_eeprom();\n  }\n  (&DAT_20000470)[index & 0x3ff] = value;\n  return;\n}\n\n",
            "current_name": "write_to_eeprom_08000340",
            "entrypoint": "0x08000340",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000340": "write_to_eeprom_08000340",
                "eeprom_init": "initialize_eeprom",
                "param_1": "index",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000374": {
            "additional_data": {
                "FUN_08000374": {
                    "calculate_and_store_checksum": 1,
                    "calculate_checksum": 2,
                    "copy_and_calculate_checksum": 1,
                    "copy_and_update_eeprom": 1,
                    "copy_to_eeprom": 1,
                    "process_and_put_data": 1,
                    "process_and_store_data": 7,
                    "process_data": 9,
                    "reverse_and_store_data": 1,
                    "update_checksum": 1,
                    "write_data_to_eeprom": 2,
                    "write_to_eeprom": 3,
                    "write_to_eeprom_and_calculate_checksum": 1
                },
                "local_14": {
                    "base_address": 1,
                    "current_address": 10,
                    "current_eeprom_address": 3,
                    "current_index": 2,
                    "current_offset": 3,
                    "destination_address": 2,
                    "destination_ptr": 1,
                    "eeprom_address": 1,
                    "eeprom_index": 2,
                    "eeprom_ptr": 1,
                    "memory_address": 1,
                    "offset": 1,
                    "output_index": 1,
                    "start_address": 1,
                    "temp_input_length": 1
                },
                "local_18": {
                    "current_byte": 6,
                    "current_char": 6,
                    "current_character": 2,
                    "current_data": 8,
                    "current_data_ptr": 4,
                    "current_element": 2,
                    "data_ptr": 1,
                    "source_ptr": 1,
                    "temp_input_data": 1
                },
                "local_1c": {
                    "count": 1,
                    "current_length": 1,
                    "length_counter": 3,
                    "rem_bytes": 1,
                    "remaining_count": 2,
                    "remaining_data_length": 1,
                    "remaining_elements": 1,
                    "remaining_length": 13,
                    "remaining_size": 7,
                    "temp_output_length": 1
                },
                "local_9": {
                    "checksum": 29,
                    "result": 1,
                    "sum_of_chars": 1
                },
                "param_1": {
                    "address": 3,
                    "data_address": 1,
                    "data_index": 2,
                    "data_length": 7,
                    "data_offset": 4,
                    "data_size": 1,
                    "input_length": 4,
                    "input_size": 1,
                    "input_value": 1,
                    "message_length": 1,
                    "size_of_data": 1,
                    "source_address": 3,
                    "start_index": 1,
                    "starting_address": 1
                },
                "param_2": {
                    "data": 14,
                    "data_array": 2,
                    "data_buffer": 6,
                    "destination_address": 1,
                    "input_data": 5,
                    "input_string": 1,
                    "message": 1,
                    "source_data": 1
                },
                "param_3": {
                    "buffer_size": 3,
                    "data_index": 1,
                    "data_length": 10,
                    "data_size": 1,
                    "eeprom_address": 2,
                    "eeprom_count": 1,
                    "eeprom_size": 1,
                    "input_count": 1,
                    "input_size": 1,
                    "length": 4,
                    "num_elements": 1,
                    "output_length": 1,
                    "output_size": 1,
                    "size": 1,
                    "string_length": 1,
                    "total_length": 1
                }
            },
            "called": [
                "FUN_080002f0",
                "FUN_08000340"
            ],
            "calling": [
                "FUN_08004bc0",
                "FUN_08004c2a",
                "FUN_08004bf4"
            ],
            "code": "\nvoid process_and_store_data_08000374(int data_length,char *data,int data_length)\n\n{\n  int remaining_length;\n  char *current_data;\n  int current_address;\n  char checksum;\n  \n  checksum = '\\0';\n  remaining_length = data_length;\n  current_data = data;\n  current_address = data_length;\n  if (DAT_2000046c == 0) {\n    eeprom_init();\n    current_data = data;\n    current_address = data_length;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    checksum = (checksum != '\\0') + *current_data;\n    eeprom_put_char(current_address,*current_data);\n    current_data = current_data + 1;\n    current_address = current_address + 1;\n  }\n  eeprom_put_char(current_address,checksum);\n  return;\n}\n\n",
            "current_name": "process_and_store_data_08000374",
            "entrypoint": "0x08000374",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000374": "process_and_store_data_08000374",
                "local_14": "current_address",
                "local_18": "current_data",
                "local_1c": "remaining_length",
                "local_9": "checksum",
                "param_1": "data_length",
                "param_2": "data",
                "param_3": "data_length"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080003ec": {
            "additional_data": {
                "FUN_080003ec": {
                    "check_eeprom_data": 8,
                    "compare_with_eeprom_string": 1,
                    "validate_checksum": 1,
                    "validate_eeprom_data": 3,
                    "verify_checksum": 1,
                    "verify_data": 5,
                    "verify_eeprom": 1,
                    "verify_eeprom_data": 11
                },
                "cVar1": {
                    "current_char": 10,
                    "current_character": 1
                },
                "eeprom_get_char": {
                    "get_char_from_eeprom": 2,
                    "read_eeprom_byte": 3,
                    "read_eeprom_char": 3
                },
                "eeprom_init": {
                    "initialize_eeprom": 8
                },
                "local_14": {
                    "current_address": 2,
                    "current_buffer": 4,
                    "current_char": 3,
                    "current_character": 1,
                    "current_data": 7,
                    "current_data_ptr": 2,
                    "current_output": 1,
                    "current_pointer": 2,
                    "current_ptr": 6,
                    "output_buffer": 3
                },
                "local_18": {
                    "current_address": 5,
                    "current_index": 26
                },
                "local_1c": {
                    "remaining_length": 31
                },
                "local_9": {
                    "accumulated_value": 2,
                    "calculated_checksum": 2,
                    "char_sum": 4,
                    "checksum": 14,
                    "computed_checksum": 2,
                    "data_sum": 1,
                    "sum": 4,
                    "sum_of_chars": 1,
                    "total_sum": 1
                },
                "param_1": {
                    "buffer": 3,
                    "data": 7,
                    "data_array": 2,
                    "data_buffer": 17,
                    "input_buffer": 1,
                    "output_string": 1
                },
                "param_2": {
                    "start_address": 5,
                    "start_index": 26
                },
                "param_3": {
                    "data_length": 6,
                    "length": 24,
                    "string_length": 1
                },
                "uVar2": {
                    "checksum_from_eeprom": 1,
                    "eeprom_char": 1,
                    "eeprom_checksum": 1,
                    "expected_char": 2,
                    "expected_checksum": 5,
                    "expected_result": 1,
                    "stored_checksum": 1
                }
            },
            "called": [
                "FUN_080002f0",
                "FUN_08000310"
            ],
            "calling": [
                "FUN_08004d7c",
                "FUN_08004d2c",
                "FUN_08004dd2"
            ],
            "code": "\nbool verify_eeprom_data_080003ec(char *data_buffer,int start_index,int length)\n\n{\n  char current_char;\n  uint expected_checksum;\n  int remaining_length;\n  int current_index;\n  char *current_data;\n  byte checksum;\n  \n  checksum = 0;\n  remaining_length = length;\n  current_index = start_index;\n  current_data = data_buffer;\n  if (DAT_2000046c == 0) {\n    initialize_eeprom();\n    current_index = start_index;\n    current_data = data_buffer;\n  }\n  for (; remaining_length != 0; remaining_length = remaining_length + -1) {\n    current_char = read_eeprom_char(current_index);\n    checksum = current_char + (checksum != 0);\n    *current_data = current_char;\n    current_index = current_index + 1;\n    current_data = current_data + 1;\n  }\n  expected_checksum = read_eeprom_char(current_index);\n  return checksum == expected_checksum;\n}\n\n",
            "current_name": "verify_eeprom_data_080003ec",
            "entrypoint": "0x080003ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080003ec": "verify_eeprom_data_080003ec",
                "cVar1": "current_char",
                "eeprom_get_char": "read_eeprom_char",
                "eeprom_init": "initialize_eeprom",
                "local_14": "current_data",
                "local_18": "current_index",
                "local_1c": "remaining_length",
                "local_9": "checksum",
                "param_1": "data_buffer",
                "param_2": "start_index",
                "param_3": "length",
                "uVar2": "expected_checksum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08000478": {
            "additional_data": {
                "FUN_08000478": {
                    "initialize_data": 6,
                    "initialize_parameters": 9,
                    "initialize_params": 9,
                    "initialize_variables": 3,
                    "set_parameters": 3,
                    "set_params": 1
                },
                "param_1": {
                    "data1": 4,
                    "data_parameter1": 1,
                    "first_parameter": 1,
                    "input1": 7,
                    "input_1": 1,
                    "param1": 9,
                    "parameter1": 5,
                    "value1": 1
                },
                "param_2": {
                    "data2": 4,
                    "data_parameter2": 1,
                    "input2": 7,
                    "input_2": 1,
                    "param2": 9,
                    "parameter2": 5,
                    "second_parameter": 1,
                    "value2": 1
                },
                "param_3": {
                    "data3": 4,
                    "data_parameter3": 1,
                    "input3": 7,
                    "input_3": 1,
                    "param3": 9,
                    "parameter3": 5,
                    "third_parameter": 1,
                    "value3": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080005b4",
                "FUN_080004ac"
            ],
            "code": "\nvoid initialize_variables_08000478(undefined param1,undefined param2,undefined param3)\n\n{\n  DAT_20000e89 = param1;\n  DAT_20000e8a = param2;\n  DAT_20000e8b = param3;\n  return;\n}\n\n",
            "current_name": "initialize_variables_08000478",
            "entrypoint": "0x08000478",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08000478": "initialize_variables_08000478",
                "param_1": "param1",
                "param_2": "param2",
                "param_3": "param3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004ac": {
            "additional_data": {
                "DAT_20000e70": {
                    "data_buffer": 4,
                    "game_data": 3,
                    "plane_data": 1
                },
                "DAT_20000e74": {
                    "flag": 7,
                    "is_planes_selected": 1
                },
                "DAT_20000e78": {
                    "base_address": 1,
                    "config_value": 3,
                    "default_plane_data": 1,
                    "original_plane_data": 1,
                    "plane_selection": 1,
                    "settings_data": 1
                },
                "DAT_20000e8c": {
                    "coord_data": 5,
                    "coord_data_pointer": 1,
                    "input_buffer": 1,
                    "input_data": 1
                },
                "DAT_20000e90": {
                    "coordinate_data": 1,
                    "output_buffer": 1,
                    "output_coord_data": 1,
                    "output_data": 2,
                    "read_coord_data": 1,
                    "read_data": 1,
                    "read_data_buffer": 1
                },
                "DAT_20000ecc": {
                    "default_plane_data": 1,
                    "settings_value": 1
                },
                "FUN_08000478": {
                    "read_coordinate_data": 1,
                    "select_plane": 15
                },
                "FUN_080004ac": {
                    "init_and_select_plane": 1,
                    "initialize": 1,
                    "initialize_data": 15,
                    "initialize_function": 1,
                    "initialize_game": 2,
                    "initialize_game_data": 8,
                    "initialize_plane": 1,
                    "initialize_plane_data": 2
                },
                "FUN_08004030": {
                    "display_error_message": 1,
                    "display_message": 7,
                    "output_message": 1,
                    "print_character": 1,
                    "print_message": 2,
                    "process_input": 1,
                    "report_status_message": 2
                },
                "FUN_08004d7c": {
                    "check_byte_validity": 1,
                    "check_condition": 1,
                    "check_conditions": 1,
                    "check_coord_data": 1,
                    "check_data": 2,
                    "check_data_validity": 4,
                    "check_flag": 1,
                    "check_param_validity": 1,
                    "check_parameter_validity": 1,
                    "read_settings": 1,
                    "validate_plane": 1
                },
                "FUN_0800b430": {
                    "load_settings": 2,
                    "process_data": 3,
                    "process_settings_data": 1,
                    "read_settings": 1,
                    "report_status_message": 1,
                    "settings_read_coord_data": 1,
                    "unknown_function": 1,
                    "update_settings": 3,
                    "write_data": 1,
                    "write_data_to_memory": 1
                },
                "iVar1": {
                    "coord_data_result": 1,
                    "error_code": 3,
                    "read_result": 1,
                    "result": 8,
                    "status": 1
                },
                "memset": {
                    "clear_data": 1,
                    "clear_memory": 3
                },
                "param_1": {
                    "byte_value": 1,
                    "param1": 1,
                    "unknown_parameter1": 1
                },
                "param_2": {
                    "argument": 1,
                    "param2": 1,
                    "unknown_parameter2": 1
                },
                "param_3": {
                    "param3": 1,
                    "unknown_parameter3": 1,
                    "value": 1
                },
                "report_status_message": {
                    "display_message": 1,
                    "display_status_message": 11,
                    "report_error_message": 1,
                    "report_status_message": 1
                },
                "select_plane": {
                    "choose_plane": 2,
                    "configure_plane": 1,
                    "select_plane": 2,
                    "set_plane": 5
                },
                "settings_read_coord_data": {
                    "read_coord_data": 1,
                    "read_coord_data_settings": 2,
                    "read_coordinate_data": 7,
                    "read_coordinates": 2,
                    "read_coordinates_data": 1,
                    "read_settings_coord_data": 1
                }
            },
            "called": [
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_08004030",
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_game_data_080004ac(void)\n\n{\n  int result;\n  \n  clear_memory(&DAT_20000e70,0,0x38);\n  DAT_20000e78 = DAT_20000ecc;\n  set_plane(0,1,2);\n  DAT_20000e74 = 1;\n  result = read_coordinate_data(DAT_20000e8c,&DAT_20000e90);\n  if (result == 0) {\n    display_status_message(10);\n  }\n  return;\n}\n\n",
            "current_name": "initialize_game_data_080004ac",
            "entrypoint": "0x080004ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004ac": "initialize_game_data_080004ac",
                "iVar1": "result",
                "memset": "clear_memory",
                "report_status_message": "display_status_message",
                "select_plane": "set_plane",
                "settings_read_coord_data": "read_coordinate_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080004fc": {
            "additional_data": {
                "DAT_20000e7c": {
                    "divided_value1": 1,
                    "division_result_1": 1,
                    "result1": 11,
                    "result_1": 1,
                    "result_float1": 1
                },
                "DAT_20000e80": {
                    "divided_value2": 1,
                    "division_result_2": 1,
                    "result2": 11,
                    "result_2": 1,
                    "result_float2": 1
                },
                "DAT_20000e84": {
                    "divided_value3": 1,
                    "division_result_3": 1,
                    "result3": 11,
                    "result_3": 1,
                    "result_float3": 1
                },
                "DAT_20000ebc": {
                    "divider1": 1,
                    "division_divisor_1": 1,
                    "divisor1": 12,
                    "divisor_1": 1
                },
                "DAT_20000ec0": {
                    "divider2": 1,
                    "division_divisor_2": 1,
                    "divisor2": 12,
                    "divisor_2": 1
                },
                "DAT_20000ec4": {
                    "divider3": 1,
                    "division_divisor_3": 1,
                    "divisor3": 12,
                    "divisor_3": 1
                },
                "FUN_080004fc": {
                    "calculate_division": 4,
                    "calculate_division_results": 1,
                    "calculate_divisions": 3,
                    "calculate_float_division": 1,
                    "calculate_float_divisions": 5,
                    "calculate_float_ratios": 1,
                    "calculate_params": 1,
                    "convert_and_divide": 1,
                    "convert_ints_to_floats_and_divide": 1,
                    "divide_and_store_floats": 1,
                    "divide_floats": 1,
                    "divide_parameters": 5,
                    "divide_params": 5,
                    "divided_values": 1
                },
                "FUN_08008e44": {
                    "apply_function": 1,
                    "calculate_integer1": 1,
                    "reverse_bits": 1
                },
                "FUN_08009054": {
                    "apply_function": 1,
                    "calculate_integer2": 1,
                    "complex_logic": 1
                },
                "__aeabi_fdiv": {
                    "divide_floats": 1,
                    "perform_division": 1
                },
                "__floatsisf": {
                    "convert_int_to_float": 1,
                    "convert_to_float": 9,
                    "convert_to_int": 3,
                    "int_to_float_conversion": 1
                },
                "param_1": {
                    "dividend1": 2,
                    "first_param": 1,
                    "input1": 7,
                    "input_value1": 2,
                    "int_value1": 2,
                    "integer_param_1": 1,
                    "integer_value1": 2,
                    "num1": 2,
                    "value1": 9,
                    "value_1": 3
                },
                "param_2": {
                    "dividend2": 2,
                    "input2": 7,
                    "input_value2": 2,
                    "int_value2": 2,
                    "integer_param_2": 1,
                    "integer_value2": 2,
                    "num2": 2,
                    "second_param": 1,
                    "value2": 9,
                    "value_2": 3
                },
                "param_3": {
                    "dividend3": 2,
                    "input3": 7,
                    "input_value3": 2,
                    "int_value3": 2,
                    "integer_param_3": 1,
                    "integer_value3": 2,
                    "num3": 2,
                    "third_param": 1,
                    "value3": 9,
                    "value_3": 3
                },
                "param_4": {
                    "input4": 1
                },
                "uVar1": {
                    "converted_float": 1,
                    "converted_float_value": 1,
                    "converted_input": 2,
                    "converted_value": 6,
                    "float1": 1,
                    "float_num": 1,
                    "float_value": 7,
                    "temp_result": 1
                }
            },
            "called": [
                "FUN_08008e44",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid calculate_float_divisions_080004fc(undefined4 value1,undefined4 value2,undefined4 value3)\n\n{\n  undefined4 float_value;\n  \n  float_value = convert_to_float(value1);\n  DAT_20000e7c = divide_floats(float_value,DAT_20000ebc);\n  float_value = convert_to_float(value2);\n  DAT_20000e80 = divide_floats(float_value,DAT_20000ec0);\n  float_value = convert_to_float(value3);\n  DAT_20000e84 = divide_floats(float_value,DAT_20000ec4);\n  return;\n}\n\n",
            "current_name": "calculate_float_divisions_080004fc",
            "entrypoint": "0x080004fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080004fc": "calculate_float_divisions_080004fc",
                "__aeabi_fdiv": "divide_floats",
                "__floatsisf": "convert_to_float",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "uVar1": "float_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800056c": {
            "additional_data": {
                "DAT_20000e73": {
                    "flag": 2,
                    "is_conversion_enabled": 1,
                    "is_conversion_needed": 2
                },
                "FUN_0800056c": {
                    "calculate": 1,
                    "calculate_new_value": 1,
                    "calculate_result": 1,
                    "convert_and_scale": 1,
                    "convert_and_truncate": 2,
                    "convert_decimal_to_float": 1,
                    "convert_double_to_float": 1,
                    "convert_float_to_fixed_point": 1,
                    "convert_float_to_int": 3,
                    "convert_float_to_integer": 1,
                    "convert_float_to_truncated_int": 1,
                    "convert_numeric_value": 1,
                    "convert_to_angle": 1,
                    "convert_to_float": 12,
                    "multiply_and_truncate": 1,
                    "perform_calculation": 1,
                    "process_input": 1
                },
                "FUN_08008590": {
                    "calculate_first_value": 1,
                    "calculate_fixed_point_multiplication": 1,
                    "calculate_product": 2,
                    "calculate_unsigned_long_long": 1,
                    "multiply_by_constant": 1,
                    "multiply_float": 1,
                    "multiply_floating_point": 1,
                    "multiply_ints": 1,
                    "multiply_u_int": 1,
                    "multiply_unsigned": 1
                },
                "FUN_08008640": {
                    "calculate_third_value": 1,
                    "convert_double_to_float": 1,
                    "convert_float_to_unsigned_long_long": 1,
                    "convert_to_double": 2,
                    "convert_to_int": 1,
                    "multiply_float": 1,
                    "truncate_and_convert": 2,
                    "truncate_fixed_point_to_float": 1,
                    "truncate_float": 1
                },
                "FUN_08008c30": {
                    "add_ints": 1,
                    "calculate_fixed_point_division": 1,
                    "calculate_second_value": 1,
                    "integer_multiply": 1,
                    "multiply_two_u_int": 1,
                    "multiply_unsigned": 2,
                    "multiply_values": 1,
                    "trunc_to_uint": 1,
                    "truncate_float": 1,
                    "truncate_float_to_int": 1
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 1,
                    "convert_to_double": 3,
                    "float_to_double": 1
                },
                "__muldf3": {
                    "multiply_double": 5
                },
                "__truncdfsf2": {
                    "convert_double_to_int": 1,
                    "truncate_double": 1,
                    "truncate_to_float": 3
                },
                "param_1": {
                    "angle": 1,
                    "first_param": 1,
                    "floating_point_number": 1,
                    "high_bits": 1,
                    "input": 8,
                    "input_float": 6,
                    "input_value": 9,
                    "original_value": 1,
                    "param1": 2,
                    "value": 1
                },
                "param_2": {
                    "fixed_point_number1": 1,
                    "int_param1": 1,
                    "low_bits": 1,
                    "num2": 1,
                    "param1": 1,
                    "param2": 4,
                    "second_param": 1,
                    "value1": 1
                },
                "param_3": {
                    "constant4": 1,
                    "fixed_point_number2": 1,
                    "int_param2": 1,
                    "param2": 1,
                    "param3": 4,
                    "third_param": 1,
                    "value2": 2
                },
                "param_4": {
                    "constant": 1,
                    "constant5": 1,
                    "fourth_param": 1,
                    "int_param3": 1,
                    "param3": 1,
                    "param4": 4,
                    "value3": 2
                },
                "uVar1": {
                    "angle_in_double": 1,
                    "converted_double": 6,
                    "converted_number": 1,
                    "converted_value": 9,
                    "double_value": 10,
                    "float_value": 4
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 convert_float_to_truncated_int_0800056c(undefined4 input_value)\n\n{\n  undefined8 double_value;\n  \n  if (DAT_20000e73 != '\\0') {\n    double_value = convert_to_double(input_value);\n    double_value = multiply_double((int)double_value,(int)((ulonglong)double_value >> 0x20),0x66666666,0x40396666);\n    input_value = truncate_to_float((int)double_value,(int)((ulonglong)double_value >> 0x20));\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_float_to_truncated_int_0800056c",
            "entrypoint": "0x0800056c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800056c": "convert_float_to_truncated_int_0800056c",
                "__aeabi_f2d": "convert_to_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "truncate_to_float",
                "param_1": "input_value",
                "uVar1": "double_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080005b4": {
            "additional_data": {
                "FUN_080005b4": {
                    "parse_function": 2,
                    "process_code": 2,
                    "process_command": 1,
                    "process_commands": 1,
                    "process_function": 2,
                    "process_input": 2,
                    "process_instructions": 2,
                    "process_statement": 1
                },
                "auStack_70": {
                    "array1": 1,
                    "array2": 8,
                    "array_2": 1,
                    "array_variables_1": 1,
                    "conversion_array": 1,
                    "coord_data_array": 1,
                    "local_array": 1,
                    "local_array2": 3,
                    "second_array_var": 1,
                    "stack_array_1": 1,
                    "stack_vars": 1,
                    "temp_array": 1,
                    "temp_array2": 3,
                    "temp_array_2": 1,
                    "temp_data_array": 1,
                    "temporary_arr": 1,
                    "values": 1
                },
                "cVar3": {
                    "code": 1,
                    "error": 2,
                    "error_code": 3,
                    "flag": 2,
                    "output": 1,
                    "response": 1,
                    "result": 10,
                    "result_variable": 1,
                    "return_val": 1,
                    "return_value": 5,
                    "status": 3
                },
                "iVar1": {
                    "index": 3,
                    "iteration_count": 1,
                    "iteration_counter": 1,
                    "iterator": 3,
                    "loop_iteration": 1,
                    "result": 15,
                    "return_value": 3,
                    "temp_value": 1,
                    "temp_variable": 1,
                    "temp_variable_1": 1
                },
                "local_24": {
                    "flag19": 1,
                    "int_value": 1,
                    "local_var16": 1,
                    "local_var24": 1,
                    "local_var26": 2,
                    "local_variable_23": 1,
                    "local_variables_23": 1,
                    "local_variables_27": 1,
                    "temp32": 2,
                    "temp_value3": 1,
                    "temp_value33": 1,
                    "temp_var21": 1,
                    "temp_var26": 1,
                    "temp_var32": 1,
                    "temp_var_14": 1,
                    "temp_var_32": 1,
                    "temp_variable26": 1,
                    "temp_variable27": 1,
                    "temp_variable9": 1,
                    "temporary_variable_20": 1,
                    "uint_value3": 1,
                    "uint_var3": 1,
                    "var12": 1,
                    "var13": 1,
                    "var14": 1,
                    "var24": 1,
                    "var26": 2,
                    "variable_24": 1
                },
                "local_26": {
                    "bit_flag": 1,
                    "flag18": 1,
                    "flag9": 1,
                    "flag_bits": 1,
                    "local_var15": 1,
                    "local_var23": 1,
                    "local_var25": 2,
                    "local_variable_22": 1,
                    "local_variables_22": 1,
                    "local_variables_26": 1,
                    "planes": 1,
                    "temp31": 2,
                    "temp_short_1": 1,
                    "temp_value32": 1,
                    "temp_var20": 1,
                    "temp_var25": 1,
                    "temp_var31": 1,
                    "temp_var_31": 1,
                    "temp_variable25": 1,
                    "temp_variable26": 1,
                    "ushort_var1": 1,
                    "ushort_variable_1": 1,
                    "var11": 1,
                    "var12": 1,
                    "var13": 1,
                    "var23": 1,
                    "var25": 2,
                    "variable_23": 1
                },
                "local_27": {
                    "axis_mask": 1,
                    "bit_flag2": 1,
                    "byte10": 1,
                    "byte12": 1,
                    "byte_var8": 1,
                    "coordinate_flags": 1,
                    "flag17": 1,
                    "flag4": 1,
                    "flag6": 1,
                    "flag8": 1,
                    "local_var14": 1,
                    "local_var22": 1,
                    "local_var24": 2,
                    "local_variable_21": 1,
                    "local_variables_21": 1,
                    "local_variables_25": 1,
                    "temp30": 2,
                    "temp_byte_6": 1,
                    "temp_value31": 1,
                    "temp_var24": 1,
                    "temp_var30": 1,
                    "temp_var_30": 1,
                    "temp_variable24": 1,
                    "temp_variable25": 1,
                    "temporary_variable_15": 1,
                    "var22": 1,
                    "var24": 2,
                    "variable_22": 1
                },
                "local_2c": {
                    "conversion_value": 1,
                    "coordinated_data5": 1,
                    "distance_flag": 1,
                    "dwell_time": 1,
                    "flag16": 1,
                    "local_var21": 1,
                    "local_var23": 2,
                    "local_variable_20": 1,
                    "local_variables_20": 1,
                    "local_variables_24": 1,
                    "temp29": 2,
                    "temp_value30": 1,
                    "temp_var19": 1,
                    "temp_var23": 1,
                    "temp_var29": 1,
                    "temp_var_13": 1,
                    "temp_var_29": 1,
                    "temp_variable23": 1,
                    "temporary_variable_19": 1,
                    "var10": 1,
                    "var11": 1,
                    "var12": 1,
                    "var21": 1,
                    "var23": 2,
                    "var7": 1,
                    "variable_21": 1
                },
                "local_2d": {
                    "byte11": 1,
                    "byte_variable_6": 1,
                    "char_var3": 1,
                    "flag15": 1,
                    "flag7": 1,
                    "is_spindle_on": 1,
                    "local_var20": 1,
                    "local_var22": 2,
                    "local_variable_19": 1,
                    "local_variables_19": 1,
                    "local_variables_23": 1,
                    "movement_flag": 1,
                    "temp28": 2,
                    "temp_char_3": 1,
                    "temp_value29": 1,
                    "temp_var18": 1,
                    "temp_var22": 1,
                    "temp_var28": 1,
                    "temp_var_28": 1,
                    "temp_variable22": 1,
                    "var10": 1,
                    "var11": 1,
                    "var20": 1,
                    "var22": 2,
                    "variable_1": 1,
                    "variable_20": 1
                },
                "local_2e": {
                    "byte10": 1,
                    "byte_variable_5": 1,
                    "char_var2": 1,
                    "flag14": 1,
                    "flag6": 1,
                    "local_var19": 1,
                    "local_var21": 2,
                    "local_variable_18": 1,
                    "local_variables_18": 1,
                    "local_variables_22": 1,
                    "operation": 1,
                    "plane_flag": 1,
                    "temp27": 2,
                    "temp_char_2": 1,
                    "temp_value28": 1,
                    "temp_var17": 1,
                    "temp_var21": 1,
                    "temp_var27": 1,
                    "temp_var_27": 1,
                    "temp_variable21": 1,
                    "var10": 1,
                    "var19": 1,
                    "var21": 2,
                    "var9": 1,
                    "variable_19": 1,
                    "variable_2": 1
                },
                "local_2f": {
                    "action_flag": 1,
                    "byte9": 1,
                    "command_type": 1,
                    "flag13": 1,
                    "flag5": 2,
                    "local_var18": 1,
                    "local_var20": 2,
                    "local_variable_17": 1,
                    "local_variables_17": 1,
                    "local_variables_21": 1,
                    "sbyte_value": 1,
                    "sbyte_var1": 1,
                    "temp26": 2,
                    "temp_byte_5": 1,
                    "temp_value27": 1,
                    "temp_var16": 1,
                    "temp_var20": 1,
                    "temp_var26": 1,
                    "temp_var_26": 1,
                    "temp_variable20": 1,
                    "temporary_variable_18": 1,
                    "var18": 1,
                    "var20": 2,
                    "var9": 1,
                    "variable_18": 1
                },
                "local_34": {
                    "feed_rate": 2,
                    "flag12": 1,
                    "float_value2": 1,
                    "local_var13": 1,
                    "local_var17": 1,
                    "local_var19": 2,
                    "local_variable_16": 1,
                    "local_variables_16": 1,
                    "local_variables_20": 1,
                    "temp25": 2,
                    "temp_value26": 1,
                    "temp_var15": 1,
                    "temp_var19": 1,
                    "temp_var25": 1,
                    "temp_var_12": 1,
                    "temp_var_25": 1,
                    "temp_variable19": 1,
                    "temp_variable24": 1,
                    "temp_variable8": 1,
                    "temporary_variable_17": 1,
                    "var17": 1,
                    "var19": 2,
                    "var6": 1,
                    "var8": 2,
                    "var9": 1,
                    "variable_17": 1
                },
                "local_38": {
                    "coordinated_data4": 1,
                    "distance": 2,
                    "flag11": 1,
                    "local_var12": 1,
                    "local_var16": 1,
                    "local_var18": 2,
                    "local_variable_15": 1,
                    "local_variables_15": 1,
                    "local_variables_19": 1,
                    "radius": 1,
                    "temp24": 2,
                    "temp_value25": 1,
                    "temp_var18": 1,
                    "temp_var24": 1,
                    "temp_var_11": 1,
                    "temp_var_24": 1,
                    "temp_variable18": 1,
                    "temp_variable23": 1,
                    "temporary_variable_16": 1,
                    "uint_value2": 1,
                    "uint_var2": 1,
                    "var16": 1,
                    "var18": 2,
                    "var7": 2,
                    "var8": 1,
                    "variable_16": 1
                },
                "local_39": {
                    "axis": 1,
                    "byte8": 1,
                    "byte9": 1,
                    "byte_variable_4": 1,
                    "char_value": 1,
                    "char_var1": 1,
                    "coord_index": 1,
                    "flag10": 1,
                    "flag3": 1,
                    "flag4": 1,
                    "local_var11": 1,
                    "local_var15": 1,
                    "local_var17": 2,
                    "local_variable_14": 1,
                    "local_variables_14": 1,
                    "local_variables_18": 1,
                    "plane_num": 1,
                    "temp23": 2,
                    "temp_char_1": 1,
                    "temp_value24": 1,
                    "temp_var17": 1,
                    "temp_var23": 1,
                    "temp_var_23": 1,
                    "temp_variable17": 1,
                    "temp_variable22": 1,
                    "var15": 1,
                    "var17": 2,
                    "variable_15": 1
                },
                "local_3a": {
                    "byte7": 1,
                    "byte8": 1,
                    "byte_value5": 1,
                    "byte_var7": 1,
                    "byte_variable_3": 1,
                    "coordinate_flag4": 1,
                    "flag4": 1,
                    "flag9": 1,
                    "local_var14": 1,
                    "local_var16": 2,
                    "local_variable_13": 1,
                    "local_variables_17": 1,
                    "temp22": 2,
                    "temp_byte_4": 1,
                    "temp_value23": 1,
                    "temp_var13": 1,
                    "temp_var14": 1,
                    "temp_var16": 1,
                    "temp_var22": 1,
                    "temp_var_22": 1,
                    "temp_variable16": 1,
                    "temp_variable21": 1,
                    "var14": 1,
                    "var16": 2,
                    "var6": 1,
                    "variable_14": 1
                },
                "local_3b": {
                    "byte6": 1,
                    "byte7": 1,
                    "byte_value4": 1,
                    "byte_var6": 1,
                    "byte_variable_2": 1,
                    "coordinate_flag3": 1,
                    "flag3": 1,
                    "flag8": 1,
                    "local_var13": 1,
                    "local_var15": 2,
                    "local_variable_12": 1,
                    "local_variables_16": 1,
                    "temp21": 2,
                    "temp_byte_3": 1,
                    "temp_value22": 1,
                    "temp_var12": 1,
                    "temp_var13": 1,
                    "temp_var15": 1,
                    "temp_var21": 1,
                    "temp_var_21": 1,
                    "temp_variable15": 1,
                    "temp_variable20": 1,
                    "var13": 1,
                    "var15": 2,
                    "var5": 1,
                    "variable_13": 1
                },
                "local_3c": {
                    "byte5": 1,
                    "byte6": 1,
                    "byte_value3": 1,
                    "byte_var5": 1,
                    "coordinate_flag2": 1,
                    "flag2": 1,
                    "flag7": 1,
                    "local_var12": 1,
                    "local_var14": 2,
                    "local_variable_11": 1,
                    "local_variables_15": 1,
                    "temp20": 2,
                    "temp_byte_2": 1,
                    "temp_value21": 1,
                    "temp_var11": 1,
                    "temp_var12": 1,
                    "temp_var14": 1,
                    "temp_var20": 1,
                    "temp_var_20": 1,
                    "temp_variable14": 1,
                    "temp_variable19": 1,
                    "var12": 1,
                    "var14": 2,
                    "var4": 1,
                    "variable_12": 1
                },
                "local_3d": {
                    "byte4": 1,
                    "byte5": 1,
                    "byte_value2": 1,
                    "byte_var4": 1,
                    "coordinate_flag1": 1,
                    "flag1": 1,
                    "flag6": 1,
                    "local_var11": 1,
                    "local_var13": 2,
                    "local_variable_10": 1,
                    "local_variables_14": 1,
                    "temp19": 2,
                    "temp_byte_1": 1,
                    "temp_value20": 1,
                    "temp_var10": 1,
                    "temp_var11": 1,
                    "temp_var13": 1,
                    "temp_var19": 1,
                    "temp_var_19": 1,
                    "temp_variable13": 1,
                    "temp_variable18": 1,
                    "var11": 1,
                    "var13": 2,
                    "var3": 1,
                    "variable_11": 1
                },
                "local_44": {
                    "dist_sq": 1,
                    "flag5": 1,
                    "local_var10": 2,
                    "local_var12": 2,
                    "local_variable_9": 1,
                    "local_variables_13": 2,
                    "result_variable1": 1,
                    "temp18": 2,
                    "temp_value19": 1,
                    "temp_var10": 1,
                    "temp_var12": 1,
                    "temp_var18": 1,
                    "temp_var9": 1,
                    "temp_var_10": 1,
                    "temp_var_18": 1,
                    "temp_variable12": 1,
                    "temp_variable17": 1,
                    "temporary_variable_14": 1,
                    "uint_value": 1,
                    "uint_var1": 1,
                    "var12": 2,
                    "var2": 1,
                    "var6": 1,
                    "var7": 1,
                    "var8": 1,
                    "variable_10": 1
                },
                "local_45": {
                    "arc_variable2": 1,
                    "bool1": 1,
                    "byte3": 1,
                    "byte_var3": 1,
                    "flag2": 2,
                    "flag3": 2,
                    "flag4": 1,
                    "is_plane_selected": 1,
                    "is_relative": 1,
                    "local_var11": 2,
                    "local_var9": 2,
                    "local_variable_8": 1,
                    "local_variables_12": 2,
                    "temp17": 2,
                    "temp_bool_2": 1,
                    "temp_value18": 1,
                    "temp_var11": 1,
                    "temp_var17": 1,
                    "temp_var_17": 1,
                    "temp_variable11": 1,
                    "temporary_variable_13": 1,
                    "var11": 2,
                    "variable_9": 1
                },
                "local_49": {
                    "var10": 1
                },
                "local_4a": {
                    "var9": 1
                },
                "local_4c": {
                    "arc_variable1": 1,
                    "byte4": 1,
                    "distance": 1,
                    "flag3": 1,
                    "local_var10": 2,
                    "local_var8": 2,
                    "local_variable_7": 1,
                    "local_variables_11": 2,
                    "param_d": 1,
                    "temp16": 2,
                    "temp_value17": 1,
                    "temp_var10": 1,
                    "temp_var16": 1,
                    "temp_var8": 1,
                    "temp_var_16": 1,
                    "temp_var_9": 1,
                    "temp_variable10": 1,
                    "temp_variable16": 1,
                    "temporary_variable_12": 1,
                    "var1": 1,
                    "var10": 2,
                    "var5": 1,
                    "var6": 1,
                    "var7": 1,
                    "variable_8": 1
                },
                "local_4d": {
                    "flag5": 1
                },
                "local_4e": {
                    "flag4": 1
                },
                "local_4f": {
                    "flag3": 1
                },
                "local_50": {
                    "byte3": 1,
                    "flag2": 2,
                    "local_var7": 2,
                    "local_var9": 2,
                    "local_variable_6": 1,
                    "local_variables_10": 2,
                    "param_a": 1,
                    "second_flag": 1,
                    "temp15": 2,
                    "temp_value16": 1,
                    "temp_var15": 1,
                    "temp_var7": 1,
                    "temp_var9": 1,
                    "temp_var_15": 1,
                    "temp_var_8": 1,
                    "temp_variable15": 1,
                    "temp_variable7": 1,
                    "temp_variable9": 1,
                    "temporary_variable_11": 1,
                    "var4": 1,
                    "var5": 1,
                    "var6": 1,
                    "var9": 2,
                    "variable_7": 1
                },
                "local_51": {
                    "byte2": 2,
                    "byte_var2": 1,
                    "first_flag": 1,
                    "flag": 1,
                    "flag1": 4,
                    "flag2": 1,
                    "flag_variable": 1,
                    "initialize_zero_variable": 1,
                    "is_negative": 1,
                    "local_var6": 2,
                    "local_var8": 2,
                    "local_variables_9": 2,
                    "temp14": 2,
                    "temp_bool_1": 1,
                    "temp_value15": 1,
                    "temp_var14": 1,
                    "temp_var8": 1,
                    "temp_var_14": 1,
                    "temp_variable8": 1,
                    "var8": 2,
                    "variable_6": 1
                },
                "local_52": {
                    "byte1": 2,
                    "byte_value": 3,
                    "byte_var1": 1,
                    "byte_variable_1": 1,
                    "command_code": 1,
                    "command_type": 1,
                    "current_byte": 1,
                    "current_char": 1,
                    "instruction": 1,
                    "instruction_code": 1,
                    "local_var5": 2,
                    "local_var7": 2,
                    "local_variable_5": 1,
                    "local_variables_8": 2,
                    "temp13": 2,
                    "temp_value14": 1,
                    "temp_var13": 1,
                    "temp_var7": 1,
                    "temp_var_13": 1,
                    "temp_variable14": 1,
                    "temp_variable7": 1,
                    "var7": 2,
                    "variable_5": 1
                },
                "local_58": {
                    "angle": 1,
                    "current_value": 1,
                    "float_value": 2,
                    "local_var4": 2,
                    "local_var6": 2,
                    "local_variable_4": 1,
                    "local_variables_7": 2,
                    "temp12": 2,
                    "temp_float1": 1,
                    "temp_value13": 1,
                    "temp_var": 1,
                    "temp_var12": 1,
                    "temp_var6": 1,
                    "temp_var9": 2,
                    "temp_var_12": 1,
                    "temp_var_7": 1,
                    "temp_variable13": 1,
                    "temp_variable6": 1,
                    "temporary_variable_10": 1,
                    "value": 1,
                    "value1": 1,
                    "var4": 1,
                    "var6": 2,
                    "variable_4": 1
                },
                "local_7c": {
                    "coordinated_data3": 1,
                    "local_var3": 4,
                    "local_variable_3": 1,
                    "local_variables_4": 2,
                    "param_4": 1,
                    "param_c": 1,
                    "param_d": 1,
                    "temp9": 2,
                    "temp_value10": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var9": 1,
                    "temp_var_9": 1,
                    "temp_variable10": 1,
                    "temp_variable3": 1,
                    "temporary_variable_9": 1,
                    "third_parameter": 1,
                    "value3": 1,
                    "var3": 6,
                    "variable_3": 1
                },
                "local_80": {
                    "coordinated_data2": 1,
                    "local_var2": 4,
                    "local_variable_2": 1,
                    "local_variables_3": 2,
                    "param_3": 1,
                    "param_b": 1,
                    "param_c": 1,
                    "second_parameter": 1,
                    "temp8": 2,
                    "temp_value9": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var8": 1,
                    "temp_var_8": 1,
                    "temp_variable2": 1,
                    "temp_variable9": 1,
                    "temporary_variable_8": 1,
                    "value2": 1,
                    "var2": 6,
                    "variable_2": 1
                },
                "local_84": {
                    "coordinated_data1": 1,
                    "first_parameter": 1,
                    "local_var1": 4,
                    "local_variable_1": 1,
                    "local_variables_2": 2,
                    "param_2": 1,
                    "param_a": 1,
                    "param_b": 1,
                    "temp7": 2,
                    "temp_value8": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var7": 1,
                    "temp_var_7": 1,
                    "temp_variable1": 1,
                    "temp_variable8": 1,
                    "temporary_variable_7": 1,
                    "value1": 1,
                    "var1": 6,
                    "variable_1": 1
                },
                "local_94": {
                    "array1": 8,
                    "array_1": 1,
                    "array_var": 1,
                    "buffer1": 1,
                    "coord_data": 2,
                    "coord_data_array": 1,
                    "coordinate_data": 1,
                    "coordinates": 1,
                    "instruction_data": 1,
                    "local_array1": 3,
                    "local_array_1": 1,
                    "local_variables_1": 2,
                    "temp_array1": 3,
                    "temp_array_1": 1,
                    "temporary_array_1": 1,
                    "variables_arr": 1
                },
                "param_1": {
                    "arg1": 1,
                    "command": 2,
                    "data": 1,
                    "input": 5,
                    "input_data": 1,
                    "input_param": 8,
                    "input_parameter": 4,
                    "input_value": 2,
                    "instruction_data": 1,
                    "instruction_ptr": 1,
                    "param": 3,
                    "parameter": 1
                },
                "uStack_74": {
                    "local_var5": 2,
                    "local_variables_6": 2,
                    "param_6": 1,
                    "param_e": 1,
                    "stack_var2": 3,
                    "stack_variable_2": 2,
                    "temp11": 2,
                    "temp8": 1,
                    "temp_stack_var2": 1,
                    "temp_value12": 1,
                    "temp_var11": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "temp_var_11": 1,
                    "temp_variable12": 1,
                    "temp_variable5": 1,
                    "value5": 1,
                    "var5": 4
                },
                "uStack_78": {
                    "local_var4": 2,
                    "local_variables_5": 2,
                    "param_5": 1,
                    "param_d": 1,
                    "stack_var1": 3,
                    "stack_variable_1": 2,
                    "temp10": 2,
                    "temp7": 1,
                    "temp_stack_var1": 1,
                    "temp_value11": 1,
                    "temp_var10": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var7": 1,
                    "temp_var_10": 1,
                    "temp_variable11": 1,
                    "temp_variable4": 1,
                    "value4": 1,
                    "var4": 4
                },
                "uVar2": {
                    "conversion_result": 1,
                    "converted_value": 1,
                    "result": 1,
                    "temp": 2,
                    "temp1": 4,
                    "temp_value2": 1,
                    "temp_var": 5,
                    "temp_var1": 6,
                    "temp_var2": 1,
                    "temp_var_1": 2,
                    "temp_variable1": 1,
                    "temp_variable2": 1,
                    "temp_variable_1": 2,
                    "temp_variable_2": 1,
                    "temporary_variable_1": 1
                },
                "uVar4": {
                    "temp": 1,
                    "temp1": 2,
                    "temp2": 4,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "temp_var2": 10,
                    "temp_var4": 1,
                    "temp_var_2": 3,
                    "temp_variable2": 1,
                    "temp_variable3": 1,
                    "temp_variable_2": 2,
                    "temp_variable_3": 1,
                    "temporary_variable_2": 1
                },
                "uVar5": {
                    "conversion_factor": 1,
                    "temp2": 3,
                    "temp3": 4,
                    "temp_value2": 1,
                    "temp_value4": 1,
                    "temp_var3": 10,
                    "temp_var5": 1,
                    "temp_var_3": 3,
                    "temp_variable3": 1,
                    "temp_variable4": 1,
                    "temp_variable_3": 2,
                    "temp_variable_4": 1,
                    "temporary_variable_3": 1
                },
                "uVar6": {
                    "temp3": 3,
                    "temp4": 4,
                    "temp_value3": 1,
                    "temp_value5": 1,
                    "temp_var4": 10,
                    "temp_var6": 1,
                    "temp_var_4": 3,
                    "temp_variable4": 1,
                    "temp_variable5": 1,
                    "temp_variable_4": 2,
                    "temp_variable_5": 1,
                    "temporary_variable_4": 1,
                    "truncated_value": 1
                },
                "uVar7": {
                    "temp4": 3,
                    "temp5": 4,
                    "temp_value": 1,
                    "temp_value4": 1,
                    "temp_value6": 1,
                    "temp_var5": 10,
                    "temp_var7": 1,
                    "temp_var_5": 3,
                    "temp_variable5": 1,
                    "temp_variable6": 1,
                    "temp_variable_5": 2,
                    "temp_variable_6": 1,
                    "temporary_variable_5": 1
                },
                "uVar8": {
                    "temp5": 3,
                    "temp6": 4,
                    "temp_value2": 1,
                    "temp_value5": 1,
                    "temp_value7": 1,
                    "temp_var6": 10,
                    "temp_var8": 1,
                    "temp_var_6": 3,
                    "temp_variable6": 1,
                    "temp_variable7": 1,
                    "temp_variable_6": 2,
                    "temp_variable_7": 1,
                    "temporary_variable_6": 1
                }
            },
            "called": [
                "FUN_08001e98",
                "FUN_08001f00",
                "FUN_08008cd8",
                "FUN_08008ba0",
                "FUN_08008cdc",
                "FUN_0800184c",
                "FUN_08008bf0",
                "FUN_08009228",
                "FUN_08008894",
                "FUN_0800b430",
                "FUN_080098d0",
                "FUN_08009798",
                "FUN_08008eec",
                "FUN_0800923c",
                "FUN_08002408",
                "FUN_08002fd4",
                "FUN_08008590",
                "FUN_08000478",
                "FUN_08004d7c",
                "FUN_080025e8",
                "FUN_0800525c",
                "FUN_0800056c",
                "FUN_0800981c",
                "FUN_08008c30",
                "FUN_08000220",
                "FUN_08004bf4",
                "FUN_08009214"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "code": "\nchar process_command_080005b4(undefined4 input_param)\n\n{\n  int result;\n  undefined4 temp_var1;\n  char result;\n  uint temp_var2;\n  undefined4 temp_var3;\n  undefined8 temp_var4;\n  undefined8 temp_var5;\n  undefined8 temp_var6;\n  undefined4 array1 [4];\n  undefined4 var1;\n  undefined4 var2;\n  undefined4 var3;\n  undefined4 var4;\n  undefined4 var5;\n  undefined4 array2 [6];\n  undefined4 local_var4;\n  byte byte_value;\n  undefined flag1;\n  undefined4 temp15;\n  undefined4 local_variables_11;\n  undefined local_var11;\n  uint local_variables_13;\n  byte local_var13;\n  byte local_var14;\n  byte local_var15;\n  byte temp22;\n  char var17;\n  uint var7;\n  undefined4 local_var19;\n  sbyte local_var20;\n  char temp27;\n  char local_var22;\n  undefined4 temp29;\n  byte temp30;\n  ushort var25;\n  uint local_var26;\n  \n  if (DAT_20000ea9 == '\\x06') {\n    result = '\\f';\n  }\n  else {\n    flag1 = 0;\n    var25 = 0;\n    temp30 = 0;\n    temp29 = 0xbf800000;\n    local_var22 = '\\0';\n    temp27 = '\\0';\n    memset(array2 + 3,0,0xc);\n    memset(array2,0,0xc);\n    DAT_20000e70 = '\\0';\n    local_var20 = 0;\n    while (result = next_statement(&byte_value,array2 + 6,input_param,&flag1), result != 0) {\n      temp_var4 = __aeabi_f2d(local_var4);\n      temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      local_var26 = __aeabi_d2iz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n      if (byte_value == 0x47) {\n        switch(local_var26) {\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 0x50:\n          local_var20 = 2;\n          break;\n        case 4:\n        case 10:\n        case 0x1c:\n        case 0x1e:\n        case 0x35:\n        case 0x5c:\n          local_var20 = 1;\n          break;\n        case 0x11:\n        case 0x12:\n        case 0x13:\n          local_var20 = 3;\n          break;\n        case 0x14:\n        case 0x15:\n          local_var20 = 7;\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          local_var20 = 9;\n          break;\n        case 0x5a:\n        case 0x5b:\n          local_var20 = 4;\n          break;\n        case 0x5d:\n        case 0x5e:\n          local_var20 = 6;\n        }\n        switch(local_var26) {\n        case 0:\n          DAT_20000e71 = '\\0';\n          break;\n        case 1:\n          DAT_20000e71 = '\\x01';\n          break;\n        case 2:\n          DAT_20000e71 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e71 = '\\x03';\n          break;\n        case 4:\n          temp27 = '\\x01';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 10:\n          temp27 = '\\x02';\n          break;\n        case 0x11:\n          select_plane(0,1,2);\n          break;\n        case 0x12:\n          select_plane(2,0,1);\n          break;\n        case 0x13:\n          select_plane(1,2,0);\n          break;\n        case 0x14:\n          DAT_20000e73 = 1;\n          break;\n        case 0x15:\n          DAT_20000e73 = 0;\n          break;\n        case 0x1c:\n        case 0x1e:\n          temp_var1 = __aeabi_fmul(local_var4,0x41200000);\n          temp_var4 = __aeabi_f2d(temp_var1);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          local_var26 = __aeabi_d2iz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          switch(local_var26) {\n          case 0x118:\n            temp27 = '\\x03';\n            break;\n          case 0x119:\n            temp27 = '\\x04';\n            break;\n          default:\n            DAT_20000e70 = '\\x03';\n            break;\n          case 300:\n            temp27 = '\\x05';\n            break;\n          case 0x12d:\n            temp27 = '\\x06';\n          }\n          break;\n        case 0x35:\n          local_var22 = '\\x01';\n          break;\n        case 0x36:\n        case 0x37:\n        case 0x38:\n        case 0x39:\n        case 0x3a:\n        case 0x3b:\n          DAT_20000e8c = (char)local_var26 - 0x36;\n          break;\n        case 0x50:\n          DAT_20000e71 = '\\x04';\n          break;\n        case 0x5a:\n          DAT_20000e74 = '\\x01';\n          break;\n        case 0x5b:\n          DAT_20000e74 = '\\0';\n          break;\n        case 0x5c:\n          temp_var1 = __aeabi_fmul(local_var4,0x41200000);\n          temp_var4 = __aeabi_f2d(temp_var1);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          local_var26 = __aeabi_d2iz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if (local_var26 == 0x398) {\n            temp27 = '\\a';\n          }\n          else if (local_var26 == 0x399) {\n            temp27 = '\\b';\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          break;\n        case 0x5d:\n          DAT_20000e72 = '\\x01';\n          break;\n        case 0x5e:\n          DAT_20000e72 = '\\0';\n        }\n      }\n      else if (byte_value == 0x4d) {\n        if (local_var26 == 0x1e) {\nLAB_08000b96:\n          local_var20 = 5;\n        }\n        else if ((int)local_var26 < 0x1f) {\n          if ((int)local_var26 < 3) {\n            if (-1 < (int)local_var26) goto LAB_08000b96;\n          }\n          else if (local_var26 - 3 < 3) {\n            local_var20 = 8;\n          }\n        }\n        switch(local_var26) {\n        case 0:\n          DAT_20000e75 = '\\x01';\n          break;\n        case 1:\n          break;\n        case 2:\n        case 0x1e:\n          DAT_20000e75 = '\\x02';\n          break;\n        case 3:\n          DAT_20000e76 = '\\x01';\n          break;\n        case 4:\n          DAT_20000e76 = -1;\n          break;\n        case 5:\n          DAT_20000e76 = '\\0';\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 7:\n          DAT_20000e77 = 2;\n          break;\n        case 8:\n          DAT_20000e77 = 1;\n          break;\n        case 9:\n          DAT_20000e77 = 0;\n        }\n      }\n      if (local_var20 != 0) {\n        if (((int)(uint)var25 >> local_var20 & 1U) == 0) {\n          var25 = var25 | (ushort)(1 << local_var20);\n        }\n        else {\n          DAT_20000e70 = '\\x05';\n        }\n        local_var20 = 0;\n      }\n    }\n    result = DAT_20000e70;\n    if (DAT_20000e70 == '\\0') {\n      local_var19 = 0;\n      var7 = 0;\n      var17 = '\\0';\n      flag1 = 0;\nswitchD_08000d18_caseD_47:\n      result = next_statement(&byte_value,array2 + 6,input_param,&flag1);\n      if (result != 0) {\n        switch(byte_value) {\n        case 0x46:\n          result = __aeabi_fcmple(local_var4,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e72 == '\\0') {\n            DAT_20000e78 = to_millimeters(local_var4);\n          }\n          else {\n            temp29 = to_millimeters(local_var4);\n          }\n          break;\n        case 0x47:\n        case 0x4d:\n        case 0x4e:\n          break;\n        default:\n          DAT_20000e70 = '\\x03';\n          break;\n        case 0x49:\n        case 0x4a:\n        case 0x4b:\n          temp_var2 = (uint)byte_value;\n          temp_var1 = to_millimeters(local_var4);\n          array2[temp_var2 - 0x49] = temp_var1;\n          break;\n        case 0x4c:\n          temp_var4 = __aeabi_f2d(local_var4);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          var17 = __aeabi_d2uiz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x50:\n          local_var19 = local_var4;\n          break;\n        case 0x52:\n          var7 = to_millimeters(local_var4);\n          break;\n        case 0x53:\n          result = __aeabi_fcmplt(local_var4,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case 0x54:\n          result = __aeabi_fcmplt(local_var4,0);\n          if (result != 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          temp_var4 = __aeabi_f2d(local_var4);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          DAT_20000e88 = __aeabi_d2uiz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          break;\n        case 0x58:\n          array2[3] = to_millimeters(local_var4);\n          temp30 = temp30 | 1;\n          break;\n        case 0x59:\n          array2[4] = to_millimeters(local_var4);\n          temp30 = temp30 | 2;\n          break;\n        case 0x5a:\n          array2[5] = to_millimeters(local_var4);\n          temp30 = temp30 | 4;\n        }\n        goto switchD_08000d18_caseD_47;\n      }\n      result = DAT_20000e70;\n      if (DAT_20000e70 == '\\0') {\n        if (DAT_20000ea9 != '\\a') {\n          spindle_run((int)DAT_20000e76);\n          coolant_run(DAT_20000e77);\n        }\n        if ((var25 & 0x200) != 0) {\n          result = settings_read_coord_data(DAT_20000e8c,&var3);\n          if (result == 0) {\n            return '\\n';\n          }\n          DAT_20000e90 = var3;\n          DAT_20000e94 = var4;\n          DAT_20000e98 = var5;\n        }\n        switch(temp27) {\n        case '\\x01':\n          result = __aeabi_fcmplt(local_var19,0);\n          if (result == 0) {\n            if (DAT_20000ea9 != '\\a') {\n              mc_dwell(local_var19);\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x06';\n          }\n          break;\n        case '\\x02':\n          temp_var4 = __aeabi_f2d(local_var19);\n          temp_var4 = trunc((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          local_var26 = __aeabi_d2iz((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n          if ((((var17 == '\\x02') || (var17 == '\\x14')) && (-1 < (int)local_var26)) &&\n             ((int)local_var26 < 7)) {\n            if ((temp30 == 0) && (var17 == '\\x02')) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              if ((int)local_var26 < 1) {\n                local_var26 = (uint)DAT_20000e8c;\n              }\n              else {\n                local_var26 = local_var26 - 1;\n              }\n              result = settings_read_coord_data(local_var26 & 0xff,array1);\n              if (result == 0) {\n                return '\\n';\n              }\n              for (temp22 = 0; temp22 < 3; temp22 = temp22 + 1) {\n                if (((int)(uint)temp30 >> temp22 & 1U) != 0) {\n                  if (var17 == '\\x14') {\n                    temp_var2 = (uint)temp22;\n                    temp_var1 = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (temp22 + 2) * 4),\n                                         array2[temp22 + 3]);\n                    array1[temp_var2] = temp_var1;\n                  }\n                  else {\n                    array1[temp22] = array2[temp22 + 3];\n                  }\n                }\n              }\n              settings_write_coord_data(local_var26 & 0xff,array1);\n              if (local_var26 == DAT_20000e8c) {\n                DAT_20000e90 = array1[0];\n                DAT_20000e94 = array1[1];\n                DAT_20000e98 = array1[2];\n              }\n            }\n          }\n          else {\n            DAT_20000e70 = '\\x03';\n          }\n          temp30 = 0;\n          break;\n        case '\\x03':\n        case '\\x05':\n          if (temp30 != 0) {\n            for (local_var15 = 0; local_var15 < 3; local_var15 = local_var15 + 1) {\n              if (((int)(uint)temp30 >> local_var15 & 1U) == 0) {\n                array2[local_var15 + 3] = *(undefined4 *)(&DAT_20000e74 + (local_var15 + 2) * 4);\n              }\n              else if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)local_var15;\n                temp_var1 = __addsf3(array2[local_var15 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (local_var15 + 2) * 4));\n                array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = array2[local_var15 + 3];\n                temp_var1 = __addsf3(*(undefined4 *)(&DAT_20000e70 + (local_var15 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (local_var15 + 10) * 4));\n                temp_var2 = (uint)local_var15;\n                temp_var1 = __addsf3(temp_var3,temp_var1);\n                array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n            mc_line(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n          }\n          if (temp27 == '\\x05') {\n            result = settings_read_coord_data(7,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          else {\n            result = settings_read_coord_data(6,array1 + 3);\n            if (result == 0) {\n              return '\\n';\n            }\n          }\n          mc_line(array1[3],var1,var2,DAT_20000ed0,0);\n          DAT_20000e7c = array1[3];\n          DAT_20000e80 = var1;\n          DAT_20000e84 = var2;\n          temp30 = 0;\n          break;\n        case '\\x04':\n        case '\\x06':\n          if (temp27 == '\\x06') {\n            settings_write_coord_data(7,&DAT_20000e7c);\n          }\n          else {\n            settings_write_coord_data(6,&DAT_20000e7c);\n          }\n          break;\n        case '\\a':\n          if (temp30 == 0) {\n            DAT_20000e70 = '\\x06';\n          }\n          else {\n            for (local_var14 = 0; local_var14 < 3; local_var14 = local_var14 + 1) {\n              if (((int)(uint)temp30 >> local_var14 & 1U) != 0) {\n                temp_var1 = __aeabi_fsub(*(undefined4 *)(&DAT_20000e74 + (local_var14 + 2) * 4),\n                                     *(undefined4 *)(&DAT_20000e70 + (local_var14 + 8) * 4));\n                temp_var2 = (uint)local_var14;\n                temp_var1 = __aeabi_fsub(temp_var1,array2[local_var14 + 3]);\n                *(undefined4 *)(&DAT_20000e74 + (temp_var2 + 10) * 4) = temp_var1;\n              }\n            }\n          }\n          temp30 = 0;\n          break;\n        case '\\b':\n          memset(&DAT_20000e9c,0,0xc);\n        }\n        if (((var25 & 4) != 0) || (temp30 != 0)) {\n          if ((DAT_20000e72 != '\\0') &&\n             ((result = __aeabi_fcmplt(temp29,0), result != 0 && (DAT_20000e71 != '\\x04')))) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (((local_var22 != '\\0') && (DAT_20000e71 != '\\0')) && (DAT_20000e71 != '\\x01')) {\n            DAT_20000e70 = '\\x06';\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          for (local_var13 = 0; local_var13 < 3; local_var13 = local_var13 + 1) {\n            if (((int)(uint)temp30 >> local_var13 & 1U) == 0) {\n              array2[local_var13 + 3] = *(undefined4 *)(&DAT_20000e74 + (local_var13 + 2) * 4);\n            }\n            else if (local_var22 == '\\0') {\n              if (DAT_20000e74 == '\\0') {\n                temp_var2 = (uint)local_var13;\n                temp_var1 = __addsf3(array2[local_var13 + 3],\n                                 *(undefined4 *)(&DAT_20000e74 + (local_var13 + 2) * 4));\n                array2[temp_var2 + 3] = temp_var1;\n              }\n              else {\n                temp_var3 = array2[local_var13 + 3];\n                temp_var1 = __addsf3(*(undefined4 *)(&DAT_20000e70 + (local_var13 + 8) * 4),\n                                 *(undefined4 *)(&DAT_20000e74 + (local_var13 + 10) * 4));\n                temp_var2 = (uint)local_var13;\n                temp_var1 = __addsf3(temp_var3,temp_var1);\n                array2[temp_var2 + 3] = temp_var1;\n              }\n            }\n          }\n          switch(DAT_20000e71) {\n          case '\\0':\n            if (temp30 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              mc_line(array2[3],array2[4],array2[5],DAT_20000ed0,0);\n            }\n            break;\n          case '\\x01':\n            if (temp30 == 0) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              temp_var1 = temp29;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              mc_line(array2[3],array2[4],array2[5],temp_var1,DAT_20000e72);\n            }\n            break;\n          case '\\x02':\n          case '\\x03':\n            temp30 = temp30 & ~(byte)(1 << DAT_20000e8b);\n            if ((temp30 == 0) ||\n               (((result = __aeabi_fcmpeq(var7,0), result != 0 &&\n                 (result = __aeabi_fcmpeq(array2[DAT_20000e89],0), result != 0)) &&\n                (result = __aeabi_fcmpeq(array2[DAT_20000e8a],0), result != 0)))) {\n              DAT_20000e70 = '\\x06';\n            }\n            else {\n              result = __aeabi_fcmpeq(var7,0);\n              if (result == 0) {\n                local_variables_11 = __aeabi_fsub(array2[DAT_20000e89 + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e89 + 2) * 4));\n                temp15 = __aeabi_fsub(array2[DAT_20000e8a + 3],\n                                        *(undefined4 *)(&DAT_20000e74 + (DAT_20000e8a + 2) * 4));\n                memset(array2,0,0xc);\n                temp_var1 = __aeabi_fmul(var7,0x40800000);\n                temp_var1 = __aeabi_fmul(temp_var1,var7);\n                temp_var3 = __aeabi_fmul(local_variables_11,local_variables_11);\n                temp_var1 = __aeabi_fsub(temp_var1,temp_var3);\n                temp_var3 = __aeabi_fmul(temp15,temp15);\n                local_variables_13 = __aeabi_fsub(temp_var1,temp_var3);\n                result = __aeabi_fcmplt(local_variables_13,0);\n                if (result != 0) {\n                  DAT_20000e70 = 4;\n                  return '\\x04';\n                }\n                temp_var4 = __aeabi_f2d(local_variables_13);\n                temp_var4 = sqrt((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                temp_var5 = __aeabi_f2d(local_variables_11);\n                temp_var6 = __aeabi_f2d(temp15);\n                temp_var5 = hypot((int)temp_var5,(int)((ulonglong)temp_var5 >> 0x20),(int)temp_var6,\n                              (int)((ulonglong)temp_var6 >> 0x20));\n                temp_var4 = __divdf3((int)temp_var4,(uint)((ulonglong)temp_var4 >> 0x20) ^ 0x80000000,(int)temp_var5\n                                 ,(int)((ulonglong)temp_var5 >> 0x20));\n                local_variables_13 = __truncdfsf2((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n                if (DAT_20000e71 == '\\x03') {\n                  local_variables_13 = local_variables_13 ^ 0x80000000;\n                }\n                result = __aeabi_fcmplt(var7,0);\n                if (result != 0) {\n                  local_variables_13 = local_variables_13 ^ 0x80000000;\n                  var7 = var7 ^ 0x80000000;\n                }\n                temp_var1 = __aeabi_fmul(temp15,local_variables_13);\n                temp_var1 = __aeabi_fsub(local_variables_11,temp_var1);\n                temp_var2 = (uint)DAT_20000e89;\n                temp_var1 = __aeabi_fmul(temp_var1,0x3f000000);\n                array2[temp_var2] = temp_var1;\n                temp_var1 = __aeabi_fmul(local_variables_11,local_variables_13);\n                temp_var1 = __addsf3(temp_var1,temp15);\n                temp_var2 = (uint)DAT_20000e8a;\n                temp_var1 = __aeabi_fmul(temp_var1,0x3f000000);\n                array2[temp_var2] = temp_var1;\n              }\n              else {\n                temp_var4 = __aeabi_f2d(array2[DAT_20000e89]);\n                temp_var5 = __aeabi_f2d(array2[DAT_20000e8a]);\n                temp_var4 = hypot((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20),(int)temp_var5,\n                              (int)((ulonglong)temp_var5 >> 0x20));\n                var7 = __truncdfsf2((int)temp_var4,(int)((ulonglong)temp_var4 >> 0x20));\n              }\n              local_var11 = DAT_20000e71 == '\\x02';\n              temp_var1 = temp29;\n              if (DAT_20000e72 == '\\0') {\n                temp_var1 = DAT_20000e78;\n              }\n              mc_arc(&DAT_20000e7c,array2 + 3,array2,DAT_20000e89,DAT_20000e8a,DAT_20000e8b,\n                     temp_var1,DAT_20000e72,var7,local_var11);\n            }\n            break;\n          case '\\x04':\n            if (temp30 != 0) {\n              DAT_20000e70 = '\\x06';\n            }\n          }\n          if (DAT_20000e70 != '\\0') {\n            return DAT_20000e70;\n          }\n          DAT_20000e7c = array2[3];\n          DAT_20000e80 = array2[4];\n          DAT_20000e84 = array2[5];\n        }\n        result = DAT_20000e70;\n        if (DAT_20000e75 != '\\0') {\n          plan_synchronize();\n          DAT_20000eb8 = 0;\n          if (DAT_20000e75 == '\\x02') {\n            mc_reset();\n            result = DAT_20000e70;\n          }\n          else {\n            DAT_20000e75 = '\\0';\n            result = DAT_20000e70;\n          }\n        }\n      }\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "process_command_080005b4",
            "entrypoint": "0x080005b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080005b4": "process_command_080005b4",
                "auStack_70": "array2",
                "cVar3": "result",
                "iVar1": "result",
                "local_24": "local_var26",
                "local_26": "var25",
                "local_27": "temp30",
                "local_2c": "temp29",
                "local_2d": "local_var22",
                "local_2e": "temp27",
                "local_2f": "local_var20",
                "local_34": "local_var19",
                "local_38": "var7",
                "local_39": "var17",
                "local_3a": "temp22",
                "local_3b": "local_var15",
                "local_3c": "local_var14",
                "local_3d": "local_var13",
                "local_44": "local_variables_13",
                "local_45": "local_var11",
                "local_4c": "local_variables_11",
                "local_50": "temp15",
                "local_51": "flag1",
                "local_52": "byte_value",
                "local_58": "local_var4",
                "local_7c": "var3",
                "local_80": "var2",
                "local_84": "var1",
                "local_94": "array1",
                "param_1": "input_param",
                "uStack_74": "var5",
                "uStack_78": "var4",
                "uVar2": "temp_var1",
                "uVar4": "temp_var2",
                "uVar5": "temp_var3",
                "uVar6": "temp_var4",
                "uVar7": "temp_var5",
                "uVar8": "temp_var6"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800184c": {
            "additional_data": {
                "DAT_20000e70": {
                    "error_code": 1
                },
                "FUN_0800184c": {
                    "check_and_read_float": 2,
                    "check_and_read_float_value": 1,
                    "check_and_update_character": 1,
                    "check_and_update_value": 1,
                    "check_valid_character": 1,
                    "convert_byte_to_float": 1,
                    "decode_and_read_float": 6,
                    "decode_character": 5,
                    "decode_data": 1,
                    "extract_byte": 1,
                    "get_valid_character": 1,
                    "parse_and_validate_character": 1,
                    "process_data": 2,
                    "process_input": 2,
                    "process_input_data": 1,
                    "read_and_validate_char": 1,
                    "validate_and_read_float": 2
                },
                "iVar1": {
                    "float_read_result": 1,
                    "read_float_result": 10,
                    "read_float_return_value": 1,
                    "read_float_status": 1,
                    "read_result": 11,
                    "read_status": 2,
                    "result": 1,
                    "status": 1
                },
                "param_1": {
                    "decoded_character": 1,
                    "output": 4,
                    "output_buffer": 12,
                    "output_byte": 8,
                    "output_character": 3,
                    "output_value": 1,
                    "result": 2
                },
                "param_2": {
                    "buffer_length": 1,
                    "buffer_size": 1,
                    "character_limit": 1,
                    "config": 1,
                    "data_size": 3,
                    "float_input": 1,
                    "float_param": 2,
                    "float_parameter": 3,
                    "float_value": 1,
                    "input_buffer": 1,
                    "input_float": 3,
                    "input_param": 2,
                    "input_parameter": 1,
                    "input_size": 1,
                    "input_value": 2,
                    "param": 1,
                    "param2": 1,
                    "param_2": 2,
                    "param_size": 1,
                    "size": 2
                },
                "param_3": {
                    "array_length": 1,
                    "base": 1,
                    "base_address": 13,
                    "buffer_address": 1,
                    "character_array": 1,
                    "data": 1,
                    "data_address": 3,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_offset": 3,
                    "data_pointer": 1,
                    "decode_table": 1,
                    "source_data": 1,
                    "table": 1,
                    "table_offset": 1
                },
                "param_4": {
                    "array_index": 1,
                    "char_input": 1,
                    "character_index": 1,
                    "character_offset": 1,
                    "current_index": 6,
                    "current_position": 1,
                    "data_pointer": 3,
                    "index": 4,
                    "input": 2,
                    "input_buffer": 3,
                    "input_byte": 5,
                    "input_character": 1,
                    "offset": 1,
                    "position": 1
                },
                "read_float": {
                    "read_float": 1
                },
                "uVar2": {
                    "is_valid_character": 2,
                    "result": 7,
                    "return_value": 9,
                    "success": 3,
                    "success_flag": 6,
                    "success_indicator": 1
                }
            },
            "called": [
                "FUN_08002638"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nundefined4 decode_and_read_float_0800184c(byte *output_buffer,undefined4 data_size,int base_address,byte *current_index)\n\n{\n  int read_result;\n  undefined4 return_value;\n  \n  if (*(char *)(base_address + (uint)*current_index) == '\\0') {\n    return_value = 0;\n  }\n  else {\n    *output_buffer = *(byte *)(base_address + (uint)*current_index);\n    if ((*output_buffer < 0x41) || (0x5a < *output_buffer)) {\n      DAT_20000e70 = 2;\n      return_value = 0;\n    }\n    else {\n      *current_index = *current_index + 1;\n      read_result = read_float(base_address,current_index,data_size);\n      if (read_result == 0) {\n        DAT_20000e70 = 1;\n        return_value = 0;\n      }\n      else {\n        return_value = 1;\n      }\n    }\n  }\n  return return_value;\n}\n\n",
            "current_name": "decode_and_read_float_0800184c",
            "entrypoint": "0x0800184c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800184c": "decode_and_read_float_0800184c",
                "iVar1": "read_result",
                "param_1": "output_buffer",
                "param_2": "data_size",
                "param_3": "base_address",
                "param_4": "current_index",
                "uVar2": "return_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018cc": {
            "additional_data": {
                "FUN_080018cc": {
                    "apply_bit_mask": 1,
                    "set_bits_in_memory": 1,
                    "set_bits_in_register": 2,
                    "set_bitwise_or_flag": 1,
                    "set_params_with_mask": 1,
                    "update_and_mask_value": 1,
                    "update_config": 1,
                    "update_data": 3,
                    "update_data_and_filter": 1,
                    "update_data_bits": 1,
                    "update_data_with_mask": 1,
                    "update_flag": 1,
                    "update_flag_bits": 1,
                    "update_flags": 2,
                    "update_mask": 1,
                    "update_memory": 1,
                    "update_memory_value": 1,
                    "update_parameter_bits": 1,
                    "update_parameter_value": 1,
                    "update_parameter_with_mask": 1,
                    "update_register": 1,
                    "update_register_value": 3,
                    "update_settings": 2
                },
                "_DAT_40021014": {
                    "current_settings": 2,
                    "data": 1,
                    "data_register": 3,
                    "data_value": 2,
                    "existing_config": 1,
                    "existing_data": 1,
                    "existing_value": 2,
                    "flag_register": 1,
                    "flag_variable": 1,
                    "masked_param": 1,
                    "memory_address": 1,
                    "memory_register": 1,
                    "memory_value": 1,
                    "original_register_value": 1,
                    "register_value": 2
                },
                "param_1": {
                    "data": 1,
                    "data_value": 1,
                    "input": 2,
                    "input_flags": 1,
                    "input_value": 9,
                    "new_config": 1,
                    "new_data": 1,
                    "new_param": 2,
                    "new_parameter": 3,
                    "new_settings": 1,
                    "new_value": 6,
                    "parameter": 1,
                    "settings": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_and_mask_value_080018cc(uint input_value)\n\n{\n  _DAT_40021014 = input_value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_and_mask_value_080018cc",
            "entrypoint": "0x080018cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018cc": "update_and_mask_value_080018cc",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080018fc": {
            "additional_data": {
                "0xfffff55f": {
                    "bit_mask_filter": 1,
                    "bitwise_and_mask": 1,
                    "mask": 1
                },
                "FUN_080018fc": {
                    "apply_bitmask": 1,
                    "apply_bitwise_mask": 1,
                    "merge_bits": 1,
                    "set_active_bits": 1,
                    "set_bit_in_register": 1,
                    "set_bitmask_and_value": 1,
                    "set_bits_in_memory": 1,
                    "set_bitwise_or_mask": 1,
                    "set_bitwise_or_value": 1,
                    "update_bitmask": 1,
                    "update_configuration": 1,
                    "update_data": 6,
                    "update_flag_in_memory": 1,
                    "update_flag_value": 1,
                    "update_flags": 1,
                    "update_memory_value": 2,
                    "update_param_and_mask": 1,
                    "update_permissions": 1,
                    "update_register": 2,
                    "update_register_value": 2,
                    "update_register_with_param": 1,
                    "update_value_with_mask": 1,
                    "update_variable_with_bitwise_or_and": 1
                },
                "_DAT_40021014": {
                    "configuration_register": 1,
                    "current_value": 1,
                    "data": 1,
                    "existing_bitmask": 1,
                    "existing_data": 4,
                    "existing_permissions": 1,
                    "existing_value": 2,
                    "flag_value": 1,
                    "flags": 1,
                    "masked_value": 1,
                    "memory_location": 1,
                    "memory_value": 2,
                    "original_value": 1,
                    "register": 1,
                    "register_value": 5,
                    "updated_data": 1
                },
                "original_mask": {
                    "0xfffff55f": 1
                },
                "param_1": {
                    "bit_mask": 1,
                    "bits_to_set": 1,
                    "config_parameter": 1,
                    "data": 1,
                    "flag_value": 1,
                    "input_value": 6,
                    "new_bit": 1,
                    "new_data": 1,
                    "new_param": 1,
                    "new_parameter": 1,
                    "new_value": 8,
                    "permissions": 1,
                    "value": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\n\n\nvoid update_data_080018fc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_data_080018fc",
            "entrypoint": "0x080018fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080018fc": "update_data_080018fc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800192c": {
            "additional_data": {
                "20000e4c": {
                    "flag": 1
                },
                "20000ee4": {
                    "bit": 1
                },
                "DAT_20000e4c": {
                    "bit_extracted": 1,
                    "bit_result": 1,
                    "bit_value": 2,
                    "bits_flag": 1,
                    "data_flag": 1,
                    "e4c_flag": 1,
                    "extracted_bit": 1,
                    "extracted_flag": 2,
                    "flag": 4,
                    "flag_extracted": 1,
                    "flag_output": 1,
                    "flag_value": 1,
                    "is_bit_set": 3,
                    "is_flag_set": 2,
                    "output_flag": 5,
                    "updated_flag": 1
                },
                "DAT_20000ee4": {
                    "binary_data": 1,
                    "bitwise_value": 1,
                    "data": 2,
                    "data_flag": 1,
                    "flag": 2,
                    "flag_data": 1,
                    "flags": 1,
                    "input_byte": 1,
                    "input_data": 6,
                    "input_flag": 4,
                    "input_value": 3,
                    "original_flag": 2,
                    "settings": 2,
                    "value": 1
                },
                "FUN_0800192c": {
                    "check_bit_and_save": 1,
                    "check_data_bits": 1,
                    "determine_flag": 1,
                    "extract_bit_from_byte": 1,
                    "extract_bit_from_data": 1,
                    "extract_bit_from_flag": 2,
                    "extract_bit_from_flags": 1,
                    "extract_bit_from_value": 1,
                    "extract_enabled_flag": 1,
                    "extract_flag_from_binary": 1,
                    "extract_flag_from_data": 4,
                    "extract_flag_from_settings": 2,
                    "initialize_data_flag": 1,
                    "initialize_flag": 3,
                    "set_e4c_flag": 1,
                    "set_flag_based_on_bitwise_operation": 1,
                    "set_flag_from_bitwise_operation": 1,
                    "update_flag": 1,
                    "update_flag_based_on_bit": 1,
                    "update_flag_based_on_bit_check": 1,
                    "update_flag_based_on_bitwise_operation": 1,
                    "update_flag_based_on_condition": 2,
                    "update_flags_based_on_condition": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e30",
                "FUN_08001ddc"
            ],
            "code": "\nvoid extract_bit_from_data_0800192c(void)\n\n{\n  DAT_20000e4c = (uint)((DAT_20000ee4 & 8) != 0);\n  return;\n}\n\n",
            "current_name": "extract_bit_from_data_0800192c",
            "entrypoint": "0x0800192c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800192c": "extract_bit_from_data_0800192c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800195c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "char_value": 1,
                    "condition_flag": 1,
                    "condition_variable": 2,
                    "control_flag": 1,
                    "flag": 2,
                    "flag1": 1,
                    "protocol_status": 1,
                    "reset_flag": 1,
                    "some_flag": 1,
                    "status_flag": 2,
                    "status_register": 1,
                    "system_status": 1
                },
                "DAT_20000eaa": {
                    "control_flag": 4,
                    "control_flags": 1,
                    "control_register": 2,
                    "flag2": 1,
                    "flag_variable": 1,
                    "flags": 1,
                    "protocol_flags": 1,
                    "status_flag": 2,
                    "status_variable": 1,
                    "system_flags": 1
                },
                "FUN_0800195c": {
                    "check_and_reset": 2,
                    "initialize_device": 2,
                    "initialize_protocol": 1,
                    "initialize_system": 1,
                    "reset_and_flag": 5,
                    "reset_and_modify": 1,
                    "reset_and_set_flag": 10,
                    "reset_and_update_flag": 1,
                    "reset_and_update_status": 1,
                    "reset_dat_flag": 1,
                    "reset_if_condition": 1,
                    "reset_if_condition_met": 3,
                    "reset_if_not_six_and_not_bit_5_set": 1,
                    "reset_mc_if_needed": 1
                },
                "FUN_080025e8": {
                    "decrement_counter": 1,
                    "mc_reset": 2,
                    "perform_additional_action": 3,
                    "perform_additional_actions": 1,
                    "perform_additional_checks": 2,
                    "perform_additional_function": 1,
                    "perform_additional_reset": 1,
                    "perform_additional_tasks": 1,
                    "perform_cleanup": 1,
                    "perform_reset": 6,
                    "reset_controller": 1,
                    "reset_device": 1,
                    "sub_function": 1
                },
                "initialize_system": {
                    "": 1
                },
                "mc_reset": {
                    "reset": 2,
                    "reset_device": 1,
                    "reset_mc": 3,
                    "reset_memory": 1,
                    "reset_memory_controller": 2,
                    "reset_microcontroller": 2
                },
                "perform_reset": {
                    "": 1
                },
                "reset_microcontroller": {
                    "": 1
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid reset_and_set_flag_0800195c(void)\n\n{\n  if ((DAT_20000ea9 != '\\x06') && ((DAT_20000eaa & 0x20) == 0)) {\n    reset_mc();\n    DAT_20000eaa = DAT_20000eaa | 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "reset_and_set_flag_0800195c",
            "entrypoint": "0x0800195c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800195c": "reset_and_set_flag_0800195c",
                "mc_reset": "reset_mc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001994": {
            "additional_data": {
                "FUNC_08002828": {
                    "another_function": 1
                },
                "FUN_08001994": {
                    "calculate": 9,
                    "calculate_and_update_value": 2,
                    "calculate_and_update_values": 1,
                    "calculate_control_signal": 3,
                    "calculate_control_system": 1,
                    "calculate_data": 3,
                    "calculate_function": 2,
                    "calculate_motion_control": 1,
                    "calculate_optimal_value": 1,
                    "calculate_result": 1,
                    "calculate_value": 1,
                    "calculate_values": 1,
                    "process_data": 2
                },
                "FUN_08008640": {
                    "another_calculation": 1
                },
                "FUN_08008894": {
                    "calculate_value": 1
                },
                "__aeabi_d2uiz": {
                    "double_to_unsigned_integer": 1
                },
                "__aeabi_f2d": {
                    "float_to_double": 1
                },
                "__aeabi_fdiv": {
                    "divide_float": 1
                },
                "__aeabi_fmul": {
                    "multiply_float": 1
                },
                "__divdf3": {
                    "divide_double": 1
                },
                "__floatunsidf": {
                    "double_to_float_unsigned": 1
                },
                "__muldf3": {
                    "multiply_double": 1
                },
                "__truncdfsf2": {
                    "double_to_float_truncated": 1
                },
                "calculate_bitwise_or_080078f4": {
                    "calculate_bitwise_or": 1
                },
                "calculate_float_representation_08008c30": {
                    "calculate_float_representation": 1
                },
                "calculate_floating_point_value_08009318": {
                    "calculate_floating_point_value": 1
                },
                "calculate_product_080095b8": {
                    "calculate_product": 1
                },
                "calculate_shifted_value_08008bf0": {
                    "calculate_shifted_value": 1
                },
                "ceil": {
                    "round_up_double": 1
                },
                "debounce_rd": {
                    "read_debounced_value": 1
                },
                "delay_us": {
                    "delay_microseconds": 1
                },
                "local_11": {
                    "count": 4,
                    "counter": 4,
                    "flag3": 1,
                    "flag_counter": 1,
                    "iteration_flag": 1,
                    "local_char": 1,
                    "local_count": 1,
                    "local_counter": 1,
                    "local_counter4": 1,
                    "local_flag": 1,
                    "local_var19": 2,
                    "local_variable_19": 1,
                    "temp2": 3,
                    "temp24": 1,
                    "temp_2": 1,
                    "temp_char": 2,
                    "value19": 2,
                    "var20": 1
                },
                "local_18": {
                    "data2": 1,
                    "limit_value": 1,
                    "local_limit": 2,
                    "local_result5": 1,
                    "local_threshold": 2,
                    "local_var18": 2,
                    "local_variable_18": 1,
                    "max_iteration": 1,
                    "max_length": 1,
                    "maximum_limit": 1,
                    "temp23": 1,
                    "threshold": 3,
                    "threshold_value": 2,
                    "upper_limit": 1,
                    "value18": 3,
                    "value_18": 1,
                    "var18": 4,
                    "var19": 1
                },
                "local_1a": {
                    "constant2": 1,
                    "constant3": 1,
                    "constant_2": 1,
                    "data1": 1,
                    "data3": 1,
                    "data_value3": 1,
                    "local_const2": 1,
                    "local_mask": 1,
                    "local_value11": 1,
                    "local_value4": 1,
                    "local_value8": 1,
                    "local_var17": 2,
                    "local_variable_17": 1,
                    "mask_value": 1,
                    "mask_value3": 1,
                    "shift_value": 1,
                    "temp22": 1,
                    "temp4": 1,
                    "value17": 3,
                    "value_17": 1,
                    "var17": 4,
                    "var18": 1,
                    "variable7": 1
                },
                "local_20": {
                    "accumulator_3": 1,
                    "counter_value3": 1,
                    "current_position": 1,
                    "initial_local_value": 1,
                    "input3_offset": 1,
                    "local_counter3": 1,
                    "local_index3": 1,
                    "local_iteration3": 1,
                    "local_value10": 1,
                    "local_value11": 1,
                    "local_var16": 2,
                    "local_variable_16": 1,
                    "temp21": 1,
                    "temp3": 1,
                    "temp_value4": 1,
                    "temp_var4": 1,
                    "updated_value3": 1,
                    "value11": 1,
                    "value16": 3,
                    "value6": 1,
                    "value_16": 1,
                    "var16": 4,
                    "var17": 1,
                    "variable10": 1
                },
                "local_24": {
                    "accumulator_2": 1,
                    "adjusted_local_value2": 1,
                    "counter_value2": 1,
                    "input2_offset": 1,
                    "local_counter2": 1,
                    "local_index2": 1,
                    "local_iteration2": 1,
                    "local_value10": 1,
                    "local_value9": 1,
                    "local_var15": 2,
                    "local_variable_15": 1,
                    "starting_position": 1,
                    "temp2": 1,
                    "temp20": 1,
                    "temp_value3": 1,
                    "temp_var3": 1,
                    "updated_value2": 1,
                    "value10": 1,
                    "value15": 3,
                    "value5": 1,
                    "value_15": 1,
                    "var15": 4,
                    "var16": 1,
                    "variable9": 1
                },
                "local_28": {
                    "": 1,
                    "accumulator_1": 1,
                    "adjusted_local_value1": 1,
                    "counter_value1": 1,
                    "input1_offset": 1,
                    "local_counter1": 1,
                    "local_index1": 1,
                    "local_iteration1": 1,
                    "local_negative": 1,
                    "local_value9": 1,
                    "local_var14": 2,
                    "local_variable_14": 1,
                    "temp1": 1,
                    "temp19": 1,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "updated_value1": 1,
                    "value14": 3,
                    "value4": 1,
                    "value9": 1,
                    "value_14": 1,
                    "var14": 4,
                    "var15": 1,
                    "variable8": 1,
                    "velocity_diff": 1
                },
                "local_2c": {
                    "delay_increment": 1,
                    "delay_min": 1,
                    "delay_value3": 1,
                    "diff": 1,
                    "difference": 1,
                    "difference_value": 1,
                    "local_delay_interval": 1,
                    "local_delay_value": 1,
                    "local_difference": 2,
                    "local_value8": 1,
                    "local_var13": 2,
                    "local_variable_13": 1,
                    "parameter_difference": 1,
                    "remaining_delay": 1,
                    "temp18": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "value13": 3,
                    "value8": 1,
                    "value_13": 1,
                    "var10": 1,
                    "var13": 4,
                    "var14": 1,
                    "variable7": 1
                },
                "local_30": {
                    "delay": 2,
                    "delay_value2": 1,
                    "increase_value": 1,
                    "local_cycles": 1,
                    "local_delay_count": 1,
                    "local_shift": 1,
                    "local_sum": 1,
                    "local_value7": 1,
                    "local_var12": 2,
                    "local_variable_12": 1,
                    "parameter_value": 1,
                    "running_value": 1,
                    "sum": 1,
                    "temp": 1,
                    "temp17": 1,
                    "total_delay": 1,
                    "value12": 3,
                    "value7": 1,
                    "value_12": 1,
                    "value_8": 1,
                    "var12": 4,
                    "var13": 1,
                    "var9": 1,
                    "variable6": 1
                },
                "local_34": {
                    "counter": 2,
                    "delay_period": 1,
                    "delay_time": 2,
                    "delay_value": 2,
                    "delay_value1": 1,
                    "local_delay": 3,
                    "local_delay_value": 1,
                    "local_value6": 1,
                    "local_var11": 2,
                    "local_variable_11": 1,
                    "temp16": 1,
                    "value11": 3,
                    "value6": 1,
                    "value_11": 1,
                    "value_7": 1,
                    "var11": 4,
                    "var12": 1,
                    "var8": 1,
                    "variable5": 1,
                    "variable6": 1
                },
                "local_36": {
                    "acceleration_value": 1,
                    "constant2": 1,
                    "data2": 1,
                    "data_value2": 1,
                    "input_value_copy_2": 1,
                    "local_update_value": 1,
                    "local_value3": 1,
                    "local_value5": 2,
                    "local_value7": 1,
                    "local_value8": 1,
                    "local_var10": 2,
                    "local_variable_10": 1,
                    "mask_value2": 1,
                    "new_value": 2,
                    "temp15": 1,
                    "updated_value": 1,
                    "value10": 3,
                    "value5": 1,
                    "value_10": 1,
                    "var10": 4,
                    "var11": 1,
                    "var7": 1,
                    "variable5": 1
                },
                "local_3c": {
                    "debounce_value": 2,
                    "debounced_input": 1,
                    "debounced_value": 5,
                    "input": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "input_value_copy": 1,
                    "local_debounce": 2,
                    "local_debounce_value": 1,
                    "local_debounced": 1,
                    "local_value4": 1,
                    "local_var9": 2,
                    "local_variable_9": 1,
                    "temp14": 1,
                    "value4": 1,
                    "value9": 3,
                    "value_9": 1,
                    "var10": 1,
                    "var9": 4
                },
                "local_40": {
                    "calculation3": 1,
                    "divisor1": 1,
                    "local_float2": 1,
                    "local_max_value": 1,
                    "local_result4": 1,
                    "local_value4": 1,
                    "local_value6": 1,
                    "local_value7": 1,
                    "local_value8": 1,
                    "local_var8": 2,
                    "local_variable_8": 1,
                    "max_value": 2,
                    "max_value2": 1,
                    "maximum_value": 1,
                    "temp13": 1,
                    "temp_value": 1,
                    "value8": 3,
                    "value_6": 1,
                    "value_8": 1,
                    "var6": 1,
                    "var8": 4,
                    "var9": 1,
                    "variable4": 1,
                    "velocity_value_c": 1
                },
                "local_44": {
                    "fixed_point_value2": 1,
                    "float_value3": 1,
                    "floating_point_value": 1,
                    "local_constant4": 1,
                    "local_float1": 2,
                    "local_float_var4": 1,
                    "local_result3": 1,
                    "local_value6": 1,
                    "local_value7": 1,
                    "local_var7": 2,
                    "local_variable_7": 1,
                    "result4": 2,
                    "result_4": 1,
                    "result_float": 1,
                    "result_value3": 1,
                    "temp12": 1,
                    "truncated_value": 2,
                    "value7": 3,
                    "value_7": 1,
                    "var7": 4,
                    "var8": 1,
                    "variable4": 1
                },
                "local_48": {
                    "fixed_point_value1": 1,
                    "int_value1": 1,
                    "integer_value": 1,
                    "integer_value1": 1,
                    "local_calculation2": 1,
                    "local_constant3": 1,
                    "local_integer": 1,
                    "local_result": 1,
                    "local_result2": 1,
                    "local_value2": 1,
                    "local_value6": 1,
                    "local_var6": 2,
                    "local_variable_6": 1,
                    "max_velocity": 1,
                    "result3": 1,
                    "result4": 1,
                    "result_value2": 1,
                    "temp11": 1,
                    "value6": 3,
                    "value_5": 1,
                    "value_6": 1,
                    "var5": 1,
                    "var6": 4,
                    "var7": 1,
                    "variable3": 1
                },
                "local_4c": {
                    "fixed_point_value1": 1,
                    "floating_point_value": 1,
                    "local_calculation1": 1,
                    "local_constant2": 1,
                    "local_fixed_point": 1,
                    "local_result1": 1,
                    "local_value5": 3,
                    "local_var5": 2,
                    "local_variable_5": 1,
                    "result2": 2,
                    "result_value1": 1,
                    "rounded_value": 1,
                    "temp10": 1,
                    "value4": 1,
                    "value5": 3,
                    "value_4": 1,
                    "value_5": 1,
                    "var4": 1,
                    "var5": 4,
                    "var6": 1,
                    "variable2": 1,
                    "velocity_value_b": 1
                },
                "local_4e": {
                    "constant1": 4,
                    "constant_1": 1,
                    "data1": 1,
                    "data_value1": 1,
                    "local_const1": 1,
                    "local_constant1": 1,
                    "local_value1": 1,
                    "local_value4": 4,
                    "local_var4": 2,
                    "local_variable_4": 1,
                    "mask_value1": 1,
                    "temp9": 1,
                    "value4": 4,
                    "value_4": 1,
                    "var4": 4,
                    "var5": 1,
                    "variable1": 1,
                    "velocity_value_a": 1
                },
                "local_54": {
                    "acceleration_value_c": 1,
                    "flag3_value": 1,
                    "flag_value3": 1,
                    "local_float_var3": 1,
                    "local_value3": 6,
                    "local_var3": 2,
                    "local_variable_3": 1,
                    "temp8": 1,
                    "value3": 8,
                    "value_3": 2,
                    "var3": 5,
                    "var4": 1,
                    "variable3": 1
                },
                "local_58": {
                    "acceleration_value_b": 1,
                    "flag2_value": 1,
                    "flag_value2": 1,
                    "local_float_var2": 1,
                    "local_value2": 6,
                    "local_var2": 2,
                    "local_variable_2": 1,
                    "temp7": 1,
                    "value2": 8,
                    "value_2": 2,
                    "var2": 5,
                    "var3": 1,
                    "variable2": 1
                },
                "local_5c": {
                    "acceleration_value_a": 1,
                    "flag1_value": 1,
                    "flag_value1": 1,
                    "local_float_var1": 1,
                    "local_value1": 6,
                    "local_var1": 2,
                    "local_variable_1": 1,
                    "temp6": 1,
                    "value1": 8,
                    "value_1": 2,
                    "var1": 5,
                    "var2": 1,
                    "variable1": 1
                },
                "local_61": {
                    "flag": 1,
                    "flag3": 1,
                    "flag_counter": 1,
                    "local_flag": 9,
                    "temp": 1,
                    "temp1": 4,
                    "temp4": 1,
                    "temp5": 1,
                    "temp_1": 1,
                    "temp_byte": 4,
                    "updated_flag": 1,
                    "value24": 1,
                    "var1": 1,
                    "variable13": 1
                },
                "local_e8": {
                    "temp_var5": 1
                },
                "local_ec": {
                    "temp_var4": 1
                },
                "local_f0": {
                    "temp_var3": 1
                },
                "local_f4": {
                    "temp_var2": 1
                },
                "local_f8": {
                    "temp_var1": 1
                },
                "lround": {
                    "round_to_longlong": 1
                },
                "memset": {
                    "clear_memory": 1
                },
                "memset_with_value_0800b430": {
                    "memset_with_value": 1
                },
                "param_1": {
                    "flag": 3,
                    "flag1": 1,
                    "flags": 15,
                    "input_flag": 1,
                    "input_flags": 9,
                    "motion_params": 1,
                    "param_flags": 1
                },
                "param_2": {
                    "condition1": 4,
                    "condition_1": 2,
                    "condition_flag": 1,
                    "condition_flag1": 1,
                    "enable_feature1": 1,
                    "enable_input2": 1,
                    "flag1": 7,
                    "flag2": 1,
                    "flag_param2": 1,
                    "is_enabled": 1,
                    "is_param2_enabled": 1,
                    "is_param2_set": 1,
                    "is_zero": 1,
                    "param2": 6,
                    "param_flag": 1,
                    "update_delay_flag": 1
                },
                "param_3": {
                    "condition2": 4,
                    "condition_2": 2,
                    "condition_flag2": 1,
                    "debounce_flag": 3,
                    "enable_feature2": 1,
                    "enable_input3": 1,
                    "flag2": 7,
                    "flag3": 1,
                    "flag_param3": 1,
                    "is_inverted": 1,
                    "is_not_zero": 1,
                    "is_param3_enabled": 1,
                    "is_param3_set": 1,
                    "param3": 6
                },
                "param_4": {
                    "acceleration_parameters": 1,
                    "constant": 2,
                    "double_value": 1,
                    "fixed_point_value": 1,
                    "floating_param": 1,
                    "input_value": 9,
                    "multiplier": 1,
                    "param": 1,
                    "param4": 10,
                    "param_4": 1,
                    "param_value": 2,
                    "value": 1
                },
                "reverse_bits_0800854c": {
                    "reverse_bits": 1
                },
                "reverse_number_bits_08008590": {
                    "reverse_number_bits": 1
                },
                "sqrt": {
                    "calculate_square_root": 1
                },
                "uVar1": {
                    "result": 3,
                    "result1": 16,
                    "result_1": 2,
                    "temp1": 2,
                    "temp_var1": 2
                },
                "uVar2": {
                    "max_acceleration": 1,
                    "max_flag_value": 1,
                    "max_value": 14,
                    "result2": 6,
                    "temp2": 1,
                    "temp_var2": 2
                },
                "uVar3": {
                    "calc_value1": 1,
                    "calculation1": 2,
                    "dividend": 1,
                    "float_value1": 2,
                    "float_var1": 1,
                    "result2": 6,
                    "result3": 4,
                    "result_2": 2,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_var3": 2,
                    "value1": 1,
                    "velocity": 1
                },
                "uVar4": {
                    "acceleration": 1,
                    "calc_value2": 1,
                    "calculation2": 2,
                    "float_value2": 2,
                    "float_var2": 1,
                    "result3": 6,
                    "result4": 4,
                    "result_3": 2,
                    "sqrt_value": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_var4": 2,
                    "value2": 1
                },
                "update_and_mask_value_080018cc": {
                    "update_and_mask_value": 2
                },
                "update_data_080018fc": {
                    "update_data": 2
                }
            },
            "called": [
                "FUN_080098d0",
                "FUN_080018cc",
                "FUN_08008eec",
                "FUN_08009054",
                "FUN_080095b8",
                "FUN_0800854c",
                "FUN_08008590",
                "FUN_08009318",
                "FUN_08008bf0",
                "FUN_08008c30",
                "FUN_080078f4",
                "FUN_08008894",
                "FUN_080018fc",
                "FUN_0800b430",
                "FUN_08002828",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08001d4c"
            ],
            "code": "\nvoid calculate_control_signal_08001994(byte flags,char flag1,char flag2,undefined4 param4)\n\n{\n  undefined4 result1;\n  uint max_value;\n  undefined8 result2;\n  undefined8 result3;\n  byte local_flag;\n  uint value1;\n  uint value2;\n  uint value3;\n  ushort var4;\n  uint var5;\n  int var6;\n  undefined4 var7;\n  uint var8;\n  uint debounced_value;\n  ushort var10;\n  uint var11;\n  uint var12;\n  int var13;\n  int var14;\n  int var15;\n  int var16;\n  ushort var17;\n  uint var18;\n  char counter;\n  \n  counter = '\\0';\n  clear_memory(&value1,0,0xc);\n  if ((flags & 1) != 0) {\n    counter = counter + '\\x01';\n    result2 = float_to_double(DAT_20000ebc);\n    value1 = round_to_longlong((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 2) != 0) {\n    counter = counter + '\\x01';\n    result2 = float_to_double(DAT_20000ec0);\n    value2 = round_to_longlong((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  if ((flags & 4) != 0) {\n    counter = counter + '\\x01';\n    result2 = float_to_double(DAT_20000ec4);\n    value3 = round_to_longlong((int)result2,(int)((ulonglong)result2 >> 0x20));\n  }\n  max_value = value3;\n  if (value3 < value2) {\n    max_value = value2;\n  }\n  var8 = value1;\n  if (value1 < max_value) {\n    var8 = max_value;\n  }\n  result2 = double_to_float_unsigned(var8);\n  result3 = double_to_float_unsigned(counter);\n  result3 = calculate_square_root((int)result3,(int)((ulonglong)result3 >> 0x20));\n  result2 = divide_double((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                   (int)((ulonglong)result3 >> 0x20));\n  var7 = double_to_float_truncated((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = multiply_float(DAT_20000edc,var7);\n  result1 = divide_float(result1,0x453b8000);\n  result2 = float_to_double(result1);\n  result2 = round_up_double((int)result2,(int)((ulonglong)result2 >> 0x20));\n  var6 = double_to_unsigned_integer((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result2 = double_to_float_unsigned(counter);\n  result2 = calculate_square_root((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result3 = float_to_double(param4);\n  result2 = multiply_double((int)result2,(int)((ulonglong)result2 >> 0x20),(int)result3,\n                   (int)((ulonglong)result3 >> 0x20));\n  result1 = double_to_float_truncated((int)result2,(int)((ulonglong)result2 >> 0x20));\n  result1 = multiply_float(var7,result1);\n  result1 = divide_float(0x4c64e1c0,result1);\n  result2 = float_to_double(result1);\n  var5 = round_to_longlong((int)result2,(int)((ulonglong)result2 >> 0x20));\n  var18 = 75000;\n  if (var5 < 75000) {\n    var18 = var5;\n  }\n  var4 = DAT_20000ed4;\n  var17 = DAT_20000ed6 ^ DAT_20000ee6 & 0xaa0;\n  if (flag1 == '\\0') {\n    var17 = var17 ^ 0xaa0;\n  }\n  update_data(var17);\n  update_and_mask_value(var4);\n  var14 = -(var8 >> 1);\n  var13 = var18 - DAT_20000ec9;\n  var12 = 0;\n  var11 = 10000;\n  local_flag = flags;\n  var15 = var14;\n  var16 = var14;\n  while( true ) {\n    var10 = var4;\n    debounced_value = read_debounced_value();\n    if (flag2 == '\\0') {\n      debounced_value = debounced_value ^ 0x1e;\n    }\n    if (((local_flag & 1) != 0) && (var16 = var16 + value1, 0 < var16)) {\n      if ((debounced_value & 0x10) == 0) {\n        local_flag = local_flag & 0xfe;\n      }\n      else {\n        var10 = var10 ^ 0x10;\n      }\n      var16 = var16 - var8;\n    }\n    if (((local_flag & 2) != 0) && (var15 = var15 + value2, 0 < var15)) {\n      if ((debounced_value & 8) == 0) {\n        local_flag = local_flag & 0xfd;\n      }\n      else {\n        var10 = var10 ^ 0x440;\n      }\n      var15 = var15 - var8;\n    }\n    if (((local_flag & 4) != 0) && (var14 = var14 + value3, 0 < var14)) {\n      if ((debounced_value & 4) == 0) {\n        local_flag = local_flag & 0xfb;\n      }\n      else {\n        var10 = var10 ^ 0x100;\n      }\n      var14 = var14 - var8;\n    }\n    if ((local_flag == 0) || ((DAT_20000eaa & 0x10) != 0)) break;\n    update_and_mask_value(var10);\n    delay_microseconds(DAT_20000ec9);\n    update_and_mask_value(var4);\n    delay_microseconds(var13);\n    if ((var5 < var18) && (var11 = var18 + var11, 20000 < var11)) {\n      var11 = var11 - 20000;\n      var12 = var6 + var12;\n      var18 = 60000000 / var12;\n      if (var18 < var5) {\n        var18 = var5;\n      }\n      var13 = var18 - DAT_20000ec9;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "calculate_control_signal_08001994",
            "entrypoint": "0x08001994",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001994": "calculate_control_signal_08001994",
                "__aeabi_d2uiz": "double_to_unsigned_integer",
                "__aeabi_f2d": "float_to_double",
                "__aeabi_fdiv": "divide_float",
                "__aeabi_fmul": "multiply_float",
                "__divdf3": "divide_double",
                "__floatunsidf": "double_to_float_unsigned",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "double_to_float_truncated",
                "ceil": "round_up_double",
                "debounce_rd": "read_debounced_value",
                "delay_us": "delay_microseconds",
                "local_11": "counter",
                "local_18": "var18",
                "local_1a": "var17",
                "local_20": "var16",
                "local_24": "var15",
                "local_28": "var14",
                "local_2c": "var13",
                "local_30": "var12",
                "local_34": "var11",
                "local_36": "var10",
                "local_3c": "debounced_value",
                "local_40": "var8",
                "local_44": "var7",
                "local_48": "var6",
                "local_4c": "var5",
                "local_4e": "var4",
                "local_54": "value3",
                "local_58": "value2",
                "local_5c": "value1",
                "local_61": "local_flag",
                "lround": "round_to_longlong",
                "memset": "clear_memory",
                "param_1": "flags",
                "param_2": "flag1",
                "param_3": "flag2",
                "param_4": "param4",
                "sqrt": "calculate_square_root",
                "uVar1": "result1",
                "uVar2": "max_value",
                "uVar3": "result2",
                "uVar4": "result3",
                "update_and_mask_value_080018cc": "update_and_mask_value",
                "update_data_080018fc": "update_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001d4c": {
            "additional_data": {
                "DAT_20000ee8": {
                    "data_var3": 1,
                    "param3": 3,
                    "param_value3": 1,
                    "parameter2": 2,
                    "some_data3": 1
                },
                "DAT_20000eec": {
                    "data_var1": 1,
                    "param1": 3,
                    "param_value1": 1,
                    "parameter1": 2,
                    "parameter_1": 1,
                    "safety_flag": 1,
                    "some_data1": 1
                },
                "DAT_20000ef0": {
                    "data_var2": 1,
                    "delay": 1,
                    "delay_time": 3,
                    "param2": 3,
                    "param_value2": 1,
                    "some_data2": 1
                },
                "FUNC_08002814": {
                    "function2": 1,
                    "homing_cycle": 3
                },
                "FUN_08001994": {
                    "delay": 2,
                    "delay_milliseconds": 1,
                    "function4": 1
                },
                "FUN_08001d4c": {
                    "perform_homing": 7,
                    "perform_homing_and_go_idle": 1,
                    "perform_homing_and_idle": 1,
                    "perform_homing_cycle": 18,
                    "perform_homing_sequence": 3
                },
                "FUN_08005790": {
                    "function3": 1,
                    "go_idle": 3
                },
                "FUN_080057e4": {
                    "function1": 1,
                    "wake_up": 3
                },
                "F_UNC_08001d4c": {
                    "perform_homing_cycle": 1
                },
                "cVar1": {
                    "decrement": 1,
                    "decremented_count": 1,
                    "decremented_counter": 1,
                    "new_count": 1,
                    "new_countdown": 1,
                    "new_counter": 1,
                    "new_counter_value": 1,
                    "reduced_counter": 1,
                    "temp": 1,
                    "temp_counter": 1,
                    "updated_count": 5,
                    "updated_countdown": 3,
                    "updated_counter": 7,
                    "updated_iteration_count": 1
                },
                "delay_ms": {
                    "delay_milliseconds": 11
                },
                "homing_cycle": {
                    "execute_homing_cycle": 8,
                    "move_robot": 1,
                    "perform_homing_cycle": 2
                },
                "local_9": {
                    "count": 6,
                    "countdown": 6,
                    "counter": 18,
                    "iteration_count": 1
                },
                "param_1": {
                    "axis": 1,
                    "cycle_type": 1,
                    "parameter_1": 1
                },
                "param_2": {
                    "mode": 1,
                    "param1": 1,
                    "parameter_2": 1
                },
                "param_3": {
                    "direction": 1,
                    "param2": 1,
                    "parameter_3": 1
                },
                "param_4": {
                    "duration": 1,
                    "param3": 1,
                    "parameter_4": 1
                },
                "st_go_idle": {
                    "go_idle": 8,
                    "go_idle_state": 2
                },
                "st_wake_up": {
                    "start_wake_up": 1,
                    "wake_up": 8,
                    "wake_up_state": 2
                }
            },
            "called": [
                "FUN_080057e4",
                "FUN_08002814",
                "FUN_08005790",
                "FUN_08001994"
            ],
            "calling": [
                "FUN_080024c4"
            ],
            "code": "\nvoid perform_homing_cycle_08001d4c(void)\n\n{\n  char updated_counter;\n  char counter;\n  \n  wake_up();\n  execute_homing_cycle(4,1,0,DAT_20000eec);\n  execute_homing_cycle(3,1,0,DAT_20000eec);\n  delay_milliseconds(DAT_20000ef0);\n  counter = '\\x02';\n  while( true ) {\n    updated_counter = counter + -1;\n    if (counter == '\\0') break;\n    execute_homing_cycle(7,0,1,DAT_20000ee8);\n    delay_milliseconds(DAT_20000ef0);\n    counter = updated_counter;\n    if ('\\0' < updated_counter) {\n      execute_homing_cycle(7,1,0,DAT_20000ee8);\n      delay_milliseconds(DAT_20000ef0);\n    }\n  }\n  go_idle();\n  return;\n}\n\n",
            "current_name": "perform_homing_cycle_08001d4c",
            "entrypoint": "0x08001d4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001d4c": "perform_homing_cycle_08001d4c",
                "cVar1": "updated_counter",
                "delay_ms": "delay_milliseconds",
                "homing_cycle": "execute_homing_cycle",
                "local_9": "counter",
                "st_go_idle": "go_idle",
                "st_wake_up": "wake_up"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001ddc": {
            "additional_data": {
                "DAT_20000ea8": {
                    "is_initial_run": 1
                },
                "DAT_20000ea9": {
                    "current_state": 1
                },
                "DAT_20000eaa": {
                    "unknown_variable": 1
                },
                "DAT_20000eb8": {
                    "unknown_variable2": 1
                },
                "DAT_20000ee4": {
                    "system_status": 1
                },
                "FUNC_08008244": {
                    "initialize_limits": 4,
                    "limits_init": 21
                },
                "FUNC_080082ba": {
                    "initialize_plan": 2,
                    "plan_init": 23,
                    "protocol_execute_runtime": 1
                },
                "FUN_080001f8": {
                    "reset_st": 4,
                    "spindle_init": 1,
                    "st_reset": 21
                },
                "FUN_080004ac": {
                    "gc_init": 22,
                    "initialize_gc": 3,
                    "protocol_init": 1
                },
                "FUN_0800192c": {
                    "execute_protocol_startup": 1,
                    "func_0800192c": 1,
                    "initialization_complete": 1,
                    "initialize_feedback_message": 1,
                    "initialize_machine": 1,
                    "initialize_machine_helper": 1,
                    "initialize_machine_loop": 1,
                    "initialize_sys": 1,
                    "initialize_sys_sync_current_position": 1,
                    "initialize_sys_sync_params": 1,
                    "initialize_system": 2,
                    "initialize_system_loop": 1,
                    "main_loop": 1,
                    "protocol_execute": 4,
                    "protocol_execute_startup": 2,
                    "protocol_reset": 1,
                    "protocol_reset_write_buffer": 1,
                    "reset_read_buffer": 1,
                    "serial_reset_read_buffer": 2
                },
                "FUN_08001ddc": {
                    "initialize": 1,
                    "initialize_machine": 13,
                    "initialize_system": 17
                },
                "FUN_0800283a": {
                    "execute_startup": 3,
                    "initialize_startup": 1,
                    "plan_init": 1,
                    "protocol_execute_startup": 20,
                    "report_feedback_message": 1
                },
                "FUN_08002f24": {
                    "gc_init": 1,
                    "initialize_report": 1,
                    "report_feedback_message": 20,
                    "reset_read_buffer": 1,
                    "serial_reset_read_buffer": 1,
                    "set_feedback_message": 2
                },
                "FUN_080039a0": {
                    "coolant_init": 21,
                    "initialize_coolant": 4,
                    "sys_sync_current_position": 1
                },
                "FUN_080039bc": {
                    "coolant_init": 1,
                    "sync_current_position": 4,
                    "sys_sync_current_position": 21
                },
                "FUN_08003a74": {
                    "execute_runtime": 4,
                    "protocol_execute_runtime": 20,
                    "protocol_execute_startup": 1,
                    "settings_init": 1
                },
                "FUN_08003f34": {
                    "initialize_serial": 4,
                    "serial_init": 21,
                    "serial_reset_read_buffer": 1
                },
                "FUN_080041a0": {
                    "initialize_st": 4,
                    "protocol_execute_startup": 1,
                    "st_init": 21
                },
                "FUN_080051b4": {
                    "initialize_spindle": 4,
                    "limits_init": 1,
                    "spindle_init": 21
                },
                "FUN_08005238": {
                    "process_protocol": 4,
                    "protocol_execute_runtime": 1,
                    "protocol_process": 20
                },
                "FUN_08005814": {
                    "initialize_settings": 4,
                    "report_feedback_message": 1,
                    "settings_init": 21
                },
                "FUN_0800583c": {
                    "initialize_protocol": 4,
                    "protocol_init": 21
                },
                "FUN_0800b430": {
                    "protocol_process": 1,
                    "report_feedback_message": 4,
                    "serial_reset_read_buffer": 20
                },
                "coolant_init": {
                    "initialize_coolant": 5
                },
                "gc_init": {
                    "initialize_gc": 5
                },
                "limits_init": {
                    "initialize_limits": 5
                },
                "memset": {
                    "clear_memory": 2
                },
                "plan_init": {
                    "initialize_plan": 4,
                    "initialize_planner": 1
                },
                "protocol_execute_runtime": {
                    "execute_protocol_runtime": 1,
                    "execute_runtime": 1,
                    "execute_runtime_protocol": 3
                },
                "protocol_execute_startup": {
                    "execute_protocol_startup": 1,
                    "execute_startup": 1,
                    "execute_startup_protocol": 3
                },
                "protocol_init": {
                    "initialize_protocol": 5
                },
                "protocol_process": {
                    "process_protocol": 5
                },
                "report_feedback_message": {
                    "report_feedback_message": 2,
                    "report_message": 2,
                    "send_feedback_message": 1
                },
                "serial_init": {
                    "initialize_serial": 5
                },
                "serial_reset_read_buffer": {
                    "reset_serial_read_buffer": 5
                },
                "settings_init": {
                    "initialize_settings": 5
                },
                "spindle_init": {
                    "initialize_spindle": 5
                },
                "st_init": {
                    "initialize_st": 5
                },
                "st_reset": {
                    "reset_st": 5
                },
                "sys_sync_current_position": {
                    "sync_current_position": 1,
                    "synchronize_current_position": 4
                }
            },
            "called": [
                "FUN_08003f34",
                "FUN_08005814",
                "FUN_080041a0",
                "FUN_080082ba",
                "FUN_080004ac",
                "FUN_0800583c",
                "FUN_080051b4",
                "FUN_080039a0",
                "FUN_08008244",
                "FUN_080001f8",
                "FUN_080039bc",
                "FUN_08002f24",
                "FUN_0800283a",
                "FUN_08003a74",
                "FUN_08005238",
                "FUN_0800b430",
                "FUN_0800192c"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_system_08001ddc(void)\n\n{\n  initialize_serial();\n  initialize_settings();\n  initialize_st();\n  clear_memory(&DAT_20000ea8,0,0x14);\n  DAT_20000ea8 = '\\x01';\n  DAT_20000ea9 = '\\x01';\n  do {\n    if (DAT_20000ea8 != '\\0') {\n      reset_serial_read_buffer();\n      initialize_plan();\n      initialize_gc();\n      initialize_protocol();\n      initialize_spindle();\n      initialize_coolant();\n      initialize_limits();\n      reset_st();\n      synchronize_current_position();\n      DAT_20000ea8 = '\\0';\n      DAT_20000eaa = 0;\n      if ((DAT_20000ee4 & 2) != 0) {\n        DAT_20000eb8 = 1;\n      }\n      if ((DAT_20000ea9 == '\\x01') && ((DAT_20000ee4 & 0x10) != 0)) {\n        DAT_20000ea9 = '\\x06';\n      }\n      if (DAT_20000ea9 == '\\x06') {\n        report_message(2);\n      }\n      else {\n        DAT_20000ea9 = '\\0';\n        execute_startup_protocol();\n      }\n    }\n    execute_runtime_protocol();\n    process_protocol();\n  } while( true );\n}\n\n",
            "current_name": "initialize_system_08001ddc",
            "entrypoint": "0x08001ddc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001ddc": "initialize_system_08001ddc",
                "coolant_init": "initialize_coolant",
                "gc_init": "initialize_gc",
                "limits_init": "initialize_limits",
                "memset": "clear_memory",
                "plan_init": "initialize_plan",
                "protocol_execute_runtime": "execute_runtime_protocol",
                "protocol_execute_startup": "execute_startup_protocol",
                "protocol_init": "initialize_protocol",
                "protocol_process": "process_protocol",
                "report_feedback_message": "report_message",
                "serial_init": "initialize_serial",
                "serial_reset_read_buffer": "reset_serial_read_buffer",
                "settings_init": "initialize_settings",
                "spindle_init": "initialize_spindle",
                "st_init": "initialize_st",
                "st_reset": "reset_st",
                "sys_sync_current_position": "synchronize_current_position"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001e98": {
            "additional_data": {
                "DAT_20000ea8": {
                    "check_flag": 1,
                    "flag2": 1,
                    "return_flag": 1
                },
                "DAT_20000ea9": {
                    "control_flag": 1,
                    "execution_status": 1,
                    "flag1": 1
                },
                "DAT_20000eb8": {
                    "cycle_flag": 2,
                    "flag3": 1
                },
                "FUN_08001e98": {
                    "check_and_execute_protocol": 1,
                    "execute_and_check_protocol": 2,
                    "execute_buffer_protocol": 2,
                    "execute_buffered_protocol": 1,
                    "execute_command": 1,
                    "execute_commands": 1,
                    "execute_line_buffer": 1,
                    "execute_plan": 1,
                    "execute_protocol": 18,
                    "execute_runtime": 1,
                    "execute_runtime_and_plan_check": 1,
                    "process_protocol_data": 1
                },
                "iVar1": {
                    "buffer_check_result": 9,
                    "check_buffer_result": 1,
                    "check_result": 14,
                    "check_result_flag": 1,
                    "plan_check_result": 1,
                    "result": 1
                },
                "param_1": {
                    "arg1": 2,
                    "argument_1": 1,
                    "buffer1": 7,
                    "buffer_1": 3,
                    "buffer_param": 1,
                    "buffer_param1": 1,
                    "buffer_param_1": 5,
                    "buffer_size": 1,
                    "buffer_start": 1,
                    "data_ptr": 1,
                    "input1": 1,
                    "line1": 1,
                    "line1_param1": 1,
                    "line_1": 1,
                    "line_param_1": 2,
                    "param1": 1,
                    "param_1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "argument_2": 1,
                    "buffer2": 7,
                    "buffer_2": 3,
                    "buffer_end": 1,
                    "buffer_param2": 1,
                    "buffer_param_2": 5,
                    "input2": 1,
                    "length": 1,
                    "length_param": 1,
                    "line1_param2": 1,
                    "line2": 1,
                    "line_2": 1,
                    "line_param_2": 2,
                    "param2": 1,
                    "param_2": 1,
                    "start_address": 1
                },
                "param_3": {
                    "address": 1,
                    "address_param": 1,
                    "arg3": 2,
                    "argument_3": 1,
                    "buffer3": 7,
                    "buffer_3": 3,
                    "buffer_cur": 1,
                    "buffer_param3": 1,
                    "buffer_param_3": 5,
                    "end_address": 1,
                    "input3": 1,
                    "line1_param3": 1,
                    "line3": 1,
                    "line_3": 1,
                    "line_param_3": 2,
                    "param3": 1,
                    "param_3": 1
                },
                "param_4": {
                    "arg4": 2,
                    "argument_4": 1,
                    "buffer4": 7,
                    "buffer_4": 3,
                    "buffer_length": 1,
                    "buffer_limit": 1,
                    "buffer_param4": 1,
                    "buffer_param_4": 5,
                    "data_offset": 1,
                    "format_param": 1,
                    "input4": 1,
                    "line1_param4": 1,
                    "line4": 1,
                    "line_4": 1,
                    "line_param_4": 2,
                    "param4": 1,
                    "param_4": 1
                },
                "param_5": {
                    "arg5": 2,
                    "argument_5": 1,
                    "buffer_5": 1,
                    "buffer_data": 1,
                    "buffer_param5": 1,
                    "buffer_param_5": 5,
                    "character": 1,
                    "command_flag": 1,
                    "data": 1,
                    "flag": 7,
                    "flag_param": 1,
                    "input5": 1,
                    "line1_param5": 1,
                    "line_5": 1,
                    "line_param_5": 2,
                    "param5": 2,
                    "param_5": 2
                },
                "plan_buffer_line": {
                    "buffer_data_to_line": 1,
                    "buffer_line": 3,
                    "buffer_line_plan": 2
                },
                "plan_check_full_buffer": {
                    "check_full_buffer": 4,
                    "check_full_buffer_plan": 2
                },
                "protocol_execute_runtime": {
                    "execute_protocol_runtime": 4,
                    "execute_runtime_protocol": 1
                },
                "st_cycle_start": {
                    "cycle_start": 1,
                    "start_cycle": 4,
                    "start_st_cycle": 1
                }
            },
            "called": [
                "FUN_08002fac",
                "FUN_08003a74",
                "FUN_0800585c",
                "FUN_08003004"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4",
                "FUN_080024c4"
            ],
            "code": "\nvoid check_and_execute_protocol_08001e98(undefined4 buffer1,undefined4 buffer2,undefined4 buffer3,undefined4 buffer4,\n                 undefined flag)\n\n{\n  int check_result;\n  \n  if (DAT_20000ea9 != '\\a') {\n    do {\n      execute_protocol_runtime();\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n      check_result = check_full_buffer();\n    } while (check_result != 0);\n    buffer_line(buffer1,buffer2,buffer3,buffer4,flag);\n    if (DAT_20000ea9 == '\\0') {\n      DAT_20000ea9 = '\\x02';\n    }\n    if (DAT_20000eb8 != '\\0') {\n      start_cycle();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_execute_protocol_08001e98",
            "entrypoint": "0x08001e98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001e98": "check_and_execute_protocol_08001e98",
                "iVar1": "check_result",
                "param_1": "buffer1",
                "param_2": "buffer2",
                "param_3": "buffer3",
                "param_4": "buffer4",
                "param_5": "flag",
                "plan_buffer_line": "buffer_line",
                "plan_check_full_buffer": "check_full_buffer",
                "protocol_execute_runtime": "execute_protocol_runtime",
                "st_cycle_start": "start_cycle"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08001f00": {
            "additional_data": {
                "DAT_20000ea8": {
                    "constant3": 1,
                    "flag4": 1,
                    "stop_flag": 1
                },
                "DAT_20000ed8": {
                    "constant": 1,
                    "constant1": 1,
                    "conversion_factor": 1
                },
                "DAT_20000efa": {
                    "constant2": 1,
                    "limit": 1,
                    "threshold": 1
                },
                "FRESCALC": {
                    "calculate_fresnel": 1
                },
                "FUN_08001f00": {
                    "calculate_angle": 8,
                    "calculate_angle_and_draw_lines": 2,
                    "calculate_angles": 14,
                    "calculate_angles_and_draw_lines": 1,
                    "calculate_coordinates": 1,
                    "calculate_direction": 1,
                    "calculate_line_intersections": 1,
                    "calculate_orientation": 1,
                    "calculate_vectors": 1
                },
                "FUN_080082d0": {
                    "calculate_fun_080082d0": 1
                },
                "FUN_080082d4": {
                    "calculate_fun_080082d4": 1
                },
                "FUN_08008590": {
                    "calculate_fun_08008590": 1
                },
                "FUN_08008640": {
                    "calculate_fun_08008640": 1
                },
                "FUN_08008bf0": {
                    "calculate_fun_08008bf0": 1
                },
                "FUN_08008c30": {
                    "calculate_fun_08008c30": 1
                },
                "FUN_08008cd8": {
                    "calculate_fun_08008cd8": 1
                },
                "FUN_08008cdc": {
                    "calculate_fun_08008cdc": 1
                },
                "FUN_08008e44": {
                    "calculate_fun_08008e44": 1
                },
                "FUN_08008eec": {
                    "calculate_fun_08008eec": 1
                },
                "FUN_08009054": {
                    "calculate_fun_08009054": 1
                },
                "FUN_08009214": {
                    "calculate_fun_08009214": 1
                },
                "FUN_0800923c": {
                    "calculate_fun_0800923c": 1
                },
                "FUN_08009250": {
                    "calculate_fun_08009250": 1
                },
                "FUN_08009410": {
                    "calculate_fun_08009410": 1
                },
                "FUN_080094c0": {
                    "calculate_fun_080094c0": 1
                },
                "FUN_080096e8": {
                    "calculate_fun_080096e8": 1
                },
                "FUN_0800981c": {
                    "calculate_fun_0800981c": 1
                },
                "LOCAL1": {
                    "val1": 1
                },
                "LOCAL10": {
                    "val10": 1
                },
                "LOCAL2": {
                    "val2": 1
                },
                "LOCAL3": {
                    "val3": 1
                },
                "LOCAL4": {
                    "val4": 1
                },
                "LOCAL5": {
                    "val5": 1
                },
                "LOCAL6": {
                    "val6": 1
                },
                "LOCAL7": {
                    "val7": 1
                },
                "LOCAL8": {
                    "val8": 1
                },
                "LOCAL9": {
                    "val9": 1
                },
                "PARAM1": {
                    "x": 1
                },
                "PARAM10": {
                    "g": 1
                },
                "PARAM2": {
                    "y": 1
                },
                "PARAM3": {
                    "z": 1
                },
                "PARAM4": {
                    "a": 1
                },
                "PARAM5": {
                    "b": 1
                },
                "PARAM6": {
                    "c": 1
                },
                "PARAM7": {
                    "d": 1
                },
                "PARAM8": {
                    "e": 1
                },
                "PARAM9": {
                    "f": 1
                },
                "__addsf3": {
                    "add_single_floats": 2
                },
                "__aeabi_d2uiz": {
                    "convert_to_integer": 1,
                    "double_to_unsigned_int": 1
                },
                "__aeabi_dadd": {
                    "add_double": 1
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 1,
                    "convert_to_floating": 1
                },
                "__aeabi_fcmpeq": {
                    "compare_floats_eq": 1
                },
                "__aeabi_fcmpge": {
                    "compare_floats_ge": 1,
                    "compare_floats_greater_or_equal": 1
                },
                "__aeabi_fcmple": {
                    "compare_floats_le": 1,
                    "compare_floats_less_or_equal": 1
                },
                "__aeabi_fdiv": {
                    "divide_floating": 1,
                    "divide_floats": 1
                },
                "__aeabi_fmul": {
                    "multiply_floating": 1,
                    "multiply_floats": 1
                },
                "__aeabi_fsub": {
                    "subtract_floating": 1,
                    "subtract_floats": 1
                },
                "__floatsisf": {
                    "convert_to_single": 1,
                    "int_to_float": 1
                },
                "__muldf3": {
                    "multiply_double_floats": 1,
                    "multiply_doubles": 1
                },
                "__subdf3": {
                    "subtract_double_floats": 1,
                    "subtract_doubles": 1
                },
                "__truncdfsf2": {
                    "convert_to_single": 1,
                    "truncate_double_to_float": 1
                },
                "atan2": {
                    "calculate_arc_tangent": 1,
                    "calculate_arctangent": 1,
                    "calculate_atan2": 1
                },
                "cos": {
                    "calculate_cos": 1,
                    "calculate_cosine": 2
                },
                "floor": {
                    "calculate_floor": 1,
                    "round_down": 1,
                    "round_floats_down": 1
                },
                "hypot": {
                    "calculate_hypotenuse": 1
                },
                "iVar3": {
                    "check": 1,
                    "compare_result": 1,
                    "comparison": 5,
                    "comparison_result": 11,
                    "comparison_value": 1,
                    "condition": 1,
                    "counter": 1,
                    "flag3": 2,
                    "is_less": 1,
                    "result_3": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp_var3": 1,
                    "temp_var_3": 1
                },
                "local_1c": {
                    "intermediate_var_17": 1,
                    "local22": 1,
                    "local_var15": 1,
                    "local_var17": 3,
                    "local_var18": 4,
                    "local_variable16": 1,
                    "local_variable18": 1,
                    "mask_x": 1,
                    "param_d_complement": 1,
                    "result8": 1,
                    "temp10": 1,
                    "temp14": 1,
                    "temp16": 1,
                    "temp17": 1,
                    "temp19": 3,
                    "temp24": 1,
                    "temp_10": 1,
                    "temp_var13": 2,
                    "temp_var24": 1,
                    "value3_neg": 1,
                    "var20": 1,
                    "x_temp": 1
                },
                "local_20": {
                    "angle2": 1,
                    "angle_value5": 1,
                    "intermediate_var_16": 1,
                    "local21": 1,
                    "local_var14": 1,
                    "local_var16": 3,
                    "local_var17": 4,
                    "local_variable15": 1,
                    "local_variable17": 1,
                    "mask": 1,
                    "result7": 1,
                    "rotation": 1,
                    "temp13": 1,
                    "temp15": 1,
                    "temp16": 1,
                    "temp18": 3,
                    "temp23": 1,
                    "temp9": 1,
                    "temp_9": 1,
                    "temp_var12": 1,
                    "temp_var23": 1,
                    "var19": 1,
                    "y_total": 1
                },
                "local_24": {
                    "angle": 3,
                    "angle1": 1,
                    "angle_result": 1,
                    "angle_value4": 1,
                    "intermediate_var_15": 1,
                    "local20": 1,
                    "local_var13": 1,
                    "local_var15": 3,
                    "local_var16": 4,
                    "local_variable14": 1,
                    "local_variable16": 1,
                    "result6": 1,
                    "rotation_angle": 1,
                    "temp15": 1,
                    "temp17": 2,
                    "temp22": 1,
                    "temp_8": 1,
                    "temp_var11": 1,
                    "temp_var22": 1,
                    "truncated": 1,
                    "var18": 1,
                    "y_temp": 1
                },
                "local_26": {
                    "counter": 2,
                    "counter2": 1,
                    "current_step": 1,
                    "i": 2,
                    "index": 1,
                    "index_count": 1,
                    "intermediate_var_14": 1,
                    "iteration": 1,
                    "local19": 1,
                    "local_short": 2,
                    "local_var14": 3,
                    "local_var15": 4,
                    "local_variable15": 1,
                    "loop_iter_var": 1,
                    "temp12": 1,
                    "temp14": 2,
                    "temp16": 1,
                    "temp21": 1,
                    "temp_7": 1,
                    "temp_var14": 1,
                    "temp_var21": 1
                },
                "local_27": {
                    "condition_var": 1,
                    "counter": 3,
                    "counter1": 1,
                    "flag": 3,
                    "flag3": 2,
                    "flag4": 1,
                    "intermediate_var_13": 1,
                    "local18": 1,
                    "local_char": 3,
                    "local_char1": 1,
                    "local_var13": 1,
                    "local_var14": 4,
                    "local_variable14": 1,
                    "num_drawn_lines": 1,
                    "temp11": 1,
                    "temp15": 1,
                    "temp16": 1,
                    "temp20": 1,
                    "temp_6": 1,
                    "temp_var20": 1
                },
                "local_2c": {
                    "intermediate_var_12": 1,
                    "local17": 1,
                    "local_var12": 2,
                    "local_var13": 6,
                    "local_variable13": 2,
                    "scalar1": 1,
                    "sum1": 1,
                    "temp10": 1,
                    "temp12": 1,
                    "temp13": 2,
                    "temp14": 1,
                    "temp15": 1,
                    "temp17": 1,
                    "temp19": 1,
                    "temp8": 1,
                    "temp_5": 1,
                    "temp_var10": 1,
                    "temp_var12": 1,
                    "temp_var19": 1,
                    "temp_var4": 1,
                    "var17": 1,
                    "x_total": 1
                },
                "local_30": {
                    "f4": 1,
                    "intermediate_var_11": 1,
                    "local16": 1,
                    "local_var11": 2,
                    "local_var12": 6,
                    "local_variable12": 2,
                    "some_var8": 1,
                    "sum2": 1,
                    "temp10": 1,
                    "temp11": 1,
                    "temp12": 2,
                    "temp13": 1,
                    "temp14": 1,
                    "temp16": 1,
                    "temp18": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_4": 1,
                    "temp_var11": 1,
                    "temp_var18": 1,
                    "temp_var9": 1,
                    "var16": 1
                },
                "local_34": {
                    "diff1": 1,
                    "f3": 1,
                    "intermediate_var_10": 1,
                    "local15": 1,
                    "local_var10": 2,
                    "local_var11": 6,
                    "local_variable11": 2,
                    "some_var7": 1,
                    "temp10": 1,
                    "temp11": 2,
                    "temp12": 1,
                    "temp13": 1,
                    "temp15": 1,
                    "temp17": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_3": 1,
                    "temp_var10": 1,
                    "temp_var17": 1,
                    "temp_var8": 1,
                    "var15": 1
                },
                "local_38": {
                    "diff2": 1,
                    "f2": 1,
                    "factor4": 1,
                    "hypotenuse_var2": 1,
                    "intermediate_var_9": 1,
                    "local14": 1,
                    "local_var10": 6,
                    "local_var9": 2,
                    "local_variable10": 2,
                    "result4": 1,
                    "temp10": 2,
                    "temp11": 1,
                    "temp12": 1,
                    "temp14": 1,
                    "temp16": 1,
                    "temp5": 1,
                    "temp_2": 1,
                    "temp_var16": 1,
                    "temp_var6": 1,
                    "temp_var9": 1,
                    "var14": 1
                },
                "local_3c": {
                    "f1": 1,
                    "factor3": 1,
                    "hypotenuse_var1": 1,
                    "intermediate_var_8": 1,
                    "local13": 1,
                    "local_var8": 2,
                    "local_var9": 6,
                    "local_variable9": 2,
                    "prod1": 1,
                    "result3": 1,
                    "temp10": 1,
                    "temp13": 1,
                    "temp15": 1,
                    "temp4": 1,
                    "temp7": 1,
                    "temp9": 2,
                    "temp_1": 1,
                    "temp_var15": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "var13": 1
                },
                "local_40": {
                    "angle": 2,
                    "distance": 2,
                    "hypot_result": 1,
                    "hypotenuse": 4,
                    "intermediate_var_7": 1,
                    "length": 1,
                    "line_length": 1,
                    "local12": 1,
                    "local_var7": 2,
                    "local_var8": 6,
                    "local_variable8": 2,
                    "result5": 1,
                    "temp14": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_var14": 1,
                    "temp_var7": 1,
                    "var12": 1
                },
                "local_42": {
                    "angle": 2,
                    "angle_count": 1,
                    "count": 3,
                    "index": 1,
                    "intermediate_var_6": 1,
                    "local11": 1,
                    "local_var6": 2,
                    "local_var7": 6,
                    "local_variable7": 2,
                    "loop_counter": 3,
                    "loop_iter": 1,
                    "num_iterations": 1,
                    "num_steps": 1,
                    "temp13": 1,
                    "temp7": 1,
                    "temp_var13": 1,
                    "var11": 1
                },
                "local_48": {
                    "intermediate_var_5": 1,
                    "local10": 1,
                    "local_var5": 1,
                    "local_var6": 6,
                    "local_variable6": 3,
                    "some_var6": 1,
                    "temp11": 1,
                    "temp12": 2,
                    "temp6": 3,
                    "temp8": 2,
                    "temp9": 1,
                    "temp_var12": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "var1": 1,
                    "var10": 1
                },
                "local_4c": {
                    "array_6": 1,
                    "intermediate_var_4": 1,
                    "local9": 1,
                    "local_var4": 1,
                    "local_var5": 7,
                    "local_variable5": 3,
                    "some_var5": 1,
                    "temp10": 1,
                    "temp11": 2,
                    "temp5": 3,
                    "temp7": 2,
                    "temp8": 2,
                    "temp_var11": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "var2": 1,
                    "var9": 1
                },
                "local_50": {
                    "array_5": 1,
                    "cos_result": 1,
                    "intermediate_var_3": 1,
                    "local8": 1,
                    "local_var3": 1,
                    "local_var4": 7,
                    "local_variable4": 3,
                    "some_var4": 1,
                    "temp10": 2,
                    "temp4": 3,
                    "temp6": 2,
                    "temp7": 2,
                    "temp9": 1,
                    "temp_var10": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "var8": 1
                },
                "local_54": {
                    "array_4": 1,
                    "cos_arg": 1,
                    "intermediate_var_2": 1,
                    "local7": 1,
                    "local_var2": 1,
                    "local_var3": 7,
                    "local_variable3": 3,
                    "some_var3": 1,
                    "temp3": 3,
                    "temp5": 2,
                    "temp6": 2,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var9": 1,
                    "var7": 1
                },
                "local_58": {
                    "array_3": 1,
                    "intermediate_var_1": 1,
                    "local6": 1,
                    "local_var1": 1,
                    "local_var2": 7,
                    "local_variable2": 3,
                    "sin_result": 1,
                    "some_var2": 1,
                    "temp2": 3,
                    "temp4": 2,
                    "temp5": 2,
                    "temp7": 1,
                    "temp8": 2,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "temp_var8": 1,
                    "var6": 1
                },
                "local_5c": {
                    "array_2": 1,
                    "local5": 1,
                    "local_var": 1,
                    "local_var1": 7,
                    "local_variable1": 3,
                    "sin_arg": 1,
                    "some_var1": 1,
                    "temp1": 3,
                    "temp3": 2,
                    "temp4": 2,
                    "temp6": 1,
                    "temp7": 2,
                    "temp_var1": 1,
                    "temp_var7": 1,
                    "var5": 1
                },
                "local_6c": {
                    "arr_result": 1,
                    "array1": 2,
                    "array_1": 1,
                    "coordinates": 3,
                    "coordinates_array": 1,
                    "end_point_coordinates": 1,
                    "intermediate_arr": 1,
                    "intermediate_array": 1,
                    "local_array1": 4,
                    "point3": 1,
                    "result_arr": 1,
                    "result_array": 5,
                    "temp_array": 5,
                    "temp_array1": 2,
                    "values_arr": 1
                },
                "mc_line": {
                    "draw_line": 3
                },
                "param_1": {
                    "arg1": 1,
                    "array1": 6,
                    "base_address": 1,
                    "input1": 4,
                    "input_arr_1": 1,
                    "input_array1": 2,
                    "param1": 2,
                    "param_1": 1,
                    "param_a": 2,
                    "point1": 3,
                    "point1_start": 1,
                    "ptr1": 2,
                    "ptr_a": 1,
                    "src_start": 1,
                    "start_point": 1,
                    "x1": 1
                },
                "param_10": {
                    "bool2": 1,
                    "calculation4": 1,
                    "char2": 2,
                    "char_value2": 1,
                    "condition2": 1,
                    "condition_2": 1,
                    "flag2": 5,
                    "flip2": 1,
                    "is_end_point_invert": 1,
                    "is_positive": 1,
                    "param10": 3,
                    "param4": 4,
                    "param8": 1,
                    "param_10": 1,
                    "param_d": 1,
                    "param_j": 2,
                    "reverse_flag": 1,
                    "val_g": 1,
                    "var4": 1
                },
                "param_2": {
                    "array": 1,
                    "array2": 6,
                    "coordinates": 1,
                    "data": 1,
                    "dst_start": 1,
                    "end_points": 1,
                    "input2": 3,
                    "input_arr_2": 1,
                    "input_array": 1,
                    "input_array2": 2,
                    "param2": 2,
                    "param_2": 1,
                    "param_b": 2,
                    "point1_end": 1,
                    "point2": 3,
                    "ptr2": 2,
                    "ptr_b": 1
                },
                "param_3": {
                    "arg3": 1,
                    "array3": 6,
                    "input2": 1,
                    "input3": 3,
                    "input_array3": 2,
                    "offset": 1,
                    "output_arr": 1,
                    "param1": 1,
                    "param3": 2,
                    "param_3": 1,
                    "param_c": 2,
                    "point2_start": 1,
                    "point3": 3,
                    "ptr3": 1,
                    "ptr_c": 1,
                    "src_end": 1,
                    "start_point_index": 1,
                    "y1": 1
                },
                "param_4": {
                    "angle1": 1,
                    "byte1": 7,
                    "byte_value1": 1,
                    "coordinate1": 1,
                    "index1": 4,
                    "index_1": 1,
                    "input_byte1": 1,
                    "param2": 1,
                    "param4": 2,
                    "param_4": 1,
                    "param_d": 2,
                    "point1_x": 1,
                    "start_point_x": 1,
                    "val1": 1,
                    "val_a": 1,
                    "value1": 1,
                    "x1": 1,
                    "x2": 1,
                    "x_index": 1
                },
                "param_5": {
                    "angle2": 1,
                    "byte2": 7,
                    "byte_value2": 1,
                    "coordinate2": 1,
                    "index2": 4,
                    "index_2": 1,
                    "input_byte2": 1,
                    "param3": 1,
                    "param5": 2,
                    "param_5": 1,
                    "param_e": 2,
                    "point1_y": 1,
                    "start_point_y": 1,
                    "val2": 1,
                    "val_b": 1,
                    "value2": 1,
                    "x2": 1,
                    "y2": 1,
                    "y_index": 1
                },
                "param_6": {
                    "angle3": 1,
                    "byte3": 7,
                    "byte_value3": 1,
                    "coordinate3": 1,
                    "end_point_index": 1,
                    "index": 1,
                    "index3": 4,
                    "index_3": 1,
                    "input_byte3": 1,
                    "param4": 1,
                    "param6": 2,
                    "param_6": 1,
                    "param_f": 2,
                    "point1_z": 1,
                    "val3": 1,
                    "val_c": 1,
                    "value3": 1,
                    "x3": 1,
                    "z_index": 1
                },
                "param_7": {
                    "angle_value1": 1,
                    "arg4": 1,
                    "calculation1": 1,
                    "constant1": 2,
                    "constant_1": 1,
                    "factor1": 1,
                    "float_value1": 2,
                    "line_color": 1,
                    "param1": 4,
                    "param5": 1,
                    "param7": 3,
                    "param_7": 1,
                    "param_a": 1,
                    "param_g": 2,
                    "ratio1": 1,
                    "scale": 1,
                    "scale1": 1,
                    "scaling_factor": 1,
                    "val4": 1,
                    "val_d": 1,
                    "value1": 1,
                    "var1": 1
                },
                "param_8": {
                    "angle_value2": 1,
                    "bool1": 1,
                    "calculation2": 1,
                    "char1": 2,
                    "char_value1": 1,
                    "condition1": 1,
                    "condition_1": 1,
                    "flag": 1,
                    "flag1": 5,
                    "flip1": 1,
                    "is_start_point_invert": 1,
                    "param2": 4,
                    "param6": 1,
                    "param8": 3,
                    "param_8": 1,
                    "param_b": 1,
                    "param_h": 2,
                    "val_e": 1,
                    "var2": 1
                },
                "param_9": {
                    "angle_value3": 1,
                    "arg5": 1,
                    "calculation3": 1,
                    "constant2": 2,
                    "constant_2": 1,
                    "factor": 1,
                    "factor2": 1,
                    "float_value2": 2,
                    "line_width": 1,
                    "param3": 4,
                    "param7": 1,
                    "param9": 3,
                    "param_9": 1,
                    "param_c": 1,
                    "param_i": 2,
                    "ratio2": 1,
                    "scale2": 2,
                    "val5": 1,
                    "val_f": 1,
                    "value2": 1,
                    "var3": 1
                },
                "sin": {
                    "calculate_sin": 1,
                    "calculate_sine": 2
                },
                "uVar1": {
                    "result1": 21,
                    "result_1": 1,
                    "temp1": 6,
                    "temp_var1": 1,
                    "temp_var_1": 1
                },
                "uVar2": {
                    "result2": 21,
                    "result_2": 1,
                    "temp2": 6,
                    "temp_var2": 1,
                    "temp_var_2": 1
                },
                "uVar4": {
                    "calc1": 1,
                    "calculation": 1,
                    "result3": 8,
                    "result_4": 1,
                    "temp": 2,
                    "temp1": 5,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 3,
                    "temp_result": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1
                },
                "uVar5": {
                    "calc2": 1,
                    "result3": 3,
                    "result4": 8,
                    "result_5": 1,
                    "temp2": 5,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_result": 1,
                    "temp_result1": 1,
                    "temp_value2": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var_5": 1,
                    "trigonometric1": 1
                },
                "uVar6": {
                    "calc3": 1,
                    "result4": 3,
                    "result5": 8,
                    "result_6": 1,
                    "temp3": 5,
                    "temp5": 2,
                    "temp6": 3,
                    "temp_calculation": 1,
                    "temp_result2": 1,
                    "temp_value3": 1,
                    "temp_var3": 1,
                    "temp_var6": 1,
                    "temp_var_6": 1,
                    "trigonometric2": 1
                }
            },
            "called": [
                "FUN_08001e98",
                "FUN_080096e8",
                "FUN_08008cd8",
                "FUN_080082d4",
                "FUN_08009818",
                "FUN_08008eec",
                "FUN_08008cdc",
                "FUN_08009250",
                "FUN_080094c0",
                "FUN_08009054",
                "FUN_0800923c",
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08009410",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_0800981c",
                "FUN_08008c30",
                "FUN_08009214",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid calculate_angles_and_draw_lines_08001f00(int array1,undefined4 *array2,int array3,byte byte1,byte byte2,byte byte3\n                 ,undefined4 param1,char flag1,undefined4 param3,char flag2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  int comparison_result;\n  uint result3;\n  undefined8 result4;\n  undefined8 result5;\n  uint result_array [4];\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined4 local_var3;\n  undefined4 local_var4;\n  undefined4 local_var5;\n  undefined4 local_var6;\n  ushort local_var7;\n  undefined4 local_var8;\n  undefined4 local_var9;\n  undefined4 local_var10;\n  uint local_var11;\n  undefined4 local_var12;\n  undefined4 local_var13;\n  char local_var14;\n  ushort local_var15;\n  undefined4 local_var16;\n  uint local_var17;\n  uint local_var18;\n  \n  local_var13 = add_single_floats(*(undefined4 *)((uint)byte1 * 4 + array1),\n                      *(undefined4 *)((uint)byte1 * 4 + array3));\n  local_var12 = add_single_floats(*(undefined4 *)((uint)byte2 * 4 + array1),\n                      *(undefined4 *)((uint)byte2 * 4 + array3));\n  local_var11 = subtract_floats(array2[byte3],*(undefined4 *)((uint)byte3 * 4 + array1));\n  local_var18 = *(uint *)((uint)byte1 * 4 + array3) ^ 0x80000000;\n  local_var17 = *(uint *)((uint)byte2 * 4 + array3) ^ 0x80000000;\n  local_var10 = subtract_floats(array2[byte1],local_var13);\n  local_var9 = subtract_floats(array2[byte2],local_var12);\n  result1 = multiply_floats(local_var18,local_var9);\n  result2 = multiply_floats(local_var17,local_var10);\n  result1 = subtract_floats(result1,result2);\n  result4 = convert_float_to_double(result1);\n  result1 = multiply_floats(local_var18,local_var10);\n  result2 = multiply_floats(local_var17,local_var9);\n  result1 = add_single_floats(result1,result2);\n  result5 = convert_float_to_double(result1);\n  result4 = calculate_atan2((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                (int)((ulonglong)result5 >> 0x20));\n  local_var16 = convert_to_single((int)result4,(int)((ulonglong)result4 >> 0x20));\n  if (flag2 == '\\0') {\n    comparison_result = compare_floats_le(local_var16,0);\n    if (comparison_result != 0) {\n      result4 = convert_float_to_double(local_var16);\n      result4 = add_double((int)result4,(int)((ulonglong)result4 >> 0x20),0x54442d18,0x401921fb);\n      local_var16 = convert_to_single((int)result4,(int)((ulonglong)result4 >> 0x20));\n    }\n  }\n  else {\n    comparison_result = compare_floats_ge(local_var16,0);\n    if (comparison_result != 0) {\n      result4 = convert_float_to_double(local_var16);\n      result4 = subtract_double_floats((int)result4,(int)((ulonglong)result4 >> 0x20),0x54442d18,0x401921fb);\n      local_var16 = convert_to_single((int)result4,(int)((ulonglong)result4 >> 0x20));\n    }\n  }\n  result1 = multiply_floats(local_var16,param3);\n  result4 = convert_float_to_double(result1);\n  result5 = convert_float_to_double(local_var11 & 0x7fffffff);\n  result4 = calculate_hypotenuse((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                (int)((ulonglong)result5 >> 0x20));\n  local_var8 = convert_to_single((int)result4,(int)((ulonglong)result4 >> 0x20));\n  comparison_result = compare_floats_eq(local_var8,0);\n  if (comparison_result == 0) {\n    result1 = divide_floats(local_var8,DAT_20000ed8);\n    result4 = convert_float_to_double(result1);\n    result4 = round_floats_down((int)result4,(int)((ulonglong)result4 >> 0x20));\n    local_var7 = convert_to_integer((int)result4,(int)((ulonglong)result4 >> 0x20));\n    if (flag1 != '\\0') {\n      result1 = int_to_float(local_var7);\n      param1 = multiply_floats(param1,result1);\n    }\n    result1 = int_to_float(local_var7);\n    local_var6 = divide_floats(local_var16,result1);\n    result1 = int_to_float(local_var7);\n    local_var5 = divide_floats(local_var11,result1);\n    result4 = convert_float_to_double(local_var6);\n    result4 = multiply_doubles((int)result4,(int)((ulonglong)result4 >> 0x20),0,0x3fe00000);\n    result5 = convert_float_to_double(local_var6);\n    result4 = multiply_doubles((int)result4,(int)((ulonglong)result4 >> 0x20),(int)result5,\n                     (int)((ulonglong)result5 >> 0x20));\n    result4 = subtract_double_floats(0,0x3ff00000,(int)result4,(int)((ulonglong)result4 >> 0x20));\n    local_var4 = convert_to_single((int)result4,(int)((ulonglong)result4 >> 0x20));\n    local_var3 = local_var6;\n    local_var14 = '\\0';\n    result_array[byte3] = *(uint *)(array1 + (uint)byte3 * 4);\n    for (local_var15 = 1; local_var15 < local_var7; local_var15 = local_var15 + 1) {\n      if ((int)local_var14 < (int)(uint)DAT_20000efa) {\n        result1 = multiply_floats(local_var18,local_var3);\n        result2 = multiply_floats(local_var17,local_var4);\n        result_array[3] = add_single_floats(result1,result2);\n        result1 = multiply_floats(local_var18,local_var4);\n        result2 = multiply_floats(local_var17,local_var3);\n        local_var18 = subtract_floats(result1,result2);\n        local_var17 = result_array[3];\n        local_var14 = local_var14 + '\\x01';\n      }\n      else {\n        result1 = int_to_float(local_var15);\n        result1 = multiply_floats(result1,local_var6);\n        result4 = convert_float_to_double(result1);\n        result4 = calculate_cosine((int)result4,(int)((ulonglong)result4 >> 0x20));\n        local_var2 = convert_to_single((int)result4,(int)((ulonglong)result4 >> 0x20));\n        result1 = int_to_float(local_var15);\n        result1 = multiply_floats(result1,local_var6);\n        result4 = convert_float_to_double(result1);\n        result4 = calculate_sine((int)result4,(int)((ulonglong)result4 >> 0x20));\n        local_var1 = convert_to_single((int)result4,(int)((ulonglong)result4 >> 0x20));\n        result1 = multiply_floats(*(uint *)((uint)byte1 * 4 + array3) ^ 0x80000000,local_var2);\n        result2 = multiply_floats(*(undefined4 *)((uint)byte2 * 4 + array3),local_var1);\n        local_var18 = add_single_floats(result1,result2);\n        result1 = multiply_floats(*(uint *)((uint)byte1 * 4 + array3) ^ 0x80000000,local_var1);\n        result2 = multiply_floats(*(undefined4 *)((uint)byte2 * 4 + array3),local_var2);\n        local_var17 = subtract_floats(result1,result2);\n        local_var14 = '\\0';\n      }\n      result3 = add_single_floats(local_var13,local_var18);\n      result_array[byte1] = result3;\n      result3 = add_single_floats(local_var12,local_var17);\n      result_array[byte2] = result3;\n      result3 = add_single_floats(result_array[byte3],local_var5);\n      result_array[byte3] = result3;\n      draw_line(result_array[0],result_array[1],result_array[2],param1,flag1);\n      if (DAT_20000ea8 != '\\0') {\n        return;\n      }\n    }\n    draw_line(*array2,array2[1],array2[2],param1,flag1);\n  }\n  return;\n}\n\n",
            "current_name": "calculate_angles_and_draw_lines_08001f00",
            "entrypoint": "0x08001f00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08001f00": "calculate_angles_and_draw_lines_08001f00",
                "__addsf3": "add_single_floats",
                "__aeabi_d2uiz": "convert_to_integer",
                "__aeabi_dadd": "add_double",
                "__aeabi_f2d": "convert_float_to_double",
                "__aeabi_fcmpeq": "compare_floats_eq",
                "__aeabi_fcmpge": "compare_floats_ge",
                "__aeabi_fcmple": "compare_floats_le",
                "__aeabi_fdiv": "divide_floats",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_fsub": "subtract_floats",
                "__floatsisf": "int_to_float",
                "__muldf3": "multiply_doubles",
                "__subdf3": "subtract_double_floats",
                "__truncdfsf2": "convert_to_single",
                "atan2": "calculate_atan2",
                "cos": "calculate_cosine",
                "floor": "round_floats_down",
                "hypot": "calculate_hypotenuse",
                "iVar3": "comparison_result",
                "local_1c": "local_var18",
                "local_20": "local_var17",
                "local_24": "local_var16",
                "local_26": "local_var15",
                "local_27": "local_var14",
                "local_2c": "local_var13",
                "local_30": "local_var12",
                "local_34": "local_var11",
                "local_38": "local_var10",
                "local_3c": "local_var9",
                "local_40": "local_var8",
                "local_42": "local_var7",
                "local_48": "local_var6",
                "local_4c": "local_var5",
                "local_50": "local_var4",
                "local_54": "local_var3",
                "local_58": "local_var2",
                "local_5c": "local_var1",
                "local_6c": "result_array",
                "mc_line": "draw_line",
                "param_1": "array1",
                "param_10": "flag2",
                "param_2": "array2",
                "param_3": "array3",
                "param_4": "byte1",
                "param_5": "byte2",
                "param_6": "byte3",
                "param_7": "param1",
                "param_8": "flag1",
                "param_9": "param3",
                "sin": "calculate_sine",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar4": "result3",
                "uVar5": "result4",
                "uVar6": "result5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002408": {
            "additional_data": {
                "FUN_08002408": {
                    "calculate_and_delay": 1,
                    "calculate_delay": 11,
                    "calculate_delay_and_execute": 2,
                    "calculate_delay_and_execute_protocol": 9,
                    "calculate_delay_and_wait": 2,
                    "delay_and_execute_protocol": 1,
                    "perform_synchronization": 1,
                    "perform_task": 1,
                    "process_data": 1,
                    "synchronize_and_delay": 1,
                    "update_delay": 1
                },
                "delay_ms": {
                    "delay_milliseconds": 1
                },
                "local_12": {
                    "count": 1,
                    "counter": 3,
                    "delay_count": 2,
                    "delay_ticks": 1,
                    "iteration_count": 5,
                    "loop_count": 3,
                    "loop_counter": 10,
                    "num_iterations": 1,
                    "remaining_executions": 1,
                    "remaining_iterations": 1,
                    "remaining_loops": 2,
                    "rounded_delay": 1
                },
                "param_1": {
                    "delay_multiplier": 1,
                    "input": 2,
                    "input_parameter": 3,
                    "input_value": 22,
                    "multiplier": 3
                },
                "plan_synchronize": {
                    "synchronize_plans": 1
                },
                "protocol_execute_runtime": {
                    "execute_protocol_runtime": 1
                },
                "uVar1": {
                    "calculated_value": 1,
                    "calculated_value_1": 2,
                    "converted_delay": 2,
                    "converted_loop_count": 1,
                    "converted_value_1": 2,
                    "delay": 2,
                    "delay_value": 2,
                    "floor_result": 1,
                    "result1": 1,
                    "result_1": 5,
                    "result_as_u_int": 1,
                    "result_rounded": 1,
                    "result_value1": 1,
                    "rounded_delay": 3,
                    "rounded_subtraction_result": 1,
                    "temp_var_1": 1,
                    "temp_variable1": 1
                },
                "uVar2": {
                    "calculated_value_2": 2,
                    "converted_value_2": 1,
                    "mul_result_1": 2,
                    "multiplied_value": 10,
                    "result2": 1,
                    "result_1": 1,
                    "result_2": 3,
                    "scaled_input": 1,
                    "scaled_param": 1,
                    "scaled_value": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "temp_value_1": 1,
                    "temp_var_1": 1,
                    "temp_var_2": 1,
                    "temp_variable2": 1
                },
                "uVar3": {
                    "calculated_value": 1,
                    "calculated_value_3": 2,
                    "converted_constant": 1,
                    "converted_value_2": 1,
                    "converted_value_3": 1,
                    "float_cast_result": 1,
                    "float_to_int": 1,
                    "floatsisf_result": 1,
                    "result3": 1,
                    "result_2": 1,
                    "result_3": 3,
                    "scaled_delay": 1,
                    "scaled_value": 2,
                    "shifted_local": 1,
                    "subtracted_val": 1,
                    "subtracted_value": 5,
                    "subtraction_result": 1,
                    "temp2": 1,
                    "temp_value2": 1,
                    "temp_value_2": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_variable3": 1
                },
                "uVar4": {
                    "calculated_value_4": 2,
                    "converted_delay": 1,
                    "converted_value": 8,
                    "converted_value_4": 1,
                    "double_scaled_input": 1,
                    "double_value": 1,
                    "f2d_result": 1,
                    "float_to_double_result": 1,
                    "floored_result": 1,
                    "floored_value": 2,
                    "result4": 1,
                    "result_4": 3,
                    "result_as_double": 1,
                    "rounded_value": 1,
                    "temp_double": 2,
                    "temp_value3": 1,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "temp_variable4": 1
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_08002814",
                "FUN_08008eec",
                "FUN_08003a74",
                "FUN_080094c0",
                "FUN_080002a0",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid calculate_delay_and_execute_protocol_08002408(undefined4 input_value)\n\n{\n  undefined2 result_1;\n  undefined4 multiplied_value;\n  undefined4 subtracted_value;\n  undefined8 converted_value;\n  ushort loop_counter;\n  \n  multiplied_value = __aeabi_fmul(input_value,0x41a00000);\n  converted_value = __aeabi_f2d(multiplied_value);\n  converted_value = floor((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  loop_counter = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  synchronize_plans();\n  multiplied_value = __aeabi_fmul(input_value,0x447a0000);\n  subtracted_value = __floatsisf((uint)loop_counter * 0x32);\n  multiplied_value = __aeabi_fsub(multiplied_value,subtracted_value);\n  converted_value = __aeabi_f2d(multiplied_value);\n  converted_value = floor((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  result_1 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n  delay_milliseconds(result_1);\n  while ((loop_counter != 0 && (execute_protocol_runtime(), DAT_20000ea8 == '\\0'))) {\n    _delay_milliseconds(0x32);\n    loop_counter = loop_counter - 1;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_delay_and_execute_protocol_08002408",
            "entrypoint": "0x08002408",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002408": "calculate_delay_and_execute_protocol_08002408",
                "delay_ms": "delay_milliseconds",
                "local_12": "loop_counter",
                "param_1": "input_value",
                "plan_synchronize": "synchronize_plans",
                "protocol_execute_runtime": "execute_protocol_runtime",
                "uVar1": "result_1",
                "uVar2": "multiplied_value",
                "uVar3": "subtracted_value",
                "uVar4": "converted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080024c4": {
            "additional_data": {
                "DAT_20000e4c": {
                    "cycle_finished": 1,
                    "data2": 1,
                    "flag_value": 1
                },
                "DAT_20000ea8": {
                    "is_condition_met": 1,
                    "is_reversed": 1,
                    "runtime_flag": 1
                },
                "DAT_20000ea9": {
                    "default_limit": 1
                },
                "DAT_20000eac": {
                    "memory_location": 1,
                    "temp_buffer": 1
                },
                "DAT_20000ee4": {
                    "cycle_flags": 1,
                    "data1": 1,
                    "data_20000ee4": 1,
                    "flags2": 1,
                    "status_flags": 1,
                    "sync_condition": 1
                },
                "DAT_20000ee6": {
                    "direction_flags": 1,
                    "flags": 1,
                    "sync_flags": 1
                },
                "DAT_20000eec": {
                    "line_width": 1,
                    "value": 1
                },
                "DAT_20000ef4": {
                    "float_value": 1,
                    "scaling_factor": 1
                },
                "DTT_20000e4c": {
                    "flag": 1
                },
                "DTT_20000ea8": {
                    "condition": 1
                },
                "DTT_20000ea9": {
                    "desired_velocity": 1
                },
                "DTT_20000eac": {
                    "buffer": 1
                },
                "DTT_20000ee4": {
                    "another_flag": 1
                },
                "DTT_20000ee6": {
                    "mask": 1
                },
                "DTT_20000eec": {
                    "some_value": 1
                },
                "DTT_20000ef4": {
                    "scaling_factor": 1
                },
                "FUN_08001d4c": {
                    "clear_buffer": 1,
                    "execute_protocol_execute_runtime": 1,
                    "go_home": 1,
                    "limits_go_home": 4,
                    "protocol_execute_runtime": 2,
                    "reset_position": 1,
                    "unknown_function_3": 1
                },
                "FUN_08001e98": {
                    "calculate_float_value": 1,
                    "configure_limits": 1,
                    "convert": 1,
                    "execute_limits_go_home": 1,
                    "get_limit_value": 1,
                    "limit_check": 1,
                    "limits_go_home": 3,
                    "set_limits": 1,
                    "unknown_function_1": 1
                },
                "FUN_080024c4": {
                    "execute_and_synchronize": 1,
                    "execute_protocol": 1,
                    "initialize": 1,
                    "initialize_and_execute": 1,
                    "initialize_and_sync": 6,
                    "initialize_control_system": 1,
                    "initialize_robot": 2,
                    "initialize_system": 16,
                    "update_position_and_check_limits": 1,
                    "update_position_and_sync": 1
                },
                "FUN_0800283a": {
                    "calculate_position": 1,
                    "func_0800283a": 1,
                    "reset_data": 1,
                    "reset_data_memory": 1,
                    "start_cycle": 1,
                    "sync_current_position": 1,
                    "sys_sync_current_position": 3,
                    "unknown_function_5": 1
                },
                "FUN_08002fd4": {
                    "check_e4_to_8": 1,
                    "check_flags": 1,
                    "func_08002fd4": 1,
                    "mc_line": 1,
                    "plan_synchronize": 2,
                    "set_flag": 1,
                    "sys_sync_current_position": 2,
                    "unknown_function_9": 1
                },
                "FUN_08003a74": {
                    "calculate_motion": 1,
                    "func_08003a74": 1,
                    "mc_line": 2,
                    "set_flag": 1,
                    "st_cycle_start": 1,
                    "synchronize_plan": 1,
                    "sys_sync_current_position": 2,
                    "unknown_function_6": 1
                },
                "FUN_0800585c": {
                    "cycle_synchronization": 1,
                    "func_0800585c": 1,
                    "mc_line": 2,
                    "st_cycle_start": 2,
                    "start_cycle": 1,
                    "sync_current_position": 1,
                    "sys_sync_current_position": 1,
                    "unknown_function_7": 1
                },
                "FUN_08008e44": {
                    "calculate": 1,
                    "float_to_integer": 1,
                    "mc_line": 1,
                    "protocol_execute_runtime": 1,
                    "unknown_function_2": 1
                },
                "FUN_08008eec": {
                    "adjust": 1,
                    "execute_protocol": 2,
                    "execute_protocol_runtime": 1,
                    "perform_mc_line": 1,
                    "protocol_execute_runtime": 2,
                    "set_direction": 1,
                    "sys_sync_current_position": 1,
                    "unknown_function_4": 1
                },
                "FUN_0800b430": {
                    "check_status_and_set_flag": 1,
                    "func_0800b430": 1,
                    "plan_synchronize": 2,
                    "set_e4c": 1,
                    "st_cycle_start": 2,
                    "sync_and_update_position": 1,
                    "synchronize_plan": 1,
                    "unknown_function_8": 1
                },
                "__aeabi_fmul": {
                    "multiply_float": 3,
                    "multiply_floats": 3
                },
                "__floatsisf": {
                    "convert_to_float": 4,
                    "convert_to_int_to_float": 1,
                    "int_to_float": 1
                },
                "limits_go_home": {
                    "calculate_home_limits": 1,
                    "go_home": 2,
                    "go_to_home_position": 1
                },
                "local_11": {
                    "enable_limit1": 1,
                    "enable_sync": 1,
                    "flag1": 3,
                    "is_condition1": 2,
                    "is_condition1_set": 1,
                    "is_flag_set": 1,
                    "is_flag_set1": 1,
                    "is_flag_set3": 2,
                    "is_flag_set_a": 1,
                    "is_limit1_enabled": 1,
                    "is_limit_reached": 1,
                    "is_local_var1": 1,
                    "is_runtime_enabled": 1,
                    "is_x_negative": 1,
                    "limit1": 3,
                    "limit1_enabled": 1,
                    "limit_switch1": 1,
                    "move_forward": 1,
                    "up_direction": 1,
                    "z_axis_direction": 1
                },
                "local_12": {
                    "down_direction": 1,
                    "enable_cyclic": 1,
                    "enable_limit2": 1,
                    "flag2": 3,
                    "is_condition2": 2,
                    "is_condition2_set": 1,
                    "is_flag_set2": 4,
                    "is_flag_set_b": 1,
                    "is_home_enabled": 1,
                    "is_limit2_enabled": 1,
                    "is_limit_reached_positive_dir": 1,
                    "is_local_var2": 1,
                    "is_y_negative": 1,
                    "limit2": 3,
                    "limit2_enabled": 1,
                    "limit_switch2": 1,
                    "turn_left": 1,
                    "y_axis_direction": 1
                },
                "local_13": {
                    "enable_limit3": 1,
                    "enable_line": 1,
                    "flag3": 3,
                    "is_condition3": 2,
                    "is_condition3_set": 1,
                    "is_flag_set1": 2,
                    "is_flag_set3": 2,
                    "is_flag_set_c": 1,
                    "is_limit3_enabled": 1,
                    "is_limit_enabled": 1,
                    "is_limit_reached_negative_dir": 1,
                    "is_local_var3": 1,
                    "is_z_negative": 1,
                    "left_direction": 1,
                    "limit3": 3,
                    "limit3_enabled": 1,
                    "limit_switch3": 1,
                    "turn_right": 1,
                    "x_axis_direction": 1
                },
                "mc_line": {
                    "draw_line": 4,
                    "draw_mc_line": 2,
                    "move_to_position": 1
                },
                "memset": {
                    "clear_memory": 5
                },
                "plan_synchronize": {
                    "synchronize_plan": 7,
                    "synchronize_plans": 1
                },
                "protocol_execute_runtime": {
                    "execute_protocol_runtime": 2,
                    "execute_runtime_protocol": 2
                },
                "st_cycle_start": {
                    "start_cycle": 6,
                    "start_st_cycle": 1
                },
                "sys_sync_current_position": {
                    "sync_current_position": 4,
                    "synchronize_current_position": 1,
                    "update_current_position": 1
                },
                "uVar1": {
                    "converted_condition1": 1,
                    "converted_flag1": 1,
                    "float_value1": 1,
                    "forward_speed": 1,
                    "limit1_float": 1,
                    "limit1_value": 2,
                    "limit_reached_pos_multiply": 1,
                    "limit_switch1_value": 1,
                    "line_speed": 1,
                    "result1": 5,
                    "result_a": 1,
                    "scaled_limit1": 1,
                    "up_scaled": 1,
                    "x_value": 1
                },
                "uVar2": {
                    "converted_condition2": 1,
                    "converted_flag2": 1,
                    "cyclic_speed": 1,
                    "down_scaled": 1,
                    "float_value2": 1,
                    "left_speed": 1,
                    "limit2_float": 1,
                    "limit2_value": 2,
                    "limit_reached_pos_dir_multiply": 1,
                    "limit_switch2_value": 1,
                    "result2": 5,
                    "result_b": 1,
                    "scaled_limit2": 1,
                    "y_value": 1
                },
                "uVar3": {
                    "converted_condition3": 1,
                    "converted_flag3": 1,
                    "float_value3": 1,
                    "left_scaled": 1,
                    "limit3_float": 1,
                    "limit3_value": 2,
                    "limit_reached_neg_dir_multiply": 1,
                    "limit_switch3_value": 1,
                    "result3": 5,
                    "result_c": 1,
                    "right_speed": 1,
                    "scaled_limit3": 1,
                    "sync_speed": 1,
                    "z_value": 1
                }
            },
            "called": [
                "FUN_08001e98",
                "FUN_08008e44",
                "FUN_08001d4c",
                "FUN_08008eec",
                "FUN_0800283a",
                "FUN_08003a74",
                "FUN_0800585c",
                "FUN_0800b430",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid initialize_control_system_080024c4(void)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  char flag3;\n  char is_flag_set2;\n  char limit1;\n  \n  DAT_20000ea9 = 5;\n  DAT_20000e4c = 0;\n  go_home();\n  execute_protocol_runtime();\n  if (DAT_20000ea8 == '\\0') {\n    clear_memory(&DAT_20000eac,0,0xc);\n    sync_current_position();\n    DAT_20000ea9 = 0;\n    if ((DAT_20000ee6 & 0x20) == 0) {\n      limit1 = -1;\n    }\n    else {\n      limit1 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x80) == 0) {\n      is_flag_set2 = -1;\n    }\n    else {\n      is_flag_set2 = '\\x01';\n    }\n    if ((DAT_20000ee6 & 0x200) == 0) {\n      flag3 = -1;\n    }\n    else {\n      flag3 = '\\x01';\n    }\n    result1 = convert_to_float((int)limit1);\n    result1 = multiply_floats(result1,DAT_20000ef4);\n    result2 = convert_to_float((int)is_flag_set2);\n    result2 = multiply_floats(result2,DAT_20000ef4);\n    result3 = convert_to_float((int)flag3);\n    result3 = multiply_floats(result3,DAT_20000ef4);\n    draw_line(result1,result2,result3,DAT_20000eec,0);\n    start_cycle();\n    synchronize_plan();\n    sync_current_position();\n    if ((DAT_20000ee4 & 8) != 0) {\n      DAT_20000e4c = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_control_system_080024c4",
            "entrypoint": "0x080024c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080024c4": "initialize_control_system_080024c4",
                "__aeabi_fmul": "multiply_floats",
                "__floatsisf": "convert_to_float",
                "limits_go_home": "go_home",
                "local_11": "limit1",
                "local_12": "is_flag_set2",
                "local_13": "flag3",
                "mc_line": "draw_line",
                "memset": "clear_memory",
                "plan_synchronize": "synchronize_plan",
                "protocol_execute_runtime": "execute_protocol_runtime",
                "st_cycle_start": "start_cycle",
                "sys_sync_current_position": "sync_current_position",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080025e8": {
            "additional_data": {
                "DAT_20000ea9": {
                    "coolant_level": 1,
                    "counter": 1,
                    "limit_counter": 1
                },
                "DAT_20000eaa": {
                    "control_flags": 1,
                    "device_flags": 1,
                    "status_register": 1
                },
                "FUN_08000210": {
                    "": 1,
                    "coolant_stop": 16,
                    "disable_coolant": 1,
                    "perform_operation_b": 2,
                    "reverse_abc": 1,
                    "spindle_stop": 4,
                    "stop_coolant": 1,
                    "stop_spindle": 2,
                    "turn_off_coolant": 1
                },
                "FUN_080025e8": {
                    "apply_control_logic": 1,
                    "check_and_handle_stop_state": 1,
                    "check_and_stop_spindle": 4,
                    "control_spindle_and_coolant": 1,
                    "handle_stop_command": 1,
                    "handle_stop_condition": 1,
                    "initialize_device": 1,
                    "initialize_system": 1,
                    "perform_machine_cleanup": 1,
                    "shutdown_and_idle": 1,
                    "spindle_control": 1,
                    "stop_and_idle": 5,
                    "stop_and_idle_check": 3,
                    "stop_and_idle_if_needed": 1,
                    "stop_spindle_and_coolant": 5,
                    "stop_spindle_coolant": 1,
                    "update_system_state": 1,
                    "update_system_status": 1
                },
                "FUN_08005250": {
                    "": 1,
                    "coolant_stop": 3,
                    "go_idle": 4,
                    "go_to_idle_state": 1,
                    "idle_state_transition": 1,
                    "perform_operation_c": 2,
                    "reverse_def": 1,
                    "st_go_idle": 14,
                    "stop_coolant": 2
                },
                "FUN_080057e4": {
                    "": 1,
                    "check_spindle_status": 1,
                    "disable_spindle": 1,
                    "idle": 1,
                    "idle_state_transition": 1,
                    "initialize_spindle": 1,
                    "perform_operation_a": 2,
                    "reset_coolant_sensor": 1,
                    "reverse_xyz": 1,
                    "rotate_spindle": 1,
                    "spindle_stop": 16,
                    "stop_spindle": 1,
                    "turn_off_spindle": 1
                },
                "coolant_stop": {
                    "stop_coolant": 3
                },
                "spindle_stop": {
                    "stop_spindle": 3
                },
                "st_go_idle": {
                    "go_idle": 2
                }
            },
            "called": [
                "FUN_080057e4",
                "FUN_08000210",
                "FUN_08005250"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08005900",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "code": "\nvoid stop_and_idle_check_080025e8(void)\n\n{\n  if ((DAT_20000eaa & 0x10) == 0) {\n    DAT_20000eaa = DAT_20000eaa | 0x10;\n    stop_spindle();\n    stop_coolant();\n    if (DAT_20000ea9 - 3 < 3) {\n      DAT_20000eaa = DAT_20000eaa | 0x20;\n      go_idle();\n    }\n  }\n  return;\n}\n\n",
            "current_name": "stop_and_idle_check_080025e8",
            "entrypoint": "0x080025e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080025e8": "stop_and_idle_check_080025e8",
                "coolant_stop": "stop_coolant",
                "spindle_stop": "stop_spindle",
                "st_go_idle": "go_idle"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002638": {
            "additional_data": {
                "FUN_08002638": {
                    "convert_string_to_float": 1,
                    "convert_string_to_unsigned_int": 1,
                    "extract_integer": 1,
                    "parse_and_convert_number": 1,
                    "parse_and_convert_to_int": 1,
                    "parse_int": 1,
                    "parse_int_from_string": 1,
                    "parse_integer": 19,
                    "parse_number": 5
                },
                "bVar1": {
                    "digit": 28,
                    "is_digit": 1,
                    "parsed_digit": 1
                },
                "bVar2": {
                    "is_negative": 25,
                    "negative": 5
                },
                "bVar3": {
                    "decimal": 1,
                    "decimal_found": 1,
                    "decimal_point": 1,
                    "dot_seen": 1,
                    "encountered_decimal": 1,
                    "exponent_exists": 1,
                    "found_decimal": 1,
                    "has_decimal": 5,
                    "has_decimal_point": 1,
                    "has_fractional_part": 1,
                    "hexadecimal": 1,
                    "is_decimal": 3,
                    "is_exponent": 3,
                    "is_exponential": 1,
                    "is_float": 2,
                    "is_floating_point": 3,
                    "is_fractional": 3
                },
                "iVar4": {
                    "compare_result": 3,
                    "comparison": 1,
                    "comparison_result": 17,
                    "float_cmp_result": 1,
                    "float_comparison": 3,
                    "float_zero": 1,
                    "is_zero": 1,
                    "temp_var": 1
                },
                "local_14": {
                    "converted_int": 1,
                    "int_value": 6,
                    "integer": 1,
                    "integer_part": 8,
                    "integer_result": 6,
                    "integer_temp": 1,
                    "integer_value": 3,
                    "parsed_value": 1,
                    "result": 3,
                    "result_int": 1
                },
                "local_15": {
                    "decimal_count": 11,
                    "decimal_offset": 1,
                    "decimal_places": 3,
                    "decimal_places_count": 1,
                    "dot_count": 1,
                    "exponent": 7,
                    "exponent_count": 2,
                    "fraction_length": 1,
                    "fractional_count": 2,
                    "fractional_part_count": 1,
                    "num_decimals": 1
                },
                "local_16": {
                    "digit_count": 30,
                    "num_digits": 1
                },
                "local_1c": {
                    "converted_float": 4,
                    "converted_value": 1,
                    "decimal_value": 1,
                    "float_integer": 1,
                    "float_integer_part": 1,
                    "float_result": 5,
                    "float_temp": 1,
                    "float_value": 11,
                    "floating_result": 1,
                    "fraction_part": 1,
                    "int_value": 2,
                    "temp_float": 2
                },
                "local_c": {
                    "current": 1,
                    "current_address": 1,
                    "current_byte": 1,
                    "current_pointer": 1,
                    "current_pos": 3,
                    "current_position": 6,
                    "current_ptr": 1,
                    "current_symbol_pointer": 1,
                    "input_ptr": 1,
                    "iterator": 1,
                    "next_address": 1,
                    "next_byte": 1,
                    "next_char": 2,
                    "next_char_pointer": 1,
                    "next_char_ptr": 2,
                    "next_data": 1,
                    "next_digit": 4,
                    "next_pointer": 1,
                    "next_symbol": 1
                },
                "local_d": {
                    "curr_digit": 1,
                    "current_byte": 1,
                    "current_char": 5,
                    "current_digit": 8,
                    "current_sign": 2,
                    "current_symbol": 3,
                    "digit_char": 1,
                    "first_char": 6,
                    "sign": 1,
                    "sign_char": 3
                },
                "param_1": {
                    "base": 2,
                    "base_address": 9,
                    "input": 1,
                    "input_base": 2,
                    "input_index": 1,
                    "input_length": 1,
                    "input_ptr": 1,
                    "offset": 2,
                    "param": 1,
                    "param1": 1,
                    "param_base": 1,
                    "start": 3,
                    "start_address": 3,
                    "start_index": 2,
                    "starting_address": 1
                },
                "param_2": {
                    "buffer": 2,
                    "byte_arr": 1,
                    "byte_array": 1,
                    "byte_pointer": 1,
                    "input": 2,
                    "input_buffer": 1,
                    "input_data": 2,
                    "input_str": 1,
                    "input_string": 11,
                    "str": 5,
                    "string": 3,
                    "string_ptr": 1
                },
                "param_3": {
                    "output": 5,
                    "output_integer": 1,
                    "output_ptr": 1,
                    "output_value": 9,
                    "result": 13,
                    "result_pointer": 1,
                    "result_ptr": 1
                },
                "pcVar5": {
                    "curr_char": 1,
                    "current_address": 1,
                    "current_char": 24,
                    "current_char_ptr": 2,
                    "next_address": 1,
                    "next_char_ptr": 1
                },
                "pcVar6": {
                    "current_char_ptr": 1,
                    "initial_char_ptr": 1,
                    "next_char": 24,
                    "next_char_ptr": 1,
                    "offset_address": 1,
                    "start_char": 1,
                    "starting_address": 1
                },
                "uVar7": {
                    "result": 2,
                    "return_code": 3,
                    "return_val": 3,
                    "return_value": 21
                },
                "uVar8": {
                    "calculation": 1,
                    "float_calc": 1,
                    "float_multiply_temp": 1,
                    "float_result": 2,
                    "float_temp": 1,
                    "float_value": 1,
                    "floating_point_result": 1,
                    "temp": 2,
                    "temp_double": 1,
                    "temp_float": 2,
                    "temp_result": 5,
                    "temp_value": 10,
                    "temp_var": 1
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008e3c",
                "FUN_08008c30",
                "FUN_08008eec",
                "FUN_08008640",
                "FUN_08009214"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_0800184c"
            ],
            "code": "\nundefined4 parse_integer_08002638(int base_address,byte *input_string,uint *result)\n\n{\n  byte digit;\n  bool is_negative;\n  bool has_decimal;\n  int comparison_result;\n  char *current_char;\n  char *next_char;\n  undefined4 return_value;\n  undefined8 temp_value;\n  uint float_value;\n  byte digit_count;\n  char decimal_count;\n  int integer_part;\n  char current_digit;\n  char *current_position;\n  \n  next_char = (char *)(base_address + (uint)*input_string);\n  current_char = next_char + 1;\n  current_digit = *next_char;\n  is_negative = false;\n  if (current_digit == '-') {\n    is_negative = true;\n    current_digit = *current_char;\n    current_position = next_char + 2;\n  }\n  else {\n    current_position = current_char;\n    if (current_digit == '+') {\n      current_position = next_char + 2;\n      current_digit = *current_char;\n    }\n  }\n  integer_part = 0;\n  decimal_count = '\\0';\n  digit_count = 0;\n  has_decimal = false;\n  do {\n    digit = current_digit - 0x30;\n    if (digit < 10) {\n      digit_count = digit_count + 1;\n      if (digit_count < 9) {\n        if (has_decimal) {\n          decimal_count = decimal_count + -1;\n        }\n        integer_part = (uint)digit + integer_part * 10;\n      }\n      else if (!has_decimal) {\n        decimal_count = decimal_count + '\\x01';\n      }\n    }\n    else {\n      if ((digit != 0xfe) || (has_decimal)) {\n        if (digit_count == 0) {\n          return_value = 0;\n        }\n        else {\n          float_value = __floatunsisf(integer_part);\n          comparison_result = __aeabi_fcmpeq(float_value,0);\n          if (comparison_result == 0) {\n            for (; decimal_count < -1; decimal_count = decimal_count + '\\x02') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x47ae147b,0x3f847ae1);\n              float_value = __truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            if (decimal_count < '\\0') {\n              temp_value = __aeabi_f2d(float_value);\n              temp_value = __muldf3((int)temp_value,(int)((ulonglong)temp_value >> 0x20),0x9999999a,0x3fb99999);\n              float_value = __truncdfsf2((int)temp_value,(int)((ulonglong)temp_value >> 0x20));\n            }\n            else {\n              for (; '\\0' < decimal_count; decimal_count = decimal_count + -1) {\n                float_value = __aeabi_fmul(float_value,0x41200000);\n              }\n            }\n          }\n          if (is_negative) {\n            *result = float_value ^ 0x80000000;\n          }\n          else {\n            *result = float_value;\n          }\n          *input_string = ((char)current_position - (char)base_address) - 1;\n          return_value = 1;\n        }\n        return return_value;\n      }\n      has_decimal = true;\n    }\n    current_digit = *current_position;\n    current_position = current_position + 1;\n  } while( true );\n}\n\n",
            "current_name": "parse_integer_08002638",
            "entrypoint": "0x08002638",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002638": "parse_integer_08002638",
                "bVar1": "digit",
                "bVar2": "is_negative",
                "bVar3": "has_decimal",
                "iVar4": "comparison_result",
                "local_14": "integer_part",
                "local_15": "decimal_count",
                "local_16": "digit_count",
                "local_1c": "float_value",
                "local_c": "current_position",
                "local_d": "current_digit",
                "param_1": "base_address",
                "param_2": "input_string",
                "param_3": "result",
                "pcVar5": "current_char",
                "pcVar6": "next_char",
                "uVar7": "return_value",
                "uVar8": "temp_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002814": {
            "called": [],
            "calling": [
                "FUN_08001d4c",
                "FUN_08002408",
                "FUN_08004148"
            ],
            "code": "\nvoid FUNC_08002814(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002814",
            "entrypoint": "0x08002814",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002814": "FUNC_08002814"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08002828": {
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nvoid FUNC_08002828(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08002828",
            "entrypoint": "0x08002828",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08002828": "FUNC_08002828"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800283a": {
            "additional_data": {
                "FUN_080004fc": {
                    "gc_set_current_position": 3,
                    "gc_set_position_subfunc": 1,
                    "set_current_position_2": 1,
                    "set_current_position_gc": 4,
                    "set_gc_current_position": 6,
                    "set_gc_position": 6,
                    "update_position": 1,
                    "update_position_gc": 1
                },
                "FUN_0800283a": {
                    "initialize_current_position": 1,
                    "initialize_current_positions": 1,
                    "initialize_position": 2,
                    "initialize_positions": 1,
                    "set_and_update_positions": 2,
                    "set_current_and_position": 3,
                    "set_current_and_update_positions": 1,
                    "set_current_position": 4,
                    "set_current_position_functions": 1,
                    "set_current_positions": 1,
                    "set_position": 1,
                    "set_positions": 2,
                    "setup_positions": 1,
                    "update_current_and_gc_position": 1,
                    "update_current_and_gc_positions": 2,
                    "update_current_positions": 1,
                    "update_position": 1,
                    "update_positions": 5
                },
                "FUN_080035ec": {
                    "plan_set_current_position": 1,
                    "set_current_position": 2,
                    "set_current_position_1": 1,
                    "set_current_position_plan": 4,
                    "set_plan_current_position": 6,
                    "set_plan_position": 5,
                    "set_planned_position": 1,
                    "set_position": 1,
                    "set_position_subfunc": 1,
                    "update_position_plan": 1
                },
                "param_1": {
                    "arg1": 1,
                    "arg_1": 1,
                    "position1": 1,
                    "position_1": 20,
                    "position_param1": 1,
                    "position_param_1": 2,
                    "position_parameter1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "arg_2": 1,
                    "position2": 1,
                    "position_2": 20,
                    "position_param2": 1,
                    "position_param_2": 2,
                    "position_parameter2": 1,
                    "value_2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "arg_3": 1,
                    "position3": 1,
                    "position_3": 20,
                    "position_param3": 1,
                    "position_param_3": 2,
                    "position_parameter3": 1,
                    "value_3": 1
                }
            },
            "called": [
                "FUN_080035ec",
                "FUN_080004fc"
            ],
            "calling": [
                "FUN_08001ddc",
                "FUN_080024c4"
            ],
            "code": "\nvoid set_current_and_update_positions_0800283a(void)\n\n{\n  plan_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  gc_set_current_position(DAT_20000eac,DAT_20000eb0,DAT_20000eb4);\n  return;\n}\n\n",
            "current_name": "set_current_and_update_positions_0800283a",
            "entrypoint": "0x0800283a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800283a": "set_current_and_update_positions_0800283a"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002870": {
            "additional_data": {
                "FUN_08002870": {
                    "add_one_and_reset": 1,
                    "increment_and_check": 8,
                    "increment_and_check_boundary": 1,
                    "increment_and_check_limit": 5,
                    "increment_and_check_limits": 1,
                    "increment_and_check_overflow": 1,
                    "increment_and_check_value": 1,
                    "increment_and_limit": 5,
                    "increment_and_reset": 3,
                    "increment_and_reset_if_equal18": 1,
                    "increment_and_reset_if_equal_to18": 1,
                    "increment_and_sanitize": 1,
                    "increment_and_wrap": 1,
                    "increment_and_wrap_around": 1
                },
                "local_9": {
                    "incremented_value": 2,
                    "result": 29
                },
                "param_1": {
                    "input": 16,
                    "input_char": 2,
                    "input_value": 7,
                    "original_value": 1,
                    "value": 3,
                    "value_to_increment": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08002e08",
                "FUN_08002f40",
                "FUN_08002ef0",
                "FUN_08002ba8",
                "FUN_08003004"
            ],
            "code": "\nchar increment_and_check_limit_08002870(char input)\n\n{\n  char result;\n  \n  result = input + '\\x01';\n  if (result == '\\x12') {\n    result = '\\0';\n  }\n  return result;\n}\n\n",
            "current_name": "increment_and_check_limit_08002870",
            "entrypoint": "0x08002870",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002870": "increment_and_check_limit_08002870",
                "local_9": "result",
                "param_1": "input"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002896": {
            "additional_data": {
                "FUN_08002896": {
                    "char_to_byte": 1,
                    "convert_char_to_decimal": 1,
                    "convert_character": 1,
                    "convert_to_ascii": 1,
                    "decr_with_default": 1,
                    "decrement_and_default": 5,
                    "decrement_and_default_to18": 2,
                    "decrement_and_default_value": 1,
                    "decrement_and_set_default": 3,
                    "decrement_and_set_default_value": 1,
                    "decrement_value": 1,
                    "increment_and_shift": 1,
                    "modify_char_value": 1,
                    "normalize_character": 1,
                    "reverse_and_decrement_char": 1,
                    "subtract_one_and_default_value": 1,
                    "subtract_one_from_char": 1,
                    "transform_char": 1,
                    "transform_character": 1,
                    "update_char": 2,
                    "update_character": 3
                },
                "local_9": {
                    "converted_char": 2,
                    "modified_char": 3,
                    "new_char": 1,
                    "normalized_character": 1,
                    "output": 1,
                    "output_char": 1,
                    "result": 13,
                    "result_char": 5,
                    "updated_char": 1,
                    "updated_character": 3
                },
                "param_1": {
                    "character": 3,
                    "input": 5,
                    "input_char": 14,
                    "input_character": 1,
                    "input_value": 6,
                    "value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nchar decrement_and_set_default_value_08002896(char input_char)\n\n{\n  char result;\n  \n  result = input_char;\n  if (input_char == '\\0') {\n    result = '\\x12';\n  }\n  return result + -1;\n}\n\n",
            "current_name": "decrement_and_set_default_value_08002896",
            "entrypoint": "0x08002896",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002896": "decrement_and_set_default_value_08002896",
                "local_9": "result",
                "param_1": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080028bc": {
            "additional_data": {
                "FUN_080028bc": {
                    "calculate_dividend": 1,
                    "calculate_dividend_ratio": 1,
                    "calculate_division": 6,
                    "calculate_division_coefficient": 1,
                    "calculate_division_factor": 1,
                    "calculate_division_ratio": 12,
                    "calculate_division_result": 9
                },
                "FUN_08008cd8": {
                    "multiply_and_subtract": 1
                },
                "FUN_08008cdc": {
                    "multiply_and_subtract": 1
                },
                "FUN_08008eec": {
                    "multiply_and_subtract": 1
                },
                "FUN_08009054": {
                    "multiply_and_subtract": 1
                },
                "__addsf3": {
                    "calculate_sum": 1,
                    "double_integer": 1,
                    "sum_function": 1
                },
                "__aeabi_fdiv": {
                    "calculate_division": 1,
                    "divide_float": 1,
                    "divide_function": 1
                },
                "__aeabi_fmul": {
                    "calculate_product": 1,
                    "multiply_float": 1,
                    "multiply_function": 1
                },
                "__aeabi_fsub": {
                    "calculate_difference": 1,
                    "subtract_float": 1,
                    "subtract_function": 1
                },
                "param_1": {
                    "input1": 2,
                    "input_1": 8,
                    "input_param_1": 1,
                    "input_value_1": 3,
                    "investment": 1,
                    "num1": 2,
                    "number1": 1,
                    "numerator": 2,
                    "side_length": 5,
                    "side_length_1": 2,
                    "side_length_square": 1,
                    "side_length_squared": 1,
                    "value_1": 2
                },
                "param_2": {
                    "denominator1": 2,
                    "diagonal_length": 1,
                    "diagonal_squared": 1,
                    "input2": 2,
                    "input_2": 8,
                    "input_param_2": 1,
                    "input_value_2": 3,
                    "interest_rate": 1,
                    "num2": 2,
                    "number2": 1,
                    "side_length_2": 2,
                    "side_length_rect": 1,
                    "side_length_squared": 1,
                    "value_2": 2,
                    "width": 3
                },
                "param_3": {
                    "circle_radius": 1,
                    "circumference": 1,
                    "denominator2": 2,
                    "diagonal_length": 2,
                    "dividend": 1,
                    "height": 2,
                    "input3": 2,
                    "input_3": 8,
                    "input_param_3": 1,
                    "input_value_3": 3,
                    "num3": 2,
                    "number3": 1,
                    "radius": 2,
                    "radius_squared": 1,
                    "value_3": 2
                },
                "uVar1": {
                    "area_of_rectangle": 1,
                    "diagonal_squared_product": 1,
                    "rect_area": 1,
                    "side_length_squared_times_two": 1,
                    "square_denominator1": 1,
                    "squared_denominator1": 1,
                    "squared_diagonal": 1,
                    "squared_difference": 1,
                    "squared_input2": 1,
                    "squared_input_2": 7,
                    "squared_input_param_2": 1,
                    "squared_input_value_2": 2,
                    "squared_interest_rate": 1,
                    "squared_length_2": 1,
                    "squared_num2": 2,
                    "squared_number2": 1,
                    "squared_product": 1,
                    "squared_value": 1,
                    "squared_value_2": 2,
                    "width_squared": 3
                },
                "uVar2": {
                    "area_of_circle": 1,
                    "circle_area": 1,
                    "diagonal_length_squared": 1,
                    "double_denominator2": 1,
                    "double_input_3": 1,
                    "double_num3": 1,
                    "doubled_circumference": 1,
                    "doubled_input3": 1,
                    "doubled_input_3": 2,
                    "doubled_value": 1,
                    "doubled_value_3": 1,
                    "height_squared": 2,
                    "radius_doubled": 1,
                    "radius_squared_sum": 1,
                    "squared_denominator2": 1,
                    "squared_input_1": 5,
                    "squared_input_param_1": 1,
                    "squared_input_value_1": 2,
                    "squared_investment": 1,
                    "squared_length_1": 1,
                    "squared_number1": 1,
                    "sum_of_value_3": 1,
                    "sum_squared_nums": 1,
                    "twice_input3": 1
                }
            },
            "called": [
                "FUN_08008cd8",
                "FUN_08008eec",
                "FUN_08008cdc",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_division_ratio_080028bc(undefined4 input_1,undefined4 input_2,undefined4 input_3)\n\n{\n  undefined4 squared_input_2;\n  undefined4 squared_input_1;\n  \n  squared_input_2 = calculate_product(input_2,input_2);\n  squared_input_1 = calculate_product(input_1,input_1);\n  squared_input_2 = subtract_function(squared_input_2,squared_input_1);\n  squared_input_1 = double_integer(input_3,input_3);\n  squared_input_2 = divide_function(squared_input_2,squared_input_1);\n  return squared_input_2;\n}\n\n",
            "current_name": "calculate_division_ratio_080028bc",
            "entrypoint": "0x080028bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080028bc": "calculate_division_ratio_080028bc",
                "__addsf3": "double_integer",
                "__aeabi_fdiv": "divide_function",
                "__aeabi_fmul": "calculate_product",
                "__aeabi_fsub": "subtract_function",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "uVar1": "squared_input_2",
                "uVar2": "squared_input_1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002908": {
            "additional_data": {
                "0x40800000": {
                    "c": 1,
                    "constant": 1,
                    "constant_value": 1
                },
                "FUN_08002908": {
                    "calculate_dividend": 1,
                    "calculate_division": 5,
                    "calculate_division_factor": 2,
                    "calculate_division_ratio": 6,
                    "calculate_division_result": 4,
                    "calculate_final_result": 1,
                    "calculate_result": 12
                },
                "FUN_08008cd8": {
                    "multiply_and_add": 1
                },
                "FUN_08008cdc": {
                    "multiply_and_add2": 1
                },
                "FUN_08008eec": {
                    "multiply_and_subtract": 1
                },
                "FUN_08009054": {
                    "multiply_and_divide": 1
                },
                "__addsf3": {
                    "add_double": 1,
                    "sum_floats": 1,
                    "sum_of_float_numbers": 1,
                    "sum_of_two_floats": 1
                },
                "__addsf3_1": {
                    "updated_sum": 1
                },
                "__aeabi_fdiv": {
                    "divide_double": 1,
                    "divide_floats": 1,
                    "divide_two_floats": 1
                },
                "__aeabi_fmul": {
                    "multiply_double": 1,
                    "multiply_float_numbers": 1,
                    "multiply_floats": 1,
                    "multiply_two_floats": 1
                },
                "__aeabi_fsub": {
                    "subtract_double": 1,
                    "subtract_float_numbers": 1,
                    "subtract_floats": 1,
                    "subtract_two_floats": 1
                },
                "param_1": {
                    "divisor_1": 1,
                    "input1": 3,
                    "input_1": 15,
                    "input_param1": 1,
                    "number1": 1,
                    "side_length": 3,
                    "value1": 6,
                    "value_1": 1
                },
                "param_2": {
                    "base_length": 2,
                    "divisor_2": 1,
                    "height": 1,
                    "input2": 3,
                    "input_2": 15,
                    "input_param2": 1,
                    "number2": 1,
                    "value2": 6,
                    "value_2": 1
                },
                "param_3": {
                    "height": 2,
                    "input3": 3,
                    "input_3": 15,
                    "input_param3": 1,
                    "multiplier_1": 1,
                    "number3": 1,
                    "radius": 1,
                    "value3": 6,
                    "value_3": 1
                },
                "param_4": {
                    "constant": 1,
                    "input4": 3,
                    "input_4": 15,
                    "input_param4": 1,
                    "multiplier_2": 1,
                    "number4": 1,
                    "scale_factor": 1,
                    "scaling_factor": 1,
                    "value4": 6,
                    "value_4": 1
                },
                "uVar1": {
                    "double_sum": 1,
                    "double_value": 1,
                    "doubled_input_3": 2,
                    "doubled_radius": 1,
                    "intermediate_result_1": 2,
                    "result": 2,
                    "result1": 4,
                    "result_1": 1,
                    "squared_input_3": 1,
                    "squared_multiple_input_3": 1,
                    "squared_sum": 1,
                    "sum_1": 1,
                    "sum_of_squared_heights": 1,
                    "sum_squared_inputs": 1,
                    "temp1": 5,
                    "temp_1": 3,
                    "temp_result_1": 2,
                    "twice_height_scale_factor": 1
                },
                "uVar2": {
                    "base_length_squared": 1,
                    "input_1_squared": 1,
                    "intermediate_result_2": 2,
                    "result2": 4,
                    "result_2": 1,
                    "square_param1": 1,
                    "squared_input_1": 2,
                    "squared_input_2": 3,
                    "squared_number1": 1,
                    "squared_side_length": 1,
                    "squared_value1": 1,
                    "sum_2": 1,
                    "sum_of_squared_side_lengths": 1,
                    "temp2": 5,
                    "temp_2": 3,
                    "temp_result_2": 2,
                    "temp_value": 1
                }
            },
            "called": [
                "FUN_08008cd8",
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_08002c18"
            ],
            "code": "\nundefined4 calculate_division_result_08002908(undefined4 input_1,undefined4 input_2,undefined4 input_3,undefined4 input_4)\n\n{\n  undefined4 temp1;\n  undefined4 temp2;\n  \n  temp1 = sum_of_two_floats(input_3,input_3);\n  temp1 = multiply_double(temp1,input_4);\n  temp2 = multiply_double(input_1,input_1);\n  temp1 = subtract_float_numbers(temp1,temp2);\n  temp2 = multiply_double(input_2,input_2);\n  temp1 = sum_of_two_floats(temp1,temp2);\n  temp2 = multiply_double(input_3,0x40800000);\n  temp1 = divide_double(temp1,temp2);\n  return temp1;\n}\n\n",
            "current_name": "calculate_division_result_08002908",
            "entrypoint": "0x08002908",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002908": "calculate_division_result_08002908",
                "__addsf3": "sum_of_two_floats",
                "__aeabi_fdiv": "divide_double",
                "__aeabi_fmul": "multiply_double",
                "__aeabi_fsub": "subtract_float_numbers",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "temp1",
                "uVar2": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002978": {
            "additional_data": {
                "FUN_08002978": {
                    "calculate_and_truncate": 1,
                    "calculate_contribution": 1,
                    "calculate_difference": 1,
                    "calculate_distance": 20,
                    "calculate_error": 1,
                    "calculate_result": 2,
                    "calculate_root_difference": 2,
                    "calculate_square_root": 2,
                    "calculate_subtraction_sqrt": 1
                },
                "FUN_08008590": {
                    "convert_to_double": 2,
                    "divide_64bit": 1,
                    "sqrt_helper": 1,
                    "sqrt_integer": 1
                },
                "FUN_08008c30": {
                    "multiply_32bit": 1,
                    "multiply_by_constant": 1,
                    "multiply_integer": 1,
                    "multiply_uintegers": 1,
                    "square_integer": 1
                },
                "FUN_08008cd8": {
                    "multiply_and_add": 1,
                    "subtract": 1,
                    "subtract_integer": 1,
                    "subtract_uintegers": 2
                },
                "FUN_08008cdc": {
                    "add": 1,
                    "multiply_and_subtract": 1,
                    "multiply_subtract_integer": 1,
                    "multiply_uintegers": 1,
                    "subtract_uintegers_2": 1
                },
                "FUN_08008eec": {
                    "multiply_32bit_add": 1,
                    "multiply_add_integer": 1,
                    "multiply_uintegers_2": 1,
                    "square_root": 1,
                    "square_root_integer": 1
                },
                "FUN_080098d0": {
                    "addition_operation": 1,
                    "multiply": 2,
                    "multiply_floats": 2
                },
                "__addsf3": {
                    "add": 1,
                    "add_float": 2,
                    "add_floats": 4
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 4,
                    "convert_to_double": 1,
                    "float_to_double": 2
                },
                "__aeabi_fmul": {
                    "multiply": 2,
                    "multiply_float": 2,
                    "multiply_floats": 3
                },
                "__aeabi_fsub": {
                    "subtract": 2,
                    "subtract_float": 2,
                    "subtract_floats": 3
                },
                "__truncdfsf2": {
                    "convert_double_to_float": 2,
                    "convert_to_float": 1,
                    "truncate_double_to_float": 3,
                    "truncate_to_float": 1
                },
                "param_1": {
                    "input1": 3,
                    "input_1": 4,
                    "input_value": 1,
                    "input_value1": 1,
                    "number_1": 1,
                    "side_length1": 1,
                    "value": 1,
                    "value1": 2,
                    "value_1": 2,
                    "x": 10,
                    "x_coordinate": 5
                },
                "param_2": {
                    "input2": 3,
                    "input_2": 4,
                    "input_value2": 1,
                    "multiplication_factor": 1,
                    "multiplier": 1,
                    "number_2": 1,
                    "side_length2": 1,
                    "value2": 2,
                    "value_2": 2,
                    "y": 10,
                    "y_coordinate": 5
                },
                "param_3": {
                    "constant_value": 1,
                    "factor": 1,
                    "input3": 3,
                    "input_3": 4,
                    "input_value3": 1,
                    "number_3": 1,
                    "scale_factor": 1,
                    "side_length3": 1,
                    "subtraction_factor": 1,
                    "value3": 2,
                    "value_3": 2,
                    "z": 10,
                    "z_coordinate": 3
                },
                "sqrt": {
                    "calculate_square_root": 5,
                    "square_root": 2
                },
                "uVar1": {
                    "square_of_y": 2,
                    "squared_input": 1,
                    "squared_input2": 3,
                    "squared_input_2": 3,
                    "squared_multiplier": 1,
                    "squared_number_2": 1,
                    "squared_param2": 1,
                    "squared_side_length2": 1,
                    "squared_value": 3,
                    "squared_value2": 1,
                    "squared_value_2": 1,
                    "squared_y": 11,
                    "squared_y_coordinate": 1
                },
                "uVar2": {
                    "2_times_x": 1,
                    "2x_mult_z": 1,
                    "double_of_x": 1,
                    "double_x": 3,
                    "doubled_input": 1,
                    "doubled_input1": 3,
                    "doubled_input_1": 2,
                    "doubled_number_1": 1,
                    "doubled_param1": 1,
                    "doubled_side_length1": 1,
                    "doubled_value": 1,
                    "doubled_value1": 1,
                    "doubled_value_1": 1,
                    "doubled_x": 3,
                    "multiplied_value": 1,
                    "scaled_value": 1,
                    "sum_of_x": 1,
                    "twice_input1": 1,
                    "twice_input_1": 1,
                    "twice_x": 3,
                    "twice_x_coordinate": 1
                },
                "uVar3": {
                    "converted_difference": 2,
                    "converted_distance": 2,
                    "converted_result": 4,
                    "converted_value": 4,
                    "difference": 1,
                    "distance": 3,
                    "distance_squared": 1,
                    "double_result": 1,
                    "error_double": 1,
                    "float_to_double_result": 1,
                    "result": 7,
                    "sqrt_result": 1,
                    "squared_diff": 1,
                    "squared_distance": 1
                }
            },
            "called": [
                "FUN_080098d0",
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008c30",
                "FUN_08008cdc",
                "FUN_08008eec"
            ],
            "calling": [
                "FUN_08002afc",
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "code": "\nundefined4 calculate_distance_08002978(undefined4 x,undefined4 y,undefined4 z)\n\n{\n  undefined4 squared_y;\n  undefined4 twice_x;\n  undefined8 result;\n  \n  squared_y = multiply_floats(y,y);\n  twice_x = add_floats(x,x);\n  twice_x = multiply_floats(twice_x,z);\n  squared_y = subtract_floats(squared_y,twice_x);\n  result = convert_float_to_double(squared_y);\n  result = calculate_square_root((int)result,(int)((ulonglong)result >> 0x20));\n  squared_y = truncate_double_to_float((int)result,(int)((ulonglong)result >> 0x20));\n  return squared_y;\n}\n\n",
            "current_name": "calculate_distance_08002978",
            "entrypoint": "0x08002978",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002978": "calculate_distance_08002978",
                "__addsf3": "add_floats",
                "__aeabi_f2d": "convert_float_to_double",
                "__aeabi_fmul": "multiply_floats",
                "__aeabi_fsub": "subtract_floats",
                "__truncdfsf2": "truncate_double_to_float",
                "param_1": "x",
                "param_2": "y",
                "param_3": "z",
                "sqrt": "calculate_square_root",
                "uVar1": "squared_y",
                "uVar2": "twice_x",
                "uVar3": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080029d8": {
            "additional_data": {
                "FUN_08002978": {
                    "max_allowable_speed": 1
                },
                "FUN_080029d8": {
                    "update_max_allowable_speed": 2,
                    "update_max_speed": 1,
                    "update_speed": 23,
                    "update_speed_limit": 4,
                    "update_speed_limits": 1
                },
                "FUN_08009214": {
                    "is_additional_condition_true": 1,
                    "is_equal_to_one": 1
                },
                "FUN_08009228": {
                    "is_allowed_speed": 1,
                    "is_certain_condition_true": 1
                },
                "FUN_08009264": {
                    "is_another_condition_true": 1,
                    "is_greater_than_zero": 1
                },
                "iVar1": {
                    "compare_result": 2,
                    "comparison_result": 18,
                    "comparison_result1": 1,
                    "is_equal": 8,
                    "result": 1,
                    "speed_comparison_result": 1
                },
                "param_1": {
                    "": 1,
                    "arg1": 3,
                    "input_param": 1,
                    "p1": 1,
                    "param": 3,
                    "param1": 8,
                    "param_1": 3,
                    "status": 4,
                    "undefined": 2,
                    "undefined_flag": 1,
                    "unused": 1
                },
                "param_2": {
                    "car_data": 6,
                    "car_info": 1,
                    "current_data": 1,
                    "current_speed": 4,
                    "current_speed_data": 1,
                    "data_ptr1": 1,
                    "input1": 1,
                    "object1": 1,
                    "p2": 1,
                    "source_data": 1,
                    "source_ptr": 1,
                    "speed_data": 2,
                    "speed_info": 1,
                    "speed_param": 2,
                    "value1": 1,
                    "vehicle1": 1,
                    "vehicle_data": 2,
                    "vehicle_data_ptr": 1,
                    "vehicle_info": 1,
                    "vehicle_param": 1
                },
                "param_3": {
                    "accel_data": 2,
                    "accelerometer_data_ptr": 1,
                    "comparison_data": 1,
                    "data_ptr2": 1,
                    "engine_data": 2,
                    "input2": 1,
                    "limit_param": 1,
                    "max_speed": 3,
                    "new_data": 1,
                    "object2": 1,
                    "other_data": 2,
                    "other_info": 1,
                    "other_param": 1,
                    "p3": 1,
                    "speed_data": 2,
                    "speed_info": 1,
                    "speed_limit_data": 1,
                    "speed_param": 1,
                    "target_data": 1,
                    "target_ptr": 1,
                    "target_speed": 2,
                    "target_speed_data": 1,
                    "value2": 1,
                    "vehicle2": 1
                },
                "uVar2": {
                    "adjusted_speed": 1,
                    "max_speed": 5,
                    "new_max_speed": 1,
                    "new_speed": 19,
                    "new_speed1": 1,
                    "updated_speed": 2,
                    "updated_speed_limit": 2
                },
                "uVar3": {
                    "car_speed": 1,
                    "current_max_speed": 1,
                    "current_speed": 18,
                    "current_speed1": 1,
                    "current_speed_limit": 1,
                    "initial_speed": 1,
                    "old_speed": 4,
                    "previous_speed_limit": 1,
                    "temp_speed": 3
                }
            },
            "called": [
                "FUN_08009228",
                "FUN_08002978",
                "FUN_08009264",
                "FUN_08009214"
            ],
            "calling": [
                "FUN_08002a94"
            ],
            "code": "\nvoid update_speed_limit_080029d8(undefined4 param1,int car_data,int max_speed)\n\n{\n  int comparison_result;\n  undefined4 new_speed;\n  undefined4 current_speed;\n  \n  if (((car_data != 0) && (max_speed != 0)) &&\n     (comparison_result = __aeabi_fcmpeq(*(undefined4 *)(car_data + 0x18),*(undefined4 *)(car_data + 0x1c)),\n     comparison_result == 0)) {\n    if ((*(char *)(car_data + 0x25) == '\\0') &&\n       (comparison_result = __aeabi_fcmpgt(*(undefined4 *)(car_data + 0x1c),*(undefined4 *)(max_speed + 0x18)),\n       comparison_result != 0)) {\n      current_speed = *(undefined4 *)(car_data + 0x1c);\n      new_speed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(max_speed + 0x18),\n                                  *(undefined4 *)(car_data + 0x20));\n      comparison_result = __aeabi_fcmplt(current_speed,new_speed);\n      if (comparison_result == 0) {\n        new_speed = max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(max_speed + 0x18),\n                                    *(undefined4 *)(car_data + 0x20));\n      }\n      else {\n        new_speed = *(undefined4 *)(car_data + 0x1c);\n      }\n      *(undefined4 *)(car_data + 0x18) = new_speed;\n    }\n    else {\n      *(undefined4 *)(car_data + 0x18) = *(undefined4 *)(car_data + 0x1c);\n    }\n    *(undefined *)(car_data + 0x24) = 1;\n  }\n  return;\n}\n\n",
            "current_name": "update_speed_limit_080029d8",
            "entrypoint": "0x080029d8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080029d8": "update_speed_limit_080029d8",
                "iVar1": "comparison_result",
                "param_1": "param1",
                "param_2": "car_data",
                "param_3": "max_speed",
                "uVar2": "new_speed",
                "uVar3": "current_speed"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002a94": {
            "additional_data": {
                "DAT_20000cf0": {
                    "start_block_index": 1,
                    "start_index": 1
                },
                "DAT_20000cf1": {
                    "end_block_index": 1,
                    "end_index": 1
                },
                "FUN_08002a94": {
                    "block_planner": 1,
                    "optimize_planner": 1,
                    "perform_reverse_pass": 1,
                    "planner_reverse_pass": 2,
                    "process_blocks": 7,
                    "process_reverse_planner": 1,
                    "reverse_blocks": 2,
                    "reverse_pass": 8,
                    "reverse_pass_iteration": 1,
                    "reverse_pass_kernel": 2,
                    "reverse_pass_kernel_loop": 1,
                    "reverse_planner_pass": 1
                },
                "local_14": {
                    "current_block": 3,
                    "current_block_ptr": 2,
                    "prev_block_addr_tmp": 1,
                    "prev_block_data_prev": 1,
                    "prev_data": 1,
                    "prev_prev_block": 2,
                    "prev_prev_block_pointer": 1,
                    "previous_block": 4,
                    "previous_block_address_temp": 1,
                    "previous_block_ptr": 2,
                    "previous_pointer_copy": 2,
                    "previous_previous_block": 2,
                    "previous_previous_block_ptr": 2,
                    "temp": 2,
                    "temp_block": 4,
                    "temp_block_ptr": 1
                },
                "local_18": {
                    "current_block": 4,
                    "current_block_ptr": 2,
                    "current_data": 1,
                    "current_pointer": 2,
                    "prev_block": 5,
                    "prev_block_addr": 1,
                    "prev_block_data": 1,
                    "prev_block_pointer": 1,
                    "previous_block": 8,
                    "previous_block_address": 1,
                    "previous_block_ptr": 5
                },
                "local_9": {
                    "block_index": 4,
                    "current_block_index": 12,
                    "current_byte": 7,
                    "current_index": 6,
                    "prev_block_index": 1
                },
                "param_1": {
                    "input": 2,
                    "input_byte": 14,
                    "input_param": 1,
                    "input_value": 1
                },
                "planner_reverse_pass_kernel": {
                    "apply_reverse_pass_kernel": 1,
                    "execute_reverse_pass_kernel": 3,
                    "process_block": 1,
                    "reverse_pass_kernel": 1,
                    "run_reverse_pass_kernel": 2
                },
                "prev_block_index": {
                    "get_previous_block_index": 8
                },
                "puVar1": {
                    "prev_block": 1,
                    "prev_block_data_prev_temp": 1,
                    "prev_block_index": 1,
                    "prev_block_ptr": 2,
                    "prev_byte": 2,
                    "previous_block_address_temp": 1,
                    "previous_block_ptr_temp": 1,
                    "previous_block_ptr_temporary": 1,
                    "previous_pointer": 2,
                    "previous_ptr": 1,
                    "temp_pointer": 2
                }
            },
            "called": [
                "FUN_08002896",
                "FUN_080029d8"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid reverse_pass_kernel_loop_08002a94(void)\n\n{\n  undefined *prev_block_ptr;\n  undefined *previous_block;\n  undefined *temp_block;\n  byte current_block_index;\n  \n  current_block_index = DAT_20000cf0;\n  previous_block = (undefined *)0x0;\n  temp_block = (undefined *)0x0;\n  while (prev_block_ptr = temp_block, current_block_index != DAT_20000cf1) {\n    current_block_index = get_previous_block_index(current_block_index);\n    temp_block = previous_block;\n    execute_reverse_pass_kernel(&DAT_20000870 + (uint)current_block_index * 0x40,previous_block,prev_block_ptr);\n    previous_block = &DAT_20000870 + (uint)current_block_index * 0x40;\n  }\n  return;\n}\n\n",
            "current_name": "reverse_pass_kernel_loop_08002a94",
            "entrypoint": "0x08002a94",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002a94": "reverse_pass_kernel_loop_08002a94",
                "local_14": "temp_block",
                "local_18": "previous_block",
                "local_9": "current_block_index",
                "planner_reverse_pass_kernel": "execute_reverse_pass_kernel",
                "prev_block_index": "get_previous_block_index",
                "puVar1": "prev_block_ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002afc": {
            "additional_data": {
                "FUN_08002978": {
                    "max_allowable_speed": 1
                },
                "FUN_08002afc": {
                    "update_max_allowable_speed": 13,
                    "update_max_speed": 1,
                    "update_maximum_speed": 1,
                    "update_speed": 9,
                    "update_speed_if_allowed": 2,
                    "update_speed_if_necessary": 3,
                    "update_speed_if_valid": 1,
                    "update_vehicle_speed": 1
                },
                "FUN_08009214": {
                    "is_threshold_equal": 1
                },
                "FUN_08009228": {
                    "is_allowed_speed_less": 1
                },
                "__aeabi_fcmpeq": {
                    "is_equal": 1
                },
                "__aeabi_fcmplt": {
                    "is_less_than": 1
                },
                "iVar1": {
                    "compare_result": 1,
                    "comparison_result": 2,
                    "is_current_speed_lower": 1,
                    "is_less": 3,
                    "is_less_than": 2,
                    "is_less_than_max": 1,
                    "is_lower": 1,
                    "is_max_less_than_destination": 1,
                    "is_max_speed_condition_met": 1,
                    "is_max_speed_less": 1,
                    "is_max_speed_lower": 2,
                    "is_smaller": 2,
                    "is_speed_less": 3,
                    "is_speed_less_than_default": 1,
                    "is_speed_less_than_limit": 1,
                    "is_speed_less_than_max": 1,
                    "is_speed_lower": 5,
                    "is_vehicle1_speed_less": 1,
                    "speed_comparison": 1
                },
                "max_allowable_speed": {
                    "calculate_max_allowable_speed": 1,
                    "calculate_maximum_allowable_speed": 1,
                    "get_max_allowable_speed": 3
                },
                "param_1": {
                    "car_data1": 1,
                    "car_parameters": 1,
                    "car_params": 1,
                    "current_speed": 1,
                    "data_pointer1": 1,
                    "input1": 1,
                    "input_data": 3,
                    "object1": 4,
                    "object_ptr": 1,
                    "old_speed_data": 2,
                    "pointer_to_car_data": 1,
                    "source_obj": 1,
                    "source_speed": 1,
                    "value1": 1,
                    "vehicle1": 1,
                    "vehicle_data": 6,
                    "vehicle_data_ptr": 1,
                    "vehicle_params": 3
                },
                "param_2": {
                    "car_data2": 1,
                    "data_pointer2": 1,
                    "default_data": 1,
                    "destination_obj": 1,
                    "driver_params": 1,
                    "engine_data": 1,
                    "engine_data_ptr": 1,
                    "input2": 1,
                    "max_speed": 1,
                    "max_speed_data": 1,
                    "new_speed_data": 2,
                    "object2": 4,
                    "other_params": 1,
                    "output_data": 3,
                    "pointer_to_speed_data": 1,
                    "sensor_data": 1,
                    "speed_data": 1,
                    "speed_limit_data": 1,
                    "speed_parameters": 1,
                    "speed_params": 1,
                    "target_ptr": 1,
                    "target_speed": 1,
                    "update_params": 1,
                    "value2": 1,
                    "vehicle2": 1
                },
                "uVar2": {
                    "adjusted_speed": 1,
                    "calculated_max_speed": 1,
                    "calculated_speed": 2,
                    "computed_max_speed": 1,
                    "current_max_speed": 2,
                    "max_speed": 1,
                    "new_max_allowable_speed": 2,
                    "new_max_speed": 7,
                    "new_speed": 11,
                    "updated_speed": 3
                },
                "uVar3": {
                    "car_max_speed": 1,
                    "current_speed": 2,
                    "default_speed": 1,
                    "destination_max_speed": 1,
                    "driver_max_speed": 1,
                    "engine_max_speed": 1,
                    "input2_max_speed": 1,
                    "max_speed": 3,
                    "max_speed_temp": 1,
                    "new_max_speed": 1,
                    "new_speed": 1,
                    "object2_speed": 2,
                    "old_max_speed": 1,
                    "original_max_allowable_speed": 1,
                    "original_max_speed": 1,
                    "original_speed": 1,
                    "other_max_speed": 1,
                    "output_max_speed": 1,
                    "output_speed": 1,
                    "previous_max_allowable_speed": 1,
                    "previous_speed": 1,
                    "sensor_max_speed": 1,
                    "speed_threshold": 1,
                    "target_speed": 1,
                    "target_speed_copy": 1,
                    "updated_max_speed": 1,
                    "vehicle2_current_speed": 1
                }
            },
            "called": [
                "FUN_08009228",
                "FUN_08002978",
                "FUN_08009214"
            ],
            "calling": [
                "FUN_08002ba8"
            ],
            "code": "\nvoid update_max_allowable_speed_08002afc(int vehicle_data,int object2)\n\n{\n  int is_speed_lower;\n  undefined4 new_speed;\n  undefined4 max_speed;\n  \n  if (((vehicle_data != 0) && (*(char *)(vehicle_data + 0x25) == '\\0')) &&\n     (is_speed_lower = is_less_than(*(undefined4 *)(vehicle_data + 0x18),*(undefined4 *)(object2 + 0x18)),\n     is_speed_lower != 0)) {\n    max_speed = *(undefined4 *)(object2 + 0x18);\n    new_speed = get_max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicle_data + 0x18),\n                                *(undefined4 *)(vehicle_data + 0x20));\n    is_speed_lower = is_less_than(max_speed,new_speed);\n    if (is_speed_lower == 0) {\n      new_speed = get_max_allowable_speed(DAT_20000edc ^ 0x80000000,*(undefined4 *)(vehicle_data + 0x18),\n                                  *(undefined4 *)(vehicle_data + 0x20));\n    }\n    else {\n      new_speed = *(undefined4 *)(object2 + 0x18);\n    }\n    is_speed_lower = is_equal(new_speed,*(undefined4 *)(object2 + 0x18));\n    if (is_speed_lower == 0) {\n      *(undefined4 *)(object2 + 0x18) = new_speed;\n      *(undefined *)(object2 + 0x24) = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_max_allowable_speed_08002afc",
            "entrypoint": "0x08002afc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002afc": "update_max_allowable_speed_08002afc",
                "__aeabi_fcmpeq": "is_equal",
                "__aeabi_fcmplt": "is_less_than",
                "iVar1": "is_speed_lower",
                "max_allowable_speed": "get_max_allowable_speed",
                "param_1": "vehicle_data",
                "param_2": "object2",
                "uVar2": "new_speed",
                "uVar3": "max_speed"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ba8": {
            "additional_data": {
                "DAT_20000870": {
                    "block": 1,
                    "block_data": 1
                },
                "DAT_20000cf0": {
                    "end_index": 2
                },
                "DAT_20000cf1": {
                    "start_index": 1,
                    "target_index": 1
                },
                "FUN_08002870": {
                    "get_block_index": 1,
                    "get_next_block_index": 1,
                    "next_block_index": 1
                },
                "FUN_08002afc": {
                    "forward_pass_kernel": 1,
                    "kernel_forward_pass": 1,
                    "planner_forward_pass_kernel": 1
                },
                "FUN_08002ba8": {
                    "execute_forward_pass": 1,
                    "execute_planner_forward_pass": 1,
                    "forward_pass": 1,
                    "forward_pass_planner": 1,
                    "optimize_planner": 1,
                    "perform_forward_pass": 1,
                    "perform_planner_forward_pass": 2,
                    "planner_forward": 1,
                    "planner_forward_pass": 18,
                    "planner_solve": 1,
                    "process_blocks": 2,
                    "run_planner": 1
                },
                "local_10": {
                    "curr_block": 2,
                    "curr_block_ptr": 1,
                    "current_block": 10,
                    "current_block_data": 2,
                    "current_block_ptr": 4,
                    "current_data": 2,
                    "current_ptr": 1,
                    "current_schedule": 1,
                    "next_block": 5,
                    "next_block_ptr": 1,
                    "next_state": 1
                },
                "local_14": {
                    "current_block": 5,
                    "current_block_ptr": 1,
                    "current_state": 1,
                    "next_block": 1,
                    "prev_block": 3,
                    "prev_block_ptr": 2,
                    "previous_block": 9,
                    "previous_block_data": 2,
                    "previous_block_ptr": 3,
                    "previous_data": 2,
                    "previous_ptr": 1
                },
                "local_9": {
                    "block_index": 6,
                    "current_block_index": 11,
                    "current_byte": 2,
                    "current_index": 11
                },
                "next_block_index": {
                    "get_next_block_index": 1,
                    "get_next_index": 1
                },
                "param_1": {
                    "block_data": 1,
                    "input": 1,
                    "input_block": 1,
                    "input_param": 2,
                    "input_param1": 2,
                    "input_param_1": 1,
                    "kernel_param_1": 2,
                    "prev_block_index": 1,
                    "start_index": 2,
                    "unknown_parameter": 1,
                    "unused_param_1": 1
                },
                "param_2": {
                    "curr_block_index": 1,
                    "end_index": 2,
                    "input_param2": 3,
                    "input_param_2": 1,
                    "kernel_param_2": 2,
                    "output": 1,
                    "output_block": 1,
                    "output_param": 2,
                    "unknown_parameter2": 1,
                    "unused_param_2": 1
                },
                "planner_forward_pass_kernel": {
                    "perform_forward_pass": 2
                },
                "puVar2": {
                    "current_block": 2,
                    "current_block_ptr": 3,
                    "current_ptr": 1,
                    "prev_block_ptr": 2,
                    "prev_block_ptr_temp": 1,
                    "previous_block": 3,
                    "previous_block_data_ptr": 1,
                    "previous_block_ptr_temp": 1,
                    "previous_block_temp": 1,
                    "previous_data_ptr": 2,
                    "previous_ptr": 1
                },
                "puVar3": {
                    "current_block": 1,
                    "current_ptr": 1,
                    "last_previous_block": 1,
                    "prev_block": 1,
                    "prev_block_ptr_final": 1,
                    "prev_block_ptr_prev": 1,
                    "prev_prev_block_ptr": 1,
                    "previous_block": 3,
                    "previous_block_data_ptr_temp": 1,
                    "previous_block_ptr": 4,
                    "previous_block_ptr_final": 1,
                    "previous_block_temp": 1,
                    "previous_data_ptr_copy": 1,
                    "previous_data_ptr_temp": 1,
                    "previous_index": 1,
                    "previous_ptr": 1
                },
                "uVar1": {
                    "block_index": 3,
                    "block_index_uint": 4,
                    "current_block_index_temp": 1,
                    "current_block_index_uint": 1,
                    "current_block_int": 1,
                    "current_index_as_uint": 2,
                    "current_index_uint": 2,
                    "index": 2,
                    "uint_temp": 1
                }
            },
            "called": [
                "FUN_08002afc",
                "FUN_08002870"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid perform_planner_forward_pass_08002ba8(void)\n\n{\n  uint block_index_uint;\n  undefined *current_block_ptr;\n  undefined *previous_block_ptr;\n  undefined *previous_block;\n  undefined *current_block;\n  byte current_block_index;\n  \n  previous_block = (undefined *)0x0;\n  current_block = (undefined *)0x0;\n  current_block_index = DAT_20000cf1;\n  previous_block_ptr = (undefined *)0x0;\n  while (current_block_ptr = previous_block, current_block_index != DAT_20000cf0) {\n    previous_block = current_block;\n    block_index_uint = (uint)current_block_index;\n    perform_forward_pass(current_block_ptr,current_block,&DAT_20000870 + block_index_uint * 0x40);\n    current_block_index = get_next_block_index(current_block_index);\n    previous_block_ptr = current_block_ptr;\n    current_block = &DAT_20000870 + block_index_uint * 0x40;\n  }\n  perform_forward_pass(previous_block,current_block,0,previous_block,previous_block_ptr);\n  return;\n}\n\n",
            "current_name": "perform_planner_forward_pass_08002ba8",
            "entrypoint": "0x08002ba8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ba8": "perform_planner_forward_pass_08002ba8",
                "local_10": "current_block",
                "local_14": "previous_block",
                "local_9": "current_block_index",
                "next_block_index": "get_next_block_index",
                "planner_forward_pass_kernel": "perform_forward_pass",
                "puVar2": "current_block_ptr",
                "puVar3": "previous_block_ptr",
                "uVar1": "block_index_uint"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002c18": {
            "additional_data": {
                "FUN_080028bc": {
                    "estimate_acceleration_distance": 1
                },
                "FUN_08002908": {
                    "calculate_magnitude_conversion4": 1
                },
                "FUN_08002c18": {
                    "calculate_acceleration": 5,
                    "calculate_acceleration_and_distance": 1,
                    "calculate_acceleration_and_intersection": 1,
                    "calculate_acceleration_distance": 15,
                    "calculate_acceleration_duration": 1,
                    "calculate_acceleration_limits": 2,
                    "calculate_acceleration_parameters": 1,
                    "calculate_acceleration_params": 2,
                    "calculate_distance": 3
                },
                "FUN_0800856c": {
                    "calculate_magnitude_conversion1": 1
                },
                "FUN_08008590": {
                    "calculate_float_conversion": 1
                },
                "FUN_08008640": {
                    "calculate_intersection_distance_conversion": 1
                },
                "FUN_08008ba0": {
                    "calculate_magnitude": 1
                },
                "FUN_08008bf0": {
                    "intersection_distance": 1
                },
                "FUN_08008e3c": {
                    "ceil_float_conversion": 1
                },
                "FUN_08008e44": {
                    "floor_float_conversion": 1
                },
                "FUN_08008eec": {
                    "calculate_magnitude_conversion2": 1
                },
                "FUN_08009318": {
                    "calculate_intersection_distance": 1
                },
                "FUN_080094c0": {
                    "calculate_magnitude_conversion3": 1
                },
                "iVar2": {
                    "accel_distance": 1,
                    "acceleration_distance": 3,
                    "acceleration_distance_magnitude": 1,
                    "acceleration_int": 1,
                    "acceleration_value": 1,
                    "converted2": 1,
                    "converted_float2": 1,
                    "converted_int": 1,
                    "converted_int1": 1,
                    "converted_result": 1,
                    "converted_value": 1,
                    "converted_value2": 1,
                    "distance2": 1,
                    "estimated_distance": 1,
                    "estimated_distance1": 1,
                    "estimated_time": 1,
                    "int1": 1,
                    "int_value": 5,
                    "int_value1": 1,
                    "integer_var": 1,
                    "intersection_result": 1,
                    "result2": 1,
                    "rounded_value": 1,
                    "tmp2": 1
                },
                "local_1c": {
                    "acceleration_distance": 3,
                    "acceleration_distance1": 5,
                    "acceleration_duration1": 1,
                    "acceleration_pos_distance": 1,
                    "calculated_value2": 1,
                    "decelerate_dist": 1,
                    "distance2": 1,
                    "distance_limit2": 1,
                    "estimated_distance": 1,
                    "final_result2": 1,
                    "first_distance": 1,
                    "intersection_difference": 1,
                    "local_var2": 2,
                    "local_variable2": 1,
                    "result2": 5,
                    "result3": 1,
                    "sum": 1,
                    "temp_distance": 1,
                    "temp_value": 1
                },
                "local_20": {
                    "accelerate_dist": 1,
                    "acceleration_difference": 1,
                    "acceleration_distance": 2,
                    "acceleration_distance2": 5,
                    "acceleration_duration2": 1,
                    "acceleration_neg_distance": 1,
                    "calculated_value1": 1,
                    "deceleration_distance": 2,
                    "difference": 1,
                    "distance1": 1,
                    "distance_limit1": 1,
                    "final_distance": 3,
                    "final_result1": 1,
                    "local_var1": 2,
                    "local_variable1": 1,
                    "result1": 5,
                    "result2": 1
                },
                "param_1": {
                    "acceleration_data": 11,
                    "acceleration_struct": 1,
                    "base_address": 1,
                    "input": 5,
                    "input_address": 1,
                    "input_buffer": 1,
                    "input_data": 4,
                    "input_param": 1,
                    "input_ptr": 1,
                    "input_struct": 2,
                    "param": 2,
                    "ptr_offset": 1
                },
                "param_2": {
                    "acceleration1": 2,
                    "acceleration_factor": 1,
                    "acceleration_factor1": 5,
                    "acceleration_meters_per_second": 1,
                    "acceleration_multiplier1": 1,
                    "factor1": 4,
                    "factor_1": 1,
                    "multiplier1": 10,
                    "multiplier_1": 1,
                    "param2": 4,
                    "speed_factor": 1
                },
                "param_3": {
                    "acceleration2": 2,
                    "acceleration_factor2": 5,
                    "acceleration_multiplier2": 1,
                    "deceleration_meters_per_second": 1,
                    "factor2": 4,
                    "factor_2": 1,
                    "intersection_factor": 1,
                    "multiplier2": 10,
                    "multiplier_2": 1,
                    "param3": 4,
                    "time_factor": 1
                },
                "uVar1": {
                    "acceleration_factor_1": 1,
                    "acceleration_float1": 2,
                    "acceleration_result": 1,
                    "conv_value1": 1,
                    "converted1": 1,
                    "converted_accel_data": 1,
                    "converted_factor1": 3,
                    "converted_float": 1,
                    "converted_float1": 5,
                    "converted_value1": 1,
                    "distance1": 1,
                    "float1": 1,
                    "float_converted": 1,
                    "float_result1": 1,
                    "float_value": 1,
                    "float_value1": 3,
                    "initial_speed": 1,
                    "result1": 2,
                    "tmp1": 1,
                    "unsig_float_val1": 1
                },
                "uVar3": {
                    "acceleration_distance1": 1,
                    "acceleration_factor_2": 1,
                    "acceleration_float": 1,
                    "acceleration_float2": 2,
                    "conv_value2": 1,
                    "converted3": 1,
                    "converted_accel_data_2": 1,
                    "converted_factor2": 3,
                    "converted_float": 1,
                    "converted_float2": 4,
                    "converted_float3": 1,
                    "converted_value3": 1,
                    "distance": 1,
                    "float2": 1,
                    "float_converted2": 1,
                    "float_result2": 1,
                    "float_value2": 4,
                    "result2": 1,
                    "result3": 1,
                    "tmp3": 1,
                    "unsig_float_val2": 1
                },
                "uVar4": {
                    "acceleration_distance2": 2,
                    "acceleration_float3": 1,
                    "acceleration_magnitude": 1,
                    "conv_value3": 1,
                    "converted4": 1,
                    "converted_accel_distance": 1,
                    "converted_estimated_distance": 1,
                    "converted_factor3": 1,
                    "converted_float": 1,
                    "converted_float3": 4,
                    "converted_float4": 1,
                    "converted_value": 1,
                    "converted_value4": 1,
                    "float3": 1,
                    "float_result3": 1,
                    "float_value3": 4,
                    "intersection_float": 1,
                    "inverse_acceleration_value": 1,
                    "result3": 1,
                    "result4": 1,
                    "tmp4": 1,
                    "unsig_float_val3": 1
                },
                "uVar5": {
                    "acceleration_distance": 1,
                    "conv_value4": 1,
                    "converted": 1,
                    "converted5": 1,
                    "converted_accel_distance_2": 1,
                    "converted_factor4": 1,
                    "converted_float": 1,
                    "converted_float4": 4,
                    "converted_float5": 1,
                    "converted_target_distance": 1,
                    "converted_value5": 1,
                    "distance": 1,
                    "float4": 1,
                    "float_result4": 1,
                    "float_value4": 4,
                    "initial_distance": 1,
                    "intersection_distance": 2,
                    "intersection_distance_var": 1,
                    "result4": 1,
                    "result5": 1,
                    "speed_float": 1,
                    "tmp5": 1,
                    "unsig_float_val4": 1
                },
                "uVar6": {
                    "conversion_result": 1,
                    "converted_float6": 1,
                    "converted_u_int1": 1,
                    "converted_uint": 1,
                    "converted_value6": 1,
                    "intersection_distance": 6,
                    "result": 1,
                    "result1": 1,
                    "result6": 1,
                    "result_var": 1,
                    "temp": 4,
                    "temp_distance1": 1,
                    "temp_uint": 1,
                    "temp_value": 2,
                    "temp_var": 2,
                    "tmp6": 1,
                    "uint1": 1,
                    "uint_result1": 1,
                    "uint_val": 1,
                    "valid_intersection_distance": 1
                },
                "uVar7": {
                    "conv_value5": 1,
                    "converted6": 1,
                    "converted_distance": 3,
                    "converted_double": 4,
                    "converted_float5": 2,
                    "double_result": 1,
                    "double_val": 1,
                    "double_value": 3,
                    "double_value1": 1,
                    "float5": 1,
                    "float_conversion": 1,
                    "result7": 1,
                    "temp_distance2": 1,
                    "temp_double": 4,
                    "temp_value": 2,
                    "temp_var2": 1,
                    "tmp7": 1
                },
                "uVar7_2": {
                    "converted_double2": 1
                },
                "uVar8": {
                    "temp_intersection_distance": 1
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_080028bc",
                "FUN_08008e3c",
                "FUN_08008ba0",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_08009318",
                "FUN_0800856c",
                "FUN_08008eec",
                "FUN_080094c0",
                "FUN_08002908",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08002e08"
            ],
            "code": "\nvoid calculate_acceleration_and_distance_08002c18(int acceleration_data,undefined4 multiplier1,undefined4 multiplier2)\n\n{\n  undefined4 converted_float1;\n  int int_value;\n  undefined4 converted_float2;\n  undefined4 float_value3;\n  undefined4 converted_float4;\n  uint intersection_distance;\n  undefined8 temp_double;\n  int result1;\n  uint acceleration_distance1;\n  \n  converted_float1 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x3c));\n  converted_float1 = __aeabi_fmul(converted_float1,multiplier1);\n  temp_double = __aeabi_f2d(converted_float1);\n  temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  converted_float1 = __aeabi_d2uiz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  *(undefined4 *)(acceleration_data + 0x28) = converted_float1;\n  converted_float1 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x3c));\n  converted_float1 = __aeabi_fmul(converted_float1,multiplier2);\n  temp_double = __aeabi_f2d(converted_float1);\n  temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  converted_float1 = __aeabi_d2uiz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  *(undefined4 *)(acceleration_data + 0x2c) = converted_float1;\n  temp_double = __aeabi_i2d(*(int *)(acceleration_data + 0x30) * 0x32);\n  temp_double = __muldf3((int)temp_double,(int)((ulonglong)temp_double >> 0x20),0,0x404e0000);\n  int_value = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  converted_float1 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x28));\n  converted_float2 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x3c));\n  float_value3 = __floatsisf(int_value);\n  converted_float1 = estimate_acceleration_distance(converted_float1,converted_float2,float_value3);\n  temp_double = __aeabi_f2d(converted_float1);\n  temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  acceleration_distance1 = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  converted_float1 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x3c));\n  converted_float2 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x2c));\n  float_value3 = __floatsisf(-int_value);\n  converted_float1 = estimate_acceleration_distance(converted_float1,converted_float2,float_value3);\n  temp_double = __aeabi_f2d(converted_float1);\n  temp_double = floor((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  result1 = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n  result1 = (*(int *)(acceleration_data + 0x10) - acceleration_distance1) - result1;\n  if (result1 < 0) {\n    converted_float1 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x28));\n    converted_float2 = __floatunsisf(*(undefined4 *)(acceleration_data + 0x2c));\n    float_value3 = __floatsisf(int_value);\n    converted_float4 = __floatsisf(*(undefined4 *)(acceleration_data + 0x10));\n    converted_float1 = intersection_distance(converted_float1,converted_float2,float_value3,converted_float4);\n    temp_double = __aeabi_f2d(converted_float1);\n    temp_double = ceil((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n    intersection_distance = __aeabi_d2iz((int)temp_double,(int)((ulonglong)temp_double >> 0x20));\n    intersection_distance = intersection_distance & ~((int)intersection_distance >> 0x1f);\n    acceleration_distance1 = *(uint *)(acceleration_data + 0x10);\n    if ((int)intersection_distance <= (int)*(uint *)(acceleration_data + 0x10)) {\n      acceleration_distance1 = intersection_distance;\n    }\n    result1 = 0;\n  }\n  *(uint *)(acceleration_data + 0x34) = acceleration_distance1;\n  *(uint *)(acceleration_data + 0x38) = result1 + acceleration_distance1;\n  return;\n}\n\n",
            "current_name": "calculate_acceleration_and_distance_08002c18",
            "entrypoint": "0x08002c18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002c18": "calculate_acceleration_and_distance_08002c18",
                "iVar2": "int_value",
                "local_1c": "acceleration_distance1",
                "local_20": "result1",
                "param_1": "acceleration_data",
                "param_2": "multiplier1",
                "param_3": "multiplier2",
                "uVar1": "converted_float1",
                "uVar3": "converted_float2",
                "uVar4": "float_value3",
                "uVar5": "converted_float4",
                "uVar6": "intersection_distance",
                "uVar7": "temp_double"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002e08": {
            "additional_data": {
                "FUN_08002870": {
                    "next_block_index": 1
                },
                "FUN_08002c18": {
                    "calculate_trapezoid_for_block": 1
                },
                "FUN_08002e08": {
                    "calculate_and_update_trapezoids": 2,
                    "calculate_block_trapezoids": 1,
                    "calculate_trapezoid_area": 2,
                    "calculate_trapezoid_for_all_blocks": 2,
                    "calculate_trapezoid_for_blocks": 1,
                    "calculate_trapezoids": 22
                },
                "FUN_08009054": {
                    "calculate_trapezoid_area": 1
                },
                "calculate_trapezoid_for_block": {
                    "calculate_trapezoid": 2
                },
                "iVar3": {
                    "block_offset": 20,
                    "index": 1,
                    "offset": 1
                },
                "local_11": {
                    "block_index": 21,
                    "current_block": 1,
                    "current_block_index": 3,
                    "current_index": 2,
                    "index": 1,
                    "next_block": 1,
                    "next_block_index": 1,
                    "start_index": 1
                },
                "local_18": {
                    "block": 1,
                    "block_data": 3,
                    "block_ptr": 1,
                    "current_block": 26
                },
                "next_block_index": {
                    "get_next_block_index": 2
                },
                "param_1": {
                    "block_index": 2,
                    "block_start_index": 1,
                    "current_block_index": 1,
                    "start_index": 1
                },
                "param_2": {
                    "dividend": 2
                },
                "param_3": {
                    "divisor": 2
                },
                "param_4": {
                    "constant": 1
                },
                "uVar1": {
                    "block_area": 1,
                    "block_area_ratio": 1,
                    "block_length_ratio": 1,
                    "block_ratio1": 1,
                    "block_ratio_1": 1,
                    "dividend": 4,
                    "dividend1": 1,
                    "dividend_1": 1,
                    "dividend_result": 2,
                    "division_result1": 1,
                    "division_result_1": 1,
                    "height_ratio": 1,
                    "ratio1": 1,
                    "sloping_ratio": 1,
                    "top_base": 1,
                    "top_base_div": 1
                },
                "uVar2": {
                    "base_ratio": 1,
                    "block_division_ratio": 1,
                    "block_height": 1,
                    "block_height_ratio": 1,
                    "block_ratio2": 1,
                    "block_ratio_2": 1,
                    "bottom_base": 1,
                    "bottom_base_div": 1,
                    "dividend2": 1,
                    "dividend_2": 1,
                    "division_result2": 1,
                    "division_result_2": 1,
                    "divisor": 4,
                    "divisor_result": 2,
                    "ratio2": 1,
                    "slope_ratio": 1
                }
            },
            "called": [
                "FUN_08002870",
                "FUN_08002c18",
                "FUN_08009054"
            ],
            "calling": [
                "FUN_08002edc"
            ],
            "code": "\nvoid calculate_and_update_trapezoids_08002e08(void)\n\n{\n  undefined4 dividend;\n  undefined4 divisor;\n  int block_offset;\n  undefined *current_block;\n  byte block_index;\n  \n  current_block = (undefined *)0x0;\n  block_index = DAT_20000cf1;\n  while (block_index != DAT_20000cf0) {\n    block_offset = (uint)block_index * 0x40;\n    if ((current_block != (undefined *)0x0) &&\n       ((current_block[0x24] != '\\0' || ((&DAT_20000894)[block_offset] != '\\0')))) {\n      dividend = __aeabi_fdiv(*(undefined4 *)(current_block + 0x18),*(undefined4 *)(current_block + 0x14));\n      divisor = __aeabi_fdiv(*(undefined4 *)(&DAT_20000888 + block_offset),*(undefined4 *)(current_block + 0x14));\n      calculate_trapezoid(current_block,dividend,divisor);\n      current_block[0x24] = 0;\n    }\n    block_index = get_next_block_index(block_index);\n    current_block = &DAT_20000870 + block_offset;\n  }\n  dividend = __aeabi_fdiv(*(undefined4 *)(current_block + 0x18),*(undefined4 *)(current_block + 0x14));\n  divisor = __aeabi_fdiv(0,*(undefined4 *)(current_block + 0x14));\n  calculate_trapezoid(current_block,dividend,divisor);\n  current_block[0x24] = 0;\n  return;\n}\n\n",
            "current_name": "calculate_and_update_trapezoids_08002e08",
            "entrypoint": "0x08002e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002e08": "calculate_and_update_trapezoids_08002e08",
                "calculate_trapezoid_for_block": "calculate_trapezoid",
                "iVar3": "block_offset",
                "local_11": "block_index",
                "local_18": "current_block",
                "next_block_index": "get_next_block_index",
                "uVar1": "dividend",
                "uVar2": "divisor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002edc": {
            "additional_data": {
                "FUN_08002a94": {
                    "do_forward_pass": 1,
                    "execute_forward_pass": 2,
                    "forward_pass": 15,
                    "forward_planner_pass": 3,
                    "perform_forward_pass": 5,
                    "planner_forward_pass": 4,
                    "run_forward_pass": 1
                },
                "FUN_08002ba8": {
                    "planner_recalculate_trapezoids": 4,
                    "recalculate_trapezoids": 27
                },
                "FUN_08002e08": {
                    "do_reverse_pass": 1,
                    "execute_reverse_pass": 2,
                    "perform_reverse_pass": 5,
                    "planner_reverse_pass": 4,
                    "reverse_pass": 15,
                    "reverse_planner_pass": 3,
                    "run_reverse_pass": 1
                },
                "FUN_08002edc": {
                    "calculate_and_update_planner": 1,
                    "calculate_planner": 5,
                    "calculate_planner_trapezoid": 1,
                    "execute_planner": 1,
                    "optimize_planner": 3,
                    "optimize_planning": 1,
                    "perform_planner_operations": 5,
                    "planner": 7,
                    "planner_algorithm": 1,
                    "planner_run": 1,
                    "planner_update": 3,
                    "run_planner": 1,
                    "update_planner_data": 1
                }
            },
            "called": [
                "FUN_08002e08",
                "FUN_08002a94",
                "FUN_08002ba8"
            ],
            "calling": [
                "FUN_08003618",
                "FUN_08003004"
            ],
            "code": "\nvoid calculate_planner_trapezoid_08002edc(void)\n\n{\n  planner_reverse_pass();\n  planner_forward_pass();\n  planner_recalculate_trapezoids();\n  return;\n}\n\n",
            "current_name": "calculate_planner_trapezoid_08002edc",
            "entrypoint": "0x08002edc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002edc": "calculate_planner_trapezoid_08002edc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002ef0": {
            "additional_data": {
                "DAT_20000cf1": {
                    "current_block_index": 3,
                    "previous_block": 1,
                    "previous_block_index": 1
                },
                "DAT_20000cf2": {
                    "current_block_index": 1,
                    "new_block_index": 1,
                    "next_block_index": 2,
                    "updated_block_index": 1
                },
                "FUN_08002870": {
                    "apply_transformation": 1,
                    "check_parameter": 1,
                    "check_parameter_value": 1,
                    "determine_next_block_index": 1,
                    "find_next_block_index": 2,
                    "get_char_status": 1,
                    "get_next_block_index": 17,
                    "get_next_character": 1,
                    "next_block_index": 1,
                    "process_character": 1
                },
                "FUN_08002ef0": {
                    "copy_and_set_block_index": 1,
                    "initialize_block": 4,
                    "initialize_block_data": 3,
                    "initialize_blocks": 1,
                    "initialize_data": 6,
                    "initialize_next_block": 1,
                    "initialize_next_block_info": 1,
                    "update_block_data": 3,
                    "update_block_index": 3,
                    "update_block_info": 1,
                    "update_block_information": 1,
                    "update_data": 4,
                    "update_data_and_next_block_index": 1,
                    "update_next_block_index": 1
                },
                "next_block_index": {
                    "get_next_block_index": 5
                },
                "param_1": {
                    "block_index": 1,
                    "char_code": 1,
                    "character": 3,
                    "input": 2,
                    "input_char": 13,
                    "input_character": 5,
                    "input_data": 1,
                    "input_param": 1,
                    "input_value": 1
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_08002f24"
            ],
            "code": "\nvoid initialize_block_data_08002ef0(void)\n\n{\n  DAT_20000cf1 = DAT_20000cf0;\n  DAT_20000cf2 = get_next_block_index(DAT_20000cf0);\n  return;\n}\n\n",
            "current_name": "initialize_block_data_08002ef0",
            "entrypoint": "0x08002ef0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002ef0": "initialize_block_data_08002ef0",
                "next_block_index": "get_next_block_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f24": {
            "additional_data": {
                "DAT_20000cf4": {
                    "buffer": 2,
                    "data_buffer": 2
                },
                "FUN_08002ef0": {
                    "execute_reset": 1,
                    "execute_task": 2,
                    "initialize": 1,
                    "initialize_data": 1,
                    "initialize_parameters": 2,
                    "initialize_params": 1,
                    "perform_additional_setup": 1,
                    "perform_cleanup": 1,
                    "perform_initialization": 2,
                    "perform_reset": 1,
                    "reset_and_update": 1,
                    "reset_buffer": 4,
                    "reset_data": 1,
                    "reset_param_1": 1,
                    "reset_parameters": 9,
                    "reset_plan": 1,
                    "reset_pointer": 1
                },
                "FUN_08002f24": {
                    "clear_buffer": 1,
                    "initialize_buffer": 14,
                    "initialize_data": 5,
                    "initialize_data_buffer": 1,
                    "reset_and_initialize": 2,
                    "reset_buffer": 4,
                    "reset_buffer_and_initialize": 2,
                    "reset_buffer_and_initialize_data": 1,
                    "reset_data": 1
                },
                "FUN_0800b430": {
                    "process_data": 1,
                    "process_input": 1,
                    "process_parameters": 3,
                    "set_values": 1,
                    "update_data": 1
                },
                "param_1": {
                    "array": 1,
                    "array_ptr": 1,
                    "buffer": 1,
                    "buffer_ptr": 1,
                    "buffer_start": 1,
                    "data_ptr": 3,
                    "input_data": 1,
                    "input_pointer": 1,
                    "new_param_1": 2,
                    "param_array": 2,
                    "parameter_1": 1,
                    "parameters1": 1,
                    "params": 1,
                    "pointer": 2,
                    "ptr": 2,
                    "ptr_parameter_1": 1,
                    "task_data": 1,
                    "task_param": 1
                },
                "param_2": {
                    "data": 1,
                    "flag": 8,
                    "input_value": 1,
                    "new_param_2": 2,
                    "param_byte": 1,
                    "param_value": 1,
                    "parameter2": 1,
                    "parameter_2": 2,
                    "task_flag": 1,
                    "value": 6
                },
                "param_3": {
                    "input_size": 1,
                    "length": 1,
                    "new_param_3": 2,
                    "param_count": 1,
                    "param_size": 1,
                    "parameter3": 1,
                    "parameter_3": 2,
                    "size": 11,
                    "task_value": 1,
                    "value": 3
                },
                "plan_reset_buffer": {
                    "reset_buffer": 1
                }
            },
            "called": [
                "FUN_08002ef0",
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid reset_buffer_and_initialize_data_08002f24(void)\n\n{\n  reset_buffer();\n  memset(&DAT_20000cf4,0,0x1c);\n  return;\n}\n\n",
            "current_name": "reset_buffer_and_initialize_data_08002f24",
            "entrypoint": "0x08002f24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f24": "reset_buffer_and_initialize_data_08002f24",
                "plan_reset_buffer": "reset_buffer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f40": {
            "additional_data": {
                "DAT_20000cf0": {
                    "current_block_index": 6,
                    "previous_block_index": 1
                },
                "DAT_20000cf1": {
                    "current_block_index": 1,
                    "next_block_index": 3,
                    "updated_block_index": 3
                },
                "FUN_08002870": {
                    "check_block": 1,
                    "check_block_data": 1,
                    "check_block_index": 1,
                    "check_condition": 2,
                    "check_next_block_status": 1,
                    "check_param_value": 1,
                    "check_parameter": 1,
                    "convert_char_to_byte": 1,
                    "find_next_block_index": 1,
                    "get_next_block_index": 7,
                    "is_param_valid": 1,
                    "next_block_index": 2,
                    "process_block": 1,
                    "process_character": 1,
                    "process_param": 1
                },
                "FUN_08002f40": {
                    "check_and_update_block_index": 2,
                    "process_blocks": 1,
                    "update_block_index": 24,
                    "update_block_index_if_different": 1,
                    "update_block_index_if_needed": 1,
                    "update_next_block_index": 2
                },
                "PARAM_1": {
                    "input_character": 1
                },
                "next_block_index": {
                    "get_next_block_index": 4
                },
                "param_1": {
                    "block_data": 1,
                    "block_index": 3,
                    "block_status": 1,
                    "character": 1,
                    "input_block": 1,
                    "input_char": 4,
                    "input_character": 3,
                    "input_index": 1,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 6,
                    "value": 1
                },
                "param_2": {
                    "char_value": 1
                }
            },
            "called": [
                "FUN_08002870"
            ],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nvoid update_next_block_index_08002f40(void)\n\n{\n  if (DAT_20000cf0 != DAT_20000cf1) {\n    DAT_20000cf1 = get_next_block_index(DAT_20000cf1);\n  }\n  return;\n}\n\n",
            "current_name": "update_next_block_index_08002f40",
            "entrypoint": "0x08002f40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f40": "update_next_block_index_08002f40",
                "next_block_index": "get_next_block_index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002f74": {
            "additional_data": {
                "DAT_20000cf0": {
                    "comparison_value_1": 1,
                    "condition1": 1,
                    "counter_1": 1,
                    "current_count": 1,
                    "current_data_position": 1,
                    "current_index": 1,
                    "current_memory_block_index": 1,
                    "entry_count": 1,
                    "memory_block_start": 1,
                    "pointer_count": 1,
                    "pointer_index": 1,
                    "previous_data_ptr": 1,
                    "start_index": 1
                },
                "DAT_20000cf1": {
                    "active_pointer_index": 1,
                    "comparison_value_2": 1,
                    "condition2": 1,
                    "counter_2": 1,
                    "current_data_index": 1,
                    "current_entry_index": 1,
                    "end_index": 1,
                    "max_count": 1,
                    "max_index": 1,
                    "memory_block_end": 1,
                    "next_data_position": 1,
                    "pointer_count": 1,
                    "total_memory_blocks": 1
                },
                "FUN_08002f74": {
                    "get_active_data_pointer": 3,
                    "get_active_memory_address": 1,
                    "get_active_memory_block": 1,
                    "get_active_pointer": 3,
                    "get_current_data_entry": 1,
                    "get_current_data_ptr": 3,
                    "get_data_address": 1,
                    "get_data_entry": 1,
                    "get_data_from_address": 1,
                    "get_data_pointer": 6,
                    "get_data_ptr": 2,
                    "get_last_memory_block": 1,
                    "get_next_address": 1,
                    "get_next_available_memory_block": 1,
                    "get_next_data_block": 4,
                    "get_next_pointer": 1
                },
                "puVar1": {
                    "active_data_pointer": 2,
                    "active_data_ptr": 1,
                    "active_memory_address": 1,
                    "active_memory_block": 1,
                    "active_pointer": 3,
                    "current_data_entry_pointer": 1,
                    "current_data_ptr": 3,
                    "data_entry": 1,
                    "data_pointer": 7,
                    "last_block_pointer": 1,
                    "next_address": 1,
                    "next_block_pointer": 1,
                    "next_block_ptr": 1,
                    "next_data_block": 1,
                    "next_data_block_ptr": 1,
                    "next_memory_block": 1,
                    "next_pointer": 1,
                    "result_ptr": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0",
                "FUN_08002fd4"
            ],
            "code": "\nundefined * get_active_data_pointer_08002f74(void)\n\n{\n  undefined *data_pointer;\n  \n  if (DAT_20000cf0 == DAT_20000cf1) {\n    data_pointer = (undefined *)0x0;\n  }\n  else {\n    data_pointer = &DAT_20000870 + (uint)DAT_20000cf1 * 0x40;\n  }\n  return data_pointer;\n}\n\n",
            "current_name": "get_active_data_pointer_08002f74",
            "entrypoint": "0x08002f74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002f74": "get_active_data_pointer_08002f74",
                "puVar1": "data_pointer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fac": {
            "additional_data": {
                "DAT_20000cf1": {
                    "data1": 10,
                    "data_1": 1,
                    "data_one": 1,
                    "data_value1": 1,
                    "first_data": 6,
                    "first_data_value": 1,
                    "first_variable": 1,
                    "value1": 4
                },
                "DAT_20000cf2": {
                    "data2": 10,
                    "data_2": 1,
                    "data_two": 1,
                    "data_value2": 1,
                    "second_data": 6,
                    "second_data_value": 1,
                    "second_variable": 1,
                    "value2": 4
                },
                "FUN_08002fac": {
                    "are_data_equal": 4,
                    "are_datapoints_equal": 1,
                    "are_datas_equal": 1,
                    "are_equal": 1,
                    "are_two_data_equal": 1,
                    "are_values_equal": 2,
                    "are_variables_equal": 2,
                    "check_data_equality": 4,
                    "check_equality": 8,
                    "check_if_equal": 1,
                    "check_if_variables_match": 1,
                    "compare_data": 4,
                    "is_data_equal": 1
                },
                "cf1": {
                    "first_data": 1
                },
                "cf2": {
                    "second_data": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nbool check_data_equality_08002fac(void)\n\n{\n  return DAT_20000cf1 == DAT_20000cf2;\n}\n\n",
            "current_name": "check_data_equality_08002fac",
            "entrypoint": "0x08002fac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fac": "check_data_equality_08002fac"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08002fd4": {
            "additional_data": {
                "DAT_20000ea8": {
                    "condition_b": 1,
                    "execution_complete": 1,
                    "execution_finished": 1,
                    "exit_condition": 1,
                    "return_flag": 7,
                    "stop_flag": 1,
                    "terminate_flag": 1,
                    "termination_flag": 1
                },
                "DAT_20000ea9": {
                    "condition_a": 1,
                    "condition_check": 3,
                    "condition_flag": 1,
                    "continue_flag": 1,
                    "end_flag": 1,
                    "exception_condition": 1,
                    "exit_code": 1,
                    "exit_condition": 2,
                    "flag": 1,
                    "protocol_status": 1,
                    "runtime_flag": 1,
                    "termination_condition": 1
                },
                "FUN_08002f74": {
                    "get_current_block": 5,
                    "get_current_plan": 1,
                    "get_current_plan_block": 1,
                    "get_plan": 1,
                    "get_plan_pointer": 2,
                    "get_protocol_data": 2,
                    "plan_get_current_block": 2
                },
                "FUN_08002fd4": {
                    "execute_protocol": 14,
                    "execute_protocol_plan": 1,
                    "execute_protocol_runtime": 5,
                    "execute_protocol_until_complete": 3,
                    "execute_protocol_until_completion": 2,
                    "execute_until_block_0_or_end": 1,
                    "execute_until_block_completion": 1,
                    "execute_until_block_reached": 1,
                    "execute_until_break": 1,
                    "execute_until_condition_met": 1,
                    "execute_until_protocol_completion": 1
                },
                "FUN_08003a74": {
                    "do_something": 1,
                    "execute_protocol": 1,
                    "execute_protocol_runtime": 2,
                    "execute_runtime": 3,
                    "perform_additional_tasks": 1,
                    "process_protocol": 1,
                    "protocol_execute_runtime": 1,
                    "runtime_execute_protocol": 1,
                    "runtime_execution": 1,
                    "setup_runtime": 1,
                    "update_protocol": 1
                },
                "iVar1": {
                    "block": 1,
                    "block_status": 1,
                    "current_block": 22,
                    "current_block_index": 1
                },
                "plan_get_current_block": {
                    "get_current_block": 7,
                    "get_current_block_status": 1
                },
                "protocol_execute_runtime": {
                    "execute_protocol_runtime": 6,
                    "execute_protocol_runtime_again": 1,
                    "execute_runtime": 3,
                    "execute_runtime_protocol": 1
                }
            },
            "called": [
                "FUN_08003a74",
                "FUN_08002f74"
            ],
            "calling": [
                "FUN_0800525c",
                "FUN_080005b4",
                "FUN_08000220",
                "FUN_08002408",
                "FUN_080024c4"
            ],
            "code": "\nvoid execute_protocol_runtime_08002fd4(void)\n\n{\n  int current_block;\n  \n  while ((current_block = get_current_block(), current_block != 0 || (DAT_20000ea9 == '\\x03'))) {\n    execute_protocol_runtime_08002fd4();\n    if (DAT_20000ea8 != '\\0') {\n      return;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "execute_protocol_runtime_08002fd4",
            "entrypoint": "0x08002fd4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08002fd4": "execute_protocol_runtime_08002fd4",
                "iVar1": "current_block",
                "plan_get_current_block": "get_current_block",
                "protocol_execute_runtime": "execute_protocol_runtime"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003004": {
            "additional_data": {
                "DAT_20000870": {
                    "block_parameters_start": 1,
                    "pointer2": 1
                },
                "DAT_20000cf0": {
                    "block_index_multiplier": 1,
                    "constant1": 1
                },
                "DAT_20000cf1": {
                    "constant8": 1
                },
                "DAT_20000cf2": {
                    "global_variable5": 1,
                    "next_block_index": 1
                },
                "DAT_20000cf4": {
                    "constant5": 1,
                    "target_acceleration": 1
                },
                "DAT_20000cf8": {
                    "constant6": 1,
                    "target_speed": 1
                },
                "DAT_20000cfc": {
                    "constant7": 1,
                    "target_distance": 1
                },
                "DAT_20000d00": {
                    "global_variable2": 1,
                    "previous_acceleration": 1
                },
                "DAT_20000d04": {
                    "global_variable3": 1,
                    "previous_speed": 1
                },
                "DAT_20000d08": {
                    "global_variable4": 1,
                    "previous_distance": 1
                },
                "DAT_20000d0c": {
                    "global_variable1": 1,
                    "max_block_parameter": 1
                },
                "DAT_20000ebc": {
                    "acceleration_multiplier": 1,
                    "constant2": 1
                },
                "DAT_20000ec0": {
                    "constant3": 1,
                    "speed_multiplier": 1
                },
                "DAT_20000ec4": {
                    "constant4": 1,
                    "distance_multiplier": 1
                },
                "DAT_20000edc": {
                    "divider": 1
                },
                "DAT_20000ee0": {
                    "constant9": 1,
                    "multiplier4": 1
                },
                "FUN_08002870": {
                    "get_weather": 1,
                    "reverse_param": 1
                },
                "FUN_08002978": {
                    "calculate_max": 1,
                    "floor": 1
                },
                "FUN_08002edc": {
                    "ceil": 1,
                    "planner_recalculate": 1
                },
                "FUN_08003004": {
                    "calculate_block_condition": 1,
                    "calculate_block_parameters": 3,
                    "calculate_block_properties": 1,
                    "calculate_block_speed": 2,
                    "calculate_block_status": 1,
                    "calculate_speed": 16,
                    "calculate_speed_and_direction": 1,
                    "calculate_speed_data": 1,
                    "calculate_speed_limits": 2,
                    "calculate_speed_parameters": 1,
                    "update_speed_and_acceleration": 1
                },
                "FUN_080082d0": {
                    "calculate_difference": 1,
                    "calculate_distance": 1
                },
                "FUN_08008590": {
                    "calculate_difference2": 1,
                    "calculate_time": 1
                },
                "FUN_08008640": {
                    "calculate_braking_force": 1,
                    "calculate_difference4": 1
                },
                "FUN_08008894": {
                    "calculate_acceleration": 1,
                    "calculate_difference3": 1
                },
                "FUN_08008b24": {
                    "is_parameter_not_zero3": 1,
                    "is_sunny": 1
                },
                "FUN_08008b60": {
                    "is_night_mode": 1,
                    "is_speed_zero": 1
                },
                "FUN_08008ba0": {
                    "calculate_parameter2": 1,
                    "prev_block_index": 1
                },
                "FUN_08008bf0": {
                    "calculate_parameter7": 1,
                    "calculate_speed_diff": 1
                },
                "FUN_08008c30": {
                    "calculate_parameter8": 1,
                    "calculate_smaller_diff": 1
                },
                "FUN_08008cd8": {
                    "calculate_parameter": 1,
                    "next_block_index": 1
                },
                "FUN_08008cdc": {
                    "calculate_parameter4": 1,
                    "prev_min_speed": 1
                },
                "FUN_08008e44": {
                    "calculate_parameter6": 1,
                    "calculate_speed_limit": 1
                },
                "FUN_08008eec": {
                    "calculate_parameter3": 1,
                    "min_speed": 1
                },
                "FUN_08009054": {
                    "calculate_parameter5": 1,
                    "next_min_speed": 1
                },
                "FUN_08009228": {
                    "is_parameter_not_zero": 1,
                    "is_rainy": 1
                },
                "FUN_08009250": {
                    "is_day_mode": 1,
                    "is_parameter_zero": 1
                },
                "FUN_08009264": {
                    "is_parameter_not_zero2": 1,
                    "is_snowy": 1
                },
                "FUN_08009318": {
                    "calculate_bigger_diff": 1,
                    "calculate_signed_difference2": 1
                },
                "FUN_080095b8": {
                    "calculate_block_index": 1,
                    "calculate_signed_difference": 1
                },
                "FUN_080098d0": {
                    "max_allowable_speed": 2
                },
                "__addsf3": {
                    "floating_point_add": 1
                },
                "__aeabi_d2iz": {
                    "double_to_integer": 1
                },
                "__aeabi_d2uiz": {
                    "double_to_unsigned_integer": 1
                },
                "__aeabi_dcmpgt": {
                    "double_compare_greater_than": 1
                },
                "__aeabi_dcmplt": {
                    "double_compare_greater_than": 1
                },
                "__aeabi_f2d": {
                    "float_to_double": 1
                },
                "__aeabi_fadd": {
                    "float_add": 1
                },
                "__aeabi_fcmpgt": {
                    "float_compare_greater_than": 1
                },
                "__aeabi_fcmplt": {
                    "float_compare_less_than": 1
                },
                "__aeabi_fdiv": {
                    "float_divide": 1
                },
                "__aeabi_fmul": {
                    "float_multiply": 1
                },
                "__aeabi_fsub": {
                    "float_subtract": 1
                },
                "__divdf3": {
                    "double_divide": 1
                },
                "__floatsisf": {
                    "integer_to_float": 1
                },
                "__muldf3": {
                    "double_multiply": 1
                },
                "__subdf3": {
                    "double_subtract": 1
                },
                "__truncdfsf2": {
                    "double_to_float": 1
                },
                "ceil": {
                    "round_up": 1
                },
                "iVar10": {
                    "array_index": 1,
                    "block_index": 12,
                    "index": 8,
                    "int_result4": 1,
                    "offset": 3,
                    "start_index": 1,
                    "temp2": 1,
                    "temp_var1": 1
                },
                "iVar12": {
                    "abs_diff": 1,
                    "abs_difference": 2,
                    "abs_value": 1,
                    "absolute_diff": 1,
                    "absolute_difference": 4,
                    "calculation": 1,
                    "deviation": 1,
                    "diff": 8,
                    "diff_value": 1,
                    "difference": 8,
                    "temp3": 1,
                    "temp_var": 1,
                    "temp_var2": 1
                },
                "iVar2": {
                    "acc_rounded": 1,
                    "acceleration_rounded": 4,
                    "acceleration_val": 1,
                    "acceleration_x_int": 1,
                    "distance_int": 1,
                    "int_result1": 1,
                    "int_value1": 1,
                    "result1": 1,
                    "round1": 1,
                    "rounded1": 2,
                    "rounded_accel": 1,
                    "rounded_acceleration": 3,
                    "rounded_distance": 1,
                    "rounded_duration": 1,
                    "rounded_height": 1,
                    "rounded_result1": 2,
                    "rounded_speed1": 1,
                    "rounded_value1": 1,
                    "value1": 5,
                    "var1": 1
                },
                "iVar3": {
                    "acceleration_y_int": 1,
                    "braking_force_val": 1,
                    "dec_result": 1,
                    "deceleration_rounded": 1,
                    "int_result2": 1,
                    "int_value2": 1,
                    "result2": 1,
                    "round2": 1,
                    "rounded2": 2,
                    "rounded_decel": 1,
                    "rounded_deceleration": 1,
                    "rounded_distance": 1,
                    "rounded_result2": 2,
                    "rounded_speed": 1,
                    "rounded_speed2": 1,
                    "rounded_time": 1,
                    "rounded_value2": 1,
                    "rounded_velocity": 1,
                    "rounded_width": 1,
                    "time_int": 1,
                    "value2": 5,
                    "var2": 1,
                    "velocity_rounded": 2,
                    "weight_rounded": 1
                },
                "iVar4": {
                    "acceleration_int": 1,
                    "acceleration_z_int": 1,
                    "distance_rounded": 2,
                    "friction_rounded": 1,
                    "int_result3": 1,
                    "int_value3": 1,
                    "jer_result": 1,
                    "jerk_rounded": 1,
                    "result3": 1,
                    "round3": 1,
                    "rounded3": 2,
                    "rounded_acceleration": 1,
                    "rounded_brake_power": 1,
                    "rounded_distance": 2,
                    "rounded_drag": 1,
                    "rounded_length": 1,
                    "rounded_result3": 2,
                    "rounded_speed3": 1,
                    "rounded_time": 1,
                    "rounded_value3": 1,
                    "value3": 5,
                    "var3": 1,
                    "wind_resistance_val": 1
                },
                "local_1c": {
                    "inverse_distance": 1,
                    "inverse_divisor": 1,
                    "local_1c": 1,
                    "local_modifier": 1,
                    "local_temp": 1,
                    "local_value2": 1,
                    "local_var2": 4,
                    "local_variable2": 3,
                    "local_velocity": 1,
                    "max_acceleration_adj": 1,
                    "max_allowable_speed": 1,
                    "max_speed": 1,
                    "multiplier": 1,
                    "output2": 2,
                    "result6": 1,
                    "result7": 1,
                    "speed_factor": 1,
                    "speed_multiplier": 1,
                    "temp": 1,
                    "temp9": 1,
                    "temp_float": 1,
                    "temp_float3": 1,
                    "temp_var": 1,
                    "temp_var3": 1,
                    "temp_var4": 1
                },
                "local_20": {
                    "distance": 1,
                    "final_distance": 1,
                    "final_speed": 1,
                    "local_value1": 1,
                    "local_var1": 4,
                    "local_variable1": 3,
                    "lowest_speed": 1,
                    "max_speed": 3,
                    "max_speed_adj": 1,
                    "min_allowable_speed": 1,
                    "new_max": 1,
                    "new_speed": 1,
                    "output1": 2,
                    "result6": 1,
                    "result7": 1,
                    "result_value": 1,
                    "speed": 1,
                    "speed_limit": 1,
                    "speed_value": 1,
                    "temp8": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "trunc_divisor": 1
                },
                "lround": {
                    "lround": 1,
                    "round_to_integer": 1
                },
                "max_allowable_speed": {
                    "get_max_allowable_speed": 2,
                    "max_allowable_speed": 1
                },
                "next_block_index": {
                    "get_next_block_index": 2,
                    "next_block_index": 1
                },
                "param_1": {
                    "acceleration": 11,
                    "acceleration_x": 1,
                    "distance": 2,
                    "duration": 1,
                    "factor1": 1,
                    "height": 1,
                    "input1": 7,
                    "param1": 5,
                    "parameter1": 2
                },
                "param_2": {
                    "acceleration_y": 1,
                    "braking_force": 1,
                    "deceleration": 4,
                    "distance": 1,
                    "factor2": 1,
                    "input2": 7,
                    "param2": 5,
                    "parameter2": 2,
                    "speed": 1,
                    "time": 2,
                    "velocity": 4,
                    "weight": 1,
                    "width": 1
                },
                "param_3": {
                    "acceleration": 2,
                    "acceleration_z": 1,
                    "brake_power": 1,
                    "distance": 4,
                    "drag": 1,
                    "factor3": 1,
                    "friction": 1,
                    "input3": 7,
                    "jerk": 1,
                    "jerking": 1,
                    "length": 1,
                    "param3": 5,
                    "parameter3": 2,
                    "time": 2,
                    "wind_resistance": 1
                },
                "param_4": {
                    "distance": 1,
                    "input4": 7,
                    "mass": 2,
                    "max_speed": 4,
                    "maximum_speed": 1,
                    "param4": 6,
                    "parameter4": 2,
                    "speed": 1,
                    "speed_multiplier": 1,
                    "target_speed": 1,
                    "time": 3,
                    "timestep": 1,
                    "weight": 1
                },
                "param_5": {
                    "flag": 8,
                    "is_braking": 2,
                    "is_enabled": 1,
                    "is_forward": 1,
                    "is_negative": 2,
                    "is_negative_speed": 1,
                    "is_raining": 1,
                    "is_rapid": 1,
                    "is_special_case": 1,
                    "is_square": 1,
                    "negative": 1,
                    "param5": 4,
                    "reverse": 3,
                    "reverse_flag": 1,
                    "reversed": 2,
                    "use_default": 1
                },
                "planner_recalculate": {
                    "planner_recalculate": 2,
                    "recalculate_planner": 1
                },
                "puVar11": {
                    "array": 1,
                    "array_pointer": 1,
                    "block_data": 1,
                    "block_data_pointer": 1,
                    "block_dimensions": 1,
                    "block_parameters": 1,
                    "block_pointer": 3,
                    "block_properties": 1,
                    "block_status": 1,
                    "buffer": 1,
                    "data_ptr": 1,
                    "p_block_condition": 1,
                    "pointer": 3,
                    "pointer1": 4,
                    "pointer_to_data": 1,
                    "speed": 1,
                    "speed_control": 1,
                    "speed_flags": 2,
                    "speed_limits": 1,
                    "speed_parameters": 1,
                    "speed_pointer": 1,
                    "speed_ptr": 2
                },
                "sqrt": {
                    "square_root": 1
                },
                "temp": {
                    "temp_float4": 1
                },
                "temp2": {
                    "temp_float5": 1
                },
                "uVar1": {
                    "acc_result": 1,
                    "acceleration_float": 3,
                    "acceleration_mul": 1,
                    "acceleration_multiplier": 2,
                    "acceleration_value": 1,
                    "acceleration_x_float": 1,
                    "block_condition_x": 1,
                    "distance_mult": 1,
                    "distance_ratio": 1,
                    "factor1": 1,
                    "float_result1": 1,
                    "height_mult": 1,
                    "multiplied_result1": 1,
                    "multiplier": 1,
                    "multiplier1": 1,
                    "result1": 12,
                    "speed1": 1
                },
                "uVar13": {
                    "calculation2": 1,
                    "float_result7": 1,
                    "max_absolute_difference": 1,
                    "max_diff": 2,
                    "max_difference": 5,
                    "max_distance": 1,
                    "max_index": 1,
                    "max_val": 1,
                    "max_value": 2,
                    "min": 1,
                    "min_value": 3,
                    "minimum": 1,
                    "minimum_diff": 1,
                    "result7": 3,
                    "temp2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp_max": 1,
                    "u_var13": 2,
                    "width_length_max": 1
                },
                "uVar14": {
                    "conversion_result1": 1,
                    "double_result1": 2,
                    "double_speed1": 1,
                    "double_sum": 1,
                    "float_result": 1,
                    "float_result1": 1,
                    "float_to_double": 1,
                    "floating1": 1,
                    "floating_max": 1,
                    "floating_value1": 1,
                    "local_speed": 1,
                    "result": 1,
                    "result4": 1,
                    "result7": 1,
                    "result8": 1,
                    "speed": 1,
                    "sqrt_temp": 1,
                    "square_sum": 1,
                    "squared_distance": 1,
                    "sum_of_squares": 1,
                    "temp1": 2,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_double": 2,
                    "temp_float": 1,
                    "u_var14": 1
                },
                "uVar15": {
                    "ceil_temp": 1,
                    "combined_speed": 1,
                    "conversion_result2": 1,
                    "div_result1": 1,
                    "double_result": 1,
                    "double_result2": 2,
                    "float_result2": 1,
                    "floating2": 1,
                    "floating_value2": 1,
                    "input_acceleration_float": 1,
                    "result2": 1,
                    "result8": 1,
                    "result9": 1,
                    "speed": 1,
                    "temp": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp4": 2,
                    "temp6": 1,
                    "temp_double2": 2,
                    "temp_float": 1,
                    "temp_value": 1,
                    "u_var15": 1
                },
                "uVar16": {
                    "conversion_result3": 1,
                    "div_result2": 1,
                    "double_result2": 1,
                    "double_result3": 2,
                    "final_speed": 1,
                    "float_result3": 1,
                    "floating3": 1,
                    "floating_value3": 1,
                    "input_acceleration_int": 1,
                    "result10": 1,
                    "result3": 1,
                    "result9": 1,
                    "sqrt_temp2": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp5": 2,
                    "temp7": 1,
                    "temp_double3": 2,
                    "temp_float2": 1,
                    "temp_float3": 1,
                    "temp_value2": 1,
                    "u_var16": 1
                },
                "uVar5": {
                    "acc_div": 1,
                    "acceleration_fraction": 1,
                    "acceleration_y_float": 1,
                    "braking_force_mul": 1,
                    "deceleration_float": 1,
                    "deceleration_multiplier": 1,
                    "deceleration_value": 1,
                    "divisor1": 1,
                    "factor2": 1,
                    "float_result2": 1,
                    "multiplied_result2": 1,
                    "multiplier2": 1,
                    "result2": 12,
                    "speed2": 1,
                    "time_mult": 1,
                    "time_ratio": 1,
                    "velocity_float": 2,
                    "velocity_multiplier": 1,
                    "width_mult": 1
                },
                "uVar6": {
                    "acceleration_mult": 1,
                    "acceleration_z_float": 1,
                    "brake_power_multiplier": 1,
                    "dec_div": 1,
                    "distance_float": 2,
                    "distance_multiplier": 1,
                    "divisor2": 1,
                    "drag_value": 1,
                    "factor3": 1,
                    "float_result3": 1,
                    "jerk_float": 1,
                    "length_mult": 1,
                    "max_speed_cmp": 1,
                    "multiplied_result3": 1,
                    "multiplier3": 1,
                    "result3": 12,
                    "speed3": 1,
                    "weight_fraction": 1,
                    "wind_resistance_mul": 1
                },
                "uVar7": {
                    "accel_squared": 1,
                    "acceleration_squared": 1,
                    "distance_squared": 1,
                    "divisor3": 1,
                    "float_result4": 1,
                    "friction_fraction": 1,
                    "jer_div": 1,
                    "result4": 10,
                    "resultant_acceleration": 1,
                    "squared_multiplier1": 1,
                    "squared_root": 1,
                    "squared_speed1": 1,
                    "squared_sum": 4,
                    "sum": 1,
                    "sum_of_squares": 1,
                    "time_multiplier": 1,
                    "width_height_sqrt": 1
                },
                "uVar8": {
                    "decel_squared": 1,
                    "float_result5": 1,
                    "multiplied_result4": 1,
                    "result": 1,
                    "result5": 10,
                    "speed_mul": 1,
                    "squared_multiplier2": 1,
                    "squared_speed2": 1,
                    "squared_sum": 1,
                    "temp": 3,
                    "temp1": 1,
                    "temp_acceleration": 1,
                    "temp_value": 1,
                    "temp_var": 1,
                    "u_var8": 1,
                    "velocity_squared": 2,
                    "width_distance": 1
                },
                "uVar9": {
                    "distance_squared": 1,
                    "drag_squared": 1,
                    "float_result6": 1,
                    "height_distance": 1,
                    "max": 1,
                    "max_acceleration": 1,
                    "max_deviation": 1,
                    "max_diff": 2,
                    "max_diff_cmp": 1,
                    "max_difference": 1,
                    "max_distance": 1,
                    "max_parameter": 1,
                    "max_value": 6,
                    "min_value": 1,
                    "result6": 5,
                    "temp1": 2,
                    "temp2": 2,
                    "u_var9": 2
                }
            },
            "called": [
                "FUN_080098d0",
                "FUN_08008b60",
                "FUN_08008cd8",
                "FUN_08008ba0",
                "FUN_08002870",
                "FUN_08008eec",
                "FUN_08009250",
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_08002978",
                "FUN_08002edc",
                "FUN_080095b8",
                "FUN_080082d0",
                "FUN_08008590",
                "FUN_08008e44",
                "FUN_08008bf0",
                "FUN_08009318",
                "FUN_08009228",
                "FUN_08008c30",
                "FUN_08008894",
                "FUN_08009264",
                "FUN_08008640",
                "FUN_08008b24"
            ],
            "calling": [
                "FUN_08001e98"
            ],
            "code": "\nvoid calculate_speed_limits_08003004(undefined4 acceleration,undefined4 input2,undefined4 input3,undefined4 input4,\n                 char flag)\n\n{\n  undefined4 result1;\n  int value1;\n  int value2;\n  int value3;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  undefined4 result5;\n  uint max_value;\n  int block_index;\n  ushort *pointer1;\n  int diff;\n  uint max_difference;\n  undefined8 temp1;\n  undefined8 temp2;\n  undefined8 temp_double3;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  \n  block_index = (uint)DAT_20000cf0 * 0x40;\n  pointer1 = (ushort *)(&DAT_20000870 + block_index);\n  result1 = float_multiply(DAT_20000ebc,acceleration);\n  temp1 = float_to_double(result1);\n  value1 = lround((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  result1 = float_multiply(DAT_20000ec0,input2);\n  temp1 = float_to_double(result1);\n  value2 = lround((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  result1 = float_multiply(DAT_20000ec4,input3);\n  temp1 = float_to_double(result1);\n  value3 = lround((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n  *pointer1 = 0;\n  if (value1 < DAT_20000cf4) {\n    *pointer1 = *pointer1 | 0x20;\n  }\n  if (value2 < DAT_20000cf8) {\n    *pointer1 = *pointer1 | 0x880;\n  }\n  if (value3 < DAT_20000cfc) {\n    *pointer1 = *pointer1 | 0x200;\n  }\n  diff = value1 - DAT_20000cf4;\n  if (diff < 0) {\n    diff = -diff;\n  }\n  *(int *)(&DAT_20000874 + block_index) = diff;\n  diff = value2 - DAT_20000cf8;\n  if (diff < 0) {\n    diff = -diff;\n  }\n  *(int *)(&DAT_20000878 + block_index) = diff;\n  diff = value3 - DAT_20000cfc;\n  if (diff < 0) {\n    diff = -diff;\n  }\n  *(int *)(&DAT_2000087c + block_index) = diff;\n  max_value = *(uint *)(&DAT_2000087c + block_index);\n  if (*(uint *)(&DAT_2000087c + block_index) < *(uint *)(&DAT_20000878 + block_index)) {\n    max_value = *(uint *)(&DAT_20000878 + block_index);\n  }\n  max_difference = *(uint *)(&DAT_20000874 + block_index);\n  if (*(uint *)(&DAT_20000874 + block_index) < max_value) {\n    max_difference = max_value;\n  }\n  *(uint *)(&DAT_20000880 + block_index) = max_difference;\n  if (*(int *)(&DAT_20000880 + block_index) != 0) {\n    result1 = integer_to_float(value1 - DAT_20000cf4);\n    result1 = float_divide(result1,DAT_20000ebc);\n    result2 = integer_to_float(value2 - DAT_20000cf8);\n    result2 = float_divide(result2,DAT_20000ec0);\n    result3 = integer_to_float(value3 - DAT_20000cfc);\n    result3 = float_divide(result3,DAT_20000ec4);\n    result4 = float_multiply(result1,result1);\n    result5 = float_multiply(result2,result2);\n    result4 = floating_point_add(result4,result5);\n    result5 = float_multiply(result3,result3);\n    result4 = floating_point_add(result4,result5);\n    temp1 = float_to_double(result4);\n    temp1 = square_root((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    result4 = double_to_float((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    *(undefined4 *)(&DAT_20000890 + block_index) = result4;\n    result4 = float_divide(0x3f800000,*(undefined4 *)(&DAT_20000890 + block_index));\n    if (flag == '\\0') {\n      local_var2 = float_multiply(input4,result4);\n    }\n    else {\n      local_var2 = float_divide(0x3f800000,input4);\n    }\n    result5 = float_multiply(*(undefined4 *)(&DAT_20000890 + block_index),local_var2);\n    *(undefined4 *)(&DAT_20000884 + block_index) = result5;\n    result5 = integer_to_float(*(undefined4 *)(&DAT_20000880 + block_index));\n    result5 = float_multiply(result5,local_var2);\n    temp1 = float_to_double(result5);\n    temp1 = round_up((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    result5 = double_to_unsigned_integer((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    *(undefined4 *)(&DAT_200008ac + block_index) = result5;\n    result5 = integer_to_float(*(undefined4 *)(&DAT_20000880 + block_index));\n    result5 = float_multiply(result5,result4);\n    result5 = float_multiply(result5,DAT_20000edc);\n    result5 = float_divide(result5,0x453b8000);\n    temp1 = float_to_double(result5);\n    temp1 = round_up((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    result5 = double_to_integer((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n    *(undefined4 *)(&DAT_200008a0 + block_index) = result5;\n    max_value = float_multiply(result1,result4);\n    result1 = float_multiply(result2,result4);\n    result2 = float_multiply(result3,result4);\n    local_var1 = 0;\n    if ((DAT_20000cf0 != DAT_20000cf1) && (diff = float_compare_greater_than(DAT_20000d0c,0), diff != 0)) {\n      result3 = float_multiply(DAT_20000d00 ^ 0x80000000,max_value);\n      result4 = float_multiply(DAT_20000d04,result1);\n      result3 = float_subtract(result3,result4);\n      result4 = float_multiply(DAT_20000d08,result2);\n      result3 = float_subtract(result3,result4);\n      temp1 = float_to_double(result3);\n      diff = double_compare_greater_than((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x66666666,0x3fee6666);\n      if (diff != 0) {\n        diff = float_compare_less_than(DAT_20000d0c,*(undefined4 *)(&DAT_20000884 + block_index));\n        local_var1 = DAT_20000d0c;\n        if (diff == 0) {\n          local_var1 = *(undefined4 *)(&DAT_20000884 + block_index);\n        }\n        temp1 = float_to_double(result3);\n        diff = double_compare_greater_than((int)temp1,(int)((ulonglong)temp1 >> 0x20),0x66666666,0xbfee6666);\n        if (diff != 0) {\n          temp1 = float_to_double(result3);\n          temp1 = double_subtract(0,0x3ff00000,(int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          temp1 = double_multiply((int)temp1,(int)((ulonglong)temp1 >> 0x20),0,0x3fe00000);\n          temp1 = square_root((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          result3 = double_to_float((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          temp1 = float_to_double(local_var1);\n          result4 = float_multiply(DAT_20000edc,DAT_20000ee0);\n          result4 = float_multiply(result4,result3);\n          temp2 = float_to_double(result4);\n          temp_double3 = float_to_double(result3);\n          temp_double3 = double_subtract(0,0x3ff00000,(int)temp_double3,(int)((ulonglong)temp_double3 >> 0x20));\n          temp2 = double_divide((int)temp2,(int)((ulonglong)temp2 >> 0x20),(int)temp_double3,\n                            (int)((ulonglong)temp_double3 >> 0x20));\n          temp2 = square_root((int)temp2,(int)((ulonglong)temp2 >> 0x20));\n          diff = double_compare_greater_than((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                                  (int)((ulonglong)temp2 >> 0x20));\n          if (diff == 0) {\n            result4 = float_multiply(DAT_20000edc,DAT_20000ee0);\n            result4 = float_multiply(result4,result3);\n            temp1 = float_to_double(result4);\n            temp2 = float_to_double(result3);\n            temp2 = double_subtract(0,0x3ff00000,(int)temp2,(int)((ulonglong)temp2 >> 0x20));\n            temp1 = double_divide((int)temp1,(int)((ulonglong)temp1 >> 0x20),(int)temp2,\n                              (int)((ulonglong)temp2 >> 0x20));\n            temp1 = square_root((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n            local_var1 = double_to_float((int)temp1,(int)((ulonglong)temp1 >> 0x20));\n          }\n        }\n      }\n    }\n    *(undefined4 *)(&DAT_2000088c + block_index) = local_var1;\n    result4 = get_max_allowable_speed(DAT_20000edc ^ 0x80000000,0,*(undefined4 *)(&DAT_20000890 + block_index))\n    ;\n    diff = float_compare_less_than(local_var1,result4);\n    result3 = result4;\n    if (diff != 0) {\n      result3 = local_var1;\n    }\n    *(undefined4 *)(&DAT_20000888 + block_index) = result3;\n    diff = __aeabi_fcmpge(result4,*(undefined4 *)(&DAT_20000884 + block_index));\n    if (diff == 0) {\n      (&DAT_20000895)[block_index] = 0;\n    }\n    else {\n      (&DAT_20000895)[block_index] = 1;\n    }\n    (&DAT_20000894)[block_index] = 1;\n    DAT_20000d0c = *(undefined4 *)(&DAT_20000884 + block_index);\n    DAT_20000cf0 = DAT_20000cf2;\n    DAT_20000d00 = max_value;\n    DAT_20000d04 = result1;\n    DAT_20000d08 = result2;\n    DAT_20000cf2 = get_next_block_index(DAT_20000cf2);\n    DAT_20000cf4 = value1;\n    DAT_20000cf8 = value2;\n    DAT_20000cfc = value3;\n    planner_recalculate();\n  }\n  return;\n}\n\n",
            "current_name": "calculate_speed_limits_08003004",
            "entrypoint": "0x08003004",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003004": "calculate_speed_limits_08003004",
                "__addsf3": "floating_point_add",
                "__aeabi_d2iz": "double_to_integer",
                "__aeabi_d2uiz": "double_to_unsigned_integer",
                "__aeabi_dcmpgt": "double_compare_greater_than",
                "__aeabi_dcmplt": "double_compare_greater_than",
                "__aeabi_f2d": "float_to_double",
                "__aeabi_fcmpgt": "float_compare_greater_than",
                "__aeabi_fcmplt": "float_compare_less_than",
                "__aeabi_fdiv": "float_divide",
                "__aeabi_fmul": "float_multiply",
                "__aeabi_fsub": "float_subtract",
                "__divdf3": "double_divide",
                "__floatsisf": "integer_to_float",
                "__muldf3": "double_multiply",
                "__subdf3": "double_subtract",
                "__truncdfsf2": "double_to_float",
                "ceil": "round_up",
                "iVar10": "block_index",
                "iVar12": "diff",
                "iVar2": "value1",
                "iVar3": "value2",
                "iVar4": "value3",
                "local_1c": "local_var2",
                "local_20": "local_var1",
                "max_allowable_speed": "get_max_allowable_speed",
                "next_block_index": "get_next_block_index",
                "param_1": "acceleration",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "flag",
                "puVar11": "pointer1",
                "sqrt": "square_root",
                "uVar1": "result1",
                "uVar13": "max_difference",
                "uVar14": "temp1",
                "uVar15": "temp2",
                "uVar16": "temp_double3",
                "uVar5": "result2",
                "uVar6": "result3",
                "uVar7": "result4",
                "uVar8": "result5",
                "uVar9": "max_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080035ec": {
            "additional_data": {
                "FUN_080035ec": {
                    "assign_parameters": 2,
                    "assign_params": 2,
                    "initialize_data": 5,
                    "initialize_parameters": 10,
                    "initialize_params": 1,
                    "initialize_variables": 3,
                    "save_parameters": 1,
                    "set_data": 1,
                    "set_parameters": 3,
                    "set_parameters_function": 1,
                    "set_params": 1,
                    "store_parameters": 1
                },
                "param_1": {
                    "config_value1": 1,
                    "data1": 4,
                    "data_param1": 1,
                    "first_parameter": 3,
                    "initial_value1": 1,
                    "input1": 3,
                    "input_1": 2,
                    "input_param1": 1,
                    "input_parameter_1": 1,
                    "input_value1": 1,
                    "new_param1": 1,
                    "param1": 1,
                    "parameter1": 6,
                    "value1": 3,
                    "value_1": 2
                },
                "param_2": {
                    "config_value2": 1,
                    "data2": 4,
                    "data_param2": 1,
                    "initial_value2": 1,
                    "input2": 3,
                    "input_2": 2,
                    "input_param2": 1,
                    "input_parameter_2": 1,
                    "input_value2": 1,
                    "new_param2": 1,
                    "param2": 1,
                    "parameter2": 6,
                    "second_parameter": 3,
                    "value2": 3,
                    "value_2": 2
                },
                "param_3": {
                    "config_value3": 1,
                    "data3": 4,
                    "data_param3": 1,
                    "initial_value3": 1,
                    "input3": 3,
                    "input_3": 2,
                    "input_param3": 1,
                    "input_parameter_3": 1,
                    "input_value3": 1,
                    "new_param3": 1,
                    "param3": 1,
                    "parameter3": 6,
                    "third_parameter": 3,
                    "value3": 3,
                    "value_3": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_0800283a"
            ],
            "code": "\nvoid initialize_parameters_080035ec(undefined4 parameter1,undefined4 parameter2,undefined4 parameter3)\n\n{\n  DAT_20000cf4 = parameter1;\n  DAT_20000cf8 = parameter2;\n  DAT_20000cfc = parameter3;\n  return;\n}\n\n",
            "current_name": "initialize_parameters_080035ec",
            "entrypoint": "0x080035ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080035ec": "initialize_parameters_080035ec",
                "param_1": "parameter1",
                "param_2": "parameter2",
                "param_3": "parameter3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003618": {
            "additional_data": {
                "DAT_20000880": {
                    "array2": 1,
                    "data_array2": 1,
                    "temp_data_array": 1,
                    "value_array2": 1
                },
                "DAT_20000888": {
                    "unused_data1": 1
                },
                "DAT_2000088c": {
                    "unused_data2": 1
                },
                "DAT_20000890": {
                    "array1": 1,
                    "data_array1": 1,
                    "planner_data_array": 1,
                    "value_array1": 1
                },
                "DAT_20000894": {
                    "default_data": 1
                },
                "DAT_20000895": {
                    "unused_data3": 1
                },
                "DAT_20000cf1": {
                    "constant": 2,
                    "constant1": 1,
                    "constant_factor": 1,
                    "multiplier": 1
                },
                "FUN_08002edc": {
                    "initialize_planner": 1,
                    "perform_planner_recalculate": 1,
                    "planner_recalculate": 16,
                    "re_calculate": 1,
                    "recalculate_planner": 1
                },
                "FUN_08003618": {
                    "calculate_new_value": 2,
                    "recalculate_planner": 1,
                    "update_calculation": 2,
                    "update_parameter": 1,
                    "update_parameter_value": 1,
                    "update_planner": 13,
                    "update_planner_data": 6,
                    "update_planner_parameters": 1,
                    "update_planner_values": 2,
                    "update_planner_variable": 1,
                    "update_value": 1
                },
                "FUN_08008e44": {
                    "calculate1": 1,
                    "calculate_factor": 2,
                    "calculate_factor_1": 1,
                    "calculate_fmul": 1,
                    "calculate_func1": 1,
                    "calculate_mul": 4,
                    "calculate_multiplier": 2,
                    "calculate_partial_result": 1,
                    "calculate_product": 4,
                    "multiply": 1,
                    "multiply_uint": 2
                },
                "FUN_08008eec": {
                    "calculate2": 1,
                    "calculate_div": 3,
                    "calculate_div1": 1,
                    "calculate_factor_2": 1,
                    "calculate_fdiv": 1,
                    "calculate_float_division": 1,
                    "calculate_fraction": 1,
                    "calculate_func2": 1,
                    "calculate_product": 1,
                    "calculate_ratio1": 1,
                    "calculate_result": 1,
                    "calculate_result1": 1,
                    "calculate_uint": 1,
                    "divide": 1,
                    "multiply_values": 2,
                    "multiply_with_offset": 1,
                    "perform_multiplication": 1
                },
                "FUN_08009054": {
                    "calculate3": 1,
                    "calculate_div2": 4,
                    "calculate_division": 2,
                    "calculate_factor_3": 1,
                    "calculate_fdiv_v2": 1,
                    "calculate_func3": 1,
                    "calculate_ratio2": 1,
                    "calculate_result2": 1,
                    "divide_result": 1,
                    "divide_values": 2,
                    "divide_with_offset": 1,
                    "perform_division": 1,
                    "process_uint": 1,
                    "recalculate": 1,
                    "recalculate_float_division": 1
                },
                "iVar2": {
                    "index": 25,
                    "offset": 6
                },
                "param_1": {
                    "input_value": 11,
                    "new_param": 1,
                    "new_value": 9,
                    "value": 9,
                    "value1": 1
                },
                "param_2": {
                    "value2": 1
                },
                "param_3": {
                    "unused_value": 1
                },
                "param_4": {
                    "unused_value": 1
                },
                "planner_recalculate": {
                    "calculate_new_planner_values": 1,
                    "recalculate_planner": 3,
                    "recalculate_planner_values": 1
                },
                "uVar1": {
                    "converted_float": 1,
                    "converted_input": 4,
                    "converted_param": 1,
                    "converted_val": 1,
                    "converted_value": 14,
                    "float_input_value": 1,
                    "float_param": 1,
                    "float_value": 8
                },
                "uVar3": {
                    "current_val": 1,
                    "current_value": 3,
                    "data_value": 1,
                    "divider": 1,
                    "divisor": 15,
                    "factor": 1,
                    "multiplier": 2,
                    "old_value": 2,
                    "stored_value": 1,
                    "temp_value": 1,
                    "value": 2,
                    "value1": 1
                }
            },
            "called": [
                "FUN_08008e44",
                "FUN_08008eec",
                "FUN_08009054",
                "FUN_08002edc"
            ],
            "calling": [
                "FUN_080058a0"
            ],
            "code": "\nvoid update_planner_data_08003618(undefined4 input_value)\n\n{\n  undefined4 converted_value;\n  int index;\n  undefined4 divisor;\n  \n  index = (uint)DAT_20000cf1 * 0x40;\n  divisor = *(undefined4 *)(&DAT_20000890 + index);\n  converted_value = __floatsisf(input_value);\n  converted_value = __aeabi_fmul(divisor,converted_value);\n  divisor = __floatsisf(*(undefined4 *)(&DAT_20000880 + index));\n  converted_value = __aeabi_fdiv(converted_value,divisor);\n  *(undefined4 *)(&DAT_20000890 + index) = converted_value;\n  *(undefined4 *)(&DAT_20000880 + index) = input_value;\n  *(undefined4 *)(&DAT_20000888 + index) = 0;\n  *(undefined4 *)(&DAT_2000088c + index) = 0;\n  (&DAT_20000895)[index] = 0;\n  (&DAT_20000894)[index] = 1;\n  recalculate_planner();\n  return;\n}\n\n",
            "current_name": "update_planner_data_08003618",
            "entrypoint": "0x08003618",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003618": "update_planner_data_08003618",
                "iVar2": "index",
                "param_1": "input_value",
                "planner_recalculate": "recalculate_planner",
                "uVar1": "converted_value",
                "uVar3": "divisor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800369c": {
            "additional_data": {
                "FUN_0800369c": {
                    "print_string": 27,
                    "write_string": 2,
                    "write_string_to_serial": 2
                },
                "local_c": {
                    "current_char": 26,
                    "current_character": 5
                },
                "param_1": {
                    "input_string": 7,
                    "str": 2,
                    "string": 16,
                    "string_input": 1,
                    "string_to_print": 4
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080039bc",
                "FUN_08004900"
            ],
            "code": "\nvoid print_string_0800369c(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    serial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_string_0800369c",
            "entrypoint": "0x0800369c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800369c": "print_string_0800369c",
                "local_c": "current_char",
                "param_1": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036c6": {
            "additional_data": {
                "FUN_080036c6": {
                    "print_string": 29,
                    "write_string_to_serial": 2
                },
                "local_c": {
                    "char_pointer": 1,
                    "current_char": 26,
                    "current_character": 3
                },
                "param_1": {
                    "input_string": 3,
                    "str": 2,
                    "string": 21,
                    "string_input": 1,
                    "string_to_print": 2,
                    "string_to_write": 1
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_080041a0",
                "FUN_08004228",
                "FUN_08004250",
                "FUN_0800423c",
                "FUN_08004030",
                "FUN_08004148",
                "FUN_08004900",
                "FUN_08004940",
                "FUN_080046d0"
            ],
            "code": "\nvoid print_string_080036c6(char *string)\n\n{\n  char *current_char;\n  \n  current_char = string;\n  while (*current_char != '\\0') {\n    serial_write(*current_char);\n    current_char = current_char + 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_string_080036c6",
            "entrypoint": "0x080036c6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036c6": "print_string_080036c6",
                "local_c": "current_char",
                "param_1": "string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080036f0": {
            "additional_data": {
                "FUN_080036f0": {
                    "print_binary": 21,
                    "print_binary_bits": 3,
                    "print_binary_digits": 3,
                    "print_binary_number": 2,
                    "print_bits": 2
                },
                "local_10": {
                    "bit_counter": 1,
                    "bit_index": 17,
                    "bit_position": 9,
                    "current_bit": 1,
                    "current_digit": 1,
                    "position": 1
                },
                "local_c": {
                    "bit_mask": 23,
                    "current_bit": 1,
                    "mask": 6
                },
                "param_1": {
                    "decimal_num": 1,
                    "input_number": 5,
                    "input_value": 3,
                    "num": 1,
                    "number": 21
                },
                "param_2": {
                    "bit_count": 7,
                    "bit_length": 2,
                    "bits": 3,
                    "bits_count": 1,
                    "num_bits": 17,
                    "num_digits": 1
                },
                "serial_write": {
                    "write_to_serial": 1
                },
                "uVar1": {
                    "binary_char": 1,
                    "bit_value": 16,
                    "char_to_print": 2,
                    "character": 1,
                    "digit": 2,
                    "output": 1,
                    "output_bit": 3,
                    "output_char": 1
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08003740",
                "FUN_0800375c"
            ],
            "code": "\nvoid print_binary_bits_080036f0(uint number,int num_bits)\n\n{\n  undefined4 bit_value;\n  int bit_index;\n  uint bit_mask;\n  \n  bit_mask = 1 << (num_bits - 1U & 0xff);\n  for (bit_index = 0; bit_index < num_bits; bit_index = bit_index + 1) {\n    if ((bit_mask & number) == 0) {\n      bit_value = 0x30;\n    }\n    else {\n      bit_value = 0x31;\n    }\n    write_to_serial(bit_value);\n    bit_mask = bit_mask >> 1;\n  }\n  return;\n}\n\n",
            "current_name": "print_binary_bits_080036f0",
            "entrypoint": "0x080036f0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080036f0": "print_binary_bits_080036f0",
                "local_10": "bit_index",
                "local_c": "bit_mask",
                "param_1": "number",
                "param_2": "num_bits",
                "serial_write": "write_to_serial",
                "uVar1": "bit_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003740": {
            "additional_data": {
                "FUN_080036f0": {
                    "convert_to_base2": 1,
                    "convert_to_binary": 1,
                    "print_base2": 13,
                    "print_base2_recursive": 1,
                    "print_base_2": 2
                },
                "FUN_08003740": {
                    "print_as_binary": 1,
                    "print_base2_helper": 1,
                    "print_base2_wrapper": 6,
                    "print_base_2_in_binary": 1,
                    "print_binary": 7,
                    "print_binary_representation": 1,
                    "print_in_base2": 8,
                    "print_in_base_2": 1,
                    "print_in_base_two": 1,
                    "print_in_binary": 2,
                    "print_number_in_binary": 2
                },
                "param_1": {
                    "data": 1,
                    "input": 3,
                    "input_num": 1,
                    "input_number": 3,
                    "input_value": 9,
                    "num": 1,
                    "number": 7,
                    "value": 6
                },
                "param_2": {
                    "base": 2,
                    "bit_count": 1,
                    "length": 3,
                    "num_bits": 5,
                    "num_digits": 2,
                    "num_of_bits": 1,
                    "num_of_digits": 1,
                    "number_of_bits": 1,
                    "precision": 1
                },
                "print_base2": {
                    "convert_to_binary": 1,
                    "print_base2": 1,
                    "print_binary_representation": 1,
                    "print_in_binary": 1
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [],
            "code": "\nvoid print_number_in_binary_08003740(undefined input_value)\n\n{\n  print_binary_representation(input_value,8);\n  return;\n}\n\n",
            "current_name": "print_number_in_binary_08003740",
            "entrypoint": "0x08003740",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003740": "print_number_in_binary_08003740",
                "param_1": "input_value",
                "print_base2": "print_binary_representation"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800375c": {
            "additional_data": {
                "0x10": {
                    "base": 1
                },
                "FUN_080036f0": {
                    "print_base2": 14,
                    "print_base2_helper": 1,
                    "print_digits_in_base2": 1,
                    "print_in_base2_helper": 1,
                    "print_in_base2_recursive": 1,
                    "print_number_in_base": 1,
                    "print_with_precision": 1
                },
                "FUN_0800375c": {
                    "print_as_base2": 1,
                    "print_base2": 1,
                    "print_base2_wrapper": 5,
                    "print_binary": 5,
                    "print_binary_param": 1,
                    "print_in_base2": 11,
                    "print_in_base_2": 1,
                    "print_in_binary": 5,
                    "print_number_as_binary": 1
                },
                "param_1": {
                    "input": 1,
                    "input_num": 3,
                    "input_number": 4,
                    "input_value": 6,
                    "number": 7,
                    "value": 10
                },
                "param_2": {
                    "base": 1,
                    "bit_count": 3,
                    "bit_length": 1,
                    "digits": 1,
                    "length": 6,
                    "num_bits": 1,
                    "num_digits": 2,
                    "precision": 1,
                    "size": 1
                },
                "print_base2": {
                    "print_base2": 1,
                    "print_in_base2": 3,
                    "print_number_in_binary": 1
                }
            },
            "called": [
                "FUN_080036f0"
            ],
            "calling": [
                "FUN_08004250"
            ],
            "code": "\nvoid print_in_base2_0800375c(undefined2 value)\n\n{\n  print_in_base2_0800375c(value,0x10);\n  return;\n}\n\n",
            "current_name": "print_in_base2_0800375c",
            "entrypoint": "0x0800375c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800375c": "print_in_base2_0800375c",
                "param_1": "value",
                "print_base2": "print_in_base2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003778": {
            "additional_data": {
                "FUN_08003778": {
                    "convert_and_print_integer": 1,
                    "convert_and_send": 1,
                    "convert_number_to_ascii": 1,
                    "print_integer": 1,
                    "print_number": 23,
                    "print_number_reversed": 1,
                    "print_uint": 1,
                    "print_uint_as_string": 1,
                    "print_uint_to_serial": 1
                },
                "acStack_15": {
                    "char_array": 1,
                    "converted_numbers": 2,
                    "digit_array": 2,
                    "digit_buffer": 3,
                    "digit_stack": 7,
                    "digits": 12,
                    "digits_buffer": 1,
                    "number_buffer": 1,
                    "number_stack": 1,
                    "number_string": 1
                },
                "local_1c": {
                    "current_digit": 1,
                    "current_number": 2,
                    "dividend": 12,
                    "num_copy": 1,
                    "remainder": 3,
                    "remaining_number": 9,
                    "remaining_numbers": 1,
                    "temp_number": 2
                },
                "local_9": {
                    "count": 2,
                    "counter": 1,
                    "digit": 7,
                    "digit_count": 10,
                    "index": 1,
                    "num_digits": 9,
                    "number_of_digits": 1
                },
                "param_1": {
                    "input_number": 3,
                    "number": 27,
                    "number_to_print": 1
                },
                "serial_write": {
                    "write_to_serial": 2
                },
                "uVar1": {
                    "counter": 7,
                    "digit": 1,
                    "digit_index": 2,
                    "index": 8,
                    "iteration_counter": 1,
                    "temp": 9,
                    "temp_var": 1,
                    "temp_variable": 1
                }
            },
            "called": [
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080037fc"
            ],
            "code": "\nvoid print_number_reversed_08003778(uint number)\n\n{\n  uint temp;\n  uint dividend;\n  char digits [12];\n  byte digit_count;\n  \n  digit_count = 0;\n  dividend = number;\n  if (number == 0) {\n    write_to_serial(0x30);\n  }\n  else {\n    for (; dividend != 0; dividend = dividend / 10) {\n      temp = (uint)digit_count;\n      digit_count = digit_count + 1;\n      digits[temp + 1] = (char)(dividend % 10) + '0';\n    }\n    for (; digit_count != 0; digit_count = digit_count - 1) {\n      write_to_serial(digits[digit_count]);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "print_number_reversed_08003778",
            "entrypoint": "0x08003778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003778": "print_number_reversed_08003778",
                "acStack_15": "digits",
                "local_1c": "dividend",
                "local_9": "digit_count",
                "param_1": "number",
                "serial_write": "write_to_serial",
                "uVar1": "temp"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080037fc": {
            "additional_data": {
                "FUN_080037fc": {
                    "print_abs_int": 1,
                    "print_abs_value": 3,
                    "print_absolute_value": 21,
                    "print_integer": 2,
                    "print_signed_int": 1,
                    "print_signed_integer": 2,
                    "print_unsigned_integer": 1
                },
                "local_c": {
                    "abs_num": 1,
                    "abs_value": 7,
                    "absolute_num": 1,
                    "absolute_number": 3,
                    "absolute_val": 1,
                    "absolute_value": 18
                },
                "param_1": {
                    "input": 1,
                    "input_num": 1,
                    "input_number": 5,
                    "input_value": 4,
                    "num": 3,
                    "number": 7,
                    "value": 10
                }
            },
            "called": [
                "FUN_08003778",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_08004250",
                "FUN_08004900",
                "FUN_080046d0"
            ],
            "code": "\nvoid print_absolute_value_080037fc(int value)\n\n{\n  int absolute_value;\n  \n  absolute_value = value;\n  if (value < 0) {\n    serial_write(0x2d);\n    absolute_value = -value;\n  }\n  print_uint32_base10(absolute_value);\n  return;\n}\n\n",
            "current_name": "print_absolute_value_080037fc",
            "entrypoint": "0x080037fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080037fc": "print_absolute_value_080037fc",
                "local_c": "absolute_value",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003826": {
            "additional_data": {
                "FUN_08003826": {
                    "calculate_and_display_float": 1,
                    "convert_and_print_float": 1,
                    "convert_float_to_ascii": 2,
                    "convert_float_to_char_array": 1,
                    "convert_float_to_decimal": 10,
                    "convert_float_to_string": 6,
                    "format_and_print_float": 3,
                    "format_float": 1,
                    "format_float_to_serial": 1,
                    "print_float_number": 1,
                    "reverse_and_display_float": 1,
                    "reverse_and_print_float": 3
                },
                "acStack_1d": {
                    "ascii_buffer": 1,
                    "buffer": 1,
                    "char_array": 2,
                    "converted_string": 1,
                    "decimal_buffer": 1,
                    "decimal_digits": 1,
                    "decimal_stack": 1,
                    "decimal_str": 1,
                    "decimal_string": 6,
                    "digits": 1,
                    "float_string": 3,
                    "formatted_float": 2,
                    "number_string": 1,
                    "output_buffer": 1,
                    "output_string": 3,
                    "result_string": 2,
                    "string": 1,
                    "string_buffer": 2
                },
                "bVar3": {
                    "decimal_point": 1,
                    "digit": 9,
                    "digit_char": 1,
                    "extra_digit": 1,
                    "is_zero": 1,
                    "string_index_temp2": 1,
                    "temp_byte": 15,
                    "temp_var": 1
                },
                "iVar1": {
                    "is_input_negative": 1,
                    "is_negative": 29
                },
                "iVar_1": {
                    "is_negative": 1
                },
                "local_10": {
                    "divided_float": 1,
                    "divided_int": 1,
                    "dividend": 2,
                    "divisor": 2,
                    "int_value": 3,
                    "integer": 1,
                    "integer_part": 14,
                    "integer_value": 2,
                    "quotient": 1,
                    "remainder": 1,
                    "temp_dividend": 1,
                    "temp_int": 1
                },
                "local_24": {
                    "abs_float": 4,
                    "abs_input": 1,
                    "abs_number": 2,
                    "abs_value": 5,
                    "absolute_float": 1,
                    "absolute_value": 1,
                    "converted_float": 1,
                    "float": 1,
                    "float_value": 7,
                    "modified_input": 2,
                    "normalized_value": 1,
                    "number": 2,
                    "updated_float": 1,
                    "value": 2
                },
                "local_9": {
                    "digit_count": 3,
                    "digit_index": 1,
                    "initial_digit": 1,
                    "iteration_count": 1,
                    "loop_count": 3,
                    "loop_counter": 10,
                    "num_digits": 2,
                    "num_of_decimal_places": 1
                },
                "local_a": {
                    "current_digit": 3,
                    "current_index": 1,
                    "decimal_digit": 1,
                    "decimal_index": 2,
                    "decimal_part": 2,
                    "digit": 2,
                    "digit_count": 1,
                    "digit_counter": 1,
                    "digit_index": 5,
                    "digit_placeholder": 1,
                    "digit_position": 1,
                    "digits": 1,
                    "index": 8,
                    "string_index": 1,
                    "zero_padding": 1
                },
                "param_1": {
                    "input": 8,
                    "input_float": 14,
                    "input_number": 2,
                    "input_value": 1,
                    "number": 2,
                    "value": 4
                },
                "serial_write": {
                    "write_to_serial": 1
                },
                "uVar2": {
                    "adjusted_float": 3,
                    "adjusted_value": 2,
                    "converted_float": 5,
                    "converted_number": 1,
                    "converted_value": 1,
                    "float_sum": 1,
                    "modified_input_float": 1,
                    "normalized_float": 7,
                    "normalized_number": 1,
                    "normalized_value": 2,
                    "result_float": 1,
                    "rounded_float": 3,
                    "rounded_number": 1,
                    "rounded_value": 2
                },
                "uVar4": {
                    "index": 13,
                    "string_index_temp": 1,
                    "temp": 3,
                    "temp_index": 1,
                    "temp_u_int": 2,
                    "temp_uint": 9,
                    "temp_var": 1,
                    "temp_var2": 1
                }
            },
            "called": [
                "FUN_08009228",
                "FUN_08008cdc",
                "FUN_08008eec",
                "FUN_08009278",
                "FUN_08008250"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_08004250",
                "FUN_08004940",
                "FUN_080046d0"
            ],
            "code": "\nvoid convert_float_to_decimal_08003826(uint input_float)\n\n{\n  int is_negative;\n  undefined4 normalized_float;\n  byte temp_byte;\n  uint index;\n  uint float_value;\n  char decimal_string [13];\n  uint integer_part;\n  byte index;\n  byte loop_counter;\n  \n  is_negative = __aeabi_fcmplt(input_float,0);\n  float_value = input_float;\n  if (is_negative != 0) {\n    write_to_serial(0x2d);\n    float_value = input_float ^ 0x80000000;\n  }\n  for (loop_counter = DAT_20000ef9; 1 < loop_counter; loop_counter = loop_counter - 2) {\n    float_value = __aeabi_fmul(float_value,0x42c80000);\n  }\n  if (loop_counter != 0) {\n    float_value = __aeabi_fmul(float_value,0x41200000);\n  }\n  normalized_float = __addsf3(float_value,0x3f000000);\n  index = 0;\n  integer_part = __aeabi_f2iz(normalized_float);\n  decimal_string[DAT_20000ef9 + 1] = '.';\n  for (; integer_part != 0; integer_part = integer_part / 10) {\n    if (index == DAT_20000ef9) {\n      index = index + 1;\n    }\n    index = (uint)index;\n    index = index + 1;\n    decimal_string[index + 1] = (char)(integer_part % 10) + '0';\n  }\n  while (index < DAT_20000ef9) {\n    index = (uint)index;\n    index = index + 1;\n    decimal_string[index + 1] = '0';\n  }\n  if (index == DAT_20000ef9) {\n    temp_byte = index + 1;\n    index = index + 2;\n    decimal_string[temp_byte + 1] = '0';\n  }\n  for (; index != 0; index = index - 1) {\n    write_to_serial(decimal_string[index]);\n  }\n  return;\n}\n\n",
            "current_name": "convert_float_to_decimal_08003826",
            "entrypoint": "0x08003826",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003826": "convert_float_to_decimal_08003826",
                "acStack_1d": "decimal_string",
                "bVar3": "temp_byte",
                "iVar1": "is_negative",
                "local_10": "integer_part",
                "local_24": "float_value",
                "local_9": "loop_counter",
                "local_a": "index",
                "param_1": "input_float",
                "serial_write": "write_to_serial",
                "uVar2": "normalized_float",
                "uVar4": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003980": {
            "additional_data": {
                "": {
                    "": 3
                },
                "DAT_20000e10": {
                    "count": 1,
                    "count1": 1,
                    "counter": 9,
                    "counter1": 1,
                    "counter_1": 1,
                    "data_1": 1,
                    "data_count": 2,
                    "data_flag": 2,
                    "data_flag1": 2,
                    "data_value1": 1,
                    "data_variable1": 1,
                    "initialized_value1": 2,
                    "reset_flag": 1
                },
                "DAT_20000e11": {
                    "count2": 1,
                    "counter2": 1,
                    "counter_2": 1,
                    "data_2": 1,
                    "data_count": 1,
                    "data_counter": 1,
                    "data_flag": 1,
                    "data_flag2": 2,
                    "data_value": 1,
                    "data_value2": 1,
                    "data_variable2": 1,
                    "flag": 9,
                    "index": 1,
                    "initialized_value2": 2,
                    "reset_counter": 1
                },
                "FUN_08003980": {
                    "initialize_data": 27,
                    "initialize_variables": 1,
                    "reset_data": 1,
                    "reset_variables": 1
                },
                "VAR_20000e10": {
                    "data_count": 1
                },
                "VAR_20000e11": {
                    "data_flag": 1
                },
                "_20000e10": {
                    "data_value1": 1
                },
                "_20000e11": {
                    "data_value2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003f34",
                "FUN_080039a0"
            ],
            "code": "\nvoid initialize_data_08003980(void)\n\n{\n  DATdata_value1 = 0;\n  DATdata_value2 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_data_08003980",
            "entrypoint": "0x08003980",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003980": "initialize_data_08003980",
                "_20000e10": "data_value1",
                "_20000e11": "data_value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039a0": {
            "additional_data": {
                "FUN_08003980": {
                    "another_operation": 1,
                    "display_init_message": 2,
                    "init_message": 1,
                    "init_report_message": 3,
                    "initialize_report": 8,
                    "initialize_report_message": 2,
                    "initialize_something": 1,
                    "perform_task2": 1,
                    "print_init_message": 1,
                    "process_data": 1,
                    "secondary_function": 1
                },
                "FUN_080039a0": {
                    "initialize_communication": 1,
                    "initialize_protocol": 29,
                    "reset_and_init_protocol": 1
                },
                "FUN_08004228": {
                    "additional_function": 1,
                    "perform_task1": 1,
                    "reset_buffer": 1,
                    "reset_line_buffer": 16,
                    "reset_protocol": 1,
                    "reset_something": 1,
                    "reverse_something": 1,
                    "secondary_operation": 1
                },
                "protocol_reset_line_buffer": {
                    "reset_line_buffer": 14
                },
                "report_init_message": {
                    "display_init_message": 7,
                    "display_initialization_message": 1,
                    "initialize_report": 1,
                    "initialize_report_message": 4,
                    "show_init_message": 1
                }
            },
            "called": [
                "FUN_08004228",
                "FUN_08003980"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_protocol_080039a0(void)\n\n{\n  reset_line_buffer();\n  display_init_message();\n  DAT_20000e50 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_protocol_080039a0",
            "entrypoint": "0x080039a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039a0": "initialize_protocol_080039a0",
                "protocol_reset_line_buffer": "reset_line_buffer",
                "report_init_message": "display_init_message"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080039bc": {
            "additional_data": {
                "DAT_20000d10": {
                    "startup_line": 1
                },
                "FUN_080005b4": {
                    "settings_read_startup_line": 1
                },
                "FUN_0800369c": {
                    "print_line": 1
                },
                "FUN_080039bc": {
                    "execute_startup": 1,
                    "load_startup_lines": 1,
                    "process_start_lines": 1,
                    "process_startup_lines": 26,
                    "read_and_execute_startup_lines": 2
                },
                "FUN_08004030": {
                    "execute_gc_line": 1
                },
                "FUN_08004d2c": {
                    "check_line_validity": 1
                },
                "gc_execute_line": {
                    "execute_line": 6
                },
                "iVar1": {
                    "error_code": 3,
                    "read_result": 13,
                    "read_status": 1,
                    "result": 12,
                    "status": 1
                },
                "local_9": {
                    "count": 1,
                    "index": 3,
                    "iteration": 2,
                    "iteration_count": 5,
                    "line_count": 1,
                    "line_counter": 4,
                    "line_index": 10,
                    "line_number": 3,
                    "loop_count": 1,
                    "loop_index": 1
                },
                "param_1": {
                    "index": 1,
                    "startup_index": 1
                },
                "param_2": {
                    "line_buffer": 1
                },
                "printString": {
                    "print_line": 4,
                    "print_startup_line": 1,
                    "print_string": 1
                },
                "report_status_message": {
                    "display_status_message": 1,
                    "print_status_message": 1,
                    "report_message": 4
                },
                "settings_read_startup_line": {
                    "read_startup_line": 6
                },
                "uVar2": {
                    "execute_result": 3,
                    "execution_result": 11,
                    "execution_status": 3,
                    "status": 4,
                    "status_code": 5,
                    "status_message": 3,
                    "status_message_code": 1
                }
            },
            "called": [
                "FUN_080005b4",
                "FUN_08004d2c",
                "FUN_0800369c",
                "FUN_08004030"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc"
            ],
            "code": "\nvoid process_startup_lines_080039bc(void)\n\n{\n  int read_result;\n  undefined4 execution_result;\n  byte line_index;\n  \n  for (line_index = 0; line_index < 2; line_index = line_index + 1) {\n    read_result = read_startup_line(line_index,&DAT_20000d10);\n    if (read_result == 0) {\n      report_message(10);\n    }\n    else if (DAT_20000d10 != '\\0') {\n      print_line(&DAT_20000d10);\n      execution_result = execute_line(&DAT_20000d10);\n      report_message(execution_result);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_startup_lines_080039bc",
            "entrypoint": "0x080039bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080039bc": "process_startup_lines_080039bc",
                "gc_execute_line": "execute_line",
                "iVar1": "read_result",
                "local_9": "line_index",
                "printString": "print_line",
                "report_status_message": "report_message",
                "settings_read_startup_line": "read_startup_line",
                "uVar2": "execution_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a18": {
            "additional_data": {
                "DAT_20000eaa": {
                    "data_flag": 1,
                    "data_register": 2,
                    "flag": 1,
                    "flag_register": 1,
                    "flag_status": 1,
                    "flags": 6,
                    "flags_register": 1,
                    "register_value": 1,
                    "status": 2,
                    "status_flags": 3,
                    "status_register": 2,
                    "status_register_value": 1
                },
                "FUN_080025e8": {
                    "perform_reset": 3,
                    "reset_memory": 1,
                    "reset_microcontroller": 1
                },
                "FUN_08003a18": {
                    "check_flag": 1,
                    "check_flags_and_update": 1,
                    "check_param": 2,
                    "detect_and_set_flags": 1,
                    "handle_param": 1,
                    "process_data": 2,
                    "process_param": 1,
                    "process_parameter": 2,
                    "update_flag_based_on_param": 2,
                    "update_flags": 4,
                    "update_flags_based_on_param": 1,
                    "update_register": 1,
                    "update_status": 10,
                    "update_status_register": 2
                },
                "mc_reset": {
                    "reset_flag": 1,
                    "reset_machine": 1,
                    "reset_memory": 2,
                    "reset_microcontroller": 5
                },
                "param_1": {
                    "data": 1,
                    "flag": 2,
                    "flag_status": 1,
                    "flags": 1,
                    "input": 6,
                    "input_data": 1,
                    "input_flag": 1,
                    "input_flags": 1,
                    "input_value": 4,
                    "param": 2,
                    "parameter": 1,
                    "status": 7,
                    "status_flags": 1,
                    "status_register": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid update_status_register_08003a18(uint status)\n\n{\n  if ((status & 0x80) == 0) {\n    if ((status & 0x40) == 0) {\n      if ((status & 0x20) != 0) {\n        DAT_20000eaa = DAT_20000eaa | 2;\n      }\n    }\n    else {\n      DAT_20000eaa = DAT_20000eaa | 8;\n    }\n  }\n  else {\n    reset_microcontroller();\n  }\n  return;\n}\n\n",
            "current_name": "update_status_register_08003a18",
            "entrypoint": "0x08003a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a18": "update_status_register_08003a18",
                "mc_reset": "reset_microcontroller",
                "param_1": "status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003a74": {
            "additional_data": {
                "DAT_20000ea8": {
                    "cycle_flag": 1,
                    "error_flag": 1,
                    "flag": 1,
                    "is_reachable": 1
                },
                "DAT_20000ea9": {
                    "action_type": 1,
                    "alarm_count": 1,
                    "alarm_status": 1,
                    "alarm_type": 1,
                    "error_code": 1
                },
                "DAT_20000eaa": {
                    "byte_value": 1,
                    "control_signal_flags": 1,
                    "data_flag": 1,
                    "data_value": 1,
                    "status_flags": 1
                },
                "DAT_20000eb8": {
                    "cycle_flag2": 1,
                    "cycle_start_flag": 1,
                    "flag_value": 1,
                    "is_cycle_started": 1,
                    "is_cycle_starting": 1
                },
                "DAT_20000ee4": {
                    "another_data_value": 1,
                    "cycle_flag": 1,
                    "cycle_status": 2,
                    "global_status_flags": 1
                },
                "FUN_08003a74": {
                    "control_system": 1,
                    "handle_alarm_conditions": 1,
                    "handle_event": 1,
                    "handle_function": 2,
                    "handle_function_input": 1,
                    "initialize_device": 1,
                    "manage_control_action": 1,
                    "manage_system_state": 1,
                    "process_alarm": 2,
                    "process_control_signals": 2,
                    "process_data": 6,
                    "process_event": 1,
                    "process_events": 1,
                    "process_flags": 2,
                    "process_function": 1,
                    "process_input": 1,
                    "process_input_data": 1,
                    "process_main_function": 1,
                    "process_status": 3,
                    "process_system_event": 1
                },
                "FUN_08004148": {
                    "st_cycle_reinitialize": 6,
                    "unused_function5": 1
                },
                "FUN_080041a0": {
                    "report_feedback_message": 6,
                    "unused_function2": 1
                },
                "FUN_08004940": {
                    "st_cycle_start": 6,
                    "unused_function6": 1
                },
                "FUN_0800585c": {
                    "st_feed_hold": 6,
                    "unused_function4": 1
                },
                "FUN_0800587c": {
                    "report_alarm_message": 6,
                    "unused_function1": 1
                },
                "FUN_080058a0": {
                    "report_realtime_status": 6,
                    "unused_function3": 1
                },
                "bVar1": {
                    "alarm_flag": 1,
                    "byte_value": 3,
                    "control_signal": 1,
                    "current_alarm_status": 1,
                    "current_status": 2,
                    "current_value": 1,
                    "event_flags": 4,
                    "flag": 1,
                    "initial_value": 1,
                    "input_byte": 1,
                    "input_data": 1,
                    "status_byte": 6,
                    "temp_byte": 1
                },
                "param_1": {
                    "byte_data": 1,
                    "undefined": 1
                },
                "report_alarm_message": {
                    "log_alarm_message": 1,
                    "notify_alarm_message": 1,
                    "report_alarm": 3,
                    "report_alarm_message": 4
                },
                "report_feedback_message": {
                    "log_feedback_message": 1,
                    "notify_feedback_message": 1,
                    "report_feedback": 3,
                    "report_feedback_message": 4
                },
                "report_realtime_status": {
                    "log_realtime_status": 1,
                    "notify_realtime_status": 1,
                    "report_realtime_status": 7
                },
                "st_cycle_reinitialize": {
                    "cycle_reinitialize": 6,
                    "cycle_reinitilize": 1,
                    "reinitialize_cycle": 1,
                    "st_cycle_reinitialize": 1
                },
                "st_cycle_start": {
                    "cycle_start": 7,
                    "st_cycle_start": 1,
                    "start_cycle": 1
                },
                "st_feed_hold": {
                    "feed_hold": 5,
                    "feed_hold_action": 1,
                    "set_feed_hold": 1,
                    "st_feed_hold": 1,
                    "stop_feed_hold": 1
                }
            },
            "called": [
                "FUN_0800587c",
                "FUN_080041a0",
                "FUN_080058a0",
                "FUN_0800585c",
                "FUN_08004148",
                "FUN_08004940"
            ],
            "calling": [
                "FUN_08001e98",
                "FUN_08001ddc",
                "FUN_08003f34",
                "FUN_08002408",
                "FUN_080024c4",
                "FUN_08002fd4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x08003ad2) */\n\nvoid process_input_data_08003a74(void)\n\n{\n  byte status_byte;\n  \n  status_byte = DAT_20000eaa;\n  if (DAT_20000eaa != 0) {\n    if ((DAT_20000eaa & 0x60) != 0) {\n      DAT_20000ea9 = 6;\n      if ((DAT_20000eaa & 0x40) != 0) {\n        report_alarm_message(0xffffffff);\n        report_feedback_message(1);\n        do {\n        } while( true );\n      }\n      report_alarm_message(0xfffffffe);\n      DAT_20000eaa = DAT_20000eaa & 0x9f;\n    }\n    if ((status_byte & 0x10) == 0) {\n      if ((status_byte & 1) != 0) {\n        report_realtime_status();\n        DAT_20000eaa = DAT_20000eaa & 0xfe;\n      }\n      if ((status_byte & 8) != 0) {\n        feed_hold();\n        DAT_20000eaa = DAT_20000eaa & 0xf7;\n      }\n      if ((status_byte & 4) != 0) {\n        cycle_reinitialize();\n        DAT_20000eaa = DAT_20000eaa & 0xfb;\n      }\n      if ((status_byte & 2) != 0) {\n        cycle_start();\n        if ((DAT_20000ee4 & 2) != 0) {\n          DAT_20000eb8 = 1;\n        }\n        DAT_20000eaa = DAT_20000eaa & 0xfd;\n      }\n    }\n    else {\n      DAT_20000ea8 = 1;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "process_input_data_08003a74",
            "entrypoint": "0x08003a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003a74": "process_input_data_08003a74",
                "bVar1": "status_byte",
                "st_cycle_reinitialize": "cycle_reinitialize",
                "st_cycle_start": "cycle_start",
                "st_feed_hold": "feed_hold"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003b98": {
            "additional_data": {
                "DAT_20000ea8": {
                    "ea8": 1,
                    "is_startup": 1,
                    "startup_complete_flag": 1,
                    "startup_flag": 1
                },
                "DAT_20000ea9": {
                    "ea9": 1,
                    "feedback_message_index": 1,
                    "feedback_mode": 1,
                    "startup_flag": 1
                },
                "DAT_20000ee4": {
                    "global_settings_flag": 1,
                    "machine_status": 1
                },
                "FUN_080005b4": {
                    "gc_execute_line": 2,
                    "process_undefined": 1,
                    "report_grbl_help": 1,
                    "unknown_function2": 1
                },
                "FUN_080024c4": {
                    "process_void": 1,
                    "protocol_execute_startup": 1,
                    "report_feedback_message": 1,
                    "unknown_function8": 1
                },
                "FUN_080025e8": {
                    "process_void3": 1,
                    "read_float": 1,
                    "report_startup_line": 1,
                    "unknown_function11": 1
                },
                "FUN_08002638": {
                    "__aeabi_f2iz": 1,
                    "process_uint3": 1,
                    "read_float": 1,
                    "report_startup_line": 1,
                    "unknown_function18": 1
                },
                "FUN_080039bc": {
                    "process_void4": 1,
                    "settings_read_startup_line": 2,
                    "unknown_function12": 1
                },
                "FUN_08003b98": {
                    "execute_command": 17,
                    "execute_g_code_command": 3,
                    "execute_grbl_command": 1,
                    "process_command": 7,
                    "process_g_code_command": 1,
                    "process_gcode_command": 1
                },
                "FUN_08004030": {
                    "process_char": 1,
                    "report_gcode_parameters": 2,
                    "unknown_function5": 1
                },
                "FUN_080041a0": {
                    "process_undefined2": 1,
                    "report_gcode_parameters": 1,
                    "report_grbl_help": 2,
                    "unknown_function3": 1
                },
                "FUN_0800423c": {
                    "__aeabi_d2uiz": 1,
                    "process_void6": 1,
                    "unknown_function17": 1
                },
                "FUN_08004250": {
                    "process_void5": 1,
                    "settings_store_global_setting": 2,
                    "unknown_function14": 1
                },
                "FUN_080044e8": {
                    "mc_go_home": 1,
                    "process_void2": 1,
                    "protocol_execute_startup": 1,
                    "unknown_function10": 1
                },
                "FUN_080046d0": {
                    "__aeabi_f2d": 1,
                    "process_void7": 1,
                    "report_startup_line": 1,
                    "unknown_function19": 1
                },
                "FUN_08004900": {
                    "process_undefined3": 1,
                    "report_feedback_message": 1,
                    "report_grbl_settings": 2,
                    "unknown_function6": 1
                },
                "FUN_08004bc0": {
                    "process_byte": 1,
                    "settings_store_startup_line": 2,
                    "unknown_function15": 1
                },
                "FUN_08004d2c": {
                    "process_bool": 1,
                    "read_float": 1,
                    "trunc": 1,
                    "unknown_function16": 1
                },
                "FUN_08004e30": {
                    "execute_line": 2,
                    "process_code": 1,
                    "store_global_setting": 1,
                    "unknown_function1": 1
                },
                "FUN_08008590": {
                    "calculate_ulonglong": 1,
                    "gc_execute_line": 1,
                    "mc_go_home": 1,
                    "report_gcode_modes": 1,
                    "unknown_function9": 1
                },
                "FUN_08008bf0": {
                    "process_uint2": 1,
                    "report_status_message": 3,
                    "unknown_function13": 1
                },
                "FUN_08009278": {
                    "mc_reset": 2,
                    "process_uint": 1,
                    "report_gcode_modes": 1,
                    "unknown_function7": 1
                },
                "FUN_08009798": {
                    "calculate_longlong": 1,
                    "read_float": 1,
                    "report_feedback_message": 1,
                    "unknown_function4": 1
                },
                "__aeabi_d2uiz": {
                    "convert_double_to_unsigned_int": 1,
                    "double_to_integer": 1,
                    "double_to_u_int": 1,
                    "double_to_u_integer": 1,
                    "double_to_unsigned_int": 2,
                    "double_to_unsigned_int_conversion": 1,
                    "double_to_unsigned_integer": 3
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 1,
                    "float_to_double": 7,
                    "float_to_double_conversion": 1
                },
                "__aeabi_f2iz": {
                    "convert_float_to_int": 1,
                    "float_to_int": 3,
                    "float_to_int_conversion": 1,
                    "float_to_integer": 5
                },
                "__aeabi_f2uiz": {
                    "float_to_unsigned_int": 1
                },
                "bVar1": {
                    "byte_value": 3,
                    "ch": 1,
                    "char1": 1,
                    "command": 1,
                    "command_byte": 1,
                    "command_char": 6,
                    "command_code": 1,
                    "command_type": 2,
                    "first_char": 12,
                    "first_character": 1,
                    "opcode": 1
                },
                "gc_execute_line": {
                    "execute_g_code_line": 4,
                    "execute_gc_line": 3,
                    "execute_gcode_line": 3,
                    "execute_line": 2
                },
                "iVar2": {
                    "error_code": 1,
                    "func_return_value": 1,
                    "int_value": 1,
                    "result": 4,
                    "return_value": 9,
                    "status": 3
                },
                "local_10": {
                    "converted_second_value": 1,
                    "first_float": 3,
                    "float_value": 2,
                    "float_value3": 1,
                    "int_value": 1,
                    "param2": 1,
                    "param_num": 1,
                    "param_value": 1,
                    "param_value2": 1,
                    "second_float": 1,
                    "second_setting": 2,
                    "second_value": 1,
                    "setting_index": 1,
                    "startup_setting": 1,
                    "third_float": 1,
                    "value": 3,
                    "value2": 5,
                    "value_2": 1
                },
                "local_14": {
                    "first_float": 1,
                    "first_setting": 2,
                    "first_value": 1,
                    "float_value": 1,
                    "float_value2": 1,
                    "global_setting": 2,
                    "param1": 1,
                    "param_value": 1,
                    "param_value1": 1,
                    "second_float": 4,
                    "second_value": 1,
                    "setting": 1,
                    "setting_value": 3,
                    "string_value": 1,
                    "value": 1,
                    "value1": 5,
                    "value_1": 1
                },
                "local_9": {
                    "bool_var": 1,
                    "flag": 8,
                    "flag2": 1,
                    "flag_b": 1,
                    "index2": 4,
                    "index_2": 1,
                    "is_comment_line": 1,
                    "is_g_code": 1,
                    "is_line_read": 1,
                    "is_multi_line": 1,
                    "is_read": 1,
                    "is_startup": 1,
                    "is_startup_line": 1,
                    "loop_flag": 2,
                    "loop_index": 1,
                    "second_char": 1,
                    "second_index": 1,
                    "startup_flag": 1,
                    "startup_line_index": 1
                },
                "local_a": {
                    "command_index": 1,
                    "command_length": 2,
                    "current_index": 1,
                    "flag1": 1,
                    "flag_a": 1,
                    "index": 12,
                    "index1": 4,
                    "index_1": 1,
                    "is_valid_command": 1,
                    "loop_index": 2,
                    "param_index": 1,
                    "phase": 1,
                    "start_idx": 1,
                    "start_index": 1
                },
                "mc_go_home": {
                    "go_home": 7,
                    "go_home_mc": 1,
                    "machine_go_home": 1,
                    "move_machine_to_home": 1
                },
                "mc_reset": {
                    "reset_machine": 6,
                    "reset_machine_controller": 1,
                    "reset_mc": 1,
                    "reset_motion_control": 3,
                    "reset_motion_controller": 1
                },
                "param_1": {
                    "command": 26,
                    "command_string": 2,
                    "gcode_command": 2,
                    "input_string": 1
                },
                "protocol_execute_startup": {
                    "execute_startup_protocol": 10
                },
                "read_float": {
                    "parse_float": 1,
                    "read_float": 7
                },
                "report_feedback_message": {
                    "report_feedback_message": 12
                },
                "report_gcode_modes": {
                    "report_g_code_modes": 5,
                    "report_gcode_modes": 2
                },
                "report_gcode_parameters": {
                    "report_g_code_parameters": 6,
                    "report_gcode_parameters": 5,
                    "report_parameters": 1
                },
                "report_grbl_help": {
                    "report_grbl_help": 10,
                    "report_help": 1,
                    "report_help_message": 1
                },
                "report_grbl_settings": {
                    "report_grbl_settings": 11,
                    "report_settings": 1
                },
                "report_startup_line": {
                    "report_startup_line": 4
                },
                "report_status_message": {
                    "report_status_message": 12
                },
                "settings_read_home_setting": {
                    "read_home_setting": 1
                },
                "settings_read_startup_line": {
                    "read_settings_startup_line": 1,
                    "read_startup_line": 3,
                    "read_startup_line_from_settings": 2,
                    "read_startup_line_setting": 2,
                    "read_startup_line_settings": 2,
                    "read_startup_settings_line": 1
                },
                "settings_store_global_setting": {
                    "store_global_setting": 11,
                    "store_global_setting_in_settings": 1
                },
                "settings_store_startup_line": {
                    "store_startup_line": 8,
                    "store_startup_line_in_settings": 2,
                    "store_startup_line_setting": 1,
                    "store_startup_line_settings": 1
                },
                "switchD_08003bdc_caseD_25": {
                    "default_case": 6
                },
                "trunc": {
                    "truncate": 4,
                    "truncate_double": 1,
                    "truncate_value": 1
                },
                "uVar3": {
                    "converted_float": 1,
                    "converted_float1": 1,
                    "converted_param": 1,
                    "converted_value": 5,
                    "float_to_int": 1,
                    "float_value": 2,
                    "float_value1": 1,
                    "int_value": 2,
                    "integer_value": 1,
                    "setting_value": 1
                },
                "uVar4": {
                    "converted_float2": 1,
                    "result": 21,
                    "result_code": 1,
                    "return_code": 2,
                    "return_value": 4,
                    "status": 1
                },
                "uVar5": {
                    "converted_double": 1,
                    "converted_double_value": 1,
                    "converted_float": 1,
                    "double_value": 5,
                    "float_to_double": 1,
                    "truncated_float": 1,
                    "truncated_value": 9
                }
            },
            "called": [
                "FUN_08004e30",
                "FUN_080005b4",
                "FUN_080041a0",
                "FUN_08009798",
                "FUN_08004030",
                "FUN_08004900",
                "FUN_08009278",
                "FUN_080024c4",
                "FUN_08008590",
                "FUN_080044e8",
                "FUN_080025e8",
                "FUN_080039bc",
                "FUN_08008bf0",
                "FUN_08004250",
                "FUN_08004bc0",
                "FUN_08004d2c",
                "FUN_0800423c",
                "FUN_08002638",
                "FUN_080046d0"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nuint execute_g_code_command_08003b98(char *command)\n\n{\n  byte first_char;\n  int return_value;\n  undefined4 converted_value;\n  uint result;\n  undefined8 truncated_value;\n  undefined4 value1;\n  undefined4 value2;\n  byte index;\n  byte flag;\n  \n  if (*command != '$') {\n    result = execute_g_code_line(command);\n    return result;\n  }\n  index = 1;\n  flag = '\\0';\n  first_char = command[1];\n  if (first_char == 0) {\n    report_grbl_help();\n    return 0;\n  }\n  if ((0x58 < first_char) || (first_char < 0x23)) goto default_case;\n  switch(first_char) {\n  case 0x23:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_g_code_parameters();\n    break;\n  case 0x24:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_grbl_settings();\n    break;\n  case 0x43:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\a') {\n      reset_machine();\n      report_feedback_message(5);\n    }\n    else {\n      if (DAT_20000ea9 != '\\0') {\n        return 0xb;\n      }\n      DAT_20000ea9 = '\\a';\n      report_feedback_message(4);\n    }\n    break;\n  case 0x47:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    report_g_code_modes();\n    break;\n  case 0x48:\n    if ((DAT_20000ee4 & 0x10) == 0) {\n      return 7;\n    }\n    if ((DAT_20000ea9 != '\\0') && (DAT_20000ea9 != '\\x06')) {\n      return 0xb;\n    }\n    go_home();\n    if (DAT_20000ea8 == '\\0') {\n      execute_startup_protocol();\n    }\n    break;\n  case 0x4e:\n    index = 2;\n    if (command[2] == '\\0') {\n      for (flag = 0; flag < 2; flag = flag + 1) {\n        return_value = read_startup_line(flag,command);\n        if (return_value == 0) {\n          report_status_message(10);\n        }\n        else {\n          report_startup_line(flag,command);\n        }\n      }\n      return 0;\n    }\n    flag = '\\x01';\n  default:\ndefault_case:\n    return_value = read_float(command,&index,&value2);\n    if (return_value == 0) {\n      return 1;\n    }\n    first_char = index + 1;\n    if (command[index] != '=') {\n      return 3;\n    }\n    index = first_char;\n    if (flag == '\\0') {\n      return_value = read_float(command,&index,&value1);\n      if (return_value == 0) {\n        return 1;\n      }\n      if (command[index] == '\\0') {\n        converted_value = float_to_integer(value2);\n        result = store_global_setting(converted_value,value1);\n        return result;\n      }\n      return 3;\n    }\n    do {\n      command[(uint)index - (uint)first_char] = command[index];\n      result = (uint)index;\n      index = index + 1;\n    } while (command[result] != '\\0');\n    flag = first_char;\n    flag = execute_g_code_line(command);\n    if (flag != 0) {\n      return (uint)flag;\n    }\n    truncated_value = float_to_double(value2);\n    truncated_value = truncate((int)truncated_value,(int)((ulonglong)truncated_value >> 0x20));\n    flag = double_to_unsigned_integer((int)truncated_value,(int)((ulonglong)truncated_value >> 0x20));\n    store_startup_line(flag,command);\n    break;\n  case 0x58:\n    index = 2;\n    if (command[2] != '\\0') {\n      return 3;\n    }\n    if (DAT_20000ea9 == '\\x06') {\n      report_feedback_message(3);\n      DAT_20000ea9 = '\\0';\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "execute_g_code_command_08003b98",
            "entrypoint": "0x08003b98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003b98": "execute_g_code_command_08003b98",
                "__aeabi_d2uiz": "double_to_unsigned_integer",
                "__aeabi_f2d": "float_to_double",
                "__aeabi_f2iz": "float_to_integer",
                "bVar1": "first_char",
                "gc_execute_line": "execute_g_code_line",
                "iVar2": "return_value",
                "local_10": "value2",
                "local_14": "value1",
                "local_9": "flag",
                "local_a": "index",
                "mc_go_home": "go_home",
                "mc_reset": "reset_machine",
                "param_1": "command",
                "protocol_execute_startup": "execute_startup_protocol",
                "report_gcode_modes": "report_g_code_modes",
                "report_gcode_parameters": "report_g_code_parameters",
                "settings_read_startup_line": "read_startup_line",
                "settings_store_global_setting": "store_global_setting",
                "settings_store_startup_line": "store_startup_line",
                "switchD_08003bdc_caseD_25": "default_case",
                "trunc": "truncate",
                "uVar3": "converted_value",
                "uVar4": "result",
                "uVar5": "truncated_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08003f34": {
            "additional_data": {
                "DAT_20000d10": {
                    "buffer": 1,
                    "byte_array": 1,
                    "data_buffer": 1,
                    "input_buffer": 2,
                    "line_buffer": 3
                },
                "DAT_20000e10": {
                    "buffer_index": 5,
                    "buffer_length": 2,
                    "byte_count": 1,
                    "char_array_index": 1,
                    "current_index": 1,
                    "data_index": 2,
                    "index": 1,
                    "input_count": 1,
                    "input_index": 2,
                    "input_length": 2,
                    "line_buffer_index": 3,
                    "line_length": 1,
                    "next_index": 1,
                    "num_characters": 1,
                    "num_chars": 1
                },
                "DAT_20000e11": {
                    "in_parentheses": 6,
                    "inside_parens": 1,
                    "inside_parent": 1,
                    "inside_parentheses": 10,
                    "inside_parenthesis": 1,
                    "is_in_parentheses": 2,
                    "is_inside_parentheses": 1,
                    "is_parenthesis_open": 1,
                    "open_parenthesis": 1,
                    "parentheses_open": 1
                },
                "DAT_20000ea8": {
                    "end_execution": 1,
                    "end_execution_flag": 2,
                    "end_flag": 1,
                    "end_of_input": 1,
                    "execute_runtime_flag": 1,
                    "exit_condition": 1,
                    "exit_flag": 2,
                    "finished_execution": 1,
                    "is_executed": 1,
                    "is_runtime_complete": 1,
                    "is_runtime_finished": 1,
                    "runtime_complete": 2,
                    "runtime_error": 4,
                    "runtime_flag": 3,
                    "should_break_loop": 1,
                    "should_stop": 1
                },
                "FUN_08003980": {
                    "display_initial_message": 1,
                    "print_empty_buffer": 1,
                    "print_empty_line": 1,
                    "protocol_execute_runtime": 1,
                    "report_status_message": 1,
                    "reset_line_buffer": 4,
                    "send_empty_status_message": 1
                },
                "FUN_08003a74": {
                    "execute_runtime": 1,
                    "initialize": 3,
                    "initialize_protocol": 2,
                    "protocol_reset_line_buffer": 1,
                    "reset_protocol": 3
                },
                "FUN_08003b98": {
                    "execute_command": 1,
                    "execute_line": 1,
                    "execute_subfunction": 1,
                    "get_message_length": 1,
                    "get_status_message": 1,
                    "parse_command": 2,
                    "parse_input_line": 1,
                    "process_line": 1,
                    "verify_command": 1
                },
                "FUN_08003f34": {
                    "parse_serial_input": 3,
                    "process_input": 7,
                    "process_serial_data": 7,
                    "process_serial_input": 14
                },
                "FUN_08004030": {
                    "add_input_byte": 1,
                    "append_to_line_buffer": 1,
                    "handle_special_character": 1,
                    "process_character": 2,
                    "report_message": 1,
                    "report_status_message": 3,
                    "send_character": 1
                },
                "FUN_08008286": {
                    "execute_line": 1,
                    "execute_protocol": 2,
                    "execute_runtime": 1,
                    "get_data": 1,
                    "main_function": 1,
                    "protocol_execute_line": 1,
                    "runtime_execution": 1,
                    "some_function": 1,
                    "some_other_function": 1
                },
                "bVar1": {
                    "byte_read": 3,
                    "byte_value": 1,
                    "input_byte": 19,
                    "input_char": 1,
                    "received_byte": 4
                },
                "protocol_execute_line": {
                    "execute_line": 17,
                    "execute_line_protocol": 2,
                    "execute_protocol_line": 1
                },
                "protocol_execute_runtime": {
                    "execute_protocol_runtime": 1,
                    "execute_runtime": 18,
                    "execute_runtime_protocol": 2
                },
                "protocol_reset_line_buffer": {
                    "reset_buffer": 2,
                    "reset_line_buffer": 17,
                    "reset_line_buffer_protocol": 1,
                    "reset_protocol_line_buffer": 1
                },
                "report_status_message": {
                    "display_message": 4,
                    "display_status_message": 8,
                    "display_status_message_2": 1,
                    "print_message": 1,
                    "print_status_message": 4,
                    "report_message_status": 1,
                    "send_status_message": 2
                },
                "serial_read": {
                    "read_byte": 3,
                    "read_byte_from_serial": 1,
                    "read_input_byte": 2,
                    "read_serial_byte": 8,
                    "read_serial_data": 1,
                    "read_serial_input": 1
                },
                "uVar2": {
                    "execution_status": 4,
                    "result": 1,
                    "return_status": 1,
                    "return_value": 2,
                    "status": 7,
                    "status_code": 9,
                    "status_message": 3
                },
                "uVar3": {
                    "buffer_index": 1,
                    "index": 26,
                    "u_value": 1
                }
            },
            "called": [
                "FUN_08003b98",
                "FUN_08003a74",
                "FUN_08004030",
                "FUN_08003980",
                "FUN_08008286"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid process_serial_input_08003f34(void)\n\n{\n  byte input_byte;\n  undefined4 status_code;\n  uint index;\n  \n  while( true ) {\n    while( true ) {\n      input_byte = read_serial_byte();\n      if (input_byte == 0xff) {\n        return;\n      }\n      if ((input_byte == 10) || (input_byte == 0xd)) break;\n      if (DAT_20000e11 == '\\0') {\n        if ((0x20 < input_byte) && (input_byte != 0x2f)) {\n          if (input_byte == 0x28) {\n            DAT_20000e11 = '\\x01';\n          }\n          else if (DAT_20000e10 == 0xff) {\n            display_status_message(0xd);\n            reset_line_buffer();\n          }\n          else if ((input_byte < 0x61) || (0x7a < input_byte)) {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte;\n          }\n          else {\n            index = (uint)DAT_20000e10;\n            DAT_20000e10 = DAT_20000e10 + 1;\n            (&DAT_20000d10)[index] = input_byte - 0x20;\n          }\n        }\n      }\n      else if (input_byte == 0x29) {\n        DAT_20000e11 = '\\0';\n      }\n    }\n    execute_runtime();\n    if (DAT_20000ea8 != '\\0') break;\n    if (DAT_20000e10 == 0) {\n      display_status_message(0);\n    }\n    else {\n      (&DAT_20000d10)[DAT_20000e10] = 0;\n      status_code = execute_line(&DAT_20000d10);\n      display_status_message(status_code);\n    }\n    reset_line_buffer();\n  }\n  return;\n}\n\n",
            "current_name": "process_serial_input_08003f34",
            "entrypoint": "0x08003f34",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08003f34": "process_serial_input_08003f34",
                "bVar1": "input_byte",
                "protocol_execute_line": "execute_line",
                "protocol_execute_runtime": "execute_runtime",
                "protocol_reset_line_buffer": "reset_line_buffer",
                "report_status_message": "display_status_message",
                "serial_read": "read_serial_byte",
                "uVar2": "status_code",
                "uVar3": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004030": {
            "additional_data": {
                "DAT_0800b5c8": {
                    "error_message1": 1
                },
                "DAT_0800b6d8": {
                    "error_message3": 1
                },
                "FUN_080036c6": {
                    "print_pgm_string": 2
                },
                "FUN_08004030": {
                    "display_error_message": 4,
                    "handle_error": 2,
                    "handle_error_message": 2,
                    "print_error": 2,
                    "print_error_message": 19
                },
                "errorMessage1": {
                    "error_message2": 1
                },
                "param_1": {
                    "error_code": 29
                },
                "printPgmString": {
                    "print_error_message": 1,
                    "print_program_string": 6
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_08003b98",
                "FUN_08003f34",
                "FUN_080039bc",
                "FUN_080004ac",
                "FUN_080051b4"
            ],
            "code": "\nvoid print_error_message_08004030(char error_code)\n\n{\n  if (error_code == '\\0') {\n    print_program_string(&DAT_0800b5c8);\n  }\n  else {\n    print_program_string(\"error: \");\n    switch(error_code) {\n    case '\\x01':\n      print_program_string(\"Bad number format\");\n      break;\n    case '\\x02':\n      print_program_string(\"Expected command letter\");\n      break;\n    case '\\x03':\n      print_program_string(\"Unsupported statement\");\n      break;\n    case '\\x04':\n      print_program_string(\"Invalid radius\");\n      break;\n    case '\\x05':\n      print_program_string(\"Modal group violation\");\n      break;\n    case '\\x06':\n      print_program_string(\"Invalid statement\");\n      break;\n    case '\\a':\n      print_program_string(\"Setting disabled\");\n      break;\n    case '\\b':\n      print_program_string(\"Value < 0.0\");\n      break;\n    case '\\t':\n      print_program_string(\"Value < 3 usec\");\n      break;\n    case '\\n':\n      print_program_string(\"EEPROM read fail. Using defaults\");\n      break;\n    case '\\v':\n      print_program_string(\"Busy or queued\");\n      break;\n    case '\\f':\n      print_program_string(\"Alarm lock\");\n      break;\n    case '\\r':\n      print_program_string(\"Line overflow\");\n    }\n    print_program_string(&DAT_0800b6d8);\n  }\n  return;\n}\n\n",
            "current_name": "print_error_message_08004030",
            "entrypoint": "0x08004030",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004030": "print_error_message_08004030",
                "param_1": "error_code",
                "printPgmString": "print_program_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004148": {
            "additional_data": {
                "FUNC_08002814": {
                    "func_one": 1,
                    "function1": 1,
                    "function_one": 1,
                    "initialize": 3,
                    "initialize_system": 2,
                    "perform_initialization": 1,
                    "set_up_system": 1
                },
                "FUN_080036c6": {
                    "check_error_log": 1,
                    "check_error_status": 1,
                    "display_error_message": 1,
                    "func_two": 1,
                    "function2": 1,
                    "function_two": 1,
                    "process_error_message": 2,
                    "process_input_data": 1,
                    "provide_error_message": 1
                },
                "FUN_08004148": {
                    "display_alarm_message": 14,
                    "print_alarm_message": 16
                },
                "delay_ms": {
                    "delay_in_milliseconds": 1,
                    "delay_milliseconds": 1
                },
                "param_1": {
                    "alarm_code": 3,
                    "alarm_type": 1,
                    "error_code": 24,
                    "error_message": 1,
                    "error_type": 2
                },
                "printPgmString": {
                    "display_string_from_program_memory": 1,
                    "output_program_string": 1,
                    "output_string": 1,
                    "print_error_message": 1,
                    "print_message_from_program_memory": 1,
                    "print_program_string": 5
                }
            },
            "called": [
                "FUN_08002814",
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid print_alarm_message_08004148(char error_code)\n\n{\n  print_program_string(\"ALARM: \");\n  if (error_code == -2) {\n    print_program_string(\"Abort during cycle\");\n  }\n  else if (error_code == -1) {\n    print_program_string(\"Hard limit\");\n  }\n  print_program_string(\". MPos?\\r\\n\");\n  delay_milliseconds(500);\n  return;\n}\n\n",
            "current_name": "print_alarm_message_08004148",
            "entrypoint": "0x08004148",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004148": "print_alarm_message_08004148",
                "delay_ms": "delay_milliseconds",
                "param_1": "error_code",
                "printPgmString": "print_program_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080041a0": {
            "additional_data": {
                "1": {
                    "reset": 1
                },
                "2": {
                    "unlock": 1
                },
                "3": {
                    "caution": 1
                },
                "4": {
                    "enabled": 1
                },
                "5": {
                    "disabled": 1
                },
                "DAT_0800b710": {
                    "message1": 1,
                    "reset_message": 1,
                    "status_message1": 1,
                    "welcome_message": 1
                },
                "DAT_0800b764": {
                    "end_message": 1,
                    "message2": 1,
                    "status_message2": 1,
                    "warning_message": 1
                },
                "FUN_080036c6": {
                    "print_message": 1,
                    "print_pgm_string": 1
                },
                "FUN_080041a0": {
                    "display_message": 1,
                    "display_status_message": 7,
                    "print_menu_option": 1,
                    "print_message": 3,
                    "print_status": 3,
                    "print_status_message": 15,
                    "print_switch_message": 1
                },
                "param_1": {
                    "menu_option": 1,
                    "message_type": 4,
                    "status": 24,
                    "status_code": 1,
                    "switch_value": 1
                },
                "printPgmString": {
                    "display_message": 1,
                    "display_string": 1,
                    "print_message": 1,
                    "print_program_string": 19
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08001ddc",
                "FUN_08003a74"
            ],
            "code": "\nvoid print_status_message_080041a0(undefined status)\n\n{\n  print_program_string(&DAT_0800b710);\n  switch(status) {\n  case 1:\n    print_program_string(\"Reset to continue\");\n    break;\n  case 2:\n    print_program_string(\"\\'$H\\'|\\'$X\\' to unlock\");\n    break;\n  case 3:\n    print_program_string(\"Caution: Unlocked\");\n    break;\n  case 4:\n    print_program_string(\"Enabled\");\n    break;\n  case 5:\n    print_program_string(\"Disabled\");\n  }\n  print_program_string(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "print_status_message_080041a0",
            "entrypoint": "0x080041a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080041a0": "print_status_message_080041a0",
                "param_1": "status",
                "printPgmString": "print_program_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004228": {
            "additional_data": {
                "FUN_080036c6": {
                    "parse_input_string": 1,
                    "print_message": 3,
                    "print_pgm_string": 18,
                    "print_program_string": 1,
                    "print_string": 1,
                    "print_text": 1,
                    "process_input": 1,
                    "process_input_string": 1,
                    "process_param": 1,
                    "update_message": 1
                },
                "FUN_08004228": {
                    "display_grbl_version": 1,
                    "display_welcome_message": 1,
                    "initialize_grbl": 4,
                    "print_grbl_intro": 1,
                    "print_grbl_prompt": 1,
                    "print_grbl_version": 18,
                    "print_grbl_version_info": 1,
                    "print_grbl_welcome": 1,
                    "print_welcome_message": 3
                },
                "param_1": {
                    "input_param": 1,
                    "input_string": 2,
                    "message": 6,
                    "str": 4,
                    "string": 3
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_080039a0"
            ],
            "code": "\nvoid print_grbl_version_info_08004228(void)\n\n{\n  printPgmString(\"\\r\\nGrbl 0.8c [\\'$\\' for help]\\r\\n\");\n  return;\n}\n\n",
            "current_name": "print_grbl_version_info_08004228",
            "entrypoint": "0x08004228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004228": "print_grbl_version_info_08004228"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800423c": {
            "additional_data": {
                "FUN_080036c6": {
                    "print_message": 3,
                    "print_pgm_string": 21,
                    "print_string": 3,
                    "process_command": 1,
                    "process_menu_option": 1
                },
                "FUN_0800423c": {
                    "display_grbl_commands": 3,
                    "display_grbl_menu": 1,
                    "display_menu": 3,
                    "print_available_commands": 1,
                    "print_grbl_commands": 1,
                    "print_grbl_menu": 8,
                    "print_grbl_settings": 3,
                    "print_grbl_settings_help": 1,
                    "print_grbl_settings_menu": 1,
                    "print_menu": 5,
                    "print_menu_options": 2,
                    "print_settings_menu": 1,
                    "print_user_interface": 1
                },
                "param_1": {
                    "input_string": 1,
                    "message": 4,
                    "pgm_string": 1,
                    "str": 2,
                    "string": 2,
                    "string_to_print": 2
                },
                "printPgmString": {
                    "print_program_string": 2
                }
            },
            "called": [
                "FUN_080036c6"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_grbl_settings_menu_0800423c(void)\n\n{\n  print_program_string(\n                \"$$ (view Grbl settings)\\r\\n$# (view # parameters)\\r\\n$G (view parser state)\\r\\n$N (view startup blocks)\\r\\n$x=value (save Grbl setting)\\r\\n$Nx=line (save startup block)\\r\\n$C (check gcode mode)\\r\\n$X (kill alarm lock)\\r\\n$H (run homing cycle)\\r\\n~ (cycle start)\\r\\n! (feed hold)\\r\\n? (current status)\\r\\nctrl-x (reset Grbl)\\r\\n\"\n                );\n  return;\n}\n\n",
            "current_name": "print_grbl_settings_menu_0800423c",
            "entrypoint": "0x0800423c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800423c": "print_grbl_settings_menu_0800423c",
                "printPgmString": "print_program_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004250": {
            "additional_data": {
                "DAT_0800b8b8": {
                    "program_string1": 4,
                    "x_step_per_millimeter_string": 1
                },
                "DAT_0800bb94": {
                    "dir_port_invert_mask_string": 1,
                    "program_string2": 4
                },
                "DAT_20000dc4": {
                    "integer4": 1
                },
                "DAT_20000ebc": {
                    "float1": 1,
                    "float_value1": 1,
                    "floating_point1": 1,
                    "value1": 1,
                    "x_step_mm": 1,
                    "x_step_per_millimeter": 3,
                    "x_step_per_mm": 1
                },
                "DAT_20000ec0": {
                    "float2": 1,
                    "float_value2": 1,
                    "floating_point2": 1,
                    "value2": 1,
                    "y_step_mm": 1,
                    "y_step_per_millimeter": 3,
                    "y_step_per_mm": 1
                },
                "DAT_20000ec4": {
                    "float3": 1,
                    "float_value3": 1,
                    "floating_point3": 1,
                    "value3": 1,
                    "z_step_mm": 1,
                    "z_step_per_millimeter": 3,
                    "z_step_per_mm": 1
                },
                "DAT_20000ec9": {
                    "integer1": 1,
                    "integer_value1": 1,
                    "step_pulse": 1,
                    "step_pulse_microseconds": 2,
                    "step_pulse_usec": 2,
                    "value4": 1,
                    "whole_number1": 1
                },
                "DAT_20000ecc": {
                    "default_feed": 1,
                    "default_feed_mm_min": 2,
                    "default_feed_rate": 2,
                    "float4": 1,
                    "float_value4": 1,
                    "floating_point4": 1,
                    "value5": 1
                },
                "DAT_20000ed0": {
                    "default_seek": 1,
                    "default_seek_mm_min": 2,
                    "default_seek_rate": 2,
                    "float5": 1,
                    "float_value5": 1,
                    "floating_point5": 1,
                    "value6": 1
                },
                "DAT_20000ed4": {
                    "integer2": 1,
                    "integer_value2": 1,
                    "step_port_invert_mask": 5,
                    "value7": 1,
                    "whole_number2": 1
                },
                "DAT_20000ed6": {
                    "dir_port_invert_mask": 5,
                    "integer3": 1,
                    "integer_value9": 1,
                    "value20": 1,
                    "whole_number8": 1
                },
                "DAT_20000ed8": {
                    "arc_mm_segment": 2,
                    "arc_per_segment": 1,
                    "arc_segment": 1,
                    "arc_segment_distance": 1,
                    "float6": 1,
                    "float_value8": 1,
                    "floating_point8": 1,
                    "value11": 1
                },
                "DAT_20000edc": {
                    "acceleration": 4,
                    "acceleration_value": 1,
                    "float11": 1,
                    "float_value6": 1,
                    "floating_point6": 1,
                    "value9": 1
                },
                "DAT_20000ee0": {
                    "float8": 1,
                    "float_value7": 1,
                    "floating_point7": 1,
                    "junction_deviation": 3,
                    "junction_deviation_mm": 1,
                    "value10": 1
                },
                "DAT_20000ee4": {
                    "integer8": 1,
                    "integer_value6": 1,
                    "report_auto_inch_start": 1,
                    "report_inches": 1,
                    "report_inches_auto_start_invert_step_enable_hard_limits_homing_cycle": 3,
                    "value14": 1,
                    "whole_number5": 1
                },
                "DAT_20000ee6": {
                    "homing_dir_invert_mask": 5,
                    "integer_value7": 1,
                    "value15": 1,
                    "whole_number6": 1
                },
                "DAT_20000ee8": {
                    "float9": 1,
                    "float_value9": 1,
                    "floating_point9": 1,
                    "homing_feed": 1,
                    "homing_feed_mm_min": 2,
                    "homing_feed_rate": 2,
                    "value16": 1
                },
                "DAT_20000eec": {
                    "float10": 1,
                    "float_value10": 1,
                    "floating_point10": 1,
                    "homing_seek": 1,
                    "homing_seek_mm_min": 2,
                    "homing_seek_rate": 2,
                    "value17": 1
                },
                "DAT_20000ef0": {
                    "homing_debounce": 2,
                    "homing_debounce_milliseconds": 1,
                    "homing_debounce_msec": 2,
                    "integer_value8": 1,
                    "value18": 1,
                    "whole_number7": 1
                },
                "DAT_20000ef4": {
                    "float7": 1,
                    "float_value11": 1,
                    "floating_point11": 1,
                    "homing_pull_off": 3,
                    "homing_pull_off_mm": 2,
                    "value19": 1
                },
                "DAT_20000ef8": {
                    "integer5": 1,
                    "integer_value3": 1,
                    "step_idle_delay": 1,
                    "step_idle_delay_milliseconds": 2,
                    "step_idle_delay_msec": 1,
                    "value8": 1
                },
                "DAT_20000ef9": {
                    "integer6": 1,
                    "integer_value5": 1,
                    "n_decimals": 5,
                    "value13": 1,
                    "whole_number4": 1
                },
                "DAT_20000efa": {
                    "integer7": 1,
                    "integer_value4": 1,
                    "n_arc_correction": 5,
                    "value12": 1,
                    "whole_number3": 1
                },
                "FUN_080036c6": {
                    "print_pgm_string": 6,
                    "print_program_string": 1,
                    "print_program_string_parameter": 1
                },
                "FUN_0800375c": {
                    "print_float": 6,
                    "print_u_int16_value": 1,
                    "print_unsigned_short_parameter": 1
                },
                "FUN_080037fc": {
                    "print_integer": 1,
                    "print_integer_parameter": 1,
                    "print_integer_value": 1,
                    "print_uint16_base2": 5
                },
                "FUN_08003826": {
                    "__aeabi_fdiv": 4,
                    "print_u_int_value": 1,
                    "print_uint16_base2": 2,
                    "print_unsigned_integer_parameter": 1
                },
                "FUN_08004250": {
                    "print_config_settings": 1,
                    "print_config_values": 1,
                    "print_configuration": 15,
                    "print_configuration_info": 1,
                    "print_configuration_settings": 4,
                    "print_configuration_values": 1,
                    "print_configurations": 1,
                    "print_settings": 7
                },
                "FUN_08009054": {
                    "calculate_step_pulse": 1,
                    "perform_calculation": 1,
                    "print_integer": 5,
                    "print_uint16_base2": 1
                },
                "__aeabi_fdiv": {
                    "calculate_float_division": 1,
                    "divide_and_round": 1,
                    "divide_float": 5,
                    "divide_float_values": 2,
                    "divide_floating_point": 1,
                    "divide_floating_point_numbers": 1,
                    "divide_floats": 8,
                    "floating_point_division": 2
                },
                "divideFloat": {
                    "divide_float": 1
                },
                "divideFloatValues": {
                    "divide_floats": 1
                },
                "param_1": {
                    "config_settings": 1,
                    "program_string": 1,
                    "settings": 1,
                    "str": 1,
                    "string_parameter": 1
                },
                "param_2": {
                    "integer_parameter": 1,
                    "step_per_mm": 1,
                    "step_value": 1,
                    "val1": 1,
                    "value": 1
                },
                "param_3": {
                    "acceleration": 1,
                    "base": 1,
                    "float_parameter": 1,
                    "time_interval": 1,
                    "val2": 1
                },
                "param_4": {
                    "pulse_step": 1,
                    "segment_value": 1,
                    "uint_parameter": 1,
                    "val3": 1
                },
                "printBase2UInt16": {
                    "print_base2_u_int16": 1
                },
                "printConfigValues": {
                    "print_config_values": 1
                },
                "printConfigurationSettings": {
                    "config_settings": 1
                },
                "printConfigurationValues": {
                    "print_configuration_values": 1
                },
                "printFloat": {
                    "print_float_value": 5,
                    "print_floating_number": 1,
                    "print_floating_point": 15,
                    "print_floating_point_number": 2,
                    "print_floating_point_value": 1
                },
                "printFloatValue": {
                    "display_float_value": 1
                },
                "printFloatingPoint": {
                    "print_floating_point": 1
                },
                "printInteger": {
                    "print_integer": 10,
                    "print_integer_number": 3,
                    "print_integer_value": 8,
                    "print_whole_number": 3
                },
                "printIntegerValue": {
                    "display_integer_value": 1,
                    "print_integer_value": 1
                },
                "printPgmString": {
                    "print_program_string": 24
                },
                "printProgramString": {
                    "display_program_string": 1,
                    "print_program_string": 1
                },
                "printUInt16ValueInBase2": {
                    "display_u_int16_value_in_base2": 1
                },
                "print_uint16_base2": {
                    "display_u_int16_value_in_base2": 1,
                    "print_base2_integer_value": 1,
                    "print_base2_u_int16": 4,
                    "print_base2_uint16": 1,
                    "print_base2_unsigned_integer": 1,
                    "print_number_base2": 1,
                    "print_u_int16_base2": 2,
                    "print_u_int16_base2_value": 1,
                    "print_u_int16_to_base2": 1,
                    "print_unsigned_int16_binary": 1,
                    "print_unsigned_int16_value_in_base2": 1,
                    "print_unsigned_int_base2": 1,
                    "print_unsigned_int_in_base2": 1,
                    "print_unsigned_integer_base2": 3,
                    "print_unsigned_integer_base_two": 1,
                    "print_unsigned_integer_in_base2": 1
                },
                "uVar1": {
                    "acceleration": 7,
                    "acceleration_divider": 1,
                    "acceleration_divisor": 1,
                    "acceleration_fraction": 1,
                    "acceleration_in_mm_per_sec_square": 1,
                    "acceleration_inverse": 1,
                    "acceleration_mm_sec2": 1,
                    "acceleration_value": 1,
                    "divided_float": 1,
                    "result": 2
                }
            },
            "called": [
                "FUN_080036c6",
                "FUN_0800375c",
                "FUN_08009054",
                "FUN_080037fc",
                "FUN_08003826"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080051b4"
            ],
            "code": "\nvoid print_configuration_settings_08004250(void)\n\n{\n  undefined4 acceleration;\n  \n  print_program_string(&DAT_0800b8b8);\n  print_floating_point(DAT_20000ebc);\n  print_program_string(\" (x, step/mm)\\r\\n$1=\");\n  print_floating_point(DAT_20000ec0);\n  print_program_string(\" (y, step/mm)\\r\\n$2=\");\n  print_floating_point(DAT_20000ec4);\n  print_program_string(\" (z, step/mm)\\r\\n$3=\");\n  print_integer(DAT_20000ec9);\n  print_program_string(\" (step pulse, usec)\\r\\n$4=\");\n  print_floating_point(DAT_20000ecc);\n  print_program_string(\" (default feed, mm/min)\\r\\n$5=\");\n  print_floating_point(DAT_20000ed0);\n  print_program_string(\" (default seek, mm/min)\\r\\n$6=\");\n  print_integer(DAT_20000ed4);\n  print_program_string(\" (step port invert mask, int:\");\n  print_base2_u_int16(DAT_20000ed4);\n  print_program_string(\")\\r\\n$7=\");\n  print_integer(DAT_20000ef8);\n  print_program_string(\" (step idle delay, msec)\\r\\n$8=\");\n  acceleration = divide_floats(DAT_20000edc,0x45610000);\n  print_floating_point(acceleration);\n  print_program_string(\" (acceleration, mm/sec^2)\\r\\n$9=\");\n  print_floating_point(DAT_20000ee0);\n  print_program_string(\" (junction deviation, mm)\\r\\n$10=\");\n  print_floating_point(DAT_20000ed8);\n  print_program_string(\" (arc, mm/segment)\\r\\n$11=\");\n  print_integer(DAT_20000efa);\n  print_program_string(\" (n-arc correction, int)\\r\\n$12=\");\n  print_integer(DAT_20000ef9);\n  print_program_string(\" (n-decimals, int)\\r\\n$13=\");\n  print_integer((DAT_20000ee4 & 1) != 0);\n  print_program_string(\" (report inches, bool)\\r\\n$14=\");\n  print_integer((DAT_20000ee4 & 2) != 0);\n  print_program_string(\" (auto start, bool)\\r\\n$15=\");\n  print_integer((DAT_20000ee4 & 4) != 0);\n  print_program_string(\" (invert step enable, bool)\\r\\n$16=\");\n  print_integer((DAT_20000ee4 & 8) != 0);\n  print_program_string(\" (hard limits, bool)\\r\\n$17=\");\n  print_integer((DAT_20000ee4 & 0x10) != 0);\n  print_program_string(\" (homing cycle, bool)\\r\\n$18=\");\n  print_integer(DAT_20000ee6);\n  print_program_string(\" (homing dir invert mask, int:\");\n  print_base2_u_int16(DAT_20000ee6);\n  print_program_string(\")\\r\\n$19=\");\n  print_floating_point(DAT_20000ee8);\n  print_program_string(\" (homing feed, mm/min)\\r\\n$20=\");\n  print_floating_point(DAT_20000eec);\n  print_program_string(\" (homing seek, mm/min)\\r\\n$21=\");\n  print_integer(DAT_20000ef0);\n  print_program_string(\" (homing debounce, msec)\\r\\n$22=\");\n  print_floating_point(DAT_20000ef4);\n  print_program_string(\" (homing pull-off, mm)\\r\\n$23=\");\n  print_integer(DAT_20000ed6);\n  print_program_string(\" (dir port invert mask, int:\");\n  print_base2_u_int16(DAT_20000ed6);\n  print_program_string(&DAT_0800bb94);\n  return;\n}\n\n",
            "current_name": "print_configuration_settings_08004250",
            "entrypoint": "0x08004250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004250": "print_configuration_settings_08004250",
                "__aeabi_fdiv": "divide_floats",
                "printFloat": "print_floating_point",
                "printInteger": "print_integer",
                "printPgmString": "print_program_string",
                "print_uint16_base2": "print_base2_u_int16",
                "uVar1": "acceleration"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080044e8": {
            "additional_data": {
                "DAT_0800b764": {
                    "separator_string2": 1,
                    "string2": 1
                },
                "DAT_0800bb98": {
                    "error_string": 1,
                    "string3": 1
                },
                "DAT_0800bb9c": {
                    "coord_string1": 1,
                    "string4": 1
                },
                "DAT_0800bba0": {
                    "coord_string2": 1,
                    "string5": 1
                },
                "DAT_0800bba4": {
                    "coord_string3": 1,
                    "string6": 1
                },
                "DAT_0800bba8": {
                    "coord_string4": 1,
                    "string7": 1
                },
                "DAT_0800bbac": {
                    "coord_string5": 1,
                    "string8": 1
                },
                "DAT_0800bbb0": {
                    "coord_string6": 1,
                    "string9": 1
                },
                "DAT_0800bbb4": {
                    "coord_string7": 1,
                    "string10": 1
                },
                "DAT_0800bbb8": {
                    "coord_string8": 1,
                    "string11": 1
                },
                "DAT_0800bbbc": {
                    "separator_string1": 1,
                    "string1": 1
                },
                "DAT_20000e74": {
                    "coordinate_array": 1,
                    "float_array": 1,
                    "global_data": 1,
                    "settings_data": 1
                },
                "DAT_20000ee4": {
                    "conversion_flag": 1,
                    "flag": 1,
                    "global_flag": 1,
                    "settings_flag": 1
                },
                "FUN_080036c6": {
                    "print_program_string": 1
                },
                "FUN_08003826": {
                    "print_program_string": 1
                },
                "FUN_08004030": {
                    "print_float_value": 1
                },
                "FUN_080044e8": {
                    "print_coordinate_data": 1,
                    "print_coordinates": 16,
                    "print_coords": 1,
                    "print_g92_coordinates": 13
                },
                "FUN_08004d7c": {
                    "check_flag": 1
                },
                "FUN_08008590": {
                    "convert_to_double": 1
                },
                "FUN_08008640": {
                    "convert_to_float": 1
                },
                "FUN_08008c30": {
                    "calculate_new_value": 1
                },
                "OBJ_08000ee4": {
                    "settings_flag": 1
                },
                "SETTINGS_READ_COORD_DATA": {
                    "read_coordinate_setting_data": 1
                },
                "__aeabi_f2d": {
                    "convert_single_to_double": 1
                },
                "__muldf3": {
                    "multiply_double_float": 1
                },
                "__truncdfsf2": {
                    "truncate_double_to_float": 1
                },
                "auStack_18": {
                    "coord_data": 10,
                    "coordinate_buffer": 1,
                    "coordinate_data": 10,
                    "coordinates": 5,
                    "coordinates_arr": 1,
                    "coordinates_array": 1
                },
                "iVar1": {
                    "coord_data_error": 1,
                    "coord_data_result": 4,
                    "coord_read_result": 3,
                    "error_code": 2,
                    "is_reading_successful": 1,
                    "read_result": 2,
                    "result": 13,
                    "status": 1
                },
                "local_9": {
                    "axis_index": 1,
                    "coord_counter": 1,
                    "coord_index": 2,
                    "coord_loop_index": 1,
                    "coordinate_index": 21,
                    "current_axis": 1,
                    "index": 2
                },
                "local_a": {
                    "axis_index": 6,
                    "component_index": 1,
                    "coord_index": 2,
                    "coord_index2": 1,
                    "coordinate": 1,
                    "coordinate_axis": 2,
                    "coordinate_index": 3,
                    "current_index": 1,
                    "dimension": 1,
                    "i": 1,
                    "index": 10
                },
                "printFloat": {
                    "print_float": 1,
                    "print_float_value": 2,
                    "print_floating_point": 3,
                    "print_floating_value": 1
                },
                "printPgmString": {
                    "print_program_string": 8
                },
                "printingStringFunction": {
                    "print_pgm_string": 1
                },
                "report_status_message": {
                    "report_status_message": 8,
                    "update_status_message": 1
                },
                "settings_read_coord_data": {
                    "read_coord_data": 1,
                    "read_coordinate_data": 5,
                    "read_coordinate_settings_data": 1
                },
                "uVar2": {
                    "converted_float": 1,
                    "float_value": 1,
                    "truncated_float": 17,
                    "truncated_value": 7
                },
                "uVar3": {
                    "converted_float": 9,
                    "converted_to_double": 1,
                    "converted_value": 2,
                    "double_float": 5,
                    "double_value": 7,
                    "double_var": 1,
                    "float_value_double": 1
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08004d7c",
                "FUN_08008c30",
                "FUN_080036c6",
                "FUN_08004030",
                "FUN_08003826",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_g92_coordinates_080044e8(void)\n\n{\n  int result;\n  undefined4 truncated_float;\n  undefined8 converted_float;\n  undefined4 coordinate_data [3];\n  byte index;\n  byte coordinate_index;\n  \n  coordinate_index = 0;\n  while( true ) {\n    if (7 < coordinate_index) {\n      print_program_string(\"[G92:\");\n      for (index = 0; index < 3; index = index + 1) {\n        if ((DAT_20000ee4 & 1) == 0) {\n          print_floating_point(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n        }\n        else {\n          converted_float = convert_single_to_double(*(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n          converted_float = multiply_double_float((int)converted_float,(int)((ulonglong)converted_float >> 0x20),0x57e16865,0x3fa42851);\n          truncated_float = truncate_double_to_float((int)converted_float,(int)((ulonglong)converted_float >> 0x20));\n          print_floating_point(truncated_float);\n        }\n        if (index < 2) {\n          print_program_string(&DAT_0800bbbc);\n        }\n        else {\n          print_program_string(&DAT_0800b764);\n        }\n      }\n      return;\n    }\n    result = read_coordinate_data(coordinate_index,coordinate_data);\n    if (result == 0) break;\n    print_program_string(&DAT_0800bb98);\n    switch(coordinate_index) {\n    case 0:\n      print_program_string(&DAT_0800bb9c);\n      break;\n    case 1:\n      print_program_string(&DAT_0800bba0);\n      break;\n    case 2:\n      print_program_string(&DAT_0800bba4);\n      break;\n    case 3:\n      print_program_string(&DAT_0800bba8);\n      break;\n    case 4:\n      print_program_string(&DAT_0800bbac);\n      break;\n    case 5:\n      print_program_string(&DAT_0800bbb0);\n      break;\n    case 6:\n      print_program_string(&DAT_0800bbb4);\n      break;\n    case 7:\n      print_program_string(&DAT_0800bbb8);\n    }\n    for (index = 0; index < 3; index = index + 1) {\n      if ((DAT_20000ee4 & 1) == 0) {\n        print_floating_point(coordinate_data[index]);\n      }\n      else {\n        converted_float = convert_single_to_double(coordinate_data[index]);\n        converted_float = multiply_double_float((int)converted_float,(int)((ulonglong)converted_float >> 0x20),0x57e16865,0x3fa42851);\n        truncated_float = truncate_double_to_float((int)converted_float,(int)((ulonglong)converted_float >> 0x20));\n        print_floating_point(truncated_float);\n      }\n      if (index < 2) {\n        print_program_string(&DAT_0800bbbc);\n      }\n      else {\n        print_program_string(&DAT_0800b764);\n      }\n    }\n    coordinate_index = coordinate_index + 1;\n  }\n  report_status_message(10);\n  return;\n}\n\n",
            "current_name": "print_g92_coordinates_080044e8",
            "entrypoint": "0x080044e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080044e8": "print_g92_coordinates_080044e8",
                "__aeabi_f2d": "convert_single_to_double",
                "__muldf3": "multiply_double_float",
                "__truncdfsf2": "truncate_double_to_float",
                "auStack_18": "coordinate_data",
                "iVar1": "result",
                "local_9": "coordinate_index",
                "local_a": "index",
                "printFloat": "print_floating_point",
                "printPgmString": "print_program_string",
                "settings_read_coord_data": "read_coordinate_data",
                "uVar2": "truncated_float",
                "uVar3": "converted_float"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080046d0": {
            "additional_data": {
                "DAT_0800b764": {
                    "value6_string": 1
                },
                "DAT_0800bbc8": {
                    "menu_option0_string": 1
                },
                "DAT_0800bbcc": {
                    "menu_option1_string": 1
                },
                "DAT_0800bbd0": {
                    "menu_option2_string": 1
                },
                "DAT_0800bbd4": {
                    "menu_option3_string": 1
                },
                "DAT_0800bbd8": {
                    "menu_option4_string": 1
                },
                "DAT_0800bbe4": {
                    "flag2_true_string": 1
                },
                "DAT_0800bbec": {
                    "flag2_false_string": 1
                },
                "DAT_0800bbfc": {
                    "flag3_false_string": 1
                },
                "DAT_0800bc04": {
                    "flag3_true_string": 1
                },
                "DAT_0800bc0c": {
                    "flag4_false_string": 1
                },
                "DAT_0800bc14": {
                    "flag4_true_string": 1
                },
                "DAT_0800bc1c": {
                    "flag5_false_string": 1
                },
                "DAT_0800bc24": {
                    "flag5_true_string": 1
                },
                "DAT_0800bc2c": {
                    "value2_equals0_string": 1
                },
                "DAT_0800bc30": {
                    "value2_equals1_string": 1
                },
                "DAT_0800bc34": {
                    "value2_equals2_string": 1
                },
                "DAT_0800bc38": {
                    "value3_equals1_string": 1
                },
                "DAT_0800bc3c": {
                    "value3_equals_neg1_string": 1
                },
                "DAT_0800bc40": {
                    "value3_equals0_string": 1
                },
                "DAT_0800bc44": {
                    "value4_equals0_string": 1
                },
                "DAT_0800bc48": {
                    "value4_equals1_string": 1
                },
                "DAT_0800bc4c": {
                    "value4_equals2_string": 1
                },
                "DAT_0800bc54": {
                    "value5_string": 1
                },
                "DAT_20000e71": {
                    "configuration_type": 1,
                    "menu_option": 2,
                    "option": 1,
                    "program_index": 1,
                    "selected_item_index": 1,
                    "selected_option": 2,
                    "selection": 1
                },
                "DAT_20000e72": {
                    "flag5": 5,
                    "is_flag5_set": 1,
                    "is_flag_set4": 1,
                    "is_hexadecimal": 1,
                    "is_option_enabled3": 1
                },
                "DAT_20000e73": {
                    "flag3": 5,
                    "is_decimal": 1,
                    "is_flag3_set": 1,
                    "is_flag_set2": 1,
                    "is_option_enabled1": 1
                },
                "DAT_20000e74": {
                    "flag4": 5,
                    "is_binary": 1,
                    "is_flag4_set": 1,
                    "is_flag_set3": 1,
                    "is_option_enabled2": 1
                },
                "DAT_20000e75": {
                    "base_number": 1,
                    "flag6": 2,
                    "flag6_value": 1,
                    "flag_value2": 1,
                    "option_value1": 1,
                    "value1": 1,
                    "value2": 2
                },
                "DAT_20000e76": {
                    "display_formatting": 1,
                    "flag7": 2,
                    "flag7_value": 1,
                    "flag_value3": 1,
                    "option_value2": 1,
                    "value2": 1,
                    "value3": 2
                },
                "DAT_20000e77": {
                    "decimal_places": 1,
                    "flag8": 2,
                    "flag8_value": 1,
                    "flag_value4": 1,
                    "option_value3": 1,
                    "value3": 1,
                    "value4": 2
                },
                "DAT_20000e78": {
                    "float_value": 2,
                    "float_value2": 1,
                    "float_value3": 1,
                    "floating_value2": 1,
                    "numeric_value": 1,
                    "value3": 2,
                    "value6": 1
                },
                "DAT_20000e88": {
                    "float_value": 2,
                    "float_value2": 1,
                    "floating_value": 1,
                    "some_value": 1,
                    "value2": 2,
                    "value5": 2
                },
                "DAT_20000e89": {
                    "flag1": 5,
                    "is_feature_enabled": 1,
                    "is_flag1_set": 1,
                    "is_flag_set1": 1,
                    "is_item_visible": 1
                },
                "DAT_20000e8a": {
                    "flag2": 5,
                    "flag2_value": 1,
                    "flag_value1": 1,
                    "is_item_selected": 1,
                    "is_specific_feature_enabled": 1
                },
                "DAT_20000e8c": {
                    "configuration_value": 1,
                    "integer_value": 1,
                    "score": 2,
                    "total_items": 1,
                    "value1": 4
                },
                "FUN_080036c6": {
                    "print_character": 3,
                    "print_string": 14
                },
                "FUN_080037fc": {
                    "print_integer": 12,
                    "print_integer_character": 1,
                    "print_integer_value": 2,
                    "print_integers_until": 1,
                    "print_number": 1
                },
                "FUN_08003826": {
                    "print_float": 4,
                    "print_hex": 2,
                    "print_hexadecimal": 1,
                    "print_multiples_of": 1,
                    "print_u_int": 1,
                    "print_unsigned_integer": 4,
                    "print_unsigned_value": 2,
                    "print_value": 2
                },
                "FUN_080046d0": {
                    "print_configuration": 6,
                    "print_data": 2,
                    "print_details": 1,
                    "print_device_info": 4,
                    "print_info": 2,
                    "print_information": 4,
                    "print_menu": 2,
                    "print_program_info": 4,
                    "print_program_information": 1,
                    "print_settings": 2,
                    "print_system_info": 3
                },
                "FUN_08008590": {
                    "calculate_checksum": 11,
                    "calculate_hash": 2,
                    "calculate_power": 1,
                    "calculate_sum": 1,
                    "calculate_value": 1,
                    "calculate_value_a": 1
                },
                "FUN_08008640": {
                    "calculate_product": 1,
                    "calculate_product_and_convert": 1,
                    "calculate_result": 3,
                    "calculate_value_c": 1,
                    "convert_float": 1,
                    "convert_float_to_integer": 2,
                    "multiply_values": 1,
                    "perform_calculation": 5,
                    "perform_complex_calculation": 1,
                    "perform_math_operations": 1
                },
                "FUN_08008c30": {
                    "calculate_product": 1,
                    "calculate_remainder": 1,
                    "calculate_value": 1,
                    "calculate_value_b": 1,
                    "find_max_value": 2,
                    "find_minimum": 1,
                    "increment_counter": 1,
                    "modify_value": 1,
                    "perform_operation": 3,
                    "process_data": 2,
                    "process_value": 2,
                    "shift_bits": 1
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 8,
                    "convert_to_double": 2,
                    "float_to_double": 1
                },
                "__muldf3": {
                    "multiply_double": 10,
                    "multiply_double_float": 1
                },
                "__truncdfsf2": {
                    "convert_double_to_float": 3,
                    "truncate_double": 4,
                    "truncate_double_to_float": 3,
                    "truncate_to_float": 1
                },
                "printFloat": {
                    "print_float": 15,
                    "print_float_value": 5
                },
                "printInteger": {
                    "print_integer": 15,
                    "print_integer_value": 5
                },
                "printPgmString": {
                    "print_program_string": 19,
                    "print_static_string": 1
                },
                "uVar1": {
                    "status": 1,
                    "truncated_float": 2,
                    "truncated_value": 1
                },
                "uVar2": {
                    "converted_double": 1,
                    "float_value": 1,
                    "multiplied_value": 1,
                    "result": 1
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008c30",
                "FUN_080036c6",
                "FUN_080037fc",
                "FUN_08003826",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_program_information_080046d0(void)\n\n{\n  undefined4 truncated_float;\n  undefined8 multiplied_value;\n  \n  switch(DAT_20000e71) {\n  case 0:\n    print_program_string(&DAT_0800bbc8);\n    break;\n  case 1:\n    print_program_string(&DAT_0800bbcc);\n    break;\n  case 2:\n    print_program_string(&DAT_0800bbd0);\n    break;\n  case 3:\n    print_program_string(&DAT_0800bbd4);\n    break;\n  case 4:\n    print_program_string(&DAT_0800bbd8);\n  }\n  print_program_string(&DAT_0800bbe0);\n  print_integer(DAT_20000e8c + 0x36);\n  if (DAT_20000e89 == '\\0') {\n    if (DAT_20000e8a == '\\x01') {\n      print_program_string(&DAT_0800bbe4);\n    }\n    else {\n      print_program_string(&DAT_0800bbec);\n    }\n  }\n  else {\n    print_program_string(&DAT_0800bbf4);\n  }\n  if (DAT_20000e73 == '\\0') {\n    print_program_string(&DAT_0800bc04);\n  }\n  else {\n    print_program_string(&DAT_0800bbfc);\n  }\n  if (DAT_20000e74 == '\\0') {\n    print_program_string(&DAT_0800bc14);\n  }\n  else {\n    print_program_string(&DAT_0800bc0c);\n  }\n  if (DAT_20000e72 == '\\0') {\n    print_program_string(&DAT_0800bc24);\n  }\n  else {\n    print_program_string(&DAT_0800bc1c);\n  }\n  if (DAT_20000e75 == 2) {\n    print_program_string(&DAT_0800bc34);\n  }\n  else if (DAT_20000e75 < 3) {\n    if (DAT_20000e75 == 0) {\n      print_program_string(&DAT_0800bc2c);\n    }\n    else if (DAT_20000e75 == 1) {\n      print_program_string(&DAT_0800bc30);\n    }\n  }\n  if (DAT_20000e76 == '\\x01') {\n    print_program_string(&DAT_0800bc38);\n  }\n  else if (DAT_20000e76 < '\\x02') {\n    if (DAT_20000e76 == -1) {\n      print_program_string(&DAT_0800bc3c);\n    }\n    else if (DAT_20000e76 == '\\0') {\n      print_program_string(&DAT_0800bc40);\n    }\n  }\n  if (DAT_20000e77 == 2) {\n    print_program_string(&DAT_0800bc4c);\n  }\n  else if (DAT_20000e77 < 3) {\n    if (DAT_20000e77 == 0) {\n      print_program_string(&DAT_0800bc44);\n    }\n    else if (DAT_20000e77 == 1) {\n      print_program_string(&DAT_0800bc48);\n    }\n  }\n  print_program_string(&DAT_0800bc50);\n  print_integer(DAT_20000e88);\n  print_program_string(&DAT_0800bc54);\n  if (DAT_20000e73 == '\\0') {\n    print_float(DAT_20000e78);\n  }\n  else {\n    multiplied_value = convert_float_to_double(DAT_20000e78);\n    multiplied_value = multiply_double((int)multiplied_value,(int)((ulonglong)multiplied_value >> 0x20),0x57e16865,0x3fa42851);\n    truncated_float = truncate_double((int)multiplied_value,(int)((ulonglong)multiplied_value >> 0x20));\n    print_float(truncated_float);\n  }\n  print_program_string(&DAT_0800b764);\n  return;\n}\n\n",
            "current_name": "print_program_information_080046d0",
            "entrypoint": "0x080046d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080046d0": "print_program_information_080046d0",
                "__aeabi_f2d": "convert_float_to_double",
                "__muldf3": "multiply_double",
                "__truncdfsf2": "truncate_double",
                "printFloat": "print_float",
                "printInteger": "print_integer",
                "printPgmString": "print_program_string",
                "uVar1": "truncated_float",
                "uVar2": "multiplied_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004900": {
            "additional_data": {
                "DAT_0800b6d8": {
                    "program_string3": 1
                },
                "DAT_0800bc58": {
                    "program_string1": 1
                },
                "DAT_0800bc5c": {
                    "program_string2": 1
                },
                "FUN_0800369c": {
                    "format_text": 1,
                    "print_integer": 5,
                    "print_integer_value": 1,
                    "print_pgm_string2": 1,
                    "print_reversed_string": 2,
                    "reverse_and_print_string": 1
                },
                "FUN_080036c6": {
                    "print_pgm_string": 5,
                    "print_program_string": 1,
                    "reverse_and_print_string": 1,
                    "reverse_pgm_string": 1,
                    "reverse_string": 2,
                    "reverse_text": 1
                },
                "FUN_080037fc": {
                    "print_integer2": 1,
                    "print_integer_value": 2,
                    "print_string": 5,
                    "print_string_value": 1,
                    "reverse_integer": 1,
                    "reverse_number": 1
                },
                "FUN_08004900": {
                    "print_data": 16,
                    "print_data_info": 1,
                    "print_function_details": 1,
                    "print_information": 8,
                    "print_message": 5
                },
                "param_1": {
                    "data": 3,
                    "data1": 11,
                    "data_1": 2,
                    "data_param": 1,
                    "data_value": 2,
                    "message": 3,
                    "message1": 2,
                    "number": 1,
                    "param1": 1,
                    "undefined_value": 1,
                    "value1": 4
                },
                "param_2": {
                    "additional_message": 1,
                    "data2": 11,
                    "data_2": 2,
                    "info": 1,
                    "integer_value": 1,
                    "message": 2,
                    "message2": 2,
                    "param2": 1,
                    "string": 1,
                    "string_param": 1,
                    "string_value": 2,
                    "text": 2,
                    "value2": 4
                },
                "printInteger": {
                    "print_integer": 3,
                    "print_integer_value": 2,
                    "print_number": 2
                },
                "printPgmString": {
                    "print_pgm_string": 1,
                    "print_program_string": 6
                },
                "printString": {
                    "print_string": 3,
                    "print_string_value": 2,
                    "print_text": 2
                }
            },
            "called": [
                "FUN_080036c6",
                "FUN_0800369c",
                "FUN_080037fc"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nvoid print_data_info_08004900(undefined data1,undefined4 data2)\n\n{\n  print_program_string(&DAT_0800bc58);\n  print_integer(data1);\n  print_program_string(&DAT_0800bc5c);\n  print_string(data2);\n  print_program_string(&DAT_0800b6d8);\n  return;\n}\n\n",
            "current_name": "print_data_info_08004900",
            "entrypoint": "0x08004900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004900": "print_data_info_08004900",
                "param_1": "data1",
                "param_2": "data2",
                "printInteger": "print_integer",
                "printPgmString": "print_program_string",
                "printString": "print_string"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004940": {
            "additional_data": {
                "DAT_0800bbbc": {
                    "pgm_string2": 1
                },
                "DAT_0800bc70": {
                    "pgm_string1": 1
                },
                "DAT_0800bca8": {
                    "pgm_string3": 1
                },
                "DAT_20000e70": {
                    "param1": 1
                },
                "DAT_20000e74": {
                    "param2": 1
                },
                "DAT_20000ea9": {
                    "status": 2
                },
                "DAT_20000eac": {
                    "value1": 1
                },
                "DAT_20000eb0": {
                    "value2": 1
                },
                "DAT_20000eb4": {
                    "value3": 1
                },
                "DAT_20000ebc": {
                    "divisor": 1
                },
                "DAT_20000ee4": {
                    "flag": 2
                },
                "FUN_080036c6": {
                    "print_string": 1
                },
                "FUN_08003826": {
                    "print_number": 1
                },
                "FUN_08004940": {
                    "print_machine_status": 1,
                    "print_position_status": 1,
                    "print_status": 27,
                    "print_status_message": 1
                },
                "FUN_080082d0": {
                    "perform_calculation": 1
                },
                "FUN_08008590": {
                    "calculate_xyz": 1
                },
                "FUN_08008640": {
                    "perform_operation": 1
                },
                "FUN_08008c30": {
                    "perform_division": 1
                },
                "FUN_08008cd8": {
                    "perform_subtraction": 1
                },
                "FUN_08008cdc": {
                    "perform_addition": 1
                },
                "FUN_08008e44": {
                    "calculate_something": 1
                },
                "FUN_08009054": {
                    "calculate_value": 1
                },
                "__addsf3": {
                    "add_floats": 3
                },
                "__aeabi_f2d": {
                    "convert_float_to_double": 2,
                    "convert_to_double": 1
                },
                "__aeabi_fdiv": {
                    "divide_floats": 3
                },
                "__aeabi_fsub": {
                    "subtract_floats": 3
                },
                "__floatsisf": {
                    "convert_int_to_float": 1,
                    "convert_integer_to_float": 1,
                    "convert_to_float": 1
                },
                "__muldf3": {
                    "multiply_doubles": 3
                },
                "__subdf3": {
                    "subtract_doubles": 3
                },
                "__truncdfsf2": {
                    "convert_double_to_float": 1,
                    "convert_to_float": 1,
                    "truncate_double_to_float": 1
                },
                "auStack_2c": {
                    "converted_values": 4,
                    "coordinates": 2,
                    "data_array": 1,
                    "float_array": 1,
                    "m_pos": 1,
                    "position_array": 3,
                    "position_stack": 1,
                    "position_values": 1,
                    "results_array": 1,
                    "status_values": 5,
                    "values": 9
                },
                "local_11": {
                    "axis": 1,
                    "axis_index": 2,
                    "counter": 2,
                    "dimension_index": 1,
                    "i": 6,
                    "index": 14,
                    "iteration_index": 1,
                    "loop_index": 2
                },
                "printFloat": {
                    "print_float": 1,
                    "print_float_value": 1,
                    "print_floating_point": 2
                },
                "printPgmString": {
                    "print_program_string": 3,
                    "print_string": 1
                },
                "uVar1": {
                    "converted_coordinate": 1,
                    "converted_float": 1,
                    "converted_value": 10,
                    "current_pos": 1,
                    "div_result": 1,
                    "dividend": 2,
                    "dividend_float": 1,
                    "division_result": 1,
                    "float_conversion": 1,
                    "float_value": 2,
                    "result": 2,
                    "result1": 1,
                    "scaled_value": 1,
                    "temp_float1": 1
                },
                "uVar2": {
                    "counter": 1,
                    "dividend_int": 1,
                    "divisor_index": 1,
                    "index": 11,
                    "index_u_int": 1,
                    "iterator": 1,
                    "loop_counter": 1,
                    "result2": 1,
                    "temp": 1,
                    "temp_float2": 1,
                    "temp_index": 2,
                    "temp_var": 2,
                    "temp_var1": 1,
                    "u_index": 1
                },
                "uVar3": {
                    "add_result": 1,
                    "addition_result": 1,
                    "divisor": 1,
                    "new_value": 1,
                    "result": 2,
                    "result3": 1,
                    "subtracted_value": 2,
                    "subtraction_result": 2,
                    "subtrahend_float": 1,
                    "temp": 2,
                    "temp2": 1,
                    "temp_coordinate": 1,
                    "temp_float": 1,
                    "temp_float3": 1,
                    "temp_float_value": 1,
                    "temp_pos": 1,
                    "temp_value": 3,
                    "temp_var2": 3
                },
                "uVar4": {
                    "converted_value1": 2,
                    "double_temp_coordinate": 1,
                    "double_value": 3,
                    "double_value1": 2,
                    "float_value": 1,
                    "mul_result": 1,
                    "mul_result1": 1,
                    "scaled_float1": 1,
                    "temp1": 1,
                    "temp_double": 1,
                    "temp_double1": 7,
                    "temp_double_var": 1,
                    "temp_float1": 1,
                    "temp_value1": 1,
                    "temp_value_double": 1,
                    "temp_var1": 1
                },
                "uVar5": {
                    "converted_value2": 2,
                    "double_temp_value": 1,
                    "double_value2": 3,
                    "mul_result": 1,
                    "mul_result2": 1,
                    "result_value": 1,
                    "scaled_float2": 1,
                    "temp2": 1,
                    "temp_double": 1,
                    "temp_double2": 7,
                    "temp_double_value": 1,
                    "temp_double_var2": 1,
                    "temp_float2": 1,
                    "temp_result": 1,
                    "temp_result_double": 1,
                    "temp_value2": 1,
                    "temp_var2": 1
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008cd8",
                "FUN_08008e44",
                "FUN_08008c30",
                "FUN_080036c6",
                "FUN_08008cdc",
                "FUN_08009054",
                "FUN_080082d0",
                "FUN_08003826",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid print_position_status_08004940(void)\n\n{\n  undefined4 converted_value;\n  uint index;\n  undefined4 temp_var2;\n  undefined8 temp_double1;\n  undefined8 temp_double2;\n  undefined4 values [6];\n  byte index;\n  \n  values[3] = DAT_20000eac;\n  values[4] = DAT_20000eb0;\n  values[5] = DAT_20000eb4;\n  switch(DAT_20000ea9) {\n  case 0:\n    print_program_string(\"<Idle\");\n    break;\n  case 2:\n    print_program_string(\"<Queue\");\n    break;\n  case 3:\n    print_program_string(&DAT_0800bc70);\n    break;\n  case 4:\n    print_program_string(\"<Hold\");\n    break;\n  case 5:\n    print_program_string(\"<Home\");\n    break;\n  case 6:\n    print_program_string(\"<Alarm\");\n    break;\n  case 7:\n    print_program_string(\"<Check\");\n  }\n  print_program_string(\",MPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    converted_value = convert_integer_to_float(values[index + 3]);\n    index = (uint)index;\n    converted_value = divide_floats(converted_value,(&DAT_20000ebc)[index]);\n    values[index] = converted_value;\n    if ((DAT_20000ee4 & 1) != 0) {\n      temp_double1 = convert_float_to_double(values[index]);\n      temp_double1 = multiply_doubles((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20),0x57e16865,0x3fa42851);\n      index = (uint)index;\n      converted_value = convert_double_to_float((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n      values[index] = converted_value;\n    }\n    print_floating_point(values[index]);\n    print_program_string(&DAT_0800bbbc);\n  }\n  print_program_string(\"WPos:\");\n  for (index = 0; index < 3; index = index + 1) {\n    if ((DAT_20000ee4 & 1) == 0) {\n      temp_var2 = values[index];\n      converted_value = add_floats(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      index = (uint)index;\n      converted_value = subtract_floats(temp_var2,converted_value);\n      values[index] = converted_value;\n    }\n    else {\n      temp_double1 = convert_float_to_double(values[index]);\n      converted_value = add_floats(*(undefined4 *)(&DAT_20000e70 + (index + 8) * 4),\n                       *(undefined4 *)(&DAT_20000e74 + (index + 10) * 4));\n      temp_double2 = convert_float_to_double(converted_value);\n      temp_double2 = multiply_doubles((int)temp_double2,(int)((ulonglong)temp_double2 >> 0x20),0x57e16865,0x3fa42851);\n      temp_double1 = subtract_doubles((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20),(int)temp_double2,\n                       (int)((ulonglong)temp_double2 >> 0x20));\n      index = (uint)index;\n      converted_value = convert_double_to_float((int)temp_double1,(int)((ulonglong)temp_double1 >> 0x20));\n      values[index] = converted_value;\n    }\n    print_floating_point(values[index]);\n    if (index < 2) {\n      print_program_string(&DAT_0800bbbc);\n    }\n  }\n  print_program_string(&DAT_0800bca8);\n  return;\n}\n\n",
            "current_name": "print_position_status_08004940",
            "entrypoint": "0x08004940",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004940": "print_position_status_08004940",
                "__addsf3": "add_floats",
                "__aeabi_f2d": "convert_float_to_double",
                "__aeabi_fdiv": "divide_floats",
                "__aeabi_fsub": "subtract_floats",
                "__floatsisf": "convert_integer_to_float",
                "__muldf3": "multiply_doubles",
                "__subdf3": "subtract_doubles",
                "__truncdfsf2": "convert_double_to_float",
                "auStack_2c": "values",
                "local_11": "index",
                "printFloat": "print_floating_point",
                "printPgmString": "print_program_string",
                "uVar1": "converted_value",
                "uVar2": "index",
                "uVar3": "temp_var2",
                "uVar4": "temp_double1",
                "uVar5": "temp_double2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bc0": {
            "additional_data": {
                "FUN_08000374": {
                    "copy_data_to_eeprom": 1,
                    "copy_memory": 1,
                    "memcpy_to_eeprom_with_checksum": 1
                },
                "FUN_08004bc0": {
                    "copy_data_to_eeprom": 4,
                    "copy_to_eeprom": 9,
                    "copy_to_eeprom_erase_page": 1,
                    "copy_to_eeprom_with_checksum": 1,
                    "eeprom_write_with_checksum": 1,
                    "memcpy_to_eeprom_from_offset": 1,
                    "write_data_to_eeprom": 9,
                    "write_param_to_eeprom": 1,
                    "write_to_eeprom": 4
                },
                "memcpy_to_eeprom_with_checksum": {
                    "copy_data_to_eeprom": 2,
                    "copy_data_to_eeprom_with_checksum": 2,
                    "copy_data_with_checksum": 1,
                    "copy_to_eeprom_with_checksum": 6,
                    "copy_with_checksum": 2,
                    "eeprom_write": 1,
                    "write_data_to_eeprom": 1,
                    "write_data_to_eeprom_with_checksum": 1,
                    "write_data_with_checksum": 1,
                    "write_data_with_checksum_to_eeprom": 1,
                    "write_to_eepro_mwith_checksum": 1,
                    "write_to_eeprom": 1,
                    "write_to_eeprom_with_checksum": 1,
                    "write_with_checksum": 2
                },
                "param_1": {
                    "address": 3,
                    "address_offset": 4,
                    "base": 1,
                    "base_address": 1,
                    "byte_offset": 1,
                    "byte_value": 2,
                    "data": 3,
                    "data_block_number": 1,
                    "data_byte": 3,
                    "data_index": 2,
                    "input_byte": 1,
                    "offset": 1,
                    "page_number": 1,
                    "param1": 1,
                    "param_index": 1,
                    "source_address": 1,
                    "source_data": 1,
                    "source_offset": 1,
                    "start_address": 2
                },
                "param_2": {
                    "data": 14,
                    "data_buffer": 2,
                    "data_ptr": 1,
                    "dest_address": 1,
                    "destination": 1,
                    "input_data": 1,
                    "param2": 1,
                    "source": 4,
                    "source_buffer": 1,
                    "source_data": 5
                },
                "param_3": {
                    "buffer_size": 1,
                    "data_length": 3,
                    "data_size": 3,
                    "length": 4,
                    "param3": 1,
                    "size": 2
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_08004d2c"
            ],
            "code": "\nvoid write_param_to_eeprom_08004bc0(byte address_offset,undefined4 data)\n\n{\n  copy_to_eeprom_with_checksum((ushort)address_offset * 0x101 + 0x300,data,0x100);\n  return;\n}\n\n",
            "current_name": "write_param_to_eeprom_08004bc0",
            "entrypoint": "0x08004bc0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bc0": "write_param_to_eeprom_08004bc0",
                "memcpy_to_eeprom_with_checksum": "copy_to_eeprom_with_checksum",
                "param_1": "address_offset",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004bf4": {
            "additional_data": {
                "FUN_08000374": {
                    "copy_memory_to_eeprom": 1,
                    "validate_checksum": 1,
                    "write_data_to_eeprom_with_checksum": 1
                },
                "FUN_08004bf4": {
                    "copy_and_checksum_to_eeprom": 1,
                    "copy_data_to_eeprom": 3,
                    "copy_to_eeprom": 3,
                    "eeprom_write_data": 1,
                    "store_data_in_eeprom": 1,
                    "store_data_to_eeprom": 1,
                    "write_data_to_eeprom": 17,
                    "write_to_eeprom": 4
                },
                "memcpy_to_eeprom_with_checksum": {
                    "copy_data_to_eeprom": 3,
                    "copy_data_to_eeprom_with_checksum": 5,
                    "copy_data_with_checksum": 4,
                    "copy_to_eeprom_with_checksum": 1,
                    "write_data_to_eeprom_with_checksum": 2,
                    "write_data_with_checksum": 5,
                    "write_to_eeprom": 1,
                    "write_to_eeprom_with_checksum": 3,
                    "write_with_checksum": 1
                },
                "param_1": {
                    "address": 3,
                    "address_offset": 4,
                    "base_address": 2,
                    "block_number": 1,
                    "block_offset": 1,
                    "byte_count": 4,
                    "byte_offset": 1,
                    "byte_value": 3,
                    "data": 2,
                    "data_offset": 3,
                    "data_start_address": 1,
                    "eeprom_index": 1,
                    "index": 1,
                    "input_byte": 1,
                    "offset": 1,
                    "start_address": 1,
                    "start_index": 1
                },
                "param_2": {
                    "buffer": 1,
                    "data": 14,
                    "data_buffer": 1,
                    "data_ptr": 1,
                    "data_to_copy": 2,
                    "data_to_write": 3,
                    "source": 2,
                    "source_buffer": 1,
                    "source_data": 6
                },
                "param_3": {
                    "data_length": 2,
                    "data_size": 8,
                    "length": 1,
                    "num_bytes": 1,
                    "size": 3
                },
                "ushort": {
                    "address_multiplier": 1,
                    "block_offset": 1,
                    "size": 1
                }
            },
            "called": [
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08004d7c",
                "FUN_080005b4"
            ],
            "code": "\nvoid write_data_to_eeprom_08004bf4(byte address_offset,undefined4 data)\n\n{\n  copy_data_to_eeprom_with_checksum((block_offset)address_offset * 0xd + 0x200,data,0xc);\n  return;\n}\n\n",
            "current_name": "write_data_to_eeprom_08004bf4",
            "entrypoint": "0x08004bf4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004bf4": "write_data_to_eeprom_08004bf4",
                "memcpy_to_eeprom_with_checksum": "copy_data_to_eeprom_with_checksum",
                "param_1": "address_offset",
                "param_2": "data",
                "ushort": "block_offset"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c2a": {
            "additional_data": {
                "DAT_20000ebc": {
                    "data_to_copy": 1,
                    "source_data": 2
                },
                "FUN_08000340": {
                    "copy_data_to_eeprom": 1,
                    "initialize_eeprom": 4,
                    "initialize_eeprom_section": 1,
                    "put_char_to_eeprom": 2,
                    "set_eeprom_character": 1,
                    "write_char_to_eeprom": 1
                },
                "FUN_08000374": {
                    "copy_data_to_eeprom": 5,
                    "copy_data_to_eeprom_with_checksum": 3,
                    "copy_data_with_checksum": 1,
                    "write_data_to_eeprom_with_checksum": 1
                },
                "FUN_08004c2a": {
                    "initialize_eeprom": 2,
                    "save_data_to_eeprom": 1,
                    "store_data_in_eeprom": 3,
                    "store_data_to_eeprom": 1,
                    "update_eeprom_data": 1,
                    "write_data_to_eeprom": 19,
                    "write_memory_to_eeprom": 1,
                    "write_to_eeprom": 2,
                    "write_to_eeprom_with_checksum": 1
                },
                "eeprom_put_char": {
                    "put_character_in_eeprom": 1,
                    "write_byte_to_eeprom": 1,
                    "write_char_to_eeprom": 9
                },
                "memcpy_to_eeprom_with_checksum": {
                    "copy_data_to_eeprom_with_checksum": 2,
                    "copy_to_eeprom_with_checksum": 1,
                    "write_data_to_eeprom_with_checksum": 7,
                    "write_data_with_checksum_to_eeprom": 1
                },
                "param_1": {
                    "addr": 1,
                    "address": 12,
                    "channel": 1,
                    "character_index": 1,
                    "eeprom_address": 6,
                    "index": 1,
                    "page_number": 1,
                    "start_address": 5
                },
                "param_2": {
                    "char_to_write": 1,
                    "character": 1,
                    "data": 19,
                    "data_buffer": 3,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "source_data": 2
                },
                "param_3": {
                    "data_length": 3,
                    "data_size": 6,
                    "length": 8,
                    "size": 10,
                    "size_of_data": 1
                }
            },
            "called": [
                "FUN_08000340",
                "FUN_08000374"
            ],
            "calling": [
                "FUN_08004e30",
                "FUN_08004c48"
            ],
            "code": "\nvoid write_data_to_eeprom_08004c2a(void)\n\n{\n  write_char_to_eeprom(0,5);\n  write_data_to_eeprom_08004c2a_with_checksum(1,&DAT_20000ebc,0x40);\n  return;\n}\n\n",
            "current_name": "write_data_to_eeprom_08004c2a",
            "entrypoint": "0x08004c2a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c2a": "write_data_to_eeprom_08004c2a",
                "eeprom_put_char": "write_char_to_eeprom",
                "memcpy_to_eeprom_with_checksum": "write_data_to_eeprom_with_checksum"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004c48": {
            "additional_data": {
                "DAT_20000ebc": {
                    "constant1": 2,
                    "constant_value1": 1,
                    "default_color": 1,
                    "global_setting1": 1,
                    "global_variable_1": 1,
                    "preset_value1": 1,
                    "setting1": 2,
                    "value1": 4
                },
                "DAT_20000ec0": {
                    "constant2": 2,
                    "constant_value2": 1,
                    "global_setting2": 1,
                    "global_variable_2": 1,
                    "highlight_color": 1,
                    "preset_value2": 1,
                    "setting2": 2,
                    "value2": 4
                },
                "DAT_20000ec4": {
                    "background_color": 1,
                    "constant3": 2,
                    "constant_value3": 1,
                    "global_setting3": 1,
                    "global_variable_3": 1,
                    "preset_value3": 1,
                    "setting3": 2,
                    "value3": 4
                },
                "DAT_20000ec9": {
                    "constant4": 2,
                    "constant_value4": 1,
                    "count": 2,
                    "counter": 1,
                    "font_size": 1,
                    "global_setting4": 1,
                    "global_variable_4": 1,
                    "preset_value4": 1,
                    "setting4": 2,
                    "size": 1
                },
                "DAT_20000ecc": {
                    "address1": 2,
                    "constant5": 2,
                    "constant_value5": 1,
                    "data1": 1,
                    "default_font": 1,
                    "global_setting5": 1,
                    "global_variable_5": 1,
                    "preset_value5": 1,
                    "ptr1": 1,
                    "setting5": 2
                },
                "DAT_20000ed0": {
                    "address2": 2,
                    "constant6": 2,
                    "constant_value6": 1,
                    "data2": 1,
                    "global_setting6": 1,
                    "global_variable_6": 1,
                    "highlight_font": 1,
                    "preset_value6": 1,
                    "ptr2": 1,
                    "setting6": 2
                },
                "DAT_20000ed4": {
                    "constant9": 2,
                    "constant_value9": 1,
                    "feature_toggle": 1,
                    "global_variable_9": 1,
                    "preset_value9": 1,
                    "value5": 1,
                    "variable1": 1
                },
                "DAT_20000ed6": {
                    "animation_speed": 1,
                    "constant10": 2,
                    "constant_value10": 1,
                    "global_setting9": 1,
                    "global_variable_10": 1,
                    "preset_value10": 1,
                    "setting9": 1,
                    "value6": 1,
                    "variable2": 1
                },
                "DAT_20000ed8": {
                    "constant1": 1,
                    "constant8": 2,
                    "constant_value8": 1,
                    "global_setting8": 1,
                    "global_variable_8": 1,
                    "opacity": 1,
                    "preset_value8": 1,
                    "setting8": 2,
                    "value4": 1
                },
                "DAT_20000edc": {
                    "address3": 1,
                    "constant7": 2,
                    "constant_value7": 1,
                    "default_theme": 1,
                    "global_setting7": 1,
                    "global_variable_7": 1,
                    "preset_value7": 1,
                    "ptr3": 1,
                    "setting7": 2
                },
                "DAT_20000ee0": {
                    "constant11": 2,
                    "constant2": 1,
                    "constant_value11": 1,
                    "data3": 1,
                    "global_setting10": 1,
                    "global_variable_11": 1,
                    "preset_value11": 1,
                    "scaling_factor": 1,
                    "setting10": 1,
                    "value4": 1,
                    "value7": 1
                },
                "DAT_20000ee4": {
                    "constant1": 5,
                    "constant12": 2,
                    "constant3": 1,
                    "constant_value1": 1,
                    "constant_value12": 1,
                    "global_variable_12": 1,
                    "value1": 2,
                    "version": 1
                },
                "DAT_20000ee6": {
                    "constant13": 2,
                    "constant2": 4,
                    "constant_value13": 1,
                    "constant_value2": 1,
                    "counter": 1,
                    "global_variable_13": 1,
                    "value2": 2,
                    "variable3": 1
                },
                "DAT_20000ee8": {
                    "constant14": 2,
                    "constant2": 1,
                    "constant3": 4,
                    "constant4": 1,
                    "constant_value14": 1,
                    "constant_value3": 1,
                    "global_variable_14": 1,
                    "initial_value": 1,
                    "value3": 2
                },
                "DAT_20000eec": {
                    "address3": 1,
                    "constant15": 2,
                    "constant4": 4,
                    "constant_value15": 1,
                    "constant_value4": 1,
                    "default_setting": 1,
                    "global_variable_15": 1,
                    "ptr4": 1,
                    "value4": 2
                },
                "DAT_20000ef0": {
                    "constant16": 2,
                    "constant3": 1,
                    "constant5": 5,
                    "constant_value16": 1,
                    "constant_value5": 1,
                    "global_variable_16": 1,
                    "timeout": 1,
                    "value5": 2
                },
                "DAT_20000ef4": {
                    "constant17": 2,
                    "constant6": 5,
                    "constant_value17": 1,
                    "constant_value6": 1,
                    "default_value": 1,
                    "global_variable_17": 1,
                    "value6": 2
                },
                "DAT_20000ef8": {
                    "constant18": 2,
                    "constant7": 5,
                    "constant_value18": 1,
                    "constant_value7": 1,
                    "global_variable_18": 1,
                    "item_count": 1,
                    "value7": 2
                },
                "DAT_20000ef9": {
                    "category": 1,
                    "constant19": 2,
                    "constant8": 5,
                    "constant_value19": 1,
                    "constant_value8": 1,
                    "global_variable_19": 1,
                    "value8": 2
                },
                "DAT_20000efa": {
                    "constant20": 2,
                    "constant9": 5,
                    "constant_value20": 1,
                    "constant_value9": 1,
                    "global_variable_20": 1,
                    "subcategory": 1,
                    "value9": 2
                },
                "FUN_08004c2a": {
                    "initialize_global_variables": 1,
                    "reverse_bits": 1
                },
                "FUN_08004c48": {
                    "initialize_data": 1,
                    "initialize_global_settings": 12,
                    "initialize_parameters": 1,
                    "initialize_settings": 17
                },
                "flag": {
                    "flag": 1
                },
                "initializeGlobalSettings": {
                    "initialize_global_settings": 1
                },
                "param_1": {
                    "condition": 2,
                    "flag": 17,
                    "input_character": 1,
                    "input_data": 1,
                    "input_flag": 6,
                    "input_param": 1,
                    "is_non_zero": 1,
                    "is_param_nonzero": 1,
                    "parameter": 1
                },
                "write_global_settings": {
                    "configure_settings": 1,
                    "save_global_settings": 11,
                    "save_global_settings_to_memory": 1,
                    "save_settings": 10,
                    "update_global_settings": 2,
                    "write_settings": 2
                }
            },
            "called": [
                "FUN_08004c2a"
            ],
            "calling": [
                "FUN_080051b4",
                "FUN_08004dd2"
            ],
            "code": "\nvoid initialize_global_settings_08004c48(char flag)\n\n{\n  if (flag != '\\0') {\n    DAT_20000ebc = 0x431d7af6;\n    DAT_20000ec0 = 0x431d7af6;\n    DAT_20000ec4 = 0x431d7af6;\n    DAT_20000ec9 = 10;\n    DAT_20000ecc = 0x437a0000;\n    DAT_20000ed0 = 0x43fa0000;\n    DAT_20000edc = 0x470ca000;\n    DAT_20000ed8 = 0x3dcccccd;\n    DAT_20000ed4 = 0;\n    DAT_20000ed6 = 0xa80;\n    DAT_20000ee0 = 0x3d4ccccd;\n  }\n  DAT_20000ee4 = 0x12;\n  DAT_20000ee6 = 0;\n  DAT_20000ee8 = 0x41c80000;\n  DAT_20000eec = 0x437a0000;\n  DAT_20000ef0 = 100;\n  DAT_20000ef4 = 0x3f800000;\n  DAT_20000ef8 = 0x19;\n  DAT_20000ef9 = 3;\n  DAT_20000efa = 0x19;\n  save_global_settings();\n  return;\n}\n\n",
            "current_name": "initialize_global_settings_08004c48",
            "entrypoint": "0x08004c48",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004c48": "initialize_global_settings_08004c48",
                "param_1": "flag",
                "write_global_settings": "save_global_settings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d2c": {
            "additional_data": {
                "0x100": {
                    "data_size": 1
                },
                "0x101": {
                    "buffer_size": 1
                },
                "0x300": {
                    "base_address": 1
                },
                "FUN_080003ec": {
                    "compare_strings": 1
                },
                "FUN_08004bc0": {
                    "read_from_eeprom": 1
                },
                "FUN_08004d2c": {
                    "load_and_store_settings": 3,
                    "load_data_from_eeprom": 4,
                    "load_eeprom_data": 1,
                    "load_settings": 1,
                    "load_settings_from_eeprom": 2,
                    "load_settings_from_memory": 1,
                    "load_startup_line_from_eeprom": 2,
                    "load_startup_settings": 1,
                    "read_and_store_eeprom_data": 1,
                    "read_and_store_settings": 4,
                    "read_and_store_startup_line": 2,
                    "read_and_store_startup_settings": 1,
                    "read_eeprom_data": 4,
                    "read_settings_from_eeprom": 1,
                    "retrieve_and_store_settings": 1,
                    "retrieve_and_store_startup_line": 1,
                    "retrieve_data_from_eeprom": 1
                },
                "iVar1": {
                    "copy_result": 5,
                    "copy_status": 1,
                    "error_code": 3,
                    "memcpy_result": 4,
                    "result": 17
                },
                "memcpy_from_eeprom_with_checksum": {
                    "copy_from_eeprom_with_checksum": 1,
                    "read_eeprom_with_checksum": 1,
                    "read_from_eeprom": 3,
                    "read_from_eeprom_with_checksum": 2
                },
                "param_1": {
                    "address": 4,
                    "byte_1": 1,
                    "byte_count": 1,
                    "byte_data": 1,
                    "byte_param": 1,
                    "byte_value": 5,
                    "config_index": 1,
                    "data_index": 2,
                    "data_size": 1,
                    "device_id": 3,
                    "index": 3,
                    "input_byte": 3,
                    "input_char": 1,
                    "line_number": 1,
                    "param": 1,
                    "start_position": 1,
                    "startup_line_index": 1
                },
                "param_2": {
                    "buffer": 7,
                    "data_buffer": 7,
                    "destination_buffer": 2,
                    "output_buffer": 5,
                    "output_data": 3,
                    "retrieved_data": 1,
                    "settings_buffer": 5,
                    "startup_line_buffer": 1
                },
                "param_3": {
                    "length": 1
                },
                "settings_store_startup_line": {
                    "save_startup_info": 1,
                    "store_startup_line": 5
                },
                "ushort": {
                    "unsigned_short": 1
                }
            },
            "called": [
                "FUN_08004bc0",
                "FUN_080003ec"
            ],
            "calling": [
                "FUN_08003b98",
                "FUN_080039bc"
            ],
            "code": "\nbool load_and_store_settings_08004d2c(byte byte_value,undefined *buffer)\n\n{\n  int result;\n  \n  result = read_from_eeprom(buffer,(unsigned_short)byte_value * 0x101 + 0x300,0x100);\n  if (result == 0) {\n    *buffer = 0;\n    store_startup_line(byte_value,buffer);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "load_and_store_settings_08004d2c",
            "entrypoint": "0x08004d2c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d2c": "load_and_store_settings_08004d2c",
                "iVar1": "result",
                "memcpy_from_eeprom_with_checksum": "read_from_eeprom",
                "param_1": "byte_value",
                "param_2": "buffer",
                "settings_store_startup_line": "store_startup_line",
                "ushort": "unsigned_short"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004d7c": {
            "additional_data": {
                "0xc": {
                    "data_size": 2
                },
                "FUM_08004bf4": {
                    "initialize_buffer": 1,
                    "read_settings_from_eeprom": 1,
                    "write_settings": 1
                },
                "FUN_080003ec": {
                    "compare_strings": 4
                },
                "FUN_08004bf4": {
                    "copy_data_to_output": 1
                },
                "FUN_08004d7c": {
                    "check_and_copy_data": 1,
                    "check_and_update_data": 1,
                    "check_and_write_config_data": 1,
                    "check_and_write_data": 1,
                    "check_and_write_data_from_eeprom": 1,
                    "initialize_data": 1,
                    "load_and_write_coord_data": 1,
                    "load_and_write_settings": 2,
                    "load_data_and_write_settings": 1,
                    "load_data_and_write_to_memory": 1,
                    "load_data_from_eeprom": 5,
                    "load_settings": 1,
                    "load_settings_from_eeprom": 1,
                    "read_and_write_coord_data": 2,
                    "read_and_write_data": 4,
                    "read_and_write_eeprom_data": 1,
                    "read_and_write_settings": 4,
                    "read_from_eeprom": 1,
                    "read_from_eeprom_and_write_to_settings": 1
                },
                "FUN_0800b430": {
                    "calculate_checksum": 1,
                    "calculate_memory_address": 1,
                    "process_data": 1,
                    "write_to_eeprom_with_padding": 1
                },
                "iVar1": {
                    "copy_result": 6,
                    "copy_success": 1,
                    "error_code": 1,
                    "memcpy_result": 4,
                    "result": 16
                },
                "memcpy_from_eeprom_with_checksum": {
                    "copy_data_from_eeprom": 1,
                    "copy_data_from_eeprom_with_checksum": 1,
                    "copy_from_eeprom_with_checksum": 1,
                    "read_data_from_eeprom": 2,
                    "read_from_eeprom_with_checksum": 3
                },
                "memset": {
                    "clear_buffer": 2,
                    "clear_data_buffer": 1,
                    "clear_memory": 3,
                    "zero_memory": 1
                },
                "param_1": {
                    "address": 3,
                    "byte_param": 1,
                    "byte_value": 6,
                    "coordinate": 1,
                    "data": 1,
                    "data_byte": 2,
                    "data_index": 1,
                    "data_size": 1,
                    "device_id": 6,
                    "device_index": 1,
                    "eeprom_address": 1,
                    "index": 1,
                    "input_byte": 4,
                    "input_data": 1,
                    "param_byte": 1
                },
                "param_2": {
                    "addr_param": 1,
                    "address": 1,
                    "buffer": 3,
                    "data": 1,
                    "data_buffer": 13,
                    "data_ptr": 1,
                    "destination": 1,
                    "output_buffer": 1,
                    "output_data": 3,
                    "param_data": 1,
                    "settings_buffer": 4,
                    "source_address": 1
                },
                "settings_write_coord_data": {
                    "write_coord_data": 3,
                    "write_coordinate_data": 2,
                    "write_data_to_memory": 1,
                    "write_data_to_settings": 1,
                    "write_to_settings": 1
                }
            },
            "called": [
                "FUN_08004bf4",
                "FUN_0800b430",
                "FUN_080003ec"
            ],
            "calling": [
                "FUN_080044e8",
                "FUN_080005b4",
                "FUN_080004ac",
                "FUN_080051b4"
            ],
            "code": "\nbool check_and_copy_data_08004d7c(byte byte_value,undefined4 data_buffer)\n\n{\n  int result;\n  \n  result = read_from_eeprom_with_checksum(data_buffer,(ushort)byte_value * 0xd + 0x200,0xc);\n  if (result == 0) {\n    clear_memory(data_buffer,0,0xc);\n    write_coord_data(byte_value,data_buffer);\n  }\n  return result != 0;\n}\n\n",
            "current_name": "check_and_copy_data_08004d7c",
            "entrypoint": "0x08004d7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004d7c": "check_and_copy_data_08004d7c",
                "iVar1": "result",
                "memcpy_from_eeprom_with_checksum": "read_from_eeprom_with_checksum",
                "memset": "clear_memory",
                "param_1": "byte_value",
                "param_2": "data_buffer",
                "settings_write_coord_data": "write_coord_data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004dd2": {
            "additional_data": {
                "DAT_20000ebc": {
                    "data_buffer": 1
                },
                "FUN_08000310": {
                    "calculate_checksum": 1,
                    "eeprom_get_byte": 2,
                    "eeprom_get_char": 1,
                    "eeprom_get_uint": 1,
                    "read_eeprom_byte": 1,
                    "reset_settings": 1,
                    "validate_eeprom_char": 1,
                    "validate_eeprom_checksum": 1
                },
                "FUN_080003ec": {
                    "check_data_integrity": 1,
                    "copy_eeprom_data": 1,
                    "eeprom_read_data": 1,
                    "memcpy_with_eeprom_checksum": 1,
                    "reset_settings": 1,
                    "settings_reset": 2,
                    "verify_eeprom_data": 1,
                    "verify_memory_copy": 1
                },
                "FUN_08004c48": {
                    "copy_data_from_eeprom": 1,
                    "copy_eeprom_char": 1,
                    "eeprom_get_char": 1,
                    "eeprom_read_char": 1,
                    "initialize_eeprom": 1,
                    "memcpy_from_eeprom": 1,
                    "memcpy_from_eeprom_with_checksum": 3
                },
                "FUN_08004dd2": {
                    "check_and_load_settings": 1,
                    "initialize_device": 1,
                    "initialize_eeprom_data": 1,
                    "initialize_settings": 16,
                    "load_settings": 3,
                    "load_settings_from_eeprom": 7,
                    "read_and_load_settings": 1,
                    "read_data_and_update_settings": 1
                },
                "bVar1": {
                    "eeprom_char": 3,
                    "eeprom_char_value": 1,
                    "eeprom_data": 1,
                    "eeprom_value": 21
                },
                "eeprom_get_char": {
                    "get_eeprom_value": 2
                },
                "iVar2": {
                    "copy_result": 15,
                    "error_code": 1,
                    "memcpy_result": 7,
                    "result": 3
                },
                "memcpy_from_eeprom_with_checksum": {
                    "copy_data_from_eeprom_with_checksum": 2
                },
                "param_1": {
                    "eeprom_char": 1,
                    "eeprom_data": 2
                },
                "param_2": {
                    "data_length": 1
                },
                "param_3": {
                    "eeprom_address": 1
                },
                "settings_reset": {
                    "reset_settings": 2
                }
            },
            "called": [
                "FUN_08000310",
                "FUN_08004c48",
                "FUN_080003ec"
            ],
            "calling": [
                "FUN_080051b4"
            ],
            "code": "\nundefined4 initialize_settings_08004dd2(void)\n\n{\n  byte eeprom_value;\n  int copy_result;\n  \n  eeprom_value = get_eeprom_value(0);\n  if (eeprom_value == 5) {\n    copy_result = copy_data_from_eeprom_with_checksum(&DAT_20000ebc,1,0x40);\n    if (copy_result == 0) {\n      return 0;\n    }\n  }\n  else {\n    if (4 < eeprom_value) {\n      return 0;\n    }\n    copy_result = copy_data_from_eeprom_with_checksum(&DAT_20000ebc,1,0x28);\n    if (copy_result == 0) {\n      return 0;\n    }\n    reset_settings(0);\n  }\n  return 1;\n}\n\n",
            "current_name": "initialize_settings_08004dd2",
            "entrypoint": "0x08004dd2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004dd2": "initialize_settings_08004dd2",
                "bVar1": "eeprom_value",
                "eeprom_get_char": "get_eeprom_value",
                "iVar2": "copy_result",
                "memcpy_from_eeprom_with_checksum": "copy_data_from_eeprom_with_checksum",
                "settings_reset": "reset_settings"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08004e30": {
            "additional_data": {
                "FUN_0800192c": {
                    "write_global_settings": 1
                },
                "FUN_08004c2a": {
                    "limits_init": 1
                },
                "FUN_08004e30": {
                    "update_global_settings": 5,
                    "update_setting": 1,
                    "update_settings": 25
                },
                "FUN_08008590": {
                    "convert_to_unsigned_long_long": 1
                },
                "FUN_08008bf0": {
                    "perform_operation": 1
                },
                "FUN_08008eec": {
                    "perform_extended_operation": 1
                },
                "FUN_08009214": {
                    "is_condition_satisfied": 1
                },
                "FUN_08009228": {
                    "is_condition_met": 1
                },
                "FUN_08009654": {
                    "perform_unsigned_calculation": 1
                },
                "FUN_08009798": {
                    "perform_calculation": 1
                },
                "iVar2": {
                    "comparison_result": 25,
                    "is_invalid": 1,
                    "is_less_than_or_equal": 2,
                    "is_negative": 1,
                    "is_zero": 1
                },
                "param_1": {
                    "id": 1,
                    "option": 1,
                    "setting": 1,
                    "setting_code": 3,
                    "setting_id": 2,
                    "setting_index": 5,
                    "setting_type": 18
                },
                "param_2": {
                    "new_value": 2,
                    "setting_value": 20,
                    "value": 9
                },
                "uVar1": {
                    "calculated_value": 1,
                    "calculation_result": 2,
                    "float_result": 1,
                    "mul_result": 1,
                    "multiplied_value": 1,
                    "result": 18,
                    "updated_value": 1
                },
                "uVar3": {
                    "converted_value": 28,
                    "double_result": 1,
                    "double_value": 1
                }
            },
            "called": [
                "FUN_08008590",
                "FUN_08008bf0",
                "FUN_08009228",
                "FUN_08009798",
                "FUN_08008eec",
                "FUN_08004c2a",
                "FUN_0800923c",
                "FUN_0800192c",
                "FUN_08009654",
                "FUN_08009214"
            ],
            "calling": [
                "FUN_08003b98"
            ],
            "code": "\nundefined4 update_global_settings_08004e30(int setting_type,uint setting_value)\n\n{\n  undefined4 result;\n  int comparison_result;\n  undefined8 converted_value;\n  \n  switch(setting_type) {\n  case 0:\n  case 1:\n  case 2:\n    comparison_result = __aeabi_fcmple(setting_value,0);\n    if (comparison_result != 0) {\n      return 8;\n    }\n    (&DAT_20000ebc)[setting_type] = setting_value;\n    break;\n  case 3:\n    comparison_result = __aeabi_fcmplt(setting_value,0x40400000);\n    if (comparison_result != 0) {\n      return 9;\n    }\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = round((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ec9 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 4:\n    DAT_20000ecc = setting_value;\n    break;\n  case 5:\n    DAT_20000ed0 = setting_value;\n    break;\n  case 6:\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = trunc((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed4 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 7:\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = round((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef8 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 8:\n    result = __aeabi_fmul(setting_value,0x42700000);\n    DAT_20000edc = __aeabi_fmul(result,0x42700000);\n    break;\n  case 9:\n    DAT_20000ee0 = setting_value & 0x7fffffff;\n    break;\n  case 10:\n    DAT_20000ed8 = setting_value;\n    break;\n  case 0xb:\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = round((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000efa = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xc:\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = round((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef9 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0xd:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 1;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfe;\n    }\n    break;\n  case 0xe:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 2;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfd;\n    }\n    break;\n  case 0xf:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 4;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xfb;\n    }\n    break;\n  case 0x10:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 8;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xf7;\n    }\n    limits_init();\n    break;\n  case 0x11:\n    comparison_result = __aeabi_fcmpeq(setting_value,0);\n    if (comparison_result == 0) {\n      DAT_20000ee4 = DAT_20000ee4 | 0x10;\n    }\n    else {\n      DAT_20000ee4 = DAT_20000ee4 & 0xef;\n    }\n    break;\n  case 0x12:\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = trunc((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ee6 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x13:\n    DAT_20000ee8 = setting_value;\n    break;\n  case 0x14:\n    DAT_20000eec = setting_value;\n    break;\n  case 0x15:\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = round((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ef0 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  case 0x16:\n    DAT_20000ef4 = setting_value;\n    break;\n  case 0x17:\n    converted_value = __aeabi_f2d(setting_value);\n    converted_value = trunc((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    DAT_20000ed6 = __aeabi_d2uiz((int)converted_value,(int)((ulonglong)converted_value >> 0x20));\n    break;\n  default:\n    return 6;\n  }\n  write_global_settings();\n  return 0;\n}\n\n",
            "current_name": "update_global_settings_08004e30",
            "entrypoint": "0x08004e30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08004e30": "update_global_settings_08004e30",
                "iVar2": "comparison_result",
                "param_1": "setting_type",
                "param_2": "setting_value",
                "uVar1": "result",
                "uVar3": "converted_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080051b4": {
            "additional_data": {
                "FUN_080051b4": {
                    "check_and_reset_settings": 16,
                    "check_and_update_settings": 2,
                    "check_global_settings": 3,
                    "check_global_settings_and_read_coord_data": 1,
                    "check_global_settings_and_report": 1,
                    "check_settings_and_read_coord_data": 1,
                    "check_settings_and_read_data": 1,
                    "check_settings_and_report": 1,
                    "initialize_coordinates": 1,
                    "initialize_settings": 2,
                    "validate_global_settings": 1,
                    "verify_global_settings": 1
                },
                "auStack_18": {
                    "coord_buffer": 1,
                    "coord_data": 20,
                    "coord_data_array": 1,
                    "coord_data_buffer": 6
                },
                "iVar1": {
                    "global_settings": 1,
                    "read_result": 1,
                    "result": 10,
                    "status": 1
                },
                "local_9": {
                    "coord_idx": 1,
                    "coord_index": 12,
                    "coordinate_index": 2,
                    "index": 16
                }
            },
            "called": [
                "FUN_08004d7c",
                "FUN_08004250",
                "FUN_08004c48",
                "FUN_08004030",
                "FUN_08004dd2"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid check_and_reset_settings_080051b4(void)\n\n{\n  int result;\n  undefined coord_data [15];\n  byte index;\n  \n  result = read_global_settings();\n  if (result == 0) {\n    report_status_message(10);\n    settings_reset(1);\n    report_grbl_settings();\n  }\n  for (index = 0; index < 8; index = index + 1) {\n    result = settings_read_coord_data(index,coord_data);\n    if (result == 0) {\n      report_status_message(10);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "check_and_reset_settings_080051b4",
            "entrypoint": "0x080051b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080051b4": "check_and_reset_settings_080051b4",
                "auStack_18": "coord_data",
                "iVar1": "result",
                "local_9": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005208": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005208(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005208",
            "entrypoint": "0x08005208",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005208": "FUNC_08005208"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005214": {
            "called": [],
            "calling": [
                "FUN_08005250"
            ],
            "code": "\nvoid FUNC_08005214(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005214",
            "entrypoint": "0x08005214",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005214": "FUNC_08005214"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005220": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_08005220(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005220",
            "entrypoint": "0x08005220",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005220": "FUNC_08005220"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800522c": {
            "called": [],
            "calling": [
                "FUN_0800525c"
            ],
            "code": "\nvoid FUNC_0800522c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800522c",
            "entrypoint": "0x0800522c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800522c": "FUNC_0800522c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005238": {
            "additional_data": {
                "FUN_08005238": {
                    "spindle_stop_and_reset": 1,
                    "stop_spindle": 30
                },
                "FUN_08005250": {
                    "check_conditions": 1,
                    "clear_flag": 1,
                    "close_popup": 1,
                    "disable_control_signals": 1,
                    "disable_safety_protocol": 1,
                    "disable_safety_protocols": 1,
                    "do_something": 1,
                    "enable_spindle": 1,
                    "initialize_spindle": 3,
                    "initialize_system": 1,
                    "initialize_variables": 1,
                    "pause_operation": 1,
                    "perform_additional_tasks": 1,
                    "reset_counters": 1,
                    "reset_data": 1,
                    "reset_flags": 1,
                    "reset_function": 1,
                    "reset_spindle": 2,
                    "reset_state": 1,
                    "reset_variables": 2,
                    "reverse": 1,
                    "shutdown_system": 1,
                    "stop_spindle_logic": 1,
                    "stop_subfunction": 1,
                    "turn_off_spindle": 1,
                    "update_status": 1
                },
                "PTR_FUN_08005250": {
                    "initialize_spindle": 1
                },
                "spindle_stop": {
                    "stop_spindle": 1,
                    "stop_spindle_helper": 1
                }
            },
            "called": [
                "FUN_08005250"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid spindle_stop_and_reset_08005238(void)\n\n{\n  DAT_20000e12 = 0;\n  stop_spindle_helper();\n  return;\n}\n\n",
            "current_name": "spindle_stop_and_reset_08005238",
            "entrypoint": "0x08005238",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005238": "spindle_stop_and_reset_08005238",
                "spindle_stop": "stop_spindle_helper"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005250": {
            "additional_data": {
                "FUNC_08005214": {
                    "check_spindle_status": 1,
                    "disable_all_subsystems": 1,
                    "disable_motor": 1,
                    "disable_spindle": 4,
                    "do_additional_processing": 1,
                    "do_something": 1,
                    "initialize_spindle": 2,
                    "shutdown_subsystem": 1,
                    "spindle_off": 2,
                    "spindle_off_helper": 1,
                    "stop_spindle": 2,
                    "stop_spindle_rotation": 2,
                    "turn_off_spindle_internal": 1,
                    "turn_on_spindle": 1
                },
                "FUN_08005250": {
                    "turn_off_spindle": 22,
                    "turn_spindle_off": 9
                }
            },
            "called": [
                "FUN_08005214"
            ],
            "calling": [
                "FUN_080025e8",
                "FUN_0800525c",
                "FUN_08005238"
            ],
            "code": "\nvoid turn_spindle_off_08005250(void)\n\n{\n  spindle_off();\n  return;\n}\n\n",
            "current_name": "turn_spindle_off_08005250",
            "entrypoint": "0x08005250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005250": "turn_spindle_off_08005250"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800525c": {
            "additional_data": {
                "DAT_20000e12": {
                    "last_input_byte": 1,
                    "spindle_state": 1
                },
                "FUNC_08005208": {
                    "spindle_fwd": 4
                },
                "FUNC_08005220": {
                    "spindle_stop": 4
                },
                "FUNC_0800522c": {
                    "plan_synchronize": 3
                },
                "FUN_08002fd4": {
                    "spindle_on": 5
                },
                "FUN_08005208": {
                    "spindle_forward": 1
                },
                "FUN_08005220": {
                    "spindle_stop": 1
                },
                "FUN_0800522c": {
                    "plan_synchronize": 2
                },
                "FUN_08005250": {
                    "spindle_rev": 4,
                    "spindle_reverse": 1
                },
                "FUN_0800525c": {
                    "adjust_spindle_direction": 1,
                    "control_spindle": 23,
                    "control_spindle_direction": 1,
                    "handle_spindle": 1,
                    "manage_spindle": 1,
                    "synchronize_plan": 1,
                    "update_spindle_direction": 2,
                    "update_spindle_state": 1
                },
                "param_1": {
                    "command": 2,
                    "direction": 4,
                    "input": 2,
                    "input_byte": 3,
                    "input_value": 3,
                    "new_direction": 1,
                    "new_state": 2,
                    "spindle_direction": 5,
                    "spindle_state": 2,
                    "spindle_status": 1,
                    "state": 2,
                    "status": 4
                },
                "plan_synchronize": {
                    "synchronize_plan": 16,
                    "synchronize_planned": 1,
                    "synchronize_plans": 5,
                    "synchronize_with_plan": 1
                },
                "spindle_fwd": {
                    "forward_spindle": 23
                },
                "spindle_on": {
                    "activate_spindle": 1,
                    "power_on_spindle": 1,
                    "start_spindle": 1,
                    "turn_on_spindle": 20
                },
                "spindle_rev": {
                    "reverse_spindle": 23
                },
                "spindle_stop": {
                    "stop_spindle": 23
                }
            },
            "called": [
                "FUN_0800522c",
                "FUN_08005220",
                "FUN_08005250",
                "FUN_08005208",
                "FUN_08002fd4"
            ],
            "calling": [
                "FUN_080005b4"
            ],
            "code": "\nvoid control_spindle_direction_0800525c(byte spindle_direction)\n\n{\n  if ((int)(char)spindle_direction != (uint)DAT_20000e12) {\n    synchronize_plan();\n    if (spindle_direction == 0) {\n      stop_spindle();\n      DAT_20000e12 = spindle_direction;\n    }\n    else {\n      if ((char)spindle_direction < '\\x01') {\n        reverse_spindle();\n      }\n      else {\n        forward_spindle();\n      }\n      turn_on_spindle();\n      DAT_20000e12 = spindle_direction;\n    }\n  }\n  return;\n}\n\n",
            "current_name": "control_spindle_direction_0800525c",
            "entrypoint": "0x0800525c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800525c": "control_spindle_direction_0800525c",
                "param_1": "spindle_direction",
                "plan_synchronize": "synchronize_plan",
                "spindle_fwd": "forward_spindle",
                "spindle_on": "turn_on_spindle",
                "spindle_rev": "reverse_spindle",
                "spindle_stop": "stop_spindle"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052ac": {
            "additional_data": {
                "0xfffffaaf": {
                    "mask": 4
                },
                "FUN_080052ac": {
                    "apply_bit_mask": 1,
                    "combine_flags": 1,
                    "set_bit_mask": 1,
                    "set_bitmask": 1,
                    "set_bits_in_register": 1,
                    "set_modified_bitmask": 1,
                    "set_modified_value": 1,
                    "update_data": 5,
                    "update_data_and_mask": 1,
                    "update_data_mask": 1,
                    "update_data_register": 1,
                    "update_data_with_mask": 1,
                    "update_flag_in_memory": 2,
                    "update_flags": 6,
                    "update_memory": 1,
                    "update_parameter": 1,
                    "update_register": 2,
                    "update_register_value": 1,
                    "update_register_with_mask": 1,
                    "update_settings": 1
                },
                "_DAT_40021014": {
                    "current_flag_value": 1,
                    "current_settings": 1,
                    "current_value": 1,
                    "data": 1,
                    "data_register": 4,
                    "existing_data": 4,
                    "existing_value": 1,
                    "flags": 5,
                    "masked_value": 1,
                    "memory_address": 1,
                    "register_value": 5,
                    "updated_value": 1
                },
                "param_1": {
                    "data": 1,
                    "flag_to_set": 1,
                    "input": 3,
                    "input_value": 4,
                    "new_data": 5,
                    "new_flag_value": 2,
                    "new_parameter": 1,
                    "new_parameter_value": 1,
                    "new_setting": 1,
                    "new_value": 4,
                    "value": 8
                }
            },
            "called": [],
            "calling": [
                "FUN_08005760",
                "FUN_0800583c",
                "FUN_08005778"
            ],
            "code": "\n\n\nvoid update_data_and_mask_080052ac(uint value)\n\n{\n  _DAT_40021014 = value | _DAT_40021014 & 0xfffffaaf;\n  return;\n}\n\n",
            "current_name": "update_data_and_mask_080052ac",
            "entrypoint": "0x080052ac",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052ac": "update_data_and_mask_080052ac",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080052dc": {
            "additional_data": {
                "FUN_080052dc": {
                    "apply_mask": 2,
                    "set_bit_in_memory": 1,
                    "set_bits_in_memory": 1,
                    "set_param_and_mask": 1,
                    "update_config": 1,
                    "update_configuration": 1,
                    "update_data": 2,
                    "update_data_register": 3,
                    "update_data_value": 1,
                    "update_data_with_mask": 3,
                    "update_data_with_param": 1,
                    "update_flag_bits": 1,
                    "update_flag_in_memory": 1,
                    "update_flag_with_bits": 1,
                    "update_flags": 2,
                    "update_memory_address": 1,
                    "update_memory_value": 2,
                    "update_parameter": 1,
                    "update_permission_bits": 1,
                    "update_permissions": 1,
                    "update_register_value": 1,
                    "update_value_in_memory": 1
                },
                "_DAT_40021014": {
                    "current_bits": 1,
                    "current_permissions": 1,
                    "current_value": 4,
                    "data_register": 4,
                    "existing_data": 2,
                    "flag_bits": 1,
                    "flag_register": 1,
                    "mask_result": 1,
                    "memory_address": 1,
                    "memory_location": 1,
                    "memory_value": 3,
                    "original_data": 1,
                    "original_flag_value": 1,
                    "original_value": 1,
                    "output": 1,
                    "register_value": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "bit_mask": 1,
                    "data": 1,
                    "data_to_update": 1,
                    "flag": 1,
                    "flag_value": 1,
                    "input": 3,
                    "input_value": 2,
                    "new_config_value": 1,
                    "new_data": 1,
                    "new_param": 1,
                    "new_param_value": 1,
                    "new_permission_bits": 1,
                    "new_permissions": 1,
                    "new_value": 12,
                    "value": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\n\n\nvoid update_data_register_080052dc(uint new_value)\n\n{\n  _DAT_40021014 = new_value | _DAT_40021014 & 0xfffff55f;\n  return;\n}\n\n",
            "current_name": "update_data_register_080052dc",
            "entrypoint": "0x080052dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080052dc": "update_data_register_080052dc",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800530c": {
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\nvoid FUNC_0800530c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800530c",
            "entrypoint": "0x0800530c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800530c": "FUNC_0800530c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005318": {
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\nvoid FUNC_08005318(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005318",
            "entrypoint": "0x08005318",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005318": "FUNC_08005318"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005324": {
            "additional_data": {
                "FUN_08005324": {
                    "calculate_step_period": 29,
                    "set_step_period_based_on_param": 1,
                    "set_step_period_based_on_parameter": 1
                },
                "FUN_08007bf0": {
                    "modify_input_value": 1
                },
                "local_14": {
                    "adjusted_input": 1,
                    "adjusted_param": 1,
                    "adjusted_size": 1,
                    "adjusted_step_size": 3,
                    "adjusted_value": 14,
                    "clamped_value": 5,
                    "final_value": 1,
                    "maximum_value": 1,
                    "minimum_value": 1,
                    "normalized_param": 1
                },
                "param_1": {
                    "input": 2,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_size": 1,
                    "input_value": 23,
                    "step_size": 3
                }
            },
            "called": [
                "FUN_08007bf0"
            ],
            "calling": [
                "FUN_08005814",
                "FUN_080058a0",
                "FUN_080053a0"
            ],
            "code": "\nvoid calculate_step_period_08005324(uint input_value)\n\n{\n  uint adjusted_value;\n  \n  adjusted_value = input_value;\n  if (input_value < 800) {\n    adjusted_value = 800;\n  }\n  DAT_20000e28 = 1260000000 / adjusted_value;\n  set_step_period(DAT_20000e28);\n  return;\n}\n\n",
            "current_name": "calculate_step_period_08005324",
            "entrypoint": "0x08005324",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005324": "calculate_step_period_08005324",
                "local_14": "adjusted_value",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005360": {
            "additional_data": {
                "": {
                    "": 1
                },
                "420000": {
                    "threshold_value": 1
                },
                "DAT_20000e28": {
                    "base_threshold": 1,
                    "data_start": 1,
                    "initial_value": 11,
                    "previous_value": 1
                },
                "DAT_20000e2c": {
                    "accumulated_value": 3,
                    "accumulator": 4,
                    "counter": 2,
                    "current_threshold": 1,
                    "current_value": 4,
                    "data_sum": 1,
                    "sum": 2
                },
                "FUN_08005360": {
                    "accumulate": 1,
                    "accumulate_and_check": 1,
                    "accumulate_and_check_threshold": 2,
                    "accumulate_value": 1,
                    "addition_and_overflow_check": 1,
                    "calculate_exceeded_limit": 1,
                    "calculate_exceeded_threshold": 4,
                    "calculate_overflow": 4,
                    "calculate_sum_and_check_threshold": 1,
                    "calculate_threshold_reached": 1,
                    "check_and_adjust_threshold": 1,
                    "check_exceeds_threshold": 1,
                    "check_if_exceeded_threshold": 1,
                    "check_if_threshold_exceeded": 2,
                    "check_overflow": 1,
                    "check_threshold_exceeded": 4,
                    "update_counter": 1,
                    "update_counter_and_check_threshold": 1,
                    "update_value_and_check_threshold": 1
                },
                "bVar1": {
                    "exceed_threshold": 1,
                    "exceeded_threshold": 3,
                    "exceeds_threshold": 2,
                    "has_exceeded_threshold": 1,
                    "is_counter_exceeded": 1,
                    "is_exceeded": 1,
                    "is_exceeded_threshold": 1,
                    "is_overflow": 7,
                    "is_threshold_exceeded": 11,
                    "is_threshold_reached": 1,
                    "threshold_exceeded": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080053a0"
            ],
            "code": "\nbool check_if_exceeded_threshold_08005360(void)\n\n{\n  bool is_threshold_exceeded;\n  \n  DAT_20000e2c = DAT_20000e28 + DAT_20000e2c;\n  is_threshold_exceeded = 420000 < DAT_20000e2c;\n  if (is_threshold_exceeded) {\n    DAT_20000e2c = DAT_20000e2c - 420000;\n  }\n  return is_threshold_exceeded;\n}\n\n",
            "current_name": "check_if_exceeded_threshold_08005360",
            "entrypoint": "0x08005360",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005360": "check_if_exceeded_threshold_08005360",
                "bVar1": "is_threshold_exceeded"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080053a0": {
            "additional_data": {
                "DAT_20000e14": {
                    "b": 1
                },
                "DAT_20000e18": {
                    "d": 1
                },
                "DAT_20000e1c": {
                    "e": 1
                },
                "DAT_20000e20": {
                    "c": 1
                },
                "DAT_20000e24": {
                    "counter": 1
                },
                "DAT_20000e2c": {
                    "constant": 1
                },
                "DAT_20000e30": {
                    "step_events_per_minute": 1
                },
                "DAT_20000e34": {
                    "a": 1
                },
                "DAT_20000e38": {
                    "current_block": 1
                },
                "DAT_20000e3c": {
                    "flag": 1
                },
                "DAT_20000e3e": {
                    "block": 1
                },
                "DAT_20000e40": {
                    "previous": 1
                },
                "DAT_20000ea9": {
                    "block_id": 1
                },
                "DAT_20000eaa": {
                    "idle_flag": 1
                },
                "DAT_20000eac": {
                    "count_a": 1
                },
                "DAT_20000eb0": {
                    "count_b": 1
                },
                "DAT_20000eb4": {
                    "count_c": 1
                },
                "DIRN_WR": {
                    "write_direction": 1,
                    "write_directory": 2
                },
                "D_20000e14": {
                    "previous_value": 1
                },
                "D_20000e18": {
                    "value4": 1
                },
                "D_20000e1c": {
                    "value5": 1
                },
                "D_20000e20": {
                    "value3": 1
                },
                "D_20000e24": {
                    "counter": 1
                },
                "D_20000e2c": {
                    "unknown_value": 1
                },
                "D_20000e30": {
                    "step_events_per_minute": 1
                },
                "D_20000e34": {
                    "value1": 1
                },
                "D_20000e38": {
                    "current_block": 1
                },
                "D_20000e3c": {
                    "flags": 1
                },
                "D_20000e3e": {
                    "current_direction": 1
                },
                "D_20000e40": {
                    "previous_direction": 1
                },
                "D_20000ea9": {
                    "condition": 1
                },
                "D_20000eaa": {
                    "flags2": 1
                },
                "D_20000eac": {
                    "counter1": 1
                },
                "D_20000eb0": {
                    "counter2": 1
                },
                "D_20000eb4": {
                    "counter3": 1
                },
                "FUN_08002f40": {
                    "another_function": 1,
                    "do_something2": 1,
                    "get_current_block": 2,
                    "plan_get_current_block": 13,
                    "set_current_block": 1,
                    "set_idle_state": 1
                },
                "FUN_08002f74": {
                    "do_something3": 1,
                    "get_current_block": 1,
                    "get_pointer": 1,
                    "get_step_events_per_minute": 1,
                    "get_trapezoid_cycle_counter": 1,
                    "iterate_trapezoid_cycle_counter": 14
                },
                "FUN_080052dc": {
                    "dirn_wr": 4,
                    "set_step_events_per_minute": 13,
                    "update_step_events": 1,
                    "update_step_events_per_minute": 1
                },
                "FUN_08005324": {
                    "dirn_wr": 3,
                    "iterate_trapezoid_cycle_counter": 3,
                    "plan_discard_current_block": 1,
                    "set_step_events_per_minute": 3,
                    "st_go_idle": 7,
                    "update_step_events2": 1,
                    "update_step_events_per_minute2": 1
                },
                "FUN_08005360": {
                    "check_block_availability": 2,
                    "check_block_condition": 1,
                    "check_condition": 3,
                    "check_current_block": 1,
                    "check_idle": 1,
                    "check_if_block_exists": 1,
                    "check_if_current_block_exists": 2,
                    "check_if_idle": 1,
                    "check_if_null_block": 1,
                    "is_block_empty": 1,
                    "is_block_null": 1,
                    "is_current_block_null": 2,
                    "is_idle": 1,
                    "should_go_idle": 1
                },
                "FUN_080053a0": {
                    "calculate_motion_data": 1,
                    "execute_block_operations": 1,
                    "execute_main_function": 1,
                    "initialize_control_system": 1,
                    "process_data": 2,
                    "update_block_data": 3,
                    "update_block_parameters": 1,
                    "update_data": 3,
                    "update_device_status": 1,
                    "update_state": 2,
                    "update_status": 3,
                    "update_step_counters": 2,
                    "update_step_counts": 1,
                    "update_step_events": 7,
                    "update_step_parameters": 1
                },
                "FUN_080057e4": {
                    "dirn_wr": 1,
                    "discard_current_block": 1,
                    "do_something1": 1,
                    "execute_idle": 1,
                    "initialize_step_cycle": 1,
                    "reset_block": 1,
                    "reset_cycle_counter": 1,
                    "reset_state": 1,
                    "reset_step_counts": 1,
                    "set_direction": 1,
                    "set_direction_write": 1,
                    "set_idle_state": 2,
                    "some_function": 1,
                    "update_direction": 1,
                    "update_idle_state": 1,
                    "write_directory": 1,
                    "write_to_directory": 1
                },
                "dirn_wr": {
                    "write_direction": 5,
                    "write_to_direction": 1,
                    "write_to_directory": 1
                },
                "iVar1": {
                    "counter": 4,
                    "iteration_result": 3,
                    "result": 5
                },
                "iterate_trapezoid_cycle_counter": {
                    "iterate_counter": 3,
                    "iterate_cycle_counter": 2,
                    "iterate_trapezoid_cycle_counter": 6
                },
                "param_1": {
                    "value": 1
                },
                "plan_discard_current_block": {
                    "discard_current_block": 7,
                    "discard_current_plan_block": 4
                },
                "plan_get_current_block": {
                    "get_current_block": 7,
                    "get_current_plan_block": 4
                },
                "set_step_events_per_minute": {
                    "set_events_per_minute": 2,
                    "set_step_events": 2,
                    "set_step_events_per_minute": 7
                },
                "st_go_idle": {
                    "go_idle": 9,
                    "set_idle_state": 2,
                    "set_to_idle": 1
                },
                "update_status": {
                    "update_status": 1
                }
            },
            "called": [
                "FUN_080057e4",
                "FUN_08002f40",
                "FUN_08005360",
                "FUN_08002f74",
                "FUN_080052dc",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid update_step_events_080053a0(void)\n\n{\n  int result;\n  \n  write_direction(DAT_20000e3e);\n  DAT_20000e40 = DAT_20000e3c;\n  if (DAT_20000e38 == (ushort *)0x0) {\n    DAT_20000e38 = (ushort *)get_current_block();\n    if (DAT_20000e38 == (ushort *)0x0) {\n      go_idle();\n      DAT_20000eaa = DAT_20000eaa | 4;\n    }\n    else {\n      if (DAT_20000ea9 == '\\x03') {\n        DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x14);\n        set_step_events_per_minute(DAT_20000e30);\n        DAT_20000e2c = 210000;\n      }\n      DAT_20000e34 = (*(int *)(DAT_20000e38 + 0x18) >> 1) + *(int *)(DAT_20000e38 + 0x18);\n      DAT_20000e14 = -(*(int *)(DAT_20000e38 + 8) >> 1);\n      DAT_20000e20 = *(int *)(DAT_20000e38 + 8);\n      DAT_20000e24 = 0;\n      DAT_20000e18 = DAT_20000e14;\n      DAT_20000e1c = DAT_20000e14;\n    }\n  }\n  if (DAT_20000e38 != (ushort *)0x0) {\n    DAT_20000e3e = *DAT_20000e38;\n    DAT_20000e3c = 0;\n    DAT_20000e14 = *(int *)(DAT_20000e38 + 2) + DAT_20000e14;\n    if (0 < DAT_20000e14) {\n      DAT_20000e3c = 0x10;\n      DAT_20000e14 = DAT_20000e14 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x20) == 0) {\n        DAT_20000eac = DAT_20000eac + 1;\n      }\n      else {\n        DAT_20000eac = DAT_20000eac + -1;\n      }\n    }\n    DAT_20000e18 = *(int *)(DAT_20000e38 + 4) + DAT_20000e18;\n    if (0 < DAT_20000e18) {\n      DAT_20000e3c = DAT_20000e3c | 0x440;\n      DAT_20000e18 = DAT_20000e18 - DAT_20000e20;\n      if ((DAT_20000e3e & 0x80) == 0) {\n        DAT_20000eb0 = DAT_20000eb0 + 1;\n      }\n      else {\n        DAT_20000eb0 = DAT_20000eb0 + -1;\n      }\n    }\n    DAT_20000e1c = *(int *)(DAT_20000e38 + 6) + DAT_20000e1c;\n    if (0 < DAT_20000e1c) {\n      DAT_20000e3c = DAT_20000e3c | 0x100;\n      DAT_20000e1c = DAT_20000e1c - DAT_20000e20;\n      if ((DAT_20000e3e & 0x200) == 0) {\n        DAT_20000eb4 = DAT_20000eb4 + 1;\n      }\n      else {\n        DAT_20000eb4 = DAT_20000eb4 + -1;\n      }\n    }\n    DAT_20000e24 = DAT_20000e24 + 1;\n    if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 8)) {\n      if (DAT_20000ea9 == '\\x04') {\n        result = iterate_trapezoid_cycle_counter();\n        if (result != 0) {\n          if (*(uint *)(DAT_20000e38 + 0x18) < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n            set_step_events_per_minute(DAT_20000e30);\n          }\n          else {\n            go_idle();\n            DAT_20000eaa = DAT_20000eaa | 4;\n          }\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1a)) {\n        result = iterate_trapezoid_cycle_counter();\n        if (result != 0) {\n          DAT_20000e30 = DAT_20000e30 + *(int *)(DAT_20000e38 + 0x18);\n          if (*(uint *)(DAT_20000e38 + 0x1e) <= DAT_20000e30) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          }\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 < *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 != *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x1e);\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n      else if (DAT_20000e24 == *(uint *)(DAT_20000e38 + 0x1c)) {\n        if (DAT_20000e30 == *(uint *)(DAT_20000e38 + 0x1e)) {\n          DAT_20000e2c = 210000;\n        }\n        else {\n          DAT_20000e2c = 420000 - DAT_20000e2c;\n        }\n      }\n      else {\n        result = iterate_trapezoid_cycle_counter();\n        if (result != 0) {\n          if (DAT_20000e34 < DAT_20000e30) {\n            DAT_20000e30 = DAT_20000e30 - *(int *)(DAT_20000e38 + 0x18);\n          }\n          else {\n            DAT_20000e30 = DAT_20000e30 >> 1;\n          }\n          if (DAT_20000e30 < *(uint *)(DAT_20000e38 + 0x16)) {\n            DAT_20000e30 = *(uint *)(DAT_20000e38 + 0x16);\n          }\n          set_step_events_per_minute(DAT_20000e30);\n        }\n      }\n    }\n    else {\n      DAT_20000e3c = 0;\n      DAT_20000e38 = (ushort *)0x0;\n      discard_current_block();\n    }\n  }\n  DAT_20000e3c = DAT_20000e3c ^ DAT_20000ed4;\n  DAT_20000e3e = DAT_20000e3e ^ DAT_20000ed6;\n  return;\n}\n\n",
            "current_name": "update_step_events_080053a0",
            "entrypoint": "0x080053a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080053a0": "update_step_events_080053a0",
                "dirn_wr": "write_direction",
                "iVar1": "result",
                "plan_discard_current_block": "discard_current_block",
                "plan_get_current_block": "get_current_block",
                "st_go_idle": "go_idle"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005760": {
            "additional_data": {
                "DAT_20000ed4": {
                    "step_data": 1
                },
                "FUN_080052ac": {
                    "apply_transformation": 1,
                    "execute_fun_080052ac": 1,
                    "execute_step": 1,
                    "perform_action": 8,
                    "perform_extra_processing": 1,
                    "perform_operation": 2,
                    "perform_subtask": 1,
                    "process_data": 5,
                    "process_input": 1,
                    "process_input_data": 1,
                    "process_parameter": 5,
                    "set_device_state": 1
                },
                "FUN_08005760": {
                    "execute_data_processing": 3,
                    "execute_data_processing_step": 1,
                    "execute_initial_setup": 1,
                    "execute_initial_step": 1,
                    "execute_initialization": 1,
                    "execute_step": 1,
                    "execute_step_wr": 5,
                    "execute_step_write": 2,
                    "execute_step_writing": 1,
                    "initialize": 1,
                    "initialize_device": 1,
                    "initialize_step": 8,
                    "initialize_step_writer": 1,
                    "initialize_system": 1,
                    "perform_initialization": 1,
                    "perform_wrapping": 1,
                    "perform_wrapping_operation": 1
                },
                "param_1": {
                    "action_param": 1,
                    "action_parameter": 2,
                    "data": 6,
                    "device_state": 1,
                    "input": 1,
                    "input_data": 1,
                    "input_param": 3,
                    "input_parameter": 2,
                    "input_value": 4,
                    "parameter_value": 1,
                    "step_size": 1
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid initialize_step_writer_08005760(void)\n\n{\n  step_wr(DAT_20000ed4);\n  return;\n}\n\n",
            "current_name": "initialize_step_writer_08005760",
            "entrypoint": "0x08005760",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005760": "initialize_step_writer_08005760"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005778": {
            "additional_data": {
                "FUNK_08005778": {
                    "initialize_step_write": 1
                },
                "FUN_080052ac": {
                    "do_something": 1,
                    "execute_function": 1,
                    "execute_step": 2,
                    "perform_action": 2,
                    "perform_data_processing": 1,
                    "perform_operation": 1,
                    "perform_step": 1,
                    "process_data": 7,
                    "process_input": 4,
                    "process_input_data": 1,
                    "process_parameter": 3,
                    "step_processing": 1,
                    "write_step": 2
                },
                "FUN_08005778": {
                    "execute_data_processing": 2,
                    "execute_data_step": 1,
                    "execute_data_transfer": 1,
                    "execute_step": 1,
                    "initialize": 1,
                    "initialize_data": 1,
                    "initialize_data_structure": 1,
                    "initialize_device": 1,
                    "initialize_step": 11,
                    "initialize_step_function": 1,
                    "initialize_step_wr": 1,
                    "initialize_step_wrapper": 2,
                    "initialize_step_writer": 1,
                    "perform_initialization": 4,
                    "write_data_to_step": 1
                },
                "param_1": {
                    "data": 7,
                    "input": 3,
                    "input_data": 2,
                    "input_param": 6,
                    "input_parameter": 3,
                    "input_value": 1,
                    "parameter": 1,
                    "step_parameter": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08007c7c"
            ],
            "code": "\nvoid initialize_step_wrapper_08005778(void)\n\n{\n  step_wr(DAT_20000e40);\n  return;\n}\n\n",
            "current_name": "initialize_step_wrapper_08005778",
            "entrypoint": "0x08005778",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005778": "initialize_step_wrapper_08005778"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005790": {
            "additional_data": {
                "DAT_20000e3c": {
                    "initial_step_delay": 1,
                    "output_value_1": 2,
                    "step_delay": 1,
                    "stored_value_1": 1
                },
                "DAT_20000e3e": {
                    "output_value_2": 2,
                    "step_pulse_time": 1,
                    "step_time": 1,
                    "stored_value_3": 1
                },
                "DAT_20000ea9": {
                    "data_value": 2,
                    "input_flag": 1,
                    "input_value": 1,
                    "step_mode": 1
                },
                "DAT_20000ec9": {
                    "delay_param": 1,
                    "input_value_3": 2,
                    "step_pulse_delay": 2
                },
                "DAT_20000ed4": {
                    "initial_step_delay_value": 1,
                    "input_value_1": 2,
                    "step_delay_value": 1,
                    "stored_value_2": 1
                },
                "DAT_20000ed6": {
                    "input_value_2": 2,
                    "step_pulse_time_value": 1,
                    "step_time_value": 1,
                    "stored_value_4": 1
                },
                "FUNC_08005318": {
                    "set_step_pulse_delay": 24,
                    "stepper_motor_enable": 2
                },
                "FUN_08005790": {
                    "enable_stepper_motor": 5,
                    "initialize_motor": 1,
                    "initialize_stepper": 1,
                    "initialize_stepper_motor": 24
                },
                "FUN_08007b70": {
                    "disable_interrupts": 1,
                    "disable_stepper_motor": 16,
                    "enable_stepper_motor": 2,
                    "set_step_pulse_delay": 1,
                    "step_isr_enable": 2,
                    "stepper_motor_enable": 4
                },
                "FUN_08007c40": {
                    "set_step_pulse_delay": 1,
                    "set_step_pulse_time": 24,
                    "set_step_pulse_time_delay": 1
                },
                "FUN_08007c5e": {
                    "enable_step_isr": 18,
                    "initialize_step_data": 1,
                    "set_step_pulse_time": 1,
                    "step_isr_enable": 5
                },
                "param_1": {
                    "delay": 1
                },
                "param_2": {
                    "time": 1
                },
                "set_step_pulse_delay": {
                    "set_delay": 1,
                    "set_initial_pulse_delay": 1,
                    "set_initial_step_delay": 1,
                    "set_pulse_delay": 2
                },
                "set_step_pulse_time": {
                    "set_initial_pulse_time": 1,
                    "set_pulse_time": 2,
                    "set_step_pulse_time": 1,
                    "set_time": 1
                },
                "step_isr_enable": {
                    "enable_interrupt": 1,
                    "enable_step_interrupt": 1,
                    "enable_step_isr": 2,
                    "enable_step_isr_call": 1
                },
                "stepper_motor_enable": {
                    "enable_stepper_motor": 2
                }
            },
            "called": [
                "FUN_08007b70",
                "FUN_08005318",
                "FUN_08007c40",
                "FUN_08007c5e"
            ],
            "calling": [
                "FUN_08001d4c",
                "FUN_0800583c",
                "FUN_0800585c"
            ],
            "code": "\nvoid initialize_stepper_motor_08005790(void)\n\n{\n  enable_stepper_motor();\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000e3c = DAT_20000ed4;\n    DAT_20000e3e = DAT_20000ed6;\n    set_pulse_delay(0x69);\n    set_pulse_time((DAT_20000ec9 + 5) * 0x15);\n    enable_step_isr();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_stepper_motor_08005790",
            "entrypoint": "0x08005790",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005790": "initialize_stepper_motor_08005790",
                "set_step_pulse_delay": "set_pulse_delay",
                "set_step_pulse_time": "set_pulse_time",
                "step_isr_enable": "enable_step_isr",
                "stepper_motor_enable": "enable_stepper_motor"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080057e4": {
            "additional_data": {
                "DAT_20000eaa": {
                    "another_condition": 1,
                    "another_condition_variable": 1,
                    "check_bit_flags": 1,
                    "data_variable_2": 1,
                    "stepper_control_variable": 1,
                    "variable2": 1
                },
                "DAT_20000ef8": {
                    "check_condition": 1,
                    "data_variable_1": 1,
                    "some_condition": 1,
                    "some_condition_variable": 2,
                    "variable1": 1
                },
                "FUNC_0800530c": {
                    "check_stepper_status": 1,
                    "disable_interrupts": 1,
                    "disable_step_isr": 7,
                    "disable_stepper_motor": 2,
                    "enable_step_isr": 1,
                    "perform_another_task": 1,
                    "perform_step_isr_disable": 1,
                    "perform_stepper_motor_disable": 5,
                    "step_isr_disable": 6,
                    "step_isr_enable": 1,
                    "stepper_motor_disable": 2
                },
                "FUN_080057e4": {
                    "disable_step_isr_and_motor_if_needed": 1,
                    "disable_stepper_and_isr": 1,
                    "disable_stepper_if_necessary": 1,
                    "disable_stepper_if_not_needed": 2,
                    "disable_stepper_motor": 10,
                    "disable_stepper_motor_if_necessary": 1,
                    "disable_stepper_motor_if_needed": 12,
                    "disable_stepper_motor_if_not_needed": 1,
                    "disable_stepper_motor_if_stopped": 1,
                    "disable_stepper_when_not_needed": 1
                },
                "FUN_08007bc2": {
                    "disable_motor": 1,
                    "disable_step_isr": 1,
                    "do_something": 1,
                    "execute_step": 1,
                    "perform_action": 1,
                    "perform_additional_check": 2,
                    "perform_additional_cleanup": 1,
                    "perform_additional_step_operations": 1,
                    "perform_additional_steps": 1,
                    "perform_additional_task": 4,
                    "perform_func_08007bc2": 1,
                    "perform_initialization": 1,
                    "perform_isr_disable": 2,
                    "perform_post_processing": 1,
                    "perform_some_operation": 1,
                    "perform_step_isr_disable": 3,
                    "perform_subtask": 1,
                    "reset_flag": 1,
                    "step_isr_disable": 2
                },
                "VAR_20000eaa": {
                    "control_variable": 1
                },
                "VAR_20000ef8": {
                    "data_variable": 1
                }
            },
            "called": [
                "FUN_08007bc2",
                "FUN_0800530c"
            ],
            "calling": [
                "FUN_080025e8",
                "FUN_08001d4c",
                "FUN_0800583c",
                "FUN_080053a0"
            ],
            "code": "\nvoid disable_stepper_motor_if_not_needed_080057e4(void)\n\n{\n  step_isr_disable();\n  if ((DAT_20000ef8 != -1) || ((DAT_20000eaa & 0x20) != 0)) {\n    stepper_motor_disable();\n  }\n  return;\n}\n\n",
            "current_name": "disable_stepper_motor_if_not_needed_080057e4",
            "entrypoint": "0x080057e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080057e4": "disable_stepper_motor_if_not_needed_080057e4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005814": {
            "additional_data": {
                "DAT_20000e14": {
                    "data_buffer": 1,
                    "event_data": 1,
                    "step_event_data": 2
                },
                "DAT_20000e38": {
                    "counter": 1,
                    "event_flag": 1,
                    "event_status": 1,
                    "global_variable": 1
                },
                "FUN_08005324": {
                    "clear_events": 1,
                    "configure_event": 1,
                    "display_step_event": 1,
                    "execute_event": 1,
                    "execute_function": 1,
                    "execute_step_event": 1,
                    "handle_step_event": 1,
                    "initialize_event": 1,
                    "memset_data": 1,
                    "modify_data": 1,
                    "notify_event": 1,
                    "process_event": 2,
                    "reverse_event": 1,
                    "set_event_frequency": 2,
                    "set_events_per_minute": 7,
                    "set_step_events": 2,
                    "set_step_events_per_minute": 4,
                    "update_step_events": 1,
                    "wait_for_event": 1
                },
                "FUN_08005814": {
                    "initialize": 3,
                    "initialize_data": 4,
                    "initialize_event_system": 1,
                    "initialize_function": 1,
                    "initialize_game": 4,
                    "initialize_game_data": 7,
                    "initialize_step_event": 2,
                    "initialize_step_events": 9
                },
                "FUN_0800b430": {
                    "configure_data": 1,
                    "configure_event": 1,
                    "copy_data": 1,
                    "handle_data": 1,
                    "handle_step_event": 1,
                    "initialize_array": 1,
                    "initialize_data": 1,
                    "initialize_event_data": 1,
                    "initialize_events": 1,
                    "perform_operation": 1,
                    "process_data": 2,
                    "process_event_data": 1,
                    "process_events": 1,
                    "process_step_event": 2,
                    "refresh_game_data": 1,
                    "set_array_elements": 1,
                    "set_buffer_data": 1,
                    "set_data": 1,
                    "set_event_data": 1,
                    "set_events": 1,
                    "set_step_event_param": 1,
                    "set_step_event_params": 1,
                    "set_step_events": 3,
                    "update_array": 1,
                    "update_event_array": 1,
                    "update_game_data": 1,
                    "update_step_events": 1
                },
                "memset": {
                    "": 1
                },
                "param_1": {
                    "array": 1,
                    "array_pointer": 1,
                    "array_ptr": 1,
                    "data": 2,
                    "data_array": 2,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "event_array": 2,
                    "events_array": 1,
                    "events_per_minute": 1,
                    "pointer": 1,
                    "ptr_data": 1,
                    "ptr_destination": 1,
                    "step": 1,
                    "step_event": 1,
                    "step_event_array": 1,
                    "step_event_param": 1,
                    "step_event_params": 1,
                    "step_event_pointer": 1
                },
                "param_2": {
                    "byte_flag": 1,
                    "flag": 12,
                    "param": 1,
                    "param2": 1,
                    "step_value": 1,
                    "unknown_param": 3,
                    "unused": 1,
                    "value": 3
                },
                "param_3": {
                    "count": 3,
                    "event_count": 2,
                    "events_count": 1,
                    "frequency": 1,
                    "size": 3,
                    "step_event_count": 1,
                    "step_events_per_minute": 1,
                    "value": 11
                },
                "set_step_events_per_minute": {
                    "set_event_rate": 2,
                    "set_events_frequency": 1,
                    "set_events_per_minute": 3,
                    "set_game_speed": 1,
                    "set_step_event_rate": 1,
                    "set_step_events_per_minute": 3
                },
                "void": {
                    "": 1
                }
            },
            "called": [
                "FUN_0800b430",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid initialize_game_data_08005814(void)\n\n{\n  memset(&DAT_20000e14,0,0x24);\n  set_step_events_per_minute(800);\n  DAT_20000e38 = 0;\n  return;\n}\n\n",
            "current_name": "initialize_game_data_08005814",
            "entrypoint": "0x08005814",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005814": "initialize_game_data_08005814"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800583c": {
            "additional_data": {
                "DAT_20000ed4": {
                    "data": 1
                },
                "FUN_080052ac": {
                    "adjust_value": 1,
                    "configure_step": 1,
                    "configure_subsystem": 1,
                    "do_something": 1,
                    "execute_action": 1,
                    "execute_command": 1,
                    "execute_idle": 1,
                    "execute_operation": 2,
                    "execute_step": 1,
                    "execute_task": 1,
                    "execute_with_param": 1,
                    "perform_action": 1,
                    "perform_data_processing": 1,
                    "perform_fun_080052ac": 1,
                    "perform_idle": 1,
                    "perform_idle_transition": 1,
                    "perform_idling": 1,
                    "perform_operation": 1,
                    "perform_st_go_idle": 2,
                    "perform_subtask": 1,
                    "process_data": 3,
                    "process_parameter": 1,
                    "set_parameter": 2,
                    "set_power_state": 1,
                    "st_go_idle": 1,
                    "update_configuration": 1
                },
                "FUN_08005790": {
                    "go_idle": 1,
                    "initialize_subsystem2": 1,
                    "perform_st_wake_up": 3,
                    "perform_wake_up": 1,
                    "st_wake_up": 2,
                    "start_wake_up": 1,
                    "wake_system": 1,
                    "wake_up": 1,
                    "wake_up_devices": 1,
                    "wake_up_state": 1,
                    "wake_up_step": 1,
                    "wake_up_system": 16
                },
                "FUN_080057e4": {
                    "configure_step": 1,
                    "do_step_wr": 1,
                    "execute_step_write": 2,
                    "initialize_step": 6,
                    "initialize_step_wr": 1,
                    "initialize_subsystem1": 1,
                    "perform_data_write": 1,
                    "perform_initialization": 4,
                    "perform_startup_tasks": 1,
                    "perform_step": 1,
                    "perform_step_wr": 3,
                    "perform_write": 1,
                    "perform_write_step": 2,
                    "step_forward": 1,
                    "step_wr": 2,
                    "step_write": 1,
                    "wake_up_device": 1
                },
                "FUN_0800583c": {
                    "execute_application": 1,
                    "execute_main_task": 1,
                    "execute_startup_routine": 1,
                    "execute_system_tasks": 1,
                    "execute_task": 2,
                    "handle_function": 1,
                    "initialize_device": 1,
                    "initialize_system": 5,
                    "initiate_system": 1,
                    "perform_core_tasks": 1,
                    "perform_initialization": 5,
                    "perform_system_startup": 1,
                    "perform_system_tasks": 1,
                    "perform_task": 6,
                    "perform_workflow": 1,
                    "process_data": 1
                },
                "fun_08005790": {
                    "wake_up": 1
                },
                "fun_080057e4": {
                    "step_wr": 1
                },
                "param_1": {
                    "data": 2,
                    "input_value": 1,
                    "operation_number": 1,
                    "param": 1,
                    "state": 1,
                    "step_number": 1,
                    "task_id": 1
                },
                "st_go_idle": {
                    "put_system_idle": 1
                },
                "st_wake_up": {
                    "wake_up_system": 1
                },
                "step_wr": {
                    "setup_environment": 1
                }
            },
            "called": [
                "FUN_080057e4",
                "FUN_08005790",
                "FUN_080052ac"
            ],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid perform_task_0800583c(void)\n\n{\n  setup_environment(DAT_20000ed4);\n  wake_up_system();\n  put_system_idle();\n  return;\n}\n\n",
            "current_name": "perform_task_0800583c",
            "entrypoint": "0x0800583c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800583c": "perform_task_0800583c",
                "st_go_idle": "put_system_idle",
                "st_wake_up": "wake_up_system",
                "step_wr": "setup_environment"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800585c": {
            "additional_data": {
                "DAT_20000ea9": {
                    "condition_flag": 1,
                    "current_status": 1,
                    "status": 6,
                    "status_var": 1
                },
                "FUN_08005790": {
                    "check_status": 1,
                    "clear_status_flag": 1,
                    "do_something": 1,
                    "execute_wakeup": 1,
                    "initialize_system": 1,
                    "perform_actions": 1,
                    "perform_additional_tasks": 2,
                    "perform_cleaning": 1,
                    "perform_cleanup": 3,
                    "perform_initialization": 1,
                    "perform_operations": 1,
                    "perform_specific_task": 2,
                    "st_wake_up": 1
                },
                "FUN_0800585c": {
                    "check_and_wake": 2,
                    "check_and_wake_up": 4,
                    "check_state_and_wake_up": 1,
                    "manage_wakeup": 1,
                    "update_and_wake": 1,
                    "update_state_and_wake_up": 1,
                    "update_status_and_wake": 2,
                    "update_status_and_wake_up": 8,
                    "update_status_and_wakeup": 1,
                    "wake_up_function": 1,
                    "wake_up_if_condition_is_met": 1,
                    "wake_up_if_condition_met": 1,
                    "wake_up_if_condition_true": 1,
                    "wake_up_if_needed": 1,
                    "wake_up_if_pending": 2,
                    "wake_up_if_required": 1,
                    "wake_up_if_status_2": 2
                },
                "st_wake_up": {
                    "notify_system_wake_up": 1,
                    "wake_up": 8
                }
            },
            "called": [
                "FUN_08005790"
            ],
            "calling": [
                "FUN_08001e98",
                "FUN_08003a74",
                "FUN_080024c4"
            ],
            "code": "\nvoid update_status_and_wake_up_0800585c(void)\n\n{\n  if (DAT_20000ea9 == '\\x02') {\n    DAT_20000ea9 = '\\x03';\n    wake_up();\n  }\n  return;\n}\n\n",
            "current_name": "update_status_and_wake_up_0800585c",
            "entrypoint": "0x0800585c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800585c": "update_status_and_wake_up_0800585c",
                "st_wake_up": "wake_up"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800587c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20000ea9": {
                    "current_state": 2,
                    "current_status": 10,
                    "current_value": 2,
                    "data_flag": 2,
                    "data_status": 2,
                    "flag": 2,
                    "previous_status": 1,
                    "status": 5,
                    "status_flag": 2
                },
                "DAT_20000eb8": {
                    "counter": 23,
                    "data_counter": 2,
                    "error_count": 2,
                    "reset_counter": 1
                },
                "FUN_0800587c": {
                    "initialize_data_if_needed": 1,
                    "update_data": 3,
                    "update_data_if_condition_met": 1,
                    "update_data_state": 2,
                    "update_data_status": 2,
                    "update_flag": 1,
                    "update_flags": 1,
                    "update_state": 3,
                    "update_state_if_condition_met": 1,
                    "update_status": 16
                },
                "ea9": {
                    "current_status": 2
                },
                "eb8": {
                    "count": 1,
                    "counter": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid update_data_status_0800587c(void)\n\n{\n  if (DAT_20000ea9 == '\\x03') {\n    DAT_20000ea9 = '\\x04';\n    DAT_20000eb8 = 0;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_status_0800587c",
            "entrypoint": "0x0800587c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800587c": "update_data_status_0800587c"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080058a0": {
            "additional_data": {
                "DAT_20000e24": {
                    "cycle_offset": 1,
                    "cycle_value": 1,
                    "data_3": 2,
                    "initial_offset": 3,
                    "initial_step_events_value": 1,
                    "initial_value": 5,
                    "offset": 2
                },
                "DAT_20000e2c": {
                    "data_5": 2,
                    "event_limit": 1,
                    "event_value": 1,
                    "events_per_minute": 2,
                    "max_value": 1,
                    "step_event_threshold": 1,
                    "step_events": 1,
                    "time": 1,
                    "total_duration": 1
                },
                "DAT_20000e30": {
                    "count": 1,
                    "counter": 1,
                    "data_4": 2,
                    "event_count": 2,
                    "initialized_value": 1,
                    "step_events": 2,
                    "step_events_count": 1,
                    "unused_variable": 1
                },
                "DAT_20000e38": {
                    "condition_variable": 1,
                    "cycle_data": 2,
                    "cycle_ptr": 2,
                    "data": 1,
                    "data_1": 2,
                    "data_pointer": 2,
                    "data_ptr": 5,
                    "pointer": 1,
                    "some_variable": 1
                },
                "DAT_20000ea9": {
                    "cycle_state": 3,
                    "cycle_status": 1,
                    "data_2": 2,
                    "initialized": 1,
                    "initialized_flag": 1,
                    "status": 5,
                    "status_flag": 1,
                    "status_variable": 1,
                    "step": 1,
                    "step_events_mode": 1
                },
                "FUN_08003618": {
                    "initialize_step": 1,
                    "initialize_step_events": 3,
                    "plan_cycle_reinitialize": 4,
                    "reinitialize_cycle": 5,
                    "reinitialize_cycle_plan": 5,
                    "reinitialize_cycle_step_events": 1,
                    "reinitialize_plan_cycle": 10,
                    "reinitialize_step_events": 1
                },
                "FUN_08005324": {
                    "plan_cycle_reinitialize": 1,
                    "reinitialize_plan_cycle": 1,
                    "set_event_frequency": 1,
                    "set_events_per_minute": 1,
                    "set_step_events_per_minute": 24
                },
                "FUN_080058a0": {
                    "initialize_cycle": 9,
                    "initialize_cycle_plan": 3,
                    "initialize_plan_cycle": 19
                },
                "PTR_DAT_20000e38": {
                    "ptr_data": 1
                },
                "param_1": {
                    "cycle_offset": 1,
                    "event_per_minute": 1,
                    "input_value": 1,
                    "param": 4,
                    "some_parameter": 2,
                    "step_events": 2,
                    "undefined_param": 1,
                    "undefined_parameter": 1,
                    "unknown_param": 1,
                    "unused": 1,
                    "unused_param": 2,
                    "unused_parameter": 1,
                    "value": 2
                },
                "param_2": {
                    "some_parameter_2": 1
                },
                "set_step_events_per_minute": {
                    "set_events_per_minute": 1,
                    "set_step_frequency": 1
                }
            },
            "called": [
                "FUN_08003618",
                "FUN_08005324"
            ],
            "calling": [
                "FUN_08003a74"
            ],
            "code": "\nvoid initialize_cycle_plan_080058a0(void)\n\n{\n  if (DAT_20000e38 == 0) {\n    DAT_20000ea9 = 0;\n  }\n  else {\n    plan_cycle_reinitialize(*(int *)(DAT_20000e38 + 0x10) - DAT_20000e24);\n    DAT_20000e30 = 0;\n    set_events_per_minute(0);\n    DAT_20000e2c = 210000;\n    DAT_20000e24 = 0;\n    DAT_20000ea9 = 2;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_cycle_plan_080058a0",
            "entrypoint": "0x080058a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080058a0": "initialize_cycle_plan_080058a0",
                "set_step_events_per_minute": "set_events_per_minute"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005900": {
            "additional_data": {
                "DAT_20000eaa": {
                    "data_flags": 2,
                    "flags": 3,
                    "status_flag": 1,
                    "status_flags": 2
                },
                "FUN_080025e8": {
                    "mc_reset": 1,
                    "some_subfunction": 1
                },
                "FUN_08005900": {
                    "check_and_update_flags": 3,
                    "check_byte": 1,
                    "check_character": 2,
                    "check_command": 1,
                    "check_special_byte": 1,
                    "handle_byte": 2,
                    "process_byte": 17,
                    "process_input": 1,
                    "process_input_byte": 2,
                    "process_param": 1
                },
                "mc_reset": {
                    "reset": 1,
                    "reset_machine": 1,
                    "reset_mc": 2,
                    "reset_microcontroller": 2
                },
                "param_1": {
                    "byte_value": 21,
                    "character": 2,
                    "command": 1,
                    "input_byte": 7
                }
            },
            "called": [
                "FUN_080025e8"
            ],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\nundefined4 process_input_byte_08005900(byte byte_value)\n\n{\n  if (byte_value == 0x7e) {\n    DAT_20000eaa = DAT_20000eaa | 2;\n    return 1;\n  }\n  if (byte_value < 0x7f) {\n    if (byte_value == 0x3f) {\n      DAT_20000eaa = DAT_20000eaa | 1;\n      return 1;\n    }\n    if (byte_value < 0x40) {\n      if (byte_value == 0x18) {\n        reset_mc();\n        return 1;\n      }\n      if (byte_value == 0x21) {\n        DAT_20000eaa = DAT_20000eaa | 8;\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "process_input_byte_08005900",
            "entrypoint": "0x08005900",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005900": "process_input_byte_08005900",
                "mc_reset": "reset_mc",
                "param_1": "byte_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800597c": {
            "additional_data": {
                "": {
                    "": 1
                },
                "0x3f": {
                    "interrupt_code": 1
                },
                "FUN_0800597c": {
                    "call_software_interrupt": 1,
                    "call_system_interrupt": 1,
                    "execute_software_interrupt": 5,
                    "execute_system_call": 3,
                    "execute_system_interrupt": 4,
                    "initialize_system": 1,
                    "interrupt_0x3_f": 1,
                    "interrupt_software": 1,
                    "invoke_interrupt": 1,
                    "invoke_system_call": 2,
                    "invoke_system_interrupt": 2,
                    "perform_software_interrupt": 2,
                    "perform_system_call": 1,
                    "send_software_interrupt": 3,
                    "trigger_software_interrupt": 3
                },
                "software_interrupt": {
                    "call_interrupt": 2,
                    "execute_interrupt": 5,
                    "execute_software_interrupt": 1,
                    "interrupt": 1,
                    "interrupt_opcode": 1,
                    "invoke_interrupt": 3,
                    "invoke_software_interrupt": 1,
                    "invoke_system_call": 1,
                    "invoke_system_interrupt": 1,
                    "perform_interrupt": 3,
                    "perform_software_interrupt": 1,
                    "system_call": 1,
                    "trigger_interrupt": 3,
                    "trigger_sys_call": 1,
                    "trigger_system_interrupt": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005984"
            ],
            "code": "\nvoid execute_software_interrupt_0800597c(void)\n\n{\n  execute_interrupt(0x3f);\n  return;\n}\n\n",
            "current_name": "execute_software_interrupt_0800597c",
            "entrypoint": "0x0800597c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800597c": "execute_software_interrupt_0800597c",
                "software_interrupt": "execute_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005984": {
            "additional_data": {
                "DAT_20000e44": {
                    "condition_variable": 2
                },
                "FUN_0800597c": {
                    "initialize": 1
                },
                "FUN_08005984": {
                    "afl_call_wrapper": 1,
                    "call_afl_function": 2,
                    "call_afl_if_not_zero": 1,
                    "call_afl_or_zero": 1,
                    "check_and_call_afl": 1,
                    "evaluate_afl_condition": 1,
                    "execute_afl_call": 13,
                    "execute_afl_function": 1,
                    "execute_function": 1,
                    "execute_operation": 2,
                    "extract_data": 1,
                    "extract_function_data": 1,
                    "perform_afl_call": 1,
                    "reverse_afl_call": 1
                },
                "aflCall": {
                    "perform_afl_call": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 10,
                    "input_data": 1,
                    "input_param": 5,
                    "input_parameter": 7,
                    "input_value": 6,
                    "value": 1
                },
                "uVar1": {
                    "output_param": 1,
                    "result": 19,
                    "return_value": 11
                }
            },
            "called": [
                "FUN_0800597c"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nundefined4 execute_afl_call_08005984(undefined4 input)\n\n{\n  undefined4 result;\n  \n  if (DAT_20000e44 == 0) {\n    result = perform_afl_call(1,input,0);\n  }\n  else {\n    result = 0;\n  }\n  return result;\n}\n\n",
            "current_name": "execute_afl_call_08005984",
            "entrypoint": "0x08005984",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005984": "execute_afl_call_08005984",
                "aflCall": "perform_afl_call",
                "param_1": "input",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059b4": {
            "additional_data": {
                "FUNC_08005a50": {
                    "configure_interrupt": 1,
                    "configure_sys_tick": 1,
                    "configure_systick": 1,
                    "do_something": 1,
                    "enable_clock": 1,
                    "function_b": 1,
                    "initialize_hardware": 1,
                    "initialize_interrupt": 1,
                    "initialize_nvic": 1,
                    "initialize_sub_function_two": 1,
                    "perform_action": 1,
                    "perform_additional_actions": 1,
                    "perform_config": 1,
                    "perform_initialization": 1,
                    "perform_operation": 1,
                    "perform_tasks": 2,
                    "systick_configuration": 1
                },
                "FUN_080059b4": {
                    "configure_system": 1,
                    "initialize_system": 30
                },
                "FUN_08006ce0": {
                    "configure_peripheral": 1,
                    "configure_system": 3,
                    "configure_timer": 1,
                    "do_something": 1,
                    "function_a": 1,
                    "initialize_component": 1,
                    "initialize_gpio": 1,
                    "initialize_peripheral": 1,
                    "initialize_sub_function_one": 1,
                    "initialize_subsystem": 2,
                    "initialize_system": 1,
                    "initialize_system_helper": 1,
                    "perform_operation": 1,
                    "perform_setup": 1,
                    "process_data": 1,
                    "reverse_something": 1
                },
                "FUN_08006d72": {
                    "configure_interrupts": 1,
                    "configure_miscellaneous": 1,
                    "configure_nvic": 2,
                    "configure_peripheral": 1,
                    "configure_subsystem": 1,
                    "function_c": 1,
                    "handle_error": 1,
                    "handle_event": 1,
                    "improve_something": 1,
                    "initialize_nvic": 1,
                    "initialize_periph": 1,
                    "initialize_sub_function_three": 1,
                    "perform_initialization": 1,
                    "process_data": 1,
                    "reverse_operation": 2,
                    "set_priority_grouping": 2
                },
                "HAL_MspInit": {
                    "initialize_msp": 11,
                    "initialize_periph": 2,
                    "initialize_peripheral": 3,
                    "initialize_peripherals": 2
                },
                "HAL_NVIC_SetPriorityGrouping": {
                    "configure_interrupts": 1,
                    "configure_priority_grouping": 1,
                    "set_priority_grouping": 16
                },
                "HAL_SYSTICK_Config": {
                    "configure_sys_tick": 12,
                    "configure_sys_tick_timer": 1,
                    "configure_system_tick": 4,
                    "configure_systick": 1
                },
                "_DAT_40023c00": {
                    "configuration_value": 1,
                    "data_register": 1,
                    "system_config": 2,
                    "system_config_flag": 1,
                    "system_configuration": 2,
                    "system_flags": 1
                },
                "param_1": {
                    "config": 1,
                    "config_param": 1,
                    "config_value": 1,
                    "input": 2,
                    "new_parameter": 1,
                    "param": 5,
                    "parameter": 1,
                    "unused_param": 3,
                    "unused_parameter": 3
                },
                "param_2": {
                    "param2": 1
                }
            },
            "called": [
                "FUN_08006ce0",
                "FUN_08005a50",
                "FUN_08006d72"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nundefined4 initialize_system_080059b4(void)\n\n{\n  _DAT_40023c00 = _DAT_40023c00 | 0x700;\n  configure_sys_tick(16000);\n  set_priority_grouping(3);\n  initialize_msp();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_080059b4",
            "entrypoint": "0x080059b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059b4": "initialize_system_080059b4",
                "HAL_MspInit": "initialize_msp",
                "HAL_NVIC_SetPriorityGrouping": "set_priority_grouping",
                "HAL_SYSTICK_Config": "configure_sys_tick"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080059f8": {
            "additional_data": {
                "FUNC_08005a5c": {
                    "custom_function": 1,
                    "deinitialize_hal": 1,
                    "disable_interrupts": 1,
                    "reverse_data": 1
                },
                "FUN_080059f8": {
                    "deinitialize": 1,
                    "deinitialize_hal": 4,
                    "deinitialize_hardware": 4,
                    "initialize_memory": 1,
                    "reset_and_deinit": 1,
                    "reset_hal": 4,
                    "reset_hal_and_registers": 1,
                    "reset_hal_components": 1,
                    "reset_hal_io": 1,
                    "reset_hardware": 9,
                    "reset_main_data": 1,
                    "reset_peripheral": 1,
                    "reset_peripheral_registers": 1,
                    "reset_registers": 1
                },
                "HAL_MspDeInit": {
                    "cleanup_hal": 1,
                    "deinitialize_hal": 14,
                    "deinitialize_hal_io": 1,
                    "deinitialize_hal_subfunction": 1,
                    "deinitialize_hardware": 1,
                    "deinitialize_periph": 2,
                    "deinitialize_peripheral": 1,
                    "deinitialize_peripherals": 1,
                    "hal_deinitialize": 1,
                    "hal_msp_deinitialize": 1,
                    "hardware_abstraction_layer_deinitialize": 1,
                    "hardware_deinitialize": 1
                },
                "_DAT_40023810": {
                    "component3": 1,
                    "count3": 1,
                    "data_3": 2,
                    "device_state_3": 1,
                    "main_data_3": 1,
                    "register3": 1,
                    "status1": 1,
                    "var3": 2,
                    "variable1": 1,
                    "variable3": 2
                },
                "_DAT_40023814": {
                    "component4": 1,
                    "count4": 1,
                    "data_4": 2,
                    "device_state_4": 1,
                    "main_data_4": 1,
                    "register4": 1,
                    "status2": 1,
                    "var4": 2,
                    "variable2": 1,
                    "variable4": 2
                },
                "_DAT_40023818": {
                    "component5": 1,
                    "count5": 1,
                    "data_5": 2,
                    "device_state_5": 1,
                    "main_data_5": 1,
                    "register5": 1,
                    "status3": 1,
                    "var5": 2,
                    "variable3": 1,
                    "variable5": 2
                },
                "_DAT_40023820": {
                    "component1": 1,
                    "count1": 2,
                    "counter1": 2,
                    "data_1": 2,
                    "device_state_1": 1,
                    "main_data_1": 1,
                    "register1": 2,
                    "var1": 2,
                    "variable1": 2
                },
                "_DAT_40023824": {
                    "component2": 1,
                    "count2": 2,
                    "counter2": 2,
                    "data_2": 2,
                    "device_state_2": 1,
                    "main_data_2": 1,
                    "register2": 2,
                    "var2": 2,
                    "variable2": 2
                }
            },
            "called": [
                "FUN_08005a5c"
            ],
            "calling": [],
            "code": "\n\n\nundefined4 reset_hardware_080059f8(void)\n\n{\n  _DAT_40023820 = 0;\n  _DAT_40023824 = 0;\n  _DAT_40023810 = 0;\n  _DAT_40023814 = 0;\n  _DAT_40023818 = 0;\n  deinitialize_hal();\n  return 0;\n}\n\n",
            "current_name": "reset_hardware_080059f8",
            "entrypoint": "0x080059f8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080059f8": "reset_hardware_080059f8",
                "HAL_MspDeInit": "deinitialize_hal"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a50": {
            "called": [],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid FUNC_08005a50(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a50",
            "entrypoint": "0x08005a50",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a50": "FUNC_08005a50"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a5c": {
            "called": [],
            "calling": [
                "FUN_080059f8"
            ],
            "code": "\nvoid FUNC_08005a5c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08005a5c",
            "entrypoint": "0x08005a5c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08005a5c": "FUNC_08005a5c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08005a68": {
            "additional_data": {
                "": {
                    "": 1
                },
                "DAT_20000e48": {
                    "counter": 24,
                    "data_counter": 5
                },
                "FUN_08005a68": {
                    "increment_counter": 26,
                    "increment_data_counter": 5
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid increment_data_counter_08005a68(void)\n\n{\n  DAT_20000e48 = DAT_20000e48 + 1;\n  return;\n}\n\n",
            "current_name": "increment_data_counter_08005a68",
            "entrypoint": "0x08005a68",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a68": "increment_data_counter_08005a68"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a84": {
            "additional_data": {
                "DAT_20000e48": {
                    "constant_value": 1,
                    "data": 5,
                    "data_value": 3,
                    "global_data": 2,
                    "global_value": 3,
                    "global_variable": 3,
                    "return_value": 1
                },
                "FUN_08005a84": {
                    "get_constant_value": 2,
                    "get_dat_value": 2,
                    "get_data": 5,
                    "get_data_from_memory": 1,
                    "get_data_value": 11,
                    "get_global_data": 2,
                    "get_global_value": 4,
                    "get_global_variable": 3,
                    "get_return_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005cec",
                "FUN_08007756",
                "FUN_08000268",
                "FUN_0800618c",
                "FUN_08005a98"
            ],
            "code": "\nundefined4 get_data_value_08005a84(void)\n\n{\n  return DAT_20000e48;\n}\n\n",
            "current_name": "get_data_value_08005a84",
            "entrypoint": "0x08005a84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a84": "get_data_value_08005a84"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005a98": {
            "additional_data": {
                "FUN_08005a98": {
                    "delay": 1,
                    "delay_execution": 5,
                    "delay_function": 10,
                    "delay_milliseconds": 10,
                    "wait_until_ticks": 2,
                    "wait_until_time": 3
                },
                "iVar1": {
                    "current_tick": 1,
                    "current_time": 2,
                    "initial_tick": 1,
                    "initial_time": 2,
                    "start_tick": 5,
                    "start_ticks": 1,
                    "start_time": 19
                },
                "param_1": {
                    "delay_duration": 3,
                    "delay_time": 9,
                    "duration": 4,
                    "milliseconds": 12,
                    "target_time": 2,
                    "wait_time": 1
                },
                "uVar2": {
                    "current_tick": 7,
                    "current_tick_updated": 1,
                    "current_ticks": 1,
                    "current_time": 21,
                    "elapsed_time": 1
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_080002a0"
            ],
            "code": "\nvoid delay_function_08005a98(int milliseconds)\n\n{\n  int start_time;\n  uint current_time;\n  \n  start_time = HAL_GetTick();\n  do {\n    current_time = HAL_GetTick();\n  } while (current_time < (uint)(milliseconds + start_time));\n  return;\n}\n\n",
            "current_name": "delay_function_08005a98",
            "entrypoint": "0x08005a98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005a98": "delay_function_08005a98",
                "iVar1": "start_time",
                "param_1": "milliseconds",
                "uVar2": "current_time"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005bdc": {
            "additional_data": {
                "0x1fff1c00": {
                    "array_2": 1,
                    "offset2": 1
                },
                "0xe000ed14": {
                    "address1": 2,
                    "array_1": 1
                },
                "0xf": {
                    "offset1": 1
                },
                "FUN_08005bdc": {
                    "set_byte_at_address": 1,
                    "set_byte_value": 1,
                    "store_byte": 1,
                    "store_byte_in_memory": 1,
                    "store_byte_value": 2,
                    "store_data": 2,
                    "store_data_as_char": 1,
                    "store_param": 1,
                    "store_shifted_value": 1,
                    "store_value": 2,
                    "store_value_in_memory": 1,
                    "update_memory": 4,
                    "update_value_in_memory": 1,
                    "write_byte_to_memory": 3,
                    "write_data": 2,
                    "write_to_memory": 4,
                    "write_value_to_memory": 3
                },
                "char": {
                    "character": 1
                },
                "getByteValue": {
                    "current_value": 1
                },
                "param_1": {
                    "address": 7,
                    "address_offset": 3,
                    "byte_offset": 1,
                    "byte_value": 8,
                    "data_address": 1,
                    "data_index": 1,
                    "input_byte": 6,
                    "input_value": 3,
                    "memory_address": 1
                },
                "param_2": {
                    "data": 5,
                    "data_byte": 1,
                    "data_to_write": 1,
                    "data_value": 3,
                    "input_value": 2,
                    "int_value": 1,
                    "new_value": 2,
                    "numeric_value": 1,
                    "shift_amount": 1,
                    "uint_value": 3,
                    "value": 7,
                    "value_to_set": 1,
                    "value_to_shift": 1,
                    "value_to_store": 2
                },
                "var_1": {
                    "target_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005c30"
            ],
            "code": "\nvoid write_value_to_memory_08005bdc(byte byte_value,uint value)\n\n{\n  if ((character)byte_value < '\\0') {\n    *(character *)((byte_value & 0xf) + 0xe000ed14) = (character)((value & 0xff) << 4);\n  }\n  else {\n    *(character *)((character)byte_value + -0x1fff1c00) = (character)((value & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "write_value_to_memory_08005bdc",
            "entrypoint": "0x08005bdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005bdc": "write_value_to_memory_08005bdc",
                "char": "character",
                "param_1": "byte_value",
                "param_2": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005c30": {
            "additional_data": {
                "FUN_08005c30": {
                    "check_and_configure_param": 1,
                    "check_and_init": 1,
                    "check_and_initialize": 2,
                    "check_and_initialize_data": 1,
                    "check_and_initialize_memory": 4,
                    "check_and_set_memory": 5,
                    "check_and_set_memory_address": 1,
                    "check_and_set_memory_value": 1,
                    "check_and_set_parameters": 1,
                    "check_and_set_values": 2,
                    "check_and_update_param": 4,
                    "check_and_write_to_memory": 1,
                    "is_param_valid": 3,
                    "is_value_in_range": 1,
                    "process_param": 1,
                    "verify_and_update_param": 1
                },
                "_DAT_e000e010": {
                    "another_value": 1,
                    "another_variable": 1,
                    "constant_value": 1,
                    "memory_address": 1,
                    "memory_value2": 1,
                    "memory_value_3": 1,
                    "some_flag": 1,
                    "yet_another_param": 1
                },
                "_DAT_e000e014": {
                    "calculated_value": 1,
                    "memory_address": 2,
                    "memory_value": 1,
                    "memory_value_1": 1,
                    "modified_input_value": 1,
                    "modified_param": 1,
                    "modified_value": 5,
                    "new_address": 1,
                    "stored_value": 1,
                    "updated_param": 2,
                    "updated_value": 2
                },
                "_DAT_e000e018": {
                    "another_param": 1,
                    "another_value": 1,
                    "initialized_value": 1,
                    "memory_value": 1,
                    "memory_value1": 1,
                    "memory_value_2": 1,
                    "some_value": 1,
                    "some_variable": 1
                },
                "bVar1": {
                    "is_in_range": 3,
                    "is_input_valid": 9,
                    "is_param_valid": 3,
                    "is_valid": 9,
                    "is_valid_input": 1,
                    "is_value_in_range": 2,
                    "is_value_valid": 2,
                    "is_within_range": 2
                },
                "byte_value": {
                    "byte_value": 5,
                    "data_byte": 2,
                    "data_byte_value": 1,
                    "value_byte": 1,
                    "value_to_write_byte": 1
                },
                "param_1": {
                    "input": 1,
                    "input_param": 7,
                    "input_value": 18,
                    "value": 4,
                    "value_to_check": 1
                },
                "value": {
                    "data_value": 1,
                    "memory_value": 1,
                    "value": 2,
                    "value_to_store": 1,
                    "value_to_write": 3,
                    "word_value": 1,
                    "write_value": 1
                },
                "write_value_to_memory_08005bdc": {
                    "store_value_in_memory": 1,
                    "write_byte_and_value": 1,
                    "write_data_to_memory": 1,
                    "write_memory_value": 1,
                    "write_to_memory": 8,
                    "write_value_to_memory": 9
                }
            },
            "called": [
                "FUN_08005bdc"
            ],
            "calling": [
                "FUN_0800618c"
            ],
            "code": "\n\n\nbool check_and_set_parameters_08005c30(int input_value)\n\n{\n  bool is_valid;\n  \n  is_valid = input_value - 1U < 0x1000000;\n  if (is_valid) {\n    _DAT_e000e014 = input_value + -1;\n    write_value_to_memory(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_valid;\n}\n\n",
            "current_name": "check_and_set_parameters_08005c30",
            "entrypoint": "0x08005c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08005c30": "check_and_set_parameters_08005c30",
                "bVar1": "is_valid",
                "param_1": "input_value",
                "value": "value_to_write",
                "write_value_to_memory_08005bdc": "write_value_to_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08005cec": {
            "additional_data": {
                "CONCAT12": {
                    "concat12": 1,
                    "concatenate12": 2,
                    "concatenate_12": 1
                },
                "CONCAT13": {
                    "concat13": 1,
                    "concatenate13": 2,
                    "concatenate_13": 1
                },
                "CONCAT31": {
                    "concat31": 1,
                    "concatenate31": 2,
                    "concatenate_31": 1
                },
                "DAT_40007000": {
                    "flag2": 1
                },
                "DAT_40023800": {
                    "status_reg": 1
                },
                "DAT_40023800_2": {
                    "register_3_2": 1
                },
                "DAT_40023800_3": {
                    "bit_field_value": 1,
                    "device_control_data": 1,
                    "device_control_flag": 1,
                    "high_byte": 1,
                    "mask1": 1,
                    "mask2": 1,
                    "register3_part3": 1,
                    "register_3_3": 1,
                    "register_3_part_3": 1,
                    "status_bit": 1,
                    "status_bit3": 1,
                    "status_reg_3": 1,
                    "temp_value": 1,
                    "upper_bits": 1,
                    "variable_d": 1
                },
                "DAT_40023808": {
                    "config_reg": 1
                },
                "DAT_40023834": {
                    "config_reg_2": 1
                },
                "DAT_40023870_1": {
                    "device_control_data_2": 1,
                    "high_byte_2": 1,
                    "mask3": 1,
                    "register7_part1": 1,
                    "register_4": 1,
                    "register_4_1": 1,
                    "status_bit1": 1,
                    "status_bit2": 1,
                    "status_reg_5": 1
                },
                "DAT_40023874": {
                    "register_5": 1,
                    "status_reg3": 1
                },
                "DAT_42470000": {
                    "flag1": 1
                },
                "DAT_42470060": {
                    "flag4": 1
                },
                "DAT_42470e80": {
                    "flag3": 1
                },
                "FUN_08005a84": {
                    "handle_some_condition": 1,
                    "initialize": 1
                },
                "FUN_08005cec": {
                    "check_and_control_flags": 1,
                    "check_and_control_mechanism": 1,
                    "check_and_modify_settings": 1,
                    "check_and_update_status": 1,
                    "check_conditions": 1,
                    "check_conditions_and_timers": 1,
                    "check_device_conditions": 1,
                    "check_device_status": 2,
                    "check_flags": 2,
                    "check_parameters": 2,
                    "check_params": 1,
                    "check_status": 3,
                    "handle_device_actions": 1,
                    "handle_device_status": 1,
                    "handle_flags": 1,
                    "perform_action": 1,
                    "perform_operation": 2,
                    "process_parameters": 1,
                    "verify_and_control": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 4,
                    "get_current_time": 3,
                    "get_tick": 3,
                    "get_tick_count": 2
                },
                "_DAT_40007000": {
                    "config_reg_4": 1,
                    "device_flag2": 1,
                    "gpio_another_reg": 1,
                    "register6": 1,
                    "register_6": 1,
                    "register_7": 1,
                    "register_value6": 1,
                    "special_reg": 1,
                    "variable_f": 1
                },
                "_DAT_40023800": {
                    "control_reg1": 1,
                    "device_control": 2,
                    "gpio_ctrl_reg": 1,
                    "gpio_status_register": 1,
                    "register3": 1,
                    "register_3": 2,
                    "register_value3": 1,
                    "register_value_3": 1,
                    "status_reg": 2,
                    "status_register": 1,
                    "system_register": 1,
                    "variable_c": 1
                },
                "_DAT_40023804": {
                    "control_reg2": 1,
                    "device_control_register": 1,
                    "device_flags": 1,
                    "device_status": 1,
                    "flag_reg": 1,
                    "gpio_control_register2": 1,
                    "gpio_data_reg": 1,
                    "hardware_status_reg2": 1,
                    "register2": 1,
                    "register_2": 2,
                    "register_value2": 1,
                    "register_value_2": 1,
                    "status_register": 1,
                    "variable_b": 1
                },
                "_DAT_40023808": {
                    "config_reg": 1,
                    "control_reg1": 1,
                    "control_register": 1,
                    "device_status": 1,
                    "gpio_control_register1": 1,
                    "gpio_status_reg": 1,
                    "hardware_status_reg1": 1,
                    "register1": 1,
                    "register_1": 2,
                    "register_value1": 1,
                    "register_value_1": 1,
                    "system_configuration": 1,
                    "system_control_register": 1,
                    "variable_a": 1
                },
                "_DAT_40023840": {
                    "config_reg_3": 1,
                    "control_reg2": 1,
                    "device_flag1": 1,
                    "register5": 1,
                    "register_5": 1,
                    "register_6": 1,
                    "register_value5": 1
                },
                "_DAT_40023870": {
                    "control_reg3": 1,
                    "device_flag3": 1,
                    "gpio_ctrl_reg_2": 1,
                    "register7": 1,
                    "register_4": 1,
                    "register_7": 1,
                    "register_value7": 1,
                    "status_reg2": 1,
                    "status_reg_4": 1,
                    "variable_e": 1
                },
                "_DAT_40023870_1": {
                    "device_flag3_1": 1
                },
                "_DAT_40023874": {
                    "device_flag4": 1,
                    "hardware_status_reg3": 1,
                    "register4": 1,
                    "register_8": 1,
                    "register_value8": 1,
                    "status_reg_2": 1,
                    "variable_j": 1
                },
                "_DAT_42470000": {
                    "device_data_1": 1,
                    "device_flag5": 1,
                    "flag2": 1,
                    "flag_1": 1,
                    "global_flag_1": 1,
                    "register8": 1,
                    "register_8": 1,
                    "register_9": 1,
                    "register_value4": 1,
                    "variable_g": 1
                },
                "_DAT_42470060": {
                    "device_data_3": 1,
                    "device_flag7": 1,
                    "flag5": 1,
                    "flag_2": 1,
                    "global_flag_3": 1,
                    "register10": 1,
                    "register_10": 1,
                    "register_11": 1,
                    "register_value10": 1,
                    "variable_i": 1
                },
                "_DAT_42470e80": {
                    "device_data_2": 1,
                    "device_flag6": 1,
                    "flag3": 1,
                    "global_flag_2": 1,
                    "register9": 1,
                    "register_10": 1,
                    "register_9": 1,
                    "register_value9": 1,
                    "variable_h": 1
                },
                "char": {
                    "status_char": 1
                },
                "iVar1": {
                    "current_tick": 2,
                    "current_time": 5,
                    "initial_time": 1,
                    "start_time": 4,
                    "tick": 3,
                    "tick_before": 1,
                    "tick_count": 1,
                    "tick_start": 8,
                    "tick_value": 1,
                    "timestamp": 1
                },
                "mask2": {
                    "mask2": 1
                },
                "param_1": {
                    "device_actions": 1,
                    "device_status": 3,
                    "flags": 10,
                    "input": 1,
                    "input_array": 2,
                    "input_data": 1,
                    "input_params": 1,
                    "param_array": 1,
                    "parameters": 5,
                    "params": 1,
                    "settings": 1,
                    "status": 1,
                    "status_array": 1,
                    "status_flags": 1
                },
                "uVar2": {
                    "current_tick": 11,
                    "current_time": 5,
                    "current_timestamp": 1,
                    "elapsed_time": 1,
                    "new_tick": 2,
                    "new_time": 2,
                    "tick": 1,
                    "tick_after": 1,
                    "tick_current": 3
                }
            },
            "called": [
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 check_device_status_08005cec(uint *flags)\n\n{\n  int tick_start;\n  uint current_tick;\n  \n  if ((*flags & 1) != 0) {\n    if (((_DAT_40023808 & 0xc) == 4) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0x400000)))) {\n      if (((_DAT_40023800 & 0x20000) != 0) && (flags[1] != 1)) {\n        return 1;\n      }\n    }\n    else {\n      _DAT_40023800 = (uint3)_DAT_40023800;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x20000) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 5000U <= current_tick) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = concatenate13(DAT_40023800_3,concatenate12((status_char)flags[1],_DAT_40023800));\n      if (flags[1] == 1) {\n        tick_start = get_current_tick();\n        while ((_DAT_40023800 & 0x20000) == 0) {\n          current_tick = get_current_tick();\n          if (tick_start + 5000U <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        tick_start = get_current_tick();\n        while ((_DAT_40023800 & 0x20000) != 0) {\n          current_tick = get_current_tick();\n          if (tick_start + 5000U <= current_tick) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  if ((*flags & 2) != 0) {\n    if (((_DAT_40023808 & 0xc) == 0) ||\n       (((_DAT_40023808 & 0xc) == 8 && ((_DAT_40023804 & 0x400000) == 0)))) {\n      if (((_DAT_40023800 & 2) != 0) && (flags[3] != 1)) {\n        return 1;\n      }\n    }\n    else if (flags[3] == 0) {\n      _DAT_42470000 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 2) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470000 = 1;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 2) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n      _DAT_40023800 = flags[4] << 3 | _DAT_40023800 & 0xffffff07;\n    }\n  }\n  if ((*flags & 8) != 0) {\n    if (flags[5] == 0) {\n      _DAT_42470e80 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023874 & 2) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470e80 = 1;\n      tick_start = get_current_tick();\n      while ((_DAT_40023874 & 2) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  if ((*flags & 4) != 0) {\n    _DAT_40023840 = _DAT_40023840 | 0x10000000;\n    _DAT_40007000 = _DAT_40007000 | 0x100;\n    tick_start = get_current_tick();\n    while ((_DAT_40007000 & 0x100) == 0) {\n      current_tick = get_current_tick();\n      if (tick_start + 100U <= current_tick) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = _DAT_40023870 & 0xffffff00;\n    tick_start = get_current_tick();\n    while ((_DAT_40023870 & 2) != 0) {\n      current_tick = get_current_tick();\n      if (tick_start + 5000U <= current_tick) {\n        return 3;\n      }\n    }\n    _DAT_40023870 = concatenate31(DAT_40023870_1,(status_char)flags[2]);\n    if (flags[2] == 1) {\n      tick_start = get_current_tick();\n      while ((_DAT_40023870 & 2) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 5000U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      tick_start = get_current_tick();\n      while ((_DAT_40023870 & 2) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 5000U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  if (flags[6] != 0) {\n    if ((_DAT_40023808 & 0xc) == 8) {\n      return 1;\n    }\n    if (flags[6] == 2) {\n      _DAT_42470060 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n      _DAT_40023804 =\n           flags[0xb] << 0x18 |\n           flags[8] | flags[9] << 6 | ((flags[10] >> 1) - 1) * 0x10000 | flags[7] |\n           0x20000000;\n      _DAT_42470060 = 1;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x2000000) == 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n    else {\n      _DAT_42470060 = 0;\n      tick_start = get_current_tick();\n      while ((_DAT_40023800 & 0x2000000) != 0) {\n        current_tick = get_current_tick();\n        if (tick_start + 100U <= current_tick) {\n          return 3;\n        }\n      }\n    }\n  }\n  return 0;\n}\n\n",
            "current_name": "check_device_status_08005cec",
            "entrypoint": "0x08005cec",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT12": "concatenate12",
                "CONCAT13": "concatenate13",
                "CONCAT31": "concatenate31",
                "FUN_08005cec": "check_device_status_08005cec",
                "HAL_GetTick": "get_current_tick",
                "char": "status_char",
                "iVar1": "tick_start",
                "param_1": "flags",
                "uVar2": "current_tick"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800618c": {
            "additional_data": {
                "FUN_0800618c": {
                    "check_and_set_parameters": 4,
                    "check_and_update_parameters": 2,
                    "check_and_wait_for_parameter": 1,
                    "check_param_and_set_values": 1,
                    "check_timer_and_set_parameters": 1,
                    "handle_data": 4,
                    "handle_data_transfer": 1,
                    "handle_parameter_update": 1,
                    "handle_parameter_updates": 1,
                    "handle_timeout": 1,
                    "initialize_device": 2,
                    "initialize_subsystem": 1,
                    "process_parameter_data": 1,
                    "update_and_check_parameters": 1,
                    "update_parameters": 1
                },
                "check_and_set_parameters_08005c30": {
                    "check_and_set_parameters": 5,
                    "check_and_set_parameters_helper": 2,
                    "configure_system_parameters": 1,
                    "set_parameters": 5,
                    "update_parameters": 1
                },
                "get_and_store_sys_clock_frequency_08006628": {
                    "get_and_store_sys_clock_frequency": 4,
                    "get_sys_clock_freq": 1,
                    "get_sys_clock_frequency": 7,
                    "get_system_clock_frequency": 2
                },
                "get_data_value_08005a84": {
                    "get_data_value": 14
                },
                "iVar1": {
                    "current_tick": 6,
                    "current_time": 3,
                    "start_time": 2,
                    "tick": 5,
                    "tick_count": 2,
                    "tick_counter": 3,
                    "tick_start": 2,
                    "tick_value": 7
                },
                "param_1": {
                    "config_params": 1,
                    "data": 5,
                    "data_array": 2,
                    "data_params": 1,
                    "data_ptr": 1,
                    "data_values": 1,
                    "device_config": 1,
                    "flags": 1,
                    "input_array": 2,
                    "input_buffer_pointer": 1,
                    "input_data": 3,
                    "input_values": 1,
                    "param_array": 2,
                    "param_values": 1,
                    "parameter_array": 1,
                    "parameters": 7
                },
                "param_2": {
                    "array_length": 1,
                    "array_size": 1,
                    "config_length": 1,
                    "data_length": 2,
                    "data_size": 1,
                    "input_length": 2,
                    "input_size": 2,
                    "input_value": 1,
                    "len": 1,
                    "length": 2,
                    "num_parameters": 2,
                    "num_params": 1,
                    "param_count": 1,
                    "param_length": 1,
                    "param_size": 1,
                    "param_value": 3,
                    "parameter_count": 1,
                    "size": 6,
                    "value": 1
                },
                "uVar2": {
                    "current_tick": 20,
                    "current_tick2": 1,
                    "current_tick_value": 2,
                    "current_time": 4,
                    "elapsed_time": 2,
                    "tick": 1,
                    "tick_current": 1
                },
                "uVar3": {
                    "deadline_tick": 1,
                    "deadline_time": 1,
                    "end_tick": 10,
                    "end_time": 6,
                    "expiration": 1,
                    "target_tick": 2,
                    "tick_end": 2,
                    "timeout": 2,
                    "timeout_tick": 4,
                    "timeout_time": 2
                },
                "uVar4": {
                    "clock_freq": 1,
                    "hclk_freq": 7,
                    "hclk_frequency": 3,
                    "sys_clk_freq": 1,
                    "sys_clock_freq": 8,
                    "sys_clock_frequency": 4,
                    "system_clock": 1,
                    "system_clock_freq": 1,
                    "system_clock_frequency": 5
                }
            },
            "called": [
                "FUN_08005c30",
                "FUN_08006628",
                "FUN_08005a84"
            ],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\n\n\nundefined4 update_and_check_parameters_0800618c(uint *parameters,uint size)\n\n{\n  int tick_value;\n  uint current_tick;\n  uint end_tick;\n  undefined8 sys_clock_freq;\n  \n  if ((_DAT_40023c00 & 0xf) < size) {\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n    if ((*parameters & 1) != 0) {\n      if (parameters[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if ((parameters[1] != 2) && ((_DAT_40023800 & 2) == 0)) {\n        return 1;\n      }\n      _DAT_40023808 = parameters[1] | _DAT_40023808 & 0xfffffffc;\n      tick_value = HAL_GetTick();\n      end_tick = tick_value + 5000;\n      if (parameters[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_tick = HAL_GetTick();\n          if (end_tick <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else if (parameters[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_tick = HAL_GetTick();\n          if (end_tick <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_tick = HAL_GetTick();\n          if (end_tick <= current_tick) {\n            return 3;\n          }\n        }\n      }\n    }\n  }\n  else {\n    if ((*parameters & 1) != 0) {\n      if (parameters[1] == 1) {\n        if ((_DAT_40023800 & 0x20000) == 0) {\n          return 1;\n        }\n      }\n      else if (parameters[1] == 2) {\n        if ((_DAT_40023800 & 0x2000000) == 0) {\n          return 1;\n        }\n      }\n      else if ((_DAT_40023800 & 2) == 0) {\n        return 1;\n      }\n      _DAT_40023808 = parameters[1] | _DAT_40023808 & 0xfffffffc;\n      tick_value = HAL_GetTick();\n      end_tick = tick_value + 5000;\n      if (parameters[1] == 1) {\n        while ((_DAT_40023808 & 0xc) != 4) {\n          current_tick = HAL_GetTick();\n          if (end_tick <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else if (parameters[1] == 2) {\n        while ((_DAT_40023808 & 0xc) != 8) {\n          current_tick = HAL_GetTick();\n          if (end_tick <= current_tick) {\n            return 3;\n          }\n        }\n      }\n      else {\n        while ((_DAT_40023808 & 0xc) != 0) {\n          current_tick = HAL_GetTick();\n          if (end_tick <= current_tick) {\n            return 3;\n          }\n        }\n      }\n    }\n    _DAT_40023c00 = CONCAT31(DAT_40023c00_1,(char)size);\n    if (size != (size & 0xf)) {\n      return 1;\n    }\n  }\n  if ((*parameters & 2) != 0) {\n    _DAT_40023808 = parameters[2] | _DAT_40023808 & 0xffffff0f;\n  }\n  if ((*parameters & 4) != 0) {\n    _DAT_40023808 = parameters[3] | _DAT_40023808 & 0xffffe3ff;\n  }\n  if ((*parameters & 8) != 0) {\n    _DAT_40023808 = parameters[4] << 3 | _DAT_40023808 & 0xffff1fff;\n  }\n  sys_clock_freq = HAL_RCC_GetHCLKFreq();\n  check_and_set_parameters((uint)sys_clock_freq / 1000,(int)((ulonglong)sys_clock_freq >> 0x20),(uint)sys_clock_freq * 0x10624dd3);\n  return 0;\n}\n\n",
            "current_name": "update_and_check_parameters_0800618c",
            "entrypoint": "0x0800618c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800618c": "update_and_check_parameters_0800618c",
                "check_and_set_parameters_08005c30": "check_and_set_parameters",
                "iVar1": "tick_value",
                "param_1": "parameters",
                "param_2": "size",
                "uVar2": "current_tick",
                "uVar3": "end_tick",
                "uVar4": "sys_clock_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800640c": {
            "additional_data": {
                "FUN_0800640c": {
                    "configure_gpio": 1,
                    "init_gpio": 1,
                    "initialize_gpio": 28,
                    "initialize_gpio_ports": 1
                },
                "HAL_GPIO_Init": {
                    "configure_gpio": 1
                },
                "_DAT_40023808": {
                    "gpio_control2": 1,
                    "gpio_data_register": 1,
                    "gpio_register2": 1,
                    "gpio_registers_address": 1
                },
                "_DAT_40023830": {
                    "gpio_base_address": 1,
                    "gpio_control1": 1,
                    "gpio_control_register": 1,
                    "gpio_register1": 1
                },
                "local_10": {
                    "config3": 2,
                    "default3": 1,
                    "gpio_config4": 2,
                    "gpio_config_3": 1,
                    "gpio_init_output_type": 1,
                    "gpio_output_type": 1,
                    "gpio_pin3": 1,
                    "gpio_pin_b": 1,
                    "gpio_speed": 1,
                    "local_var10": 1,
                    "local_var2": 1,
                    "local_variable2": 1,
                    "local_variable3": 1,
                    "num2": 1,
                    "param3": 1,
                    "pin2": 1,
                    "pin3_config": 1,
                    "pin_af": 1,
                    "pin_config3": 1,
                    "pin_mode2": 1,
                    "pin_mode3": 1,
                    "pin_speed": 1,
                    "pin_type": 2,
                    "speed": 1,
                    "unused2": 1,
                    "unused3": 1,
                    "value5": 1,
                    "var2": 1
                },
                "local_14": {
                    "config4": 2,
                    "default4": 1,
                    "gpio_config3": 2,
                    "gpio_config_4": 1,
                    "gpio_pin2": 1,
                    "gpio_pull": 1,
                    "gpio_pull_up_down": 1,
                    "local_var14": 1,
                    "local_var3": 1,
                    "local_variable2": 1,
                    "local_variable3": 1,
                    "num3": 1,
                    "param2": 1,
                    "pin2_config": 1,
                    "pin3": 1,
                    "pin_mode3": 1,
                    "pin_parameter1": 1,
                    "pin_pull": 1,
                    "pin_resistor": 1,
                    "pin_speed": 1,
                    "pull": 1,
                    "unused2": 1,
                    "unused3": 1,
                    "unused_config1": 1,
                    "unused_var1": 1,
                    "value4": 1,
                    "var3": 1
                },
                "local_18": {
                    "config2": 2,
                    "default2": 1,
                    "gpio_config2": 2,
                    "gpio_config_2": 1,
                    "gpio_init_mode": 1,
                    "gpio_mode": 1,
                    "gpio_pin": 2,
                    "gpio_pin_a": 1,
                    "local_var1": 1,
                    "local_var18": 1,
                    "local_variable1": 2,
                    "num1": 1,
                    "param1": 1,
                    "pin1": 1,
                    "pin1_config": 1,
                    "pin_config2": 1,
                    "pin_mode": 5,
                    "pin_mode1": 1,
                    "pin_mode2": 1,
                    "unused1": 2,
                    "value3": 1,
                    "var1": 1
                },
                "local_1c": {
                    "config1": 2,
                    "gpio_config": 7,
                    "gpio_config1": 2,
                    "gpio_config_1": 1,
                    "gpio_config_value": 1,
                    "gpio_init_config": 2,
                    "gpio_mode": 1,
                    "gpio_pin_config": 1,
                    "pin_config": 11,
                    "pin_config1": 1,
                    "pin_configuration": 1,
                    "port_config": 1
                },
                "local_c": {
                    "alternate": 1,
                    "config5": 2,
                    "default5": 1,
                    "gpio_alternative_function": 1,
                    "gpio_config5": 2,
                    "gpio_config_5": 1,
                    "gpio_init_pull_type": 1,
                    "gpio_pin4": 1,
                    "gpio_speed": 1,
                    "local_var4": 1,
                    "local_var_c": 1,
                    "local_variable4": 2,
                    "num4": 1,
                    "pin4": 1,
                    "pin4_config": 1,
                    "pin_alternate": 1,
                    "pin_mode4": 1,
                    "pin_parameter2": 1,
                    "pin_speed": 1,
                    "pull_up_down": 1,
                    "unused4": 2,
                    "unused_config2": 1,
                    "unused_var2": 1,
                    "value6": 1,
                    "var4": 1
                },
                "param_1": {
                    "condition": 2,
                    "config_type": 1,
                    "flag": 14,
                    "input": 1,
                    "is_primary": 1,
                    "mode": 10,
                    "option": 1,
                    "status": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bitmask1": 1,
                    "config_value1": 1,
                    "data1": 3,
                    "gpio_pin1": 1,
                    "mask1": 1,
                    "option1": 1,
                    "param2": 1,
                    "param2_value": 1,
                    "param_a": 3,
                    "param_bit": 1,
                    "param_value_1": 1,
                    "pin_low": 1,
                    "value1": 13,
                    "value_1": 1
                },
                "param_3": {
                    "bit_shift": 1,
                    "bitmask2": 1,
                    "config_value2": 1,
                    "data2": 3,
                    "gpio_pin2": 1,
                    "mask2": 1,
                    "option2": 1,
                    "param3": 1,
                    "param3_bits": 1,
                    "param3_value": 1,
                    "param_b": 3,
                    "param_value_2": 1,
                    "pin_high": 1,
                    "value2": 13,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08006e88"
            ],
            "calling": [],
            "code": "\n\n\nvoid initialize_gpio_ports_0800640c(int flag,uint value1,uint value2)\n\n{\n  undefined4 pin_config;\n  undefined4 pin_mode;\n  undefined4 gpio_config3;\n  undefined4 gpio_config4;\n  undefined4 unused4;\n  \n  if (flag == 0) {\n    _DAT_40023830 = _DAT_40023830 | 1;\n    pin_config = 0x100;\n    pin_mode = 2;\n    gpio_config4 = 3;\n    gpio_config3 = 0;\n    unused4 = 0;\n    configure_gpio(0x40020000,&pin_config);\n    _DAT_40023808 = value2 | value1 | _DAT_40023808 & 0xf89fffff;\n  }\n  else {\n    _DAT_40023830 = _DAT_40023830 | 4;\n    pin_config = 0x200;\n    pin_mode = 2;\n    gpio_config4 = 3;\n    gpio_config3 = 0;\n    unused4 = 0;\n    configure_gpio(0x40020800,&pin_config);\n    _DAT_40023808 = value1 | value2 << 3 | _DAT_40023808 & 0x7ffffff;\n  }\n  return;\n}\n\n",
            "current_name": "initialize_gpio_ports_0800640c",
            "entrypoint": "0x0800640c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800640c": "initialize_gpio_ports_0800640c",
                "HAL_GPIO_Init": "configure_gpio",
                "local_10": "gpio_config4",
                "local_14": "gpio_config3",
                "local_18": "pin_mode",
                "local_1c": "pin_config",
                "local_c": "unused4",
                "param_1": "flag",
                "param_2": "value1",
                "param_3": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080064ec": {
            "additional_data": {
                "FUN_080064ec": {
                    "calculate_clock_frequency": 18,
                    "calculate_clock_speed": 11,
                    "get_frequency": 1
                },
                "_DAT_40023804": {
                    "clock_config_register": 1,
                    "clock_control": 1,
                    "clock_control_register": 1,
                    "clock_settings2": 1,
                    "clock_status_register": 1,
                    "config_bits": 1,
                    "config_register": 1,
                    "config_register2": 1,
                    "control_register": 1,
                    "sys_settings_register": 1
                },
                "_DAT_40023808": {
                    "clock_bits": 1,
                    "clock_config": 1,
                    "clock_config_register": 2,
                    "clock_control_register": 1,
                    "clock_settings1": 1,
                    "config_register": 1,
                    "config_register1": 1,
                    "control_register": 1,
                    "sys_config_register": 1
                },
                "_FUN_080064ec": {
                    "get_clock_frequency": 1
                },
                "local_c": {
                    "calculated_clock": 1,
                    "calculated_frequency": 4,
                    "clock_frequency": 7,
                    "clock_speed": 9,
                    "desired_clock_speed": 1,
                    "frequency": 7,
                    "result": 2
                },
                "uVar1": {
                    "clock_config": 15,
                    "clock_configuration": 1,
                    "clock_control_register": 1,
                    "clock_controller_value": 1,
                    "clock_mode": 1,
                    "clock_select": 1,
                    "clock_setting": 1,
                    "clock_source": 1,
                    "config_bits": 1,
                    "configuration": 1,
                    "frequency_selection": 1,
                    "mode": 1,
                    "option": 1,
                    "options": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006628"
            ],
            "code": "\n\n\nuint calculate_clock_frequency_080064ec(void)\n\n{\n  uint clock_config;\n  uint clock_speed;\n  \n  clock_config = _DAT_40023808 & 0xc;\n  if (clock_config == 8) {\n    if ((_DAT_40023804 & 0x400000) == 0) {\n      clock_speed = ((_DAT_40023804 & 0x7fc0) >> 6) * (16000000 / (_DAT_40023804 & 0x3f));\n    }\n    else {\n      clock_speed = ((_DAT_40023804 & 0x7fc0) >> 6) * (8000000 / (_DAT_40023804 & 0x3f));\n    }\n    return clock_speed / ((((_DAT_40023804 & 0x30000) >> 0x10) + 1) * 2);\n  }\n  if (clock_config < 9) {\n    if (clock_config == 0) {\n      return 16000000;\n    }\n    if (clock_config == 4) {\n      return 8000000;\n    }\n  }\n  return 16000000;\n}\n\n",
            "current_name": "calculate_clock_frequency_080064ec",
            "entrypoint": "0x080064ec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080064ec": "calculate_clock_frequency_080064ec",
                "local_c": "clock_speed",
                "uVar1": "clock_config"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006628": {
            "additional_data": {
                "DAT_0800bcac": {
                    "freq_adjustment_table": 1,
                    "shift_by": 1
                },
                "DAT_20000000": {
                    "adjusted_clock_freq": 1,
                    "adjusted_frequency": 1,
                    "adjusted_sys_clock_freq": 4,
                    "adjusted_sys_clock_frequency": 1,
                    "divided_sysclk_freq": 1,
                    "result": 1,
                    "shifted_freq": 1,
                    "shifted_sys_clock": 1,
                    "shifted_sys_clock_freq": 2,
                    "sys_clock_value": 1,
                    "sysclock_divisor": 1,
                    "updated_clock_freq": 1
                },
                "FUN_080064ec": {
                    "calculate_factor": 1,
                    "calculate_shift_value": 1,
                    "unknown_sub_function": 1
                },
                "FUN_08006628": {
                    "calculate_clock_frequency": 1,
                    "calculate_clock_speed": 2,
                    "calculate_frequency": 1,
                    "calculate_sys_clock_freq": 1,
                    "calculate_sys_clock_frequency": 3,
                    "calculate_sysclock_divisor": 1,
                    "get_adjusted_sys_clock_freq": 4,
                    "get_and_store_sys_clock_frequency": 1,
                    "get_clock_frequency": 4,
                    "get_sys_clock": 1,
                    "get_sys_clock_frequency": 3,
                    "get_sysclk_divided_freq": 1,
                    "get_sysclock_frequency": 5,
                    "get_system_clock_frequency": 3
                },
                "HAL_RCC_GetSysClockFreq": {
                    "fetch_sys_clock_freq": 1,
                    "get_sys_clock_freq": 9,
                    "get_sys_clock_frequency": 3,
                    "get_sysclk_freq": 1,
                    "get_sysclock_freq": 1,
                    "get_sysclock_frequency": 2,
                    "get_system_clock_frequency": 5
                },
                "_DAT_0800bcac": {
                    "divisor_table": 1
                },
                "_DAT_40023808": {
                    "clock_config": 1,
                    "config_value": 1,
                    "control_register": 1,
                    "data_reg": 1,
                    "data_type": 1,
                    "input": 1,
                    "input_data": 2,
                    "reg_value": 1,
                    "register_value": 6,
                    "reset_register": 1,
                    "some_register_value": 1,
                    "some_value": 2,
                    "some_variable": 1,
                    "sys_clock_freq_constant": 1,
                    "sys_clock_setting": 1,
                    "sys_config_register": 1,
                    "sysclock_config_register": 1,
                    "sysclock_divisor": 1,
                    "system_control_register": 1,
                    "unknown_val": 1
                },
                "uVar1": {
                    "sys_clock_freq": 20,
                    "sys_clock_frequency": 1,
                    "sysclk_frequency": 1,
                    "sysclock_freq": 2,
                    "sysclock_frequency": 4,
                    "system_clock_frequency": 1
                }
            },
            "called": [
                "FUN_080064ec"
            ],
            "calling": [
                "FUN_080066cc",
                "FUN_08006680",
                "FUN_0800618c"
            ],
            "code": "\n\n\nuint get_and_store_sys_clock_frequency_08006628(void)\n\n{\n  uint sys_clock_freq;\n  \n  sys_clock_freq = get_sys_clock_freq();\n  DAT_20000000 = sys_clock_freq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n  return sys_clock_freq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xf0) >> 4];\n}\n\n",
            "current_name": "get_and_store_sys_clock_frequency_08006628",
            "entrypoint": "0x08006628",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006628": "get_and_store_sys_clock_frequency_08006628",
                "HAL_RCC_GetSysClockFreq": "get_sys_clock_freq",
                "uVar1": "sys_clock_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006680": {
            "additional_data": {
                "DAT_0800bcac": {
                    "bit_mask": 1,
                    "data_2": 1,
                    "data_array": 1,
                    "frequency_shift_table": 1,
                    "lookup_table": 1,
                    "shift_array": 1,
                    "shift_table": 1,
                    "shift_values": 2
                },
                "FUN_08006628": {
                    "get_adjustment_value": 1,
                    "get_divisor": 1,
                    "get_hclk_freq": 1,
                    "get_hclk_freq_divisor": 1,
                    "get_hclk_frequency": 1
                },
                "FUN_08006680": {
                    "calculate_adjusted_frequency": 2,
                    "calculate_frequency": 1,
                    "get_adjusted_clock_frequency": 3,
                    "get_adjusted_hclk_freq": 5,
                    "get_adjusted_hclk_frequency": 1,
                    "get_clock_frequency": 2,
                    "get_divided_frequency": 1,
                    "get_divisor": 1,
                    "get_frequency_divisor": 1,
                    "get_hclk_freq_shifted_value": 1,
                    "get_hclk_frequency": 12,
                    "get_scaled_hclk": 1
                },
                "HAL_RCC_GetHCLKFreq": {
                    "get_clock_frequency": 1,
                    "get_current_clock_frequency": 1,
                    "get_current_hclk_freq": 2,
                    "get_current_hclk_frequency": 1,
                    "get_hclk_freq": 5,
                    "get_hclk_frequency": 5,
                    "get_hclk_frequency_from_rcc": 1,
                    "get_hclk_frequency_value": 1,
                    "get_system_frequency": 1
                },
                "_DAT_40023808": {
                    "base_address": 1,
                    "config_value": 1,
                    "constant_value": 1,
                    "control_register": 2,
                    "control_register_address": 1,
                    "data_1": 1,
                    "hclk_configuration_register": 1,
                    "input_data": 1,
                    "input_mask": 1,
                    "input_value": 2,
                    "ptr_1": 1,
                    "reg_value": 1,
                    "register_value": 12,
                    "system_config_register": 1
                },
                "uVar1": {
                    "adjusted_frequency": 1,
                    "clock_frequency": 4,
                    "frequency": 3,
                    "hclk_freq": 8,
                    "hclk_frequency": 11,
                    "scaled_hclk": 1
                },
                "uVar2": {
                    "offset_index": 1,
                    "register_value": 1,
                    "shift_amount": 1
                },
                "uint": {
                    "unsigned": 1
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nunsigned get_adjusted_hclk_frequency_08006680(void)\n\n{\n  unsigned hclk_frequency;\n  \n  hclk_frequency = get_hclk_freq();\n  return hclk_frequency >> (&DAT_0800bcac)[(_DAT_40023808 & 0x1c00) >> 10];\n}\n\n",
            "current_name": "get_adjusted_hclk_frequency_08006680",
            "entrypoint": "0x08006680",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006680": "get_adjusted_hclk_frequency_08006680",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "uVar1": "hclk_frequency",
                "uint": "unsigned"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080066cc": {
            "additional_data": {
                "0xd": {
                    "shift_amount": 1,
                    "sysctrl_shift": 1
                },
                "0xe000": {
                    "mask": 1,
                    "sysctrl_mask": 1
                },
                "DAT_0800bcac": {
                    "adjustment_table": 1,
                    "adjustment_values": 1,
                    "clock_shift": 1,
                    "hclk_divisor_array": 1,
                    "lookup_table": 1,
                    "shift_amount": 1,
                    "shift_arr": 1,
                    "shift_array": 4,
                    "shift_values": 2
                },
                "FUN_08006628": {
                    "get_hclk_freq": 1,
                    "get_hclk_frequency": 1,
                    "get_shift_value": 1
                },
                "FUN_080066cc": {
                    "calculate_clock_frequency": 1,
                    "calculate_hclk_divisor": 1,
                    "calculate_hclk_frequency": 2,
                    "calculate_shifted_clock_freq": 1,
                    "get_adjusted_frequency": 2,
                    "get_adjusted_hclk_freq": 12,
                    "get_hclk_freq": 1,
                    "get_hclk_frequency": 11
                },
                "HAL_RCC_GetHCLKFreq": {
                    "calculate_hclk_frequency": 1,
                    "get_core_clock_frequency": 1,
                    "get_current_hclk_freq": 2,
                    "get_hclk": 1,
                    "get_hclk_freq": 5,
                    "get_hclk_frequency": 4,
                    "get_system_clock_frequency": 1,
                    "retrieve_hclk_frequency": 1
                },
                "_DAT_40023808": {
                    "config_value": 1,
                    "control_reg": 2,
                    "control_register": 1,
                    "control_register_value": 1,
                    "gpio_registers": 1,
                    "hardware_config": 1,
                    "input_data": 2,
                    "input_value": 2,
                    "periph_mask": 1,
                    "rcc_bitmask": 1,
                    "rcc_config_register": 2,
                    "reg_val": 1,
                    "register_value": 5,
                    "some_value": 1,
                    "syscfg_reg": 1,
                    "sysctrl_register": 1,
                    "system_config_register": 1,
                    "system_control_register": 3,
                    "system_core_clock": 1,
                    "var_x": 1
                },
                "getAdjustedHCLKFreq": {
                    "new_adjusted_freq": 1
                },
                "uVar1": {
                    "adjusted_freq": 1,
                    "clock_freq": 1,
                    "frequency": 1,
                    "hclk_freq": 14,
                    "hclk_frequency": 8
                }
            },
            "called": [
                "FUN_08006628"
            ],
            "calling": [
                "FUN_08007f54"
            ],
            "code": "\n\n\nuint get_adjusted_hclk_freq_080066cc(void)\n\n{\n  uint hclk_freq;\n  \n  hclk_freq = get_hclk_freq();\n  return hclk_freq >> (&DAT_0800bcac)[(_DAT_40023808 & 0xe000) >> 0xd];\n}\n\n",
            "current_name": "get_adjusted_hclk_freq_080066cc",
            "entrypoint": "0x080066cc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080066cc": "get_adjusted_hclk_freq_080066cc",
                "HAL_RCC_GetHCLKFreq": "get_hclk_freq",
                "uVar1": "hclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006950": {
            "additional_data": {
                "0x5fa0000": {
                    "constant": 1
                },
                "0xf8ff": {
                    "mask": 1
                },
                "7": {
                    "bit_mask": 1
                },
                "8": {
                    "bit_shift": 1
                },
                "DAT_e000ed0c": {
                    "data_register": 1,
                    "memory_mapping_register": 1
                },
                "FUN_08006950": {
                    "configure_bits_in_register": 1,
                    "configure_data_register": 1,
                    "configure_memory": 1,
                    "configure_register": 1,
                    "set_bitmask_parameter": 1,
                    "set_bits_in_register": 2,
                    "set_bitwise_flags": 1,
                    "set_config_register": 2,
                    "set_configuration_bits": 1,
                    "set_configuration_register": 1,
                    "set_control_bitmask": 1,
                    "set_control_register": 1,
                    "set_control_register_bit": 1,
                    "set_control_register_bits": 1,
                    "set_data_register": 1,
                    "set_display_configuration": 1,
                    "set_memory_configuration": 1,
                    "set_memory_mapping": 1,
                    "set_register_value": 2,
                    "set_user_permissions": 1,
                    "update_config": 1,
                    "update_configuration": 2,
                    "update_control_register": 1,
                    "update_parameter": 1,
                    "update_register": 1,
                    "update_register_bits": 1,
                    "update_register_value": 1
                },
                "_DAT_e000ed0c": {
                    "config_register": 3,
                    "configuration_register": 1,
                    "control_register": 4,
                    "data_register": 1,
                    "display_configuration": 1,
                    "flags": 1,
                    "memory_configuration_register": 1,
                    "permissions_data": 1,
                    "register": 1,
                    "register_value": 6
                },
                "param_1": {
                    "bit_mask": 1,
                    "bit_number": 1,
                    "bit_position": 1,
                    "bit_value": 1,
                    "bitmask": 2,
                    "config_value": 5,
                    "configuration": 1,
                    "configuration_value": 1,
                    "control_flag": 1,
                    "data": 1,
                    "display_mode": 1,
                    "input_value": 8,
                    "new_value": 1,
                    "register_value": 2,
                    "user_permissions": 1,
                    "value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08006ce0"
            ],
            "code": "\n\n\nvoid configure_bits_in_register_08006950(uint input_value)\n\n{\n  _DAT_e000ed0c = _DAT_e000ed0c & 0xf8ff | (input_value & 7) << 8 | 0x5fa0000;\n  return;\n}\n\n",
            "current_name": "configure_bits_in_register_08006950",
            "entrypoint": "0x08006950",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006950": "configure_bits_in_register_08006950",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006998": {
            "additional_data": {
                "7": {
                    "bit_mask": 1
                },
                "8": {
                    "address_shift": 1
                },
                "FUN_08006998": {
                    "extract_bit_value": 1,
                    "extract_bits_from_register": 2,
                    "get_bit_from_byte": 1,
                    "get_bit_masked_value": 1,
                    "get_bit_value": 2,
                    "get_bits_from_data_register": 1,
                    "get_bits_from_memory": 2,
                    "get_bits_from_reg": 1,
                    "get_bits_from_register": 3,
                    "get_least_significant_bits": 1,
                    "get_shifted_and_masked_value": 1,
                    "get_shifted_bits": 6,
                    "get_shifted_byte": 1,
                    "get_shifted_value": 3,
                    "get_three_bit_value": 1,
                    "get_three_least_significant_bits": 2,
                    "get_three_lowest_bits": 1,
                    "get_upper_bits_from_address": 1
                },
                "_DAT_e000ed0c": {
                    "address": 1,
                    "byte": 1,
                    "data": 2,
                    "data_register": 3,
                    "data_value": 2,
                    "input": 1,
                    "input_value": 2,
                    "memory_data": 1,
                    "memory_value": 1,
                    "original_value": 2,
                    "reg_value": 1,
                    "register_value": 7,
                    "shift_register": 1,
                    "shifted_data": 1,
                    "shifted_value": 3,
                    "value": 2
                },
                "return": {
                    "bits": 1,
                    "shifted_bits": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d8a",
                "FUN_08006cf6"
            ],
            "code": "\n\n\nuint get_shifted_bits_08006998(void)\n\n{\n  shifted_bits _DAT_e000ed0c >> 8 & 7;\n}\n\n",
            "current_name": "get_shifted_bits_08006998",
            "entrypoint": "0x08006998",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006998": "get_shifted_bits_08006998",
                "return": "shifted_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069b4": {
            "additional_data": {
                "FUN_080069b4": {
                    "set_bit": 2,
                    "set_bit_at": 1,
                    "set_bit_at_index": 2,
                    "set_bit_at_offset": 2,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 3,
                    "set_bit_in_memory": 14,
                    "set_bit_value": 3,
                    "set_bit_value_in_memory": 1,
                    "store_bit_value": 1,
                    "store_bitwise_shifted_value": 1
                },
                "param_1": {
                    "bit_position": 2,
                    "byte_to_set": 4,
                    "byte_value": 6,
                    "index": 2,
                    "input_byte": 16,
                    "num_byte": 1
                },
                "param_ret_addr": {
                    "return_address": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d2e"
            ],
            "code": "\nvoid set_bit_value_in_memory_080069b4(byte input_byte)\n\n{\n  *(int *)(((uint)(int)(char)input_byte >> 5) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_value_in_memory_080069b4",
            "entrypoint": "0x080069b4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069b4": "set_bit_value_in_memory_080069b4",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080069e4": {
            "additional_data": {
                "0x1f": {
                    "constant5": 1,
                    "thirty_one": 1
                },
                "0x20": {
                    "constant1": 1,
                    "twenty": 1
                },
                "1": {
                    "constant4": 1,
                    "one": 1
                },
                "4": {
                    "array_index": 1,
                    "constant2": 1
                },
                "FUN_080069e4": {
                    "initialize_bit": 1,
                    "set_bit": 6,
                    "set_bit_in_address": 1,
                    "set_bit_in_array": 5,
                    "set_bit_in_int_memory": 1,
                    "set_bit_in_integer_array": 1,
                    "set_bit_in_memory": 15,
                    "update_bit": 1
                },
                "char": {
                    "byte": 1,
                    "character": 1
                },
                "int": {
                    "pointer": 1
                },
                "param_1": {
                    "bit_position": 1,
                    "byte_to_set": 4,
                    "byte_value": 6,
                    "input": 2,
                    "input_byte": 16,
                    "input_value": 1,
                    "value": 1
                },
                "param_2": {
                    "bit_position": 1
                },
                "uint": {
                    "unsigned_int": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d4a"
            ],
            "code": "\nvoid set_bit_in_int_memory_080069e4(byte input_byte)\n\n{\n  *(pointer *)((((unsigned_int)(pointer)(byte)input_byte >> 5) + 0x20) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_int_memory_080069e4",
            "entrypoint": "0x080069e4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080069e4": "set_bit_in_int_memory_080069e4",
                "char": "byte",
                "int": "pointer",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a18": {
            "additional_data": {
                "FUN_08006a18": {
                    "check_bit": 18,
                    "check_bit_in_array": 1,
                    "check_bit_set": 3,
                    "check_bit_status": 1,
                    "check_bit_value": 1,
                    "is_bit_set": 5,
                    "is_bit_set_at_index": 1,
                    "is_nth_bit_set": 1
                },
                "char": {
                    "character": 1
                },
                "param_1": {
                    "byte_to_check": 2,
                    "byte_value": 13,
                    "input": 5,
                    "input_byte": 11
                },
                "uint": {
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006de0"
            ],
            "code": "\nbool check_bit_set_08006a18(byte byte_value)\n\n{\n  return (*(unsigned_int *)((((unsigned_int)(int)(character)byte_value >> 5) + 0x40) * 4 + -0x1fff1f00) &\n         1 << (byte_value & 0x1f)) != 0;\n}\n\n",
            "current_name": "check_bit_set_08006a18",
            "entrypoint": "0x08006a18",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006a18": "check_bit_set_08006a18",
                "char": "character",
                "param_1": "byte_value",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a58": {
            "additional_data": {
                "DAT_08006d20": {
                    "offset": 1
                },
                "FUN_08006a58": {
                    "set_bit": 3,
                    "set_bit_at_index": 2,
                    "set_bit_at_offset": 2,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 4,
                    "set_bit_in_memory": 16,
                    "set_bit_value": 2,
                    "update_bit": 1
                },
                "PTR_0800698c": {
                    "base_address": 1
                },
                "PTR_08006a50": {
                    "target_address": 1
                },
                "char": {
                    "char_value": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "byte_to_set": 2,
                    "byte_value": 7,
                    "input": 1,
                    "input_byte": 16,
                    "new_value": 1,
                    "value": 3
                },
                "uint": {
                    "unsigned_int_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dc4"
            ],
            "code": "\nvoid set_bit_in_memory_08006a58(byte input_byte)\n\n{\n  *(int *)((((unsigned_int_value)(int)(char_value)input_byte >> 5) + 0x40) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a58",
            "entrypoint": "0x08006a58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006a58": "set_bit_in_memory_08006a58",
                "char": "char_value",
                "param_1": "input_byte",
                "uint": "unsigned_int_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006a8c": {
            "additional_data": {
                "0x1f": {
                    "mask": 1
                },
                "0x60": {
                    "base_offset": 1
                },
                "1": {
                    "bit_mask": 1,
                    "bit_value": 1
                },
                "4": {
                    "word_size": 1
                },
                "FUN_08006a8c": {
                    "set_bit": 5,
                    "set_bit_at": 1,
                    "set_bit_at_index": 2,
                    "set_bit_at_offset": 2,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 7,
                    "set_bit_in_memory": 11,
                    "set_bit_value": 1,
                    "store_bit_in_memory": 1
                },
                "char": {
                    "character": 2,
                    "signed_char": 1
                },
                "int": {
                    "signed_int": 2
                },
                "param_1": {
                    "bit_position": 1,
                    "byte_to_set": 5,
                    "byte_value": 11,
                    "input": 1,
                    "input_byte": 12,
                    "value": 1
                },
                "param_2": {
                    "bit_position": 1
                },
                "uint": {
                    "unsigned_int": 3
                },
                "value": {
                    "byte_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006dfe"
            ],
            "code": "\nvoid set_bit_in_memory_08006a8c(byte input_byte)\n\n{\n  *(signed_int *)((((unsigned_int)(signed_int)(character)input_byte >> 5) + 0x60) * 4 + -0x1fff1f00) = 1 << (input_byte & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08006a8c",
            "entrypoint": "0x08006a8c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006a8c": "set_bit_in_memory_08006a8c",
                "char": "character",
                "int": "signed_int",
                "param_1": "input_byte",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ac0": {
            "additional_data": {
                "0x1fff1f00": {
                    "base_address": 1,
                    "offset_constant": 1
                },
                "0x80": {
                    "offset": 1,
                    "shift_constant": 1
                },
                "FUN_08006ac0": {
                    "check_bit": 17,
                    "check_bit_at_index": 1,
                    "check_bit_in_memory": 1,
                    "check_bit_set": 5,
                    "check_bit_value": 2,
                    "check_if_bit_set": 2,
                    "is_bit_set": 3
                },
                "char": {
                    "character": 1
                },
                "param_1": {
                    "byte_to_check": 7,
                    "byte_value": 8,
                    "input": 2,
                    "input_byte": 13,
                    "value": 1
                },
                "uint": {
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006e1a"
            ],
            "code": "\nbool check_if_bit_set_08006ac0(byte input_byte)\n\n{\n  return (*(unsigned_integer *)((((unsigned_integer)(int)(character)input_byte >> 5) + 0x80) * 4 + -0x1fff1f00) &\n         1 << (input_byte & 0x1f)) != 0;\n}\n\n",
            "current_name": "check_if_bit_set_08006ac0",
            "entrypoint": "0x08006ac0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ac0": "check_if_bit_set_08006ac0",
                "char": "character",
                "param_1": "input_byte",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b00": {
            "additional_data": {
                "0x1fff1c00": {
                    "address_b": 1,
                    "memory_address_2": 1,
                    "offset": 1
                },
                "0xe000ed14": {
                    "address_a": 1,
                    "base_address": 1,
                    "positive_offset_address": 1
                },
                "FUN_08006b00": {
                    "set_byte_value": 1,
                    "store_byte": 3,
                    "store_byte_at_address": 1,
                    "store_byte_in_memory": 3,
                    "store_byte_to_memory": 1,
                    "store_byte_value": 2,
                    "store_data": 1,
                    "store_shifted_value": 1,
                    "store_value": 3,
                    "update_memory": 2,
                    "write_byte": 1,
                    "write_byte_at_address": 1,
                    "write_byte_to_memory": 3,
                    "write_data_to_memory": 3,
                    "write_to_memory": 3,
                    "write_value_to_memory": 2
                },
                "_1": {
                    "masked_byte": 1
                },
                "_2": {
                    "memory_address": 1
                },
                "_3": {
                    "base_address": 1
                },
                "char": {
                    "byte": 1,
                    "character": 1
                },
                "e000ed14": {
                    "memory_address_1": 1
                },
                "input_byte": {
                    "new_byte": 1
                },
                "new_var_1": {
                    "converted_data": 1
                },
                "new_var_2": {
                    "byte_offset": 1
                },
                "param_1": {
                    "address": 5,
                    "byte_data": 1,
                    "byte_value": 4,
                    "data_offset": 1,
                    "input_byte": 14,
                    "input_value": 5,
                    "memory_offset": 1
                },
                "param_2": {
                    "address": 1,
                    "byte_to_store": 1,
                    "data": 8,
                    "data_value": 2,
                    "input_value": 4,
                    "int_value": 1,
                    "shifted_value": 1,
                    "uint_value": 1,
                    "value": 6,
                    "value_to_set": 1,
                    "value_to_shift": 1,
                    "value_to_store": 3,
                    "value_to_write": 1
                },
                "param_3": {
                    "address": 2,
                    "address_offset": 1
                },
                "param_4": {
                    "offset": 1
                },
                "temp_1": {
                    "address": 1
                },
                "temp_2": {
                    "value_to_store": 1
                },
                "value": {
                    "new_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006c9c",
                "FUN_08006cf6"
            ],
            "code": "\nvoid store_byte_value_08006b00(byte input_byte,uint data)\n\n{\n  if ((character)input_byte < '\\0') {\n    *(character *)((input_byte & 0xf) + 0xe000ed14) = (character)((data & 0xff) << 4);\n  }\n  else {\n    *(character *)((character)input_byte + -0x1fff1c00) = (character)((data & 0xff) << 4);\n  }\n  return;\n}\n\n",
            "current_name": "store_byte_value_08006b00",
            "entrypoint": "0x08006b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b00": "store_byte_value_08006b00",
                "_1": "masked_byte",
                "_2": "memory_address",
                "char": "character",
                "param_1": "input_byte",
                "param_2": "data"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006b54": {
            "additional_data": {
                "FUN_08006b54": {
                    "byte_to_nibble": 1,
                    "extract_and_shift_byte": 1,
                    "extract_byte": 7,
                    "extract_byte_from_binary": 2,
                    "extract_byte_from_memory": 3,
                    "extract_nibble": 4,
                    "extracted_byte": 4,
                    "extracted_byte_value": 1,
                    "get_nibble": 3,
                    "get_nibble_from_memory": 1,
                    "get_shifted_nibble": 1,
                    "get_shifted_value": 2,
                    "retrieve_nibble": 1
                },
                "bVar1": {
                    "extracted_byte": 4,
                    "extracted_value": 1,
                    "output": 1,
                    "output_byte": 6,
                    "result": 8,
                    "result_byte": 9,
                    "result_nibble": 1,
                    "shifted_value": 1
                },
                "param_1": {
                    "input": 4,
                    "input_byte": 24,
                    "input_value": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nbyte extract_byte_from_memory_08006b54(byte input_byte)\n\n{\n  byte result_byte;\n  \n  if ((char)input_byte < '\\0') {\n    result_byte = *(byte *)((input_byte & 0xf) + 0xe000ed14);\n  }\n  else {\n    result_byte = *(byte *)((char)input_byte + -0x1fff1c00);\n  }\n  return result_byte >> 4;\n}\n\n",
            "current_name": "extract_byte_from_memory_08006b54",
            "entrypoint": "0x08006b54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006b54": "extract_byte_from_memory_08006b54",
                "bVar1": "result_byte",
                "param_1": "input_byte"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ba0": {
            "additional_data": {
                "0": {
                    "min_bit_offset": 1
                },
                "0xff": {
                    "bit_mask_mask": 1
                },
                "1": {
                    "bit_slice_mask": 1
                },
                "3": {
                    "max_num_bits": 1
                },
                "4": {
                    "default_num_bits": 1
                },
                "7": {
                    "max_bit_offset": 1
                },
                "FUN_08006ba0": {
                    "apply_bit_mask": 1,
                    "apply_bit_masks": 1,
                    "apply_bitwise_operations": 1,
                    "apply_mask_to_values": 1,
                    "bitmask_operation": 1,
                    "bitwise_combination": 2,
                    "bitwise_manipulation": 1,
                    "bitwise_masking": 1,
                    "bitwise_operation": 10,
                    "extract_bit_slice": 1,
                    "extract_bits": 7,
                    "mask_bits": 1,
                    "masking_and_shifting_bits": 1,
                    "reverse_bits": 2
                },
                "param_1": {
                    "bit_count": 1,
                    "bit_offset": 7,
                    "bit_position": 4,
                    "bits_to_shift": 1,
                    "input": 1,
                    "input1": 2,
                    "input_bit": 2,
                    "input_mask": 5,
                    "input_modulus": 1,
                    "input_value": 4,
                    "mask": 1,
                    "mask_bit_shift": 1,
                    "shift_amount2": 1
                },
                "param_2": {
                    "bit_mask": 5,
                    "bit_mask1": 1,
                    "bit_pattern": 1,
                    "bitmask1": 1,
                    "bitmask_1": 1,
                    "bits_to_extract": 1,
                    "bits_to_insert": 1,
                    "data": 3,
                    "data1": 1,
                    "data_bit_shift": 1,
                    "data_mask": 1,
                    "data_param": 1,
                    "input2": 2,
                    "input_data": 1,
                    "input_value": 2,
                    "mask": 2,
                    "source": 2,
                    "source_bits": 1,
                    "source_value": 1,
                    "value1": 2
                },
                "param_3": {
                    "bit_mask2": 1,
                    "bit_value": 2,
                    "bitmask2": 1,
                    "bitmask_2": 1,
                    "data2": 2,
                    "destination": 1,
                    "destination_bits": 1,
                    "destination_value": 1,
                    "input3": 1,
                    "input_data": 2,
                    "mask": 3,
                    "mask_param": 1,
                    "original_value": 1,
                    "output": 1,
                    "output_data": 1,
                    "output_mask": 3,
                    "output_value": 1,
                    "result": 2,
                    "value": 3,
                    "value2": 2
                },
                "return": {
                    "result": 4
                },
                "uVar1": {
                    "bit_count_diff": 1,
                    "bit_difference": 1,
                    "bit_shift": 1,
                    "bits_remaining": 1,
                    "bits_to_shift": 2,
                    "difference": 2,
                    "num_bits": 1,
                    "num_bits_mask": 1,
                    "num_bits_to_extract": 2,
                    "num_bits_to_shift": 1,
                    "num_leading_ones": 1,
                    "offset": 1,
                    "one_bits": 1,
                    "remaining_bits": 7,
                    "shift_amount": 7,
                    "shift_count": 1
                },
                "uVar2": {
                    "mask_a": 1,
                    "temp_mask": 1
                },
                "uVar3": {
                    "mask_b": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006cf6"
            ],
            "code": "\nuint bitwise_operation_08006ba0(uint bit_offset,uint bit_mask,uint mask)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  result mask & (1 << (bit_offset & 0xff)) - 1U |\n         ((1 << (shift_amount & 0xff)) - 1U & bit_mask) << (bit_offset & 0xff);\n}\n\n",
            "current_name": "bitwise_operation_08006ba0",
            "entrypoint": "0x08006ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ba0": "bitwise_operation_08006ba0",
                "param_1": "bit_offset",
                "param_2": "bit_mask",
                "param_3": "mask",
                "return": "result",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c04": {
            "additional_data": {
                "0xff": {
                    "mask_value": 1
                },
                "1": {
                    "bit_mask": 1
                },
                "FUN_08006c04": {
                    "bitwise_and_shift": 1,
                    "bitwise_operation": 2,
                    "extract_and_mask_bits": 1,
                    "extract_bits": 24,
                    "extract_bits_from_uint": 2,
                    "unpack_bits": 1
                },
                "output_1": {
                    "unpacked_bits1": 1
                },
                "output_2": {
                    "unpacked_bits2": 1
                },
                "param_1": {
                    "data": 1,
                    "input": 9,
                    "input_data": 1,
                    "input_number": 1,
                    "input_val": 2,
                    "input_value": 16,
                    "number": 1
                },
                "param_2": {
                    "adjusted_offset": 1,
                    "bit_offset": 14,
                    "bit_position": 10,
                    "num_bits": 1,
                    "num_bits_shifted": 1,
                    "shift_amount": 1,
                    "start_bit": 2,
                    "start_bit_position": 1
                },
                "param_3": {
                    "extracted_bits": 1,
                    "extracted_bits_1": 3,
                    "output1": 7,
                    "output_1": 2,
                    "output_bitmask": 1,
                    "output_data1": 1,
                    "output_val1": 1,
                    "output_val_1": 2,
                    "output_value": 1,
                    "output_value1": 8,
                    "output_value_1": 1,
                    "result1": 3
                },
                "param_4": {
                    "extracted_bits_2": 3,
                    "output2": 7,
                    "output_2": 2,
                    "output_bits": 1,
                    "output_data2": 1,
                    "output_val2": 1,
                    "output_val_2": 2,
                    "output_value2": 9,
                    "output_value_2": 1,
                    "remaining_bits": 1,
                    "result2": 3
                },
                "uVar1": {
                    "bit_mask": 1,
                    "bits_to_extract": 2,
                    "bits_to_extract_1": 1,
                    "bits_to_shift": 2,
                    "count": 1,
                    "max_shift": 1,
                    "num_bits": 2,
                    "num_bits_to_extract": 3,
                    "remaining_bits": 8,
                    "remaining_digits": 1,
                    "shift_amount": 8
                },
                "uVar2": {
                    "shifted_position": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d98"
            ],
            "code": "\nvoid extract_bits_from_uint_08006c04(uint input_value,uint bit_offset,uint *output_value1,uint *output_value2)\n\n{\n  uint shift_amount;\n  \n  bit_offset = bit_offset & 7;\n  shift_amount = 7 - bit_offset;\n  if (3 < shift_amount) {\n    shift_amount = 4;\n  }\n  if (bit_offset + 4 < 7) {\n    bit_offset = 0;\n  }\n  else {\n    bit_offset = bit_offset - 3;\n  }\n  *output_value1 = (1 << (shift_amount & 0xff)) - 1U & input_value >> (bit_offset & 0xff);\n  *output_value2 = (1 << (bit_offset & 0xff)) - 1U & input_value;\n  return;\n}\n\n",
            "current_name": "extract_bits_from_uint_08006c04",
            "entrypoint": "0x08006c04",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c04": "extract_bits_from_uint_08006c04",
                "param_1": "input_value",
                "param_2": "bit_offset",
                "param_3": "output_value1",
                "param_4": "output_value2",
                "uVar1": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c70": {
            "additional_data": {
                "0xf": {
                    "barrier_value": 1,
                    "data_barrier_value": 1,
                    "sync_flag": 1,
                    "sync_value": 4,
                    "synchronization_flag": 1
                },
                "DataSynchronizationBarrier": {
                    "sync_barrier": 14,
                    "sync_memory": 1,
                    "synchronize_data": 9,
                    "synchronize_data_barrier": 1,
                    "wait": 1,
                    "wait_for_data_synchronization": 1
                },
                "FUN_08006c70": {
                    "continuous_loop": 4,
                    "data_synchronization_loop": 4,
                    "do_nothing_loop": 1,
                    "endless_loop": 3,
                    "infinite_loop": 6,
                    "loop_forever": 1,
                    "perform_infinite_loop": 1,
                    "run_infinite_loop": 10,
                    "wait_for_data_sync": 1
                },
                "f": {
                    "barrier_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08006d66"
            ],
            "code": "\nvoid run_infinite_loop_08006c70(void)\n\n{\n  sync_barrier(0xf);\n  sync_barrier(0xf);\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_08006c70",
            "entrypoint": "0x08006c70",
            "imported": false,
            "improved": true,
            "renaming": {
                "DataSynchronizationBarrier": "sync_barrier",
                "FUN_08006c70": "run_infinite_loop_08006c70"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006c9c": {
            "additional_data": {
                "FUN_08006b00": {
                    "byte_function": 1
                },
                "FUN_08006c9c": {
                    "check_and_configure_peripheral": 1,
                    "check_and_configure_priority": 1,
                    "check_and_set_priority": 9,
                    "check_and_update_priority": 1,
                    "initialize_hardware": 1,
                    "initialize_interrupt_handler": 1,
                    "initialize_irq_handler": 1,
                    "initialize_priority_and_flags": 1,
                    "initialize_system": 1,
                    "modify_priority_and_return_status": 1,
                    "process_input": 1,
                    "process_param": 1,
                    "set_and_configure_priority": 1,
                    "set_priority_and_config": 2,
                    "set_priority_and_configure": 1,
                    "set_priority_and_enable_interrupts": 1,
                    "set_priority_and_flag": 1,
                    "update_and_set_priority": 2,
                    "update_priority_and_flags": 1,
                    "update_priority_and_status": 1
                },
                "NVIC_SetPriority": {
                    "set_interrupt_priority": 2
                },
                "_DAT_e000e010": {
                    "data2": 1,
                    "interrupt_config": 1,
                    "interrupt_enabled": 1,
                    "irq_handler_enable": 1,
                    "mask_value": 1,
                    "new_value": 1,
                    "priority_level": 1,
                    "priority_value": 2,
                    "some_other_register": 1,
                    "system_value3": 1,
                    "variable2": 1
                },
                "_DAT_e000e014": {
                    "adjusted_value": 2,
                    "configured_address": 1,
                    "irq_handler_address": 1,
                    "modified_input_value": 1,
                    "output_value": 1,
                    "previous_input_value": 1,
                    "priority_value": 1,
                    "system_value1": 1,
                    "updated_value": 3
                },
                "_DAT_e000e018": {
                    "data1": 1,
                    "interrupt_flags": 1,
                    "irq_handler_priority": 1,
                    "new_value": 1,
                    "priority_level": 1,
                    "reset_value": 3,
                    "some_register": 1,
                    "system_value2": 1,
                    "unused_variable": 1,
                    "variable1": 1
                },
                "bVar1": {
                    "is_in_range": 10,
                    "is_input_valid": 2,
                    "is_less_than_one_million": 1,
                    "is_param_valid": 1,
                    "is_valid": 1,
                    "is_valid_input": 5,
                    "is_valid_irq": 1,
                    "is_valid_value": 1,
                    "is_value_valid": 4,
                    "is_within_range": 3
                },
                "param_1": {
                    "byte_param": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_value": 20,
                    "interrupt_index": 1,
                    "irq_number": 1,
                    "peripheral_id": 1,
                    "value": 5
                },
                "param_2": {
                    "uint_param": 1
                }
            },
            "called": [
                "FUN_08006b00"
            ],
            "calling": [
                "FUN_08006d72"
            ],
            "code": "\n\n\nbool check_and_set_priority_08006c9c(int input_value)\n\n{\n  bool is_in_range;\n  \n  is_in_range = input_value - 1U < 0x1000000;\n  if (is_in_range) {\n    _DAT_e000e014 = input_value + -1;\n    set_interrupt_priority(0xffffffff,0xf);\n    _DAT_e000e018 = 0;\n    _DAT_e000e010 = 7;\n  }\n  return !is_in_range;\n}\n\n",
            "current_name": "check_and_set_priority_08006c9c",
            "entrypoint": "0x08006c9c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006c9c": "check_and_set_priority_08006c9c",
                "NVIC_SetPriority": "set_interrupt_priority",
                "bVar1": "is_in_range",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006ce0": {
            "additional_data": {
                "FUN_08006950": {
                    "configure_interrupt": 3,
                    "do_something": 1,
                    "handle_interrupt": 4,
                    "handle_irq": 1,
                    "handle_priority": 1,
                    "initialize_interrupts": 1,
                    "process_data": 2,
                    "process_param": 2,
                    "process_parameter": 5,
                    "process_u_int": 1,
                    "process_uint": 1,
                    "reset_handler": 1,
                    "set_interrupt_priority": 1,
                    "set_priority": 4,
                    "update_interrupt_priority": 2
                },
                "FUN_08006ce0": {
                    "configure_priority_grouping": 2,
                    "set_interrupt_priority_group": 3,
                    "set_interrupt_priority_grouping": 3,
                    "set_nv_priority_grouping": 1,
                    "set_nvic_priority_grouping": 4,
                    "set_priority_group": 1,
                    "set_priority_grouping": 17
                },
                "param_1": {
                    "data": 2,
                    "grouping": 1,
                    "interrupt": 1,
                    "interrupt_config": 1,
                    "interrupt_number": 1,
                    "irq_number": 1,
                    "param": 2,
                    "priority": 1,
                    "priority_group": 15,
                    "priority_grouping": 1,
                    "priority_level": 2,
                    "priority_val": 1,
                    "reset_value": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_08006950"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nvoid set_nvic_priority_grouping_08006ce0(undefined4 priority_group)\n\n{\n  NVIC_SetPriorityGrouping(priority_group);\n  return;\n}\n\n",
            "current_name": "set_nvic_priority_grouping_08006ce0",
            "entrypoint": "0x08006ce0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006ce0": "set_nvic_priority_grouping_08006ce0",
                "param_1": "priority_group"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006cf6": {
            "additional_data": {
                "FUN_08006998": {
                    "get_priority_grouping": 26
                },
                "FUN_08006b00": {
                    "calculate_group_number": 1,
                    "configure_interrupt": 10,
                    "configure_interrupt_priority": 2,
                    "configure_interrupt_type": 1,
                    "configure_irq": 2,
                    "configure_priority": 1,
                    "disable_interrupt": 1,
                    "get_priority_bits": 1,
                    "set_group_priority": 1,
                    "set_interrupt_handler": 1,
                    "set_interrupt_priority_group": 1,
                    "set_priority": 1,
                    "set_priority_byte": 1,
                    "set_priority_level": 1,
                    "update_interrupt_priority": 1
                },
                "FUN_08006ba0": {
                    "calculate_nested_priority": 1,
                    "calculate_priority": 1,
                    "encode_interrupt_priority": 5,
                    "encode_priority": 17,
                    "encode_priority_value": 1,
                    "set_interrupt_config": 1
                },
                "FUN_08006cf6": {
                    "set_function_priority": 1,
                    "set_interrupt_priority": 14,
                    "set_priority": 5,
                    "set_priority_and_encoding": 2,
                    "set_priority_for_interrupt": 1,
                    "set_priority_level": 3,
                    "set_priority_of_interrupt": 1,
                    "set_priority_to_interrupt": 1,
                    "set_priority_using_encoded_value": 1,
                    "set_priority_with_encoded_value": 1
                },
                "param_1": {
                    "grouping": 1,
                    "interrupt_handler": 1,
                    "interrupt_name": 1,
                    "interrupt_number": 6,
                    "interrupt_source": 1,
                    "irq_number": 1,
                    "param1": 2,
                    "priority_group": 11,
                    "priority_grouping": 7
                },
                "param_2": {
                    "group_priority": 1,
                    "group_value": 1,
                    "grouping_option": 1,
                    "grouping_value": 1,
                    "param2": 2,
                    "preempt_priority": 12,
                    "preemption_priority": 5,
                    "priority": 3,
                    "priority_group": 3,
                    "priority_level": 1,
                    "sub_priority": 1
                },
                "param_3": {
                    "param3": 2,
                    "priority_group": 1,
                    "priority_level": 1,
                    "priority_sub": 1,
                    "priority_sub_group": 2,
                    "priority_subgroup": 1,
                    "sub_priority": 20,
                    "sub_priority_value": 2,
                    "subpriority": 1
                },
                "uVar1": {
                    "grouping": 1,
                    "priority": 6,
                    "priority_group": 10,
                    "priority_grouping": 9,
                    "priority_grouping_value": 2
                }
            },
            "called": [
                "FUN_08006b00",
                "FUN_08006ba0",
                "FUN_08006998"
            ],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid set_priority_to_interrupt_08006cf6(char priority_group,undefined4 preempt_priority,undefined4 sub_priority)\n\n{\n  undefined4 priority_group;\n  \n  priority_group = NVIC_GetPriorityGrouping();\n  priority_group = NVIC_EncodePriority(priority_group,preempt_priority,sub_priority);\n  NVIC_SetPriority((int)priority_group,priority_group);\n  return;\n}\n\n",
            "current_name": "set_priority_to_interrupt_08006cf6",
            "entrypoint": "0x08006cf6",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006cf6": "set_priority_to_interrupt_08006cf6",
                "param_1": "priority_group",
                "param_2": "preempt_priority",
                "param_3": "sub_priority",
                "uVar1": "priority_group"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d2e": {
            "additional_data": {
                "FUN_08006d2e": {
                    "set_bit_in_memory": 1,
                    "set_bit_value": 15,
                    "set_bit_value_in_memory": 11,
                    "set_value_in_memory": 1,
                    "update_memory_bit": 2,
                    "update_memory_value": 1
                },
                "param_1": {
                    "byte_to_set": 1,
                    "input_byte": 30
                },
                "set_bit_value_in_memory_080069b4": {
                    "set_bit_in_memory": 1,
                    "set_bit_value_in_memory": 9,
                    "set_memory_bit": 1
                }
            },
            "called": [
                "FUN_080069b4"
            ],
            "calling": [],
            "code": "\nvoid set_bit_value_in_memory_08006d2e(char input_byte)\n\n{\n  set_bit_value_in_memory_08006d2e((int)input_byte);\n  return;\n}\n\n",
            "current_name": "set_bit_value_in_memory_08006d2e",
            "entrypoint": "0x08006d2e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d2e": "set_bit_value_in_memory_08006d2e",
                "param_1": "input_byte",
                "set_bit_value_in_memory_080069b4": "set_bit_value_in_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d4a": {
            "additional_data": {
                "FUN_080069e4": {
                    "disable_interrupt": 2,
                    "disable_irq_subfunction": 2,
                    "disable_irq_with_byte": 1,
                    "disable_specific_irq": 1,
                    "execute_operation": 1,
                    "handle_irq": 1,
                    "perform_action": 1,
                    "process_byte": 4,
                    "set_interrupt_priority": 1
                },
                "FUN_08006d4a": {
                    "disable_interrupt": 11,
                    "disable_irq": 19,
                    "disable_nvicirq": 1
                },
                "param_1": {
                    "byte": 1,
                    "byte_value": 2,
                    "data": 2,
                    "interrupt": 1,
                    "interrupt_number": 5,
                    "irq_data": 1,
                    "irq_index": 1,
                    "irq_number": 16,
                    "operation_code": 1,
                    "priority": 1
                }
            },
            "called": [
                "FUN_080069e4"
            ],
            "calling": [],
            "code": "\nvoid disable_irq_08006d4a(char irq_number)\n\n{\n  NVIC_DisableIRQ((int)irq_number);\n  return;\n}\n\n",
            "current_name": "disable_irq_08006d4a",
            "entrypoint": "0x08006d4a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d4a": "disable_irq_08006d4a",
                "param_1": "irq_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d66": {
            "additional_data": {
                "FUN_08006c70": {
                    "execute_cleanup": 1,
                    "execute_reset": 1,
                    "handle_reset": 1,
                    "initialize_interrupts": 1,
                    "perform_check": 1,
                    "perform_cleanup": 10,
                    "perform_hardware_reset": 1,
                    "perform_initialization": 6,
                    "perform_reset": 4,
                    "perform_sub_function": 1,
                    "perform_system_reset": 1,
                    "perform_task": 1,
                    "print_message": 1,
                    "reset_interrupts": 1
                },
                "FUN_08006d66": {
                    "reset_device": 1,
                    "reset_system": 27,
                    "system_reset": 3
                }
            },
            "called": [
                "FUN_08006c70"
            ],
            "calling": [],
            "code": "\nvoid system_reset_08006d66(void)\n\n{\n  NVIC_SystemReset();\n  return;\n}\n\n",
            "current_name": "system_reset_08006d66",
            "entrypoint": "0x08006d66",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d66": "system_reset_08006d66"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d72": {
            "additional_data": {
                "FUN_08006d72": {
                    "configure_sys_tick": 11,
                    "configure_sys_tick_timer": 1,
                    "configure_systick": 1,
                    "init_sys_tick_config": 1,
                    "initialize_sys_tick": 17
                },
                "param_1": {
                    "config": 1,
                    "config_param": 1,
                    "config_value": 26,
                    "new_config_value": 1,
                    "ticks": 1,
                    "timer_interval": 1
                },
                "uVar1": {
                    "config_result": 5,
                    "config_status": 2,
                    "result": 9,
                    "return_value": 1,
                    "status": 5,
                    "systick_config_result": 3
                }
            },
            "called": [
                "FUN_08006c9c"
            ],
            "calling": [
                "FUN_080059b4"
            ],
            "code": "\nundefined4 initialize_sys_tick_08006d72(undefined4 config_value)\n\n{\n  undefined4 result;\n  \n  result = SysTick_Config(config_value);\n  return result;\n}\n\n",
            "current_name": "initialize_sys_tick_08006d72",
            "entrypoint": "0x08006d72",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d72": "initialize_sys_tick_08006d72",
                "param_1": "config_value",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d8a": {
            "additional_data": {
                "FUN_08006998": {
                    "get_priority": 7
                },
                "FUN_08006d8a": {
                    "get_nvic_priority_grouping": 1,
                    "get_priority_grouping": 30
                },
                "NVIC_GetPriorityGrouping": {
                    "get_current_priority_grouping": 1,
                    "get_priority_grouping_value": 1,
                    "retrieve_priority_grouping": 1
                },
                "uVar1": {
                    "priority_group": 6,
                    "priority_grouping": 24
                }
            },
            "called": [
                "FUN_08006998"
            ],
            "calling": [],
            "code": "\nundefined4 get_nvic_priority_grouping_08006d8a(void)\n\n{\n  undefined4 priority_grouping;\n  \n  priority_grouping = retrieve_priority_grouping();\n  return priority_grouping;\n}\n\n",
            "current_name": "get_nvic_priority_grouping_08006d8a",
            "entrypoint": "0x08006d8a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d8a": "get_nvic_priority_grouping_08006d8a",
                "NVIC_GetPriorityGrouping": "retrieve_priority_grouping",
                "uVar1": "priority_grouping"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006d98": {
            "additional_data": {
                "FUN_08006b54": {
                    "decode_byte": 8,
                    "decode_priority": 1,
                    "decode_priority_byte": 1,
                    "decode_priority_value": 1,
                    "get_priority": 1
                },
                "FUN_08006c04": {
                    "decode_and_set_priority": 3,
                    "decode_and_set_priority_level": 1,
                    "decode_and_set_priority_levels": 1,
                    "decode_and_set_priority_values": 2,
                    "decode_priority": 4,
                    "decode_priority_and_set": 1
                },
                "FUN_08006d98": {
                    "decode_and_get_priority": 1,
                    "decode_and_improve_priority": 1,
                    "decode_and_set_interrupt_priority": 2,
                    "decode_and_set_priority": 20,
                    "decode_priority": 5,
                    "decode_priority_data": 1,
                    "decode_priority_wrapper": 1
                },
                "param_1": {
                    "byte_to_decode": 2,
                    "char_value": 1,
                    "data": 1,
                    "device_identifier": 1,
                    "input": 3,
                    "input1": 1,
                    "input_byte": 4,
                    "input_char": 2,
                    "input_character": 5,
                    "input_param": 3,
                    "input_parameter": 1,
                    "input_value": 3,
                    "interrupt_handler": 1,
                    "interrupt_num": 1,
                    "priority_group": 1,
                    "priority_value_1": 1
                },
                "param_2": {
                    "decoded_byte_1": 1,
                    "decoded_param_1": 1,
                    "decoded_priority_1": 2,
                    "input2": 1,
                    "output": 1,
                    "output_param": 1,
                    "output_param_1": 6,
                    "output_parameter_1": 2,
                    "param_2": 2,
                    "priority1": 1,
                    "priority_1": 3,
                    "priority_bits": 1,
                    "priority_group": 2,
                    "priority_level": 1,
                    "priority_level_1": 2,
                    "priority_param_1": 1,
                    "priority_value_1": 2,
                    "priority_value_2": 1
                },
                "param_3": {
                    "address_param": 1,
                    "decoded_byte_2": 1,
                    "decoded_param_2": 1,
                    "decoded_priority_2": 2,
                    "decoded_value1": 1,
                    "decoded_value_1": 1,
                    "output1": 1,
                    "output_param_2": 6,
                    "output_parameter_2": 2,
                    "param_1_result": 1,
                    "param_3": 2,
                    "preempt_priority": 1,
                    "preemption_priority": 1,
                    "priority2": 1,
                    "priority_2": 2,
                    "priority_level_2": 2,
                    "priority_param_2": 1,
                    "priority_value_2": 2,
                    "sub_priority": 1,
                    "temp1": 1
                },
                "param_4": {
                    "decoded_byte_3": 1,
                    "decoded_param_3": 1,
                    "decoded_priority_3": 2,
                    "decoded_value2": 1,
                    "decoded_value_2": 1,
                    "output2": 1,
                    "output_param_3": 6,
                    "output_parameter_3": 2,
                    "param_2_result": 1,
                    "param_4": 2,
                    "preempt_priority": 1,
                    "priority3": 1,
                    "priority_3": 2,
                    "priority_level_3": 2,
                    "priority_param_3": 1,
                    "priority_value_3": 2,
                    "size_param": 1,
                    "sub_priority": 2,
                    "temp2": 1
                },
                "uVar1": {
                    "decoded_priority_value": 1,
                    "interrupt_priority": 1,
                    "priority": 16,
                    "priority_level": 1,
                    "priority_value": 11
                }
            },
            "called": [
                "FUN_08006b54",
                "FUN_08006c04"
            ],
            "calling": [],
            "code": "\nvoid decode_and_set_interrupt_priority_08006d98(char input_character,undefined4 output_param_1,undefined4 output_param_2,undefined4 output_param_3)\n\n{\n  undefined4 priority;\n  \n  priority = NVIC_GetPriority((int)input_character);\n  NVIC_DecodePriority(priority,output_param_1,output_param_2,output_param_3);\n  return;\n}\n\n",
            "current_name": "decode_and_set_interrupt_priority_08006d98",
            "entrypoint": "0x08006d98",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006d98": "decode_and_set_interrupt_priority_08006d98",
                "param_1": "input_character",
                "param_2": "output_param_1",
                "param_3": "output_param_2",
                "param_4": "output_param_3",
                "uVar1": "priority"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dc4": {
            "additional_data": {
                "FUN_08006a58": {
                    "handle_byte": 1,
                    "handle_interrupt": 2,
                    "handle_irq": 3,
                    "notify_interrupt": 1,
                    "process_byte": 1,
                    "process_irq": 1
                },
                "FUN_08006dc4": {
                    "pending_irq": 1,
                    "set_irq": 1,
                    "set_irq_as_pending": 1,
                    "set_irq_pending": 2,
                    "set_pending_interrupt": 2,
                    "set_pending_irq": 20,
                    "trigger_interrupt": 1,
                    "trigger_irq": 2,
                    "trigger_pending_irq": 1
                },
                "param_1": {
                    "byte_to_process": 1,
                    "byte_value": 2,
                    "interrupt_channel": 1,
                    "interrupt_flag": 1,
                    "interrupt_number": 4,
                    "irq_data": 1,
                    "irq_num": 1,
                    "irq_number": 20
                }
            },
            "called": [
                "FUN_08006a58"
            ],
            "calling": [],
            "code": "\nvoid set_irq_as_pending_08006dc4(char irq_number)\n\n{\n  NVIC_SetPendingIRQ((int)irq_number);\n  return;\n}\n\n",
            "current_name": "set_irq_as_pending_08006dc4",
            "entrypoint": "0x08006dc4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dc4": "set_irq_as_pending_08006dc4",
                "param_1": "irq_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006de0": {
            "additional_data": {
                "FUN_08006de0": {
                    "get_irq": 1,
                    "get_irq_status": 1,
                    "get_pending_interrupt": 6,
                    "get_pending_irq": 15,
                    "get_pending_irq_status": 8
                },
                "NVIC_GetPendingIRQ": {
                    "check_interrupt_pending": 1
                },
                "param_1": {
                    "interrupt": 1,
                    "interrupt_id": 2,
                    "interrupt_number": 4,
                    "irq": 2,
                    "irq_num": 1,
                    "irq_number": 21
                },
                "uVar1": {
                    "irq_status": 2,
                    "is_pending": 1,
                    "pending_irq": 9,
                    "pending_status": 1,
                    "status": 3
                }
            },
            "called": [
                "FUN_08006a18"
            ],
            "calling": [],
            "code": "\nundefined4 get_pending_irq_status_08006de0(char irq_number)\n\n{\n  undefined4 pending_irq;\n  \n  pending_irq = check_interrupt_pending((int)irq_number);\n  return pending_irq;\n}\n\n",
            "current_name": "get_pending_irq_status_08006de0",
            "entrypoint": "0x08006de0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006de0": "get_pending_irq_status_08006de0",
                "NVIC_GetPendingIRQ": "check_interrupt_pending",
                "param_1": "irq_number",
                "uVar1": "pending_irq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006dfe": {
            "additional_data": {
                "FUN_08006a8c": {
                    "clear_irq": 3,
                    "clear_pending_flag": 1,
                    "clear_pending_irq": 1,
                    "clear_pending_irq_byte": 1,
                    "clear_pending_irq_helper": 2,
                    "clear_pending_irq_internal": 2,
                    "clear_register": 1,
                    "handle_irq": 1,
                    "process_byte": 1
                },
                "FUN_08006dfe": {
                    "clear_irq": 3,
                    "clear_irq_flag": 1,
                    "clear_pending_interrupt": 1,
                    "clear_pending_irq": 26
                },
                "param_1": {
                    "byte": 1,
                    "interrupt_number": 5,
                    "irq": 1,
                    "irq_byte": 2,
                    "irq_flag": 1,
                    "irq_number": 19,
                    "irq_number_internal": 1,
                    "irq_type": 1
                }
            },
            "called": [
                "FUN_08006a8c"
            ],
            "calling": [],
            "code": "\nvoid clear_pending_irq_08006dfe(char irq_number)\n\n{\n  NVIC_ClearPendingIRQ((int)irq_number);\n  return;\n}\n\n",
            "current_name": "clear_pending_irq_08006dfe",
            "entrypoint": "0x08006dfe",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006dfe": "clear_pending_irq_08006dfe",
                "param_1": "irq_number"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e1a": {
            "additional_data": {
                "FUN_08006e1a": {
                    "check_active_interrupt": 1,
                    "get_active_interrupt": 23,
                    "get_active_interrupt_priority": 1,
                    "get_active_interrupts": 1,
                    "get_active_irq": 2,
                    "get_active_irq_handler": 1,
                    "get_active_irq_number": 1,
                    "get_active_irq_status": 1
                },
                "param_1": {
                    "interrupt": 2,
                    "interrupt_handler": 1,
                    "interrupt_id": 8,
                    "interrupt_number": 14,
                    "interrupt_priority": 1,
                    "irq_number": 5
                },
                "uVar1": {
                    "active_handler": 1,
                    "active_interrupt": 5,
                    "active_interrupt_priority": 1,
                    "active_interrupt_status": 1,
                    "active_interrupts": 1,
                    "active_irq": 1,
                    "active_irq_number": 1,
                    "active_status": 9
                }
            },
            "called": [
                "FUN_08006ac0"
            ],
            "calling": [],
            "code": "\nundefined4 get_active_interrupt_priority_08006e1a(char interrupt_number)\n\n{\n  undefined4 active_status;\n  \n  active_status = NVIC_GetActive((int)interrupt_number);\n  return active_status;\n}\n\n",
            "current_name": "get_active_interrupt_priority_08006e1a",
            "entrypoint": "0x08006e1a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e1a": "get_active_interrupt_priority_08006e1a",
                "param_1": "interrupt_number",
                "uVar1": "active_status"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08006e88": {
            "additional_data": {
                "FUN_08006e88": {
                    "set_bit_values": 1,
                    "update_bit_fields": 1,
                    "update_bits": 1,
                    "update_config": 2,
                    "update_configuration": 1,
                    "update_control_flags": 1,
                    "update_data": 1,
                    "update_flags": 2,
                    "update_flags_and_registers": 1,
                    "update_param_values": 2,
                    "update_parameters": 9,
                    "update_params": 5,
                    "update_register_data": 1,
                    "update_registers": 2,
                    "update_settings": 1
                },
                "iVar3": {
                    "config_index": 2,
                    "index": 17,
                    "param_index": 4,
                    "region_index": 1,
                    "register_index": 3,
                    "switch_index": 1,
                    "var_index": 3
                },
                "local_c": {
                    "bit_index": 7,
                    "bit_position": 3,
                    "counter": 9,
                    "i": 1,
                    "index": 3,
                    "loop_counter": 4,
                    "loop_index": 4
                },
                "param_1": {
                    "config": 2,
                    "config_data": 1,
                    "control_flags": 1,
                    "current_state": 1,
                    "current_values": 1,
                    "data_array": 1,
                    "destination": 2,
                    "old_parameters": 1,
                    "old_params": 1,
                    "original_params": 1,
                    "output": 1,
                    "output_params": 6,
                    "param_buffer": 1,
                    "register_data": 1,
                    "register_list": 1,
                    "registers": 1,
                    "settings": 1,
                    "source_data": 1,
                    "target": 1,
                    "target_array": 1,
                    "target_data": 1,
                    "target_params": 3
                },
                "param_2": {
                    "bit_fields": 1,
                    "input": 3,
                    "input_array": 1,
                    "input_data": 3,
                    "input_flags": 1,
                    "input_params": 6,
                    "input_registers": 1,
                    "new_parameters": 1,
                    "new_params": 2,
                    "new_state": 1,
                    "new_values": 1,
                    "param_constraints": 1,
                    "source": 3,
                    "source_array": 1,
                    "source_data": 1,
                    "source_params": 3,
                    "update": 1
                },
                "uVar1": {
                    "bit_flag": 1,
                    "bit_mask": 25,
                    "bit_value": 1,
                    "mask": 4
                },
                "uVar2": {
                    "bit": 3,
                    "bit_and_result": 1,
                    "bit_check": 10,
                    "bit_result": 3,
                    "bit_value": 8,
                    "check_flag": 1,
                    "mask_result": 1,
                    "masked_value": 2,
                    "result": 1,
                    "updated_bit": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800640c",
                "FUN_0800778c"
            ],
            "code": "\n\n\nvoid update_parameters_08006e88(uint *output_params,uint *input_params)\n\n{\n  uint bit_mask;\n  uint bit_check;\n  int index;\n  uint counter;\n  \n  for (counter = 0; counter < 0x10; counter = counter + 1) {\n    bit_mask = 1 << (counter & 0xff);\n    bit_check = *input_params & bit_mask;\n    if (bit_check == bit_mask) {\n      if ((input_params[1] == 2) || (input_params[1] == 0x12)) {\n        bit_mask = input_params[4];\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] & ~(0xf << ((counter & 7) << 2));\n        output_params[(counter >> 3) + 8] = output_params[(counter >> 3) + 8] | bit_mask << ((counter & 7) << 2);\n      }\n      *output_params = *output_params & ~(3 << ((counter & 0x7f) << 1));\n      *output_params = *output_params | (input_params[1] & 3) << ((counter & 0x7f) << 1);\n      if ((((input_params[1] == 1) || (input_params[1] == 2)) || (input_params[1] == 0x11)) || (input_params[1] == 0x12)\n         ) {\n        output_params[2] = output_params[2] & ~(3 << ((counter & 0x7f) << 1));\n        output_params[2] = output_params[2] | input_params[3] << ((counter & 0x7f) << 1);\n        output_params[1] = output_params[1] & ~(1 << (counter & 0xff));\n        output_params[1] = output_params[1] | (input_params[1] >> 4 & 1) << (counter & 0xff);\n      }\n      output_params[3] = output_params[3] & ~(3 << ((counter & 0x7f) << 1));\n      output_params[3] = output_params[3] | input_params[2] << ((counter & 0x7f) << 1);\n      if ((input_params[1] & 0x10000000) != 0) {\n        _DAT_40023844 = _DAT_40023844 | 0x4000;\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             ~(0xf << ((counter & 3) << 2)) & *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        if (output_params == (uint *)0x40020000) {\n          index = 0;\n        }\n        else if (output_params == (uint *)0x40020400) {\n          index = 1;\n        }\n        else if (output_params == (uint *)0x40020800) {\n          index = 2;\n        }\n        else if (output_params == (uint *)0x40020c00) {\n          index = 3;\n        }\n        else if (output_params == (uint *)0x40021000) {\n          index = 4;\n        }\n        else if (output_params == (uint *)0x40021400) {\n          index = 5;\n        }\n        else if (output_params == (uint *)0x40021800) {\n          index = 6;\n        }\n        else if (output_params == (uint *)0x40021c00) {\n          index = 7;\n        }\n        else if (output_params == (uint *)0x40022000) {\n          index = 8;\n        }\n        else if (output_params == (uint *)0x40022400) {\n          index = 9;\n        }\n        else {\n          index = 10;\n        }\n        *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800) =\n             index << ((counter & 3) << 2) | *(uint *)(((counter >> 2) + 2) * 4 + 0x40013800);\n        _DAT_40013c00 = ~bit_check & _DAT_40013c00;\n        _DAT_40013c04 = ~bit_check & _DAT_40013c04;\n        if ((input_params[1] & 0x10000) != 0) {\n          _DAT_40013c00 = bit_check | _DAT_40013c00;\n        }\n        if ((input_params[1] & 0x20000) != 0) {\n          _DAT_40013c04 = bit_check | _DAT_40013c04;\n        }\n        _DAT_40013c08 = ~bit_check & _DAT_40013c08;\n        _DAT_40013c0c = ~bit_check & _DAT_40013c0c;\n        if ((input_params[1] & 0x100000) != 0) {\n          _DAT_40013c08 = bit_check | _DAT_40013c08;\n        }\n        if ((input_params[1] & 0x200000) != 0) {\n          _DAT_40013c0c = bit_check | _DAT_40013c0c;\n        }\n      }\n    }\n  }\n  return;\n}\n\n",
            "current_name": "update_parameters_08006e88",
            "entrypoint": "0x08006e88",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08006e88": "update_parameters_08006e88",
                "iVar3": "index",
                "local_c": "counter",
                "param_1": "output_params",
                "param_2": "input_params",
                "uVar1": "bit_mask",
                "uVar2": "bit_check"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800733e": {
            "additional_data": {
                "0x18": {
                    "offset_b": 1,
                    "offset_for_second_value": 1,
                    "second_param_offset": 1,
                    "second_value_offset": 1,
                    "secondary_offset": 1,
                    "updated_data_address2": 1
                },
                "0x1a": {
                    "first_param_offset": 1,
                    "first_value_offset": 1,
                    "offset_a": 1,
                    "offset_for_first_value": 1,
                    "primary_offset": 1,
                    "updated_data_address1": 1
                },
                "FUN_0800733e": {
                    "assign_param_to_field": 1,
                    "assign_param_to_offset": 1,
                    "assign_param_value": 1,
                    "assign_parameter": 1,
                    "assign_parameter_value": 1,
                    "assign_parameter_value_based_on_condition": 1,
                    "assign_value_to_param": 1,
                    "set_flag_value": 2,
                    "set_param_value": 4,
                    "set_value_at_offset": 1,
                    "update_data": 4,
                    "update_param": 4,
                    "update_param_value": 4,
                    "update_parameter": 3,
                    "update_parameter_if_needed": 1,
                    "update_parameter_value": 1
                },
                "___": {
                    "temp_var": 1
                },
                "param_1": {
                    "base_address": 7,
                    "data": 1,
                    "data_address": 5,
                    "data_pointer": 2,
                    "data_structure_ptr": 1,
                    "flag_address": 1,
                    "flag_structure": 1,
                    "function_param": 1,
                    "obj_address": 2,
                    "object_address": 4,
                    "struct_address": 1,
                    "struct_ptr": 2,
                    "target_address": 3
                },
                "param_2": {
                    "flag_value": 1,
                    "new_data": 4,
                    "new_param_value": 1,
                    "new_value": 12,
                    "param_value": 1,
                    "updated_value": 1,
                    "value": 9,
                    "value_to_assign": 2
                },
                "param_3": {
                    "check_needed": 1,
                    "condition": 2,
                    "condition_flag": 2,
                    "flag": 4,
                    "is_non_null": 1,
                    "is_not_null": 2,
                    "is_second_param": 4,
                    "is_second_value": 3,
                    "is_secondary": 3,
                    "is_secondary_flag": 1,
                    "is_set": 1,
                    "is_special": 1,
                    "is_special_case": 1,
                    "is_update_needed": 1,
                    "is_value_default": 1,
                    "is_value_set": 1,
                    "is_zero": 2
                },
                "param_4": {
                    "is_non_null": 1,
                    "new_param": 1
                },
                "param_5": {
                    "is_non_null": 1
                },
                "param_6": {
                    "is_non_null": 1
                },
                "param_7": {
                    "is_non_null": 1
                },
                "ptr_value_1": {
                    "first_ptr": 1
                },
                "ptr_value_2": {
                    "second_ptr": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800778c"
            ],
            "code": "\nvoid update_param_value_0800733e(int base_address,undefined2 new_value,char flag)\n\n{\n  if (flag == '\\0') {\n    *(undefined2 *)(base_address + 0x1a) = new_value;\n  }\n  else {\n    *(undefined2 *)(base_address + 0x18) = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_param_value_0800733e",
            "entrypoint": "0x0800733e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800733e": "update_param_value_0800733e",
                "param_1": "base_address",
                "param_2": "new_value",
                "param_3": "flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800738e": {
            "additional_data": {
                "FUN_0800738e": {
                    "check_and_callback": 1,
                    "check_and_update_gpio_callback": 1,
                    "check_and_update_param": 1,
                    "handle_external_interrupt": 2,
                    "handle_gpio_ext_interrupt": 1,
                    "handle_gpio_exti": 2,
                    "handle_gpio_exti_callback": 2,
                    "handle_gpio_exti_event": 1,
                    "handle_gpio_interrupt": 3,
                    "handle_interrupt": 1,
                    "process_gpio_exti": 1,
                    "process_param": 1,
                    "update_and_callback": 2,
                    "update_gpio_and_call_callback": 1,
                    "update_gpio_and_callback": 2,
                    "update_gpio_callback": 1,
                    "update_gpio_exti": 1,
                    "update_gpio_exti_callback": 2,
                    "update_gpio_interrupt": 4,
                    "update_interrupt_and_callback": 1
                },
                "HAL_GPIO_EXTI_Callback": {
                    "external_interrupt_callback": 1,
                    "handle_external_interrupt": 1,
                    "handle_gpio_exti": 1,
                    "handle_gpio_exti_callback": 1,
                    "handle_gpio_exti_interrupt": 1,
                    "handle_gpio_interrupt": 5,
                    "update_gpio_callback": 1
                },
                "_DAT_40013c14": {
                    "config": 1,
                    "gpio_exti_config": 1,
                    "gpio_exti_data": 1,
                    "gpio_exti_mask": 2,
                    "gpio_interrupt_flag": 1,
                    "gpio_interrupt_mask": 2,
                    "gpio_mask": 1,
                    "gpio_register": 1,
                    "gpio_register_value": 1,
                    "gpio_state": 1,
                    "interrupt_mask": 2,
                    "interrupt_setting": 1
                },
                "param_1": {
                    "callback_value": 1,
                    "data": 1,
                    "event": 1,
                    "gpio_exti_param": 1,
                    "gpio_pin": 1,
                    "input": 1,
                    "input_param": 1,
                    "input_pin": 1,
                    "input_value": 7,
                    "interrupt_config": 1,
                    "interrupt_flag": 2,
                    "interrupt_flags": 1,
                    "interrupt_number": 2,
                    "interrupt_pin": 4,
                    "interrupt_source": 4,
                    "new_state": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_080073c0"
            ],
            "calling": [],
            "code": "\n\n\nvoid check_and_update_gpio_callback_0800738e(ushort input_value)\n\n{\n  if ((input_value & _DAT_40013c14) != 0) {\n    _DAT_40013c14 = (uint)input_value;\n    handle_gpio_interrupt(input_value);\n  }\n  return;\n}\n\n",
            "current_name": "check_and_update_gpio_callback_0800738e",
            "entrypoint": "0x0800738e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800738e": "check_and_update_gpio_callback_0800738e",
                "HAL_GPIO_EXTI_Callback": "handle_gpio_interrupt",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080073c0": {
            "called": [],
            "calling": [
                "FUN_0800738e"
            ],
            "code": "\nvoid FUNC_080073c0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080073c0",
            "entrypoint": "0x080073c0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080073c0": "FUNC_080073c0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080073d4": {
            "additional_data": {
                "FUN_080073d4": {
                    "set_bit": 2,
                    "set_bit_at_index": 1,
                    "set_bit_in_array": 2,
                    "set_bit_in_memory": 14,
                    "set_bit_in_short_array": 1,
                    "set_bit_value": 2,
                    "set_bit_value_at_address": 1,
                    "store_bit_value": 1,
                    "update_bit_in_memory": 1,
                    "update_bitfield": 1,
                    "update_bitmask": 1,
                    "update_memory": 1,
                    "update_memory_value": 1,
                    "write_bit_pattern": 1
                },
                "param_1": {
                    "bit_index": 2,
                    "bit_position": 5,
                    "index": 2,
                    "input": 5,
                    "input_index": 1,
                    "input_number": 1,
                    "input_value": 11,
                    "position": 1,
                    "value": 2
                },
                "short": {
                    "short": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08007520"
            ],
            "code": "\nvoid set_bit_in_memory_080073d4(uint input_value)\n\n{\n  *(short *)(((int)input_value >> 4) * 0x400 + 0x4002001a) = (short)(1 << (input_value & 0xf));\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080073d4",
            "entrypoint": "0x080073d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080073d4": "set_bit_in_memory_080073d4",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007402": {
            "additional_data": {
                "0x400": {
                    "offset": 1,
                    "offset_factor": 1,
                    "offset_multiplier": 1
                },
                "0x40020018": {
                    "base_address": 2,
                    "memory_address": 2,
                    "memory_base_address": 1
                },
                "FUN_08007402": {
                    "set_bit": 1,
                    "set_bit_at_offset": 1,
                    "set_bit_in_memory": 9,
                    "set_bit_in_short_array": 1,
                    "set_bit_value": 1,
                    "set_bit_value_at_address": 1,
                    "set_bits_in_memory": 2,
                    "store_bit_in_memory": 3,
                    "update_memory": 1,
                    "update_memory_at_offset": 1,
                    "update_memory_value": 3,
                    "update_value_in_memory": 1,
                    "write_bit_to_memory": 3,
                    "write_bitmask_value": 1,
                    "write_to_memory": 2
                },
                "int": {
                    "index": 1,
                    "memory_address": 1,
                    "scaled_address": 1
                },
                "param_1": {
                    "address": 4,
                    "bit_index": 1,
                    "bit_position": 2,
                    "input": 7,
                    "input_number": 1,
                    "input_value": 9,
                    "memory_address": 1,
                    "memory_index": 1,
                    "offset": 1,
                    "value": 4
                },
                "short": {
                    "data": 1,
                    "int16": 1,
                    "memory_value": 1,
                    "short": 3,
                    "ushort": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080074c8"
            ],
            "code": "\nvoid set_bit_in_memory_08007402(uscaled_address input_value)\n\n{\n  *(short *)(((scaled_address)input_value >> 4) * 0x400 + 0x40020018) = (short)(1 << (input_value & 0xf));\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_08007402",
            "entrypoint": "0x08007402",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007402": "set_bit_in_memory_08007402",
                "int": "scaled_address",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007430": {
            "additional_data": {
                "DAT_08007430": {
                    "infinite_loop_data": 1
                },
                "DW_DUMMY": {
                    "dummy": 1
                },
                "FUN_08007430": {
                    "infinite_do_nothing_loop": 1,
                    "infinite_loop": 26,
                    "run_infinite_loop": 2,
                    "wait_for_infinite_loop": 1,
                    "wait_forever": 1
                },
                "do": {
                    "do": 5,
                    "loop": 2,
                    "repeat": 1,
                    "repeating_action": 1,
                    "while": 1
                },
                "loopCondition": {
                    "true": 1
                },
                "true": {
                    "always_true": 1,
                    "true": 7
                }
            },
            "called": [],
            "calling": [
                "FUN_08007436"
            ],
            "code": "\nvoid run_infinite_loop_08007430(void)\n\n{\n  do {\n                    /* WARNING: Do nothing block with infinite loop */\n  } while( true );\n}\n\n",
            "current_name": "run_infinite_loop_08007430",
            "entrypoint": "0x08007430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007430": "run_infinite_loop_08007430"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007436": {
            "additional_data": {
                "Error_Handler": {
                    "handle_error": 3
                },
                "FUN_08005cec": {
                    "configure_oscillator": 1,
                    "configure_periph1": 1
                },
                "FUN_0800618c": {
                    "configure_clock_source": 1,
                    "configure_periph2": 1
                },
                "FUN_08007430": {
                    "configure_oscillator": 1,
                    "initialize_oscillator": 1
                },
                "FUN_08007436": {
                    "configure_clock": 1,
                    "configure_clocks": 1,
                    "configure_hardware": 3,
                    "configure_oscillators": 1,
                    "configure_rcc": 3,
                    "configure_system": 2,
                    "configure_system_settings": 1,
                    "initialize_clock": 1,
                    "initialize_hardware": 3,
                    "initialize_system": 14,
                    "initialize_system_clock": 1
                },
                "HAL_RCC_ClockConfig": {
                    "configure_clock": 7
                },
                "HAL_RCC_OscConfig": {
                    "configure_oscillator": 8
                },
                "iVar1": {
                    "error_code": 1,
                    "result": 6,
                    "result1": 2,
                    "status": 2
                },
                "local_10": {
                    "ahb_clock_divider": 1,
                    "ahb_config": 1,
                    "ahb_divider": 1,
                    "ahbclk_freq": 1,
                    "apb2_clock": 1,
                    "apb2_clock_divider": 1,
                    "apb2_divider": 1,
                    "apb2_prescaler": 4,
                    "apb2clk_divider": 1,
                    "clock_config10": 2,
                    "clock_config4": 1,
                    "clock_config5": 1,
                    "clock_config_flag4": 1,
                    "clock_config_param4": 7,
                    "clock_configuration_param4": 1,
                    "error_address": 1,
                    "option12": 1,
                    "pclk1_value": 1,
                    "pll_timeout": 1,
                    "unused_variable9": 1,
                    "value6": 1
                },
                "local_14": {
                    "adc_prescaler": 1,
                    "apb1_clock": 1,
                    "apb1_clock_divider": 1,
                    "apb1_divider": 1,
                    "apb1_prescaler": 4,
                    "apb1clk_divider": 1,
                    "apb2clk_divider": 1,
                    "clock_config3": 1,
                    "clock_config4": 1,
                    "clock_config9": 2,
                    "clock_config_flag3": 1,
                    "clock_config_param3": 7,
                    "clock_configuration_param3": 1,
                    "error_value2": 1,
                    "lsi_value": 1,
                    "option11": 1,
                    "sys_clock_config": 1,
                    "sysclk_source_config": 1,
                    "unused_variable8": 1,
                    "value5": 1
                },
                "local_18": {
                    "ahb_clock": 1,
                    "ahb_clock_divider": 1,
                    "ahb_divider": 1,
                    "ahb_prescaler": 4,
                    "ahbclk_divider": 1,
                    "apb1clk_divider": 1,
                    "clock_config2": 1,
                    "clock_config3": 1,
                    "clock_config8": 2,
                    "clock_config_flag2": 1,
                    "clock_config_param2": 7,
                    "clock_configuration_param2": 1,
                    "clock_source_divider": 1,
                    "clock_source_index": 1,
                    "hcl_value": 1,
                    "option10": 1,
                    "sys_clock_divider": 1,
                    "unused_variable7": 1,
                    "value4": 1,
                    "voltage_scale_config": 1
                },
                "local_1c": {
                    "apb2_prescaler": 1,
                    "clock_config": 2,
                    "clock_config1": 1,
                    "clock_config2": 1,
                    "clock_config7": 2,
                    "clock_config_flag1": 1,
                    "clock_config_param1": 7,
                    "clock_configuration_param1": 1,
                    "clock_source": 1,
                    "clock_source_value": 1,
                    "lsl_value": 1,
                    "option9": 1,
                    "pwr_config": 1,
                    "rcc_clock_source": 1,
                    "sys_clock_config": 1,
                    "sys_clock_source": 1,
                    "sysclk_div": 1,
                    "sysclk_source": 4,
                    "system_clock_frequency": 1,
                    "systick_source": 1
                },
                "local_20": {
                    "ahb_prescaler": 1,
                    "apb1_prescaler": 1,
                    "apb2_timer_clock": 1,
                    "clock_config": 1,
                    "clock_config6": 2,
                    "config_flag8": 1,
                    "config_param8": 4,
                    "configuration_param8": 1,
                    "error_code": 1,
                    "flash_latency": 1,
                    "hclk_config": 1,
                    "hse_value": 1,
                    "option8": 1,
                    "osc_config_param8": 3,
                    "oscillator_config8": 1,
                    "pclk1_frequency": 1,
                    "pll_config_flag": 1,
                    "pll_multiplier": 1,
                    "rcc_plli2_sn": 1,
                    "sysclk_config": 1,
                    "sysclk_source": 1,
                    "system_clock_source": 1,
                    "system_clock_switch": 1,
                    "unused_variable6": 1,
                    "value3": 1
                },
                "local_24": {
                    "ahb_prescaler": 1,
                    "clock_config5": 2,
                    "config_flag7": 1,
                    "config_param7": 4,
                    "configuration_param7": 1,
                    "error_value": 1,
                    "flash_wait_states": 1,
                    "hsi_state": 1,
                    "option7": 1,
                    "osc_config_param7": 3,
                    "osc_pll_div": 1,
                    "oscillator_config7": 1,
                    "oscillator_config_flag3": 1,
                    "pclk2_frequency": 1,
                    "pll_coeff": 1,
                    "pll_state": 1,
                    "pllm": 1,
                    "rcc_plln": 1,
                    "sys_clock_src": 1,
                    "sysclk_config": 1,
                    "unused_variable5": 1,
                    "value2": 1,
                    "voltage_scale": 1
                },
                "local_28": {
                    "clock_config4": 2,
                    "config_flag6": 1,
                    "config_param6": 4,
                    "configuration_param6": 1,
                    "flash_latency": 1,
                    "halt_config_index": 1,
                    "hclk_frequency": 1,
                    "hsitrimming_value": 1,
                    "option6": 1,
                    "osc_config_param6": 3,
                    "osc_freq": 1,
                    "osc_pll_mul": 1,
                    "oscillator_config6": 2,
                    "oscillator_divider": 1,
                    "pll_config": 1,
                    "plln": 1,
                    "rcc_pllp": 1,
                    "sys_clock_freq": 1,
                    "sys_freq": 1,
                    "sysclk_frequency": 1,
                    "unused_variable4": 1,
                    "value1": 1,
                    "voltage_scale": 1,
                    "voltage_scaling": 1
                },
                "local_2c": {
                    "clock_config": 1,
                    "clock_config3": 2,
                    "clock_divider": 1,
                    "clock_src": 1,
                    "config_flag5": 1,
                    "config_param5": 4,
                    "configuration_param5": 1,
                    "flash_latency": 1,
                    "halt_config_value": 1,
                    "hse_state": 1,
                    "option5": 1,
                    "osc_config_param5": 3,
                    "osc_pll_source": 1,
                    "osc_type": 1,
                    "oscillator_config5": 2,
                    "oscillator_source": 1,
                    "oscillator_type": 1,
                    "pllp": 1,
                    "power_configuration": 1,
                    "rcc_pllm": 1,
                    "some_other_value": 1,
                    "unused_variable3": 1,
                    "voltage_scale_config": 1,
                    "voltage_scaling": 1
                },
                "local_30": {
                    "clock_config2": 2,
                    "clock_config_result": 1,
                    "clock_config_value": 1,
                    "clock_source": 1,
                    "config_flag4": 1,
                    "config_param4": 4,
                    "configuration_param4": 1,
                    "flash_config": 3,
                    "flash_latency": 2,
                    "memory_address": 1,
                    "option4": 1,
                    "osc_config_param4": 3,
                    "oscillator_config4": 2,
                    "oscillator_frequency": 1,
                    "oscillator_type": 1,
                    "pclk1": 1,
                    "pll_conf_struct": 1,
                    "pllm": 1,
                    "rcc_pll_source_type": 1,
                    "sys_clock": 1,
                    "sys_flash_mem_latency": 1
                },
                "local_34": {
                    "clock_config": 4,
                    "clock_config_index": 1,
                    "clock_config_param": 1,
                    "clock_divider_config": 1,
                    "clock_source": 1,
                    "config_flag3": 1,
                    "config_param3": 4,
                    "configuration_param3": 1,
                    "mclk_divider": 1,
                    "option3": 1,
                    "osc_config_param3": 3,
                    "osc_init_struct": 1,
                    "oscillator_config3": 2,
                    "oscillator_mode": 1,
                    "oscillator_type": 1,
                    "plln": 1,
                    "pwr_regulator": 1,
                    "rcc_oscillator_config": 1,
                    "rcc_oscillator_type": 1,
                    "some_value": 1,
                    "unused_variable2": 1,
                    "voltage_scaling": 1
                },
                "local_48": {
                    "clock_source_config": 1,
                    "clock_type": 1,
                    "config_flag2": 1,
                    "config_param2": 4,
                    "configuration_param2": 1,
                    "gpio_init_struct": 1,
                    "low_power_config": 1,
                    "mco": 1,
                    "option2": 1,
                    "osc_config_flag2": 1,
                    "osc_config_param2": 3,
                    "osc_config_result": 1,
                    "osc_config_value": 1,
                    "osc_hse_bypass": 1,
                    "oscillator_config2": 5,
                    "oscillator_config_flag2": 1,
                    "pll_source": 2,
                    "power_config": 1,
                    "something_config": 1,
                    "system_clock_config": 1,
                    "unused_variable1": 1
                },
                "local_4c": {
                    "config_flag1": 1,
                    "config_param1": 4,
                    "configuration_param1": 1,
                    "option1": 1,
                    "osc_config_flag": 1,
                    "osc_config_index": 1,
                    "osc_config_param": 1,
                    "osc_config_param1": 3,
                    "osc_type": 1,
                    "oscillator_config": 11,
                    "oscillator_config1": 1,
                    "oscillator_config_flag1": 1,
                    "oscillator_type": 3,
                    "rcc_init_struct": 1
                },
                "local_c": {
                    "apb1_clock_divider": 1,
                    "apb1_divider": 1,
                    "apb1_tim_prescaler": 1,
                    "apb1_timer_clock": 2,
                    "apb_config": 1,
                    "clock_config11": 2,
                    "clock_config5": 1,
                    "clock_config6": 1,
                    "clock_config_flag5": 1,
                    "clock_config_param5": 7,
                    "clock_configuration_param5": 1,
                    "error_size": 1,
                    "flash_latency_prescaler": 1,
                    "hse_clock_frequency": 1,
                    "hsi_calibration": 1,
                    "i2s_clk_divider": 1,
                    "option13": 1,
                    "pclk2_value": 1,
                    "sysclk_freq": 1,
                    "unused_variable10": 1,
                    "usb_prescaler": 1,
                    "value7": 1
                }
            },
            "called": [
                "FUN_08007430",
                "FUN_08005cec",
                "FUN_0800618c"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_system_clock_08007436(void)\n\n{\n  int result;\n  undefined4 oscillator_config;\n  undefined4 oscillator_config2;\n  undefined4 config_param3;\n  undefined4 config_param4;\n  undefined4 config_param5;\n  undefined4 config_param6;\n  undefined4 config_param7;\n  undefined4 config_param8;\n  undefined4 clock_config_param1;\n  undefined4 clock_config_param2;\n  undefined4 clock_config_param3;\n  undefined4 clock_config_param4;\n  undefined4 clock_config_param5;\n  \n  _DAT_40023840 = _DAT_40023840 | 0x10000000;\n  _DAT_40007000 = _DAT_40007000 | 0xc000;\n  oscillator_config = 1;\n  oscillator_config2 = 1;\n  config_param3 = 2;\n  config_param4 = 0x400000;\n  config_param5 = 8;\n  config_param6 = 0x150;\n  config_param7 = 2;\n  config_param8 = 7;\n  result = configure_oscillator(&oscillator_config);\n  if (result != 0) {\n    handle_error();\n  }\n  clock_config_param1 = 0xf;\n  clock_config_param2 = 2;\n  clock_config_param3 = 0;\n  clock_config_param4 = 0x1400;\n  clock_config_param5 = 0x1000;\n  result = configure_clock(&clock_config_param1,5);\n  if (result != 0) {\n    handle_error();\n  }\n  return;\n}\n\n",
            "current_name": "initialize_system_clock_08007436",
            "entrypoint": "0x08007436",
            "imported": false,
            "improved": true,
            "renaming": {
                "Error_Handler": "handle_error",
                "FUN_08007436": "initialize_system_clock_08007436",
                "HAL_RCC_ClockConfig": "configure_clock",
                "HAL_RCC_OscConfig": "configure_oscillator",
                "iVar1": "result",
                "local_10": "clock_config_param4",
                "local_14": "clock_config_param3",
                "local_18": "clock_config_param2",
                "local_1c": "clock_config_param1",
                "local_20": "config_param8",
                "local_24": "config_param7",
                "local_28": "config_param6",
                "local_2c": "config_param5",
                "local_30": "config_param4",
                "local_34": "config_param3",
                "local_48": "oscillator_config2",
                "local_4c": "oscillator_config",
                "local_c": "clock_config_param5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080074c8": {
            "additional_data": {
                "0x1e": {
                    "limits_mask": 3
                },
                "0x80": {
                    "buttons_mask": 3
                },
                "DAT_20000e4c": {
                    "has_limit": 1,
                    "has_limits": 1,
                    "is_limits_enabled": 4,
                    "limit_check_enabled": 1,
                    "limit_flag": 1,
                    "limits_enabled": 9,
                    "limits_flag": 4
                },
                "DAT_20000e50": {
                    "button_check_enabled": 1,
                    "button_flag": 1,
                    "buttons_enabled": 9,
                    "buttons_flag": 4,
                    "has_button": 1,
                    "has_buttons": 1,
                    "is_buttons_enabled": 4
                },
                "FUN_080074c8": {
                    "handle_gpio_interrupt": 3,
                    "handle_interrupt": 12,
                    "handle_interrupts": 8,
                    "handle_isr": 1,
                    "process_gpio_interrupts": 1,
                    "process_input": 2,
                    "process_interrupt": 3,
                    "update_gpio": 1
                },
                "buttons_isr": {
                    "call_buttons_isr": 1,
                    "handle_buttons": 5,
                    "handle_buttons_interrupt": 12,
                    "handle_buttons_isr": 3,
                    "process_buttons_interrupt": 1
                },
                "gpio_set": {
                    "set_gpio": 18,
                    "set_gpio_pin": 2,
                    "set_gpio_state": 1,
                    "set_output": 1
                },
                "limits_isr": {
                    "call_limits_isr": 1,
                    "check_limits": 1,
                    "handle_limits": 3,
                    "handle_limits_interrupt": 12,
                    "handle_limits_isr": 3,
                    "invoke_limits": 1,
                    "process_limits_interrupt": 1
                },
                "param_1": {
                    "input": 1,
                    "input_flags": 2,
                    "interrupt_flag": 2,
                    "interrupt_flags": 21,
                    "interrupt_mask": 2,
                    "interrupt_signal": 1,
                    "interrupt_status": 1,
                    "isr_flags": 1
                }
            },
            "called": [
                "FUN_08007402",
                "FUN_0800195c",
                "FUN_08003a18"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid handle_gpio_interrupt_080074c8(uint interrupt_flags)\n\n{\n  if ((interrupt_flags & 1) != 0) {\n    set_gpio(0x3e);\n  }\n  if ((DAT_20000e4c != 0) && ((interrupt_flags & 0x1e) != 0)) {\n    handle_limits_interrupt();\n  }\n  if ((DAT_20000e50 != 0) && ((interrupt_flags & 0x80) != 0)) {\n    handle_buttons_interrupt(interrupt_flags);\n  }\n  return;\n}\n\n",
            "current_name": "handle_gpio_interrupt_080074c8",
            "entrypoint": "0x080074c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080074c8": "handle_gpio_interrupt_080074c8",
                "buttons_isr": "handle_buttons_interrupt",
                "gpio_set": "set_gpio",
                "limits_isr": "handle_limits_interrupt",
                "param_1": "interrupt_flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007520": {
            "additional_data": {
                "FUN_080073d4": {
                    "clear_bit": 1,
                    "clear_gpio": 1,
                    "reset_bit": 1,
                    "set_bit": 1,
                    "some_other_function": 1
                },
                "FUN_08007520": {
                    "clear_even_bit_gpio": 1,
                    "clear_gpio": 6,
                    "clear_gpio_bit": 6,
                    "clear_gpio_bit_if_needed": 1,
                    "clear_gpio_bits": 1,
                    "clear_gpio_if_bit_set": 1,
                    "clear_gpio_if_lsb_set": 1,
                    "clear_gpio_if_odd": 3,
                    "clear_gpio_if_param1_is_odd": 4,
                    "clear_gpio_if_param_is_odd": 1,
                    "clear_gpio_pin": 3,
                    "clear_if_bit_is_set": 1,
                    "set_gpio_bit": 1
                },
                "gpio_clr": {
                    "clear_function": 1,
                    "clear_gpi_obit": 1,
                    "clear_gpio": 10,
                    "clear_gpio_flag": 1,
                    "clear_pin": 2
                },
                "param_1": {
                    "bit_mask": 1,
                    "flag": 1,
                    "flags": 2,
                    "input": 6,
                    "input_flag": 1,
                    "input_value": 13,
                    "num": 1,
                    "parameter": 1,
                    "pin": 1,
                    "value": 4
                }
            },
            "called": [
                "FUN_080073d4"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nvoid clear_gpio_bit_if_needed_08007520(uint input_value)\n\n{\n  if ((input_value & 1) != 0) {\n    clear_gpio(0x3e);\n  }\n  return;\n}\n\n",
            "current_name": "clear_gpio_bit_if_needed_08007520",
            "entrypoint": "0x08007520",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007520": "clear_gpio_bit_if_needed_08007520",
                "gpio_clr": "clear_gpio",
                "param_1": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007540": {
            "additional_data": {
                "FUN_08001ddc": {
                    "": 1,
                    "configure_peripheral1": 1,
                    "configure_runtime_environment": 1,
                    "configure_step_pin": 1,
                    "do_something1": 1,
                    "execute_08001ddc": 2,
                    "function_a": 1,
                    "initialize": 3,
                    "initialize_function_a": 1,
                    "initialize_hal": 5,
                    "perform_action1": 1,
                    "perform_initialization1": 1,
                    "perform_one_task": 1,
                    "perform_task_1": 1,
                    "reconfigure_hardware": 1
                },
                "FUN_08005984": {
                    "": 1,
                    "configure_debounce": 1,
                    "configure_peripheral5": 1,
                    "configure_pin": 1,
                    "configure_stepping_mode": 1,
                    "event_handler": 1,
                    "execute_08005984": 2,
                    "execute_function_e": 1,
                    "function_e": 1,
                    "initialize": 2,
                    "initialize_and_return_something_else": 1,
                    "initialize_debounce": 4,
                    "initialize_parameter": 1,
                    "initialize_peripheral_timers": 1,
                    "perform_initialization5": 1,
                    "perform_some_action": 1,
                    "perform_task_5": 1
                },
                "FUN_080059b4": {
                    "configure_peripheral3": 1,
                    "configure_something": 1,
                    "execute_080059b4": 2,
                    "execute_function_c": 1,
                    "function_c": 1,
                    "initialize": 2,
                    "initialize_and_return_something": 1,
                    "initialize_clock": 1,
                    "initialize_device": 1,
                    "initialize_gpio": 5,
                    "initialize_memory_management_unit": 1,
                    "initialize_motion_buffer": 1,
                    "initialize_peripherals": 1,
                    "initialize_subsystem": 1,
                    "perform_initialization3": 1,
                    "perform_task_3": 1
                },
                "FUN_08007436": {
                    "": 1,
                    "configure_peripheral7": 1,
                    "configure_spindle": 1,
                    "display_status": 1,
                    "do_something5": 1,
                    "execute": 2,
                    "execute_08007436": 2,
                    "function_g": 1,
                    "initialize_function_g": 1,
                    "initialize_watchdog": 1,
                    "perform_action": 1,
                    "perform_action5": 1,
                    "perform_additional_task": 1,
                    "perform_initialization7": 1,
                    "perform_task_7": 1,
                    "start_fork_server": 1,
                    "start_forkserver": 4
                },
                "FUN_08007540": {
                    "initialize": 2,
                    "initialize_and_execute_grbl": 1,
                    "initialize_and_run_grbl": 1,
                    "initialize_and_start": 2,
                    "initialize_and_start_grbl": 1,
                    "initialize_application": 1,
                    "initialize_system": 22,
                    "initiate_grbl": 1
                },
                "FUN_0800778c": {
                    "configure_peripheral": 1,
                    "configure_peripheral6": 1,
                    "configure_pwm": 1,
                    "do_something4": 1,
                    "execute": 2,
                    "execute_0800778c": 2,
                    "execute_another": 1,
                    "execute_function": 1,
                    "function_f": 1,
                    "initialize_function_f": 1,
                    "initialize_uart": 1,
                    "initialize_usart": 5,
                    "perform_action4": 1,
                    "perform_initialization6": 1,
                    "perform_task_6": 1
                },
                "FUN_080079c0": {
                    "": 1,
                    "configure": 3,
                    "configure_direction_pin": 1,
                    "configure_fault_handler": 1,
                    "configure_peripheral2": 1,
                    "configure_system_clock": 4,
                    "do_something2": 1,
                    "execute_080079c0": 2,
                    "function_b": 1,
                    "initialize_function_b": 1,
                    "initialize_system_clock": 1,
                    "perform_action2": 1,
                    "perform_another_task": 1,
                    "perform_initialization2": 1,
                    "perform_task_2": 1
                },
                "FUN_08007e08": {
                    "": 1,
                    "configure": 1,
                    "configure_interrupts": 1,
                    "configure_limit_switches": 1,
                    "configure_peripheral4": 1,
                    "debounce_interrupt": 1,
                    "do_something3": 1,
                    "execute": 2,
                    "execute_08007e08": 2,
                    "execute_something": 1,
                    "function_d": 1,
                    "initialize_function_d": 1,
                    "initialize_timers": 5,
                    "perform_action3": 1,
                    "perform_initialization4": 1,
                    "perform_task_4": 1
                },
                "FUN_08008190": {
                    "": 1,
                    "configure_communication": 1,
                    "configure_peripheral8": 1,
                    "configure_stop_condition": 1,
                    "do_something6": 1,
                    "execute": 2,
                    "execute_08008190": 2,
                    "execute_final_task": 1,
                    "execute_grbl_code": 1,
                    "execute_grbl_main": 1,
                    "execute_task": 1,
                    "function_h": 1,
                    "initialize_function_h": 1,
                    "perform_action6": 1,
                    "perform_initialization8": 1,
                    "perform_task_8": 1,
                    "run_grbl": 2,
                    "run_grbl_main": 1,
                    "run_main": 1
                },
                "HAL_Init": {
                    "": 1,
                    "initialize_hal": 15,
                    "initialize_hardware": 4,
                    "initialize_hardware_abstraction_layer": 5
                },
                "SystemClock_Config": {
                    "": 1,
                    "configure_system_clock": 24
                },
                "debounce_init": {
                    "": 1,
                    "initialize_debounce": 24,
                    "initialize_debouncer": 1
                },
                "gpio_init": {
                    "": 1,
                    "initialize_gpio": 25
                },
                "grbl_main": {
                    "": 1,
                    "execute_grbl": 1,
                    "execute_grbl_main": 10,
                    "execute_main": 1,
                    "execute_main_logic": 1,
                    "main_loop": 1,
                    "run_grbl": 1,
                    "run_grbl_main": 8,
                    "run_main_program": 1,
                    "run_main_tasks": 1
                },
                "startForkserver": {
                    "": 1,
                    "start_fork_server": 17,
                    "start_forkserver": 8
                },
                "timers_init": {
                    "": 1,
                    "initialize_timers": 25
                },
                "usart_init": {
                    "": 1,
                    "initialize_usart": 25
                }
            },
            "called": [
                "FUN_08001ddc",
                "FUN_080079c0",
                "FUN_080059b4",
                "FUN_08007e08",
                "FUN_08005984",
                "FUN_0800778c",
                "FUN_08007436",
                "FUN_08008190"
            ],
            "calling": [
                "FUN_080092c4"
            ],
            "code": "\nundefined4 initialize_system_08007540(void)\n\n{\n  initialize_hal();\n  configure_system_clock();\n  initialize_gpio();\n  initialize_timers();\n  initialize_debounce();\n  initialize_usart();\n  start_fork_server(0);\n  execute_grbl_main();\n  return 0;\n}\n\n",
            "current_name": "initialize_system_08007540",
            "entrypoint": "0x08007540",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007540": "initialize_system_08007540",
                "HAL_Init": "initialize_hal",
                "SystemClock_Config": "configure_system_clock",
                "debounce_init": "initialize_debounce",
                "gpio_init": "initialize_gpio",
                "grbl_main": "execute_grbl_main",
                "startForkserver": "start_fork_server",
                "timers_init": "initialize_timers",
                "usart_init": "initialize_usart"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800756c": {
            "additional_data": {
                "FUN_0800756c": {
                    "initialize": 1,
                    "initialize_board": 1,
                    "initialize_components": 1,
                    "initialize_data": 1,
                    "initialize_hardware": 4,
                    "initialize_memory": 8,
                    "initialize_peripheral": 1,
                    "initialize_registers": 3,
                    "initialize_system": 10
                },
                "_": {
                    "temporary_variable": 1
                },
                "_DAT_40023800": {
                    "board_configuration": 1,
                    "config_reg_address": 1,
                    "config_register": 1,
                    "configuration": 1,
                    "configuration_register": 2,
                    "control_register": 8,
                    "device_control": 1,
                    "gpio_configuration": 1,
                    "gpio_mode_register": 1,
                    "gpio_set_mode": 1,
                    "memory_mask": 1,
                    "memory_value": 1,
                    "pin_config_register": 1,
                    "register_value": 2,
                    "sys_config_register": 1,
                    "system_config": 2,
                    "system_configuration": 2,
                    "system_ctrl_reg": 1,
                    "system_flags": 1
                },
                "_DAT_40023804": {
                    "base_address": 8,
                    "board_address": 1,
                    "control_reg_address": 1,
                    "control_register": 3,
                    "device_config": 1,
                    "gpio_address": 1,
                    "gpio_config": 1,
                    "gpio_control_register": 1,
                    "input_data_register": 1,
                    "intermediate_value": 1,
                    "io_configuration": 1,
                    "memory_address": 1,
                    "peripheral_configuration": 1,
                    "register_address": 1,
                    "sys_control_register": 1,
                    "system_config": 1,
                    "system_config_reg": 1,
                    "system_memory_address": 1
                },
                "_DAT_40023808": {
                    "device_status": 1,
                    "hardware_state": 1,
                    "interrupt_configuration": 1,
                    "output_data_register": 1,
                    "register_flags": 1,
                    "system_status": 1,
                    "timer": 1
                },
                "_DAT_4002380c": {
                    "counter": 2,
                    "device_flag": 1,
                    "error_code": 1,
                    "interrupt_control": 1,
                    "interrupt_mask": 1,
                    "status_register": 1,
                    "system_error": 1,
                    "timer_configuration": 1
                },
                "_DAT_e000ed08": {
                    "interrupt_config": 3,
                    "interrupt_control": 4,
                    "interrupt_control_address": 1,
                    "interrupt_control_register": 4,
                    "interrupt_controller": 1,
                    "interrupt_enable_reg": 1,
                    "interrupt_enable_register": 3,
                    "interrupt_flag": 1,
                    "interrupt_mask": 1,
                    "interrupt_priority_register": 1,
                    "interrupt_register": 2,
                    "memory_address": 1,
                    "nvic_isr_priority": 1,
                    "sys_interrupt_register": 1,
                    "system_control": 2,
                    "system_control_register": 2,
                    "system_interrupt": 1,
                    "system_interrupt_reg": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_080092c4"
            ],
            "code": "\n\n\nvoid initialize_system_0800756c(void)\n\n{\n  temporary_variableDATtemporary_variable40023808 = 0;\n  temporary_variableDATtemporary_variable40023804 = 0x24003010;\n  temporary_variableDATtemporary_variable40023800 = temporary_variableDATtemporary_variable40023800 & 0xfef2ffff | 1;\n  temporary_variableDATtemporary_variable4002380c = 0;\n  temporary_variableDATtemporary_variablee000ed08 = 0x8000000;\n  return;\n}\n\n",
            "current_name": "initialize_system_0800756c",
            "entrypoint": "0x0800756c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800756c": "initialize_system_0800756c",
                "_": "temporary_variable"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080076c8": {
            "additional_data": {
                "0x400": {
                    "block_size": 1,
                    "memory_offset": 1
                },
                "0x40020014": {
                    "data_address": 1,
                    "memory_address": 2
                },
                "DAT_080076c8": {
                    "shifted_index": 1
                },
                "FUN_080076c8": {
                    "flip_bit_in_memory": 1,
                    "set_bit_at_index": 1,
                    "set_bit_in_buffer": 1,
                    "set_bit_in_memory": 1,
                    "set_bit_value": 1,
                    "toggle_bit": 3,
                    "toggle_bit_at_index": 1,
                    "toggle_bit_in_array": 2,
                    "toggle_bit_in_memory": 1,
                    "toggle_bits": 1,
                    "update_bit": 4,
                    "update_bit_in_memory": 5,
                    "update_bit_value": 1,
                    "update_bitwise_value": 2,
                    "update_bitwise_value_in_memory": 1,
                    "update_data": 1,
                    "update_memory": 1,
                    "update_memory_byte": 2,
                    "write_bit_to_memory": 1
                },
                "PTR_40020014": {
                    "data": 1
                },
                "int": {
                    "index": 1
                },
                "new_variable_name_1": {
                    "base_address": 1
                },
                "new_variable_name_2": {
                    "current_value": 1
                },
                "new_variable_name_3": {
                    "bit_mask": 1
                },
                "param_1": {
                    "address": 2,
                    "bit_index": 1,
                    "bit_number": 1,
                    "bit_position": 2,
                    "buffer_index": 1,
                    "data": 1,
                    "index": 3,
                    "input": 10,
                    "input_data": 1,
                    "input_num": 1,
                    "input_value": 6,
                    "memory_address": 1,
                    "num": 1
                },
                "param_2": {
                    "value": 1
                },
                "uint": {
                    "data_type": 1,
                    "unsigned_int": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid update_bit_in_memory_080076c8(unsigned_int input)\n\n{\n  *(unsigned_int *)(((index)input >> 4) * 0x400 + 0x40020014) =\n       *(unsigned_int *)(((index)input >> 4) * 0x400 + 0x40020014) ^ 1 << (input & 0xf);\n  return;\n}\n\n",
            "current_name": "update_bit_in_memory_080076c8",
            "entrypoint": "0x080076c8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080076c8": "update_bit_in_memory_080076c8",
                "int": "index",
                "param_1": "input",
                "uint": "unsigned_int"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007756": {
            "additional_data": {
                "0x3c": {
                    "gpio_pin_number": 1
                },
                "FUN_08005a68": {
                    "debounce_isr": 1,
                    "increment_tick": 1,
                    "initialize": 1,
                    "initialize_gpio": 1
                },
                "FUN_08005a84": {
                    "get_configuration": 1,
                    "get_gpio_status": 1,
                    "get_tick": 1,
                    "perform_additional_checks": 1
                },
                "FUN_080076c8": {
                    "handle_debounce": 1,
                    "process_data": 1,
                    "toggle_gpio": 1,
                    "update_gpio_pin": 1
                },
                "FUN_08007756": {
                    "check_and_toggle_gpio": 1,
                    "check_timers": 1,
                    "debounce_check": 1,
                    "gpio_toggle_and_debounce": 1,
                    "handle_tick": 2,
                    "perform_miscellaneous_tasks": 1,
                    "perform_periodic_tasks": 1,
                    "polling_task": 1,
                    "process_tick": 1,
                    "toggle_gpi_oand_debounce": 1,
                    "toggle_gpio_and_debounce": 2,
                    "toggle_le_ds_and_debounce": 2,
                    "toggle_led": 1,
                    "toggle_led_and_call_debounce_isr": 1,
                    "toggle_led_and_debounce": 4,
                    "update_gpi_oand_debounce": 1,
                    "update_gpi_oand_tick": 1,
                    "update_gpio": 1,
                    "update_gpio_and_debounce": 2,
                    "update_gpio_and_tick": 2,
                    "update_gpio_state": 2
                },
                "FUN_08007930": {
                    "perform_additional_actions": 1,
                    "perform_debounce": 1,
                    "perform_task": 1,
                    "toggle_led": 1
                },
                "HAL_GetTick": {
                    "get_current_tick": 11,
                    "get_current_time": 4,
                    "get_tick": 1,
                    "get_tick_count": 3
                },
                "HAL_IncTick": {
                    "increment_sys_tick": 1,
                    "increment_system_tick": 1,
                    "increment_tick": 22,
                    "increment_tick_count": 2,
                    "increment_time": 1
                },
                "debounce_isr": {
                    "call_debounce_isr": 1,
                    "debounce_interrupt": 2,
                    "debounce_interrupt_service": 1,
                    "debounce_interrupt_service_routine": 3,
                    "handle_debounce": 5,
                    "handle_debounce_interrupt": 5,
                    "handle_debounce_isr": 2,
                    "perform_debounce": 6,
                    "perform_debounce_isr": 1,
                    "process_debounce": 1
                },
                "gpio_toggle": {
                    "toggle": 1,
                    "toggle_gpio": 18,
                    "toggle_gpio_pin": 2,
                    "toggle_led": 5,
                    "toggle_output_pin": 1
                },
                "param_1": {
                    "data": 1
                },
                "uVar1": {
                    "current_tick": 21,
                    "current_time": 2,
                    "tick": 2,
                    "tick_count": 1,
                    "tick_value": 1
                }
            },
            "called": [
                "FUN_08007930",
                "FUN_080076c8",
                "FUN_08005a68",
                "FUN_08005a84"
            ],
            "calling": [],
            "code": "\nvoid toggle_led_and_call_debounce_isr_08007756(void)\n\n{\n  uint current_tick;\n  \n  current_tick = get_current_tick();\n  if ((current_tick & 0x1ff) == 0) {\n    toggle_gpio(0x3c);\n  }\n  if ((current_tick & 0xf) == 0) {\n    perform_debounce();\n  }\n  increment_tick();\n  return;\n}\n\n",
            "current_name": "toggle_led_and_call_debounce_isr_08007756",
            "entrypoint": "0x08007756",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007756": "toggle_led_and_call_debounce_isr_08007756",
                "HAL_GetTick": "get_current_tick",
                "HAL_IncTick": "increment_tick",
                "debounce_isr": "perform_debounce",
                "gpio_toggle": "toggle_gpio",
                "uVar1": "current_tick"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800778c": {
            "additional_data": {
                "FUN_08006e88": {
                    "compare_gpio_addresses": 1
                },
                "FUN_0800733e": {
                    "configure_gpio_pin": 1
                },
                "FUN_0800778c": {
                    "init_gpio_pins": 1,
                    "initialize_gpi_os": 1,
                    "initialize_gpio": 22,
                    "initialize_gpio_pins": 7
                },
                "HAL_GPIO_Init": {
                    "configure_gpio": 1,
                    "configure_gpio_pin": 1,
                    "configure_pin": 1,
                    "initialize_pin": 2
                },
                "HAL_GPIO_WritePin": {
                    "write_gpio_pin": 2,
                    "write_pin": 3
                },
                "iVar1": {
                    "base_offset": 1,
                    "index": 8,
                    "offset": 15
                },
                "local_10": {
                    "gpio": 1,
                    "gpio_address": 1,
                    "gpio_array": 1,
                    "gpio_config": 3,
                    "gpio_pin": 4,
                    "gpio_pin_array": 1,
                    "gpio_pin_register": 1,
                    "gpio_pointer": 1,
                    "pin": 2,
                    "pin_address": 1,
                    "pin_addresses": 1,
                    "pin_array": 1,
                    "pin_base_address": 1,
                    "pin_config": 5,
                    "pin_data": 2,
                    "pin_mask": 1,
                    "pin_number": 1,
                    "pin_register": 1,
                    "pin_setting": 1,
                    "pointer": 1
                },
                "local_14": {
                    "alt_mode": 1,
                    "config4": 2,
                    "config_param4": 1,
                    "config_value4": 1,
                    "gpio_alternate": 1,
                    "gpio_alternate_function": 1,
                    "gpio_config_4": 1,
                    "gpio_init4": 1,
                    "gpio_init_arg4": 1,
                    "gpio_init_d": 1,
                    "gpio_mode4": 1,
                    "gpio_register4": 1,
                    "init_value": 1,
                    "param4": 3,
                    "param_4": 1,
                    "pin_config4": 1,
                    "pin_config_param4": 1,
                    "pin_mode4": 3,
                    "pin_mode_4": 1,
                    "pin_mode_config4": 1,
                    "pin_mode_register_3": 1,
                    "pin_otyper": 1,
                    "pin_pull": 1,
                    "reg4": 1,
                    "register4": 2
                },
                "local_18": {
                    "config3": 2,
                    "config_param3": 1,
                    "config_value3": 1,
                    "gpio_config_3": 1,
                    "gpio_init3": 1,
                    "gpio_init_arg3": 1,
                    "gpio_init_c": 1,
                    "gpio_mode3": 1,
                    "gpio_register3": 1,
                    "gpio_speed": 2,
                    "init_value": 1,
                    "param3": 3,
                    "param_3": 1,
                    "pin_config3": 1,
                    "pin_config_param3": 1,
                    "pin_mode3": 3,
                    "pin_mode_3": 1,
                    "pin_mode_config3": 1,
                    "pin_mode_register_2": 1,
                    "pin_ospeedr": 1,
                    "pin_speed": 1,
                    "reg3": 1,
                    "register3": 2,
                    "speed_mode": 1
                },
                "local_1c": {
                    "config2": 2,
                    "config_param2": 1,
                    "config_value2": 1,
                    "gpio_config_2": 1,
                    "gpio_init2": 1,
                    "gpio_init_arg2": 1,
                    "gpio_init_b": 1,
                    "gpio_mode2": 1,
                    "gpio_pull": 1,
                    "gpio_pull_config": 1,
                    "gpio_register2": 1,
                    "init_value": 1,
                    "param2": 3,
                    "param_2": 1,
                    "pin_alt_fn": 1,
                    "pin_config2": 1,
                    "pin_config_param2": 1,
                    "pin_mode2": 3,
                    "pin_mode_2": 1,
                    "pin_mode_config2": 1,
                    "pin_mode_register_1": 1,
                    "pin_pudr": 1,
                    "pull_mode": 1,
                    "reg2": 1,
                    "register2": 2
                },
                "local_20": {
                    "config1": 2,
                    "config_param1": 1,
                    "config_value1": 1,
                    "gpio_config_1": 1,
                    "gpio_init1": 1,
                    "gpio_init_a": 1,
                    "gpio_init_arg1": 1,
                    "gpio_mode": 1,
                    "gpio_mode1": 1,
                    "gpio_pin_mode": 1,
                    "gpio_register1": 1,
                    "init_value": 1,
                    "param1": 3,
                    "param_1": 1,
                    "pin_config1": 1,
                    "pin_config_param1": 1,
                    "pin_mode": 1,
                    "pin_mode1": 3,
                    "pin_mode_1": 1,
                    "pin_mode_config1": 1,
                    "pin_mode_register_0": 1,
                    "pin_pupdr": 1,
                    "pwr_mode": 1,
                    "reg1": 1,
                    "register1": 2
                },
                "local_24": {
                    "pin": 1,
                    "pin_bit_value": 1,
                    "pin_config": 11,
                    "pin_config_value": 1,
                    "pin_configuration": 1,
                    "pin_direction": 2,
                    "pin_mask": 5,
                    "pin_mode": 7,
                    "pin_output_mode": 1,
                    "pin_value": 1
                },
                "local_2c": {
                    "base_address": 1
                },
                "local_30": {
                    "pin_offset": 1
                },
                "local_34": {
                    "pin_mask": 1
                },
                "local_38": {
                    "gpio_init_value": 1
                },
                "local_c": {
                    "count": 3,
                    "counter": 7,
                    "current_index": 1,
                    "i": 2,
                    "index": 8,
                    "iteration": 1,
                    "iteration_count": 2,
                    "iteration_index": 1,
                    "loop_counter": 2,
                    "loop_index": 1,
                    "num_pins": 1,
                    "pin_index": 2
                },
                "param_1": {
                    "param": 1,
                    "param1": 1,
                    "param_1": 1,
                    "unused": 1
                },
                "param_2": {
                    "param2": 2,
                    "param_2": 1,
                    "unused": 1
                },
                "param_3": {
                    "param3": 2,
                    "param_3": 1,
                    "unused": 1
                }
            },
            "called": [
                "FUN_0800733e",
                "FUN_08006e88"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_gpio_pins_0800778c(void)\n\n{\n  int offset;\n  int pin_config;\n  undefined4 pin_mode1;\n  undefined4 pin_mode2;\n  undefined4 pin_mode3;\n  undefined4 param4;\n  uint *pin_config;\n  uint index;\n  \n  for (index = 0; index < 0x11; index = index + 1) {\n    offset = index * 0x18;\n    pin_config = (uint *)(&DAT_0800bcbc + offset);\n    _DAT_40023830 = _DAT_40023830 | 1 << (*pin_config >> 4 & 0xff);\n    pin_config = 1 << (*pin_config & 0xf);\n    pin_mode1 = *(undefined4 *)(&DAT_0800bcc0 + offset);\n    pin_mode2 = *(undefined4 *)(&DAT_0800bcc4 + offset);\n    pin_mode3 = *(undefined4 *)(&DAT_0800bcc8 + offset);\n    param4 = *(undefined4 *)(&DAT_0800bccc + offset);\n    initialize_pin(((*pin_config >> 4) + 0x100080) * 0x400,&pin_config);\n    if (-1 < (int)pin_config[5]) {\n      write_pin(((*pin_config >> 4) + 0x100080) * 0x400,1 << (*pin_config & 0xf) & 0xffff,\n                        pin_config[5] & 0xff);\n    }\n  }\n  return;\n}\n\n",
            "current_name": "initialize_gpio_pins_0800778c",
            "entrypoint": "0x0800778c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800778c": "initialize_gpio_pins_0800778c",
                "HAL_GPIO_Init": "initialize_pin",
                "HAL_GPIO_WritePin": "write_pin",
                "iVar1": "offset",
                "local_10": "pin_config",
                "local_14": "param4",
                "local_18": "pin_mode3",
                "local_1c": "pin_mode2",
                "local_20": "pin_mode1",
                "local_24": "pin_config",
                "local_c": "index"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007854": {
            "additional_data": {
                "0x400": {
                    "address_factor": 1,
                    "offset": 1,
                    "pointer_base_offset": 1
                },
                "0x40020010": {
                    "base_address": 2,
                    "start_address": 1
                },
                "0xf": {
                    "bitmask": 1
                },
                "1": {
                    "bit_mask": 1
                },
                "FUN_08007854": {
                    "binary_bitwise_check": 1,
                    "binary_value_at_index": 1,
                    "check_bit": 8,
                    "check_bit_at_index": 1,
                    "check_bit_value": 1,
                    "decode_and_extract_bit": 1,
                    "extract_bit": 2,
                    "extract_bit_from_address": 1,
                    "extract_bit_from_memory": 1,
                    "extract_bit_from_offset": 1,
                    "extract_bit_from_value": 1,
                    "fetch_bit_from_address": 1,
                    "get_bit": 1,
                    "get_bit_from_address": 2,
                    "get_bit_from_memory": 2,
                    "get_bit_from_pointer": 1,
                    "get_bit_value": 3,
                    "retrieve_bit": 1,
                    "retrieve_bit_value": 1
                },
                "PTR_08007854": {
                    "data_pointer": 1
                },
                "PTR_08020010": {
                    "memory_pointer": 1
                },
                "PTR_uint_4": {
                    "data_pointer": 1
                },
                "int": {
                    "shifted_value": 1
                },
                "param_1": {
                    "address": 2,
                    "index": 1,
                    "input": 7,
                    "input_data": 1,
                    "input_index": 1,
                    "input_num": 2,
                    "input_number": 1,
                    "input_param": 1,
                    "input_value": 12,
                    "memory_address": 1,
                    "value": 2
                },
                "uint": {
                    "result": 1,
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007884"
            ],
            "code": "\nresult check_bit_value_08007854(result input_value)\n\n{\n  return *(result *)(((shifted_value)input_value >> 4) * 0x400 + 0x40020010) >> (input_value & 0xf) & 1;\n}\n\n",
            "current_name": "check_bit_value_08007854",
            "entrypoint": "0x08007854",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007854": "check_bit_value_08007854",
                "int": "shifted_value",
                "param_1": "input_value",
                "uint": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007884": {
            "additional_data": {
                "FUN_08007884": {
                    "combine_gpios": 1,
                    "extract_gpio_data": 1,
                    "get_combined_gpio_values": 3,
                    "get_gpio_binary": 1,
                    "get_gpio_data": 2,
                    "get_gpio_value": 2,
                    "get_gpio_values": 7,
                    "gpio_read_and_combine": 1,
                    "read_gpio_data": 3,
                    "read_gpio_status": 1,
                    "read_gpio_values": 9
                },
                "fun_08007854": {
                    "apply_mask_to_data": 1
                },
                "gpio_rd": {
                    "read_gpio": 6,
                    "read_gpio_pin": 1,
                    "read_gpio_value": 1
                },
                "iVar1": {
                    "gpio0x36": 1,
                    "gpio_0x36": 3,
                    "gpio_0x36_status": 1,
                    "gpio_36": 1,
                    "gpio_data_0x36": 1,
                    "gpio_data_1": 1,
                    "gpio_value1": 2,
                    "gpio_value_0x36": 4,
                    "gpio_value_1": 10,
                    "pin_value_1": 2,
                    "port0_value": 1,
                    "state0": 1,
                    "value_0x36": 1,
                    "value_1": 2
                },
                "iVar2": {
                    "gpio0x37": 1,
                    "gpio_0x37": 3,
                    "gpio_0x37_status": 1,
                    "gpio_37": 1,
                    "gpio_data_0x37": 1,
                    "gpio_data_2": 1,
                    "gpio_value2": 2,
                    "gpio_value_0x37": 4,
                    "gpio_value_2": 10,
                    "pin_value_2": 2,
                    "port1_value": 1,
                    "state1": 1,
                    "value_0x37": 1,
                    "value_2": 2
                },
                "iVar3": {
                    "gpio0x38": 1,
                    "gpio_0x38": 3,
                    "gpio_0x38_status": 1,
                    "gpio_38": 1,
                    "gpio_data_0x38": 1,
                    "gpio_data_3": 1,
                    "gpio_value3": 2,
                    "gpio_value_0x38": 4,
                    "gpio_value_3": 10,
                    "pin_value_3": 2,
                    "port2_value": 1,
                    "state2": 1,
                    "value_0x38": 1,
                    "value_3": 2
                },
                "iVar4": {
                    "gpio0x39": 1,
                    "gpio_0x39": 3,
                    "gpio_0x39_status": 1,
                    "gpio_39": 1,
                    "gpio_data_0x39": 1,
                    "gpio_data_4": 1,
                    "gpio_value4": 2,
                    "gpio_value_0x39": 4,
                    "gpio_value_4": 10,
                    "pin_value_4": 2,
                    "port3_value": 1,
                    "state3": 1,
                    "value_0x39": 1,
                    "value_4": 2
                },
                "iVar5": {
                    "gpio0x0f": 1,
                    "gpio_0xf": 3,
                    "gpio_0xf_status": 1,
                    "gpio_data_0xf": 1,
                    "gpio_data_5": 1,
                    "gpio_f": 1,
                    "gpio_value5": 2,
                    "gpio_value_0xf": 4,
                    "gpio_value_5": 10,
                    "pin_value_5": 2,
                    "port15_value": 1,
                    "state4": 1,
                    "value_0xf": 1,
                    "value_5": 2
                },
                "param_1": {
                    "address": 3,
                    "device_id": 1,
                    "gpio_address": 2,
                    "gpio_reg_address": 1,
                    "input_data": 1,
                    "input_value": 1,
                    "param": 1
                },
                "uVar6": {
                    "gpio0x00": 1,
                    "gpio_0": 4,
                    "gpio_0_status": 1,
                    "gpio_data_0x0": 1,
                    "gpio_data_6": 1,
                    "gpio_value6": 2,
                    "gpio_value_0": 7,
                    "gpio_value_0x0": 1,
                    "gpio_value_6": 6,
                    "pin_value_0": 1,
                    "pin_value_6": 1,
                    "port0_status": 1,
                    "state5": 1,
                    "value_0": 2,
                    "value_6": 1
                }
            },
            "called": [
                "FUN_08007854"
            ],
            "calling": [
                "FUN_08007930"
            ],
            "code": "\nuint get_combined_gpio_values_08007884(void)\n\n{\n  int gpio_value_1;\n  int gpio_value_2;\n  int gpio_value_3;\n  int gpio_value_4;\n  int gpio_value_5;\n  uint gpio_value_0;\n  \n  gpio_value_1 = read_gpio(0x36);\n  gpio_value_2 = read_gpio(0x37);\n  gpio_value_3 = read_gpio(0x38);\n  gpio_value_4 = read_gpio(0x39);\n  gpio_value_5 = read_gpio(0xf);\n  gpio_value_0 = read_gpio(0);\n  return gpio_value_0 | gpio_value_1 << 4 | gpio_value_2 << 3 | gpio_value_3 << 2 | gpio_value_4 << 1 | gpio_value_5 << 7;\n}\n\n",
            "current_name": "get_combined_gpio_values_08007884",
            "entrypoint": "0x08007884",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007884": "get_combined_gpio_values_08007884",
                "gpio_rd": "read_gpio",
                "iVar1": "gpio_value_1",
                "iVar2": "gpio_value_2",
                "iVar3": "gpio_value_3",
                "iVar4": "gpio_value_4",
                "iVar5": "gpio_value_5",
                "uVar6": "gpio_value_0"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080078f4": {
            "additional_data": {
                "DAT_20000e54": {
                    "data_array": 1
                },
                "FUN_080078f4": {
                    "calculate_bitwise_or": 10,
                    "calculate_combined_data": 1,
                    "calculate_combined_value": 2,
                    "calculate_or_of_values": 1,
                    "calculate_or_value": 1,
                    "combine_and_or_bits": 1,
                    "combine_bits": 7,
                    "combine_bitwise_or": 1,
                    "combine_integers": 1,
                    "combine_uint_values": 1,
                    "combine_values": 4,
                    "get_bitwise_or_result": 1
                },
                "local_10": {
                    "counter": 2,
                    "i": 2,
                    "index": 22,
                    "iteration": 1,
                    "iteration_count": 3,
                    "iteration_index": 1
                },
                "local_c": {
                    "combined_result": 5,
                    "combined_value": 6,
                    "combined_values": 1,
                    "result": 19
                }
            },
            "called": [],
            "calling": [
                "FUN_08007930",
                "FUN_08001994"
            ],
            "code": "\nuint calculate_bitwise_or_080078f4(void)\n\n{\n  int index;\n  uint result;\n  \n  result = 0;\n  for (index = 0; index < 4; index = index + 1) {\n    result = *(uint *)(&DAT_20000e54 + index * 4) | result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_bitwise_or_080078f4",
            "entrypoint": "0x080078f4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080078f4": "calculate_bitwise_or_080078f4",
                "local_10": "index",
                "local_c": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007930": {
            "additional_data": {
                "FUN_08007930": {
                    "handle_gpio_inputs": 1,
                    "handle_gpio_interrupts": 1,
                    "handle_input": 2,
                    "handle_input_and_gpio_interrupt": 1,
                    "handle_input_and_gpio_interrupts": 1,
                    "handle_input_and_interrupt": 2,
                    "handle_input_event": 1,
                    "handle_input_interrupt": 1,
                    "process_gpio_changes": 1,
                    "process_gpio_events": 1,
                    "process_gpio_input": 2,
                    "update_gpio_detection": 1,
                    "update_gpio_signal": 1,
                    "update_gpio_state": 7,
                    "update_gpio_values": 7,
                    "update_input_and_interrupt": 1
                },
                "calculate_bitwise_or_080078f4": {
                    "calculate_bitwise_or": 1,
                    "calculate_combined_bitwise_or": 2
                },
                "clear_gpio_bit_if_needed_08007520": {
                    "clear_gpio_bit": 2,
                    "clear_gpio_bit_if_needed": 5,
                    "clear_needed_gpio_bit": 2
                },
                "debounce_input": {
                    "debounce_input": 1,
                    "debounce_input_value": 1,
                    "get_debounced_input": 3,
                    "input_debounce": 1,
                    "read_debounced_input": 1
                },
                "debounce_rd": {
                    "debounce_rd": 1,
                    "read_debounce": 2,
                    "read_debounce_state": 1,
                    "read_debounce_value": 1,
                    "read_debounced_input": 1,
                    "read_debounced_register": 1
                },
                "get_combined_gpio_values_08007884": {
                    "get_combined_gpio_values": 4
                },
                "handle_gpio_interrupt_080074c8": {
                    "handle_gpio_interrupt": 8,
                    "handle_interrupt": 1
                },
                "iVar1": {
                    "counter": 2,
                    "current_gpio_index": 1,
                    "current_idx": 1,
                    "current_index": 5,
                    "data_index": 1,
                    "gpio_index": 1,
                    "gpio_state_index": 1,
                    "index": 1,
                    "input_index": 2,
                    "interrupt_counter": 1,
                    "old_index": 1,
                    "previous_index": 1
                },
                "interrupt_flags": {
                    "received_interrupts": 1
                },
                "uVar1": {
                    "current_index": 1,
                    "input_index": 1
                },
                "uVar2": {
                    "old_gpio_values": 1,
                    "prev_gpio_state": 1,
                    "prev_gpio_values": 2,
                    "prev_input": 1,
                    "previous_debounce_value": 1,
                    "previous_flags": 1,
                    "previous_gpio_state": 3,
                    "previous_gpio_value": 2,
                    "previous_gpio_values": 8,
                    "previous_input": 3,
                    "previous_input_value": 1,
                    "previous_value": 1,
                    "previous_values": 1
                },
                "uVar3": {
                    "current_gpio_state": 1,
                    "current_gpio_value": 2,
                    "debounced_input": 18,
                    "debounced_value": 3,
                    "new_debounce_value": 1,
                    "new_gpio_value": 1
                },
                "uVar4": {
                    "current_debounce_value": 1,
                    "current_flags": 1,
                    "current_gpio_state": 2,
                    "current_gpio_values": 6,
                    "current_input": 3,
                    "current_input_value": 1,
                    "debounce_value": 1,
                    "debounced_gpio_value": 2,
                    "debounced_input_rd": 1,
                    "debounced_rd": 2,
                    "debounced_rd_value": 1,
                    "debounced_value": 1,
                    "rd_value": 1,
                    "read_input": 1,
                    "read_value": 2
                },
                "uVar5": {
                    "changed_bits": 8,
                    "changed_flags": 1,
                    "changed_gpio": 1,
                    "changed_gpio_bits": 9,
                    "changed_gpio_state": 1,
                    "changed_gpio_values": 1,
                    "changed_input": 1,
                    "changed_input_bits": 1,
                    "interrupt_flags": 1,
                    "interrupted_gpio_bits": 1,
                    "modified_bits": 1
                }
            },
            "called": [
                "FUN_080074c8",
                "FUN_080078f4",
                "FUN_08007520",
                "FUN_08007884"
            ],
            "calling": [
                "FUN_08007756"
            ],
            "code": "\nvoid update_gpio_signal_08007930(void)\n\n{\n  int current_index;\n  uint previous_gpio_values;\n  undefined4 debounced_input;\n  uint current_gpio_values;\n  uint changed_gpio_bits;\n  \n  current_index = DAT_20000e68;\n  previous_gpio_values = DAT_20000e64;\n  if (DAT_20000e6c != 0) {\n    debounced_input = get_debounced_input();\n    *(undefined4 *)(&DAT_20000e54 + current_index * 4) = debounced_input;\n    if (DAT_20000e68 == 3) {\n      DAT_20000e68 = 0;\n    }\n    else {\n      DAT_20000e68 = DAT_20000e68 + 1;\n    }\n    current_gpio_values = read_debounce();\n    previous_gpio_values = DAT_20000e64;\n    if (current_gpio_values != DAT_20000e64) {\n      changed_gpio_bits = ~current_gpio_values & DAT_20000e64;\n      if ((~DAT_20000e64 & current_gpio_values) != 0) {\n        handle_gpio_interrupt(~DAT_20000e64 & current_gpio_values);\n      }\n      previous_gpio_values = current_gpio_values;\n      if (changed_gpio_bits != 0) {\n        clear_gpio_bit_if_needed(changed_gpio_bits);\n      }\n    }\n  }\n  DAT_20000e64 = previous_gpio_values;\n  return;\n}\n\n",
            "current_name": "update_gpio_signal_08007930",
            "entrypoint": "0x08007930",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007930": "update_gpio_signal_08007930",
                "clear_gpio_bit_if_needed_08007520": "clear_gpio_bit_if_needed",
                "debounce_input": "get_debounced_input",
                "debounce_rd": "read_debounce",
                "handle_gpio_interrupt_080074c8": "handle_gpio_interrupt",
                "iVar1": "current_index",
                "uVar2": "previous_gpio_values",
                "uVar3": "debounced_input",
                "uVar4": "current_gpio_values",
                "uVar5": "changed_gpio_bits"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079c0": {
            "additional_data": {
                "DAT_20000e54": {
                    "data": 7,
                    "data_array": 2,
                    "data_block": 3,
                    "data_structure": 2
                },
                "DAT_20000e6c": {
                    "data_flag": 1,
                    "data_initialized": 1,
                    "data_status": 1,
                    "flag": 6,
                    "flag_value": 1,
                    "initialized": 1,
                    "status": 4
                },
                "FUN_080079c0": {
                    "initialize_data": 27,
                    "initialize_data_struct": 1,
                    "initialize_data_structure": 2,
                    "initialize_memory": 1
                },
                "FUN_0800b430": {
                    "process_data": 7
                },
                "memset": {
                    "clear_memory": 1
                },
                "param_1": {
                    "argument_array": 1,
                    "array": 5,
                    "array_pointer": 1,
                    "buffer": 4,
                    "data_array": 1,
                    "data_buffer": 1,
                    "data_pointer": 6,
                    "data_ptr": 1,
                    "input_array": 1,
                    "p_data": 1,
                    "pointer": 1,
                    "result_array": 1
                },
                "param_2": {
                    "byte_param": 1,
                    "flag": 13,
                    "flags": 1,
                    "value": 9
                },
                "param_3": {
                    "count": 1,
                    "length": 1,
                    "size": 19,
                    "uint_param": 1,
                    "value": 2
                }
            },
            "called": [
                "FUN_0800b430"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_data_structure_080079c0(void)\n\n{\n  clear_memory(&DAT_20000e54,0,0x18);\n  DAT_20000e6c = 1;\n  return;\n}\n\n",
            "current_name": "initialize_data_structure_080079c0",
            "entrypoint": "0x080079c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079c0": "initialize_data_structure_080079c0",
                "memset": "clear_memory"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080079e0": {
            "additional_data": {
                "FUN_080079e0": {
                    "set_bit": 9,
                    "set_bit_at_offset": 1,
                    "set_bit_at_position": 1,
                    "set_bit_in_array": 1,
                    "set_bit_in_memory": 14,
                    "set_bit_value": 4,
                    "store_bit_in_memory": 1
                },
                "byte": {
                    "byte_to_store": 1
                },
                "char": {
                    "character": 2
                },
                "int": {
                    "int_ptr": 1,
                    "integer_pointer": 1
                },
                "param_1": {
                    "bit_index": 1,
                    "bit_position": 3,
                    "byte_to_set": 9,
                    "byte_to_store": 1,
                    "byte_value": 7,
                    "input_byte": 6,
                    "input_value": 1,
                    "param_1": 1,
                    "ptrn": 1,
                    "value": 1
                },
                "param_2": {
                    "bit_position": 1
                },
                "uint": {
                    "unsigned_integer": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007a70"
            ],
            "code": "\nvoid set_bit_in_memory_080079e0(byte_to_store byte_to_set)\n\n{\n  *(int_ptr *)(((unsigned_integer)(int_ptr)(character)byte_to_set >> 5) * 4 + -0x1fff1f00) = 1 << (byte_to_set & 0x1f);\n  return;\n}\n\n",
            "current_name": "set_bit_in_memory_080079e0",
            "entrypoint": "0x080079e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080079e0": "set_bit_in_memory_080079e0",
                "byte": "byte_to_store",
                "char": "character",
                "int": "int_ptr",
                "param_1": "byte_to_set",
                "uint": "unsigned_integer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a10": {
            "additional_data": {
                "0x40000000": {
                    "address_1": 1,
                    "flag_1": 2,
                    "ptr_null1": 1
                },
                "0x40000400": {
                    "address_2": 1,
                    "flag_2": 2,
                    "ptr_null2": 1
                },
                "DAT_40023840": {
                    "flag": 1
                },
                "FUN_08007a10": {
                    "set_flag": 2,
                    "set_flag_based_on_address": 1,
                    "set_flag_value": 1,
                    "set_flags_based_on_parameter": 1,
                    "update_data_flag": 4,
                    "update_data_flags": 7,
                    "update_flag": 6,
                    "update_flag_bits": 1,
                    "update_flags": 4,
                    "update_flags_based_on_address": 1,
                    "update_flags_based_on_param": 1,
                    "update_memory_flags": 1,
                    "update_status": 1
                },
                "_DAT_40023840": {
                    "data_flag": 4,
                    "data_flags": 7,
                    "flag": 5,
                    "flag_registry": 1,
                    "flag_value": 2,
                    "flag_variable": 1,
                    "flags": 6,
                    "memory_flags": 1,
                    "status": 1
                },
                "param_1": {
                    "address": 7,
                    "data": 2,
                    "data_address": 2,
                    "data_pointer": 9,
                    "input": 3,
                    "input_param": 1,
                    "input_parameter": 1,
                    "input_pointer": 1,
                    "input_ptr": 1,
                    "memory_address": 2,
                    "param": 1,
                    "parameter": 1
                },
                "undefined": {
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007d08",
                "FUN_08007ad0"
            ],
            "code": "\n\n\nvoid update_data_flags_08007a10(void *data_pointer)\n\n{\n  if (data_pointer == (void *)0x40000000) {\n    _DAT_40023840 = _DAT_40023840 | 1;\n  }\n  else if (data_pointer == (void *)0x40000400) {\n    _DAT_40023840 = _DAT_40023840 | 2;\n  }\n  else if (data_pointer == &DAT_40000800) {\n    _DAT_40023840 = _DAT_40023840 | 4;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_flags_08007a10",
            "entrypoint": "0x08007a10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a10": "update_data_flags_08007a10",
                "param_1": "data_pointer",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007a70": {
            "additional_data": {
                "FUN_08007a70": {
                    "set_and_enable_interrupt": 3,
                    "set_and_enable_irq": 5,
                    "set_and_enable_irq_priority": 2,
                    "set_and_enable_priority": 2,
                    "set_interrupt_priority": 1,
                    "set_interrupt_priority_and_enable": 2,
                    "set_priority_and_enable_irq": 16
                },
                "local_c": {
                    "interrupt": 1,
                    "interrupt_id": 1,
                    "interrupt_index": 1,
                    "interrupt_level": 1,
                    "interrupt_no": 1,
                    "interrupt_num": 1,
                    "interrupt_number": 6,
                    "interrupt_priority": 5,
                    "irq": 1,
                    "irq_id": 1,
                    "irq_number": 5,
                    "irq_priority": 5,
                    "irq_value": 1,
                    "priority": 1
                },
                "param_1": {
                    "address": 19,
                    "base_address": 2,
                    "input": 1,
                    "input_param": 1,
                    "input_pointer": 1,
                    "interrupt_address": 2,
                    "memory_address": 5
                },
                "param_2": {
                    "priority": 13,
                    "priority_group": 9,
                    "priority_level": 5,
                    "priority_level1": 2,
                    "priority_param": 1,
                    "priority_value": 1
                },
                "param_3": {
                    "group": 1,
                    "param": 3,
                    "param3": 1,
                    "param_3": 1,
                    "param_value": 1,
                    "preemption_priority": 2,
                    "priority": 2,
                    "priority_level2": 2,
                    "priority_sub_param": 1,
                    "priority_subgroup": 1,
                    "sub_priority": 11,
                    "sub_priority_level": 2,
                    "subpriority": 3
                }
            },
            "called": [
                "FUN_080079e0",
                "FUN_08006cf6"
            ],
            "calling": [
                "FUN_08007ad0"
            ],
            "code": "\nvoid set_and_enable_irq_priority_08007a70(undefined *address,undefined4 priority,undefined4 sub_priority)\n\n{\n  undefined interrupt_number;\n  \n  if (address == (undefined *)0x40000000) {\n    interrupt_number = 0x1c;\n  }\n  else if (address == (undefined *)0x40000400) {\n    interrupt_number = 0x1d;\n  }\n  else {\n    if (address != &DAT_40000800) {\n      return;\n    }\n    interrupt_number = 0x1e;\n  }\n  HAL_NVIC_SetPriority(interrupt_number,priority,sub_priority);\n  NVIC_EnableIRQ(interrupt_number);\n  return;\n}\n\n",
            "current_name": "set_and_enable_irq_priority_08007a70",
            "entrypoint": "0x08007a70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007a70": "set_and_enable_irq_priority_08007a70",
                "local_c": "interrupt_number",
                "param_1": "address",
                "param_2": "priority",
                "param_3": "sub_priority"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ad0": {
            "additional_data": {
                "DAT_20000000": {
                    "system_clock_frequency": 1,
                    "target_frequency": 1,
                    "timer_constant": 1,
                    "timer_frequency": 2
                },
                "FUN_08007a10": {
                    "enable_tim_interrupt": 1,
                    "enable_timer_interrupt": 2,
                    "reset_tim_parameters": 1
                },
                "FUN_08007a70": {
                    "configure_tim_clock": 1,
                    "enable_timer_clock": 2,
                    "set_tim_interrupt": 1
                },
                "FUN_08007ad0": {
                    "initialize_tim_clock": 1,
                    "initialize_timer": 19,
                    "initialize_timers": 11
                },
                "_DAT_40000000": {
                    "timer_base_address": 1,
                    "timer_control_register": 2,
                    "timer_register0": 1,
                    "timer_register_1": 3
                },
                "_DAT_40000004": {
                    "timer_register1": 1,
                    "timer_register_2": 3
                },
                "_DAT_40000008": {
                    "timer_register2": 1,
                    "timer_register_3": 3
                },
                "_DAT_4000000c": {
                    "timer_register3": 1,
                    "timer_register_4": 3
                },
                "_DAT_40000010": {
                    "timer_register4": 1,
                    "timer_register_5": 3
                },
                "_DAT_40000018": {
                    "timer_register5": 1
                },
                "_DAT_4000001c": {
                    "timer_register6": 1
                },
                "_DAT_40000020": {
                    "timer_register7": 1
                },
                "_DAT_40000024": {
                    "timer_register8": 1
                },
                "_DAT_40000028": {
                    "prescaler_value": 1,
                    "timer_prescaler": 3,
                    "timer_register9": 1,
                    "timer_register_6": 3
                },
                "_DAT_4000002c": {
                    "timer_register10": 1,
                    "timer_register_7": 3
                },
                "_DAT_40000034": {
                    "timer_register11": 1,
                    "timer_register_8": 3
                },
                "_DAT_40000038": {
                    "timer_register12": 1,
                    "timer_register_9": 3
                },
                "_DAT_4000003c": {
                    "timer_register13": 1,
                    "timer_register_10": 3
                },
                "_DAT_40000040": {
                    "timer_register14": 1,
                    "timer_register_11": 3
                },
                "_DAT_40000048": {
                    "timer_register15": 1,
                    "timer_register_12": 3
                },
                "_DAT_4000004c": {
                    "timer_register16": 1,
                    "timer_register_13": 3
                },
                "enable_tim_clock": {
                    "enable_timer_clock": 12
                },
                "enable_tim_interrupt": {
                    "enable_timer_interrupt": 12
                },
                "param_1": {
                    "config_param": 1,
                    "timer_address": 2,
                    "timer_base_address": 3,
                    "timer_config": 7,
                    "timer_configuration": 1,
                    "timer_data": 1,
                    "undefined_param": 1,
                    "undefined_parameter": 2,
                    "undefined_pointer": 1,
                    "unused_param": 2,
                    "unused_parameter": 1,
                    "unused_pointer": 1
                },
                "param_2": {
                    "clock_setting": 1,
                    "param1": 2,
                    "param2": 7,
                    "param_2": 3,
                    "undefined_param_2": 1,
                    "undefined_parameter": 1,
                    "undefined_parameter_2": 1,
                    "unused_param": 2,
                    "unused_parameter": 1,
                    "unused_parameter_1": 1,
                    "unused_value_1": 1,
                    "value_1": 2
                },
                "param_3": {
                    "interrupt_setting": 1,
                    "param2": 2,
                    "param3": 7,
                    "param_3": 3,
                    "undefined_param_3": 1,
                    "undefined_parameter": 1,
                    "undefined_parameter_3": 1,
                    "unused_param": 2,
                    "unused_parameter": 1,
                    "unused_parameter_2": 1,
                    "unused_value_2": 1,
                    "value_2": 2
                },
                "timer_base_address": {
                    "timer_base_address": 1
                },
                "timer_configuration": {
                    "timer_base_address": 1
                },
                "timer_prescaler": {
                    "timer_prescaler": 1
                },
                "value_1": {
                    "initial_value_1": 1
                },
                "value_2": {
                    "initial_value_2": 1
                }
            },
            "called": [
                "FUN_08007a70",
                "FUN_08007a10"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_timer_08007ad0(void)\n\n{\n  enable_timer_clock(0x40000000);\n  _DAT_40000000 = 0;\n  _DAT_40000004 = 0;\n  _DAT_40000008 = 0;\n  _DAT_4000000c = 0;\n  _DAT_40000010 = 0;\n  _DAT_40000018 = 0;\n  _DAT_4000001c = 0;\n  _DAT_40000020 = 0;\n  _DAT_40000024 = 0;\n  _DAT_40000028 = DAT_20000000 / 42000000 - 1;\n  _DAT_4000002c = 0;\n  _DAT_40000034 = 0;\n  _DAT_40000038 = 0;\n  _DAT_4000003c = 0;\n  _DAT_40000040 = 0;\n  _DAT_40000048 = 0;\n  _DAT_4000004c = 0;\n  enable_timer_interrupt(0x40000000,0,0);\n  return;\n}\n\n",
            "current_name": "initialize_timer_08007ad0",
            "entrypoint": "0x08007ad0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ad0": "initialize_timer_08007ad0",
                "enable_tim_clock": "enable_timer_clock",
                "enable_tim_interrupt": "enable_timer_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007b70": {
            "additional_data": {
                "FUN_08007b70": {
                    "configure_flags": 1,
                    "set_config_flags": 1,
                    "set_flag_bits": 1,
                    "set_flags": 7,
                    "set_flags_according_to_inputs": 1,
                    "set_flags_and_bits": 1,
                    "set_flags_and_data": 1,
                    "set_flags_and_value": 1,
                    "set_flags_and_values": 4,
                    "set_flags_based_on_conditions": 3,
                    "set_flags_based_on_data": 1,
                    "set_flags_on_configuration": 1,
                    "set_local_flags": 1,
                    "update_data_flags": 1,
                    "update_flag_values": 1,
                    "update_flags": 5
                },
                "_DAT_40000000": {
                    "flags_2": 1,
                    "mask": 1,
                    "other_value": 1
                },
                "_DAT_4000000c": {
                    "flags_1": 1,
                    "flags_value": 1,
                    "result": 1
                },
                "_DAT_40000034": {
                    "condition1": 11,
                    "condition_1": 4,
                    "condition_a": 1,
                    "data1": 1,
                    "flag1": 1,
                    "flag_condition1": 1,
                    "input1": 2,
                    "input_condition1": 1
                },
                "_DAT_40000038": {
                    "condition2": 11,
                    "condition_2": 4,
                    "condition_b": 1,
                    "data2": 1,
                    "flag2": 1,
                    "flag_condition2": 1,
                    "input2": 2,
                    "input_condition2": 1
                },
                "local_c": {
                    "config_flags": 1,
                    "data_flags": 1,
                    "flag": 3,
                    "flag_value": 2,
                    "flags": 24
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_flags_and_values_08007b70(void)\n\n{\n  uint flags;\n  \n  flags = 1;\n  if (_DAT_40000034 != 0) {\n    flags = 3;\n  }\n  if (_DAT_40000038 != 0) {\n    flags = flags | 4;\n  }\n  _DAT_4000000c = _DAT_4000000c | flags;\n  _DAT_40000000 = _DAT_40000000 | 1;\n  return;\n}\n\n",
            "current_name": "set_flags_and_values_08007b70",
            "entrypoint": "0x08007b70",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007b70": "set_flags_and_values_08007b70",
                "local_c": "flags"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bc2": {
            "additional_data": {
                "FUN_08007bc2": {
                    "clear_bits": 13,
                    "clear_bitwise_flags": 1,
                    "clear_flags": 16,
                    "clear_memory": 1
                },
                "Flag1": {
                    "flag_bit0": 1
                },
                "Flag2": {
                    "flag_bit1": 1
                },
                "_DAT_40000000": {
                    "data1": 4,
                    "data_a": 1,
                    "data_one": 1,
                    "data_register1": 3,
                    "flag1": 7,
                    "flag_register1": 1,
                    "flags": 1,
                    "flags0": 1,
                    "flags1": 2,
                    "flags_register": 3,
                    "input_value": 1,
                    "memory_address1": 1,
                    "value": 1,
                    "value1": 3
                },
                "_DAT_4000000c": {
                    "control_register": 3,
                    "data2": 4,
                    "data_b": 1,
                    "data_register2": 3,
                    "data_two": 1,
                    "flag2": 7,
                    "flag_register2": 1,
                    "flag_value": 1,
                    "flags1": 1,
                    "flags2": 2,
                    "mask": 1,
                    "memory_address2": 1,
                    "registers": 1,
                    "value2": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080057e4"
            ],
            "code": "\n\n\nvoid clear_bitwise_flags_08007bc2(void)\n\n{\n  _DAT_40000000 = _DAT_40000000 & 0xfffffffe;\n  _DAT_4000000c = _DAT_4000000c & 0xfffffff8;\n  return;\n}\n\n",
            "current_name": "clear_bitwise_flags_08007bc2",
            "entrypoint": "0x08007bc2",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bc2": "clear_bitwise_flags_08007bc2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007bf0": {
            "additional_data": {
                "FUN_08007bf0": {
                    "set_minimum_value": 2,
                    "update_and_compare_parameters": 1,
                    "update_data": 9,
                    "update_data_if_smaller": 1,
                    "update_data_values": 1,
                    "update_lower_bound": 1,
                    "update_lowest_parameter": 1,
                    "update_min_value": 6,
                    "update_minimum_value": 5,
                    "update_param_if_smaller": 1,
                    "update_parameter": 1,
                    "update_parameter_and_data": 1,
                    "update_variable": 1
                },
                "_DAT_40000024": {
                    "current_min_value": 2,
                    "current_minimum": 1,
                    "lower_bound_value": 1,
                    "lowest_value": 2,
                    "min_stored_data": 1,
                    "min_value": 11,
                    "minimum_value": 9,
                    "smallest_param": 1
                },
                "_DAT_4000002c": {
                    "current_min": 1,
                    "current_min_value": 1,
                    "current_minimum": 1,
                    "current_minimum_value": 2,
                    "current_param": 1,
                    "current_value": 15,
                    "max_value": 1,
                    "min_value": 3,
                    "stored_data": 1,
                    "updated_last_value": 1,
                    "updated_value": 1
                },
                "param_1": {
                    "input_value": 3,
                    "new_param": 1,
                    "new_parameter": 2,
                    "new_value": 24,
                    "value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005324"
            ],
            "code": "\n\n\nvoid update_data_if_smaller_08007bf0(uint new_value)\n\n{\n  _DAT_4000002c = new_value;\n  if (new_value <= _DAT_40000024) {\n    _DAT_40000024 = new_value;\n  }\n  return;\n}\n\n",
            "current_name": "update_data_if_smaller_08007bf0",
            "entrypoint": "0x08007bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007bf0": "update_data_if_smaller_08007bf0",
                "param_1": "new_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c40": {
            "additional_data": {
                "DAT_40000034": {
                    "global_variable": 1
                },
                "FUN_08007c40": {
                    "set_config_param": 1,
                    "set_data_to_global_variable": 1,
                    "set_data_value": 1,
                    "set_global_data": 1,
                    "set_global_parameter": 3,
                    "set_global_value": 4,
                    "set_global_variable": 12,
                    "set_param_1": 1,
                    "set_param_value": 2,
                    "set_parameter": 4,
                    "store_parameter_value": 1
                },
                "_DAT_40000034": {
                    "global_parameter": 1,
                    "global_var": 1,
                    "global_variable": 14,
                    "param_1": 1,
                    "param_value": 1,
                    "parameter_storage": 1,
                    "result": 1,
                    "saved_parameter": 1,
                    "stored_parameter": 1
                },
                "param_1": {
                    "config_value": 1,
                    "data": 1,
                    "data_value": 1,
                    "input": 1,
                    "input_value": 1,
                    "new_param": 2,
                    "new_parameter": 2,
                    "new_value": 6,
                    "parameter_value": 1,
                    "value": 15
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_data_to_global_variable_08007c40(undefined4 value)\n\n{\n  _DAT_40000034 = value;\n  return;\n}\n\n",
            "current_name": "set_data_to_global_variable_08007c40",
            "entrypoint": "0x08007c40",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c40": "set_data_to_global_variable_08007c40",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c5e": {
            "additional_data": {
                "FUN_08007c5e": {
                    "initialize_data": 1,
                    "set_configuration": 1,
                    "set_data": 3,
                    "set_data_at_address": 1,
                    "set_data_pointer": 1,
                    "set_global_parameter": 4,
                    "set_global_value": 1,
                    "set_global_variable": 16,
                    "set_param_to_global_variable": 1,
                    "store_parameter": 2
                },
                "_DAT_40000038": {
                    "address": 1,
                    "data_ptr": 2,
                    "global_data": 1,
                    "global_parameter": 2,
                    "global_value": 2,
                    "global_variable": 13,
                    "stored_parameter": 1,
                    "stored_value": 1,
                    "target_address": 1
                },
                "param_1": {
                    "configuration_value": 1,
                    "data": 4,
                    "data_pointer": 1,
                    "data_value": 1,
                    "new_value": 6,
                    "parameter": 1,
                    "value": 16,
                    "value_to_set": 1
                },
                "param_2": {
                    "new_value": 1
                },
                "param_3": {
                    "updated_value": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08005790"
            ],
            "code": "\n\n\nvoid set_param_to_global_variable_08007c5e(undefined4 value)\n\n{\n  _DAT_40000038 = value;\n  return;\n}\n\n",
            "current_name": "set_param_to_global_variable_08007c5e",
            "entrypoint": "0x08007c5e",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c5e": "set_param_to_global_variable_08007c5e",
                "param_1": "value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007c7c": {
            "additional_data": {
                "1": {
                    "period_interrupt_mask": 1
                },
                "2": {
                    "delay_interrupt_mask": 1
                },
                "4": {
                    "pulse_interrupt_mask": 1
                },
                "FUN_080053a0": {
                    "process_pulse_interrupt": 1,
                    "step_pulse_isr": 2
                },
                "FUN_08005760": {
                    "process_delay_interrupt": 1,
                    "step_delay_isr": 2
                },
                "FUN_08005778": {
                    "process_period_interrupt": 1,
                    "step_period_isr": 2
                },
                "FUN_08007c7c": {
                    "check_and_call_isr": 5,
                    "check_and_execute_isr": 2,
                    "check_and_handle_interrupts": 2,
                    "check_and_trigger_isr": 1,
                    "check_flags_and_call_isr": 1,
                    "check_interrupts": 1,
                    "handle_interrupts": 10,
                    "perform_isr_based_on_status": 1,
                    "process_interrupts": 5,
                    "process_isr_flags": 1,
                    "process_status": 1,
                    "update_registers": 1
                },
                "_DAT_4000000c": {
                    "condition_register": 1,
                    "control_register": 4,
                    "enabled_interrupts": 1,
                    "flag_state": 1,
                    "input_flags": 1,
                    "input_register": 1,
                    "interrupt_enable": 1,
                    "interrupt_flags": 1,
                    "interrupt_mask": 3,
                    "interrupt_mask_reg": 1,
                    "interrupt_masks": 4,
                    "interrupt_status_register": 3,
                    "register_2": 4,
                    "status_register": 2
                },
                "_DAT_40000010": {
                    "control_register": 1,
                    "flag_register": 2,
                    "flags_register": 1,
                    "interrupt_control_register": 3,
                    "interrupt_flags": 8,
                    "interrupt_status": 1,
                    "interrupt_status_reg": 1,
                    "register_1": 4,
                    "register_state": 1,
                    "status_flags": 1,
                    "status_register": 5
                },
                "step_delay_isr": {
                    "execute_delay_isr": 1,
                    "execute_step_delay_isr": 1,
                    "handle_delay_interrupt": 6,
                    "handle_delay_isr": 1,
                    "perform_delay_isr": 2
                },
                "step_period_isr": {
                    "execute_period_isr": 1,
                    "execute_step_period_isr": 1,
                    "handle_period_interrupt": 6,
                    "handle_period_isr": 1,
                    "perform_period_isr": 2
                },
                "step_pulse_isr": {
                    "execute_pulse_isr": 1,
                    "execute_step_pulse_isr": 1,
                    "handle_pulse_interrupt": 6,
                    "handle_pulse_isr": 1,
                    "perform_pulse_isr": 2
                }
            },
            "called": [
                "FUN_08005760",
                "FUN_080053a0",
                "FUN_08005778"
            ],
            "calling": [],
            "code": "\n\n\nvoid check_and_handle_interrupts_08007c7c(void)\n\n{\n  if (((_DAT_40000010 & 2) != 0) && ((_DAT_4000000c & 2) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffd;\n    handle_delay_interrupt();\n  }\n  if (((_DAT_40000010 & 4) != 0) && ((_DAT_4000000c & 4) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffb;\n    handle_pulse_interrupt();\n  }\n  if (((_DAT_40000010 & 1) != 0) && ((_DAT_4000000c & 1) != 0)) {\n    _DAT_40000010 = _DAT_40000010 & 0xfffffffe;\n    handle_period_interrupt();\n  }\n  return;\n}\n\n",
            "current_name": "check_and_handle_interrupts_08007c7c",
            "entrypoint": "0x08007c7c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007c7c": "check_and_handle_interrupts_08007c7c",
                "step_delay_isr": "handle_delay_interrupt",
                "step_period_isr": "handle_period_interrupt",
                "step_pulse_isr": "handle_pulse_interrupt"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007d08": {
            "additional_data": {
                "DAT_20000000": {
                    "constant_value": 1,
                    "cpu_frequency": 2,
                    "timer_ticks": 1
                },
                "DAT_40000800": {
                    "tim_clock_register": 1,
                    "timer_base_address": 1,
                    "timer_configuration": 1,
                    "timer_control_register": 3,
                    "timer_ctrl_register": 1
                },
                "DAT_40000814": {
                    "timer_enable_bit": 1
                },
                "DAT_40000818": {
                    "timer_value_register": 1
                },
                "DAT_40000828": {
                    "prescaler_value": 1
                },
                "DAT_4000082c": {
                    "interrupt_enable_register": 1
                },
                "DAT_40000838": {
                    "interrupt_priority": 1
                },
                "FUN_08007a10": {
                    "enable_tim_clock": 8
                },
                "FUN_08007d08": {
                    "configure_timers": 1,
                    "initialize_clock": 1,
                    "initialize_tim_clock": 1,
                    "initialize_tim_configuration": 2,
                    "initialize_timer": 8,
                    "initialize_timer_function": 1,
                    "initialize_timers": 17
                },
                "_DAT_20000000": {
                    "tim_reg3": 1
                },
                "_DAT_40000800": {
                    "tccr0": 1,
                    "tim_clk_ctrl": 1,
                    "tim_clock_register": 1,
                    "tim_control_register": 1,
                    "tim_cr1": 2,
                    "tim_reg1": 1,
                    "timer_base_address": 1,
                    "timer_configuration_1": 1,
                    "timer_control_register": 13,
                    "timer_control_register1": 1,
                    "timer_control_register_0": 1,
                    "timer_control_value": 1,
                    "timer_ctrl_register": 1
                },
                "_DAT_40000804": {
                    "tcnt0": 1,
                    "tim_cr2": 1,
                    "tim_value_register1": 1,
                    "timer_control_register2": 1,
                    "timer_count_register": 1,
                    "timer_counter_register": 1,
                    "timer_data_register": 1,
                    "timer_load_register_0": 1,
                    "timer_prescaler": 1,
                    "timer_reg_1": 1,
                    "timer_register_1": 1,
                    "timer_value1_register": 1
                },
                "_DAT_40000808": {
                    "ocr0": 1,
                    "tim_smcr": 1,
                    "tim_value_register2": 1,
                    "timer_compare_register": 2,
                    "timer_control_register3": 1,
                    "timer_counter": 2,
                    "timer_counter_register": 1,
                    "timer_reg_2": 1,
                    "timer_register_2": 1,
                    "timer_value1_register": 1,
                    "timer_value2_register": 1,
                    "timer_value_register": 1,
                    "timer_value_register_0": 1
                },
                "_DAT_4000080c": {
                    "tccr2": 1,
                    "tim_dier": 1,
                    "tim_value_register3": 1,
                    "timer_capture_register": 1,
                    "timer_compare_register2": 1,
                    "timer_control_register4": 1,
                    "timer_control_register_1": 1,
                    "timer_match_value": 1,
                    "timer_reg_3": 1,
                    "timer_register_3": 1,
                    "timer_value2_register": 1,
                    "timer_value3_register": 1
                },
                "_DAT_40000810": {
                    "tcnt2": 1,
                    "tim_sr": 1,
                    "tim_value_register4": 1,
                    "timer_compare_register3": 1,
                    "timer_comparison_register": 1,
                    "timer_control_register5": 1,
                    "timer_interrupt_enable": 1,
                    "timer_interrupt_flag": 1,
                    "timer_load_register_1": 1,
                    "timer_reg_4": 1,
                    "timer_register_4": 1,
                    "timer_status_register": 1,
                    "timer_value4_register": 1
                },
                "_DAT_40000814": {
                    "enable": 1,
                    "enable_timer": 1,
                    "tim_bdtr": 1,
                    "tim_cr1_cen": 1,
                    "tim_enable_bit": 1,
                    "timer_enable": 10,
                    "timer_enable_bit": 4,
                    "timer_enable_flag": 1,
                    "timer_enable_register": 2,
                    "timer_prescaler_value": 1,
                    "timer_start_flag": 1
                },
                "_DAT_40000818": {
                    "tim_egr": 1,
                    "tim_prescaler_register": 1,
                    "tim_psc": 1,
                    "timer_base_address": 1,
                    "timer_compare_value1": 1,
                    "timer_config_1": 1,
                    "timer_config_register1": 1,
                    "timer_configuration_2": 1,
                    "timer_control_register_2": 1,
                    "timer_counter_register": 1,
                    "timer_period_register": 1,
                    "timer_prescaler": 2,
                    "timer_prescaler_register": 1,
                    "timer_prescaler_value": 1,
                    "timer_reload_register": 1,
                    "timsk": 1
                },
                "_DAT_4000081c": {
                    "tifr": 1,
                    "tim_ccmr1": 1,
                    "tim_interrupt_mask_register": 1,
                    "timer_capture_compare_register": 1,
                    "timer_compare_value2": 1,
                    "timer_config_2": 1,
                    "timer_config_register2": 1,
                    "timer_control1": 1,
                    "timer_control_register_3": 1,
                    "timer_interrupt_enable_register": 1,
                    "timer_register_5": 1,
                    "timer_reload_value": 1
                },
                "_DAT_40000820": {
                    "pcmsk0": 1,
                    "tim_ccmr2": 1,
                    "tim_status_register": 1,
                    "timer_compare_value3": 1,
                    "timer_config_3": 1,
                    "timer_config_register3": 1,
                    "timer_control2": 1,
                    "timer_divider_register": 1,
                    "timer_interrupt_enable": 1,
                    "timer_interrupt_flags_register": 1,
                    "timer_load_register_3": 1,
                    "timer_register_6": 1
                },
                "_DAT_40000824": {
                    "general_register": 1,
                    "tim_ccer": 1,
                    "tim_compare_value_register1": 1,
                    "timer_clear_interrupt_flags_register": 1,
                    "timer_compare_value4": 1,
                    "timer_config_4": 1,
                    "timer_config_register4": 1,
                    "timer_control3": 1,
                    "timer_interrupt_disable": 1,
                    "timer_register_7": 1,
                    "timer_value_register_3": 1
                },
                "_DAT_40000828": {
                    "prescaler": 1,
                    "prescaler_value": 5,
                    "tim_arr": 1,
                    "tim_compare_value_register2": 1,
                    "tim_psc": 1,
                    "tim_reg2": 1,
                    "timer_control4": 1,
                    "timer_divisor": 1,
                    "timer_interval_register": 1,
                    "timer_prescale_register": 1,
                    "timer_prescaler": 4,
                    "timer_prescaler_register": 4,
                    "timer_prescaler_value": 2,
                    "timer_reload_value": 2
                },
                "_DAT_4000082c": {
                    "autoreload": 1,
                    "buffer": 1,
                    "compare_value": 1,
                    "interrupt_number": 1,
                    "reload_value": 1,
                    "repetition_counter": 1,
                    "tim_arr": 1,
                    "tim_ccr1": 1,
                    "tim_compare_value_register3": 1,
                    "timer_auto_reload_value": 1,
                    "timer_capture_compare": 1,
                    "timer_control5": 1,
                    "timer_counter_value": 1,
                    "timer_interrupt_clear_register": 1,
                    "timer_interrupt_enable_register": 1,
                    "timer_interrupt_period": 1,
                    "timer_interrupt_register": 1,
                    "timer_period": 1,
                    "timer_prescaler_register": 1,
                    "timer_prescaler_reload": 1,
                    "timer_reload_register": 2,
                    "timer_reload_value": 3
                },
                "_DAT_40000834": {
                    "interrupt_enable": 1,
                    "spcr": 1,
                    "tim_compare_value_register4": 1,
                    "tim_rcr": 1,
                    "timer_config_register5": 1,
                    "timer_control6": 1,
                    "timer_counter_register": 1,
                    "timer_ctrl_1": 1,
                    "timer_enable_interrupts": 1,
                    "timer_interrupt_enable_register": 1,
                    "timer_register_8": 1,
                    "timer_status_register": 1,
                    "timer_threshold_value": 1
                },
                "_DAT_40000838": {
                    "compare_value": 1,
                    "counter": 1,
                    "counter_threshold": 1,
                    "spsr": 1,
                    "tim_capture_value_register1": 1,
                    "tim_ccr1": 1,
                    "tim_ccr2": 1,
                    "timer_calibration_value": 1,
                    "timer_compare_register": 2,
                    "timer_compare_value": 1,
                    "timer_config_register6": 1,
                    "timer_control7": 1,
                    "timer_ctrl_2": 1,
                    "timer_execution_state": 1,
                    "timer_interrupt_enable": 2,
                    "timer_interrupt_flag_register": 1,
                    "timer_interrupt_priority": 1,
                    "timer_period": 1,
                    "timer_prescaler_ratio": 1,
                    "timer_register_9": 1,
                    "timer_update_register": 1
                },
                "_DAT_4000083c": {
                    "spdr": 1,
                    "tim_capture_value_register2": 1,
                    "tim_ccr2": 1,
                    "timer_calibration_enable": 1,
                    "timer_config_register7": 1,
                    "timer_control8": 1,
                    "timer_ctrl_3": 1,
                    "timer_enable": 1,
                    "timer_interrupt_disable": 1,
                    "timer_interrupt_force_register": 1,
                    "timer_register_10": 1
                },
                "_DAT_40000840": {
                    "tim_capture_value_register3": 1,
                    "tim_ccr3": 1,
                    "timer_config_register8": 1,
                    "timer_control9": 1,
                    "timer_ctrl_4": 1,
                    "timer_disable": 1,
                    "timer_interrupt_clear": 1,
                    "timer_interrupt_status_register": 1,
                    "timer_register_11": 1,
                    "unused1": 1,
                    "wdtcsr": 1
                },
                "_DAT_40000848": {
                    "mcucr": 1,
                    "tim_capture_value_register4": 1,
                    "tim_ccr4": 1,
                    "timer_adjustment1": 1,
                    "timer_config_register9": 1,
                    "timer_control10": 1,
                    "timer_counter_value": 1,
                    "timer_interrupt_masked_status_register": 1,
                    "timer_register_12": 1,
                    "unused2": 1,
                    "unused_reg_1": 1
                },
                "_DAT_4000084c": {
                    "mcusr": 1,
                    "tim_dcr": 1,
                    "tim_enable_register": 1,
                    "timer_adjustment2": 1,
                    "timer_capture_value": 1,
                    "timer_config_register10": 1,
                    "timer_control11": 1,
                    "timer_interrupt_clear": 1,
                    "timer_register_13": 1,
                    "unused3": 1,
                    "unused_reg_2": 1
                },
                "enable_tim_clock": {
                    "enable_timer_clock": 14
                },
                "param_1": {
                    "clock_data": 1,
                    "config_data": 1,
                    "data_buffer": 1,
                    "data_pointer": 1,
                    "data_ptr": 1,
                    "param": 3,
                    "tim_clock": 1,
                    "tim_clock_address": 1,
                    "timer": 1,
                    "timer_address": 1,
                    "timer_config": 1,
                    "timer_data": 6,
                    "timer_descriptor": 1,
                    "timer_instance": 1,
                    "timer_pointer": 1,
                    "timer_ptr": 1,
                    "timer_register": 1,
                    "unused_param": 2
                }
            },
            "called": [
                "FUN_08007a10"
            ],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid initialize_timers_08007d08(void)\n\n{\n  enable_timer_clock(&DAT_40000800);\n  _DAT_40000800 = 0x80;\n  _DAT_40000804 = 0;\n  _DAT_40000808 = 0;\n  _DAT_4000080c = 0;\n  _DAT_40000810 = 0;\n  _DAT_40000818 = 0x6800;\n  _DAT_4000081c = 0;\n  _DAT_40000820 = 0;\n  _DAT_40000824 = 0;\n  _DAT_40000828 = DAT_20000000 / 4800000 - 1;\n  _DAT_4000082c = 199;\n  _DAT_40000834 = 0;\n  _DAT_40000838 = 100;\n  _DAT_4000083c = 0;\n  _DAT_40000840 = 0;\n  _DAT_40000848 = 0;\n  _DAT_4000084c = 0;\n  _DAT_40000814 = 1;\n  return;\n}\n\n",
            "current_name": "initialize_timers_08007d08",
            "entrypoint": "0x08007d08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007d08": "initialize_timers_08007d08",
                "enable_tim_clock": "enable_timer_clock"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007da8": {
            "additional_data": {
                "FUN_08007da8": {
                    "enable_flags": 1,
                    "initialize_flags": 1,
                    "set_bit_flags": 1,
                    "set_data_flags": 1,
                    "set_enable_flag": 1,
                    "set_flag_and_enable": 1,
                    "set_flag_registers": 1,
                    "set_flags": 17,
                    "set_flags_and_bits": 1,
                    "set_flags_and_enable": 2,
                    "set_flags_and_permissions": 1,
                    "set_flags_and_status": 1,
                    "set_flags_for_data": 1,
                    "set_update_flags": 1
                },
                "_": {
                    "_": 1
                },
                "_AT_40000800": {
                    "control_register": 1
                },
                "_AT_40000820": {
                    "flag_register": 1
                },
                "_DAT_40000800": {
                    "bits": 1,
                    "control": 1,
                    "control_bits": 1,
                    "control_flags": 2,
                    "control_register": 12,
                    "data_value": 1,
                    "enable": 1,
                    "enable_flag": 1,
                    "flag_register2": 1,
                    "flag_register_2": 1,
                    "other_flags_register": 1,
                    "permissions": 1,
                    "status": 5,
                    "status_register": 1
                },
                "_DAT_40000820": {
                    "data_flags": 1,
                    "data_flags_register": 1,
                    "flag": 1,
                    "flag_register": 6,
                    "flag_register1": 1,
                    "flag_register_1": 1,
                    "flags": 8,
                    "flags_register": 6,
                    "status_flag": 1,
                    "status_flags": 3,
                    "status_register": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08007e08"
            ],
            "code": "\n\n\nvoid set_flags_and_enable_08007da8(void)\n\n{\n  _DAT_40000820 = _DAT_40000820 | 0x10;\n  _DAT_40000800 = _DAT_40000800 | 1;\n  return;\n}\n\n",
            "current_name": "set_flags_and_enable_08007da8",
            "entrypoint": "0x08007da8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007da8": "set_flags_and_enable_08007da8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e08": {
            "additional_data": {
                "FUN_08007ad0": {
                    "enable_motors": 1,
                    "function_3": 1,
                    "g540_timer_start": 18,
                    "initialize_function_c": 1,
                    "initialize_task_c": 1,
                    "perform_action_3": 1,
                    "perform_additional_operations": 1,
                    "perform_task3": 1,
                    "perform_task_c": 1
                },
                "FUN_08007d08": {
                    "function_1": 1,
                    "initialize_function_a": 1,
                    "initialize_task_a": 1,
                    "perform_action_1": 1,
                    "perform_additional_setup": 1,
                    "perform_step_timer_operations": 1,
                    "perform_task1": 1,
                    "perform_task_a": 1,
                    "step_timer_init": 16,
                    "step_timer_initialization": 1,
                    "step_timer_initialize": 1
                },
                "FUN_08007da8": {
                    "configure_hardware": 1,
                    "function_2": 1,
                    "g540_timer_init": 16,
                    "g540_timer_initialization": 1,
                    "g540_timer_initialize": 1,
                    "initialize_function_b": 1,
                    "initialize_task_b": 1,
                    "perform_action_2": 1,
                    "perform_g540_timer_operations": 1,
                    "perform_task2": 1,
                    "perform_task_b": 1
                },
                "FUN_08007e08": {
                    "init_and_start_timers": 1,
                    "initialize_and_start_timers": 4,
                    "initialize_device": 1,
                    "initialize_hardware": 1,
                    "initialize_step_and_g540_timers": 1,
                    "initialize_step_timer_and_g540": 1,
                    "initialize_stepper_motors": 1,
                    "initialize_system": 1,
                    "initialize_timer": 5,
                    "initialize_timers": 15
                },
                "g540_timer_init": {
                    "initialize_g540_timer": 13
                },
                "g540_timer_start": {
                    "start_g540_timer": 13
                },
                "step_timer_init": {
                    "initialize_step_timer": 13
                }
            },
            "called": [
                "FUN_08007d08",
                "FUN_08007da8",
                "FUN_08007ad0"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\nvoid initialize_and_start_timers_08007e08(void)\n\n{\n  initialize_step_timer();\n  initialize_g540_timer();\n  start_g540_timer();\n  return;\n}\n\n",
            "current_name": "initialize_and_start_timers_08007e08",
            "entrypoint": "0x08007e08",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e08": "initialize_and_start_timers_08007e08",
                "g540_timer_init": "initialize_g540_timer",
                "g540_timer_start": "start_g540_timer",
                "step_timer_init": "initialize_step_timer"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e1c": {
            "additional_data": {
                "FUN_08007e1c": {
                    "copy_byte_to_memory": 1,
                    "initialize_buffer": 1,
                    "initialize_param": 1,
                    "process_byte": 1,
                    "send_byte": 2,
                    "send_byte_and_wait_for_ack": 1,
                    "send_byte_and_wait_for_flag": 1,
                    "send_byte_over_bus": 1,
                    "send_byte_to_device": 2,
                    "send_byte_to_port": 1,
                    "set_byte": 1,
                    "set_byte_and_wait_for_flag": 1,
                    "set_byte_data": 2,
                    "set_byte_in_data": 1,
                    "set_byte_in_memory": 1,
                    "set_byte_param": 1,
                    "set_byte_parameter": 1,
                    "set_byte_value": 1,
                    "set_param_with_value_wait": 1,
                    "store_byte_in_memory": 1,
                    "store_byte_param": 1,
                    "store_byte_to_memory": 1,
                    "write_byte_to_memory": 5,
                    "write_byte_to_register": 1
                },
                "_DAT_40004400": {
                    "data_register": 1,
                    "device_status_register": 1,
                    "flag": 1,
                    "memory_status": 2,
                    "memory_status_register": 1,
                    "status": 2,
                    "status_register": 9
                },
                "_DAT_40004404": {
                    "buffer": 1,
                    "copied_byte": 1,
                    "data": 1,
                    "data_register": 4,
                    "memory_address": 3,
                    "memory_data_register": 1,
                    "output_register": 3,
                    "output_value": 1,
                    "result": 1,
                    "stored_byte": 1,
                    "transmit_register": 1
                },
                "param_1": {
                    "byte": 1,
                    "byte_data": 1,
                    "byte_to_copy": 1,
                    "byte_to_send": 4,
                    "byte_to_set": 1,
                    "byte_to_store": 3,
                    "byte_to_write": 5,
                    "byte_value": 5,
                    "data": 3,
                    "data_byte": 2,
                    "input_byte": 1,
                    "new_byte_value": 1,
                    "value": 3
                },
                "param_2": {
                    "unused_param": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800826a",
                "FUN_08008250"
            ],
            "code": "\n\n\nvoid write_byte_to_memory_08007e1c(byte byte_to_write)\n\n{\n  do {\n  } while ((_DAT_40004400 & 0x80) == 0);\n  _DAT_40004404 = (uint)byte_to_write;\n  return;\n}\n\n",
            "current_name": "write_byte_to_memory_08007e1c",
            "entrypoint": "0x08007e1c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e1c": "write_byte_to_memory_08007e1c",
                "param_1": "byte_to_write"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e58": {
            "additional_data": {
                "0x20": {
                    "bit_mask": 2,
                    "flag_mask": 2,
                    "mask": 1
                },
                "DAT_40004400": {
                    "bit_flags": 1
                },
                "FUN_08007e58": {
                    "check_bit": 1,
                    "check_bit_5_set": 1,
                    "check_bit_flag": 2,
                    "check_bit_in_register": 1,
                    "check_bit_is_set": 2,
                    "check_bit_set": 7,
                    "check_bit_status": 2,
                    "check_bit_value": 1,
                    "check_flag": 1,
                    "check_flag_set": 2,
                    "check_flag_status": 1,
                    "check_hardware_flag": 1,
                    "is_bit_set": 7,
                    "is_flag_set": 2
                },
                "FUN_08007e58_return": {
                    "is_bit_set": 1
                },
                "_DAT_40004400": {
                    "bit_flag": 1,
                    "bit_flags": 1,
                    "bit_status": 1,
                    "bitfield": 1,
                    "bits": 1,
                    "data": 2,
                    "data_register": 2,
                    "data_variable": 1,
                    "flag": 5,
                    "flag_value": 1,
                    "flags": 1,
                    "hardware_flag": 1,
                    "input_data": 1,
                    "memory_address": 1,
                    "register_value": 4,
                    "status_register": 5,
                    "status_variable": 1
                },
                "bool": {
                    "": 1,
                    "bool": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nbool check_bit_is_set_08007e58(void)\n\n{\n  return (_DAT_40004400 & 0x20) != 0;\n}\n\n",
            "current_name": "check_bit_is_set_08007e58",
            "entrypoint": "0x08007e58",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e58": "check_bit_is_set_08007e58"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007e84": {
            "additional_data": {
                "FUN_08007e84": {
                    "extract_lowest_byte": 2,
                    "get_byte_from_data": 1,
                    "get_last_byte": 2,
                    "get_least_significant_byte": 2,
                    "get_lower_byte": 2,
                    "get_lower_byte_of_global_variable": 1,
                    "get_lowest_byte": 21
                },
                "_DAT_40004404": {
                    "bitmask": 1,
                    "data": 6,
                    "data_register": 5,
                    "data_value": 5,
                    "data_variable": 1,
                    "global_variable": 1,
                    "input_data": 5,
                    "input_value": 3,
                    "source_data": 1,
                    "value": 2
                },
                "none": {
                    "result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008286"
            ],
            "code": "\n\n\nuint get_lowest_byte_08007e84(void)\n\n{\n  return _DAT_40004404 & 0xff;\n}\n\n",
            "current_name": "get_lowest_byte_08007e84",
            "entrypoint": "0x08007e84",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007e84": "get_lowest_byte_08007e84"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007ea4": {
            "additional_data": {
                "0x40004800": {
                    "memory_address2": 1
                },
                "0x40004c00": {
                    "memory_address3": 1
                },
                "0x40005000": {
                    "memory_address4": 1
                },
                "0x40011000": {
                    "memory_address5": 1
                },
                "0x40011400": {
                    "memory_address6": 1
                },
                "DAT_40004400": {
                    "data1": 1,
                    "memory_location1": 1
                },
                "DAT_40004800": {
                    "data2": 1,
                    "memory_location2": 1
                },
                "DAT_40004c00": {
                    "data3": 1,
                    "memory_location3": 1
                },
                "DAT_40005000": {
                    "data4": 1,
                    "memory_location4": 1
                },
                "DAT_40011400": {
                    "data5": 1,
                    "memory_location5": 1
                },
                "FUN_08007ea4": {
                    "set_memory_flag": 2,
                    "update_data_flags": 1,
                    "update_flags": 4,
                    "update_flags_based_on_address": 2,
                    "update_memory": 1,
                    "update_memory_flag": 1,
                    "update_memory_flags": 16,
                    "update_memory_state": 1,
                    "update_register_flags": 1,
                    "update_registers": 1,
                    "update_status_bits": 1
                },
                "_DAT_40023840": {
                    "data_flag2": 1,
                    "flag2": 3,
                    "flag_register2": 3,
                    "flags2": 3,
                    "memory_flag2": 9,
                    "memory_flag_b": 1,
                    "memory_flags2": 6,
                    "memory_state_var2": 1,
                    "register_b": 1,
                    "register_flag2": 1,
                    "status_bits2": 1
                },
                "_DAT_40023844": {
                    "data_flag1": 1,
                    "flag1": 3,
                    "flag_register1": 3,
                    "flags1": 3,
                    "memory_flag1": 9,
                    "memory_flag_a": 1,
                    "memory_flags1": 6,
                    "memory_state_var1": 1,
                    "register_a": 1,
                    "register_flag1": 1,
                    "status_bits1": 1
                },
                "param_1": {
                    "address": 11,
                    "data_pointer": 1,
                    "memory_address": 17,
                    "memory_block": 1,
                    "memory_location": 1
                },
                "undefined": {
                    "void": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\n\n\nvoid update_memory_flags_08007ea4(void *memory_address)\n\n{\n  if (memory_address == (void *)0x40011000) {\n    _DAT_40023844 = _DAT_40023844 | 0x10;\n  }\n  else if (memory_address == &DAT_40004400) {\n    _DAT_40023840 = _DAT_40023840 | 0x20000;\n  }\n  else if (memory_address == (void *)0x40004800) {\n    _DAT_40023840 = _DAT_40023840 | 0x40000;\n  }\n  else if (memory_address == (void *)0x40004c00) {\n    _DAT_40023840 = _DAT_40023840 | 0x80000;\n  }\n  else if (memory_address == (void *)0x40005000) {\n    _DAT_40023840 = _DAT_40023840 | 0x100000;\n  }\n  else if (memory_address == (void *)0x40011400) {\n    _DAT_40023844 = _DAT_40023844 | 0x20;\n  }\n  return;\n}\n\n",
            "current_name": "update_memory_flags_08007ea4",
            "entrypoint": "0x08007ea4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007ea4": "update_memory_flags_08007ea4",
                "param_1": "memory_address",
                "undefined": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08007f54": {
            "additional_data": {
                "FUN_08007f54": {
                    "calculate_and_set_clock": 1,
                    "calculate_and_store_clock": 1,
                    "calculate_clock_config": 1,
                    "calculate_clock_configuration": 4,
                    "calculate_clock_divider": 8,
                    "calculate_clock_divisor": 1,
                    "calculate_clock_frequency": 5,
                    "calculate_clock_prescaler": 1,
                    "calculate_clock_speed": 1,
                    "calculate_clock_value": 1,
                    "calculate_frequency": 3,
                    "calculate_pclk": 1,
                    "calculate_pclk1_pclk2": 1,
                    "calculate_pclk_ratio": 1,
                    "calculate_pclk_value": 1
                },
                "HAL_RCC_GetPCLK1Freq": {
                    "get_apb1_clock_frequency": 1,
                    "get_apb1_frequency": 1,
                    "get_pclk1_freq": 3,
                    "get_pclk1_frequency": 18,
                    "get_peripheral_clock1_frequency": 2,
                    "get_peripheral_clock_frequency1": 1
                },
                "HAL_RCC_GetPCLK2Freq": {
                    "get_apb2_clock_frequency": 1,
                    "get_apb2_frequency": 1,
                    "get_pclk2_freq": 3,
                    "get_pclk2_frequency": 18,
                    "get_peripheral_clock2_frequency": 2,
                    "get_peripheral_clock_frequency2": 1
                },
                "iVar2": {
                    "calculated_frequency": 2,
                    "clock1_frequency": 1,
                    "divided_pclk_freq": 1,
                    "freq1": 3,
                    "frequency1": 1,
                    "hal_result1": 1,
                    "pclk1": 2,
                    "pclk1_freq": 5,
                    "pclk1_freq1": 1,
                    "pclk1_frequency": 2,
                    "pclk1_value": 1,
                    "pclk_calculation2": 1,
                    "pclk_divider1": 1,
                    "pclk_freq": 1,
                    "pclk_freq1": 2,
                    "pclk_frequency1": 1,
                    "pclk_value": 1,
                    "prescaler1": 1,
                    "result1": 1,
                    "temp_dividend": 1,
                    "temp_var1": 1
                },
                "iVar3": {
                    "clock2_frequency": 1,
                    "current_frequency": 1,
                    "freq2": 3,
                    "frequency2": 1,
                    "hal_result2": 1,
                    "pclk1_freq2": 4,
                    "pclk1_frequency2": 1,
                    "pclk1_value2": 1,
                    "pclk2": 2,
                    "pclk2_freq": 2,
                    "pclk_calculation3": 1,
                    "pclk_divider2": 1,
                    "pclk_freq2": 3,
                    "pclk_freq_div_by100": 1,
                    "pclk_frequency2": 1,
                    "pclk_value2": 1,
                    "prescaler2": 1,
                    "result2": 1,
                    "temp_divisor": 1,
                    "temp_frequency": 2,
                    "temp_var2": 1
                },
                "param_1": {
                    "address": 8,
                    "base_address": 14,
                    "clock_address": 1,
                    "clock_control": 2,
                    "config_address": 1,
                    "device_address": 2,
                    "memory_address": 1,
                    "peripheral_address": 1,
                    "peripheral_base_address": 1
                },
                "param_2": {
                    "divider": 7,
                    "divisor": 1,
                    "factor": 4,
                    "input_clock_frequency": 1,
                    "input_frequency": 1,
                    "multiplier": 7,
                    "param_multiplier": 1,
                    "prescaler": 6,
                    "prescaler_factor": 1,
                    "value": 2
                },
                "uVar1": {
                    "calculated_prescaler": 1,
                    "calculated_value": 2,
                    "clock_divider": 1,
                    "clock_frequency": 1,
                    "clock_speed": 1,
                    "divider": 1,
                    "divisor": 1,
                    "frequency": 6,
                    "frequency_ratio": 1,
                    "pclk1_freq": 1,
                    "pclk1_freq_multiplier": 1,
                    "pclk_calculation": 1,
                    "pclk_divisor": 1,
                    "pclk_freq_divided": 1,
                    "pclk_multiplier": 3,
                    "pclk_ratio": 1,
                    "pclk_value": 3,
                    "peripheral_clock": 1,
                    "required_frequency": 1,
                    "sys_freq": 1,
                    "temp_calculation": 1
                },
                "uVar4": {
                    "pclk": 2,
                    "pclk2_freq_multiplier": 1,
                    "pclk_freq": 17,
                    "pclk_frequency": 8,
                    "sysclk_freq": 1,
                    "system_frequency": 1
                }
            },
            "called": [
                "FUN_080066cc",
                "FUN_08006680"
            ],
            "calling": [
                "FUN_08008190"
            ],
            "code": "\nvoid calculate_and_set_clock_08007f54(int base_address,int divider)\n\n{\n  ulonglong frequency;\n  int pclk1_freq;\n  int pclk1_freq2;\n  undefined8 pclk_freq;\n  \n  if ((*(uint *)(base_address + 0xc) & 0x8000) == 0) {\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      pclk_freq = get_pclk1_frequency();\n      frequency = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 2);\n      pclk1_freq = get_pclk1_frequency\n                        ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(frequency * 0x51eb851f));\n      pclk1_freq2 = get_pclk1_frequency();\n      *(uint *)(base_address + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(pclk1_freq * 0x19) / (uint)(divider << 2) +\n            (int)(((ulonglong)(uint)(pclk1_freq2 * 0x19) / (ulonglong)(uint)(divider << 2)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    pclk_freq = get_pclk2_frequency();\n    frequency = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 2);\n    pclk1_freq = get_pclk2_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(frequency * 0x51eb851f));\n    pclk1_freq2 = get_pclk2_frequency();\n    *(uint *)(base_address + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(pclk1_freq * 0x19) / (uint)(divider << 2) +\n          (int)(((ulonglong)(uint)(pclk1_freq2 * 0x19) / (ulonglong)(uint)(divider << 2)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  else {\n    if ((base_address != 0x40011000) && (base_address != 0x40011400)) {\n      pclk_freq = get_pclk1_frequency();\n      frequency = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 1);\n      pclk1_freq = get_pclk1_frequency\n                        ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(frequency * 0x51eb851f));\n      pclk1_freq2 = get_pclk1_frequency();\n      *(uint *)(base_address + 8) =\n           (int)(frequency / 100) << 4 |\n           (((uint)(pclk1_freq * 0x19) / (uint)(divider << 1) +\n            (int)(((ulonglong)(uint)(pclk1_freq2 * 0x19) / (ulonglong)(uint)(divider << 1)) / 100) * -100)\n            * 0x10 + 0x32) / 100 & 0xf;\n      return;\n    }\n    pclk_freq = get_pclk2_frequency();\n    frequency = (ulonglong)(uint)((int)pclk_freq * 0x19) / (ulonglong)(uint)(divider << 1);\n    pclk1_freq = get_pclk2_frequency\n                      ((int)pclk_freq,(int)((ulonglong)pclk_freq >> 0x20),(int)(frequency * 0x51eb851f));\n    pclk1_freq2 = get_pclk2_frequency();\n    *(uint *)(base_address + 8) =\n         (int)(frequency / 100) << 4 |\n         (((uint)(pclk1_freq * 0x19) / (uint)(divider << 1) +\n          (int)(((ulonglong)(uint)(pclk1_freq2 * 0x19) / (ulonglong)(uint)(divider << 1)) / 100) * -100) *\n          0x10 + 0x32) / 100 & 0xf;\n  }\n  return;\n}\n\n",
            "current_name": "calculate_and_set_clock_08007f54",
            "entrypoint": "0x08007f54",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08007f54": "calculate_and_set_clock_08007f54",
                "HAL_RCC_GetPCLK1Freq": "get_pclk1_frequency",
                "HAL_RCC_GetPCLK2Freq": "get_pclk2_frequency",
                "iVar2": "pclk1_freq",
                "iVar3": "pclk1_freq2",
                "param_1": "base_address",
                "param_2": "divider",
                "uVar1": "frequency",
                "uVar4": "pclk_freq"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008190": {
            "additional_data": {
                "0x1c200": {
                    "baud_rate_value": 1
                },
                "DAT_40004400": {
                    "usart_control_register": 1
                },
                "DAT_4000440c": {
                    "usart_mode_register": 1
                },
                "DAT_40004410": {
                    "usart_status_register": 1
                },
                "DAT_40004414": {
                    "usart_interrupt_register": 1
                },
                "FUN_08007ea4": {
                    "configure_usart": 1,
                    "enable_usart_clock": 6
                },
                "FUN_08007f54": {
                    "configure_usart_pins": 1,
                    "set_baud_rate": 6
                },
                "FUN_08008190": {
                    "configure_usart": 3,
                    "initialize_uart": 2,
                    "initialize_usart": 24,
                    "initialize_usart_settings": 1,
                    "setup_usart": 1
                },
                "_DAT_40004400": {
                    "baud_rate_register": 1,
                    "clock_register": 1,
                    "config_reg": 1,
                    "configuration_register": 1,
                    "register_4": 1,
                    "usart_baud_rate_register": 2,
                    "usart_clock_reg": 1,
                    "usart_clock_register": 2,
                    "usart_configuration_register": 1,
                    "usart_control": 1,
                    "usart_data_register": 1,
                    "usart_register": 1,
                    "usart_status_register": 1
                },
                "_DAT_4000440c": {
                    "config_register_1": 1,
                    "control_register": 3,
                    "ctrl_reg": 1,
                    "register_1": 1,
                    "usart_config_register_1": 1,
                    "usart_control_reg1": 1,
                    "usart_control_register": 6,
                    "usart_register": 1
                },
                "_DAT_40004410": {
                    "config_register": 1,
                    "config_register_2": 1,
                    "register_2": 1,
                    "status_reg": 1,
                    "status_register": 2,
                    "usart_config1": 1,
                    "usart_config_register": 1,
                    "usart_config_register_2": 1,
                    "usart_control_reg2": 1,
                    "usart_interrupt_register": 1,
                    "usart_status_register": 4
                },
                "_DAT_40004414": {
                    "baud_rate_register": 1,
                    "config_register_3": 1,
                    "data_register": 1,
                    "extra_reg": 1,
                    "interrupt_register": 1,
                    "register_3": 1,
                    "usart_config2": 1,
                    "usart_config_register_3": 1,
                    "usart_control_reg3": 1,
                    "usart_data_register": 1,
                    "usart_dma_register": 1,
                    "usart_error_clear_register": 2,
                    "usart_interrupt_register": 1,
                    "usart_status_register": 1
                },
                "enable_usart_clock": {
                    "enable_clock": 8,
                    "enable_clock_usart": 1,
                    "enable_usart_clk": 1,
                    "enable_usart_clock": 9
                },
                "initialize_usart": {
                    "initialize_usart": 1
                },
                "param_1": {
                    "config_ptr": 1,
                    "data_buffer": 2,
                    "port": 1,
                    "uart_config": 2,
                    "usart_address": 1,
                    "usart_clock_address": 1,
                    "usart_config": 4,
                    "usart_config_ptr": 1,
                    "usart_data": 2,
                    "usart_instance": 1,
                    "usart_ptr": 1,
                    "usart_register": 1
                },
                "param_2": {
                    "baud_rate": 18
                },
                "set_baud_rate": {
                    "configure_baud_rate": 5,
                    "set_baud_rate": 6,
                    "set_uart_baud_rate": 1,
                    "set_usart_baud_rate": 8
                }
            },
            "called": [
                "FUN_08007ea4",
                "FUN_08007f54"
            ],
            "calling": [
                "FUN_08007540"
            ],
            "code": "\n\n\nvoid initialize_usart_settings_08008190(void)\n\n{\n  enable_usart_clock(&DAT_40004400);\n  _DAT_4000440c = _DAT_4000440c & 0xffff400c | 0xc;\n  _DAT_40004410 = _DAT_40004410 & 0xffff8090;\n  _DAT_40004414 = _DAT_40004414 & 0xfffff000;\n  _DAT_40004400 = _DAT_40004400 & 0xfffffc00;\n  set_usart_baud_rate(&DAT_40004400,0x1c200);\n  _DAT_4000440c = _DAT_4000440c | 0x2000;\n  return;\n}\n\n",
            "current_name": "initialize_usart_settings_08008190",
            "entrypoint": "0x08008190",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008190": "initialize_usart_settings_08008190",
                "set_baud_rate": "set_usart_baud_rate"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008244": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_08008244(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_08008244",
            "entrypoint": "0x08008244",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_08008244": "FUNC_08008244"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_08008250": {
            "additional_data": {
                "FUN_08007e1c": {
                    "send_byte": 10,
                    "send_byte_to_usart": 3,
                    "transmit_byte": 6,
                    "transmit_to_usart": 1,
                    "usart_putc": 5,
                    "usart_send_byte": 2
                },
                "FUN_08008250": {
                    "print_byte": 1,
                    "print_char": 2,
                    "print_character": 5,
                    "send_byte": 2,
                    "send_byte_to_usart": 1,
                    "send_char_to_usart": 2,
                    "send_character": 5,
                    "send_data": 4,
                    "send_data_to_usart": 3,
                    "send_to_usart": 2,
                    "send_usart_character": 1,
                    "transmit_byte": 1,
                    "transmit_character": 1,
                    "transmit_data": 1
                },
                "param_1": {
                    "byte": 1,
                    "byte_to_send": 3,
                    "byte_to_transmit": 1,
                    "byteval": 1,
                    "character": 15,
                    "data": 10
                },
                "usart_putc": {
                    "send_byte_to_usart": 2
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [
                "FUN_08003778",
                "FUN_080036c6",
                "FUN_0800369c",
                "FUN_080036f0",
                "FUN_080037fc",
                "FUN_08003826"
            ],
            "code": "\nvoid send_data_to_usart_08008250(undefined character)\n\n{\n  send_byte_to_usart(character);\n  return;\n}\n\n",
            "current_name": "send_data_to_usart_08008250",
            "entrypoint": "0x08008250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008250": "send_data_to_usart_08008250",
                "param_1": "character",
                "usart_putc": "send_byte_to_usart"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800826a": {
            "additional_data": {
                "FUN_08007e1c": {
                    "send_byte": 11,
                    "send_byte_to_usart": 3,
                    "send_character": 1,
                    "transmit_byte": 2,
                    "usart_putc": 3
                },
                "FUN_0800826a": {
                    "output_character": 1,
                    "print_byte_to_usart": 1,
                    "print_char": 1,
                    "print_character": 10,
                    "print_param": 1,
                    "send_byte": 1,
                    "send_byte_to_usart": 2,
                    "send_char_to_usart": 1,
                    "send_character": 2,
                    "send_data": 3,
                    "send_data_to_usart": 2,
                    "send_usart_char": 1,
                    "transmit_byte": 1,
                    "transmit_data": 3,
                    "usart_putc_wrapper": 1
                },
                "param_1": {
                    "byte_to_print": 1,
                    "byte_to_send": 3,
                    "byte_to_transmit": 1,
                    "char_to_send": 1,
                    "character": 17,
                    "data": 8
                },
                "usart_putc": {
                    "send_character": 1
                }
            },
            "called": [
                "FUN_08007e1c"
            ],
            "calling": [],
            "code": "\nundefined4 print_character_0800826a(undefined character)\n\n{\n  send_character(character);\n  return 0;\n}\n\n",
            "current_name": "print_character_0800826a",
            "entrypoint": "0x0800826a",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800826a": "print_character_0800826a",
                "param_1": "character",
                "usart_putc": "send_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008286": {
            "additional_data": {
                "FUN_08008286": {
                    "check_serial_input": 3,
                    "check_usart_input": 1,
                    "handle_serial_input": 1,
                    "handle_serial_rx": 1,
                    "process_serial_data": 5,
                    "process_serial_input": 6,
                    "read_and_process_serial_data": 1,
                    "read_serial_data": 4,
                    "read_serial_input": 1,
                    "receive_byte": 1,
                    "receive_data": 2,
                    "receive_serial_data": 5
                },
                "iVar2": {
                    "byte_available": 1,
                    "character_available": 1,
                    "data_available": 9,
                    "has_data": 7,
                    "has_input": 1,
                    "is_data_available": 9,
                    "serial_data_available": 1,
                    "serial_input_available": 1
                },
                "param_1": {
                    "param_1": 1
                },
                "serial_rx_hook": {
                    "handle_received_data": 3,
                    "handle_serial_input": 1,
                    "process_input": 1,
                    "process_input_char": 1,
                    "process_received_byte": 5,
                    "process_received_char": 1,
                    "process_received_data": 6,
                    "process_serial_data": 1
                },
                "uVar1": {
                    "input_char": 2,
                    "input_character": 1,
                    "input_data": 1,
                    "received_byte": 12,
                    "received_char": 8,
                    "received_character": 1,
                    "received_data": 5
                },
                "usart_getc": {
                    "get_character": 1,
                    "get_data": 2,
                    "get_input_char": 1,
                    "get_received_byte": 3,
                    "get_received_data": 1,
                    "get_serial_byte": 3,
                    "get_serial_data": 3,
                    "get_usart_data": 1,
                    "read_serial_data": 2,
                    "receive_byte": 1,
                    "receive_single_char": 1
                },
                "usart_tstc": {
                    "check_byte_available": 1,
                    "check_data_available": 3,
                    "check_serial_data": 3,
                    "check_serial_data_available": 4,
                    "check_usart_data": 1,
                    "has_character": 1,
                    "is_data_available": 4,
                    "is_serial_data_available": 2
                }
            },
            "called": [
                "FUN_08007e58",
                "FUN_08005900",
                "FUN_08007e84"
            ],
            "calling": [
                "FUN_08003f34"
            ],
            "code": "\nundefined read_and_process_serial_data_08008286(void)\n\n{\n  undefined received_byte;\n  int is_data_available;\n  \n  is_data_available = check_serial_data_available();\n  if (is_data_available != 0) {\n    received_byte = get_received_byte();\n    is_data_available = process_received_data(received_byte);\n    if (is_data_available == 0) {\n      return received_byte;\n    }\n  }\n  return 0xff;\n}\n\n",
            "current_name": "read_and_process_serial_data_08008286",
            "entrypoint": "0x08008286",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008286": "read_and_process_serial_data_08008286",
                "iVar2": "is_data_available",
                "serial_rx_hook": "process_received_data",
                "uVar1": "received_byte",
                "usart_getc": "get_received_byte",
                "usart_tstc": "check_serial_data_available"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082ba": {
            "called": [],
            "calling": [
                "FUN_08001ddc"
            ],
            "code": "\nvoid FUNC_080082ba(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_080082ba",
            "entrypoint": "0x080082ba",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_080082ba": "FUNC_080082ba"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_080082d0": {
            "additional_data": {
                "FUN_080082d0": {
                    "calculate": 1,
                    "calculate_product": 1,
                    "calculate_result": 4,
                    "calculate_unsigned_division": 1,
                    "compute_result": 1,
                    "perform_arithmetic_operation": 2,
                    "reverse": 1,
                    "reverse_arithmetic": 1,
                    "reverse_arithmetic_operations": 1,
                    "reverse_binary": 1,
                    "reverse_binary_extraction": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bit_operations": 1,
                    "reverse_bits": 4,
                    "reverse_bitwise_operations": 1,
                    "reverse_integer": 1
                },
                "bVar13": {
                    "b_var13": 1,
                    "bool_1": 1,
                    "check1": 2,
                    "condition1": 4,
                    "condition_1": 4,
                    "condition_var_1": 1,
                    "flag1": 7,
                    "flag16": 1,
                    "flag_1": 1,
                    "is_condition_met1": 1,
                    "is_equal": 2,
                    "is_zero": 1,
                    "temp10": 1,
                    "temp13": 1,
                    "temp_13": 1,
                    "temp_8": 1
                },
                "bVar14": {
                    "b_var14": 1,
                    "bool_2": 1,
                    "check2": 2,
                    "condition": 1,
                    "condition2": 4,
                    "condition_1": 1,
                    "condition_2": 4,
                    "condition_var_2": 1,
                    "flag15": 1,
                    "flag2": 7,
                    "flag_2": 1,
                    "is_condition_met2": 1,
                    "is_zero": 2,
                    "temp11": 1,
                    "temp14": 1,
                    "temp_14": 1,
                    "temp_9": 1
                },
                "bVar15": {
                    "b_var15": 1,
                    "bool_3": 1,
                    "borrow": 1,
                    "check3": 2,
                    "condition3": 3,
                    "condition_2": 1,
                    "condition_3": 4,
                    "condition_var_3": 1,
                    "flag3": 8,
                    "flag_3": 1,
                    "is_condition_met3": 1,
                    "is_negative": 2,
                    "is_shift": 1,
                    "temp12": 1,
                    "temp15": 1,
                    "temp_10": 1,
                    "temp_15": 1
                },
                "bVar2": {
                    "b_var2": 1,
                    "bit": 1,
                    "carry": 5,
                    "carry1": 1,
                    "carry_1": 1,
                    "carry_bit": 2,
                    "carry_flag": 3,
                    "carry_var": 1,
                    "flag": 1,
                    "temp12": 1,
                    "temp2": 4,
                    "temp68": 1,
                    "temp_2": 1,
                    "temp_7": 1,
                    "temp_byte": 1
                },
                "iVar1": {
                    "bit_shift1": 1,
                    "count_1": 1,
                    "divisor": 1,
                    "flag4": 1,
                    "i_var1": 1,
                    "index_1": 1,
                    "result": 1,
                    "shift1": 2,
                    "shift_1": 1,
                    "shift_amount1": 1,
                    "shift_amount2": 1,
                    "shift_amount_1": 1,
                    "shift_bits1": 1,
                    "shift_count": 1,
                    "shift_num1": 1,
                    "shift_right_variable1": 1,
                    "shifted_b": 1,
                    "shifted_input_2": 1,
                    "shifted_input_4": 1,
                    "temp1": 4,
                    "temp11": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_1": 2
                },
                "iVar8": {
                    "bit_shift2": 1,
                    "count_2": 1,
                    "flag5": 1,
                    "i_var8": 1,
                    "index_2": 1,
                    "result3": 1,
                    "shift": 1,
                    "shift1": 1,
                    "shift2": 2,
                    "shift_2": 1,
                    "shift_amount": 1,
                    "shift_amount1": 1,
                    "shift_amount2": 1,
                    "shift_amount_2": 1,
                    "shift_bits2": 1,
                    "shift_num2": 1,
                    "shift_right_variable2": 1,
                    "shifted_d": 1,
                    "shifted_input_2": 1,
                    "shifted_result_1": 1,
                    "temp4": 1,
                    "temp6": 1,
                    "temp61": 1,
                    "temp7": 1,
                    "temp8": 3,
                    "temp_2": 1,
                    "temp_8": 1
                },
                "param_1": {
                    "dividend_a": 1,
                    "input1": 15,
                    "input_1": 10,
                    "input_a": 1,
                    "input_value1": 1,
                    "num1": 1,
                    "temp44": 1,
                    "x": 1
                },
                "param_2": {
                    "divisor_a": 1,
                    "input2": 15,
                    "input_2": 10,
                    "input_b": 1,
                    "input_value2": 1,
                    "num2": 1,
                    "temp36": 1,
                    "y": 1
                },
                "param_3": {
                    "dividend_b": 1,
                    "input3": 15,
                    "input_3": 10,
                    "input_c": 1,
                    "input_value3": 1,
                    "num3": 1,
                    "temp43": 1,
                    "z": 1
                },
                "param_4": {
                    "divisor_b": 1,
                    "input4": 15,
                    "input_4": 10,
                    "input_d": 1,
                    "input_value4": 2,
                    "num4": 1,
                    "w": 1
                },
                "uVar10": {
                    "modified_input1": 1,
                    "output2": 1,
                    "result2": 6,
                    "result_2": 1,
                    "shift3": 1,
                    "shifted_input1": 1,
                    "sum_3": 1,
                    "temp10": 2,
                    "temp2": 1,
                    "temp3": 2,
                    "temp54": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_10": 1,
                    "temp_4": 2,
                    "temp_5": 2,
                    "temp_6": 1,
                    "temp_shift1": 1,
                    "temp_var_3": 1,
                    "temp_var_6": 1,
                    "u_var10": 1,
                    "value2": 1
                },
                "uVar11": {
                    "abs_difference": 1,
                    "difference": 1,
                    "output3": 1,
                    "processed_input_4": 1,
                    "result3": 6,
                    "result_2": 2,
                    "result_3": 1,
                    "shift4": 1,
                    "temp1": 1,
                    "temp10": 1,
                    "temp11": 2,
                    "temp3": 2,
                    "temp4": 2,
                    "temp69": 1,
                    "temp8": 1,
                    "temp_11": 1,
                    "temp_5": 2,
                    "temp_6": 1,
                    "temp_7": 1,
                    "temp_result1": 1,
                    "u_var11": 1
                },
                "uVar12": {
                    "carry_2": 1,
                    "carry_or_shift_1": 1,
                    "output4": 1,
                    "result4": 5,
                    "result_1": 1,
                    "result_c": 1,
                    "shift5": 1,
                    "temp11": 1,
                    "temp12": 2,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 1,
                    "temp71": 1,
                    "temp9": 2,
                    "temp_12": 1,
                    "temp_6": 2,
                    "temp_7": 1,
                    "temp_8": 1,
                    "temp_result2": 1,
                    "temp_var_4": 1,
                    "temp_var_7": 1,
                    "u_var12": 1
                },
                "uVar13": {
                    "carry_or_shift_2": 1
                },
                "uVar3": {
                    "bit1": 1,
                    "carry": 1,
                    "quotient_a": 1,
                    "result_1": 1,
                    "sum1": 4,
                    "sum_1": 2,
                    "temp1": 6,
                    "temp3": 4,
                    "temp4": 1,
                    "temp42": 1,
                    "temp_1": 4,
                    "temp_3": 1,
                    "temp_result3": 1,
                    "temp_var_1": 2,
                    "temp_variable1": 1
                },
                "uVar4": {
                    "bit2": 1,
                    "quotient_b": 1,
                    "result1": 1,
                    "result_2": 1,
                    "result_high": 1,
                    "shifted_input_1": 1,
                    "sum2": 3,
                    "sum_2": 1,
                    "temp1": 1,
                    "temp2": 6,
                    "temp4": 4,
                    "temp5": 1,
                    "temp59": 1,
                    "temp_1": 1,
                    "temp_2": 3,
                    "temp_4": 1,
                    "temp_result4": 1,
                    "temp_var_2": 1,
                    "temp_variable2": 1
                },
                "uVar5": {
                    "bit3": 1,
                    "result2": 1,
                    "result_3": 1,
                    "sum3": 3,
                    "sum_2": 1,
                    "sum_3": 1,
                    "temp2": 1,
                    "temp3": 6,
                    "temp39": 1,
                    "temp5": 4,
                    "temp6": 1,
                    "temp_2": 1,
                    "temp_3": 3,
                    "temp_5": 1,
                    "temp_result5": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_variable3": 1,
                    "u_var5": 1
                },
                "uVar6": {
                    "modified_input4": 1,
                    "modified_input_4": 1,
                    "result": 1,
                    "result1": 2,
                    "result_1": 3,
                    "result_4": 1,
                    "result_a": 2,
                    "result_low": 1,
                    "temp1": 4,
                    "temp4": 6,
                    "temp6": 3,
                    "temp70": 1,
                    "temp_1": 1,
                    "temp_6": 1,
                    "temp_shift2": 1,
                    "temp_var_4": 1,
                    "temp_variable4": 1
                },
                "uVar7": {
                    "bit4": 1,
                    "result2": 2,
                    "result_2": 3,
                    "result_5": 1,
                    "result_b": 2,
                    "temp2": 2,
                    "temp24": 1,
                    "temp5": 6,
                    "temp7": 4,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_4": 2,
                    "temp_7": 1,
                    "temp_result6": 1,
                    "temp_var_5": 1,
                    "temp_variable5": 1,
                    "value1": 1
                },
                "uVar8": {
                    "temp6": 1,
                    "temp8": 1,
                    "u_var8": 1
                },
                "uVar9": {
                    "modified_input2": 1,
                    "modified_input_2_shifted": 1,
                    "output1": 1,
                    "processed_input_2": 1,
                    "result1": 6,
                    "result_1": 2,
                    "result_3": 1,
                    "shift2": 1,
                    "shifted_input2": 2,
                    "sum2": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp31": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp9": 2,
                    "temp_2": 1,
                    "temp_3": 1,
                    "temp_4": 1,
                    "temp_5": 1,
                    "temp_9": 1,
                    "u_var9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001f00",
                "FUN_08009d78",
                "FUN_080096e8",
                "FUN_0800a1bc",
                "FUN_0800af78",
                "FUN_0800a5a0",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_0800adf0",
                "FUN_08009410",
                "FUN_0800a348",
                "FUN_08009b24",
                "FUN_08009990"
            ],
            "code": "\nulonglong reverse_bitwise_operations_080082d0(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  int temp8;\n  uint result1;\n  uint result2;\n  uint result3;\n  uint result4;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  \n  temp4 = input4 ^ 0x80000000;\n  result1 = input2 << 1;\n  input4 = input4 << 1;\n  flag1 = ((input2 ^ temp4) & 0x7fffffff) == 0;\n  flag2 = flag1 && input1 == input3;\n  if (!flag1 || input1 != input3) {\n    flag2 = (result1 | input1) == 0;\n  }\n  if (!flag2) {\n    flag2 = (input4 | input3) == 0;\n  }\n  temp8 = (int)result1 >> 0x15;\n  if (!flag2) {\n    flag2 = temp8 == -1;\n  }\n  temp1 = (int)input4 >> 0x15;\n  if (!flag2) {\n    flag2 = temp1 == -1;\n  }\n  if (flag2) {\n    if (temp8 == -1 || temp1 == -1) {\n      result1 = temp4;\n      result3 = input3;\n      if (temp8 == -1) {\n        result1 = input2;\n        result3 = input1;\n      }\n      if (temp8 != -1 || temp1 != -1) {\n        input3 = result3;\n        temp4 = result1;\n      }\n      flag2 = (result3 | result1 << 0xc) == 0;\n      if (flag2) {\n        flag2 = (input3 | temp4 << 0xc) == 0;\n      }\n      if (flag2) {\n        flag2 = result1 == temp4;\n      }\n      if (!flag2) {\n        result1 = result1 | 0x80000;\n      }\n      return CONCAT44(result1,result3);\n    }\n    if (((input2 ^ temp4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((result1 | input1) == 0) {\n        input1 = input3;\n        input2 = temp4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != temp4) {\n      return 0;\n    }\n    if (result1 >> 0x15 == 0) {\n      flag2 = (input1 & 0x80000000) != 0;\n      temp4 = input2 * 2 + (uint)flag2;\n      if (CARRY4(input2,input2) || CARRY4(input2 * 2,(uint)flag2)) {\n        temp4 = temp4 | 0x80000000;\n      }\n      return CONCAT44(temp4,input1 << 1);\n    }\n    if (result1 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  result1 = result1 >> 0x15;\n  input4 = input4 >> 0x15;\n  result3 = input4 - result1;\n  flag2 = result3 != 0;\n  if (input4 < result1) {\n    result3 = -result3;\n  }\n  result2 = input1;\n  temp5 = input2;\n  if (flag2 && result1 <= input4) {\n    result1 = result1 + result3;\n    result2 = input3;\n    temp5 = temp4;\n    input3 = input1;\n    temp4 = input2;\n  }\n  if (0x36 < result3) {\n    return CONCAT44(temp5,result2);\n  }\n  temp2 = temp5 & 0xfffff | 0x100000;\n  if ((temp5 & 0x80000000) != 0) {\n    flag2 = result2 != 0;\n    result2 = -result2;\n    temp2 = -temp2 - (uint)flag2;\n  }\n  temp5 = temp4 & 0xfffff | 0x100000;\n  if ((temp4 & 0x80000000) != 0) {\n    flag2 = input3 != 0;\n    input3 = -input3;\n    temp5 = -temp5 - (uint)flag2;\n  }\n  if (result1 == result3) {\n    temp5 = temp5 ^ 0x100000;\n    if (result1 == 0) {\n      temp2 = temp2 ^ 0x100000;\n      result1 = 1;\n    }\n    else {\n      result3 = result3 - 1;\n    }\n  }\n  temp4 = -result3 + 0x20;\n  if ((int)result3 < 0x21) {\n    result4 = input3 << (temp4 & 0xff);\n    input3 = input3 >> (result3 & 0xff);\n    temp1 = result2 + input3;\n    temp3 = temp5 << (temp4 & 0xff);\n    temp4 = temp1 + temp3;\n    temp2 = temp2 + CARRY4(result2,input3) + ((int)temp5 >> (result3 & 0xff)) +\n            (uint)CARRY4(temp1,temp3);\n  }\n  else {\n    result4 = temp5 << (-result3 + 0x40 & 0xff);\n    if (input3 != 0) {\n      result4 = result4 | 2;\n    }\n    temp5 = (int)temp5 >> (result3 - 0x20 & 0xff);\n    temp4 = result2 + temp5;\n    temp2 = temp2 + ((int)temp5 >> 0x1f) + (uint)CARRY4(result2,temp5);\n  }\n  input2 = temp2 & 0x80000000;\n  result3 = temp2;\n  if ((int)temp2 < 0) {\n    flag2 = result4 == 0;\n    result4 = -result4;\n    result3 = -temp4;\n    temp4 = -(uint)!flag2 - temp4;\n    result3 = -(uint)(flag2 <= result3) - temp2;\n  }\n  if (0xfffff < result3) {\n    result2 = result1 - 1;\n    if (0x1fffff < result3) {\n      result2 = result3 & 1;\n      result3 = result3 >> 1;\n      carry = (byte)temp4;\n      temp4 = (uint)(result2 != 0) << 0x1f | temp4 >> 1;\n      result4 = (uint)(carry & 1) << 0x1f | result4 >> 1;\n      result2 = result1;\n      if (0xffbfffff < result1 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    flag2 = 0x7fffffff < result4;\n    if (result4 == 0x80000000) {\n      flag2 = (temp4 & 1) != 0;\n    }\n    return CONCAT44(result3 + result2 * 0x100000 + (uint)CARRY4(temp4,(uint)flag2) | input2,\n                    temp4 + flag2);\n  }\n  flag1 = (result4 & 0x80000000) != 0;\n  result4 = result4 << 1;\n  result2 = temp4 * 2;\n  flag2 = CARRY4(temp4,temp4);\n  temp4 = temp4 * 2 + (uint)flag1;\n  result3 = result3 * 2 + (uint)(flag2 || CARRY4(result2,(uint)flag1));\n  result2 = result1 - 2;\n  if (result1 - 1 != 0 && 0xfffff < result3) goto LAB_080083e0;\n  temp5 = temp4;\n  result1 = result3;\n  if (result3 == 0) {\n    temp5 = 0;\n    result1 = temp4;\n  }\n  temp8 = LZCOUNT(result1);\n  if (result3 == 0) {\n    temp8 = temp8 + 0x20;\n  }\n  result3 = temp8 - 0xb;\n  flag3 = SBORROW4(result3,0x20);\n  temp4 = temp8 - 0x2b;\n  flag2 = (int)temp4 < 0;\n  flag1 = temp4 == 0;\n  if ((int)result3 < 0x20) {\n    flag3 = SCARRY4(temp4,0xc);\n    temp8 = temp8 + -0x1f;\n    flag2 = temp8 < 0;\n    flag1 = temp8 == 0;\n    temp4 = result3;\n    if (!flag1 && flag2 == flag3) {\n      temp5 = result1 << (result3 & 0xff);\n      result1 = result1 >> (0xcU - temp8 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (flag1 || flag2 != flag3) {\n    result4 = 0x20 - temp4;\n  }\n  result1 = result1 << (temp4 & 0xff);\n  if (flag1 || flag2 != flag3) {\n    result1 = result1 | temp5 >> (result4 & 0xff);\n  }\n  if (flag1 || flag2 != flag3) {\n    temp5 = temp5 << (temp4 & 0xff);\n  }\nLAB_08008458:\n  if ((int)result3 <= (int)result2) {\n    return CONCAT44(result1 + (result2 - result3) * 0x100000 | input2,temp5);\n  }\n  temp4 = ~(result2 - result3);\n  if ((int)temp4 < 0x1f) {\n    temp8 = temp4 - 0x13;\n    if (temp8 != 0 && temp8 < 0 == SCARRY4(temp4 - 0x1f,0xc)) {\n      return CONCAT44(temp2,temp5 >> (0x20 - (0xcU - temp8) & 0xff) | result1 << (0xcU - temp8 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    temp4 = temp4 + 1;\n    return CONCAT44(input2 | result1 >> (temp4 & 0xff),\n                    temp5 >> (temp4 & 0xff) | result1 << (0x20 - temp4 & 0xff));\n  }\n  return CONCAT44(temp2,result1 >> (temp4 - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_bitwise_operations_080082d0",
            "entrypoint": "0x080082d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080082d0": "reverse_bitwise_operations_080082d0",
                "bVar13": "flag1",
                "bVar14": "flag2",
                "bVar15": "flag3",
                "bVar2": "carry",
                "iVar1": "temp1",
                "iVar8": "temp8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "result2",
                "uVar11": "result3",
                "uVar12": "result4",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar6": "temp4",
                "uVar7": "temp5",
                "uVar9": "result1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080082d4": {
            "additional_data": {
                "CARRY4": {
                    "carry4": 1
                },
                "FUNG1": {
                    "calculate_value": 1
                },
                "FUN_080082d4": {
                    "calculate": 1,
                    "calculate_bitwise": 1,
                    "calculate_result": 3,
                    "calculate_sum": 3,
                    "calculate_sum_and_shift": 1,
                    "calculate_unsigned_addition": 1,
                    "more_descriptive_function": 1,
                    "multiply_and_shift": 1,
                    "perform_arithmetic_operation": 1,
                    "reverse_arithmetic": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bits": 1,
                    "reverse_bitwise_operations": 1,
                    "simplify_arithmetic": 1,
                    "unsigned_long_long_function": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 1
                },
                "SBORROW4": {
                    "signed_borrow4": 1
                },
                "SCARRY4": {
                    "signed_carry4": 1
                },
                "bVar13": {
                    "are_equal": 1,
                    "bool1": 1,
                    "carry2": 1,
                    "check1": 1,
                    "comparison1": 1,
                    "condition1": 2,
                    "condition_1": 1,
                    "equal1": 1,
                    "flag1": 4,
                    "flag_1": 1,
                    "is_carry": 1,
                    "is_equal": 5,
                    "is_equal1": 2,
                    "is_equal_shifted_inputs": 1,
                    "is_negative": 2,
                    "is_same_sign": 1,
                    "is_zero": 2,
                    "result_15": 1,
                    "tmp13": 1
                },
                "bVar14": {
                    "bool2": 1,
                    "check2": 1,
                    "comparison2": 1,
                    "cond1": 1,
                    "condition": 1,
                    "condition2": 2,
                    "condition_2": 1,
                    "equal2": 1,
                    "flag2": 4,
                    "flag_2": 1,
                    "is_condition": 1,
                    "is_condition_met": 1,
                    "is_equal2": 2,
                    "is_equal_and_not_zero": 1,
                    "is_new_equal": 1,
                    "is_new_sum_negative": 1,
                    "is_special_case": 1,
                    "is_zero": 4,
                    "is_zero_result": 1,
                    "result_16": 1,
                    "should_return": 1,
                    "tmp14": 1
                },
                "bVar15": {
                    "bool3": 1,
                    "borrow": 1,
                    "carry1": 1,
                    "check3": 1,
                    "comparison3": 1,
                    "cond2": 1,
                    "condition3": 2,
                    "condition_3": 1,
                    "flag3": 4,
                    "flag_3": 1,
                    "is_borrow": 1,
                    "is_carry": 1,
                    "is_less_than": 1,
                    "is_negative": 3,
                    "is_positive": 1,
                    "is_sum_negative": 1,
                    "overflow": 2,
                    "overflow_flag": 1,
                    "result_13": 1,
                    "temp_flag": 1,
                    "tmp15": 1
                },
                "bVar2": {
                    "bitwise_shift2": 1,
                    "carry": 7,
                    "carry1": 4,
                    "carry_1": 1,
                    "carry_bit": 2,
                    "carry_flag": 4,
                    "is_set": 1,
                    "lowest_bit": 1,
                    "temp2": 3,
                    "temp_7": 1,
                    "temp_byte": 1,
                    "tmp2": 1
                },
                "iVar1": {
                    "bit_shifted_divisor": 1,
                    "bitwise_shift1": 1,
                    "check4": 1,
                    "first_half_shifted": 1,
                    "input4_shifted_signed": 1,
                    "result1": 1,
                    "shift1": 5,
                    "shift_1": 1,
                    "shift_amount1": 1,
                    "shift_amount_1": 1,
                    "shift_right1": 2,
                    "shift_right_23_2": 1,
                    "shift_value_1": 1,
                    "shifted_bits2": 1,
                    "shifted_input2": 1,
                    "shifted_input4_msb": 1,
                    "temp1": 6,
                    "tmp1": 1
                },
                "iVar6": {
                    "bit_count": 1,
                    "bit_shifted_dividend": 1,
                    "bitwise_shift3": 1,
                    "check5": 1,
                    "input2_shifted_signed": 1,
                    "result_10": 1,
                    "second_half_shifted": 1,
                    "shift1": 1,
                    "shift2": 5,
                    "shift_2": 1,
                    "shift_amount2": 1,
                    "shift_amount_2": 1,
                    "shift_right2": 2,
                    "shift_value_2": 1,
                    "shifted_bits": 1,
                    "shifted_input2_bits": 1,
                    "shifted_input2_msb": 1,
                    "temp2": 1,
                    "temp5": 2,
                    "temp6": 3,
                    "tmp6": 1,
                    "zero": 1
                },
                "param_1": {
                    "a": 2,
                    "first_param": 1,
                    "input1": 18,
                    "input_1": 5,
                    "input_param1": 1,
                    "n1": 1,
                    "num1": 1,
                    "x": 1
                },
                "param_2": {
                    "b": 2,
                    "input2": 18,
                    "input_2": 5,
                    "input_param2": 1,
                    "n2": 1,
                    "num2": 1,
                    "second_param": 1,
                    "y": 1
                },
                "param_3": {
                    "c": 2,
                    "input3": 18,
                    "input_3": 5,
                    "input_param3": 1,
                    "n3": 1,
                    "num3": 1,
                    "third_param": 1,
                    "z": 1
                },
                "param_4": {
                    "d": 2,
                    "fourth_param": 1,
                    "input4": 18,
                    "input_4": 5,
                    "input_param4": 1,
                    "n4": 1,
                    "num4": 1,
                    "w": 1
                },
                "uVar10": {
                    "abs_diff": 1,
                    "difference": 8,
                    "modified_input4": 1,
                    "output2": 1,
                    "result2": 1,
                    "result_5": 1,
                    "result_upper": 1,
                    "shifted_input4_2": 1,
                    "subtract_result": 1,
                    "temp10": 3,
                    "temp5": 4,
                    "temp6": 1,
                    "temp7": 3,
                    "temp_7": 1,
                    "tmp10": 1,
                    "value2": 1
                },
                "uVar11": {
                    "carry_lower": 1,
                    "num1_shifted_carry": 1,
                    "output3": 1,
                    "remainder": 1,
                    "result1": 2,
                    "result3": 1,
                    "result_1": 1,
                    "result_6": 1,
                    "result_hi": 1,
                    "result_upper": 1,
                    "temp1": 2,
                    "temp11": 3,
                    "temp2": 1,
                    "temp6": 4,
                    "temp7": 1,
                    "temp8": 3,
                    "temp_5": 1,
                    "temp_8": 1,
                    "temp_result": 1,
                    "temp_var": 1,
                    "tmp11": 1
                },
                "uVar12": {
                    "carry_upper": 1,
                    "num2_shifted_carry": 1,
                    "output4": 1,
                    "result2": 2,
                    "result4": 1,
                    "result_2": 1,
                    "result_lo": 1,
                    "result_lower": 1,
                    "shifted_result4": 1,
                    "temp1": 1,
                    "temp12": 3,
                    "temp2": 2,
                    "temp7": 4,
                    "temp8": 1,
                    "temp9": 3,
                    "temp_2": 1,
                    "temp_6": 1,
                    "temp_9": 1,
                    "temp_result": 1,
                    "temp_result2": 1,
                    "tmp12": 1
                },
                "uVar15": {
                    "temp_shifted2": 1
                },
                "uVar16": {
                    "result1": 1,
                    "temp2": 1
                },
                "uVar17": {
                    "result2": 1
                },
                "uVar18": {
                    "result3": 1
                },
                "uVar19": {
                    "result4": 1
                },
                "uVar3": {
                    "addition_result_1": 1,
                    "carry1": 2,
                    "result1": 5,
                    "shifted_input2_temp": 1,
                    "sum1": 4,
                    "temp1": 6,
                    "temp2": 2,
                    "temp3": 3,
                    "temp_1": 2,
                    "temp_5": 1,
                    "temp_var3": 1,
                    "tmp3": 1
                },
                "uVar4": {
                    "addition_result_2": 1,
                    "carry2": 2,
                    "new_value1": 1,
                    "result2": 3,
                    "shifted_input1": 1,
                    "shifted_input4_temp": 1,
                    "sum2": 3,
                    "temp1": 1,
                    "temp2": 6,
                    "temp3": 2,
                    "temp4": 3,
                    "temp_2": 2,
                    "temp_6": 1,
                    "temp_var4": 1,
                    "tmp4": 1
                },
                "uVar5": {
                    "carry3": 1,
                    "input2": 1,
                    "input_2_shifted": 1,
                    "modified_input2": 1,
                    "multiplier_1": 1,
                    "num2_shifted": 1,
                    "remain1": 1,
                    "result2": 1,
                    "result3": 1,
                    "shifted_input4": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp3": 5,
                    "temp4": 2,
                    "temp5": 3,
                    "temp_3": 2,
                    "temp_4": 1,
                    "temp_var5": 1,
                    "tmp5": 1,
                    "value1": 1
                },
                "uVar6": {
                    "temp_shifted": 1
                },
                "uVar7": {
                    "carry2": 1,
                    "input2_shifted": 1,
                    "num2_shifted": 1,
                    "result_2": 1,
                    "shift1": 1,
                    "shifted_b": 1,
                    "shifted_input2": 8,
                    "shifted_input2_shifted": 1,
                    "shifted_input_2": 3,
                    "shifted_param_2": 1,
                    "temp1": 1,
                    "temp2": 2,
                    "temp4": 2,
                    "temp7": 3,
                    "temp_4": 1,
                    "temp_var7": 1,
                    "tmp7": 1
                },
                "uVar8": {
                    "bit_shifted_a": 1,
                    "input1": 1,
                    "input_1_shifted": 1,
                    "modified_input1": 1,
                    "num1_shifted": 1,
                    "remain2": 1,
                    "result4": 1,
                    "result_7": 1,
                    "shifted_input1": 1,
                    "shifted_input3": 1,
                    "shifted_input4": 3,
                    "shifted_input4_bits": 1,
                    "shifted_input_4": 1,
                    "shifted_param_4": 1,
                    "sum2": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 2,
                    "temp8": 3,
                    "temp_4": 1,
                    "temp_5": 1,
                    "temp_var8": 1,
                    "tmp8": 1
                },
                "uVar9": {
                    "input4_shifted": 1,
                    "new_value2": 1,
                    "output1": 1,
                    "result1": 1,
                    "result_4": 1,
                    "result_lower": 1,
                    "shift2": 1,
                    "shifted_d": 1,
                    "shifted_input2_2": 1,
                    "shifted_input4": 5,
                    "shifted_input4_shifted": 1,
                    "shifted_input_4": 3,
                    "shifted_temp4": 1,
                    "temp4": 3,
                    "temp6": 3,
                    "temp9": 3,
                    "temp_6": 1,
                    "tmp9": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001f00",
                "FUN_08009d78",
                "FUN_0800a1bc",
                "FUN_08009798",
                "FUN_0800af78",
                "FUN_080094c0",
                "FUN_0800a5a0",
                "FUN_0800b2e8",
                "FUN_0800adf0",
                "FUN_08009318",
                "FUN_0800a348",
                "FUN_08009b24",
                "FUN_08009990",
                "FUN_08009654"
            ],
            "code": "\nulonglong calculate_sum_and_shift_080082d4(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int temp1;\n  byte carry;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  int shift2;\n  uint shifted_input2;\n  uint shifted_input4;\n  uint shifted_input4;\n  uint difference;\n  uint temp6;\n  uint temp7;\n  bool is_equal;\n  bool is_zero;\n  bool flag3;\n  \n  shifted_input2 = input2 << 1;\n  shifted_input4 = input4 << 1;\n  is_equal = ((input2 ^ input4) & 0x7fffffff) == 0;\n  is_zero = is_equal && input1 == input3;\n  if (!is_equal || input1 != input3) {\n    is_zero = (shifted_input2 | input1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = (shifted_input4 | input3) == 0;\n  }\n  shift2 = (int)shifted_input2 >> 0x15;\n  if (!is_zero) {\n    is_zero = shift2 == -1;\n  }\n  temp1 = (int)shifted_input4 >> 0x15;\n  if (!is_zero) {\n    is_zero = temp1 == -1;\n  }\n  if (is_zero) {\n    if (shift2 == -1 || temp1 == -1) {\n      shifted_input4 = input4;\n      shifted_input2 = input3;\n      if (shift2 == -1) {\n        shifted_input4 = input2;\n        shifted_input2 = input1;\n      }\n      if (shift2 != -1 || temp1 != -1) {\n        input3 = shifted_input2;\n        input4 = shifted_input4;\n      }\n      is_zero = (shifted_input2 | shifted_input4 << 0xc) == 0;\n      if (is_zero) {\n        is_zero = (input3 | input4 << 0xc) == 0;\n      }\n      if (is_zero) {\n        is_zero = shifted_input4 == input4;\n      }\n      if (!is_zero) {\n        shifted_input4 = shifted_input4 | 0x80000;\n      }\n      return CONCAT44(shifted_input4,shifted_input2);\n    }\n    if (((input2 ^ input4) & 0x7fffffff) != 0 || input1 != input3) {\n      if ((shifted_input2 | input1) == 0) {\n        input1 = input3;\n        input2 = input4;\n      }\n      return CONCAT44(input2,input1);\n    }\n    if (input2 != input4) {\n      return 0;\n    }\n    if (shifted_input2 >> 0x15 == 0) {\n      is_zero = (input1 & 0x80000000) != 0;\n      shifted_input4 = input2 * 2 + (uint)is_zero;\n      if (carry4(input2,input2) || carry4(input2 * 2,(uint)is_zero)) {\n        shifted_input4 = shifted_input4 | 0x80000000;\n      }\n      return CONCAT44(shifted_input4,input1 << 1);\n    }\n    if (shifted_input2 < 0xffc00000) {\n      return CONCAT44(input2 + 0x100000,input1);\n    }\n    input2 = input2 & 0x80000000;\nLAB_08008514:\n    return (ulonglong)(input2 | 0x7ff00000) << 0x20;\n  }\n  shifted_input2 = shifted_input2 >> 0x15;\n  shifted_input4 = shifted_input4 >> 0x15;\n  difference = shifted_input4 - shifted_input2;\n  is_zero = difference != 0;\n  if (shifted_input4 < shifted_input2) {\n    difference = -difference;\n  }\n  shifted_input4 = input1;\n  temp3 = input2;\n  if (is_zero && shifted_input2 <= shifted_input4) {\n    shifted_input2 = shifted_input2 + difference;\n    shifted_input4 = input3;\n    temp3 = input4;\n    input3 = input1;\n    input4 = input2;\n  }\n  if (0x36 < difference) {\n    return CONCAT44(temp3,shifted_input4);\n  }\n  shifted_input4 = temp3 & 0xfffff | 0x100000;\n  if ((temp3 & 0x80000000) != 0) {\n    is_zero = shifted_input4 != 0;\n    shifted_input4 = -shifted_input4;\n    shifted_input4 = -shifted_input4 - (uint)is_zero;\n  }\n  temp3 = input4 & 0xfffff | 0x100000;\n  if ((input4 & 0x80000000) != 0) {\n    is_zero = input3 != 0;\n    input3 = -input3;\n    temp3 = -temp3 - (uint)is_zero;\n  }\n  if (shifted_input2 == difference) {\n    temp3 = temp3 ^ 0x100000;\n    if (shifted_input2 == 0) {\n      shifted_input4 = shifted_input4 ^ 0x100000;\n      shifted_input2 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  temp7 = -difference + 0x20;\n  if ((int)difference < 0x21) {\n    temp6 = input3 << (temp7 & 0xff);\n    input3 = input3 >> (difference & 0xff);\n    temp1 = shifted_input4 + input3;\n    temp2 = temp3 << (temp7 & 0xff);\n    temp7 = temp1 + temp2;\n    shifted_input4 = shifted_input4 + carry4(shifted_input4,input3) + ((int)temp3 >> (difference & 0xff)) +\n            (uint)carry4(temp1,temp2);\n  }\n  else {\n    temp6 = temp3 << (-difference + 0x40 & 0xff);\n    if (input3 != 0) {\n      temp6 = temp6 | 2;\n    }\n    temp3 = (int)temp3 >> (difference - 0x20 & 0xff);\n    temp7 = shifted_input4 + temp3;\n    shifted_input4 = shifted_input4 + ((int)temp3 >> 0x1f) + (uint)carry4(shifted_input4,temp3);\n  }\n  input2 = shifted_input4 & 0x80000000;\n  difference = shifted_input4;\n  if ((int)shifted_input4 < 0) {\n    is_zero = temp6 == 0;\n    temp6 = -temp6;\n    difference = -temp7;\n    temp7 = -(uint)!is_zero - temp7;\n    difference = -(uint)(is_zero <= difference) - shifted_input4;\n  }\n  if (0xfffff < difference) {\n    shifted_input4 = shifted_input2 - 1;\n    if (0x1fffff < difference) {\n      shifted_input4 = difference & 1;\n      difference = difference >> 1;\n      carry = (byte)temp7;\n      temp7 = (uint)(shifted_input4 != 0) << 0x1f | temp7 >> 1;\n      temp6 = (uint)(carry & 1) << 0x1f | temp6 >> 1;\n      shifted_input4 = shifted_input2;\n      if (0xffbfffff < shifted_input2 * 0x200000) goto LAB_08008514;\n    }\nLAB_080083e0:\n    is_zero = 0x7fffffff < temp6;\n    if (temp6 == 0x80000000) {\n      is_zero = (temp7 & 1) != 0;\n    }\n    return CONCAT44(difference + shifted_input4 * 0x100000 + (uint)carry4(temp7,(uint)is_zero) | input2,\n                    temp7 + is_zero);\n  }\n  is_equal = (temp6 & 0x80000000) != 0;\n  temp6 = temp6 << 1;\n  shifted_input4 = temp7 * 2;\n  is_zero = carry4(temp7,temp7);\n  temp7 = temp7 * 2 + (uint)is_equal;\n  difference = difference * 2 + (uint)(is_zero || carry4(shifted_input4,(uint)is_equal));\n  shifted_input4 = shifted_input2 - 2;\n  if (shifted_input2 - 1 != 0 && 0xfffff < difference) goto LAB_080083e0;\n  temp3 = temp7;\n  shifted_input2 = difference;\n  if (difference == 0) {\n    temp3 = 0;\n    shifted_input2 = temp7;\n  }\n  shift2 = leading_zero_count(shifted_input2);\n  if (difference == 0) {\n    shift2 = shift2 + 0x20;\n  }\n  temp7 = shift2 - 0xb;\n  flag3 = signed_borrow4(temp7,0x20);\n  difference = shift2 - 0x2b;\n  is_zero = (int)difference < 0;\n  is_equal = difference == 0;\n  if ((int)temp7 < 0x20) {\n    flag3 = signed_carry4(difference,0xc);\n    shift2 = shift2 + -0x1f;\n    is_zero = shift2 < 0;\n    is_equal = shift2 == 0;\n    difference = temp7;\n    if (!is_equal && is_zero == flag3) {\n      temp3 = shifted_input2 << (temp7 & 0xff);\n      shifted_input2 = shifted_input2 >> (0xcU - shift2 & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_equal || is_zero != flag3) {\n    temp6 = 0x20 - difference;\n  }\n  shifted_input2 = shifted_input2 << (difference & 0xff);\n  if (is_equal || is_zero != flag3) {\n    shifted_input2 = shifted_input2 | temp3 >> (temp6 & 0xff);\n  }\n  if (is_equal || is_zero != flag3) {\n    temp3 = temp3 << (difference & 0xff);\n  }\nLAB_08008458:\n  if ((int)temp7 <= (int)shifted_input4) {\n    return CONCAT44(shifted_input2 + (shifted_input4 - temp7) * 0x100000 | input2,temp3);\n  }\n  difference = ~(shifted_input4 - temp7);\n  if ((int)difference < 0x1f) {\n    shift2 = difference - 0x13;\n    if (shift2 != 0 && shift2 < 0 == signed_carry4(difference - 0x1f,0xc)) {\n      return CONCAT44(shifted_input4,temp3 >> (0x20 - (0xcU - shift2) & 0xff) | shifted_input2 << (0xcU - shift2 & 0xff)\n                     ) & 0x80000000ffffffff;\n    }\n    difference = difference + 1;\n    return CONCAT44(input2 | shifted_input2 >> (difference & 0xff),\n                    temp3 >> (difference & 0xff) | shifted_input2 << (0x20 - difference & 0xff));\n  }\n  return CONCAT44(shifted_input4,shifted_input2 >> (difference - 0x1f & 0xff)) & 0x80000000ffffffff;\n}\n\n",
            "current_name": "calculate_sum_and_shift_080082d4",
            "entrypoint": "0x080082d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "carry4",
                "FUN_080082d4": "calculate_sum_and_shift_080082d4",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "signed_borrow4",
                "SCARRY4": "signed_carry4",
                "bVar13": "is_equal",
                "bVar14": "is_zero",
                "bVar15": "flag3",
                "bVar2": "carry",
                "iVar1": "temp1",
                "iVar6": "shift2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar10": "difference",
                "uVar11": "temp6",
                "uVar12": "temp7",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar5": "temp3",
                "uVar7": "shifted_input2",
                "uVar8": "shifted_input4",
                "uVar9": "shifted_input4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800854c": {
            "additional_data": {
                "0U": {
                    "zero": 1
                },
                "CONCAT44": {
                    "combine": 1,
                    "combine_results": 1,
                    "concat_values": 1
                },
                "FUN_0800854c": {
                    "bit_shift": 1,
                    "bit_shift_and_concat": 2,
                    "bitwise_shift": 3,
                    "extract_bits": 1,
                    "reverse_bits": 11,
                    "shift_and_combine": 2,
                    "shift_and_concat": 4,
                    "shift_and_concatenate": 4,
                    "shift_and_merge_bits": 1,
                    "shift_left_and_concat": 1,
                    "shift_left_and_merge": 1
                },
                "LAB_08008458": {
                    "apply_shift": 1,
                    "bit_operations": 1,
                    "bit_shift": 1,
                    "continue_label": 1,
                    "end_label": 1,
                    "end_of_function": 1,
                    "merge_bits": 1,
                    "shift_and_mask": 1
                },
                "bVar5": {
                    "condition1": 1,
                    "is_less_than_zero": 2,
                    "is_negative": 23,
                    "is_negative_result": 1,
                    "is_negative_shift": 3,
                    "shift_less_than_zero": 1
                },
                "bVar6": {
                    "condition2": 1,
                    "is_equal_zero": 1,
                    "is_zero": 24,
                    "is_zero_result": 1,
                    "is_zero_shift": 3,
                    "shift_is_zero": 1
                },
                "bVar7": {
                    "b_var7": 1,
                    "carry": 2,
                    "carry_flag": 1,
                    "condition3": 1,
                    "has_borrow": 2,
                    "has_carry": 2,
                    "is_borrow": 1,
                    "is_carry": 3,
                    "is_carry_set": 1,
                    "is_negative2": 1,
                    "is_negative_overflow": 1,
                    "is_over_shift": 1,
                    "is_overflow": 11,
                    "is_subtracted": 1,
                    "is_subtraction": 1,
                    "subtract_carry": 1
                },
                "iVar3": {
                    "bit_count": 5,
                    "count": 8,
                    "leading_zeros": 10,
                    "lzcount_result": 5,
                    "num_bits": 2,
                    "shift_count": 1
                },
                "in_r12": {
                    "in_r12": 4,
                    "mask": 2,
                    "remainder": 1,
                    "remaining_bits": 12,
                    "remaining_shift": 2,
                    "shift_amount": 2,
                    "shifted": 1,
                    "shifted_bits": 1,
                    "shifted_value": 1,
                    "temp": 2,
                    "temp2": 1,
                    "var12": 1,
                    "zero_bits": 1
                },
                "param_1": {
                    "input": 24,
                    "input_num": 1,
                    "input_number": 2,
                    "input_value": 3,
                    "number": 1
                },
                "uVar1": {
                    "combined_value": 1,
                    "merged_value": 1,
                    "output": 1,
                    "output_high": 1,
                    "result": 7,
                    "result1": 6,
                    "result_high": 3,
                    "shift_result": 1,
                    "shifted_num": 1,
                    "shifted_number": 1,
                    "shifted_output": 1,
                    "shifted_value": 4,
                    "upper_bits": 2,
                    "upper_shifted_value": 1
                },
                "uVar11": {
                    "num_bits": 1
                },
                "uVar2": {
                    "bit_offset": 1,
                    "bit_shift": 1,
                    "bits_to_shift": 1,
                    "result2": 5,
                    "shift_amount": 17,
                    "shift_count": 2,
                    "shift_value": 1,
                    "shifted_value": 1
                },
                "uVar4": {
                    "adjusted_count": 2,
                    "adjusted_shift": 1,
                    "extra_shift": 1,
                    "final_offset": 1,
                    "normalized_value": 1,
                    "offset": 4,
                    "shift": 2,
                    "shift_amount": 5,
                    "shift_plus_constant": 1,
                    "shift_total": 1,
                    "shifted_amount": 4,
                    "sum": 3,
                    "temp": 1,
                    "total_bits": 1,
                    "u_var4": 2,
                    "var4": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001994"
            ],
            "code": "\nulonglong reverse_bits_0800854c(uint input)\n\n{\n  uint result;\n  uint shift_amount;\n  int leading_zeros;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_overflow;\n  \n  if (input == 0) {\n    return 0;\n  }\n  result = 0;\n  leading_zeros = LZCOUNT(input);\n  shift_amount = leading_zeros + 0x15;\n  is_overflow = SBORROW4(shift_amount,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (shift_amount < 0x20) {\n    is_overflow = SCARRY4(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = shift_amount;\n    if (!is_zero && is_overflow == false) {\n      result = input << shift_amount;\n      input = input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto bit_operations;\n    }\n  }\n  if (is_zero || is_negative != is_overflow) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  input = input << (shift_amount & 0xff);\n  if (is_zero || is_negative != is_overflow) {\n    input = input | zero >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != is_overflow) {\n    result = 0 << (shift_amount & 0xff);\n  }\nbit_operations:\n  if (shift_amount < 0x433) {\n    return combine_results(input + (0x432 - shift_amount) * 0x100000,result);\n  }\n  shift_amount = ~(0x432 - shift_amount);\n  if (0x1e < (int)shift_amount) {\n    return (ulonglong)(input >> (shift_amount - 0x1f & 0xff));\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != SCARRY4(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_results(input >> (shift_amount & 0xff),\n                    result >> (shift_amount & 0xff) | input << (0x20 - shift_amount & 0xff));\n  }\n  return (ulonglong)(result >> (0x20 - (0xcU - leading_zeros) & 0xff) | input << (0xcU - leading_zeros & 0xff));\n}\n\n",
            "current_name": "reverse_bits_0800854c",
            "entrypoint": "0x0800854c",
            "imported": false,
            "improved": true,
            "renaming": {
                "0U": "zero",
                "CONCAT44": "combine_results",
                "FUN_0800854c": "reverse_bits_0800854c",
                "LAB_08008458": "bit_operations",
                "bVar5": "is_negative",
                "bVar6": "is_zero",
                "bVar7": "is_overflow",
                "iVar3": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "result",
                "uVar2": "shift_amount",
                "uVar4": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800856c": {
            "additional_data": {
                "CONCAT44": {
                    "combine_values": 1,
                    "concatenate": 1
                },
                "FUN_0800856c": {
                    "bit_count_shift": 1,
                    "bit_reverse": 1,
                    "bit_shift_and_concat": 1,
                    "bitwise_shift": 5,
                    "bitwise_shift_and_concat": 2,
                    "bitwise_shift_and_concatenate": 1,
                    "bitwise_shift_and_rotate": 1,
                    "bitwise_shift_with_carry": 1,
                    "calculate_rotation_count": 1,
                    "calculate_shifted_value": 1,
                    "decode_and_shift": 1,
                    "process_unsigned_integer": 1,
                    "reverse_and_combine": 1,
                    "reverse_bit_operations": 1,
                    "reverse_bits": 5,
                    "reverse_bits_and_shift": 1,
                    "shift_and_combine": 1,
                    "shift_and_concat": 2,
                    "shift_and_merge": 1,
                    "unpack_bits": 1
                },
                "LAB_08008458": {
                    "perform_shift": 1,
                    "shifted_result": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 2
                },
                "SBORROW4": {
                    "is_subtraction_borrow": 1
                },
                "SCARRY4": {
                    "is_subtraction_carry": 2
                },
                "_FuncRetVar": {
                    "combined_result": 1
                },
                "bVar7": {
                    "check_condition1": 1,
                    "has_leading_zeros": 1,
                    "is_count_negative": 1,
                    "is_less_than_threshold": 1,
                    "is_less_than_zero": 1,
                    "is_negative": 18,
                    "is_negative_shift": 1,
                    "is_negative_zeros": 1,
                    "is_shifted": 1,
                    "leading_zero_flag": 1,
                    "leading_zeros_less_than_zero": 1,
                    "leading_zeros_negative": 2,
                    "negative_shift": 1
                },
                "bVar8": {
                    "check_condition2": 1,
                    "is_count_zero": 1,
                    "is_equal_threshold": 1,
                    "is_zero": 19,
                    "is_zero_or_positive": 1,
                    "is_zero_shift": 2,
                    "is_zeros": 1,
                    "leading_zeros_equal_to_zero": 1,
                    "leading_zeros_zero": 2,
                    "zero_flag": 1,
                    "zero_shift": 1
                },
                "bVar9": {
                    "carry": 2,
                    "carry_flag": 8,
                    "check_condition3": 1,
                    "has_carry": 1,
                    "is_base_shift_carry": 1,
                    "is_borrow": 1,
                    "is_carry": 2,
                    "is_overflow": 3,
                    "is_threshold_overflow": 1,
                    "leading_zeros_borrow": 1,
                    "leading_zeros_overflow": 1,
                    "overflow": 5,
                    "overflow_flag": 1,
                    "overflow_occurred": 1,
                    "should_set_sign_bit": 1,
                    "should_shift": 1
                },
                "iVar4": {
                    "bit_count": 1,
                    "count": 2,
                    "leading_zero_count": 1,
                    "leading_zeroes": 1,
                    "leading_zeros": 23,
                    "leading_zeros_diff": 1,
                    "lz_count": 1,
                    "temp3": 1
                },
                "in_r12": {
                    "bit_width": 1,
                    "bitmask": 1,
                    "constant_0x20": 1,
                    "mask": 2,
                    "num_bits": 1,
                    "remaining_bits": 21,
                    "remaining_shift": 1,
                    "shift_mask": 1,
                    "temp": 2
                },
                "output": {
                    "rotated_value": 1
                },
                "param_1": {
                    "input": 25,
                    "input_number": 3,
                    "input_value": 2,
                    "number": 1
                },
                "uVar1": {
                    "bit_count": 2,
                    "count": 1,
                    "count_shift": 1,
                    "final_result": 1,
                    "leading_zeros": 1,
                    "output1": 2,
                    "result": 4,
                    "result1": 1,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_count": 3,
                    "shift_result": 1,
                    "shifted_bits": 3,
                    "shifted_input": 1,
                    "shifted_number": 1,
                    "shifted_value": 4,
                    "sign_extension": 1,
                    "unsigned_var1": 1,
                    "zero_count": 1
                },
                "uVar2": {
                    "abs_input": 14,
                    "abs_input_number": 1,
                    "abs_number": 2,
                    "abs_value": 3,
                    "absolute_bits": 1,
                    "absolute_input": 1,
                    "absolute_value": 3,
                    "output2": 2,
                    "result_low": 1,
                    "shifted_input": 1,
                    "temp_input": 1,
                    "unsigned_var2": 1
                },
                "uVar3": {
                    "bit_offset": 1,
                    "result": 1,
                    "result_high": 1,
                    "rotation": 1,
                    "shift": 3,
                    "shift_amount": 20,
                    "shift_val1": 1,
                    "shifted_bits": 1,
                    "shifted_value": 1,
                    "unsigned_var3": 1
                },
                "uVar5": {
                    "adjusted_shift": 2,
                    "adjusted_shift_amount": 1,
                    "base_shift": 1,
                    "constant_0x15": 1,
                    "end_shift": 1,
                    "extra_bits": 1,
                    "new_shift": 1,
                    "rotation_offset": 1,
                    "shift_amount": 2,
                    "shift_count": 1,
                    "shift_threshold": 1,
                    "shift_val2": 1,
                    "shift_value": 1,
                    "shifted_bits_adjusted": 1,
                    "shifted_leading_zeros": 1,
                    "shifted_minus_11": 1,
                    "shifted_value": 1,
                    "shifted_value_plus_21": 1,
                    "temp": 1,
                    "threshold": 1,
                    "total_bits": 7,
                    "total_shift": 2
                },
                "uVar6": {
                    "input_sign": 3,
                    "input_sign_bit": 1,
                    "is_negative": 2,
                    "msb": 1,
                    "sign_bit": 22,
                    "sign_mask": 1,
                    "temp2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009d78",
                "FUN_08002c18",
                "FUN_0800a5a0"
            ],
            "code": "\nulonglong bitwise_shift_and_concat_0800856c(uint input)\n\n{\n  uint shifted_value;\n  uint abs_input;\n  uint shift_amount;\n  int leading_zeros;\n  uint total_bits;\n  uint sign_bit;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool carry_flag;\n  \n  if (input == 0) {\n    return 0;\n  }\n  sign_bit = input & 0x80000000;\n  abs_input = input;\n  if ((int)sign_bit < 0) {\n    abs_input = -input;\n  }\n  shifted_value = 0;\n  leading_zeros = leading_zero_count(abs_input);\n  total_bits = leading_zeros + 0x15;\n  carry_flag = is_subtraction_borrow(total_bits,0x20);\n  shift_amount = leading_zeros - 0xb;\n  is_negative = (int)shift_amount < 0;\n  is_zero = shift_amount == 0;\n  if (total_bits < 0x20) {\n    carry_flag = is_subtraction_carry(shift_amount,0xc);\n    is_negative = false;\n    is_zero = leading_zeros + 1 == 0;\n    shift_amount = total_bits;\n    if (!is_zero && carry_flag == false) {\n      shifted_value = abs_input << total_bits;\n      abs_input = abs_input >> (0xcU - (leading_zeros + 1) & 0xff);\n      goto shifted_result;\n    }\n  }\n  if (is_zero || is_negative != carry_flag) {\n    remaining_bits = 0x20 - shift_amount;\n  }\n  abs_input = abs_input << (shift_amount & 0xff);\n  if (is_zero || is_negative != carry_flag) {\n    abs_input = abs_input | 0U >> (remaining_bits & 0xff);\n  }\n  if (is_zero || is_negative != carry_flag) {\n    shifted_value = 0 << (shift_amount & 0xff);\n  }\nshifted_result:\n  if (total_bits < 0x433) {\n    return combine_values(abs_input + (0x432 - total_bits) * 0x100000 | sign_bit,shifted_value);\n  }\n  shift_amount = ~(0x432 - total_bits);\n  if (0x1e < (int)shift_amount) {\n    return combine_values(input,abs_input >> (shift_amount - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  leading_zeros = shift_amount - 0x13;\n  if (leading_zeros == 0 || leading_zeros < 0 != is_subtraction_carry(shift_amount - 0x1f,0xc)) {\n    shift_amount = shift_amount + 1;\n    return combine_values(sign_bit | abs_input >> (shift_amount & 0xff),\n                    shifted_value >> (shift_amount & 0xff) | abs_input << (0x20 - shift_amount & 0xff));\n  }\n  return combine_values(input,shifted_value >> (0x20 - (0xcU - leading_zeros) & 0xff) | abs_input << (0xcU - leading_zeros & 0xff))\n         & 0x80000000ffffffff;\n}\n\n",
            "current_name": "bitwise_shift_and_concat_0800856c",
            "entrypoint": "0x0800856c",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_values",
                "FUN_0800856c": "bitwise_shift_and_concat_0800856c",
                "LAB_08008458": "shifted_result",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "is_subtraction_borrow",
                "SCARRY4": "is_subtraction_carry",
                "bVar7": "is_negative",
                "bVar8": "is_zero",
                "bVar9": "carry_flag",
                "iVar4": "leading_zeros",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "uVar1": "shifted_value",
                "uVar2": "abs_input",
                "uVar3": "shift_amount",
                "uVar5": "total_bits",
                "uVar6": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008590": {
            "additional_data": {
                "CONCAT44": {
                    "combine_bits": 1
                },
                "FUN_08008590": {
                    "calculate_shifted_value": 1,
                    "reverse_bin_value": 1,
                    "reverse_binary": 1,
                    "reverse_binary_operation": 1,
                    "reverse_bit_pattern": 1,
                    "reverse_bits": 18,
                    "reverse_number_bits": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 2,
                    "leading_zeros": 1
                },
                "SBORROW4": {
                    "subtract_carry": 1
                },
                "SCARRY4": {
                    "add_carry": 1
                },
                "bVar10": {
                    "b_condition3": 1,
                    "b_var3": 1,
                    "carry_flag": 1,
                    "check_less_than_32": 1,
                    "comparison_result1": 1,
                    "cond3": 1,
                    "flag3": 1,
                    "greater_than32": 1,
                    "is_bit_count_negative": 1,
                    "is_carry": 2,
                    "is_greater_than": 1,
                    "is_negative": 6,
                    "is_negative_shift": 2,
                    "is_positive": 3,
                    "is_positive_shift": 1,
                    "is_shift_negative": 1,
                    "is_shift_negative_result": 1,
                    "rhs_borrow": 1,
                    "temp3": 1
                },
                "bVar8": {
                    "b_condition1": 1,
                    "b_var1": 1,
                    "carry": 1,
                    "comparison_result3": 1,
                    "cond1": 1,
                    "flag1": 1,
                    "is_carry": 1,
                    "is_equal": 1,
                    "is_less": 1,
                    "is_less_than": 2,
                    "is_lower_bit": 1,
                    "is_neg": 1,
                    "is_negative": 5,
                    "is_negative_shift": 1,
                    "is_shift_equal": 1,
                    "is_shift_negative": 1,
                    "is_zero": 1,
                    "is_zero_shift": 1,
                    "less_than32": 1,
                    "shift_greater_than_32": 1,
                    "shifted_exceed_32": 1,
                    "temp1": 1
                },
                "bVar9": {
                    "b_condition2": 1,
                    "b_var2": 1,
                    "check_ff000000": 1,
                    "comparison_result2": 1,
                    "cond2": 1,
                    "equal32": 1,
                    "flag2": 1,
                    "is_equal": 2,
                    "is_ff000000": 1,
                    "is_ff_shift": 1,
                    "is_input_shifted": 1,
                    "is_input_zero": 1,
                    "is_mask_zero": 1,
                    "is_shift_zero": 1,
                    "is_zero": 12,
                    "temp2": 1
                },
                "iVar6": {
                    "bit_count": 11,
                    "bit_position": 1,
                    "bits_to_shift": 1,
                    "count": 6,
                    "index": 1,
                    "lzcount_result": 1,
                    "num_bits": 1,
                    "shift_amount": 2,
                    "shift_count": 3,
                    "shifted_amount": 1,
                    "shifted_count": 1
                },
                "in_r12": {
                    "additional_shift": 1,
                    "bitmask": 1,
                    "constant": 1,
                    "extra_shift": 1,
                    "in_register": 1,
                    "input_copy": 1,
                    "remain": 1,
                    "remainder": 4,
                    "remaining_bits": 10,
                    "remaining_shift": 1,
                    "temp": 2,
                    "temp5": 1,
                    "temp_reg": 1,
                    "temp_register": 1,
                    "temp_value": 1,
                    "var7": 1
                },
                "in_r13": {
                    "remaining_shift": 1
                },
                "param_1": {
                    "input": 22,
                    "input_value": 7,
                    "number": 1
                },
                "param_2": {
                    "ignore1": 1,
                    "length": 1,
                    "param2": 9,
                    "unimportant_param1": 1,
                    "unused": 4,
                    "unused1": 1,
                    "unused_param": 3,
                    "unused_param_1": 1,
                    "val1": 1,
                    "var2": 1
                },
                "param_3": {
                    "another_unused_param": 1,
                    "ignore2": 1,
                    "offset": 1,
                    "param3": 9,
                    "unimportant_param2": 1,
                    "unused": 4,
                    "unused2": 1,
                    "unused_param": 2,
                    "unused_param_2": 1,
                    "val2": 1,
                    "var3": 1
                },
                "param_4": {
                    "comparison_value": 1,
                    "flag": 5,
                    "ignore3": 1,
                    "input_mask": 1,
                    "input_value2": 1,
                    "mask": 7,
                    "param4": 8,
                    "unimportant_param3": 1,
                    "unused": 2,
                    "unused3": 1,
                    "unused_param_3": 1,
                    "var4": 1
                },
                "uVar1": {
                    "bit0": 1,
                    "bit31": 9,
                    "bit31_shifted": 1,
                    "high_bit": 3,
                    "high_bit_mask": 1,
                    "leading_bit": 1,
                    "msb": 2,
                    "msb_bit": 1,
                    "msb_flag": 1,
                    "msb_mask": 3,
                    "msb_set": 1,
                    "sign_bit": 2,
                    "sign_bit_mask": 1,
                    "sign_shift": 1,
                    "upper_bit": 2
                },
                "uVar2": {
                    "input_copy": 1,
                    "output": 2,
                    "result": 5,
                    "result_1": 1,
                    "shifted": 1,
                    "shifted_input": 3,
                    "shifted_value": 3,
                    "temp": 3,
                    "temp1": 5,
                    "temp_val": 1,
                    "temp_value": 1,
                    "temp_var": 2,
                    "temp_var1": 2
                },
                "uVar3": {
                    "bit31_and_shifted_bits": 1,
                    "bit31_extended": 1,
                    "bit31_shifted_or": 1,
                    "bit31_var2": 1,
                    "extended": 1,
                    "final_result": 2,
                    "mask": 1,
                    "result": 12,
                    "result1": 2,
                    "result_2": 1,
                    "result_high": 4,
                    "result_with_msb": 1,
                    "temp2": 2
                },
                "uVar4": {
                    "bit23_30": 1,
                    "bit_shifted": 1,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "shift_value": 1,
                    "shift_value1": 1,
                    "shifted": 4,
                    "shifted_bits": 1,
                    "shifted_count": 1,
                    "shifted_input": 5,
                    "shifted_mask": 2,
                    "shifted_msb": 1,
                    "shifted_offset": 1,
                    "shifted_param": 1,
                    "shifted_val": 1,
                    "shifted_value": 4,
                    "temp3": 1
                },
                "uVar5": {
                    "bit1_31": 1,
                    "doubled_input": 1,
                    "input_shifted": 1,
                    "shift_value2": 1,
                    "shifted_input": 8,
                    "shifted_input_twice": 1,
                    "shifted_number": 1,
                    "shifted_result": 1,
                    "shifted_value2": 1,
                    "temp": 6,
                    "temp2": 2,
                    "temp4": 1,
                    "temp_value": 1,
                    "temp_var2": 2,
                    "twice_input": 2
                },
                "uVar6": {
                    "result_low": 1
                },
                "uVar7": {
                    "adjusted_count": 1,
                    "bits_remaining": 1,
                    "count": 1,
                    "count2": 1,
                    "diff": 3,
                    "difference": 1,
                    "leading_zeros": 1,
                    "lzcount_param": 1,
                    "shift": 1,
                    "shift_amount": 6,
                    "shift_count": 1,
                    "shift_diff": 2,
                    "shifted_bit_count": 1,
                    "shifted_bits": 1,
                    "shifted_by_minus11": 1,
                    "shifted_count": 1,
                    "shifted_result": 3,
                    "trailing_zeros": 1,
                    "var6": 1
                },
                "uVar9": {
                    "shifted_input": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08002408",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080044e8",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_080046d0"
            ],
            "code": "\nulonglong reverse_number_bits_08008590(uint input,undefined4 param2,undefined4 param3,uint param4)\n\n{\n  uint bit31;\n  uint temp1;\n  uint result;\n  uint shifted_input;\n  uint shifted_input;\n  int bit_count;\n  uint shift_amount;\n  uint remaining_bits;\n  bool is_negative;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input = input << 1;\n  is_zero = shifted_input == 0;\n  bit31 = (uint)((input & 0x80000000) != 0) << 0x1f;\n  shifted_input = (uint)((int)shifted_input >> 3) >> 1;\n  result = bit31 | shifted_input;\n  input = input << 0x1d;\n  if (!is_zero) {\n    param4 = shifted_input & 0xff000000;\n    is_zero = param4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = param4 == 0xff000000;\n  }\n  if (!is_zero) {\n    return combine_bits(result,input) ^ 0x3800000000000000;\n  }\n  if ((shifted_input & 0xffffff) == 0) {\n    return combine_bits(result,input);\n  }\n  if (param4 == 0xff000000) {\n    return combine_bits(result,input) | 0x8000000000000;\n  }\n  temp1 = input;\n  shifted_input = shifted_input;\n  if (shifted_input == 0) {\n    temp1 = 0;\n    shifted_input = input;\n  }\n  bit_count = leading_zero_count(shifted_input);\n  if (shifted_input == 0) {\n    bit_count = bit_count + 0x20;\n  }\n  shift_amount = bit_count - 0xb;\n  is_negative = subtract_carry(shift_amount,0x20);\n  shifted_input = bit_count - 0x2b;\n  is_zero = (int)shifted_input < 0;\n  is_negative = shifted_input == 0;\n  if ((int)shift_amount < 0x20) {\n    is_negative = add_carry(shifted_input,0xc);\n    bit_count = bit_count + -0x1f;\n    is_zero = bit_count < 0;\n    is_negative = bit_count == 0;\n    shifted_input = shift_amount;\n    if (!is_negative && is_zero == is_negative) {\n      temp1 = shifted_input << (shift_amount & 0xff);\n      shifted_input = shifted_input >> (0xcU - bit_count & 0xff);\n      goto LAB_08008458;\n    }\n  }\n  if (is_negative || is_zero != is_negative) {\n    remaining_bits = 0x20 - shifted_input;\n  }\n  shifted_input = shifted_input << (shifted_input & 0xff);\n  if (is_negative || is_zero != is_negative) {\n    shifted_input = shifted_input | temp1 >> (remaining_bits & 0xff);\n  }\n  if (is_negative || is_zero != is_negative) {\n    temp1 = temp1 << (shifted_input & 0xff);\n  }\nLAB_08008458:\n  if ((int)shift_amount < 0x381) {\n    return combine_bits(shifted_input + (0x380 - shift_amount) * 0x100000 | bit31,temp1);\n  }\n  shifted_input = ~(0x380 - shift_amount);\n  if (0x1e < (int)shifted_input) {\n    return combine_bits(result,shifted_input >> (shifted_input - 0x1f & 0xff)) & 0x80000000ffffffff;\n  }\n  bit_count = shifted_input - 0x13;\n  if (bit_count == 0 || bit_count < 0 != add_carry(shifted_input - 0x1f,0xc)) {\n    shifted_input = shifted_input + 1;\n    return combine_bits(bit31 | shifted_input >> (shifted_input & 0xff),\n                    temp1 >> (shifted_input & 0xff) | shifted_input << (0x20 - shifted_input & 0xff));\n  }\n  return combine_bits(result,temp1 >> (0x20 - (0xcU - bit_count) & 0xff) | shifted_input << (0xcU - bit_count & 0xff)) &\n         0x80000000ffffffff;\n}\n\n",
            "current_name": "reverse_number_bits_08008590",
            "entrypoint": "0x08008590",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "combine_bits",
                "FUN_08008590": "reverse_number_bits_08008590",
                "LZCOUNT": "leading_zero_count",
                "SBORROW4": "subtract_carry",
                "SCARRY4": "add_carry",
                "bVar10": "is_negative",
                "bVar8": "is_negative",
                "bVar9": "is_zero",
                "iVar6": "bit_count",
                "in_r12": "remaining_bits",
                "param_1": "input",
                "param_2": "param2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "bit31",
                "uVar2": "temp1",
                "uVar3": "result",
                "uVar4": "shifted_input",
                "uVar5": "shifted_input",
                "uVar7": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008640": {
            "additional_data": {
                "FUN_08008640": {
                    "calculate": 1,
                    "calculate_and_return_result": 1,
                    "calculate_floating_point": 1,
                    "calculate_math_operation": 2,
                    "calculate_modified_value": 1,
                    "calculate_multiply_and_shift": 1,
                    "calculate_product": 5,
                    "calculate_product_and_sum": 2,
                    "calculate_result": 11,
                    "calculate_updated_value": 1,
                    "calculate_updated_values": 1,
                    "calculate_value": 1,
                    "perform_calculation": 3
                },
                "bVar10": {
                    "bool2": 1,
                    "check_2": 1,
                    "condition2": 2,
                    "flag2": 6,
                    "flag_2": 3,
                    "flag_b": 2,
                    "flag_var_2": 1,
                    "is_negative": 9,
                    "is_overflow": 1,
                    "is_true_2": 1,
                    "is_zero2": 1,
                    "overflow": 1,
                    "temp11": 1,
                    "temp_var_11": 1
                },
                "bVar11": {
                    "bool3": 1,
                    "check_3": 1,
                    "condition3": 2,
                    "flag3": 6,
                    "flag_3": 3,
                    "flag_c": 2,
                    "flag_var_3": 1,
                    "is_another_condition": 1,
                    "is_borrow": 2,
                    "is_equal": 1,
                    "is_negative": 1,
                    "is_negative2": 1,
                    "is_overflow": 3,
                    "is_true_3": 1,
                    "is_underflow": 1,
                    "overflow": 1,
                    "overflow2": 1,
                    "temp12": 1,
                    "temp_var_12": 1
                },
                "bVar9": {
                    "bool1": 1,
                    "check_1": 1,
                    "condition1": 2,
                    "flag": 1,
                    "flag1": 6,
                    "flag_1": 2,
                    "flag_a": 2,
                    "flag_var_1": 1,
                    "is_true": 1,
                    "is_true_1": 1,
                    "is_zero": 10,
                    "is_zero1": 1,
                    "temp10": 1,
                    "temp_var_10": 1
                },
                "iVar5": {
                    "c": 1,
                    "i_var5": 1,
                    "result_5": 2,
                    "sum": 8,
                    "sum_of_high_bits": 1,
                    "sum_of_shifted_params": 1,
                    "sum_var": 1,
                    "temp1": 2,
                    "temp3": 5,
                    "temp5": 2,
                    "temp_3": 2,
                    "temp_c": 1,
                    "temp_var4": 1,
                    "temp_var_4": 1,
                    "temp_var_5": 1,
                    "var3": 1
                },
                "lVar2": {
                    "product_high": 1,
                    "result2": 7,
                    "result_2": 5,
                    "temp": 9,
                    "temp2": 2,
                    "temp_result": 2,
                    "temp_var": 4,
                    "temp_var_2": 1
                },
                "param_1": {
                    "first_param": 1,
                    "input1": 11,
                    "input_1": 13,
                    "input_a": 1,
                    "input_param_1": 2,
                    "value1": 1,
                    "value_1": 1,
                    "variable_a": 1
                },
                "param_2": {
                    "input2": 11,
                    "input_2": 13,
                    "input_b": 1,
                    "input_param_2": 2,
                    "second_param": 1,
                    "value2": 1,
                    "value_2": 1,
                    "variable_b": 1
                },
                "param_3": {
                    "input3": 11,
                    "input_3": 13,
                    "input_c": 1,
                    "input_param_3": 2,
                    "third_param": 1,
                    "value3": 1,
                    "value_3": 1,
                    "variable_c": 1
                },
                "param_4": {
                    "fourth_param": 1,
                    "input4": 11,
                    "input_4": 13,
                    "input_d": 1,
                    "input_param_4": 2,
                    "value4": 1,
                    "value_4": 1,
                    "variable_d": 1
                },
                "reverse_and_update_bits_0800881c": {
                    "reverse_and_update_bits": 5
                },
                "uVar1": {
                    "product": 4,
                    "product_low": 2,
                    "result": 10,
                    "result1": 7,
                    "result_1": 5,
                    "temp1": 2,
                    "temp_var_1": 1
                },
                "uVar12": {
                    "combined_input": 8,
                    "combined_input_params": 1,
                    "combined_inputs": 2,
                    "combined_params": 2,
                    "combined_result": 1,
                    "combined_values": 1,
                    "combined_vars": 2,
                    "concat_result": 1,
                    "concatenated": 2,
                    "concatenated_args": 1,
                    "concatenated_params": 1,
                    "concatenated_val": 1,
                    "concatenated_value": 1,
                    "concatenated_vars": 1,
                    "product": 1,
                    "result_9": 1,
                    "temp13": 1,
                    "temp_7": 1,
                    "temp_var_13": 1
                },
                "uVar3": {
                    "a": 1,
                    "bitwise_op1": 1,
                    "constant3": 1,
                    "flag_1": 1,
                    "high_bits": 1,
                    "high_bits_1": 1,
                    "part_a": 1,
                    "product_high": 1,
                    "result_3": 2,
                    "sum1": 1,
                    "temp1": 6,
                    "temp3": 1,
                    "temp_1": 2,
                    "temp_a": 1,
                    "temp_var2": 1,
                    "temp_var_1": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "u_var3": 1,
                    "updated_value1": 1,
                    "value1": 1,
                    "var1": 2,
                    "x": 1
                },
                "uVar4": {
                    "b": 1,
                    "bitwise_op2": 1,
                    "constant2": 1,
                    "first_param_shifted": 1,
                    "flag_2": 1,
                    "high_bits_2": 1,
                    "param2_bits": 1,
                    "part_b": 1,
                    "result_4": 2,
                    "shifted_value1": 1,
                    "sum2": 1,
                    "temp2": 6,
                    "temp4": 1,
                    "temp_2": 2,
                    "temp_b": 1,
                    "temp_var3": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "u_var4": 1,
                    "value2": 1,
                    "var2": 2,
                    "y": 1
                },
                "uVar6": {
                    "d": 1,
                    "diff": 1,
                    "diff_shifted_params": 1,
                    "difference": 2,
                    "result_6": 2,
                    "shifted_bits": 1,
                    "temp1": 2,
                    "temp2": 2,
                    "temp3": 1,
                    "temp4": 5,
                    "temp6": 2,
                    "temp_2": 1,
                    "temp_4": 2,
                    "temp_d": 1,
                    "temp_var5": 1,
                    "temp_var_3": 1,
                    "temp_var_5": 1,
                    "temp_var_6": 1,
                    "u_var6": 1,
                    "var3": 1,
                    "var4": 1
                },
                "uVar7": {
                    "carry": 1,
                    "constant1": 1,
                    "e": 1,
                    "lower_bits": 1,
                    "mask": 3,
                    "max_value": 1,
                    "result_7": 2,
                    "result_bits": 1,
                    "temp": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp5": 1,
                    "temp6": 3,
                    "temp8": 1,
                    "temp_3": 1,
                    "temp_5": 1,
                    "temp_6": 1,
                    "temp_e": 1,
                    "temp_var6": 1,
                    "temp_var_5": 1,
                    "temp_var_7": 1,
                    "temp_var_8": 1,
                    "u_var7": 1,
                    "var5": 1,
                    "var6": 1
                },
                "uVar8": {
                    "f": 1,
                    "low_bits": 1,
                    "new_low_bits": 1,
                    "result": 2,
                    "result_8": 2,
                    "result_a": 1,
                    "result_low": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 4,
                    "temp9": 2,
                    "temp_4": 1,
                    "temp_6": 1,
                    "temp_7": 1,
                    "temp_f": 1,
                    "temp_var7": 1,
                    "temp_var_6": 1,
                    "temp_var_8": 1,
                    "temp_var_9": 1,
                    "u_var8": 1,
                    "var6": 1,
                    "var7": 1
                },
                "unaff_r5": {
                    "flag_3": 1,
                    "fourth_param_shifted": 1,
                    "param4_bits": 1,
                    "part_c": 1,
                    "shifted_value2": 1,
                    "temp3": 1,
                    "temp4": 1,
                    "temp5": 4,
                    "temp7": 2,
                    "temp_5": 1,
                    "temp_var_4": 1,
                    "temp_var_6": 1,
                    "temp_var_7": 1,
                    "unaff_r5": 1,
                    "value3": 1,
                    "var4": 1,
                    "var5": 1,
                    "z": 1
                }
            },
            "called": [
                "FUN_0800881c"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_08009d78",
                "FUN_0800a1bc",
                "FUN_08002c18",
                "FUN_0800af78",
                "FUN_08001994",
                "FUN_0800a5a0",
                "FUN_0800b2e8",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_0800adf0",
                "FUN_080044e8",
                "FUN_0800a348",
                "FUN_0800056c",
                "FUN_08009b24",
                "FUN_08002638",
                "FUN_080046d0"
            ],
            "code": "\nulonglong calculate_and_return_result_08008640(undefined4 input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  ulonglong result;\n  longlong temp;\n  uint temp1;\n  uint temp2;\n  int sum;\n  uint temp4;\n  uint temp5;\n  uint mask;\n  uint temp7;\n  bool is_zero;\n  bool is_negative;\n  bool flag3;\n  ulonglong combined_input;\n  \n  combined_input = CONCAT44(input_2,input_1);\n  mask = 0x7ff;\n  temp2 = input_2 >> 0x14 & 0x7ff;\n  is_zero = temp2 == 0;\n  if (!is_zero) {\n    temp5 = input_4 >> 0x14 & 0x7ff;\n    is_zero = temp5 == 0;\n  }\n  if (!is_zero) {\n    is_zero = temp2 == 0x7ff;\n  }\n  if (!is_zero) {\n    is_zero = temp5 == 0x7ff;\n  }\n  if (is_zero) {\n    combined_input = reverse_and_update_bits();\n  }\n  temp1 = (uint)(combined_input >> 0x20);\n  sum = temp2 + temp5;\n  temp2 = temp1 ^ input_4;\n  temp1 = temp1 & ~(mask << 0x15);\n  input_4 = input_4 & ~(mask << 0x15);\n  is_zero = ((uint)combined_input | temp1 << 0xc) == 0;\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 0xc) == 0;\n  }\n  temp1 = temp1 | 0x100000;\n  input_4 = input_4 | 0x100000;\n  if (is_zero) {\n    input_3 = (uint)combined_input | input_3;\n    input_4 = (temp2 & 0x80000000 | temp1) ^ input_4;\n    temp2 = mask >> 1;\n    flag3 = SBORROW4(sum,temp2);\n    temp4 = sum - temp2;\n    is_zero = temp4 == 0;\n    temp1 = temp4;\n    if (!is_zero && (int)temp2 <= sum) {\n      flag3 = SBORROW4(mask,temp4);\n      temp1 = mask - temp4;\n      is_zero = mask == temp4;\n    }\n    if (!is_zero && (int)temp1 < 0 == flag3) {\n      input_4 = input_4 | temp4 * 0x100000;\n    }\n    if (!is_zero && (int)temp1 < 0 == flag3) {\n      return CONCAT44(input_4,input_3);\n    }\n    input_4 = input_4 | 0x100000;\n    mask = 0;\n    flag3 = SBORROW4(temp4,1);\n    temp4 = temp4 - 1;\n    is_zero = temp4 == 0;\n    temp2 = temp4;\n  }\n  else {\n    result = (combined_input & 0xffffffff) * (ulonglong)input_3;\n    combined_input = (combined_input & 0xffffffff) * (ulonglong)input_4 +\n             (ulonglong)temp1 * (ulonglong)input_3 + (result >> 0x20);\n    temp7 = (uint)combined_input;\n    temp = (ulonglong)temp1 * (ulonglong)input_4 + (combined_input >> 0x20);\n    mask = (uint)temp;\n    temp1 = (uint)((ulonglong)temp >> 0x20);\n    if ((int)result != 0) {\n      temp7 = temp7 | 1;\n    }\n    temp4 = (sum + -0x3ff) - (uint)(temp1 < 0x200);\n    if (temp1 < 0x200) {\n      is_zero = (temp7 & 0x80000000) != 0;\n      temp7 = temp7 << 1;\n      temp = CONCAT44(temp1 * 2 + (uint)(CARRY4(mask,mask) || CARRY4(mask * 2,(uint)is_zero)),\n                       mask * 2 + (uint)is_zero);\n    }\n    input_4 = temp2 & 0x80000000 | (int)((ulonglong)temp >> 0x20) << 0xb | (uint)temp >> 0x15;\n    input_3 = (uint)temp << 0xb | temp7 >> 0x15;\n    mask = temp7 * 0x800;\n    is_negative = 0xfc < temp4;\n    flag3 = SBORROW4(temp4,0xfd);\n    temp1 = temp4 - 0xfd;\n    is_zero = temp1 == 0;\n    temp2 = temp1;\n    if (is_negative && !is_zero) {\n      is_negative = 0x6ff < temp1;\n      flag3 = SBORROW4(temp1,0x700);\n      temp2 = temp4 - 0x7fd;\n      is_zero = temp1 == 0x700;\n    }\n    if (!is_negative || is_zero) {\n      is_zero = 0x7fffffff < mask;\n      if (mask == 0x80000000) {\n        is_zero = (temp7 >> 0x15 & 1) != 0;\n      }\n      return CONCAT44(input_4 + temp4 * 0x100000 + (uint)CARRY4(input_3,(uint)is_zero),input_3 + is_zero\n                     );\n    }\n  }\n  if (!is_zero && (int)temp2 < 0 == flag3) {\n    return (ulonglong)(input_4 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  is_negative = SCARRY4(temp4,0x36);\n  is_zero = (int)(temp4 + 0x36) < 0;\n  flag3 = temp4 == 0xffffffca;\n  if (flag3 || is_zero != is_negative) {\n    input_3 = 0;\n  }\n  if (flag3 || is_zero != is_negative) {\n    input_4 = input_4 & 0x80000000;\n  }\n  if (flag3 || is_zero != is_negative) {\n    return CONCAT44(input_4,input_3);\n  }\n  temp2 = -temp4;\n  temp1 = temp2 - 0x20;\n  if (0x1f < (int)temp2) {\n    temp4 = input_3 >> (temp1 & 0xff) | input_4 << (0x20 - temp1 & 0xff);\n    temp2 = (input_4 >> (temp1 & 0xff) & ~((input_4 & 0x80000000) >> (temp1 & 0xff))) -\n            ((int)temp4 >> 0x1f);\n    if ((mask | input_3 << (0x20 - temp1 & 0xff) | temp4 << 1) == 0) {\n      temp2 = temp2 & ~(temp4 >> 0x1f);\n    }\n    return CONCAT44(input_4,temp2) & 0x80000000ffffffff;\n  }\n  sum = temp2 - 0x14;\n  if (sum == 0 || sum < 0 != SCARRY4(temp1,0xc)) {\n    temp7 = input_3 << (temp4 + 0x20 & 0xff);\n    temp1 = input_3 >> (temp2 & 0xff) | input_4 << (temp4 + 0x20 & 0xff);\n    temp4 = temp1 + -((int)temp7 >> 0x1f);\n    if ((mask | temp7 << 1) == 0) {\n      temp4 = temp4 & ~(temp7 >> 0x1f);\n    }\n    return CONCAT44((input_4 & 0x80000000) +\n                    ((input_4 & 0x7fffffff) >> (temp2 & 0xff)) +\n                    (uint)CARRY4(temp1,-((int)temp7 >> 0x1f)),temp4);\n  }\n  temp2 = 0xc - sum;\n  temp4 = input_3 << (temp2 & 0xff);\n  temp2 = input_3 >> (0x20 - temp2 & 0xff) | input_4 << (temp2 & 0xff);\n  temp1 = temp2 + -((int)temp4 >> 0x1f);\n  if ((mask | temp4 << 1) == 0) {\n    temp1 = temp1 & ~(temp4 >> 0x1f);\n  }\n  return CONCAT44((input_4 & 0x80000000) + (uint)CARRY4(temp2,-((int)temp4 >> 0x1f)),temp1);\n}\n\n",
            "current_name": "calculate_and_return_result_08008640",
            "entrypoint": "0x08008640",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008640": "calculate_and_return_result_08008640",
                "bVar10": "is_negative",
                "bVar11": "flag3",
                "bVar9": "is_zero",
                "iVar5": "sum",
                "lVar2": "temp",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "reverse_and_update_bits_0800881c": "reverse_and_update_bits",
                "uVar1": "result",
                "uVar12": "combined_input",
                "uVar3": "temp1",
                "uVar4": "temp2",
                "uVar6": "temp4",
                "uVar7": "mask",
                "uVar8": "temp7",
                "unaff_r5": "temp5"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800881c": {
            "additional_data": {
                "FUN_0800881c": {
                    "bitwise_operation": 1,
                    "calculate_bitwise_xor": 1,
                    "calculate_hash": 1,
                    "calculate_result": 2,
                    "calculate_shifted_value": 2,
                    "calculate_shifted_xor": 1,
                    "calculate_unsigned_integer": 1,
                    "check_bitwise_operation": 1,
                    "extract_and_combine_bits": 1,
                    "extract_bit": 1,
                    "extract_bit_pattern": 1,
                    "extract_bits_from_params": 1,
                    "extract_bitwise_value": 1,
                    "find_common_bits": 1,
                    "reverse_and_check": 1,
                    "reverse_and_shift": 1,
                    "reverse_and_update_bits": 1,
                    "reverse_bit_pattern": 1,
                    "reverse_bit_shift": 1,
                    "reverse_bits": 4,
                    "reverse_bitwise_operations": 1,
                    "reverse_operation": 1,
                    "reversed_bitwise_operation": 1
                },
                "bVar4": {
                    "check": 1,
                    "check_flag": 1,
                    "condition": 3,
                    "flag": 1,
                    "is_zero": 22,
                    "temp_var_6": 1
                },
                "in_r12": {
                    "bit5": 5,
                    "bit_5": 2,
                    "const_1": 1,
                    "constant": 1,
                    "constant1": 2,
                    "mask": 3,
                    "mask_1": 1,
                    "mask_5": 1,
                    "output_1": 1,
                    "temp2": 5,
                    "temp5": 2,
                    "temp_2": 1,
                    "temp_5": 2,
                    "temp_var_2": 1,
                    "temp_var_5": 1,
                    "unused_2": 1,
                    "variable_2": 1
                },
                "param_1": {
                    "input1": 11,
                    "input_1": 14,
                    "input_a": 1,
                    "input_param_1": 1,
                    "num1": 1,
                    "number1": 1,
                    "number_1": 1,
                    "value1": 1
                },
                "param_2": {
                    "input2": 11,
                    "input_2": 14,
                    "input_b": 1,
                    "input_param_2": 1,
                    "num2": 1,
                    "number2": 1,
                    "number_2": 1,
                    "value2": 1
                },
                "param_3": {
                    "input3": 11,
                    "input_3": 14,
                    "input_c": 1,
                    "input_param_3": 1,
                    "num3": 1,
                    "number3": 1,
                    "number_3": 1,
                    "value3": 1
                },
                "param_4": {
                    "input4": 11,
                    "input_4": 14,
                    "input_d": 1,
                    "input_param_4": 1,
                    "num4": 1,
                    "number4": 1,
                    "number_4": 1,
                    "value4": 1
                },
                "uVar1": {
                    "bit1": 11,
                    "bit_6": 1,
                    "bit_toggled_result": 1,
                    "check_1": 1,
                    "mask_1": 1,
                    "msb_input_1": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_1": 4,
                    "temp_2": 1,
                    "temp_b": 1,
                    "temp_bit_1": 1,
                    "temp_result_1": 1,
                    "temp_var_1": 1,
                    "temp_var_3": 1
                },
                "uVar2": {
                    "bit2": 4,
                    "bit3": 5,
                    "bit_7": 1,
                    "bitwise_result": 1,
                    "check_3": 1,
                    "flag2": 1,
                    "mask_3": 1,
                    "masked_shifted_value": 1,
                    "temp1": 1,
                    "temp3": 2,
                    "temp4": 2,
                    "temp_2": 3,
                    "temp_3": 2,
                    "temp_bit_3": 1,
                    "temp_c": 1,
                    "temp_result_2": 1,
                    "temp_var_3": 1,
                    "temp_var_4": 1
                },
                "uVar3": {
                    "bit3": 4,
                    "bit4": 5,
                    "bit_4": 1,
                    "mask_4": 1,
                    "output_2": 1,
                    "result": 2,
                    "shifted_result": 1,
                    "temp2": 1,
                    "temp4": 2,
                    "temp5": 2,
                    "temp_3": 3,
                    "temp_4": 2,
                    "temp_bit_4": 1,
                    "temp_d": 1,
                    "temp_result_3": 1,
                    "temp_var": 1,
                    "temp_var_5": 1
                },
                "uVar5": {
                    "bit_mask": 1
                },
                "unaff_r4": {
                    "bit2": 5,
                    "bit_2": 2,
                    "check_2": 1,
                    "constant2": 1,
                    "counter1": 1,
                    "flag1": 1,
                    "mask_2": 2,
                    "temp1": 6,
                    "temp2": 1,
                    "temp_1": 2,
                    "temp_2": 2,
                    "temp_a": 1,
                    "temp_var_1": 1,
                    "temp_var_2": 1,
                    "unaff_shifted_value": 1,
                    "unused_1": 1,
                    "value": 1,
                    "variable_1": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008640"
            ],
            "code": "\nulonglong reverse_and_update_bits_0800881c(uint input_1,uint input_2,uint input_3,uint input_4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit3;\n  uint bit4;\n  uint temp2;\n  bool is_zero;\n  \n  bit3 = temp2 & input_4 >> 0x14;\n  if (temp1 != temp2 && bit3 != temp2) {\n    is_zero = (input_1 | input_2 << 1) == 0;\n    if (!is_zero) {\n      is_zero = (input_3 | input_4 << 1) == 0;\n    }\n    if (is_zero) {\n      return (ulonglong)((input_2 ^ input_4) & 0x80000000) << 0x20;\n    }\n    if (temp1 == 0) {\n      bit4 = input_2 & 0x80000000;\n      do {\n        bit1 = input_1 & 0x80000000;\n        input_1 = input_1 << 1;\n        input_2 = input_2 * 2 + (uint)(bit1 != 0);\n      } while ((input_2 & 0x100000) == 0);\n      input_2 = input_2 | bit4;\n      if (bit3 != 0) {\n        return CONCAT44(input_2,input_1);\n      }\n    }\n    do {\n      bit3 = input_3 & 0x80000000;\n      input_3 = input_3 << 1;\n      input_4 = input_4 * 2 + (uint)(bit3 != 0);\n    } while ((input_4 & 0x100000) == 0);\n    return CONCAT44(input_2,input_1);\n  }\n  is_zero = (input_1 | input_2 << 1) == 0;\n  if (is_zero) {\n    input_2 = input_4;\n    input_1 = input_3;\n  }\n  if (!is_zero) {\n    is_zero = (input_3 | input_4 << 1) == 0;\n  }\n  bit4 = input_2;\n  if (((!is_zero) && ((temp1 != temp2 || ((input_1 | input_2 << 0xc) == 0)))) &&\n     ((bit3 != temp2 || (input_1 = input_3, bit4 = input_4, (input_3 | input_4 << 0xc) == 0)))) {\n    return (ulonglong)((input_2 ^ input_4) & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  return CONCAT44(bit4,input_1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_and_update_bits_0800881c",
            "entrypoint": "0x0800881c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800881c": "reverse_and_update_bits_0800881c",
                "bVar4": "is_zero",
                "in_r12": "temp2",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "input_3",
                "param_4": "input_4",
                "uVar1": "bit1",
                "uVar2": "bit3",
                "uVar3": "bit4",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008894": {
            "additional_data": {
                "FUN_08008894": {
                    "calculate_float": 3,
                    "calculate_float_value": 7,
                    "calculate_float_value_from_integers": 1,
                    "calculate_floating_point": 8,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_value": 1,
                    "convert_float_to_binary": 1,
                    "float_conversion": 2,
                    "reverse_float_bits": 1
                },
                "bVar14": {
                    "bool_var1": 2,
                    "boolean1": 1,
                    "check1": 1,
                    "condition1": 1,
                    "flag1": 19,
                    "is_true": 1,
                    "is_zero": 4,
                    "temp15": 1,
                    "temp_bool1": 1
                },
                "bVar15": {
                    "bool_var2": 2,
                    "boolean2": 1,
                    "check2": 1,
                    "condition2": 1,
                    "flag2": 19,
                    "is_equal": 5,
                    "temp16": 1,
                    "temp_bool2": 1
                },
                "bVar16": {
                    "bool_var3": 2,
                    "boolean3": 1,
                    "carry": 1,
                    "carry_flag": 1,
                    "check3": 1,
                    "condition3": 1,
                    "flag3": 19,
                    "is_carry": 3,
                    "temp17": 1,
                    "temp_bool3": 1
                },
                "bVar17": {
                    "flag4": 3
                },
                "iVar8": {
                    "diff_exponents": 1,
                    "difference": 3,
                    "result": 1,
                    "result_int": 1,
                    "temp8": 19,
                    "temp_var8": 4,
                    "var6": 1,
                    "var8": 1
                },
                "param_1": {
                    "arg1": 1,
                    "high_bits": 1,
                    "input1": 27,
                    "input_param1": 1,
                    "param1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "input2": 27,
                    "input_param2": 1,
                    "low_bits": 1,
                    "param2": 1
                },
                "param_3": {
                    "arg3": 1,
                    "input3": 27,
                    "input_param3": 1,
                    "param3": 2
                },
                "param_4": {
                    "arg4": 1,
                    "input4": 27,
                    "input_param4": 1,
                    "param4": 2
                },
                "reverse_bits_to_float_08008a02": {
                    "reverse_bits_to_float": 1
                },
                "uVar1": {
                    "bit_shifted_param2": 1,
                    "bitmask1": 1,
                    "bits1": 1,
                    "mask1": 1,
                    "result1": 2,
                    "result_u_int1": 1,
                    "temp1": 19,
                    "temp_var1": 4,
                    "var1": 1
                },
                "uVar10": {
                    "param2_upper32_bits": 1,
                    "result10": 1,
                    "result_u_int9": 1,
                    "temp10": 3,
                    "temp11": 16,
                    "temp2": 1,
                    "temp_var11": 4,
                    "u_temp2": 1,
                    "var10": 1,
                    "var2": 1,
                    "var8": 1
                },
                "uVar11": {
                    "result": 1,
                    "result11": 1,
                    "result_lower32_bits": 1,
                    "result_u_int10": 1,
                    "temp11": 3,
                    "temp12": 16,
                    "temp3": 1,
                    "temp_var12": 4,
                    "var11": 1,
                    "var3": 1,
                    "var9": 1
                },
                "uVar12": {
                    "result12": 1,
                    "result_u_int11": 1,
                    "result_upper32_bits": 1,
                    "temp12": 3,
                    "temp13": 16,
                    "temp4": 1,
                    "temp_var13": 4,
                    "u_overflow": 1,
                    "var10": 1,
                    "var12": 1,
                    "var4": 1
                },
                "uVar13": {
                    "constant1": 1,
                    "overflow": 1,
                    "result13": 1,
                    "result_u_int12": 1,
                    "temp13": 3,
                    "temp14": 16,
                    "temp_var14": 4,
                    "var11": 1,
                    "var13": 1,
                    "var5": 1
                },
                "uVar17": {
                    "combined_input": 1,
                    "combined_params": 1,
                    "combined_value": 1,
                    "combined_var": 1,
                    "concatenation": 1,
                    "float_bits": 1,
                    "float_result": 1,
                    "float_val": 1,
                    "float_value": 1,
                    "result": 9,
                    "result_long_long": 1,
                    "return_val": 1,
                    "reverse_float": 1,
                    "reversed_bitwise_float": 1,
                    "reversed_float": 1,
                    "temp15": 2,
                    "temp17": 1,
                    "temp18": 1,
                    "temp_var15": 1
                },
                "uVar18": {
                    "result1": 2,
                    "result_upper": 1,
                    "temp5": 1
                },
                "uVar19": {
                    "result2": 2,
                    "result_lower": 1
                },
                "uVar2": {
                    "bit_shifted_param1": 1,
                    "bitmask2": 1,
                    "bits2": 1,
                    "mask2": 1,
                    "result2": 2,
                    "result_u_int2": 1,
                    "temp2": 19,
                    "temp_var2": 4,
                    "var2": 1
                },
                "uVar20": {
                    "result3": 2
                },
                "uVar21": {
                    "result4": 1
                },
                "uVar22": {
                    "result5": 1
                },
                "uVar23": {
                    "result6": 1
                },
                "uVar3": {
                    "bits3": 1,
                    "mask3": 1,
                    "param3_shifted8_bits": 1,
                    "result3": 2,
                    "result_u_int3": 1,
                    "temp3": 19,
                    "temp_var3": 4,
                    "var1": 1,
                    "var3": 1
                },
                "uVar4": {
                    "bit_shifted_param1_divided_by2": 1,
                    "bits4": 1,
                    "mask4": 1,
                    "result4": 2,
                    "result_u_int4": 1,
                    "temp4": 19,
                    "temp_var4": 4,
                    "var2": 1,
                    "var4": 1
                },
                "uVar5": {
                    "bit_shifted_param1_divided_by4": 1,
                    "bits5": 1,
                    "mask5": 1,
                    "result5": 2,
                    "result_u_int5": 1,
                    "temp5": 19,
                    "temp_var5": 4,
                    "var3": 1,
                    "var5": 1
                },
                "uVar6": {
                    "bit_shifted_param1_divided_by8": 1,
                    "bits6": 1,
                    "mask6": 1,
                    "result6": 2,
                    "result_u_int6": 1,
                    "temp6": 19,
                    "temp_var6": 4,
                    "var4": 1,
                    "var6": 1
                },
                "uVar7": {
                    "bit_shifted_param1_divided_by16": 1,
                    "bits7": 1,
                    "result7": 2,
                    "result_u_int7": 1,
                    "temp7": 19,
                    "temp_var7": 4,
                    "u_flag": 1,
                    "var5": 1,
                    "var7": 1
                },
                "uVar9": {
                    "param1_upper32_bits": 1,
                    "result9": 1,
                    "result_u_int8": 1,
                    "temp1": 1,
                    "temp9": 19,
                    "temp_var9": 4,
                    "u_temp": 1,
                    "var1": 1,
                    "var7": 1,
                    "var9": 1
                },
                "unaff_r5": {
                    "result5": 1,
                    "temp10": 16,
                    "temp_var10": 4
                }
            },
            "called": [
                "FUN_08008a02"
            ],
            "calling": [
                "FUN_080098d0",
                "FUN_0800a1bc",
                "FUN_080005b4",
                "FUN_0800af78",
                "FUN_08009990",
                "FUN_08001994",
                "FUN_08003004"
            ],
            "code": "\nulonglong calculate_float_value_from_integers_08008894(undefined4 input1,uint input2,uint input3,uint input4)\n\n{\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  uint temp4;\n  uint temp5;\n  uint temp6;\n  uint temp7;\n  int temp8;\n  uint temp9;\n  uint temp10;\n  uint temp11;\n  uint temp12;\n  uint temp13;\n  uint temp14;\n  bool flag1;\n  bool flag2;\n  bool flag3;\n  undefined8 result;\n  \n  result = CONCAT44(input2,input1);\n  temp14 = 0x7ff;\n  temp7 = input2 >> 0x14 & 0x7ff;\n  flag1 = temp7 == 0;\n  if (!flag1) {\n    temp10 = input4 >> 0x14 & 0x7ff;\n    flag1 = temp10 == 0;\n  }\n  if (!flag1) {\n    flag1 = temp7 == 0x7ff;\n  }\n  if (!flag1) {\n    flag1 = temp10 == 0x7ff;\n  }\n  if (flag1) {\n    result = reverse_bits_to_float();\n  }\n  temp9 = (uint)((ulonglong)result >> 0x20);\n  temp12 = (uint)result;\n  temp8 = temp7 - temp10;\n  if ((input3 | input4 << 0xc) == 0) {\n    temp7 = (temp9 ^ input4) & 0x80000000 | temp9 & 0xfffff;\n    flag3 = SCARRY4(temp8,temp14 >> 1);\n    temp9 = temp8 + (temp14 >> 1);\n    flag1 = (int)temp9 < 0;\n    flag2 = temp9 == 0;\n    if (!flag2 && flag1 == flag3) {\n      flag3 = SBORROW4(temp14,temp9);\n      flag1 = (int)(temp14 - temp9) < 0;\n      flag2 = temp14 == temp9;\n    }\n    if (!flag2 && flag1 == flag3) {\n      temp7 = temp7 | temp9 * 0x100000;\n    }\n    if (!flag2 && flag1 == flag3) {\n      return CONCAT44(temp7,temp12);\n    }\n    temp7 = temp7 | 0x100000;\n    temp14 = 0;\n    flag2 = SBORROW4(temp9,1);\n    temp9 = temp9 - 1;\n    flag1 = temp9 == 0;\n    temp3 = temp9;\n  }\n  else {\n    temp3 = (input4 << 0xc) >> 4 | 0x10000000 | input3 >> 0x18;\n    temp14 = input3 << 8;\n    temp11 = (temp9 << 0xc) >> 4 | 0x10000000 | temp12 >> 0x18;\n    temp12 = temp12 * 0x100;\n    temp7 = (temp9 ^ input4) & 0x80000000;\n    flag1 = temp3 <= temp11;\n    if (temp11 == temp3) {\n      flag1 = temp14 <= temp12;\n    }\n    temp8 = temp8 + (uint)flag1;\n    temp9 = temp8 + 0x3fd;\n    if (flag1 == false) {\n      temp3 = temp3 >> 1;\n      temp14 = (uint)((input3 >> 0x18 & 1) != 0) << 0x1f | temp14 >> 1;\n    }\n    temp13 = temp12 - temp14;\n    temp11 = (temp11 - temp3) - (uint)(temp12 < temp14);\n    temp4 = temp3 >> 1;\n    temp1 = (uint)((temp3 & 1) != 0) << 0x1f | temp14 >> 1;\n    temp12 = 0x100000;\n    temp3 = 0x80000;\n    while( true ) {\n      flag1 = temp1 <= temp13;\n      if (temp4 < temp11 || temp11 - temp4 < (uint)flag1) {\n        temp13 = temp13 - temp1;\n        temp12 = temp12 | temp3;\n        temp11 = (temp11 - temp4) - (uint)!flag1;\n      }\n      temp5 = temp4 >> 1;\n      temp1 = (uint)((temp4 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp11 - temp5 < (uint)flag2;\n      temp14 = temp11;\n      if (temp5 < temp11 || flag1) {\n        temp13 = temp13 - temp1;\n        temp14 = (temp11 - temp5) - (uint)!flag2;\n      }\n      if (temp5 < temp11 || flag1) {\n        temp12 = temp12 | temp3 >> 1;\n      }\n      temp11 = temp4 >> 2;\n      temp2 = (uint)((temp5 & 1) != 0) << 0x1f | temp1 >> 1;\n      flag2 = temp2 <= temp13;\n      flag1 = temp14 - temp11 < (uint)flag2;\n      temp5 = temp14;\n      if (temp11 < temp14 || flag1) {\n        temp13 = temp13 - temp2;\n        temp5 = (temp14 - temp11) - (uint)!flag2;\n      }\n      if (temp11 < temp14 || flag1) {\n        temp12 = temp12 | temp3 >> 2;\n      }\n      temp6 = temp4 >> 3;\n      temp1 = (uint)((temp11 & 1) != 0) << 0x1f | temp2 >> 1;\n      flag2 = temp1 <= temp13;\n      flag1 = temp5 - temp6 < (uint)flag2;\n      temp11 = temp5;\n      if (temp6 < temp5 || flag1) {\n        temp13 = temp13 - temp1;\n        temp11 = (temp5 - temp6) - (uint)!flag2;\n      }\n      if (temp6 < temp5 || flag1) {\n        temp12 = temp12 | temp3 >> 3;\n      }\n      temp14 = temp11 | temp13;\n      if (temp14 == 0) break;\n      temp11 = temp11 << 4 | temp13 >> 0x1c;\n      temp13 = temp13 << 4;\n      temp4 = temp4 & 0xfffffff8 | temp1 >> 0x1d;\n      temp1 = (temp2 >> 1) << 3;\n      temp3 = temp3 >> 4;\n      if (temp3 == 0) {\n        temp6 = temp4;\n        if ((temp7 & 0x100000) != 0) goto LAB_080089b2;\n        temp7 = temp7 | temp12;\n        temp12 = 0;\n        temp3 = 0x80000000;\n      }\n    }\n    if ((temp7 & 0x100000) == 0) {\n      temp7 = temp7 | temp12;\n      temp12 = 0;\n    }\nLAB_080089b2:\n    flag3 = 0xfc < temp9;\n    flag2 = SBORROW4(temp9,0xfd);\n    temp4 = temp8 + 0x300;\n    flag1 = temp4 == 0;\n    temp3 = temp4;\n    if (flag3 && !flag1) {\n      flag3 = 0x6ff < temp4;\n      flag2 = SBORROW4(temp4,0x700);\n      temp3 = temp8 - 0x400;\n      flag1 = temp4 == 0x700;\n    }\n    if (!flag3 || flag1) {\n      flag1 = temp6 <= temp11;\n      if (temp11 == temp6) {\n        flag1 = temp1 <= temp13;\n      }\n      if (temp11 == temp6 && temp13 == temp1) {\n        flag1 = (temp12 & 1) != 0;\n      }\n      return CONCAT44(temp7 + temp9 * 0x100000 + (uint)CARRY4(temp12,(uint)flag1),temp12 + flag1);\n    }\n  }\n  if (!flag1 && (int)temp3 < 0 == flag2) {\n    return (ulonglong)(temp7 & 0x80000000 | 0x7ff00000) << 0x20;\n  }\n  flag3 = SCARRY4(temp9,0x36);\n  flag1 = (int)(temp9 + 0x36) < 0;\n  flag2 = temp9 == 0xffffffca;\n  if (flag2 || flag1 != flag3) {\n    temp12 = 0;\n  }\n  if (flag2 || flag1 != flag3) {\n    temp7 = temp7 & 0x80000000;\n  }\n  if (flag2 || flag1 != flag3) {\n    return CONCAT44(temp7,temp12);\n  }\n  temp3 = -temp9;\n  temp11 = temp3 - 0x20;\n  if (0x1f < (int)temp3) {\n    temp3 = temp12 >> (temp11 & 0xff) | temp7 << (0x20 - temp11 & 0xff);\n    temp9 = (temp7 >> (temp11 & 0xff) & ~((temp7 & 0x80000000) >> (temp11 & 0xff))) -\n            ((int)temp3 >> 0x1f);\n    if ((temp14 | temp12 << (0x20 - temp11 & 0xff) | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44(temp7,temp9) & 0x80000000ffffffff;\n  }\n  temp8 = temp3 - 0x14;\n  if (temp8 != 0 && temp8 < 0 == SCARRY4(temp11,0xc)) {\n    temp9 = 0xc - temp8;\n    temp3 = temp12 << (temp9 & 0xff);\n    temp12 = temp12 >> (0x20 - temp9 & 0xff) | temp7 << (temp9 & 0xff);\n    temp9 = temp12 + -((int)temp3 >> 0x1f);\n    if ((temp14 | temp3 << 1) == 0) {\n      temp9 = temp9 & ~(temp3 >> 0x1f);\n    }\n    return CONCAT44((temp7 & 0x80000000) + (uint)CARRY4(temp12,-((int)temp3 >> 0x1f)),temp9);\n  }\n  temp11 = temp12 << (temp9 + 0x20 & 0xff);\n  temp12 = temp12 >> (temp3 & 0xff) | temp7 << (temp9 + 0x20 & 0xff);\n  temp9 = temp12 + -((int)temp11 >> 0x1f);\n  if ((temp14 | temp11 << 1) == 0) {\n    temp9 = temp9 & ~(temp11 >> 0x1f);\n  }\n  return CONCAT44((temp7 & 0x80000000) +\n                  ((temp7 & 0x7fffffff) >> (temp3 & 0xff)) +\n                  (uint)CARRY4(temp12,-((int)temp11 >> 0x1f)),temp9);\n}\n\n",
            "current_name": "calculate_float_value_from_integers_08008894",
            "entrypoint": "0x08008894",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008894": "calculate_float_value_from_integers_08008894",
                "bVar14": "flag1",
                "bVar15": "flag2",
                "bVar16": "flag3",
                "iVar8": "temp8",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "reverse_bits_to_float_08008a02": "reverse_bits_to_float",
                "uVar1": "temp1",
                "uVar10": "temp11",
                "uVar11": "temp12",
                "uVar12": "temp13",
                "uVar13": "temp14",
                "uVar17": "result",
                "uVar2": "temp2",
                "uVar3": "temp3",
                "uVar4": "temp4",
                "uVar5": "temp5",
                "uVar6": "temp6",
                "uVar7": "temp7",
                "uVar9": "temp9",
                "unaff_r5": "temp10"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a02": {
            "additional_data": {
                "FUN_08008a02": {
                    "calculate_double": 2,
                    "calculate_double_precision": 2,
                    "calculate_floating_point": 1,
                    "calculate_value": 2,
                    "compute_double_precision_float": 1,
                    "convert_to_double": 1,
                    "decode_float": 1,
                    "decode_function": 1,
                    "extract_bits": 1,
                    "extract_ulonglong_from_parameters": 1,
                    "extracted_function": 1,
                    "parse_floating_point": 1,
                    "process_binary": 1,
                    "reverse_binary_operation": 2,
                    "reverse_binary_operations": 1,
                    "reverse_bits": 4,
                    "reverse_bits_and_convert": 1,
                    "reverse_bits_to_float": 1,
                    "reverse_calculation": 1
                },
                "bVar4": {
                    "bool_var": 1,
                    "check_condition": 1,
                    "check_flag": 1,
                    "check_zero": 1,
                    "flag": 2,
                    "is_zero": 22,
                    "needs_shift": 1,
                    "temp2": 1
                },
                "in_r12": {
                    "bit4": 1,
                    "bit5": 2,
                    "comparison_value2": 1,
                    "condition2": 1,
                    "constant": 4,
                    "constant_value": 1,
                    "input_bit": 1,
                    "input_condition": 1,
                    "mask": 3,
                    "mask_value2": 1,
                    "register12": 1,
                    "rounding_bits": 1,
                    "saved_register12": 1,
                    "temp2": 4,
                    "temp4": 5,
                    "temp5": 2,
                    "top_bit_mask": 1
                },
                "param_1": {
                    "exponent_bits": 1,
                    "input1": 19,
                    "input_1": 3,
                    "input_param1": 2,
                    "input_value1": 2,
                    "input_var1": 1,
                    "number1": 1,
                    "sign": 1,
                    "x1": 1
                },
                "param_2": {
                    "exponent": 1,
                    "input2": 19,
                    "input_2": 3,
                    "input_param2": 2,
                    "input_value2": 2,
                    "input_var2": 1,
                    "number2": 1,
                    "sign_bits": 1,
                    "x2": 1
                },
                "param_3": {
                    "fraction_bits": 1,
                    "input3": 19,
                    "input_3": 3,
                    "input_param3": 2,
                    "input_value3": 2,
                    "input_var3": 1,
                    "mantissa1": 1,
                    "number3": 1,
                    "y1": 1
                },
                "param_4": {
                    "hidden_bits": 1,
                    "input4": 19,
                    "input_4": 3,
                    "input_param4": 2,
                    "input_value4": 2,
                    "input_var4": 1,
                    "mantissa2": 1,
                    "number4": 1,
                    "y2": 1
                },
                "uVar1": {
                    "bit1": 13,
                    "bit2": 1,
                    "bit_1": 1,
                    "bit_check1": 2,
                    "bit_check_1": 1,
                    "bit_value1": 1,
                    "bit_value2": 1,
                    "exponent_bit": 1,
                    "mask1": 1,
                    "temp1": 3,
                    "temp5": 2,
                    "temp_var1": 1
                },
                "uVar2": {
                    "bit2": 7,
                    "bit3": 2,
                    "bit_3": 1,
                    "bit_check2": 1,
                    "bit_check3": 1,
                    "bit_check_2": 1,
                    "bit_value2": 1,
                    "mask2": 1,
                    "masked_param4": 1,
                    "result1": 1,
                    "shifted_bits": 1,
                    "shifted_input4": 1,
                    "temp2": 5,
                    "temp3": 3,
                    "temp_result1": 1,
                    "temp_var1": 1,
                    "temp_var2": 1,
                    "tmp1": 1
                },
                "uVar3": {
                    "bit3": 5,
                    "bit4": 2,
                    "bit_4": 1,
                    "bit_check4": 1,
                    "result": 3,
                    "result2": 1,
                    "result_bits": 1,
                    "temp2": 1,
                    "temp3": 6,
                    "temp4": 3,
                    "temp_input2": 1,
                    "temp_result2": 1,
                    "temp_value1": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "tmp2": 1,
                    "updated_input_2": 1
                },
                "uVar5": {
                    "highest_bit": 1
                },
                "unaff_r4": {
                    "bit2": 2,
                    "bit_2": 1,
                    "bit_check2": 1,
                    "comparison_value": 1,
                    "condition1": 1,
                    "divider": 1,
                    "exponent_const": 1,
                    "flag1": 1,
                    "in_r12": 1,
                    "input_condition_comparison": 1,
                    "max_value": 1,
                    "register4": 1,
                    "saved_register4": 1,
                    "temp": 1,
                    "temp1": 10,
                    "temp2": 2,
                    "temp_value1": 1,
                    "unaff_r4": 1,
                    "unaffected_value": 1,
                    "unaffected_var": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08008894"
            ],
            "code": "\nulonglong reverse_bits_to_float_08008a02(uint input1,uint input2,uint input3,uint input4)\n\n{\n  uint bit1;\n  uint temp1;\n  uint bit2;\n  uint temp3;\n  uint temp4;\n  bool is_zero;\n  \n  bit2 = temp4 & input4 >> 0x14;\n  temp3 = input2;\n  if (temp1 != temp4 || bit2 != temp4) {\n    if (temp1 == temp4) {\n      if (((input1 | input2 << 0xc) == 0) && (input1 = input3, temp3 = input4, bit2 != temp4)\n         ) {\nLAB_08008874:\n        return (ulonglong)((input2 ^ input4) & 0x80000000 | 0x7ff00000) << 0x20;\n      }\n    }\n    else if (bit2 == temp4) {\n      input1 = input3;\n      temp3 = input4;\n      if ((input3 | input4 << 0xc) == 0) {\nLAB_08008838:\n        return (ulonglong)((input2 ^ input4) & 0x80000000) << 0x20;\n      }\n    }\n    else {\n      is_zero = (input1 | input2 << 1) == 0;\n      if (!is_zero) {\n        is_zero = (input3 | input4 << 1) == 0;\n      }\n      if (!is_zero) {\n        if (temp1 == 0) {\n          temp3 = input2 & 0x80000000;\n          do {\n            bit1 = input1 & 0x80000000;\n            input1 = input1 << 1;\n            input2 = input2 * 2 + (uint)(bit1 != 0);\n          } while ((input2 & 0x100000) == 0);\n          input2 = input2 | temp3;\n          if (bit2 != 0) {\n            return CONCAT44(input2,input1);\n          }\n        }\n        do {\n          temp3 = input3 & 0x80000000;\n          input3 = input3 << 1;\n          input4 = input4 * 2 + (uint)(temp3 != 0);\n        } while ((input4 & 0x100000) == 0);\n        return CONCAT44(input2,input1);\n      }\n      if ((input1 | input2 << 1) != 0) goto LAB_08008874;\n      if ((input3 | input4 << 1) != 0) goto LAB_08008838;\n    }\n  }\n  return CONCAT44(temp3,input1) | 0x7ff8000000000000;\n}\n\n",
            "current_name": "reverse_bits_to_float_08008a02",
            "entrypoint": "0x08008a02",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a02": "reverse_bits_to_float_08008a02",
                "bVar4": "is_zero",
                "in_r12": "temp4",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar1": "bit1",
                "uVar2": "bit2",
                "uVar3": "temp3",
                "unaff_r4": "temp1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008a74": {
            "additional_data": {
                "FUN_08008a74": {
                    "check_conditions": 1,
                    "check_data_equality": 1,
                    "check_equal_params": 1,
                    "check_equality": 4,
                    "check_inputs": 1,
                    "check_invariant": 1,
                    "check_param_equality": 1,
                    "check_parameters": 11,
                    "check_parameters_and_return_result": 1,
                    "check_parameters_equality": 2,
                    "check_params": 1,
                    "check_params_and_return_status": 1,
                    "check_params_equal": 1,
                    "check_params_equality": 3,
                    "compare_parameters": 1
                },
                "bVar2": {
                    "all_inputs_zero": 1,
                    "all_params_are_zero": 1,
                    "all_zero": 1,
                    "all_zeroes": 1,
                    "are_inputs_zero": 2,
                    "are_parameters_zero": 1,
                    "equal_params": 1,
                    "flag1": 1,
                    "inputs_are_zero": 1,
                    "is_equal": 3,
                    "is_zero": 16,
                    "is_zero_inputs": 1,
                    "params_all_zero": 1
                },
                "bVar3": {
                    "comparison_result": 1,
                    "flag2": 1,
                    "is_compared": 1,
                    "is_condition_met": 2,
                    "is_greater": 2,
                    "is_less_or_equal": 2,
                    "is_less_than": 3,
                    "is_less_than_zero": 2,
                    "is_lesser": 1,
                    "is_negative": 7,
                    "is_param4_leq_param2": 1,
                    "is_param4_less_than_or_equal_param2": 1,
                    "is_param_4_less_than_param_2": 1,
                    "is_param_4_smaller_than_param_2": 1,
                    "is_result_less_than_zero": 1,
                    "is_smaller": 1,
                    "is_smaller_or_equal": 1,
                    "param4_less_than_or_equal": 1,
                    "param_order_valid": 1
                },
                "bVar4": {
                    "is_negative_or_equal": 1
                },
                "param_1": {
                    "a": 2,
                    "first_param": 4,
                    "first_parameter": 2,
                    "input1": 3,
                    "input_1": 6,
                    "num1": 1,
                    "value1": 9,
                    "value_1": 4
                },
                "param_2": {
                    "b": 2,
                    "input2": 3,
                    "input_2": 6,
                    "num2": 1,
                    "second_param": 4,
                    "second_parameter": 2,
                    "shifted_param_2": 1,
                    "value2": 9,
                    "value_2": 3
                },
                "param_3": {
                    "c": 2,
                    "input3": 3,
                    "input_3": 6,
                    "num3": 1,
                    "third_param": 4,
                    "third_parameter": 2,
                    "value3": 9,
                    "value_3": 4
                },
                "param_4": {
                    "d": 2,
                    "fourth_param": 4,
                    "fourth_parameter": 2,
                    "input4": 3,
                    "input_4": 6,
                    "num4": 1,
                    "shifted_param_4": 1,
                    "value4": 9,
                    "value_4": 3
                },
                "param_6": {
                    "shifted_param4": 1
                },
                "param_7": {
                    "shifted_param2": 1
                },
                "return": {
                    "result": 4
                },
                "return_variable": {
                    "output": 1
                },
                "uVar1": {
                    "param_xor_result": 1,
                    "result": 14,
                    "temp": 2,
                    "temp_var": 1,
                    "xor_result": 13
                }
            },
            "called": [],
            "calling": [
                "FUN_08008b00"
            ],
            "code": "\nuint check_parameters_equality_08008a74(uint value1,uint value2,uint value3,uint value4)\n\n{\n  uint result;\n  bool is_zero;\n  bool is_negative;\n  \n  if (((int)(value2 << 1) >> 0x15 == -1 || (int)(value4 << 1) >> 0x15 == -1) &&\n     ((((int)(value2 << 1) >> 0x15 == -1 && ((value1 | value2 << 0xc) != 0)) ||\n      (((int)(value4 << 1) >> 0x15 == -1 && ((value3 | value4 << 0xc) != 0)))))) {\n    result 1;\n  }\n  is_zero = (value1 | value2 << 1) == 0;\n  if (is_zero) {\n    is_zero = (value3 | value4 << 1) == 0;\n  }\n  if (!is_zero) {\n    is_zero = value2 == value4;\n  }\n  if (is_zero) {\n    is_zero = value1 == value3;\n  }\n  if (!is_zero) {\n    result = value2 ^ value4;\n    is_zero = result == 0;\n    if (-1 < (int)result) {\n      is_zero = value2 == value4;\n    }\n    is_negative = -1 < (int)result && value4 <= value2;\n    if (is_zero) {\n      is_negative = value3 <= value1;\n    }\n    value4 = (int)value4 >> 0x1f;\n    if (!is_negative) {\n      value4 = ~value4;\n    }\n    result value4 | 1;\n  }\n  result 0;\n}\n\n",
            "current_name": "check_parameters_equality_08008a74",
            "entrypoint": "0x08008a74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008a74": "check_parameters_equality_08008a74",
                "bVar2": "is_zero",
                "bVar3": "is_negative",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4",
                "return": "result",
                "uVar1": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008af0": {
            "additional_data": {
                "FUN_08008af0": {
                    "compare_and_return": 3,
                    "compare_and_set": 1,
                    "compare_and_set_parameter": 1,
                    "compare_double_values": 2,
                    "compare_doubles": 1,
                    "compare_float_values": 2,
                    "compare_floating_point_numbers": 4,
                    "compare_floating_point_values": 1,
                    "compare_floats": 13,
                    "compare_floats_with_epsilon": 1,
                    "compare_two_variables": 1,
                    "perform_comparison": 1
                },
                "FUN_08008b00": {
                    "additional_function": 1,
                    "convert_to_int": 1,
                    "do_something": 1,
                    "perform_comparison": 1,
                    "perform_operation": 1
                },
                "param_1": {
                    "a": 1,
                    "comparison_result": 1,
                    "destination": 1,
                    "epsilon": 1,
                    "input1": 1,
                    "input_a": 1,
                    "output": 1,
                    "param1": 1,
                    "pointer_to_result": 1,
                    "result": 17,
                    "value1": 4,
                    "var1": 1
                },
                "param_1_convertToInt": {
                    "float_value": 1
                },
                "param_2": {
                    "b": 1,
                    "comp_result": 1,
                    "compare_result": 1,
                    "comparison_flag": 2,
                    "comparison_result": 2,
                    "comparison_status": 1,
                    "input2": 1,
                    "input_b": 1,
                    "mask": 1,
                    "operand": 1,
                    "param2": 2,
                    "param_2": 2,
                    "source": 1,
                    "status": 1,
                    "temp": 2,
                    "unknown_param": 1,
                    "unused": 2,
                    "unused_1": 1,
                    "unused_param": 2,
                    "value2": 4,
                    "var2": 1
                },
                "param_3": {
                    "c": 1,
                    "comp_a": 1,
                    "double_value1": 2,
                    "float1": 8,
                    "float_1": 1,
                    "float_value1": 2,
                    "input1": 1,
                    "number1": 1,
                    "value1": 9,
                    "value_1": 3,
                    "value_to_compare1": 1,
                    "var3": 1
                },
                "param_4": {
                    "comp_b": 1,
                    "d": 1,
                    "double_value2": 2,
                    "float2": 8,
                    "float_2": 1,
                    "float_value2": 2,
                    "input2": 1,
                    "number2": 1,
                    "value2": 9,
                    "value_2": 3,
                    "value_to_compare2": 1,
                    "var4": 1
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08008b60",
                "FUN_08008b4c"
            ],
            "code": "\nvoid compare_floats_with_epsilon_08008af0(undefined4 result,undefined4 value2,undefined4 value1,undefined4 value2)\n\n{\n  __aeabi_cdcmpeq(value1,value2,result,value2);\n  return;\n}\n\n",
            "current_name": "compare_floats_with_epsilon_08008af0",
            "entrypoint": "0x08008af0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008af0": "compare_floats_with_epsilon_08008af0",
                "param_1": "result",
                "param_2": "value2",
                "param_3": "value1",
                "param_4": "value2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b00": {
            "additional_data": {
                "FUN_08008a74": {
                    "apply_transformation": 1,
                    "calculate_result": 3,
                    "calculate_uint_result": 1,
                    "compute_result": 1,
                    "perform_arithmetic": 1,
                    "perform_arithmetic_operation": 3,
                    "perform_arithmetic_operations": 1,
                    "perform_calculation": 7,
                    "perform_conversion": 4,
                    "perform_operation": 2,
                    "perform_unsigned_operation": 1,
                    "process_values": 1
                },
                "FUN_08008b00": {
                    "calculate": 1,
                    "calculate_result": 4,
                    "convert_float_to_int": 1,
                    "convert_float_to_undefined": 3,
                    "convert_float_to_undefined4": 2,
                    "convert_param_to_undefined4": 1,
                    "convert_to_float": 4,
                    "convert_to_undefined": 1,
                    "convert_undefined4_to_uint": 1,
                    "convert_undefined_to_float": 2,
                    "perform_action": 1,
                    "perform_computation": 2,
                    "perform_nedf2": 1,
                    "process_data": 2,
                    "process_input": 1,
                    "process_parameter": 3
                },
                "__nedf2": {
                    "perform_calculation": 1
                },
                "param_1": {
                    "function_param": 1,
                    "input": 5,
                    "input_1": 1,
                    "input_data": 1,
                    "input_param": 1,
                    "input_val1": 1,
                    "input_value": 8,
                    "operand1": 3,
                    "operand_1": 1,
                    "val1": 1,
                    "value1": 8
                },
                "param_2": {
                    "conversion_factor": 1,
                    "input_2": 1,
                    "input_val2": 1,
                    "operand1": 2,
                    "operand2": 3,
                    "operand_2": 1,
                    "param1": 1,
                    "uint_param_2": 1,
                    "val2": 1,
                    "val_1": 1,
                    "value1": 3,
                    "value2": 8,
                    "value_2": 1,
                    "var1": 1
                },
                "param_3": {
                    "input_3": 1,
                    "input_val3": 1,
                    "operand2": 2,
                    "operand3": 3,
                    "operand_3": 1,
                    "param2": 1,
                    "precision": 1,
                    "uint_param_3": 1,
                    "val3": 1,
                    "val_2": 1,
                    "value2": 3,
                    "value3": 8,
                    "value_3": 1,
                    "var2": 1
                },
                "param_4": {
                    "input_4": 1,
                    "input_val4": 1,
                    "offset": 1,
                    "operand3": 2,
                    "operand4": 3,
                    "operand_4": 1,
                    "param3": 1,
                    "uint_param_4": 1,
                    "val4": 1,
                    "val_3": 1,
                    "value3": 3,
                    "value4": 8,
                    "value_4": 1,
                    "var3": 1
                }
            },
            "called": [
                "FUN_08008a74"
            ],
            "calling": [
                "FUN_08008af0",
                "FUN_08008b10",
                "FUN_08008b24"
            ],
            "code": "\nundefined4 convert_undefined_to_float_08008b00(undefined4 value1)\n\n{\n  perform_calculation();\n  return value1;\n}\n\n",
            "current_name": "convert_undefined_to_float_08008b00",
            "entrypoint": "0x08008b00",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b00": "convert_undefined_to_float_08008b00",
                "__nedf2": "perform_calculation",
                "param_1": "value1"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b10": {
            "additional_data": {
                "FUN_08008b00": {
                    "compare_floats": 1,
                    "compare_to_zero": 1
                },
                "FUN_08008b10": {
                    "check_cd_flag": 1,
                    "check_equality": 4,
                    "check_for_zero": 1,
                    "check_if_not_equal_to_zero": 2,
                    "check_if_not_zero": 8,
                    "check_if_zero": 1,
                    "check_non_zero": 1,
                    "check_nonzero_char": 1,
                    "check_nonzero_value": 1,
                    "check_not_zero": 1,
                    "is_comparison_result_true": 1,
                    "is_not_zero": 6,
                    "is_not_zero_character": 1,
                    "is_zero_check": 1
                },
                "in_ZR": {
                    "comparison_result": 2,
                    "flag": 1,
                    "input_char": 2,
                    "input_character": 1,
                    "is_equal": 1,
                    "is_not_zero": 2,
                    "is_zero": 2,
                    "result": 20
                },
                "param_1": {
                    "input": 1,
                    "value": 1
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_08009d78",
                "FUN_0800a5a0"
            ],
            "code": "\nbool check_if_not_equal_to_zero_08008b10(void)\n\n{\n  char result;\n  \n  __aeabi_cdcmpeq();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_not_equal_to_zero_08008b10",
            "entrypoint": "0x08008b10",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b10": "check_if_not_equal_to_zero_08008b10",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b24": {
            "additional_data": {
                "FUN_08008b24": {
                    "check_carry": 1,
                    "check_carry_flag": 1,
                    "check_for_null": 2,
                    "check_if_char_is_null": 1,
                    "check_if_cy_is_null": 1,
                    "check_if_cy_is_zero": 1,
                    "check_if_equal_to_null": 1,
                    "check_if_in_cy_is_null": 1,
                    "check_if_not_equal_to_zero": 2,
                    "check_if_not_equal_zero": 1,
                    "check_if_not_zero": 1,
                    "check_if_null": 4,
                    "check_if_string_empty": 1,
                    "check_if_zero": 4,
                    "check_null_termination": 1,
                    "is_cy_null": 5,
                    "is_cy_zero": 1,
                    "is_in_cy_null": 1,
                    "is_zero": 1
                },
                "__aeabi_cdcmpeq": {
                    "compare_cd": 1,
                    "compare_detection": 1,
                    "compare_double_equal": 1,
                    "compare_equality": 1,
                    "compare_floats": 3,
                    "compare_fn": 1,
                    "compare_input_char_to_null": 1,
                    "compare_strings": 1
                },
                "bool": {
                    "boolean": 1
                },
                "in_CY": {
                    "carry_flag": 2,
                    "cy": 7,
                    "flag": 1,
                    "input": 1,
                    "input_char": 14,
                    "input_character": 3,
                    "input_string": 1,
                    "is_null_terminated": 1,
                    "null_check_result": 1
                },
                "param_1": {
                    "cd_parameter": 1
                }
            },
            "called": [
                "FUN_08008b00"
            ],
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24",
                "FUN_08003004"
            ],
            "code": "\nboolean check_if_in_cy_is_null_08008b24(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_in_cy_is_null_08008b24",
            "entrypoint": "0x08008b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b24": "check_if_in_cy_is_null_08008b24",
                "__aeabi_cdcmpeq": "compare_floats",
                "bool": "boolean",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b4c": {
            "additional_data": {
                "FUN_08008af0": {
                    "execute_operation": 1,
                    "perform_calculations": 1,
                    "perform_computation": 1,
                    "process_data": 1
                },
                "FUN_08008b4c": {
                    "check_carry_and_zero_flags": 1,
                    "check_cdr_cmple": 1,
                    "check_comparison_result": 5,
                    "check_condition": 4,
                    "check_conditions": 7,
                    "check_data": 1,
                    "check_if_order_is_complete": 1,
                    "check_leq_zero": 1,
                    "check_order": 1,
                    "check_zero_comparison": 1,
                    "check_zero_or_negative": 1,
                    "compare_floats": 1,
                    "evaluate_condition": 1,
                    "is_comparision_true": 1,
                    "is_condition_met": 1,
                    "is_le_or_zero": 1,
                    "is_less_or_equal": 1,
                    "is_zero_compare": 1
                },
                "PTR_FUN_08008af0": {
                    "process_order": 1
                },
                "in_CY": {
                    "carry_flag": 10,
                    "carry_result": 2,
                    "comparison_result": 1,
                    "comparison_result_carry": 1,
                    "is_carry": 5,
                    "is_carry_flag": 2,
                    "is_carry_result": 1,
                    "is_carry_set": 3,
                    "is_comparison_failed": 1,
                    "is_le": 1
                },
                "in_ZR": {
                    "comparison_result_zero": 1,
                    "is_equal_to_zero": 1,
                    "is_zero": 6,
                    "is_zero_flag": 2,
                    "is_zero_result": 5,
                    "zero_flag": 8,
                    "zero_result": 4
                },
                "param_1": {
                    "arg1": 3,
                    "data1": 1,
                    "order_data1": 1,
                    "param1": 1,
                    "param_a": 1,
                    "undefined_param_1": 1,
                    "unknown1": 1,
                    "unused_param_1": 2,
                    "value_1": 1
                },
                "param_2": {
                    "arg2": 3,
                    "data2": 1,
                    "order_data2": 1,
                    "param2": 1,
                    "param_b": 1,
                    "undefined_param_2": 1,
                    "unknown2": 1,
                    "unused_param_2": 2,
                    "value_2": 1
                },
                "param_3": {
                    "arg3": 3,
                    "data3": 1,
                    "order_data3": 1,
                    "param3": 1,
                    "param_c": 1,
                    "undefined_param_3": 1,
                    "unknown3": 1,
                    "unused_param_3": 2,
                    "value_3": 1
                },
                "param_4": {
                    "arg4": 3,
                    "data4": 1,
                    "order_data4": 1,
                    "param4": 1,
                    "param_d": 1,
                    "undefined_param_4": 1,
                    "unknown4": 1,
                    "unused_param_4": 2,
                    "value_4": 1
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nbool check_conditions_08008b4c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  __aeabi_cdrcmple();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_conditions_08008b4c",
            "entrypoint": "0x08008b4c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b4c": "check_conditions_08008b4c",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b60": {
            "additional_data": {
                "FUN_08008af0": {
                    "process_data": 1,
                    "sub_function": 2
                },
                "FUN_08008b60": {
                    "check_for_null_character": 1,
                    "check_if_byte_is_null": 1,
                    "check_if_char_is_null": 1,
                    "check_if_character_is_null": 1,
                    "check_if_cy_flag_is_set": 1,
                    "check_if_cy_is_null": 2,
                    "check_if_empty": 1,
                    "check_if_in_cy_is_null": 2,
                    "check_if_input_is_empty": 1,
                    "check_if_not_null": 1,
                    "check_if_null": 2,
                    "check_if_null_character": 1,
                    "check_if_null_terminated": 1,
                    "check_if_string_is_empty": 1,
                    "check_null_termination": 1,
                    "is_character_null": 1,
                    "is_empty_string": 1,
                    "is_in_cy_null": 1,
                    "is_in_cy_zero": 1,
                    "is_null_character": 1,
                    "is_null_or_zero": 1,
                    "is_null_terminated": 4,
                    "is_string_empty": 1,
                    "is_zero_character": 1
                },
                "FunnyFunction": {
                    "check_if_string_is_empty": 1
                },
                "__aeabi_cdrcmple": {
                    "compare_character_with_zero": 1,
                    "compare_floats": 1,
                    "compare_le": 1,
                    "compare_with_cy_flag": 1,
                    "comparison": 1
                },
                "in_CY": {
                    "byte_to_check": 1,
                    "character": 2,
                    "cy_variable": 1,
                    "if_cy_flag": 1,
                    "input_char": 10,
                    "input_character": 14,
                    "is_null_terminated": 1,
                    "is_zero": 1
                },
                "param_1": {
                    "param_1": 1,
                    "parameter_1": 1
                },
                "param_2": {
                    "param_2": 1,
                    "parameter_2": 1
                },
                "param_3": {
                    "param_3": 1,
                    "parameter_3": 1
                },
                "param_4": {
                    "param_4": 1,
                    "parameter_4": 1
                }
            },
            "called": [
                "FUN_08008af0"
            ],
            "calling": [
                "FUN_08009318",
                "FUN_0800af78",
                "FUN_080094c0",
                "FUN_08003004"
            ],
            "code": "\nbool check_if_in_cy_is_null_08008b60(void)\n\n{\n  char input_character;\n  \n  compare_with_cy_flag();\n  return input_character == '\\0';\n}\n\n",
            "current_name": "check_if_in_cy_is_null_08008b60",
            "entrypoint": "0x08008b60",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b60": "check_if_in_cy_is_null_08008b60",
                "__aeabi_cdrcmple": "compare_with_cy_flag",
                "in_CY": "input_character"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008b74": {
            "additional_data": {
                "FUN_08008b74": {
                    "check_conditions": 2,
                    "check_input_validity": 4,
                    "check_inputs": 1,
                    "check_parameters": 10,
                    "check_params": 5,
                    "check_valid_params": 2,
                    "is_input_valid": 1,
                    "is_valid_input": 1,
                    "is_valid_parameters": 1,
                    "is_valid_params": 2,
                    "validate_inputs": 1,
                    "validate_parameters": 1
                },
                "param_1": {
                    "first_param": 1,
                    "first_value": 1,
                    "input1": 6,
                    "input_1": 5,
                    "size_1": 1,
                    "value1": 11,
                    "value_1": 6
                },
                "param_2": {
                    "flag_1": 1,
                    "input2": 6,
                    "input_2": 5,
                    "second_param": 1,
                    "second_value": 1,
                    "value2": 11,
                    "value_2": 6
                },
                "param_3": {
                    "input3": 6,
                    "input_3": 5,
                    "size_2": 1,
                    "third_param": 1,
                    "third_value": 1,
                    "value3": 11,
                    "value_3": 6
                },
                "param_4": {
                    "flag_2": 1,
                    "fourth_param": 1,
                    "fourth_value": 1,
                    "input4": 6,
                    "input_4": 5,
                    "value4": 11,
                    "value_4": 6
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0"
            ],
            "code": "\nundefined4 check_parameters_08008b74(uint value1,int value2,uint value3,int value4)\n\n{\n  if ((((value2 << 1) >> 0x15 != -1) || ((value1 | value2 << 0xc) == 0)) &&\n     (((value4 << 1) >> 0x15 != -1 || ((value3 | value4 << 0xc) == 0)))) {\n    return 0;\n  }\n  return 1;\n}\n\n",
            "current_name": "check_parameters_08008b74",
            "entrypoint": "0x08008b74",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008b74": "check_parameters_08008b74",
                "param_1": "value1",
                "param_2": "value2",
                "param_3": "value3",
                "param_4": "value4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008ba0": {
            "additional_data": {
                "FUN_08008ba0": {
                    "calculate_int_from_parameters": 1,
                    "calculate_integer": 1,
                    "calculate_inverse": 1,
                    "calculate_result": 2,
                    "calculate_shifted_value": 1,
                    "calculate_something": 1,
                    "calculate_unsigned_division": 1,
                    "convert_integer": 1,
                    "convert_to_fixed_point": 2,
                    "convert_to_range": 1,
                    "convert_to_signed_int": 1,
                    "convert_to_two_complement": 1,
                    "convert_unsigned_to_signed": 1,
                    "decode_integer": 1,
                    "evaluate_function": 1,
                    "perform_calculation": 3,
                    "reverse_and_shift": 3,
                    "reverse_bits": 1,
                    "reverse_bitwise_operation": 1,
                    "reverse_calculation": 1,
                    "reverse_endian_conversion": 1,
                    "reverse_scale": 1,
                    "reverse_shift": 1,
                    "reverse_sign": 1,
                    "reverse_unsigned_number": 1
                },
                "iVar2": {
                    "adjusted_input2": 1,
                    "adjusted_shift": 2,
                    "adjusted_value": 1,
                    "calculated_value": 4,
                    "calculation_result": 5,
                    "computed_value": 1,
                    "modified_bit_mask": 1,
                    "modified_range": 1,
                    "multiplied_value": 1,
                    "offset": 2,
                    "scaled_value": 1,
                    "shifted_value": 1,
                    "shifted_value2": 1,
                    "temp": 1,
                    "temp_val1": 1,
                    "temp_var": 3,
                    "temp_var2": 2,
                    "temporary_var": 1,
                    "twice_input_plus_constant": 1
                },
                "param_1": {
                    "dividend": 1,
                    "input": 1,
                    "input1": 10,
                    "input_number": 1,
                    "input_param1": 1,
                    "input_value": 8,
                    "input_value1": 3,
                    "input_value_1": 2,
                    "num1": 1,
                    "number1": 1,
                    "original_value": 1,
                    "value_1": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_representation": 1,
                    "bit_shift": 1,
                    "divisor": 1,
                    "extracted_value": 1,
                    "input2": 9,
                    "input_flag": 2,
                    "input_param2": 1,
                    "input_value2": 2,
                    "input_value_2": 2,
                    "masked_input2": 1,
                    "modified_input_value2": 1,
                    "modified_range_flag": 1,
                    "multiplier": 1,
                    "num2": 1,
                    "number2": 1,
                    "scale_factor": 1,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "shifted_result": 1
                },
                "uVar1": {
                    "converted_value": 1,
                    "final_result": 2,
                    "final_var": 1,
                    "intermediate_value1": 1,
                    "new_value": 1,
                    "output_value": 1,
                    "quotient": 1,
                    "result": 6,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_value": 1,
                    "shifted_result": 2,
                    "shifted_value": 7,
                    "temp_val3": 1,
                    "temp_value": 1,
                    "temp_var1": 2,
                    "transformed_value": 1
                },
                "uVar2": {
                    "intermediate_value2": 1
                },
                "uVar3": {
                    "adjusted_shift": 1,
                    "adjusted_shift_threshold": 1,
                    "adjusted_value": 1,
                    "bit_shift": 1,
                    "comparison_value": 1,
                    "complement_value": 1,
                    "condition_result": 1,
                    "converted_result": 1,
                    "difference": 1,
                    "mask": 1,
                    "modified_shift": 1,
                    "modified_value": 1,
                    "negative_shift_amount": 1,
                    "new_value": 1,
                    "remainder": 1,
                    "result": 1,
                    "shift_amount": 4,
                    "shift_mask": 1,
                    "shifted_result": 1,
                    "shifted_var2": 1,
                    "temp": 1,
                    "temp_val2": 1,
                    "temp_value": 2,
                    "temp_var3": 2,
                    "threshold": 1,
                    "updated_shift_amount": 1
                },
                "uVar4": {
                    "final_result": 1,
                    "result": 2,
                    "shifted_value": 1,
                    "temp_var4": 1
                },
                "uVar5": {
                    "output_value": 1,
                    "temp_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009d78",
                "FUN_080005b4",
                "FUN_0800a348",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_080095b8",
                "FUN_08003004",
                "FUN_0800adf0"
            ],
            "code": "\nuint reverse_and_shift_08008ba0(uint input1,uint input2)\n\n{\n  uint shifted_value;\n  int calculation_result;\n  uint shift_amount;\n  \n  calculation_result = input2 * 2 + 0x200000;\n  if (input2 * 2 < 0xffe00000) {\n    if (-1 < calculation_result) {\n      return 0;\n    }\n    shifted_value = calculation_result >> 0x15;\n    shift_amount = -shifted_value - 0x3e1;\n    if (shifted_value < 0xfffffc20 && shift_amount != 0) {\n      shifted_value = (input2 << 0xb | 0x80000000 | input1 >> 0x15) >> (shift_amount & 0xff);\n      if ((input2 & 0x80000000) != 0) {\n        shifted_value = -shifted_value;\n      }\n      return shifted_value;\n    }\n  }\n  else if ((input1 | input2 << 0xc) != 0) {\n    return 0;\n  }\n  input2 = input2 & 0x80000000;\n  if (input2 == 0) {\n    input2 = 0x7fffffff;\n  }\n  return input2;\n}\n\n",
            "current_name": "reverse_and_shift_08008ba0",
            "entrypoint": "0x08008ba0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008ba0": "reverse_and_shift_08008ba0",
                "iVar2": "calculation_result",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "shifted_value",
                "uVar3": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008bf0": {
            "additional_data": {
                "FUN_08008bf0": {
                    "calculate_bit_shift": 1,
                    "calculate_modified_value": 1,
                    "calculate_output": 1,
                    "calculate_shift": 3,
                    "calculate_shift_amount": 1,
                    "calculate_shifted_bitwise": 1,
                    "calculate_shifted_value": 10,
                    "check_and_shift": 2,
                    "check_input": 1,
                    "check_parameter_validity": 1,
                    "convert_param_to_shifted_value": 1,
                    "convert_to_bitwise": 1,
                    "decode_signed_integer": 1,
                    "reverse_and_shift_bits": 1,
                    "reverse_bits": 1,
                    "reverse_bitwise_operation": 1,
                    "validate_and_extract_bits": 1,
                    "validate_param": 1
                },
                "iVar1": {
                    "calculated_value": 2,
                    "calculated_value_1": 1,
                    "calculation_result": 1,
                    "doubled_input_2": 1,
                    "multiplied_num": 1,
                    "multiplied_value": 2,
                    "new_val": 1,
                    "result": 1,
                    "shifted_input_2": 1,
                    "shifted_modifier": 1,
                    "shifted_multiplier": 1,
                    "shifted_value": 13,
                    "temp1": 2,
                    "temp_value": 1,
                    "temp_var1": 2
                },
                "param_1": {
                    "input": 3,
                    "input1": 2,
                    "input_1": 5,
                    "input_value": 9,
                    "input_value1": 1,
                    "input_value_1": 4,
                    "num1": 2,
                    "value": 2,
                    "value1": 2,
                    "value_1": 1
                },
                "param_2": {
                    "bitmask": 1,
                    "flag": 1,
                    "input2": 2,
                    "input_2": 5,
                    "input_value2": 1,
                    "input_value_2": 4,
                    "modifier_value": 1,
                    "multiplier": 2,
                    "num": 1,
                    "num2": 2,
                    "shift": 1,
                    "shift_amount": 4,
                    "shift_value": 3,
                    "value2": 2,
                    "value_2": 1
                },
                "uVar2": {
                    "bit_offset": 1,
                    "calculated_value_2": 1,
                    "shift_amount": 16,
                    "shift_count": 1,
                    "shift_offset": 1,
                    "shift_value": 4,
                    "shifted_result": 1,
                    "shifted_value": 2,
                    "temp2": 2,
                    "temp_var2": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08003b98",
                "FUN_080005b4",
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_08002408",
                "FUN_08003004"
            ],
            "code": "\nuint calculate_shifted_value_08008bf0(uint input_value,uint input_2)\n\n{\n  int shifted_value;\n  uint shift_amount;\n  \n  if ((input_2 & 0x80000000) != 0) {\n    return 0;\n  }\n  shifted_value = input_2 * 2 + 0x200000;\n  if (input_2 * 2 < 0xffe00000) {\n    if (-1 < shifted_value) {\n      return 0;\n    }\n    shift_amount = -(shifted_value >> 0x15) - 0x3e1;\n    if (-1 < (int)shift_amount) {\n      return (input_2 << 0xb | 0x80000000 | input_value >> 0x15) >> (shift_amount & 0xff);\n    }\n  }\n  else if ((input_value | input_2 << 0xc) != 0) {\n    return 0;\n  }\n  return 0xffffffff;\n}\n\n",
            "current_name": "calculate_shifted_value_08008bf0",
            "entrypoint": "0x08008bf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008bf0": "calculate_shifted_value_08008bf0",
                "iVar1": "shifted_value",
                "param_1": "input_value",
                "param_2": "input_2",
                "uVar2": "shift_amount"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008c30": {
            "additional_data": {
                "FUN_08008c30": {
                    "calculate_float": 9,
                    "calculate_float_representation": 2,
                    "calculate_floating_point": 5,
                    "calculate_floating_point_bits": 1,
                    "calculate_floating_point_value": 2,
                    "calculate_new_value": 1,
                    "calculate_normalized_float_value": 1,
                    "calculate_normalized_value": 1,
                    "calculate_shifted_integer": 1,
                    "convert_float_to_uint": 1,
                    "convert_to_float": 3,
                    "decode_number": 1,
                    "perform_unsigned_multiplication": 1,
                    "reverse_bits": 2
                },
                "SCARRY4": {
                    "check_overflow": 1,
                    "check_sum_overflow": 1,
                    "is_carry": 1,
                    "signed_carry": 1,
                    "signed_carry_check": 1,
                    "subtract_carry": 1
                },
                "bVar4": {
                    "condition1": 1,
                    "is_invalid": 1,
                    "is_result_zero": 1,
                    "is_special_case": 1,
                    "is_zero": 26
                },
                "bVar5": {
                    "condition2": 1,
                    "is_exponent_valid": 1,
                    "is_flag_valid": 1,
                    "is_in_range": 3,
                    "is_less_than": 7,
                    "is_less_than700": 1,
                    "is_less_than70000000": 1,
                    "is_less_than700_m": 1,
                    "is_less_than_constant": 1,
                    "is_less_than_threshold": 2,
                    "is_normalized": 1,
                    "is_small": 1,
                    "is_small_exponent": 1,
                    "is_small_multiplier": 1,
                    "is_small_number": 1,
                    "is_small_value": 1,
                    "is_smaller": 2,
                    "is_twice_input2_lower_than_threshold": 1,
                    "shifted_input2_check": 1,
                    "should_adjust": 1
                },
                "in_r12": {
                    "adjusted_exponent_plus": 1,
                    "adjusted_multiplier_if_large": 1,
                    "base_number": 1,
                    "in_r12": 1,
                    "min_normalized_bit_pattern": 1,
                    "modified_input2_check": 1,
                    "modified_twice_input2_alternative": 1,
                    "other_temp": 1,
                    "result1": 1,
                    "result4": 1,
                    "scaled_bits_minus": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 8,
                    "temp_num": 1,
                    "temp_number": 1,
                    "temp_value": 2,
                    "temp_value3": 2,
                    "tmp1": 1,
                    "updated_mask": 1,
                    "value_with_sign": 1
                },
                "param_1": {
                    "exponent": 1,
                    "first_number": 1,
                    "float1": 1,
                    "float_a": 1,
                    "float_value": 1,
                    "floating_point_number": 1,
                    "input": 3,
                    "input1": 8,
                    "input_float": 1,
                    "input_value": 6,
                    "num1": 2,
                    "value": 3,
                    "value1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "bit_pattern": 1,
                    "bits": 1,
                    "control_value": 1,
                    "exponent": 1,
                    "flag_value": 1,
                    "float2": 1,
                    "float_b": 1,
                    "float_exponent": 1,
                    "floating_point_number2": 1,
                    "input2": 8,
                    "input_flag": 1,
                    "input_float2": 1,
                    "input_value_significand": 1,
                    "mantissa": 1,
                    "mask": 2,
                    "multiplier": 3,
                    "num2": 2,
                    "second_number": 1,
                    "value2": 1,
                    "value_2": 1
                },
                "uVar1": {
                    "output": 1,
                    "result": 29,
                    "result1": 1
                },
                "uVar2": {
                    "double_multiplier": 2,
                    "double_num": 1,
                    "doubled_exponent": 1,
                    "doubled_multiplier": 1,
                    "exponent_times_two": 1,
                    "multiplied_number": 2,
                    "multiplied_value": 1,
                    "param2_multiplied": 1,
                    "result2": 1,
                    "scaled_bits": 1,
                    "shifted_bit_pattern": 1,
                    "shifted_input2": 1,
                    "shifted_mantissa": 1,
                    "shifted_mask": 2,
                    "temp": 2,
                    "temp1": 8,
                    "temp_value": 1,
                    "temp_value1": 1,
                    "twice_input2": 2
                },
                "uVar3": {
                    "added_number": 1,
                    "added_value": 1,
                    "adjusted_bit_pattern": 1,
                    "adjusted_exponent": 1,
                    "adjusted_mantissa": 1,
                    "adjusted_mask": 1,
                    "adjusted_multiplier": 1,
                    "adjusted_num": 1,
                    "adjusted_value": 1,
                    "modified_input2": 1,
                    "modified_mask": 1,
                    "modified_multiplier": 1,
                    "modified_twice_input2": 1,
                    "new_temp": 1,
                    "new_value": 1,
                    "offset": 1,
                    "result2": 1,
                    "result3": 1,
                    "scaled_bits_plus": 1,
                    "shifted_number": 1,
                    "temp1": 1,
                    "temp2": 8,
                    "temp_value2": 2
                }
            },
            "called": [],
            "calling": [
                "FUN_08001f00",
                "FUN_080044e8",
                "FUN_080005b4",
                "FUN_0800056c",
                "FUN_08002638",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08003004",
                "FUN_08004940",
                "FUN_080046d0"
            ],
            "code": "\nuint calculate_float_representation_08008c30(uint input1,uint input2)\n\n{\n  uint result;\n  uint temp1;\n  uint temp2;\n  uint temp3;\n  bool is_zero;\n  bool is_less_than;\n  \n  temp1 = input2 * 2;\n  is_less_than = temp1 < 0x70000000;\n  temp2 = temp1 + 0x90000000;\n  result = temp2;\n  if (!is_less_than) {\n    temp3 = temp1 + 0x8fe00000;\n    result = temp3;\n  }\n  is_zero = result == 0;\n  if (!is_less_than && temp2 >= 0x200000) {\n    is_zero = temp3 == 0x1fc00000;\n  }\n  if (((is_less_than || temp2 < 0x200000) || 0x1fc00000 < temp3) || is_zero) {\n    if ((input2 & 0x40000000) != 0) {\n      if (((int)temp1 >> 0x15 == -1) && ((input1 | input2 << 0xc) != 0)) {\n        return 0x7fc00000;\n      }\n      return input2 & 0x80000000 | 0x7f800000;\n    }\n    if ((int)(temp1 + 0x92e00000) < 0 != subtract_carry(temp2,0x2e00000)) {\n      return input2 & 0x80000000;\n    }\n    temp1 = 0x18 - (temp1 + 0x92e00000 >> 0x15);\n    result = input1 >> (temp1 & 0xff);\n    if (input1 << (0x20 - temp1 & 0xff) != 0) {\n      result = result | 1;\n    }\n    temp2 = input2 & 0x1fffff | 0x100000;\n    input1 = result | temp2 << (0x20 - temp1 & 0xff);\n    temp2 = (temp2 >> (temp1 & 0xff)) << 1;\n  }\n  result = (input2 & 0x80000000 | input1 >> 0x1d) + temp2 * 4 + (uint)(0x7fffffff < input1 * 8);\n  if (input1 * 8 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_float_representation_08008c30",
            "entrypoint": "0x08008c30",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008c30": "calculate_float_representation_08008c30",
                "SCARRY4": "subtract_carry",
                "bVar4": "is_zero",
                "bVar5": "is_less_than",
                "in_r12": "temp3",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result",
                "uVar2": "temp1",
                "uVar3": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cd8": {
            "additional_data": {
                "FUN_08008cd8": {
                    "calculate_float": 11,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 3,
                    "calculate_floating_point_operation": 1,
                    "calculate_improved_value": 1,
                    "calculate_modified_float": 2,
                    "calculate_new_float": 1,
                    "calculate_new_value": 1,
                    "calculate_next_float": 1,
                    "calculate_sqrt": 1,
                    "perform_bitwise_operations": 1,
                    "perform_unsigned_division": 2,
                    "reverse_bits": 3
                },
                "bVar8": {
                    "check": 1,
                    "comparison_flag": 2,
                    "comparison_result": 1,
                    "condition": 3,
                    "condition_bool": 1,
                    "flag_check": 1,
                    "flag_var": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_equal": 9,
                    "is_true": 4,
                    "is_zero": 5,
                    "shifted_value_equals_flag": 1
                },
                "iVar1": {
                    "bit_shift": 1,
                    "dividend_shift": 1,
                    "quotient": 1,
                    "shift1": 2,
                    "shift_amount": 1,
                    "shift_count_a": 1,
                    "shift_value": 1,
                    "shifted1": 1,
                    "shifted_float": 1,
                    "shifted_float1": 1,
                    "shifted_input": 1,
                    "shifted_input1": 1,
                    "shifted_input_1": 1,
                    "shifted_input_1_signed": 1,
                    "shifted_input_float": 1,
                    "shifted_input_value": 1,
                    "shifted_input_value1": 1,
                    "shifted_num1": 1,
                    "shifted_value": 1,
                    "shifted_value1": 3,
                    "shifted_value_1": 1,
                    "shifted_value_sign": 1,
                    "sign_bit_current": 1,
                    "sign_bits_1": 1,
                    "sign_bits_input1": 1,
                    "temp_var1": 1,
                    "var1": 1
                },
                "iVar2": {
                    "bit_shift2": 1,
                    "divisor_shift": 1,
                    "remainder": 1,
                    "second_shift_value": 1,
                    "shift2": 2,
                    "shift_count_b": 1,
                    "shifted2": 1,
                    "shifted_amount": 1,
                    "shifted_flag_sign": 1,
                    "shifted_float2": 1,
                    "shifted_input2": 1,
                    "shifted_input_2": 1,
                    "shifted_input_2_signed": 1,
                    "shifted_input_bit_pattern": 1,
                    "shifted_input_value2": 1,
                    "shifted_input_value_2": 1,
                    "shifted_int": 1,
                    "shifted_mask": 1,
                    "shifted_num2": 1,
                    "shifted_value2": 3,
                    "shifted_value_2": 1,
                    "sign_bit_previous": 1,
                    "sign_bits_2": 1,
                    "sign_bits_shifted_input2": 1,
                    "temp_value": 1,
                    "temp_var2": 1,
                    "var2": 1
                },
                "param_1": {
                    "current_float": 1,
                    "dividend": 2,
                    "float1": 1,
                    "input": 4,
                    "input1": 3,
                    "input_1": 3,
                    "input_a": 1,
                    "input_float": 3,
                    "input_param1": 1,
                    "input_value": 2,
                    "input_value1": 4,
                    "input_value_1": 2,
                    "num1": 2,
                    "number1": 1,
                    "operand1": 1
                },
                "param_2": {
                    "divisor": 2,
                    "flag": 3,
                    "float2": 1,
                    "input2": 3,
                    "input_2": 3,
                    "input_b": 1,
                    "input_bit_pattern": 1,
                    "input_int": 1,
                    "input_param2": 1,
                    "input_value2": 4,
                    "input_value_2": 2,
                    "mask": 3,
                    "num2": 2,
                    "number2": 1,
                    "operand2": 1,
                    "previous_float": 1,
                    "xor_value": 1
                },
                "param_3": {
                    "constant": 1,
                    "constant_value": 1,
                    "conversion_constant": 1,
                    "data": 1,
                    "float3": 1,
                    "input3": 3,
                    "input_3": 3,
                    "input_c": 1,
                    "input_param3": 1,
                    "input_value3": 4,
                    "input_value_3": 1,
                    "num3": 1,
                    "opcode": 1,
                    "param3": 3,
                    "param_3": 2,
                    "status": 1,
                    "temp1": 1,
                    "undefined": 2,
                    "undefined_value": 1,
                    "unused": 1
                },
                "param_4": {
                    "counter": 1,
                    "float4": 1,
                    "input4": 3,
                    "input_4": 3,
                    "input_d": 1,
                    "input_param4": 1,
                    "input_value4": 4,
                    "input_value_4": 1,
                    "mask": 1,
                    "num4": 1,
                    "output": 1,
                    "param4": 3,
                    "param_4": 2,
                    "remainder": 1,
                    "result": 3,
                    "shift_amount": 1,
                    "shift_constant": 1,
                    "temp2": 1,
                    "truncate": 1
                },
                "uVar10": {
                    "shift_amount": 1,
                    "temporary": 1
                },
                "uVar11": {
                    "dividend_sign": 1
                },
                "uVar12": {
                    "divisor_sign": 1,
                    "final_result": 1
                },
                "uVar13": {
                    "divisor_threshold": 1
                },
                "uVar14": {
                    "quotient_shift": 1
                },
                "uVar15": {
                    "trailing_zeros": 1
                },
                "uVar16": {
                    "truncated_quotient": 1
                },
                "uVar17": {
                    "divisor_sign_mask": 1
                },
                "uVar3": {
                    "abs_value_current": 1,
                    "dividend_copy": 1,
                    "exponent": 1,
                    "flipped_flag": 1,
                    "flipped_sign_bit": 1,
                    "flipped_value": 1,
                    "input2_unsigned": 1,
                    "input_value1_xor": 1,
                    "masked_dividend": 1,
                    "masked_float": 1,
                    "masked_input2": 1,
                    "masked_value": 1,
                    "modified_input_2": 1,
                    "modified_input_value_1": 1,
                    "modified_value1": 1,
                    "modified_value_1": 1,
                    "num2_xor": 1,
                    "number1_shifted": 1,
                    "result1": 1,
                    "result_value1": 1,
                    "result_var1": 1,
                    "shifted_mask": 1,
                    "temp1": 1,
                    "temp_a": 1,
                    "tmp1": 1,
                    "x": 1,
                    "xor_input_2": 1,
                    "xor_result": 4
                },
                "uVar4": {
                    "abs_input_value2": 1,
                    "abs_value_previous": 1,
                    "divisor_copy": 1,
                    "flipped_value_aux": 1,
                    "float1": 1,
                    "masked_divisor": 1,
                    "masked_input3": 1,
                    "masked_int": 1,
                    "masked_temp_value": 1,
                    "modified_bit_pattern1": 1,
                    "modified_input_3": 1,
                    "modified_input_value_2": 1,
                    "modified_value2": 1,
                    "modified_value_2": 1,
                    "number2_shifted": 1,
                    "result1": 1,
                    "result2": 1,
                    "result_value2": 1,
                    "result_var2": 1,
                    "shifted_input": 1,
                    "shifted_value": 1,
                    "temp1": 3,
                    "temp2": 1,
                    "temp_b": 1,
                    "temp_value": 1,
                    "temp_value_1": 1,
                    "tmp2": 1,
                    "xor_result_shifted": 1,
                    "y": 1
                },
                "uVar5": {
                    "accumulator": 1,
                    "bits1": 1,
                    "calculated_value1": 1,
                    "data1": 1,
                    "float1_shifted": 1,
                    "input_value1_shifted": 1,
                    "left_shifted_input1": 1,
                    "modified_bit_pattern2": 1,
                    "modified_value_3": 1,
                    "negated_dividend": 1,
                    "normalized_current": 1,
                    "num1_shifted": 1,
                    "number1_modified": 1,
                    "output_a": 1,
                    "res1": 1,
                    "result": 3,
                    "result_var3": 1,
                    "shifted_input1": 1,
                    "shifted_input_1": 2,
                    "shifted_input_value1": 1,
                    "shifted_operand1": 1,
                    "shifted_value": 2,
                    "temp1": 1,
                    "temp2": 2,
                    "temp_value1": 1,
                    "temp_value_2": 1
                },
                "uVar6": {
                    "adjusted_value": 1,
                    "bits2": 1,
                    "calculated_value2": 1,
                    "data2": 1,
                    "final_shift": 1,
                    "loop_counter": 1,
                    "modified_bit_pattern3": 1,
                    "modified_value_4": 1,
                    "normalized_previous": 1,
                    "output_b": 1,
                    "res2": 1,
                    "result_var4": 1,
                    "shift": 1,
                    "shift_count": 1,
                    "shifted_amount": 1,
                    "shifted_difference": 1,
                    "shifted_input_value1_sum": 1,
                    "shifted_result": 1,
                    "shifted_value_aux": 1,
                    "sum": 2,
                    "temp": 1,
                    "temp2": 1,
                    "temp3": 2,
                    "temp_shift": 1,
                    "temp_value2": 1,
                    "temp_value_3": 1,
                    "temp_var_1": 1,
                    "tmp_dividend": 1,
                    "var6": 1
                },
                "uVar7": {
                    "calculated_value3": 1,
                    "diff": 4,
                    "difference": 16,
                    "dividend_difference": 1,
                    "exponent_difference": 1,
                    "input_value_difference": 1,
                    "modified_value_5": 1,
                    "result_var5": 1,
                    "shift_difference": 2,
                    "temp4": 2,
                    "temp_value3": 1
                },
                "uVar8": {
                    "normalized_float1": 1,
                    "shifted_result_1": 1,
                    "shifted_value_positive": 1
                },
                "uVar9": {
                    "flipped_flag_positive": 1,
                    "normalized_float2": 1,
                    "shifted_result_2": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001f00",
                "FUN_080028bc",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_08002408",
                "FUN_08002908",
                "FUN_08003004",
                "FUN_08004940"
            ],
            "code": "\nuint calculate_modified_float_08008cd8(uint input,uint input_value2,undefined4 input_value3,uint input_value4)\n\n{\n  int shifted_value1;\n  int shifted_value2;\n  uint xor_result;\n  uint temp1;\n  uint result;\n  uint temp3;\n  uint difference;\n  bool is_equal;\n  \n  xor_result = input_value2 ^ 0x80000000;\n  result = input << 1;\n  is_equal = result == 0;\n  if (!is_equal) {\n    input_value4 = input_value2 << 1;\n    is_equal = input_value4 == 0;\n  }\n  if (!is_equal) {\n    is_equal = result == input_value4;\n  }\n  shifted_value1 = (int)result >> 0x18;\n  if (!is_equal) {\n    is_equal = shifted_value1 == -1;\n  }\n  if (!is_equal) {\n    is_equal = (int)input_value4 >> 0x18 == -1;\n  }\n  if (is_equal) {\n    shifted_value2 = (int)(input_value2 << 1) >> 0x18;\n    if (shifted_value1 == -1 || shifted_value2 == -1) {\n      result = xor_result;\n      if (shifted_value1 == -1) {\n        result = input;\n      }\n      if (shifted_value1 != -1 || shifted_value2 != -1) {\n        xor_result = result;\n      }\n      is_equal = (result & 0x7fffff) == 0;\n      if (is_equal) {\n        is_equal = (xor_result & 0x7fffff) == 0;\n      }\n      if (is_equal) {\n        is_equal = result == xor_result;\n      }\n      if (!is_equal) {\n        result = result | 0x400000;\n      }\n      return result;\n    }\n    if (((input ^ xor_result) & 0x7fffffff) != 0) {\n      if (result == 0) {\n        input = xor_result;\n      }\n      return input;\n    }\n    if (input != xor_result) {\n      return 0;\n    }\n    if ((result & 0xff000000) == 0) {\n      xor_result = input << 1;\n      if ((input & 0x80000000) != 0) {\n        xor_result = xor_result | 0x80000000;\n      }\n      return xor_result;\n    }\n    if (result < 0xfe000000) {\n      return input + 0x800000;\n    }\n    input = input & 0x80000000;\nLAB_08008e12:\n    return input | 0x7f800000;\n  }\n  result = result >> 0x18;\n  input_value4 = input_value4 >> 0x18;\n  difference = input_value4 - result;\n  is_equal = difference != 0;\n  temp3 = result;\n  if (is_equal && result <= input_value4) {\n    temp3 = result + difference;\n  }\n  if (is_equal && result <= input_value4) {\n    xor_result = xor_result ^ input;\n  }\n  if (is_equal && result <= input_value4) {\n    input = input ^ xor_result;\n  }\n  if (is_equal && result <= input_value4) {\n    xor_result = xor_result ^ input;\n  }\n  if (input_value4 < result) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    return input;\n  }\n  result = input & 0xffffff | 0x800000;\n  if ((input & 0x80000000) != 0) {\n    result = -result;\n  }\n  temp1 = xor_result & 0xffffff | 0x800000;\n  if ((xor_result & 0x80000000) != 0) {\n    temp1 = -temp1;\n  }\n  if (temp3 == difference) {\n    temp1 = temp1 ^ 0x800000;\n    if (temp3 == 0) {\n      result = result ^ 0x800000;\n      temp3 = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result = result + ((int)temp1 >> (difference & 0xff));\n  temp1 = temp1 << (0x20 - difference & 0xff);\n  input = result & 0x80000000;\n  if ((int)result < 0) {\n    is_equal = temp1 != 0;\n    temp1 = -temp1;\n    result = -result - (uint)is_equal;\n  }\n  if (result < 0x800000) {\n    xor_result = temp1 & 0x80000000;\n    temp1 = temp1 << 1;\n    result = result * 2 + (uint)(xor_result != 0);\n    xor_result = temp3 - 2;\n    if (temp3 - 1 == 0 || result < 0x800000) {\n      difference = LZCOUNT(result) - 8;\n      result = result << (difference & 0xff);\n      if ((int)xor_result < (int)difference) {\n        result = result >> (-(xor_result - difference) & 0xff);\n      }\n      else {\n        result = result + (xor_result - difference) * 0x800000;\n      }\n      return result | input;\n    }\n  }\n  else {\n    xor_result = temp3 - 1;\n    if (0xffffff < result) {\n      xor_result = result & 1;\n      result = result >> 1;\n      temp1 = (uint)(xor_result != 0) << 0x1f | temp1 >> 1;\n      xor_result = temp3;\n      if (0xfd < temp3) goto LAB_08008e12;\n    }\n  }\n  result = result + xor_result * 0x800000 + (uint)(0x7fffffff < temp1);\n  if (temp1 == 0x80000000) {\n    result = result & 0xfffffffe;\n  }\n  return result | input;\n}\n\n",
            "current_name": "calculate_modified_float_08008cd8",
            "entrypoint": "0x08008cd8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cd8": "calculate_modified_float_08008cd8",
                "bVar8": "is_equal",
                "iVar1": "shifted_value1",
                "iVar2": "shifted_value2",
                "param_1": "input",
                "param_2": "input_value2",
                "param_3": "input_value3",
                "param_4": "input_value4",
                "uVar3": "xor_result",
                "uVar4": "temp1",
                "uVar5": "result",
                "uVar6": "temp3",
                "uVar7": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008cdc": {
            "additional_data": {
                "FUN_08008cdc": {
                    "calculate_float": 6,
                    "calculate_floating_point": 10,
                    "calculate_floating_point_result": 1,
                    "calculate_normalized_float": 1,
                    "compute_floating_point": 1,
                    "convert_to_float": 1,
                    "float_conversion": 1,
                    "float_to_fixed_point": 1,
                    "float_to_fixed_point_conversion": 1,
                    "invert_float_bits": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_calculation": 1,
                    "reverse_and_modify_numbers": 1,
                    "reverse_float": 1
                },
                "F_08008cdc": {
                    "reverse_and_modify_value": 1
                },
                "LZCOUNT": {
                    "leading_zero_count": 3
                },
                "bVar7": {
                    "conditions_met": 1,
                    "is_condition_met": 1,
                    "is_condition_true": 1,
                    "is_equal": 7,
                    "is_equal_or_both_zero": 1,
                    "is_greater_than_zero": 1,
                    "is_input_difference_zero": 1,
                    "is_modified": 1,
                    "is_true": 2,
                    "is_zero": 14,
                    "is_zero_case": 1
                },
                "iVar1": {
                    "exponent1": 1,
                    "high_bits_input1": 1,
                    "high_byte1": 1,
                    "input1_shifted": 1,
                    "integer_shifted": 1,
                    "left_shifted_value1": 1,
                    "normalized_value1_sign": 1,
                    "shift_amount": 2,
                    "shift_amount1": 1,
                    "shift_right_1": 1,
                    "shifted_1": 1,
                    "shifted_input1": 8,
                    "shifted_input1_sign": 1,
                    "shifted_input_1_signed": 1,
                    "shifted_input_a": 1,
                    "shifted_value1": 2,
                    "shifted_value1_sign": 1,
                    "sign1": 1,
                    "sign_bit_1": 1,
                    "upper_bits1": 1,
                    "upper_byte_value": 1
                },
                "iVar2": {
                    "exponent2": 1,
                    "high_bits_shifted_input2": 1,
                    "high_byte2": 1,
                    "input2_shifted": 1,
                    "integer_shifted2": 1,
                    "left_shifted_value2": 1,
                    "normalized_value2_sign": 1,
                    "shift_amount2": 3,
                    "shift_right_2": 1,
                    "shifted_2": 1,
                    "shifted_input2": 8,
                    "shifted_input2_sign": 1,
                    "shifted_input_2_signed": 1,
                    "shifted_input_b": 1,
                    "shifted_value1_shifted_sign": 1,
                    "shifted_value2": 2,
                    "sign2": 1,
                    "sign_bit_2": 1,
                    "upper_bits2": 1,
                    "upper_byte_value2": 1
                },
                "param_1": {
                    "float1": 1,
                    "floating_number1": 1,
                    "input1": 14,
                    "input_1": 3,
                    "input_a": 1,
                    "input_number_1": 1,
                    "input_value1": 4,
                    "num1": 1,
                    "operand1": 1,
                    "value1": 4
                },
                "param_2": {
                    "float2": 1,
                    "floating_number2": 1,
                    "input2": 14,
                    "input_2": 3,
                    "input_b": 1,
                    "input_number_2": 1,
                    "input_value2": 4,
                    "num2": 1,
                    "operand2": 1,
                    "value2": 4
                },
                "param_3": {
                    "flag": 1,
                    "flags": 1,
                    "float3": 1,
                    "input3": 9,
                    "input_3": 3,
                    "input_c": 1,
                    "input_flag": 1,
                    "input_shift": 1,
                    "input_value3": 2,
                    "is_addition": 1,
                    "option": 1,
                    "param3": 2,
                    "rounding_mode": 1,
                    "shift_amount": 1,
                    "temp1": 1,
                    "undefined_var": 1,
                    "unknown_param": 1,
                    "unused": 1,
                    "unused_param": 1
                },
                "param_4": {
                    "comparison_value": 1,
                    "exception_flag": 1,
                    "float4": 1,
                    "input3": 1,
                    "input4": 9,
                    "input_4": 2,
                    "input_d": 1,
                    "input_offset": 1,
                    "input_value3": 2,
                    "input_value4": 2,
                    "is_subtraction": 1,
                    "param4": 2,
                    "result": 4,
                    "shift_amount": 1,
                    "temp2": 1,
                    "unused": 1
                },
                "return": {
                    "result": 1
                },
                "uVar3": {
                    "abs_num1": 1,
                    "abs_value1": 1,
                    "bit32_value1": 1,
                    "float1": 1,
                    "fraction1": 1,
                    "fraction_part1": 1,
                    "fractional_part1": 1,
                    "input1_normalized": 1,
                    "mantissa1": 1,
                    "modified_input1": 1,
                    "modified_value1": 1,
                    "normalized_float1": 1,
                    "normalized_shifted_input_2": 1,
                    "normalized_value1": 1,
                    "output1": 2,
                    "partial_result_1": 1,
                    "result": 2,
                    "result1": 3,
                    "shifted_input1": 1,
                    "shifted_input2": 2,
                    "shifted_value2": 1,
                    "stages_1": 1,
                    "temp1": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "unshifted_num_1": 1
                },
                "uVar4": {
                    "abs_num2": 1,
                    "abs_value2": 1,
                    "bit32_value2": 1,
                    "exponent_part1": 1,
                    "fixed_point1": 1,
                    "float2": 1,
                    "fraction2": 1,
                    "fraction_part2": 1,
                    "input2_normalized": 1,
                    "mantissa2": 1,
                    "modified_input2": 1,
                    "modified_value2": 1,
                    "normalized_value2": 1,
                    "partial_result_2": 1,
                    "result2": 3,
                    "shifted_by_one1": 1,
                    "shifted_input1": 2,
                    "shifted_input2": 1,
                    "shifted_input_1": 1,
                    "shifted_num_1": 1,
                    "shifted_output": 1,
                    "shifted_result": 1,
                    "shifted_value1": 1,
                    "stages_2": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_value2": 1,
                    "temp_var2": 1
                },
                "uVar5": {
                    "compare1": 1,
                    "comparison_result1": 1,
                    "count": 1,
                    "count1": 1,
                    "count_1": 1,
                    "exponent1": 1,
                    "exponent_difference": 1,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "modified_value3": 1,
                    "normalized_shifted_input_1": 1,
                    "num_bits1": 1,
                    "old_result": 1,
                    "result_value1": 1,
                    "shift_counter": 1,
                    "shifted_by_one2": 1,
                    "shifted_float1": 1,
                    "shifted_input1_counter": 1,
                    "shifted_input2_copy": 1,
                    "shifted_num_2": 1,
                    "shifted_result_compare": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp_1": 1,
                    "temp_output1": 1,
                    "temp_value": 1,
                    "temp_value3": 1,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "value1_sign_extended": 1
                },
                "uVar6": {
                    "abs_difference": 1,
                    "abs_exponent_difference": 1,
                    "compare2": 1,
                    "comparison_result2": 1,
                    "count2": 1,
                    "count_2": 1,
                    "difference": 11,
                    "exponent2": 1,
                    "input_difference": 1,
                    "modified_value4": 1,
                    "num_bits2": 1,
                    "result_value2": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp_2": 1,
                    "temp_difference": 1,
                    "temp_output2": 1,
                    "temp_value4": 1,
                    "temp_var2": 1,
                    "temp_var4": 1,
                    "value_difference": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001f00",
                "FUN_080028bc",
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_08002908",
                "FUN_08003826",
                "FUN_08003004",
                "FUN_08004940"
            ],
            "code": "\nuint calculate_floating_point_result_08008cdc(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  int shifted_input1;\n  int shifted_input2;\n  uint result1;\n  uint result2;\n  uint loop_counter;\n  uint difference;\n  bool is_zero;\n  \n  result2 = input1 << 1;\n  is_zero = result2 == 0;\n  if (!is_zero) {\n    input4 = input2 << 1;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = result2 == input4;\n  }\n  shifted_input1 = (int)result2 >> 0x18;\n  if (!is_zero) {\n    is_zero = shifted_input1 == -1;\n  }\n  if (!is_zero) {\n    is_zero = (int)input4 >> 0x18 == -1;\n  }\n  if (is_zero) {\n    shifted_input2 = (int)(input2 << 1) >> 0x18;\n    if (shifted_input1 == -1 || shifted_input2 == -1) {\n      result2 = input2;\n      if (shifted_input1 == -1) {\n        result2 = input1;\n      }\n      if (shifted_input1 != -1 || shifted_input2 != -1) {\n        input2 = result2;\n      }\n      is_zero = (result2 & 0x7fffff) == 0;\n      if (is_zero) {\n        is_zero = (input2 & 0x7fffff) == 0;\n      }\n      if (is_zero) {\n        is_zero = result2 == input2;\n      }\n      if (!is_zero) {\n        result2 = result2 | 0x400000;\n      }\n      result result2;\n    }\n    if (((input1 ^ input2) & 0x7fffffff) != 0) {\n      if (result2 == 0) {\n        input1 = input2;\n      }\n      result input1;\n    }\n    if (input1 != input2) {\n      result 0;\n    }\n    if ((result2 & 0xff000000) == 0) {\n      result2 = input1 << 1;\n      if ((input1 & 0x80000000) != 0) {\n        result2 = result2 | 0x80000000;\n      }\n      result result2;\n    }\n    if (result2 < 0xfe000000) {\n      result input1 + 0x800000;\n    }\n    input1 = input1 & 0x80000000;\nLAB_08008e12:\n    result input1 | 0x7f800000;\n  }\n  result2 = result2 >> 0x18;\n  input4 = input4 >> 0x18;\n  difference = input4 - result2;\n  is_zero = difference != 0;\n  loop_counter = result2;\n  if (is_zero && result2 <= input4) {\n    loop_counter = result2 + difference;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (is_zero && result2 <= input4) {\n    input1 = input1 ^ input2;\n  }\n  if (is_zero && result2 <= input4) {\n    input2 = input2 ^ input1;\n  }\n  if (input4 < result2) {\n    difference = -difference;\n  }\n  if (0x19 < difference) {\n    result input1;\n  }\n  result2 = input1 & 0xffffff | 0x800000;\n  if ((input1 & 0x80000000) != 0) {\n    result2 = -result2;\n  }\n  result1 = input2 & 0xffffff | 0x800000;\n  if ((input2 & 0x80000000) != 0) {\n    result1 = -result1;\n  }\n  if (loop_counter == difference) {\n    result1 = result1 ^ 0x800000;\n    if (loop_counter == 0) {\n      result2 = result2 ^ 0x800000;\n      loop_counter = 1;\n    }\n    else {\n      difference = difference - 1;\n    }\n  }\n  result2 = result2 + ((int)result1 >> (difference & 0xff));\n  result1 = result1 << (0x20 - difference & 0xff);\n  input1 = result2 & 0x80000000;\n  if ((int)result2 < 0) {\n    is_zero = result1 != 0;\n    result1 = -result1;\n    result2 = -result2 - (uint)is_zero;\n  }\n  if (result2 < 0x800000) {\n    difference = result1 & 0x80000000;\n    result1 = result1 << 1;\n    result2 = result2 * 2 + (uint)(difference != 0);\n    difference = loop_counter - 2;\n    if (loop_counter - 1 == 0 || result2 < 0x800000) {\n      loop_counter = leading_zero_count(result2) - 8;\n      result2 = result2 << (loop_counter & 0xff);\n      if ((int)difference < (int)loop_counter) {\n        result2 = result2 >> (-(difference - loop_counter) & 0xff);\n      }\n      else {\n        result2 = result2 + (difference - loop_counter) * 0x800000;\n      }\n      result result2 | input1;\n    }\n  }\n  else {\n    difference = loop_counter - 1;\n    if (0xffffff < result2) {\n      difference = result2 & 1;\n      result2 = result2 >> 1;\n      result1 = (uint)(difference != 0) << 0x1f | result1 >> 1;\n      difference = loop_counter;\n      if (0xfd < loop_counter) goto LAB_08008e12;\n    }\n  }\n  result2 = result2 + difference * 0x800000 + (uint)(0x7fffffff < result1);\n  if (result1 == 0x80000000) {\n    result2 = result2 & 0xfffffffe;\n  }\n  result result2 | input1;\n}\n\n",
            "current_name": "calculate_floating_point_result_08008cdc",
            "entrypoint": "0x08008cdc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008cdc": "calculate_floating_point_result_08008cdc",
                "LZCOUNT": "leading_zero_count",
                "bVar7": "is_zero",
                "iVar1": "shifted_input1",
                "iVar2": "shifted_input2",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "return": "result",
                "uVar3": "result1",
                "uVar4": "result2",
                "uVar5": "loop_counter",
                "uVar6": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e3c": {
            "additional_data": {
                "FUN_08008e3c": {
                    "calculate_hash": 3,
                    "calculate_modified_value": 1,
                    "calculate_new_value": 1,
                    "calculate_result": 4,
                    "calculate_shifted_value": 1,
                    "calculate_value": 1,
                    "compute_result": 1,
                    "count_bits": 1,
                    "decode_bits": 1,
                    "decode_number": 2,
                    "decode_unsigned_integer": 1,
                    "decode_value": 1,
                    "reverse_and_shift": 1,
                    "reverse_binary": 1,
                    "reverse_bits": 8,
                    "reverse_lz": 1
                },
                "iVar3": {
                    "addition_constant": 1,
                    "base_value": 2,
                    "constant": 9,
                    "constant1": 1,
                    "constant_term": 3,
                    "constant_val": 1,
                    "constant_value": 4,
                    "intermediate_value": 1,
                    "offset": 6,
                    "result": 1,
                    "result_offset": 1,
                    "shifted_constant": 1
                },
                "param_1": {
                    "input": 10,
                    "input_num": 3,
                    "input_number": 4,
                    "input_val": 1,
                    "input_value": 12,
                    "number": 1
                },
                "uVar1": {
                    "bit_count": 1,
                    "final_result": 1,
                    "leading_zeroes": 2,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 19,
                    "modified_number": 1,
                    "result": 6
                },
                "uVar1_1": {
                    "leading_zeros2": 1,
                    "leading_zeros_2": 1
                },
                "uVar1_10": {
                    "leading_zeros11": 1
                },
                "uVar1_11": {
                    "leading_zeros12": 1
                },
                "uVar1_12": {
                    "leading_zeros13": 1
                },
                "uVar1_13": {
                    "leading_zeros14": 1
                },
                "uVar1_14": {
                    "leading_zeros15": 1
                },
                "uVar1_15": {
                    "leading_zeros16": 1
                },
                "uVar1_16": {
                    "leading_zeros17": 1
                },
                "uVar1_17": {
                    "leading_zeros18": 1
                },
                "uVar1_18": {
                    "leading_zeros19": 1
                },
                "uVar1_19": {
                    "leading_zeros20": 1
                },
                "uVar1_2": {
                    "leading_zeros3": 1,
                    "leading_zeros_3": 1
                },
                "uVar1_20": {
                    "leading_zeros21": 1
                },
                "uVar1_21": {
                    "leading_zeros22": 1
                },
                "uVar1_22": {
                    "leading_zeros23": 1
                },
                "uVar1_23": {
                    "leading_zeros24": 1
                },
                "uVar1_24": {
                    "leading_zeros25": 1
                },
                "uVar1_25": {
                    "leading_zeros26": 1
                },
                "uVar1_26": {
                    "leading_zeros27": 1
                },
                "uVar1_27": {
                    "leading_zeros28": 1
                },
                "uVar1_28": {
                    "leading_zeros29": 1
                },
                "uVar1_29": {
                    "leading_zeros30": 1
                },
                "uVar1_3": {
                    "leading_zeros4": 1,
                    "leading_zeros_4": 1
                },
                "uVar1_30": {
                    "leading_zeros31": 1
                },
                "uVar1_31": {
                    "leading_zeros32": 1
                },
                "uVar1_32": {
                    "leading_zeros33": 1
                },
                "uVar1_33": {
                    "leading_zeros34": 1
                },
                "uVar1_34": {
                    "leading_zeros35": 1
                },
                "uVar1_35": {
                    "leading_zeros36": 1
                },
                "uVar1_36": {
                    "leading_zeros37": 1
                },
                "uVar1_37": {
                    "leading_zeros38": 1
                },
                "uVar1_38": {
                    "leading_zeros39": 1
                },
                "uVar1_39": {
                    "leading_zeros40": 1
                },
                "uVar1_4": {
                    "leading_zeros5": 1,
                    "leading_zeros_5": 1
                },
                "uVar1_40": {
                    "leading_zeros41": 1
                },
                "uVar1_41": {
                    "leading_zeros42": 1
                },
                "uVar1_42": {
                    "leading_zeros43": 1
                },
                "uVar1_43": {
                    "leading_zeros44": 1
                },
                "uVar1_44": {
                    "leading_zeros45": 1
                },
                "uVar1_45": {
                    "leading_zeros46": 1
                },
                "uVar1_5": {
                    "leading_zeros6": 1,
                    "leading_zeros_6": 1
                },
                "uVar1_6": {
                    "leading_zeros7": 1
                },
                "uVar1_7": {
                    "leading_zeros8": 1
                },
                "uVar1_8": {
                    "leading_zeros9": 1
                },
                "uVar1_9": {
                    "leading_zeros10": 1
                },
                "uVar1_extra": {
                    "extra_shift_amount": 1
                },
                "uVar1_flag": {
                    "overflow_flag": 1
                },
                "uVar1_mask": {
                    "mask": 1
                },
                "uVar1_remainder": {
                    "remainder_shift_amount": 1
                },
                "uVar2": {
                    "modified_value": 1,
                    "power": 1,
                    "shift": 2,
                    "shift_amount": 18,
                    "shift_value": 1,
                    "shifted_value": 2,
                    "temp": 4,
                    "temp_result": 1,
                    "temp_var3": 1
                },
                "uVar2_1": {
                    "shift_amount2": 1,
                    "shift_value_2": 1
                },
                "uVar2_10": {
                    "shift_amount11": 1
                },
                "uVar2_11": {
                    "shift_amount12": 1
                },
                "uVar2_12": {
                    "shift_amount13": 1
                },
                "uVar2_13": {
                    "shift_amount14": 1
                },
                "uVar2_14": {
                    "shift_amount15": 1
                },
                "uVar2_15": {
                    "shift_amount16": 1
                },
                "uVar2_16": {
                    "shift_amount17": 1
                },
                "uVar2_17": {
                    "shift_amount18": 1
                },
                "uVar2_18": {
                    "shift_amount19": 1
                },
                "uVar2_19": {
                    "shift_amount20": 1
                },
                "uVar2_2": {
                    "shift_amount3": 1,
                    "shift_value_3": 1
                },
                "uVar2_20": {
                    "shift_amount21": 1
                },
                "uVar2_21": {
                    "shift_amount22": 1
                },
                "uVar2_22": {
                    "shift_amount23": 1
                },
                "uVar2_23": {
                    "shift_amount24": 1
                },
                "uVar2_24": {
                    "shift_amount25": 1
                },
                "uVar2_25": {
                    "shift_amount26": 1
                },
                "uVar2_26": {
                    "shift_amount27": 1
                },
                "uVar2_27": {
                    "shift_amount28": 1
                },
                "uVar2_28": {
                    "shift_amount29": 1
                },
                "uVar2_29": {
                    "shift_amount30": 1
                },
                "uVar2_3": {
                    "shift_amount4": 1,
                    "shift_value_4": 1
                },
                "uVar2_30": {
                    "shift_amount31": 1
                },
                "uVar2_31": {
                    "shift_amount32": 1
                },
                "uVar2_32": {
                    "shift_amount33": 1
                },
                "uVar2_33": {
                    "shift_amount34": 1
                },
                "uVar2_34": {
                    "shift_amount35": 1
                },
                "uVar2_35": {
                    "shift_amount36": 1
                },
                "uVar2_36": {
                    "shift_amount37": 1
                },
                "uVar2_37": {
                    "shift_amount38": 1
                },
                "uVar2_38": {
                    "shift_amount39": 1
                },
                "uVar2_39": {
                    "shift_amount40": 1
                },
                "uVar2_4": {
                    "shift_amount5": 1
                },
                "uVar2_40": {
                    "shift_amount41": 1
                },
                "uVar2_41": {
                    "shift_amount42": 1
                },
                "uVar2_42": {
                    "shift_amount43": 1
                },
                "uVar2_43": {
                    "shift_amount44": 1
                },
                "uVar2_44": {
                    "shift_amount45": 1
                },
                "uVar2_45": {
                    "shift_amount46": 1
                },
                "uVar2_46": {
                    "shift_amount47": 1
                },
                "uVar2_47": {
                    "shift_amount48": 1
                },
                "uVar2_48": {
                    "shift_amount49": 1
                },
                "uVar2_49": {
                    "shift_amount50": 1
                },
                "uVar2_5": {
                    "shift_amount6": 1
                },
                "uVar2_50": {
                    "shift_amount51": 1
                },
                "uVar2_51": {
                    "shift_amount52": 1
                },
                "uVar2_52": {
                    "shift_amount53": 1
                },
                "uVar2_53": {
                    "shift_amount54": 1
                },
                "uVar2_54": {
                    "shift_amount55": 1
                },
                "uVar2_55": {
                    "shift_amount56": 1
                },
                "uVar2_56": {
                    "shift_amount57": 1
                },
                "uVar2_57": {
                    "shift_amount58": 1
                },
                "uVar2_58": {
                    "shift_amount59": 1
                },
                "uVar2_59": {
                    "shift_amount60": 1
                },
                "uVar2_6": {
                    "shift_amount7": 1
                },
                "uVar2_60": {
                    "shift_amount61": 1
                },
                "uVar2_61": {
                    "shift_amount62": 1
                },
                "uVar2_62": {
                    "shift_amount63": 1
                },
                "uVar2_63": {
                    "shift_amount64": 1
                },
                "uVar2_7": {
                    "shift_amount8": 1
                },
                "uVar2_8": {
                    "shift_amount9": 1
                },
                "uVar2_9": {
                    "shift_amount10": 1
                },
                "uVar2_bound": {
                    "bound_mask": 1
                },
                "uVar2_carry": {
                    "carry_flag": 1
                },
                "uVar2_count": {
                    "shifted_count": 1
                },
                "uVar2_product": {
                    "shifted_input": 1
                },
                "uVar2_result": {
                    "final_result": 1
                },
                "uVar2_shifted": {
                    "shifted_input2": 1
                },
                "uVar2_sign": {
                    "sign_flag": 1
                },
                "uVar3": {
                    "temp_result": 1
                },
                "uVar4": {
                    "carry": 2,
                    "carry_bit": 1,
                    "carry_flag": 1,
                    "check_value": 1,
                    "comparison_result": 2,
                    "flag": 1,
                    "mask": 12,
                    "overflow_check": 1,
                    "shifted_input": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp2": 1,
                    "temp_value": 5,
                    "temp_var": 1
                },
                "uVar4_1": {
                    "mask2": 1
                },
                "uVar5": {
                    "final_value": 1,
                    "mask_value": 1,
                    "result": 4,
                    "temp_result": 1
                },
                "uVar6": {
                    "temp_value": 1
                },
                "uVar9": {
                    "temp_variable": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002c18",
                "FUN_08002638"
            ],
            "code": "\nuint reverse_bits_08008e3c(uint input_value)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  int constant;\n  uint mask;\n  \n  if (input_value == 0) {\n    return 0;\n  }\n  leading_zeros = LZCOUNT(input_value);\n  shift_amount = leading_zeros - 8;\n  constant = shift_amount * -0x800000 + 0x4a800000;\n  if (7 < leading_zeros) {\n    mask = 0 << (shift_amount & 0xff);\n    leading_zeros = constant + (input_value << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < mask);\n    if (mask == 0x80000000) {\n      leading_zeros = leading_zeros & 0xfffffffe;\n    }\n    return leading_zeros;\n  }\n  shift_amount = input_value << leading_zeros + 0x18;\n  leading_zeros = constant + ((input_value >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    leading_zeros = leading_zeros & ~(shift_amount >> 0x1f);\n  }\n  return leading_zeros;\n}\n\n",
            "current_name": "reverse_bits_08008e3c",
            "entrypoint": "0x08008e3c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e3c": "reverse_bits_08008e3c",
                "iVar3": "constant",
                "param_1": "input_value",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar4": "mask"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008e44": {
            "additional_data": {
                "FUN_08008e44": {
                    "bitwise_reverse": 1,
                    "calculate": 1,
                    "calculate_absolute_value": 1,
                    "calculate_complement": 1,
                    "calculate_hash": 2,
                    "calculate_modified_value": 1,
                    "calculate_result": 2,
                    "calculate_reverse_offset": 1,
                    "calculate_unsigned_value": 1,
                    "count_bits_and_shift": 1,
                    "count_bits_in_integer": 1,
                    "count_bits_set": 2,
                    "count_leading_zeros": 3,
                    "count_leading_zeros_and_shift": 1,
                    "count_set_bits": 1,
                    "decode_unsigned_integer": 5,
                    "extract_and_modify_bits": 1,
                    "extract_bits": 1,
                    "extracted_bits": 1,
                    "reverse_and_shift": 1,
                    "reverse_bits": 2
                },
                "LZCOUNT": {
                    "leading_zero_count": 2
                },
                "iVar4": {
                    "adjusted_constant": 1,
                    "hash_value": 2,
                    "initial_value": 1,
                    "offset": 3,
                    "result": 24
                },
                "param_1": {
                    "input": 15,
                    "input_num": 1,
                    "input_number": 2,
                    "input_value": 9,
                    "num": 2,
                    "number": 1,
                    "value": 1
                },
                "uVar1": {
                    "bit_count": 2,
                    "leading_zero_bits": 1,
                    "leading_zero_count": 1,
                    "leading_zero_count_2": 1,
                    "leading_zeroes": 5,
                    "leading_zeroes_count": 1,
                    "leading_zeros": 15,
                    "leading_zeros_count": 2,
                    "num_bits": 1,
                    "num_bits_set": 2
                },
                "uVar1_edge_case": {
                    "leading_zeros_count_edge_case": 1
                },
                "uVar1_masked": {
                    "leading_zeros_count_masked": 1
                },
                "uVar1_temp": {
                    "leading_zeros_count_temp": 1
                },
                "uVar2": {
                    "shift": 2,
                    "shift_amount": 19,
                    "shift_amount_3": 1,
                    "shift_val": 1,
                    "shift_value": 2,
                    "shifted_bits": 2,
                    "shifted_number": 1,
                    "shifted_value": 2,
                    "temp_value": 1
                },
                "uVar2_parameter": {
                    "shift_amount_param": 1
                },
                "uVar3": {
                    "is_negative": 7,
                    "modified_sign_mask_2": 1,
                    "negative_flag": 1,
                    "result": 2,
                    "shifted_msb": 1,
                    "sign": 2,
                    "sign_bit": 15,
                    "sign_bit_mask": 1,
                    "signed_bit": 1
                },
                "uVar3_clear_bit": {
                    "sign_bit_clear": 1
                },
                "uVar3_edge_case": {
                    "sign_bit_edge_case": 1
                },
                "uVar3_final": {
                    "sign_bit_final": 1
                },
                "uVar3_masked": {
                    "sign_bit_masked": 1
                },
                "uVar3_parameter": {
                    "sign_bit_param": 1
                },
                "uVar3_temp": {
                    "sign_bit_temp": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001f00",
                "FUN_08003618",
                "FUN_08002c18",
                "FUN_080004fc",
                "FUN_08002408",
                "FUN_080024c4",
                "FUN_08003004",
                "FUN_08004940"
            ],
            "code": "\nuint decode_unsigned_integer_08008e44(uint input)\n\n{\n  uint leading_zeros;\n  uint shift_amount;\n  uint sign_bit;\n  int result;\n  \n  sign_bit = input & 0x80000000;\n  if ((int)sign_bit < 0) {\n    input = -input;\n  }\n  if (input == 0) {\n    return 0;\n  }\n  leading_zeros = leading_zero_count(input);\n  shift_amount = leading_zeros - 8;\n  result = ((sign_bit | 0x4b000000) - 0x800000) + shift_amount * -0x800000;\n  if (7 < leading_zeros) {\n    leading_zeros = 0 << (shift_amount & 0xff);\n    sign_bit = result + (input << (shift_amount & 0xff)) +\n            (0U >> (0x20 - shift_amount & 0xff)) + (uint)(0x7fffffff < leading_zeros);\n    if (leading_zeros == 0x80000000) {\n      sign_bit = sign_bit & 0xfffffffe;\n    }\n    return sign_bit;\n  }\n  shift_amount = input << leading_zeros + 0x18;\n  sign_bit = result + ((input >> (0x20 - (leading_zeros + 0x18) & 0xff)) - ((int)shift_amount >> 0x1f));\n  if ((shift_amount & 0x7fffffff) == 0) {\n    sign_bit = sign_bit & ~(shift_amount >> 0x1f);\n  }\n  return sign_bit;\n}\n\n",
            "current_name": "decode_unsigned_integer_08008e44",
            "entrypoint": "0x08008e44",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008e44": "decode_unsigned_integer_08008e44",
                "LZCOUNT": "leading_zero_count",
                "iVar4": "result",
                "param_1": "input",
                "uVar1": "leading_zeros",
                "uVar2": "shift_amount",
                "uVar3": "sign_bit"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08008eec": {
            "additional_data": {
                "FUN_08008eec": {
                    "calculate_float": 8,
                    "calculate_float32": 1,
                    "calculate_float_bitwise": 1,
                    "calculate_float_canonical": 1,
                    "calculate_float_from_integers": 1,
                    "calculate_float_value": 1,
                    "calculate_floating_point": 8,
                    "calculate_floating_point_bit_pattern": 1,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_value": 1,
                    "calculate_hash": 1,
                    "calculate_result": 1,
                    "perform_bitwise_operations": 1,
                    "process_numbers": 1,
                    "reverse_binary_operation": 1
                },
                "bVar10": {
                    "check2": 1,
                    "check_overflow": 1,
                    "condition2": 1,
                    "condition_2": 2,
                    "has_overflow": 1,
                    "is_borrow": 2,
                    "is_borrow_set": 1,
                    "is_neg": 1,
                    "is_negative": 8,
                    "is_negative_a": 1,
                    "is_negative_result": 2,
                    "is_negative_shifted_input1": 1,
                    "is_negative_step1": 1,
                    "is_negative_sum_ab": 1,
                    "is_overflow": 3,
                    "is_result_negative": 1,
                    "is_second_condition_met": 1,
                    "is_subtraction_overflow": 1,
                    "overflow": 1
                },
                "bVar9": {
                    "check1": 1,
                    "check_condition": 1,
                    "condition1": 1,
                    "condition_1": 2,
                    "is_a_upper_zero": 1,
                    "is_both_inputs_zero": 1,
                    "is_condition_met": 2,
                    "is_first_condition_met": 1,
                    "is_first_value_zero": 1,
                    "is_input1_zero": 1,
                    "is_zero": 11,
                    "is_zero1": 1,
                    "is_zero_1": 1,
                    "is_zero_a": 2,
                    "is_zero_first_byte_num1": 1,
                    "is_zero_or_ff": 1,
                    "is_zero_or_ff_step1": 1,
                    "is_zero_shifted_input1": 1
                },
                "iVar4": {
                    "byte_sum": 1,
                    "exponent_sum": 1,
                    "shifted_bits_sum": 1,
                    "shifted_sum": 2,
                    "sum": 10,
                    "sum_ab": 1,
                    "sum_bits": 1,
                    "sum_of_exponents": 2,
                    "sum_of_flags": 1,
                    "sum_of_shifted": 1,
                    "sum_of_shifted_bits": 1,
                    "sum_of_sign_bits": 1,
                    "sum_of_upper_bits": 1,
                    "sum_of_upper_bytes": 1,
                    "sum_shifted": 2,
                    "sum_shifted_bits": 1,
                    "temp2": 1,
                    "u_var3_b_upper_sum": 1,
                    "u_var3_plus_unknown2": 1
                },
                "iVar5": {
                    "adjusted_sum_ab": 1,
                    "byte_diff": 1,
                    "comparison_value": 1,
                    "diff": 2,
                    "diff_bits": 1,
                    "diff_shifted_bits": 1,
                    "difference": 6,
                    "difference_from_max": 1,
                    "exponent_diff": 1,
                    "i_var4_minus7_f": 1,
                    "new_expo": 1,
                    "normalized_shift": 1,
                    "normalized_sum": 2,
                    "shift_diff": 1,
                    "shift_difference": 1,
                    "shifted_bits_diff": 1,
                    "shifted_diff": 1,
                    "sum_adjusted": 1,
                    "sum_diff": 2,
                    "sum_of_upper_bits_minus_0x7f": 1,
                    "temp3": 1,
                    "temp_sum": 1
                },
                "iVar7": {
                    "byte_diff_temp": 1,
                    "difference": 1,
                    "difference2": 2,
                    "difference_from_max2": 1,
                    "exponent_diff_neg": 1,
                    "i_var5_adjusted": 1,
                    "loop_var": 1,
                    "lvar1_diff": 1,
                    "mask_count": 1,
                    "mult_diff_bits": 1,
                    "neg_sum_of_upper_bits_minus_0x7f": 1,
                    "normalized_sum_diff": 1,
                    "product_diff": 1,
                    "shift_count": 2,
                    "shift_diff": 1,
                    "shift_difference": 1,
                    "shifted_bits_count": 1,
                    "signed_sum": 1,
                    "sum_adjusted_temp": 1,
                    "sum_diff2": 1,
                    "temp": 3,
                    "temp4": 1,
                    "temp_shift": 1,
                    "temp_value": 1,
                    "temp_var2": 1
                },
                "iVar8": {
                    "shift_amount": 1
                },
                "lVar1": {
                    "long_long_var": 1,
                    "long_multiplication_result": 1,
                    "long_result": 1,
                    "mul_temp": 1,
                    "multiplied_long_value": 1,
                    "multiplied_result": 1,
                    "multiply_result": 1,
                    "product": 4,
                    "product_extended": 1,
                    "product_msb": 1,
                    "result": 1,
                    "result_64bit": 1,
                    "temp": 2
                },
                "param_1": {
                    "a": 1,
                    "exponent1": 2,
                    "exponent_a": 1,
                    "first_number": 2,
                    "first_parameter": 1,
                    "float1": 1,
                    "input1": 10,
                    "input_1": 5,
                    "input_a": 1,
                    "input_param1": 1,
                    "input_value_1": 1,
                    "num1": 4,
                    "number_1": 1
                },
                "param_2": {
                    "b": 1,
                    "exponent2": 2,
                    "float2": 1,
                    "input2": 10,
                    "input_2": 5,
                    "input_b": 1,
                    "input_param2": 1,
                    "input_value_2": 1,
                    "mantissa_a": 1,
                    "num2": 4,
                    "number_2": 1,
                    "second_number": 2,
                    "second_parameter": 1
                },
                "param_3": {
                    "c": 1,
                    "constant": 1,
                    "exponent_b": 1,
                    "input3": 8,
                    "input_3": 2,
                    "input_c": 1,
                    "input_flag": 1,
                    "input_param3": 1,
                    "param3": 4,
                    "param_3": 2,
                    "parameter3": 2,
                    "shift_1": 1,
                    "third_parameter": 1,
                    "undefined": 1,
                    "unknown1": 1,
                    "unknown_param": 1,
                    "unused_param_1": 1,
                    "var3": 1
                },
                "param_4": {
                    "b_upper_bits": 1,
                    "float3": 1,
                    "fourth_parameter": 1,
                    "fractional_part": 1,
                    "input4": 8,
                    "input_3": 1,
                    "input_4": 2,
                    "input_d": 1,
                    "input_param4": 1,
                    "mantissa_b": 1,
                    "output_value": 1,
                    "param4": 4,
                    "param_4": 2,
                    "parameter4": 2,
                    "shifted_input_2": 1,
                    "unknown2": 1,
                    "unused_param_2": 1,
                    "var4": 1
                },
                "uVar2": {
                    "hash_2": 1,
                    "result": 25,
                    "result_final": 1,
                    "result_lower_32bit": 1,
                    "result_upper": 1,
                    "result_with_expo": 1,
                    "shifted_value2": 1
                },
                "uVar3": {
                    "a_upper_bits": 1,
                    "condition_byte1": 1,
                    "exponent1": 1,
                    "exponent1_shifted": 2,
                    "exponent_a_bits": 1,
                    "first_byte_num1": 1,
                    "first_num_bitwise_shifted": 1,
                    "first_number_shifted": 1,
                    "first_shifted_value": 1,
                    "flag_value_1": 1,
                    "hash_1": 1,
                    "input1_shifted": 2,
                    "input1_upper_byte": 1,
                    "input_1_shifted": 1,
                    "input_1_upper_bits": 1,
                    "num1_shifted": 2,
                    "number_1_bit": 1,
                    "shift_1": 1,
                    "shifted1": 1,
                    "shifted_bits1": 1,
                    "shifted_bits_input1": 1,
                    "shifted_input1": 2,
                    "shifted_input_a": 1,
                    "shifted_num1": 1,
                    "shifted_val1": 1,
                    "shifted_value1": 1,
                    "sign_bit_1": 1
                },
                "uVar6": {
                    "adjusted_product": 1,
                    "high_word_multiplier": 1,
                    "lower_bits_product": 1,
                    "mantissa_mul_low": 1,
                    "mul_result": 1,
                    "multiplication_result": 3,
                    "multiplied": 1,
                    "multiplied_value": 2,
                    "product": 7,
                    "product_low": 2,
                    "product_lsb": 1,
                    "result_upper_32bit": 1,
                    "shifted_product": 1,
                    "temp1": 1,
                    "temp_multiply_result": 1,
                    "temp_product": 1,
                    "temp_result": 3
                },
                "uVar8": {
                    "bitwise_xor": 1,
                    "combined_inputs": 1,
                    "combined_sign_and_mantissa": 1,
                    "combined_value": 1,
                    "exponent2_shifted": 1,
                    "final_result": 1,
                    "input_1_sign_extension": 1,
                    "lvar1_upper": 1,
                    "masked_result": 1,
                    "modified_num1": 1,
                    "normalized_result": 1,
                    "num1_intermediate": 1,
                    "product_high": 1,
                    "result": 3,
                    "result_bits": 1,
                    "result_value": 1,
                    "shift_2": 1,
                    "shifted_input_a_with_carry": 1,
                    "shifted_result": 1,
                    "shifted_val2": 1,
                    "shifted_value": 1,
                    "temp": 2,
                    "temp_result": 3,
                    "temp_result2": 1,
                    "temp_var": 1,
                    "updated_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_080028bc",
                "FUN_080005b4",
                "FUN_08003618",
                "FUN_08002c18",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08002408",
                "FUN_08002908",
                "FUN_080024c4",
                "FUN_08003004",
                "FUN_08002638",
                "FUN_08003826"
            ],
            "code": "\nuint calculate_floating_point_number_08008eec(uint input1,uint input2,undefined4 input3,uint input4)\n\n{\n  longlong product;\n  uint result;\n  uint shifted_input1;\n  int sum;\n  int difference;\n  uint product;\n  int temp;\n  uint temp_result;\n  bool is_zero;\n  bool is_negative;\n  \n  shifted_input1 = input1 >> 0x17 & 0xff;\n  is_zero = shifted_input1 == 0;\n  if (!is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    is_zero = input4 == 0;\n  }\n  if (!is_zero) {\n    is_zero = shifted_input1 == 0xff;\n  }\n  if (!is_zero) {\n    is_zero = input4 == 0xff;\n  }\n  if (is_zero) {\n    input4 = input2 >> 0x17 & 0xff;\n    if (shifted_input1 == 0xff || input4 == 0xff) {\n      is_zero = input1 == 0 || input1 == 0x80000000;\n      result = input2;\n      if (input1 != 0 && input1 != 0x80000000) {\n        is_zero = input2 == 0;\n        result = input1;\n      }\n      if (!is_zero) {\n        is_zero = input2 == 0x80000000;\n      }\n      temp_result = result;\n      if (((is_zero) || ((shifted_input1 == 0xff && ((result & 0x7fffff) != 0)))) ||\n         ((input4 == 0xff && (temp_result = input2, (input2 & 0x7fffff) != 0)))) {\n        return temp_result | 0x7fc00000;\n      }\n      result = result ^ input2;\n      goto LAB_0800903c;\n    }\n    is_zero = (input1 & 0x7fffffff) == 0;\n    if (!is_zero) {\n      is_zero = (input2 & 0x7fffffff) == 0;\n    }\n    if (is_zero) {\n      return (input1 ^ input2) & 0x80000000;\n    }\n    is_zero = shifted_input1 == 0;\n    result = input1 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input1 = input1 << 1;\n        is_zero = (input1 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      shifted_input1 = shifted_input1 - 1;\n    }\n    input1 = input1 | result;\n    is_zero = input4 == 0;\n    result = input2 & 0x80000000;\n    while( true ) {\n      if (is_zero) {\n        input2 = input2 << 1;\n        is_zero = (input2 & 0x800000) == 0;\n      }\n      if (!is_zero) break;\n      input4 = input4 - 1;\n    }\n    input2 = input2 | result;\n  }\n  sum = shifted_input1 + input4;\n  temp_result = input1 ^ input2;\n  shifted_input1 = input1 << 9;\n  is_zero = shifted_input1 == 0;\n  if (!is_zero) {\n    input2 = input2 << 9;\n    is_zero = input2 == 0;\n  }\n  if (is_zero) {\n    if (shifted_input1 == 0) {\n      input2 = input2 << 9;\n    }\n    result = temp_result & 0x80000000 | input1 & 0x7fffff | input2 >> 9;\n    is_negative = SBORROW4(sum,0x7f);\n    difference = sum + -0x7f;\n    is_zero = difference == 0;\n    temp = difference;\n    if (!is_zero && 0x7e < sum) {\n      is_negative = SBORROW4(0xff,difference);\n      temp = 0xff - difference;\n      is_zero = difference == 0xff;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      result = result | difference * 0x800000;\n    }\n    if (!is_zero && temp < 0 == is_negative) {\n      return result;\n    }\n    result = result | 0x800000;\n    product = 0;\n    is_negative = SBORROW4(difference,1);\n    temp_result = sum - 0x80;\n    is_zero = temp_result == 0;\n    shifted_input1 = temp_result;\n  }\n  else {\n    product = (ulonglong)(shifted_input1 >> 5 | 0x8000000) * (ulonglong)(input2 >> 5 | 0x8000000);\n    product = (uint)product;\n    result = (uint)((ulonglong)product >> 0x20);\n    is_zero = result < 0x800000;\n    if (is_zero) {\n      result = result << 1;\n    }\n    if (is_zero) {\n      result = result | product >> 0x1f;\n      product = product << 1;\n    }\n    result = temp_result & 0x80000000 | result;\n    temp_result = (sum + -0x7f) - (uint)is_zero;\n    is_negative = SBORROW4(temp_result,0xfd);\n    is_zero = temp_result == 0xfd;\n    shifted_input1 = temp_result - 0xfd;\n    if (temp_result < 0xfe) {\n      result = result + temp_result * 0x800000 + (uint)(0x7fffffff < product);\n      if (product == 0x80000000) {\n        result = result & 0xfffffffe;\n      }\n      return result;\n    }\n  }\n  if (is_zero || (int)shifted_input1 < 0 != is_negative) {\n    is_zero = (int)(temp_result + 0x19) < 0;\n    if (temp_result == 0xffffffe7 || is_zero != SCARRY4(temp_result,0x19)) {\n      result = result & 0x80000000;\n    }\n    if (temp_result != 0xffffffe7 && is_zero == SCARRY4(temp_result,0x19)) {\n      shifted_input1 = (result << 1) >> (-temp_result & 0xff);\n      temp_result = result << (temp_result + 0x20 & 0xff);\n      shifted_input1 = ((uint)((result & 0x80000000) != 0) << 0x1f | shifted_input1 >> 1) + (uint)((byte)shifted_input1 & 1);\n      if ((product | temp_result << 1) == 0) {\n        shifted_input1 = shifted_input1 & ~(temp_result >> 0x1f);\n      }\n      return shifted_input1;\n    }\n    return result;\n  }\nLAB_0800903c:\n  return result & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "calculate_floating_point_number_08008eec",
            "entrypoint": "0x08008eec",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08008eec": "calculate_floating_point_number_08008eec",
                "bVar10": "is_negative",
                "bVar9": "is_zero",
                "iVar4": "sum",
                "iVar5": "difference",
                "iVar7": "temp",
                "lVar1": "product",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result",
                "uVar3": "shifted_input1",
                "uVar6": "product",
                "uVar8": "temp_result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009054": {
            "additional_data": {
                "FUN_08009054": {
                    "calculate_float": 6,
                    "calculate_float32": 1,
                    "calculate_float_bits": 1,
                    "calculate_float_value": 2,
                    "calculate_floating_point": 8,
                    "compute_float": 1,
                    "convert_to_float": 1,
                    "float_to_fixed_point_conversion": 1,
                    "float_to_uint": 1,
                    "floating_point_addition": 2,
                    "floating_point_conversion": 1,
                    "precision_and_rounding": 1,
                    "reverse_float": 2
                },
                "SBORROW4": {
                    "signed_borrow": 1
                },
                "SCARRY4": {
                    "signed_carry": 1
                },
                "bVar10": {
                    "is_overflow": 1
                },
                "bVar7": {
                    "bool1": 1,
                    "check_condition": 1,
                    "check_zero_condition": 1,
                    "compare_result": 1,
                    "condition": 3,
                    "condition1": 8,
                    "condition_1": 1,
                    "condition_a": 1,
                    "flag1": 4,
                    "flag_a": 1,
                    "is_condition_met1": 1,
                    "is_zero": 5,
                    "is_zero1": 1,
                    "is_zero_x": 1
                },
                "bVar8": {
                    "b_var8": 1,
                    "bool2": 1,
                    "check_negative_condition": 1,
                    "compare_condition": 1,
                    "cond1": 1,
                    "condition2": 9,
                    "condition_2": 1,
                    "condition_b": 1,
                    "flag2": 4,
                    "flag_b": 1,
                    "is_condition_met2": 1,
                    "is_overflow": 1,
                    "is_zero2": 1,
                    "is_zero_y": 1,
                    "overflow": 3,
                    "overflow_carry": 1,
                    "temp_condition": 1
                },
                "bVar9": {
                    "b_var9": 1,
                    "bool3": 1,
                    "carry": 4,
                    "carry_flag": 2,
                    "carry_overflow": 1,
                    "check_overflow": 1,
                    "compare_condition": 1,
                    "cond2": 1,
                    "condition3": 8,
                    "condition_3": 1,
                    "condition_c": 1,
                    "flag3": 4,
                    "flag_c": 1,
                    "is_condition_met3": 1,
                    "overflow": 1,
                    "temp_condition2": 1
                },
                "iVar3": {
                    "bit_difference": 1,
                    "diff": 4,
                    "diff_exponents": 1,
                    "difference": 10,
                    "exponent_diff": 1,
                    "exponent_difference": 3,
                    "shift": 1,
                    "shift_amount": 1,
                    "shift_difference": 3,
                    "temp3": 3,
                    "temp_c": 1,
                    "temp_var3": 1
                },
                "iVar5": {
                    "added_value": 1,
                    "adjusted_exponent": 2,
                    "adjusted_shift_difference": 1,
                    "exponent_sum": 1,
                    "i_var5": 1,
                    "modified_shift_difference": 1,
                    "new_diff": 1,
                    "new_difference": 1,
                    "normalized_exponent_difference": 1,
                    "shifted_value": 1,
                    "sum": 5,
                    "sum_of_bits": 1,
                    "sum_with127": 1,
                    "temp": 2,
                    "temp1": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_e": 1,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "threshold": 1
                },
                "param_1": {
                    "first_operand": 1,
                    "float1": 2,
                    "float_a": 1,
                    "float_bits1": 1,
                    "float_value_1": 1,
                    "input1": 9,
                    "input_1": 1,
                    "input_a": 2,
                    "input_float": 1,
                    "input_float1": 1,
                    "input_value1": 1,
                    "mantissa1": 1,
                    "num1": 2,
                    "number1": 1,
                    "operand1": 1,
                    "value1": 2,
                    "value_1": 1,
                    "x": 2
                },
                "param_2": {
                    "factor": 1,
                    "float2": 2,
                    "float_b": 1,
                    "float_bits2": 1,
                    "float_value_2": 1,
                    "input2": 9,
                    "input_2": 1,
                    "input_b": 2,
                    "input_float2": 1,
                    "input_value2": 1,
                    "mantissa2": 1,
                    "num2": 2,
                    "number2": 1,
                    "operand2": 1,
                    "second_operand": 1,
                    "value2": 2,
                    "value_2": 1,
                    "y": 2
                },
                "param_3": {
                    "constant": 1,
                    "flag": 1,
                    "float3": 1,
                    "input3": 2,
                    "input_3": 1,
                    "param3": 8,
                    "param_3": 2,
                    "precision": 1,
                    "undefined": 2,
                    "undefined_value": 1,
                    "unknown_parameter": 1,
                    "unused": 1,
                    "unused_param": 3,
                    "z": 2
                },
                "param_4": {
                    "bit_mask": 1,
                    "exponent": 1,
                    "float4": 1,
                    "input3": 2,
                    "input4": 2,
                    "input_4": 1,
                    "input_value3": 1,
                    "mask": 1,
                    "param4": 8,
                    "param_4": 1,
                    "result_exponent": 1,
                    "rounding_mode": 1,
                    "shift_amount": 2,
                    "shift_value": 1,
                    "temp": 2,
                    "u_value": 1,
                    "u_var4": 1,
                    "w": 2
                },
                "uVar1": {
                    "bit_mask": 1,
                    "bit_mask1": 1,
                    "bit_pattern_x": 1,
                    "dividend": 1,
                    "dividend_shifted": 1,
                    "fixed_point_factor": 1,
                    "float_bits2_shifted": 1,
                    "input2_shifted": 2,
                    "masked_1": 1,
                    "normalized_operand1": 1,
                    "remainder": 2,
                    "result_1": 1,
                    "shifted_b": 2,
                    "shifted_float2": 1,
                    "shifted_input2": 1,
                    "shifted_num2": 1,
                    "temp1": 6,
                    "temp_a": 1,
                    "temp_var1": 1,
                    "u_result": 1,
                    "ufactor": 1,
                    "var1": 1
                },
                "uVar2": {
                    "bit_mask2": 1,
                    "exponent1": 2,
                    "exponent_1": 1,
                    "exponent_x": 1,
                    "first_operand_bits": 1,
                    "input1_shifted": 2,
                    "masked_2": 1,
                    "normalized_operand2": 1,
                    "result_2": 1,
                    "shift1": 1,
                    "shifted_a": 2,
                    "shifted_dividend": 1,
                    "shifted_float1": 1,
                    "shifted_input": 1,
                    "shifted_input1": 2,
                    "shifted_num1": 1,
                    "temp2": 5,
                    "temp_b": 1,
                    "temp_var2": 1,
                    "u_var2": 1,
                    "val1_shifted": 1,
                    "var2": 1
                },
                "uVar4": {
                    "count": 1,
                    "exponent": 1,
                    "exponent_sum": 1,
                    "initial_result": 1,
                    "loop_count": 1,
                    "result": 1,
                    "shift": 1,
                    "shift2": 1,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "shifted_bits": 1,
                    "shifted_input2": 1,
                    "sum": 2,
                    "temp": 2,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_d": 1,
                    "temp_var1": 1,
                    "temp_var4": 1,
                    "threshold": 1,
                    "u_var4": 2,
                    "ufactor_minus1": 1,
                    "var4": 1
                },
                "uVar6": {
                    "float_bits": 1,
                    "result": 23,
                    "result_mantissa": 1,
                    "temp2": 1,
                    "temp6": 2,
                    "temp_var6": 1,
                    "val2_shifted": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08002e08",
                "FUN_08001f00",
                "FUN_080028bc",
                "FUN_08003618",
                "FUN_08004250",
                "FUN_08001994",
                "FUN_080004fc",
                "FUN_08002908",
                "FUN_08003004",
                "FUN_08004940"
            ],
            "code": "\nuint float_to_fixed_point_conversion_08009054(uint input1,uint input2,undefined4 param3,uint param4)\n\n{\n  uint temp1;\n  uint temp2;\n  int difference;\n  uint shift_amount;\n  int sum;\n  uint result;\n  bool condition1;\n  bool condition2;\n  bool condition3;\n  \n  temp2 = input1 >> 0x17 & 0xff;\n  condition1 = temp2 == 0;\n  if (!condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    condition1 = param4 == 0;\n  }\n  if (!condition1) {\n    condition1 = temp2 == 0xff;\n  }\n  if (!condition1) {\n    condition1 = param4 == 0xff;\n  }\n  if (condition1) {\n    param4 = input2 >> 0x17 & 0xff;\n    result = input1;\n    if (temp2 == 0xff) {\n      if (((input1 & 0x7fffff) != 0) || (result = input2, param4 == 0xff)) {\nLAB_0800904a:\n        return result | 0x7fc00000;\n      }\n    }\n    else {\n      if (param4 == 0xff) {\n        result = input2;\n        if ((input2 & 0x7fffff) == 0) {\nLAB_08009000:\n          return (input1 ^ input2) & 0x80000000;\n        }\n        goto LAB_0800904a;\n      }\n      condition1 = (input1 & 0x7fffffff) == 0;\n      if (!condition1) {\n        condition1 = (input2 & 0x7fffffff) == 0;\n      }\n      if (!condition1) {\n        condition1 = temp2 == 0;\n        result = input1 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input1 = input1 << 1;\n            condition1 = (input1 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          temp2 = temp2 - 1;\n        }\n        input1 = input1 | result;\n        condition1 = param4 == 0;\n        result = input2 & 0x80000000;\n        while( true ) {\n          if (condition1) {\n            input2 = input2 << 1;\n            condition1 = (input2 & 0x800000) == 0;\n          }\n          if (!condition1) break;\n          param4 = param4 - 1;\n        }\n        input2 = input2 | result;\n        goto LAB_0800906c;\n      }\n      if ((input1 & 0x7fffffff) == 0) {\n        if ((input2 & 0x7fffffff) != 0) goto LAB_08009000;\n        goto LAB_0800904a;\n      }\n    }\n    input1 = input1 ^ input2;\n  }\n  else {\nLAB_0800906c:\n    difference = temp2 - param4;\n    if (input2 << 9 == 0) {\n      input1 = (input1 ^ input2) & 0x80000000 | input1 & 0x7fffff;\n      condition3 = signed_carry(difference,0x7f);\n      sum = difference + 0x7f;\n      condition1 = sum < 0;\n      condition2 = sum == 0;\n      if (!condition2 && condition1 == condition3) {\n        condition3 = signed_borrow(0xff,sum);\n        condition1 = 0xff - sum < 0;\n        condition2 = sum == 0xff;\n      }\n      if (!condition2 && condition1 == condition3) {\n        input1 = input1 | sum * 0x800000;\n      }\n      if (!condition2 && condition1 == condition3) {\n        return input1;\n      }\n      input1 = input1 | 0x800000;\n      temp2 = 0;\n      condition2 = signed_borrow(sum,1);\n      shift_amount = difference + 0x7e;\n      condition1 = shift_amount == 0;\n      result = shift_amount;\n    }\n    else {\n      temp1 = (input2 << 9) >> 4 | 0x10000000;\n      temp2 = (input1 << 9) >> 4 | 0x10000000;\n      input1 = (input1 ^ input2) & 0x80000000;\n      condition1 = temp1 <= temp2;\n      if (!condition1) {\n        temp2 = temp2 << 1;\n      }\n      shift_amount = difference + 0x7d + (uint)condition1;\n      result = 0x800000;\n      do {\n        if (temp1 <= temp2) {\n          temp2 = temp2 - temp1;\n          input1 = input1 | result;\n        }\n        condition1 = temp1 >> 1 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 1);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 1;\n        }\n        condition1 = temp1 >> 2 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 2);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 2;\n        }\n        condition1 = temp1 >> 3 <= temp2;\n        if (condition1) {\n          temp2 = temp2 - (temp1 >> 3);\n        }\n        if (condition1) {\n          input1 = input1 | result >> 3;\n        }\n        temp2 = temp2 * 0x10;\n        condition1 = temp2 == 0;\n        if (!condition1) {\n          result = result >> 4;\n          condition1 = result == 0;\n        }\n      } while (!condition1);\n      condition2 = signed_borrow(shift_amount,0xfd);\n      condition1 = shift_amount == 0xfd;\n      result = shift_amount - 0xfd;\n      if (shift_amount < 0xfe) {\n        input1 = input1 + shift_amount * 0x800000 + (uint)(temp1 <= temp2);\n        if (temp2 - temp1 == 0) {\n          input1 = input1 & 0xfffffffe;\n        }\n        return input1;\n      }\n    }\n    if (condition1 || (int)result < 0 != condition2) {\n      condition1 = (int)(shift_amount + 0x19) < 0;\n      if (shift_amount == 0xffffffe7 || condition1 != signed_carry(shift_amount,0x19)) {\n        input1 = input1 & 0x80000000;\n      }\n      if (shift_amount == 0xffffffe7 || condition1 != signed_carry(shift_amount,0x19)) {\n        return input1;\n      }\n      result = (input1 << 1) >> (-shift_amount & 0xff);\n      shift_amount = input1 << (shift_amount + 0x20 & 0xff);\n      result = ((uint)((input1 & 0x80000000) != 0) << 0x1f | result >> 1) + (uint)((byte)result & 1);\n      if ((temp2 | shift_amount << 1) == 0) {\n        result = result & ~(shift_amount >> 0x1f);\n      }\n      return result;\n    }\n  }\n  return input1 & 0x80000000 | 0x7f800000;\n}\n\n",
            "current_name": "float_to_fixed_point_conversion_08009054",
            "entrypoint": "0x08009054",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009054": "float_to_fixed_point_conversion_08009054",
                "SBORROW4": "signed_borrow",
                "SCARRY4": "signed_carry",
                "bVar7": "condition1",
                "bVar8": "condition2",
                "bVar9": "condition3",
                "iVar3": "difference",
                "iVar5": "sum",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar1": "temp1",
                "uVar2": "temp2",
                "uVar4": "shift_amount",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800919c": {
            "additional_data": {
                "FUN_0800919c": {
                    "calculate_absolute_difference": 1,
                    "calculate_flags": 1,
                    "calculate_param_with_conditions": 1,
                    "calculate_result": 11,
                    "calculate_resultant_bitwise_or": 1,
                    "check_integer_sign_and_compare": 1,
                    "check_overflow": 4,
                    "check_overflow_and_sign": 4,
                    "check_param": 1,
                    "determine_sign_and_magnitude": 1,
                    "multiply_and_check": 1,
                    "multiply_and_compare": 1,
                    "perform_comparison": 1,
                    "validate_and_transform": 1,
                    "validate_inputs": 1
                },
                "bVar1": {
                    "is_combined_less_than_zero": 1,
                    "is_combined_negative": 2,
                    "is_combined_value_negative": 1,
                    "is_less_than_zero": 1,
                    "is_negative": 16,
                    "is_negative_difference": 1,
                    "is_negative_result": 6,
                    "is_negative_xor": 1,
                    "is_overflow": 1,
                    "is_positive": 1
                },
                "bVar5": {
                    "is_bitwise_or_result_zero": 1,
                    "is_combined_zero": 3,
                    "is_result_zero": 3,
                    "is_xor_result_zero": 1,
                    "is_zero": 19,
                    "is_zero_difference": 1,
                    "is_zero_result": 3
                },
                "param_1": {
                    "a": 1,
                    "first_number": 1,
                    "input1": 3,
                    "input_1": 17,
                    "input_param_1": 1,
                    "input_value_1": 2,
                    "num1": 1,
                    "number1": 2,
                    "output": 1,
                    "result": 1,
                    "return_value": 1
                },
                "param_2": {
                    "b": 1,
                    "input2": 4,
                    "input_2": 18,
                    "input_param_2": 1,
                    "input_value_2": 2,
                    "num2": 1,
                    "number2": 2,
                    "second_number": 1,
                    "value2": 1
                },
                "return": {
                    "result": 1
                },
                "uVar2": {
                    "a_times_two": 1,
                    "calculated_input_1": 1,
                    "double_input1": 3,
                    "double_input_1": 5,
                    "doubled_input1": 1,
                    "doubled_input_1": 2,
                    "first_number_times_two": 1,
                    "input_1_double": 1,
                    "input_1_doubled": 1,
                    "input_1_times_2": 5,
                    "input_1_times_two": 1,
                    "mul_input_value_1": 1,
                    "multiplied_input_1": 2,
                    "num1_doubled": 1,
                    "number1_multiplied_by_2": 1,
                    "number1_shifted_left": 1,
                    "param_1_times_two": 1,
                    "transformed_input_1": 1,
                    "value1_times2": 1
                },
                "uVar3": {
                    "b_times_two": 1,
                    "calculated_input_2": 1,
                    "double_input2": 3,
                    "double_input_2": 5,
                    "doubled_input2": 1,
                    "doubled_input_2": 2,
                    "input_2_double": 1,
                    "input_2_doubled": 1,
                    "input_2_times_2": 5,
                    "input_2_times_two": 1,
                    "mul_input_value_2": 1,
                    "multiplied_input_2": 2,
                    "num2_doubled": 1,
                    "number2_multiplied_by_2": 1,
                    "number2_shifted_left": 1,
                    "param_2_times_two": 1,
                    "second_number_times_two": 1,
                    "transformed_input_2": 1,
                    "value2_times2": 1
                },
                "uVar4": {
                    "bitwise_or_result": 3,
                    "combined_input": 6,
                    "combined_input_masked": 1,
                    "combined_inputs": 12,
                    "combined_num": 1,
                    "combined_values": 2,
                    "merged_inputs": 1,
                    "modified_result": 1,
                    "result": 2,
                    "result_combine": 1,
                    "result_or_operand": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08009204"
            ],
            "code": "\nuint calculate_result_0800919c(uint input_1,uint input_2)\n\n{\n  bool is_negative;\n  uint input_1_times_2;\n  uint input_2_times_2;\n  uint combined_inputs;\n  bool is_zero;\n  \n  input_1_times_2 = input_1 * 2;\n  input_2_times_2 = input_2 * 2;\n  if (((int)input_1_times_2 >> 0x18 == -1 || (int)input_2_times_2 >> 0x18 == -1) &&\n     ((((int)input_1_times_2 >> 0x18 == -1 && ((input_1 & 0x7fffff) != 0)) ||\n      (((int)input_2_times_2 >> 0x18 == -1 && ((input_2 & 0x7fffff) != 0)))))) {\n    result 1;\n  }\n  combined_inputs = input_1_times_2 | input_2 & 0x7fffffff;\n  is_zero = combined_inputs == 0;\n  if (!is_zero) {\n    combined_inputs = input_1 ^ input_2;\n    is_zero = combined_inputs == 0;\n  }\n  is_negative = -1 < (int)combined_inputs;\n  if (is_negative) {\n    input_1 = input_1_times_2 + input_2 * -2;\n    is_zero = input_1 == 0;\n  }\n  if ((is_negative && input_2_times_2 <= input_1_times_2) && !is_zero) {\n    input_1 = (int)input_2 >> 0x1f;\n  }\n  if (!is_negative || input_2_times_2 > input_1_times_2) {\n    input_1 = ~((int)input_2 >> 0x1f);\n  }\n  if (!is_zero) {\n    input_1 = input_1 | 1;\n  }\n  result input_1;\n}\n\n",
            "current_name": "calculate_result_0800919c",
            "entrypoint": "0x0800919c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800919c": "calculate_result_0800919c",
                "bVar1": "is_negative",
                "bVar5": "is_zero",
                "param_1": "input_1",
                "param_2": "input_2",
                "return": "result",
                "uVar2": "input_1_times_2",
                "uVar3": "input_2_times_2",
                "uVar4": "combined_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080091fc": {
            "additional_data": {
                "FUN_080091fc": {
                    "compare_and_return": 2,
                    "compare_float": 1,
                    "compare_float_parameters": 1,
                    "compare_float_values": 1,
                    "compare_floats": 25,
                    "compare_numbers": 1
                },
                "FUN_08009204": {
                    "check_comparison": 1,
                    "check_values_equality": 1,
                    "compare_floats_equal": 1,
                    "compare_floats_helper": 3,
                    "compare_values": 1,
                    "convert_floats_to_long": 1,
                    "convert_to_fixed_point": 1,
                    "perform_comparison": 3,
                    "perform_float_comparison": 1,
                    "reverse_comparison": 1,
                    "reverse_floats": 1
                },
                "param_1": {
                    "compare_value1": 1,
                    "first_float": 1,
                    "first_number": 1,
                    "float1": 14,
                    "input1": 1,
                    "value1": 13
                },
                "param_2": {
                    "compare_value2": 1,
                    "float2": 14,
                    "input2": 1,
                    "second_float": 1,
                    "second_number": 1,
                    "value2": 13
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08009250",
                "FUN_08009264"
            ],
            "code": "\nvoid compare_floats_080091fc(undefined4 float1,undefined4 float2)\n\n{\n  __aeabi_cfcmpeq(float2,float1);\n  return;\n}\n\n",
            "current_name": "compare_floats_080091fc",
            "entrypoint": "0x080091fc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080091fc": "compare_floats_080091fc",
                "param_1": "float1",
                "param_2": "float2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009204": {
            "additional_data": {
                "CONCAT44": {
                    "concatenate_ints": 1,
                    "concatenate_values": 2
                },
                "FUN_0800919c": {
                    "": 1,
                    "compare_unsigned_integers": 2,
                    "compare_values": 1,
                    "perform_arithmetic_operation": 1,
                    "perform_comparison": 1
                },
                "FUN_08009204": {
                    "combine_floats": 1,
                    "combine_parameters": 5,
                    "combine_params": 1,
                    "combine_values": 1,
                    "concat_param_to_unsigned_long": 1,
                    "concatenate_and_convert": 1,
                    "concatenate_integers": 1,
                    "concatenate_parameters": 6,
                    "concatenate_params": 13,
                    "concatenate_values": 1
                },
                "__cmpsf2": {
                    "": 1,
                    "compare_floats": 4
                },
                "param_1": {
                    "first_param": 8,
                    "first_parameter": 4,
                    "float1": 1,
                    "input1": 7,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "integer1": 1,
                    "operand1": 1,
                    "parameter1": 2,
                    "value1": 5
                },
                "param_2": {
                    "float2": 1,
                    "input2": 7,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "integer2": 1,
                    "operand2": 1,
                    "parameter2": 2,
                    "second_param": 8,
                    "second_parameter": 4,
                    "value2": 5
                }
            },
            "called": [
                "FUN_0800919c"
            ],
            "calling": [
                "FUN_08009228",
                "FUN_080091fc",
                "FUN_0800923c",
                "FUN_08009214"
            ],
            "code": "\nundefined8 concatenate_params_08009204(undefined4 first_param,undefined4 second_param)\n\n{\n  compare_floats();\n  return concatenate_values(second_param,first_param);\n}\n\n",
            "current_name": "concatenate_params_08009204",
            "entrypoint": "0x08009204",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_values",
                "FUN_08009204": "concatenate_params_08009204",
                "__cmpsf2": "compare_floats",
                "param_1": "first_param",
                "param_2": "second_param"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009214": {
            "additional_data": {
                "FUN_08009204": {
                    "compare_floats": 1
                },
                "FUN_08009214": {
                    "check_boolean_value": 1,
                    "check_character": 1,
                    "check_comparison_result": 1,
                    "check_condition": 2,
                    "check_for_nonzero_result": 1,
                    "check_if_not_equal_zero": 1,
                    "check_if_not_null": 1,
                    "check_if_not_zero": 7,
                    "check_if_result_is_true": 1,
                    "check_if_zero": 1,
                    "check_non_zero": 3,
                    "check_nonzero_char": 1,
                    "check_nonzero_character": 1,
                    "check_nonzero_value": 1,
                    "check_result": 1,
                    "check_value_not_zero": 1,
                    "compare_char_not_null": 1,
                    "compare_characters": 1,
                    "is_char_not_null": 2,
                    "is_not_zero": 2
                },
                "__aeabi_cfcmpeq": {
                    "compare_floats": 1
                },
                "in_ZR": {
                    "character": 1,
                    "comparison_result": 1,
                    "condition_result": 1,
                    "flag": 1,
                    "input_char": 8,
                    "input_character": 7,
                    "is_not_zero": 1,
                    "result": 11
                },
                "param_1": {
                    "value1": 1
                },
                "param_2": {
                    "value2": 1
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_080029d8",
                "FUN_08002638"
            ],
            "code": "\nbool check_if_not_equal_zero_08009214(void)\n\n{\n  char result;\n  \n  compare_floats();\n  return result != '\\0';\n}\n\n",
            "current_name": "check_if_not_equal_zero_08009214",
            "entrypoint": "0x08009214",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009214": "check_if_not_equal_zero_08009214",
                "__aeabi_cfcmpeq": "compare_floats",
                "in_ZR": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009228": {
            "additional_data": {
                "FUN_08009204": {
                    "some_function_08009204": 1
                },
                "FUN_08009228": {
                    "check_carry_flag": 1,
                    "check_for_null": 1,
                    "check_for_null_character": 1,
                    "check_if_character_is_empty": 1,
                    "check_if_cy_flag_is_zero": 1,
                    "check_if_cy_is_null": 1,
                    "check_if_cy_zero": 1,
                    "check_if_in_cy_is_null": 1,
                    "check_if_not_equal_zero": 1,
                    "check_if_null": 5,
                    "check_if_null_08009228": 1,
                    "check_if_null_byte": 1,
                    "check_if_result_is_zero": 1,
                    "check_if_string_is_empty": 1,
                    "check_if_zero": 3,
                    "is_cy_null": 3,
                    "is_cy_zero": 3,
                    "is_in_cy_null": 1,
                    "is_null_byte_present": 1,
                    "is_null_character": 2
                },
                "__aeabi_cfcmpeq": {
                    "compare_float_equality": 1,
                    "compare_floats": 1,
                    "compare_input_to_null": 1
                },
                "in_CY": {
                    "carry_flag": 1,
                    "cy_flag": 1,
                    "cy_value": 1,
                    "input_char": 17,
                    "input_character": 7,
                    "input_cy": 3,
                    "input_string": 1
                },
                "param_1": {
                    "arg1": 1,
                    "input_param_1": 1,
                    "param1": 1,
                    "parameter_1": 1
                },
                "param_2": {
                    "arg2": 1,
                    "input_param_2": 1,
                    "param2": 1,
                    "parameter_2": 1
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08004e30",
                "FUN_08002afc",
                "FUN_080005b4",
                "FUN_080029d8",
                "FUN_08003826",
                "FUN_08003004"
            ],
            "code": "\nbool check_if_in_cy_is_null_08009228(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_in_cy_is_null_08009228",
            "entrypoint": "0x08009228",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009228": "check_if_in_cy_is_null_08009228",
                "__aeabi_cfcmpeq": "compare_floats",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800923c": {
            "additional_data": {
                "FUN_08009204": {
                    "perform_comparison": 1
                },
                "FUN_0800923c": {
                    "check_c_fcmpeq": 1,
                    "check_carry_flag_zero": 1,
                    "check_comparison": 1,
                    "check_comparison_result": 3,
                    "check_condition": 3,
                    "check_conditions": 1,
                    "check_conditions_and": 1,
                    "check_equality": 9,
                    "check_equality_and_return_result": 1,
                    "check_equality_or_zero": 1,
                    "check_if_comparisons_are_equal": 1,
                    "check_if_equality_zero": 1,
                    "check_zero_carry_flag": 1,
                    "check_zero_comparison": 2,
                    "compare_floating_point_numbers": 1,
                    "compare_floats": 2,
                    "compare_less_than_or_equal": 1
                },
                "__aeabi_cfcmpeq": {
                    "compare_floats": 1
                },
                "in_CY": {
                    "carry": 3,
                    "carry_flag": 11,
                    "carry_result": 2,
                    "is_carry": 2,
                    "is_carry_flag": 2,
                    "is_carry_result": 1,
                    "is_carry_set": 2,
                    "is_equal": 1,
                    "is_zero": 1,
                    "result_is_carry": 1,
                    "zero_flag": 1
                },
                "in_ZR": {
                    "carry_flag": 1,
                    "is_equal": 1,
                    "is_zero": 6,
                    "is_zero_flag": 1,
                    "is_zero_result": 4,
                    "result_is_zero": 1,
                    "zero_flag": 8,
                    "zero_result": 5
                },
                "param_1": {
                    "comparison_result_1": 1,
                    "input1": 1,
                    "input_1": 1,
                    "input_param1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "comparison_result_2": 1,
                    "input2": 1,
                    "input_2": 1,
                    "input_param2": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_08009204"
            ],
            "calling": [
                "FUN_08004e30",
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "code": "\nbool check_equality_or_zero_0800923c(void)\n\n{\n  undefined zero_flag;\n  undefined carry_flag;\n  \n  compare_floats();\n  return !(bool)carry_flag || (bool)zero_flag;\n}\n\n",
            "current_name": "check_equality_or_zero_0800923c",
            "entrypoint": "0x0800923c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800923c": "check_equality_or_zero_0800923c",
                "__aeabi_cfcmpeq": "compare_floats",
                "in_CY": "carry_flag",
                "in_ZR": "zero_flag"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009250": {
            "additional_data": {
                "FUN_080091fc": {
                    "process_data": 1
                },
                "FUN_08009250": {
                    "check_carry_or_zero": 1,
                    "check_comparison_result": 2,
                    "check_condition": 9,
                    "check_condition_and_return": 2,
                    "check_conditions": 4,
                    "check_if_both_flags_set": 1,
                    "check_if_less_or_equal": 1,
                    "check_if_less_than_or_equal_to": 1,
                    "check_less_or_equal": 1,
                    "check_logical_conditions": 1,
                    "check_order": 1,
                    "check_order_of_values": 1,
                    "check_zero_flag": 1,
                    "check_zero_flags": 1,
                    "check_zero_or_less": 1,
                    "is_any_value_less_or_equal": 1,
                    "is_infinite_or_zero": 1,
                    "is_not_positive": 1
                },
                "in_CY": {
                    "carry": 4,
                    "carry_flag": 6,
                    "carry_result": 1,
                    "is_carry": 9,
                    "is_carry_flag": 1,
                    "is_carry_result": 2,
                    "is_infinite": 1
                },
                "in_ZR": {
                    "is_zero": 11,
                    "is_zero_flag": 1,
                    "is_zero_result": 5,
                    "zero": 1,
                    "zero_flag": 4,
                    "zero_result": 2
                },
                "param_1": {
                    "arg1": 2,
                    "first_param": 2,
                    "flag1": 1,
                    "param1": 1,
                    "unknown_value_1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "arg2": 2,
                    "flag2": 1,
                    "param2": 1,
                    "second_param": 2,
                    "unknown_value_2": 1,
                    "value_2": 1
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_08003004"
            ],
            "code": "\nbool check_condition_and_return_08009250(void)\n\n{\n  undefined is_zero;\n  undefined is_carry;\n  \n  __aeabi_cfrcmple();\n  return !(bool)is_carry || (bool)is_zero;\n}\n\n",
            "current_name": "check_condition_and_return_08009250",
            "entrypoint": "0x08009250",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009250": "check_condition_and_return_08009250",
                "in_CY": "is_carry",
                "in_ZR": "is_zero"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009264": {
            "additional_data": {
                "FUN_080091fc": {
                    "update_values": 1
                },
                "FUN_08009264": {
                    "check_if_empty": 1,
                    "check_if_null": 8,
                    "check_if_string_empty": 3,
                    "check_if_zero": 1,
                    "check_null_character": 1,
                    "is_char_null": 1,
                    "is_cy_null": 3,
                    "is_cy_zero": 1,
                    "is_input_null": 1,
                    "is_null": 1,
                    "is_null_byte_present": 1,
                    "is_null_char": 1,
                    "is_null_character": 4,
                    "is_null_terminated": 1,
                    "is_string_empty": 1,
                    "is_zero": 1,
                    "is_zero_character": 1
                },
                "__aeabi_cfrcmple": {
                    "compare_floats": 1
                },
                "in_CY": {
                    "cy": 2,
                    "cy_value": 1,
                    "input_char": 14,
                    "input_character": 14
                }
            },
            "called": [
                "FUN_080091fc"
            ],
            "calling": [
                "FUN_080029d8",
                "FUN_08003004"
            ],
            "code": "\nbool check_if_null_08009264(void)\n\n{\n  char input_char;\n  \n  compare_floats();\n  return input_char == '\\0';\n}\n\n",
            "current_name": "check_if_null_08009264",
            "entrypoint": "0x08009264",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009264": "check_if_null_08009264",
                "__aeabi_cfrcmple": "compare_floats",
                "in_CY": "input_char"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009278": {
            "additional_data": {
                "FUN_08009278": {
                    "convert_integer_to_float": 1,
                    "convert_to_fixed_point": 1,
                    "convert_to_integer": 3,
                    "convert_to_positive_int": 2,
                    "convert_to_signed_integer": 4,
                    "convert_to_twos_complement": 1,
                    "convert_unsigned_to_signed": 1,
                    "decode_function": 1,
                    "decode_integer": 3,
                    "decode_signed_integer": 1,
                    "extract_and_convert_value": 1,
                    "extract_bits": 1,
                    "extract_integer": 2,
                    "extract_integer_from_binary": 1,
                    "extract_integer_from_parameter": 1,
                    "extract_signed_integer": 1,
                    "get_shifted_value": 1,
                    "reverse_conversion": 1,
                    "reverse_number": 1,
                    "reverse_transform": 1,
                    "unsigned_to_signed_integer": 1
                },
                "param_1": {
                    "binary_value": 1,
                    "clamped_value": 1,
                    "input": 7,
                    "input_integer": 1,
                    "input_number": 1,
                    "input_value": 15,
                    "masked_input": 1,
                    "max_value": 1,
                    "unsigned_number": 1,
                    "unsigned_value": 1,
                    "value": 1
                },
                "param_1Modified": {
                    "input_modified": 1
                },
                "uVar1": {
                    "converted_value": 2,
                    "result": 3,
                    "shifted": 1,
                    "shifted_bits": 1,
                    "shifted_input": 6,
                    "shifted_input_number": 1,
                    "shifted_input_value": 1,
                    "shifted_number": 1,
                    "shifted_result": 1,
                    "shifted_value": 14
                },
                "uVar1Modified": {
                    "shifted_modified": 1
                },
                "uVar2": {
                    "adjusted_value": 1,
                    "diff": 1,
                    "difference": 16,
                    "mask": 1,
                    "mask_value": 1,
                    "offset": 3,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "shift_difference": 1,
                    "shifted_threshold": 1,
                    "shifted_value_difference": 1,
                    "temp": 1
                },
                "uVar3": {
                    "adjusted_input": 1,
                    "divisor": 1,
                    "result": 2,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shifted_input": 1,
                    "shifted_output": 1,
                    "shifted_unsigned_value": 1,
                    "shifted_value": 1
                },
                "uVar4": {
                    "negated_result": 1,
                    "result": 2,
                    "shifted_result": 1,
                    "shifted_value_negative": 1,
                    "sign_extended": 1,
                    "signed_result": 1,
                    "signed_value": 1
                },
                "uVar5": {
                    "final_value": 1,
                    "is_negative": 1,
                    "mask": 1,
                    "shifted_result": 1
                },
                "uVar6": {
                    "masked_input": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08003b98",
                "FUN_08003826"
            ],
            "code": "\nuint convert_to_signed_integer_08009278(uint input_value)\n\n{\n  uint shifted_value;\n  uint difference;\n  \n  if (input_value << 1 < 0x7f000000) {\n    return 0;\n  }\n  shifted_value = (input_value << 1) >> 0x18;\n  difference = 0x9e - shifted_value;\n  if (shifted_value < 0x9f && difference != 0) {\n    shifted_value = (input_value << 8 | 0x80000000) >> (difference & 0xff);\n    if ((input_value & 0x80000000) != 0) {\n      shifted_value = -shifted_value;\n    }\n    return shifted_value;\n  }\n  if ((difference == 0xffffff9f) && ((input_value & 0x7fffff) != 0)) {\n    return 0;\n  }\n  input_value = input_value & 0x80000000;\n  if (input_value == 0) {\n    input_value = 0x7fffffff;\n  }\n  return input_value;\n}\n\n",
            "current_name": "convert_to_signed_integer_08009278",
            "entrypoint": "0x08009278",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009278": "convert_to_signed_integer_08009278",
                "param_1": "input_value",
                "uVar1": "shifted_value",
                "uVar2": "difference"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080092c4": {
            "additional_data": {
                "FUN_08007540": {
                    "get_initial_value": 1,
                    "initialize_memory": 1
                },
                "FUN_0800756c": {
                    "clear_data": 1,
                    "initialize_array": 1
                },
                "FUN_080092c4": {
                    "initialize_application": 1,
                    "initialize_memory": 1,
                    "initialize_memory_and_execute": 1,
                    "initialize_program": 3,
                    "initialize_system": 25
                },
                "FUN_0800b3e8": {
                    "copy_data": 1,
                    "copy_data_to_memory": 1
                },
                "UNRECOVERED_JUMPTABLE": {
                    "jmp_table": 3,
                    "jump_table": 22,
                    "jumptable": 3,
                    "unknown_jump_table": 1
                },
                "iVar1": {
                    "count": 1,
                    "counter": 2,
                    "i": 2,
                    "index": 20,
                    "iteration": 1,
                    "iterator": 1,
                    "offset": 2
                },
                "puVar2": {
                    "array_pointer": 1,
                    "current_pointer": 1,
                    "data_array_pointer": 1,
                    "data_pointer": 4,
                    "data_ptr": 1,
                    "p": 1,
                    "pointer": 4,
                    "ptr": 15,
                    "ptr_data": 1
                }
            },
            "called": [
                "FUN_0800b3e8",
                "FUN_08007540",
                "FUN_0800756c"
            ],
            "calling": [],
            "code": "\n/* WARNING: This function may have set the stack pointer */\n\nvoid initialize_system_080092c4(void)\n\n{\n  int index;\n  undefined4 *ptr;\n  code *jump_table;\n  \n  for (index = 0; (undefined4 *)(index + 0x20000000) < &DAT_2000044c; index = index + 4) {\n    *(undefined4 *)(index + 0x20000000) = *(undefined4 *)(index + 0x800c0c0);\n  }\n  for (ptr = &DAT_2000044c; ptr < &DAT_20000f20; ptr = ptr + 1) {\n    *ptr = 0;\n  }\n  SystemInit();\n  __libc_init_array();\n  jump_table = (code *)0x80092fa;\n  main();\n                    /* WARNING: Could not recover jumptable at 0x080092fa. Too many branches */\n                    /* WARNING: Treating indirect jump as call */\n  (*jump_table)();\n  return;\n}\n\n",
            "current_name": "initialize_system_080092c4",
            "entrypoint": "0x080092c4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080092c4": "initialize_system_080092c4",
                "UNRECOVERED_JUMPTABLE": "jump_table",
                "iVar1": "index",
                "puVar2": "ptr"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009318": {
            "additional_data": {
                "FUN_08009318": {
                    "binary_to_double": 1,
                    "calculate_double": 2,
                    "calculate_double_precision_number": 2,
                    "calculate_double_value": 1,
                    "calculate_exponent": 1,
                    "calculate_floating_point": 10,
                    "calculate_floating_point_mask": 1,
                    "calculate_floating_point_number": 2,
                    "calculate_floating_point_value": 6,
                    "compute_floating_point": 1,
                    "convert_floating_point_to_integer": 1,
                    "convert_floating_point_to_long_long": 1,
                    "convert_to_double": 2
                },
                "bVar4": {
                    "carry": 3,
                    "carry_flag": 27,
                    "carry_overflow": 1
                },
                "iVar1": {
                    "comparison": 1,
                    "comparison_result": 29
                },
                "lVar6": {
                    "computed_value": 1,
                    "converted_integer": 1,
                    "converted_value": 1,
                    "double_value": 1,
                    "final_result": 9,
                    "final_value": 2,
                    "floating_point_value": 1,
                    "output": 1,
                    "result": 10,
                    "return_value": 3
                },
                "param_1": {
                    "exponent": 1,
                    "first_input": 1,
                    "floating_point_param": 1,
                    "input1": 11,
                    "input_1": 2,
                    "input_a": 1,
                    "input_value1": 1,
                    "input_value_1": 1,
                    "integer_part": 2,
                    "mantissa": 2,
                    "num1": 3,
                    "number1": 3,
                    "numerator": 1,
                    "value1": 1
                },
                "param_2": {
                    "denominator": 1,
                    "exponent": 2,
                    "fractional_bits": 1,
                    "fractional_part": 2,
                    "input2": 11,
                    "input_2": 2,
                    "input_b": 1,
                    "input_value2": 1,
                    "input_value_2": 1,
                    "mantissa": 1,
                    "num2": 3,
                    "number2": 3,
                    "second_input": 1,
                    "value2": 1
                },
                "param_3": {
                    "constant_1": 2,
                    "input3": 1,
                    "param3": 18,
                    "param_3": 3,
                    "unused1": 1,
                    "unused_param": 1,
                    "unused_param1": 4
                },
                "param_4": {
                    "constant_2": 2,
                    "input4": 1,
                    "param4": 18,
                    "param_4": 3,
                    "unused2": 1,
                    "unused_param2": 5
                },
                "uVar2": {
                    "bit_shift_diff": 1,
                    "difference": 4,
                    "exponent": 5,
                    "exponent_diff": 4,
                    "exponent_difference": 5,
                    "num_shift": 1,
                    "shift_amount": 4,
                    "shifted_bits": 3,
                    "shifted_difference": 2,
                    "shifted_value": 2
                },
                "uVar3": {
                    "bit_mask": 5,
                    "exponent": 1,
                    "mask": 13,
                    "shift_amount": 5,
                    "shifted_bits": 2,
                    "shifted_exponent": 2,
                    "shifted_fraction": 1,
                    "shifted_input2": 1,
                    "shifted_mask": 1
                },
                "uVar5": {
                    "addition_result": 2,
                    "result": 15,
                    "result_value": 1,
                    "sum": 4,
                    "sum_result": 5,
                    "temp_result": 4
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08002c18",
                "FUN_08001994",
                "FUN_08003004"
            ],
            "code": "\nlonglong calculate_floating_point_value_08009318(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int comparison_result;\n  uint exponent_difference;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong result;\n  \n  mask = (input2 << 1) >> 0x15;\n  exponent_difference = mask - 0x3ff;\n  if ((int)exponent_difference < 0x14) {\n    if ((int)exponent_difference < 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparison_result != 0) {\n        if ((int)input2 < 0) {\n          result = -0x8000000000000000;\n        }\n        else if ((input1 | input2) == 0) {\n          result = 0;\n        }\n        else {\n          result = 0x3ff0000000000000;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (exponent_difference & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n        comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        result = CONCAT44(input2,input1);\n        if (comparison_result != 0) {\n          if (0 < (int)input2) {\n            input2 = input2 + (0x100000 >> (exponent_difference & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)exponent_difference < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparison_result != 0) {\n        if (0 < (int)input2) {\n          if (exponent_difference == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            exponent_difference = 1 << (0x34 - exponent_difference & 0xff);\n            carry_flag = CARRY4(exponent_difference,input1);\n            input1 = exponent_difference + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (exponent_difference == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_floating_point_value_08009318",
            "entrypoint": "0x08009318",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009318": "calculate_floating_point_value_08009318",
                "bVar4": "carry_flag",
                "iVar1": "comparison_result",
                "lVar6": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "exponent_difference",
                "uVar3": "mask",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009410": {
            "additional_data": {
                "FUN_080082d0": {
                    "calculate_sub_function3": 1
                },
                "FUN_08009410": {
                    "calculate_trig_function": 2,
                    "calculate_trig_value": 2,
                    "calculate_trigonometric": 2,
                    "calculate_trigonometric_func": 1,
                    "calculate_trigonometric_function": 2,
                    "calculate_trigonometric_value": 18,
                    "compute_trigonometric": 1,
                    "compute_trigonometric_function": 1,
                    "compute_trigonometric_value": 1
                },
                "FUN_08009d78": {
                    "calculate_sub_function1": 1
                },
                "FUN_0800a348": {
                    "calculate_sub_function2": 1
                },
                "FUN_0800adf0": {
                    "calculate_sub_function4": 1
                },
                "__ieee754_rem_pio2": {
                    "calculate_remainder_of_angle": 1,
                    "compute_remainder": 1
                },
                "__kernel_cos": {
                    "calculate_cos": 1,
                    "compute_cos": 1
                },
                "__kernel_sin": {
                    "calculate_sin": 1,
                    "compute_sin": 1
                },
                "__subdf3": {
                    "calculate_difference": 1,
                    "subtract_double": 1
                },
                "local_20": {
                    "arg2": 1,
                    "arg3": 1,
                    "cos_input_value": 1,
                    "extra_variable2": 1,
                    "local_20": 1,
                    "local_val": 1,
                    "output_arg3": 1,
                    "quo3": 1,
                    "remainder_3": 2,
                    "sin_cos_input": 1,
                    "sin_temp2": 1,
                    "stack_2": 3,
                    "stack_value_2": 1,
                    "temp_2": 5,
                    "temp_value_1": 1,
                    "temp_value_2": 1,
                    "temp_var2": 2,
                    "temp_variable_2": 2,
                    "tmp": 1,
                    "tmp_var_1": 1,
                    "unused_variable2": 1,
                    "z": 1
                },
                "local_28": {
                    "angle": 5,
                    "arg1": 1,
                    "integer_part": 1,
                    "output_arg1": 1,
                    "quadrant": 3,
                    "quo1": 1,
                    "quotient": 1,
                    "rem_pio2_result": 2,
                    "rem_pio2_storage1": 1,
                    "rem_pio2_temp": 1,
                    "rem_pio2_value": 2,
                    "remainder": 8,
                    "remainder_1": 2,
                    "theta": 1,
                    "x": 1
                },
                "param_1": {
                    "angle": 7,
                    "angle_in_radians": 2,
                    "input_angle": 6,
                    "input_arg1": 1,
                    "input_number": 1,
                    "input_param1": 1,
                    "input_val_1": 1,
                    "input_value": 8,
                    "param_1": 1,
                    "value": 1,
                    "value_type": 1,
                    "x": 1
                },
                "param_2": {
                    "angle_bits": 2,
                    "bitmask": 1,
                    "flag": 1,
                    "flag_bits": 1,
                    "flags": 9,
                    "floating_point_value": 1,
                    "input": 2,
                    "input_angle_bits": 1,
                    "input_arg2": 1,
                    "input_bitmask": 1,
                    "input_flag": 1,
                    "input_flags": 2,
                    "input_mask": 3,
                    "input_param2": 1,
                    "input_val_2": 1,
                    "mode": 1,
                    "param_2": 1,
                    "value": 1
                },
                "param_3": {
                    "sub_function_parameter_1": 1
                },
                "param_4": {
                    "sub_function_parameter_2": 1
                },
                "param_5": {
                    "sub_function_parameter_3": 1
                },
                "uStack_1c": {
                    "arg3": 1,
                    "arg4": 1,
                    "extra_variable3": 1,
                    "output_arg4": 1,
                    "param_5": 1,
                    "quo4": 1,
                    "remainder_4": 2,
                    "sin_input": 1,
                    "sin_temp3": 1,
                    "stack_3": 3,
                    "stack_val_2": 1,
                    "stack_value_3": 1,
                    "stack_var_2": 1,
                    "temp_3": 5,
                    "temp_stack_2": 1,
                    "temp_value_3": 1,
                    "temp_var3": 2,
                    "temp_variable_3": 2,
                    "tmp2": 1,
                    "u_stack_1c": 1,
                    "unused_variable3": 1,
                    "w": 1
                },
                "uStack_24": {
                    "arg1": 1,
                    "arg2": 1,
                    "cos_input": 1,
                    "extra_variable1": 1,
                    "output_arg2": 1,
                    "quadrant_tmp": 1,
                    "quo2": 1,
                    "rem_pio2_storage2": 1,
                    "remainder_2": 2,
                    "sin_temp1": 1,
                    "stack_1": 3,
                    "stack_val_1": 1,
                    "stack_value_1": 1,
                    "stack_var_1": 1,
                    "temp_1": 5,
                    "temp_stack_1": 1,
                    "temp_value_1": 1,
                    "temp_var1": 2,
                    "temp_variable": 2,
                    "u_stack_24": 1,
                    "unused_variable1": 1,
                    "y": 1
                },
                "uVar1": {
                    "result": 30,
                    "result_value": 1
                },
                "uVar2": {
                    "angle_quadrant": 3,
                    "conditional_flag": 1,
                    "quadrant": 5,
                    "rem_pio2_flags": 1,
                    "rem_pio2_result": 4,
                    "rem_result": 1,
                    "remainder": 11,
                    "remainder_flags": 3,
                    "reminders": 1,
                    "temp": 1
                }
            },
            "called": [
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0",
                "FUN_0800adf0"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 calculate_trigonometric_value_08009410(undefined4 input_value,uint flags)\n\n{\n  undefined4 result;\n  uint remainder;\n  undefined4 remainder;\n  undefined4 temp_1;\n  undefined4 temp_2;\n  undefined4 temp_3;\n  \n  if (0x3fe921fb < (flags & 0x7fffffff)) {\n    if ((flags & 0x7fffffff) < 0x7ff00000) {\n      remainder = calculate_remainder_of_angle(input_value,flags,&remainder);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = calculate_sin(remainder,temp_1,temp_2,temp_3,1);\n      }\n      else if (remainder == 2) {\n        result = compute_cos(remainder,temp_1,temp_2,temp_3);\n      }\n      else if (remainder == 0) {\n        result = compute_cos(remainder,temp_1,temp_2,temp_3);\n      }\n      else {\n        result = calculate_sin(remainder,temp_1,temp_2,temp_3,1);\n      }\n    }\n    else {\n      result = subtract_double(input_value,flags,input_value,flags);\n    }\n    return result;\n  }\n  result = compute_cos(input_value,flags,0,0);\n  return result;\n}\n\n",
            "current_name": "calculate_trigonometric_value_08009410",
            "entrypoint": "0x08009410",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009410": "calculate_trigonometric_value_08009410",
                "__ieee754_rem_pio2": "calculate_remainder_of_angle",
                "__kernel_cos": "compute_cos",
                "__kernel_sin": "calculate_sin",
                "__subdf3": "subtract_double",
                "local_20": "temp_2",
                "local_28": "remainder",
                "param_1": "input_value",
                "param_2": "flags",
                "uStack_1c": "temp_3",
                "uStack_24": "temp_1",
                "uVar1": "result",
                "uVar2": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080094c0": {
            "additional_data": {
                "FUNC_080082d4": {
                    "perform_addition": 1
                },
                "FUNC_08008b60": {
                    "is_zero": 1
                },
                "FUN_080094c0": {
                    "calculate_double": 7,
                    "calculate_double_precision": 2,
                    "calculate_double_value": 2,
                    "calculate_exponent": 1,
                    "calculate_floating_point": 4,
                    "calculate_floating_point_value": 5,
                    "calculate_product_division": 1,
                    "calculate_scaled_value": 1,
                    "calculate_sqrt": 1,
                    "convert_to_double_precision": 1,
                    "extracted_binary_function": 1,
                    "perform_calculation": 1,
                    "process_input": 1,
                    "process_number": 1
                },
                "bVar4": {
                    "carry": 8,
                    "carry_flag": 22,
                    "is_carry_overflow": 1
                },
                "iVar1": {
                    "comparison": 6,
                    "comparison_result": 23
                },
                "lVar6": {
                    "combined_result": 1,
                    "combined_value": 2,
                    "concatenated_result": 1,
                    "final_result": 5,
                    "final_value": 2,
                    "floating_point_result": 1,
                    "floating_point_value": 1,
                    "output": 3,
                    "output_value": 2,
                    "result": 10,
                    "result64": 1,
                    "result_value": 1,
                    "return_value": 1
                },
                "param_1": {
                    "dividend": 1,
                    "exponent": 1,
                    "input1": 11,
                    "input_1": 1,
                    "input_value": 1,
                    "input_value1": 2,
                    "input_value_1": 2,
                    "integer_part": 1,
                    "mantissa": 4,
                    "num1": 2,
                    "numerator": 1,
                    "value1": 3,
                    "value_1": 1
                },
                "param_2": {
                    "denominator": 1,
                    "divisor": 1,
                    "exponent": 4,
                    "fractional_part": 1,
                    "input2": 11,
                    "input_2": 1,
                    "input_value2": 2,
                    "input_value_2": 2,
                    "mantissa": 1,
                    "num2": 2,
                    "shift_amt": 1,
                    "value2": 3,
                    "value_2": 1
                },
                "param_3": {
                    "input3": 3,
                    "input_param_3": 1,
                    "op_param_3": 1,
                    "param1": 1,
                    "param3": 10,
                    "param_3": 5,
                    "unknown_1": 1,
                    "unused": 1,
                    "unused1": 1,
                    "unused_param1": 3,
                    "unused_param3": 1,
                    "unused_param_1": 1,
                    "var1": 1
                },
                "param_4": {
                    "input4": 3,
                    "input_param_4": 1,
                    "op_param_4": 1,
                    "param2": 1,
                    "param4": 10,
                    "param_4": 5,
                    "unknown_2": 1,
                    "unused": 1,
                    "unused2": 1,
                    "unused_param2": 3,
                    "unused_param4": 1,
                    "unused_param_2": 1,
                    "var2": 1
                },
                "uVar2": {
                    "adjusted_shift_amount": 1,
                    "diff_from_bias": 1,
                    "diff_from_max_exponent": 1,
                    "difference": 2,
                    "exponent": 2,
                    "exponent_diff": 2,
                    "exponent_difference": 3,
                    "exponent_subtraction": 1,
                    "modified_value1": 1,
                    "shift_amount": 3,
                    "shift_difference": 1,
                    "shifted": 1,
                    "shifted_bits": 3,
                    "shifted_input2": 2,
                    "shifted_val": 2,
                    "shifted_value": 5
                },
                "uVar3": {
                    "bit_mask": 2,
                    "bit_shift": 1,
                    "bit_shift_amt": 1,
                    "bitmask": 2,
                    "mask": 15,
                    "modified_value2": 1,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "shift_val": 1,
                    "shifted_input2": 1,
                    "shifted_input2_mask": 1,
                    "shifted_value": 1,
                    "u_var3": 1
                },
                "uVar5": {
                    "add_result": 1,
                    "added_floats": 1,
                    "added_val": 1,
                    "added_value": 1,
                    "addition_result": 2,
                    "double_result": 1,
                    "result": 15,
                    "sum": 2,
                    "sum_result": 5,
                    "temp_result": 1,
                    "temp_val": 1
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_08002c18",
                "FUN_0800a5a0",
                "FUN_08002408"
            ],
            "code": "\nlonglong calculate_floating_point_value_080094c0(uint input1,uint input2,undefined4 param3,undefined4 param4)\n\n{\n  int comparison_result;\n  uint shifted_value;\n  uint mask;\n  bool carry_flag;\n  undefined8 result;\n  longlong result;\n  \n  mask = (input2 << 1) >> 0x15;\n  shifted_value = mask - 0x3ff;\n  if ((int)shifted_value < 0x14) {\n    if ((int)shifted_value < 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparison_result != 0) {\n        if ((int)input2 < 0) {\n          if ((input1 | input2 & 0x7fffffff) != 0) {\n            input2 = 0xbff00000;\n          }\n          result = (ulonglong)input2 << 0x20;\n        }\n        else {\n          result = 0;\n        }\n      }\n    }\n    else {\n      mask = 0xfffff >> (shifted_value & 0xff);\n      result = CONCAT44(input2,input1);\n      if ((input2 & mask | input1) != 0) {\n        result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n        comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n        result = CONCAT44(input2,input1);\n        if (comparison_result != 0) {\n          if ((int)input2 < 0) {\n            input2 = input2 + (0x100000 >> (shifted_value & 0xff));\n          }\n          result = (ulonglong)(input2 & ~mask) << 0x20;\n        }\n      }\n    }\n  }\n  else if ((int)shifted_value < 0x34) {\n    mask = 0xffffffff >> (mask - 0x413 & 0xff);\n    result = CONCAT44(input2,input1);\n    if ((mask & input1) != 0) {\n      result = __aeabi_dadd(input1,input2,0x8800759c,0x7e37e43c,param4);\n      comparison_result = __aeabi_dcmpgt((int)result,(int)((ulonglong)result >> 0x20),0,0);\n      result = CONCAT44(input2,input1);\n      if (comparison_result != 0) {\n        if ((int)input2 < 0) {\n          if (shifted_value == 0x14) {\n            input2 = input2 + 1;\n          }\n          else {\n            shifted_value = 1 << (0x34 - shifted_value & 0xff);\n            carry_flag = CARRY4(shifted_value,input1);\n            input1 = shifted_value + input1;\n            if (carry_flag != false) {\n              input2 = input2 + 1;\n            }\n          }\n        }\n        result = CONCAT44(input2,input1 & ~mask);\n      }\n    }\n  }\n  else {\n    result = CONCAT44(input2,input1);\n    if (shifted_value == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_floating_point_value_080094c0",
            "entrypoint": "0x080094c0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080094c0": "calculate_floating_point_value_080094c0",
                "bVar4": "carry_flag",
                "iVar1": "comparison_result",
                "lVar6": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "param3",
                "param_4": "param4",
                "uVar2": "shifted_value",
                "uVar3": "mask",
                "uVar5": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080095b8": {
            "additional_data": {
                "CARRY4": {
                    "check_carry": 1
                },
                "FUN_08008ba0": {
                    "bitwise_left_shift": 1
                },
                "FUN_080095b8": {
                    "calculate_multiplication_result": 1,
                    "calculate_product": 23,
                    "calculate_result": 3,
                    "calculate_sine": 1,
                    "perform_calculation": 1,
                    "reverse_binary_operation": 1
                },
                "iVar4": {
                    "sign": 30,
                    "sign_indicator": 1
                },
                "param_1": {
                    "divisor": 1,
                    "input1": 12,
                    "input_1": 5,
                    "input_angle": 1,
                    "input_operand_1": 1,
                    "input_param_1": 1,
                    "input_value": 1,
                    "input_value_1": 1,
                    "input_x": 1,
                    "multiplicand": 1,
                    "multiplier": 3,
                    "num1": 2,
                    "number_1": 1
                },
                "param_2": {
                    "dividend": 1,
                    "input2": 12,
                    "input_2": 5,
                    "input_operand_2": 1,
                    "input_param_2": 1,
                    "input_value_2": 1,
                    "input_y": 1,
                    "multiplicand": 3,
                    "multiplier": 1,
                    "num2": 2,
                    "number_2": 1,
                    "precision": 1,
                    "shift_amount": 1
                },
                "uVar1": {
                    "bit_mask": 1,
                    "bit_shift_value_1": 1,
                    "bitwise_multiplier": 1,
                    "carry": 11,
                    "carry_bit": 1,
                    "carry_mask": 1,
                    "left_shifted": 1,
                    "leftmost_bit_set": 1,
                    "mask": 1,
                    "mask1": 1,
                    "shifted_bit": 2,
                    "shifted_bits": 1,
                    "shifted_input_1": 1,
                    "shifted_product": 1,
                    "shifted_val": 1,
                    "shifted_value": 2,
                    "temp1": 1,
                    "temp_1": 2
                },
                "uVar2": {
                    "bit_position": 1,
                    "bit_shift_amount": 1,
                    "bit_shift_value_2": 1,
                    "bit_shifted_input2": 1,
                    "shift": 1,
                    "shift_amount": 6,
                    "shift_count": 4,
                    "shift_value": 2,
                    "shifted_amount": 1,
                    "shifted_bits": 3,
                    "shifted_count": 1,
                    "shifted_input": 1,
                    "shifted_input2": 1,
                    "shifted_input_2": 2,
                    "shifted_operand_2": 1,
                    "shifted_param2": 1,
                    "shifted_val": 1,
                    "temp_2": 2
                },
                "uVar3": {
                    "modified_dividend": 1,
                    "modified_input_param_2": 1,
                    "result": 28,
                    "temp_3": 1
                },
                "uVar5": {
                    "diff": 4,
                    "difference": 4,
                    "exponent": 16,
                    "shifted_diff": 3,
                    "shifted_difference": 1,
                    "u_var5": 3
                },
                "uVar6": {
                    "mask": 1
                },
                "uVar7": {
                    "extra_bit": 1
                },
                "uVar8": {
                    "shifted_bits": 1
                },
                "uVar9": {
                    "carry1": 1
                }
            },
            "called": [
                "FUN_08008ba0"
            ],
            "calling": [
                "FUN_08001994",
                "FUN_08003004"
            ],
            "code": "\nint calculate_product_080095b8(uint input1,uint input2)\n\n{\n  uint carry;\n  uint shift_amount;\n  uint result;\n  int sign;\n  uint exponent;\n  \n  shift_amount = (input2 << 1) >> 0x15;\n  exponent = shift_amount - 0x3ff;\n  if ((int)input2 < 0) {\n    sign = -1;\n  }\n  else {\n    sign = 1;\n  }\n  result = input2 & 0xfffff | 0x100000;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      if (exponent != 0xffffffff) {\n        sign = 0;\n      }\n      return sign;\n    }\n    result = result + (0x80000 >> (exponent & 0xff)) >> (0x14 - exponent & 0xff);\n  }\n  else {\n    if (0x1e < exponent) {\n      sign = __aeabi_d2iz();\n      return sign;\n    }\n    if ((int)exponent < 0x34) {\n      carry = 0x80000000 >> (shift_amount - 0x413 & 0xff);\n      if (check_carry(carry,input1) != false) {\n        result = result + 1;\n      }\n      result = result << (shift_amount - 0x413 & 0xff);\n      if (exponent != 0x14) {\n        result = result | carry + input1 >> (0x34 - exponent & 0xff);\n      }\n    }\n    else {\n      result = result << (shift_amount - 0x413 & 0xff) | input1 << (shift_amount - 0x433 & 0xff);\n    }\n  }\n  return result * sign;\n}\n\n",
            "current_name": "calculate_product_080095b8",
            "entrypoint": "0x080095b8",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_carry",
                "FUN_080095b8": "calculate_product_080095b8",
                "iVar4": "sign",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "carry",
                "uVar2": "shift_amount",
                "uVar3": "result",
                "uVar5": "exponent"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009654": {
            "additional_data": {
                "0x3ff00000": {
                    "exponent_mask": 1
                },
                "CARRY4": {
                    "check_overflow": 1
                },
                "FUN_080082d4": {
                    "apply_bitwise_operations": 1,
                    "apply_mask": 1,
                    "update_result": 1
                },
                "FUN_08009654": {
                    "calculate_double": 4,
                    "calculate_floating_point": 3,
                    "calculate_floating_point_value": 1,
                    "convert_and_scale": 1,
                    "convert_float_to_double": 3,
                    "convert_float_to_long": 1,
                    "convert_floating_point": 1,
                    "convert_param_to_double": 1,
                    "convert_to_double": 10,
                    "convert_to_float": 2,
                    "convert_to_ieee754_double": 1,
                    "convert_to_long": 1,
                    "decode_and_convert": 1,
                    "process_float": 1
                },
                "lVar3": {
                    "converted_double": 1,
                    "double_number": 1,
                    "double_value": 1,
                    "output_double": 1,
                    "result": 22
                },
                "param_1": {
                    "exponent": 1,
                    "exponent_bits": 1,
                    "first_value": 1,
                    "float_exponent": 1,
                    "float_part": 2,
                    "input1": 4,
                    "input_1": 1,
                    "input_low": 1,
                    "input_lower": 1,
                    "input_sign": 1,
                    "input_value1": 1,
                    "int_value": 1,
                    "integer_param": 1,
                    "integer_part": 8,
                    "mantissa": 2,
                    "number1": 1,
                    "value1": 2,
                    "whole": 1
                },
                "param_2": {
                    "decimal": 1,
                    "exponent": 2,
                    "float_mantissa": 1,
                    "frac_value": 1,
                    "fraction": 1,
                    "fraction_part": 3,
                    "fractional_param": 1,
                    "fractional_part": 5,
                    "input2": 4,
                    "input_2": 1,
                    "input_high": 1,
                    "input_upper": 1,
                    "input_value": 1,
                    "input_value2": 1,
                    "int_part": 2,
                    "mantissa_bits": 1,
                    "number2": 1,
                    "second_value": 1,
                    "value2": 2
                },
                "param_3": {
                    "bitmask1": 1,
                    "mask1": 1
                },
                "param_4": {
                    "bitmask2": 1,
                    "mask2": 1
                },
                "uVar1": {
                    "exp_sub": 1,
                    "exponent": 10,
                    "exponent_diff": 4,
                    "exponent_difference": 3,
                    "shift_amount": 2,
                    "shift_by": 1,
                    "shifted_by_value": 1,
                    "shifted_diff": 1,
                    "shifted_exponent": 1,
                    "temp_1": 1,
                    "upper_diff": 1
                },
                "uVar2": {
                    "carry_bit": 1,
                    "mask": 2,
                    "shift": 1,
                    "shift_amount": 3,
                    "shift_count": 1,
                    "shift_value": 1,
                    "shifted": 2,
                    "shifted_decimal": 1,
                    "shifted_exponent": 6,
                    "shifted_frac": 1,
                    "shifted_fraction": 1,
                    "shifted_fractional_part": 1,
                    "shifted_mantissa": 1,
                    "shifted_upper": 1,
                    "shifted_value": 1,
                    "temp_2": 1,
                    "u_var2": 1
                },
                "uVar3": {
                    "mask": 1
                },
                "uVar4": {
                    "shift_amt": 1
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08004e30"
            ],
            "code": "\nlonglong convert_float_to_double_08009654(uint integer_part,uint fractional_part)\n\n{\n  uint exponent;\n  uint shifted_exponent;\n  longlong result;\n  \n  result = CONCAT44(fractional_part,integer_part);\n  shifted_exponent = (fractional_part << 1) >> 0x15;\n  exponent = shifted_exponent - 0x3ff;\n  if ((int)exponent < 0x14) {\n    if ((int)exponent < 0) {\n      fractional_part = fractional_part & 0x80000000;\n      if (exponent == 0xffffffff) {\n        fractional_part = fractional_part | 0x3ff00000;\n      }\n      result = (ulonglong)fractional_part << 0x20;\n    }\n    else {\n      shifted_exponent = 0xfffff >> (exponent & 0xff);\n      result = CONCAT44(fractional_part,integer_part);\n      if ((fractional_part & shifted_exponent | integer_part) != 0) {\n        result = (ulonglong)(fractional_part + (0x80000 >> (exponent & 0xff)) & ~shifted_exponent) << 0x20;\n      }\n    }\n  }\n  else if ((int)exponent < 0x34) {\n    shifted_exponent = 0xffffffff >> (shifted_exponent - 0x413 & 0xff);\n    if ((integer_part & shifted_exponent) != 0) {\n      exponent = 1 << (0x33 - exponent & 0xff);\n      if (check_overflow(integer_part,exponent) != false) {\n        fractional_part = fractional_part + 1;\n      }\n      result = CONCAT44(fractional_part,integer_part + exponent & ~shifted_exponent);\n    }\n  }\n  else {\n    result = CONCAT44(fractional_part,integer_part);\n    if (exponent == 0x400) {\n      result = __aeabi_dadd();\n    }\n  }\n  return result;\n}\n\n",
            "current_name": "convert_float_to_double_08009654",
            "entrypoint": "0x08009654",
            "imported": false,
            "improved": true,
            "renaming": {
                "CARRY4": "check_overflow",
                "FUN_08009654": "convert_float_to_double_08009654",
                "lVar3": "result",
                "param_1": "integer_part",
                "param_2": "fractional_part",
                "uVar1": "exponent",
                "uVar2": "shifted_exponent"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080096e8": {
            "additional_data": {
                "FUN_080096e8": {
                    "calculate_trig_func": 1,
                    "calculate_trig_value": 3,
                    "calculate_trigonometric": 2,
                    "calculate_trigonometric_function": 2,
                    "calculate_trigonometric_result": 1,
                    "calculate_trigonometric_value": 17,
                    "compute_trigonometric_value": 4
                },
                "local_20": {
                    "kernel_param_3": 1,
                    "local_variable2": 1,
                    "local_variable3": 1,
                    "output_3": 1,
                    "q1": 1,
                    "quo3": 2,
                    "rem2": 1,
                    "rem_pio2_z": 1,
                    "remainder1": 1,
                    "remainder2": 2,
                    "remainder_value_2": 1,
                    "sin_input": 1,
                    "stack_2": 1,
                    "stack_data_2": 1,
                    "stack_value2": 1,
                    "stack_variable_2": 1,
                    "temp1": 1,
                    "temp2": 3,
                    "temp_2": 2,
                    "temp_value": 1,
                    "temp_var_2": 3,
                    "unused2": 1,
                    "variable_1": 1,
                    "variable_2": 1
                },
                "local_28": {
                    "angle": 2,
                    "cosine_input": 1,
                    "integer_part": 1,
                    "local_variable1": 2,
                    "output_1": 1,
                    "pi_over_2": 1,
                    "quadrant": 4,
                    "quo": 2,
                    "quo1": 2,
                    "quo_rem": 1,
                    "quotient1": 1,
                    "rem_pio2_result_1": 1,
                    "rem_pio2_x": 1,
                    "remainder": 4,
                    "remainder1": 1,
                    "remainder_value": 5,
                    "theta": 1
                },
                "param_1": {
                    "angle": 8,
                    "input1": 1,
                    "input_angle": 7,
                    "input_parameter1": 1,
                    "input_value": 10,
                    "input_value_1": 1,
                    "param": 1,
                    "value": 2
                },
                "param_2": {
                    "bits": 2,
                    "flags": 12,
                    "input": 1,
                    "input2": 1,
                    "input_flag": 2,
                    "input_flags": 7,
                    "input_mask": 1,
                    "input_parameter2": 1,
                    "input_value": 1,
                    "input_value_2": 1,
                    "value": 2
                },
                "uStack_1c": {
                    "kernel_param_4": 1,
                    "local_variable4": 1,
                    "output_4": 1,
                    "q2": 1,
                    "quo4": 2,
                    "rem3": 1,
                    "rem_pio2_w": 1,
                    "remainder2": 1,
                    "sin_cos_temp_2": 1,
                    "stack_3": 1,
                    "stack_data_3": 1,
                    "stack_value3": 1,
                    "stack_value_2": 2,
                    "stack_var2": 1,
                    "stack_variable2": 1,
                    "stack_variable_2": 1,
                    "stack_variable_3": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp_3": 2,
                    "temp_var_3": 3,
                    "unused3": 1,
                    "unused_var": 1,
                    "variable_3": 1
                },
                "uStack_24": {
                    "local_variable2": 1,
                    "output_2": 1,
                    "q0": 1,
                    "quo2": 2,
                    "quo_rm": 1,
                    "quotient2": 1,
                    "rem1": 1,
                    "rem_pio2_result_2": 1,
                    "rem_pio2_y": 1,
                    "remainder1": 1,
                    "sin_cos_temp_1": 1,
                    "stack_1": 1,
                    "stack_data_1": 1,
                    "stack_value1": 1,
                    "stack_value_1": 2,
                    "stack_var1": 1,
                    "stack_variable1": 1,
                    "stack_variable_1": 2,
                    "temp1": 3,
                    "temp_1": 2,
                    "temp_var_1": 3,
                    "unused1": 1,
                    "variable_1": 1
                },
                "uVar1": {
                    "result": 28,
                    "result_cos_sin": 1,
                    "result_value": 1,
                    "return_value": 1
                },
                "uVar2": {
                    "flag": 1,
                    "modulo_result": 1,
                    "op_result": 1,
                    "operation_flag": 1,
                    "quadrant_case": 1,
                    "rem_pio2_result": 5,
                    "rem_result": 1,
                    "remainder": 14,
                    "remainder_flag": 1,
                    "remainder_flags": 1,
                    "temp": 2,
                    "trig_func_flag": 1,
                    "trig_value": 1
                }
            },
            "called": [
                "FUN_08009d78",
                "FUN_0800a348",
                "FUN_080082d0",
                "FUN_0800adf0"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nundefined4 calculate_trigonometric_value_080096e8(undefined4 input_value,uint flags)\n\n{\n  undefined4 result;\n  uint remainder;\n  undefined4 remainder_value;\n  undefined4 temp1;\n  undefined4 temp2;\n  undefined4 temp3;\n  \n  if (0x3fe921fb < (flags & 0x7fffffff)) {\n    if ((flags & 0x7fffffff) < 0x7ff00000) {\n      remainder = __ieee754_rem_pio2(input_value,flags,&remainder_value);\n      remainder = remainder & 3;\n      if (remainder == 1) {\n        result = __kernel_cos(remainder_value,temp1,temp2,temp3);\n      }\n      else if (remainder == 2) {\n        result = __kernel_sin(remainder_value,temp1,temp2,temp3,1);\n      }\n      else if (remainder == 0) {\n        result = __kernel_sin(remainder_value,temp1,temp2,temp3,1);\n      }\n      else {\n        result = __kernel_cos(remainder_value,temp1,temp2,temp3);\n      }\n    }\n    else {\n      result = __subdf3(input_value,flags,input_value,flags);\n    }\n    return result;\n  }\n  result = __kernel_sin(input_value,flags,0,0,0);\n  return result;\n}\n\n",
            "current_name": "calculate_trigonometric_value_080096e8",
            "entrypoint": "0x080096e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080096e8": "calculate_trigonometric_value_080096e8",
                "local_20": "temp2",
                "local_28": "remainder_value",
                "param_1": "input_value",
                "param_2": "flags",
                "uStack_1c": "temp3",
                "uStack_24": "temp1",
                "uVar1": "result",
                "uVar2": "remainder"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009798": {
            "additional_data": {
                "FUN_08009798": {
                    "bitwise_shift_and_concatenate": 1,
                    "calculate_result": 1,
                    "calculate_shifted_mask": 1,
                    "calculate_shifted_value": 5,
                    "compute_shifted_value": 1,
                    "convert_to_big_int": 1,
                    "convert_to_exponential": 1,
                    "convert_to_fixed_point": 3,
                    "decompose_number": 1,
                    "extract_and_manipulate_bits": 1,
                    "extract_bit_pattern": 1,
                    "extract_bit_range": 1,
                    "extract_bit_range_from_value": 1,
                    "extract_bitfield": 1,
                    "extract_bits": 8,
                    "extract_bits_and_concatenate": 1,
                    "extract_value_from_params": 1,
                    "handle_conversion": 1
                },
                "__aeabi_dadd": {
                    "addition_helper": 1,
                    "addition_operation": 1,
                    "perform_addition": 1
                },
                "lVar3": {
                    "converted_result": 1,
                    "extracted_value": 1,
                    "result": 29
                },
                "param_1": {
                    "base_value": 1,
                    "input1": 10,
                    "input_1": 7,
                    "input_number_1": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_value": 2,
                    "input_value1": 1,
                    "input_value_1": 2,
                    "num1": 1,
                    "number1": 1,
                    "value": 3
                },
                "param_2": {
                    "bit_mask": 2,
                    "bitfield_value": 1,
                    "exponent": 1,
                    "fraction": 1,
                    "input2": 10,
                    "input_2": 7,
                    "input_number_2": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_value2": 1,
                    "input_value_2": 2,
                    "num2": 1,
                    "number2": 1,
                    "start_bit": 1
                },
                "param_3": {
                    "arg1": 1,
                    "constant_1": 1,
                    "ignore1": 1,
                    "ignored_param1": 1,
                    "input_param3": 1,
                    "param3": 6,
                    "some_parameter_1": 1,
                    "unused": 2,
                    "unused1": 2,
                    "unused_param": 2,
                    "unused_param1": 3,
                    "unused_param3": 1,
                    "unused_param_1": 6,
                    "unused_param_3": 3
                },
                "param_4": {
                    "arg2": 1,
                    "constant_2": 1,
                    "ignore2": 1,
                    "ignored_param2": 1,
                    "input_param4": 1,
                    "param4": 6,
                    "some_parameter_2": 1,
                    "unused": 2,
                    "unused2": 2,
                    "unused_param": 1,
                    "unused_param2": 3,
                    "unused_param4": 1,
                    "unused_param_2": 7,
                    "unused_param_4": 3
                },
                "uVar1": {
                    "bit_offset": 1,
                    "bit_range": 1,
                    "bit_shift": 1,
                    "bitfield_shift": 1,
                    "difference": 1,
                    "excess_bits": 1,
                    "exponent": 2,
                    "exponent_diff": 1,
                    "shift_amount": 2,
                    "shift_difference": 1,
                    "shift_value": 2,
                    "shifted_amount": 1,
                    "shifted_bit_count": 1,
                    "shifted_bits": 6,
                    "shifted_diff": 1,
                    "shifted_difference": 1,
                    "shifted_mask": 2,
                    "shifted_val_diff": 1,
                    "shifted_value": 4
                },
                "uVar2": {
                    "bit_shift": 1,
                    "bitfield_adjusted": 1,
                    "shift_amount": 3,
                    "shift_amt": 1,
                    "shift_count": 1,
                    "shifted_amount": 2,
                    "shifted_bits": 3,
                    "shifted_bits_divided": 3,
                    "shifted_exponent": 2,
                    "shifted_fraction": 1,
                    "shifted_input": 1,
                    "shifted_input2": 4,
                    "shifted_number2": 1,
                    "shifted_param2": 1,
                    "shifted_result": 1,
                    "shifted_value": 3,
                    "shifted_value2": 1,
                    "temp_shifted_value": 1
                }
            },
            "called": [
                "FUN_080082d4"
            ],
            "calling": [
                "FUN_08004e30",
                "FUN_08003b98",
                "FUN_080005b4"
            ],
            "code": "\nlonglong extract_bits_and_concatenate_08009798(uint input1,uint input2,undefined4 unused_param_1,undefined4 unused_param_2)\n\n{\n  uint shifted_bits;\n  uint shifted_input2;\n  longlong result;\n  \n  shifted_input2 = (input2 << 1) >> 0x15;\n  shifted_bits = shifted_input2 - 0x3ff;\n  if ((int)shifted_bits < 0x14) {\n    if ((int)shifted_bits < 0) {\n      return ((ulonglong)input2 & 0x80000000) << 0x20;\n    }\n    result = (ulonglong)(input2 & ~(0xfffff >> (shifted_bits & 0xff))) << 0x20;\n  }\n  else {\n    if ((int)shifted_bits < 0x34) {\n      return CONCAT44(input2,input1 & ~(0xffffffffU >> (shifted_input2 - 0x413 & 0xff)));\n    }\n    if (shifted_bits != 0x400) {\n      return CONCAT44(input2,input1);\n    }\n    result = addition_helper(input1,input2,input1,input2,unused_param_2);\n  }\n  return result;\n}\n\n",
            "current_name": "extract_bits_and_concatenate_08009798",
            "entrypoint": "0x08009798",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009798": "extract_bits_and_concatenate_08009798",
                "__aeabi_dadd": "addition_helper",
                "lVar3": "result",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "unused_param_1",
                "param_4": "unused_param_2",
                "uVar1": "shifted_bits",
                "uVar2": "shifted_input2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009818": {
            "called": [
                "FUN_08009990"
            ],
            "calling": [
                "FUN_08001f00"
            ],
            "code": "\nuint __ieee754_atan2(uint param_1,uint param_2,uint param_3,uint param_4)\n\n{\n  int iVar1;\n  undefined4 uVar2;\n  uint uVar3;\n  uint uVar4;\n  uint uVar5;\n  undefined8 uVar6;\n  \n  uVar4 = param_4 & 0x7fffffff;\n  if (((uVar4 | (-param_3 | param_3) >> 0x1f) < 0x7ff00001) &&\n     (uVar5 = param_2 & 0x7fffffff, (uVar5 | (-param_1 | param_1) >> 0x1f) < 0x7ff00001)) {\n    if ((param_4 + 0xc0100000 | param_3) == 0) {\n      uVar4 = atan();\n      return uVar4;\n    }\n    uVar3 = (int)param_4 >> 0x1e & 2U | param_2 >> 0x1f;\n    if ((uVar5 | param_1) == 0) {\n      if (uVar3 == 2) {\n        param_1 = 0x54442d18;\n      }\n      else if (uVar3 == 3) {\n        param_1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((uVar4 | param_3) != 0) {\n        if (uVar4 == 0x7ff00000) {\n          uVar3 = uVar3 - 1;\n          if (uVar5 == 0x7ff00000) {\n            if (uVar3 < 3) {\n              return *(uint *)(&DAT_0800be68 + uVar3 * 8);\n            }\n            return 0x54442d18;\n          }\n          if (uVar3 < 3) {\n            return *(uint *)(&DAT_0800be80 + uVar3 * 8);\n          }\n          return 0;\n        }\n        if (uVar5 != 0x7ff00000) {\n          iVar1 = (int)(uVar5 - uVar4) >> 0x14;\n          if ((int)(uVar5 - uVar4) < 0x3d00000) {\n            if (((int)param_4 < 0) && (iVar1 + 0x3c < 0 != SCARRY4(iVar1,0x3c))) {\n              uVar6 = 0;\n            }\n            else {\n              __divdf3(param_1,param_2,param_3,param_4,param_4);\n              fabs();\n              uVar6 = atan();\n            }\n          }\n          else {\n            uVar6 = 0x3ff921fb54442d18;\n          }\n          uVar2 = (undefined4)((ulonglong)uVar6 >> 0x20);\n          uVar4 = (uint)uVar6;\n          if (uVar3 == 1) {\n            return uVar4;\n          }\n          if (uVar3 == 2) {\n            uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n            uVar4 = __subdf3(0x54442d18,0x400921fb,(int)uVar6,(int)((ulonglong)uVar6 >> 0x20));\n            return uVar4;\n          }\n          if (uVar3 == 0) {\n            return uVar4;\n          }\n          uVar6 = __subdf3(uVar4,uVar2,0x33145c07,0x3ca1a626);\n          uVar4 = __subdf3((int)uVar6,(int)((ulonglong)uVar6 >> 0x20),0x54442d18,0x400921fb);\n          return uVar4;\n        }\n      }\n      if ((int)param_2 < 0) {\n        param_1 = 0x54442d18;\n      }\n      else {\n        param_1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    param_1 = __aeabi_dadd(param_3,param_4,param_1,param_2);\n  }\n  return param_1;\n}\n\n",
            "current_name": "FUN_08009818",
            "entrypoint": "0x08009818",
            "imported": false,
            "improved": true,
            "renaming": {},
            "skipped": false,
            "tags": []
        },
        "FUN_0800981c": {
            "additional_data": {
                "DAT_20000014": {
                    "check_mode": 1,
                    "condition": 1,
                    "special_case_code": 1
                },
                "DAT_22": {
                    "errno_value": 1
                },
                "FUN_0800981c": {
                    "calculate_hypotenuse": 31
                },
                "VAR_20000014": {
                    "error_type": 1
                },
                "iVar1": {
                    "err_check": 1,
                    "finite_check_result": 1,
                    "is_finite": 13,
                    "is_finite_a": 1,
                    "is_finite_result": 3,
                    "is_valid": 1,
                    "result": 3
                },
                "local_30": {
                    "errno_value": 2,
                    "errno_value_temp": 1,
                    "error": 1,
                    "error_code": 1,
                    "error_flag": 1,
                    "fin_check_result": 1,
                    "finite_check": 1,
                    "finite_result": 9,
                    "finite_val": 1,
                    "finite_value": 1,
                    "is_finite": 8,
                    "is_hypotenuse_finite": 1,
                    "is_nan": 1,
                    "saved_errno": 1,
                    "status": 1
                },
                "local_38": {
                    "errno_code": 1,
                    "exception_flag": 1,
                    "lower_bits": 1,
                    "lower_bound": 4,
                    "lower_limit": 2,
                    "min_exp": 1,
                    "min_value": 2,
                    "upper_limit": 1
                },
                "local_40": {
                    "c": 3,
                    "c_copy": 3,
                    "input_param_3": 1,
                    "local_param3": 1,
                    "matherr_arg5": 1,
                    "param3": 2,
                    "param3_copy": 1,
                    "param_3_copy": 4,
                    "param_c": 1,
                    "side2_x_copy": 2,
                    "side2_x_new": 1,
                    "side3": 1,
                    "side3_copy": 1,
                    "side3_squared_copy": 1,
                    "side3_var": 1,
                    "side_3_copy": 1,
                    "side_c_copy": 1,
                    "side_length_3_copy": 1,
                    "temp_param_3": 1
                },
                "local_48": {
                    "a": 3,
                    "a_copy": 3,
                    "input_param_1": 1,
                    "local_param1": 1,
                    "matherr_arg3": 1,
                    "param1": 2,
                    "param1_copy": 1,
                    "param_1_copy": 4,
                    "param_a": 1,
                    "side1": 1,
                    "side1_copy": 1,
                    "side1_squared_copy": 1,
                    "side1_var": 1,
                    "side1_x_copy": 2,
                    "side1_x_new": 1,
                    "side_1_copy": 1,
                    "side_a_copy": 1,
                    "side_length_1_copy": 1,
                    "temp_param_1": 1
                },
                "local_50": {
                    "err_code": 3,
                    "err_flag": 2,
                    "error_code": 11,
                    "error_number": 1,
                    "exception_type": 1,
                    "math_err_flag": 1,
                    "math_err_type": 1,
                    "math_errno": 1,
                    "math_error_code": 2,
                    "math_error_flag": 1,
                    "math_type": 2,
                    "matherr_arg1": 1,
                    "matherr_code": 3,
                    "matherr_type": 1
                },
                "param_1": {
                    "a": 1,
                    "side1": 6,
                    "side1_length": 4,
                    "side1_squared": 1,
                    "side1_x": 4,
                    "side_1": 1,
                    "side_a": 12,
                    "side_length_1": 2
                },
                "param_2": {
                    "b": 1,
                    "side1_y": 4,
                    "side2": 6,
                    "side2_length": 4,
                    "side2_squared": 1,
                    "side_2": 1,
                    "side_b": 12,
                    "side_length_2": 2
                },
                "param_3": {
                    "c": 1,
                    "side2_x": 4,
                    "side3": 6,
                    "side3_length": 4,
                    "side3_squared": 1,
                    "side_3": 1,
                    "side_c": 12,
                    "side_length_3": 2
                },
                "param_4": {
                    "d": 1,
                    "side2_y": 4,
                    "side4": 6,
                    "side4_length": 4,
                    "side4_squared": 1,
                    "side_4": 1,
                    "side_d": 12,
                    "side_length_4": 2
                },
                "pcStack_4c": {
                    "err_msg": 1,
                    "err_string": 1,
                    "errmsg": 1,
                    "error_function": 1,
                    "error_message": 5,
                    "error_str": 1,
                    "error_string": 1,
                    "exception_message": 1,
                    "function_name": 8,
                    "math_err_func_name": 1,
                    "math_error_message": 1,
                    "math_errstr": 1,
                    "math_function_name": 3,
                    "math_name": 1,
                    "matherr_arg2": 1,
                    "matherr_message": 1,
                    "matherr_name": 1,
                    "matherr_string": 1
                },
                "piVar3": {
                    "errno_int_ptr": 3,
                    "errno_ptr": 1,
                    "errno_ptr2": 2,
                    "errno_ptr_int": 2,
                    "errno_ptr_local": 1,
                    "errno_ptr_result": 1,
                    "errno_val": 5,
                    "errno_value": 8,
                    "error_ptr": 1
                },
                "puVar2": {
                    "errno_address": 1,
                    "errno_pointer": 2,
                    "errno_ptr": 22
                },
                "uStack_34": {
                    "errno_value": 1,
                    "exception_value": 1,
                    "higher_bits": 1,
                    "lower_limit": 1,
                    "max_exp": 1,
                    "max_value": 2,
                    "upper_bound": 3,
                    "upper_limit": 2
                },
                "uStack_3c": {
                    "d": 3,
                    "d_copy": 3,
                    "input_param_4": 1,
                    "local_param4": 1,
                    "matherr_arg6": 1,
                    "param4": 2,
                    "param4_copy": 1,
                    "param_4_copy": 4,
                    "param_d": 1,
                    "side2_y_copy": 2,
                    "side2_y_new": 1,
                    "side4": 1,
                    "side4_copy": 1,
                    "side4_var": 1,
                    "side_4_copy": 1,
                    "side_d_copy": 1,
                    "side_length_4_copy": 1,
                    "temp_param_4": 1
                },
                "uStack_44": {
                    "b": 3,
                    "b_copy": 3,
                    "input_param_2": 1,
                    "local_param2": 1,
                    "matherr_arg4": 1,
                    "param2": 2,
                    "param2_copy": 1,
                    "param_2_copy": 4,
                    "param_b": 1,
                    "side1_y_copy": 2,
                    "side1_y_new": 1,
                    "side2": 1,
                    "side2_copy": 1,
                    "side2_var": 1,
                    "side_2_copy": 1,
                    "side_b_copy": 1,
                    "side_length_2_copy": 1,
                    "temp_param_2": 1
                },
                "uVar4": {
                    "hypotenuse": 5,
                    "hypotenuse_value": 1,
                    "result": 17
                }
            },
            "called": [
                "FUN_0800b2e0",
                "FUN_0800b3dc",
                "FUN_08009b24",
                "FUN_0800b2d4"
            ],
            "calling": [
                "FUN_08001f00",
                "FUN_080005b4"
            ],
            "code": "\nundefined8 calculate_hypotenuse_0800981c(undefined4 side_a,undefined4 side_b,undefined4 side_c,undefined4 side_d)\n\n{\n  int is_finite;\n  undefined4 *errno_ptr;\n  int *errno_value;\n  undefined8 result;\n  undefined4 error_code;\n  char *function_name;\n  undefined4 param_1_copy;\n  undefined4 param_2_copy;\n  undefined4 param_3_copy;\n  undefined4 param_4_copy;\n  undefined4 lower_bound;\n  undefined4 upper_bound;\n  int finite_result;\n  \n  result = __ieee754_hypot();\n  if (DAT_20000014 == -1) {\n    return result;\n  }\n  finite_result = finite();\n  if (finite_result != 0) {\n    return result;\n  }\n  is_finite = finite(side_a,side_b);\n  if (is_finite == 0) {\n    return result;\n  }\n  is_finite = finite(side_c,side_d);\n  if (is_finite == 0) {\n    return result;\n  }\n  error_code = 3;\n  function_name = \"hypot\";\n  param_1_copy = side_a;\n  param_2_copy = side_b;\n  param_3_copy = side_c;\n  param_4_copy = side_d;\n  if (DAT_20000014 == '\\0') {\n    lower_bound = 0xe0000000;\n    upper_bound = 0x47efffff;\nLAB_080098aa:\n    is_finite = matherr(&error_code);\n    if (is_finite != 0) goto LAB_08009896;\n  }\n  else {\n    lower_bound = 0;\n    upper_bound = 0x7ff00000;\n    if (DAT_20000014 != '\\x02') goto LAB_080098aa;\n  }\n  errno_ptr = (undefined4 *)__errno();\n  *errno_ptr = 0x22;\nLAB_08009896:\n  result = CONCAT44(upper_bound,lower_bound);\n  if (finite_result != 0) {\n    errno_value = (int *)__errno();\n    result = CONCAT44(upper_bound,lower_bound);\n    *errno_value = finite_result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_hypotenuse_0800981c",
            "entrypoint": "0x0800981c",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800981c": "calculate_hypotenuse_0800981c",
                "iVar1": "is_finite",
                "local_30": "finite_result",
                "local_38": "lower_bound",
                "local_40": "param_3_copy",
                "local_48": "param_1_copy",
                "local_50": "error_code",
                "param_1": "side_a",
                "param_2": "side_b",
                "param_3": "side_c",
                "param_4": "side_d",
                "pcStack_4c": "function_name",
                "piVar3": "errno_value",
                "puVar2": "errno_ptr",
                "uStack_34": "upper_bound",
                "uStack_3c": "param_4_copy",
                "uStack_44": "param_2_copy",
                "uVar4": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_080098d0": {
            "additional_data": {
                "DAT_0800be5c": {
                    "matherr_ptr": 1
                },
                "DAT_20000014": {
                    "c": 1,
                    "constant_value": 1
                },
                "FUN_08008894": {
                    "perform_math_operation": 1
                },
                "FUN_08008b24": {
                    "check_math_error": 1
                },
                "FUN_08008b74": {
                    "perform_comparison": 1
                },
                "FUN_080098d0": {
                    "calculate_root": 1,
                    "calculate_sqrt": 2,
                    "calculate_sqrt_or_div": 2,
                    "calculate_square_root": 25,
                    "calculate_squared_difference": 1
                },
                "FUN_0800a1bc": {
                    "perform_operation": 1
                },
                "FUN_0800b2e0": {
                    "get_sqrt_value": 1
                },
                "FUN_0800b3dc": {
                    "dummy_function": 1
                },
                "cVar1": {
                    "character": 1,
                    "condition": 4,
                    "condition_var": 1,
                    "constant_check": 1,
                    "constant_value": 2,
                    "control": 1,
                    "control_variable": 1,
                    "dat_20000014": 1,
                    "data_value_1": 1,
                    "flag": 12,
                    "matherr_flag": 1
                },
                "iVar3": {
                    "compare_result": 1,
                    "comparison": 1,
                    "comparison_result": 27,
                    "is_less_than": 1
                },
                "local_30": {
                    "comparison_errno": 1,
                    "err_num": 1,
                    "errno_flag": 1,
                    "errno_temp": 1,
                    "errno_value": 2,
                    "error": 4,
                    "error_check": 1,
                    "error_code": 4,
                    "error_number": 3,
                    "error_val": 1,
                    "error_value": 1,
                    "local_errno": 1,
                    "local_errno_value": 1,
                    "local_var8": 1,
                    "local_variable_7": 1,
                    "math_error": 1,
                    "matherr_error": 1,
                    "matherr_error_code": 1,
                    "result_cmp": 1,
                    "sqrt_errno": 1,
                    "unorddf2_result": 1,
                    "unorddf_result": 1
                },
                "local_38": {
                    "division_result": 1,
                    "error_message": 1,
                    "error_result": 1,
                    "local_math_err": 1,
                    "local_result": 1,
                    "local_var7": 1,
                    "math_err": 1,
                    "math_err_val": 1,
                    "math_error": 1,
                    "math_error_result": 1,
                    "matherr_result": 6,
                    "res": 1,
                    "result": 10,
                    "result_4": 1,
                    "return_value": 3
                },
                "local_40": {
                    "copy_input_1_2": 1,
                    "input1_copy2": 3,
                    "input_1_copy2": 2,
                    "input_1_copy_2": 1,
                    "input_value_1_copy_2": 1,
                    "local_input_1_copy": 2,
                    "local_num1_copy": 1,
                    "local_temp_value_1": 1,
                    "local_value1_copy": 1,
                    "local_var5": 2,
                    "local_var_5": 1,
                    "local_variable_5": 1,
                    "num1_copy2": 1,
                    "number1_copy2": 1,
                    "param1_copy2": 2,
                    "param_1_copy2": 3,
                    "result_2_copy": 1,
                    "some_variable_4": 1,
                    "temp1": 1,
                    "value1": 1,
                    "value4": 1,
                    "var1_copy": 1,
                    "var_3": 1
                },
                "local_48": {
                    "copy_input_1": 1,
                    "input1": 1,
                    "input1_copy": 3,
                    "input_1_copy": 3,
                    "input_value_1_copy": 1,
                    "local_input_1": 2,
                    "local_input_value_1": 1,
                    "local_num1": 1,
                    "local_value1": 1,
                    "local_var3": 2,
                    "local_var_3": 1,
                    "local_variable_3": 1,
                    "num1_copy": 1,
                    "number1_copy": 1,
                    "param1_copy": 2,
                    "param_1_copy": 3,
                    "result_2": 1,
                    "some_variable_2": 1,
                    "value1": 1,
                    "value2": 1,
                    "var1": 1,
                    "var_1": 1
                },
                "local_4c": {
                    "array": 1,
                    "constant_address": 1,
                    "constant_ptr": 1,
                    "dat_0800be5c": 1,
                    "data_pointer": 1,
                    "data_ptr": 5,
                    "error_message": 1,
                    "flag_ptr": 1,
                    "helper_ptr": 1,
                    "local_data_ptr": 1,
                    "local_pointer": 2,
                    "local_ptr": 1,
                    "local_var2": 2,
                    "local_var_2": 1,
                    "local_variable_2": 1,
                    "matherr_address": 1,
                    "matherr_arg2": 1,
                    "message": 2,
                    "pointer": 4,
                    "pointer_to_dat_0800be5c": 1,
                    "some_pointer": 1
                },
                "local_50": {
                    "check_value": 1,
                    "constant_1": 1,
                    "count": 1,
                    "counter": 1,
                    "div_flag": 1,
                    "flag": 8,
                    "is_matherr_called": 1,
                    "is_negative": 1,
                    "local_flag": 4,
                    "local_var1": 2,
                    "local_var_1": 1,
                    "local_variable_1": 1,
                    "matherr_arg": 2,
                    "matherr_arg1": 1,
                    "result": 1,
                    "result_1": 1,
                    "some_variable_1": 1,
                    "value1": 2
                },
                "param_1": {
                    "first_number": 1,
                    "input1": 7,
                    "input_1": 10,
                    "input_value_1": 3,
                    "num1": 6,
                    "number1": 3,
                    "value1": 1
                },
                "param_2": {
                    "input2": 7,
                    "input_2": 10,
                    "input_value_2": 3,
                    "num2": 6,
                    "number2": 3,
                    "second_number": 1,
                    "value2": 1
                },
                "piVar5": {
                    "err_num_ptr": 1,
                    "err_ptr2": 1,
                    "errno_pointer": 1,
                    "errno_pointer2": 1,
                    "errno_ptr": 4,
                    "errno_ptr2": 1,
                    "errno_ptr_int": 2,
                    "errno_result": 2,
                    "errno_value": 6,
                    "errno_value_ptr": 2,
                    "error_code_ptr": 2,
                    "error_int_pointer": 1,
                    "error_number": 1,
                    "error_number_ptr": 1,
                    "error_number_ptr2": 1,
                    "error_pointer": 2,
                    "ptr_errno_int": 1
                },
                "puVar4": {
                    "err_ptr": 2,
                    "errno_pointer": 5,
                    "errno_ptr": 13,
                    "errno_ptr1": 1,
                    "error_code_ptr": 1,
                    "error_flag": 2,
                    "error_number_ptr": 2,
                    "error_pointer": 1,
                    "error_ptr": 2,
                    "ptr_errno": 1
                },
                "uStack_3c": {
                    "copy_input_2_2": 1,
                    "input2_copy2": 2,
                    "input_2_copy2": 2,
                    "input_2_copy_2": 1,
                    "input_value_2_copy_2": 1,
                    "local_input_2_copy": 2,
                    "local_num2_copy": 1,
                    "local_temp_value_2": 1,
                    "local_value2_copy": 1,
                    "local_var6": 2,
                    "local_var_6": 1,
                    "local_variable_6": 1,
                    "num2_copy2": 1,
                    "number2_copy2": 1,
                    "param2_copy2": 2,
                    "param_2_copy2": 3,
                    "result_3_copy": 1,
                    "some_variable_5": 1,
                    "temp2": 1,
                    "value2": 1,
                    "value5": 1,
                    "var2_copy": 1,
                    "var_4": 1
                },
                "uStack_44": {
                    "copy_input_2": 1,
                    "input2": 1,
                    "input2_copy": 2,
                    "input_2_copy": 3,
                    "input_value_2_copy": 1,
                    "local_input_2": 2,
                    "local_input_value_2": 1,
                    "local_num2": 1,
                    "local_value2": 1,
                    "local_var4": 2,
                    "local_var_4": 1,
                    "local_variable_4": 1,
                    "num2_copy": 1,
                    "number2_copy": 1,
                    "param2_copy": 2,
                    "param_2_copy": 3,
                    "result_3": 1,
                    "some_variable_3": 1,
                    "value2": 1,
                    "value3": 1,
                    "var2": 1,
                    "var_2": 1
                },
                "uVar2": {
                    "result": 14,
                    "sqrt_result": 5,
                    "square_root": 10,
                    "square_root_result": 1
                }
            },
            "called": [
                "FUN_0800a1bc",
                "FUN_0800b2e0",
                "FUN_0800b3dc",
                "FUN_08008b74",
                "FUN_08008894",
                "FUN_08008b24"
            ],
            "calling": [
                "FUN_080005b4",
                "FUN_08002978",
                "FUN_08001994",
                "FUN_08003004"
            ],
            "code": "\nundefined4 calculate_square_root_080098d0(undefined4 input_1,undefined4 input_2)\n\n{\n  char flag;\n  undefined4 result;\n  int comparison_result;\n  undefined4 *errno_ptr;\n  int *errno_value;\n  undefined4 flag;\n  undefined *data_ptr;\n  undefined4 param_1_copy;\n  undefined4 input_2_copy;\n  undefined4 input1_copy2;\n  undefined4 param_2_copy2;\n  undefined8 result;\n  int error_code;\n  \n  result = __ieee754_sqrt();\n  flag = DAT_20000014;\n  if (((DAT_20000014 == -1) ||\n      (error_code = __unorddf2(input_1,input_2,input_1,input_2), error_code != 0)) ||\n     (comparison_result = __aeabi_dcmplt(input_1,input_2,0,0), comparison_result == 0)) {\n    return result;\n  }\n  flag = 1;\n  data_ptr = &DAT_0800be5c;\n  param_1_copy = input_1;\n  input_2_copy = input_2;\n  input1_copy2 = input_1;\n  param_2_copy2 = input_2;\n  if (flag == '\\0') {\n    result = 0;\nLAB_0800996c:\n    comparison_result = matherr(&flag);\n    if (comparison_result != 0) goto joined_r0x0800997a;\n  }\n  else {\n    result = __divdf3(0,0,0,0);\n    if (flag != '\\x02') goto LAB_0800996c;\n  }\n  errno_ptr = (undefined4 *)__errno();\n  *errno_ptr = 0x21;\njoined_r0x0800997a:\n  if (error_code != 0) {\n    errno_value = (int *)__errno();\n    *errno_value = error_code;\n  }\n  return (undefined4)result;\n}\n\n",
            "current_name": "calculate_square_root_080098d0",
            "entrypoint": "0x080098d0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_080098d0": "calculate_square_root_080098d0",
                "cVar1": "flag",
                "iVar3": "comparison_result",
                "local_30": "error_code",
                "local_38": "result",
                "local_40": "input1_copy2",
                "local_48": "param_1_copy",
                "local_4c": "data_ptr",
                "local_50": "flag",
                "param_1": "input_1",
                "param_2": "input_2",
                "piVar5": "errno_value",
                "puVar4": "errno_ptr",
                "uStack_3c": "param_2_copy2",
                "uStack_44": "input_2_copy",
                "uVar2": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009990": {
            "additional_data": {
                "FUNC_0800b2cc": {
                    "helper_function_3": 1,
                    "initialize": 1,
                    "initialize_constants": 1,
                    "round_to_integer": 1,
                    "unknown_function": 1
                },
                "FUN_080082d0": {
                    "calculate_intermediate": 1,
                    "calculate_subtraction": 1,
                    "difference_double": 1,
                    "helper_function_5": 1,
                    "subtract_double": 1
                },
                "FUN_080082d4": {
                    "calculate_atan_internal": 1,
                    "calculate_difference": 1,
                    "calculate_overall": 1,
                    "helper_function_1": 1,
                    "inverse_hyp_tangent": 1
                },
                "FUN_08008894": {
                    "calculate_absolute": 1,
                    "calculate_result": 1,
                    "divide": 1,
                    "helper_function_4": 1,
                    "subtract_double_internal": 1
                },
                "FUN_08009990": {
                    "calculate_arctan": 1,
                    "calculate_arctangent": 1,
                    "calculate_atan": 18,
                    "calculate_result": 4,
                    "improved_calculate": 1
                },
                "FUN_0800af78": {
                    "helper_function_2": 1,
                    "int_to_double": 1,
                    "inverse_square_root": 1,
                    "perform_subtraction": 1,
                    "process_data": 1
                },
                "__aeabi_dadd": {
                    "add": 1,
                    "add_double": 4,
                    "addition": 1
                },
                "__divdf3": {
                    "divide": 1,
                    "divide_double": 4,
                    "division": 1
                },
                "__subdf3": {
                    "subtract": 1,
                    "subtract_double": 4,
                    "subtraction": 1
                },
                "atan": {
                    "arc_tangent": 1,
                    "calculate_arctangent": 1
                },
                "fabs": {
                    "absolute": 1,
                    "absolute_value": 4,
                    "calculate_absolute_value": 1
                },
                "iVar1": {
                    "diff": 3,
                    "diff_divided": 1,
                    "difference": 18,
                    "result": 1,
                    "subtract_result": 1,
                    "temp1": 1,
                    "temp_var1": 3,
                    "temp_var_1": 2
                },
                "param_1": {
                    "input1": 8,
                    "input_1": 7,
                    "input_param_1": 1,
                    "num1": 3,
                    "parameter1": 1,
                    "val1": 1,
                    "value1": 1,
                    "value_1": 2,
                    "x": 7
                },
                "param_2": {
                    "input2": 8,
                    "input_2": 7,
                    "input_param_2": 1,
                    "num2": 3,
                    "parameter2": 1,
                    "val2": 1,
                    "value2": 1,
                    "value_2": 2,
                    "y": 7
                },
                "param_3": {
                    "input3": 8,
                    "input_3": 7,
                    "input_param_3": 1,
                    "num3": 3,
                    "parameter3": 1,
                    "val3": 1,
                    "value3": 1,
                    "value_3": 2,
                    "z": 7
                },
                "param_4": {
                    "input4": 8,
                    "input_4": 7,
                    "input_param_4": 1,
                    "num4": 3,
                    "parameter4": 1,
                    "val4": 1,
                    "value4": 1,
                    "value_4": 2,
                    "w": 7
                },
                "uVar2": {
                    "part_real": 1,
                    "quotient": 1,
                    "quotient_high": 1,
                    "quotient_part1": 1,
                    "result": 4,
                    "result1": 4,
                    "result_high": 3,
                    "result_int_part": 1,
                    "result_upper": 3,
                    "temp": 1,
                    "temp2": 1,
                    "temp_var2": 3,
                    "temp_var_2": 2,
                    "upper_bits": 1
                },
                "uVar3": {
                    "bit_operation_result": 1,
                    "combined_shift": 1,
                    "flag": 7,
                    "op_bit": 1,
                    "quotient_low": 1,
                    "quotient_part2": 1,
                    "result2": 1,
                    "result_low": 2,
                    "shift_result": 1,
                    "shift_value": 1,
                    "shifted_input_2": 1,
                    "shifted_param_2": 1,
                    "sign": 2,
                    "sign_bits": 1,
                    "temp1": 1,
                    "temp3": 1,
                    "temp_var3": 3,
                    "temp_var_3": 2
                },
                "uVar4": {
                    "abs_num4": 1,
                    "abs_w": 1,
                    "abs_x": 1,
                    "abs_z": 1,
                    "filtered_input4": 1,
                    "masked_input4": 1,
                    "masked_input_4": 1,
                    "modified_input4": 1,
                    "modified_num4": 1,
                    "modified_param_4": 1,
                    "param_4_bitwise": 1,
                    "param_4_clamped": 1,
                    "param_4_masked": 1,
                    "param_4_modified": 1,
                    "param_4_positive": 2,
                    "positive_val4": 1,
                    "result": 1,
                    "result3": 1,
                    "result_lower": 1,
                    "shifted_param_4": 1,
                    "temp1": 1,
                    "temp2": 1,
                    "temp4": 1,
                    "temp_var4": 3,
                    "temp_var_4": 2,
                    "w_abs": 1
                },
                "uVar5": {
                    "abs_input2": 1,
                    "abs_num2": 1,
                    "abs_y": 4,
                    "filtered_input2": 1,
                    "masked_input2": 1,
                    "masked_input_2": 1,
                    "modified_input2": 1,
                    "modified_num2": 1,
                    "modified_param_2": 1,
                    "param_2_bitwise": 1,
                    "param_2_clamped": 1,
                    "param_2_masked": 1,
                    "param_2_modified": 1,
                    "param_2_positive": 2,
                    "positive_val2": 1,
                    "result4": 1,
                    "temp2": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_var": 1,
                    "temp_var5": 3,
                    "temp_var_5": 2,
                    "y_abs": 1
                },
                "uVar6": {
                    "atan_result": 1,
                    "intermediate_result": 1,
                    "result": 10,
                    "result2": 3,
                    "result5": 1,
                    "result_double": 1,
                    "temp3": 1,
                    "temp6": 1,
                    "temp_result": 6,
                    "temp_var6": 3,
                    "temp_var_6": 2
                },
                "uVar7": {
                    "temp_real": 1
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_0800af78",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0"
            ],
            "calling": [
                "FUN_08009818"
            ],
            "code": "\nuint calculate_atan_08009990(uint input1,uint input2,uint input3,uint input4)\n\n{\n  int difference;\n  undefined4 result1;\n  uint flag;\n  uint temp_var4;\n  uint abs_y;\n  undefined8 result;\n  \n  temp_var4 = input4 & 0x7fffffff;\n  if (((temp_var4 | (-input3 | input3) >> 0x1f) < 0x7ff00001) &&\n     (abs_y = input2 & 0x7fffffff, (abs_y | (-input1 | input1) >> 0x1f) < 0x7ff00001)) {\n    if ((input4 + 0xc0100000 | input3) == 0) {\n      temp_var4 = calculate_arctangent();\n      return temp_var4;\n    }\n    flag = (int)input4 >> 0x1e & 2U | input2 >> 0x1f;\n    if ((abs_y | input1) == 0) {\n      if (flag == 2) {\n        input1 = 0x54442d18;\n      }\n      else if (flag == 3) {\n        input1 = 0x54442d18;\n      }\n    }\n    else {\n      if ((temp_var4 | input3) != 0) {\n        if (temp_var4 == 0x7ff00000) {\n          flag = flag - 1;\n          if (abs_y == 0x7ff00000) {\n            if (flag < 3) {\n              return *(uint *)(&DAT_0800be68 + flag * 8);\n            }\n            return 0x54442d18;\n          }\n          if (flag < 3) {\n            return *(uint *)(&DAT_0800be80 + flag * 8);\n          }\n          return 0;\n        }\n        if (abs_y != 0x7ff00000) {\n          difference = (int)(abs_y - temp_var4) >> 0x14;\n          if ((int)(abs_y - temp_var4) < 0x3d00000) {\n            if (((int)input4 < 0) && (difference + 0x3c < 0 != SCARRY4(difference,0x3c))) {\n              result = 0;\n            }\n            else {\n              divide_double(input1,input2,input3,input4,input4);\n              absolute_value();\n              result = calculate_arctangent();\n            }\n          }\n          else {\n            result = 0x3ff921fb54442d18;\n          }\n          result1 = (undefined4)((ulonglong)result >> 0x20);\n          temp_var4 = (uint)result;\n          if (flag == 1) {\n            return temp_var4;\n          }\n          if (flag == 2) {\n            result = subtract_double(temp_var4,result1,0x33145c07,0x3ca1a626);\n            temp_var4 = subtract_double(0x54442d18,0x400921fb,(int)result,(int)((ulonglong)result >> 0x20));\n            return temp_var4;\n          }\n          if (flag == 0) {\n            return temp_var4;\n          }\n          result = subtract_double(temp_var4,result1,0x33145c07,0x3ca1a626);\n          temp_var4 = subtract_double((int)result,(int)((ulonglong)result >> 0x20),0x54442d18,0x400921fb);\n          return temp_var4;\n        }\n      }\n      if ((int)input2 < 0) {\n        input1 = 0x54442d18;\n      }\n      else {\n        input1 = 0x54442d18;\n      }\n    }\n  }\n  else {\n    input1 = add_double(input3,input4,input1,input2);\n  }\n  return input1;\n}\n\n",
            "current_name": "calculate_atan_08009990",
            "entrypoint": "0x08009990",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009990": "calculate_atan_08009990",
                "__aeabi_dadd": "add_double",
                "__divdf3": "divide_double",
                "__subdf3": "subtract_double",
                "atan": "calculate_arctangent",
                "fabs": "absolute_value",
                "iVar1": "difference",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uVar2": "result1",
                "uVar3": "flag",
                "uVar4": "temp_var4",
                "uVar5": "abs_y",
                "uVar6": "result"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009b24": {
            "additional_data": {
                "FUN_08009b24": {
                    "calculate_distance": 4,
                    "calculate_modified_value": 1,
                    "calculate_result": 3,
                    "calculate_sqrt_with_conditions": 1,
                    "calculate_square_root": 19,
                    "calculate_squared_distance": 1,
                    "perform_calculation": 1,
                    "square_root_value": 1
                },
                "__aeabi_dadd": {
                    "add_double": 1
                },
                "__aeabi_dcmplt": {
                    "compare_double_less_than": 1
                },
                "__ieee754_sqrt": {
                    "calculate_sqrt": 1
                },
                "__muldf3": {
                    "multiply_double": 1
                },
                "__subdf3": {
                    "subtract_double": 1
                },
                "iVar12": {
                    "input_combined2": 1
                },
                "iVar2": {
                    "comparison": 9,
                    "comparison_result": 12,
                    "condition1": 1,
                    "is_less_than": 1,
                    "result2": 7,
                    "temp2": 1
                },
                "iVar4": {
                    "comparison2": 3,
                    "comparison_result": 1,
                    "comparison_result2": 1,
                    "condition2": 1,
                    "int_result": 1,
                    "result2": 2,
                    "result2_int": 1,
                    "result3": 1,
                    "result4": 6,
                    "result5": 1,
                    "temp1": 3,
                    "temp1_is_negative": 1,
                    "temp2": 2,
                    "temp3": 1,
                    "temp_var1": 3,
                    "updated_num2": 1,
                    "y": 1,
                    "y_diff": 1
                },
                "iVar6": {
                    "comparison3": 2,
                    "comparison_result3": 1,
                    "condition3": 1,
                    "int_result2": 1,
                    "mul_result_high": 1,
                    "result3": 1,
                    "result3_int": 1,
                    "result5": 1,
                    "result6": 6,
                    "temp2": 5,
                    "temp2_is_negative": 1,
                    "temp4": 3,
                    "temp5": 1,
                    "temp_var2": 1,
                    "temp_var3": 3,
                    "x_diff": 1,
                    "y_sq": 1
                },
                "iVar8": {
                    "int_result3": 1
                },
                "iVar9": {
                    "int_result4": 1
                },
                "local_3c": {
                    "change_value": 1,
                    "constant": 1,
                    "constant_value": 1,
                    "count": 1,
                    "counter": 2,
                    "increment": 1,
                    "initial_offset": 1,
                    "local_3c": 1,
                    "local_var": 9,
                    "local_var1": 1,
                    "local_variable": 5,
                    "loop_counter": 1,
                    "scale": 1,
                    "shift_value": 2,
                    "temp9": 1,
                    "temp_var": 1,
                    "threshold": 1
                },
                "param_1": {
                    "a": 1,
                    "base": 1,
                    "input1": 9,
                    "input_a": 1,
                    "num1": 9,
                    "value1": 5,
                    "x": 1,
                    "x1": 4
                },
                "param_2": {
                    "b": 1,
                    "exponent": 1,
                    "input2": 9,
                    "input_b": 1,
                    "num2": 9,
                    "value2": 5,
                    "y": 1,
                    "y1": 4
                },
                "param_3": {
                    "a": 1,
                    "c": 1,
                    "input3": 9,
                    "input_c": 1,
                    "num3": 9,
                    "temp1": 1,
                    "value3": 5,
                    "x2": 4
                },
                "param_4": {
                    "b": 1,
                    "d": 1,
                    "input4": 9,
                    "input_d": 1,
                    "num4": 9,
                    "temp2": 1,
                    "value4": 5,
                    "y2": 4
                },
                "uVar1": {
                    "result": 6,
                    "result1": 24,
                    "temp1": 1
                },
                "uVar10": {
                    "mul_result1": 1,
                    "result10": 6,
                    "result4": 1,
                    "result7": 3,
                    "temp3": 2,
                    "temp4": 2,
                    "temp5": 1,
                    "temp6": 1,
                    "temp8": 2,
                    "temp_result1": 1,
                    "temp_value5": 1,
                    "temp_var7": 2,
                    "temporary1": 1,
                    "u_var10": 4,
                    "y_": 1,
                    "y_high": 1
                },
                "uVar11": {
                    "input_combined1": 1,
                    "mul_result2": 1,
                    "result11": 6,
                    "result8": 3,
                    "temp4": 2,
                    "temp4_1": 1,
                    "temp5": 1,
                    "temp6": 1,
                    "temp7": 1,
                    "temp9": 2,
                    "temp_result2": 1,
                    "temp_value6": 1,
                    "temp_var8": 2,
                    "temporary2": 1,
                    "u_var11": 4,
                    "xy_mul": 1,
                    "y_low": 1
                },
                "uVar12": {
                    "result12": 6,
                    "result9": 3,
                    "temp10": 2,
                    "temp3": 1,
                    "temp5": 3,
                    "temp6": 1,
                    "temp7": 1,
                    "temp8": 1,
                    "temp_result3": 1,
                    "temp_value7": 1,
                    "temp_var6": 1,
                    "temp_var9": 2,
                    "temporary3": 1,
                    "u_var12": 4,
                    "x_sqrt": 1
                },
                "uVar13": {
                    "result10": 3,
                    "result13": 6,
                    "result5": 1,
                    "temp11": 2,
                    "temp4": 1,
                    "temp5_1": 1,
                    "temp6": 2,
                    "temp7": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_result4": 1,
                    "temp_value8": 1,
                    "temp_var10": 2,
                    "temp_var7": 1,
                    "temporary4": 1,
                    "u_var13": 4,
                    "y_sqrt": 1
                },
                "uVar3": {
                    "distance": 1,
                    "final_result": 1,
                    "result": 4,
                    "result2": 12,
                    "result3": 6,
                    "temp1": 3,
                    "updated_num1": 1,
                    "x": 1,
                    "x_diff": 1,
                    "x_diff_squared": 1
                },
                "uVar5": {
                    "mul_result_low": 1,
                    "result3": 8,
                    "result4": 2,
                    "result5": 6,
                    "temp1": 2,
                    "temp1_1": 1,
                    "temp2": 1,
                    "temp3": 3,
                    "temp4": 1,
                    "temp_var1": 1,
                    "temp_var2": 3,
                    "x_sq": 1,
                    "y_diff_squared": 1
                },
                "uVar7": {
                    "base": 1,
                    "max": 1,
                    "max_coord": 1,
                    "max_input": 1,
                    "max_num": 2,
                    "max_value": 1,
                    "result4": 6,
                    "result7": 6,
                    "temp1": 1,
                    "temp2_1": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_value2": 1,
                    "temp_var4": 2,
                    "u_var7": 1,
                    "updated_input2": 1,
                    "updated_num2_copy": 1,
                    "x_dist": 1,
                    "y_diff": 1
                },
                "uVar8": {
                    "max_num_lower": 1,
                    "result5": 4,
                    "result8": 6,
                    "temp1": 2,
                    "temp2": 1,
                    "temp3": 2,
                    "temp4": 1,
                    "temp6": 2,
                    "temp_value3": 1,
                    "temp_var4": 1,
                    "temp_var5": 2,
                    "u_var8": 4,
                    "x_high": 1,
                    "y_dist": 1
                },
                "uVar9": {
                    "max_num_upper": 1,
                    "result6": 4,
                    "result9": 6,
                    "temp2": 2,
                    "temp3": 1,
                    "temp3_1": 1,
                    "temp4": 1,
                    "temp5": 1,
                    "temp7": 2,
                    "temp_value4": 1,
                    "temp_var5": 1,
                    "temp_var6": 2,
                    "u_var9": 4,
                    "x_": 1,
                    "x_low": 1
                }
            },
            "called": [
                "FUN_0800a1bc",
                "FUN_080082d4",
                "FUN_080082d0",
                "FUN_08008640",
                "FUN_08008b24"
            ],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint calculate_square_root_08009b24(uint num1,uint num2,uint input3,uint num4)\n\n{\n  undefined4 result1;\n  int comparison_result;\n  uint result2;\n  int result4;\n  undefined4 result3;\n  int result6;\n  uint result4;\n  undefined4 result8;\n  undefined4 result9;\n  undefined8 result10;\n  undefined8 result11;\n  undefined8 result12;\n  undefined8 result13;\n  int local_var;\n  \n  num2 = num2 & 0x7fffffff;\n  num4 = num4 & 0x7fffffff;\n  result2 = num1;\n  result4 = num2;\n  if (num2 < num4) {\n    result2 = input3;\n    input3 = num1;\n    result4 = num4;\n    num4 = num2;\n  }\n  if (0x3c00000 < (int)(result4 - num4)) {\n    result2 = add_double(result2,result4,input3,num4);\n    return result2;\n  }\n  if (result4 < 0x5f300001) {\n    local_var = 0;\n  }\n  else {\n    if (0x7fefffff < result4) {\n      if ((result4 & 0xfffff | result2) != 0) {\n        result2 = add_double(result2,result4,input3,num4);\n      }\n      if ((num4 ^ 0x7ff00000 | input3) != 0) {\n        return result2;\n      }\n      return input3;\n    }\n    result4 = result4 + 0xda800000;\n    num4 = num4 + 0xda800000;\n    local_var = 600;\n  }\n  result11 = CONCAT44(result4,result2);\n  result10 = CONCAT44(num4,input3);\n  if ((int)num4 < 0x20b00000) {\n    if ((int)num4 < 0x100000) {\n      if ((num4 | input3) == 0) {\n        return result2;\n      }\n      result10 = multiply_double(input3,num4,0,0x7fd00000);\n      result11 = multiply_double(result2,result4,0,0x7fd00000);\n      local_var = local_var + -0x3fe;\n    }\n    else {\n      result4 = result4 + 0x25800000;\n      result11 = CONCAT44(result4,result2);\n      num4 = num4 + 0x25800000;\n      result10 = CONCAT44(num4,input3);\n      local_var = local_var + -600;\n    }\n  }\n  result9 = (undefined4)((ulonglong)result11 >> 0x20);\n  result8 = (undefined4)result11;\n  result6 = (int)((ulonglong)result10 >> 0x20);\n  result3 = (undefined4)result10;\n  result10 = subtract_double(result8,result9,result3,result6);\n  result4 = (int)((ulonglong)result10 >> 0x20);\n  result1 = (undefined4)result10;\n  comparison_result = compare_double_less_than(result3,result6,result1,result4);\n  if (comparison_result == 0) {\n    result10 = multiply_double(0,num4,0);\n    result11 = multiply_double(result1,result4 + -0x80000000,result1,result4);\n    result12 = add_double(result8,result9,result8,result9);\n    result12 = subtract_double((int)result12,(int)((ulonglong)result12 >> 0x20),0,result4 + 0x100000);\n    result12 = multiply_double((int)result12,(int)((ulonglong)result12 >> 0x20),result3,result6);\n    result13 = subtract_double(result3,result6,0,num4);\n    result13 = multiply_double((int)result13,(int)((ulonglong)result13 >> 0x20),0,result4 + 0x100000);\n    result12 = add_double((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                          (int)((ulonglong)result13 >> 0x20));\n    result11 = subtract_double((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                      (int)((ulonglong)result12 >> 0x20));\n    subtract_double((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n             (int)((ulonglong)result11 >> 0x20));\n    result10 = calculate_sqrt();\n  }\n  else {\n    result10 = multiply_double(0,result4,0,result4);\n    result11 = multiply_double(result3,result6 + -0x80000000,result3,result6);\n    result12 = add_double(result8,result9,0,result4);\n    result13 = subtract_double(result8,result9,0,result4);\n    result12 = multiply_double((int)result12,(int)((ulonglong)result12 >> 0x20),(int)result13,\n                      (int)((ulonglong)result13 >> 0x20));\n    result11 = subtract_double((int)result11,(int)((ulonglong)result11 >> 0x20),(int)result12,\n                      (int)((ulonglong)result12 >> 0x20));\n    subtract_double((int)result10,(int)((ulonglong)result10 >> 0x20),(int)result11,\n             (int)((ulonglong)result11 >> 0x20));\n    result10 = calculate_sqrt();\n  }\n  result2 = (uint)result10;\n  if (local_var != 0) {\n    result2 = multiply_double(result2,(int)((ulonglong)result10 >> 0x20),0,local_var * 0x100000 + 0x3ff00000);\n  }\n  return result2;\n}\n\n",
            "current_name": "calculate_square_root_08009b24",
            "entrypoint": "0x08009b24",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009b24": "calculate_square_root_08009b24",
                "__aeabi_dadd": "add_double",
                "__aeabi_dcmplt": "compare_double_less_than",
                "__ieee754_sqrt": "calculate_sqrt",
                "__muldf3": "multiply_double",
                "__subdf3": "subtract_double",
                "iVar2": "comparison_result",
                "iVar4": "result4",
                "iVar6": "result6",
                "local_3c": "local_var",
                "param_1": "num1",
                "param_2": "num2",
                "param_3": "input3",
                "param_4": "num4",
                "uVar1": "result1",
                "uVar10": "result10",
                "uVar11": "result11",
                "uVar12": "result12",
                "uVar13": "result13",
                "uVar3": "result2",
                "uVar5": "result3",
                "uVar7": "result4",
                "uVar8": "result8",
                "uVar9": "result9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_08009d78": {
            "additional_data": {
                "FUN_08009d78": {
                    "calculate": 1,
                    "calculate_cosine": 1,
                    "calculate_exponent": 1,
                    "calculate_exponential": 2,
                    "calculate_floating_point": 1,
                    "calculate_inverse_square_root": 2,
                    "calculate_modified_double": 1,
                    "calculate_power": 1,
                    "calculate_result": 7,
                    "calculate_sine": 1,
                    "calculate_square_root": 2,
                    "calculate_value": 2,
                    "process_data": 1
                },
                "__aeabi_d2iz": {
                    "convert_double_to_int": 1,
                    "double_to_integer": 1
                },
                "__aeabi_dadd": {
                    "add_doubles": 1,
                    "addition": 1
                },
                "__aeabi_dcmpeq": {
                    "compare_doubles": 1,
                    "double_equality_comparison": 1
                },
                "__aeabi_i2d": {
                    "convert_int_to_double": 1,
                    "integer_to_double": 1
                },
                "__kernel_rem_pio2": {
                    "kernel_rem_pio2": 1,
                    "remainder_pio2": 1
                },
                "__muldf3": {
                    "multiply": 1,
                    "multiply_doubles": 1
                },
                "__subdf3": {
                    "subtract_doubles": 1,
                    "subtraction": 1
                },
                "fabs": {
                    "absolute_value": 2
                },
                "iVar9": {
                    "angle": 1,
                    "angle_index": 1,
                    "error_code": 3,
                    "exponent": 1,
                    "i_var9": 1,
                    "index": 1,
                    "iteration": 1,
                    "iteration_count": 1,
                    "quotient": 1,
                    "rem_pio2": 1,
                    "rem_value": 1,
                    "result": 11,
                    "result_code": 1,
                    "return_value": 3,
                    "temp9": 1,
                    "temp_var9": 2
                },
                "local_30": {
                    "intermediate_var_30": 1,
                    "local_float3": 1,
                    "local_temp5": 1,
                    "local_value3": 2,
                    "local_var3": 4,
                    "local_var4": 1,
                    "local_var5": 8,
                    "local_var_d": 1,
                    "local_variable5": 1,
                    "rem3": 1,
                    "temp13": 1,
                    "temp30": 1,
                    "temp8": 1,
                    "temp_local5": 1,
                    "temp_var17": 1,
                    "temp_var5": 2,
                    "temp_var8": 1,
                    "temp_var_15": 1,
                    "tmp15": 1
                },
                "local_38": {
                    "intermediate_var_38": 1,
                    "local_float2": 1,
                    "local_temp4": 1,
                    "local_value2": 2,
                    "local_var2": 4,
                    "local_var3": 1,
                    "local_var4": 8,
                    "local_var_c": 1,
                    "local_variable4": 1,
                    "rem2": 1,
                    "temp12": 1,
                    "temp38": 1,
                    "temp7": 1,
                    "temp_local4": 1,
                    "temp_var16": 1,
                    "temp_var4": 2,
                    "temp_var7": 1,
                    "temp_var_14": 1,
                    "tmp14": 1
                },
                "local_40": {
                    "intermediate_var_40": 1,
                    "local_float1": 1,
                    "local_temp3": 1,
                    "local_value1": 2,
                    "local_var1": 4,
                    "local_var2": 1,
                    "local_var3": 8,
                    "local_var_b": 1,
                    "local_variable3": 1,
                    "rem1": 1,
                    "temp11": 1,
                    "temp40": 1,
                    "temp6": 1,
                    "temp_local3": 1,
                    "temp_var15": 1,
                    "temp_var3": 2,
                    "temp_var6": 1,
                    "temp_var_13": 1,
                    "tmp13": 1
                },
                "local_50": {
                    "local_result1": 2,
                    "local_temp1": 2,
                    "local_var1": 9,
                    "local_var_a": 1,
                    "local_variable1": 2,
                    "temp4": 2,
                    "temp50": 1,
                    "temp9": 1,
                    "temp_local1": 1,
                    "temp_var1": 2,
                    "temp_var12": 1,
                    "temp_var13": 2,
                    "temp_var4": 2,
                    "temp_var_11": 1,
                    "temp_var_50": 1,
                    "tmp11": 1
                },
                "param_1": {
                    "base": 3,
                    "initial_value": 1,
                    "input": 3,
                    "input1": 6,
                    "input_float": 1,
                    "input_param": 2,
                    "input_param1": 2,
                    "input_sign": 1,
                    "input_value": 8,
                    "input_value1": 2,
                    "input_value_1": 1,
                    "some_value": 1
                },
                "param_2": {
                    "exponent": 4,
                    "flags": 1,
                    "input2": 6,
                    "input_flag": 5,
                    "input_flags": 2,
                    "input_param2": 3,
                    "input_unsigned_int": 1,
                    "input_value": 3,
                    "input_value2": 2,
                    "input_value_2": 1,
                    "size": 1,
                    "value": 1,
                    "value_mask": 1
                },
                "param_3": {
                    "output": 7,
                    "output_array": 3,
                    "output_param": 3,
                    "output_result": 1,
                    "output_value": 2,
                    "output_value_array": 1,
                    "result": 9,
                    "result_array": 4,
                    "result_ptr": 1
                },
                "uStack_4c": {
                    "local_result2": 2,
                    "local_temp2": 2,
                    "local_var2": 8,
                    "local_variable2": 2,
                    "temp10": 1,
                    "temp5": 2,
                    "temp_local2": 1,
                    "temp_var13": 1,
                    "temp_var14": 2,
                    "temp_var2": 2,
                    "temp_var5": 2,
                    "temp_var_12": 1,
                    "temp_var_stack": 1,
                    "tmp12": 1,
                    "u_stack_4c": 1
                },
                "uVar1": {
                    "result1": 4,
                    "result_high": 1,
                    "temp1": 8,
                    "temp_var1": 8,
                    "temp_var_1": 1,
                    "tmp1": 1,
                    "val1": 1,
                    "var1": 4,
                    "variable1": 1
                },
                "uVar10": {
                    "calculation1": 1,
                    "result1": 3,
                    "temp1": 2,
                    "temp10": 4,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_result": 1,
                    "temp_value": 2,
                    "temp_var": 1,
                    "temp_var1": 4,
                    "temp_var10": 7,
                    "temp_var6": 1,
                    "temp_var9": 1,
                    "temp_var_8": 1,
                    "tmp8": 1
                },
                "uVar11": {
                    "calculation2": 1,
                    "result2": 3,
                    "temp10": 1,
                    "temp11": 4,
                    "temp2": 2,
                    "temp9": 1,
                    "temp_result1": 1,
                    "temp_value1": 1,
                    "temp_value2": 1,
                    "temp_var10": 1,
                    "temp_var11": 7,
                    "temp_var2": 5,
                    "temp_var7": 1,
                    "temp_var_9": 1,
                    "tmp9": 1
                },
                "uVar12": {
                    "calculation3": 1,
                    "result3": 2,
                    "temp10": 1,
                    "temp11": 1,
                    "temp12": 4,
                    "temp3": 2,
                    "temp_result2": 1,
                    "temp_value2": 1,
                    "temp_value3": 1,
                    "temp_var": 1,
                    "temp_var11": 1,
                    "temp_var12": 7,
                    "temp_var3": 5,
                    "temp_var8": 1,
                    "temp_var_10": 1,
                    "tmp10": 1
                },
                "uVar2": {
                    "result2": 4,
                    "result_low": 1,
                    "temp2": 8,
                    "temp_var2": 8,
                    "temp_var_2": 1,
                    "tmp2": 1,
                    "val2": 1,
                    "var2": 4
                },
                "uVar3": {
                    "result3": 3,
                    "temp1": 1,
                    "temp3": 8,
                    "temp_var3": 8,
                    "temp_var_3": 1,
                    "tmp3": 1,
                    "val3": 1,
                    "var3": 4,
                    "variable3": 1
                },
                "uVar4": {
                    "result4": 3,
                    "temp2": 1,
                    "temp4": 8,
                    "temp_var4": 8,
                    "temp_var_4": 1,
                    "tmp4": 1,
                    "val4": 1,
                    "var4": 4
                },
                "uVar5": {
                    "result5": 3,
                    "temp3": 1,
                    "temp5": 8,
                    "temp_var5": 8,
                    "temp_var_5": 1,
                    "tmp5": 1,
                    "val5": 1,
                    "var5": 4,
                    "variable5": 1
                },
                "uVar6": {
                    "result6": 3,
                    "temp4": 1,
                    "temp6": 8,
                    "temp_var6": 8,
                    "temp_var_6": 1,
                    "tmp6": 1,
                    "val6": 1,
                    "var6": 4
                },
                "uVar7": {
                    "result7": 3,
                    "temp5": 1,
                    "temp7": 8,
                    "temp_var7": 8,
                    "temp_var_7": 1,
                    "tmp7": 1,
                    "val7": 1,
                    "var7": 4
                },
                "uVar8": {
                    "abs_exponent": 1,
                    "abs_flags": 1,
                    "abs_input2": 2,
                    "abs_input_value": 1,
                    "adjusted_value": 1,
                    "flag": 2,
                    "flag_value": 1,
                    "masked_input_value": 1,
                    "masked_value": 1,
                    "mod_value": 1,
                    "modified_flag": 2,
                    "modified_input_param2": 1,
                    "normalized_exponent": 1,
                    "temp6": 1,
                    "temp8": 5,
                    "temp_var8": 3,
                    "u_result": 1,
                    "u_var8": 3,
                    "unsigned_int": 1,
                    "updated_param2": 1
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_0800b2cc",
                "FUN_0800856c",
                "FUN_08008b10",
                "FUN_0800a5a0",
                "FUN_080082d0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nint calculate_result_08009d78(undefined4 input_value,uint input2,undefined8 *result)\n\n{\n  undefined4 temp_var1;\n  undefined4 temp_var2;\n  undefined4 temp3;\n  undefined4 temp_var4;\n  undefined4 temp_var5;\n  undefined4 temp6;\n  undefined4 temp_var7;\n  uint temp8;\n  int result;\n  undefined8 temp_var10;\n  undefined8 temp_var11;\n  undefined8 temp_var12;\n  undefined4 local_var1;\n  undefined4 local_var2;\n  undefined8 local_var3;\n  undefined8 local_var4;\n  undefined8 local_var5;\n  \n  temp8 = input2 & 0x7fffffff;\n  if (temp8 < 0x3fe921fc) {\n    *(undefined4 *)result = input_value;\n    *(uint *)((int)result + 4) = input2;\n    *(undefined4 *)(result + 1) = 0;\n    *(undefined4 *)((int)result + 0xc) = 0;\n    return 0;\n  }\n  if (temp8 < 0x4002d97c) {\n    if ((int)input2 < 1) {\n      temp_var10 = addition(input_value,input2,0x54400000,0x3ff921fb);\n      temp3 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n      temp_var1 = (undefined4)temp_var10;\n      if (temp8 != 0x3ff921fb) {\n        temp_var10 = addition(temp_var1,temp3,0x1a626331,0x3dd0b461);\n        *result = temp_var10;\n        temp_var10 = subtraction(temp_var1,temp3);\n        temp_var10 = addition((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x1a626331,0x3dd0b461);\n        result[1] = temp_var10;\n        return -1;\n      }\n      temp_var10 = addition(temp_var1,temp3,0x1a600000,0x3dd0b461);\n      temp_var1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n      temp_var11 = addition((int)temp_var10,temp_var1,0x2e037073,0x3ba3198a);\n      *result = temp_var11;\n      temp_var10 = subtraction((int)temp_var10,temp_var1);\n      temp_var10 = addition((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x2e037073,0x3ba3198a);\n      result[1] = temp_var10;\n      return -1;\n    }\n    temp_var10 = subtraction();\n    temp3 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    temp_var1 = (undefined4)temp_var10;\n    if (temp8 != 0x3ff921fb) {\n      temp_var10 = subtraction(temp_var1,temp3,0x1a626331,0x3dd0b461);\n      *result = temp_var10;\n      temp_var10 = subtraction(temp_var1,temp3);\n      temp_var10 = subtraction((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x1a626331,0x3dd0b461);\n      result[1] = temp_var10;\n      return 1;\n    }\n    temp_var10 = subtraction(temp_var1,temp3,0x1a600000,0x3dd0b461);\n    temp_var1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    temp_var11 = subtraction((int)temp_var10,temp_var1,0x2e037073,0x3ba3198a);\n    *result = temp_var11;\n    temp_var10 = subtraction((int)temp_var10,temp_var1);\n    temp_var10 = subtraction((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0x2e037073,0x3ba3198a);\n    result[1] = temp_var10;\n    return 1;\n  }\n  if (0x413921fb < temp8) {\n    if (0x7fefffff < temp8) {\n      temp_var10 = subtraction(input_value,input2,input_value,input2);\n      result[1] = temp_var10;\n      *result = temp_var10;\n      return 0;\n    }\n    result = ((int)temp8 >> 0x14) + -0x416;\n    convert_double_to_int();\n    local_var3 = integer_to_double();\n    temp_var10 = subtraction(input_value,temp8 + result * -0x100000,(int)local_var3,\n                      (int)((ulonglong)local_var3 >> 0x20));\n    temp_var10 = multiply_doubles((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0,0x41700000);\n    convert_double_to_int();\n    local_var4 = integer_to_double();\n    temp_var10 = subtraction((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20));\n    local_var5 = multiply_doubles((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0,0x41700000);\n    double_equality_comparison((int)local_var5,(int)((ulonglong)local_var5 >> 0x20),0,0);\n    result = kernel_rem_pio2(&local_var3,result,result);\n    if (-1 < (int)input2) {\n      return result;\n    }\n    *(int *)((int)result + 4) = *(int *)((int)result + 4) + -0x80000000;\n    *(int *)((int)result + 0xc) = *(int *)((int)result + 0xc) + -0x80000000;\n    return -result;\n  }\n  temp_var10 = absolute_value();\n  temp3 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n  temp_var11 = multiply_doubles((int)temp_var10,temp3,0x6dc9c883,0x3fe45f30);\n  addition((int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20),0,0x3fe00000);\n  result = convert_double_to_int();\n  temp_var11 = integer_to_double();\n  temp_var4 = (undefined4)((ulonglong)temp_var11 >> 0x20);\n  temp_var1 = (undefined4)temp_var11;\n  temp_var11 = multiply_doubles(temp_var1,temp_var4,0x54400000,0x3ff921fb);\n  temp_var10 = subtraction((int)temp_var10,temp3,(int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20));\n  temp_var5 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n  temp3 = (undefined4)temp_var10;\n  temp_var11 = multiply_doubles(temp_var1,temp_var4,0x1a626331,0x3dd0b461);\n  if ((0x1f < result) || (*(uint *)(&DAT_0800be98 + (result + -1) * 4) == temp8)) {\n    temp_var12 = subtraction(temp3,temp_var5,(int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20));\n    if ((int)((temp8 >> 0x14) - ((uint)((int)((ulonglong)temp_var12 >> 0x20) << 1) >> 0x15)) < 0x11)\n    goto LAB_0800a0ce;\n    temp_var11 = multiply_doubles(temp_var1,temp_var4,0x1a600000,0x3dd0b461);\n    temp6 = (undefined4)((ulonglong)temp_var11 >> 0x20);\n    temp_var10 = subtraction(temp3,temp_var5,(int)temp_var11,temp6);\n    temp_var7 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    temp_var2 = (undefined4)temp_var10;\n    temp_var12 = subtraction(temp3,temp_var5,temp_var2,temp_var7);\n    temp_var11 = subtraction((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,temp6);\n    temp_var12 = multiply_doubles(temp_var1,temp_var4,0x2e037073,0x3ba3198a);\n    temp_var11 = subtraction((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,\n                      (int)((ulonglong)temp_var11 >> 0x20));\n    temp_var12 = subtraction(temp_var2,temp_var7,(int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20));\n    if ((int)(((int)temp8 >> 0x14) - ((uint)((int)((ulonglong)temp_var12 >> 0x20) << 1) >> 0x15)) < 0x32\n       ) goto LAB_0800a0ce;\n    temp_var11 = multiply_doubles(temp_var1,temp_var4,0x2e000000,0x3ba3198a);\n    temp3 = (undefined4)((ulonglong)temp_var11 >> 0x20);\n    temp_var10 = subtraction(temp_var2,temp_var7,(int)temp_var11,temp3);\n    temp_var12 = subtraction(temp_var2,temp_var7);\n    temp_var11 = subtraction((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,temp3);\n    temp_var12 = multiply_doubles(temp_var1,temp_var4,0x252049c1,0x397b839a);\n    temp_var11 = subtraction((int)temp_var12,(int)((ulonglong)temp_var12 >> 0x20),(int)temp_var11,\n                      (int)((ulonglong)temp_var11 >> 0x20));\n  }\n  temp_var12 = subtraction((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_var11,\n                    (int)((ulonglong)temp_var11 >> 0x20));\nLAB_0800a0ce:\n  local_var2 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n  local_var1 = (undefined4)temp_var10;\n  *result = temp_var12;\n  temp_var10 = subtraction(local_var1,local_var2);\n  temp_var10 = subtraction((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_var11,\n                    (int)((ulonglong)temp_var11 >> 0x20));\n  result[1] = temp_var10;\n  if ((int)input2 < 0) {\n    *(int *)result = (int)temp_var12;\n    *(int *)((int)result + 4) = (int)((ulonglong)temp_var12 >> 0x20) + -0x80000000;\n    *(int *)(result + 1) = (int)temp_var10;\n    *(int *)((int)result + 0xc) = (int)((ulonglong)temp_var10 >> 0x20) + -0x80000000;\n    result = -result;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_result_08009d78",
            "entrypoint": "0x08009d78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_08009d78": "calculate_result_08009d78",
                "__aeabi_d2iz": "convert_double_to_int",
                "__aeabi_dadd": "addition",
                "__aeabi_dcmpeq": "double_equality_comparison",
                "__aeabi_i2d": "integer_to_double",
                "__kernel_rem_pio2": "kernel_rem_pio2",
                "__muldf3": "multiply_doubles",
                "__subdf3": "subtraction",
                "fabs": "absolute_value",
                "iVar9": "result",
                "local_30": "local_var5",
                "local_38": "local_var4",
                "local_40": "local_var3",
                "local_50": "local_var1",
                "param_1": "input_value",
                "param_2": "input2",
                "param_3": "result",
                "uStack_4c": "local_var2",
                "uVar1": "temp_var1",
                "uVar10": "temp_var10",
                "uVar11": "temp_var11",
                "uVar12": "temp_var12",
                "uVar2": "temp_var2",
                "uVar3": "temp3",
                "uVar4": "temp_var4",
                "uVar5": "temp_var5",
                "uVar6": "temp6",
                "uVar7": "temp_var7",
                "uVar8": "temp8"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a1bc": {
            "additional_data": {
                "FUN_0800a1bc": {
                    "calculate_coefficient": 1,
                    "calculate_div_add": 1,
                    "calculate_sum": 20,
                    "calculate_sum_fraction": 1,
                    "calculate_sum_recursive": 1,
                    "calculate_sum_with_conditions": 2,
                    "calculate_value": 1,
                    "calculation_function": 1,
                    "compute_result": 1,
                    "compute_sum": 1,
                    "perform_calculation": 1
                },
                "__aeabi_dadd": {
                    "add": 1,
                    "add_double": 1
                },
                "__divdf3": {
                    "divide": 1,
                    "divide_double": 1
                },
                "__muldf3": {
                    "multiply": 1,
                    "multiply_double": 1
                },
                "__subdf3": {
                    "subtract": 1,
                    "subtract_double": 1
                },
                "iVar10": {
                    "count": 1,
                    "count2": 1,
                    "counter": 6,
                    "counter2": 1,
                    "dividend_shift_counter": 1,
                    "i": 1,
                    "iteration": 2,
                    "loop_count": 1,
                    "loop_counter": 2,
                    "subloop_count": 1,
                    "temp10": 4,
                    "temp11": 1,
                    "temp8": 1,
                    "temp9": 3,
                    "temp_9": 1,
                    "temp_var": 1,
                    "temp_var10": 3
                },
                "iVar2": {
                    "count": 1,
                    "count1": 1,
                    "counter1": 1,
                    "i": 1,
                    "iteration_count": 1,
                    "iteration_counter": 1,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "shift_counter": 1,
                    "temp": 5,
                    "temp1": 2,
                    "temp2": 4,
                    "temp3": 1,
                    "temp_1": 1,
                    "temp_int": 1,
                    "temp_int1": 1,
                    "temp_var": 2,
                    "temp_var2": 4
                },
                "param_1": {
                    "dividend": 3,
                    "input1": 11,
                    "input_1": 2,
                    "input_value1": 1,
                    "multiplicand": 1,
                    "num1": 11,
                    "number1": 1,
                    "numerator": 1
                },
                "param_2": {
                    "denominator": 1,
                    "divisor": 3,
                    "input2": 11,
                    "input_2": 2,
                    "input_value2": 1,
                    "multiplier": 1,
                    "num2": 11,
                    "number2": 1
                },
                "uVar1": {
                    "mask": 1,
                    "quotient": 4,
                    "remainder": 3,
                    "result": 7,
                    "result1": 1,
                    "result_1": 1,
                    "shift_amount": 1,
                    "shifted_input": 1,
                    "shifted_input2": 1,
                    "shifted_value": 1,
                    "temp1": 5,
                    "temp_input": 1,
                    "temp_var1": 4
                },
                "uVar11": {
                    "adjusted_input": 1,
                    "divisor": 1,
                    "quotient_difference": 1,
                    "quotient_temp": 1,
                    "remainder": 1,
                    "shifted_difference": 1,
                    "shifted_input2": 1,
                    "shifted_subtraction_result": 1,
                    "subloop_var1": 1,
                    "temp10": 3,
                    "temp11": 4,
                    "temp12": 1,
                    "temp6": 1,
                    "temp8": 1,
                    "temp9": 1,
                    "temp_10": 1,
                    "temp_quotient": 1,
                    "temp_result": 1,
                    "temp_sum2": 1,
                    "temp_u_int11": 1,
                    "temp_u_int5": 1,
                    "temp_var11": 4,
                    "temp_var9": 1
                },
                "uVar12": {
                    "high_bit_index": 1,
                    "quotient_shift_counter": 1,
                    "result": 1,
                    "shift": 3,
                    "shift_amount": 5,
                    "shift_count": 4,
                    "temp10": 1,
                    "temp11": 2,
                    "temp12": 4,
                    "temp13": 1,
                    "temp_11": 1,
                    "temp_u_int12": 1,
                    "temp_var10": 1,
                    "temp_var12": 4,
                    "temp_var4": 1
                },
                "uVar13": {
                    "mul_result": 2,
                    "multiplication_result": 3,
                    "multiply_result": 1,
                    "product": 5,
                    "result": 1,
                    "result_float": 1,
                    "temp11": 1,
                    "temp12": 2,
                    "temp13": 4,
                    "temp14": 1,
                    "temp7": 1,
                    "temp9": 1,
                    "temp_12": 1,
                    "temp_result": 1,
                    "temp_u_int13": 1,
                    "temp_var13": 4,
                    "temp_var5": 1
                },
                "uVar14": {
                    "temp_var8": 1
                },
                "uVar15": {
                    "temp_var9": 1
                },
                "uVar16": {
                    "temp_var10": 1
                },
                "uVar3": {
                    "mask": 3,
                    "quotient_remainder": 1,
                    "remainder": 1,
                    "shifted_sum": 1,
                    "shifted_value": 1,
                    "temp": 1,
                    "temp1": 4,
                    "temp2": 3,
                    "temp3": 4,
                    "temp4": 1,
                    "temp_2": 1,
                    "temp_sum": 1,
                    "temp_u_int": 2,
                    "temp_var1": 1,
                    "temp_var2": 2,
                    "temp_var3": 4
                },
                "uVar4": {
                    "div_result": 1,
                    "divided_value": 1,
                    "quotient_upper": 1,
                    "result": 1,
                    "sub_result": 1,
                    "temp2": 5,
                    "temp3": 3,
                    "temp4": 4,
                    "temp5": 1,
                    "temp_3": 1,
                    "temp_div": 1,
                    "temp_float": 1,
                    "temp_u_int2": 1,
                    "temp_u_int4": 1,
                    "temp_var": 1,
                    "temp_var2": 1,
                    "temp_var3": 2,
                    "temp_var4": 4
                },
                "uVar5": {
                    "bit_shift": 1,
                    "bit_shift_count": 1,
                    "dividend_shifted": 1,
                    "mask": 1,
                    "shift": 2,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shifted_input": 2,
                    "shifted_input2": 1,
                    "shifted_sum2": 1,
                    "temp3": 3,
                    "temp4": 3,
                    "temp5": 4,
                    "temp6": 1,
                    "temp_4": 1,
                    "temp_u_int5": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var5": 4
                },
                "uVar6": {
                    "bit": 2,
                    "counter": 1,
                    "divisor_shifted": 1,
                    "mask": 2,
                    "shift_count": 1,
                    "shift_counter": 1,
                    "shifted_count": 1,
                    "shifted_input3": 1,
                    "sign_check": 1,
                    "temp4": 2,
                    "temp5": 3,
                    "temp6": 4,
                    "temp7": 1,
                    "temp_5": 1,
                    "temp_mask": 1,
                    "temp_u_int6": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var6": 4
                },
                "uVar7": {
                    "dividend": 1,
                    "modified_input": 1,
                    "quotient_sum": 1,
                    "remainder": 1,
                    "remaining_value": 1,
                    "result": 2,
                    "result2": 1,
                    "sum": 3,
                    "temp5": 2,
                    "temp6": 3,
                    "temp7": 4,
                    "temp8": 1,
                    "temp_6": 1,
                    "temp_sum": 1,
                    "temp_u_int7": 1,
                    "temp_value": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 4
                },
                "uVar8": {
                    "diff": 1,
                    "difference": 1,
                    "dividend_difference": 1,
                    "divisor": 1,
                    "remaining": 1,
                    "shifted_difference": 1,
                    "shifted_remainder": 1,
                    "temp4": 1,
                    "temp6": 2,
                    "temp7": 3,
                    "temp8": 4,
                    "temp9": 1,
                    "temp_7": 1,
                    "temp_diff": 2,
                    "temp_sum": 1,
                    "temp_u_int3": 1,
                    "temp_u_int8": 1,
                    "temp_value": 1,
                    "temp_var6": 1,
                    "temp_var7": 1,
                    "temp_var8": 4
                },
                "uVar9": {
                    "dividend": 1,
                    "dividend_remainder": 1,
                    "input_value1": 1,
                    "quotient": 1,
                    "shifted_input": 1,
                    "shifted_input1": 1,
                    "shifted_input4": 1,
                    "temp1": 1,
                    "temp10": 1,
                    "temp3": 2,
                    "temp5": 1,
                    "temp7": 2,
                    "temp8": 3,
                    "temp9": 4,
                    "temp_8": 1,
                    "temp_dividend": 1,
                    "temp_u_int4": 1,
                    "temp_u_int9": 1,
                    "temp_var7": 1,
                    "temp_var8": 1,
                    "temp_var9": 4
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008894",
                "FUN_080082d0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080098d0",
                "FUN_08009b24"
            ],
            "code": "\nuint calculate_sum_with_conditions_0800a1bc(uint num1,uint num2)\n\n{\n  uint result;\n  int temp;\n  uint temp3;\n  undefined4 temp2;\n  uint temp5;\n  uint temp_var6;\n  uint temp_var7;\n  uint temp_var8;\n  uint temp9;\n  int counter;\n  uint temp11;\n  uint shift_amount;\n  undefined8 product;\n  \n  if ((~num2 & 0x7ff00000) == 0) {\n    product = multiply_double(num1,num2,num1,num2);\n    temp_var7 = __aeabi_dadd((int)product,(int)((ulonglong)product >> 0x20),num1,num2);\n    return temp_var7;\n  }\n  if ((int)num2 < 1) {\n    if ((num2 & 0x7fffffff | num1) == 0) {\n      return num1;\n    }\n    if (num2 != 0) {\n      product = subtract_double(num1,num2,num1);\n      temp2 = (undefined4)((ulonglong)product >> 0x20);\n      temp_var7 = divide((int)product,temp2,(int)product,temp2);\n      return temp_var7;\n    }\n    do {\n      temp9 = num1;\n      temp_var7 = temp9 >> 0xb;\n      num2 = num2 - 0x15;\n      num1 = temp9 << 0x15;\n    } while (temp_var7 == 0);\n    result = num2;\n    if (-1 < (int)temp9) goto LAB_0800a290;\n    shift_amount = 0x20;\n    temp5 = 0xffffffff;\n    temp9 = num1;\n  }\n  else {\n    result = (int)num2 >> 0x14;\n    temp_var7 = num2;\n    temp9 = num1;\n    if (result != 0) goto LAB_0800a1da;\nLAB_0800a290:\n    temp9 = 0;\n    shift_amount = temp_var7;\n    do {\n      temp5 = temp9;\n      temp_var7 = shift_amount << 1;\n      counter = shift_amount << 0xc;\n      temp9 = temp5 + 1;\n      shift_amount = temp_var7;\n    } while (-1 < counter);\n    shift_amount = 0x20 - temp9;\n    num2 = result;\n    temp9 = num1 << (temp9 & 0xff);\n  }\n  temp_var7 = num1 >> (shift_amount & 0xff) | temp_var7;\n  result = num2 - temp5;\nLAB_0800a1da:\n  temp_var7 = temp_var7 & 0xfffff | 0x100000;\n  if (-1 < (int)(result << 0x1f)) {\n    temp_var7 = temp_var7 * 2 - ((int)temp9 >> 0x1f);\n    temp9 = temp9 << 1;\n  }\n  shift_amount = 0;\n  temp_var7 = temp_var7 * 2 - ((int)temp9 >> 0x1f);\n  temp9 = temp9 << 1;\n  result = 0;\n  counter = 0x16;\n  temp5 = 0x200000;\n  do {\n    temp = result + temp5;\n    if (temp <= (int)temp_var7) {\n      temp_var7 = temp_var7 - temp;\n      result = temp + temp5;\n      shift_amount = shift_amount + temp5;\n    }\n    counter = counter + -1;\n    temp_var7 = temp_var7 * 2 - ((int)temp9 >> 0x1f);\n    temp5 = temp5 >> 1;\n    temp9 = temp9 << 1;\n  } while (counter != 0);\n  temp = 0x20;\n  temp_var6 = 0x80000000;\n  counter = 0;\n  temp5 = 0;\n  do {\n    temp3 = temp_var6 + counter;\n    temp11 = result;\n    if ((int)result < (int)temp_var7) {\n      if ((int)temp3 < 0) {\nLAB_0800a26a:\n        if (-1 < (int)(temp3 + temp_var6)) {\n          temp11 = result + 1;\n        }\n      }\n      temp_var8 = temp_var7 - result;\n      result = temp11;\n      if (temp9 < temp3) {\n        temp_var8 = temp_var8 - 1;\n      }\nLAB_0800a262:\n      counter = temp3 + temp_var6;\n      temp9 = temp9 - temp3;\n      temp5 = temp5 + temp_var6;\n      temp_var7 = temp_var8;\n    }\n    else if ((temp_var7 == result) && (temp3 <= temp9)) {\n      if ((int)temp3 < 0) goto LAB_0800a26a;\n      temp_var8 = 0;\n      result = temp_var7;\n      goto LAB_0800a262;\n    }\n    temp = temp + -1;\n    temp_var6 = temp_var6 >> 1;\n    temp_var7 = temp_var7 * 2 - ((int)temp9 >> 0x1f);\n    temp9 = temp9 << 1;\n    if (temp == 0) {\n      if ((temp_var7 | temp9) == 0) {\n        temp5 = temp5 >> 1;\n      }\n      else if (temp5 == 0xffffffff) {\n        shift_amount = shift_amount + 1;\n        temp5 = 0;\n      }\n      else {\n        temp5 = temp5 + 1 >> 1;\n      }\n      if ((shift_amount & 1) != 0) {\n        temp5 = temp5 | 0x80000000;\n      }\n      return temp5;\n    }\n  } while( true );\n}\n\n",
            "current_name": "calculate_sum_with_conditions_0800a1bc",
            "entrypoint": "0x0800a1bc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a1bc": "calculate_sum_with_conditions_0800a1bc",
                "__divdf3": "divide",
                "__muldf3": "multiply_double",
                "__subdf3": "subtract_double",
                "iVar10": "counter",
                "iVar2": "temp",
                "param_1": "num1",
                "param_2": "num2",
                "uVar1": "result",
                "uVar11": "temp11",
                "uVar12": "shift_amount",
                "uVar13": "product",
                "uVar3": "temp3",
                "uVar4": "temp2",
                "uVar5": "temp5",
                "uVar6": "temp_var6",
                "uVar7": "temp_var7",
                "uVar8": "temp_var8",
                "uVar9": "temp9"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a348": {
            "additional_data": {
                "FUN_0800a348": {
                    "calculate": 1,
                    "calculate_approximation": 1,
                    "calculate_derivative": 1,
                    "calculate_function": 1,
                    "calculate_polynomial_approximation": 1,
                    "calculate_result": 12,
                    "calculate_something": 2,
                    "calculate_sqrt": 2,
                    "calculate_square_root": 4,
                    "calculate_unbiased_product": 1,
                    "calculate_value": 4
                },
                "iStack_8": {
                    "temp_var6": 1
                },
                "iVar1": {
                    "check_result": 1,
                    "conversion_result": 5,
                    "converted_input": 1,
                    "converted_val": 1,
                    "int_value": 1,
                    "is_valid": 1,
                    "is_zero": 2,
                    "result": 10,
                    "result1": 3,
                    "result_as_integer": 1,
                    "temp": 1,
                    "temp_var1": 1
                },
                "iVar2": {
                    "temp_var5": 1
                },
                "iVar3": {
                    "temp_var3": 1
                },
                "local_28": {
                    "final_value3": 1,
                    "local_result3": 1,
                    "local_var3": 1,
                    "mul_result_low": 1,
                    "muldf3_result_low": 1,
                    "result2": 1,
                    "result2_high": 1,
                    "result6": 1,
                    "result_1_lower": 1,
                    "result_3": 1,
                    "result_low": 1,
                    "sub_result2_low": 1,
                    "sub_result3": 2,
                    "sub_result_high2": 1,
                    "temp3": 2,
                    "temp5": 1,
                    "temp6": 3,
                    "temp_3": 3,
                    "temp_result_low": 2,
                    "temp_result_lower": 1,
                    "temp_var3": 3,
                    "tmp_var3": 1
                },
                "local_30": {
                    "final_result": 1,
                    "final_result_low": 1,
                    "final_value1": 1,
                    "local_result1": 1,
                    "local_var1": 1,
                    "new_result_low": 1,
                    "result1": 1,
                    "result1_high": 1,
                    "result4": 1,
                    "result_1": 2,
                    "result_low_temp": 1,
                    "sub_result1": 2,
                    "sub_result_high": 1,
                    "sub_result_low": 2,
                    "subdf3_result_low": 1,
                    "temp1": 2,
                    "temp3": 1,
                    "temp4": 3,
                    "temp_1": 3,
                    "temp_var1": 3,
                    "tmp_var1": 1
                },
                "param_1": {
                    "base": 3,
                    "input": 3,
                    "input1": 9,
                    "input_1": 8,
                    "input_param": 1,
                    "input_value": 3,
                    "value": 1,
                    "value1": 2,
                    "x": 1
                },
                "param_2": {
                    "exponent": 3,
                    "input2": 9,
                    "input_2": 8,
                    "input_flag": 1,
                    "input_mask": 1,
                    "input_param": 1,
                    "input_value": 1,
                    "num": 1,
                    "power": 1,
                    "value": 2,
                    "value2": 2,
                    "y": 1
                },
                "param_3": {
                    "additional_param_1": 1,
                    "constant1": 2,
                    "input3": 9,
                    "input_3": 8,
                    "operand1": 1,
                    "param1": 1,
                    "param3": 2,
                    "param_3": 4,
                    "value3": 2,
                    "z": 1
                },
                "param_4": {
                    "additional_param_2": 1,
                    "constant2": 2,
                    "input4": 9,
                    "input_4": 8,
                    "operand2": 1,
                    "param2": 1,
                    "param4": 2,
                    "param_4": 4,
                    "value4": 2,
                    "w": 1
                },
                "spB0": {
                    "temp_var4": 1
                },
                "uStackFilled": {
                    "temp_result6": 1
                },
                "uStack_18": {
                    "temp_var2": 1
                },
                "uStack_20": {
                    "temp6": 1
                },
                "uStack_24": {
                    "final_result_lower": 1,
                    "final_value4": 1,
                    "local_result4": 1,
                    "local_var4": 1,
                    "mul_result_high": 1,
                    "muldf3_result_high": 1,
                    "result2_low": 1,
                    "result7": 1,
                    "result_4": 1,
                    "result_high": 1,
                    "sub_result2_high": 1,
                    "sub_result4": 2,
                    "sub_result_low2": 1,
                    "temp4": 2,
                    "temp6": 1,
                    "temp7": 3,
                    "temp_4": 3,
                    "temp_result_high": 2,
                    "temp_var4": 3,
                    "tmp_var4": 1,
                    "var_24": 1
                },
                "uStack_2c": {
                    "final_result_high": 1,
                    "final_value2": 1,
                    "local_result2": 1,
                    "local_var2": 1,
                    "new_result_high": 1,
                    "result1_low": 1,
                    "result5": 1,
                    "result_2": 1,
                    "result_high_temp": 1,
                    "sub_result2": 2,
                    "sub_result_high": 2,
                    "sub_result_low": 1,
                    "subdf3_result_high": 1,
                    "temp2": 2,
                    "temp4": 1,
                    "temp5": 3,
                    "temp_2": 3,
                    "temp_result_upper": 1,
                    "temp_var2": 3,
                    "tmp_var2": 1,
                    "var_2c": 1
                },
                "uVar10": {
                    "temp_result7": 1
                },
                "uVar11": {
                    "temp_result8": 1
                },
                "uVar12": {
                    "final_result": 1
                },
                "uVar2": {
                    "mul_low": 1,
                    "mul_low_result": 1,
                    "mul_result2_high": 1,
                    "mul_result_low": 1,
                    "result1": 2,
                    "result1_upper": 1,
                    "result2": 3,
                    "result_32bit": 1,
                    "result_high": 1,
                    "result_lo": 2,
                    "result_low": 11,
                    "result_lower": 3,
                    "temp1": 1,
                    "value_1": 1
                },
                "uVar3": {
                    "mul_high": 1,
                    "mul_high_result": 1,
                    "mul_result2_low": 1,
                    "mul_result_high": 1,
                    "result1_lower": 1,
                    "result2": 2,
                    "result3": 3,
                    "result_32bit_lower": 1,
                    "result_hi": 2,
                    "result_high": 11,
                    "result_low": 1,
                    "result_upper": 3,
                    "temp2": 1,
                    "value_2": 1
                },
                "uVar4": {
                    "abs_exponent": 1,
                    "abs_input2": 5,
                    "abs_input_2": 3,
                    "abs_input_flag": 1,
                    "abs_num": 1,
                    "abs_power": 1,
                    "abs_value": 4,
                    "abs_value_2": 1,
                    "abs_y": 1,
                    "absolute_value": 1,
                    "masked_input": 1,
                    "modified_input_2": 1,
                    "modified_input_param": 1,
                    "normalized_input2": 1,
                    "param_2_positive": 1,
                    "positive_exponent": 1,
                    "temp": 2,
                    "temp_input": 1,
                    "u_var4": 1,
                    "unsigned_input_2": 1
                },
                "uVar5": {
                    "intermediate_result_low": 1,
                    "intermediate_value1": 1,
                    "mul_result": 7,
                    "mul_result1": 4,
                    "mul_result1_high": 1,
                    "mul_result_high": 1,
                    "mul_result_low": 1,
                    "product_high": 1,
                    "result_1": 1,
                    "temp1": 3,
                    "temp_long1": 1,
                    "temp_result": 6,
                    "temp_result1": 2
                },
                "uVar6": {
                    "calc_result": 1,
                    "final_result": 5,
                    "final_result_low": 2,
                    "final_result_lower": 1,
                    "final_result_upper": 1,
                    "intermediate_result_high": 1,
                    "intermediate_value2": 1,
                    "mul_result1_low": 1,
                    "mul_result2": 4,
                    "mul_result_high": 2,
                    "mul_result_low": 1,
                    "product_low": 1,
                    "result_2": 1,
                    "temp2": 3,
                    "temp_long2": 1,
                    "temp_result": 2,
                    "temp_result2": 2
                },
                "uVar7": {
                    "final_result": 1,
                    "final_result_high": 2,
                    "final_result_upper": 1,
                    "intermediate_value3": 1,
                    "mul_param_result": 1,
                    "mul_result": 2,
                    "mul_result2": 4,
                    "mul_result3": 5,
                    "mul_result_2": 1,
                    "mul_result_low": 1,
                    "mul_result_sum": 1,
                    "muldf3_result": 1,
                    "result_3": 1,
                    "temp3": 3,
                    "temp_input_mult": 1,
                    "temp_long3": 1,
                    "temp_result3": 2
                },
                "uVar8": {
                    "comp_result": 1,
                    "temp5": 1,
                    "temp_result4": 1
                },
                "uVar9": {
                    "temp_result5": 1
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_080082d0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nundefined4 calculate_result_0800a348(undefined4 input1,uint input2,undefined4 input3,undefined4 input4)\n\n{\n  int result;\n  undefined4 result_low;\n  undefined4 result_high;\n  uint abs_input2;\n  undefined8 mul_result;\n  undefined8 final_result;\n  undefined8 mul_result3;\n  undefined4 temp_1;\n  undefined4 temp_var2;\n  undefined4 temp_var3;\n  undefined4 temp_var4;\n  \n  abs_input2 = input2 & 0x7fffffff;\n  if (abs_input2 < 0x3e400000) {\n    result = __aeabi_d2iz();\n    if (result == 0) {\n      return 0;\n    }\n    mul_result = __muldf3(input1,input2,input1,input2);\n    result_high = (undefined4)((ulonglong)mul_result >> 0x20);\n    result_low = (undefined4)mul_result;\n    final_result = __muldf3(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n  }\n  else {\n    mul_result = __muldf3(input1,input2,input1,input2);\n    result_high = (undefined4)((ulonglong)mul_result >> 0x20);\n    result_low = (undefined4)mul_result;\n    final_result = __muldf3(result_low,result_high,0xbe8838d4,0xbda8fae9);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0xbdb4b1c4,0x3e21ee9e);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),0x809c52ad,0x3e927e4f);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0x19cb1590,0x3efa01a0);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),0x16c15177,0x3f56c16c);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    final_result = __aeabi_dadd((int)final_result,(int)((ulonglong)final_result >> 0x20),0x5555554c,0x3fa55555);\n    final_result = __muldf3((int)final_result,(int)((ulonglong)final_result >> 0x20),result_low,result_high);\n    if (0x3fd33332 < abs_input2) {\n      if (abs_input2 < 0x3fe90001) {\n        result = abs_input2 - 0x200000;\n        mul_result = __subdf3(0,0x3ff00000,0,result);\n      }\n      else {\n        result = 0x3fd20000;\n        mul_result = 0x3fe7000000000000;\n      }\n      temp_var4 = (undefined4)((ulonglong)mul_result >> 0x20);\n      temp_var3 = (undefined4)mul_result;\n      mul_result = __muldf3(result_low,result_high,0,0x3fe00000);\n      mul_result = __subdf3((int)mul_result,(int)((ulonglong)mul_result >> 0x20),0,result);\n      final_result = __muldf3(result_low,result_high,(int)final_result,(int)((ulonglong)final_result >> 0x20));\n      mul_result3 = __muldf3(input1,input2,input3,input4);\n      final_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)mul_result3,\n                       (int)((ulonglong)mul_result3 >> 0x20));\n      mul_result = __subdf3((int)mul_result,(int)((ulonglong)mul_result >> 0x20),(int)final_result,\n                       (int)((ulonglong)final_result >> 0x20));\n      result_low = __subdf3(temp_var3,temp_var4,(int)mul_result,(int)((ulonglong)mul_result >> 0x20));\n      return result_low;\n    }\n  }\n  temp_var2 = (undefined4)((ulonglong)final_result >> 0x20);\n  temp_1 = (undefined4)final_result;\n  result_low = (undefined4)((ulonglong)mul_result >> 0x20);\n  final_result = __muldf3((int)mul_result,result_low,0,0x3fe00000);\n  mul_result = __muldf3((int)mul_result,result_low,temp_1,temp_var2);\n  mul_result3 = __muldf3(input1,input2,input3,input4);\n  mul_result = __subdf3((int)mul_result,(int)((ulonglong)mul_result >> 0x20),(int)mul_result3,\n                   (int)((ulonglong)mul_result3 >> 0x20));\n  mul_result = __subdf3((int)final_result,(int)((ulonglong)final_result >> 0x20),(int)mul_result,\n                   (int)((ulonglong)mul_result >> 0x20));\n  result_low = __subdf3(0,0x3ff00000,(int)mul_result,(int)((ulonglong)mul_result >> 0x20));\n  return result_low;\n}\n\n",
            "current_name": "calculate_result_0800a348",
            "entrypoint": "0x0800a348",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a348": "calculate_result_0800a348",
                "iVar1": "result",
                "local_28": "temp_var3",
                "local_30": "temp_1",
                "param_1": "input1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "uStack_24": "temp_var4",
                "uStack_2c": "temp_var2",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "abs_input2",
                "uVar5": "mul_result",
                "uVar6": "final_result",
                "uVar7": "mul_result3"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800a5a0": {
            "additional_data": {
                "FAT_0800a5a0": {
                    "calculate_expression_result": 1
                },
                "FUN_0800a5a0": {
                    "calculate_result": 6,
                    "reengineered_function": 1
                },
                "bVar24": {
                    "bool_flag": 1,
                    "bool_var": 4,
                    "boolean_1": 1,
                    "boolean_var": 2,
                    "condition": 2,
                    "flag": 2,
                    "flag1": 1,
                    "is_negative": 1,
                    "is_temp_true": 1,
                    "temp_bool": 3,
                    "temp_flag": 1
                },
                "iVar14": {
                    "counter3": 4,
                    "counter_2": 1,
                    "counter_3": 1,
                    "counter_var3": 1,
                    "counter_var_3": 1,
                    "index3": 1,
                    "index_var3": 1,
                    "iterator3": 1,
                    "length2": 1,
                    "loop_counter": 1,
                    "loop_index1": 1,
                    "loop_var2": 1,
                    "loop_var3": 3,
                    "loop_variable3": 1,
                    "temp6": 1,
                    "temp_counter": 1,
                    "temp_index2": 2,
                    "temp_loop_counter": 1,
                    "temp_var4": 1,
                    "temp_var6": 1,
                    "temp_var8": 1,
                    "tmp_var6": 1
                },
                "iVar15": {
                    "array_size": 1,
                    "counter_3": 1,
                    "counter_4": 1,
                    "data_variable1": 1,
                    "i_var15": 3,
                    "index": 2,
                    "initial_value1": 1,
                    "input2_result": 1,
                    "length": 1,
                    "loop_index2": 1,
                    "mode_offset": 1,
                    "random_value1": 1,
                    "start_value": 1,
                    "temp7": 1,
                    "temp_offset": 1,
                    "temp_var1": 2,
                    "temp_var6": 2,
                    "temp_var_6": 1,
                    "temp_var_index1": 1,
                    "tmp_var7": 1,
                    "value1": 1,
                    "value_from_dat_0800c060": 1,
                    "var1": 3
                },
                "iVar16": {
                    "temp_var7": 1
                },
                "iVar17": {
                    "counter4": 2,
                    "counter_4": 1,
                    "counter_5": 1,
                    "i_var17": 2,
                    "inner_loop_counter": 1,
                    "loop_counter1": 1,
                    "loop_var3": 1,
                    "loop_var4": 2,
                    "loop_variable4": 1,
                    "random_value2": 1,
                    "temp8": 1,
                    "temp_counter2": 1,
                    "temp_index": 1,
                    "temp_index3": 3,
                    "temp_var2": 1,
                    "temp_var5": 1,
                    "temp_var9": 1,
                    "temp_var_1": 1,
                    "temp_var_7": 1,
                    "temp_var_index2": 1,
                    "tmp_var8": 1,
                    "value2": 1,
                    "var2": 3
                },
                "iVar18": {
                    "temp_loop_counter2": 1,
                    "temp_var8": 1,
                    "temp_var_index3": 1
                },
                "iVar19": {
                    "index2": 1
                },
                "iVar21": {
                    "counter5": 1,
                    "counter_5": 1,
                    "counter_6": 1,
                    "flag": 1,
                    "i_var21": 2,
                    "if_condition": 1,
                    "loop_var2": 1,
                    "loop_var5": 2,
                    "loop_variable5": 1,
                    "random_value3": 1,
                    "temp9": 1,
                    "temp_count2": 1,
                    "temp_counter3": 1,
                    "temp_index4": 1,
                    "temp_index5": 1,
                    "temp_var10": 1,
                    "temp_var17": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_var8": 2,
                    "temp_var_3": 1,
                    "temp_var_9": 1,
                    "temp_var_index4": 1,
                    "tmp_var9": 1,
                    "value3": 1,
                    "var3": 2
                },
                "iVar22": {
                    "temp_flag": 1
                },
                "iVar24": {
                    "flag_1": 1
                },
                "iVar4": {
                    "count": 1,
                    "counter": 2,
                    "counter1": 4,
                    "counter_var": 2,
                    "i": 1,
                    "index": 6,
                    "index1": 1,
                    "index_var": 2,
                    "iteration_count": 1,
                    "iterator4": 1,
                    "loop_counter": 1,
                    "loop_index": 1,
                    "loop_var": 1,
                    "loop_var1": 2,
                    "loop_variable1": 1,
                    "temp_index": 1,
                    "temp_var": 1,
                    "temp_var2": 1
                },
                "iVar9": {
                    "cosine_val": 1,
                    "count": 1,
                    "counter2": 5,
                    "counter_1": 1,
                    "counter_2": 1,
                    "counter_var2": 1,
                    "counter_var_2": 1,
                    "index2": 1,
                    "index_var2": 1,
                    "iterator2": 1,
                    "j": 1,
                    "length": 1,
                    "loop_var1": 1,
                    "loop_var2": 3,
                    "loop_variable2": 1,
                    "start_loop_index": 1,
                    "temp20": 1,
                    "temp_count": 1,
                    "temp_index": 1,
                    "temp_index2": 2,
                    "temp_var1": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "tmp_var3": 1
                },
                "localArray1": {
                    "local_array1": 1
                },
                "localArray2": {
                    "local_array2": 1
                },
                "localArray3": {
                    "local_array3": 1
                },
                "localVar1": {
                    "local1": 1
                },
                "localVar2": {
                    "local2": 1
                },
                "localVar3": {
                    "local3": 1
                },
                "localVar4": {
                    "local4": 1
                },
                "localVar5": {
                    "local5": 1
                },
                "local_160": {
                    "array_variable9": 1,
                    "local_arr4": 1,
                    "local_array3": 4,
                    "local_array4": 4,
                    "local_array_1": 1,
                    "local_array_4": 2,
                    "local_var_array3": 1,
                    "mode_array": 1,
                    "temp18": 1,
                    "temp_array": 2,
                    "temp_array2": 2,
                    "temp_array3": 1,
                    "temp_array4": 1,
                    "temp_array5": 1,
                    "temp_array_5": 1,
                    "temp_int_array": 1,
                    "temp_result2": 1,
                    "temp_var_array3": 1,
                    "var160": 1,
                    "var3": 1
                },
                "local_168": {
                    "array_variable8": 1,
                    "local_array_2": 1,
                    "local_structure1": 1,
                    "local_var2": 1,
                    "local_var4": 3,
                    "local_var5": 3,
                    "local_var_4": 2,
                    "local_variable4": 1,
                    "result_value": 1,
                    "temp17": 1,
                    "temp_array2": 1,
                    "temp_array3": 1,
                    "temp_array4": 1,
                    "temp_array_4": 1,
                    "temp_long_result": 1,
                    "temp_result1": 1,
                    "temp_value": 1,
                    "temp_var12": 1,
                    "temp_var2": 1,
                    "temp_var_array2": 1,
                    "var168": 1,
                    "var2": 1
                },
                "local_258": {
                    "array2": 1,
                    "array_variable6": 1,
                    "calculation_array": 1,
                    "expression_result": 1,
                    "input_array": 1,
                    "local_arr3": 1,
                    "local_array2": 4,
                    "local_array3": 4,
                    "local_array_3": 2,
                    "local_result_array": 1,
                    "local_var_array2": 1,
                    "result_array": 3,
                    "result_data": 1,
                    "temp_array": 1,
                    "temp_array3": 1,
                    "temp_array_3": 1,
                    "temp_result_array": 1,
                    "temp_var_array": 1,
                    "var258": 1
                },
                "local_260": {
                    "array": 1,
                    "array1": 1,
                    "array_data": 1,
                    "array_variable5": 1,
                    "input_data": 1,
                    "local_arr2": 1,
                    "local_array1": 4,
                    "local_array2": 4,
                    "local_array_2": 2,
                    "local_pointer_array": 1,
                    "local_var_array1": 1,
                    "output_array": 1,
                    "result_array": 1,
                    "temp_array": 2,
                    "temp_array2": 2,
                    "temp_array_2": 1,
                    "var260": 1
                },
                "local_26c": {
                    "array_variable4": 1,
                    "local_counter_1": 1,
                    "local_var3": 3,
                    "local_var4": 3,
                    "local_var8": 1,
                    "local_var_3": 2,
                    "local_variable3": 3,
                    "temp11": 1,
                    "temp15": 1,
                    "temp_expression_iterations": 1,
                    "temp_length3": 1,
                    "temp_range": 1,
                    "temp_step": 1,
                    "temp_value": 1,
                    "temp_value11": 1,
                    "temp_value8": 1,
                    "temp_var10": 1,
                    "temp_var14": 1,
                    "temp_var3": 1,
                    "temp_var_9": 1,
                    "temp_var_offset2": 1,
                    "var26c": 1
                },
                "local_270": {
                    "array_variable3": 1,
                    "local_counter_2": 1,
                    "local_var2": 3,
                    "local_var3": 3,
                    "local_var7": 1,
                    "local_var_2": 2,
                    "local_variable2": 3,
                    "loop_range": 1,
                    "temp10": 1,
                    "temp14": 1,
                    "temp_expression_length": 1,
                    "temp_length": 1,
                    "temp_length2": 1,
                    "temp_offset": 1,
                    "temp_offset2": 1,
                    "temp_value10": 1,
                    "temp_var13": 1,
                    "temp_var2": 1,
                    "temp_var9": 1,
                    "temp_var_8": 1,
                    "temp_var_offset": 1,
                    "var270": 1
                },
                "local_280": {
                    "array_variable2": 1,
                    "local_counter_3": 1,
                    "local_var1": 3,
                    "local_var2": 3,
                    "local_var4": 1,
                    "local_var_1": 2,
                    "local_variable1": 3,
                    "range_flag": 1,
                    "temp13": 1,
                    "temp9": 1,
                    "temp_array_size": 1,
                    "temp_count": 1,
                    "temp_counter": 1,
                    "temp_index4": 1,
                    "temp_length": 1,
                    "temp_offset": 1,
                    "temp_value9": 1,
                    "temp_var1": 1,
                    "temp_var12": 1,
                    "temp_var_7": 1,
                    "temp_var_size": 1,
                    "var280": 1
                },
                "local_284": {
                    "array_variable1": 1,
                    "local_arr": 1,
                    "local_array1": 4,
                    "local_array4": 1,
                    "local_array_1": 2,
                    "local_pointer_1": 1,
                    "local_var1": 3,
                    "ptr6": 1,
                    "ptr_temp": 1,
                    "ptr_to_local_var": 1,
                    "result_array": 1,
                    "result_buffer_ptr": 1,
                    "temp8": 1,
                    "temp_array": 2,
                    "temp_array1": 2,
                    "temp_array_1": 1,
                    "temp_array_pointer": 1,
                    "temp_pointer": 1,
                    "temp_pointer3": 1,
                    "temp_var_ptr": 1,
                    "var284": 1
                },
                "loopVar": {
                    "i_var": 1
                },
                "loopVar2": {
                    "i_var2": 1
                },
                "loopVar3": {
                    "i_var3": 1
                },
                "loopVar4": {
                    "i_var4": 1
                },
                "loopVar5": {
                    "i_var5": 1
                },
                "param_1": {
                    "input": 1,
                    "input1": 6,
                    "input_1": 3,
                    "input_param": 2,
                    "input_param1": 6,
                    "input_param_1": 3,
                    "input_parameter1": 1,
                    "input_pointer": 1,
                    "input_size": 3,
                    "input_value": 1,
                    "input_value1": 1,
                    "int1": 1,
                    "param1": 2
                },
                "param_2": {
                    "expression_values": 1,
                    "input": 1,
                    "input2": 6,
                    "input_2": 3,
                    "input_array": 2,
                    "input_param2": 5,
                    "input_param_2": 3,
                    "input_parameter2": 1,
                    "input_value2": 1,
                    "int_arr1": 1,
                    "output": 1,
                    "output_buffer": 1,
                    "output_param": 2,
                    "output_pointer": 1,
                    "param2": 2
                },
                "param_3": {
                    "array_size": 1,
                    "expression_length": 1,
                    "input3": 6,
                    "input_3": 3,
                    "input_buffer": 1,
                    "input_length": 1,
                    "input_offset": 1,
                    "input_param3": 5,
                    "input_param_3": 3,
                    "input_parameter3": 1,
                    "int2": 1,
                    "length": 3,
                    "output_size": 1,
                    "param3": 2,
                    "size_param": 1
                },
                "param_4": {
                    "constant1": 1,
                    "count_param": 1,
                    "index": 1,
                    "input4": 6,
                    "input_4": 3,
                    "input_param4": 5,
                    "input_param_4": 3,
                    "input_parameter4": 1,
                    "int3": 1,
                    "num_iter": 1,
                    "offset": 2,
                    "output_offset": 1,
                    "param4": 2,
                    "random_param_1": 1,
                    "start": 1,
                    "start_offset": 1
                },
                "param_5": {
                    "constant2": 1,
                    "expression_type": 1,
                    "flag": 1,
                    "input5": 6,
                    "input_5": 3,
                    "input_param5": 5,
                    "input_param_5": 3,
                    "input_parameter5": 1,
                    "int4": 1,
                    "mode": 1,
                    "operation": 1,
                    "operation_type": 1,
                    "param5": 2,
                    "random_param_2": 1,
                    "scaling_factor": 1,
                    "type": 1,
                    "type_param": 1
                },
                "param_6": {
                    "array": 1,
                    "array_address": 1,
                    "array_param": 1,
                    "buffer": 1,
                    "calculation_array": 1,
                    "coefficients": 1,
                    "conversion_matrix": 1,
                    "data_param": 1,
                    "input6": 6,
                    "input_6": 3,
                    "input_param6": 5,
                    "input_param_6": 3,
                    "input_parameter6": 1,
                    "int5": 1,
                    "param6": 2,
                    "random_param_3": 1,
                    "values_pointer": 1
                },
                "ppuVar7": {
                    "double_pointer_var": 2,
                    "double_pointer_variable": 1,
                    "other_temp_pointer": 1,
                    "pointer3": 3,
                    "pointer_3": 1,
                    "pointer_pointer": 3,
                    "pointer_pointer1": 1,
                    "pointer_pointer_1": 1,
                    "pointer_pointer_var": 2,
                    "pointer_pointer_var1": 2,
                    "ptr_mul_temp1": 1,
                    "ptr_ptr": 3,
                    "ptr_ptr_data": 1,
                    "ptr_ptr_var": 2,
                    "ptr_ptr_var1": 1,
                    "ptr_ptr_var7": 1,
                    "ptr_to_ptr": 1,
                    "temp_ptr3": 1,
                    "temp_ptr_ptr": 1
                },
                "ptrPtrVar": {
                    "ptr_ptr": 1
                },
                "ptrVar1": {
                    "ptr1": 1
                },
                "ptrVar2": {
                    "ptr2": 1
                },
                "ptrVar3": {
                    "ptr3": 1
                },
                "ptrVar4": {
                    "ptr4": 1
                },
                "puVar1": {
                    "pointer1": 6,
                    "pointer_1": 2,
                    "pointer_var1": 5,
                    "pointer_var_1": 1,
                    "pointer_variable1": 1,
                    "ptr1": 3,
                    "ptr_to_u_int": 1,
                    "ptr_var1": 4,
                    "temp_pointer": 1,
                    "temp_ptr1": 2,
                    "temp_ptr_1": 1
                },
                "puVar10": {
                    "pointer3": 3,
                    "pointer4": 3,
                    "pointer_2": 1,
                    "pointer_3": 1,
                    "pointer_4": 1,
                    "pointer_var3": 5,
                    "pointer_var_3": 1,
                    "pointer_variable3": 1,
                    "ptr3": 3,
                    "ptr_data": 1,
                    "ptr_to_input1": 1,
                    "ptr_var10": 1,
                    "ptr_var3": 3,
                    "start_offset_ptr": 1,
                    "temp_pointer2": 1,
                    "temp_pointer6": 1,
                    "temp_ptr3": 1,
                    "temp_ptr4": 1,
                    "temp_ptr_3": 1
                },
                "puVar13": {
                    "pointer4": 2,
                    "pointer5": 3,
                    "pointer_3": 1,
                    "pointer_4": 1,
                    "pointer_5": 1,
                    "pointer_var4": 4,
                    "pointer_var_4": 1,
                    "pointer_variable4": 1,
                    "ptr4": 3,
                    "ptr_to_loop_var": 1,
                    "ptr_var13": 1,
                    "ptr_var4": 3,
                    "temp5": 1,
                    "temp_array_pointer2": 1,
                    "temp_pointer": 1,
                    "temp_pointer2": 1,
                    "temp_ptr": 1,
                    "temp_ptr4": 1,
                    "temp_ptr5": 1,
                    "temp_ptr_4": 1,
                    "tmp_pointer_var1": 1
                },
                "puVar16": {
                    "pointer4": 1,
                    "pointer5": 2,
                    "pointer6": 1,
                    "pointer_4": 1,
                    "pointer_5": 1,
                    "pointer_6": 1,
                    "pointer_var4": 1,
                    "pointer_var5": 2,
                    "ptr5": 2,
                    "ptr_result": 1,
                    "ptr_var5": 1,
                    "temp_pointer3": 1,
                    "temp_ptr6": 1,
                    "temp_ptr_5": 1
                },
                "puVar18": {
                    "pointer5": 1,
                    "pointer_5": 1,
                    "pointer_6": 1,
                    "pointer_7": 1,
                    "pointer_var5": 2,
                    "pointer_var6": 2,
                    "pointer_var_5": 1,
                    "ptr6": 1,
                    "ptr_to_temp_var": 1,
                    "ptr_var18": 1,
                    "temp_pointer1": 1,
                    "temp_pointer4": 1,
                    "temp_ptr_6": 1
                },
                "puVar19": {
                    "pointer6": 1,
                    "pointer_7": 1,
                    "pointer_var6": 1,
                    "pointer_var7": 2,
                    "pointer_var_6": 1,
                    "ptr_var19": 1,
                    "ptr_var5": 1,
                    "ptr_var6": 1,
                    "temp_ptr7": 1
                },
                "puVar22": {
                    "data_ptr": 1,
                    "pointer7": 1,
                    "pointer_8": 2,
                    "pointer_var6": 1,
                    "pointer_var7": 1,
                    "pointer_var8": 2,
                    "pointer_var_7": 1,
                    "ptr5": 1,
                    "ptr_to_loop_var2": 1,
                    "ptr_var6": 1,
                    "ptr_var7": 1,
                    "temp_pointer4": 1,
                    "temp_pointer5": 1,
                    "temp_ptr8": 1,
                    "temp_ptr_7": 1
                },
                "puVar23": {
                    "pointer3": 1,
                    "pointer8": 1,
                    "pointer_9": 2,
                    "pointer_var7": 1,
                    "pointer_var8": 1,
                    "pointer_var9": 2,
                    "pointer_var_8": 1,
                    "ptr6": 1,
                    "ptr_to_ptr2": 1,
                    "ptr_var7": 1,
                    "ptr_var8": 1,
                    "start_offset_ptr": 1,
                    "temp21": 1,
                    "temp_pointer5": 1,
                    "temp_pointer6": 1,
                    "temp_ptr9": 1,
                    "temp_ptr_8": 1
                },
                "puVar5": {
                    "data": 1,
                    "pointer2": 6,
                    "pointer_1": 1,
                    "pointer_2": 2,
                    "pointer_var2": 5,
                    "pointer_var_2": 1,
                    "pointer_variable2": 1,
                    "ptr2": 3,
                    "ptr_loop_index": 1,
                    "ptr_to_result": 1,
                    "ptr_var2": 3,
                    "ptr_var5": 1,
                    "temp_array_pointer": 1,
                    "temp_ptr2": 2,
                    "temp_ptr_2": 1
                },
                "stackVar1": {
                    "stack_var1": 1
                },
                "stackVar2": {
                    "stack_var2": 1
                },
                "tempVar": {
                    "temp": 1
                },
                "tempVar2": {
                    "temp2": 1
                },
                "tempVar3": {
                    "temp3": 1
                },
                "tempVar4": {
                    "temp4": 1
                },
                "tempVar5": {
                    "temp5": 1
                },
                "tempVar6": {
                    "temp6": 1
                },
                "tempVar7": {
                    "temp7": 1
                },
                "tempVar8": {
                    "temp8": 1
                },
                "uStack_208": {
                    "array_variable7": 1,
                    "local_var1": 1,
                    "local_var_1": 1,
                    "stack_var1": 5,
                    "stack_var_1": 2,
                    "stack_variable1": 1,
                    "temp16": 1,
                    "temp_long_value2": 1,
                    "temp_result1": 1,
                    "temp_stack1": 1,
                    "temp_stack_var": 1,
                    "temp_stack_var_1": 1,
                    "temp_value1": 1,
                    "temp_var1": 1,
                    "temp_var11": 1,
                    "temp_var15": 1,
                    "temp_var4": 1,
                    "temp_variable3": 1,
                    "var1": 1,
                    "var208": 1,
                    "variable9": 1
                },
                "uStack_c8": {
                    "array_variable10": 1,
                    "local_var3": 1,
                    "local_var_2": 1,
                    "stack_var2": 5,
                    "stack_var_2": 2,
                    "stack_variable2": 1,
                    "temp19": 1,
                    "temp_long_value": 1,
                    "temp_result2": 1,
                    "temp_stack2": 1,
                    "temp_stack_var2": 1,
                    "temp_stack_var_2": 1,
                    "temp_value2": 1,
                    "temp_var13": 1,
                    "temp_var16": 1,
                    "temp_var3": 1,
                    "temp_var5": 1,
                    "temp_variable4": 1,
                    "var4": 1,
                    "var_c8": 1,
                    "variable10": 1
                },
                "uVar11": {
                    "mul_operand1": 1,
                    "result_5": 1,
                    "result_var5": 1,
                    "temp3": 6,
                    "temp4": 1,
                    "temp_value3": 5,
                    "temp_var2": 1,
                    "temp_var3": 4,
                    "temp_var4": 4,
                    "temp_var6": 1,
                    "temp_var_3": 1,
                    "temp_var_4": 1,
                    "temp_variable3": 1,
                    "tmp_var4": 1,
                    "variable3": 1
                },
                "uVar12": {
                    "mul_operand2": 1,
                    "result_6": 1,
                    "result_var6": 1,
                    "temp4": 6,
                    "temp5": 1,
                    "temp_index": 1,
                    "temp_value4": 4,
                    "temp_var3": 1,
                    "temp_var4": 4,
                    "temp_var5": 4,
                    "temp_var7": 1,
                    "temp_var_4": 1,
                    "temp_var_5": 1,
                    "temp_variable4": 1,
                    "tmp_var5": 1,
                    "variable4": 1
                },
                "uVar16": {
                    "temp_variable1": 1
                },
                "uVar18": {
                    "loop_temp": 1
                },
                "uVar19": {
                    "loop_var": 1
                },
                "uVar2": {
                    "result": 22,
                    "result1": 3,
                    "result_1": 1,
                    "result_var": 3,
                    "result_var1": 1,
                    "result_variable1": 1
                },
                "uVar20": {
                    "result_7": 1,
                    "temp22": 1,
                    "temp3": 1,
                    "temp5": 1,
                    "temp_value5": 1,
                    "temp_value6": 1,
                    "temp_var5": 3,
                    "temp_var7": 2,
                    "temp_var9": 1,
                    "temp_var_2": 1,
                    "temp_var_5": 1,
                    "temp_var_8": 1,
                    "temp_variable2": 1,
                    "tmp_var10": 1,
                    "variable5": 1
                },
                "uVar25": {
                    "conversion_result1": 1,
                    "output2": 1,
                    "result_8": 1,
                    "temp10": 1,
                    "temp4": 1,
                    "temp5": 2,
                    "temp6": 2,
                    "temp_value5": 3,
                    "temp_value6": 2,
                    "temp_var11": 1,
                    "temp_var4": 1,
                    "temp_var5": 1,
                    "temp_var6": 3,
                    "temp_var9": 3,
                    "temp_var_10": 1,
                    "temp_var_4": 1,
                    "temp_var_6": 1,
                    "temp_variable5": 1,
                    "tmp_var11": 1,
                    "variable6": 1
                },
                "uVar26": {
                    "conversion_result2": 1,
                    "output1": 1,
                    "result_9": 1,
                    "temp11": 1,
                    "temp5": 1,
                    "temp6": 2,
                    "temp7": 2,
                    "temp_double_var": 1,
                    "temp_result2": 2,
                    "temp_value6": 1,
                    "temp_value7": 1,
                    "temp_var10": 3,
                    "temp_var12": 1,
                    "temp_var5": 1,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "temp_var_11": 1,
                    "temp_var_5": 1,
                    "temp_var_7": 1,
                    "temp_variable6": 1,
                    "tmp_var12": 1,
                    "value4": 1,
                    "variable7": 1
                },
                "uVar27": {
                    "conversion_result3": 1,
                    "output3": 1,
                    "result_10": 1,
                    "temp12": 1,
                    "temp6": 1,
                    "temp7": 2,
                    "temp8": 2,
                    "temp_value5": 1,
                    "temp_value6": 1,
                    "temp_value7": 1,
                    "temp_value8": 1,
                    "temp_var11": 3,
                    "temp_var13": 1,
                    "temp_var6": 1,
                    "temp_var7": 2,
                    "temp_var8": 2,
                    "temp_var_12": 1,
                    "temp_var_6": 1,
                    "temp_var_8": 1,
                    "temp_variable7": 1,
                    "tmp_var13": 1,
                    "value5": 1,
                    "variable8": 1
                },
                "uVar3": {
                    "mul_result_var": 1,
                    "result2": 3,
                    "result_2": 1,
                    "result_var2": 1,
                    "result_variable2": 1,
                    "temp": 5,
                    "temp_result": 12,
                    "temp_var": 3,
                    "temp_var1": 2,
                    "temporary_result": 1
                },
                "uVar6": {
                    "mul_temp1": 1,
                    "result_3": 1,
                    "result_var3": 1,
                    "temp1": 7,
                    "temp2": 1,
                    "temp_value": 1,
                    "temp_value1": 4,
                    "temp_var1": 5,
                    "temp_var2": 3,
                    "temp_var3": 1,
                    "temp_var_1": 1,
                    "temp_var_2": 1,
                    "temp_variable1": 1,
                    "tmp_var1": 1,
                    "variable1": 1
                },
                "uVar8": {
                    "mul_temp2": 1,
                    "result_4": 1,
                    "result_var4": 1,
                    "temp2": 7,
                    "temp3": 1,
                    "temp_value2": 5,
                    "temp_var2": 5,
                    "temp_var3": 3,
                    "temp_var4": 1,
                    "temp_var_2": 1,
                    "temp_var_3": 1,
                    "temp_variable2": 1,
                    "tmp_var2": 1,
                    "variable2": 1
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_0800856c",
                "FUN_080094c0",
                "FUN_08008b10",
                "FUN_08008b4c",
                "FUN_0800b2e8",
                "FUN_080082d0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08009d78"
            ],
            "code": "\n/* WARNING: Restarted to delay deadcode elimination for space: stack */\n\nuint calculate_result_0800a5a0(int input_param1,undefined8 *input2,int input3,int input4,int input5,int input6)\n\n{\n  undefined4 *pointer1;\n  uint result;\n  uint temp_result;\n  int index;\n  uint *pointer2;\n  undefined4 temp1;\n  uint **pointer_pointer;\n  undefined4 temp2;\n  int counter2;\n  undefined4 *pointer_var3;\n  undefined4 temp3;\n  uint temp4;\n  uint *pointer_var4;\n  int counter3;\n  int var1;\n  undefined8 *pointer5;\n  int var2;\n  undefined4 *pointer_var5;\n  undefined8 *pointer_var7;\n  undefined4 temp_var5;\n  int temp_var8;\n  undefined8 *pointer_8;\n  undefined4 *pointer_var9;\n  bool bool_var;\n  undefined8 temp_value5;\n  undefined8 temp_var10;\n  undefined8 temp_var11;\n  undefined8 *local_array1;\n  int local_var1;\n  int local_var3;\n  int local_var3;\n  uint *local_array2 [2];\n  uint local_array2 [20];\n  undefined8 stack_var1;\n  undefined8 local_var4;\n  int local_array4 [38];\n  undefined8 stack_var2;\n  \n  var1 = *(int *)(&DAT_0800c060 + input5 * 4);\n  counter2 = input4 + -1;\n  local_array2[1] = (uint *)input2;\n  if (input3 + 0x14 < 0 == SCARRY4(input3,0x14)) {\n    local_var3 = (input3 + -3) / 0x18;\n    local_var3 = (local_var3 + 1) * -0x18;\n  }\n  else {\n    local_var3 = -0x18;\n    local_var3 = 0;\n  }\n  local_var3 = input3 + local_var3;\n  var2 = local_var3 - counter2;\n  if (-1 < var1 + counter2) {\n    temp_var8 = var1 + counter2 + 1 + var2;\n    pointer5 = &stack_var1;\n    do {\n      while (var2 < 0) {\n        var2 = var2 + 1;\n        *(undefined4 *)pointer5 = 0;\n        *(undefined4 *)((int)pointer5 + 4) = 0;\n        pointer5 = pointer5 + 1;\n        if (var2 == temp_var8) goto LAB_0800a626;\n      }\n      temp_var10 = __aeabi_i2d(*(undefined4 *)(input6 + var2 * 4));\n      var2 = var2 + 1;\n      *pointer5 = temp_var10;\n      pointer5 = pointer5 + 1;\n    } while (var2 != temp_var8);\n  }\nLAB_0800a626:\n  pointer_var3 = (undefined4 *)(input_param1 + -8);\n  if (-1 < var1) {\n    pointer_8 = &stack_var1 + input4;\n    var2 = counter2;\n    pointer5 = &stack_var2;\n    do {\n      if (counter2 < 0) {\n        temp_var10 = 0;\n      }\n      else {\n        temp_var10 = 0;\n        pointer_var9 = pointer_var3;\n        pointer_var7 = pointer_8;\n        do {\n          pointer_var5 = pointer_var9 + 2;\n          temp_value5 = __muldf3(*pointer_var5,pointer_var9[3],*(undefined4 *)(pointer_var7 + -1),\n                            *(undefined4 *)((int)pointer_var7 + -4));\n          temp_var10 = __aeabi_dadd((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_value5,\n                                (int)((ulonglong)temp_value5 >> 0x20));\n          pointer_var9 = pointer_var5;\n          pointer_var7 = pointer_var7 + -1;\n        } while (pointer_var5 != pointer_var3 + input4 * 2);\n      }\n      var2 = var2 + 1;\n      *pointer5 = temp_var10;\n      pointer_8 = pointer_8 + 1;\n      pointer5 = pointer5 + 1;\n    } while (var2 != var1 + input4);\n  }\n  local_array2[0] = local_array2 + var1 + -1;\n  var2 = var1;\n  do {\n    temp_var10 = CONCAT44(*(undefined4 *)((int)&stack_var2 + var2 * 8 + 4),\n                      *(undefined4 *)(&stack_var2 + var2));\n    if (0 < var2) {\n      pointer5 = &stack_var2 + var2;\n      pointer2 = local_array2;\n      do {\n        temp1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n        __muldf3((int)temp_var10,temp1,0,0x3e700000);\n        __aeabi_d2iz();\n        temp_value5 = __aeabi_i2d();\n        temp2 = (undefined4)((ulonglong)temp_value5 >> 0x20);\n        temp_var11 = __muldf3((int)temp_value5,temp2,0,0x41700000);\n        __subdf3((int)temp_var10,temp1,(int)temp_var11,(int)((ulonglong)temp_var11 >> 0x20));\n        result = __aeabi_d2iz();\n        pointer_8 = pointer5 + -1;\n        temp1 = *(undefined4 *)pointer_8;\n        temp3 = *(undefined4 *)((int)pointer5 + -4);\n        *pointer2 = result;\n        temp_var10 = __aeabi_dadd((int)temp_value5,temp2,temp1,temp3);\n        pointer5 = pointer_8;\n        pointer2 = pointer2 + 1;\n      } while (pointer_8 != &stack_var2);\n    }\n    temp_var10 = scalbn((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),local_var3);\n    temp2 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    __muldf3((int)temp_var10,temp2,0,0x3fc00000);\n    temp_value5 = floor();\n    temp_value5 = __muldf3((int)temp_value5,(int)((ulonglong)temp_value5 >> 0x20),0,0x40200000);\n    temp_var10 = __subdf3((int)temp_var10,temp2,(int)temp_value5,(int)((ulonglong)temp_value5 >> 0x20));\n    result = __aeabi_d2iz();\n    temp_value5 = __aeabi_i2d();\n    temp_var10 = __subdf3((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_value5,\n                      (int)((ulonglong)temp_value5 >> 0x20));\n    temp1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    temp2 = (undefined4)temp_var10;\n    if (local_var3 < 1) {\n      if (local_var3 == 0) {\n        temp_var8 = (int)local_array2[var2 + -1] >> 0x17;\n        goto joined_r0x0800a8b8;\n      }\n      temp_var8 = __aeabi_dcmpge(temp2,temp1,0,0x3fe00000);\n      if (temp_var8 != 0) {\n        result = result + 1;\n        if (var2 < 1) {\n          temp_var10 = __subdf3(0,0x3ff00000,temp2,temp1);\n          temp_var8 = 2;\n          goto LAB_0800a7a4;\n        }\n        temp_var8 = 2;\n        goto LAB_0800a8c8;\n      }\n    }\n    else {\n      index = (int)local_array2[var2 + -1] >> (0x18U - local_var3 & 0xff);\n      temp4 = local_array2[var2 + -1] - (index << (0x18U - local_var3 & 0xff));\n      temp_var8 = (int)temp4 >> (0x17U - local_var3 & 0xff);\n      local_array2[var2 + -1] = temp4;\n      result = result + index;\njoined_r0x0800a8b8:\n      if (0 < temp_var8) {\n        result = result + 1;\n        if (var2 < 1) {\n          bool_var = false;\n        }\n        else {\nLAB_0800a8c8:\n          if (local_array2[0] == 0) {\n            bool_var = false;\n            if (var2 != 1) {\n              pointer2 = local_array2;\n              index = 1;\n              do {\n                pointer2 = pointer2 + 1;\n                if (*pointer2 != 0) {\n                  counter3 = index + 1;\n                  temp4 = *pointer2;\n                  goto LAB_0800a8e2;\n                }\n                index = index + 1;\n              } while (index != var2);\n              bool_var = false;\n            }\n          }\n          else {\n            counter3 = 1;\n            index = 0;\n            temp4 = local_array2[0];\nLAB_0800a8e2:\n            local_array2[index] = 0x1000000 - temp4;\n            if (counter3 < var2) {\n              temp4 = local_array2[counter3];\n              pointer2 = local_array2 + counter3;\n              while( true ) {\n                pointer_var4 = pointer2 + 1;\n                *pointer2 = 0xffffff - temp4;\n                if (pointer_var4 == local_array2 + var2) break;\n                temp4 = *pointer_var4;\n                pointer2 = pointer_var4;\n              }\n            }\n            bool_var = true;\n          }\n        }\n        if (0 < local_var3) {\n          if (local_var3 == 1) {\n            local_array2[var2 + -1] = local_array2[var2 + -1] & 0x7fffff;\n          }\n          else if (local_var3 == 2) {\n            local_array2[var2 + -1] = local_array2[var2 + -1] & 0x3fffff;\n          }\n        }\n        if (temp_var8 == 2) {\n          temp_var10 = __subdf3(0,0x3ff00000,temp2,temp1);\n          if (bool_var) {\n            temp_value5 = scalbn(0,0x3ff00000,local_var3);\n            temp_var10 = __subdf3((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_value5,\n                              (int)((ulonglong)temp_value5 >> 0x20));\n          }\n        }\n      }\n    }\nLAB_0800a7a4:\n    temp2 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n    index = __aeabi_dcmpeq((int)temp_var10,temp2,0,0);\n    if (index == 0) {\n      temp_var10 = scalbn((int)temp_var10,temp2,-local_var3);\n      temp1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n      temp2 = (undefined4)temp_var10;\n      counter2 = __aeabi_dcmpge(temp2,temp1,0,0x41700000);\n      if (counter2 == 0) {\n        temp4 = __aeabi_d2iz(temp2,temp1);\n        local_array2[var2] = temp4;\n        index = var2;\n      }\n      else {\n        __muldf3(temp2,temp1,0,0x3e700000);\n        temp4 = __aeabi_d2iz();\n        temp_var10 = __aeabi_i2d();\n        temp_var10 = __muldf3((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),0,0x41700000);\n        __subdf3(temp2,temp1,(int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20));\n        temp_result = __aeabi_d2iz();\n        local_var3 = local_var3 + 0x18;\n        local_array2[var2] = temp_result;\n        local_array2[var2 + 1] = temp4;\n        index = var2 + 1;\n      }\n      goto LAB_0800a9f6;\n    }\n    index = var2 + -1;\n    if (var1 <= index) {\n      temp4 = 0;\n      pointer2 = local_array2 + var2 + 0x3fffffff;\n      do {\n        pointer_var4 = pointer2 + -1;\n        temp4 = temp4 | *pointer2;\n        pointer2 = pointer_var4;\n      } while (pointer_var4 != local_array2[0]);\n      if (temp4 != 0) break;\n    }\n    if (local_array2[var1 + -1] == 0) {\n      local_var1 = 1;\n      pointer_pointer = local_array2 + var1;\n      do {\n        pointer2 = *pointer_pointer;\n        local_var1 = local_var1 + 1;\n        pointer_pointer = pointer_pointer + -1;\n      } while (pointer2 == (uint *)0x0);\n      local_var1 = var2 + local_var1;\n    }\n    else {\n      local_var1 = var2 + 1;\n    }\n    temp_var8 = var2 + 1;\n    pointer_var9 = (undefined4 *)(input6 + (temp_var8 + local_var3 + 0x3fffffff) * 4);\n    pointer5 = &stack_var1 + var2 + input4;\n    local_array1 = &stack_var2 + temp_var8;\n    do {\n      pointer_var9 = pointer_var9 + 1;\n      temp_var10 = __aeabi_i2d(*pointer_var9);\n      *pointer5 = temp_var10;\n      pointer_8 = pointer5 + 1;\n      if (counter2 < 0) {\n        temp_value5 = 0;\n      }\n      else {\n        temp_value5 = 0;\n        pointer_var5 = pointer_var3;\n        while( true ) {\n          pointer5 = pointer5 + -1;\n          pointer1 = pointer_var5 + 2;\n          temp_var10 = __muldf3((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),*pointer1,pointer_var5[3]);\n          temp_value5 = __aeabi_dadd((int)temp_value5,(int)((ulonglong)temp_value5 >> 0x20),(int)temp_var10,\n                                (int)((ulonglong)temp_var10 >> 0x20));\n          if (pointer1 == pointer_var3 + input4 * 2) break;\n          temp_var10 = *pointer5;\n          pointer_var5 = pointer1;\n        }\n      }\n      *local_array1 = temp_value5;\n      temp_var8 = temp_var8 + 1;\n      var2 = local_var1;\n      pointer5 = pointer_8;\n      local_array1 = local_array1 + 1;\n    } while (temp_var8 <= local_var1);\n  } while( true );\n  local_var3 = local_var3 + -0x18;\n  if (local_array2[index] == 0) {\n    pointer2 = local_array2 + var2 + 0x3ffffffe;\n    do {\n      temp4 = *pointer2;\n      index = index + -1;\n      local_var3 = local_var3 + -0x18;\n      pointer2 = pointer2 + -1;\n    } while (temp4 == 0);\n  }\nLAB_0800a9f6:\n  temp_var10 = scalbn(0,0x3ff00000,local_var3);\n  if (index < 0) {\n    if (2 < input5) {\n      if (input5 == 3) {\n        temp_var10 = 0;\nLAB_0800abe4:\n        if (temp_var8 == 0) {\n          *local_array2[1] = (undefined4)local_var4;\n          *(int *)((int)local_array2[1] + 4) = local_var4._4_4_;\n          *(undefined8 *)((int)local_array2[1] + 0x10) = temp_var10;\n          *(int *)((int)local_array2[1] + 8) = local_array4[0];\n          *(int *)((int)local_array2[1] + 0xc) = local_array4[1];\n          return result & 7;\n        }\n        *(int *)((int)local_array2[1] + 0x10) = (int)temp_var10;\n        *(int *)((int)local_array2[1] + 8) = local_array4[0];\n        *(int *)((int)local_array2[1] + 0x14) = (int)((ulonglong)temp_var10 >> 0x20) + -0x80000000;\n        *(int *)((int)local_array2[1] + 4) = local_var4._4_4_ + -0x80000000;\n        *(int *)((int)local_array2[1] + 0xc) = local_array4[1] + -0x80000000;\n        *local_array2[1] = (undefined4)local_var4;\n        return result & 7;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input5 < 1) {\n      if (input5 != 0) goto LAB_0800ab0e;\n      temp_var10 = 0;\nLAB_0800aafc:\n      counter2 = (int)((ulonglong)temp_var10 >> 0x20);\n      if (temp_var8 != 0) {\n        counter2 = counter2 + -0x80000000;\n      }\n      *local_array2[1] = (int)temp_var10;\n      *(int *)((int)local_array2[1] + 4) = counter2;\nLAB_0800ab0e:\n      return result & 7;\n    }\n    temp_var10 = 0;\n  }\n  else {\n    pointer_8 = &stack_var2 + index;\n    pointer2 = local_array2 + index + 1;\n    pointer5 = &stack_var2 + index + 1;\n    do {\n      temp2 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n      pointer2 = pointer2 + -1;\n      temp_value5 = __aeabi_i2d(*pointer2);\n      temp_value5 = __muldf3((int)temp_value5,(int)((ulonglong)temp_value5 >> 0x20),(int)temp_var10,temp2);\n      pointer5 = pointer5 + -1;\n      *pointer5 = temp_value5;\n      temp_var10 = __muldf3((int)temp_var10,temp2,0,0x3e700000);\n    } while (pointer2 != local_array2);\n    counter2 = 0;\n    do {\n      if (var1 < 0) {\n        temp_var10 = 0;\n      }\n      else {\n        temp2 = 0x40000000;\n        temp1 = 0x3ff921fb;\n        temp_var10 = 0;\n        var2 = 0;\n        pointer5 = pointer_8;\n        pointer_var3 = &DAT_0800c028;\n        while( true ) {\n          temp_value5 = __muldf3(*(undefined4 *)pointer5,*(undefined4 *)((int)pointer5 + 4),temp2,temp1);\n          temp_var10 = __aeabi_dadd((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),(int)temp_value5,\n                                (int)((ulonglong)temp_value5 >> 0x20));\n          var2 = var2 + 1;\n          if ((var1 < var2) || (counter2 < var2)) break;\n          temp2 = *pointer_var3;\n          temp1 = pointer_var3[1];\n          pointer5 = pointer5 + 1;\n          pointer_var3 = pointer_var3 + 2;\n        }\n      }\n      bool_var = counter2 != index;\n      *(int *)(&local_var4 + counter2) = (int)temp_var10;\n      *(int *)((int)&local_var4 + (counter2 * 2 + 1) * 4) = (int)((ulonglong)temp_var10 >> 0x20);\n      pointer_8 = pointer_8 + -1;\n      counter2 = counter2 + 1;\n    } while (bool_var);\n    if (2 < input5) {\n      if (input5 == 3) {\n        if (index != 0) {\n          pointer5 = &local_var4 + index;\n          temp_var10 = CONCAT44(*(undefined4 *)((int)&local_var4 + (index * 2 + 1) * 4),\n                            *(undefined4 *)pointer5);\n          do {\n            temp1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n            temp2 = (undefined4)temp_var10;\n            temp3 = *(undefined4 *)(pointer5 + -1);\n            temp_var5 = *(undefined4 *)((int)pointer5 + -4);\n            temp_var10 = __aeabi_dadd(temp2,temp1,temp3,temp_var5);\n            temp_value5 = __subdf3(temp3,temp_var5,(int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20));\n            temp_value5 = __aeabi_dadd((int)temp_value5,(int)((ulonglong)temp_value5 >> 0x20),temp2,temp1);\n            *pointer5 = temp_value5;\n            pointer5 = pointer5 + -1;\n            *pointer5 = temp_var10;\n          } while (&local_var4 != pointer5);\n          if (1 < index) {\n            pointer5 = &local_var4 + index;\n            temp_var10 = CONCAT44(*(undefined4 *)((int)&local_var4 + (index * 2 + 1) * 4),\n                              *(undefined4 *)pointer5);\n            do {\n              temp1 = (undefined4)((ulonglong)temp_var10 >> 0x20);\n              temp2 = (undefined4)temp_var10;\n              temp3 = *(undefined4 *)(pointer5 + -1);\n              temp_var5 = *(undefined4 *)((int)pointer5 + -4);\n              temp_var10 = __aeabi_dadd(temp2,temp1,temp3,temp_var5);\n              temp_value5 = __subdf3(temp3,temp_var5,(int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20));\n              temp_value5 = __aeabi_dadd((int)temp_value5,(int)((ulonglong)temp_value5 >> 0x20),temp2,temp1);\n              *pointer5 = temp_value5;\n              pointer5 = pointer5 + -1;\n              *pointer5 = temp_var10;\n            } while (&local_var4 + 1 != pointer5);\n            temp_var10 = 0;\n            pointer5 = &local_var4 + index + 1;\n            do {\n              pointer_8 = pointer5 + -1;\n              temp_var10 = __aeabi_dadd((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),\n                                    *(undefined4 *)pointer_8,*(undefined4 *)((int)pointer5 + -4));\n              pointer5 = pointer_8;\n            } while (&local_var4 + 2 != pointer_8);\n            goto LAB_0800abe4;\n          }\n        }\n        temp_var10 = 0;\n        goto LAB_0800abe4;\n      }\n      goto LAB_0800ab0e;\n    }\n    if (input5 < 1) {\n      if (input5 != 0) goto LAB_0800ab0e;\n      temp_var10 = 0;\n      pointer5 = &local_var4 + index + 1;\n      do {\n        pointer_8 = pointer5 + -1;\n        temp_var10 = __aeabi_dadd((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),*(undefined4 *)pointer_8,\n                              *(undefined4 *)((int)pointer5 + -4));\n        pointer5 = pointer_8;\n      } while (&local_var4 != pointer_8);\n      goto LAB_0800aafc;\n    }\n    temp_var10 = 0;\n    pointer5 = &local_var4 + index + 1;\n    do {\n      pointer_8 = pointer5 + -1;\n      temp_var10 = __aeabi_dadd((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),*(undefined4 *)pointer_8,\n                            *(undefined4 *)((int)pointer5 + -4));\n      pointer5 = pointer_8;\n    } while (&local_var4 != pointer_8);\n  }\n  counter2 = (int)((ulonglong)temp_var10 >> 0x20);\n  temp2 = (undefined4)temp_var10;\n  if (temp_var8 == 0) {\n    *(undefined8 *)local_array2[1] = temp_var10;\n    temp_var10 = __subdf3((undefined4)local_var4,local_var4._4_4_,temp2,counter2);\n    if (index < 1) goto LAB_0800ad26;\nLAB_0800ad04:\n    counter2 = 1;\n    pointer5 = &local_var4;\n    do {\n      temp_var10 = __aeabi_dadd((int)temp_var10,(int)((ulonglong)temp_var10 >> 0x20),\n                            *(undefined4 *)(pointer5 + 1),*(undefined4 *)((int)pointer5 + 0xc));\n      counter2 = counter2 + 1;\n      pointer5 = pointer5 + 1;\n    } while (counter2 <= index);\n    if (temp_var8 == 0) goto LAB_0800ad26;\n  }\n  else {\n    *local_array2[1] = temp2;\n    *(int *)((int)local_array2[1] + 4) = counter2 + -0x80000000;\n    temp_var10 = __subdf3((undefined4)local_var4,local_var4._4_4_,temp2,counter2);\n    if (0 < index) goto LAB_0800ad04;\n  }\n  temp_var10 = CONCAT44((int)((ulonglong)temp_var10 >> 0x20) + -0x80000000,(int)temp_var10);\nLAB_0800ad26:\n  *(undefined8 *)((int)local_array2[1] + 8) = temp_var10;\n  return result & 7;\n}\n\n",
            "current_name": "calculate_result_0800a5a0",
            "entrypoint": "0x0800a5a0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800a5a0": "calculate_result_0800a5a0",
                "bVar24": "bool_var",
                "iVar14": "counter3",
                "iVar15": "var1",
                "iVar17": "var2",
                "iVar21": "temp_var8",
                "iVar4": "index",
                "iVar9": "counter2",
                "local_160": "local_array4",
                "local_168": "local_var4",
                "local_258": "local_array2",
                "local_260": "local_array2",
                "local_26c": "local_var3",
                "local_270": "local_var3",
                "local_280": "local_var1",
                "local_284": "local_array1",
                "param_1": "input_param1",
                "param_2": "input2",
                "param_3": "input3",
                "param_4": "input4",
                "param_5": "input5",
                "param_6": "input6",
                "ppuVar7": "pointer_pointer",
                "puVar1": "pointer1",
                "puVar10": "pointer_var3",
                "puVar13": "pointer_var4",
                "puVar16": "pointer5",
                "puVar18": "pointer_var5",
                "puVar19": "pointer_var7",
                "puVar22": "pointer_8",
                "puVar23": "pointer_var9",
                "puVar5": "pointer2",
                "uStack_208": "stack_var1",
                "uStack_c8": "stack_var2",
                "uVar11": "temp3",
                "uVar12": "temp4",
                "uVar16": "temp_variable1",
                "uVar18": "loop_temp",
                "uVar19": "loop_var",
                "uVar2": "result",
                "uVar20": "temp_var5",
                "uVar25": "temp_value5",
                "uVar26": "temp_var10",
                "uVar27": "temp_var11",
                "uVar3": "temp_result",
                "uVar6": "temp1",
                "uVar8": "temp2"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800adf0": {
            "additional_data": {
                "FUN_080082d0": {
                    "calculate_sub1": 1,
                    "multiply_32bit_to_64bit": 1,
                    "multiply_and_add_unsigned": 1,
                    "multiply_and_convert_2": 1,
                    "multiply_double": 1,
                    "multiply_signed32": 1,
                    "multiply_signed_nums": 1,
                    "multiply_uint32_result": 1,
                    "multiply_unsigned_integers_with_carry": 1,
                    "multiply_unsigned_long_long_alternate": 1
                },
                "FUN_080082d4": {
                    "calculate_mul1": 1,
                    "convert_to_integer": 1,
                    "multiply_32bit": 1,
                    "multiply_and_convert": 1,
                    "multiply_uint32": 1,
                    "multiply_unsigned": 1,
                    "multiply_unsigned32": 1,
                    "multiply_unsigned_integers": 1,
                    "multiply_unsigned_long_long": 1,
                    "multiply_unsigned_nums": 1
                },
                "FUN_08008640": {
                    "add_unsigned32": 1,
                    "add_unsigned_nums": 1,
                    "calculate_sub2": 1,
                    "multiply_and_subtract_unsigned": 1,
                    "subtract_32bit_from_64bit": 1,
                    "subtract_and_convert_2": 1,
                    "subtract_double": 1,
                    "subtract_two_numbers": 1,
                    "subtract_uint32_result": 1,
                    "subtract_unsigned_integers_with_carry": 1
                },
                "FUN_08008ba0": {
                    "add_unsigned": 1,
                    "calculate_mul2": 1,
                    "convert_to_double": 1,
                    "subtract_32bit": 1,
                    "subtract_and_convert": 1,
                    "subtract_uint32": 1,
                    "subtract_unsigned32": 1,
                    "subtract_unsigned_int": 1,
                    "subtract_unsigned_integers": 1,
                    "subtract_unsigned_nums": 1
                },
                "FUN_0800adf0": {
                    "calculate": 3,
                    "calculate_expression": 1,
                    "calculate_real_number": 1,
                    "calculate_result": 23,
                    "calculate_sqrt": 1,
                    "calculate_value": 1
                },
                "__aeabi_d2iz": {
                    "convert_double_to_integer": 1
                },
                "__aeabi_dadd": {
                    "add_double_values": 1
                },
                "__muldf3": {
                    "multiply_double_values": 1
                },
                "__subdf3": {
                    "subtract_double_values": 1
                },
                "iVar1": {
                    "conversion_result": 18,
                    "converted_to_integer": 1,
                    "converted_value": 3,
                    "int_value": 1,
                    "is_below_threshold": 1,
                    "is_small_value": 1,
                    "is_zero": 2,
                    "result": 1
                },
                "param_1": {
                    "base": 1,
                    "initial_value": 1,
                    "input": 5,
                    "input1": 2,
                    "input_num": 1,
                    "input_val": 1,
                    "input_value": 16,
                    "real_number": 1,
                    "result": 3
                },
                "param_2": {
                    "factor": 1,
                    "input2": 2,
                    "input_limit": 1,
                    "input_mask": 2,
                    "input_multiplier": 1,
                    "input_parameter": 1,
                    "input_val": 1,
                    "integer_number": 1,
                    "mask": 1,
                    "multiplier": 12,
                    "operand": 2,
                    "power": 1,
                    "threshold": 1,
                    "value": 4
                },
                "param_3": {
                    "additional_value_1": 1,
                    "calc_param1": 1,
                    "constant1": 1,
                    "constant_1": 1,
                    "dividend": 1,
                    "factor1": 3,
                    "input3": 2,
                    "input_multiplier1": 1,
                    "mul_param_1": 1,
                    "multiplier1": 1,
                    "multiplier_1": 2,
                    "multiply": 1,
                    "operand1": 5,
                    "operand_1": 2,
                    "param3": 2,
                    "param_3": 1,
                    "parameter_a": 1,
                    "sub_param_1": 1,
                    "subtract_1": 1,
                    "value1": 1
                },
                "param_4": {
                    "additional_value_2": 1,
                    "calc_param2": 1,
                    "constant2": 1,
                    "constant_2": 1,
                    "divide": 1,
                    "divisor": 1,
                    "factor2": 3,
                    "input4": 2,
                    "input_multiplier2": 1,
                    "mul_param_2": 1,
                    "multiplier2": 1,
                    "multiplier_2": 2,
                    "operand2": 5,
                    "operand_2": 2,
                    "param4": 2,
                    "param_4": 1,
                    "parameter_b": 1,
                    "sub_param_2": 1,
                    "subtract_2": 1,
                    "value2": 1
                },
                "param_5": {
                    "condition": 4,
                    "flag": 3,
                    "is_enabled": 1,
                    "is_mul_operation": 1,
                    "is_negative": 4,
                    "is_positive": 2,
                    "is_reverse": 1,
                    "is_reversed": 4,
                    "is_subtracted": 1,
                    "is_subtraction": 3,
                    "mul_flag": 1,
                    "needs_subtraction": 1,
                    "reverse_flag": 2,
                    "should_multiply": 1,
                    "subtract_flag": 1,
                    "use_multiplier_2": 1
                },
                "uVar10": {
                    "final_result_high": 1,
                    "temp_subtract": 1
                },
                "uVar11": {
                    "temp_constant": 1
                },
                "uVar12": {
                    "temp_i2f": 1
                },
                "uVar13": {
                    "temp_f2i": 1
                },
                "uVar2": {
                    "low_result": 1,
                    "mul_result1_low": 1,
                    "mul_result_high": 1,
                    "partial_result1": 1,
                    "partial_result1_low": 1,
                    "result1_low": 3,
                    "result1_lower": 1,
                    "result_low": 18,
                    "result_low_part": 1,
                    "result_lower": 1,
                    "temp_result1": 1
                },
                "uVar3": {
                    "high_result": 1,
                    "mul_result1_high": 1,
                    "mul_result_low": 1,
                    "partial_result1_high": 1,
                    "partial_result1_low_word": 1,
                    "result1_high": 3,
                    "result1_upper": 1,
                    "result_high": 18,
                    "result_high_part": 1,
                    "result_upper": 1,
                    "temp_result2": 1
                },
                "uVar4": {
                    "mul_result2_low": 1,
                    "mul_result_high2": 1,
                    "mul_result_low": 1,
                    "partial_result1_high_word": 1,
                    "partial_result2_low": 1,
                    "result2_low": 3,
                    "result2_lower": 1,
                    "result_low2": 1,
                    "result_low_temp": 1,
                    "temp1_low": 2,
                    "temp_low": 14,
                    "temp_low_part": 1,
                    "temp_lower": 1,
                    "temp_result3": 1
                },
                "uVar5": {
                    "mul_result2_high": 1,
                    "mul_result_high": 1,
                    "mul_result_low2": 1,
                    "partial_result2": 1,
                    "partial_result2_high": 1,
                    "result2_high": 3,
                    "result2_upper": 1,
                    "result_high2": 1,
                    "result_high_temp": 1,
                    "temp1_high": 2,
                    "temp_high": 14,
                    "temp_high_part": 1,
                    "temp_result4": 1,
                    "temp_upper": 1
                },
                "uVar6": {
                    "accumulated_low": 1,
                    "additional_low": 1,
                    "carry": 1,
                    "condition_result_high": 1,
                    "conversion_high": 1,
                    "mul_result3_high": 1,
                    "mul_temp_high_part": 1,
                    "partial_result2_high_word": 1,
                    "sub_result_high": 1,
                    "subtraction_result_lower": 1,
                    "temp": 7,
                    "temp1": 1,
                    "temp2_low": 3,
                    "temp_divide_low": 1,
                    "temp_low": 2,
                    "temp_low2": 1,
                    "temp_result": 1,
                    "temp_result5": 1,
                    "temp_result_low": 1,
                    "temp_result_lower": 1,
                    "u_var6": 1
                },
                "uVar7": {
                    "accumulated_high": 1,
                    "additional_high": 1,
                    "calculation_result": 1,
                    "final_result": 2,
                    "final_result_low": 1,
                    "intermediate_result_low": 1,
                    "result": 1,
                    "sub_calculation": 1,
                    "subtraction_result_upper": 1,
                    "temp2": 1,
                    "temp2_high": 3,
                    "temp2_low": 1,
                    "temp_divide_high": 1,
                    "temp_high": 2,
                    "temp_high2": 1,
                    "temp_low2": 1,
                    "temp_result": 3,
                    "temp_result1_high": 1,
                    "temp_result_high": 2,
                    "temp_result_high_part": 1,
                    "temp_result_low": 2,
                    "u_var7": 1
                },
                "uVar8": {
                    "additional_temp_high": 1,
                    "calculation_constant": 1,
                    "final_result_high": 1,
                    "intermediate_result_high": 1,
                    "mul_result": 1,
                    "mul_temp_result_high_part": 1,
                    "reversed_multipler": 1,
                    "sub_temp": 1,
                    "subtraction_temp_lower": 1,
                    "temp2_high": 2,
                    "temp3": 1,
                    "temp3_high": 3,
                    "temp_high2": 2,
                    "temp_low3": 1,
                    "temp_multiply": 1,
                    "temp_operand": 1,
                    "temp_result": 1,
                    "temp_result2": 2,
                    "temp_result2_high": 2,
                    "temp_result6": 1,
                    "temp_result_high": 2,
                    "temp_result_low": 1,
                    "u_var8": 1
                },
                "uVar9": {
                    "final_result_low": 1,
                    "temp_add_sub": 1,
                    "temp_high3": 1,
                    "temp_result3_high": 1
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008ba0",
                "FUN_080082d0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_080096e8",
                "FUN_08009410"
            ],
            "code": "\nundefined4\ncalculate_result_0800adf0(undefined4 input_value,uint multiplier,undefined4 operand1,undefined4 operand2,int is_negative)\n\n{\n  int conversion_result;\n  undefined4 result_low;\n  undefined4 result_high;\n  undefined4 temp_low;\n  undefined4 temp_high;\n  undefined4 temp;\n  undefined8 temp_result;\n  undefined8 temp3_high;\n  \n  if (((multiplier & 0x7fffffff) < 0x3e400000) && (conversion_result = convert_double_to_integer(), conversion_result == 0)) {\n    return input_value;\n  }\n  temp_result = multiply_double_values(input_value,multiplier,input_value);\n  temp_low = (undefined4)((ulonglong)temp_result >> 0x20);\n  result_high = (undefined4)temp_result;\n  temp_result = multiply_double_values(input_value,multiplier,result_high,temp_low);\n  temp_high = (undefined4)((ulonglong)temp_result >> 0x20);\n  result_low = (undefined4)temp_result;\n  temp_result = multiply_double_values(result_high,temp_low,0x5acfd57c,0x3de5d93a);\n  temp_result = subtract_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x8a2b9ceb,0x3e5ae5e6);\n  temp_result = multiply_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_low);\n  temp_result = add_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x57b1fe7d,0x3ec71de3);\n  temp_result = multiply_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_low);\n  temp_result = subtract_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x19c161d5,0x3f2a01a0);\n  temp_result = multiply_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_low);\n  temp_result = add_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x1110f8a6,0x3f811111);\n  temp = (undefined4)((ulonglong)temp_result >> 0x20);\n  if (is_negative != 0) {\n    temp3_high = multiply_double_values(operand1,operand2,0,0x3fe00000);\n    temp_result = multiply_double_values(result_low,temp_high,(int)temp_result,temp);\n    temp_result = subtract_double_values((int)temp3_high,(int)((ulonglong)temp3_high >> 0x20),(int)temp_result,\n                     (int)((ulonglong)temp_result >> 0x20));\n    temp_result = multiply_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_high,temp_low);\n    temp_result = subtract_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),operand1,operand2);\n    temp3_high = multiply_double_values(result_low,temp_high,0x55555549,0x3fc55555);\n    temp_result = add_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),(int)temp3_high,\n                         (int)((ulonglong)temp3_high >> 0x20));\n    result_high = subtract_double_values(input_value,multiplier,(int)temp_result,(int)((ulonglong)temp_result >> 0x20));\n    return result_high;\n  }\n  temp_result = multiply_double_values(result_high,temp_low,(int)temp_result,temp);\n  temp_result = subtract_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),0x55555549,0x3fc55555);\n  temp_result = multiply_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),result_low,temp_high);\n  result_high = add_double_values((int)temp_result,(int)((ulonglong)temp_result >> 0x20),input_value,multiplier);\n  return result_high;\n}\n\n",
            "current_name": "calculate_result_0800adf0",
            "entrypoint": "0x0800adf0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800adf0": "calculate_result_0800adf0",
                "__aeabi_d2iz": "convert_double_to_integer",
                "__aeabi_dadd": "add_double_values",
                "__muldf3": "multiply_double_values",
                "__subdf3": "subtract_double_values",
                "iVar1": "conversion_result",
                "param_1": "input_value",
                "param_2": "multiplier",
                "param_3": "operand1",
                "param_4": "operand2",
                "param_5": "is_negative",
                "uVar2": "result_low",
                "uVar3": "result_high",
                "uVar4": "temp_low",
                "uVar5": "temp_high",
                "uVar6": "temp",
                "uVar7": "temp_result",
                "uVar8": "temp3_high"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800af78": {
            "additional_data": {
                "FUN_0800af78": {
                    "calculate": 1,
                    "calculate_function": 1,
                    "calculate_function_result": 1,
                    "calculate_improved_value": 3,
                    "calculate_new_value": 1,
                    "calculate_polynomial": 1,
                    "calculate_pow": 1,
                    "calculate_result": 11,
                    "calculate_something": 1,
                    "calculate_square": 1,
                    "calculate_square_root": 3,
                    "calculate_square_root_approximation": 1,
                    "calculate_value": 5
                },
                "__aeabi_dadd": {
                    "addition": 1
                },
                "__aeabi_dcmpgt": {
                    "compare_greater": 1
                },
                "__divdf3": {
                    "divide_floats": 1
                },
                "__muldf3": {
                    "multiply_floats": 1
                },
                "__subdf3": {
                    "subtract_floats": 1
                },
                "fabs": {
                    "absolute_value": 1
                },
                "iVar5": {
                    "comparison": 2,
                    "comparison_result": 4,
                    "comparison_var": 1,
                    "output": 4,
                    "output_result": 1,
                    "result": 9,
                    "result5": 2,
                    "return_value": 7,
                    "type": 1
                },
                "local_2c": {
                    "calculation_result_4": 1,
                    "local_result": 1,
                    "local_var": 10,
                    "local_variable": 5,
                    "local_variable1": 1,
                    "temp3": 3,
                    "temp5": 2,
                    "temp8": 1,
                    "temp9": 3,
                    "temp_3": 1,
                    "temp_var_2c": 1,
                    "temp_var_9": 1,
                    "temporary_value": 1
                },
                "param_1": {
                    "base": 1,
                    "input": 1,
                    "input1": 16,
                    "input_1": 1,
                    "input_int": 1,
                    "input_param1": 1,
                    "input_param_1": 1,
                    "input_val_1": 1,
                    "input_value": 1,
                    "input_value1": 5,
                    "num1": 1,
                    "value_1": 1
                },
                "param_2": {
                    "exponent": 1,
                    "flag": 1,
                    "input2": 16,
                    "input_2": 1,
                    "input_param2": 1,
                    "input_param_2": 1,
                    "input_uint": 1,
                    "input_val_2": 1,
                    "input_value2": 5,
                    "num2": 1,
                    "param": 1,
                    "value_2": 1
                },
                "uVar1": {
                    "result1": 20,
                    "result_1": 1,
                    "result_var1": 1,
                    "temp1": 4,
                    "temp_4": 1,
                    "temp_var_1": 2,
                    "value1": 1,
                    "var1": 1
                },
                "uVar2": {
                    "result2": 20,
                    "result_2": 1,
                    "result_var2": 1,
                    "temp2": 4,
                    "temp_5": 1,
                    "temp_var_2": 2,
                    "value2": 1,
                    "var2": 1
                },
                "uVar3": {
                    "result3": 20,
                    "result_3": 1,
                    "result_var3": 1,
                    "temp3": 4,
                    "temp_6": 1,
                    "temp_var_3": 2,
                    "value3": 1,
                    "var3": 1
                },
                "uVar4": {
                    "result4": 20,
                    "result_4": 1,
                    "result_var4": 1,
                    "temp4": 4,
                    "temp_7": 1,
                    "temp_var_4": 2,
                    "value4": 1,
                    "var4": 1
                },
                "uVar6": {
                    "calculation_result_1": 1,
                    "intermediate1": 1,
                    "intermediate_value1": 1,
                    "mul_result_var1": 1,
                    "result5": 3,
                    "result6": 3,
                    "temp1": 11,
                    "temp5": 4,
                    "temp_8": 1,
                    "temp_result1": 1,
                    "temp_var1": 1,
                    "temp_var_5": 1,
                    "temp_var_6": 1,
                    "value5": 1
                },
                "uVar7": {
                    "abs_input_2": 1,
                    "abs_param_2": 1,
                    "mask": 1,
                    "masked_value": 1,
                    "modified_input_value2": 1,
                    "positive_input2": 2,
                    "positive_value2": 1,
                    "result7": 1,
                    "temp": 2,
                    "temp2": 10,
                    "temp6": 3,
                    "temp_value": 1,
                    "temp_value_2": 1,
                    "temp_var": 2,
                    "temp_var2": 1,
                    "temp_var_6": 1,
                    "unsigned_input2": 1
                },
                "uVar8": {
                    "calculation_result": 3,
                    "calculation_result_2": 1,
                    "intermediate_result": 1,
                    "intermediate_value1": 1,
                    "intermediate_value2": 1,
                    "mul_result_var2": 1,
                    "result8": 1,
                    "temp1": 3,
                    "temp3": 9,
                    "temp6": 1,
                    "temp7": 3,
                    "temp_1": 1,
                    "temp_result2": 1,
                    "temp_var2": 1,
                    "temp_var3": 1,
                    "temp_var_7": 1,
                    "temp_var_8": 1
                },
                "uVar9": {
                    "calculation_result_3": 1,
                    "intermediate_result2": 1,
                    "intermediate_value2": 1,
                    "intermediate_value3": 1,
                    "mul_result_var3": 1,
                    "result9": 1,
                    "temp2": 4,
                    "temp4": 9,
                    "temp7": 1,
                    "temp8": 3,
                    "temp_2": 1,
                    "temp_result": 2,
                    "temp_result3": 1,
                    "temp_var3": 1,
                    "temp_var4": 1,
                    "temp_var_8": 1,
                    "temp_var_9": 1
                }
            },
            "called": [
                "FUN_08008b60",
                "FUN_080082d4",
                "FUN_0800b2cc",
                "FUN_08008894",
                "FUN_080082d0",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_08009990"
            ],
            "code": "\nint calculate_function_result_0800af78(int input1,uint input2)\n\n{\n  undefined4 result1;\n  undefined4 result2;\n  undefined4 result3;\n  undefined4 result4;\n  int result;\n  undefined4 temp1;\n  uint temp2;\n  undefined8 temp3;\n  undefined8 temp4;\n  undefined4 local_var;\n  \n  temp3 = CONCAT44(input2,input1);\n  temp2 = input2 & 0x7fffffff;\n  if (temp2 < 0x44100000) {\n    if (temp2 < 0x3fdc0000) {\n      if (temp2 < 0x3e200000) {\n        temp4 = addition(input1,input2,0x8800759c,0x7e37e43c);\n        result = compare_greater((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        if (result != 0) {\n          return input1;\n        }\n      }\n      result = -1;\n    }\n    else {\n      temp3 = absolute_value();\n      result4 = (undefined4)((ulonglong)temp3 >> 0x20);\n      result1 = (undefined4)temp3;\n      if (temp2 < 0x3ff30000) {\n        if (temp2 < 0x3fe60000) {\n          temp3 = addition(result1,result4,result1,result4);\n          temp3 = subtract_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),0,0x3ff00000);\n          temp4 = addition(result1,result4,0,0x40000000);\n          temp3 = divide_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                           (int)((ulonglong)temp4 >> 0x20));\n          result = 0;\n        }\n        else {\n          temp3 = subtract_floats(result1,result4,0,0x3ff00000);\n          temp4 = addition(result1,result4,0,0x3ff00000);\n          temp3 = divide_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                           (int)((ulonglong)temp4 >> 0x20));\n          result = 1;\n        }\n      }\n      else if (temp2 < 0x40038000) {\n        temp3 = subtract_floats(result1,result4,0,0x3ff80000);\n        temp4 = multiply_floats(result1,result4,0,0x3ff80000);\n        temp4 = addition((int)temp4,(int)((ulonglong)temp4 >> 0x20),0,0x3ff00000);\n        temp3 = divide_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),(int)temp4,\n                         (int)((ulonglong)temp4 >> 0x20));\n        result = 2;\n      }\n      else {\n        temp3 = divide_floats(0,0xbff00000,result1,result4);\n        result = 3;\n      }\n    }\n    local_var = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp1 = (undefined4)temp3;\n    temp3 = multiply_floats(temp1,local_var,temp1);\n    result2 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result1 = (undefined4)temp3;\n    temp3 = multiply_floats(result1,result2,result1,result2);\n    result3 = (undefined4)((ulonglong)temp3 >> 0x20);\n    result4 = (undefined4)temp3;\n    temp3 = multiply_floats(result4,result3,0xe322da11,0x3f90ad3a);\n    temp3 = addition((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x24760deb,0x3fa97b4b);\n    temp3 = multiply_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = addition((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xa0d03d51,0x3fb10d66);\n    temp3 = multiply_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = addition((int)temp3,(int)((ulonglong)temp3 >> 0x20),0xc54c206e,0x3fb745cd);\n    temp3 = multiply_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = addition((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x920083ff,0x3fc24924);\n    temp3 = multiply_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),result4,result3);\n    temp3 = addition((int)temp3,(int)((ulonglong)temp3 >> 0x20),0x5555550d,0x3fd55555);\n    temp3 = multiply_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),result1,result2);\n    result1 = (undefined4)((ulonglong)temp3 >> 0x20);\n    temp4 = multiply_floats(result4,result3,0x2c6a6c2f,0xbfa2b444);\n    temp4 = subtract_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x52defd9a,0x3fadde2d);\n    temp4 = multiply_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = subtract_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xaf749a6d,0x3fb3b0f2);\n    temp4 = multiply_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = subtract_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),0xfe231671,0x3fbc71c6);\n    temp4 = multiply_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    temp4 = subtract_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),0x9998ebc4,0x3fc99999);\n    temp4 = multiply_floats((int)temp4,(int)((ulonglong)temp4 >> 0x20),result4,result3);\n    result4 = (undefined4)((ulonglong)temp4 >> 0x20);\n    if (result == -1) {\n      temp3 = addition((int)temp3,result1,(int)temp4,result4);\n      temp3 = multiply_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,local_var);\n      result = subtract_floats(temp1,local_var,(int)temp3,(int)((ulonglong)temp3 >> 0x20));\n      return result;\n    }\n    temp3 = addition((int)temp3,result1,(int)temp4,result4);\n    temp3 = multiply_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,local_var);\n    temp3 = subtract_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),\n                     *(undefined4 *)(&UNK_0800c090 + result * 8),\n                     *(undefined4 *)(&UNK_0800c094 + result * 8));\n    temp3 = subtract_floats((int)temp3,(int)((ulonglong)temp3 >> 0x20),temp1,local_var);\n    result = subtract_floats(*(undefined4 *)(&UNK_0800c070 + result * 8),\n                     *(undefined4 *)(&UNK_0800c074 + result * 8),(int)temp3,\n                     (int)((ulonglong)temp3 >> 0x20));\n    if ((int)input2 < 0) {\n      return result;\n    }\n  }\n  else {\n    if ((0x7ff00000 < temp2) || ((temp2 == 0x7ff00000 && (input1 != 0)))) {\n      result = addition(input1,input2,input1);\n      return result;\n    }\n    result = 0x54442d18;\n  }\n  return result;\n}\n\n",
            "current_name": "calculate_function_result_0800af78",
            "entrypoint": "0x0800af78",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800af78": "calculate_function_result_0800af78",
                "__aeabi_dadd": "addition",
                "__aeabi_dcmpgt": "compare_greater",
                "__divdf3": "divide_floats",
                "__muldf3": "multiply_floats",
                "__subdf3": "subtract_floats",
                "fabs": "absolute_value",
                "iVar5": "result",
                "local_2c": "local_var",
                "param_1": "input1",
                "param_2": "input2",
                "uVar1": "result1",
                "uVar2": "result2",
                "uVar3": "result3",
                "uVar4": "result4",
                "uVar6": "temp1",
                "uVar7": "temp2",
                "uVar8": "temp3",
                "uVar9": "temp4"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2cc": {
            "called": [],
            "calling": [
                "FUN_08009d78",
                "FUN_0800af78",
                "FUN_08009990"
            ],
            "code": "\nvoid FUNC_0800b2cc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b2cc",
            "entrypoint": "0x0800b2cc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b2cc": "FUNC_0800b2cc"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b2d4": {
            "additional_data": {
                "FUN_0800b2d4": {
                    "add_and_shift": 1,
                    "add_offset_and_shift": 1,
                    "apply_bitwise_operations": 1,
                    "apply_sign_and_shift": 1,
                    "calculate_bitwise_result": 2,
                    "calculate_bitwise_shift": 1,
                    "calculate_msb_set": 1,
                    "calculate_new_value": 1,
                    "calculate_set_bit_count": 1,
                    "calculate_shift_right": 1,
                    "calculate_shifted_bit_count": 1,
                    "calculate_sign_bit": 2,
                    "clear_most_significant_bit": 1,
                    "extract_bit_31": 1,
                    "extract_bit_value": 1,
                    "extract_high_bit": 1,
                    "extract_most_significant_bit": 1,
                    "get_msb_set_bit_position": 1,
                    "get_sign_bit": 2,
                    "handle_unsigned_integer": 1,
                    "mask_and_shift": 1,
                    "set_bit_and_shift": 3,
                    "set_bitwise_or_with_given_bit": 1,
                    "set_most_significant_bit_to_one": 1,
                    "set_msb_bit_and_shift": 1,
                    "shift_right_with_sign_extension": 1
                },
                "param_1": {
                    "arg1": 1,
                    "flags": 1,
                    "input": 1,
                    "input_flag": 5,
                    "input_parameter": 1,
                    "input_status": 1,
                    "input_value": 3,
                    "param": 2,
                    "param1": 3,
                    "param_unused": 1,
                    "pointer_to_data": 1,
                    "result": 1,
                    "status_flag": 1,
                    "undefined": 3,
                    "undefined_arg": 1,
                    "uninitialized_variable": 1,
                    "unspecified_parameter": 1,
                    "unused": 1,
                    "unused_parameter": 1,
                    "value": 1
                },
                "param_2": {
                    "bit_mask": 1,
                    "bit_position": 1,
                    "bitmask": 1,
                    "bitwise_operation_value": 1,
                    "input": 7,
                    "input_integer": 1,
                    "input_number": 3,
                    "input_value": 8,
                    "new_value": 1,
                    "number": 2,
                    "original_value": 1,
                    "value": 3,
                    "value_to_clear_bit": 1
                },
                "param_3": {
                    "new_variable_name": 1,
                    "num": 1,
                    "result": 1,
                    "shift_amount": 1,
                    "shift_value": 1,
                    "shifted_val": 1
                },
                "param_4": {
                    "constant_value": 1,
                    "count": 1
                },
                "param_5": {
                    "bit_count": 1
                },
                "result": {
                    "msb_set": 1,
                    "output": 1,
                    "shifted_result": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_0800981c"
            ],
            "code": "\nuint set_msb_bit_and_shift_0800b2d4(undefined4 input_flag,uint input_value)\n\n{\n  return (input_value | 0x80000000) + 0x100000 >> 0x1f;\n}\n\n",
            "current_name": "set_msb_bit_and_shift_0800b2d4",
            "entrypoint": "0x0800b2d4",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2d4": "set_msb_bit_and_shift_0800b2d4",
                "param_1": "input_flag",
                "param_2": "input_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e0": {
            "additional_data": {
                "": {
                    "": 1
                },
                "FUN_0800b2e0": {
                    "calculate_result": 1,
                    "do_nothing": 1,
                    "get_default_value": 1,
                    "get_return_value": 1,
                    "initialize": 12,
                    "initialize_application": 7,
                    "initialize_data": 2,
                    "initialize_function": 1,
                    "initialize_program": 4,
                    "initialize_zero": 1
                },
                "original_variable_name": {
                    "new_initialized_variable": 1
                },
                "return": {
                    "status": 2
                },
                "undefined4": {
                    "int": 2,
                    "void": 13
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "code": "\nvoid initialize_application_0800b2e0(void)\n\n{\n  status 0;\n}\n\n",
            "current_name": "initialize_application_0800b2e0",
            "entrypoint": "0x0800b2e0",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b2e0": "initialize_application_0800b2e0",
                "return": "status",
                "undefined4": "void"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b2e8": {
            "additional_data": {
                "0": {
                    "0": 1
                },
                "0x100000": {
                    "0x100000": 1
                },
                "0x1a56e1f": {
                    "0x1a56e1f": 1,
                    "constant_11": 1
                },
                "0x20": {
                    "constant_4": 1
                },
                "0x35": {
                    "0x35": 1,
                    "constant_6": 1
                },
                "0x36": {
                    "0x36": 1,
                    "constant_7": 1
                },
                "0x3c900000": {
                    "0x3c900000": 1,
                    "constant_8": 1
                },
                "0x43500000": {
                    "0x43500000": 1,
                    "constant_1": 1
                },
                "0x7e37e43c": {
                    "0x7e37e43c": 1,
                    "constant_14": 1
                },
                "0x7ff": {
                    "0x7ff": 1,
                    "constant_5": 1
                },
                "0x7fffffff": {
                    "0x7fffffff": 1,
                    "constant_2": 1
                },
                "0x80000000": {
                    "constant_10": 1
                },
                "0x800fffff": {
                    "0x800fffff": 1
                },
                "0x8800759c": {
                    "0x8800759c": 1,
                    "constant": 1,
                    "constant_13": 1
                },
                "0xc2f8f359": {
                    "0xc2f8f359": 1,
                    "constant_12": 1
                },
                "0xc351": {
                    "0xc351": 1,
                    "constant_9": 1
                },
                "CONCAT44": {
                    "combine_64bits": 1,
                    "concatenate_values": 1
                },
                "FUN_080082d4": {
                    "function_1": 1,
                    "multiply_uints_long": 1
                },
                "FUN_08008640": {
                    "function_2": 1,
                    "multiply_uints": 1
                },
                "FUN_0800b2e8": {
                    "calculate_exponent": 2,
                    "calculate_floating_point_number": 1,
                    "calculate_product": 1,
                    "calculate_result": 22,
                    "calculate_value": 2,
                    "compute_result": 1,
                    "perform_calculation": 1
                },
                "F_UNLOOPS": {
                    "calculate_value": 1
                },
                "SCARRY4": {
                    "check_overflow": 1,
                    "check_signed_overflow": 2,
                    "is_carry_overflow": 1,
                    "signed_carry": 2,
                    "signed_carry_4": 1,
                    "signed_overflow": 1,
                    "signed_overflow_check": 3,
                    "subtraction_overflow_check": 1
                },
                "__aeabi_dadd": {
                    "add": 2,
                    "add_double": 6,
                    "add_double_float": 1,
                    "add_doubles": 1,
                    "add_float": 1,
                    "add_floats": 2
                },
                "__muldf3": {
                    "multiply": 2,
                    "multiply_double": 5,
                    "multiply_double_float": 1,
                    "multiply_float_3": 1,
                    "multiply_floats": 4
                },
                "iVar2": {
                    "exponent_sum": 1,
                    "modified_value": 1,
                    "result": 1,
                    "result_exponent": 1,
                    "result_mod": 1,
                    "result_modifier": 1,
                    "shifted_result": 1,
                    "shifted_sum": 2,
                    "sum": 15,
                    "sum_exp": 1,
                    "sum_input3_shifted": 1,
                    "sum_result": 2,
                    "sum_value": 1,
                    "temp2": 1,
                    "total": 1
                },
                "param_1": {
                    "input1": 7,
                    "input_1": 12,
                    "input_a": 1,
                    "input_param1": 3,
                    "input_value1": 4,
                    "input_value_1": 1,
                    "num1": 2,
                    "number1": 1
                },
                "param_2": {
                    "input2": 7,
                    "input_2": 12,
                    "input_b": 1,
                    "input_param2": 3,
                    "input_value2": 4,
                    "input_value_2": 1,
                    "num2": 2,
                    "number2": 1
                },
                "param_3": {
                    "additional_value": 1,
                    "count": 1,
                    "exp": 1,
                    "exponent": 5,
                    "input3": 1,
                    "input_3": 3,
                    "input_c": 1,
                    "input_param3": 3,
                    "loop_count": 1,
                    "loop_counter": 1,
                    "modifier": 5,
                    "offset": 2,
                    "param_3": 1,
                    "shift_amount": 1,
                    "shift_count": 1,
                    "shift_value": 1,
                    "threshold": 1,
                    "value": 1
                },
                "param_4": {
                    "additional_param": 1,
                    "constant": 6,
                    "constant_value": 1,
                    "dummy": 1,
                    "input4": 1,
                    "input_4": 3,
                    "input_d": 1,
                    "input_param4": 3,
                    "param4": 2,
                    "param_4": 5,
                    "parameter4": 1,
                    "undefined_arg": 1,
                    "undefined_param": 3,
                    "unused": 2
                },
                "uVar1": {
                    "result": 1,
                    "shift_amount": 1,
                    "shifted_bits": 2,
                    "shifted_input": 5,
                    "shifted_input2": 3,
                    "shifted_input_2": 5,
                    "shifted_num": 1,
                    "shifted_num2": 1,
                    "shifted_number2": 1,
                    "shifted_param2": 1,
                    "shifted_result": 2,
                    "shifted_value": 7,
                    "temp1": 1
                },
                "uVar3": {
                    "high_bits": 9,
                    "high_part": 1,
                    "input2_upper": 1,
                    "input_1_high": 1,
                    "lower_32_of_concatenated_params": 1,
                    "lower_bits": 1,
                    "masked_value": 1,
                    "shifted_input_1": 1,
                    "shifted_input_hi": 1,
                    "shifted_param1": 1,
                    "temp3": 1,
                    "upper_32_bits": 1,
                    "upper_bits": 8,
                    "upper_half": 1,
                    "upper_num2": 1,
                    "upper_value": 1
                },
                "uVar4": {
                    "combined_input": 4,
                    "combined_inputs": 5,
                    "combined_value": 2,
                    "combined_values": 1,
                    "concat_nums": 1,
                    "concatenated_input": 2,
                    "concatenated_inputs": 5,
                    "concatenated_numbers": 1,
                    "concatenated_nums": 1,
                    "concatenated_params": 1,
                    "concatenated_value": 2,
                    "concatenated_values": 3,
                    "concatenated_vars": 1,
                    "converted_input": 1,
                    "temp4": 1
                }
            },
            "called": [
                "FUN_080082d4",
                "FUN_08008640"
            ],
            "calling": [
                "FUN_0800a5a0"
            ],
            "code": "\nuint calculate_result_0800b2e8(uint input_1,uint input_2,int exponent,undefined4 constant)\n\n{\n  uint shifted_value;\n  int sum;\n  uint high_bits;\n  undefined8 concatenated_inputs;\n  \n  concatenated_inputs = concatenate_values(input_2,input_1);\n  shifted_value = (input_2 << 1) >> 0x15;\n  if (shifted_value == 0) {\n    if ((input_1 | input_2 & 0x7fffffff) == 0) {\n      return input_1;\n    }\n    concatenated_inputs = multiply_double(input_1,input_2,0,0x43500000);\n    if (exponent < -50000) goto LAB_0800b34a;\n    shifted_value = ((uint)((int)((ulonglong)concatenated_inputs >> 0x20) << 1) >> 0x15) - 0x36;\n  }\n  else if (shifted_value == 0x7ff) {\n    shifted_value = add_double(input_1,input_2,input_1,input_2,constant);\n    return shifted_value;\n  }\n  high_bits = (uint)((ulonglong)concatenated_inputs >> 0x20);\n  sum = shifted_value + exponent;\n  if (sum < 0x7ff) {\n    if (0 < sum) {\n      return (uint)concatenated_inputs;\n    }\n    if (sum + 0x35 < 0 == signed_overflow_check(sum,0x35)) {\n      shifted_value = multiply_double((uint)concatenated_inputs,high_bits & 0x800fffff | (sum + 0x36) * 0x100000,0,0x3c900000);\n      return shifted_value;\n    }\n    if (exponent < 0xc351) {\n      concatenated_inputs = concatenate_values(high_bits & 0x80000000 | 0x1a56e1f,0xc2f8f359);\nLAB_0800b34a:\n      shifted_value = multiply_double((int)concatenated_inputs,(int)((ulonglong)concatenated_inputs >> 0x20),0xc2f8f359,0x1a56e1f);\n      return shifted_value;\n    }\n  }\n  shifted_value = multiply_double(0x8800759c,high_bits & 0x80000000 | 0x7e37e43c,0x8800759c,0x7e37e43c);\n  return shifted_value;\n}\n\n",
            "current_name": "calculate_result_0800b2e8",
            "entrypoint": "0x0800b2e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "CONCAT44": "concatenate_values",
                "FUN_0800b2e8": "calculate_result_0800b2e8",
                "SCARRY4": "signed_overflow_check",
                "__aeabi_dadd": "add_double",
                "__muldf3": "multiply_double",
                "iVar2": "sum",
                "param_1": "input_1",
                "param_2": "input_2",
                "param_3": "exponent",
                "param_4": "constant",
                "uVar1": "shifted_value",
                "uVar3": "high_bits",
                "uVar4": "concatenated_inputs"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3dc": {
            "additional_data": {
                "DAT_20000018": {
                    "dat_value": 1,
                    "data": 11,
                    "data_address": 1,
                    "data_offset": 2,
                    "data_variable": 1,
                    "global_data": 1,
                    "global_value": 3,
                    "global_variable": 3,
                    "result": 1
                },
                "FUN_0800b3dc": {
                    "get_dat_value": 1,
                    "get_data": 12,
                    "get_data_address": 2,
                    "get_data_offset": 2,
                    "get_data_value": 6,
                    "get_data_variable": 1,
                    "get_global_data": 2,
                    "get_global_value": 2,
                    "get_global_variable": 3
                }
            },
            "called": [],
            "calling": [
                "FUN_080098d0",
                "FUN_0800981c"
            ],
            "code": "\nundefined4 get_data_value_0800b3dc(void)\n\n{\n  return DAT_20000018;\n}\n\n",
            "current_name": "get_data_value_0800b3dc",
            "entrypoint": "0x0800b3dc",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3dc": "get_data_value_0800b3dc"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b3e8": {
            "additional_data": {
                "FUNC_0800b4d0": {
                    "func1": 1,
                    "function2": 1,
                    "function_1": 1,
                    "perform_action1": 1,
                    "subfunction_1": 1
                },
                "FUNC_0800b5b0": {
                    "func2": 1,
                    "function3": 1,
                    "function_2": 1,
                    "perform_action2": 1,
                    "subfunction_2": 1
                },
                "FUN_080001ac": {
                    "execute_function_with_params": 2,
                    "execute_sub_function": 1,
                    "execute_subfunction": 1,
                    "function1": 1
                },
                "FUN_0800b3e8": {
                    "execute_init_and_subfunctions": 1,
                    "execute_init_functions": 1,
                    "execute_initialization": 2,
                    "initialize_and_call_functions": 5,
                    "initialize_and_call_subfunctions": 5,
                    "initialize_and_execute": 4,
                    "initialize_and_execute_functions": 6,
                    "initialize_and_execute_subfunctions": 5,
                    "initialize_and_run_subfunctions": 1,
                    "run_initialization": 1
                },
                "iVar1": {
                    "counter": 12,
                    "iteration": 1,
                    "iteration_count": 14,
                    "iteration_counter": 3,
                    "loop_index": 1
                },
                "ppcVar2": {
                    "function_list": 2,
                    "function_pointer": 3,
                    "function_pointer_array": 9,
                    "function_pointer_class": 1,
                    "function_pointers": 15,
                    "function_ptr_array": 1
                }
            },
            "called": [
                "FUN_080001ac",
                "FUN_0800b4d0",
                "FUN_0800b5b0"
            ],
            "calling": [
                "FUN_080092c4"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b3f4) */\n/* WARNING: Removing unreachable block (ram,0x0800b3f6) */\n\nvoid initialize_and_execute_functions_0800b3e8(void)\n\n{\n  int iteration_count;\n  code **function_pointers;\n  \n  _init();\n  iteration_count = 0;\n  function_pointers = (code **)&DAT_0800c0b4;\n  do {\n    iteration_count = iteration_count + 1;\n    (**function_pointers)();\n    function_pointers = function_pointers + 1;\n  } while (iteration_count != 2);\n  return;\n}\n\n",
            "current_name": "initialize_and_execute_functions_0800b3e8",
            "entrypoint": "0x0800b3e8",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b3e8": "initialize_and_execute_functions_0800b3e8",
                "iVar1": "iteration_count",
                "ppcVar2": "function_pointers"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b430": {
            "additional_data": {
                "FUN_0800b430": {
                    "clear_memory": 1,
                    "copy_byte": 1,
                    "copy_data_to_memory": 2,
                    "fill_array_with_byte": 1,
                    "fill_buffer": 2,
                    "fill_buffer_with_byte": 1,
                    "fill_buffer_with_bytes": 1,
                    "fill_buffer_with_data": 1,
                    "fill_memory": 3,
                    "fill_memory_with_byte": 3,
                    "initialize_memory": 2,
                    "memset": 7,
                    "memset_uint_to_value": 1,
                    "memset_with_alignment": 1,
                    "memset_with_value": 2,
                    "zero_fill_buffer": 1
                },
                "bVar5": {
                    "is_count_zero": 3,
                    "is_empty": 1,
                    "is_finished": 4,
                    "is_last_iteration": 2,
                    "is_last_round": 1,
                    "is_length_zero": 1,
                    "is_remaining_zero": 1,
                    "is_size_zero": 5,
                    "is_zero": 7,
                    "is_zero_bytes": 1,
                    "is_zero_remaining_size": 1,
                    "is_zero_size": 3,
                    "reached_end": 1
                },
                "joined_r0x0800b4a8": {
                    "end_of_function": 2,
                    "end_of_loop": 1
                },
                "param_1": {
                    "array": 1,
                    "buffer": 8,
                    "dest": 10,
                    "dest_ptr": 2,
                    "destination": 7,
                    "dst": 1,
                    "memory_address": 1,
                    "output_buffer": 1
                },
                "param_2": {
                    "byte": 3,
                    "byte_value": 2,
                    "data": 2,
                    "src": 1,
                    "value": 23
                },
                "param_3": {
                    "count": 5,
                    "length": 5,
                    "n": 1,
                    "num": 1,
                    "num_bytes": 3,
                    "num_elements": 1,
                    "size": 15
                },
                "puVar1": {
                    "buffer_ptr": 2,
                    "cur_dest_ptr": 1,
                    "current": 2,
                    "current_address": 1,
                    "current_element": 1,
                    "current_pointer": 1,
                    "current_ptr": 2,
                    "dest_aligned": 1,
                    "dest_pointer": 2,
                    "dest_ptr": 13,
                    "dst_ptr": 1,
                    "p_buffer": 2,
                    "ptr": 1,
                    "ptr_dest": 1
                },
                "puVar2": {
                    "current_dest_ptr": 1,
                    "dest_ptr_temp": 1,
                    "dst_ptr_tmp": 1,
                    "loop_ptr": 1,
                    "new_ptr": 1,
                    "next": 2,
                    "next_address": 1,
                    "next_buffer_ptr": 1,
                    "next_dest_pointer": 1,
                    "next_dest_ptr": 2,
                    "next_element": 1,
                    "next_pointer": 1,
                    "next_ptr": 3,
                    "p_buffer2": 1,
                    "p_temp": 1,
                    "ptr_dest_elem": 1,
                    "ptr_tmp": 1,
                    "source_ptr": 1,
                    "src_ptr": 3,
                    "temp": 1,
                    "temp_pointer": 1,
                    "temp_ptr": 4
                },
                "uVar3": {
                    "count": 1,
                    "remaining": 5,
                    "remaining_bytes": 3,
                    "remaining_count": 4,
                    "remaining_elements": 1,
                    "remaining_length": 4,
                    "remaining_size": 11,
                    "size_left": 1,
                    "temp_size": 1
                },
                "uVar4": {
                    "block_value": 1,
                    "byte_pattern": 1,
                    "byte_value": 1,
                    "byte_value_combined": 1,
                    "combined_value": 1,
                    "concatenated_byte": 1,
                    "concatenated_value": 1,
                    "data_replicated": 1,
                    "expanded_value": 1,
                    "fill_data": 1,
                    "fill_pattern": 1,
                    "fill_value": 5,
                    "filled_value": 1,
                    "four_bytes": 2,
                    "new_value": 1,
                    "packed_value": 2,
                    "repeated_value": 1,
                    "value32": 3,
                    "value_32bit": 1,
                    "value_concat": 1,
                    "value_concatenated": 1,
                    "value_duplicate": 1,
                    "value_replicated": 1
                }
            },
            "called": [],
            "calling": [
                "FUN_08001ddc",
                "FUN_08004d7c",
                "FUN_08005814",
                "FUN_080079c0",
                "FUN_08002f24",
                "FUN_080005b4",
                "FUN_080004ac",
                "FUN_080002f0",
                "FUN_08001994",
                "FUN_080024c4"
            ],
            "code": "\nvoid memset_with_value_0800b430(undefined4 *dest,undefined value,uint size)\n\n{\n  undefined4 *dest_ptr;\n  undefined4 *temp_ptr;\n  uint remaining_size;\n  undefined4 fill_value;\n  bool is_zero;\n  \n  if (((uint)dest & 3) != 0) {\n    remaining_size = size - 1;\n    dest_ptr = dest;\n    if (size == 0) {\n      return;\n    }\n    while( true ) {\n      dest = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      size = remaining_size;\n      if (((uint)dest & 3) == 0) break;\n      is_zero = remaining_size == 0;\n      remaining_size = remaining_size - 1;\n      dest_ptr = dest;\n      if (is_zero) {\n        return;\n      }\n    }\n  }\n  if (3 < size) {\n    fill_value = CONCAT22(CONCAT11(value,value),CONCAT11(value,value));\n    if (0xf < size) {\n      dest_ptr = dest + 4;\n      do {\n        dest_ptr[-4] = fill_value;\n        dest_ptr[-3] = fill_value;\n        dest_ptr[-2] = fill_value;\n        dest_ptr[-1] = fill_value;\n        dest_ptr = dest_ptr + 4;\n      } while (dest_ptr != (undefined4 *)((int)dest + (size - 0x10 & 0xfffffff0) + 0x20));\n      remaining_size = size & 0xc;\n      dest = dest + ((size - 0x10 >> 4) + 1) * 4;\n      size = size & 0xf;\n      if (remaining_size == 0) goto end_of_function;\n    }\n    dest_ptr = (undefined4 *)((size - 4 & 0xfffffffc) + 4 + (int)dest);\n    do {\n      temp_ptr = dest + 1;\n      *dest = fill_value;\n      dest = temp_ptr;\n    } while (dest_ptr != temp_ptr);\n    size = size & 3;\n    dest = dest_ptr;\n  }\nend_of_function:\n  if (size != 0) {\n    dest_ptr = dest;\n    do {\n      temp_ptr = (undefined4 *)((int)dest_ptr + 1);\n      *(undefined *)dest_ptr = value;\n      dest_ptr = temp_ptr;\n    } while ((undefined4 *)(size + (int)dest) != temp_ptr);\n  }\n  return;\n}\n\n",
            "current_name": "memset_with_value_0800b430",
            "entrypoint": "0x0800b430",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b430": "memset_with_value_0800b430",
                "bVar5": "is_zero",
                "joined_r0x0800b4a8": "end_of_function",
                "param_1": "dest",
                "param_2": "value",
                "param_3": "size",
                "puVar1": "dest_ptr",
                "puVar2": "temp_ptr",
                "uVar3": "remaining_size",
                "uVar4": "fill_value"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b4d0": {
            "called": [
                "FUN_0800b524"
            ],
            "calling": [
                "FUN_0800b3e8"
            ],
            "code": "\n/* WARNING: Removing unreachable block (ram,0x0800b4d4) */\n\nvoid FUNC_0800b4d0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b4d0",
            "entrypoint": "0x0800b4d0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b4d0": "FUNC_0800b4d0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b51c": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b51c(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b51c",
            "entrypoint": "0x0800b51c",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b51c": "FUNC_0800b51c"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b520": {
            "called": [],
            "calling": [
                "FUN_0800b524"
            ],
            "code": "\nvoid FUNC_0800b520(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b520",
            "entrypoint": "0x0800b520",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b520": "FUNC_0800b520"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b524": {
            "additional_data": {
                "DAT_20000168": {
                    "data_storage": 1,
                    "ptr_to_data": 1
                },
                "DAT_20000448": {
                    "lock_data": 1,
                    "lock_data2": 1
                },
                "FUNC_0800b51c": {
                    "lock_acquire_recursive": 1
                },
                "FUNC_0800b520": {
                    "lock_release_recursive": 1
                },
                "FUN_0800b524": {
                    "acquire_lock_and_add_param": 1,
                    "add_data_to_buffer": 1,
                    "add_element_to_queue": 1,
                    "add_entry_to_table": 1,
                    "add_or_update_parameter": 1,
                    "add_param_value": 1,
                    "insert_data_into_array": 1,
                    "modify_data": 1,
                    "process_param": 1,
                    "register_data": 2,
                    "register_value": 1,
                    "store_function_parameter": 1,
                    "store_value_and_update_counter": 1,
                    "update_data": 15,
                    "update_data_entry": 1,
                    "update_lock": 1
                },
                "__retarget_lock_acquire_recursive": {
                    "acquire_lock": 1,
                    "acquire_lock_recursive": 1
                },
                "__retarget_lock_release_recursive": {
                    "release_lock": 1,
                    "release_lock_recursive": 1
                },
                "param_1": {
                    "action": 3,
                    "action_type": 1,
                    "condition": 1,
                    "data_action": 1,
                    "data_type": 4,
                    "flag": 1,
                    "function_type": 1,
                    "input_param": 1,
                    "input_type": 2,
                    "lock_type": 1,
                    "operation": 1,
                    "operation_type": 1,
                    "param_type": 2,
                    "queue_type": 1,
                    "state": 1,
                    "status": 1,
                    "type": 8
                },
                "param_2": {
                    "data": 8,
                    "data_2": 1,
                    "data_to_update": 1,
                    "data_value": 1,
                    "data_value1": 1,
                    "element": 1,
                    "input_value": 1,
                    "new_value": 2,
                    "param2": 1,
                    "param_2": 1,
                    "param_value": 1,
                    "parameter_2": 1,
                    "value": 8,
                    "value1": 3
                },
                "param_3": {
                    "data": 1,
                    "data1": 6,
                    "data_3": 1,
                    "data_value": 1,
                    "data_value2": 1,
                    "first_value": 1,
                    "lock_acquire_value": 1,
                    "new_data": 1,
                    "new_param": 2,
                    "new_value": 1,
                    "param1": 1,
                    "param3": 3,
                    "param_3": 1,
                    "param_a": 1,
                    "param_value1": 1,
                    "parameter_3": 1,
                    "value1": 3,
                    "value2": 3,
                    "value_to_store": 1
                },
                "param_4": {
                    "additional_data": 1,
                    "another_param": 1,
                    "data2": 6,
                    "data_4": 1,
                    "data_value3": 1,
                    "extra_data": 3,
                    "lock_release_value": 1,
                    "param2": 1,
                    "param4": 4,
                    "param_4": 1,
                    "param_b": 1,
                    "param_value": 1,
                    "param_value2": 1,
                    "parameter_4": 1,
                    "second_value": 1,
                    "value2": 3,
                    "value3": 3
                },
                "puVar1": {
                    "buffer_ptr": 1,
                    "current_array": 1,
                    "current_data": 4,
                    "current_entry": 1,
                    "data_buffer": 1,
                    "data_pointer": 2,
                    "data_ptr": 13,
                    "data_struct": 1,
                    "entry_pointer": 1,
                    "entry_ptr": 1,
                    "lock_data": 1,
                    "param_array": 2,
                    "ptr": 1,
                    "queue_ptr": 1
                },
                "uVar2": {
                    "result": 11,
                    "return_value": 19,
                    "status": 1
                },
                "uVar3": {
                    "bit_mask": 27,
                    "bit_shift": 2,
                    "mask": 2
                },
                "uVar4": {
                    "array_length": 1,
                    "array_size": 2,
                    "buffer_size": 1,
                    "count": 7,
                    "counter": 6,
                    "current_count": 3,
                    "current_index": 2,
                    "current_size": 1,
                    "data_count": 3,
                    "data_index": 2,
                    "entry_index": 2,
                    "queue_size": 1
                }
            },
            "called": [
                "FUN_0800b51c",
                "FUN_0800b520"
            ],
            "calling": [
                "FUN_0800b4d0"
            ],
            "code": "\nundefined4 update_data_entry_0800b524(int type,undefined4 data,undefined4 data1,undefined4 data2)\n\n{\n  undefined *data_ptr;\n  undefined4 return_value;\n  uint bit_mask;\n  uint count;\n  \n  acquire_lock(DAT_20000448);\n  if (DAT_20000168 == (undefined *)0x0) {\n    DAT_20000168 = &DAT_2000016c;\n  }\n  data_ptr = DAT_20000168;\n  count = *(uint *)(DAT_20000168 + 4);\n  if ((int)count < 0x20) {\n    if (type != 0) {\n      *(undefined4 *)(DAT_20000168 + count * 4 + 0x88) = data1;\n      bit_mask = 1 << (count & 0xff);\n      *(uint *)(data_ptr + 0x188) = *(uint *)(data_ptr + 0x188) | bit_mask;\n      *(undefined4 *)(data_ptr + count * 4 + 0x108) = data2;\n      if (type == 2) {\n        *(uint *)(data_ptr + 0x18c) = bit_mask | *(uint *)(data_ptr + 0x18c);\n      }\n    }\n    return_value = DAT_20000448;\n    *(uint *)(data_ptr + 4) = count + 1;\n    *(undefined4 *)(data_ptr + (count + 2) * 4) = data;\n    release_lock_recursive(return_value);\n    return_value = 0;\n  }\n  else {\n    release_lock_recursive(DAT_20000448);\n    return_value = 0xffffffff;\n  }\n  return return_value;\n}\n\n",
            "current_name": "update_data_entry_0800b524",
            "entrypoint": "0x0800b524",
            "imported": false,
            "improved": true,
            "renaming": {
                "FUN_0800b524": "update_data_entry_0800b524",
                "__retarget_lock_acquire_recursive": "acquire_lock",
                "__retarget_lock_release_recursive": "release_lock_recursive",
                "param_1": "type",
                "param_2": "data",
                "param_3": "data1",
                "param_4": "data2",
                "puVar1": "data_ptr",
                "uVar2": "return_value",
                "uVar3": "bit_mask",
                "uVar4": "count"
            },
            "skipped": false,
            "tags": []
        },
        "FUN_0800b5b0": {
            "called": [],
            "calling": [
                "FUN_080001ac",
                "FUN_0800b3e8",
                "FUN_08000188"
            ],
            "code": "\nvoid FUNC_0800b5b0(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5b0",
            "entrypoint": "0x0800b5b0",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5b0": "FUNC_0800b5b0"
            },
            "skipped": true,
            "tags": []
        },
        "FUN_0800b5bc": {
            "called": [],
            "calling": [],
            "code": "\nvoid FUNC_0800b5bc(void)\n\n{\n  return;\n}\n\n",
            "current_name": "FUNC_0800b5bc",
            "entrypoint": "0x0800b5bc",
            "imported": false,
            "improved": false,
            "renaming": {
                "FUN_0800b5bc": "FUNC_0800b5bc"
            },
            "skipped": true,
            "tags": []
        }
    },
    "layers": [
        [
            "FUN_08000188",
            "FUN_080001ac",
            "FUN_080001f8",
            "FUN_08000210",
            "FUN_08000220",
            "FUN_08000268",
            "FUN_080002a0",
            "FUN_080002b6",
            "FUN_080002f0",
            "FUN_08000310",
            "FUN_08000340",
            "FUN_08000374",
            "FUN_080003ec",
            "FUN_08000478",
            "FUN_080004ac",
            "FUN_080004fc",
            "FUN_0800056c",
            "FUN_080005b4",
            "FUN_0800184c",
            "FUN_080018cc",
            "FUN_080018fc",
            "FUN_0800192c",
            "FUN_0800195c",
            "FUN_08001d4c",
            "FUN_08001ddc",
            "FUN_08001e98",
            "FUN_08001f00",
            "FUN_08002408",
            "FUN_080024c4",
            "FUN_080025e8",
            "FUN_08002638",
            "FUN_0800283a",
            "FUN_08002870",
            "FUN_08002896",
            "FUN_080028bc",
            "FUN_08002908",
            "FUN_08002978",
            "FUN_080029d8",
            "FUN_08002a94",
            "FUN_08002afc",
            "FUN_08002ba8",
            "FUN_08002c18",
            "FUN_08002e08",
            "FUN_08002edc",
            "FUN_08002ef0",
            "FUN_08002f24",
            "FUN_08002f40",
            "FUN_08002f74",
            "FUN_08002fac",
            "FUN_08002fd4",
            "FUN_08003004",
            "FUN_080035ec",
            "FUN_08003618",
            "FUN_0800369c",
            "FUN_080036c6",
            "FUN_080036f0",
            "FUN_08003740",
            "FUN_0800375c",
            "FUN_08003778",
            "FUN_080037fc",
            "FUN_08003826",
            "FUN_08003980",
            "FUN_080039a0",
            "FUN_080039bc",
            "FUN_08003a18",
            "FUN_08003a74",
            "FUN_08003b98",
            "FUN_08003f34",
            "FUN_08004030",
            "FUN_08004148",
            "FUN_080041a0",
            "FUN_08004228",
            "FUN_0800423c",
            "FUN_08004250",
            "FUN_080044e8",
            "FUN_080046d0",
            "FUN_08004900",
            "FUN_08004940",
            "FUN_08004bc0",
            "FUN_08004bf4",
            "FUN_08004c2a",
            "FUN_08004c48",
            "FUN_08004d2c",
            "FUN_08004d7c",
            "FUN_08004dd2",
            "FUN_08004e30",
            "FUN_080051b4",
            "FUN_08005238",
            "FUN_08005250",
            "FUN_0800525c",
            "FUN_080052ac",
            "FUN_080052dc",
            "FUN_08005324",
            "FUN_08005360",
            "FUN_080053a0",
            "FUN_08005760",
            "FUN_08005778",
            "FUN_08005790",
            "FUN_080057e4",
            "FUN_08005814",
            "FUN_0800583c",
            "FUN_0800585c",
            "FUN_0800587c",
            "FUN_080058a0",
            "FUN_08005900",
            "FUN_0800597c",
            "FUN_08005984",
            "FUN_080059b4",
            "FUN_080059f8",
            "FUN_08005a68",
            "FUN_08005a84",
            "FUN_08005a98",
            "FUN_08005bdc",
            "FUN_08005cec",
            "FUN_0800640c",
            "FUN_080064ec",
            "FUN_08006628",
            "FUN_08006680",
            "FUN_080066cc",
            "FUN_08006950",
            "FUN_08006998",
            "FUN_080069b4",
            "FUN_080069e4",
            "FUN_08006a18",
            "FUN_08006a58",
            "FUN_08006a8c",
            "FUN_08006ac0",
            "FUN_08006b00",
            "FUN_08006b54",
            "FUN_08006ba0",
            "FUN_08006c04",
            "FUN_08006c70",
            "FUN_08006c9c",
            "FUN_08006ce0",
            "FUN_08006cf6",
            "FUN_08006d4a",
            "FUN_08006d66",
            "FUN_08006d72",
            "FUN_08006d8a",
            "FUN_08006d98",
            "FUN_08006dc4",
            "FUN_08006de0",
            "FUN_08006dfe",
            "FUN_08006e1a",
            "FUN_08006e88",
            "FUN_0800733e",
            "FUN_0800738e",
            "FUN_080073d4",
            "FUN_08007402",
            "FUN_08007430",
            "FUN_08007436",
            "FUN_080074c8",
            "FUN_08007520",
            "FUN_08007540",
            "FUN_0800756c",
            "FUN_080076c8",
            "FUN_08007756",
            "FUN_0800778c",
            "FUN_08007854",
            "FUN_08007884",
            "FUN_080078f4",
            "FUN_080079c0",
            "FUN_080079e0",
            "FUN_08007a10",
            "FUN_08007a70",
            "FUN_08007ad0",
            "FUN_08007b70",
            "FUN_08007bc2",
            "FUN_08007bf0",
            "FUN_08007c40",
            "FUN_08007c5e",
            "FUN_08007c7c",
            "FUN_08007d08",
            "FUN_08007da8",
            "FUN_08007e08",
            "FUN_08007e1c",
            "FUN_08007e58",
            "FUN_08007e84",
            "FUN_08007ea4",
            "FUN_08007f54",
            "FUN_08008190",
            "FUN_08008250",
            "FUN_0800826a",
            "FUN_08008286",
            "FUN_080082d0",
            "FUN_080082d4",
            "FUN_0800854c",
            "FUN_0800856c",
            "FUN_08008590",
            "FUN_0800881c",
            "FUN_08008a02",
            "FUN_08008a74",
            "FUN_08008af0",
            "FUN_08008b00",
            "FUN_08008b10",
            "FUN_08008b24",
            "FUN_08008b4c",
            "FUN_08008b60",
            "FUN_08008b74",
            "FUN_08008ba0",
            "FUN_08008bf0",
            "FUN_08008c30",
            "FUN_08008cd8",
            "FUN_08008cdc",
            "FUN_08008e3c",
            "FUN_08008e44",
            "FUN_08008eec",
            "FUN_08009054",
            "FUN_0800919c",
            "FUN_080091fc",
            "FUN_08009204",
            "FUN_08009214",
            "FUN_08009228",
            "FUN_0800923c",
            "FUN_08009250",
            "FUN_08009264",
            "FUN_08009278",
            "FUN_080092c4",
            "FUN_08009318",
            "FUN_08009410",
            "FUN_080094c0",
            "FUN_080095b8",
            "FUN_08009654",
            "FUN_080096e8",
            "FUN_08009798",
            "FUN_0800981c",
            "FUN_080098d0",
            "FUN_08009990",
            "FUN_08009b24",
            "FUN_08009d78",
            "FUN_0800a1bc",
            "FUN_0800a348",
            "FUN_0800a5a0",
            "FUN_0800adf0",
            "FUN_0800af78",
            "FUN_0800b2d4",
            "FUN_0800b2e0",
            "FUN_0800b2e8",
            "FUN_0800b3dc",
            "FUN_0800b3e8",
            "FUN_0800b430",
            "FUN_0800b524"
        ],
        [
            "FUN_08001994",
            "FUN_08005c30",
            "FUN_08006d2e",
            "FUN_08007930",
            "FUN_08008640",
            "FUN_08008894"
        ],
        [
            "FUN_0800618c"
        ]
    ],
    "locked_functions": [],
    "used_tokens": 930037
}